[
  {
    "owner": "zeromicro",
    "repo": "zero-doc",
    "content": "TITLE: Generating a New API Service with goctl\nDESCRIPTION: Commands to quickly generate a new API service using goctl, initialize a Go module, and run the generated service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro/brief.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngoctl api new greet\ncd greet\ngo mod init\ngo mod tidy\ngo run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing go-zero Demo Project Structure\nDESCRIPTION: Shell commands to create and initialize a new go-zero demo project directory with Go modules support. Creates a directory in the user's home folder and initializes it as a Go module.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/concept-introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~\n$ mkdir go-zero-demo && cd go-zero-demo\n$ go mod init go-zero-demo\n```\n\n----------------------------------------\n\nTITLE: Implementing Shorten Logic for URL Shortener in Go\nDESCRIPTION: Updates the Shorten function in shortenlogic.go to generate a short URL and insert it into the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\n  // 手动代码开始，生成短链接\n  key := hash.Md5Hex([]byte(in.Url))[:6]\n  _, err := l.svcCtx.Model.Insert(model.Shorturl{\n    Shorten: key,\n    Url:     in.Url,\n  })\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ShortenResp{\n    Shorten: key,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Logic\nDESCRIPTION: This Go code snippet implements the login logic in the `LoginLogic` struct. It validates the username and password, retrieves user information from the database, checks the password, and generates a JWT token upon successful authentication. The JWT token includes user information, expiration time, and refresh time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *LoginLogic) Login(req types.LoginReq) (*types.LoginReply, error) {\n    if len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 {\n        return nil, errors.New(\"参数错误\")\n    }\n    \n    userInfo, err := l.svcCtx.UserModel.FindOneByNumber(req.Username)\n    switch err {\n    case nil:\n    case model.ErrNotFound:\n        return nil, errors.New(\"用户名不存在\")\n    default:\n        return nil, err\n    }\n    \n    if userInfo.Password != req.Password {\n        return nil, errors.New(\"用户密码不正确\")\n    }\n    \n    // ---start---\n    now := time.Now().Unix()\n    accessExpire := l.svcCtx.Config.Auth.AccessExpire\n    jwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, l.svcCtx.Config.Auth.AccessExpire, userInfo.Id)\n    if err != nil {\n        return nil, err\n    }\n    // ---end---\n    \n    return &types.LoginReply{\n        Id:           userInfo.Id,\n        Name:         userInfo.Name,\n        Gender:       userInfo.Gender,\n        AccessToken:  jwtToken,\n        AccessExpire: now + accessExpire,\n        RefreshAfter: now + accessExpire/2,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: etcd-based Service Discovery Configuration in go-zero\nDESCRIPTION: Dynamic service discovery method using etcd cluster for registering and discovering service nodes. Supports dynamic node addition and removal without configuration modifications.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/discovery.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nRpc:\n  Etcd:\n     Hosts:\n     - 192.168.0.111:2379\n     - 192.168.0.112:2379\n     - 192.168.0.113:2379\n     Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: Detailed Cache Processing Logic in Go-Zero\nDESCRIPTION: The doTake method implementation that handles cache retrieval logic with protection against cache penetration, breakdown, and error management. It includes statistics tracking for cache hits and misses while ensuring DB protection during high traffic.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// v - 需要读取的数据对象\n// key - 缓存key\n// query - 用来从DB读取完整数据的方法\n// cacheVal - 用来写缓存的方法\nfunc (c cacheNode) doTake(v interface{}, key string, query func(v interface{}) error,\n  cacheVal func(v interface{}) error) error {\n  // 用barrier来防止缓存击穿，确保一个进程内只有一个请求去加载key对应的数据\n  val, fresh, err := c.barrier.DoEx(key, func() (interface{}, error) {\n    // 从cache里读取数据\n    if err := c.doGetCache(key, v); err != nil {\n      // 如果是预先放进来的placeholder（用来防止缓存穿透）的，那么就返回预设的errNotFound\n      // 如果是未知错误，那么就直接返回，因为我们不能放弃缓存出错而直接把所有请求去请求DB，\n      // 这样在高并发的场景下会把DB打挂掉的\n      if err == errPlaceholder {\n        return nil, c.errNotFound\n      } else if err != c.errNotFound {\n        // why we just return the error instead of query from db,\n        // because we don't allow the disaster pass to the DBs.\n        // fail fast, in case we bring down the dbs.\n        return nil, err\n      }\n\n      // 请求DB\n      // 如果返回的error是errNotFound，那么我们就需要在缓存里设置placeholder，防止缓存穿透\n      if err = query(v); err == c.errNotFound {\n        if err = c.setCacheWithNotFound(key); err != nil {\n          logx.Error(err)\n        }\n\n        return nil, c.errNotFound\n      } else if err != nil {\n        // 统计DB失败\n        c.stat.IncrementDbFails()\n        return nil, err\n      }\n\n      // 把数据写入缓存\n      if err = cacheVal(v); err != nil {\n        logx.Error(err)\n      }\n    }\n    \n    // 返回json序列化的数据\n    return jsonx.Marshal(v)\n  })\n  if err != nil {\n    return err\n  }\n  if fresh {\n    return nil\n  }\n\n  // got the result from previous ongoing query\n  c.stat.IncrementTotal()\n  c.stat.IncrementHit()\n\n  // 把数据写入到传入的v对象里\n  return jsonx.Unmarshal(val.([]byte), v)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing REST Server in Go-Zero\nDESCRIPTION: This snippet demonstrates how to set up a basic REST server using Go-Zero. It includes loading configuration, creating a service context, and starting the server.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rest engine.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\n\t\"server/internal/config\"\n\t\"server/internal/handler\"\n\t\"server/internal/svc\"\n\n\t\"github.com/zeromicro/go-zero/core/conf\"\n\t\"github.com/zeromicro/go-zero/rest\"\n)\n\nvar configFile = flag.String(\"f\", \"etc/server-api.yaml\", \"the config file\")\n\nfunc main() {\n\tflag.Parse()\n\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\n\tctx := svc.NewServiceContext(c)\n\tserver := rest.MustNewServer(c.RestConf)\n\tdefer server.Stop()\n\n\thandler.RegisterHandlers(server, ctx)\n\n\tfmt.Printf(\"Starting server at %s:%d...\\n\", c.Host, c.Port)\n\tserver.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrent Dependency Resolution for Product Details using go-zero MapReduce\nDESCRIPTION: This code demonstrates how to use go-zero's Finish function to concurrently fetch data from multiple services (user, store, and order RPCs) when building a product detail page. This pattern significantly reduces API response time by executing dependencies in parallel.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mapreduce.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc productDetail(uid, pid int64) (*ProductDetail, error) {\n\tvar pd ProductDetail\n\terr := mr.Finish(func() (err error) {\n\t\tpd.User, err = userRpc.User(uid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Store, err = storeRpc.Store(pid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Order, err = orderRpc.Order(pid)\n\t\treturn\n\t})\n\n\tif err != nil {\n\t\tlog.Printf(\"product detail error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\treturn &pd, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Batch Data with Validation using go-zero MapReduce\nDESCRIPTION: This snippet shows how to validate a batch of user IDs concurrently using go-zero's MapReduce. It demonstrates the pattern of generating data, processing each item in parallel, and aggregating valid results. The implementation includes early cancellation when an error occurs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mapreduce.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc checkLegal(uids []int64) ([]int64, error) {\n\tr, err := mr.MapReduce(func(source chan<- interface{}) {\n\t\tfor _, uid := range uids {\n\t\t\tsource <- uid\n\t\t}\n\t}, func(item interface{}, writer mr.Writer, cancel func(error)) {\n\t\tuid := item.(int64)\n\t\tok, err := check(uid)\n\t\tif err != nil {\n\t\t\tcancel(err)\n\t\t}\n\t\tif ok {\n\t\t\twriter.Write(uid)\n\t\t}\n\t}, func(pipe <-chan interface{}, writer mr.Writer, cancel func(error)) {\n\t\tvar uids []int64\n\t\tfor p := range pipe {\n\t\t\tuids = append(uids, p.(int64))\n\t\t}\n\t\twriter.Write(uids)\n\t})\n\tif err != nil {\n        log.Printf(\"check error: %v\", err)\n\t\treturn nil, err\n\t}\n\n\treturn r.([]int64), nil\n}\n\nfunc check(uid int64) (bool, error) {\n\t// do something check user legal\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Row with Primary Key Cache in go-zero\nDESCRIPTION: Implements a caching mechanism for retrieving database rows using primary key, with automatic cache population and fallback to database query\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRow(v interface{}, key string, query QueryFn) error {\n  return cc.cache.Take(v, key, func(v interface{}) error {\n    return query(cc.db, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: StartClientSpan function in go-zero\nDESCRIPTION: This code snippet defines the `StartClientSpan` function, which starts a new client span for tracing RPC calls. It checks if a span already exists in the context (from the upstream service). If a span exists, it forks a new span from the existing one, inheriting the trace ID. This function ensures that the tracing context is properly propagated across service boundaries in RPC calls.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc StartClientSpan(ctx context.Context, serviceName, operationName string) (context.Context, tracespec.Trace) {\n    // **1**\n    if span, ok := ctx.Value(tracespec.TracingKey).(*Span); ok {\n        // **2**\n        return span.Fork(ctx, serviceName, operationName)\n    }\n\n    return ctx, emptyNoopSpan\n}\n```\n\n----------------------------------------\n\nTITLE: Checking goctl Version and Configuration\nDESCRIPTION: Command to display the current goctl environment variables including version, OS, architecture, and related tool versions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngoctl env\n```\n\n----------------------------------------\n\nTITLE: Checking Allowance for Load Shedding\nDESCRIPTION: This method checks whether the incoming request should be dropped based on current load and returns a Promise for further processing if allowed. It also handles the statistics for recent dropped requests.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// 降载检查\nfunc (as *adaptiveShedder) Allow() (Promise, error) {\n    // 检查请求是否被丢弃\n    if as.shouldDrop() {\n        // 设置drop时间\n        as.dropTime.Set(timex.Now())\n        // 最近已被drop\n        as.droppedRecently.Set(true)\n        // 返回过载\n        return nil, ErrServiceOverloaded\n    }\n    // 正在处理请求数加1\n    as.addFlying(1)\n    // 这里每个允许的请求都会返回一个新的promise对象\n    // promise内部持有了降载指针对象\n    return &promise{\n        start:   timex.Now(),\n        shedder: as,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bookstore API Gateway Contract\nDESCRIPTION: API definition file that specifies request and response types for adding books and checking book prices in the bookstore service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\taddReq {\n\t\tbook string `form:\"book\"`\n\t\tprice int64 `form:\"price\"`\n\t}\n\t\n\taddResp {\n\t\tok bool `json:\"ok\"`\n\t}\n)\n\ntype (\n\tcheckReq {\n\t\tbook string `form:\"book\"`\n\t}\n\t\n\tcheckResp {\n\t\tfound bool `json:\"found\"`\n\t\tprice int64 `json:\"price\"`\n\t}\n)\n\nservice bookstore-api {\n\t@handler AddHandler\n\tget /add (addReq) returns (addResp)\n\t\n\t@handler CheckHandler\n\tget /check (checkReq) returns (checkResp)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Configuration Struct - Go\nDESCRIPTION: This snippet defines the configuration structure for an API service in Go-Zero. It includes the necessary parameters for authentication, database, cache, and RPC client configuration. The use of nested structs allows for organized grouping of related configuration options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct{\n    rest.RestConf // rest api配置\n    Auth struct { // jwt鉴权配置\n        AccessSecret string // jwt密钥\n        AccessExpire int64 // 有效期，单位：秒\n    }\n    Mysql struct { // 数据库配置，除mysql外，可能还有mongo等其他数据库\n        DataSource string // mysql链接地址，满足 $user:$password@tcp($ip:$port)/$db?$queries 格式即可\n    }\n    CacheRedis cache.CacheConf // redis缓存\n    UserRpc    zrpc.RpcClientConf // rpc client配置\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Records with go-zero MySQL\nDESCRIPTION: Implementation of a method to query multiple records based on criteria, demonstrating how to use QueryRows to populate a slice of struct pointers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(sex int) ([]*User, error) {\n    users := make([]*User, 0)\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where sex=?`\n    err := um.conn.QueryRows(&users, querysql, sex)\n    if err != nil {\n        logx.Errorf(\"usersSex.findOne error, sex=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return users, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Service Configuration Structure in Go\nDESCRIPTION: This code snippet defines the main configuration structure for a Go-Zero API service. It includes REST configuration, authentication settings, database connection details, Redis cache configuration, and RPC client configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct{\n    RestConf // rest api configuration\n    Auth struct { // jwt authentication configuration\n        AccessSecret string // jwt key\n        AccessExpire int64 // expiration date in seconds\n    Mysql struct { // database}\n    Mysql struct { // database configuration, in addition to mysql, there may be other databases such as mongo\n        DataSource string // mysql link address, meet $user:$password@tcp($ip:$port)/$db?$queries format can be\n    }\n    CacheRedis cache.CacheConf // redis cache\n    UserRpc zrpc.RpcClientConf // rpc client configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Transactions with go-zero\nDESCRIPTION: Demonstrates how to perform a transaction in MySQL using go-zero's sqlx package. It includes preparing statements, executing multiple operations, and automatic rollback on error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nvar insertsql = `insert into User(uid, username, mobilephone) values (?, ?, ?)`\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n\n    // 返回任何错误都会回滚事务\n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        logx.Errorf(\"insert userinfo stmt exec: %s\", err)\n        return err\n    }\n\n    // 还可以继续执行 insert/update/delete 相关操作\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Acquisition with Lua Script in go-zero Redis Lock\nDESCRIPTION: Implementation of the Acquire method in go-zero's RedisLock which uses a Lua script to ensure atomicity. The script checks if the key exists with the same ID, extends the expiration time if it does, or sets a new lock with NX and PX options if it doesn't.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-lock.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    redis.call(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2])\n    return \"OK\"\nelse\n    return redis.call(\"SET\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Acquire() (bool, error) {\n\tseconds := atomic.LoadUint32(&rl.seconds)\n  // execute luascript\n\tresp, err := rl.store.Eval(lockCommand, []string{rl.key}, []string{\n\t\trl.id, strconv.Itoa(int(seconds)*millisPerSecond + tolerance)})\n\tif err == red.Nil {\n\t\treturn false, nil\n\t} else if err != nil {\n\t\tlogx.Errorf(\"Error on acquiring lock for %s, %s\", rl.key, err.Error())\n\t\treturn false, err\n\t} else if resp == nil {\n\t\treturn false, nil\n\t}\n\n\treply, ok := resp.(string)\n\tif ok && reply == \"OK\" {\n\t\treturn true, nil\n\t} else {\n\t\tlogx.Errorf(\"Unknown reply when acquiring lock for %s: %v\", rl.key, resp)\n\t\treturn false, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Adaptive Shedder Struct in Go\nDESCRIPTION: This code defines the adaptiveShedder struct that implements the Shedder interface, containing attributes for CPU load thresholds, control over request concurrency, and management of load shedding metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// 自适应降载结构体，需实现 Shedder 接口\nadaptiveShedder struct {\n    // cpu负载临界值\n    // 高于临界值代表高负载需要降载保证服务\n    cpuThreshold int64\n    // 1s内有多少个桶\n    windows int64\n    // 并发数\n    flying int64\n    // 滑动平滑并发数\n    avgFlying float64\n    // 自旋锁，一个服务共用一个降载\n    // 统计当前正在处理的请求数时必须加锁\n    // 无损并发，提高性能\n    avgFlyingLock syncx.SpinLock\n    // 最后一次拒绝时间\n    dropTime *syncx.AtomicDuration\n    // 最近是否被拒绝过\n    droppedRecently *syncx.AtomicBool\n    // 请求数统计，通过滑动时间窗口记录最近一段时间内指标\n    passCounter *collection.RollingWindow\n    // 响应时间统计，通过滑动时间窗口记录最近一段时间内指标\n    rtCounter *collection.RollingWindow\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User RPC Logic\nDESCRIPTION: Go implementation of GetUser RPC method with sample hardcoded response\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n    \"go-zero-demo/mall/user/rpc/internal/svc\"\n    \"go-zero-demo/mall/user/rpc/user\"\n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype GetUserLogic struct {\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n    logx.Logger\n}\n\nfunc NewGetUserLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetUserLogic {\n    return &GetUserLogic{\n        ctx:    ctx,\n        svcCtx: svcCtx,\n        Logger: logx.WithContext(ctx),\n    }\n}\n\nfunc (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) {\n    return &user.UserResponse{\n        Id:   \"1\",\n        Name: \"test\",\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Metrics in P2C Load Balancer (Go)\nDESCRIPTION: This function builds a callback to update node metrics after a request is completed. It calculates EWMA for request latency and success rate, and updates inflight request count. It also handles periodic logging of node statistics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *p2cPicker) buildDoneFunc(c *subConn) func(info balancer.DoneInfo) {\n  start := int64(timex.Now())\n  return func(info balancer.DoneInfo) {\n    // Number of requests being processed minus 1\n    atomic.AddInt64(&c.inflight, -1)\n    now := timex.Now()\n    // Save the time point at the end of this request and retrieve the time point at the last request\n    last := atomic.SwapInt64(&c.last, int64(now))\n    td := int64(now) - last\n    if td < 0 {\n      td = 0\n    }\n    // Calculation of β in EWMA algorithm using the decay function model in Newton's cooling law\n    w := math.Exp(float64(-td) / float64(decayTime))\n    // Save the elapsed time of this request\n    lag := int64(now) - start\n    if lag < 0 {\n      lag = 0\n    }\n    olag := atomic.LoadUint64(&c.lag)\n    if olag == 0 {\n      w = 0\n    }\n    // Calculating EWMA values\n    atomic.StoreUint64(&c.lag, uint64(float64(olag)*w+float64(lag)*(1-w)))\n    success := initSuccess\n    if info.Err != nil && !codes.Acceptable(info.Err) {\n      success = 0\n    }\n    osucc := atomic.LoadUint64(&c.success)\n    atomic.StoreUint64(&c.success, uint64(float64(osucc)*w+float64(success)*(1-w)))\n\n    stamp := p.stamp.Load()\n    if now-stamp >= logInterval {\n      if p.stamp.CompareAndSwap(stamp, now) {\n        p.logStats()\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: P2C Load Balancing Picker Method\nDESCRIPTION: Implementation of Power of Two Choices (P2C) load balancing algorithm's Pick method for selecting optimal server nodes\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *p2cPicker) Pick(ctx context.Context, info balancer.PickInfo) (\n\tconn balancer.SubConn, done func(balancer.DoneInfo), err error) {\n\tp.lock.Lock()\n\tdefer p.lock.Unlock()\n\n\tvar chosen *subConn\n\tswitch len(p.conns) {\n\tcase 0:\n\t\treturn nil, nil, balancer.ErrNoSubConnAvailable\n\tcase 1:\n\t\tchosen = p.choose(p.conns[0], nil)\n\tcase 2:\n\t\tchosen = p.choose(p.conns[0], p.conns[1])\n\tdefault:\n\t\tvar node1, node2 *subConn\n\t\tfor i := 0; i < pickTimes; i++ {\n\t\t\ta := p.r.Intn(len(p.conns))\n\t\t\tb := p.r.Intn(len(p.conns) - 1)\n\t\t\tif b >= a {\n\t\t\t\tb++\n\t\t\t}\n\t\t\tnode1 = p.conns[a]\n\t\t\tnode2 = p.conns[b]\n\t\t\tif node1.healthy() && node2.healthy() {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tchosen = p.choose(node1, node2)\n\t}\n\n\tatomic.AddInt64(&chosen.inflight, 1)\n\tatomic.AddInt64(&chosen.requests, 1)\n\treturn chosen.conn, p.buildDoneFunc(chosen), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl via Go Get/Install Commands\nDESCRIPTION: Commands for installing Goctl using Go module system, with different commands for Go versions before and after 1.16.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Go 1.15 及之前版本\nGO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl@latest\n\n# Go 1.16 及以后版本\ngo install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Transactions\nDESCRIPTION: Shows how to implement transaction operations with automatic rollback on error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/mysql.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar insertsql = `insert into User(uid, username, mobilephone) values (?, ?, ?)`\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n\n    // Any error returned will roll back the transaction\n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        logx.Errorf(\"insert userinfo stmt exec: %s\", err)\n        return err\n    }\n\n    // You can also continue to perform insert/update/delete related operations\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Generating API Template with goctl\nDESCRIPTION: Command to generate an API definition template file using goctl, which creates the base structure for the API gateway.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api -o bookstore.api\n```\n\n----------------------------------------\n\nTITLE: Defining Google Breaker Structure in Go\nDESCRIPTION: Defines the structure `googleBreaker` which holds the configuration and state for the adaptive circuit breaker. It includes the `k` factor, a `RollingWindow` for tracking statistics, and a `Proba` instance for probabilistic decision-making.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/breaker.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"type googleBreaker struct {\\n    k     float64  \\n    stat  *collection.RollingWindow \\n    proba *mathx.Proba \\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing go-zero Greet Service Project\nDESCRIPTION: Sets up a new go-zero project named 'greet' using goctl CLI tool. This creates the basic structure and files for a go-zero API service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo\n$ go mod init go-zero-demo\n$ goctl api new greet\n```\n\n----------------------------------------\n\nTITLE: Querying Data with Primary Key Caching in Go-Zero\nDESCRIPTION: Implementation of QueryRow method in CachedConn for retrieving data using primary key-based caching. The method first tries to fetch data from the cache using the provided key, and if not found, it queries the database and caches the result.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRow(v interface{}, key string, query QueryFn) error {\n  return cc.cache.Take(v, key, func(v interface{}) error {\n    return query(cc.db, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Server YAML Configuration\nDESCRIPTION: YAML configuration file for RPC server including service name, network settings, and database connections.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nName: user.rpc\nListenOn: 127.0.0.1:8080\nEtcd:\n  Hosts:\n    - $etcdHost\n  Key: user.rpc\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Defining Load Shedding Interfaces in Go\nDESCRIPTION: This code snippet defines the Promise and Shedder interfaces used for implementing adaptive load shedding. The Promise interface includes methods for handling successful and failed requests, while the Shedder interface includes a method for checking if a request is allowed, returning a Promise or an error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 回调函数\nPromise interface {\n    // 请求成功时回调此函数\n    Pass()\n    // 请求失败时回调此函数\n    Fail()\n}\n\n// 降载接口定义\nShedder interface {\n    // 降载检查\n    // 1. 允许调用，需手动执行 Promise.accept()/reject()上报实际执行任务结构\n    // 2. 拒绝调用，将会直接返回err：服务过载错误 ErrServiceOverloaded\n    Allow() (Promise, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Etcd Service Registration in zRPC Server\nDESCRIPTION: Method for registering service addresses in etcd during zRPC server startup, enabling service discovery and registration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (ags keepAliveServer) Start(fn RegisterFn) error {\n\tif err := ags.registerEtcd(); err != nil {\n\t\treturn err\n\t}\n\treturn ags.Server.Start(fn)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Lock in go-zero to Prevent Duplicate Operations\nDESCRIPTION: Example of how to implement a Redis lock in go-zero to prevent concurrent operations. The code creates a lock with a specific key, sets an expiration time, acquires the lock, executes business logic, and finally releases the lock in a defer function.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-lock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nredisLockKey := fmt.Sprintf(\"%v%v\", redisTpl, headId)\n// 1. New redislock\nredisLock := redis.NewRedisLock(redisConn, redisLockKey)\n// 2. 可选操作，设置 redislock 过期时间\nredisLock.SetExpire(redisLockExpireSeconds)\nif ok, err := redisLock.Acquire(); !ok || err != nil {\n  return nil, errors.New(\"当前有其他用户正在进行操作，请稍后重试\")\n}\ndefer func() {\n  recover()\n  // 3. 释放锁\n  redisLock.Release()\n}()\n```\n\n----------------------------------------\n\nTITLE: Selecting a node using p2c in go-zero\nDESCRIPTION: This code snippet shows the core logic for selecting a node using the p2c algorithm within the `Pick` method of the `p2cPicker`. It handles different cases based on the number of available connections (0, 1, 2, or more). For multiple nodes, it randomly selects two nodes and then chooses the one with the lower load.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n\"switch len(p.conns) {\\n  case 0: // 没有节点，返回错误\\n    return emptyPickResult, balancer.ErrNoSubConnAvailable\\n  case 1: // 有一个节点，直接返回这个节点\\n    chosen = p.choose(p.conns[0], nil)\\n  case 2: // 有两个节点，计算负载，返回负载低的节点\\n    chosen = p.choose(p.conns[0], p.conns[1])\\n  default: // 有多个节点，p2c 挑选两个节点，比较这两个节点的负载，返回负载低的节点\\n    var node1, node2 *subConn\\n    // 3次随机选择两个节点\\n    for i := 0; i < pickTimes; i++ {\\n      a := p.r.Intn(len(p.conns))\\n      b := p.r.Intn(len(p.conns) - 1)\\n      if b >= a {\\n        b++\\n      }\\n      node1 = p.conns[a]\\n      node2 = p.conns[b]\\n      // 如果这次选择的节点达到了健康要求, 就中断选择\\n      if node1.healthy() && node2.healthy() {\\n        break\\n      }\\n    }\\n    // 比较两个节点的负载情况，选择负载低的\\n    chosen = p.choose(node1, node2)\\n  }\\n\\n````\"\n```\n\n----------------------------------------\n\nTITLE: Defining Adaptive Load Shedding Interface in Go\nDESCRIPTION: Core interface definitions for the adaptive load shedding system, including Promise for callback reporting and Shedder for load check operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Callback functions\nPromise interface {\n    // Callback to this function on successful request\n    Pass()\n    // Callback to this function on request failure\n    Fail()\n}\n\n// Definition of the drop-load interface\nShedder interface {\n    // Drop check\n    // 1. Allow the call, you need to manually execute Promise.accept()/reject() to report the actual execution task structure\n    // 2. Reject the call and it will return err: Service Overloaded Error ErrServiceOverloaded\n    Allow() (Promise, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Adaptive Load Shedding Implementation Structures in Go\nDESCRIPTION: Core data structures for adaptive load shedding, including configuration options and the main shedder structure that tracks CPU load, concurrency, and request metrics using sliding windows.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// option parameter mode\nShedderOption func(opts *shedderOptions)\n\n// Optional configuration parameters\nshedderOptions struct {\n    // Sliding time window size\n    window time.Duration\n    // Number of sliding time windows\n    buckets int\n    // cpu load threshold\n    cpuThreshold int64\n}\n\n// Adaptive load drop structure, need to implement Shedder interface\nadaptiveShedder struct {\n    // cpu load threshold\n    // Higher than the threshold means high load needs to be downgraded to ensure service\n    cpuThreshold int64\n    // How many barrels in 1s\n    windows int64\n    // Number of concurrent\n    flying int64\n    // Sliding and smoothing the number of concurrent\n    avgFlying float64\n    // Spin locks, one service shares one drop load\n    // Locks must be applied when counting the number of requests currently being processed\n    // lossless concurrency for better performance\n    avgFlyingLock syncx.SpinLock\n    // Last rejection time\n    dropTime *syncx.AtomicDuration\n    // Have you been rejected recently\n    droppedRecently *syncx.AtomicBool\n    // Request statistics, with a sliding time window to record metrics over the most recent period\n    passCounter *collection.RollingWindow\n    // Response time statistics by sliding time windows to record metrics over the most recent period\n    rtCounter *collection.RollingWindow\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PeriodLimit Rate Limiting in go-zero\nDESCRIPTION: Example code demonstrating how to set up and use a PeriodLimit rate limiter in go-zero. The code shows initializing the limiter with Redis and handling different response codes based on the limit status.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/periodlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    seconds = 1\n    total   = 100\n    quota   = 5\n)\n// New limiter\nl := NewPeriodLimit(seconds, quota, redis.NewRedis(s.Addr(), redis.NodeType), \"periodlimit\")\n\n// take source\ncode, err := l.Take(\"first\")\nif err != nil {\n    logx.Error(err)\n    return true\n}\n\n// switch val => process request\nswitch code {\n\tcase limit.OverQuota:\n\t\tlogx.Errorf(\"OverQuota key: %v\", key)\n\t\treturn false\n\tcase limit.Allowed:\n\t\tlogx.Infof(\"AllowedQuota key: %v\", key)\n\t\treturn true\n\tcase limit.HitQuota:\n\t\tlogx.Errorf(\"HitQuota key: %v\", key)\n\t\t// todo: maybe we need to let users know they hit the quota\n\t\treturn false\n\tdefault:\n\t\tlogx.Errorf(\"DefaultQuota key: %v\", key)\n\t\t// unknown response, we just let the sms go\n    \treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lock Release with Lua Script in go-zero Redis Lock\nDESCRIPTION: Implementation of the Release method for RedisLock in go-zero that uses a Lua script to safely release a lock. The script ensures that a lock is only released if the current instance owns it by checking the value matches before deleting the key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-lock.md#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    return redis.call(\"DEL\", KEYS[1])\nelse\n    return 0\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Release() (bool, error) {\n\tresp, err := rl.store.Eval(delCommand, []string{rl.key}, []string{rl.id})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tif reply, ok := resp.(int64); !ok {\n\t\treturn false, nil\n\t} else {\n\t\treturn reply == 1, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Configuration Structure in Go\nDESCRIPTION: This snippet defines the main Config struct for API configuration. It includes REST API settings, JWT authentication parameters, database connection details, Redis caching, and RPC client configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct{\n    rest.RestConf // rest api配置\n    Auth struct { // jwt鉴权配置\n        AccessSecret string // jwt密钥\n        AccessExpire int64 // 有效期，单位：秒\n    }\n    Mysql struct { // 数据库配置，除mysql外，可能还有mongo等其他数据库\n        DataSource string // mysql链接地址，满足 $user:$password@tcp($ip:$port)/$db?$queries 格式即可\n    }\n    CacheRedis cache.CacheConf // redis缓存\n    UserRpc    zrpc.RpcClientConf // rpc client配置\n}\n```\n\n----------------------------------------\n\nTITLE: Exponential Moving Average Calculation\nDESCRIPTION: This snippet presents the formula for calculating the exponential moving average (EMA). EMA is used to smooth out load metrics like CPU usage or concurrency, preventing frequent and unnecessary load shedding due to temporary spikes. The formula demonstrates how the current EMA value (Vt) is calculated based on the previous EMA value (Vt-1), the current value (θt), and a smoothing factor (β).\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVt=β⋅Vt−1+(1−β)⋅θt\n```\n\n----------------------------------------\n\nTITLE: Creating a new api service with goctl\nDESCRIPTION: This command uses `goctl` to create a new API service named 'greet'. It then navigates into the 'greet' directory, initializes a Go module, and runs the generated 'greet.go' file with the specified configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api new greet\ncd greet\ngo mod init\ngo mod tidy\ngo run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Transaction Management in go-zero MySQL\nDESCRIPTION: Example of using transactions in go-zero MySQL, showing how to perform multiple operations within a transaction with automatic rollback on error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nvar insertsql = `insert into User(uid, username, mobilephone) values (?, ?, ?)`\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n    \n    // 返回任何错误都会回滚事务\n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        logx.Errorf(\"insert userinfo stmt exec: %s\", err)\n        return err\n    }\n    \n    // 还可以继续执行 insert/update/delete 相关操作\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Take Method for Cache Retrieval\nDESCRIPTION: The `Take` method in this code snippet retrieves data from the cache using a specified key. If the data is not found, it calls a query function to fetch data from the database and caches it, thus ensuring efficient data retrieval and management.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c cacheNode) Take(v interface{}, key string, query func(v interface{}) error) error {\n  return c.doTake(v, key, query, func(v interface{}) error {\n    return c.SetCache(key, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution using fx.Parallel in Go\nDESCRIPTION: This code snippet demonstrates the use of fx.Parallel to execute multiple functions concurrently. It utilizes anonymous functions to encapsulate the calls to userRPC, accountRPC, and orderRPC, allowing them to run in parallel to reduce overall execution time. Note that fx.Parallel doesn't return errors, so MapReduce is recommended for more robust error handling.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfx.Parallel(func() {\n  userRPC() \n}, func() {\n  accountRPC() \n}, func() {\n  orderRPC() \n})\n```\n\n----------------------------------------\n\nTITLE: API Service Definition\nDESCRIPTION: API definition for user login service including request/response types and endpoint specification. Defines LoginReq and LoginReply structures with JSON field mappings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-coding.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntype (\n    LoginReq {\n        Username string `json:\"username\"`\n        Password string `json:\"password\"`\n    }\n\n    LoginReply {\n        Id           int64 `json:\"id\"`\n        Name         string `json:\"name\"`\n        Gender       string `json:\"gender\"`\n        AccessToken  string `json:\"accessToken\"`\n        AccessExpire int64 `json:\"accessExpire\"`\n        RefreshAfter int64 `json:\"refreshAfter\"`\n    }\n)\n\nservice user-api {\n    @handler login\n    post /user/login (LoginReq) returns (LoginReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Go Model Implementation\nDESCRIPTION: This Go code snippet demonstrates a generated model for a `User` entity. It includes fields for database interaction, caching, and data structure definition. It defines the `UserModel` interface and the `defaultUserModel` struct, as well as functions for creating new models and performing CRUD operations with caching.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n    package model\n    \n    import (\n        \"database/sql\"\n        \"fmt\"\n        \"strings\"\n        \"time\"\n    \n        \"github.com/zeromicro/go-zero/core/stores/builder\"\n        \"github.com/zeromicro/go-zero/core/stores/cache\"\n        \"github.com/zeromicro/go-zero/core/stores/sqlc\"\n        \"github.com/zeromicro/go-zero/core/stores/sqlx\"\n        \"github.com/zeromicro/go-zero/core/stringx\"\n    )\n    \n    var (\n        userFieldNames          = builder.RawFieldNames(&User{})\n        userRows                = strings.Join(userFieldNames, \",\")\n        userRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \",\")\n        userRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \"=?,\") + \"=?\"\n    \n        cacheUserNamePrefix   = \"cache#User#name#\"\n        cacheUserMobilePrefix = \"cache#User#mobile#\"\n        cacheUserIdPrefix     = \"cache#User#id#\"\n        cacheUserPrefix       = \"cache#User#user#\"\n    )\n    \n    type (\n        UserModel interface {\n            Insert(data User) (sql.Result, error)\n            FindOne(id int64) (*User, error)\n            FindOneByUser(user string) (*User, error)\n            FindOneByName(name string) (*User, error)\n            FindOneByMobile(mobile string) (*User, error)\n            Update(data User) error\n            Delete(id int64) error\n        }\n    \n        defaultUserModel struct {\n            sqlc.CachedConn\n            table string\n        }\n    \n        User struct {\n            Id         int64     `db:\"id\"`\n            User       string    `db:\"user\"`     // 用户\n            Name       string    `db:\"name\"`     // 用户名称\n            Password   string    `db:\"password\"` // 用户密码\n            Mobile     string    `db:\"mobile\"`   // 手机号\n            Gender     string    `db:\"gender\"`   // 男｜女｜未公开\n            Nickname   string    `db:\"nickname\"` // 用户昵称\n            CreateTime time.Time `db:\"create_time\"`\n            UpdateTime time.Time `db:\"update_time\"`\n        }\n    )\n    \n    func NewUserModel(conn sqlx.SqlConn, c cache.CacheConf) UserModel {\n        return &defaultUserModel{\n            CachedConn: sqlc.NewConn(conn, c),\n            table:      \"`user`\",\n        }\n    \n    }\n    \n    func (m *defaultUserModel) Insert(data User) (sql.Result, error) {\n        userNameKey := fmt.Sprintf(\"%s%v\", cacheUserNamePrefix, data.Name)\n        userMobileKey := fmt.Sprintf(\"%s%v\", cacheUserMobilePrefix, data.Mobile)\n        userKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, data.User)\n        ret, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n            query := fmt.Sprintf(\"insert into %s (%s) values (?, ?, ?, ?, ?, ?)\", m.table, userRowsExpectAutoSet)\n            return conn.Exec(query, data.User, data.Name, data.Password, data.Mobile, data.Gender, data.Nickname)\n        }, userNameKey, userMobileKey, userKey)\n        return ret, err\n    }\n    \n    func (m *defaultUserModel) FindOne(id int64) (*User, error) {\n        userIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, id)\n        var resp User\n        err := m.QueryRow(&resp, userIdKey, func(conn sqlx.SqlConn, v interface{}) error {\n            query := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", userRows, m.table)\n            return conn.QueryRow(v, query, id)\n        })\n        switch err {\n        case nil:\n            return &resp, nil\n        case sqlc.ErrNotFound:\n            return nil, ErrNotFound\n        default:\n            return nil, err\n        }\n    }\n    \n    func (m *defaultUserModel) FindOneByUser(user string) (*User, error) {\n        userKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, user)\n        var resp User\n        err := m.QueryRowIndex(&resp, userKey, m.formatPrimary, func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n            query := fmt.Sprintf(\"select %s from %s where `user` = ? limit 1\", userRows, m.table)\n            if err := conn.QueryRow(&resp, query, user); err != nil {\n                return nil, err\n            }\n            return resp.Id, nil\n        }, m.queryPrimary)\n        switch err {\n        case nil:\n            return &resp, nil\n        case sqlc.ErrNotFound:\n            return nil, ErrNotFound\n        default:\n            return nil, err\n        }\n    }\n    \n    func (m *defaultUserModel) FindOneByName(name string) (*User, error) {\n        userNameKey := fmt.Sprintf(\"%s%v\", cacheUserNamePrefix, name)\n        var resp User\n        err := m.QueryRowIndex(&resp, userNameKey, m.formatPrimary, func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n            query := fmt.Sprintf(\"select %s from %s where `name` = ? limit 1\", userRows, m.table)\n            if err := conn.QueryRow(&resp, query, name); err != nil {\n                return nil, err\n            }\n            return resp.Id, nil\n        }, m.queryPrimary)\n        switch err {\n        case nil:\n            return &resp, nil\n        case sqlc.ErrNotFound:\n            return nil, ErrNotFound\n        default:\n            return nil, err\n        }\n    }\n    \n    func (m *defaultUserModel) FindOneByMobile(mobile string) (*User, error) {\n        userMobileKey := fmt.Sprintf(\"%s%v\", cacheUserMobilePrefix, mobile)\n        var resp User\n        err := m.QueryRowIndex(&resp, userMobileKey, m.formatPrimary, func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n            query := fmt.Sprintf(\"select %s from %s where `mobile` = ? limit 1\", userRows, m.table)\n            if err := conn.QueryRow(&resp, query, mobile); err != nil {\n                return nil, err\n            }\n            return resp.Id, nil\n        }, m.queryPrimary)\n        switch err {\n        case nil:\n            return &resp, nil\n        case sqlc.ErrNotFound:\n            return nil, ErrNotFound\n        default:\n            return nil, err\n        }\n    }\n    \n    func (m *defaultUserModel) Update(data User) error {\n        userIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, data.Id)\n        _, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n            query := fmt.Sprintf(\"update %s set %s where `id` = ?\", m.table, userRowsWithPlaceHolder)\n            return conn.Exec(query, data.User, data.Name, data.Password, data.Mobile, data.Gender, data.Nickname, data.Id)\n        }, userIdKey)\n        return err\n    }\n    \n    func (m *defaultUserModel) Delete(id int64) error {\n        data, err := m.FindOne(id)\n        if err != nil {\n            return err\n        }\n    \n        userNameKey := fmt.Sprintf(\"%s%v\", cacheUserNamePrefix, data.Name)\n        userMobileKey := fmt.Sprintf(\"%s%v\", cacheUserMobilePrefix, data.Mobile)\n        userIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, id)\n        userKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, data.User)\n        _, err = m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n            query := fmt.Sprintf(\"delete from %s where `id` = ?\", m.table)\n            return conn.Exec(query, id)\n        }, userNameKey, userMobileKey, userIdKey, userKey)\n        return err\n    }\n    \n    func (m *defaultUserModel) formatPrimary(primary interface{}) string {\n        return fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, primary)\n    }\n    \n    func (m *defaultUserModel) queryPrimary(conn sqlx.SqlConn, v, primary interface{}) error {\n        query := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", userRows, m.table)\n        return conn.QueryRow(v, query, primary)\n    }\n    \n\n```\n\n----------------------------------------\n\nTITLE: Generating Golang API Service - Go\nDESCRIPTION: Generates a Golang API service. This command requires flags for code directory specification, API file source, and options for overwriting files and naming styles.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api go -dir ./user -api user.api -force -style gozero\n```\n\n----------------------------------------\n\nTITLE: Cache Take Implementation with Barrier and Error Handling\nDESCRIPTION: Advanced caching method with protection against cache penetration, supporting placeholder insertion and error management\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c cacheNode) doTake(v interface{}, key string, query func(v interface{}) error,\n  cacheVal func(v interface{}) error) error {\n  val, fresh, err := c.barrier.DoEx(key, func() (interface{}, error) {\n    // Detailed cache and database interaction logic\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing logx with configuration from YAML\nDESCRIPTION: This snippet demonstrates how to initialize the logx logger using a configuration loaded from a YAML file.  It loads the configuration, sets up logx, and then logs messages at different levels (info, error). Finally, it closes the logger.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar c logx.LogConf\n// 从 yaml 文件中 初始化配置\nconf.MustLoad(\"config.yaml\", &c)\n\n// logx 根据配置初始化\nlogx.MustSetup(c)\n\nlogx.Info(\"This is info!\")\nlogx.Infof(\"This is %s!\", \"info\")\n\nlogx.Error(\"This is error!\")\nlogx.Errorf(\"this is %s!\", \"error\")\n\nlogx.Close()\n```\n\n----------------------------------------\n\nTITLE: Order Service YAML Configuration\nDESCRIPTION: YAML configuration file for the order service including service name, host, port and etcd settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nName: order\nHost: 0.0.0.0\nPort: 8888\nUserRpc:\n  Etcd:\n    Hosts:\n    - 127.0.0.1:2379\n    Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Connection in go-zero\nDESCRIPTION: Example showing how to create a MySQL connection model in go-zero, including connection initialization and bulk inserter setup.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 1. 快速连接一个 mysql\n// datasource: mysql dsn\nheraMysql := sqlx.NewMysql(datasource)\n\n// 2. 在 servicecontext 中调用，懂model上层的logic层调用\nmodel.NewMysqlModel(heraMysql, tablename),\n\n// 3. model层 mysql operation\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n\tdefer func() {\n\t\trecover()\n\t}()\n    // 4. 创建一个批量insert的 [mysql executor]\n    // conn: mysql connection; insertsql: mysql insert sql\n\tbulkInserter , err := sqlx.NewBulkInserter(conn, insertsql)\n\tif err != nil {\n\t\tlogx.Error(\"Init bulkInsert Faild\")\n\t\tpanic(\"Init bulkInsert Faild\")\n\t\treturn nil\n\t}\n\treturn &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Tracing Handler in Go\nDESCRIPTION: Implements a tracing handler for HTTP requests in go-zero. It extracts tracing information from headers, starts a new span, and propagates the context through the request.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/TraceHandler.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc TracingHandler(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tcarrier, err := trace.Extract(trace.HttpFormat, r.Header)\n\t\tif err != nil && err != trace.ErrInvalidCarrier {\n\t\t\tlogx.Error(err)\n\t\t}\n\n\t\tctx, span := trace.StartServerSpan(r.Context(), carrier, sysx.Hostname(), r.RequestURI)\n\t\tdefer span.Finish()\n\t\tr = r.WithContext(ctx)\n\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n\nfunc StartServerSpan(ctx context.Context, carrier Carrier, serviceName, operationName string) (\n\tcontext.Context, tracespec.Trace) {\n\tspan := newServerSpan(carrier, serviceName, operationName)\n\treturn context.WithValue(ctx, tracespec.TracingKey, span), span\n}\n\nfunc newServerSpan(carrier Carrier, serviceName, operationName string) tracespec.Trace {\n\ttraceId := stringx.TakeWithPriority(func() string {\n\t\tif carrier != nil {\n\t\t\treturn carrier.Get(traceIdKey)\n\t\t}\n\t\treturn \"\"\n\t}, func() string {\n\t\treturn stringx.RandId()\n\t})\n\tspanId := stringx.TakeWithPriority(func() string {\n\t\tif carrier != nil {\n\t\t\treturn carrier.Get(spanIdKey)\n\t\t}\n\t\treturn \"\"\n\t}, func() string {\n\t\treturn initSpanId\n\t})\n\n\treturn &Span{\n\t\tctx: spanContext{\n\t\t\ttraceId: traceId,\n\t\t\tspanId:  spanId,\n\t\t},\n\t\tserviceName:   serviceName,\n\t\toperationName: operationName,\n\t\tstartTime:     timex.Time(),\n\t\tflag:          serverFlag,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: URL Expansion Logic in API Gateway\nDESCRIPTION: Implement URL expansion method by calling transform RPC service to retrieve original URL\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(req types.ExpandReq) (*types.ExpandResp, error) {\n\tresp, err := l.svcCtx.Transformer.Expand(l.ctx, &transformer.ExpandReq{\n\t\tShorten: req.Shorten,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &types.ExpandResp{\n\t\tUrl: resp.Url,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: MapReduce Usage Example in go-zero\nDESCRIPTION: Demonstrates how to use the MapReduce functionality in go-zero for concurrent data processing, including product detail retrieval and user legality checking.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/other-component/mapreduce.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/mr\"\n\t\"github.com/zeromicro/go-zero/core/timex\"\n)\n\ntype user struct{}\n\nfunc (u *user) User(uid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 30)\n\treturn nil, nil\n}\n\ntype store struct{}\n\nfunc (s *store) Store(pid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 50)\n\treturn nil, nil\n}\n\ntype order struct{}\n\nfunc (o *order) Order(pid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 40)\n\treturn nil, nil\n}\n\nvar (\n\tuserRpc  user\n\tstoreRpc store\n\torderRpc order\n)\n\nfunc main() {\n\tstart := timex.Now()\n\t_, err := productDetail(123, 345)\n\tif err != nil {\n\t\tlog.Printf(\"product detail error: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"productDetail time: %v\", timex.Since(start))\n\n\t// the data processing\n\tres, err := checkLegal([]int64{1, 2, 3})\n\tif err != nil {\n\t\tlog.Printf(\"check error: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"check res: %v\", res)\n}\n\ntype ProductDetail struct {\n\tUser  interface{}\n\tStore interface{}\n\tOrder interface{}\n}\n\nfunc productDetail(uid, pid int64) (*ProductDetail, error) {\n\tvar pd ProductDetail\n\terr := mr.Finish(func() (err error) {\n\t\tpd.User, err = userRpc.User(uid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Store, err = storeRpc.Store(pid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Order, err = orderRpc.Order(pid)\n\t\treturn\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pd, nil\n}\n\nfunc checkLegal(uids []int64) ([]int64, error) {\n\tr, err := mr.MapReduce(func(source chan<- interface{}) {\n\t\tfor _, uid := range uids {\n\t\t\tsource <- uid\n\t\t}\n\t}, func(item interface{}, writer mr.Writer, cancel func(error)) {\n\t\tuid := item.(int64)\n\t\tok, err := check(uid)\n\t\tif err != nil {\n\t\t\tcancel(err)\n\t\t}\n\t\tif ok {\n\t\t\twriter.Write(uid)\n\t\t}\n\t}, func(pipe <-chan interface{}, writer mr.Writer, cancel func(error)) {\n\t\tvar uids []int64\n\t\tfor p := range pipe {\n\t\t\tuids = append(uids, p.(int64))\n\t\t}\n\t\twriter.Write(uids)\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn r.([]int64), nil\n}\n\nfunc check(uid int64) (bool, error) {\n\t// do something check user legal\n\ttime.Sleep(time.Millisecond * 20)\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting User Data into MySQL using go-zero\nDESCRIPTION: Demonstrates how to perform an INSERT operation using go-zero's sqlx package. It includes SQL construction and error handling for the insert operation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    // insert op\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        logx.Errorf(\"insert User Position Model Model err, err=%v\", err)\n        return -1, err\n    }\n    id, err := res.LastInsertId()\n    if err != nil {\n        logx.Errorf(\"insert User Model to Id  parse id err,err=%v\", err)\n        return -1, err\n    }\n    return id, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Layer Caching for Content Social System in Go\nDESCRIPTION: This code snippet demonstrates how to implement business layer caching for a content social system using Redis. It includes functions for adding, deleting, and listing content with compressed storage in a sorted set.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/buiness-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype Content struct {\n    Id         string    `json:\"id\"`\n    Title      string    `json:\"title\"`\n    Content    string    `json:\"content\"`\n    CreateTime time.Time `json:\"create_time\"`\n}\n\nconst bizContentCacheKey = `biz#content#cache`\n\n// AddContent 提供内容存储\nfunc AddContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zadd(bizContentCacheKey, c.CreateTime.UnixNano()/1e6, v)\n    return err\n}\n\n// DelContent 提供内容删除\nfunc DelContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zrem(bizContentCacheKey, v)\n\n    return err\n}\n\n// 内容压缩\nfunc compress(c *Content) string {\n    // todo: do it yourself\n    var ret string\n    return ret\n}\n\n// 内容解压\nfunc unCompress(v string) *Content {\n\t// todo: do it yourself\n\tvar ret Content\n\treturn &ret\n}\n\n// ListByRangeTime提供根据时间段进行数据查询\nfunc ListByRangeTime(r redis.Redis, start, end time.Time) ([]*Content, error) {\n\tkvs, err := r.ZrangebyscoreWithScores(bizContentCacheKey, start.UnixNano()/1e6, end.UnixNano()/1e6)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar list []*Content\n\tfor _, kv := range kvs {\n\t\tdata:=unCompress(kv.Key)\n\t\tlist = append(list, data)\n\t}\n\n\treturn list, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Updating EWMA after request completion in go-zero\nDESCRIPTION: This code snippet demonstrates how go-zero updates the EWMA (Exponentially Weighted Moving Average) and other statistics for a backend server after a request is completed. It calculates the request latency, updates the EWMA value, and adjusts the success rate based on whether the request was successful.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n\"func (p *p2cPicker) buildDoneFunc(c *subConn) func(info balancer.DoneInfo) {\\n  start := int64(timex.Now())\\n  return func(info balancer.DoneInfo) {\\n    // 正在处理的请求数减 1\\n    atomic.AddInt64(&c.inflight, -1)\\n    now := timex.Now()\\n    // 保存本次请求结束时的时间点，并取出上次请求时的时间点\\n    last := atomic.SwapInt64(&c.last, int64(now))\\n    td := int64(now) - last\\n    if td < 0 {\\n      td = 0\\n    }\\n    // 用牛顿冷却定律中的衰减函数模型计算EWMA算法中的β值\\n    w := math.Exp(float64(-td) / float64(decayTime))\\n    // 保存本次请求的耗时\\n    lag := int64(now) - start\\n    if lag < 0 {\\n      lag = 0\\n    }\\n    olag := atomic.LoadUint64(&c.lag)\\n    if olag == 0 {\\n      w = 0\\n    }\\n    // 计算 EWMA 值\\n    atomic.StoreUint64(&c.lag, uint64(float64(olag)*w+float64(lag)*(1-w)))\\n    success := initSuccess\\n    if info.Err != nil && !codes.Acceptable(info.Err) {\\n      success = 0\\n    }\\n    osucc := atomic.LoadUint64(&c.success)\\n    atomic.StoreUint64(&c.success, uint64(float64(osucc)*w+float64(success)*(1-w)))\\n\\n    stamp := p.stamp.Load()\\n    if now-stamp >= logInterval {\\n      if p.stamp.CompareAndSwap(stamp, now) {\\n        p.logStats()\\n      }\\n    }\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Parsing HTTP Request Parameters with httpx in Go\nDESCRIPTION: This code snippet shows the location of httpx.Parse() in the go-zero codebase, which is responsible for parsing incoming HTTP request parameters. It parses path parameters, form data, HTTP headers, and JSON payloads, providing a comprehensive solution for handling various input types in RESTful APIs. The parameters are then validated based on the tag modifiers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/rest.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"// https://github.com/zeromicro/go-zero/blob/master/rest/httpx/requests.go#L32:6\n\"\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Script for Kubernetes Deployment\nDESCRIPTION: Complete Jenkins pipeline script that handles the entire CI/CD process from checking out code from Gitlab to deploying to Kubernetes. It includes stages for building Docker images, pushing to a private registry, and generating Kubernetes deployment files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/deploy.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npipeline {\n  agent any\n  parameters {\n      gitParameter name: 'branch', \n      type: 'PT_BRANCH',\n      branchFilter: 'origin/(. *)',\n      defaultValue: 'master',\n      selectedValue: 'DEFAULT',\n      sortMode: 'ASCENDING_SMART',\n      description: 'Select the branch to build'\n  }\n\n  stages {\n      stage('Service information') {\n          steps {\n              sh 'echo branch: $branch'\n              sh 'echo build service type: ${JOB_NAME}-$type'\n          }\n      }\n\n\n      stage('check out') {\n          steps {\n              checkout([$class: 'GitSCM', \n              branches: [[name: '$branch']],\n              doGenerateSubmoduleConfigurations: false, \n              extensions: [], \n              submoduleCfg: [],\n              userRemoteConfigs: [[credentialsId: '${credentialsId}', url: '${gitUrl}']]])\n          }   \n      }\n\n      stage('get_commit_id') {\n          steps {\n              echo 'get commit_id'\n              git credentialsId: '${credentialsId}', url: '${gitUrl}'\n              script {\n                  env.commit_id = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n              }\n          }\n      }\n\n\n      stage('goctl version detection') {\n          steps{\n              sh '/usr/local/bin/goctl -v'\n          }\n      }\n\n      stage('Dockerfile Build') {\n          steps{\n                 sh '/usr/local/bin/goctl docker -go service/${JOB_NAME}/${type}/${JOB_NAME}.go'\n                 script{\n                     env.image = sh(returnStdout: true, script: 'echo ${JOB_NAME}-${type}:${commit_id}').trim()\n                 }\n                 sh 'echo image name: ${image}'\n                 sh 'docker build -t ${image} .'\n          }\n      }\n\n      stage('upload to image repository') {\n          steps{\n              sh '/root/dockerlogin.sh'\n              sh 'docker tag ${image} ${dockerServer}/${image}'\n              sh 'docker push ${dockerServer}/${image}'\n          }\n      }\n\n      stage('deploy to k8s') {\n          steps{\n              script{\n                  env.deployYaml = sh(returnStdout: true, script: 'echo ${JOB_NAME}-${type}-deploy.yaml').trim()\n                  env.port=sh(returnStdout: true, script: '/root/port.sh ${JOB_NAME}-${type}').trim()\n              }\n\n              sh 'echo ${port}'\n\n              sh 'rm -f ${deployYaml}'\n              sh '/usr/local/bin/goctl kube deploy -secret dockersecret -replicas 2 -nodePort 3${port} -requestCpu 200 -requestMem 50 -limitCpu 300 -limitMem 100 -name ${JOB_NAME}-${type} -namespace hey-go-zero -image ${dockerServer}/${image} -o ${deployYaml} -port ${port}'\n              sh '/usr/bin/kubectl apply -f ${deployYaml}'\n          }\n      }\n      \n      stage('Clean') {\n          steps{\n              sh 'docker rmi -f ${image}'\n              sh 'docker rmi -f ${dockerServer}/${image}'\n              cleanWs notFailBuild: true\n          }\n      }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Redis Lock Acquisition Implementation\nDESCRIPTION: Implementation of lock acquisition using Lua script for atomic operations. Includes key existence check, expiration setting, and unique ID verification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-lock.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    redis.call(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2])\n    return \"OK\"\nelse\n    return redis.call(\"SET\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Acquire() (bool, error) {\n\tseconds := atomic.LoadUint32(&rl.seconds)\n  // execute luascript\n\tresp, err := rl.store.Eval(lockCommand, []string{rl.key}, []string{\n\t\trl.id, strconv.Itoa(int(seconds)*millisPerSecond + tolerance)})\n\tif err == red.Nil {\n\t\treturn false, nil\n\t} else if err != nil {\n\t\tlogx.Errorf(\"Error on acquiring lock for %s, %s\", rl.key, err.Error())\n\t\treturn false, err\n\t} else if resp == nil {\n\t\treturn false, nil\n\t}\n\n\treply, ok := resp.(string)\n\tif ok && reply == \"OK\" {\n\t\treturn true, nil\n\t} else {\n\t\tlogx.Errorf(\"Unknown reply when acquiring lock for %s: %v\", rl.key, resp)\n\t\treturn false, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing MySQL Connection in Go using go-zero\nDESCRIPTION: Demonstrates how to create a MySQL connection and model using go-zero's sqlx package. It includes steps for quick connection, service context integration, and bulk insert initialization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// 1. 快速连接一个 mysql\n// datasource: mysql dsn\nheraMysql := sqlx.NewMysql(datasource)\n\n// 2. 在 servicecontext 中调用，懂model上层的logic层调用\nmodel.NewMysqlModel(heraMysql, tablename),\n\n// 3. model层 mysql operation\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n\tdefer func() {\n\t\trecover()\n\t}()\n    // 4. 创建一个批量insert的 [mysql executor]\n    // conn: mysql connection; insertsql: mysql insert sql\n\tbulkInserter , err := sqlx.NewBulkInserter(conn, insertsql)\n\tif err != nil {\n\t\tlogx.Error(\"Init bulkInsert Faild\")\n\t\tpanic(\"Init bulkInsert Faild\")\n\t\treturn nil\n\t}\n\treturn &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying with Cache Logic in Go\nDESCRIPTION: This code defines a method `QueryRow` within a struct `CachedConn` that retrieves data from a cache or queries a database if the data is not found in the cache. The method ensures efficient cache usage by checking for cached data and providing a fallback to retrieve fresh data from the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRow(v interface{}, key string, query QueryFn) error {\n  return cc.cache.Take(v, key, func(v interface{}) error {\n    return query(cc.db, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Services in go-zero API\nDESCRIPTION: Examples of service definitions in go-zero API syntax, including server metadata, route definitions, and handler declarations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix: api\n)\nservice foo-api{\n  @doc \"foo\"\n  @handler foo\n  post /foo/:id (Foo) returns (Bar)\n}\n\nservice foo-api{\n  @handler ping\n  get /ping\n  \n  @doc \"foo\"\n  @handler bar\n  post /bar/:id (Foo)\n}\n```\n\n----------------------------------------\n\nTITLE: MapReduceWithSource Implementation in Go\nDESCRIPTION: This code provides the implementation of the `MapReduceWithSource` function.  It orchestrates the mapReduce process using channels and goroutines. The function takes a source channel, mapper function, and reducer function as input.  It manages error handling, concurrency, and data flow between the different stages of the mapReduce process.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 支持传入数据源channel，并返回聚合后的数据\n// source - 数据源channel\n// mapper - 读取source内容并处理\n// reducer - 数据处理完毕发送至reducer聚合\nfunc MapReduceWithSource(source <-chan interface{}, mapper MapperFunc, reducer ReducerFunc,\n    opts ...Option) (interface{}, error) {\n    // 可选参数设置\n    options := buildOptions(opts...)\n    // 聚合数据channel，需要手动调用write方法写入到output中\n    output := make(chan interface{})\n    // output最后只会被读取一次\n    defer func() {\n        // 如果有多次写入的话则会造成阻塞从而导致协程泄漏\n        // 这里用 for range检测是否可以读出数据，读出数据说明多次写入了\n        // 为什么这里使用panic呢？显示的提醒用户用法错了会比自动修复掉好一些\n        for range output {\n            panic(\"more than one element written in reducer\")\n        }\n    }()\n    // 创建有缓冲的chan，容量为workers\n    // 意味着最多允许 workers 个协程同时处理数据\n    collector := make(chan interface{}, options.workers)\n    // 数据聚合任务完成标志\n    done := syncx.NewDoneChan()\n    // 支持阻塞写入chan的writer\n    writer := newGuardedWriter(output, done.Done())\n    // 单例关闭\n    var closeOnce sync.Once\n    var retErr errorx.AtomicError\n    // 数据聚合任务已结束，发送完成标志\n    finish := func() {\n        // 只能关闭一次\n        closeOnce.Do(func() {\n            // 发送聚合任务完成信号，close函数将会向chan写入一个零值\n            done.Close()\n            // 关闭数据聚合chan\n            close(output)\n        })\n    }\n    // 取消操作\n    cancel := once(func(err error) {\n        // 设置error\n        if err != nil {\n            retErr.Set(err)\n        } else {\n            retErr.Set(ErrCancelWithNil)\n        }\n        // 清空source channel\n        drain(source)\n        // 调用完成方法\n        finish()\n    })\n\n    go func() {\n        defer func() {\n            // 清空聚合任务channel\n            drain(collector)\n            // 捕获panic\n            if r := recover(); r != nil {\n                // 调用cancel方法，立即结束\n                cancel(fmt.Errorf(\"%v\", r))\n            } else {\n                // 正常结束\n                finish()\n            }\n        }()\n        // 执行数据加工\n        // 注意writer.write将加工后数据写入了output\n        reducer(collector, writer, cancel)\n    }()\n    // 异步执行数据加工\n    // source - 数据生产\n    // collector - 数据收集\n    // done - 结束标志\n    // workers - 并发数\n    go executeMappers(func(item interface{}, w Writer) {\n        mapper(item, w, cancel)\n    }, source, collector, done.Done(), options.workers)\n    // reducer将加工后的数据写入了output，\n    // 需要数据返回时读取output即可\n    // 假如output被写入了超过两次\n    // 则开始的defer func那里将还可以读到数据\n    // 由此可以检测到用户调用了多次write方法\n    value, ok := <-output\n    if err := retErr.Load(); err != nil {\n        return nil, err\n    } else if ok {\n        return value, nil\n    } else {\n        return nil, ErrReduceNoOutput\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Datacenter API Configuration\nDESCRIPTION: YAML configuration file for the datacenter API service, including authentication settings, Redis cache configuration, and RPC service endpoints using etcd for service discovery.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nName: datacenter-api\nLog:\n  Mode: console\nHost: 0.0.0.0\nPort: 8857\nAuth:\n  AccessSecret: secret\n  AccessExpire: 86400\nCacheRedis:\n- Host: 127.0.0.1:6379\n  Pass: pass\n  Type: node                     \nUserRpc:\n  Etcd:\n    Hosts:\n      - 127.0.0.1:2379\n    Key: user.rpc\nCommonRpc:\n  Etcd:\n    Hosts:\n      - 127.0.0.1:2379\n    Key: common.rpc\nVotesRpc:\n  Etcd:\n    Hosts:\n      - 127.0.0.1:2379\n    Key: votes.rpc\n```\n\n----------------------------------------\n\nTITLE: Defining REST API Configuration in Go\nDESCRIPTION: This snippet shows the RestConf structure which contains various settings for configuring a REST API service in Go-Zero. It includes options for host, port, HTTPS certificates, request limits, timeouts, and performance thresholds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nServiceConf // service configuration\nHost string `json:\",default=0.0.0.0\"` // http listening ip, default 0.0.0.0\nPort int // http listening port, required\nCertFile string `json:\",optional\"` // https certificate file, optional\nKeyFile string `json:\",optional\"` // https private key file, optional \nVerbose bool `json:\",optional\"` // Whether to print detailed http request logs\nMaxConns int `json:\",default=10000\"` // Maximum number of requests that can be accepted at the same time by http (limited number of streams), default 10000\nMaxBytes int64 `json:\",default=1048576,range=[0:8388608]\"` // The maximum ContentLength of http requests that can be accepted, default 1048576, the set value must not be between 0 and 8388608\n// milliseconds\nTimeout int64 `json:\",default=3000\"` // Timeout duration control, unit: milliseconds, default 3000\nCpuThreshold int64 `json:\",default=900,range=[0:1000]\"` // cpu down load threshold, default 900, allowable range 0 to 1000\nSignature SignatureConf `json:\",optional\"` // signature configuration\n```\n\n----------------------------------------\n\nTITLE: Building Custom Resolver with Service Discovery\nDESCRIPTION: Implementation of Build method for discovery-based resolver including service endpoint updates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (d *discovBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (\n\tresolver.Resolver, error) {\n\thosts := strings.FieldsFunc(target.Authority, func(r rune) bool {\n\t\treturn r == EndpointSepChar\n\t})\n\tsub, err := discov.NewSubscriber(hosts, target.Endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tupdate := func() {\n\t\tvar addrs []resolver.Address\n\t\tfor _, val := range subset(sub.Values(), subsetSize) {\n\t\t\taddrs = append(addrs, resolver.Address{\n\t\t\t\tAddr: val,\n\t\t\t})\n\t\t}\n\t\tcc.UpdateState(resolver.State{\n\t\t\tAddresses: addrs,\n\t\t})\n\t}\n\tsub.AddListener(update)\n\tupdate()\n\treturn &nopResolver{cc: cc}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating User Models using Data Source in Go Zero\nDESCRIPTION: This snippet shows how to generate model files by connecting directly to a data source. The goctl command uses the provided database connection URL and targets the specified table to create model files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/model-gen.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"$datasource\" -table=\"user\" -c -dir .\n```\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Using periodlimit in Go\nDESCRIPTION: This code snippet demonstrates how to use the `periodlimit` in Go to limit API access. It initializes a `PeriodLimit` with a specified time window and quota, then uses the `Take` method to check if a request is allowed. The code then switches on the return code to determine if the request should be processed, rejected or buffered.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/periodlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    seconds = 1\n    total   = 100\n    quota   = 5\n)\n// New limiter\nl := NewPeriodLimit(seconds, quota, redis.NewRedis(s.Addr(), redis.NodeType), \"periodlimit\")\n\n// take source\ncode, err := l.Take(\"first\")\nif err != nil {\n    logx.Error(err)\n    return true\n}\n\n// switch val => process request\nswitch code {\n\tcase limit.OverQuota:\n\t\tlogx.Errorf(\"OverQuota key: %v\", key)\n\t\treturn false\n\tcase limit.Allowed:\n\t\tlogx.Infof(\"AllowedQuota key: %v\", key)\n\t\treturn true\n\tcase limit.HitQuota:\n\t\tlogx.Errorf(\"HitQuota key: %v\", key)\n\t\t// todo: maybe we need to let users know they hit the quota\n\t\treturn false\n\tdefault:\n\t\tlogx.Errorf(\"DefaultQuota key: %v\", key)\n\t\t// unknown response, we just let the sms go\n    \treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Position and Circle in go-zero TimingWheel\nDESCRIPTION: This function calculates the position and circle for a task based on its delay. It determines which slot the task should be placed in and how many circles it needs to complete before execution.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) getPositionAndCircle(d time.Duration) (pos int, circle int) {\n\tsteps := int(d / tw.interval)\n\tpos = (tw.tickedPos + steps) % tw.numSlots\n\tcircle = (steps - 1) / tw.numSlots\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: go-zero Prometheus HTTP Handler\nDESCRIPTION: This code snippet from `prometheushandler.go` shows how go-zero integrates with Prometheus to collect HTTP request metrics. It defines histogram and counter vectors for request duration and status codes, respectively, and uses middleware to record request metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/metric.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar (\\n metricServerReqDur = metric.NewHistogramVec(&metric.HistogramVecOpts{\n  ...\n    // Monitoring Indicators\n  Labels:    []string{\"path\"},\n    // Histogram distribution in which the buckets of statistics\n  Buckets:   []float64{5, 10, 25, 50, 100, 250, 500, 1000},\n })\\n\n metricServerReqCodeTotal = metric.NewCounterVec(&metric.CounterVecOpts{\n  ...\n    // Monitor indicators: directly in the record indicator incr() can be\n  Labels:    []string{\"path\", \"code\"},\n })\n)\\n\nfunc PromethousHandler(path string) func(http.Handler) http.Handler {\n return func(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n      // Time of request for access\n   startTime := timex.Now()\n   cw := &security.WithCodeResponseWriter{Writer: w}\n   defer func() {\n        // Time of request return\n    metricServerReqDur.Observe(int64(timex.Since(startTime)/time.Millisecond), path)\n    metricServerReqCodeTotal.Inc(path, strconv.Itoa(cw.Code))\n   }()\n   // Middleware release, after executing subsequent middleware and business logic. Rejoin here and do a metric upload of the complete request\n   // [🧅: The Onion Model]\n   next.ServeHTTP(cw, r)\n  })\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Management with Redis Sorted Sets in Go\nDESCRIPTION: This code snippet demonstrates how to implement a business-level cache for content management using Redis sorted sets. It includes structures and functions for adding, deleting, and retrieving content based on time ranges, along with compression and decompression utilities.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/buiness-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype Content struct {\n    Id         string    `json:\"id\"`\n    Title      string    `json:\"title\"`\n    Content    string    `json:\"content\"`\n    CreateTime time.Time `json:\"create_time\"`\n}\n\nconst bizContentCacheKey = `biz#content#cache`\n\n// AddContent 提供内容存储\nfunc AddContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zadd(bizContentCacheKey, c.CreateTime.UnixNano()/1e6, v)\n    return err\n}\n\n// DelContent 提供内容删除\nfunc DelContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zrem(bizContentCacheKey, v)\n\n    return err\n}\n\n// 内容压缩\nfunc compress(c *Content) string {\n    // todo: do it yourself\n    var ret string\n    return ret\n}\n\n// 内容解压\nfunc unCompress(v string) *Content {\n\t// todo: do it yourself\n\tvar ret Content\n\treturn &ret\n}\n\n// ListByRangeTime提供根据时间段进行数据查询\nfunc ListByRangeTime(r redis.Redis, start, end time.Time) ([]*Content, error) {\n\tkvs, err := r.ZrangebyscoreWithScores(bizContentCacheKey, start.UnixNano()/1e6, end.UnixNano()/1e6)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar list []*Content\n\tfor _, kv := range kvs {\n\t\tdata:=unCompress(kv.Key)\n\t\tlist = append(list, data)\n\t}\n\n\treturn list, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Redis-based Token Limiter\nDESCRIPTION: This Lua script implements the core logic of the token bucket rate limiter in Redis. It takes the rate, burst size, current timestamp, and requested number of tokens as input. It calculates the number of available tokens based on the time elapsed since the last refresh, updates the token count and refresh time in Redis, and returns whether the requested number of tokens can be granted.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/tokenlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n```lua\n-- 返回是否可以活获得预期的token\n\nlocal rate = tonumber(ARGV[1])\nlocal capacity = tonumber(ARGV[2])\nlocal now = tonumber(ARGV[3])\nlocal requested = tonumber(ARGV[4])\n\n-- fill_time：需要填满 token_bucket 需要多久\nlocal fill_time = capacity/rate\n-- 将填充时间向下取整\nlocal ttl = math.floor(fill_time*2)\n\n-- 获取目前 token_bucket 中剩余 token 数\n-- 如果是第一次进入，则设置 token_bucket 数量为 令牌桶最大值\nlocal last_tokens = tonumber(redis.call(\"get\", KEYS[1]))\nif last_tokens == nil then\n    last_tokens = capacity\nend\n\n-- 上一次更新 token_bucket 的时间\nlocal last_refreshed = tonumber(redis.call(\"get\", KEYS[2]))\nif last_refreshed == nil then\n    last_refreshed = 0\nend\n\nlocal delta = math.max(0, now-last_refreshed)\n-- 通过当前时间与上一次更新时间的跨度，以及生产token的速率，计算出新的token数\n-- 如果超过 max_burst，多余生产的token会被丢弃\nlocal filled_tokens = math.min(capacity, last_tokens+(delta*rate))\nlocal allowed = filled_tokens >= requested\nlocal new_tokens = filled_tokens\nif allowed then\n    new_tokens = filled_tokens - requested\nend\n\n-- 更新新的token数，以及更新时间\nredis.call(\"setex\", KEYS[1], ttl, new_tokens)\nredis.call(\"setex\", KEYS[2], ttl, now)\n\nreturn allowed\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing the doReq Function in Go\nDESCRIPTION: The `doReq` function wraps the execution of a request with circuit breaker logic. It first checks if the request should be accepted using the `accept` function. If accepted, it executes the request, and based on whether the result is considered acceptable, marks either a success or failure to the breaker. If not accepted, it invokes fallback function or returns an error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/breaker.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"func (b *googleBreaker) doReq(req func() error, fallback func(err error) error, acceptable Acceptable) error {\\n  if err := b.accept(); err != nil {\\n        if fallback != nil {\\n            return fallback(err)\\n        } else {\\n            return err\\n        }\\n    }\\n\\n    defer func() {\\n        if e := recover(); e != nil {\\n            b.markFailure()\\n            panic(e)\\n        }\\n    }()\\n\\n    err := req()\\n    if acceptable(err) {\\n        b.markSuccess()\\n    } else {\\n        b.markFailure()\\n    }\\n\\n    return err\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Complete Login Logic Implementation with JWT\nDESCRIPTION: The full implementation of the login logic including user authentication and JWT token generation. The login method verifies credentials and returns user information along with JWT tokens.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"book/user/api/internal/svc\"\n\t\"book/user/api/internal/types\"\n\t\"book/user/model\"\n\t\"context\"\n\t\"time\"\n\n\t\"github.com/dgrijalva/jwt-go\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype LoginLogic struct {\n\tlogx.Logger\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc NewLoginLogic(ctx context.Context, svcCtx *svc.ServiceContext) LoginLogic {\n\treturn LoginLogic{\n\t\tLogger: logx.WithContext(ctx),\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t}\n}\n\nfunc (l *LoginLogic) Login(req types.LoginReq) (*types.UserReply, error) {\n\t// 忽略逻辑校验\n\tuserInfo, err := l.svcCtx.UserModel.FindOneByName(req.Username)\n\tswitch err {\n\tcase nil:\n\t\tif userInfo.Password != req.Password {\n\t\t\treturn nil, errorIncorrectPassword\n\t\t}\n\t\tnow := time.Now().Unix()\n\t\taccessExpire := l.svcCtx.Config.Auth.AccessExpire\n\t\tjwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, accessExpire, userInfo.Id)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\treturn &types.UserReply{\n\t\t\tId:       userInfo.Id,\n\t\t\tUsername: userInfo.Name,\n\t\t\tMobile:   userInfo.Mobile,\n\t\t\tNickname: userInfo.Nickname,\n\t\t\tGender:   userInfo.Gender,\n\t\t\tJwtToken: types.JwtToken{\n\t\t\t\tAccessToken:  jwtToken,\n\t\t\t\tAccessExpire: now + accessExpire,\n\t\t\t\tRefreshAfter: now + accessExpire/2,\n\t\t\t},\n\t\t}, nil\n\tcase model.ErrNotFound:\n\t\treturn nil, errorUsernameUnRegister\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n\nfunc (l *LoginLogic) getJwtToken(secretKey string, iat, seconds, userId int64) (string, error) {\n\tclaims := make(jwt.MapClaims)\n\tclaims[\"exp\"] = iat + seconds\n\tclaims[\"iat\"] = iat\n\tclaims[\"userId\"] = userId\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\ttoken.Claims = claims\n\treturn token.SignedString([]byte(secretKey))\n}\n```\n\n----------------------------------------\n\nTITLE: Service Context for API in Go\nDESCRIPTION: This snippet defines a ServiceContext for the API, including configurations for middlewares and connections to various RPC services. It sets up the environment for handling requests, managing cache, and logging.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"context\"\n    \"datacenter/common/rpc/commonclient\"\n    \"datacenter/internal/config\"\n    \"datacenter/internal/middleware\"\n    \"datacenter/shared\"\n    \"datacenter/user/rpc/userclient\"\n    \"datacenter/votes/rpc/votesclient\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/core/stores/redis\"\n    \"github.com/zeromicro/go-zero/core/syncx\"\n    \"github.com/zeromicro/go-zero/rest\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n    \"google.golang.org/grpc\"\n)\n\ntype ServiceContext struct {\n    Config           config.Config\n    GreetMiddleware1 rest.Middleware\n    GreetMiddleware2 rest.Middleware\n    Usercheck        rest.Middleware\n    UserRpc          userclient.User //用户\n    CommonRpc        commonclient.Common\n    VotesRpc         votesclient.Votes\n    Cache            cache.Cache\n    RedisConn        *redis.Redis\n}\n\nfunc timeInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n    stime := time.Now()\n    err := invoker(ctx, method, req, reply, cc, opts...)\n    if err != nil {\n        return err\n    }\n\n    fmt.Printf(\"timeout %s: %v\\n\", method, time.Now().Sub(stime))\n    return nil\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    ur := userclient.NewUser(zrpc.MustNewClient(c.UserRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    cr := commonclient.NewCommon(zrpc.MustNewClient(c.CommonRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    vr := votesclient.NewVotes(zrpc.MustNewClient(c.VotesRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    //缓存\n    ca := cache.NewCache(c.CacheRedis, syncx.NewSharedCalls(), cache.NewCacheStat(\"dc\"), shared.ErrNotFound)\n    rcon := redis.NewRedis(c.CacheRedis[0].Host, c.CacheRedis[0].Type, c.CacheRedis[0].Pass)\n    return &ServiceContext{\n        Config:           c,\n        GreetMiddleware1: greetMiddleware1,\n        GreetMiddleware2: greetMiddleware2,\n        Usercheck:        middleware.NewUserCheckMiddleware().Handle,\n        UserRpc:          ur,\n        CommonRpc:        cr,\n        VotesRpc:         vr,\n        Cache:            ca,\n        RedisConn:        rcon,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Logic in Go-Zero\nDESCRIPTION: Implements user login functionality with validation, password checking, and JWT token generation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/business-coding.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *LoginLogic) Login(req types.LoginReq) (*types.LoginReply, error) {\n    if len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 {\n        return nil, errors.New(\"Invalid parameter\")\n    }\n    \n    userInfo, err := l.svcCtx.UserModel.FindOneByNumber(req.Username)\n    switch err {\n    case nil:\n    case model.ErrNotFound:\n        return nil, errors.New(\"Username does not exist\")\n    default:\n        return nil, err\n    }\n    \n    if userInfo.Password != req.Password {\n        return nil, errors.New(\"User password is incorrect\")\n    }\n    \n    // ---start---\n    now := time.Now().Unix()\n    accessExpire := l.svcCtx.Config.Auth.AccessExpire\n    jwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, l.svcCtx.Config.Auth.AccessExpire, userInfo.Id)\n    if err != nil {\n        return nil, err\n    }\n    // ---end---\n    \n    return &types.LoginReply{\n        Id:           userInfo.Id,\n        Name:         userInfo.Name,\n        Gender:       userInfo.Gender,\n        AccessToken:  jwtToken,\n        AccessExpire: now + accessExpire,\n        RefreshAfter: now + accessExpire/2,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Maximum System Concurrency Calculator\nDESCRIPTION: Calculates maximum system concurrency based on request pass rates and response times using sliding windows. Implements methods for determining max throughput and minimum response time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc (as *adaptiveShedder) maxFlight() int64 {\n    return int64(math.Max(1, float64(as.maxPass()*as.windows)*(as.minRt()/1e3)))\n}\n\nfunc (as *adaptiveShedder) maxPass() int64 {\n    var result float64 = 1\n    as.passCounter.Reduce(func(b *collection.Bucket) {\n        if b.Sum > result {\n            result = b.Sum\n        }\n    })\n    return int64(result)\n}\n\nfunc (as *adaptiveShedder) minRt() float64 {\n    result := defaultMinRt\n    as.rtCounter.Reduce(func(b *collection.Bucket) {\n        if b.Count <= 0 {\n            return\n        }\n        avg := math.Round(b.Sum / float64(b.Count))\n        if avg < result {\n            result = avg\n        }\n    })\n    return result\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing MySQL Connection in go-zero\nDESCRIPTION: Demonstrates how to create a MySQL connection using sqlx and configure a MySQL model with connection and table details\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nheraMysql := sqlx.NewMysql(datasource)\n\nmodel.NewMysqlModel(heraMysql, tablename)\n```\n\n----------------------------------------\n\nTITLE: Cache Take Implementation\nDESCRIPTION: Implementation of the Take method that handles cache retrieval and storage logic with protection against cache penetration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c cacheNode) Take(v interface{}, key string, query func(v interface{}) error) error {\n  return c.doTake(v, key, query, func(v interface{}) error {\n    return c.SetCache(key, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Complex API Structure with Doc and Comment Examples\nDESCRIPTION: This snippet demonstrates the usage of Doc and Comment blocks for various API elements, including syntax declaration, info block, type definitions, server configuration, and service routes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_9\n\nLANGUAGE: api\nCODE:\n```\n// syntaxLit doc\nsyntax = \"v1\" // syntaxLit commnet\n\ninfo(\n  // kvLit doc\n  author: songmeizi // kvLit comment\n)\n\n// typeLit doc\ntype Foo {}\n\ntype(\n  // typeLit doc\n  Bar{}\n  \n  FooBar{\n    // filed doc\n    Name int // filed comment\n  }\n)\n\n@server(\n  /**\n   * kvLit doc\n   * 开启jwt鉴权\n   */\n  jwt: Auth /**kvLit comment*/\n)\nservice foo-api{\n  // atHandler doc\n  @handler foo //atHandler comment\n  \n  /*\n   * route doc\n   * post请求\n   * path为 /foo\n   * 请求体：Foo\n   * 响应体：Foo\n   */\n  post /foo (Foo) returns (Foo) // route comment\n}\n```\n\n----------------------------------------\n\nTITLE: Span struct definition in go-zero\nDESCRIPTION: This code snippet defines the `Span` struct in go-zero, which represents a single operation or unit of work in a distributed trace. It includes the `spanContext` for tracing context, `serviceName` and `operationName` for identifying the service and operation, `startTime` for tracking duration, `flag` to mark it as a server, and `children` for tracking child spans. This structure is fundamental for capturing the details of a call within a microservice.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Span struct {\n    ctx           spanContext       \n    serviceName   string           \n    operationName string           \n    startTime     time.Time         \n    flag          string           \n    children      int              \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Drop Decision Logic in Go\nDESCRIPTION: The shouldDrop method determines if a request should be rejected based on system overload conditions and current concurrency levels. It logs detailed metrics when a request is dropped.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// Whether the request should be discarded\nfunc (as *adaptiveShedder) shouldDrop() bool {\n    // The current cpu load exceeds the threshold\n    // Service should continue to check load and try to discard requests while on cooldown\n    if as.systemOverloaded() || as.stillHot() {\n        // Check if the concurrency being processed exceeds the current maximum number of concurrency that can be carried\n       // Discard the request if it exceeds it\n        if as.highThru() {\n            flying := atomic.LoadInt64(&as.flying)\n            as.avgFlyingLock.Lock()\n            avgFlying := as.avgFlying\n            as.avgFlyingLock.Unlock()\n            msg := fmt.Sprintf(\n                \"dropreq, cpu: %d, maxPass: %d, minRt: %.2f, hot: %t, flying: %d, avgFlying: %.2f\",\n                stat.CpuUsage(), as.maxPass(), as.minRt(), as.stillHot(), flying, avgFlying)\n            logx.Error(msg)\n            stat.Report(msg)\n            return true\n        }\n    }\n    return false\n}\n```\n\n----------------------------------------\n\nTITLE: API Gateway Configuration with Transform Service Dependency\nDESCRIPTION: Define configuration struct for API gateway to include RPC client configuration for transform service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\trest.RestConf\n\tTransform zrpc.RpcClientConf\n}\n```\n\n----------------------------------------\n\nTITLE: Bookstore API Definition in go-zero\nDESCRIPTION: API definition for the bookstore service defining request/response types and endpoints for adding books and checking prices.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\taddReq {\n\t\tbook string `form:\"book\"`\n\t\tprice int64 `form:\"price\"`\n\t}\n\t\n\taddResp {\n\t\tok bool `json:\"ok\"`\n\t}\n)\n\ntype (\n\tcheckReq {\n\t\tbook string `form:\"book\"`\n\t}\n\t\n\tcheckResp {\n\t\tfound bool `json:\"found\"`\n\t\tprice int64 `json:\"price\"`\n\t}\n)\n\nservice bookstore-api {\n\t@handler AddHandler\n\tget /add (addReq) returns (addResp)\n\t\n\t@handler CheckHandler\n\tget /check (checkReq) returns (checkResp)\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Server Configuration Structure in Go\nDESCRIPTION: Detailed server configuration structure that defines listening settings, Etcd configuration, authentication parameters, and performance thresholds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nRpcServerConf struct {\n    service.ServiceConf // mysql database access configuration, see api configuration instructions for details, not repeat here\n    ListenOn      string // rpc listening address and port, such as: 127.0.0.1:8888\n    Etcd          discov.EtcdConf    `json:\",optional\"` // etcd related configuration\n    Auth          bool               `json:\",optional\"` // Whether to enable Auth, if yes, Redis is required\n    Redis         redis.RedisKeyConf `json:\",optional\"` // Auth verification\n    StrictControl bool               `json:\",optional\"` // Whether it is Strict mode, if it is, the error is Auth failure, otherwise it can be considered as successful\n    // pending forever is not allowed\n    // never set it to 0, if zero, the underlying will set to 2s automatically\n    Timeout      int64 `json:\",default=2000\"` // Timeout control, unit: milliseconds\n    CpuThreshold int64 `json:\",default=900,range=[0:1000]\"` // CPU load reduction threshold, the default is 900, the allowable setting range is 0 to 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AppInfo Logic with Caching in Go\nDESCRIPTION: Implements the AppInfo logic, which retrieves app information from cache or RPC service and sets the cache if necessary.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n\n    \"datacenter/internal/svc\"\n    \"datacenter/internal/types\"\n    \"datacenter/shared\"\n\n    \"datacenter/common/model\"\n    \"datacenter/common/rpc/common\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype AppInfoLogic struct {\n    logx.Logger\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n}\n\nfunc NewAppInfoLogic(ctx context.Context, svcCtx *svc.ServiceContext) AppInfoLogic {\n    return AppInfoLogic{\n        Logger: logx.WithContext(ctx),\n        ctx:    ctx,\n        svcCtx: svcCtx,\n    }\n}\n\nfunc (l *AppInfoLogic) AppInfo(req types.Beid) (appconfig *common.BaseAppResp, err error) {\n\n    //检查 缓存中是否有值\n    err = l.svcCtx.Cache.GetCache(model.GetcacheBaseAppIdPrefix(req.Beid), appconfig)\n    if err != nil && err == shared.ErrNotFound {\n        appconfig, err = l.svcCtx.CommonRpc.GetBaseApp(l.ctx, &common.BaseAppReq{\n            Beid: req.Beid,\n        })\n        if err != nil {\n            return\n        }\n        err = l.svcCtx.Cache.SetCache(model.GetcacheBaseAppIdPrefix(req.Beid), appconfig)\n    }\n\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Redis Lock in Go\nDESCRIPTION: This snippet demonstrates how to create a Redis lock, set its expiration time, acquire the lock, and release it after use. It includes error handling and deferred lock release.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/redis-lock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nredisLockKey := fmt.Sprintf(\"%v%v\", redisTpl, headId)\n// 1. New redislock\nredisLock := redis.NewRedisLock(redisConn, redisLockKey)\n// 2. 可选操作，设置 redislock 过期时间\nredisLock.SetExpire(redisLockExpireSeconds)\nif ok, err := redisLock.Acquire(); !ok || err != nil {\n  return nil, errors.New(\"当前有其他用户正在进行操作，请稍后重试\")\n}\ndefer func() {\n  recover()\n  // 3. 释放锁\n  redisLock.Release()\n}()\n```\n\n----------------------------------------\n\nTITLE: Executing goctl Template Commands\nDESCRIPTION: This snippet describes the usage of various goctl template management commands including initialization, cleaning, updating, and reverting templates. It is used for managing template lifecycle operations in the goctl environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template - template operation\n\nUSAGE:\n   goctl template command [command options] [arguments...]\n\nCOMMANDS:\n   init    initialize the all templates(force update)\n   clean   clean the all cache templates\n   update  update template of the target category to the latest\n   revert  revert the target template to the latest\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Channel Read and Write Permission Restriction in Go\nDESCRIPTION: Shows how to restrict channel read and write permissions in Go using function parameter types.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/other-component/mapreduce.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc readChan(rch <-chan interface{}) {\n    for i := range rch {\n        log.Println(i)\n    }\n}\n\nfunc writeChan(wch chan<- interface{}) {\n    wch <- 1\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using PeriodLimit in Go\nDESCRIPTION: This snippet demonstrates how to create a new PeriodLimit instance, take a request, and handle different quota scenarios. It shows the basic usage of PeriodLimit for rate limiting in Go-Zero.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/periodlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    seconds = 1\n    total   = 100\n    quota   = 5\n)\n// New limiter\nl := NewPeriodLimit(seconds, quota, redis.NewRedis(s.Addr(), redis.NodeType), \"periodlimit\")\n\n// take source\ncode, err := l.Take(\"first\")\nif err != nil {\n    logx.Error(err)\n    return true\n}\n\n// switch val => process request\nswitch code {\n\tcase limit.OverQuota:\n\t\tlogx.Errorf(\"OverQuota key: %v\", key)\n\t\treturn false\n\tcase limit.Allowed:\n\t\tlogx.Infof(\"AllowedQuota key: %v\", key)\n\t\treturn true\n\tcase limit.HitQuota:\n\t\tlogx.Errorf(\"HitQuota key: %v\", key)\n\t\t// todo: maybe we need to let users know they hit the quota\n\t\treturn false\n\tdefault:\n\t\tlogx.Errorf(\"DefaultQuota key: %v\", key)\n\t\t// unknown response, we just let the sms go\n    \treturn true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Client Tracing Interceptor in Go\nDESCRIPTION: Implements a tracing interceptor for RPC clients in go-zero. It starts a client span, propagates tracing information through the context, and invokes the RPC method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/TraceHandler.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc TracingInterceptor(ctx context.Context, method string, req, reply interface{},\n\tcc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\tctx, span := trace.StartClientSpan(ctx, cc.Target(), method)\n\tdefer span.Finish()\n\n\tvar pairs []string\n\tspan.Visit(func(key, val string) bool {\n\t\tpairs = append(pairs, key, val)\n\t\treturn true\n\t})\n\tctx = metadata.AppendToOutgoingContext(ctx, pairs...)\n\n\treturn invoker(ctx, method, req, reply, cc, opts...)\n}\n\nfunc StartClientSpan(ctx context.Context, serviceName, operationName string) (context.Context, tracespec.Trace) {\n\tif span, ok := ctx.Value(tracespec.TracingKey).(*Span); ok {\n\t\treturn span.Fork(ctx, serviceName, operationName)\n\t}\n\n\treturn ctx, emptyNoopSpan\n}\n```\n\n----------------------------------------\n\nTITLE: SharedCalls Do Method Implementation in Go\nDESCRIPTION: The implementation of the Do method in sharedGroup, which either retrieves an existing call in progress or creates a new call for a resource identified by a key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// 当多个请求同时使用Do方法请求资源时\nfunc (g *sharedGroup) Do(key string, fn func() (interface{}, error)) (interface{}, error) {\n  // 先申请加锁\n  g.lock.Lock()\n\n  // 根据key，获取对应的call结果,并用变量c保存\n  if c, ok := g.calls[key]; ok {\n    // 拿到call以后，释放锁，此处call可能还没有实际数据，只是一个空的内存占位\n    g.lock.Unlock()\n    // 调用wg.Wait，判断是否有其他goroutine正在申请资源，如果阻塞，说明有其他goroutine正在获取资源\n    c.wg.Wait()\n    // 当wg.Wait不再阻塞，表示资源获取已经结束，可以直接返回结果\n    return c.val, c.err\n  }\n\n  // 没有拿到结果，则调用makeCall方法去获取资源，注意此处仍然是锁住的，可以保证只有一个goroutine可以调用makecall\n  c := g.makeCall(key, fn)\n  // 返回调用结果\n  return c.val, c.err\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Consumer Logic in Go\nDESCRIPTION: Go struct and methods for implementing the consumer logic in the distributed task queue.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n)\n\ntype Consumer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewConsumerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Consumer {\n\treturn &Consumer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Consumer)Start()  {\n\tlogx.Infof(\"start consumer \\n\")\n\n\tthreading.GoSafe(func() {\n\t\tl.svcCtx.Consumer.Consume(func(body []byte) {\n\t\t\tlogx.Infof(\"consumer job  %s \\n\" ,string(body))\n\t\t})\n\t})\n}\n\nfunc (l *Consumer)Stop()  {\n\tlogx.Infof(\"stop consumer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TimingWheel Initialization with Clock\nDESCRIPTION: This function initializes a new TimingWheel with specified interval, slots, and execution function. It sets up the internal data structures and starts a goroutine to run the timing wheel logic, handling tasks through various channels.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newTimingWheelWithClock(interval time.Duration, numSlots int, execute Execute, ticker timex.Ticker) (\n\t*TimingWheel, error) {\n\ttw := &TimingWheel{\n\t\tinterval:      interval,                     // 单个时间格时间间隔\n\t\tticker:        ticker,                       // 定时器，做时间推动，以interval为单位推进\n\t\tslots:         make([]*list.List, numSlots), // 时间轮\n\t\ttimers:        NewSafeMap(),                 // 存储task{key, value}的map [执行execute所需要的参数]\n\t\ttickedPos:     numSlots - 1,                 // at previous virtual circle\n\t\texecute:       execute,                      // 执行函数\n\t\tnumSlots:      numSlots,                     // 初始化 slots num\n\t\tsetChannel:    make(chan timingEntry),       // 以下几个channel是做task传递的\n\t\tmoveChannel:   make(chan baseEntry),\n\t\tremoveChannel: make(chan interface{}),\n\t\tdrainChannel:  make(chan func(key, value interface{})),\n\t\tstopChannel:   make(chan lang.PlaceholderType),\n\t}\n\t// 把 slot 中存储的 list 全部准备好\n\ttw.initSlots()\n\t// 开启异步协程，使用 channel 来做task通信和传递\n\tgo tw.run()\n\n\treturn tw, nil\n}\n```\n\n----------------------------------------\n\nTITLE: SpanContext interface definition in go-zero\nDESCRIPTION: This code defines the `SpanContext` interface, allowing developers to implement custom contextual information transfer. It provides methods to get the `TraceId`, `SpanId`, and perform custom operations using the `Visit` function. This interface enables flexibility in managing and propagating tracing context across different services in a microservice architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype SpanContext interface {\n    TraceId() string                        // get TraceId\n    SpanId() string                         // get SpanId\n    Visit(fn func(key, val string) bool)    // Custom operation TraceId, SpanId\n}\n```\n\n----------------------------------------\n\nTITLE: TimingWheel Run Loop\nDESCRIPTION: This code snippet illustrates the main run loop of the TimingWheel, which handles timer ticks, task additions, moves, removals, and draining using channels. It listens for events on channels and triggers corresponding actions, such as executing tasks on timer ticks and setting new tasks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (tw *TimingWheel) run() {\n\tfor {\n\t\tselect {\n      // 定时器做时间推动 -> scanAndRunTasks()\n\t\tcase <-tw.ticker.Chan():\n\t\t\ttw.onTick()\n      // add task 会往 setChannel 输入task\n\t\tcase task := <-tw.setChannel:\n\t\t\ttw.setTask(&task)\n\t\t...\n\t\t}\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Allow Method for Request Acceptance Decision in Go\nDESCRIPTION: Implementation of the Allow method that determines whether to accept or reject a request based on load conditions. If accepted, it increments the in-flight request counter and returns a Promise for later completion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// Down load check\nfunc (as *adaptiveShedder) Allow() (Promise, error) {\n    // Check if the request was discarded\n    if as.shouldDrop() {\n        // Set drop time\n        as.dropTime.Set(timex.Now())\n        // Recently dropped\n        as.droppedRecently.Set(true)\n        // Return to Overload\n        return nil, ErrServiceOverloaded\n    }\n    // Number of requests being processed plus 1\n    as.addFlying(1)\n    // Each allowed request here returns a new promise object\n    // The promise holds the drop pointer object internally\n    return &promise{\n        start:   timex.Now(),\n        shedder: as,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Correct API Service Syntax (eg2)\nDESCRIPTION: Illustrates a valid API service definition using standard writing style, including server metadata, documentation, handlers, and routing with request and response body specifications.  This example showcases the usage of jwt authentication, group declaration, middleware integration, and route prefixes with multiple service definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_12\n\nLANGUAGE: api\nCODE:\n```\n\"@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix: /api\n)\nservice foo-api{\n  @doc \\\"foo\\\"\n  @handler foo\n  post /foo/:id (Foo) returns (Bar)\n}\n\nservice foo-api{\n  @handler ping\n  get /ping\n  \n  @doc \\\"foo\\\"\n  @handler bar\n  post /bar/:id (Foo)\n}\n\"\n```\n\n----------------------------------------\n\nTITLE: Finding Sensitive Words in Go with stringx.NewTrie\nDESCRIPTION: This code snippet shows how to create a Trie data structure with a list of sensitive words and use it to find all matching keywords in a text string.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfilter := stringx.NewTrie([]string{\n  \"AV演员\",\n  \"苍井空\",\n  \"AV\",\n  \"日本AV女优\",\n  \"AV演员色情\",\n})\nkeywords := filter.FindKeywords(\"日本AV演员兼电视、电影演员。苍井空AV女优是xx出道, 日本AV女优们最精彩的表演是AV演员色情表演\")\nfmt.Println(keywords)\n```\n\n----------------------------------------\n\nTITLE: Detailed Cache Control Implementation\nDESCRIPTION: Comprehensive implementation of the doTake method that handles cache miss, database queries, and cache updates with protection against various cache-related issues.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (c cacheNode) doTake(v interface{}, key string, query func(v interface{}) error,\n  cacheVal func(v interface{}) error) error {\n  val, fresh, err := c.barrier.DoEx(key, func() (interface{}, error) {\n    if err := c.doGetCache(key, v); err != nil {\n      if err == errPlaceholder {\n        return nil, c.errNotFound\n      } else if err != c.errNotFound {\n        return nil, err\n      }\n      if err = query(v); err == c.errNotFound {\n        if err = c.setCacheWithNotFound(key); err != nil {\n          logx.Error(err)\n        }\n        return nil, c.errNotFound\n      } else if err != nil {\n        c.stat.IncrementDbFails()\n        return nil, err\n      }\n      if err = cacheVal(v); err != nil {\n        logx.Error(err)\n      }\n    }\n    return jsonx.Marshal(v)\n  })\n  if err != nil {\n    return err\n  }\n  if fresh {\n    return nil\n  }\n  c.stat.IncrementTotal()\n  c.stat.IncrementHit()\n  return jsonx.Unmarshal(val.([]byte), v)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Request Routing with Go-Zero Router\nDESCRIPTION: Example demonstrating the basic usage of go-zero router including creating a new router, registering routes with handlers, and processing HTTP requests. The code shows path parameter parsing and request handling with a mock HTTP request.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/router.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tr, err := http.NewRequest(http.MethodPost, \"http://hello/testname/20\",nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\t// 1. new Router\n\trouter := router.NewPatRouter()\n\n\t// 2. register path, bind handler\n\terr = router.Handle(http.MethodPost, \"/:name/:year\", http.HandlerFunc(\n\t\tfunc(w http.ResponseWriter, r *http.Request) {\n\t\t\tv := struct {\n\t\t\t\tName     string `path:\"name\"`\n\t\t\t\tYear     int    `path:\"year\"`\n\t\t\t\tNickname string `form:\"nickname\"`\n\t\t\t\tZipcode  int64  `form:\"zipcode\"`\n\t\t\t\tLocation string `json:\"location\"`\n\t\t\t\tTime     int64  `json:\"time\"`\n\t\t\t}{}\n\n\t\t\t_ = httpx.Parse(r, &v)\n\t\t\tfmt.Println(v)\n\t\t}))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t\treturn\n\t}\n\t// 3.0 mock\n\trr := httptest.NewRecorder()\n\t// 3. 开始处理请求，分发请求到不同的 handler 进行处理\n\trouter.ServeHTTP(rr, r)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Structure in go-zero\nDESCRIPTION: Example showcasing the overall structure of an API definition file in go-zero, including syntax version, imports, info block, type definitions, and service block with route definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/**\n * api语法示例及语法说明\n */\n\n// api语法版本\nsyntax = \"v1\"\n\n// import literal\nimport \"foo.api\"\n\n// import group\nimport (\n    \"bar.api\"\n    \"foo/bar.api\"\n)\ninfo(\n    author: \"songmeizi\"\n    date:   \"2020-01-08\"\n    desc:   \"api语法示例及语法说明\"\n)\n\n// type literal\n\ntype Foo{\n    Foo int `json:\"foo\"`\n}\n\n// type group\n\ntype(\n    Bar{\n        Bar int `json:\"bar\"`\n    }\n)\n\n// service block\n@server(\n    jwt:   Auth\n    group: foo\n)\nservice foo-api{\n    @doc \"foo\"\n    @handler foo\n    post /foo (Foo) returns (Bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Configuration Struct - Go\nDESCRIPTION: Defines the structure for REST configuration in API services. It includes parameters for host, port, log verbosity, max connections, and timeout settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nservice.ServiceConf // service配置\nHost     string `json:\",default=0.0.0.0\"` // http监听ip，默认0.0.0.0\nPort     int // http监听端口,必填\nCertFile string `json:\",optional\"` // https证书文件，可选\nKeyFile  string `json:\",optional\"` // https私钥文件，可选 \nVerbose  bool   `json:\",optional\"` // 是否打印详细http请求日志\nMaxConns int    `json:\",default=10000\"` // http同时可接受最大请求数（限流数），默认10000\nMaxBytes int64  `json:\",default=1048576,range=[0:8388608]\"` // http可接受请求的最大ContentLength，默认1048576，被设置值不能必须在0到8388608之间\n// milliseconds\nTimeout      int64         `json:\",default=3000\"` // 超时时长控制，单位：毫秒，默认3000\nCpuThreshold int64         `json:\",default=900,range=[0:1000]\"` // cpu降载阈值，默认900，可允许设置范围0到1000\nSignature    SignatureConf `json:\",optional\"` // 签名配置\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Context\nDESCRIPTION: Service context implementation with Add and Check service dependencies\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config  config.Config\n    Adder   adder.Adder          // manual code\n    Checker checker.Checker      // manual code\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        Adder:   adder.NewAdder(zrpc.MustNewClient(c.Add)),         // manual code\n        Checker: checker.NewChecker(zrpc.MustNewClient(c.Check)),   // manual code\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Datacenter Core API Definition\nDESCRIPTION: Main API definition file containing common services like application info and SNS integration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_1\n\nLANGUAGE: api\nCODE:\n```\ninfo(\n\ttitle: \"中台系统\"// TODO: add title\n\tdesc: \"中台系统\"// TODO: add description\n\tauthor: \"jackluo\"\n\temail: \"net.webjoy@gmail.com\"\n)\n\nimport \"user.api\"\nimport \"votes.api\"\nimport \"search.api\"\nimport \"questions.api\"\n\n//获取 应用信息\ntype Beid {\n\tBeid int64 `json:\"beid\"`\n}\ntype Token {\n\tToken string `json:\"token\"`\n}\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Data Validation in go-zero API Requests\nDESCRIPTION: This snippet shows how to implement data validation for API request structures in go-zero. It demonstrates various validation techniques such as default values, range constraints, optional fields, and value options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mapping.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\tcreateUserReq struct {\n\t\tage    int8   `json:\"age,default=20,range=(12:100]\"` // 年龄\n\t\tname   string `json:\"name\"`                          // 名字\n\t\talias  string `json:\"alias,optional\"`                // 别名\n\t\tsex    string `json:\"sex,options=male|female\"`       // 性别\n\t\tavatar string `json:\"avatar,default=default.png\"`    // 头像\n\t}\n\tcreateUserRes struct {\n\t\tsuccess bool `json:\"success\"` // 是否成功\n\t}\n)\n\nservice user {\n    @doc(\n        summary: 创建订单\n    )\n    @handler CreateUserHandler\n    post /user/add(createUserReq) returns(createUserRes)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Index-Based Caching in User Model\nDESCRIPTION: A practical example of using Go-Zero's index-based caching in a user model to find a user by username. It demonstrates creating index keys, defining query functions, and properly handling errors including the Not Found case.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-cache.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *defaultUserModel) FindOneByUser(user string) (*User, error) {\n  var resp User\n  // 生成基于索引的key\n  indexKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, user)\n  \n  err := m.QueryRowIndex(&resp, indexKey,\n    // 基于主键生成完整数据缓存的key\n    func(primary interface{}) string {\n      return fmt.Sprintf(\"user#%v\", primary)\n    },\n    // 基于索引的DB查询方法\n    func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n      query := fmt.Sprintf(\"select %s from %s where user = ? limit 1\", userRows, m.table)\n      if err := conn.QueryRow(&resp, query, user); err != nil {\n        return nil, err\n      }\n      return resp.Id, nil\n    },\n    // 基于主键的DB查询方法\n    func(conn sqlx.SqlConn, v, primary interface{}) error {\n      query := fmt.Sprintf(\"select %s from %s where id = ?\", userRows, m.table)\n      return conn.QueryRow(&resp, query, primary)\n    })\n  \n  // 错误处理，需要判断是否返回的是sqlc.ErrNotFound，如果是，我们用本package定义的ErrNotFound返回\n  // 避免使用者感知到有没有使用缓存，同时也是对底层依赖的隔离\n  switch err {\n    case nil:\n      return &resp, nil\n    case sqlc.ErrNotFound:\n      return nil, ErrNotFound\n    default:\n      return nil, err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Adaptive Shedder Instance\nDESCRIPTION: This function creates a new instance of adaptiveShedder, initializing it with options provided by the user or default parameters. It manages the configuration for CPU load thresholds and the sliding window for tracking request metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewAdaptiveShedder(opts ...ShedderOption) Shedder {\n    // 为了保证代码统一\n    // 当开发者关闭时返回默认的空实现，实现代码统一\n    // go-zero很多地方都采用了这种设计，比如Breaker，日志组件\n    if !enabled.True() {\n        return newNopShedder()\n    }\n    // options模式设置可选配置参数\n    options := shedderOptions{\n        // 默认统计最近5s内数据\n        window: defaultWindow,\n        // 默认桶数量50个\n        buckets:      defaultBuckets,\n        // cpu负载\n        cpuThreshold: defaultCpuThreshold,\n    }\n    for _, opt := range opts {\n        opt(&options)\n    }\n    // 计算每个窗口间隔时间，默认为100ms\n    bucketDuration := options.window / time.Duration(options.buckets)\n    return &adaptiveShedder{\n        // cpu负载\n        cpuThreshold:    options.cpuThreshold,\n        // 1s的时间内包含多少个滑动窗口单元\n        windows:         int64(time.Second / bucketDuration),\n        // 最近一次拒绝时间\n        dropTime:        syncx.NewAtomicDuration(),\n        // 最近是否被拒绝过\n        droppedRecently: syncx.NewAtomicBool(),\n        // qps统计，滑动时间窗口\n        // 忽略当前正在写入窗口（桶），时间周期不完整可能导致数据异常\n        passCounter: collection.NewRollingWindow(options.buckets, bucketDuration,\n            collection.IgnoreCurrentBucket()),\n        // 响应时间统计，滑动时间窗口\n        // 忽略当前正在写入窗口（桶），时间周期不完整可能导致数据异常\n        rtCounter: collection.NewRollingWindow(options.buckets, bucketDuration,\n            collection.IgnoreCurrentBucket()),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Redis Lock using Go\nDESCRIPTION: This snippet demonstrates how to create a new Redis lock and acquire it, with an optional expiration time. If the lock is already held by another user, it returns an error message indicating that the lock is unavailable.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-lock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nredisLockKey := fmt.Sprintf(\"%v%v\", redisTpl, headId)\n// 1. New redislock\nredisLock := redis.NewRedisLock(redisConn, redisLockKey)\n// 2. 可选操作，设置 redislock 过期时间\nredisLock.SetExpire(redisLockExpireSeconds)\nif ok, err := redisLock.Acquire(); !ok || err != nil {\n  return nil, errors.New(\"当前有其他用户正在进行操作，请稍后重试\")\n}\ndefer func() {\n  recover()\n  // 3. 释放锁\n  redisLock.Release()\n}()\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a streaming greeter service that includes request/response message types and a gRPC service definition with a greet method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-dir.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage stream;\n\noption go_package = \"./greet\";\n\nmessage StreamReq {\n  string name = 1;\n}\n\nmessage StreamResp {\n  string greet = 1;\n}\n\nservice StreamGreeter {\n  rpc greet(StreamReq) returns (StreamResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Index-Based Caching in Go with Redis\nDESCRIPTION: This function implements caching logic based on unique indexes. It first checks the cache for the primary key, then queries the database if necessary, and updates the cache accordingly. It handles both scenarios where the primary key is found or not found in the cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRowIndex(v interface{}, key string, keyer func(primary interface{}) string,\n  indexQuery IndexQueryFn, primaryQuery PrimaryQueryFn) error {\n  var primaryKey interface{}\n  var found bool\n\n  // First query the cache through the index to see if there is a cache from the index to the primary key\n  if err := cc.cache.TakeWithExpire(&primaryKey, key, func(val interface{}, expire time.Duration) (err error) {\n    // If there is no cache of the index to the primary key, then the complete data is queried through the index\n    primaryKey, err = indexQuery(cc.db, v)\n    if err != nil {\n      return\n    }\n\n    // The complete data is queried through the index, set to \"found\" and used directly later, no need to read data from the cache anymore\n    found = true\n    // Save the mapping from the primary key to the complete data in the cache. The TakeWithExpire method has saved the mapping from the index to the primary key in the cache.\n    return cc.cache.SetCacheWithExpire(keyer(primaryKey), v, expire+cacheSafeGapBetweenIndexAndPrimary)\n  }); err != nil {\n    return err\n  }\n\n  // The data has been found through the index, just return directly\n  if found {\n    return nil\n  }\n\n  // Read data from the cache through the primary key, if the cache is not available, read from the DB through the primaryQuery method and write back to the cache and then return the data\n  return cc.cache.Take(v, keyer(primaryKey), func(v interface{}) error {\n    return primaryQuery(cc.db, v, primaryKey)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel in go-zero Cache\nDESCRIPTION: This code snippet demonstrates the initialization of the TimingWheel within the go-zero cache component. It creates a new TimingWheel with a specified interval, number of slots, and an execute function that deletes expired keys from the cache. The timingWheel is used for key expiration management in the cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\ntimingWheel, err := NewTimingWheel(time.Second, slots, func(k, v interface{}) {\n  key, ok := k.(string)\n  if !ok {\n    return\n  }\n  cache.Del(key)\n})\nif err != nil {\n  return nil, err\n}\n\ncache.timingWheel = timingWheel\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Expansion Logic in Go\nDESCRIPTION: Logic for expanding shortened URLs by querying the database with caching support.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(in *transform.ExpandReq) (*transform.ExpandResp, error) {\n  // 手动代码开始\n  res, err := l.svcCtx.Model.FindOne(l.ctx, in.Shorten)\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ExpandResp{\n    Url: res.Url,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Watch Etcd Service Address Changes\nDESCRIPTION: Method for monitoring service address changes in etcd using watch mechanism\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *cluster) watch(cli EtcdClient, key string) {\n\trch := cli.Watch(clientv3.WithRequireLeader(c.context(cli)), makeKeyPrefix(key), clientv3.WithPrefix())\n\tfor {\n\t\tselect {\n\t\tcase wresp, ok := <-rch:\n\t\t\tif !ok {\n\t\t\t\tlogx.Error(\"etcd monitor chan has been closed\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif wresp.Canceled {\n\t\t\t\tlogx.Error(\"etcd monitor chan has been canceled\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif wresp.Err() != nil {\n\t\t\t\tlogx.Error(fmt.Sprintf(\"etcd monitor chan error: %v\", wresp.Err()))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.handleWatchEvents(key, wresp.Events)\n\t\tcase <-c.done:\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: TaskContainer Interface Definition in Go\nDESCRIPTION: Interface definition for task containers used by executors, specifying methods for adding tasks, executing them, and removing all tasks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/executors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nTaskContainer interface {\n\tAddTask(task interface{}) bool\n\tExecute(tasks interface{})\n\tRemoveAll() interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: SpanContext struct definition in go-zero\nDESCRIPTION: This code snippet defines the `spanContext` struct in go-zero, which is used to store the context information of distributed tracing. It includes the `traceId` and `spanId`, which are essential for identifying and correlating spans across different services. The `traceId` represents the globally unique ID of the tracer, while the `spanId` indicates the unique ID of a span in a single trace.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype spanContext struct {\n    traceId string      // TraceID represents the globally unique ID of tracer\n    spanId  string      // SpanId indicates the unique ID of a span in a single trace, which is unique in the trace\n}\n```\n\n----------------------------------------\n\nTITLE: Unique Index-based Cache Query Method\nDESCRIPTION: Complex caching strategy handling queries via unique indexes, supporting multiple cache mappings and fallback mechanisms\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRowIndex(v interface{}, key string, keyer func(primary interface{}) string,\n  indexQuery IndexQueryFn, primaryQuery PrimaryQueryFn) error {\n  // Implement index-based caching with primary key mapping\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Endpoints Service Discovery Configuration\nDESCRIPTION: Service discovery method for Kubernetes cluster environments, using native Kubernetes Endpoints for dynamically tracking service node information across namespaces.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/discovery.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nRpc:\n  Target: k8s://mynamespace/myservice:3456\n```\n\n----------------------------------------\n\nTITLE: Inserting Data with go-zero MySQL\nDESCRIPTION: Implementation of a MySQL insert operation in go-zero, demonstrating how to construct the SQL query and execute it with proper parameter binding.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 一个实际的insert model层操作\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    // insert op\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        logx.Errorf(\"insert User Position Model Model err, err=%v\", err)\n        return -1, err\n    }\n    id, err := res.LastInsertId()\n    if err != nil {\n        logx.Errorf(\"insert User Model to Id  parse id err,err=%v\", err)\n        return -1, err\n    }\n    return id, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Lookup with Index-Based Caching in Go\nDESCRIPTION: This function demonstrates a practical example of using the index-based caching logic to find a user by their username. It generates cache keys, defines query functions for both index and primary key lookups, and handles error cases.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-cache.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *defaultUserModel) FindOneByUser(user string) (*User, error) {\n  var resp User\n  // Generate index-based keys\n  indexKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, user)\n  \n  err := m.QueryRowIndex(&resp, indexKey,\n    // Generate a complete data cache key based on the primary key\n    func(primary interface{}) string {\n      return fmt.Sprintf(\"user#%v\", primary)\n    },\n    // Index-based DB query method\n    func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n      query := fmt.Sprintf(\"select %s from %s where user = ? limit 1\", userRows, m.table)\n      if err := conn.QueryRow(&resp, query, user); err != nil {\n        return nil, err\n      }\n      return resp.Id, nil\n    },\n    // DB query method based on primary key\n    func(conn sqlx.SqlConn, v, primary interface{}) error {\n      query := fmt.Sprintf(\"select %s from %s where id = ?\", userRows, m.table)\n      return conn.QueryRow(&resp, query, primary)\n    })\n\n // Error handling, you need to determine whether the returned sqlc.ErrNotFound is, if it is, we use the ErrNotFound defined in this package to return\n // Prevent users from perceiving whether or not the cache is used, and at the same time isolate the underlying dependencies\n  switch err {\n    case nil:\n      return &resp, nil\n    case sqlc.ErrNotFound:\n      return nil, ErrNotFound\n    default:\n      return nil, err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unary Shedding Interceptor in Go\nDESCRIPTION: This snippet implements a gRPC unary server interceptor for adaptive load shedding. It checks whether requests should be allowed through the Shedder interface and handles metrics for dropped requests accordingly. Callbacks are executed based on the outcome of the request.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc UnarySheddingInterceptor(shedder load.Shedder, metrics *stat.Metrics) grpc.UnaryServerInterceptor {\n    ensureSheddingStat()\n\n    return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo,\n        handler grpc.UnaryHandler) (val interface{}, err error) {\n        sheddingStat.IncrementTotal()\n        var promise load.Promise\n        // 检查是否被降载\n        promise, err = shedder.Allow()\n        // 降载，记录相关日志与指标\n        if err != nil {\n            metrics.AddDrop()\n            sheddingStat.IncrementDrop()\n            return\n        }\n        // 最后回调执行结果\n        defer func() {\n            // 执行失败\n            if err == context.DeadlineExceeded {\n                promise.Fail()\n            // 执行成功\n            } else {\n                sheddingStat.IncrementPass()\n                promise.Pass()\n            }\n        }() \n        // 执行业务方法\n        return handler(ctx, req)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TokenLimiter with Redis in Go\nDESCRIPTION: A code example showing how to initialize and use a token bucket rate limiter with Redis. The example demonstrates setting up a limiter with specified rate and burst parameters, and testing its performance across multiple goroutines.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/tokenlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tburst   = 100\n\trate    = 100\n\tseconds = 5\n)\n\nstore := redis.NewRedis(\"localhost:6379\", \"node\", \"\")\nfmt.Println(store.Ping())\n// New tokenLimiter\nlimiter := limit.NewTokenLimiter(rate, burst, store, \"rate-test\")\ntimer := time.NewTimer(time.Second * seconds)\nquit := make(chan struct{})\ndefer timer.Stop()\ngo func() {\n  <-timer.C\n  close(quit)\n}()\n\nvar allowed, denied int32\nvar wait sync.WaitGroup\nfor i := 0; i < runtime.NumCPU(); i++ {\n  wait.Add(1)\n  go func() {\n    for {\n      select {\n        case <-quit:\n          wait.Done()\n          return\n        default:\n          if limiter.Allow() {\n            atomic.AddInt32(&allowed, 1)\n          } else {\n            atomic.AddInt32(&denied, 1)\n          }\n      }\n    }\n  }()\n}\n\nwait.Wait()\nfmt.Printf(\"allowed: %d, denied: %d, qps: %d\\n\", allowed, denied, (allowed+denied)/seconds)\n```\n\n----------------------------------------\n\nTITLE: Protocol Buffer Definition for Transform Service\nDESCRIPTION: Proto file defining the RPC service for URL transformation with expand and shorten methods\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_2\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage transform;\n\noption go_package = \"./transform\";\n\nmessage expandReq {\n    string shorten = 1;\n}\n\nmessage expandResp {\n    string url = 1;\n}\n\nmessage shortenReq {\n    string url = 1;\n}\n\nmessage shortenResp {\n    string shorten = 1;\n}\n\nservice transformer {\n    rpc expand(expandReq) returns(expandResp);\n    rpc shorten(shortenReq) returns(shortenResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Main API Configuration Structure in Go\nDESCRIPTION: Main configuration structure that includes REST API settings, JWT authentication, database configuration, Redis cache, and RPC client settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct{\n    rest.RestConf // rest api configuration\n    Auth struct { // jwt authentication configuration\n        AccessSecret string // jwt key\n        AccessExpire int64 // jwt expire, unit: second\n    }\n    Mysql struct { // database configuration, in addition to mysql, there may be other databases such as mongo\n        DataSource string // mysql datasource, which satisfies the format of user:password@tcp(ip:port)db?queries\n    }\n    CacheRedis cache.CacheConf // redis cache\n    UserRpc    zrpc.RpcClientConf // rpc client configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Logic in API Gateway\nDESCRIPTION: Go code that implements the Add logic handler in the API Gateway, which forwards the request to the Add RPC service and translates the response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *AddLogic) Add(req *types.AddReq) (resp *types.AddResp, err error) {\n\t// 手动代码开始\n\tr, err := l.svcCtx.Adder.Add(l.ctx, &adder.AddReq{\n\t\tBook:  req.Book,\n\t\tPrice: req.Price,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &types.AddResp{\n\t\tOk: r.Ok,\n\t}, nil\n\t// 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: API Command Help Text Output\nDESCRIPTION: Detailed help text displaying available commands, including new, format, validate, doc, go, java, ts, dart, kt, and plugin options\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api - generate api related files\n\nUSAGE:\n   goctl api command [command options] [arguments...]\n\nCOMMANDS:\n   new       fast create api service\n   format    format api files\n   validate  validate api file\n   doc       generate doc files\n   go        generate go files for provided api in yaml file\n   java      generate java files for provided api in api file\n   ts        generate ts files for provided api in api file\n   dart      generate dart files for provided api in api file\n   kt        generate kotlin code for provided api file\n   plugin    custom file generator\n\nOPTIONS:\n   -o value    the output api file\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Implementing Expand Logic with Database\nDESCRIPTION: Logic for expanding URLs using database lookups\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(in *transform.ExpandReq) (*transform.ExpandResp, error) {\n\t// manual code start\n\tres, err := l.svcCtx.Model.FindOne(l.ctx, in.Shorten)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &transform.ExpandResp{\n\t\tUrl: res.Url,\n\t}, nil\n\t// manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Consumer Job with DQ\nDESCRIPTION: Consumer job implementation that processes messages from beanstalkd tubes. It uses the consumer instance from service context and threading.GoSafe for safe goroutine execution.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 消费者任务\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n)\n\ntype Consumer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewConsumerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Consumer {\n\treturn &Consumer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Consumer)Start()  {\n\tlogx.Infof(\"start consumer \\n\")\n\n\tthreading.GoSafe(func() {\n\t\tl.svcCtx.Consumer.Consume(func(body []byte) {\n\t\t\tlogx.Infof(\"consumer job  %s \\n\" ,string(body))\n\t\t})\n\t})\n}\n\nfunc (l *Consumer)Stop()  {\n\tlogx.Infof(\"stop consumer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script for Token Bucket Implementation\nDESCRIPTION: The Lua script used in go-zero's token bucket implementation to ensure atomic token operations. The script handles token generation based on rate and time elapsed, tracks remaining tokens, and determines if a request can be allowed based on available tokens.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/tokenlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- 返回是否可以活获得预期的token\n\nlocal rate = tonumber(ARGV[1])\nlocal capacity = tonumber(ARGV[2])\nlocal now = tonumber(ARGV[3])\nlocal requested = tonumber(ARGV[4])\n\n-- fill_time：需要填满 token_bucket 需要多久\nlocal fill_time = capacity/rate\n-- 将填充时间向下取整\nlocal ttl = math.floor(fill_time*2)\n\n-- 获取目前 token_bucket 中剩余 token 数\n-- 如果是第一次进入，则设置 token_bucket 数量为 令牌桶最大值\nlocal last_tokens = tonumber(redis.call(\"get\", KEYS[1]))\nif last_tokens == nil then\n    last_tokens = capacity\nend\n\n-- 上一次更新 token_bucket 的时间\nlocal last_refreshed = tonumber(redis.call(\"get\", KEYS[2]))\nif last_refreshed == nil then\n    last_refreshed = 0\nend\n\nlocal delta = math.max(0, now-last_refreshed)\n-- 通过当前时间与上一次更新时间的跨度，以及生产token的速率，计算出新的token数\n-- 如果超过 max_burst，多余生产的token会被丢弃\nlocal filled_tokens = math.min(capacity, last_tokens+(delta*rate))\nlocal allowed = filled_tokens >= requested\nlocal new_tokens = filled_tokens\nif allowed then\n    new_tokens = filled_tokens - requested\nend\n\n-- 更新新的token数，以及更新时间\nredis.call(\"setex\", KEYS[1], ttl, new_tokens)\nredis.call(\"setex\", KEYS[2], ttl, now)\n\nreturn allowed\n```\n\n----------------------------------------\n\nTITLE: Basic Query Row Cache Implementation in Go-Zero\nDESCRIPTION: Implementation of the QueryRow method that handles basic caching logic for single row queries. It first attempts to fetch from cache, falling back to database query if needed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRow(v interface{}, key string, query QueryFn) error {\n  return cc.cache.Take(v, key, func(v interface{}) error {\n    return query(cc.db, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Routes with Middleware in go-zero\nDESCRIPTION: API definition file showing route configuration with JWT and middleware declarations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntype SearchReq struct {}\n\ntype SearchReply struct {}\n\n@server(\n    jwt: Auth\n    middleware: Example // Routing middleware declaration\n)\nservice search-api {\n    @handler search\n    get /search/do (SearchReq) returns (SearchReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Public Methods for MapReduce in Go\nDESCRIPTION: This code block presents the public methods available for using the mapReduce functionality. These methods provide different ways to execute the mapReduce process, varying in error handling and data source management. The methods include `Finish`, `FinishVoid`, `Map`, `MapVoid`, `MapReduceVoid`, `MapReduce`, and `MapReduceWithSource`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 并发执行func，发生任何错误将会立即终止流程\nfunc Finish(fns ...func() error) error\n\n// 并发执行func，即使发生错误也不会终止流程\nfunc FinishVoid(fns ...func())\n\n// 需要用户手动将生产数据写入 source，加工数据后返回一个channel供读取\n// opts - 可选参数，目前包含：数据加工阶段协程数量\nfunc Map(generate GenerateFunc, mapper MapFunc, opts ...Option)\n\n// 无返回值，不关注错误\nfunc MapVoid(generate GenerateFunc, mapper VoidMapFunc, opts ...Option)\n\n// 无返回值，关注错误\nfunc MapReduceVoid(generate GenerateFunc, mapper MapperFunc, reducer VoidReducerFunc, opts ...Option)\n\n// 需要用户手动将生产数据写入 source ，并返回聚合后的数据\n// generate 生产\n// mapper 加工\n// reducer 聚合\n// opts - 可选参数，目前包含：数据加工阶段协程数量\nfunc MapReduce(generate GenerateFunc, mapper MapperFunc, reducer ReducerFunc, opts ...Option) (interface{}, error)\n\n// 支持传入数据源channel，并返回聚合后的数据\n// source - 数据源channel\n// mapper - 读取source内容并处理\n// reducer - 数据处理完毕发送至reducer聚合\nfunc MapReduceWithSource(source <-chan interface{}, mapper MapperFunc, reducer ReducerFunc,\n    opts ...Option) (interface{}, error)\n```\n```\n\n----------------------------------------\n\nTITLE: Moving Tasks in TimingWheel in go-zero\nDESCRIPTION: This function handles moving tasks within the TimingWheel based on their delay. It calculates new positions and circles for tasks, and handles immediate execution for tasks with very short delays.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) moveTask(task baseEntry) {\n\tval, ok := tw.timers.Get(task.key)\n\tif !ok {\n\t\treturn\n\t}\n\n\ttimer := val.(*positionEntry)\n\tif task.delay < tw.interval {\n\t\tthreading.GoSafe(func() {\n\t\t\ttw.execute(timer.item.key, timer.item.value)\n\t\t})\n\t\treturn\n\t}\n\tpos, circle := tw.getPositionAndCircle(task.delay)\n\tif pos >= timer.pos {\n\t\ttimer.item.circle = circle\n\t\ttimer.item.diff = pos - timer.pos\n\t} else if circle > 0 {\n\t\tcircle--\n\t\ttimer.item.circle = circle\n\t\ttimer.item.diff = tw.numSlots + pos - timer.pos\n\t} else {\n\t\ttimer.item.removed = true\n\t\tnewItem := &timingEntry{\n\t\t\tbaseEntry: task,\n\t\t\tvalue:     timer.item.value,\n\t\t}\n\t\ttw.slots[pos].PushBack(newItem)\n\t\ttw.setTimerPosition(pos, newItem)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Example Middleware\nDESCRIPTION: Example middleware implementation with basic request handling structure\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage middleware\n\nimport \"net/http\"\n\ntype ExampleMiddleware struct {\n}\n\nfunc NewExampleMiddleware() *ExampleMiddleware {\n        return &ExampleMiddleware{}\n}\n\nfunc (m *ExampleMiddleware) Handle(next http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        // TODO generate middleware implement function, delete after code implementation\n\n        // Passthrough to next handler if need\n        next(w, r)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: REST API Configuration Structure in Go\nDESCRIPTION: REST service configuration including host, port, SSL certificates, connection limits, and timeout settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nservice.ServiceConf // service configuration\nHost     string `json:\",default=0.0.0.0\"` // http listening ip, default 0.0.0.0\nPort     int // http listening port, required\nCertFile string `json:\",optional\"` // https certificate file, optional\nKeyFile  string `json:\",optional\"` // https private key file, optional \nVerbose  bool   `json:\",optional\"` // whether to print detailed http request log\nMaxConns int    `json:\",default=10000\"` // http can accept the maximum number of requests at the same time (current limit), the default is 10000\nMaxBytes int64  `json:\",default=1048576,range=[0:8388608]\"` // http can accept the maximum Content Length of the request, the default is 1048576, and the set value cannot be between 0 and 8388608\n// milliseconds\nTimeout      int64         `json:\",default=3000\"` // timeout duration control, unit: milliseconds, default 3000\nCpuThreshold int64         `json:\",default=900,range=[0:1000]\"` // CPU load reduction threshold, the default is 900, the allowable setting range is 0 to 1000\nSignature    SignatureConf `json:\",optional\"` // signature configuration\n```\n\n----------------------------------------\n\nTITLE: Initializing PeriodicalExecutor in Go\nDESCRIPTION: This code snippet shows the initialization of a PeriodicalExecutor. It sets up channels for task management, a container for task storage, and a ticker for periodic execution.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc New...(interval time.Duration, container TaskContainer) *PeriodicalExecutor {\n\texecutor := &PeriodicalExecutor{\n\t\tcommander:   make(chan interface{}, 1),\n\t\tinterval:    interval,\n\t\tcontainer:   container,\n\t\tconfirmChan: make(chan lang.PlaceholderType),\n\t\tnewTicker: func(d time.Duration) timex.Ticker {\n\t\t\treturn timex.NewTicker(interval)\n\t\t},\n\t}\n\t...\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Base RPC Configuration Structure in Go\nDESCRIPTION: Main configuration structure for RPC services that includes server configuration, Redis cache settings, and MySQL database connection details.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nConfig struct {\n    zrpc.RpcServerConf\n    CacheRedis         cache.CacheConf // Redis cache configuration, see the api configuration instructions for details, and I won't go into details here\n    Mysql struct { // mysql database access configuration, see api configuration instructions for details, not repeat here\n        DataSource string\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script for PeriodLimit Rate Limiting\nDESCRIPTION: This Lua script is used by Go-Zero's PeriodLimit to implement rate limiting. It increments a counter for each request, sets an expiration time for new keys, and returns different codes based on whether the request is within the limit, at the limit, or over the limit.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/periodlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- to be compatible with aliyun redis, \n-- we cannot use `local key = KEYS[1]` to reuse thekey\nlocal limit = tonumber(ARGV[1])\nlocal window = tonumber(ARGV[2])\n-- incrbt key 1 => key visis++\nlocal current = redis.call(\"INCRBY\", KEYS[1], 1)\n-- 如果是第一次访问，设置过期时间 => TTL = window size\n-- 因为是只限制一段时间的访问次数\nif current == 1 then\n    redis.call(\"expire\", KEYS[1], window)\n    return 1\nelseif current < limit then\n    return 1\nelseif current == limit then\n    return 2\nelse\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: Detailed Logic of doTake Method for Cache Management\nDESCRIPTION: The `doTake` method implements the core logic of cache handling, including fetching cached data, querying the database if needed, and writing data back to the cache while managing potential cache penetration scenarios.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-cache.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// v - The data object that needs to be read\n// key - Cache key\n// query - Method used to read complete data from DB\n// cacheVal - Method used to write cache\nfunc (c cacheNode) doTake(v interface{}, key string, query func(v interface{}) error,\n  cacheVal func(v interface{}) error) error {\n  // Use barriers to prevent cache breakdown and ensure that there is only one request in a process to load the data corresponding to the key\n  val, fresh, err := c.barrier.DoEx(key, func() (interface{}, error) {\n    // Read data from the cache\n    if err := c.doGetCache(key, v); err != nil {\n      // If it is a placeholder that was put in beforehand (to prevent cache penetration), then the default errNotFound is returned\n      // If it is an unknown error, then return directly, because we can't give up the cache error and directly send all requests to the DB,\n      // This will kill the DB in a high concurrency scenario\n      if err == errPlaceholder {\n        return nil, c.errNotFound\n      } else if err != c.errNotFound {\n        // why we just return the error instead of query from db,\n        // because we don't allow the disaster pass to the DBs.\n        // fail fast, in case we bring down the dbs.\n        return nil, err\n      }\n\n      // request DB\n      // If the returned error is errNotFound, then we need to set a placeholder in the cache to prevent the cache from penetrating\n      if err = query(v); err == c.errNotFound {\n        if err = c.setCacheWithNotFound(key); err != nil {\n          logx.Error(err)\n        }\n\n        return nil, c.errNotFound\n      } else if err != nil {\n        // Statistics DB failed\n        c.stat.IncrementDbFails()\n        return nil, err\n      }\n\n      // Write data to cache\n      if err = cacheVal(v); err != nil {\n        logx.Error(err)\n      }\n    }\n    \n    // Return json serialized data\n    return jsonx.Marshal(v)\n  })\n  if err != nil {\n    return err\n  }\n  if fresh {\n    return nil\n  }\n\n  // got the result from previous ongoing query\n  c.stat.IncrementTotal()\n  c.stat.IncrementHit()\n\n  // Write data to the incoming v object\n  return jsonx.Unmarshal(val.([]byte), v)\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point for DQ Jobs\nDESCRIPTION: Main function that loads configuration, creates service context, registers jobs, and handles OS signals for graceful shutdown. It uses service.ServiceGroup to manage job lifecycle.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 启动文件\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/zeromicro/go-zero/core/conf\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/config\"\n\t\"job/internal/handler\"\n\t\"job/internal/svc\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\n\n\nvar configFile = flag.String(\"f\", \"etc/job.yaml\", \"the config file\")\n\nfunc main() {\n\tflag.Parse()\n\n\t//配置\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\tctx := svc.NewServiceContext(c)\n\n\t//注册job\n\tgroup := service.NewServiceGroup()\n\thandler.RegisterJob(ctx,group)\n\n\t//捕捉信号\n\tch := make(chan os.Signal)\n\tsignal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)\n\tgo func() {\n\t\tfor {\n\t\t\ts := <-ch\n\t\t\tlogx.Infof(\"get a signal %s\", s.String())\n\t\t\tswitch s {\n\t\t\tcase syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:\n\t\t\t\tfmt.Printf(\"stop group\")\n\t\t\t\tgroup.Stop()\n\t\t\t\tlogx.Info(\"job exit\")\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\treturn\n\t\t\tcase syscall.SIGHUP:\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\t\n\tgroup.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Transition Option in Go-Zero REST Server\nDESCRIPTION: Defines a RouteOption for JWT authentication with transition support. This function accepts both current and previous secrets, allowing for a smooth transition period when updating JWT secrets.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc WithJwtTransition(secret, prevSecret string) RouteOption\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script for PeriodLimit Implementation\nDESCRIPTION: The Lua script used by PeriodLimit to implement sliding window rate limiting in Redis. It increments a counter for each request, sets an expiration time for new keys, and returns a status code based on whether the request is allowed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/periodlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- to be compatible with aliyun redis, \n-- we cannot use `local key = KEYS[1]` to reuse thekey\nlocal limit = tonumber(ARGV[1])\nlocal window = tonumber(ARGV[2])\n-- incrbt key 1 => key visis++\nlocal current = redis.call(\"INCRBY\", KEYS[1], 1)\n-- 如果是第一次访问，设置过期时间 => TTL = window size\n-- 因为是只限制一段时间的访问次数\nif current == 1 then\n    redis.call(\"expire\", KEYS[1], window)\n    return 1\nelseif current < limit then\n    return 1\nelseif current == limit then\n    return 2\nelse\n    return 0\nend\n```\n\n----------------------------------------\n\nTITLE: TimingWheel Run Loop\nDESCRIPTION: Main event loop for the TimingWheel that handles timer ticks and task operations through channels. Processes incoming tasks and triggers scheduled executions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/timing-wheel.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) run() {\n\tfor {\n\t\tselect {\n\t\tcase <-tw.ticker.Chan():\n\t\t\ttw.onTick()\n\t\tcase task := <-tw.setChannel:\n\t\t\ttw.setTask(&task)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Questions and Awards API Definition\nDESCRIPTION: API definitions for Q&A system and award management\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_4\n\nLANGUAGE: api\nCODE:\n```\ntype AnswerReq struct {\n\tActivityId\tint64 `json:\"actid\"`\n\tAnswers\tstring `json:\"answers\"`\n\tScore\tstring `json:\"score\"`\n}\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Hashing Elements for Bloom Filter in go-zero\nDESCRIPTION: Implements the hashing mechanism for the Bloom filter. It hashes the input data 14 times, each time appending a different byte, to generate 14 different locations in the bit array.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bloom.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) getLocations(data []byte) []uint {\n\tlocations := make([]uint, maps)\n\tfor i := uint(0); i < maps; i++ {\n\t\thashValue := hash.Hash(append(data, byte(i)))\n\t\tlocations[i] = uint(hashValue % uint64(f.bits))\n\t}\n\n\treturn locations\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Return Logic in Go\nDESCRIPTION: Implementation of the return logic for the library management system, including book and user validation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ReturnLogic) Return(userId string,req types.ReturnReq) error {\n\tuserInt, err := strconv.ParseInt(fmt.Sprintf(\"%v\", userId), 10, 64)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tbook, err := l.svcCtx.LibraryRpc.FindBookByName(l.ctx, &library.FindBookReq{Name: req.BookName})\n\tif err != nil { // code error\n\t\tif shared.IsGRPCNotFound(err) {\n\t\t\treturn errBookNotFound\n\t\t}\n\t\treturn err\n\t}\n\n\tinfo, err := l.svcCtx.BorrowSystemModel.FindOneByUserAndBookNo(userInt, book.No)\n\tswitch err {\n    case nil:\n        if info.Status == model.Return {\n\t\t\treturn errBookReturn\n\t\t}\n        info.ReturnDate = time.Now().Unix()\n        info.Status = model.Return\n\t\terr = l.svcCtx.BorrowSystemModel.Update(*info)\n\t\treturn err\n\tcase model.ErrNotFound:\n\t\treturn errUserReturn\n\tdefault:\n\t\treturn err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Structure for Zero Go API Project\nDESCRIPTION: This code snippet shows the directory structure of a Zero Go API project, including the main folders and files with their respective purposes. It outlines the organization of configuration files, API descriptions, handlers, business logic, middleware, and generated types.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-dir.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── etc\n│   └── greet-api.yaml              // 配置文件\n├── go.mod                          // mod文件\n├── greet.api                       // api描述文件\n├── greet.go                        // main函数入口\n└── internal                        \n    ├── config  \n    │   └── config.go               // 配置声明type\n    ├── handler                     // 路由及handler转发\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic                       // 业务逻辑\n    │   └── greetlogic.go\n    ├── middleware                  // 中间件文件\n    │   └── greetmiddleware.go\n    ├── svc                         // logic所依赖的资源池\n    │   └── servicecontext.go\n    └── types                       // request、response的struct，根据api自动生成，不建议编辑\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Cache Operations in Go with Redis\nDESCRIPTION: Example implementation of content caching operations using Redis, including functions for adding, deleting, and listing content with time-based queries. Uses Redis sorted sets for storage with timestamps as scores.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/buiness-cache.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\ntype Content struct {\n    Id         string    `json:\"id\"`\n    Title      string    `json:\"title\"`\n    Content    string    `json:\"content\"`\n    CreateTime time.Time `json:\"create_time\"`\n}\n\nconst bizContentCacheKey = `biz#content#cache`\n\n// AddContent provides content storage\nfunc AddContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zadd(bizContentCacheKey, c.CreateTime.UnixNano()/1e6, v)\n    return err\n}\n\n// DelContent provides content deletion\nfunc DelContent(r redis.Redis, c *Content) error {\n    v := compress(c)\n    _, err := r.Zrem(bizContentCacheKey, v)\n\n    return err\n}\n\n// Content compression\nfunc compress(c *Content) string {\n    // todo: do it yourself\n    var ret string\n    return ret\n}\n\n// Content decompression\nfunc unCompress(v string) *Content {\n\t// todo: do it yourself\n\tvar ret Content\n\treturn &ret\n}\n\n// ListByRangeTime provides data query based on time period\nfunc ListByRangeTime(r redis.Redis, start, end time.Time) ([]*Content, error) {\n\tkvs, err := r.ZrangebyscoreWithScores(bizContentCacheKey, start.UnixNano()/1e6, end.UnixNano()/1e6)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar list []*Content\n\tfor _, kv := range kvs {\n\t\tdata:=unCompress(kv.Key)\n\t\tlist = append(list, data)\n\t}\n\n\treturn list, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Middleware Example in Go-Zero REST Server\nDESCRIPTION: Demonstrates implementing and registering a custom middleware that adds a header to all responses. The middleware adds an X-Middleware header with the value 'first' before passing control to the next handler.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc first(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Add(\"X-Middleware\", \"first\")\n\t\tnext(w, r)\n\t}\n}\n\nengine.Use(first)\n```\n\n----------------------------------------\n\nTITLE: Defining the subConn struct in go-zero\nDESCRIPTION: This code defines the `subConn` struct in go-zero, which represents a connection to a backend server. It stores information such as the server's address, the gRPC connection object, EWMA value (`lag`), inflight requests, connection health status (`success`), total requests, last request duration (`last`), and the last pick time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"type subConn struct {\\n    addr     resolver.Address\\n    conn     balancer.SubConn\\n    lag      uint64 // 用来保存 ewma 值\\n    inflight int64  // 用在保存当前节点正在处理的请求总数\\n    success  uint64 // 用来标识一段时间内此连接的健康状态\\n    requests int64  // 用来保存请求总数\\n    last     int64  // 用来保存上一次请求耗时, 用于计算 ewma 值\\n    pick     int64  // 保存上一次被选中的时间点\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel Structure in go-zero\nDESCRIPTION: This function initializes the TimingWheel structure with the specified interval, number of slots, execution function, and ticker. It sets up the internal data structures and starts a goroutine to manage the timing wheel operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newTimingWheelWithClock(interval time.Duration, numSlots int, execute Execute, ticker timex.Ticker) (\n\t*TimingWheel, error) {\n\ttw := &TimingWheel{\n\t\tinterval:      interval,\n\t\tticker:        ticker,\n\t\tslots:         make([]*list.List, numSlots),\n\t\ttimers:        NewSafeMap(),\n\t\ttickedPos:     numSlots - 1,\n\t\texecute:       execute,\n\t\tnumSlots:      numSlots,\n\t\tsetChannel:    make(chan timingEntry),\n\t\tmoveChannel:   make(chan baseEntry),\n\t\tremoveChannel: make(chan interface{}),\n\t\tdrainChannel:  make(chan func(key, value interface{})),\n\t\tstopChannel:   make(chan lang.PlaceholderType),\n\t}\n\ttw.initSlots()\n\tgo tw.run()\n\n\treturn tw, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Proto Template - Protocol Buffers\nDESCRIPTION: Example of a basic proto file template with Request/Response messages and service definition.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\noption go_package=\"./user\";\n\nmessage Request {\n  string ping = 1;\n}\n\nmessage Response {\n  string pong = 1;\n}\n\nservice User {\n  rpc Ping(Request) returns(Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Token Limiter Usage Example in Go\nDESCRIPTION: This code snippet demonstrates how to use the `TokenLimiter` in Go. It initializes a Redis store, creates a new `TokenLimiter` with specified rate and burst parameters, and then simulates concurrent requests to test the rate limiting functionality. It uses goroutines and atomic operations to track the number of allowed and denied requests.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/tokenlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nconst (\n\tburst   = 100\n\trate    = 100\n\tseconds = 5\n)\n\nstore := redis.NewRedis(\"localhost:6379\", \"node\", \"\")\nfmt.Println(store.Ping())\n// New tokenLimiter\nlimiter := limit.NewTokenLimiter(rate, burst, store, \"rate-test\")\ntimer := time.NewTimer(time.Second * seconds)\nquit := make(chan struct{})\ndefer timer.Stop()\ngo func() {\n  <-timer.C\n  close(quit)\n}()\n\nvar allowed, denied int32\nvar wait sync.WaitGroup\nfor i := 0; i < runtime.NumCPU(); i++ {\n  wait.Add(1)\n  go func() {\n    for {\n      select {\n        case <-quit:\n          wait.Done()\n          return\n        default:\n          if limiter.Allow() {\n            atomic.AddInt32(&allowed, 1)\n          } else {\n            atomic.AddInt32(&denied, 1)\n          }\n      }\n    }\n  }()\n}\n\nwait.Wait()\nfmt.Printf(\"allowed: %d, denied: %d, qps: %d\\n\", allowed, denied, (allowed+denied)/seconds)\n```\n```\n\n----------------------------------------\n\nTITLE: Redis Lock Release Implementation\nDESCRIPTION: Implementation of lock release mechanism using Lua script to ensure only the lock owner can release it by verifying the unique ID.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-lock.md#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    return redis.call(\"DEL\", KEYS[1])\nelse\n    return 0\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Release() (bool, error) {\n\tresp, err := rl.store.Eval(delCommand, []string{rl.key}, []string{rl.id})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tif reply, ok := resp.(int64); !ok {\n\t\treturn false, nil\n\t} else {\n\t\treturn reply == 1, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Server Configuration Structure in Go\nDESCRIPTION: Detailed RPC server configuration structure including service settings, authentication, timeout controls, and CPU threshold settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nRpcServerConf struct {\n    service.ServiceConf // 服务配置，详情见api配置说明，这里不赘述\n    ListenOn      string // rpc监听地址和端口，如：127.0.0.1:8888\n    Etcd          discov.EtcdConf    `json:\",optional\"` // etcd相关配置\n    Auth          bool               `json:\",optional\"` // 是否开启Auth，如果是则Redis为必填\n    Redis         redis.RedisKeyConf `json:\",optional\"` // Auth验证\n    StrictControl bool               `json:\",optional\"` // 是否Strict模式，如果是则遇到错误是Auth失败，否则可以认为成功\n    // pending forever is not allowed\n    // never set it to 0, if zero, the underlying will set to 2s automatically\n    Timeout      int64 `json:\",default=2000\"` // 超时控制，单位：毫秒\n    CpuThreshold int64 `json:\",default=900,range=[0:1000]\"` // cpu降载阈值，默认900，可允许设置范围0到1000\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model from DDL using goctl\nDESCRIPTION: This command generates the model layer code by parsing the MySQL DDL files specified by the `-src` flag. The generated code is placed in the directory specified by the `-dir` flag. The `-c` flag likely enables caching.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql ddl -src=\"./*.sql\" -dir=\"./sql/model\" -c\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel in Cache\nDESCRIPTION: Shows how to initialize a TimingWheel instance within a cache implementation. The TimingWheel is configured with an interval, number of slots, and an execution function for handling expired keys.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/timing-wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntimingWheel, err := NewTimingWheel(time.Second, slots, func(k, v interface{}) {\n  key, ok := k.(string)\n  if !ok {\n    return\n  }\n  cache.Del(key)\n})\nif err != nil {\n  return nil, err\n}\n```\n\n----------------------------------------\n\nTITLE: Completing Service Dependencies\nDESCRIPTION: This Go code snippet updates the `ServiceContext` struct to include the `UserModel`. It initializes the `UserModel` with a MySQL connection and the Redis cache configuration. This allows the service to access the database and cache to retrieve user information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config    config.Config\n    UserModel model.UserModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn:=sqlx.NewMysql(c.Mysql.DataSource)\n    return &ServiceContext{\n        Config: c,\n        UserModel: model.NewUserModel(conn,c.CacheRedis),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Service with Protocol Buffers\nDESCRIPTION: Protocol Buffer definition for a streaming greeter service that includes request/response message types and a service definition for a greet RPC method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-dir.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage stream;\n\noption go_package = \"./greet\";\n\nmessage StreamReq {\n  string name = 1;\n}\n\nmessage StreamResp {\n  string greet = 1;\n}\n\nservice StreamGreeter {\n  rpc greet(StreamReq) returns (StreamResp);\n}\n```\n\n----------------------------------------\n\nTITLE: MapReduce Core Function Definitions in go-zero\nDESCRIPTION: Defines the core function types used in the MapReduce implementation: GenerateFunc for data production, MapperFunc for data processing, and ReducerFunc for data aggregation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/other-component/mapreduce.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nGenerateFunc func(source chan<- interface{})\n\nMapperFunc func(item interface{}, writer Writer, cancel func(error))\n\nReducerFunc func(pipe <-chan interface{}, writer Writer, cancel func(error))\n```\n\n----------------------------------------\n\nTITLE: Defining Order API Schema\nDESCRIPTION: Defines the API schema for the order service with request and response types.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype(\n    OrderReq {\n        Id string `path:\"id\"`\n    }\n  \n    OrderReply {\n        Id   string `json:\"id\"`\n        Name string `json:\"name\"`\n    }\n)\n\nservice order {\n    @handler getOrder\n    get /api/order/get/:id (OrderReq) returns (OrderReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Building the p2cPicker in go-zero\nDESCRIPTION: This code snippet shows how the `p2cPicker` is built when gRPC detects updates to the available service nodes. It iterates through the `readySCs` (ready SubConns) and creates a `subConn` struct for each, populating it with the address and connection information. These `subConn` instances are then stored in the `p2cPicker` struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"func (b *p2cPickerBuilder) Build(info base.PickerBuildInfo) balancer.Picker {\\n  ......\\n  var conns []*subConn\\n  for conn, connInfo := range readySCs {\\n    conns = append(conns, &subConn{\\n      addr:    connInfo.Address,\\n      conn:    conn,\\n      success: initSuccess,\\n    })\\n  }\\n  return &p2cPicker{\\n    conns: conns,\\n    r:     rand.New(rand.NewSource(time.Now().UnixNano())),\\n    stamp: syncx.NewAtomicDuration(),\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: TimingWheel Core Initialization\nDESCRIPTION: Detailed initialization of the TimingWheel structure including slots, channels, and timer setup. Initializes the time wheel data structure and starts the background goroutine for task processing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/timing-wheel.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc newTimingWheelWithClock(interval time.Duration, numSlots int, execute Execute, ticker timex.Ticker) (\n\t*TimingWheel, error) {\n\ttw := &TimingWheel{\n\t\tinterval:      interval,\n\t\tticker:        ticker,\n\t\tslots:         make([]*list.List, numSlots),\n\t\ttimers:        NewSafeMap(),\n\t\ttickedPos:     numSlots - 1,\n\t\texecute:       execute,\n\t\tnumSlots:      numSlots,\n\t\tsetChannel:    make(chan timingEntry),\n\t\tmoveChannel:   make(chan baseEntry),\n\t\tremoveChannel: make(chan interface{}),\n\t\tdrainChannel:  make(chan func(key, value interface{})),\n\t\tstopChannel:   make(chan lang.PlaceholderType),\n\t}\n\ttw.initSlots()\n\tgo tw.run()\n\n\treturn tw, nil\n}\n```\n\n----------------------------------------\n\nTITLE: SharedCalls Interface Definition in Go\nDESCRIPTION: The interface definition for SharedCalls, which provides two methods: Do and DoEx. These methods allow concurrent requests to share results when accessing the same resource.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// SharedCalls接口提供了Do和DoEx两种方法\ntype SharedCalls interface {\n  Do(key string, fn func() (interface{}, error)) (interface{}, error)\n  DoEx(key string, fn func() (interface{}, error)) (interface{}, bool, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying goctl rpc new Subcommand Usage\nDESCRIPTION: Shows the usage information for the goctl rpc new subcommand, which generates a demo RPC service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   goctl rpc new - generate rpc demo service\n\nUSAGE:\n   goctl rpc new [command options] [arguments...]\n\nOPTIONS:\n   --style value  the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --idea         whether the command execution environment is from idea plugin. [optional]\n```\n\n----------------------------------------\n\nTITLE: Parallel Dependency Handling with Fx in Go\nDESCRIPTION: Example of using Fx's Parallel function to handle multiple service dependencies concurrently, improving performance in microservice architectures.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/fx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfx.Parallel(func() {\n  userRPC() // 依赖1\n}, func() {\n  accountRPC() // 依赖2\n}, func() {\n  orderRPC() // 依赖3\n})\n```\n\n----------------------------------------\n\nTITLE: Defining the p2cPicker struct in go-zero\nDESCRIPTION: This code defines the `p2cPicker` struct in go-zero, which implements the p2c (Pick of Two Choices) load balancing algorithm. It contains a list of `subConn` structs representing available backend servers, a random number generator, an atomic duration for tracking timestamps, and a mutex for synchronization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"type p2cPicker struct {\\n  conns []*subConn  // 保存所有节点的信息 \\n  r     *rand.Rand\\n  stamp *syncx.AtomicDuration\\n  lock  sync.Mutex\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Main RPC Configuration Structure in Go\nDESCRIPTION: Main configuration structure that includes RPC server configuration along with Redis cache and MySQL database settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-config.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nConfig struct {\n    zrpc.RpcServerConf\n    CacheRedis         cache.CacheConf // redis缓存配置，详情见api配置说明，这里不赘述\n    Mysql struct { // mysql数据库访问配置，详情见api配置说明，这里不赘述\n        DataSource string\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST Engine Structure in Go\nDESCRIPTION: This snippet shows the structure of the REST engine in Go-Zero. It includes fields for configuration, routes, callbacks, middlewares, and load shedders.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rest engine.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype engine struct {\n\tconf                 RestConf\n\troutes               []featuredRoutes\n\tunauthorizedCallback handler.UnauthorizedCallback\n\tunsignedCallback     handler.UnsignedCallback\n\tmiddlewares          []Middleware\n\tshedder              load.Shedder\n\tpriorityShedder      load.Shedder\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST API Routes in Go\nDESCRIPTION: Examples of recommended API route path structures following the naming convention of lowercase words separated by hyphens. Shows different variations of endpoint paths including parameterized routes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/route-naming-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/user/get-info\n/user/get/info\n/user/password/change/:id\n```\n\n----------------------------------------\n\nTITLE: Implementing Shorten Logic in shortenlogic.go\nDESCRIPTION: This Go snippet implements the shorten logic for the transform service. It generates a short key by hashing the input URL, inserts the shortened key and the original URL into the database using the `Insert` method of the `ShorturlModel`. The generated short key is then returned in the `ShortenResp` struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"func (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\\n  // 手动代码开始，生成短链接\\n  key := hash.Md5Hex([]byte(in.Url))[:6]\\n  _, err := l.svcCtx.Model.Insert(model.Shorturl{\\n    Shorten: key,\\n    Url:     in.Url,\\n  })\\n  if err != nil {\\n    return nil, err\\n  }\\n\\n  return &transform.ShortenResp{\\n    Shorten: key,\\n  }, nil\\n  // 手动代码结束\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Logging with Context in Go-Zero Logx\nDESCRIPTION: Shows how to log with context, which is useful for including tracing information like traceId and spanId in logs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlogx.WithContext(context.Context).Info(\"This is info!\")\n```\n\n----------------------------------------\n\nTITLE: HTTP Tracing Handler in go-zero\nDESCRIPTION: This code snippet demonstrates the HTTP tracing handler in go-zero, which intercepts HTTP requests to extract tracing information from headers, create a new span, and propagate the tracing context. It extracts trace information using `trace.Extract`, starts a server span using `trace.StartServerSpan`, and adds the span to the request context. This ensures that all subsequent operations within the handler are associated with the trace.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TracingHandler(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        // **1**\n        carrier, err := trace.Extract(trace.HttpFormat, r.Header)\n        // ErrInvalidCarrier means no trace id was set in http header\n        if err != nil && err != trace.ErrInvalidCarrier {\n            logx.Error(err)\n        }\n\n        // **2**\n        ctx, span := trace.StartServerSpan(r.Context(), carrier, sysx.Hostname(), r.RequestURI)\n        defer span.Finish()\n        // **5**\n        r = r.WithContext(ctx)\n\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service with goctl\nDESCRIPTION: This snippet demonstrates the command to generate RPC service files from a .proto definition using the goctl tool. It specifies the source proto file and the output directory for the generated Go code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n➜  rpc goctl rpc proto -src common.proto -dir .\nprotoc  -I=/Users/jackluo/works/blogs/datacenter/common/rpc common.proto --go_out=plugins=grpc:/Users/jackluo/works/blogs/datacenter/common/rpc/common\nDone.\n```\n\n----------------------------------------\n\nTITLE: Managing Cache Key with TimingWheel\nDESCRIPTION: This function handles setting keys in the cache with expiry times managed by the TimingWheel. It adds or updates values in the data map and uses either SetTimer or MoveTimer to schedule the key's expiration through the timing wheel.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Cache) Set(key string, value interface{}) {\n\tc.lock.Lock()\n\t_, ok := c.data[key]\n\tc.data[key] = value\n\tc.lruCache.add(key)\n\tc.lock.Unlock()\n\n\texpiry := c.unstableExpiry.AroundDuration(c.expire)\n\tif ok {\n\t\tc.timingWheel.MoveTimer(key, expiry)\n\t} else {\n\t\tc.timingWheel.SetTimer(key, value, expiry)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: newServerSpan function in go-zero\nDESCRIPTION: This code snippet defines the `newServerSpan` function, which creates a new `Span` instance. It retrieves `traceId` and `spanId` from the carrier (HTTP headers) if available, otherwise, it generates new ones. The function initializes the `Span` with the `traceId`, `spanId`, `serviceName`, `operationName`, `startTime`, and a flag indicating it's a server span.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc newServerSpan(carrier Carrier, serviceName, operationName string) tracespec.Trace {\n    // **3**\n    traceId := stringx.TakeWithPriority(func() string {\n        if carrier != nil {\n            return carrier.Get(traceIdKey)\n        }\n        return \"\"\n    }, func() string {\n        return stringx.RandId()\n    })\n    spanId := stringx.TakeWithPriority(func() string {\n        if carrier != nil {\n            return carrier.Get(spanIdKey)\n        }\n        return \"\"\n    }, func() string {\n        return initSpanId\n    })\n\n    return &Span{\n        ctx: spanContext{\n            traceId: traceId,\n            spanId:  spanId,\n        },\n        serviceName:   serviceName,\n        operationName: operationName,\n        startTime:     timex.Time(),\n        // 标记为server\n        flag:          serverFlag,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Transaction Handling\nDESCRIPTION: Demonstrates how to implement transaction handling in go-zero using the Transact method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mysql.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar insertsql = `insert into User(uid, username, mobilephone) values (?, ?, ?)`\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n\n    // 返回任何错误都会回滚事务\n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        logx.Errorf(\"insert userinfo stmt exec: %s\", err)\n        return err\n    }\n\n    // 还可以继续执行 insert/update/delete 相关操作\n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Gracefully Closing Logx in Go\nDESCRIPTION: Demonstrates how to gracefully close the logger using a shutdown listener to prevent log loss.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/zeromicro/go-zero/core/proc\"\n\n// grace close log\nproc.AddShutdownListener(func() {\n\tlogx.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Defining User Model and Query Fields in Go\nDESCRIPTION: Shows how to define a User struct for MySQL operations and create a string of field names using go-zero's builder package.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar userBuilderQueryRows = strings.Join(builder.FieldNames(&User{}), \",\")\n\ntype User struct {\n    Avatar string `db:\"avatar\"` \t\t\t// 头像\n    UserName string `db:\"user_name\"` \t\t// 姓名\n    Sex int `db:\"sex\"` \t\t\t\t\t// 1男,2女\n    MobilePhone string `db:\"mobile_phone\"` \t// 手机号\n}\n```\n\n----------------------------------------\n\nTITLE: SharedCalls Implementation Structure in Go\nDESCRIPTION: The implementation of SharedCalls using a sharedGroup structure. It defines a call struct for tracking individual requests and the sharedGroup that manages all concurrent calls.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// call代表对指定资源的一次请求\ntype call struct {\n  wg  sync.WaitGroup  // 用于协调各个请求goroutine之间的资源共享\n  val interface{}     // 用于保存请求的返回值\n  err error           // 用于保存请求过程中发生的错误\n}\n\ntype sharedGroup struct {\n  calls map[string]*call\n  lock  sync.Mutex\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Transform Template Pattern in Go\nDESCRIPTION: Shows the general design template used for stream transformations in fx, including channel creation, goroutine worker, and stream conversion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/fx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) Transform(fn func(item interface{}) interface{}) Stream {\n\tsource := make(chan interface{})\n\tgo func() {\n\t\tfor item := range p.source {\n\t\t\t...\n\t\t\tsource <- item\n\t\t\t...\n\t\t}\n\t\t...\n\t\tclose(source)\n\t}()\n\treturn Range(source)\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Cache Implementation Example\nDESCRIPTION: Example implementation of a user model showing how to use the caching system with both index and primary key based queries.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-cache.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *defaultUserModel) FindOneByUser(user string) (*User, error) {\n  var resp User\n  indexKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, user)\n  err := m.QueryRowIndex(&resp, indexKey,\n    func(primary interface{}) string {\n      return fmt.Sprintf(\"user#%v\", primary)\n    },\n    func(conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n      query := fmt.Sprintf(\"select %s from %s where user = ? limit 1\", userRows, m.table)\n      if err := conn.QueryRow(&resp, query, user); err != nil {\n        return nil, err\n      }\n      return resp.Id, nil\n    },\n    func(conn sqlx.SqlConn, v, primary interface{}) error {\n      query := fmt.Sprintf(\"select %s from %s where id = ?\", userRows, m.table)\n      return conn.QueryRow(&resp, query, primary)\n    })\n  switch err {\n    case nil:\n      return &resp, nil\n    case sqlc.ErrNotFound:\n      return nil, ErrNotFound\n    default:\n      return nil, err\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Releasing Redis Lock using Go\nDESCRIPTION: This snippet demonstrates how to release a Redis lock safely, ensuring that only the owner of the lock can release it. It uses a Lua script to perform the check and perform the delete operation atomically.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-lock.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndelCommand = `if redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    return redis.call(\"DEL\", KEYS[1])\nelse\n    return 0\nend`\n\nfunc (rl *RedisLock) Release() (bool, error) {\n\tresp, err := rl.store.Eval(delCommand, []string{rl.key}, []string{rl.id})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tif reply, ok := resp.(int64); !ok {\n\t\treturn false, nil\n\t} else {\n\t\treturn reply == 1, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Service Protocol Buffer\nDESCRIPTION: Protobuf definition for user service including message types and RPC method declarations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\n\noption go_package = \"./user\";\n\nmessage IdReq{\n  int64 id = 1;\n}\n\nmessage UserInfoReply{\n  int64 id = 1;\n  string name = 2;\n  string number = 3;\n  string gender = 4;\n}\n\nservice user {\n  rpc getUser(IdReq) returns(UserInfoReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Running the TimingWheel Main Loop\nDESCRIPTION: This function implements the main event loop for the TimingWheel. It listens on multiple channels to handle timer ticks, task additions, and other operations. When the ticker fires, it triggers the onTick method to handle tasks that are due.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) run() {\n\tfor {\n\t\tselect {\n      // 定时器做时间推动 -> scanAndRunTasks()\n\t\tcase <-tw.ticker.Chan():\n\t\t\ttw.onTick()\n      // add task 会往 setChannel 输入task\n\t\tcase task := <-tw.setChannel:\n\t\t\ttw.setTask(&task)\n\t\t...\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Index-Based Cache Query Implementation in Go-Zero\nDESCRIPTION: Implementation of QueryRowIndex method that handles queries based on unique indices rather than primary keys. It first attempts to find the primary key from the index cache, then fetches the data either directly or via the primary key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// v - 需要读取的数据对象\n// key - 通过索引生成的缓存key\n// keyer - 用主键生成基于主键缓存的key的方法\n// indexQuery - 用索引从DB读取完整数据的方法，需要返回主键\n// primaryQuery - 用主键从DB获取完整数据的方法\nfunc (cc CachedConn) QueryRowIndex(v interface{}, key string, keyer func(primary interface{}) string,\n  indexQuery IndexQueryFn, primaryQuery PrimaryQueryFn) error {\n  var primaryKey interface{}\n  var found bool\n\n  // 先通过索引查询缓存，看是否有索引到主键的缓存\n  if err := cc.cache.TakeWithExpire(&primaryKey, key, func(val interface{}, expire time.Duration) (err error) {\n    // 如果没有索引到主键的缓存，那么就通过索引查询完整数据\n    primaryKey, err = indexQuery(cc.db, v)\n    if err != nil {\n      return\n    }\n\n    // 通过索引查询到了完整数据，设置found，后面直接使用，不需要再从缓存读取数据了\n    found = true\n    // 将主键到完整数据的映射保存到缓存里，TakeWithExpire方法已经将索引到主键的映射保存到缓存了\n    return cc.cache.SetCacheWithExpire(keyer(primaryKey), v, expire+cacheSafeGapBetweenIndexAndPrimary)\n  }); err != nil {\n    return err\n  }\n\n  // 已经通过索引找到了数据，直接返回即可\n  if found {\n    return nil\n  }\n\n  // 通过主键从缓存读取数据，如果缓存没有，通过primaryQuery方法从DB读取并回写缓存再返回数据\n  return cc.cache.Take(v, keyer(primaryKey), func(v interface{}) error {\n    return primaryQuery(cc.db, v, primaryKey)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in Go Config Struct\nDESCRIPTION: Definition of configuration structure for JWT authentication including MySQL, Redis cache, and Auth settings for access token.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/jwt.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\trest.RestConf\n\tMysql struct{\n\t\tDataSource string\n\t}\n\tCacheRedis cache.CacheConf\n\tAuth      struct {\n\t\tAccessSecret string\n\t\tAccessExpire int64\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Token Rate Limiter in Go\nDESCRIPTION: Demonstrates setting up a distributed token rate limiter using Redis, with configurable burst rate and token generation parameters\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/tokenlimit.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tburst   = 100\n\trate    = 100\n\tseconds = 5\n)\n\nstore := redis.NewRedis(\"localhost:6379\", \"node\", \"\")\nfmt.Println(store.Ping())\n// New tokenLimiter\nlimiter := limit.NewTokenLimiter(rate, burst, store, \"rate-test\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Route Parameter Handling in Go HTTP Server\nDESCRIPTION: ServeHTTP implementation that stores route parameters from dynamic routes into the request context. When a route match is found, any path parameters are stored in the request context before passing to the handler.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/params.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (pr *PatRouter) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n   reqPath := path.Clean(r.URL.Path)\n   if tree, ok := pr.trees[r.Method]; ok {\n      if result, ok := tree.Search(reqPath); ok {\n         if len(result.Params) > 0 {\n           //在当前的上下文中插入从前缀树中获取动态路由参数与它的值\n            r = context.WithPathVars(r, result.Params)\n         }\n         result.Item.(http.Handler).ServeHTTP(w, r)\n         return\n      }\n   }\n\n   if allow, ok := pr.methodNotAllowed(r.Method, reqPath); ok {\n      w.Header().Set(allowHeader, allow)\n      w.WriteHeader(http.StatusMethodNotAllowed)\n   } else {\n      pr.handleNotFound(w, r)\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying goctl rpc Command Usage\nDESCRIPTION: Shows the usage information for the goctl rpc command, including its subcommands and options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   goctl rpc - generate rpc code\n\nUSAGE:\n   goctl rpc command [command options] [arguments...]\n\nCOMMANDS:\n   new       generate rpc demo service\n   template  generate proto template\n   proto     generate rpc from proto\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Implementing Query Operations\nDESCRIPTION: Shows how to implement single and multiple row query operations using go-zero's QueryRow and QueryRows methods.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        logx.Errorf(\"userId.findOne error, id=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return &user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Creation Functions in Go\nDESCRIPTION: Defines functions for creating new streams including From() which takes a generator function and Just() which converts items directly to a stream.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/api/fx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype GenerateFunc func(source chan<- interface{})\n\nfunc From(generate GenerateFunc) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc Just(items ...interface{}) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc Range(source <-chan interface{}) Stream\n```\n\n----------------------------------------\n\nTITLE: Displaying Greet Service Directory Structure\nDESCRIPTION: Shows the file and directory structure of the newly created 'greet' service using the tree command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-api.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd greet\n$ tree\n```\n\nLANGUAGE: text\nCODE:\n```\n.\n├── etc\n│   └── greet-api.yaml\n├── greet.api\n├── greet.go\n└── internal\n    ├── config\n    │   └── config.go\n    ├── handler\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic\n    │   └── greetlogic.go\n    ├── svc\n    │   └── servicecontext.go\n    └── types\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: API Definition Example\nDESCRIPTION: Example of defining an API service using go-zero's API syntax, including request/response structures and route definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Request struct {\n  Name string `path:\"name,options=you|me\"` // parameters are auto validated\n}\n\ntype Response struct {\n  Message string `json:\"message\"`\n}\n\nservice greet-api {\n  @handler GreetHandler\n  get /greet/from/:name(Request) returns (Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Redis Lock Usage in Go\nDESCRIPTION: Example of how to create and use a Redis lock in Go-Zero framework. Shows lock initialization, acquisition with timeout, and deferred release pattern.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/redis-lock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nredisLockKey := fmt.Sprintf(\"%v%v\", redisTpl, headId)\n// 1. New redislock\nredisLock := redis.NewRedisLock(redisConn, redisLockKey)\n// 2. Optional operation, set the redislock expiration time\nredisLock.SetExpire(redisLockExpireSeconds)\nif ok, err := redisLock.Acquire(); !ok || err != nil {\n  return nil, errors.New(\"another user is currently operating, please try again later\")\n}\ndefer func() {\n  recover()\n  redisLock.Release()\n}()\n```\n\n----------------------------------------\n\nTITLE: Service Context Implementation\nDESCRIPTION: Go code implementing service context with user model dependency injection.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config    config.Config\n    UserModel model.UserModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn := sqlx.NewMysql(c.Mysql.DataSource)\n    return &ServiceContext{\n        Config: c,\n        UserModel: model.NewUserModel(conn, c.CacheRedis),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Set Operation with TimingWheel\nDESCRIPTION: Implementation of cache Set operation that integrates with TimingWheel for expiration handling. Manages both new and existing cache entries with timing wheel updates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/timing-wheel.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Cache) Set(key string, value interface{}) {\n\tc.lock.Lock()\n\t_, ok := c.data[key]\n\tc.data[key] = value\n\tc.lruCache.add(key)\n\tc.lock.Unlock()\n\n\texpiry := c.unstableExpiry.AroundDuration(c.expire)\n\tif ok {\n\t\tc.timingWheel.MoveTimer(key, expiry)\n\t} else {\n\t\tc.timingWheel.SetTimer(key, value, expiry)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shorten Logic with Database\nDESCRIPTION: Logic for shortening URLs with database storage\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\n  // manual code start, generates shorturl\n\tkey := hash.Md5Hex([]byte(in.Url))[:6]\n\t_, err := l.svcCtx.Model.Insert(l.ctx, &model.Shorturl{\n\t\tShorten: key,\n\t\tUrl:     in.Url,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &transform.ShortenResp{\n\t\tShorten: key,\n\t}, nil\n  // manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: Request Promise Handler Implementation\nDESCRIPTION: Implements promise pattern for handling request lifecycle, including success and failure cases. Tracks request timing and updates system metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype promise struct {\n    // Request start time\n    // Statistics on request processing time\n    start   time.Duration\n    shedder *adaptiveShedder\n}\n\nfunc (p *promise) Fail() {\n    // End of request, number of requests currently being processed - 1\n    p.shedder.addFlying(-1)\n}\n\nfunc (p *promise) Pass() {\n    // Response time in milliseconds\n    rt := float64(timex.Since(p.start)) / float64(time.Millisecond)\n    // End of request, number of requests currently being processed - 1\n    p.shedder.addFlying(-1)\n    p.shedder.rtCounter.Add(math.Ceil(rt))\n    p.shedder.passCounter.Add(1)\n}\n\nfunc (as *adaptiveShedder) addFlying(delta int64) {\n    flying := atomic.AddInt64(&as.flying, delta)\n    // When the request is finished, count the concurrency of requests currently being processed\n    if delta < 0 {\n        as.avgFlyingLock.Lock()\n        // Estimate the average number of requests for the current service over a recent period of time\n        as.avgFlying = as.avgFlying*flyingBeta + float64(flying)*(1-flyingBeta)\n        as.avgFlyingLock.Unlock()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SpanContext Interface in Go\nDESCRIPTION: Defines the core SpanContext interface for trace context propagation, including methods for accessing TraceId and SpanId, and custom visitor functions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/trace.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype SpanContext interface {\n    TraceId() string                        // get TraceId\n    SpanId() string                         // get SpanId\n    Visit(fn func(key, val string) bool)    // 自定义操作TraceId，SpanId\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Route to Go-Zero REST Server\nDESCRIPTION: Demonstrates how to add a single route to a Go-Zero REST server. The example registers a POST endpoint for user login with a specified handler function.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nengine := reset.MustNewServer(c)\n\nengine.AddRoute(ngin.Route{\n\t\tMethod:  http.MethodPost,\n\t\tPath:    \"/user/login\",\n\t\tHandler: login.LoginHandler(),\n\t})\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration in go-zero config.yaml\nDESCRIPTION: This code snippet shows the configuration required in the `config.yaml` file to enable Prometheus metrics in a go-zero service.  It specifies the host, port, and path where Prometheus can scrape the metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/metric.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"Prometheus:\\n  Host: 127.0.0.1\\n  Port: 9091\\n  Path: /metrics\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Keywords in Go using stringx.NewReplacer\nDESCRIPTION: This snippet demonstrates how to use the stringx.NewReplacer function to replace keywords in a string. It supports overlapping keywords and uses the shortest matching keyword.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/keywords.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreplacer := stringx.NewReplacer(map[string]string{\n  \"日本\":    \"法国\",\n  \"日本的首都\": \"东京\",\n  \"东京\":    \"日本的首都\",\n})\nfmt.Println(replacer.Replace(\"日本的首都是东京\"))\n```\n\n----------------------------------------\n\nTITLE: Generating Model from Datasource using goctl\nDESCRIPTION: This command generates the model layer code by connecting to the specified MySQL datasource. The `-url` flag specifies the connection string. The `-table` flag specifies which tables to generate models for, and '*' means all tables. The `-dir` flag specifies the directory where the generated code is placed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/database\" -table=\"*\"  -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: MySQL Transaction Execution\nDESCRIPTION: Implements a database transaction with automatic rollback on any error during the transaction\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nerr := usermodel.conn.Transact(func(session sqlx.Session) error {\n    stmt, err := session.Prepare(insertsql)\n    if err != nil {\n        return err\n    }\n    defer stmt.Close()\n    \n    if _, err := stmt.Exec(uid, username, mobilephone); err != nil {\n        return err\n    }\n    \n    return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Application Logic for Retrieving App Info\nDESCRIPTION: This Go code defines the Application Logic for retrieving application information, utilizing a caching strategy to store and retrieve data efficiently. It interacts with the Common RPC service to fetch data when not found in the cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n\n    \"datacenter/internal/svc\"\n    \"datacenter/internal/types\"\n    \"datacenter/shared\"\n\n    \"datacenter/common/model\"\n    \"datacenter/common/rpc/common\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype AppInfoLogic struct {\n    logx.Logger\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n}\n\nfunc NewAppInfoLogic(ctx context.Context, svcCtx *svc.ServiceContext) AppInfoLogic {\n    return AppInfoLogic{\n        Logger: logx.WithContext(ctx),\n        ctx:    ctx,\n        svcCtx: svcCtx,\n    }\n}\n\nfunc (l *AppInfoLogic) AppInfo(req types.Beid) (appconfig *common.BaseAppResp, err error) {\n\n    err = l.svcCtx.Cache.GetCache(model.GetcacheBaseAppIdPrefix(req.Beid), appconfig)\n    if err != nil && err == shared.ErrNotFound {\n        appconfig, err = l.svcCtx.CommonRpc.GetBaseApp(l.ctx, &common.BaseAppReq{\n            Beid: req.Beid,\n        })\n        if err != nil {\n            return\n        }\n        err = l.svcCtx.Cache.SetCache(model.GetcacheBaseAppIdPrefix(req.Beid), appconfig)\n    }\n\n    return\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Shortening Logic in Go\nDESCRIPTION: Logic for generating and storing shortened URLs with duplicate checking and database insertion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\n  // 手动代码开始，生成短链接\n  key := hash.Md5Hex([]byte(in.Url))[:6]\n  object, _ := l.svcCtx.Model.FindOne(l.ctx, key)\n  if object != nil {\n    return &transform.ShortenResp{\n      Shorten: key,\n    }, nil\n  }\n\n  _, err := l.svcCtx.Model.Insert(l.ctx, &model.Shorturl{\n    Shorten: key,\n    Url:     in.Url,\n  })\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ShortenResp{\n    Shorten: key,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Take Method Implementation in Go-Zero\nDESCRIPTION: Implementation of the Take method in the cacheNode struct which handles retrieving data from cache or loading it from the database. It sets the loaded data back to cache after retrieval from the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/redis-cache.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (c cacheNode) Take(v interface{}, key string, query func(v interface{}) error) error {\n  return c.doTake(v, key, query, func(v interface{}) error {\n    return c.SetCache(key, v)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Token\nDESCRIPTION: This Go function `getJwtToken` generates a JWT token using the provided secret key, issue time (`iat`), expiration time (`seconds`), and user ID (`userId`). It creates a JWT with claims for expiration, issued at, and user ID, and signs it using the HMAC-SHA256 algorithm.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *LoginLogic) getJwtToken(secretKey string, iat, seconds, userId int64) (string, error) {\n  claims := make(jwt.MapClaims)\n  claims[\"exp\"] = iat + seconds\n  claims[\"iat\"] = iat\n  claims[\"userId\"] = userId\n  token := jwt.New(jwt.SigningMethodHS256)\n  token.Claims = claims\n  return token.SignedString([]byte(secretKey))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining p2cPicker Structure for Load Balancing\nDESCRIPTION: This code snippet defines the p2cPicker structure, which holds the nodes' information and implements the balancer.Picker interface necessary for node selection.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype p2cPicker struct {\n  conns []*subConn  // Save information about all nodes \n  r     *rand.Rand\n  stamp *syncx.AtomicDuration\n  lock  sync.Mutex\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Bloom Filter\nDESCRIPTION: Implements the method to check if an element exists in the Bloom filter by verifying all hash locations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/bloom.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Exists(data []byte) (bool, error) {\n\tlocations := f.getLocations(data)\n\tisSet, err := f.bitSet.check(locations)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif !isSet {\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Help Information for MySQL DDL Model Generation\nDESCRIPTION: Displays help information for the MySQL DDL model generation command, showing available options including source path, directory, naming style, cache flag, and IDE plugin support.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl model mysql ddl - generate mysql model from ddl\n\nUSAGE:\n   goctl model mysql ddl [command options] [arguments...]\n\nOPTIONS:\n   --src value, -s value  the path or path globbing patterns of the ddl\n   --dir value, -d value  the target dir\n   --style value          the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --cache, -c            generate code with cache [optional]\n   --idea                 for idea plugin [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining the Picker Interface in gRPC\nDESCRIPTION: This snippet outlines the Picker interface which is responsible for load balancing logic by providing a method to pick a node for incoming requests.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Picker interface {\n  Pick(info PickInfo) (PickResult, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Lua Script for Distributed Token Bucket Rate Limiting\nDESCRIPTION: Redis Lua script implementing token bucket algorithm with atomic token generation, tracking, and consumption\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/tokenlimit.md#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nlocal rate = tonumber(ARGV[1])\nlocal capacity = tonumber(ARGV[2])\nlocal now = tonumber(ARGV[3])\nlocal requested = tonumber(ARGV[4])\n\nlocal fill_time = capacity/rate\nlocal ttl = math.floor(fill_time*2)\n\nlocal last_tokens = tonumber(redis.call(\"get\", KEYS[1]))\nif last_tokens == nil then\n    last_tokens = capacity\nend\n\nlocal last_refreshed = tonumber(redis.call(\"get\", KEYS[2]))\nif last_refreshed == nil then\n    last_refreshed = 0\nend\n\nlocal delta = math.max(0, now-last_refreshed)\nlocal filled_tokens = math.min(capacity, last_tokens+(delta*rate))\nlocal allowed = filled_tokens >= requested\nlocal new_tokens = filled_tokens\nif allowed then\n    new_tokens = filled_tokens - requested\nend\n\nredis.call(\"setex\", KEYS[1], ttl, new_tokens)\nredis.call(\"setex\", KEYS[2], ttl, now)\n\nreturn allowed\n```\n\n----------------------------------------\n\nTITLE: Generated User Model in go-zero\nDESCRIPTION: Auto-generated Go code for the User model, including CRUD operations and caching logic. This file contains the core functionality for interacting with the user table in the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-model.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Code generated by goctl. DO NOT EDIT!\n\npackage model\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/stores/builder\"\n\t\"github.com/zeromicro/go-zero/core/stores/cache\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlc\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n\t\"github.com/zeromicro/go-zero/core/stringx\"\n)\n\nvar (\n\tuserFieldNames          = builder.RawFieldNames(&User{})\n\tuserRows                = strings.Join(userFieldNames, \",\")\n\tuserRowsExpectAutoSet   = strings.Join(stringx.Remove(userFieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \",\")\n\tuserRowsWithPlaceHolder = strings.Join(stringx.Remove(userFieldNames, \"`id`\", \"`create_time`\", \"`update_time`\"), \"=?,\") + \"=?\"\n\n\tcacheUserIdPrefix     = \"cache:user:id:\"\n\tcacheUserNumberPrefix = \"cache:user:number:\"\n)\n\ntype (\n\tuserModel interface {\n\t\tInsert(ctx context.Context, data *User) (sql.Result, error)\n\t\tFindOne(ctx context.Context, id int64) (*User, error)\n\t\tFindOneByNumber(ctx context.Context, number string) (*User, error)\n\t\tUpdate(ctx context.Context, data *User) error\n\t\tDelete(ctx context.Context, id int64) error\n\t}\n\n\tdefaultUserModel struct {\n\t\tsqlc.CachedConn\n\t\ttable string\n\t}\n\n\tUser struct {\n\t\tId         int64     `db:\"id\"`\n\t\tNumber     string    `db:\"number\"`   // 学号\n\t\tName       string    `db:\"name\"`     // 用户名称\n\t\tPassword   string    `db:\"password\"` // 用户密码\n\t\tGender     string    `db:\"gender\"`   // 男｜女｜未公开\n\t\tCreateTime time.Time `db:\"create_time\"`\n\t\tUpdateTime time.Time `db:\"update_time\"`\n\t}\n)\n\nfunc newUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultUserModel {\n\treturn &defaultUserModel{\n\t\tCachedConn: sqlc.NewConn(conn, c),\n\t\ttable:      \"`user`\",\n\t}\n}\n\nfunc (m *defaultUserModel) Insert(ctx context.Context, data *User) (sql.Result, error) {\n\tuserIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, data.Id)\n\tuserNumberKey := fmt.Sprintf(\"%s%v\", cacheUserNumberPrefix, data.Number)\n\tret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"insert into %s (%s) values (?, ?, ?, ?)\", m.table, userRowsExpectAutoSet)\n\t\treturn conn.ExecCtx(ctx, query, data.Number, data.Name, data.Password, data.Gender)\n\t}, userIdKey, userNumberKey)\n\treturn ret, err\n}\n\nfunc (m *defaultUserModel) FindOne(ctx context.Context, id int64) (*User, error) {\n\tuserIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, id)\n\tvar resp User\n\terr := m.QueryRowCtx(ctx, &resp, userIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {\n\t\tquery := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", userRows, m.table)\n\t\treturn conn.QueryRowCtx(ctx, v, query, id)\n\t})\n\tswitch err {\n\tcase nil:\n\t\treturn &resp, nil\n\tcase sqlc.ErrNotFound:\n\t\treturn nil, ErrNotFound\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n\nfunc (m *defaultUserModel) FindOneByNumber(ctx context.Context, number string) (*User, error) {\n\tuserNumberKey := fmt.Sprintf(\"%s%v\", cacheUserNumberPrefix, number)\n\tvar resp User\n\terr := m.QueryRowIndexCtx(ctx, &resp, userNumberKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {\n\t\tquery := fmt.Sprintf(\"select %s from %s where `number` = ? limit 1\", userRows, m.table)\n\t\tif err := conn.QueryRowCtx(ctx, &resp, query, number); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn resp.Id, nil\n\t}, m.queryPrimary)\n\tswitch err {\n\tcase nil:\n\t\treturn &resp, nil\n\tcase sqlc.ErrNotFound:\n\t\treturn nil, ErrNotFound\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n\nfunc (m *defaultUserModel) Update(ctx context.Context, data *User) error {\n\tuserIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, data.Id)\n\tuserNumberKey := fmt.Sprintf(\"%s%v\", cacheUserNumberPrefix, data.Number)\n\t_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"update %s set %s where `id` = ?\", m.table, userRowsWithPlaceHolder)\n\t\treturn conn.ExecCtx(ctx, query, data.Number, data.Name, data.Password, data.Gender, data.Id)\n\t}, userIdKey, userNumberKey)\n\treturn err\n}\n\nfunc (m *defaultUserModel) Delete(ctx context.Context, id int64) error {\n\tdata, err := m.FindOne(ctx, id)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tuserIdKey := fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, id)\n\tuserNumberKey := fmt.Sprintf(\"%s%v\", cacheUserNumberPrefix, data.Number)\n\t_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"delete from %s where `id` = ?\", m.table)\n\t\treturn conn.ExecCtx(ctx, query, id)\n\t}, userIdKey, userNumberKey)\n\treturn err\n}\n\nfunc (m *defaultUserModel) formatPrimary(primary interface{}) string {\n\treturn fmt.Sprintf(\"%s%v\", cacheUserIdPrefix, primary)\n}\n\nfunc (m *defaultUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {\n\tquery := fmt.Sprintf(\"select %s from %s where `id` = ? limit 1\", userRows, m.table)\n\treturn conn.QueryRowCtx(ctx, v, query, primary)\n}\n\nfunc (m *defaultUserModel) tableName() string {\n\treturn m.table\n}\n```\n\n----------------------------------------\n\nTITLE: Help Command for RPC Service Generation\nDESCRIPTION: This command displays the help information for generating an RPC service from proto files, detailing available options and their usage.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc proto -h\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Shortening Logic\nDESCRIPTION: Logic for shortening URLs using the transformer service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(req types.ShortenReq) (*types.ShortenResp, error) {\n  // manual code start\n\tresp, err := l.svcCtx.Transformer.Shorten(l.ctx, &transformer.ShortenReq{\n\t\tUrl: req.Url,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &types.ShortenResp{\n\t\tShorten: resp.Shorten,\n\t}, nil\n  // manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up ServiceContext for DQ Jobs\nDESCRIPTION: Service context implementation that initializes the DQ consumer based on configuration. This provides the consumer instance that job handlers can use to process messages.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 配置\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage svc\n\nimport (\n\t\"job/internal/config\"\n\t\"github.com/zeromicro/go-queue/dq\"\n)\n\ntype ServiceContext struct {\n\tConfig config.Config\n\tConsumer      dq.Consumer\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig: c,\n\t\tConsumer: dq.NewConsumer(c.DqConf),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Set Operation with TimingWheel\nDESCRIPTION: This code shows how the cache's Set method interacts with the TimingWheel to manage key expirations. It first updates the cache's data and LRU cache, then determines whether to move an existing timer or set a new timer in the TimingWheel based on the key's existence.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (c *Cache) Set(key string, value interface{}) {\n\tc.lock.Lock()\n\t_, ok := c.data[key]\n\tc.data[key] = value\n\tc.lruCache.add(key)\n\tc.lock.Unlock()\n\n\texpiry := c.unstableExpiry.AroundDuration(c.expire)\n\tif ok {\n\t\tc.timingWheel.MoveTimer(key, expiry)\n\t} else {\n\t\tc.timingWheel.SetTimer(key, value, expiry)\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: HTTP Tracing Handler Implementation\nDESCRIPTION: Implements HTTP middleware for trace handling, including trace extraction from headers and span creation for request context propagation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/trace.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc TracingHandler(next http.Handler) http.Handler {\n    return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n        carrier, err := trace.Extract(trace.HttpFormat, r.Header)\n        if err != nil && err != trace.ErrInvalidCarrier {\n            logx.Error(err)\n        }\n        ctx, span := trace.StartServerSpan(r.Context(), carrier, sysx.Hostname(), r.RequestURI)\n        defer span.Finish()\n        r = r.WithContext(ctx)\n        next.ServeHTTP(w, r)\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Acceptable Function in Go\nDESCRIPTION: The `Acceptable` function determines whether a given error should be considered a failure for the purpose of the circuit breaker. It checks the error's status code and returns `false` for codes like `DeadlineExceeded`, `Internal`, `Unavailable`, and `DataLoss`, indicating that these errors should trigger the circuit breaker.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/breaker.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"func Acceptable(err error) bool {\\n    switch status.Code(err) {\\n    case codes.DeadlineExceeded, codes.Internal, codes.Unavailable, codes.DataLoss: \\n        return false\\n    default:\\n        return true\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a MySQL Model with Connection and Bulk Inserter\nDESCRIPTION: Implements a MySQL model initialization method with connection, table name, and bulk insert capability\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n    bulkInserter, err := sqlx.NewBulkInserter(conn, insertsql)\n    if err != nil {\n        logx.Error(\"Init bulkInsert Faild\")\n        panic(\"Init bulkInsert Faild\")\n        return nil\n    }\n    return &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for RPC Service\nDESCRIPTION: This YAML configuration defines the necessary settings for running the RPC service, including the MySQL connection string, Redis cache configurations, and Etcd hosts. It specifies crucial parameters for service operation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName: common.rpc\nListenOn: 127.0.0.1:8081\nMysql:\n  DataSource: root:admin@tcp(127.0.0.1:3306)/datacenter?charset=utf8&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n- Host: 127.0.0.1:6379\n  Pass:\n  Type: node  \nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: common.rpc\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL and Redis in Go-Zero API\nDESCRIPTION: Go code to add both MySQL and Redis cache configuration to the Config struct in the Go-Zero API project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n\t\"github.com/zeromicro/go-zero/core/stores/cache\"\n\t\"github.com/zeromicro/go-zero/rest\"\n)\n\ntype Config struct {\n\trest.RestConf\n\tMysql struct {\n\t\tDataSource string\n\t}\n\tCacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL in Go-Zero API\nDESCRIPTION: Go code to add MySQL configuration to the Config struct in the Go-Zero API project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport \"github.com/zeromicro/go-zero/rest\"\n\ntype Config struct {\n\trest.RestConf\n\tMysql struct { // mysql配置\n\t\tDataSource string\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Service Integration in Middleware\nDESCRIPTION: Example of integrating external services within middleware using closures\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype AnotherService struct{}\n\nfunc (s *AnotherService) GetToken() string {\n\treturn stringx.Rand()\n}\n\nfunc middleware(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Header().Add(\"X-Middleware\", \"static-middleware\")\n\t\tnext(w, r)\n\t}\n}\n\nfunc middlewareWithAnotherService(s *AnotherService) rest.Middleware {\n\treturn func(next http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tw.Header().Add(\"X-Middleware\", s.GetToken())\n\t\t\tnext(w, r)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: MapReduce Usage Example in Go\nDESCRIPTION: This code demonstrates how to use the `mr.Finish` and `mr.MapReduce` functions to implement concurrent operations and data processing.  It includes examples of fetching product details from multiple services concurrently and checking user legality using the mapReduce pattern.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/mr\"\n\t\"github.com/zeromicro/go-zero/core/timex\"\n)\n\ntype user struct{}\n\nfunc (u *user) User(uid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 30)\n\treturn nil, nil\n}\n\ntype store struct{}\n\nfunc (s *store) Store(pid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 50)\n\treturn nil, nil\n}\n\ntype order struct{}\n\nfunc (o *order) Order(pid int64) (interface{}, error) {\n\ttime.Sleep(time.Millisecond * 40)\n\treturn nil, nil\n}\n\nvar (\n\tuserRpc  user\n\tstoreRpc store\n\torderRpc order\n)\n\nfunc main() {\n\tstart := timex.Now()\n\t_, err := productDetail(123, 345)\n\tif err != nil {\n\t\tlog.Printf(\"product detail error: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"productDetail time: %v\", timex.Since(start))\n\n\t// the data processing\n\tres, err := checkLegal([]int64{1, 2, 3})\n\tif err != nil {\n\t\tlog.Printf(\"check error: %v\", err)\n\t\treturn\n\t}\n\tlog.Printf(\"check res: %v\", res)\n}\n\ntype ProductDetail struct {\n\tUser  interface{}\n\tStore interface{}\n\tOrder interface{}\n}\n\nfunc productDetail(uid, pid int64) (*ProductDetail, error) {\n\tvar pd ProductDetail\n\terr := mr.Finish(func() (err error) {\n\t\tpd.User, err = userRpc.User(uid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Store, err = storeRpc.Store(pid)\n\t\treturn\n\t}, func() (err error) {\n\t\tpd.Order, err = orderRpc.Order(pid)\n\t\treturn\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &pd, nil\n}\n\nfunc checkLegal(uids []int64) ([]int64, error) {\n\tr, err := mr.MapReduce(func(source chan<- interface{}) {\n\t\tfor _, uid := range uids {\n\t\t\tsource <- uid\n\t\t}\n\t}, func(item interface{}, writer mr.Writer, cancel func(error)) {\n\t\tuid := item.(int64)\n\t\tok, err := check(uid)\n\t\tif err != nil {\n\t\t\tcancel(err)\n\t\t}\n\t\tif ok {\n\t\t\twriter.Write(uid)\n\t\t}\n\t}, func(pipe <-chan interface{}, writer mr.Writer, cancel func(error)) {\n\t\tvar uids []int64\n\t\tfor p := range pipe {\n\t\t\tuids = append(uids, p.(int64))\n\t\t}\n\t\twriter.Write(uids)\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn r.([]int64), nil\n}\n\nfunc check(uid int64) (bool, error) {\n\t// do something check user legal\n\ttime.Sleep(time.Millisecond * 20)\n\treturn true, nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Context\nDESCRIPTION: Service context implementation for managing queue configuration and consumer instance.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n\t\"job/internal/config\"\n\t\"github.com/zeromicro/go-queue/dq\"\n)\n\ntype ServiceContext struct {\n\tConfig config.Config\n\tConsumer      dq.Consumer\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig: c,\n\t\tConsumer: dq.NewConsumer(c.DqConf),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Microservice Directory Structure\nDESCRIPTION: Shows the high-level directory organization for a microservice-based system with separate services for afterSale, cart, order, pay, product, and user components. Each service contains api and rpc subdirectories.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-design.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── afterSale\n│   ├── api\n│   └── rpc\n├── cart\n│   ├── api\n│   └── rpc\n├── order\n│   ├── api\n│   └── rpc\n├── pay\n│   ├── api\n│   └── rpc\n├── product\n│   ├── api\n│   └── rpc\n└── user\n    ├── api\n    └── rpc\n```\n\n----------------------------------------\n\nTITLE: Graceful shutdown with logx.Close\nDESCRIPTION: This snippet demonstrates how to gracefully close the logx logger during application shutdown. It uses `proc.AddShutdownListener` from `go-zero/core/proc` to register a function that closes the logger. This ensures all pending logs are flushed before the application terminates, preventing data loss.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/zeromicro/go-zero/core/proc\"\n\n// grace close log\nproc.AddShutdownListener(func() {\n\tlogx.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: MySQL to Golang Type Conversion Mapping\nDESCRIPTION: Comprehensive mapping table showing conversion rules between MySQL data types and their corresponding Golang types, including handling of nullable fields. The table covers primitive types, date/time types, and string types with their SQL null-safe alternatives.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-model.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| mysql dataType | golang dataType | golang dataType(if null&&default null) |\n|----------------|-----------------|----------------------------------------|\n| bool           | int64           | sql.NullInt64                          |\n| boolean        | int64           | sql.NullInt64                          |\n| tinyint        | int64           | sql.NullInt64                          |\n| smallint       | int64           | sql.NullInt64                          |\n| mediumint      | int64           | sql.NullInt64                          |\n| int            | int64           | sql.NullInt64                          |\n| integer        | int64           | sql.NullInt64                          |\n| bigint         | int64           | sql.NullInt64                          |\n| float          | float64         | sql.NullFloat64                        |\n| double         | float64         | sql.NullFloat64                        |\n| decimal        | float64         | sql.NullFloat64                        |\n| date           | time.Time       | sql.NullTime                           |\n| datetime       | time.Time       | sql.NullTime                           |\n| timestamp      | time.Time       | sql.NullTime                           |\n| time           | string          | sql.NullString                         |\n| year           | time.Time       | sql.NullInt64                          |\n| char           | string          | sql.NullString                         |\n| varchar        | string          | sql.NullString                         |\n| binary         | string          | sql.NullString                         |\n| varbinary      | string          | sql.NullString                         |\n| tinytext       | string          | sql.NullString                         |\n| text           | string          | sql.NullString                         |\n| mediumtext     | string          | sql.NullString                         |\n| longtext       | string          | sql.NullString                         |\n| enum           | string          | sql.NullString                         |\n| set            | string          | sql.NullString                         |\n| json           | string          | sql.NullString                         |\n```\n\n----------------------------------------\n\nTITLE: MapReduce Function Definitions in Go\nDESCRIPTION: This code defines the core function signatures for the mapReduce process: `GenerateFunc` for producing data, `MapperFunc` for transforming data, and `ReducerFunc` for aggregating data.  Each function takes specific parameters and returns values to facilitate the mapReduce workflow. The functions use channels for data transfer and error handling through the `cancel` function.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 数据生产func\n// source - 数据被生产后写入source\nGenerateFunc func(source chan<- interface{}) \n\n// 数据加工func\n// item - 生产出来的数据\n// writer - 调用writer.Write()可以将加工后的向后传递至reducer\n// cancel - 终止流程func\nMapperFunc func(item interface{}, writer Writer, cancel func(error)) \n\n// 数据聚合func\n// pipe - 加工出来的数据\n// writer - 调用writer.Write()可以将聚合后的数据返回给用户\n// cancel - 终止流程func\nReducerFunc func(pipe <-chan interface{}, writer Writer, cancel func(error))\n```\n```\n\n----------------------------------------\n\nTITLE: Defining API Request/Response Structures in go-zero\nDESCRIPTION: This snippet demonstrates how to define request and response structures for HTTP API endpoints in go-zero. It includes examples of using various tags for deserialization, such as 'path', 'json', and 'form'.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mapping.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\tcreateOrderReq struct {\n\t\ttoken     string `path:\"token\"`     // 用户token\n\t\tproductId string `json:\"productId\"` // 商品ID\n\t\tnum       int    `json:\"num\"`       // 商品数量\n\t}\n\tcreateOrderRes struct {\n\t\tsuccess bool `json:\"success\"` // 是否成功\n\t}\n\tfindOrderReq struct {\n\t\ttoken    string `path:\"token\"`    // 用户token\n\t\tpage     int    `form:\"page\"`     // 页数\n\t\tpageSize int8   `form:\"pageSize\"` // 页大小\n\t}\n\tfindOrderRes struct {\n\t\torderInfo []orderInfo `json:\"orderInfo\"` // 商品ID\n\t}\n\torderInfo struct {\n\t\tproductId   string `json:\"productId\"`   // 商品ID\n\t\tproductName string `json:\"productName\"` // 商品名称\n\t\tnum         int    `json:\"num\"`         // 商品数量\n\t}\n\tdeleteOrderReq struct {\n\t\tid string `path:\"id\"`\n\t}\n\tdeleteOrderRes struct {\n\t\tsuccess bool `json:\"success\"` // 是否成功\n\t}\n)\n\nservice order {\n    @doc(\n        summary: 创建订单\n    )\n    @handler CreateOrderHandler\n    post /order/add/:token(createOrderReq) returns(createOrderRes)\n\n    @doc(\n        summary: 获取订单\n    )\n    @handler FindOrderHandler\n    get /order/find/:token(findOrderReq) returns(findOrderRes)\n\n    @doc(\n        summary: 删除订单\n    )\n    @handler: DeleteOrderHandler\n    delete /order/:id(deleteOrderReq) returns(deleteOrderRes)\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Duplicate Elements with Distinct function in go-zero fx\nDESCRIPTION: This code demonstrates how to remove duplicate elements from a stream using the Distinct function in go-zero's fx package. It takes a KeyFunc as input, which defines the key for identifying duplicates. Elements with the same key are considered duplicates and only one is kept.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// 例子\nfx.Just(1, 2, 2, 2, 3, 3, 4, 5, 6).Distinct(func(item interface{}) interface{} {\n  return item\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n// 结果为 1，2，3，4，5，6\n\n// 源码\nfunc (p Stream) Distinct(fn KeyFunc) Stream {\n\tsource := make(chan interface{})\n\n\tthreading.GoSafe(func() {\n\t\tdefer close(source)\n\t\t// 通过key进行去重，相同key只保留一个\n\t\tkeys := make(map[interface{}]lang.PlaceholderType)\n\t\tfor item := range p.source {\n\t\t\tkey := fn(item)\n      // key存在则不保留\n\t\t\tif _, ok := keys[key]; !ok {\n\t\t\t\tsource <- item\n\t\t\t\tkeys[key] = lang.Placeholder\n\t\t\t}\n\t\t}\n\t})\n\n\treturn Range(source)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Template Revert Command Usage\nDESCRIPTION: Displays the usage and options for reverting templates, including category selection, target file name, and home path specification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template revert - revert the target template to the latest\n\nUSAGE:\n   goctl template revert [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model,docker,kube]\n   --name value, -n value      the target file name of template\n   --home value                the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Logx in Go\nDESCRIPTION: Demonstrates how to initialize logx configuration from a YAML file, set up logging, and use various log levels. Also shows how to close the logger.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar c logx.LogConf\n// 从 yaml 文件中 初始化配置\nconf.MustLoad(\"config.yaml\", &c)\n\n// logx 根据配置初始化\nlogx.MustSetup(c)\n\nlogx.Info(\"This is info!\")\nlogx.Infof(\"This is %s!\", \"info\")\n\nlogx.Error(\"This is error!\")\nlogx.Errorf(\"this is %s!\", \"error\")\n\nlogx.Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform RPC Settings in YAML\nDESCRIPTION: Configuration file defining MySQL database connection and Redis cache settings for the transform service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDataSource: root:password@tcp(localhost:3306)/gozero\nTable: shorturl\nCache:\n  - Host: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service Code from Proto File\nDESCRIPTION: This command generates the actual RPC service code from the specified proto file using the goctl tool, structuring the output in the current directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc proto -src user.proto -dir .\n```\n\n----------------------------------------\n\nTITLE: HTTP Request Parsing in Go-Zero\nDESCRIPTION: This code snippet from `httpx/requests.go` shows the `Parse` function's role in parsing different parts of an HTTP request, including the path, form data, HTTP headers, and JSON body. The function is a core part of the framework's request processing pipeline, providing parameter validation using tag modifiers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/rest.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"// https://github.com/zeromicro/go-zero/blob/master/rest/httpx/requests.go#L32:6\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Load in go-zero\nDESCRIPTION: This code shows how the load of a subConn is calculated. It calculates the load based on EWMA and inflight requests. The load is calculated by `load = ewma * inflight`. \nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n\"func (c *subConn) load() int64 {\\n  // 通过 EWMA 计算节点的负载情况； 加 1 是为了避免为 0 的情况\\n  lag := int64(math.Sqrt(float64(atomic.LoadUint64(&c.lag) + 1)))\\n  load := lag * (atomic.LoadInt64(&c.inflight) + 1)\\n  if load == 0 {\\n    return penalty\\n  }\\n  return load\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Logging with Duration in Go-Zero Logx\nDESCRIPTION: Example of how to log with duration information, useful for tracking slow operations like database queries.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nstartTime := timex.Now()\n// 数据库查询\nrows, err := conn.Query(q, args...)\nduration := timex.Since(startTime)\nif duration > slowThreshold {\n    logx.WithDuration(duration).Slowf(\"[SQL] query: slowcall - %s\", stmt)\n} else {\n    logx.WithDuration(duration).Infof(\"sql query: %s\", stmt)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Voting System API in Go-Zero\nDESCRIPTION: API definition for a voting system with endpoints for activity information, enrollment, and vote processing. Includes both public endpoints and authenticated endpoints requiring JWT.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n// 投票活动api\n\n\ntype Actid struct {\n\tActid       int64  `json:\"actid\"` //活动id\n}\n\ntype VoteReq struct {\n\tAeid       int64  `json:\"aeid\"` // 作品id\n\tActid\n}\ntype VoteResp struct {\n\tVoteReq\n\tVotecount       int64  `json:\"votecount\"` //投票票数\n\tViewcount       int64  `json:\"viewcount\"` //浏览数\n}\n\n\n// 活动返回的参数\n\ntype ActivityResp struct {\n\tActid       \tint64  `json:\"actid\"`\n\tTitle       \tstring  `json:\"title\"` //活动名称\n\tDescr       \tstring  `json:\"descr\"` //活动描述\n\tStartDate       int64  `json:\"start_date\"` //活动时间\n\tEnrollDate      int64  `json:\"enroll_date\"` //投票时间\n\tEndDate       \tint64  `json:\"end_date\"` //活动结束时间\n\tVotecount       int64  `json:\"votecount\"` //当前活动的总票数\n\tViewcount       int64  `json:\"viewcount\"` //当前活动的总浏览数\n\tType\t\t\tint64 `json:\"type\"` //投票方式\n\tNum\t\t\t\tint64 `json:\"num\"` //投票几票\n}\n//报名\n\n\ntype EnrollReq struct {\n\tActid\n\tName       \tstring  `json:\"name\"` // 名称\n\tAddress       \tstring  `json:\"address\"` //地址\n\tImages       \t[]string  `json:\"images\"` //作品图片\n\tDescr       \tstring  `json:\"descr\"` // 作品描述\n}\n// 作品返回\n\ntype EnrollResp struct {\n\tActid\n\tAeid\t\tint64 `json:\"aeid\"` // 作品id\n\tName       \tstring  `json:\"name\"` // 名称\n\tAddress       \tstring  `json:\"address\"` //地址\n\tImages       \t[]string  `json:\"images\"` //作品图片\n\tDescr       \tstring  `json:\"descr\"` // 作品描述\n\tVotecount       int64  `json:\"votecount\"` //当前活动的总票数\n\tViewcount       int64  `json:\"viewcount\"` //当前活动的总浏览数\n\t\n}\n\n\n@server(\n\tgroup: votes\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"获取活动的信息\"\n\t)\n\t@handler activityInfo\n\tget /votes/activity/info (Actid) returns (ActivityResp)\n\t@doc(\n\t\tsummary: \"活动访问+1\"\n\t)\n\t@handler activityIcrView\n\tget /votes/activity/view (Actid) returns (ActivityResp)\n\t@doc(\n\t\tsummary: \"获取报名的投票作品信息\"\n\t)\n\t@handler enrollInfo\n\tget /votes/enroll/info (VoteReq) returns (EnrollResp)\n\t@doc(\n\t\tsummary: \"获取报名的投票作品列表\"\n\t)\n\t@handler enrollLists\n\tget /votes/enroll/lists (Actid)\treturns(EnrollResp)\n}\n\n@server(\n\tjwt: Auth\n\tgroup: votes\n\tmiddleware: Usercheck\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"投票\"\n\t)\n\t@handler vote\n\tpost /votes/vote (VoteReq) returns (VoteResp)\n\t@handler enroll\n\tpost /votes/enroll (EnrollReq) returns (EnrollResp)\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Configuration Structure in Go\nDESCRIPTION: Logging configuration including service name, log mode, storage path, and retention settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"` // service name\n\tMode                string `json:\",default=console,options=console|file|volume\"` // Log mode, console-output to console, file-output to the current server (container) file, volume-output docker hangs in the file\n\tPath                string `json:\",default=logs\"` // Log storage path\n\tLevel               string `json:\",default=info,options=info|error|severe\"` // Log level\n\tCompress            bool   `json:\",optional\"` // whether to enable gzip compression\n\tKeepDays            int    `json:\",optional\"` // log retention days\n\tStackCooldownMillis int    `json:\",default=100\"` // log write interval\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Node Load\nDESCRIPTION: This snippet provides the load calculation method for determining the current load of a node by using the EWMA value and the number of requests being processed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *subConn) load() int64 {\n  // Calculate the load of the node by EWMA; add 1 to avoid the case of 0\n  lag := int64(math.Sqrt(float64(atomic.LoadUint64(&c.lag) + 1)))\n  load := lag * (atomic.LoadInt64(&c.inflight) + 1)\n  if load == 0 {\n    return penalty\n  }\n  return load\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Configuration Struct - Go\nDESCRIPTION: Defines the structure for RPC configuration, detailing the required parameters for server settings including listen address, authentication, and timeout controls.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nConfig struct {\n    zrpc.RpcServerConf\n    CacheRedis         cache.CacheConf // redis缓存配置，详情见api配置说明，这里不赘述\n    Mysql struct { // mysql数据库访问配置，详情见api配置说明，这里不赘述\n        DataSource string\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring Redis Lock with Lua Script in Go\nDESCRIPTION: This snippet shows the implementation of the Acquire method for the Redis lock. It uses a Lua script to ensure atomicity and handles various response scenarios. The lock includes a unique identifier and expiration time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-lock.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    redis.call(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2])\n    return \"OK\"\nelse\n    return redis.call(\"SET\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Acquire() (bool, error) {\n\tseconds := atomic.LoadUint32(&rl.seconds)\n  // execute luascript\n\tresp, err := rl.store.Eval(lockCommand, []string{rl.key}, []string{\n\t\trl.id, strconv.Itoa(int(seconds)*millisPerSecond + tolerance)})\n\tif err == red.Nil {\n\t\treturn false, nil\n\t} else if err != nil {\n\t\tlogx.Errorf(\"Error on acquiring lock for %s, %s\", rl.key, err.Error())\n\t\treturn false, err\n\t} else if resp == nil {\n\t\treturn false, nil\n\t}\n\n\treply, ok := resp.(string)\n\tif ok && reply == \"OK\" {\n\t\treturn true, nil\n\t} else {\n\t\tlogx.Errorf(\"Unknown reply when acquiring lock for %s: %v\", rl.key, resp)\n\t\treturn false, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Main Application Entry Point\nDESCRIPTION: Main application file handling configuration loading, service initialization, and graceful shutdown.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/zeromicro/go-zero/core/conf\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/config\"\n\t\"job/internal/handler\"\n\t\"job/internal/svc\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\n\nvar configFile = flag.String(\"f\", \"etc/job.yaml\", \"the config file\")\n\nfunc main() {\n\tflag.Parse()\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\tctx := svc.NewServiceContext(c)\n\tgroup := service.NewServiceGroup()\n\thandler.RegisterJob(ctx,group)\n\tch := make(chan os.Signal)\n\tsignal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)\n\tfor {\n\t\ts := <-ch\n\t\tlogx.Info(\"get a signal %s\", s.String())\n\t\tswitch s {\n\t\tcase syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:\n\t\t\tfmt.Printf(\"stop group\")\n\t\t\tgroup.Stop()\n\t\t\tlogx.Info(\"job exit\")\n\t\t\ttime.Sleep(time.Second)\n\t\t\treturn\n\t\tcase syscall.SIGHUP:\n\t\tdefault:\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Generation in Go\nDESCRIPTION: Logic for generating JWT tokens with claims including expiration time, issued at time, and user ID.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/jwt.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *LoginLogic) getJwtToken(secretKey string, iat, seconds, userId int64) (string, error) {\n  claims := make(jwt.MapClaims)\n  claims[\"exp\"] = iat + seconds\n  claims[\"iat\"] = iat\n  claims[\"userId\"] = userId\n  token := jwt.New(jwt.SigningMethodHS256)\n  token.Claims = claims\n  return token.SignedString([]byte(secretKey))\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Bloom Filter in go-zero\nDESCRIPTION: Shows how to check if an element exists in the Bloom filter. It hashes the element and checks if all corresponding bits are set in the Redis BitSet.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bloom.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Exists(data []byte) (bool, error) {\n\tlocations := f.getLocations(data)\n\tisSet, err := f.bitSet.check(locations)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif !isSet {\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Service Logic\nDESCRIPTION: Implements the business logic for the GetUser RPC method in the user service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n\n    \"go-zero-demo/mall/user/rpc/internal/svc\"\n    \"go-zero-demo/mall/user/rpc/types/user\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype GetUserLogic struct {\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n    logx.Logger\n}\n\nfunc NewGetUserLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetUserLogic {\n    return &GetUserLogic{\n        ctx:    ctx,\n        svcCtx: svcCtx,\n        Logger: logx.WithContext(ctx),\n    }\n}\n\nfunc (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) {\n    return &user.UserResponse{\n            Id:   \"1\",\n            Name: \"test\",\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Correct API Service Syntax (eg1)\nDESCRIPTION: Illustrates a valid API service definition with server metadata, documentation, handlers, and routing using a non-standard writing style, including request and response body specifications. This example showcases the usage of jwt authentication, group declaration, middleware integration, and route prefixes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_11\n\nLANGUAGE: api\nCODE:\n```\n\"@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix: /api\n)\nservice foo-api{\n  @doc(\n    summary: foo\n  )\n  @server(\n    handler: foo\n  )\n  // Non-exported body\n  post /foo/:id (foo) returns (bar)\n  \n  @doc \\\"bar\\\"\n  @handler bar\n  post /bar returns ([]int)// Array is not recommended as response body\n  \n  @handler fooBar\n  post /foo/bar (Foo) returns // You can omit 'returns'\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Middleware in Go-Zero REST Server\nDESCRIPTION: Shows how to add custom middleware to a Go-Zero REST server. The Use method accepts a Middleware function that will be applied to all routes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (e *Server) Use(middleware Middleware)\n```\n\n----------------------------------------\n\nTITLE: Implementing Cooling Period Check in Go\nDESCRIPTION: The stillHot method determines if the system is still in a cooling period after recent request rejections. This prevents load oscillation by continuing to check and potentially reject requests during recovery.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (as *adaptiveShedder) stillHot() bool {\n    // No recent requests have been discarded\n    // means the service is working\n    if !as.droppedRecently.True() {\n        return false\n    }\n    // Not in cooling period\n}\n```\n\n----------------------------------------\n\nTITLE: Running TimingWheel in go-zero\nDESCRIPTION: This function runs the main loop of the TimingWheel, handling timer ticks and various operations on tasks through channels. It continuously processes incoming tasks and executes them at the appropriate time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) run() {\n\tfor {\n\t\tselect {\n\t\tcase <-tw.ticker.Chan():\n\t\t\ttw.onTick()\n\t\tcase task := <-tw.setChannel:\n\t\t\ttw.setTask(&task)\n\t\t...\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Insert Operation in go-zero\nDESCRIPTION: Implements an insert method for the User model using dynamic SQL generation and connection execution\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        return -1, err\n    }\n    return res.LastInsertId()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Models from Multiple Database Tables (Bash)\nDESCRIPTION: Example command for generating models from multiple database tables using a wildcard pattern, database connection, and specifying the output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/gozero\" -table=\"user*\" -dir ./model\n```\n\n----------------------------------------\n\nTITLE: Implementing a Producer Job with DQ\nDESCRIPTION: Producer job implementation that sends delayed tasks to beanstalkd tubes. It uses threading.GoSafe for safe goroutine execution and demonstrates how to send multiple messages with delay timing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 生产者任务\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n\t\"strconv\"\n\t\"time\"\n)\n\n\n\ntype Producer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewProducerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Producer {\n\treturn &Producer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Producer)Start()  {\n\n\tlogx.Infof(\"start  Producer \\n\")\n\tthreading.GoSafe(func() {\n\t\tproducer := dq.NewProducer([]dq.Beanstalk{\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7771\",\n\t\t\t\tTube:     \"tube1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7772\",\n\t\t\t\tTube:     \"tube2\",\n\t\t\t},\n\t\t})\n\t\tfor i := 1000; i < 1005; i++ {\n\t\t\t_, err := producer.Delay([]byte(strconv.Itoa(i)), time.Second * 1)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (l *Producer)Stop()  {\n\tlogx.Infof(\"stop Producer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: TimingWheel scanAndRunTasks Function\nDESCRIPTION: This code snippet shows the `scanAndRunTasks` function, responsible for iterating through the tasks in a slot's linked list, filtering out removed or expired tasks, and appending the eligible tasks to a tasks list. Finally, it invokes `runTasks` to execute the collected tasks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (tw *TimingWheel) scanAndRunTasks(l *list.List) {\n\t// 存储目前需要执行的task{key, value}  [execute所需要的参数，依次传递给execute执行]\n\tvar tasks []timingTask\n\n\tfor e := l.Front(); e != nil; {\n\t\ttask := e.Value.(*timingEntry)\n    // 标记删除，在 scan 中做真正的删除 「删除map的data」\n\t\tif task.removed {\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\ttw.timers.Del(task.key)\n\t\t\te = next\n\t\t\tcontinue\n\t\t} else if task.circle > 0 {\n\t\t\t// 当前执行点已经过期，但是同时不在第一层，所以当前层即然已经完成了，就会降到下一层\n      // 但是并没有修改 pos\n\t\t\ttask.circle--\n\t\t\te = e.Next()\n\t\t\tcontinue\n\t\t} else if task.diff > 0 {\n\t\t\t// 因为之前已经标注了diff，需要再进入队列\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\tpos := (tw.tickedPos + task.diff) % tw.numSlots\n\t\t\ttw.slots[pos].PushBack(task)\n\t\t\ttw.setTimerPosition(pos, task)\n\t\t\ttask.diff = 0\n\t\t\te = next\n\t\t\tcontinue\n\t\t}\n\t\t// 以上的情况都是不能执行的情况，能够执行的会被加入tasks中\n\t\ttasks = append(tasks, timingTask{\n\t\t\tkey:   task.key,\n\t\t\tvalue: task.value,\n\t\t})\n\t\tnext := e.Next()\n\t\tl.Remove(e)\n\t\ttw.timers.Del(task.key)\n\t\te = next\n\t}\n\t// for range tasks，然后把每个 task->execute 执行即可\n\ttw.runTasks(tasks)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: 使用fx的Reverse操作反转流数据\nDESCRIPTION: 展示了如何使用fx的Reverse操作对流中的数据进行反转。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(1, 2, 3, 4, 5).Reverse().ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Directory Structure\nDESCRIPTION: Command to display the directory structure of the newly created greet service project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/monolithic-service.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd greet\n$ tree\n.\n├── etc\n│   └── greet-api.yaml\n├── go.mod\n├── greet.api\n├── greet.go\n└── internal\n    ├── config\n    │   └── config.go\n    ├── handler\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic\n    │   └── greetlogic.go\n    ├── svc\n    │   └── servicecontext.go\n    └── types\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: Defining the PickerBuilder Interface in gRPC\nDESCRIPTION: This code snippet defines the PickerBuilder interface in gRPC, which is responsible for building a picker that the gRPC client uses to select a SubConn (a connection to a backend server). The Build method is called whenever the list of available backend servers changes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"type PickerBuilder interface {\\n    // Build returns a picker that will be used by gRPC to pick a SubConn.\\n    Build(info PickerBuildInfo) balancer.Picker\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Configuration to Config Struct\nDESCRIPTION: Defines the Config struct with added Auth section containing JWT access secret and expiration settings. This structure will be populated from the YAML configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n\t\"github.com/zeromicro/go-zero/rest\"\n)\n\ntype Config struct {\n\trest.RestConf\n\tMysql struct {\n\t\tDataSource string\n\t}\n\tAuth struct {\n\t\tAccessSecret string\n\t\tAccessExpire int64\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Connection String in Go\nDESCRIPTION: This snippet demonstrates how to configure the MySQL connection string (DSN) in Go to support UTF-8 encoding and proper collation. It's crucial for handling emoji and special characters in the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nroot:password@/name?parseTime=True&loc=Local&charset=utf8mb4&collation=utf8mb4_unicode_ci\n```\n\n----------------------------------------\n\nTITLE: Finding Sensitive Words in Go using stringx.NewTrie\nDESCRIPTION: This code example shows how to use the stringx.NewTrie function to create a filter for finding sensitive words in a given text.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/keywords.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfilter := stringx.NewTrie([]string{\n  \"AV演员\",\n  \"苍井空\",\n  \"AV\",\n  \"日本AV女优\",\n  \"AV演员色情\",\n})\nkeywords := filter.FindKeywords(\"日本AV演员兼电视、电影演员。苍井空AV女优是xx出道, 日本AV女优们最精彩的表演是AV演员色情表演\")\nfmt.Println(keywords)\n```\n\n----------------------------------------\n\nTITLE: Initializing BulkExecutor in Go\nDESCRIPTION: Creates a new BulkExecutor instance with options for flush interval and max tasks. Uses the functional options pattern for configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBulkExecutor(execute Execute, opts ...BulkOption) *BulkExecutor {\n\toptions := newBulkOptions()\n\tfor _, opt := range opts {\n\t\topt(&options)\n\t}\n\tcontainer := &bulkContainer{\n\t\texecute:  execute,\n\t\tmaxTasks: options.cachedTasks,\n\t}\n\texecutor := &BulkExecutor{\n\t\texecutor:  NewPeriodicalExecutor(options.flushInterval, container),\n\t\tcontainer: container,\n\t}\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Insertion Logic with BulkExecutor in Go\nDESCRIPTION: This code snippet demonstrates the main business logic for inserting new data using a BulkExecutor. It shows how to add tasks, flush the task container, and wait for all tasks to finish.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) insertNewData(ch chan interface{}, sqlFromDb *model.Task) error {\n\tfor item := range ch {\n\t\tif r, vok := item.(*model.Task); !vok {\n\t\t\tcontinue\n\t\t}\n\t\terr := dts.insertExecutor.Add(r)\n\t\tif err != nil {\n\t\t\tr.Tag = sqlFromDb.Tag\n\t\t\tr.TagId = sqlFromDb.Id\n\t\t\tr.InsertId = genInsertId()\n\t\t\tr.ToRedis = toRedis == constant.INCACHED\n\t\t\tr.UpdateWay = sqlFromDb.UpdateWay\n\t\t\terr := dts.insertExecutor.Add(r)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t}\n\tdts.insertExecutor.Flush()\n\tdts.insertExecutor.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Server Configuration Struct - Go\nDESCRIPTION: Defines the RPC server configuration structure, outlining necessary parameters such as listening address, etcd configuration, and authentication options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nRpcServerConf struct {\n    service.ServiceConf // 服务配置，详情见api配置说明，这里不赘述\n    ListenOn      string // rpc监听地址和端口，如：127.0.0.1:8888\n    Etcd          discov.EtcdConf    `json:\",optional\"` // etcd相关配置\n    Auth          bool               `json:\",optional\"` // 是否开启Auth，如果是则Redis为必填\n    Redis         redis.RedisKeyConf `json:\",optional\"` // Auth验证\n    StrictControl bool               `json:\",optional\"` // 是否Strict模式，如果是则遇到错误是Auth失败，否则可以认为成功\n    // pending forever is not allowed\n    // never set it to 0, if zero, the underlying will set to 2s automatically\n    Timeout      int64 `json:\",default=2000\"` // 超时控制，单位：毫秒\n    CpuThreshold int64 `json:\",default=900,range=[0:1000]\"` cpu降载阈值，默认900，可允许设置范围0到1000\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the PickerBuilder Interface in gRPC\nDESCRIPTION: This code snippet defines the PickerBuilder interface utilized by gRPC to create a load balancer picker. It specifies the Build method that should return a picker for selecting service nodes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype PickerBuilder interface {\n    // Build returns a picker that will be used by gRPC to pick a SubConn.\n    Build(info PickerBuildInfo) balancer.Picker\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Call Layer Folder Name Based on Service Name\nDESCRIPTION: This snippet is written in Go and defines the logic to determine the call layer folder name based on the service name defined in the proto file. It ensures that the generated client name doesn't clash with the proto package name.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nif strings.ToLower(proto.Service.Name) == strings.ToLower(proto.GoPackage) {\n    callDir = filepath.Join(ctx.WorkDir, strings.ToLower(stringx.From(proto.Service.Name+\"_client\").ToCamel()))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expand Logic for URL Shortener in Go\nDESCRIPTION: Modifies the Expand function in expandlogic.go to retrieve the original URL from the database using the shortened key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(in *transform.ExpandReq) (*transform.ExpandResp, error) {\n  // 手动代码开始\n  res, err := l.svcCtx.Model.FindOne(in.Shorten)\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ExpandResp{\n    Url: res.Url,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Task Movement in TimingWheel\nDESCRIPTION: Handles task movement and rescheduling within the timing wheel. Manages task positioning, circle calculations, and immediate execution cases.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/timing-wheel.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) moveTask(task baseEntry) {\n\tval, ok := tw.timers.Get(task.key)\n\tif !ok {\n\t\treturn\n\t}\n\n\ttimer := val.(*positionEntry)\n\tif task.delay < tw.interval {\n\t\tthreading.GoSafe(func() {\n\t\t\ttw.execute(timer.item.key, timer.item.value)\n\t\t})\n\t\treturn\n\t}\n\tpos, circle := tw.getPositionAndCircle(task.delay)\n\tif pos >= timer.pos {\n\t\ttimer.item.circle = circle\n\t\ttimer.item.diff = pos - timer.pos\n\t} else if circle > 0 {\n\t\tcircle--\n\t\ttimer.item.circle = circle\n\t\ttimer.item.diff = tw.numSlots + pos - timer.pos\n\t} else {\n\t\ttimer.item.removed = true\n\t\tnewItem := &timingEntry{\n\t\t\tbaseEntry: task,\n\t\t\tvalue:     timer.item.value,\n\t\t}\n\t\ttw.slots[pos].PushBack(newItem)\n\t\ttw.setTimerPosition(pos, newItem)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Grammar definition using antlr4\nDESCRIPTION: Defines the grammar rules for service specifications, including server metadata, service API definition, routing, documentation, handlers, request/response bodies, key-value pairs, service names, and API paths using antlr4 grammar.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_10\n\nLANGUAGE: antlrv4\nCODE:\n```\n\"serviceSpec:    atServer? serviceApi;\natServer:       '@server' lp='(' kvLit+ rp=')';\nserviceApi:     {match(p,\\\"service\\\")}serviceToken=ID serviceName lbrace='{' serviceRoute* rbrace='}';\nserviceRoute:   atDoc? (atServer|atHandler) route;\natDoc:          '@doc' lp='('? ((kvLit+)|STRING) rp=')'?;\natHandler:      '@handler' ID;\nroute:          {checkHttpMethod(p)}httpMethod=ID path request=body? returnToken=ID? response=replybody?;\nbody:           lp='(' (ID)? rp=')';\nreplybody:      lp='(' dataType? rp=')';\n// kv\nkvLit:          key=ID {checkKeyValue(p)}value=LINE_VALUE;\n\nserviceName:    (ID '-'?)+;\npath:           (('/' (ID ('-' ID)*))|('/:' (ID ('-' ID)?)))+;\"\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from DDL\nDESCRIPTION: Command to generate model code from SQL DDL files with optional cache support.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-model.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql ddl -src=\"./*.sql\" -dir=\"./sql/model\" -c\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Request Throughput\nDESCRIPTION: This method retrieves the maximum throughput (requests per second) recorded within a sliding time window, enabling dynamic adjustment of the service's concurrency capabilities.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// 滑动时间窗口内有多个桶\n// 找到请求数最多的那个\n// 每个桶占用的时间为 internal ms\n// qps指的是1s内的请求数，qps: maxPass * time.Second/internal\nfunc (as *adaptiveShedder) maxPass() int64 {\n    var result float64 = 1\n    // 当前时间窗口内请求数最多的桶\n    as.passCounter.Reduce(func(b *collection.Bucket) {\n        if b.Sum > result {\n            result = b.Sum\n        }\n    })\n\n    return int64(result)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Redis BitSet Operations in Go\nDESCRIPTION: Demonstrates basic Redis bitset operations including initialization, checking bits, setting bits, and managing expiration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/bloom.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nstore := redis.NewRedis(\"redis 地址\", redis.NodeType)\nbitSet := newRedisBitSet(store, \"test_key\", 1024)\nisSetBefore, err := bitSet.check([]uint{0})\n\nerr = bitSet.set([]uint{512})\nerr = bitSet.expire(3600)\n\nerr = bitSet.del()\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Service in YAML\nDESCRIPTION: YAML configuration file for the RPC service, specifying service name, listen address, database connection, Redis cache, and etcd settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nName: common.rpc\nListenOn: 127.0.0.1:8081\nMysql:\n  DataSource: root:admin@tcp(127.0.0.1:3306)/datacenter?charset=utf8&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n- Host: 127.0.0.1:6379\n  Pass:\n  Type: node  \nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: common.rpc\n```\n\n----------------------------------------\n\nTITLE: Main Application Setup in Go\nDESCRIPTION: Main Go file for setting up and running the distributed task queue application, including signal handling for graceful shutdown.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"github.com/zeromicro/go-zero/core/conf\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/config\"\n\t\"job/internal/handler\"\n\t\"job/internal/svc\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\n\nvar configFile = flag.String(\"f\", \"etc/job.yaml\", \"the config file\")\n\nfunc main() {\n\tflag.Parse()\n\n\t//配置\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\tctx := svc.NewServiceContext(c)\n\n\t//注册job\n\tgroup := service.NewServiceGroup()\n\thandler.RegisterJob(ctx,group)\n\n\t//捕捉信号\n\tch := make(chan os.Signal)\n\tsignal.Notify(ch, syscall.SIGHUP, syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT)\n\tgo func() {\n\t\tfor {\n\t\t\ts := <-ch\n\t\t\tlogx.Infof(\"get a signal %s\", s.String())\n\t\t\tswitch s {\n\t\t\tcase syscall.SIGQUIT, syscall.SIGTERM, syscall.SIGINT:\n\t\t\t\tfmt.Printf(\"stop group\")\n\t\t\t\tgroup.Stop()\n\t\t\t\tlogx.Info(\"job exit\")\n\t\t\t\ttime.Sleep(time.Second)\n\t\t\t\treturn\n\t\t\tcase syscall.SIGHUP:\n\t\t\tdefault:\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n\t\n\tgroup.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Task Data Insertion Logic in Go\nDESCRIPTION: Implementation of data insertion logic using BulkExecutor, demonstrating task addition, flushing, and waiting for completion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/executors.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) insertNewData(ch chan interface{}, sqlFromDb *model.Task) error {\n\tfor item := range ch {\n\t\tif r, vok := item.(*model.Task); !vok {\n\t\t\tcontinue\n\t\t}\n\t\terr := dts.insertExecutor.Add(r)\n\t\tif err != nil {\n\t\t\tr.Tag = sqlFromDb.Tag\n\t\t\tr.TagId = sqlFromDb.Id\n\t\t\tr.InsertId = genInsertId()\n\t\t\tr.ToRedis = toRedis == constant.INCACHED\n\t\t\tr.UpdateWay = sqlFromDb.UpdateWay\n\t\t\terr := dts.insertExecutor.Add(r)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t}\n\tdts.insertExecutor.Flush()\n\tdts.insertExecutor.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New RPC Service\nDESCRIPTION: Creates a new RPC service named 'greet' using the goctl rpc new command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl rpc new greet\n```\n\n----------------------------------------\n\nTITLE: RPC Connection Modes in Zero Framework\nDESCRIPTION: Examples showing different RPC connection modes including direct cluster connection, etcd service discovery, and direct IP connection.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// mode1: 集群直连\n// conf:=zrpc.NewDirectClientConf([]string{\"ip:port\"},\"app\",\"token\")\n\n// mode2: etcd 服务发现\n// conf:=zrpc.NewEtcdClientConf([]string{\"ip:port\"},\"key\",\"app\",\"token\")\n// client, _ := zrpc.NewClient(conf)\n\n// mode3: ip直连mode\n// client, _ := zrpc.NewClientWithTarget(\"127.0.0.1:8888\")\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Configuration Struct - Go\nDESCRIPTION: Defines the structure for logging configuration, specifying details like logging mode, path, level, and retention settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"` // 服务名称\n\tMode                string `json:\",default=console,options=console|file|volume\"` // 日志模式，console-输出到console，file-输出到当前服务器（容器）文件，，volume-输出docker挂在文件内\n\tPath                string `json:\",default=logs\"` // 日志存储路径\n\tLevel               string `json:\",default=info,options=info|error|severe\"` // 日志级别\n\tCompress            bool   `json:\",optional\"` // 是否开启gzip压缩\n\tKeepDays            int    `json:\",optional\"` // 日志保留天数\n\tStackCooldownMillis int    `json:\",default=100\"` // 日志write间隔\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a BulkExecutor with Options in Go-Zero\nDESCRIPTION: Example of initializing a BulkExecutor with specific options including an execution interval and maximum task count. This demonstrates the functional options pattern in use.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) Init() {\n    // insertIntoCk() 是真正insert执行函数【需要开发者自己编写具体业务逻辑】\n\tdts.insertExecutor = executors.NewBulkExecutor(\n\t\tdts.insertIntoCk,\n\t\texecutors.WithBulkInterval(time.Second*3),\t// 3s会自动刷一次container中task去执行\n\t\texecutors.WithBulkTasks(10240),\t\t\t\t// container最大task数。一般设为2的幂次\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Job Handlers\nDESCRIPTION: Router implementation for registering multiple job handlers in the service group.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage handler\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/logic\"\n\t\"job/internal/svc\"\n)\n\nfunc RegisterJob(serverCtx *svc.ServiceContext,group *service.ServiceGroup)  {\n\tgroup.Add(logic.NewProducerLogic(context.Background(),serverCtx))\n\tgroup.Add(logic.NewConsumerLogic(context.Background(),serverCtx))\n\tgroup.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Data Insertion Logic Implementation\nDESCRIPTION: Main business logic for inserting data using executor with error handling and task management.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) insertNewData(ch chan interface{}, sqlFromDb *model.Task) error {\n\tfor item := range ch {\n\t\tif r, vok := item.(*model.Task); !vok {\n\t\t\tcontinue\n\t\t}\n\t\terr := dts.insertExecutor.Add(r)\n\t\tif err != nil {\n\t\t\tr.Tag = sqlFromDb.Tag\n\t\t\tr.TagId = sqlFromDb.Id\n\t\t\tr.InsertId = genInsertId()\n\t\t\tr.ToRedis = toRedis == constant.INCACHED\n\t\t\tr.UpdateWay = sqlFromDb.UpdateWay\n\t\t\terr := dts.insertExecutor.Add(r)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t}\n\tdts.insertExecutor.Flush()\n\tdts.insertExecutor.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Configuration in Go\nDESCRIPTION: This snippet shows the SignatureConf and PrivateKeyConf structures used for configuring API request signatures in Go-Zero. It includes options for strict mode, expiry time, and private key settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nSignatureConf struct {\n    Strict bool `json:\",default=false\"` // Strict mode or not, if yes then PrivateKeys are required\n    Expiry time.Duration `json:\",default=1h\"` // validity period, default 1 hour\n    PrivateKeys []PrivateKeyConf // Signature key related configuration\n}\n\nPrivateKeyConf struct {\n    Fingerprint string // Fingerprint configuration\n    KeyFile string // key configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Greet Service Logic\nDESCRIPTION: Implementation of the Greet service logic that returns a simple hello message.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/monolithic-service.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *GreetLogic) Greet(req types.Request) (*types.Response, error) {\n\treturn &types.Response{\n\t\tMessage: \"Hello go-zero\",\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: JSON log output with duration\nDESCRIPTION: This shows the JSON format of the log output when using `logx.WithDuration`. It includes the timestamp, log level, duration, and the content of the log message. The duration is formatted as a string with units (e.g., 'ms').\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"@timestamp\":\"2020-09-12T01:22:55.552+08\",\"level\":\"info\",\"duration\":\"3.0ms\",\"content\":\"sql query:...\"}\n{\"@timestamp\":\"2020-09-12T01:22:55.552+08\",\"level\":\"slow\",\"duration\":\"500ms\",\"content\":\"[SQL] query: slowcall - ...\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Configuration Struct - Go\nDESCRIPTION: Defines the Redis configuration structure that contains details about the Redis host, type, and optional password for authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis地址\n    Type string `json:\",default=node,options=node|cluster\"` // redis类型\n    Pass string `json:\",optional\"` // redis密码\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring go-stash YAML\nDESCRIPTION: Configuration file for go-stash that defines Kafka input settings, filtering rules, and Elasticsearch output configuration. Includes cluster configuration, data processing rules, and output formatting.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/log-collection.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nClusters:\n- Input:\n    Kafka:\n      Name: go-stash\n      Log:\n        Mode: file\n      Brokers:\n      - \"127.0.0.1:9092\"\n      Topics: \n      - log-collection\n      Group: stash\n      Conns: 3\n      Consumers: 10\n      Processors: 60\n      MinBytes: 1048576\n      MaxBytes: 10485760\n      Offset: first\n  Filters:\n  - Action: drop\n    Conditions:\n      - Key: status\n        Value: \"503\"\n        Type: contains\n      - Key: type\n        Value: \"app\"\n        Type: match\n        Op: and\n  - Action: remove_field\n    Fields:\n    - source\n    - _score\n    - \"@metadata\"\n    - agent\n    - ecs\n    - input\n    - log\n    - fields\n  Output:\n    ElasticSearch:\n      Hosts:\n      - \"http://127.0.0.1:9200\"\n      Index: \"go-stash-{{yyyy.MM.dd}}\"\n      MaxChunkBytes: 5242880\n      GracePeriod: 10s\n      Compress: false\n      TimeZone: UTC\n```\n\n----------------------------------------\n\nTITLE: Channel Close Example in Go\nDESCRIPTION: This code snippet demonstrates how to properly close a channel after writing to it. It shows two methods for reading from a channel: the v, ok pattern and the for range pattern. The 'v, ok' pattern requires manual checking for channel closure, while the 'for range' pattern automatically exits upon channel closure.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n```go\nch := make(chan interface{})\n// 写入完毕需要主动关闭channel\ndefer func() {\n    close(ch)\n}()\ngo func() {\n    // v,ok模式 读取channel\n    for {\n        v, ok := <-ch\n        if !ok {\n            return\n        }\n        t.Log(v)\n    }\n\n    // for range模式读取channel，channel关闭循环自动退出\n    for i := range ch {\n        t.Log(i)\n    }\n\n    // 清空channel，channel关闭循环自动退出\n    for range ch {\n    }\n}()\nfor i := 0; i < 10; i++ {\n    ch <- i\n    time.Sleep(time.Second)\n}\n````\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Structure\nDESCRIPTION: Shows how to define a User model struct with database field mappings using struct tags.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar userBuilderQueryRows = strings.Join(builder.FieldNames(&User{}), \",\")\n\ntype User struct {\n    Avatar string `db:\"avatar\"` \t\t\t// 头像\n    UserName string `db:\"user_name\"` \t\t// 姓名\n    Sex int `db:\"sex\"` \t\t\t\t\t// 1男,2女\n    MobilePhone string `db:\"mobile_phone\"` \t// 手机号\n}\n```\n\n----------------------------------------\n\nTITLE: Updating API Gateway Config Structure\nDESCRIPTION: Go code that modifies the API Gateway's configuration structure to include RPC client configurations for the Add and Check services.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    rest.RestConf\n    Add   zrpc.RpcClientConf     // 手动代码\n    Check zrpc.RpcClientConf     // 手动代码\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing MySQL Connection in go-zero\nDESCRIPTION: Shows how to establish a MySQL connection and create a model using go-zero's sqlx package. Includes connection initialization and batch inserter setup.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 1. Quickly connect to a mysql\n// datasource: mysql dsn\nheraMysql := sqlx.NewMysql(datasource)\n\n// 2. Call in the `servicecontext`, understand the logic layer call of the model upper layer\nmodel.NewMysqlModel(heraMysql, tablename),\n\n// 3. model layer mysql operation\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n\tdefer func() {\n\t\trecover()\n\t}()\n    // 4. Create a batch insert [mysql executor]\n    // conn: mysql connection; insertsql: mysql insert sql\n\tbulkInserter , err := sqlx.NewBulkInserter(conn, insertsql)\n\tif err != nil {\n\t\tlogx.Error(\"Init bulkInsert Faild\")\n\t\tpanic(\"Init bulkInsert Faild\")\n\t\treturn nil\n\t}\n\treturn &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Configuration in Go\nDESCRIPTION: This code defines the Config structure for Prometheus monitoring in Go-Zero. It includes settings for the host, port, and metrics path for Prometheus data collection.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tHost string `json:\",optional\"` // prometheus listens to host\n\tPort int `json:\",default=9101\"` // prometheus listens to the port\n\tPath string `json:\",default=/metrics\"` // report address\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Expand Logic in expandlogic.go\nDESCRIPTION: This Go snippet implements the expand logic for the transform service. It retrieves the URL associated with the given shortened key from the database using the `FindOne` method of the `ShorturlModel`. The retrieved URL is then returned in the `ExpandResp` struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"func (l *ExpandLogic) Expand(in *transform.ExpandReq) (*transform.ExpandResp, error) {\\n  // 手动代码开始\\n  res, err := l.svcCtx.Model.FindOne(in.Shorten)\\n  if err != nil {\\n    return nil, err\\n  }\\n\\n  return &transform.ExpandResp{\\n    Url: res.Url,\\n  }, nil\\n  // 手动代码结束\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Redis Lock with Lua Script in Go\nDESCRIPTION: This snippet demonstrates the implementation of the Release method for the Redis lock. It uses a Lua script to ensure that only the owner of the lock can release it, maintaining the lock's integrity in a distributed system.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-lock.md#2025-04-22_snippet_2\n\nLANGUAGE: lua\nCODE:\n```\nif redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    return redis.call(\"DEL\", KEYS[1])\nelse\n    return 0\nend\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (rl *RedisLock) Release() (bool, error) {\n\tresp, err := rl.store.Eval(delCommand, []string{rl.key}, []string{rl.id})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tif reply, ok := resp.(int64); !ok {\n\t\treturn false, nil\n\t} else {\n\t\treturn reply == 1, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Shorten Logic in Go for Short URL Service\nDESCRIPTION: Updates the Shorten function in shortenlogic.go to generate a short URL using MD5 hash and insert it into the database using the Model.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\n  // 手动代码开始，生成短链接\n  key := hash.Md5Hex([]byte(in.Url))[:6]\n  _, err := l.svcCtx.Model.Insert(l.ctx,&model.Shorturl{\n    Shorten: key,\n    Url:     in.Url,\n  })\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ShortenResp{\n    Shorten: key,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus in go-zero YAML\nDESCRIPTION: YAML configuration for enabling Prometheus monitoring in go-zero shorturl-api service. Specifies the host, port, and metrics path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-monitor.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nPrometheus:\n  Host: 127.0.0.1\n  Port: 9091\n  Path: /metrics\n```\n\n----------------------------------------\n\nTITLE: RPC Service Configuration Structure\nDESCRIPTION: Go configuration struct for RPC server using go-zero's zrpc package\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    zrpc.RpcServerConf\n}\n```\n\n----------------------------------------\n\nTITLE: Using BulkExecutor for Data Insertion in Go-Zero\nDESCRIPTION: Implementation of a method that uses BulkExecutor to insert data into ClickHouse. It demonstrates the three main steps of using an executor: adding tasks, flushing the container, and waiting for completion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) insertNewData(ch chan interface{}, sqlFromDb *model.Task) error {\n\tfor item := range ch {\n\t\tif r, vok := item.(*model.Task); !vok {\n\t\t\tcontinue\n\t\t}\n\t\terr := dts.insertExecutor.Add(r)\n\t\tif err != nil {\n\t\t\tr.Tag = sqlFromDb.Tag\n\t\t\tr.TagId = sqlFromDb.Id\n\t\t\tr.InsertId = genInsertId()\n\t\t\tr.ToRedis = toRedis == constant.INCACHED\n\t\t\tr.UpdateWay = sqlFromDb.UpdateWay\n            // 1. Add Task\n\t\t\terr := dts.insertExecutor.Add(r)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t}\n    // 2. Flush Task container\n\tdts.insertExecutor.Flush()\n    // 3. Wait All Task Finish\n\tdts.insertExecutor.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: High Throughput Check with Lock Management\nDESCRIPTION: Determines if the system is experiencing high throughput by comparing current and average flying requests against maximum capacity. Uses locks for thread-safe access to shared state.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (as *adaptiveShedder) highThru() bool {\n    // Add lock\n    as.avgFlyingLock.Lock()\n    // Get the sliding average\n    // Update at the end of each request\n    avgFlying := as.avgFlying\n    // Unlock\n    as.avgFlyingLock.Unlock()\n    // Maximum concurrency of the system at this time\n    maxFlight := as.maxFlight()\n    // Whether the number of concurrency being processed and the average concurrency is greater than the system's maximum concurrency\n    return int64(avgFlying) > maxFlight && atomic.LoadInt64(&as.flying) > maxFlight\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BulkExecutor in Go-Zero\nDESCRIPTION: Implementation of the NewBulkExecutor function which creates a new BulkExecutor with functional options pattern. It combines a periodical executor with a bulk container to manage task execution.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBulkExecutor(execute Execute, opts ...BulkOption) *BulkExecutor {\n    // 选项模式：在 go-zero 中多处出现。在多配置下，比较好的设计思路\n    // https://halls-of-valhalla.org/beta/articles/functional-options-pattern-in-go,54/\n\toptions := newBulkOptions()\n\tfor _, opt := range opts {\n\t\topt(&options)\n\t}\n    // 1. task container: [execute 真正做执行的函数] [maxTasks 执行临界点]\n\tcontainer := &bulkContainer{\n\t\texecute:  execute,\n\t\tmaxTasks: options.cachedTasks,\n\t}\n    // 2. 可以看出 bulkexecutor 底层依赖 periodicalexecutor\n\texecutor := &BulkExecutor{\n\t\texecutor:  NewPeriodicalExecutor(options.flushInterval, container),\n\t\tcontainer: container,\n\t}\n\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrent Execution with Parallel function in go-zero fx\nDESCRIPTION: This code demonstrates concurrent execution of functions using the Parallel function in go-zero's fx package. It executes the provided functions in parallel, which can improve performance when dealing with independent tasks or dependencies.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfx.Parallel(func() {\n  userRPC() // 依赖1\n}, func() {\n  accountRPC() // 依赖2\n}, func() {\n  orderRPC() // 依赖3\n})\n\n```\n\n----------------------------------------\n\nTITLE: Updating API Gateway Configuration for RPC Services\nDESCRIPTION: YAML configuration that connects the API Gateway to the Add and Check RPC services via etcd service discovery.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nAdd:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: add.rpc\nCheck:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: check.rpc\n```\n\n----------------------------------------\n\nTITLE: Correct Proto Import Example\nDESCRIPTION: This example demonstrates the correct way to import and use external message types in a proto file. The imported types are used within the main Request and Response messages.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package =  \"./greet\";\n\nimport \"base/common.proto\";\n\nmessage Request {\n  base.In in = 1;// import supported\n}\n\nmessage Response {\n base.Out out = 2;// import supported\n}\n\nservice Greet {\n  rpc Ping(Request) returns(Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining REST API Configuration in Go\nDESCRIPTION: This snippet shows the RestConf struct, which contains settings for the REST API service, including listening address, port, SSL certificates, rate limiting, and timeout parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nservice.ServiceConf // service配置\nHost     string `json:\",default=0.0.0.0\"` // http监听ip，默认0.0.0.0\nPort     int // http监听端口,必填\nCertFile string `json:\",optional\"` // https证书文件，可选\nKeyFile  string `json:\",optional\"` // https私钥文件，可选 \nVerbose  bool   `json:\",optional\"` // 是否打印详细http请求日志\nMaxConns int    `json:\",default=10000\"` // http同时可接受最大请求数（限流数），默认10000\nMaxBytes int64  `json:\",default=1048576,range=[0:8388608]\"` // http可接受请求的最大ContentLength，默认1048576，被设置值必须在0到8388608之间\n// milliseconds\nTimeout      int64         `json:\",default=3000\"` // 超时时长控制，单位：毫秒，默认3000\nCpuThreshold int64         `json:\",default=900,range=[0:1000]\"` // cpu降载阈值，默认900，可允许设置范围0到1000\nSignature    SignatureConf `json:\",optional\"` // 签名配置\n```\n\n----------------------------------------\n\nTITLE: Implementing Wait and EnterExecution in PeriodicalExecutor in Go\nDESCRIPTION: This code snippet shows the implementation of Wait and enterExecution methods in PeriodicalExecutor, which manage the synchronization of task execution using WaitGroup.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) enterExecution() {\n\tpe.wgBarrier.Guard(func() {\n\t\tpe.waitGroup.Add(1)\n\t})\n}\n\nfunc (pe *PeriodicalExecutor) Wait() {\n\tpe.wgBarrier.Guard(func() {\n\t\tpe.waitGroup.Wait()\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using TokenParser in Go\nDESCRIPTION: This snippet demonstrates how to initialize the TokenParser, generate a JWT token, and parse it using the TokenParser. It showcases the basic usage of the parser with multiple secret keys for rotation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/tokenparser.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nconst (\n      key     = \"14F17379-EB8F-411B-8F12-6929002DCA76\"\n      prevKey = \"B63F477D-BBA3-4E52-96D3-C0034C27694A\"\n   )\n\nfunc main() {\n      req := httptest.NewRequest(http.MethodGet, \"http://localhost\", nil)\n  \t\t//生成token\n      token, err := buildToken(key, map[string]interface{}{\n         \"key\": \"value\",\n      }, 3600)\n      req.Header.Set(\"Authorization\", \"Bearer \"+token)\n\t\t//初始化\n      parser := NewTokenParser(WithResetDuration(time.Minute))\n  \t\t//token解析\n      tok, err := parser.ParseToken(req, key, prevKey)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Configuration in Go\nDESCRIPTION: This snippet shows the LogConf structure which configures logging options for Go-Zero services. It includes settings for log output mode, storage path, log level, compression, retention, and write intervals.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName string `json:\",optional\"` // Service name\n\tMode string `json:\",default=console,options=console|file|volume\"` // Logging mode, console-output to console, file-output to current server (container) file, volume-output docker hanging inside the file\n\tPath string `json:\",default=logs\"` // log storage path\n\tLevel string `json:\",default=info,options=info|error|severe\"` // Logging level\n\tCompress bool `json:\",optional\"` // whether to enable gzip compression\n\tKeepDays int `json:\",optional\"` // the number of days to keep the logs\n\tStackCooldownMillis int `json:\",default=100\"` // Log write interval\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RPC Call in Go-Zero Search Logic\nDESCRIPTION: Adds logic to call the UserRpc service within the Search function of the SearchLogic struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *SearchLogic) Search(req types.SearchReq) (*types.SearchReply, error) {\n    userIdNumber := json.Number(fmt.Sprintf(\"%v\", l.ctx.Value(\"userId\")))\n    logx.Infof(\"userId: %s\", userIdNumber)\n    userId, err := userIdNumber.Int64()\n    if err != nil {\n        return nil, err\n    }\n    \n    // 使用user rpc\n    _, err = l.svcCtx.UserRpc.GetUser(l.ctx, &userclient.IdReq{\n        Id: userId,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.SearchReply{\n        Name:  req.Name,\n        Count: 100,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ErrServiceUnavailable in Go\nDESCRIPTION: Defines the error `ErrServiceUnavailable`, which is returned when the circuit breaker is open and a request is rejected. This error signals that the service is currently unavailable due to circuit breaking.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/breaker.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"var ErrServiceUnavailable = errors.New(\\\"circuit breaker is open\\\")\"\n```\n\n----------------------------------------\n\nTITLE: API Definition Example in Go\nDESCRIPTION: Example API definition showing info block, type definitions, and service definitions with handlers and middleware configuration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-api.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ninfo(\n    title: \"doc title\"\n    desc: \"doc description first part，doc description second part\"\n    version: \"1.0\"\n)\n\ntype User {\n    name string `json:\"user\"` // 用户姓名\n}\n\ntype Student {\n    name string `json:\"name\"` // 学生姓名\n}\n\ntype Teacher {\n}\n\ntype (\n    Address {\n        city string `json:\"city\"`\n    }\n\n    InnerType {\n        image string `json:\"image\"`\n    }\n\n    CreateRequest {\n        InnerType\n        name string `form:\"name\"`\n        age int `form:\"age,optional\"`\n        address []Address `json:\"address,optional\"`\n    }\n\n    GetRequest {\n        name string `path:\"name\"`\n        age int `form:\"age,optional\"`\n    }\n\n    GetResponse {\n        code int `json:\"code\"`\n        desc string `json:\"desc,omitempty\"`\n        address Address `json:\"address\"`\n        Service int `json:\"service\"`\n    }\n)\n\n@server(\n \tgroup: user\n )\nservice user-api {\n    @doc(\n        summary: \"user title\"\n    )\n    @handler GetUserHandler\n    get /api/user/:name (GetRequest) returns (GetResponse)\n\n    @handler CreateUserHandler\n    post /api/users/create (CreateRequest)\n}\n\n@server(\n    jwt: Auth\n    group: profile\n)\nservice user-api {\n    @doc(\n        summary: \"user title\"\n    )\n    @handler GetProfileHandler\n    get /api/profile/:name (GetRequest) returns (GetResponse)\n\n    @handler CreateProfileHandler\n    post /api/profile/create (CreateRequest)\n}\n\nservice user-api {\n    @doc(\n        summary: \"desc in one line\"\n    )\n    @handler PingHandler\n    head /api/ping ()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache and Redis Configuration in Go\nDESCRIPTION: This code defines the CacheConf, NodeConf, and RedisConf structures used for configuring Redis caching in Go-Zero. It includes settings for Redis clusters, individual nodes, and connection details.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nClusterConf []NodeConf\n\nNodeConf struct {\n    redis.RedisConf\n    Weight int `json:\",default=100\"` // weight\n}\n\nRedisConf struct {\n    Host string // redis address\n    Type string `json:\",default=node,options=node|cluster\"` // redis type\n    Pass string `json:\",optional\"` // redis password\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User RPC Service in YAML\nDESCRIPTION: YAML configuration file for the user RPC service, specifying the service name, listen address, and etcd settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nName: user.rpc\nListenOn: 127.0.0.1:8080\nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: URL Shortening Implementation with Caching\nDESCRIPTION: Implement URL shortening logic with MD5 hash generation and database insertion with caching\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ShortenLogic) Shorten(in *transform.ShortenReq) (*transform.ShortenResp, error) {\n\tkey := hash.Md5Hex([]byte(in.Url))[:6]\n\tobject, _ := l.svcCtx.Model.FindOne(l.ctx, key)\n\tif object != nil {\n\t\treturn &transform.ShortenResp{\n\t\t\tShorten: key,\n\t\t}, nil\n\t}\n\n\t_, err := l.svcCtx.Model.Insert(l.ctx, &model.Shorturl{\n\t\tShorten: key,\n\t\tUrl:     in.Url,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &transform.ShortenResp{\n\t\tShorten: key,\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Service Logic\nDESCRIPTION: Implements the business logic for the GetOrder endpoint including RPC call to user service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n    \"errors\"\n\n    \"go-zero-demo/mall/order/api/internal/svc\"\n    \"go-zero-demo/mall/order/api/internal/types\"\n    \"go-zero-demo/mall/user/rpc/types/user\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype GetOrderLogic struct {\n    logx.Logger\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n}\n\nfunc NewGetOrderLogic(ctx context.Context, svcCtx *svc.ServiceContext) GetOrderLogic {\n    return GetOrderLogic{\n        Logger: logx.WithContext(ctx),\n        ctx:    ctx,\n        svcCtx: svcCtx,\n    }\n}\n\nfunc (l *GetOrderLogic) GetOrder(req types.OrderReq) (*types.OrderReply, error) {\n    user, err := l.svcCtx.UserRpc.GetUser(l.ctx, &user.IdRequest{\n        Id: \"1\",\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    if user.Name != \"test\" {\n        return nil, errors.New(\"用户不存在\")\n    }\n\n    return &types.OrderReply{\n        Id:   req.Id,\n        Name: \"test order\",\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New go-zero API Service\nDESCRIPTION: Command to generate a new API service named 'greet' using the goctl tool, which creates a basic project structure with necessary files and configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl api new greet\n```\n\n----------------------------------------\n\nTITLE: Defining User Proto Service with Protocol Buffers\nDESCRIPTION: Protobuf definition for user service with request and response message structures and RPC method\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\n\noption go_package = \"./user\";\n\nmessage IdRequest {\n    string id = 1;\n}\n\nmessage UserResponse {\n    string id = 1;\n    string name = 2;\n    string gender = 3;\n}\n\nservice User {\n    rpc getUser(IdRequest) returns(UserResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Concurrent Token Rate Limit Testing in Go\nDESCRIPTION: Implements a concurrent test for token rate limiting, measuring allowed and denied requests across multiple goroutines\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/tokenlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntimer := time.NewTimer(time.Second * seconds)\nquit := make(chan struct{})\ndefer timer.Stop()\ngo func() {\n  <-timer.C\n  close(quit)\n}()\n\nvar allowed, denied int32\nvar wait sync.WaitGroup\nfor i := 0; i < runtime.NumCPU(); i++ {\n  wait.Add(1)\n  go func() {\n    for {\n      select {\n        case <-quit:\n          wait.Done()\n          return\n        default:\n          if limiter.Allow() {\n            atomic.AddInt32(&allowed, 1)\n          } else {\n            atomic.AddInt32(&denied, 1)\n          }\n      }\n    }\n  }()\n}\n\nwait.Wait()\nfmt.Printf(\"allowed: %d, denied: %d, qps: %d\\n\", allowed, denied, (allowed+denied)/seconds)\n```\n\n----------------------------------------\n\nTITLE: Managing Promise for Request Tracking\nDESCRIPTION: This code snippet defines the promise struct and methods that manage the state of a request, updating the count of currently processing requests and recording response times upon completion.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype promise struct {\n    // 请求开始时间\n    // 统计请求处理耗时\n    start   time.Duration\n    shedder *adaptiveShedder\n}\n\nfunc (p *promise) Fail() {\n    // 请求结束，当前正在处理请求数-1\n    p.shedder.addFlying(-1)\n}\n\nfunc (p *promise) Pass() {\n    // 响应时间，单位毫秒\n    rt := float64(timex.Since(p.start)) / float64(time.Millisecond)\n    // 请求结束，当前正在处理请求数-1\n    p.shedder.addFlying(-1)\n    p.shedder.rtCounter.Add(math.Ceil(rt))\n    p.shedder.passCounter.Add(1)\n}\n\nfunc (as *adaptiveShedder) addFlying(delta int64) {\n    flying := atomic.AddInt64(&as.flying, delta)\n    // 请求结束后，统计当前正在处理的请求并发\n    if delta < 0 {\n        as.avgFlyingLock.Lock()\n        // 估算当前服务近一段时间内的平均请求数\n        as.avgFlying = as.avgFlying*flyingBeta + float64(flying)*(1-flyingBeta)\n        as.avgFlyingLock.Unlock()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Context Initialization in Go\nDESCRIPTION: This Go code snippet provides the implementation for creating a new service context that initializes connections to the MySQL database and cache for the models used in the application.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"datacenter/common/model\"\n    \"datacenter/common/rpc/internal/config\"\n\n    \"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\ntype ServiceContext struct {\n    c              config.Config\n    AppConfigModel model.AppConfigModel\n    BaseAppModel   model.BaseAppModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn := sqlx.NewMysql(c.Mysql.DataSource)\n    apm := model.NewAppConfigModel(conn, c.CacheRedis)\n    bam := model.NewBaseAppModel(conn, c.CacheRedis)\n    return &ServiceContext{\n        c:              c,\n        AppConfigModel: apm,\n        BaseAppModel:   bam,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing go-zero Framework with Go Modules\nDESCRIPTION: Command to install the go-zero framework using Go modules with the Chinese proxy for better download speeds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Generation Options\nDESCRIPTION: The options presented in this snippet provide parameters that can be passed to the goctl rpc proto command, such as the source proto file path, target directory, and naming styles.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nNAME:\n   goctl rpc proto - generate rpc from proto\n\nUSAGE:\n   goctl rpc proto [command options] [arguments...]\n\nOPTIONS:\n   --src value, -s value         the file path of the proto source file\n   --proto_path value, -I value  native command of protoc, specify the directory in which to search for imports. [optional]\n   --dir value, -d value         the target path of the code\n   --style value                 the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --idea                        whether the command execution environment is from idea plugin. [optional]\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Settings in YAML\nDESCRIPTION: Configuration file for job queue settings including beanstalkd and redis connection details.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName: job\n\nLog:\n  ServiceName: job\n  Level: info\n\nDqConf:\n  Beanstalks:\n    - Endpoint: 127.0.0.1:7771\n      Tube: tube1\n    - Endpoint: 127.0.0.1:7772\n      Tube: tube2\n  Redis:\n    Host: 127.0.0.1:6379\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Initializing a REST Server in Go-Zero\nDESCRIPTION: Creates a new REST server instance with the given configuration. The MustNewServer function requires a RestConf parameter and optionally accepts RunOption arguments for customization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc MustNewServer(c RestConf, opts ...RunOption) *Server\n```\n\n----------------------------------------\n\nTITLE: Defining a Task Structure with BulkExecutor in Go-Zero\nDESCRIPTION: Example of a task structure that uses BulkExecutor for data synchronization from MySQL to ClickHouse. This shows how to integrate executors into a service component.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DailyTask struct {\n\tckGroup        *clickhousex.Cluster\n\tinsertExecutor *executors.BulkExecutor\n\tmysqlConn      sqlx.SqlConn\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Configuration Struct - Go\nDESCRIPTION: This snippet defines the structure for service configuration which includes logging setup, service name, environment mode, and metrics reporting options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceConf struct {\n    Name       string // 服务名称\n    Log        logx.LogConf // 日志配置\n    Mode       string            `json:\",default=pro,options=dev|test|pre|pro\"` // 服务环境，dev-开发环境，test-测试环境，pre-预发环境，pro-正式环境\n    MetricsUrl string            `json:\",optional\"` // 指标上报接口地址，该地址需要支持post json即可\n    Prometheus prometheus.Config `json:\",optional\"` // prometheus配置\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Service API in Go-Zero\nDESCRIPTION: API definition for user management endpoints including registration, login, and user information retrieval. Includes JWT authentication and middleware for user verification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n//注册请求\ntype RegisterReq struct {\n\t// TODO: add members here and delete this comment\n\tMobile   string `json:\"mobile\"` //基本一个手机号码就完事\n\tPassword string `json:\"password\"`\n\tSmscode\tstring `json:\"smscode\"` //短信码\n}\n//登陆请求\ntype LoginReq struct{\n\tMobile   string `json:\"mobile\"`\n\tType int64 `json:\"type\"`\t//1.密码登陆，2.短信登陆\n\tPassword string `json:\"password\"`\n}\n//微信登陆\ntype WxLoginReq struct {\n\tBeid\t  int64  `json:\"beid\"` //应用id\n\tCode string `json:\"code\"` //微信登陆密钥\n\tPtyid\t  int64  `json:\"ptyid\"` //对应平台\n}\n\n//返回用户信息\ntype UserReply struct {\n\tAuid       int64  `json:\"auid\"`\n\tUid       int64  `json:\"uid\"`\n\tBeid\t  int64  `json:\"beid\"` //应用id\n\tPtyid\t  int64  `json:\"ptyid\"` //对应平台\n\tUsername string `json:\"username\"`\n\tMobile   string `json:\"mobile\"`\n\tNickname string `json:\"nickname\"`\n\tOpenid string `json:\"openid\"`\n\tAvator string `json:\"avator\"`\n\tJwtToken\n}\n//返回APPUser\ntype AppUser struct{\n\tUid       int64  `json:\"uid\"`\n\tAuid       int64  `json:\"auid\"`\n\tBeid\t  int64  `json:\"beid\"` //应用id\n\tPtyid\t  int64  `json:\"ptyid\"` //对应平台\n\tNickname string `json:\"nickname\"`\n\tOpenid string `json:\"openid\"`\n\tAvator string `json:\"avator\"`\n}\n\ntype LoginAppUser struct{\n\tUid       int64  `json:\"uid\"`\n\tAuid       int64  `json:\"auid\"`\n\tBeid\t  int64  `json:\"beid\"` //应用id\n\tPtyid\t  int64  `json:\"ptyid\"` //对应平台\n\tNickname string `json:\"nickname\"`\n\tOpenid string `json:\"openid\"`\n\tAvator string `json:\"avator\"`\n\tJwtToken\n}\n\ntype JwtToken struct {\n\tAccessToken  string `json:\"access_token,omitempty\"`\n\tAccessExpire int64  `json:\"access_expire,omitempty\"`\n\tRefreshAfter int64  `json:\"refresh_after,omitempty\"`\n}\n\ntype UserReq struct{\n\tAuid       int64  `json:\"auid\"`\n\tUid       int64  `json:\"uid\"`\n\tBeid\t  int64  `json:\"beid\"` //应用id\n\tPtyid\t  int64  `json:\"ptyid\"` //对应平台\n}\n\ntype Request {\n\tName string `path:\"name,options=you|me\"`\n}\ntype Response {\n\tMessage string `json:\"message\"`\n}\n\n\n@server(\n\tgroup: user\n)\nservice datacenter-api {\n\t@handler ping\n\tpost /user/ping ()\n\t\n\t@handler register\n\tpost /user/register (RegisterReq) returns (UserReply)\n\t\n\t@handler login\n\tpost /user/login (LoginReq) returns (UserReply)\n\t\n\t@handler wxlogin\n\tpost /user/wx/login (WxLoginReq) returns (LoginAppUser)\n\t\n\t@handler code2Session\n\tget /user/wx/login () returns (LoginAppUser)\n}\n@server(\n\tjwt: Auth\n\tgroup: user\n\tmiddleware: Usercheck\n)\nservice datacenter-api {\n\t@handler userInfo\n\tget /user/dc/info (UserReq) returns (UserReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Global Middleware in go-zero\nDESCRIPTION: Shows how to register the global middleware function in the main function of the go-zero application.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc main() {\n\t\n    ···\n    \n\tserver := rest.MustNewServer(c.RestConf)\n\tdefer server.Stop()\n    \n\tserver.Use(\n\t\tmiddlewareDemoFunc,\n\t)\n\t\n    ···\n\n\tserver.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenParser Reset Duration in Go\nDESCRIPTION: This snippet defines a configuration option for the TokenParser to set the reset duration for clearing JWT secret key usage count data. It uses a functional options pattern for configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/tokenparser.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc WithResetDuration(duration time.Duration) ParseOption {\n   return func(parser *TokenParser) {\n      parser.resetDuration = duration\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: 使用fx进行基本流处理操作\nDESCRIPTION: 展示了使用fx进行流数据的输入、处理和输出的基本操作。包括From、Walk、Filter和ForEach等方法的使用。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/fx\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\n\tgo inputStream(ch)\n\tgo outputStream(ch)\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGTERM, syscall.SIGINT)\n\t<-c\n}\n\nfunc inputStream(ch chan int) {\n\tcount := 0\n\tfor {\n\t\tch <- count\n\t\ttime.Sleep(time.Millisecond * 500)\n\t\tcount++\n\t}\n}\n\nfunc outputStream(ch chan int) {\n\tfx.From(func(source chan<- interface{}) {\n\t\tfor c := range ch {\n\t\t\tsource <- c\n\t\t}\n\t}).Walk(func(item interface{}, pipe chan<- interface{}) {\n\t\tcount := item.(int)\n\t\tpipe <- count\n\t}).Filter(func(item interface{}) bool {\n\t\titemInt := item.(int)\n\t\tif itemInt%2 == 0 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}).ForEach(func(item interface{}) {\n\t\tfmt.Println(item)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Configuration in Go\nDESCRIPTION: This snippet shows the CacheConf and NodeConf structs, which define the configuration for Redis caching, including cluster settings and node weights.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nClusterConf []NodeConf\n\nNodeConf struct {\n    redis.RedisConf\n    Weight int `json:\",default=100\"` // 权重\n}\n```\n\n----------------------------------------\n\nTITLE: Walk Implementation with Worker Pool in Go\nDESCRIPTION: Shows the implementation of the Walk function with custom worker count handling concurrent stream processing using goroutines and channels.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/fx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) walkLimited(fn WalkFunc, option *rxOptions) Stream {\n\tpipe := make(chan interface{}, option.workers)\n\n\tgo func() {\n\t\tvar wg sync.WaitGroup\n\t\tpool := make(chan lang.PlaceholderType, option.workers)\n\n\t\tfor {\n\t\t\tpool <- lang.Placeholder\n\t\t\titem, ok := <-p.source\n\t\t\tif !ok {\n\t\t\t\t<-pool\n\t\t\t\tbreak\n\t\t\t}\n\t\t\twg.Add(1)\n\t\t\tthreading.GoSafe(func() {\n\t\t\t\tdefer func() {\n\t\t\t\t\twg.Done()\n\t\t\t\t\t<-pool\n\t\t\t\t}()\n\n\t\t\t\tfn(item, pipe)\n\t\t\t})\n\t\t}\n\n\t\twg.Wait()\n\t\tclose(pipe)\n\t}()\n\n\treturn Range(pipe)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Span Structure in Go\nDESCRIPTION: Defines the Span struct which represents a single operation in the distributed trace. It includes context, service name, operation name, start time, and other metadata.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/TraceHandler.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ntype Span struct {\n\tctx           spanContext\t\t// 传递的上下文\n\tserviceName   string\t\t\t// 服务名 \n\toperationName string\t\t\t// 操作\n\tstartTime     time.Time\t\t\t// 开始时间戳\n\tflag          string\t\t\t// 标记开启trace是 server 还是 client\n\tchildren      int\t\t\t\t// 本 span fork出来的 childsnums\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Config Structure\nDESCRIPTION: Go struct defining RPC server configuration with MySQL and Redis settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    zrpc.RpcServerConf\n    Mysql struct {\n        DataSource string\n    }\n    CacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Grouping Stream Data with Group function in go-zero fx\nDESCRIPTION: This code demonstrates how to group stream data using the Group function in go-zero's fx package. It takes a KeyFunc as input, which determines the key for grouping. Data is grouped based on the key, and the groups are then output as slices.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// 例子 按照首字符\"g\"或者\"p\"分组，没有则分到另一组\n\tss := []string{\"golang\", \"google\", \"php\", \"python\", \"java\", \"c++\"}\n\tfx.From(func(source chan<- interface{}) {\n\t\tfor _, s := range ss {\n\t\t\tsource <- s\n\t\t}\n\t}).Group(func(item interface{}) interface{} {\n\t\tif strings.HasPrefix(item.(string), \"g\") {\n\t\t\treturn \"g\"\n\t\t} else if strings.HasPrefix(item.(string), \"p\") {\n\t\t\treturn \"p\"\n\t\t}\n\t\treturn \"\"\n\t}).ForEach(func(item interface{}) {\n\t\tfmt.Println(item)\n\t})\n}\n\n// 源码\nfunc (p Stream) Group(fn KeyFunc) Stream {\n  // 定义分组存储map\n\tgroups := make(map[interface{}][]interface{})\n\tfor item := range p.source {\n    // 用户自定义分组key\n\t\tkey := fn(item)\n    // key相同分到一组\n\t\tgroups[key] = append(groups[key], item)\n\t}\n\n\tsource := make(chan interface{})\n\tgo func() {\n\t\tfor _, group := range groups {\n      // 相同key的一组数据写入到channel\n\t\t\tsource <- group\n\t\t}\n\t\tclose(source)\n\t}()\n\n\treturn Range(source)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Position and Circle in TimingWheel\nDESCRIPTION: This function calculates the position in the slots array and the circle count for a task with a given delay. It determines where in the timing wheel structure the task should be placed based on the delay duration and the current position.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// interval: 4min, d: 60min, numSlots: 16, tickedPos = 15\n// step = 15, pos = 14, circle = 0\nfunc (tw *TimingWheel) getPositionAndCircle(d time.Duration) (pos int, circle int) {\n\tsteps := int(d / tw.interval)\n\tpos = (tw.tickedPos + steps) % tw.numSlots\n\tcircle = (steps - 1) / tw.numSlots\n\treturn\n}\n```\n\n----------------------------------------\n\nTITLE: Logging with context for trace ID and span ID\nDESCRIPTION: This snippet shows how to use `logx.WithContext` to include trace ID and span ID information in log messages. It passes the current context to `logx.WithContext`, which then includes trace information from the context when the log message is written.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nlogx.WithContext(context.Context).Info(\"This is info!\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceContext with Middleware\nDESCRIPTION: Go code showing how to set up service context with middleware dependencies\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config config.Config\n    Example rest.Middleware\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config: c,\n        Example: middleware.NewExampleMiddleware().Handle,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Schema\nDESCRIPTION: Example of API definition using go-zero's API syntax with request/response types and service endpoints\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Request {\n  Name string `path:\"name,options=you|me\"` // parameters are auto validated\n}\n\ntype Response {\n  Message string `json:\"message\"`\n}\n\nservice greet-api {\n  @server(\n    handler: GreetHandler\n  )\n  get /greet/from/:name(Request) returns (Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Hash Locations for Bloom Filter in go-zero\nDESCRIPTION: Implements the getLocations function which generates hash values for an element to be used in the Bloom filter. It performs 14 hash operations on the input data.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/bloom.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) getLocations(data []byte) []uint {\n\tlocations := make([]uint, maps)\n\tfor i := uint(0); i < maps; i++ {\n\t\thashValue := hash.Hash(append(data, byte(i)))\n\t\tlocations[i] = uint(hashValue % uint64(f.bits))\n\t}\n\n\treturn locations\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Questions and Awards API in Go-Zero\nDESCRIPTION: API definition for a Q&A and lottery system including activities information, award management, and answer submission. Features both public and authenticated endpoints.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n// 问答 抽奖 开始\n@server(\n\tgroup: questions\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"获取活动的信息\"\n\t)\n\t@handler activitiesInfo\n\tget /questions/activities/info (Actid) returns (ActivityResp)\n\t@doc(\n\t\tsummary: \"获取奖品信息\"\n\t)\n\t@handler awardInfo\n\tget /questions/award/info (Actid) returns (ActivityResp)\n\n\t@handler awardList\n\tget /questions/award/list (Actid) returns (ActivityResp)\n\t\n}\ntype AnswerReq struct {\n\tActivityId\tint64 `json:\"actid\"` \n\tAnswers\tstring `json:\"answers\"` \n\tScore\tstring `json:\"score\"`\n}\ntype QuestionsAwardReq struct {\n\tActivityId\tint64 `json:\"actid\"` \n\tAnswerId\tint64 `json:\"answerid\"` \n}\ntype AnswerResp struct {\n\tAnswers\tstring `json:\"answers\"` \n\tScore\tstring `json:\"score\"`\n}\ntype AwardConvertReq struct {\n\tUserName\tstring `json:\"username\"` \n\tPhone\t\tstring `json:\"phone\"` \n\tLotteryId\tint64 `json:\"lotteryid\"` \n}\n\n\n@server(\n\tjwt: Auth\n\tgroup: questions\n\tmiddleware: Usercheck\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"获取题目\"\n\t)\n\t@handler lists\n\tget /questions/lists (VoteReq) returns (AnswerResp)\n\t@doc(\n\t\tsummary: \"提交答案\"\n\t)\n\t@handler change\n\tpost /questions/change (AnswerReq) returns (VoteResp)\n\n\t@doc(\n\t\tsummary: \"获取分数\"\n\t)\n\t@handler grade\n\tget /questions/grade (VoteReq) returns (VoteResp)\n\n\t@doc(\n\t\tsummary: \"开始转盘\"\n\t)\n\t@handler turntable\n\tpost /questions/lottery/turntable (EnrollReq) returns (EnrollResp)\n\t@doc(\n\t\tsummary: \"填写中奖信息人\"\n\t)\n\t@handler lottery\n\tpost /questions/lottery/convert (AwardConvertReq) returns (EnrollResp)\n}\n\n\n// 问答 抽奖 结束\n```\n\n----------------------------------------\n\nTITLE: LogConf struct definition\nDESCRIPTION: This code block defines the structure of the `LogConf` struct, which is used to configure the logx component. It includes fields for `ServiceName`, `Mode`, `Path`, `Level`, `Compress`, `KeepDays`, and `StackCooldownMillis`. These fields determine how logs are generated, stored, and managed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"`\n\tMode                string `json:\",default=console,options=console|file|volume\"`\n\tPath                string `json:\",default=logs\"`\n\tLevel               string `json:\",default=info,options=info|error|severe\"`\n\tCompress            bool   `json:\",optional\"`\n\tKeepDays            int    `json:\",optional\"`\n\tStackCooldownMillis int    `json:\",default=100\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single User Record from MySQL using go-zero\nDESCRIPTION: Shows how to perform a SELECT query for a single user record using go-zero's sqlx package. It demonstrates automatic struct field mapping and error handling.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        logx.Errorf(\"userId.findOne error, id=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return &user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Greet RPC Service with goctl\nDESCRIPTION: This command generates a new greet RPC service using goctl. It creates a complete project structure including configuration, proto file, and service implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc new greet\n```\n\n----------------------------------------\n\nTITLE: Logging duration with logx.WithDuration\nDESCRIPTION: This code snippet illustrates how to log the duration of an operation using `logx.WithDuration`.  It captures the start time, performs an operation, calculates the duration, and logs the duration along with a message. The message is logged at different levels (slow or info) based on whether the duration exceeds a defined threshold.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nstartTime := timex.Now()\n// 数据库查询\nrows, err := conn.Query(q, args...)\nduration := timex.Since(startTime)\nif duration > slowThreshold {\n    logx.WithDuration(duration).Slowf(\"[SQL] query: slowcall - %s\", stmt)\n} else {\n    logx.WithDuration(duration).Infof(\"sql query: %s\", stmt)\n}\n```\n\n----------------------------------------\n\nTITLE: Adding UserModel Dependency in Go-Zero API\nDESCRIPTION: Go code to add the UserModel dependency to the ServiceContext struct in the Go-Zero API project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n\t\"book/user/api/internal/config\"\n\t\"book/user/model\"\n\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\ntype ServiceContext struct {\n\tConfig    config.Config\n\tUserModel model.UserModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\tconn := sqlx.NewMysql(c.Mysql.DataSource)\n\tum := model.NewUserModel(conn)\n\t// redis cache 模式\n\t// um := NewUserModel(conn,c.CacheRedis)\n\treturn &ServiceContext{\n\t\tConfig:    c,\n\t\tUserModel: um,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TaskContainer Interface in Go\nDESCRIPTION: This code snippet defines the TaskContainer interface used in executors. It specifies methods for adding tasks, executing tasks, and removing all tasks from the container.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nTaskContainer interface {\n    AddTask(task interface{}) bool\n\tExecute(tasks interface{})\n\tRemoveAll() interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: 使用fx的Parallel操作并发处理多个依赖\nDESCRIPTION: 展示了如何使用fx的Parallel操作同时处理多个依赖。这个例子并发调用了三个RPC服务。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfx.Parallel(func() {\n  userRPC() // 依赖1\n}, func() {\n  accountRPC() // 依赖2\n}, func() {\n  orderRPC() // 依赖3\n})\n```\n\n----------------------------------------\n\nTITLE: User Model Definition in go-zero\nDESCRIPTION: Example of defining a user model struct with database field mappings and automatic field name extraction.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar userBuilderQueryRows = strings.Join(builder.FieldNames(&User{}), \",\")\n\ntype User struct {\n    Avatar string `db:\"avatar\"` \t\t\t// 头像\n    UserName string `db:\"user_name\"` \t\t// 姓名\n    Sex int `db:\"sex\"` \t\t\t\t\t// 1男,2女\n    MobilePhone string `db:\"mobile_phone\"` \t// 手机号\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unsigned Request Callback in Go-Zero REST Server\nDESCRIPTION: Defines a RunOption for handling unsigned request failures. This option specifies the callback function to be executed when request signing verification fails.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nWithUnsignedCallback(handler.UnauthorizedCallback) RunOption\n```\n\n----------------------------------------\n\nTITLE: Defining Service Configuration in Go\nDESCRIPTION: This code defines the ServiceConf structure which includes basic service configuration options such as service name, logging configuration, environment mode, and monitoring settings for metrics and Prometheus.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceConf struct {\n    Name string // Service name\n    Log logx.LogConf // Logging configuration\n    Mode string ``json:\",default=pro,options=dev|test|pre|pro\"` // Service environment, dev-development environment, test-test environment, pre-pre-release environment, pro-formal environment\n    MetricsUrl string `json:\",optional\"` // The address of the metrics reporting interface, which needs to support post json\n    Prometheus prometheus.Config `json:\",optional\"` // prometheus configuration\n}\n```\n\n----------------------------------------\n\nTITLE: StartServerSpan function in go-zero\nDESCRIPTION: This code defines the `StartServerSpan` function, which creates and initializes a new server span. It takes a context, a carrier containing tracing information, a service name, and an operation name as input. It then creates a new server span using `newServerSpan` and adds it to the context using `context.WithValue`. This function is crucial for initiating tracing at the beginning of a server-side operation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc StartServerSpan(ctx context.Context, carrier Carrier, serviceName, operationName string) (\n    context.Context, tracespec.Trace) {\n    span := newServerSpan(carrier, serviceName, operationName)\n    // **4**\n    return context.WithValue(ctx, tracespec.TracingKey, span), span\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Insert Operation\nDESCRIPTION: Demonstrates how to implement an insert operation for the User model using go-zero's SQL utilities.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    // insert op\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        logx.Errorf(\"insert User Position Model Model err, err=%v\", err)\n        return -1, err\n    }\n    id, err := res.LastInsertId()\n    if err != nil {\n        logx.Errorf(\"insert User Model to Id  parse id err,err=%v\", err)\n        return -1, err\n    }\n    return id, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Configuration Struct - Go\nDESCRIPTION: Defines the structure for Prometheus configuration, establishing parameters for host, port, and reporting path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tHost string `json:\",optional\"` // prometheus 监听host\n\tPort int    `json:\",default=9101\"` // prometheus 监听端口\n\tPath string `json:\",default=/metrics\"` // 上报地址\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Response Package Implementation\nDESCRIPTION: Go code implementing the standardized response handling with Body struct and Response function.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage response\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/zeromicro/go-zero/rest/httpx\"\n)\n\ntype Body struct {\n\tCode int         `json:\"code\"`\n\tMsg  string      `json:\"msg\"`\n\tData interface{} `json:\"data,omitempty\"`\n}\n\nfunc Response(w http.ResponseWriter, resp interface{}, err error) {\n\tvar body Body\n\tif err != nil {\n\t\tbody.Code = -1\n\t\tbody.Msg = err.Error()\n\t} else {\n\t\tbody.Msg = \"OK\"\n\t\tbody.Data = resp\n\t}\n\thttpx.OkJson(w, body)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Service Syntax Block Grammar in ANTLR\nDESCRIPTION: ANTLR grammar rules for defining the structure of service syntax blocks, including server attributes, service names, routes, and handlers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_5\n\nLANGUAGE: antlrv4\nCODE:\n```\nserviceSpec:    atServer? serviceApi;\natServer:       '@server' lp='(' kvLit+ rp=')';\nserviceApi:     {match(p,\"service\")}serviceToken=ID serviceName lbrace='{' serviceRoute* rbrace='}';\nserviceRoute:   atDoc? (atServer|atHandler) route;\natDoc:          '@doc' lp='('? ((kvLit+)|STRING) rp=')'?;\natHandler:      '@handler' ID;\nroute:          {checkHttpMethod(p)}httpMethod=ID path request=body? returnToken=ID? response=replybody?;\nbody:           lp='(' (ID)? rp=')';\nreplybody:      lp='(' dataType? rp=')';\n// kv\nkvLit:          key=ID {checkKeyValue(p)}value=LINE_VALUE;\n\nserviceName:    (ID '-'?)+;\npath:           (('/' (ID ('-' ID)*))|('/:' (ID ('-' ID)?)))+;\n```\n\n----------------------------------------\n\nTITLE: Middleware Configuration Example\nDESCRIPTION: Example showing how to configure middleware in the API definition\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-api.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n@server(\n    middleware: AuthUser\n)\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication - Authorized (Bash)\nDESCRIPTION: Curl command to test the user info endpoint with a valid JWT token in the authorization header.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X GET \\\n  http://127.0.0.1:8888/user/info \\\n  -H 'authorization: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2MDM2MzU0OTMsImlhdCI6MTYwMzU0OTA5M30.fGNe-sAEL6NuWDPWpfVi840qsamPA3fC9h4iO3rF9v0'\n```\n\n----------------------------------------\n\nTITLE: Generated Dockerfile Example\nDESCRIPTION: Complete Dockerfile generated by goctl docker command for a Go service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-other.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nFROM golang:alpine AS builder\nLABEL stage=gobuilder\nENV CGO_ENABLED 0\nENV GOOS linux\nENV GOPROXY https://goproxy.cn,direct\nWORKDIR /build/zero\nADD go.mod .\nADD go.sum .\nRUN go mod download\nCOPY . .\nCOPY service/hello/etc /app/etc\nRUN go build -ldflags=\"-s -w\" -o /app/hello service/hello/hello.go\nFROM alpine\nRUN apk update --no-cache\nRUN apk add --no-cache ca-certificates\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\nWORKDIR /app\nCOPY --from=builder /app/hello /app/hello\nCOPY --from=builder /app/etc /app/etc\nCMD [\"./hello\", \"-f\", \"etc/hello-api.yaml\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Stream Processing Example in Go\nDESCRIPTION: Demonstrates basic stream processing using go-zero fx library with input and output streams. Shows how to generate sequential numbers and filter even numbers using stream operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/fx\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\n\tgo inputStream(ch)\n\tgo outputStream(ch)\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGTERM, syscall.SIGINT)\n\t<-c\n}\n\nfunc inputStream(ch chan int) {\n\tcount := 0\n\tfor {\n\t\tch <- count\n\t\ttime.Sleep(time.Millisecond * 500)\n\t\tcount++\n\t}\n}\n\nfunc outputStream(ch chan int) {\n\tfx.From(func(source chan<- interface{}) {\n\t\tfor c := range ch {\n\t\t\tsource <- c\n\t\t}\n\t}).Walk(func(item interface{}, pipe chan<- interface{}) {\n\t\tcount := item.(int)\n\t\tpipe <- count\n\t}).Filter(func(item interface{}) bool {\n\t\titemInt := item.(int)\n\t\tif itemInt%2 == 0 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}).ForEach(func(item interface{}) {\n\t\tfmt.Println(item)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Bloom Filter\nDESCRIPTION: Implements the method to add elements to the Bloom filter by computing hash locations and setting corresponding bits.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/bloom.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Add(data []byte) error {\n\tlocations := f.getLocations(data)\n\terr := f.bitSet.set(locations)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Basic Logging in Go-Zero\nDESCRIPTION: Demonstrates basic logging setup and usage including info and error level logging with configuration loading and cleanup.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/logx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar c logx.LogConf\n// Initialize the configuration from the yaml file\nconf.MustLoad(\"config.yaml\", &c)\n\n// logx is initialized according to the configuration\nlogx.MustSetup(c)\n\nlogx.Info(\"This is info!\")\nlogx.Infof(\"This is %s!\", \"info\")\n\nlogx.Error(\"This is error!\")\nlogx.Errorf(\"this is %s!\", \"error\")\n\nlogx.Close()\n```\n\n----------------------------------------\n\nTITLE: Parsing Path Variables into Interface in Go\nDESCRIPTION: Function to parse path variables from request context into an interface. Extracts variables from context and unmarshals them into the provided interface using a path unmarshaler.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/params.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc ParsePath(r *http.Request, v interface{}) error {\n   vars := context.Vars(r)\n   m := make(map[string]interface{}, len(vars))\n   for k, v := range vars {\n      m[k] = v\n   }\n\n   return pathUnmarshaler.Unmarshal(m, v)\n}\n```\n\n----------------------------------------\n\nTITLE: User Model Definition with DB Struct Tags\nDESCRIPTION: Defines a User struct with MySQL database field mappings using db tags for automatic field mapping\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype User struct {\n    Avatar string `db:\"avatar\"`\n    UserName string `db:\"user_name\"`\n    Sex int `db:\"sex\"`\n    MobilePhone string `db:\"mobile_phone\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Service with JWT and Middleware in Zero-Doc\nDESCRIPTION: Example of defining an API service with JWT authentication, middleware, and multiple routes using Zero-Doc syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_6\n\nLANGUAGE: api\nCODE:\n```\n@server(\n  jwt: Auth\n  group: foo\n  middleware: AuthMiddleware\n  prefix: /api\n)\nservice foo-api{\n  @doc \"foo\"\n  @handler foo\n  post /foo/:id (Foo) returns (Bar)\n}\n\nservice foo-api{\n  @handler ping\n  get /ping\n  \n  @doc \"foo\"\n  @handler bar\n  post /bar/:id (Foo)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Service Context\nDESCRIPTION: Sets up the service context for the order service with RPC client initialization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"go-zero-demo/mall/order/api/internal/config\"\n    \"go-zero-demo/mall/user/rpc/user\"\n\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype ServiceContext struct {\n    Config  config.Config\n    UserRpc user.User\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        UserRpc: user.NewUser(zrpc.MustNewClient(c.UserRpc)),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Model Structure\nDESCRIPTION: Demonstrates how to define a User model structure with database field mappings using struct tags.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/mysql.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar userBuilderQueryRows = strings.Join(builder.FieldNames(&User{}), \",\")\n\ntype User struct {\n    Avatar string `db:\"avatar\"`\n    UserName string `db:\"user_name\"`\n    Sex int `db:\"sex\"`\n    MobilePhone string `db:\"mobile_phone\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT Authentication for User Info Route (Go)\nDESCRIPTION: Defines a separate service group with JWT authentication enabled for the user info route in the user.api file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n@server(\n\tjwt: Auth\n)\nservice user-api{\n\t@handler userInfo\n\tget /user/info () returns (UserReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Route Registration Methods in Go-Zero REST Server\nDESCRIPTION: Shows the two methods available for adding routes to a Go-Zero REST server. AddRoutes handles multiple routes at once, while AddRoute adds a single route. Both methods accept optional RouteOption parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// 批量添加\nfunc (e *Server) AddRoutes(rs []Route, opts ...RouteOption)\n\n// 单条添加\nfunc (e *Server) AddRoute(r Route, opts ...RouteOption)\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Context for API with RPC Clients in Go\nDESCRIPTION: Creates a new ServiceContext for the API service, initializing RPC clients, middleware, and cache connections.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"context\"\n    \"datacenter/common/rpc/commonclient\"\n    \"datacenter/internal/config\"\n    \"datacenter/internal/middleware\"\n    \"datacenter/shared\"\n    \"datacenter/user/rpc/userclient\"\n    \"datacenter/votes/rpc/votesclient\"\n    \"fmt\"\n    \"net/http\"\n    \"time\"\n\n    \"github.com/zeromicro/go-zero/core/logx\"\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/core/stores/redis\"\n    \"github.com/zeromicro/go-zero/core/syncx\"\n    \"github.com/zeromicro/go-zero/rest\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n    \"google.golang.org/grpc\"\n)\n\ntype ServiceContext struct {\n    Config           config.Config\n    GreetMiddleware1 rest.Middleware\n    GreetMiddleware2 rest.Middleware\n    Usercheck        rest.Middleware\n    UserRpc          userclient.User //用户\n    CommonRpc        commonclient.Common\n    VotesRpc         votesclient.Votes\n    Cache            cache.Cache\n    RedisConn        *redis.Redis\n}\n\nfunc timeInterceptor(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n    stime := time.Now()\n    err := invoker(ctx, method, req, reply, cc, opts...)\n    if err != nil {\n        return err\n    }\n\n    fmt.Printf(\"调用 %s 方法 耗时: %v\\n\", method, time.Now().Sub(stime))\n    return nil\n}\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\n    ur := userclient.NewUser(zrpc.MustNewClient(c.UserRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    cr := commonclient.NewCommon(zrpc.MustNewClient(c.CommonRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    vr := votesclient.NewVotes(zrpc.MustNewClient(c.VotesRpc, zrpc.WithUnaryClientInterceptor(timeInterceptor)))\n    //缓存\n    ca := cache.NewCache(c.CacheRedis, syncx.NewSharedCalls(), cache.NewCacheStat(\"dc\"), shared.ErrNotFound)\n    rcon := redis.NewRedis(c.CacheRedis[0].Host, c.CacheRedis[0].Type, c.CacheRedis[0].Pass)\n    return &ServiceContext{\n        Config:           c,\n        GreetMiddleware1: greetMiddleware1,\n        GreetMiddleware2: greetMiddleware2,\n        Usercheck:        middleware.NewUserCheckMiddleware().Handle,\n        UserRpc:          ur,\n        CommonRpc:        cr,\n        VotesRpc:         vr,\n        Cache:            ca,\n        RedisConn:        rcon,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: API Service Definitions in Go-Zero\nDESCRIPTION: Comprehensive API definitions for public services, user authentication, and voting system including types, handlers and middleware configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninfo(\n    title: \"demo\"\n    desc: \"demo\"\n    author: \"jackluo\"\n    email: \"net.webjoy@gmail.com\"\n)\n\n// Get application information\ntype Beid struct {\n    Beid int64 `json:\"beid\"`\n}\ntype Token struct{\n    Token string `json:\"token\"`\n}\ntype WxTicket struct{\n    Ticket string `json:\"ticket\"`\n}\ntype Application struct {\n    Sname string `json:\"Sname\"`\n    Logo string `json:\"logo\"`\n    Isclose int64 `json:\"isclose\"`\n    Fullwebsite string `json:\"fullwebsite\"`\n}\n// ... [Additional type definitions and service configurations]\n```\n\n----------------------------------------\n\nTITLE: RPC Service Configuration Struct\nDESCRIPTION: Define configuration struct for RPC service including database and cache configurations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tzrpc.RpcServerConf\n\tDataSource string\n\tTable      string\n\tCache      cache.CacheConf\n}\n```\n\n----------------------------------------\n\nTITLE: API Definition for URL Shortener Service\nDESCRIPTION: API specification defining request/response types and endpoints for shortening and expanding URLs\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\texpandReq {\n\t\tshorten string `form:\"shorten\"`\n\t}\n\n\texpandResp {\n\t\turl string `json:\"url\"`\n\t}\n)\n\ntype (\n\tshortenReq {\n\t\turl string `form:\"url\"`\n\t}\n\n\tshortenResp {\n\t\tshorten string `json:\"shorten\"`\n\t}\n)\n\nservice shorturl-api {\n\t@handler ShortenHandler\n\tget /shorten(shortenReq) returns(shortenResp)\n\n\t@handler ExpandHandler\n\tget /expand(expandReq) returns(expandResp)\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Creation with From function in go-zero fx\nDESCRIPTION: This code demonstrates how to create a stream using the From function in go-zero's fx package. It takes a GenerateFunc as input, which writes data to a channel. The Range function then converts the channel into a Stream.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// 例子\ns := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}\nfx.From(func(source chan<- interface{}) {\n  for _, v := range s {\n    source <- v\n  }\n})\n\n// 源码\nfunc From(generate GenerateFunc) Stream {\n\tsource := make(chan interface{})\n\n\tthreading.GoSafe(func() {\n\t\tdefer close(source)\n\t\t// 构造流数据写入channel\n\t\tgenerate(source)\n\t})\n\n\treturn Range(source)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Acquiring and Releasing Redis Lock in Go\nDESCRIPTION: This snippet demonstrates how to create, acquire, and release a Redis lock using Go-Zero. It shows the basic usage pattern, including setting an expiration time and handling errors.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-lock.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nredisLockKey := fmt.Sprintf(\"%v%v\", redisTpl, headId)\n// 1. New redislock\nredisLock := redis.NewRedisLock(redisConn, redisLockKey)\n// 2. 可选操作，设置 redislock 过期时间\nredisLock.SetExpire(redisLockExpireSeconds)\nif ok, err := redisLock.Acquire(); !ok || err != nil {\n  return nil, errors.New(\"当前有其他用户正在进行操作，请稍后重试\")\n}\ndefer func() {\n  recover()\n  // 3. 释放锁\n  redisLock.Release()\n}()\n```\n\n----------------------------------------\n\nTITLE: MySQL Multiple Rows Query Operation\nDESCRIPTION: Shows how to query multiple records using QueryRows method with slice-based result mapping\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(sex int) ([]*User, error) {\n    users := make([]*User, 0)\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where sex=?`\n    err := um.conn.QueryRows(&users, querysql, sex)\n    if err != nil {\n        return nil, err\n    }\n    return users, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Key Configuration Struct - Go\nDESCRIPTION: Defines the redis key configuration structure that includes the redis configuration and the optional key used for authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis 主机\n    Type string `json:\",default=node,options=node|cluster\"` // redis类型\n    Pass string `json:\",optional\"` // redis密码\n}\n\nRedisKeyConf struct {\n    RedisConf\n    Key string `json:\",optional\"` // 验证key\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Clients in Go\nDESCRIPTION: Configuration structure for MySQL and RPC clients in the borrow API service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nMysql struct {\n    DataSource string\n}\nLibraryRpc zrpc.RpcClientConf\nUserRpc    zrpc.RpcClientConf\n```\n\n----------------------------------------\n\nTITLE: Custom User Model Interface\nDESCRIPTION: Custom model interface definition that can be extended with additional methods.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-model.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage model\n\nimport (\n\t\"github.com/zeromicro/go-zero/core/stores/cache\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\nvar _ UserModel = (*customUserModel)(nil)\n\ntype (\n\tUserModel interface {\n\t\tuserModel\n\t}\n\n\tcustomUserModel struct {\n\t\t*defaultUserModel\n\t}\n)\n\nfunc NewUserModel(conn sqlx.SqlConn, c cache.CacheConf) UserModel {\n\treturn &customUserModel{\n\t\tdefaultUserModel: newUserModel(conn, c),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Struct in config.go\nDESCRIPTION: This Go snippet defines the configuration structure for the transform service. It includes the zrpc server configuration, the data source string, the table name, and the cache configuration. These configurations are used to connect to the MySQL database and Redis cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n \"type Config struct {\\n  zrpc.RpcServerConf\\n  DataSource string             // 手动代码\\n  Table      string             // 手动代码\\n  Cache      cache.CacheConf    // 手动代码\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Load Service Addresses from Etcd\nDESCRIPTION: Method for retrieving service addresses from etcd with error handling and retry mechanism\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *cluster) load(cli EtcdClient, key string) {\n\tvar resp *clientv3.GetResponse\n\tfor {\n\t\tvar err error\n\t\tctx, cancel := context.WithTimeout(c.context(cli), RequestTimeout)\n\t\tresp, err = cli.Get(ctx, makeKeyPrefix(key), clientv3.WithPrefix())\n\t\tcancel()\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\n\t\tlogx.Error(err)\n\t\ttime.Sleep(coolDownInterval)\n\t}\n\n\tvar kvs []KV\n\tc.lock.Lock()\n\tfor _, ev := range resp.Kvs {\n\t\tkvs = append(kvs, KV{\n\t\t\tKey: string(ev.Key),\n\t\t\tVal: string(ev.Value),\n\t\t})\n\t}\n\tc.lock.Unlock()\n\n\tc.handleChanges(key, kvs)\n}\n```\n\n----------------------------------------\n\nTITLE: ServiceContext Implementation with Middleware in go-zero\nDESCRIPTION: Shows the implementation of ServiceContext including the definition and initialization of middleware functions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_8\n\nLANGUAGE: Go\nCODE:\n```\npackage svc\n\nimport (\n\t\"greet/internal/config\"\n\t\"net/http\"\n\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/rest\"\n)\n\ntype ServiceContext struct {\n\tConfig           config.Config\n\tGreetMiddleware1 rest.Middleware\n\tGreetMiddleware2 rest.Middleware\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig:           c,\n\t\tGreetMiddleware1: greetMiddleware1,\n\t\tGreetMiddleware2: greetMiddleware2,\n\t}\n}\n\nfunc greetMiddleware1(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tlogx.Info(\"greetMiddleware1 request ... \")\n\t\tnext(w, r)\n\t\tlogx.Info(\"greetMiddleware1 reponse ... \")\n\t}\n}\n\nfunc greetMiddleware2(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tlogx.Info(\"greetMiddleware2 request ... \")\n\t\tnext(w, r)\n\t\tlogx.Info(\"greetMiddleware2 reponse ... \")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource and Cache in YAML for Go-Zero\nDESCRIPTION: Updates the transform.yaml configuration file to include DataSource, Table, and Cache settings for MySQL and Redis.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDataSource: root:password@tcp(localhost:3306)/gozero\nTable: shorturl\nCache:\n  - Host: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: SharedCalls DoEx Method Implementation in Go\nDESCRIPTION: The implementation of the DoEx method in sharedGroup, which extends the Do method by also indicating whether the result was freshly computed or reused from an existing call.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (g *sharedGroup) DoEx(key string, fn func() (interface{}, error)) (val interface{}, fresh bool, err error) {\n  g.lock.Lock()\n  if c, ok := g.calls[key]; ok {\n    g.lock.Unlock()\n    c.wg.Wait()\n    return c.val, false, c.err\n  }\n\n  c := g.makeCall(key, fn)\n  return c.val, true, c.err\n}\n```\n\n----------------------------------------\n\nTITLE: Stream From Function Example\nDESCRIPTION: Shows how to construct a stream using the From function with a slice of integers as input data source.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ns := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}\nfx.From(func(source chan<- interface{}) {\n  for _, v := range s {\n    source <- v\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Doc and Comment Usage in Zero-Doc API Definition\nDESCRIPTION: Comprehensive example showcasing the usage of documentation and comments for various syntax blocks in a Zero-Doc API definition.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_9\n\nLANGUAGE: api\nCODE:\n```\n// syntaxLit doc\nsyntax = \"v1\" // syntaxLit commnet\n\ninfo(\n  // kvLit doc\n  author: songmeizi // kvLit comment\n)\n\n// typeLit doc\ntype Foo {}\n\ntype(\n  // typeLit doc\n  Bar{}\n  \n  FooBar{\n    // filed doc\n    Name int // filed comment\n  }\n)\n\n@server(\n  /**\n   * kvLit doc\n   * Enabling jwt forensics\n   */\n  jwt: Auth /**kvLit comment*/\n)\nservice foo-api{\n  // atHandler doc\n  @handler foo //atHandler comment\n  \n  /*\n   * route doc\n   * post request\n   * path /foo\n   * Request Body：Foo\n   * Response Body：Foo\n   */\n  post /foo (Foo) returns (Foo) // route comment\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Configuration Struct - Go\nDESCRIPTION: Defines the signature configuration structure used for handling authentication signatures, including strict mode settings and private keys configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nSignatureConf struct {\n    Strict      bool          `json:\",default=false\"` // 是否Strict模式，如果是则PrivateKeys必填\n    Expiry      time.Duration `json:\",default=1h\"` // 有效期，默认1小时\n    PrivateKeys []PrivateKeyConf // 签名密钥相关配置\n}\n```\n\n----------------------------------------\n\nTITLE: Service Configuration Structure in Go\nDESCRIPTION: Service-level configuration including service name, logging settings, environment mode, and monitoring configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceConf struct {\n    Name       string // service name\n    Log        logx.LogConf // log configuration\n    Mode       string            `json:\",default=pro,options=dev|test|pre|pro\"` // service environment, dev-development environment, test-test environment, pre-pre-release environment, pro-formal environment\n    MetricsUrl string            `json:\",optional\"` // index report interface address, this address needs to support post json\n    Prometheus prometheus.Config `json:\",optional\"` // prometheus configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Service Context Integration\nDESCRIPTION: ServiceContext implementation connecting RPC service with database models\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"datacenter/common/model\"\n    \"datacenter/common/rpc/internal/config\"\n\n    \"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\ntype ServiceContext struct {\n    c              config.Config\n    AppConfigModel model.AppConfigModel\n    BaseAppModel   model.BaseAppModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn := sqlx.NewMysql(c.Mysql.DataSource)\n    apm := model.NewAppConfigModel(conn, c.CacheRedis)\n    bam := model.NewBaseAppModel(conn, c.CacheRedis)\n    return &ServiceContext{\n        c:              c,\n        AppConfigModel: apm,\n        BaseAppModel:   bam,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Prometheus Server\nDESCRIPTION: Shell command to start the Prometheus server with a specified configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-monitor.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ prometheus --config.file=prometheus.yml\n```\n\n----------------------------------------\n\nTITLE: Defining Check RPC Service Protocol\nDESCRIPTION: Protocol Buffers definition for the Check RPC service, specifying message structures and service method for checking a book's price.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_14\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage check;\n\noption go_package = \"./check\";\n\nmessage checkReq {\n    string book = 1;\n}\n\nmessage checkResp {\n    bool found = 1;\n    int64 price = 2;\n}\n\nservice checker {\n    rpc check(checkReq) returns(checkResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Server Settings\nDESCRIPTION: Go struct definition for RPC server configuration including MySQL and Redis settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    zrpc.RpcServerConf\n    Mysql struct {\n        DataSource string\n    }\n    CacheRedis cache.CacheConf\n}\n```\n\n----------------------------------------\n\nTITLE: Server Startup Success Output\nDESCRIPTION: Expected shell output when the RPC server starts successfully, showing it's listening on the configured address.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nStarting rpc server at 127.0.0.1:8080...\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from DDL with Cache\nDESCRIPTION: Command to generate MySQL model code from DDL files with cache support. This command accepts source file patterns, target directory, and cache flag options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql -src={patterns} -dir={dir} -cache\n```\n\n----------------------------------------\n\nTITLE: Route Group Middleware Definition in go-zero API\nDESCRIPTION: Demonstrates how to define route group middleware in the go-zero API file using goctl syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\n@server(\n    middleware: GreetMiddleware1, GreetMiddleware2\n)\nservice greet-api {\n  @handler GreetHandler\n  get /from/:name(Request) returns (Response);\n}\n```\n\n----------------------------------------\n\nTITLE: REST Engine Configuration in YAML\nDESCRIPTION: This YAML snippet shows the structure of the configuration file for the REST engine in Go-Zero. It includes various settings such as CPU threshold, logging, metrics, and signature options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rest engine.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nCpuThreshold: 0\nHost: \"\"\nLog:\n  Compress: false\n  KeepDays: 0\n  Level: \"\"\n  Mode: \"\"\n  Path: \"\"\n  ServiceName: \"\"\n  StackCooldownMillis: 0\nMaxBytes: 0\nMaxConns: 0\nMetricsUrl: \"\"\nMode: \"\"\nName: \"\"\nPort: 0\nPrometheus:\n  Host: \"\"\n  Path: \"\"\n  Port: 0\nSignature:\n  Expiry: 0\n  PrivateKeys: null\n  Strict: false\nTimeout: 0\nVerbose: false\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Configuration\nDESCRIPTION: This Go code adds the `Auth` struct containing `AccessSecret` and `AccessExpire` fields to the `Config` struct, allowing the service to read JWT-related configurations from the YAML file. These configurations define the secret key and expiration time used for generating JWT tokens.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\trest.RestConf\n\tMysql struct{\n\t\tDataSource string\n\t}\n\tCacheRedis cache.CacheConf\n\tAuth      struct {\n\t\tAccessSecret string\n\t\tAccessExpire int64\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script for Acquiring Lock\nDESCRIPTION: This snippet contains the Lua script used to handle the logic for acquiring a Redis lock. It checks if the lock is already held and attempts to set it atomically using the provided unique identifier and expiration time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-lock.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlockCommand = `if redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    redis.call(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2])\n    return \"OK\"\nelse\n    return redis.call(\"SET\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])\nend`\n\nfunc (rl *RedisLock) Acquire() (bool, error) {\n\tseconds := atomic.LoadUint32(&rl.seconds)\n  // execute luascript\n\tresp, err := rl.store.Eval(lockCommand, []string{rl.key}, []string{\n\t\trl.id, strconv.Itoa(int(seconds)*millisPerSecond + tolerance)})\n\tif err == red.Nil {\n\t\treturn false, nil\n\t} else if err != nil {\n\t\tlogx.Errorf(\"Error on acquiring lock for %s, %s\", rl.key, err.Error())\n\t\treturn false, err\n\t} else if resp == nil {\n\t\treturn false, nil\n\t}\n\n\treply, ok := resp.(string)\n\tif ok && reply == \"OK\" {\n\t\treturn true, nil\n\t} else {\n\t\tlogx.Errorf(\"Unknown reply when acquiring lock for %s: %v\", rl.key, resp)\n\t\treturn false, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Add Logic\nDESCRIPTION: Implementation of Add endpoint logic to add books to bookstore\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *AddLogic) Add(req types.AddReq) (*types.AddResp, error) {\n    // manual code start\n    resp, err := l.svcCtx.Adder.Add(l.ctx, &adder.AddReq{\n        Book:  req.Book,\n        Price: req.Price,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.AddResp{\n        Ok: resp.Ok,\n    }, nil\n    // manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: Model Code Generation from Mongo - Go\nDESCRIPTION: Generates model code from a MongoDB source, requiring flags for Go Type name, cache options, output directory, and naming styles.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mongo -type MyType -cache false -dir ./mongo_code\n```\n\n----------------------------------------\n\nTITLE: Log file directory structure\nDESCRIPTION: This snippet shows the directory structure for file-based logging. It includes separate log files for access, errors, severe issues, slow calls, and statistics. The logx component automatically creates these files and manages their rotation and deletion based on configured settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n.                \n├── access.log    \n├── error.log     \n├── severe.log    \n├── slow.log      \n└── stat.log\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUser Logic in Go\nDESCRIPTION: Go code implementing the business logic for the GetUser RPC method, returning a mock user response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n    \"context\"\n\n    \"go-zero-demo/mall/user/rpc/internal/svc\"\n    \"go-zero-demo/mall/user/rpc/user\"\n    \n    \"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype GetUserLogic struct {\n    ctx    context.Context\n    svcCtx *svc.ServiceContext\n    logx.Logger\n}\n\nfunc NewGetUserLogic(ctx context.Context, svcCtx *svc.ServiceContext) *GetUserLogic {\n    return &GetUserLogic{\n        ctx:    ctx,\n        svcCtx: svcCtx,\n        Logger: logx.WithContext(ctx),\n    }\n}\n\nfunc (l *GetUserLogic) GetUser(in *user.IdRequest) (*user.UserResponse, error) {\n    return &user.UserResponse{\n        Id:   \"1\",\n        Name: \"test\",\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Add Service Protocol Buffers Definition\nDESCRIPTION: Protocol Buffers definition for the book adding service, defining request/response messages and RPC method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_9\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage add;\n\nmessage addReq {\n    string book = 1;\n    int64 price = 2;\n}\n\nmessage addResp {\n    bool ok = 1;\n}\n\nservice adder {\n    rpc add(addReq) returns(addResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model from Single Database Table (Bash)\nDESCRIPTION: Example command for generating a model from a single database table named 'user' using a database connection and specifying the output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/gozero\" -table=\"user\" -dir ./model\n```\n\n----------------------------------------\n\nTITLE: Defining Signature Configuration in Go\nDESCRIPTION: This snippet shows the SignatureConf struct, which includes settings for signature verification, expiry time, and private key configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nSignatureConf struct {\n    Strict      bool          `json:\",default=false\"` // 是否Strict模式，如果是则PrivateKeys必填\n    Expiry      time.Duration `json:\",default=1h\"` // 有效期，默认1小时\n    PrivateKeys []PrivateKeyConf // 签名密钥相关配置\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Insert Operation\nDESCRIPTION: Shows how to implement an insert operation for the User model, including SQL query construction and error handling.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/mysql.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) Insert(user *User) (int64, error) {\n    const insertsql = `insert into `+um.table+` (`+userBuilderQueryRows+`) values(?, ?, ?)`\n    // insert op\n    res, err := um.conn.Exec(insertsql, user.Avatar, user.UserName, user.Sex, user.MobilePhone)\n    if err != nil {\n        logx.Errorf(\"insert User Position Model Model err, err=%v\", err)\n        return -1, err\n    }\n    id, err := res.LastInsertId()\n    if err != nil {\n        logx.Errorf(\"insert User Model to Id  parse id err,err=%v\", err)\n        return -1, err\n    }\n    return id, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Configuration in Go\nDESCRIPTION: This snippet defines the RedisConf struct, which contains settings for Redis connection, including host, type (node or cluster), and optional password.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis地址\n    Type string `json:\",default=node,options=node|cluster\"` // redis类型\n    Pass string `json:\",optional\"` // redis密码\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Standard JSON Response Format\nDESCRIPTION: JSON schema defining the standardized response structure with code, message and data fields.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"msg\": \"OK\",\n  \"data\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: 使用fx的Distinct操作去重流数据\nDESCRIPTION: 展示了如何使用fx的Distinct操作对流中的数据进行去重处理。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(1, 2, 2, 2, 3, 3, 4, 5, 6).Distinct(func(item interface{}) interface{} {\n  return item\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Services from Proto - Go\nDESCRIPTION: Generates RPC services based on the specified proto file, requiring flags for the source proto file, the import lookup directory, and code storage location.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ngoctl rpc proto -src ./service.proto -proto_path ./protos -dir ./rpc_code\n```\n\n----------------------------------------\n\nTITLE: Daily Task Struct Definition for Data Sync\nDESCRIPTION: Structure definition for handling daily data synchronization from MySQL to ClickHouse using executors.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype DailyTask struct {\n\tckGroup        *clickhousex.Cluster\n\tinsertExecutor *executors.BulkExecutor\n\tmysqlConn      sqlx.SqlConn\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Config Structure in Go\nDESCRIPTION: Configuration structure definition that includes RPC server settings along with database and cache configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n  zrpc.RpcServerConf\n  DataSource string             // 手动代码\n  Table      string             // 手动代码\n  Cache      cache.CacheConf    // 手动代码\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Logic in API Gateway\nDESCRIPTION: Go code that implements the Check logic handler in the API Gateway, which forwards the request to the Check RPC service and translates the response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *CheckLogic) Check(req *types.CheckReq) (resp *types.CheckResp,err error) {\n\t// 手动代码开始\n\tr, err := l.svcCtx.Checker.Check(l.ctx, &checker.CheckReq{\n\t\tBook: req.Book,\n\t})\n\tif err != nil {\n\t\tlogx.Error(err)\n\t\treturn &types.CheckResp{}, err\n\t}\n\n\treturn &types.CheckResp{\n\t\tFound: r.Found,\n\t\tPrice: r.Price,\n\t}, nil\n\t// 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Levels in Go-Zero Logx\nDESCRIPTION: Defines constants for different log levels in logx. These can be used to set the logging level dynamically or through configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\t// 打印所有级别的日志\n\tInfoLevel = iota\n\t// 打印 errors, slows, stacks 日志\n\tErrorLevel\n\t// 仅打印 severe 级别日志\n\tSevereLevel\n)\n```\n\n----------------------------------------\n\nTITLE: Creating RPC Project Structure\nDESCRIPTION: Shell commands to create the directory structure for a user RPC service in Go-Zero\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/mall \n$ mkdir -p user/rpc && cd user/rpc\n```\n\n----------------------------------------\n\nTITLE: Defining Service Configuration in Go\nDESCRIPTION: This snippet defines the ServiceConf struct, which includes settings for service name, logging, environment mode, metrics reporting, and Prometheus configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceConf struct {\n    Name       string // 服务名称\n    Log        logx.LogConf // 日志配置\n    Mode       string            `json:\",default=pro,options=dev|test|pre|pro\"` // 服务环境，dev-开发环境，test-测试环境，pre-预发环境，pro-正式环境\n    MetricsUrl string            `json:\",optional\"` // 指标上报接口地址，该地址需要支持post json即可\n    Prometheus prometheus.Config `json:\",optional\"` // prometheus配置\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Error Handling in Go-Zero Main Function\nDESCRIPTION: Sets up custom error handling in the main function of the user API to return standardized JSON responses for errors.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    flag.Parse()\n\n    var c config.Config\n    conf.MustLoad(*configFile, &c)\n\n    ctx := svc.NewServiceContext(c)\n    server := rest.MustNewServer(c.RestConf)\n    defer server.Stop()\n\n    handler.RegisterHandlers(server, ctx)\n\n    // 自定义错误\n    httpx.SetErrorHandler(func(err error) (int, interface{}) {\n        switch e := err.(type) {\n        case *errorx.CodeError:\n            return http.StatusOK, e.Data()\n        default:\n            return http.StatusInternalServerError, nil\n        }\n    })\n\n    fmt.Printf(\"Starting server at %s:%d...\\n\", c.Host, c.Port)\n    server.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filebeat for Log Collection in YAML\nDESCRIPTION: YAML configuration for Filebeat to collect logs from Go-Zero services, parse JSON, and output to Kafka. It includes input settings, Kafka output configuration, and JSON decoding processors.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/log.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilebeat.inputs:\n- type: log\n  enabled: true\n  # enable json parsing\n  json.keys_under_root: true\n  json.add_error_key: true\n  # Log file paths\n  paths:\n    - /var/log/order/*.log\n\nsetup.template.settings:\n  index.number_of_shards: 1\n\n# Define kafka topic field\nfields:\n  log_topic: log-collection\n\n# Output to kafka\noutput.kafka:\n  hosts: [\"127.0.0.1:9092\"]\n  topic: '%{[fields.log_topic]}'\n  partition.round_robin:\n    reachable_only: false\n  required_acks: 1\n  keep_alive: 10s\n\n# ================================= Processors =================================\nprocessors:\n  - decode_json_fields:\n      fields: ['@timestamp','level','content','trace','span','duration']\n      target: \"\"\n```\n\n----------------------------------------\n\nTITLE: Setting GRPC Message Size Limits\nDESCRIPTION: Example demonstrating how to set message size limits for GRPC calls on both client and server sides. Shows setting 8MB limit for UserRpc.List method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 需要 grpc 方法里面添加配置项：grpc.MaxCallRecvMsgSize(bytes int)、grpc.MaxCallSendMsgSize(bytes int)\n// 示例如下：设置 UserRpc.List 列表消息大小限制为 8MB\n// l.svcCtx.UserRpc.List(l.ctx, &listReq, grpc.MaxCallRecvMsgSize(1024*1024*8), grpc.MaxCallSendMsgSize(1024*1024*8))\n```\n\n----------------------------------------\n\nTITLE: Custom Resolver Build Method for Service Discovery\nDESCRIPTION: Implementation of the Build method in zRPC's discovBuilder to discover and update service addresses using etcd\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (d *discovBuilder) Build(target resolver.Target, cc resolver.ClientConn, opts resolver.BuildOptions) (\n\tresolver.Resolver, error) {\n\thosts := strings.FieldsFunc(target.Authority, func(r rune) bool {\n\t\treturn r == EndpointSepChar\n\t})\n\tsub, err := discov.NewSubscriber(hosts, target.Endpoint)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tupdate := func() {\n\t\tvar addrs []resolver.Address\n\t\tfor _, val := range subset(sub.Values(), subsetSize) {\n\t\t\taddrs = append(addrs, resolver.Address{\n\t\t\t\tAddr: val,\n\t\t\t})\n\t\t}\n\t\tcc.UpdateState(resolver.State{\n\t\t\tAddresses: addrs,\n\t\t})\n\t}\n\tsub.AddListener(update)\n\tupdate()\n\treturn &nopResolver{cc: cc}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceContext for Model Initialization in Go\nDESCRIPTION: Updates the ServiceContext struct and NewServiceContext function to initialize the ShorturlModel with MySQL and Redis cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n  c     config.Config\n  Model model.ShorturlModel   // 手动代码\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n  return &ServiceContext{\n    c:             c,\n    Model: model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache), // 手动代码\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Server in Go\nDESCRIPTION: Go code defining the configuration structure for the RPC server using go-zero's zrpc package.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    zrpc.RpcServerConf\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Resolver Interface\nDESCRIPTION: Core resolver interface definition requiring ResolveNow and Close methods implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Resolver interface {\n\tResolveNow(ResolveNowOptions)\n\tClose()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Go-Zero Project Structure\nDESCRIPTION: This code snippet shows the typical directory structure of a Go-Zero project, including API and RPC services.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/online-exchange.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  bookstore\n  ├── api\n  │   ├── etc\n  │   └── internal\n  │       ├── config\n  │       ├── handler\n  │       ├── logic\n  │       ├── svc\n  │       └── types\n  └── rpc\n  ├── add\n  │   ├── adder\n  │   ├── etc\n  │   ├── internal\n  │   │   ├── config\n  │   │   ├── logic\n  │   │   ├── server\n  │   │   └── svc\n  │   └── pb\n  ├── check\n  │   ├── checker\n  │   ├── etc\n  │   ├── internal\n  │   │   ├── config\n  │   │   ├── logic\n  │   │   ├── server\n  │   │   └── svc\n  │   └── pb\n  └── model\n```\n\n----------------------------------------\n\nTITLE: Checking Cooldown Period Status\nDESCRIPTION: This method checks whether the system is still in a cooldown period, which prevents immediate overload attempts after a drop event. The cooldown duration determines the wait time before new requests are accepted again.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (as *adaptiveShedder) stillHot() bool {\n    // 最近没有丢弃请求\n    // 说明服务正常\n    if !as.droppedRecently.True() {\n        return false\n    }\n    // 不在冷却期\n    dropTime := as.dropTime.Load()\n    if dropTime == 0 {\n        return false\n    }\n    // 冷却时间默认为1s\n    hot := timex.Since(dropTime) < coolOffDuration\n    // 不在冷却期，正常处理请求中\n    if !hot {\n        // 重置drop记录\n        as.droppedRecently.Set(false)\n    }\n\n    return hot\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Single Row Query Operation\nDESCRIPTION: Demonstrates querying a single record with automatic struct mapping using QueryRow method\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/mysql.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        return nil, err\n    }\n    return &user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Option in Go-Zero REST Server\nDESCRIPTION: Defines a RouteOption for adding JWT authentication to routes. This function takes a secret string parameter used for JWT token verification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc WithJwt(secret string) RouteOption\n```\n\n----------------------------------------\n\nTITLE: Basic Fx Stream Processing Example in Go\nDESCRIPTION: A simple example demonstrating the use of Fx for stream processing, with input generation, processing, and filtering of even numbers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/fx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/fx\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\n\tgo inputStream(ch)\n\tgo outputStream(ch)\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGTERM, syscall.SIGINT)\n\t<-c\n}\n\nfunc inputStream(ch chan int) {\n\tcount := 0\n\tfor {\n\t\tch <- count\n\t\ttime.Sleep(time.Millisecond * 500)\n\t\tcount++\n\t}\n}\n\nfunc outputStream(ch chan int) {\n\tfx.From(func(source chan<- interface{}) {\n\t\tfor c := range ch {\n\t\t\tsource <- c\n\t\t}\n\t}).Walk(func(item interface{}, pipe chan<- interface{}) {\n\t\tcount := item.(int)\n\t\tpipe <- count\n\t}).Filter(func(item interface{}) bool {\n\t\titemInt := item.(int)\n\t\tif itemInt%2 == 0 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}).ForEach(func(item interface{}) {\n\t\tfmt.Println(item)\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel in go-zero Cache\nDESCRIPTION: This snippet shows how to initialize a TimingWheel in go-zero's cache implementation. It creates a new timing wheel with a specified interval, number of slots, and an execution function that removes expired keys from the cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntimingWheel, err := NewTimingWheel(time.Second, slots, func(k, v interface{}) {\n  key, ok := k.(string)\n  if !ok {\n    return\n  }\n  cache.Del(key)\n})\nif err != nil {\n  return nil, err\n}\n\ncache.timingWheel = timingWheel\n```\n\n----------------------------------------\n\nTITLE: Implementing Producer Logic in Go\nDESCRIPTION: Go struct and methods for implementing the producer logic in the distributed task queue.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n\t\"strconv\"\n\t\"time\"\n)\n\ntype Producer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewProducerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Producer {\n\treturn &Producer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Producer)Start()  {\n\n\tlogx.Infof(\"start  Producer \\n\")\n\tthreading.GoSafe(func() {\n\t\tproducer := dq.NewProducer([]dq.Beanstalk{\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7771\",\n\t\t\t\tTube:     \"tube1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7772\",\n\t\t\t\tTube:     \"tube2\",\n\t\t\t},\n\t\t})\n\t\tfor i := 1000; i < 1005; i++ {\n\t\t\t_, err := producer.Delay([]byte(strconv.Itoa(i)), time.Second * 1)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (l *Producer)Stop()  {\n\tlogx.Infof(\"stop Producer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Go Code for go_package Option Handling\nDESCRIPTION: This Go code snippet illustrates how to handle the go_package option in proto files. It determines the appropriate Go package name based on the proto option and provides necessary fallbacks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif option.Name == \"go_package\" {\n    ret.GoPackage = option.Constant.Source\n}\n...\nif len(ret.GoPackage) == 0 {\n    ret.GoPackage = ret.Package.Name\n}\nret.PbPackage = 'GoSanitized(filepath.Base(ret.GoPackage))'\n...\n```\n\n----------------------------------------\n\nTITLE: Initializing BulkExecutor in Go\nDESCRIPTION: This code snippet demonstrates how to initialize a BulkExecutor using the NewBulkExecutor function. It showcases the use of functional options pattern and the combination of executor and container design.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBulkExecutor(execute Execute, opts ...BulkOption) *BulkExecutor {\n\toptions := newBulkOptions()\n\tfor _, opt := range opts {\n\t\topt(&options)\n\t}\n\tcontainer := &bulkContainer{\n\t\texecute:  execute,\n\t\tmaxTasks: options.cachedTasks,\n\t}\n\texecutor := &BulkExecutor{\n\t\texecutor:  NewPeriodicalExecutor(options.flushInterval, container),\n\t\tcontainer: container,\n\t}\n\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring go-zero RPC Service with YAML\nDESCRIPTION: YAML configuration for a go-zero RPC service named 'hello.rpc', listening on localhost:8080 and registering with etcd on port 2379.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName: hello.rpc\nListenOn: 127.0.0.1:8080\nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: hello.rpc\n\n```\n\n----------------------------------------\n\nTITLE: Global Middleware Function in go-zero\nDESCRIPTION: Defines a global middleware function that logs before and after request handling.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc middlewareDemoFunc(next http.HandlerFunc) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tlogx.Info(\"request ... \")\n\t\tnext(w, r)\n\t\tlogx.Info(\"reponse ... \")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API File - Go\nDESCRIPTION: This command generates an API file using the goctl tool. It requires specifying the output file using the '-o' flag, followed by the desired API filename.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api -o user.api\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-stage Dockerfile\nDESCRIPTION: Complete Dockerfile with multi-stage build for optimized container size and security\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_4\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:alpine AS builder\n\nLABEL stage=gobuilder\n\nENV CGO_ENABLED 0\nENV GOOS linux\nENV GOPROXY https://goproxy.cn,direct\n\nWORKDIR /build/zero\n\nADD go.mod .\nADD go.sum .\nRUN go mod download\nCOPY . .\nCOPY service/hello/etc /app/etc\nRUN go build -ldflags=\"-s -w\" -o /app/hello service/hello/hello.go\n\n\nFROM alpine\n\nRUN apk update --no-cache\nRUN apk add --no-cache ca-certificates\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\n\nWORKDIR /app\nCOPY --from=builder /app/hello /app/hello\nCOPY --from=builder /app/etc /app/etc\n\nCMD [\"./hello\", \"-f\", \"etc/hello-api.yaml\"]\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Code with Goctl\nDESCRIPTION: Shell commands to generate Go code from proto file using goctl RPC generator\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/mall/user/rpc\n$ goctl rpc template -o user.proto\n$ goctl rpc proto -src user.proto -dir .\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple User Records from MySQL using go-zero\nDESCRIPTION: Illustrates how to query multiple user records using go-zero's sqlx package. It shows how to handle multiple results and populate a slice of structs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/store mysql.md#2025-04-22_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (um *UserModel) FindOne(sex int) ([]*User, error) {\n    users := make([]*User, 0)\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where sex=?`\n    err := um.conn.QueryRows(&users, querysql, sex)\n    if err != nil {\n        logx.Errorf(\"usersSex.findOne error, sex=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return users, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing backgroundFlush in PeriodicalExecutor\nDESCRIPTION: Implementation of the backgroundFlush method in PeriodicalExecutor, which runs a goroutine that periodically flushes tasks from the container. It handles both command-triggered and timer-triggered task executions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) backgroundFlush() {\n    // 封装 go func(){}\n\tthreading.GoSafe(func() {\n\t\tticker := pe.newTicker(pe.interval)\n\t\tdefer ticker.Stop()\n\n\t\tvar commanded bool\n\t\tlast := timex.Now()\n\t\tfor {\n\t\t\tselect {\n            // 从channel拿到 []tasks\n\t\t\tcase vals := <-pe.commander:\n\t\t\t\tcommanded = true\n                // 实质：wg.Add(1)\n\t\t\t\tpe.enterExecution()\n                // 放开 Add() 的阻塞，而且此时暂存区也为空。才开始新的 task 加入\n\t\t\t\tpe.confirmChan <- lang.Placeholder\n                // 真正的执行 task 逻辑\n\t\t\t\tpe.executeTasks(vals)\n\t\t\t\tlast = timex.Now()\n\t\t\tcase <-ticker.Chan():\n\t\t\t\tif commanded {\n                    // 由于select选择的随机性，如果同时满足两个条件同时执行完上面的，此处置反，并跳过本段执行\n                    // https://draveness.me/golang/docs/part2-foundation/ch05-keyword/golang-select/\n\t\t\t\t\tcommanded = false\n\t\t\t\t} else if pe.Flush() {\n                    // 刷新完成，定时器清零。暂存区空了，开始下一次定时刷新\n\t\t\t\t\tlast = timex.Now()\n\t\t\t\t} else if timex.Since(last) > pe.interval*idleRound {\n                    // 既没到maxTask，Flush() err，并且 last->now 时间过长，会再次触发 Flush()\n                    // 只有这置反，才会开启一个新的 backgroundFlush() 后台协程\n                    pe.guarded = false\n\t\t\t\t\t// 再次刷新，防止漏掉\n\t\t\t\t\tpe.Flush()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Server Lifecycle Methods in Go-Zero REST Server\nDESCRIPTION: Shows the methods for starting and stopping a Go-Zero REST server. The Start method begins serving HTTP requests, while the Stop method gracefully shuts down the server.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc (e *Server) Start() \n\nfunc (e *Server) Stop()\n```\n\n----------------------------------------\n\nTITLE: Stream Filter Function Example\nDESCRIPTION: Demonstrates filtering stream elements using a predicate function that keeps only even numbers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ns := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}\nfx.From(func(source chan<- interface{}) {\n  for _, v := range s {\n    source <- v\n  }\n}).Filter(func(item interface{}) bool {\n  if item.(int)%2 == 0 {\n    return true\n  }\n  return false\n})\n```\n\n----------------------------------------\n\nTITLE: P2C Load Balancer Choose Implementation\nDESCRIPTION: Node selection logic for P2C load balancer comparing load between two nodes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *p2cPicker) choose(c1, c2 *subConn) *subConn {\n\tstart := int64(timex.Now())\n\tif c2 == nil {\n\t\tatomic.StoreInt64(&c1.pick, start)\n\t\treturn c1\n\t}\n\n\tif c1.load() > c2.load() {\n\t\tc1, c2 = c2, c1\n\t}\n\n\tpick := atomic.LoadInt64(&c2.pick)\n\tif start-pick > forcePick && atomic.CompareAndSwapInt64(&c2.pick, pick, start) {\n\t\treturn c2\n\t} else {\n\t\tatomic.StoreInt64(&c1.pick, start)\n\t\treturn c1\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource and Cache in YAML for go-zero Transform Service\nDESCRIPTION: Adds DataSource, Table, and Cache configurations to the transform.yaml file for the go-zero RPC service. Supports multiple Redis instances for caching.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nDataSource: root:password@tcp(localhost:3306)/gozero # 用户名和密码为你本地 mysql-server 密码，并非完全一致\nTable: shorturl\nCache:\n  - Host: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Context in Go-Zero\nDESCRIPTION: Creates a service context structure and initialization function for managing database connections and models.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/business-coding.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config    config.Config\n    UserModel model.UserModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn:=sqlx.NewMysql(c.Mysql.DataSource)\n    return &ServiceContext{\n        Config: c,\n        UserModel: model.NewUserModel(conn,c.CacheRedis),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Unauthorized Callback in Go-Zero REST Server\nDESCRIPTION: Defines a RunOption for handling unauthorized access attempts. This option specifies the callback function to be executed when authentication fails.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nWithUnauthorizedCallback(handler.UnauthorizedCallback) RunOption\n```\n\n----------------------------------------\n\nTITLE: Stream Group Function Example\nDESCRIPTION: Shows how to group stream elements based on their first character, specifically grouping strings starting with 'g' or 'p'.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nss := []string{\"golang\", \"google\", \"php\", \"python\", \"java\", \"c++\"}\nfx.From(func(source chan<- interface{}) {\n\tfor _, s := range ss {\n\t\tsource <- s\n\t}\n}).Group(func(item interface{}) interface{} {\n\tif strings.HasPrefix(item.(string), \"g\") {\n\t\treturn \"g\"\n\t} else if strings.HasPrefix(item.(string), \"p\") {\n\t\treturn \"p\"\n\t}\n\treturn \"\"\n}).ForEach(func(item interface{}) {\n\tfmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus with Docker\nDESCRIPTION: This code snippet provides the Docker command to run a Prometheus instance, mounting the configuration file and exposing the necessary port.  It enables local access to the Prometheus UI for monitoring metrics.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/metric.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"docker run \\\\\n    -p 9090:9090 \\\\\n    -v dockeryml/docker-prometheus:/etc/prometheus \\\\\n    prom/prometheus\"\n```\n\n----------------------------------------\n\nTITLE: Tail Implementation Using Ring Buffer in Go\nDESCRIPTION: Demonstrates the implementation of the Tail function using a ring buffer data structure to get the last n elements from a stream.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/fx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) Tail(n int64) Stream {\n\tsource := make(chan interface{})\n\n\tgo func() {\n\t\tring := collection.NewRing(int(n))\n\t\tfor item := range p.source {\n\t\t\tring.Add(item)\n\t\t}\n\t\tfor _, item := range ring.Take() {\n\t\t\tsource <- item\n\t\t}\n\t\tclose(source)\n\t}()\n\n\treturn Range(source)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Common API Endpoints in Go-Zero\nDESCRIPTION: API definition for common endpoints in the datacenter service, including application info, SNS info, and utility endpoints like qiniu token generation. Uses Go-Zero's API DSL syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ninfo(\n\ttitle: \"中台系统\"// TODO: add title\n\tdesc: \"中台系统\"// TODO: add description\n\tauthor: \"jackluo\"\n\temail: \"net.webjoy@gmail.com\"\n)\n\nimport \"user.api\"\nimport \"votes.api\"\nimport \"search.api\"\nimport \"questions.api\"\n\n//获取 应用信息\ntype Beid {\n\tBeid int64 `json:\"beid\"`\n}\ntype Token {\n\tToken string `json:\"token\"`\n}\ntype WxTicket {\n\tTicket string `json:\"ticket\"`\n}\ntype Application {\n\tSname       string `json:\"Sname\"`       //名称\n\tLogo        string `json:\"logo\"`        // login\n\tIsclose     int64  `json:\"isclose\"`     //是否关闭\n\tFullwebsite string `json:\"fullwebsite\"` // 全站名称\n}\ntype SnsReq {\n\tBeid\n\tPtyid   int64  `json:\"ptyid\"`    //对应平台\n\tBackUrl string `json:\"back_url\"` //登陆返回的地址\n}\ntype SnsResp {\n\tBeid\n\tPtyid    int64  `json:\"ptyid\"`     //对应平台\n\tAppid    string `json:\"appid\"`     //sns 平台的id\n\tTitle    string `json:\"title\"`     //名称\n\tLoginUrl string `json:\"login_url\"` //微信登陆的地址\n}\n\ntype WxShareResp {\n\tAppid     string `json:\"appid\"`\n\tTimestamp int64  `json:\"timestamp\"`\n\tNoncestr  string `json:\"noncestr\"`\n\tSignature string `json:\"signature\"`\n}\n\n@server(\n\tgroup: common\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"获取站点的信息\"\n\t)\n\t@handler appInfo\n\tget /common/appinfo (Beid) returns (Application)\n\t@doc(\n\t\tsummary: \"获取站点的社交属性信息\"\n\t)\n\t@handler snsInfo\n\tpost /common/snsinfo (SnsReq) returns (SnsResp)\n\t\n\t//获取分享的\n\t@handler wxTicket\n\tpost /common/wx/ticket (SnsReq) returns (WxShareResp)\n\t\n}\n\n//上传需要登陆\n@server(\n\tjwt: Auth\n\tgroup: common\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"七牛上传凭证\"\n\t)\n\t@handler qiuniuToken\n\tpost /common/qiuniu/token (Beid) returns (Token)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Span Structure in Go\nDESCRIPTION: Implements the core Span structure that represents a single trace unit, containing context, service details, timing and relationship information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/trace.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Span struct {\n    ctx           spanContext       // 传递的上下文\n    serviceName   string            // 服务名 \n    operationName string            // 操作\n    startTime     time.Time         // 开始时间戳\n    flag          string            // 标记开启trace是 server 还是 client\n    children      int               // 本 span fork出来的 childsnums\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Bloom Filter in go-zero\nDESCRIPTION: Implements the Add method of the Bloom filter, which hashes the input data and sets the corresponding bits in the underlying BitSet.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/bloom.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Add(data []byte) error {\n\tlocations := f.getLocations(data)\n\terr := f.bitSet.set(locations)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Producer Logic\nDESCRIPTION: Producer implementation for sending delayed messages to beanstalkd queues.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n\t\"strconv\"\n\t\"time\"\n)\n\ntype Producer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewProducerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Producer {\n\treturn &Producer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Producer)Start()  {\n\tlogx.Infof(\"start  Producer \\n\")\n\tthreading.GoSafe(func() {\n\t\tproducer := dq.NewProducer([]dq.Beanstalk{\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7771\",\n\t\t\t\tTube:     \"tube1\",\n\t\t\t},\n\t\t\t{\n\t\t\t\tEndpoint: \"localhost:7772\",\n\t\t\t\tTube:     \"tube2\",\n\t\t\t},\n\t\t})\n\t\tfor i := 1000; i < 1005; i++ {\n\t\t\t_, err := producer.Delay([]byte(strconv.Itoa(i)), time.Second * 1)\n\t\t\tif err != nil {\n\t\t\t\tlogx.Error(err)\n\t\t\t}\n\t\t}\n\t})\n}\n\nfunc (l *Producer)Stop()  {\n\tlogx.Infof(\"stop Producer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Cache and Redis Configuration Structures in Go\nDESCRIPTION: Redis cache configuration including cluster settings, node configurations, and connection parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nClusterConf []NodeConf\n\nNodeConf struct {\n    redis.RedisConf\n    Weight int `json:\",default=100\"` // Weights\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis address\n    Type string `json:\",default=node,options=node|cluster\"` // redis type\n    Pass string `json:\",optional\"` // redis password\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Implementation\nDESCRIPTION: Demonstrates the basic structure of a Goctl plugin implementation, including error handling and plugin data parsing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \n    \"github.com/zeromicro/go-zero/tools/goctl/plugin\"\n)\n\nfunc main() {\n    plugin, err := plugin.NewPlugin()\n    if err != nil {\n        panic(err)\n    }\n    if plugin.Api != nil {\n        fmt.Printf(\"api: %+v \\n\", plugin.Api)\n    }\n    fmt.Printf(\"dir: %s \\n\", plugin.Dir)\n    fmt.Println(\"Enjoy anything you want.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Voting System API Definition\nDESCRIPTION: API definitions for voting activities and enrollment functionality\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_3\n\nLANGUAGE: api\nCODE:\n```\ntype Actid struct {\n\tActid       int64  `json:\"actid\"`\n}\n\ntype VoteReq struct {\n\tAeid       int64  `json:\"aeid\"`\n\tActid\n}\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Configuring DataSource, Table and Cache in transform.yaml\nDESCRIPTION: This YAML snippet configures the data source, table, and cache settings for the transform service. It specifies the MySQL connection string, the table name (shorturl), and the Redis host for caching. Multiple Redis instances can be specified for caching, supporting both single-node and cluster configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n\"DataSource: root:password@tcp(localhost:3306)/gozero\\nTable: shorturl\\nCache:\\n  - Host: localhost:6379\"\n```\n\n----------------------------------------\n\nTITLE: Implementing the accept Function in Go\nDESCRIPTION: The `accept` function determines whether a request should be allowed to proceed based on the current state of the circuit breaker. It calculates a drop ratio based on the number of accepted and total requests, and then uses a probabilistic check to decide whether to reject the request. Returns `ErrServiceUnavailable` if the fuse is triggered.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/breaker.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"func (b *googleBreaker) accept() error {\\n    accepts, total := b.history()  \\n    weightedAccepts := b.k * float64(accepts)\\n    dropRatio := math.Max(0, (float64(total-protection)-weightedAccepts)/float64(total+1))\\n    if dropRatio <= 0 {\\n        return nil\\n    }\\n    if b.proba.TrueOnProba(dropRatio) {\\n        return ErrServiceUnavailable\\n    }\\n\\n    return nil\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Creating API Service - Go\nDESCRIPTION: This command quickly creates an API service using goctl. The '-new' flag indicates the creation of a new service, requiring the service name as a parameter.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api new user\n```\n\n----------------------------------------\n\nTITLE: Building the Load Balancer with Node Information\nDESCRIPTION: This snippet demonstrates the Build method implementation that is called by gRPC when a node is updated, where all node information is assembled into a p2cPicker structure.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (b *p2cPickerBuilder) Build(info base.PickerBuildInfo) balancer.Picker {\n  ......\n  var conns []*subConn\n  for conn, connInfo := range readySCs {\n    conns = append(conns, &subConn{\n      addr:    connInfo.Address,\n      conn:    conn,\n      success: initSuccess,\n    })\n  }\n  return &p2cPicker{\n    conns: conns,\n    r:     rand.New(rand.NewSource(time.Now().UnixNano())),\n    stamp: syncx.NewAtomicDuration(),\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Finding Sensitive Words\nDESCRIPTION: The output of the sensitive word finding example showing all identified keywords in the input text.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[苍井空 日本AV女优 AV演员色情 AV AV演员]\n```\n\n----------------------------------------\n\nTITLE: Defining User Service Protocol Buffer\nDESCRIPTION: Protobuf definition for the user service, including message types and RPC method for getting user information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\n\n//protoc-gen-go version greater than 1.4.0, proto file need to add go_package, otherwise it can not be generated\noption go_package = \"./user\";\n\nmessage IdRequest {\n    string id = 1;\n}\n\nmessage UserResponse {\n    // 用户id\n    string id = 1;\n    // 用户名称\n    string name = 2;\n    // 用户性别\n    string gender = 3;\n}\n\nservice User {\n    rpc getUser(IdRequest) returns(UserResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Configuration\nDESCRIPTION: This Go code snippet adds a `Mysql` struct with a `DataSource` field to the `Config` struct in `config.go`. This allows the application to read the MySQL database connection string from the configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport \"github.com/zeromicro/go-zero/rest\"\n\ntype Config struct {\n    rest.RestConf\n    Mysql struct{\n        DataSource string\n    }\n    \n    CacheRedis cache.CacheConf\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SpanContext Structure in Go\nDESCRIPTION: Defines the spanContext struct which holds tracing information like traceId and spanId. It also shows the SpanContext interface that can be implemented for custom context passing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/TraceHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntype spanContext struct {\n\ttraceId string\t\t// TraceID表示tracer的全局唯一ID\n\tspanId  string\t\t// SpanId标示单个trace中某一个span的唯一ID，在trace中唯一\n}\n\ntype SpanContext interface {\n\tTraceId() string\t\t\t\t\t\t// get TraceId\n\tSpanId() string\t\t\t\t\t\t\t// get SpanId\n\tVisit(fn func(key, val string) bool)\t// 自定义操作TraceId，SpanId\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processing Methods in Go\nDESCRIPTION: Implements various stream processing methods including Buffer, Count, Distinct, Filter, Map, Reduce, Sort and others for manipulating stream data.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/api/fx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) Buffer(n int) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) Count() (int)\n```\n\nLANGUAGE: go\nCODE:\n```\ntype KeyFunc    func(item interface{}) interface{}\n\nfunc (p Stream) Distinct(fn KeyFunc) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (p Stream) Done()\n```\n\nLANGUAGE: go\nCODE:\n```\ntype FilterFunc func(item interface{}) bool\n\nfunc (p Stream) Filter(fn FilterFunc, opts ...Option) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\ntype MapFunc func(item interface{}) interface{}\n\nfunc (p Stream) Map(fn MapFunc, opts ...Option) Stream\n```\n\nLANGUAGE: go\nCODE:\n```\ntype ReduceFunc func(pipe <-chan interface{}) (interface{}, error)\n\nfunc (p Stream) Reduce(fn ReduceFunc) (interface{}, error)\n```\n\nLANGUAGE: go\nCODE:\n```\ntype LessFunc func(a, b interface{}) bool\n\nfunc (p Stream) Sort(less LessFunc) Stream\n```\n\n----------------------------------------\n\nTITLE: Updating Config Struct in Go for DataSource and Cache\nDESCRIPTION: Modifies the Config struct in config.go to include DataSource, Table, and Cache configurations for MySQL and Redis cache integration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n  zrpc.RpcServerConf\n  DataSource string             // 手动代码\n  Table      string             // 手动代码\n  Cache      cache.CacheConf    // 手动代码\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Router Implementation in Go-Zero REST Server\nDESCRIPTION: Defines a RunOption for using a custom router implementation. By default, router.PatRouter is used, but this option allows for alternative router implementations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nWithRouter(router httpx.Router) RunOption\n```\n\n----------------------------------------\n\nTITLE: Defining Logging Configuration in Go\nDESCRIPTION: This snippet shows the LogConf struct, which contains settings for log output mode, storage path, log level, compression, retention period, and write interval.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"` // 服务名称\n\tMode                string `json:\",default=console,options=console|file|volume\"` // 日志模式，console-输出到console，file-输出到当前服务器（容器）文件，，volume-输出docker挂载文件内\n\tPath                string `json:\",default=logs\"` // 日志存储路径\n\tLevel               string `json:\",default=info,options=info|error|severe\"` // 日志级别\n\tCompress            bool   `json:\",optional\"` // 是否开启gzip压缩\n\tKeepDays            int    `json:\",optional\"` // 日志保留天数\n\tStackCooldownMillis int    `json:\",default=100\"` // 日志write间隔\n}\n```\n\n----------------------------------------\n\nTITLE: Jenkins Pipeline Configuration\nDESCRIPTION: Complete Jenkins pipeline script for building and deploying services to Kubernetes, including Docker image creation and deployment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npipeline {\n  agent any\n  parameters {\n      gitParameter name: 'branch', \n      type: 'PT_BRANCH',\n      branchFilter: 'origin/(.*)',\n      defaultValue: 'master',\n      selectedValue: 'DEFAULT',\n      sortMode: 'ASCENDING_SMART',\n      description: 'Select the branch'\n  }\n\n  stages {\n      stage('service info')    {\n          steps {\n              sh 'echo branch: $branch'\n              sh 'echo build service type：${JOB_NAME}-$type'\n          }\n      }\n\n\n      stage('check out') {\n          steps {\n              checkout([$class: 'GitSCM', \n              branches: [[name: '$branch']],\n              doGenerateSubmoduleConfigurations: false, \n              extensions: [], \n              submoduleCfg: [],\n              userRemoteConfigs: [[credentialsId: '${credentialsId}', url: '${gitUrl}']]])\n          }   \n      }\n\n      stage('get commit_id') {\n          steps {\n              echo 'get commit_id'\n              git credentialsId: '${credentialsId}', url: '${gitUrl}'\n              script {\n                  env.commit_id = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()\n              }\n          }\n      }\n\n\n      stage('goctl version detection') {\n          steps{\n              sh '/usr/local/bin/goctl -v'\n          }\n      }\n\n      stage('Dockerfile Build') {\n          steps{\n                 sh '/usr/local/bin/goctl docker -go service/${JOB_NAME}/${type}/${JOB_NAME}.go'\n                 script{\n                     env.image = sh(returnStdout: true, script: 'echo ${JOB_NAME}-${type}:${commit_id}').trim()\n                 }\n                 sh 'echo image：${image}'\n                 sh 'docker build -t ${image} .'\n          }\n      }\n\n      stage('Upload to the mirror warehouse') {\n          steps{\n              sh '/root/dockerlogin.sh'\n              sh 'docker tag  ${image} ${dockerServer}/${image}'\n              sh 'docker push ${dockerServer}/${image}'\n          }\n      }\n\n      stage('Deploy to k8s') {\n          steps{\n              script{\n                  env.deployYaml = sh(returnStdout: true, script: 'echo ${JOB_NAME}-${type}-deploy.yaml').trim()\n                  env.port=sh(returnStdout: true, script: '/root/port.sh ${JOB_NAME}-${type}').trim()\n              }\n\n              sh 'echo ${port}'\n\n              sh 'rm -f ${deployYaml}'\n              sh '/usr/local/bin/goctl kube deploy -secret dockersecret -replicas 2 -nodePort 3${port} -requestCpu 200 -requestMem 50 -limitCpu 300 -limitMem 100 -name ${JOB_NAME}-${type} -namespace hey-go-zero -image ${dockerServer}/${image} -o ${deployYaml} -port ${port}'\n              sh '/usr/bin/kubectl apply -f ${deployYaml}'\n          }\n      }\n      \n      stage('Clean') {\n          steps{\n              sh 'docker rmi -f ${image}'\n              sh 'docker rmi -f ${dockerServer}/${image}'\n              cleanWs notFailBuild: true\n          }\n      }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in Bloom Filter in go-zero\nDESCRIPTION: Implements the Exists method of the Bloom filter, which checks if an element potentially exists in the set by verifying the corresponding bits in the BitSet.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/bloom.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Exists(data []byte) (bool, error) {\n\tlocations := f.getLocations(data)\n\tisSet, err := f.bitSet.check(locations)\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tif !isSet {\n\t\treturn false, nil\n\t}\n\n\treturn true, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Search API with JWT Authentication\nDESCRIPTION: API definition file showing routes with and without JWT authentication requirements.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/jwt.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntype (\n    SearchReq {\n        Name string `form:\"name\"`\n    }\n\n    SearchReply {\n        Name string `json:\"name\"`\n        Count int `json:\"count\"`\n    }\n)\n\n@server(\n    jwt: Auth\n)\nservice search-api {\n    @handler search\n    get /search/do (SearchReq) returns (SearchReply)\n}\n\nservice search-api {\n    @handler ping\n    get /search/ping\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New gRPC Client with Custom Balancer\nDESCRIPTION: Client creation with P2C load balancer configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc NewClient(target string, opts ...ClientOption) (*client, error) {\n\tvar cli client\n\topts = append(opts, WithDialOption(grpc.WithBalancerName(p2c.Name)))\n\tif err := cli.dial(target, opts...); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &cli, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Generation Method\nDESCRIPTION: A method for generating JWT tokens with claims including expiration time, issued-at time, and user ID. Uses HS256 signing method with the configured secret key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *LoginLogic) getJwtToken(secretKey string, iat, seconds, userId int64) (string, error) {\n\tclaims := make(jwt.MapClaims)\n\tclaims[\"exp\"] = iat + seconds\n\tclaims[\"iat\"] = iat\n\tclaims[\"userId\"] = userId\n\ttoken := jwt.New(jwt.SigningMethodHS256)\n\ttoken.Claims = claims\n\treturn token.SignedString([]byte(secretKey))\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Resolvers\nDESCRIPTION: Registration of direct and discovery-based resolvers in zRPC.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc RegisterResolver() {\n\tresolver.Register(&dirBuilder)\n\tresolver.Register(&disBuilder)\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Walk Function Example\nDESCRIPTION: Demonstrates the Walk operation which processes stream elements concurrently and transforms them to uppercase.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(\"aaa\", \"bbb\", \"ccc\").Walk(func(item interface{}, pipe chan<- interface{}) {\n  newItem := strings.ToUpper(item.(string))\n  pipe <- newItem\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: User Authentication API Definition\nDESCRIPTION: API definitions for user registration, login, and authentication services\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_2\n\nLANGUAGE: api\nCODE:\n```\ntype RegisterReq struct {\n\tMobile   string `json:\"mobile\"`\n\tPassword string `json:\"password\"`\n\tSmscode\tstring `json:\"smscode\"`\n}\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Configuring DQ Job Settings in YAML\nDESCRIPTION: YAML configuration file for a job service using dq. It includes service name, log configuration, Beanstalk endpoints with tube names, and Redis connection details needed for the distributed queue.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName: job\n\nLog:\n  ServiceName: job\n  Level: info\n\n#dq依赖Beanstalks、redis ，Beanstalks配置、redis配置\nDqConf:\n  Beanstalks:\n    - Endpoint: 127.0.0.1:7771\n      Tube: tube1\n    - Endpoint: 127.0.0.1:7772\n      Tube: tube2\n  Redis:\n    Host: 127.0.0.1:6379\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Search API YAML Configuration\nDESCRIPTION: YAML configuration for search API service with JWT authentication settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/jwt.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nName: search-api\nHost: 0.0.0.0\nPort: 8889\nAuth:\n  AccessSecret: $AccessSecret\n  AccessExpire: $AccessExpire\n```\n\n----------------------------------------\n\nTITLE: RPC Tracing Interceptor in go-zero\nDESCRIPTION: This code demonstrates the RPC tracing interceptor in go-zero, which is used for tracing RPC calls. It starts a client span using `trace.StartClientSpan`, visits the span to extract tracing information, and adds the tracing data to the outgoing context as metadata. This ensures that the tracing context is propagated to the downstream service, enabling end-to-end tracing of RPC calls.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/trace.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc TracingInterceptor(ctx context.Context, method string, req, reply interface{},\n    cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n    // open clientSpan\n    ctx, span := trace.StartClientSpan(ctx, cc.Target(), method)\n    defer span.Finish()\n\n    var pairs []string\n    span.Visit(func(key, val string) bool {\n        pairs = append(pairs, key, val)\n        return true\n    })\n    // **3** Add the data in the pair to ctx in the form of a map\n    ctx = metadata.AppendToOutgoingContext(ctx, pairs...)\n\n    return invoker(ctx, method, req, reply, cc, opts...)\n}\n```\n\n----------------------------------------\n\nTITLE: Model Code Generation from MySQL - Go\nDESCRIPTION: Generates model code from MySQL using the specified command, which requires input flags for the source SQL file, target directory, naming styles, and cache options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mysql -src ./model.sql -dir ./model_code -style gozero -cache true\n```\n\n----------------------------------------\n\nTITLE: TimingWheel moveTask Function\nDESCRIPTION: This code snippet shows the `moveTask` function, which is responsible for rescheduling a task in the TimingWheel. It retrieves the task's position, calculates the new position and circle based on the delay, and either executes the task immediately if the delay is less than the interval, or moves the task to the appropriate slot and circle.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n```go\nfunc (tw *TimingWheel) moveTask(task baseEntry) {\n\t// timers: Map => 通过key获取 [positionEntry「pos, task」]\n\tval, ok := tw.timers.Get(task.key)\n\tif !ok {\n\t\treturn\n\t}\n\n\ttimer := val.(*positionEntry)\n  // {delay < interval} => 延迟时间比一个时间格间隔还小，没有更小的刻度，说明任务应该立即执行\n\tif task.delay < tw.interval {\n\t\tthreading.GoSafe(func() {\n\t\t\ttw.execute(timer.item.key, timer.item.value)\n\t\t})\n\t\treturn\n\t}\n\t// 如果 > interval，则通过 延迟时间delay 计算其出时间轮中的 new pos, circle\n\tpos, circle := tw.getPositionAndCircle(task.delay)\n\tif pos >= timer.pos {\n\t\ttimer.item.circle = circle\n    // 记录前后的移动offset。为了后面过程重新入队\n\t\ttimer.item.diff = pos - timer.pos\n\t} else if circle > 0 {\n\t\t// 转移到下一层，将 circle 转换为 diff 一部分\n\t\tcircle--\n\t\ttimer.item.circle = circle\n\t\t// 因为是一个数组，要加上 numSlots [也就是相当于要走到下一层]\n\t\ttimer.item.diff = tw.numSlots + pos - timer.pos\n\t} else {\n\t\t// 如果 offset 提前了，此时 task 也还在第一层\n\t\t// 标记删除老的 task，并重新入队，等待被执行\n\t\ttimer.item.removed = true\n\t\tnewItem := &timingEntry{\n\t\t\tbaseEntry: task,\n\t\t\tvalue:     timer.item.value,\n\t\t}\n\t\ttw.slots[pos].PushBack(newItem)\n\t\ttw.setTimerPosition(pos, newItem)\n\t}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Add RPC Service Code\nDESCRIPTION: Command to generate Go code for the Add RPC service from the Protocol Buffers definition, including client, server, and service implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc protoc add.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Interceptor with Load Shedding in Go\nDESCRIPTION: A gRPC interceptor that applies load shedding to unary RPC calls. It checks if requests should be allowed or rejected based on system load, and tracks metrics for monitoring.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc UnarySheddingInterceptor(shedder load.Shedder, metrics *stat.Metrics) grpc.UnaryServerInterceptor {\n    ensureSheddingStat()\n\n    return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo,\n        handler grpc.UnaryHandler) (val interface{}, err error) {\n        sheddingStat.IncrementTotal()\n        var promise load.Promise\n        // Check for downgrades\n        promise, err = shedder.Allow()\n        // Drop load, record relevant logs and metrics\n        if err != nil {\n            metrics.AddDrop()\n            sheddingStat.IncrementDrop()\n            return\n        }\n        // Final callback execution result\n        defer func() {\n            // Execution Failure\n            if err == context.DeadlineExceeded {\n                promise.Fail()\n            // Successful implementation\n            } else {\n                sheddingStat.IncrementPass()\n                promise.Pass()\n            }\n        }()\n        // Implementation of business methods\n        return handler(ctx, req)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Scanning and Running TimingWheel Tasks\nDESCRIPTION: This function processes tasks in a given linked list, determining which ones need to be executed, rescheduled, or decremented in their circle count. It handles removed tasks, tasks that need to wait for another circle, and tasks that need to be rescheduled at a different position.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) scanAndRunTasks(l *list.List) {\n\t// 存储目前需要执行的task{key, value}  [execute所需要的参数，依次传递给execute执行]\n\tvar tasks []timingTask\n\n\tfor e := l.Front(); e != nil; {\n\t\ttask := e.Value.(*timingEntry)\n                // 标记删除，在 scan 中做真正的删除 「删除map的data」\n\t\tif task.removed {\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\ttw.timers.Del(task.key)\n\t\t\te = next\n\t\t\tcontinue\n\t\t} else if task.circle > 0 {\n\t\t\t// 当前执行点已经过期，但是同时不在第一层，所以当前层即然已经完成了，就会降到下一层\n                        // 但是并没有修改 pos\n\t\t\ttask.circle--\n\t\t\te = e.Next()\n\t\t\tcontinue\n\t\t} else if task.diff > 0 {\n\t\t\t// 因为之前已经标注了diff，需要再进入队列\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\tpos := (tw.tickedPos + task.diff) % tw.numSlots\n\t\t\ttw.slots[pos].PushBack(task)\n\t\t\ttw.setTimerPosition(pos, task)\n\t\t\ttask.diff = 0\n\t\t\te = next\n\t\t\tcontinue\n\t\t}\n\t\t// 以上的情况都是不能执行的情况，能够执行的会被加入tasks中\n\t\ttasks = append(tasks, timingTask{\n\t\t\tkey:   task.key,\n\t\t\tvalue: task.value,\n\t\t})\n\t\tnext := e.Next()\n\t\tl.Remove(e)\n\t\ttw.timers.Del(task.key)\n\t\te = next\n\t}\n\t// for range tasks，然后把每个 task->execute 执行即可\n\ttw.runTasks(tasks)\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format in JSON\nDESCRIPTION: Example of JSON response structure for business error conditions with error code\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 10001,\n  \"msg\": \"something wrong\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model from Datasource in go-zero\nDESCRIPTION: Command to generate model code from a MySQL datasource using goctl model. It connects to the specified database and generates models for all or specific tables.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-model.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/database\" -table=\"*\"  -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: Defining Borrow API in Go\nDESCRIPTION: API definition for the borrow service, including borrow and return endpoints.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ninfo(\n    title: \"图书借阅系统api\"\n    desc: \"图书借阅系统api\"\n    author: \"keson\"\n    email: \"keson@xiaoheiban.cn\"\n    version: \"v1.0\"\n)\n\ntype BorrowReq {\n    BookName string `json:\"bookName\"`\n    ReturnPlan int64 `json:\"returnPlan\"`\n}\n\ntype ReturnReq {\n    BookName string `json:\"bookName\"`\n}\n\n@server(\n    jwt: Auth\n)\nservice borrow-api {\n    @handler borrow\n    post /borrow/do (BorrowReq)\n\n    @handler return\n    post /borrow/return (ReturnReq)\n}\n```\n\n----------------------------------------\n\nTITLE: Route Registration with Middleware in go-zero\nDESCRIPTION: Demonstrates how to register routes with middleware in the go-zero application using rest.WithMiddlewares.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nfunc RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {\n\tengine.AddRoutes(\n\t\trest.WithMiddlewares(\n\t\t\t[]rest.Middleware{serverCtx.GreetMiddleware1, serverCtx.GreetMiddleware2},\n\t\t\t[]rest.Route{\n\t\t\t\t{\n\t\t\t\t\tMethod:  http.MethodGet,\n\t\t\t\t\tPath:    \"/from/:name\",\n\t\t\t\t\tHandler: greetHandler(serverCtx),\n\t\t\t\t},\n\t\t\t}...,\n\t\t),\n\t)\n )\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration for Monitoring go-zero Service\nDESCRIPTION: This code snippet demonstrates the Prometheus configuration (`prometheus.yaml`) needed to collect service monitoring information from a go-zero application. It defines the target service and associated labels for identification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/metric.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"- job_name: 'file_ds'\\n    static_configs:\\n      - targets: ['your-local-ip:9091']\\n        labels:\\n          job: activeuser\\n          app: activeuser-api\\n          env: dev\\n          instance: your-local-ip:service-port\"\n```\n\n----------------------------------------\n\nTITLE: Creating User Table in MySQL\nDESCRIPTION: SQL statement to create a 'user' table in the 'gozero' database with fields for user information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `user` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '用户名称',\n  `password` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '用户密码',\n  `mobile` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '手机号',\n  `gender` char(5) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT '男｜女｜未公开',\n  `nickname` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '用户昵称',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name_index` (`name`),\n  UNIQUE KEY `mobile_index` (`mobile`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n```\n\n----------------------------------------\n\nTITLE: Testing the Greet Service with cURL in Shell\nDESCRIPTION: This shell command uses cURL to send a GET request to the running greet service, demonstrating how to interact with the API endpoint.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/monolithic-service.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i -X GET http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Installing go-zero\nDESCRIPTION: This command installs the go-zero framework using `go get`. It sets the `GO111MODULE` environment variable to `on` to enable module support and specifies a proxy server for faster downloads.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n`GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero`\n```\n\n----------------------------------------\n\nTITLE: Generating Model from DDL in go-zero\nDESCRIPTION: Command to generate CRUD code from MySQL DDL files using goctl model. It creates model files in the specified directory with optional Redis cache support.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-model.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql ddl -src=\"./*.sql\" -dir=\"./sql/model\" -c\n```\n\n----------------------------------------\n\nTITLE: Generated User Model Implementation\nDESCRIPTION: Auto-generated model code containing CRUD operations with cache support for the User entity.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-model.md#2025-04-22_snippet_2\n\nLANGUAGE: golang\nCODE:\n```\n// Code generated by goctl. DO NOT EDIT!\n\npackage model\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/stores/builder\"\n\t\"github.com/zeromicro/go-zero/core/stores/cache\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlc\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n\t\"github.com/zeromicro/go-zero/core/stringx\"\n)\n\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Adding Elements to Bloom Filter in go-zero\nDESCRIPTION: Demonstrates how to add an element to the Bloom filter. It uses the getLocations function to hash the element and then sets the corresponding bits in the Redis BitSet.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bloom.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) Add(data []byte) error {\n\tlocations := f.getLocations(data)\n\terr := f.bitSet.set(locations)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in YAML\nDESCRIPTION: YAML configuration file for user API service including database, cache, and JWT authentication settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/jwt.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\nAuth:\n  AccessSecret: $AccessSecret\n  AccessExpire: $AccessExpire\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceContext with Model in Go for Short URL Service\nDESCRIPTION: Updates the ServiceContext struct and NewServiceContext function to include the ShorturlModel, initializing it with MySQL and cache configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n  c     config.Config\n  Model model.ShorturlModel   // 手动代码\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n  return &ServiceContext{\n    c:             c,\n    Model: model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache), // 手动代码\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Timer Ticks in TimingWheel\nDESCRIPTION: This function is called when the timer ticks. It advances the current position in the timing wheel and processes the tasks in the current slot by calling scanAndRunTasks on the linked list at the current position.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// 定时器 「每隔 internal 会执行一次」\nfunc (tw *TimingWheel) onTick() {\n        // 每次执行更新一下当前执行 tick 位置\n\ttw.tickedPos = (tw.tickedPos + 1) % tw.numSlots\n        // 获取此时 tick位置 中的存储task的双向链表\n\tl := tw.slots[tw.tickedPos]\n\ttw.scanAndRunTasks(l)\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Structures in Go\nDESCRIPTION: Redis configuration structures for authentication and key management, including host settings, cluster configuration, and optional password.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis host\n    Type string `json:\",default=node,options=node|cluster\"` // redis type\n    Pass string `json:\",optional\"` // redis password\n}\n\nRedisKeyConf struct {\n    RedisConf\n    Key string `json:\",optional\"` // Verification key\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Running a New API Service with goctl\nDESCRIPTION: Series of commands to generate a new API service using goctl, initialize Go modules, and run the service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ngoctl api new greet\ncd greet\ngo mod init\ngo mod tidy\ngo run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Types in go-zero API\nDESCRIPTION: Examples of type definitions in go-zero API syntax, including single type declarations and type groups.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Foo{\n    Id int `path:\"id\"`\n    Foo int `json:\"foo\"`\n}\n\ntype Bar{\n    Bar int `form:\"bar\"`\n}\n\ntype(\n    FooBar{\n        FooBar int `json:\"fooBar\"`\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Config Structure in Go\nDESCRIPTION: Go struct definition for API Gateway configuration including RPC client configurations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    rest.RestConf\n    Add   zrpc.RpcClientConf     // manual code\n    Check zrpc.RpcClientConf     // manual code\n}\n```\n\n----------------------------------------\n\nTITLE: Expected etcd Registration Output\nDESCRIPTION: Example output from etcdctl showing the service has been registered with etcd, displaying the key and IP:port.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhello.rpc/7587849401504590084\n127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Displaying DDL-based Model Generation Help (Shell)\nDESCRIPTION: Shows the help information for generating MySQL models from DDL files, including available options and their descriptions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql ddl -h\n\nNAME:\n   goctl model mysql ddl - generate mysql model from ddl\n\nUSAGE:\n   goctl model mysql ddl [command options] [arguments...]\n\nOPTIONS:\n   --src value, -s value  the path or path globbing patterns of the ddl\n   --dir value, -d value  the target dir\n   --style value          the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --cache, -c            generate code with cache [optional]\n   --idea                 for idea plugin [optional]\n```\n\n----------------------------------------\n\nTITLE: Check Service Protocol Buffers Definition\nDESCRIPTION: Protocol Buffers definition for the book price checking service, defining request/response messages and RPC method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_12\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage check;\n\nmessage checkReq {\n    string book = 1;\n}\n\nmessage checkResp {\n    bool found = 1;\n    int64 price = 2;\n}\n\nservice checker {\n    rpc check(checkReq) returns(checkResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Redis BitSet in go-zero\nDESCRIPTION: Demonstrates how to initialize a Redis BitSet, check and set bits, set expiration, and delete the BitSet. This is the foundation for the Bloom filter implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/bloom.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 初始化 redisBitSet\nstore := redis.New(\"redis 地址\", func(r *redis.Redis) {\n\t\tr.Type = redis.NodeType\n\t})\n// 声明一个bitSet, key=\"test_key\"名且bits是1024位\nbitSet := newRedisBitSet(store, \"test_key\", 1024)\n// 判断第0位bit存不存在\nisSetBefore, err := bitSet.check([]uint{0})\n\n// 对第512位设置为1\nerr = bitSet.set([]uint{512})\n// 3600秒后过期 \nerr = bitSet.expire(3600)\n\n// 删除该bitSet\nerr = bitSet.del()\n```\n\n----------------------------------------\n\nTITLE: Generating User Models using IntelliJ Plugin in Go Zero\nDESCRIPTION: This snippet outlines how to generate model code using the IntelliJ plugin for Go Zero. It involves right-clicking the SQL file and selecting options to generate the corresponding Go model code, or using shortcut keys.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/model-gen.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# In Goland interaction\n# Right-click `user.sql`, enter and click `New`->`Go Zero`->`Model Code`\n# Or use shortcut keys: Command+N (macOS) or alt+insert (Windows)\n```\n\n----------------------------------------\n\nTITLE: Determining if Requests Should Be Dropped\nDESCRIPTION: This method implements the logic for deciding whether a request should be dropped based on current load conditions. It checks both CPU load and whether the system is still in a cooldown period after a previous drop.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// 请求是否应该被丢弃\nfunc (as *adaptiveShedder) shouldDrop() bool {\n    // 当前cpu负载超过阈值\n    // 服务处于冷却期内应该继续检查负载并尝试丢弃请求\n    if as.systemOverloaded() || as.stillHot() {\n        // 检查正在处理的并发是否超出当前可承载的最大并发数\n        // 超出则丢弃请求\n        if as.highThru() {\n            flying := atomic.LoadInt64(&as.flying)\n            as.avgFlyingLock.Lock()\n            avgFlying := as.avgFlying\n            as.avgFlyingLock.Unlock()\n            msg := fmt.Sprintf(\n                \"dropreq, cpu: %d, maxPass: %d, minRt: %.2f, hot: %t, flying: %d, avgFlying: %.2f\",\n                stat.CpuUsage(), as.maxPass(), as.minRt(), as.stillHot(), flying, avgFlying)\n            logx.Error(msg)\n            stat.Report(msg)\n            return true\n        }\n    }\n    return false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway Transform Service Discovery\nDESCRIPTION: Configure API gateway to automatically discover transform service using etcd for service registration and discovery\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nTransform:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: transform.rpc\n```\n\n----------------------------------------\n\nTITLE: Message Import Declaration in Proto\nDESCRIPTION: This snippet demonstrates proper and improper ways to import and define protobuf messages in RPC services. It highlights the differences in how types should be structured within proto files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_8\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"greet\";\n\nimport \"base/common.proto\"\n\nmessage Request {\n  string ping = 1;\n}\n\nmessage Response {\n  string pong = 1;\n}\n\nservice Greet {\n  rpc Ping(base.In) returns(base.Out); // request和return 不支持import\n}\n\n```\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package =  \"greet\";\n\nimport \"base/common.proto\"\n\nmessage Request {\n  base.In in = 1; // 支持import\n}\n\nmessage Response {\n  base.Out out = 2; // 支持import\n}\n\nservice Greet {\n  rpc Ping(Request) returns(Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API with user.api\nDESCRIPTION: This code block defines the API structure for the user service using the `.api` syntax. It defines request and response types for the login endpoint, and declares the `login` handler to be used for handling POST requests to `/user/login`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\ntype (\n    LoginReq {\n        Username string `json:\"username\"`\n        Password string `json:\"password\"`\n    }\n\n    LoginReply {\n        Id           int64 `json:\"id\"`\n        Name         string `json:\"name\"`\n        Gender       string `json:\"gender\"`\n        AccessToken  string `json:\"accessToken\"`\n        AccessExpire int64 `json:\"accessExpire\"`\n        RefreshAfter int64 `json:\"refreshAfter\"`\n    }\n)\n\nservice user-api {\n    @handler login\n    post /user/login (LoginReq) returns (LoginReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Config Struct in Go for Database and Cache\nDESCRIPTION: Modifies the Config struct in config.go to include fields for DataSource, Table, and Cache configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n  zrpc.RpcServerConf\n  DataSource string             // 手动代码\n  Table      string             // 手动代码\n  Cache      cache.CacheConf    // 手动代码\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Configuration in Go\nDESCRIPTION: This snippet defines the PrivateKeyConf struct, which contains settings for the fingerprint and key file of private keys used in signature verification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nPrivateKeyConf struct {\n    Fingerprint string // 指纹配置\n    KeyFile     string // 密钥配置\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Zero Framework using Go Get\nDESCRIPTION: Command to install the go-zero framework using go get with a specified proxy for Chinese users.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero\n```\n\n----------------------------------------\n\nTITLE: Computing Hash Locations for Bloom Filter\nDESCRIPTION: Implements the hash location calculation for Bloom filter elements by performing 14 different hashes on the input data.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/bloom.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (f *BloomFilter) getLocations(data []byte) []uint {\n\tlocations := make([]uint, maps)\n\tfor i := uint(0); i < maps; i++ {\n\t\thashValue := hash.Hash(append(data, byte(i)))\n\t\tlocations[i] = uint(hashValue % uint64(f.bits))\n\t}\n\n\treturn locations\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from Protocol Buffers\nDESCRIPTION: Shell command using goctl to generate Go code from the protocol buffer definition, including gRPC service implementations and Zero-RPC specific code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-dir.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl rpc protoc greet.proto --go_out=. --go-grpc_out=. --zrpc_out=. --verbose\n```\n\n----------------------------------------\n\nTITLE: RPC Service Configuration with Database and Cache\nDESCRIPTION: Configure RPC service with MySQL datasource and Redis cache settings for URL transformation\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nDataSource: root:@tcp(localhost:3306)/gozero\nTable: shorturl\nCache:\n  - Host: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Service Config Structure in Go\nDESCRIPTION: Defines the Config struct for the RPC service, including RPC server configuration, MySQL data source, and Redis cache settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    zrpc.RpcServerConf\n    Mysql struct {\n        DataSource string\n    }\n    CacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Keywords in Go with stringx.NewReplacer\nDESCRIPTION: This code snippet demonstrates how to replace overlapping keywords in text using stringx.NewReplacer. It automatically chooses the longest matching keyword when overlaps occur.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nreplacer := stringx.NewReplacer(map[string]string{\n  \"日本\":    \"法国\",\n  \"日本的首都\": \"东京\",\n  \"东京\":    \"日本的首都\",\n})\nfmt.Println(replacer.Replace(\"日本的首都是东京\"))\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Generation with Goctl\nDESCRIPTION: Shows the generated directory structure after running goctl api command to create a datacenter API service, including handlers, logic, middleware, and configuration files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n➜  datacenter tree\n.\n├── datacenter.api\n├── etc\n│   └── datacenter-api.yaml\n├── go.mod\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── handler\n│   │   ├── common\n│   │   │   ├── appinfohandler.go\n│   │   │   ├── qiuniutokenhandler.go\n│   │   │   ├── snsinfohandler.go\n│   │   │   ├── votesverificationhandler.go\n│   │   │   └── wxtickethandler.go\n│   │   ├── routes.go\n│   │   ├── user\n│   │   │   ├── code2sessionhandler.go\n│   │   │   ├── loginhandler.go\n│   │   │   ├── pinghandler.go\n│   │   │   ├── registerhandler.go\n│   │   │   ├── userinfohandler.go\n│   │   │   └── wxloginhandler.go\n│   │   └── votes\n│   │       ├── activityicrviewhandler.go\n│   │       ├── activityinfohandler.go\n│   │       ├── enrollhandler.go\n│   │       ├── enrollinfohandler.go\n│   │       ├── enrolllistshandler.go\n│   │       └── votehandler.go\n│   ├── logic\n│   │   ├── common\n│   │   │   ├── appinfologic.go\n│   │   │   ├── qiuniutokenlogic.go\n│   │   │   ├── snsinfologic.go\n│   │   │   ├── votesverificationlogic.go\n│   │   │   └── wxticketlogic.go\n│   │   ├── user\n│   │   │   ├── code2sessionlogic.go\n│   │   │   ├── loginlogic.go\n│   │   │   ├── pinglogic.go\n│   │   │   ├── registerlogic.go\n│   │   │   ├── userinfologic.go\n│   │   │   └── wxloginlogic.go\n│   │   └── votes\n│   │       ├── activityicrviewlogic.go\n│   │       ├── activityinfologic.go\n│   │       ├── enrollinfologic.go\n│   │       ├── enrolllistslogic.go\n│   │       ├── enrolllogic.go\n│   │       └── votelogic.go\n│   ├── middleware\n│   │   └── usercheckmiddleware.go\n│   ├── svc\n│   │   └── servicecontext.go\n│   └── types\n│       └── types.go\n└── datacenter.go\n```\n\n----------------------------------------\n\nTITLE: Search API Configuration Structure\nDESCRIPTION: Configuration structure for search API including authentication and RPC client settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    rest.RestConf\n    Auth struct {\n        AccessSecret string\n        AccessExpire int64\n    }\n    UserRpc zrpc.RpcClientConf\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Lua Script for Rate Limiting\nDESCRIPTION: This Lua script is used within Redis to implement the rate limiting logic. It increments the counter for a given key, sets an expiration time for the key if it's the first access, and returns a code indicating whether the request is allowed, hit the limit, or exceeded the limit. The arguments are `limit` which represents the maximum requests allowed and `window` which represents the time window for the limit.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/periodlimit.md#2025-04-22_snippet_1\n\nLANGUAGE: lua\nCODE:\n```\n-- to be compatible with aliyun redis, \n-- we cannot use `local key = KEYS[1]` to reuse thekey\nlocal limit = tonumber(ARGV[1])\nlocal window = tonumber(ARGV[2])\n-- incrbt key 1 => key visis++\nlocal current = redis.call(\"INCRBY\", KEYS[1], 1)\n-- 如果是第一次访问，设置过期时间 => TTL = window size\n-- 因为是只限制一段时间的访问次数\nif current == 1 then\n    redis.call(\"expire\", KEYS[1], window)\n    return 1\nelseif current < limit then\n    return 1\nelseif current == limit then\n    return 2\nelse\n    return 0\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Route Naming Standards in go-zero\nDESCRIPTION: Demonstrates the recommended spine naming convention for API routes, using lowercase words with horizontal bars (-) to separate words, ensuring routes are meaningful and consistent.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/specification.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/user/get-info\n/user/get/info\n/user/password/change/:id\n```\n\n----------------------------------------\n\nTITLE: Releasing Redis Lock with Lua Script in Go\nDESCRIPTION: This snippet demonstrates the implementation of releasing a Redis lock using a Lua script. It ensures that only the owner of the lock can release it, maintaining consistency and preventing accidental releases.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/redis-lock.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ndelCommand = `if redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    return redis.call(\"DEL\", KEYS[1])\nelse\n    return 0\nend`\n\nfunc (rl *RedisLock) Release() (bool, error) {\n\tresp, err := rl.store.Eval(delCommand, []string{rl.key}, []string{rl.id})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\n\tif reply, ok := resp.(int64); !ok {\n\t\treturn false, nil\n\t} else {\n\t\treturn reply == 1, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Java-Style Doc Comments in API\nDESCRIPTION: This snippet demonstrates the correct usage of Java-style doc comments in API syntax. The comment starts with '/**' and ends with '*/'.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_7\n\nLANGUAGE: api\nCODE:\n```\n/**\n * java-style doc\n */\n```\n\n----------------------------------------\n\nTITLE: API IDL Example in Go\nDESCRIPTION: Example API syntax demonstrating basic structure including imports, info blocks, type definitions and service blocks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/**\n * api syntax example and syntax description\n */\n\n// api syntax version\nsyntax = \"v1\"\n\n// import literal\nimport \"foo.api\"\n\n// import group\nimport (\n    \"bar.api\"\n    \"foo/bar.api\"\n)\ninfo(\n    author: \"anqiansong\"\n    date:   \"2020-01-08\"\n    desc:   \"api syntax example and syntax description\"\n)\n\n// type literal\n\ntype Foo{\n    Foo int `json:\"foo\"`\n}\n\n// type group\n\ntype(\n    Bar{\n        Bar int `json:\"bar\"`\n    }\n)\n\n// service block\n@server(\n    jwt:   Auth\n    group: foo\n)\nservice foo-api{\n    @doc \"foo\"\n    @handler foo\n    post /foo (Foo) returns (Bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Redis BitSet in go-zero\nDESCRIPTION: Demonstrates how to initialize a Redis BitSet, check and set bits, expire the set, and delete it. This is the basic building block for the Bloom filter implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bloom.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 初始化 redisBitSet\nstore := redis.NewRedis(\"redis 地址\", redis.NodeType)\n// 声明一个bitSet, key=\"test_key\"名且bits是1024位\nbitSet := newRedisBitSet(store, \"test_key\", 1024)\n// 判断第0位bit存不存在\nisSetBefore, err := bitSet.check([]uint{0})\n\n// 对第512位设置为1\nerr = bitSet.set([]uint{512})\n// 3600秒后过期 \nerr = bitSet.expire(3600)\n\n// 删除该bitSet\nerr = bitSet.del()\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Middleware\nDESCRIPTION: Main server setup with global middleware registration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tflag.Parse()\n\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\n\tctx := svc.NewServiceContext(c)\n\tserver := rest.MustNewServer(c.RestConf)\n\tdefer server.Stop()\n\n    // Global middleware\n\tserver.Use(func(next http.HandlerFunc) http.HandlerFunc {\n\t\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t\tlogx.Info(\"global middleware\")\n\t\t\tnext(w, r)\n\t\t}\n\t})\n\thandler.RegisterHandlers(server, ctx)\n\n\tfmt.Printf(\"Starting server at %s:%d...\\n\", c.Host, c.Port)\n\tserver.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: 使用fx的Walk操作处理流数据\nDESCRIPTION: 展示了如何使用fx的Walk操作对流中的每个元素进行处理。在这个例子中,将字符串转换为大写。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(\"aaa\", \"bbb\", \"ccc\").Walk(func(item interface{}, pipe chan<- interface{}) {\n  newItem := strings.ToUpper(item.(string))\n  pipe <- newItem\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Executing Tasks on Timer Tick in go-zero TimingWheel\nDESCRIPTION: This function is called on each timer tick to process and execute tasks in the current time slot. It handles task removal, circle decrementation, and task execution.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) scanAndRunTasks(l *list.List) {\n\tvar tasks []timingTask\n\n\tfor e := l.Front(); e != nil; {\n\t\ttask := e.Value.(*timingEntry)\n\t\tif task.removed {\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\ttw.timers.Del(task.key)\n\t\t\te = next\n\t\t\tcontinue\n\t\t} else if task.circle > 0 {\n\t\t\ttask.circle--\n\t\t\te = e.Next()\n\t\t\tcontinue\n\t\t} else if task.diff > 0 {\n\t\t\tnext := e.Next()\n\t\t\tl.Remove(e)\n\t\t\tpos := (tw.tickedPos + task.diff) % tw.numSlots\n\t\t\ttw.slots[pos].PushBack(task)\n\t\t\ttw.setTimerPosition(pos, task)\n\t\t\ttask.diff = 0\n\t\t\te = next\n\t\t\tcontinue\n\t\t}\n\t\ttasks = append(tasks, timingTask{\n\t\t\tkey:   task.key,\n\t\t\tvalue: task.value,\n\t\t})\n\t\tnext := e.Next()\n\t\tl.Remove(e)\n\t\ttw.timers.Del(task.key)\n\t\te = next\n\t}\n\ttw.runTasks(tasks)\n}\n```\n\n----------------------------------------\n\nTITLE: Original Handler Implementation\nDESCRIPTION: Default Go-Zero handler implementation before customization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc GreetHandler(ctx *svc.ServiceContext) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tvar req types.Request\n\t\tif err := httpx.Parse(r, &req); err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t\treturn\n\t\t}\n\n\t\tl := logic.NewGreetLogic(r.Context(), ctx)\n\t\tresp, err := l.Greet(req)\n\t\tif err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t} else {\n\t\t\thttpx.OkJson(w, resp)\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Filebeat YAML for Log Collection\nDESCRIPTION: Configuration file for Filebeat that defines log input sources, Kafka output settings, and JSON processing rules. Specifies log file paths, Kafka topic configurations, and JSON field processing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/log-collection.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nfilebeat.inputs:\n- type: log\n  enabled: true\n  json.keys_under_root: true\n  json.add_error_key: true\n  paths:\n    - /var/log/order/*.log\n\nsetup.template.settings:\n  index.number_of_shards: 1\n\nfields:\n  log_topic: log-collection\n\noutput.kafka:\n  hosts: [\"127.0.0.1:9092\"]\n  topic: '%{[fields.log_topic]}'\n  partition.round_robin:\n    reachable_only: false\n  required_acks: 1\n  keep_alive: 10s\n\nprocessors:\n  - decode_json_fields:\n      fields: ['@timestamp','level','content','trace','span','duration']\n      target: \"\"\n```\n\n----------------------------------------\n\nTITLE: Complete User API Definition (Go)\nDESCRIPTION: Shows the full content of the user.api file, including all routes and data structures with JWT authentication enabled for the user info route.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ninfo(\n\ttitle: \"user api\"\n\tdesc: \"用户系统\"\n\tauthor: \"anqiansong\"\n\temail: \"anqiansong@xiaoheiban.cn\"\n)\n\ntype RegisterReq {\n\tUsername string `json:\"username\"`\n\tMobile string `json:\"mobile\"`\n\tPassword string `json:\"password\"`\n}\n\ntype LoginReq {\n\tUsername string `json:\"username\"`\n\tPassword string `json:\"password\"`\n}\n\ntype UserReply {\n\tId int64 `json:\"id\"`\n\tUsername string `json:\"username\"`\n\tMobile string `json:\"mobile\"`\n\tNickname string `json:\"nickname\"`\n\tGender string `json:\"gender\"`\n\tJwtToken\n}\n\ntype JwtToken {\n\tAccessToken string `json:\"accessToken,omitempty\"`\n\tAccessExpire int64 `json:\"accessExpire,omitempty\"`\n\tRefreshAfter int64 `json:\"refreshAfter,omitempty\"`\n}\n\nservice user-api {\n\t@handler ping\n\tpost /user/ping ()\n\t\n\t@handler register\n\tpost /user/register (RegisterReq)\n\t\n\t@handler login\n\tpost /user/login (LoginReq) returns (UserReply)\n}\n\n@server(\n\tjwt: Auth\n\tmiddleware: Usercheck\n)\nservice user-api {\n\t@handler userInfo\n\tget /user/info () returns (UserReply)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Cache Configuration Struct - Go\nDESCRIPTION: Defines the caching configuration structure which includes node definitions and their configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nClusterConf []NodeConf\n\nNodeConf struct {\n    redis.RedisConf\n    Weight int `json:\",default=100\"` // 权重\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Load Balancer\nDESCRIPTION: Registration of custom P2C load balancer builder with gRPC.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tbalancer.Register(newBuilder())\n}\n\nfunc newBuilder() balancer.Builder {\n\treturn base.NewBalancerBuilder(Name, new(p2cPickerBuilder))\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Search API in Go-Zero\nDESCRIPTION: API definition for search functionality including article search, index initialization, and article storage. Uses middleware for admin authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n\n\ntype SearchReq struct {\n\tKeyword string `json:\"keyword\"`\n\tPage string `json:\"page\"`\n\tSize string `json:\"size\"`\n}\ntype SearchResp struct {\n\tData []ArticleReq `json:\"data\"`\n}\n\ntype ArticleReq struct{\n\tNewsId string `json:\"NewsId\"`\n\tNewsTitle string `json:\"NewsTitle\"`\n\tImageUrl string `json:\"ImageUrl\"`\n}\n\n\n@server(\n\tgroup: search\n\tmiddleware: Admincheck\n)\nservice datacenter-api {\n\t@doc(\n\t\tsummary: \"搜索\"\n\t)\n\t@handler article\n\tget /search/article (SearchReq) returns (SearchResp)\n\t@handler articleInit\n\tget /search/articel/init (SearchReq) returns (SearchResp)\n\t@handler articleStore\n\tpost /search/articel/store (ArticleReq) returns (ArticleReq)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Goctl API Command Help\nDESCRIPTION: Shows the help information for the goctl api command, including its subcommands and options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api -h\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api - generate api related files\n\nUSAGE:\n   goctl api command [command options] [arguments...]\n\nCOMMANDS:\n   new       fast create api service\n   format    format api files\n   validate  validate api file\n   doc       generate doc files\n   go        generate go files for provided api in yaml file\n   java      generate java files for provided api in api file\n   ts        generate ts files for provided api in api file\n   dart      generate dart files for provided api in api file\n   kt        generate kotlin code for provided api file\n   plugin    custom file generator\n\nOPTIONS:\n   -o value    the output api file\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Shorten API Call Example\nDESCRIPTION: This shell command demonstrates how to call the shorten API endpoint. It sends a request to the `/shorten` endpoint with the URL parameter set to `http://www.xiaoheiban.cn`. The expected response is a JSON object containing the shortened key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n\"curl -i \\\"http://localhost:8888/shorten?url=http://www.xiaoheiban.cn\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Connection in go-zero\nDESCRIPTION: Demonstrates how to establish a MySQL connection and create a model instance with bulk insert capability.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/mysql.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// 1. 快速连接一个 mysql\n// datasource: mysql dsn\nheraMysql := sqlx.NewMysql(datasource)\n\n// 2. 在 servicecontext 中调用，懂model上层的logic层调用\nmodel.NewMysqlModel(heraMysql, tablename),\n\n// 3. model层 mysql operation\nfunc NewMysqlModel(conn sqlx.SqlConn, table string) *MysqlModel {\n\tdefer func() {\n\t\trecover()\n\t}()\n    // 4. 创建一个批量insert的 [mysql executor]\n    // conn: mysql connection; insertsql: mysql insert sql\n\tbulkInserter , err := sqlx.NewBulkInserter(conn, insertsql)\n\tif err != nil {\n\t\tlogx.Error(\"Init bulkInsert Faild\")\n\t\tpanic(\"Init bulkInsert Faild\")\n\t\treturn nil\n\t}\n\treturn &MysqlModel{conn: conn, table: table, Bulk: bulkInserter}\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing logx with MustSetUp\nDESCRIPTION: This snippet shows how to initialize logx using the `MustSetUp` function with a `LogConf` struct. If no initialization is performed, default configurations will be used. The `LogConf` structure contains options for service name, mode, path, level, compression, keep days and stack cooldown.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogx.MustSetUp(c)\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Context\nDESCRIPTION: ServiceContext implementation for user RPC service including model initialization\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config    config.Config\n    UserModel model.UserModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn := sqlx.NewMysql(c.Mysql.DataSource)\n    return &ServiceContext{\n        Config: c,\n        UserModel: model.NewUserModel(conn, c.CacheRedis),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Sensitive Words in Go using stringx.NewTrie with Custom Mask\nDESCRIPTION: This snippet demonstrates how to use stringx.NewTrie to create a filter for sensitive words with a custom mask character. It filters the sensitive words and returns the safe text, found keywords, and a boolean indicating if any keywords were found.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/keywords.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfilter := stringx.NewTrie([]string{\n  \"AV演员\",\n  \"苍井空\",\n  \"AV\",\n  \"日本AV女优\",\n  \"AV演员色情\",\n}, stringx.WithMask('?')) // 默认替换为*\nsafe, keywords, found := filter.Filter(\"日本AV演员兼电视、电影演员。苍井空AV女优是xx出道, 日本AV女优们最精彩的表演是AV演员色情表演\")\nfmt.Println(safe)\nfmt.Println(keywords)\nfmt.Println(found)\n```\n\n----------------------------------------\n\nTITLE: Generating API Gateway Code with goctl\nDESCRIPTION: Command to generate the complete Go API Gateway implementation based on the API definition file, including handlers, logic, and routing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -api bookstore.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Model Insert Method Template in Golang\nDESCRIPTION: This code snippet shows the template for the Insert method in model code generation. It demonstrates how template variables like {{.upperStartCamelObject}} are used in the code generation process.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_0\n\nLANGUAGE: golang\nCODE:\n```\nfunc (m *{{.upperStartCamelObject}}Model) Insert(data {{.upperStartCamelObject}}) (sql.Result,error) {\n\t{{if .withCache}}{{if .containsIndexCache}}{{.keys}}\n    ret, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n\t\treturn conn.Exec(query, {{.expressionValues}})\n\t}, {{.keyValues}}){{else}}query := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n    ret,err:=m.ExecNoCache(query, {{.expressionValues}})\n\t{{end}}{{else}}query := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n    ret,err:=m.conn.Exec(query, {{.expressionValues}}){{end}}\n\treturn ret,err\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Naming Conventions in Go\nDESCRIPTION: Guidelines for naming variables with a focus on readability, meaningful descriptions, and consistent style\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/naming-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n* Initial lowercase\n* Hump naming\n* See the name to know the meaning, avoid pinyin instead of English\n* It is not recommended including an underscore (_)\n* It is not recommended including numbers\n```\n\n----------------------------------------\n\nTITLE: Acquiring Redis Lock with Lua Script in Go\nDESCRIPTION: This snippet shows the implementation of acquiring a Redis lock using a Lua script. It ensures atomicity and handles various scenarios like key existence and expiration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/redis-lock.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlockCommand = `if redis.call(\"GET\", KEYS[1]) == ARGV[1] then\n    redis.call(\"SET\", KEYS[1], ARGV[1], \"PX\", ARGV[2])\n    return \"OK\"\nelse\n    return redis.call(\"SET\", KEYS[1], ARGV[1], \"NX\", \"PX\", ARGV[2])\nend`\n\nfunc (rl *RedisLock) Acquire() (bool, error) {\n\tseconds := atomic.LoadUint32(&rl.seconds)\n  // execute luascript\n\tresp, err := rl.store.Eval(lockCommand, []string{rl.key}, []string{\n\t\trl.id, strconv.Itoa(int(seconds)*millisPerSecond + tolerance)})\n\tif err == red.Nil {\n\t\treturn false, nil\n\t} else if err != nil {\n\t\tlogx.Errorf(\"Error on acquiring lock for %s, %s\", rl.key, err.Error())\n\t\treturn false, err\n\t} else if resp == nil {\n\t\treturn false, nil\n\t}\n\n\treply, ok := resp.(string)\n\tif ok && reply == \"OK\" {\n\t\treturn true, nil\n\t} else {\n\t\tlogx.Errorf(\"Unknown reply when acquiring lock for %s: %v\", rl.key, resp)\n\t\treturn false, nil\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Java-Style Doc Comments in API\nDESCRIPTION: This snippet shows an incorrect usage of Java-style doc comments in API syntax. The closing '*/' is on a separate line, which is not allowed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_8\n\nLANGUAGE: api\nCODE:\n```\n/*\n * java-style doc */\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring go-stash for Log Processing in YAML\nDESCRIPTION: YAML configuration for go-stash to process logs from Kafka, apply filters, and output to Elasticsearch. It includes input from Kafka, filtering conditions, and Elasticsearch output settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/log.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nClusters:\n- Input:\n    Kafka:\n      Name: go-stash\n      Log:\n        Mode: file\n      Brokers:\n      - \"127.0.0.1:9092\"\n      Topics: \n      - log-collection\n      Group: stash\n      Conns: 3\n      Consumers: 10\n      Processors: 60\n      MinBytes: 1048576\n      MaxBytes: 10485760\n      Offset: first\n  Filters:\n  - Action: drop\n    Conditions:\n      - Key: status\n        Value: \"503\"\n        Type: contains\n      - Key: type\n        Value: \"app\"\n        Type: match\n        Op: and\n  - Action: remove_field\n    Fields:\n    - source\n    - _score\n    - \"@metadata\"\n    - agent\n    - ecs\n    - input\n    - log\n    - fields\n  Output:\n    ElasticSearch:\n      Hosts:\n      - \"http://127.0.0.1:9200\"\n      Index: \"go-stash-{{yyyy.MM.dd}}\"\n      MaxChunkBytes: 5242880\n      GracePeriod: 10s\n      Compress: false\n      TimeZone: UTC\n```\n\n----------------------------------------\n\nTITLE: Implementing CPU Overload Detection in Go\nDESCRIPTION: Functions for checking if the CPU is overloaded using a sliding average algorithm to prevent false positives from short CPU spikes. It samples CPU usage every 250ms with a beta factor of 0.95.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// Is the cpu overloaded\nfunc (as *adaptiveShedder) systemOverloaded() bool {\n    return systemOverloadChecker(as.cpuThreshold)\n}\n\n// cpu check function\nsystemOverloadChecker = func(cpuThreshold int64) bool {\n        return stat.CpuUsage() >= cpuThreshold\n}\n\n// cpu sliding average\ncurUsage := internal.RefreshCpu()\nprevUsage := atomic.LoadInt64(&cpuUsage)\n// cpu = cpuᵗ⁻¹ * beta + cpuᵗ * (1 - beta)\n// Sliding average algorithm\nusage := int64(float64(prevUsage)*beta + float64(curUsage)*(1-beta))\natomic.StoreInt64(&cpuUsage, usage)\n```\n\n----------------------------------------\n\nTITLE: Search Logic Implementation with RPC Call\nDESCRIPTION: Implementation of search logic including user verification via RPC call.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *SearchLogic) Search(req types.SearchReq) (*types.SearchReply, error) {\n    userIdNumber := json.Number(fmt.Sprintf(\"%v\", l.ctx.Value(\"userId\")))\n    logx.Infof(\"userId: %s\", userIdNumber)\n    userId, err := userIdNumber.Int64()\n    if err != nil {\n        return nil, err\n    }\n    \n    // use user rpc\n    _, err = l.svcCtx.UserRpc.GetUser(l.ctx, &user.IdReq{\n        Id: userId,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.SearchReply{\n        Name:  req.Name,\n        Count: 100,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Usage in Go\nDESCRIPTION: Demonstrates the fundamental usage of channels in Go, including writing, reading, and closing channels. It also shows how to use different channel read modes and restrict channel permissions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/other-component/mapreduce.md#2025-04-22_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nch := make(chan interface{})\n// You need to actively close the channel after writing\ndefer func() {\n    close(ch)\n}()\ngo func() {\n    // v,ok mode Read channel\n    for {\n        v, ok := <-ch\n        if !ok {\n            return\n        }\n        t.Log(v)\n    }\n\n    for i := range ch {\n        t.Log(i)\n    }\n\n    for range ch {\n    }\n}()\nfor i := 0; i < 10; i++ {\n    ch <- i\n    time.Sleep(time.Second)\n}\n```\n\n----------------------------------------\n\nTITLE: Output of Sensitive Word Filtering\nDESCRIPTION: The output of the sensitive word filtering example showing the filtered text with masked characters, the list of found keywords, and a boolean indicating keywords were found.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n日本????兼电视、电影演员。?????女优是xx出道, ??????们最精彩的表演是??????表演\n[苍井空 日本AV女优 AV演员色情 AV AV演员]\ntrue\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Structure for DQ Job Service\nDESCRIPTION: Go configuration structure that parses YAML configuration for a job service. It extends the base service configuration and includes DqConf from the go-queue library.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 配置文件\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\n\npackage config\n\nimport (\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\n)\n\ntype Config struct {\n\tservice.ServiceConf\n\tDqConf dq.DqConf\n}\n```\n\n----------------------------------------\n\nTITLE: TimingWheel onTick Function\nDESCRIPTION: This code snippet shows the `onTick` function, which is executed on each timer tick. It updates the current tick position and scans the tasks in the corresponding slot's linked list to determine which tasks should be executed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 定时器 「每隔 interval 会执行一次」\nfunc (tw *TimingWheel) onTick() {\n  // 每次执行更新一下当前执行 tick 位置\n\ttw.tickedPos = (tw.tickedPos + 1) % tw.numSlots\n  // 获取此时 tick位置 中的存储task的双向链表\n\tl := tw.slots[tw.tickedPos]\n\ttw.scanAndRunTasks(l)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Resolver Builder Interface\nDESCRIPTION: Interface definition for custom resolver implementation in gRPC showing required Build and Scheme methods.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Builder interface {\n\tBuild(target Target, cc ClientConn, opts BuildOptions) (Resolver, error)\n\tScheme() string\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Models from Multiple DDL Files (Bash)\nDESCRIPTION: Example command for generating models from multiple DDL files using a wildcard pattern and specifying the output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl model mysql ddl -src \"*.sql\"  -dir=./model\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Error Types in Go-Zero\nDESCRIPTION: Creates custom error types and functions for standardized error handling in the application.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_17\n\nLANGUAGE: go\nCODE:\n```\npackage errorx\n\nconst defaultCode = 1001\n\ntype CodeError struct {\n    Code int    `json:\"code\"`\n    Msg  string `json:\"msg\"`\n}\n\ntype CodeErrorResponse struct {\n    Code int    `json:\"code\"`\n    Msg  string `json:\"msg\"`\n}\n\nfunc NewCodeError(code int, msg string) error {\n    return &CodeError{Code: code, Msg: msg}\n}\n\nfunc NewDefaultError(msg string) error {\n    return NewCodeError(defaultCode, msg)\n}\n\nfunc (e *CodeError) Error() string {\n    return e.Msg\n}\n\nfunc (e *CodeError) Data() *CodeErrorResponse {\n    return &CodeErrorResponse{\n        Code: e.Code,\n        Msg:  e.Msg,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Code from a Proto File\nDESCRIPTION: Generates RPC code from a proto file named 'transform.proto' using the goctl rpc proto command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl rpc proto -I $GOPATH/src -src transform.proto -dir .\n```\n\n----------------------------------------\n\nTITLE: Defining LogConf Structure in Go-Zero\nDESCRIPTION: Defines the LogConf structure which contains all configuration options for the logx system, including service name, mode, path, level, and other settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"`\n\tMode                string `json:\",default=console,options=console|file|volume\"`\n\tPath                string `json:\",default=logs\"`\n\tLevel               string `json:\",default=info,options=info|error|severe\"`\n\tCompress            bool   `json:\",optional\"`\n\tKeepDays            int    `json:\",optional\"`\n\tStackCooldownMillis int    `json:\",default=100\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Graceful Log Closure Implementation\nDESCRIPTION: Demonstrates proper way to implement graceful shutdown of logging system using shutdown listeners.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/logx.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/zeromicro/go-zero/core/proc\"\n\n// grace close log\nproc.AddShutdownListener(func() {\n\tlogx.Close()\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Borrow Logic in Go\nDESCRIPTION: Implementation of the borrow logic for the library management system, including user and book validation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *BorrowLogic) Borrow(userId string,req types.BorrowReq) error {\n\tuserInt, err := strconv.ParseInt(fmt.Sprintf(\"%v\", userId), 10, 64)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif req.ReturnPlan < time.Now().Unix() {\n\t\treturn errInvalidParam\n\t}\n\n\treply, err := l.svcCtx.UserRpc.IsUserExist(l.ctx, &user.UserExistReq{Id: userInt})\n\tif err != nil { // code error\n\t\t// 这里判断not found是为了有些业务场景需要使用到not found,然后进行数据更新\n\t\t// 当前业务其实可以直接返回error\n\t\tif shared.IsGRPCNotFound(err) {\n\t\t\treturn errUserNotFound\n\t\t}\n\t\treturn err\n\t}\n\n\tif !reply.Exists {\n\t\treturn errUserNotFound\n\t}\n\n\tbook, err := l.svcCtx.LibraryRpc.FindBookByName(l.ctx, &library.FindBookReq{Name: req.BookName})\n\tif err != nil { // code error\n\t\tif shared.IsGRPCNotFound(err) {\n\t\t\treturn errBookNotFound\n\t\t}\n\t\treturn err\n\t}\n\n\t_, err = l.svcCtx.BorrowSystemModel.FindOneByBookNo(book.No, model.Borrowing)\n\tswitch err {\n\tcase nil:\n\t\treturn errBookBorrowed\n\tcase model.ErrNotFound:\n\t\t_, err = l.svcCtx.BorrowSystemModel.Insert(model.BorrowSystem{\n\t\t\tBookNo:         book.No,\n\t\t\tUserId:         userInt,\n\t\t\tStatus:         model.Borrowing,\n\t\t\tReturnPlanDate: time.Unix(req.ReturnPlan, 0),\n\t\t})\n\t\treturn err\n\tdefault:\n\t\treturn err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Priority Route Option in Go-Zero REST Server\nDESCRIPTION: Defines a RouteOption for setting route priority. Routes with higher priority will be preserved during high CPU load situations, while lower priority routes may be dropped.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc WithPriority() RouteOption\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code from API Definition\nDESCRIPTION: Commands to generate client code in various languages (Java, Dart, etc.) from the API definition file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ngoctl api java -api greet.api -dir greet\ngoctl api dart -api greet.api -dir greet\n...\n```\n\n----------------------------------------\n\nTITLE: Creating User RPC Service Directory Structure\nDESCRIPTION: Shell commands to create the directory structure for the user RPC service within the go-zero-demo project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/mall \n$ mkdir -p user/rpc && cd user/rpc\n```\n\n----------------------------------------\n\nTITLE: P2C Load Balancer Pick Implementation\nDESCRIPTION: Power of Two Choices (P2C) load balancing algorithm implementation for selecting nodes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (p *p2cPicker) Pick(ctx context.Context, info balancer.PickInfo) (\n\tconn balancer.SubConn, done func(balancer.DoneInfo), err error) {\n\tp.lock.Lock()\n\tdefer p.lock.Unlock()\n\n\tvar chosen *subConn\n\tswitch len(p.conns) {\n\tcase 0:\n\t\treturn nil, nil, balancer.ErrNoSubConnAvailable\n\tcase 1:\n\t\tchosen = p.choose(p.conns[0], nil)\n\tcase 2:\n\t\tchosen = p.choose(p.conns[0], p.conns[1])\n\tdefault:\n\t\tvar node1, node2 *subConn\n\t\tfor i := 0; i < pickTimes; i++ {\n\t\t\ta := p.r.Intn(len(p.conns))\n\t\t\tb := p.r.Intn(len(p.conns) - 1)\n\t\t\tif b >= a {\n\t\t\t\tb++\n\t\t\t}\n\t\t\tnode1 = p.conns[a]\n\t\t\tnode2 = p.conns[b]\n\t\t\tif node1.healthy() && node2.healthy() {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\tchosen = p.choose(node1, node2)\n\t}\n\n\tatomic.AddInt64(&chosen.inflight, 1)\n\tatomic.AddInt64(&chosen.requests, 1)\n\treturn chosen.conn, p.buildDoneFunc(chosen), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Context\nDESCRIPTION: Service context implementation with transformer dependency injection\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n\tConfig    config.Config\n\tTransformer transformer.Transformer  // manual code\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig:    c,\n    Transformer: transformer.NewTransformer(zrpc.MustNewClient(c.Transform)), // manual code\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Secret Key Rotation in Go\nDESCRIPTION: This snippet shows the implementation of the ParseToken method, which handles JWT token parsing with secret key rotation. It compares usage counts of current and previous keys to optimize parsing performance.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/tokenparser.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (tp *TokenParser) ParseToken(r *http.Request, secret, prevSecret string){\n  /.....\n  if len(prevSecret) > 0 {\n\t\tcount := tp.loadCount(secret)\n\t\tprevCount := tp.loadCount(prevSecret)\n\n\t\tvar first, second string\n\t\tif count > prevCount {\n\t\t\tfirst = secret\n\t\t\tsecond = prevSecret\n\t\t} else {\n\t\t\tfirst = prevSecret\n\t\t\tsecond = secret\n\t\t}\n\n\t\ttoken, err = tp.doParseToken(r, first)\n\t\tif err != nil {\n\t\t\ttoken, err = tp.doParseToken(r, second)\n\t\t\tif err != nil {\n\t\t\t\treturn nil, err\n\t\t\t} else {\n\t\t\t\ttp.incrementCount(second)\n\t\t\t}\n\t\t} else {\n\t\t\ttp.incrementCount(first)\n\t\t}\n\t} else {\n\t\ttoken, err = tp.doParseToken(r, secret)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n  /.....\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Plugin Command in Go-Zero\nDESCRIPTION: Example command showing how to execute a custom Android plugin for goctl with package specification and API file parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n$ goctl api plugin -p goctl-android=\"android -package com.tal\" -api user.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Search Logic Implementation with RPC Integration\nDESCRIPTION: Implementation of search logic including user authentication via RPC\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *SearchLogic) Search(req types.SearchReq) (*types.SearchReply, error) {\n    userIdNumber := json.Number(fmt.Sprintf(\"%v\", l.ctx.Value(\"userId\")))\n    logx.Infof(\"userId: %s\", userIdNumber)\n    userId, err := userIdNumber.Int64()\n    if err != nil {\n        return nil, err\n    }\n    \n    // 使用user rpc\n    _, err = l.svcCtx.UserRpc.GetUser(l.ctx, &user.IdReq{\n        Id: userId,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.SearchReply{\n        Name:  req.Name,\n        Count: 100,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Doc and Comment Examples in API Service Definition\nDESCRIPTION: Illustrates the placement and association of documentation (Doc) and comments (Comment) with different syntax blocks within an API service definition, adhering to defined rules for single-line and multi-line comments.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_20\n\nLANGUAGE: api\nCODE:\n```\n\"// syntaxLit doc\nsyntax = \\\"v1\\\" // syntaxLit commnet\n\ninfo(\n  // kvLit doc\n  author: songmeizi // kvLit comment\n)\n\n// typeLit doc\ntype Foo {}\n\ntype(\n  // typeLit doc\n  Bar{}\n  \n  FooBar{\n    // filed doc\n    Name int // filed comment\n  }\n)\n\n@server(\n  /**\n   * kvLit doc\n   * Enable jwt authentication\n   */\n  jwt: Auth /**kvLit comment*/\n)\nservice foo-api{\n  // atHandler doc\n  @handler foo //atHandler comment\n  \n  /*\n   * Route doc\n   * Post request\n   * Route path: foo\n   * Request body: Foo\n   * Response body: Foo\n   */\n  post /foo (Foo) returns (Foo) // route comment\n}\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Service\nDESCRIPTION: Command to test the deployed service using curl\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Configuring Order Service\nDESCRIPTION: Defines the configuration structure for the order service including RPC client settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/zrpc\"\n    \"github.com/zeromicro/go-zero/rest\"\n)\n\ntype Config struct {\n    rest.RestConf\n    UserRpc zrpc.RpcClientConf\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Query Operations\nDESCRIPTION: Demonstrates single and multiple record query implementations using QueryRow and QueryRows.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        logx.Errorf(\"userId.findOne error, id=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return &user, nil\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(sex int) ([]*User, error) {\n    users := make([]*User, 0)\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where sex=?`\n    err := um.conn.QueryRows(&users, querysql, sex)\n    if err != nil {\n        logx.Errorf(\"usersSex.findOne error, sex=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return users, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying MySQL Model Generation Help (Shell)\nDESCRIPTION: Shows the help information for generating MySQL models, including the ddl and datasource subcommands.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql -h\n\nNAME:\n   goctl model mysql - generate mysql model\n\nUSAGE:\n   goctl model mysql command [command options] [arguments...]\n\nCOMMANDS:\n   ddl         generate mysql model from ddl\n   datasource  generate model from datasource\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Parsing DQ Configuration in Go\nDESCRIPTION: Go struct for parsing the distributed queue configuration from YAML file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\n)\n\ntype Config struct {\n\tservice.ServiceConf\n\tDqConf dq.DqConf\n}\n```\n\n----------------------------------------\n\nTITLE: Struct Definition for subConn in Load Balancer\nDESCRIPTION: This snippet defines the subConn structure which holds all necessary information about each service node, including its address, connection status, and metrics for processing requests.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype subConn struct {\n    addr     resolver.Address\n    conn     balancer.SubConn\n    lag      uint64 // Used to save ewma values\n    inflight int64  // Used to keep the total number of requests being processed by the current node\n    success  uint64 // Used to identify the health status of this connection over time\n    requests int64  // Used to store the total number of requests\n    last     int64  // Used to save the last request time, used to calculate the ewma value\n    pick     int64  // Save the last selected point in time\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Distributed Task Queue in YAML\nDESCRIPTION: YAML configuration file for setting up the distributed task queue (dq) using Beanstalk and Redis.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nName: job\n\nLog:\n  ServiceName: job\n  Level: info\n\n#dq依赖Beanstalks、redis ，Beanstalks配置、redis配置\nDqConf:\n  Beanstalks:\n    - Endpoint: 127.0.0.1:7771\n      Tube: tube1\n    - Endpoint: 127.0.0.1:7772\n      Tube: tube2\n  Redis:\n    Host: 127.0.0.1:6379\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Defining User Info Route in API Definition (Go)\nDESCRIPTION: Adds a new route for retrieving user information to the user.api file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n@handler userInfo\nget /user/info () returns (UserReply)\n```\n\n----------------------------------------\n\nTITLE: Running the API Gateway Service\nDESCRIPTION: Command to start the API Gateway service with the specified configuration file, which will listen on port 8888 by default.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngo run bookstore.go -f etc/bookstore-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Function to Each Stream Element with Walk function in go-zero fx\nDESCRIPTION: This code demonstrates how to apply a function to each element in a stream using the Walk function in go-zero's fx package. It takes a WalkFunc as input, which performs an operation on each item and potentially emits new items to the output stream. The concurrency is controlled by options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// 例子\nfx.Just(\"aaa\", \"bbb\", \"ccc\").Walk(func(item interface{}, pipe chan<- interface{}) {\n  newItem := strings.ToUpper(item.(string))\n  pipe <- newItem\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n\n// 源码\nfunc (p Stream) walkLimited(fn WalkFunc, option *rxOptions) Stream {\n\tpipe := make(chan interface{}, option.workers)\n\n\tgo func() {\n\t\tvar wg sync.WaitGroup\n\t\tpool := make(chan lang.PlaceholderType, option.workers)\n\n\t\tfor {\n      // 控制并发数量\n\t\t\tpool <- lang.Placeholder\n\t\t\titem, ok := <-p.source\n\t\t\tif !ok {\n\t\t\t\t<-pool\n\t\t\t\tbreak\n\t\t\t}\n\n\t\t\twg.Add(1)\n\t\t\tgo func() {\n\t\t\t\tdefer func() {\n\t\t\t\t\twg.Done()\n\t\t\t\t\t<-pool\n\t\t\t\t}()\n\t\t\t\t// 作用在每个元素上\n\t\t\t\tfn(item, pipe)\n\t\t\t}()\n\t\t}\n\n    // 等待处理完成\n\t\twg.Wait()\n\t\tclose(pipe)\n\t}()\n\n\treturn Range(pipe)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Extended Service Directory Structure\nDESCRIPTION: Demonstrates a more comprehensive service directory structure that includes additional components like cronjob, rmq (message processing), and scripts alongside the standard api and rpc services.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-design.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nuser\n    ├── api //  http access service, business requirement realization\n    ├── cronjob // Timed task, timed data update service\n    ├── rmq // Message processing system: mq and dq, handle some high concurrency and delay message services\n    ├── rpc // rpc service to provide basic data access to other subsystems\n    └── script // Script, handle some temporary operation requirements, and repair temporary data\n```\n\n----------------------------------------\n\nTITLE: Greet Logic Implementation in go-zero\nDESCRIPTION: Implementation of the Greet logic, which logs the name from the request as a demonstration of business logic.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\npackage logic\n\nimport (\n\t\"context\"\n\n\t\"greet/internal/svc\"\n\t\"greet/internal/types\"\n\n\t\"github.com/zeromicro/go-zero/core/logx\"\n)\n\ntype GreetLogic struct {\n\tlogx.Logger\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n}\n\nfunc NewGreetLogic(ctx context.Context, svcCtx *svc.ServiceContext) GreetLogic {\n\treturn GreetLogic{\n\t\tLogger: logx.WithContext(ctx),\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t}\n}\n\nfunc (l *GreetLogic) Greet(req types.Request) (*types.Response, error) {\n\t// 在这里加入业务逻辑，我们用打印日志来代表业务逻辑\n    l.Infof(\"name: %v\", req.Name)\n\treturn &types.Response{}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Private Key Configuration Struct - Go\nDESCRIPTION: Defines the private key configuration that includes the fingerprint and key file used for authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nPrivateKeyConf struct {\n    Fingerprint string // 指纹配置\n    KeyFile     string // 密钥配置\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Database Services via goctl\nDESCRIPTION: This snippet shows the command used to generate model files for a MySQL table using the goctl tool. It establishes the schema connection to the MySQL database, specifying the desired table and output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n➜  common goctl model mysql datasource -url=\"root:admin@tcp(127.0.0.1:3306)/datacenter\" -table=\"base_app\" -dir ./model -c\nDone.\n```\n\n----------------------------------------\n\nTITLE: 使用fx的Group操作进行数据分组\nDESCRIPTION: 展示了如何使用fx的Group操作对流数据进行分组。根据字符串的首字母将数据分为\"g\"、\"p\"和其他三组。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/fx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nss := []string{\"golang\", \"google\", \"php\", \"python\", \"java\", \"c++\"}\nfx.From(func(source chan<- interface{}) {\n\tfor _, s := range ss {\n\t\tsource <- s\n\t}\n}).Group(func(item interface{}) interface{} {\n\tif strings.HasPrefix(item.(string), \"g\") {\n\t\treturn \"g\"\n\t} else if strings.HasPrefix(item.(string), \"p\") {\n\t\treturn \"p\"\n\t}\n\treturn \"\"\n}).ForEach(func(item interface{}) {\n\tfmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Expand API Call Example\nDESCRIPTION: This shell command demonstrates how to call the expand API endpoint. It sends a request to the `/expand` endpoint with the `shorten` parameter set to `f35b2a`. The expected response is a JSON object containing the original URL.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"curl -i \\\"http://localhost:8888/expand?shorten=f35b2a\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Goctl to Generate Android Plugin\nDESCRIPTION: This command demonstrates how to invoke the Goctl API plugin functionality, specifying plugin and API parameters. The command generates API logic by parsing the API specification and invoking the associated plugin binary with custom parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api plugin -p goctl-android=\"android -package com.tal\" -api user.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Key with TimingWheel in go-zero\nDESCRIPTION: This method sets a key-value pair in the cache and updates the TimingWheel accordingly. It handles both new and existing keys, adjusting their expiry times in the timing wheel.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *Cache) Set(key string, value interface{}) {\n\tc.lock.Lock()\n\t_, ok := c.data[key]\n\tc.data[key] = value\n\tc.lruCache.add(key)\n\tc.lock.Unlock()\n\n\texpiry := c.unstableExpiry.AroundDuration(c.expire)\n\tif ok {\n\t\tc.timingWheel.MoveTimer(key, expiry)\n\t} else {\n\t\tc.timingWheel.SetTimer(key, value, expiry)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Structure Definition in Go\nDESCRIPTION: Definition of the Plugin struct showing the structure of plugin data including API specification, style, and directory parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    Api   *spec.ApiSpec\n    Style string\n    Dir   string\n}\n```\n\n----------------------------------------\n\nTITLE: Customized Insert Method Template\nDESCRIPTION: A customized template for the Insert method, renamed to InsertData and with an added documentation comment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_11\n\nLANGUAGE: golang\nCODE:\n```\n// I am from custom template\nfunc (m *{{.upperStartCamelObject}}Model) InsertData(data {{.upperStartCamelObject}}) (sql.Result,error) {\n\t{{if .withCache}}{{if .containsIndexCache}}{{.keys}}\n    ret, err := m.Exec(func(conn sqlx.SqlConn) (result sql.Result, err error) {\n\t\tquery := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n\t\treturn conn.Exec(query, {{.expressionValues}})\n\t}, {{.keyValues}}){{else}}query := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n    ret,err:=m.ExecNoCache(query, {{.expressionValues}})\n\t{{end}}{{else}}query := fmt.Sprintf(\"insert into %s (%s) values ({{.expression}})\", m.table, {{.lowerStartCamelObject}}RowsExpectAutoSet)\n    ret,err:=m.conn.Exec(query, {{.expressionValues}}){{end}}\n\treturn ret,err\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint with cURL\nDESCRIPTION: Command to test the generated API endpoint using cURL.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration Structure in Go\nDESCRIPTION: Prometheus monitoring configuration including host, port, and metrics path settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tHost string `json:\",optional\"` // prometheus monitor host\n\tPort int    `json:\",default=9101\"` // prometheus listening port\n\tPath string `json:\",default=/metrics\"` // report address\n}\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from Datasource with Cache\nDESCRIPTION: Command to generate MySQL model code from a database datasource with cache support. This command accepts database URL, table patterns, and target directory parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url={datasource} -table={patterns}  -dir={dir} -cache=true\n```\n\n----------------------------------------\n\nTITLE: Running the Add RPC Service\nDESCRIPTION: Command to start the Add RPC service using the generated configuration file, which listens on port 8080 by default.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo run add.go -f etc/add.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing gRPC Service Logic in Go\nDESCRIPTION: Implementation of the SayHello method that takes a HelloRequest and returns a HelloReply with a formatted greeting message.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *SayHelloLogic) SayHello(in *hello.HelloRequest) (*hello.HelloReply, error) {\n\treturn &hello.HelloReply{\n\t\tMessage: fmt.Sprintf(\"hello %s\", in.Name),\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Service Context in Go\nDESCRIPTION: Go struct and function for setting up the service context, including the distributed queue consumer.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n\t\"job/internal/config\"\n\t\"github.com/zeromicro/go-queue/dq\"\n)\n\ntype ServiceContext struct {\n\tConfig config.Config\n\tConsumer      dq.Consumer\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig: c,\n\t\tConsumer: dq.NewConsumer(c.DqConf),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Go API Syntax Example with Full Configuration\nDESCRIPTION: A comprehensive example demonstrating Zero Micro API syntax including version declaration, imports, info block, type definitions, and service configuration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n/**\n * api syntax example and syntax description\n */\n\n// api syntax version\nsyntax = \"v1\"\n\n// import literal\nimport \"foo.api\"\n\n// import group\nimport (\n    \"bar.api\"\n    \"foo/bar.api\"\n)\ninfo(\n    author: \"songmeizi\"\n    date:   \"2020-01-08\"\n    desc:   \"api syntax example and syntax description\"\n)\n\n// type literal\ntype Foo{\n    Foo int `json:\"foo\"`\n}\n\n// type group\ntype(\n    Bar{\n        Bar int `json:\"bar\"`\n    }\n)\n\n// service block\n@server(\n    jwt:   Auth\n    group: foo\n)\nservice foo-api{\n    @doc \"foo\"\n    @handler foo\n    post /foo (Foo) returns (Bar)\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Template Categories with goctl\nDESCRIPTION: Allows updating the templates of a specific category to the latest version in the goctl environment. It requires category specification (api, rpc, model, docker, kube) and an optional home path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template update - update template of the target category to the latest\n\nUSAGE:\n   goctl template update [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model,docker,kube]\n   --home value                the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Sample Proto File for User Service\nDESCRIPTION: This is a sample proto file for a user service. It defines a simple ping-pong request-response structure and a User service with a Ping method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\noption go_package=\"./user\";\n\nmessage Request {\n  string ping = 1;\n}\n\nmessage Response {\n  string pong = 1;\n}\n\nservice User {\n  rpc Ping(Request) returns(Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Running API Service\nDESCRIPTION: Commands to generate a new API service named 'greet' and run it with a configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api new greet\ncd greet\ngo run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: WaitGroup Synchronization Pattern in Executors\nDESCRIPTION: Demonstration of potential race condition in executor implementation where wg.Add() timing relative to wg.Wait() can cause panics if not properly synchronized with confirmChan\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nwg.Add(1)\nconfirmChan <- struct{}{}\n```\n\n----------------------------------------\n\nTITLE: Updating YAML Configuration\nDESCRIPTION: This YAML code snippet configures the MySQL datasource and Redis cache in the `user-api.yaml` file. It defines the connection string for the MySQL database, including user, password, URL, and database name, as well as the Redis host, password, and type.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Logic\nDESCRIPTION: Implementation of Check endpoint logic to verify book prices\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *CheckLogic) Check(req types.CheckReq) (*types.CheckResp, error) {\n    // manual code start\n    resp, err := l.svcCtx.Checker.Check(l.ctx, &checker.CheckReq{\n        Book:  req.Book,\n    })\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.CheckResp{\n        Found: resp.Found,\n        Price: resp.Price,\n    }, nil\n    // manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: Etcd Configuration Structure in Go\nDESCRIPTION: Configuration structure for Etcd service discovery integration, defining host addresses and registration keys.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype EtcdConf struct {\n\tHosts []string // etcd host array\n\tKey   string // rpc registration key\n}\n```\n\n----------------------------------------\n\nTITLE: Determining Proto Package Name\nDESCRIPTION: Go code snippet showing how the proto package name is determined based on the go_package option or package name.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nif option.Name == \"go_package\" {\n\tret.GoPackage = option.Constant.Source\n}\n...\nif len(ret.GoPackage) == 0 {\n\tret.GoPackage = ret.Package.Name\n}\nret.PbPackage = GoSanitized(filepath.Base(ret.GoPackage))\n...\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Response Time\nDESCRIPTION: This function computes the minimum response time for requests over the sliding window, aiding in determining how to allocate requests based on the observed performance.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_13\n\nLANGUAGE: go\nCODE:\n```\n// 滑动时间窗口内有多个桶\n// 计算最小的平均响应时间\n// 因为需要计算近一段时间内系统能够处理的最大并发数\nfunc (as *adaptiveShedder) minRt() float64 {\n    // 默认为1000ms\n    result := defaultMinRt\n\n    as.rtCounter.Reduce(func(b *collection.Bucket) {\n        if b.Count <= 0 {\n            return\n        }\n        // 请求平均响应时间\n        avg := math.Round(b.Sum / float64(b.Count))\n        if avg < result {\n            result = avg\n        }\n    })\n\n    return result\n}\n\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from Datasource without Cache\nDESCRIPTION: Command to generate basic MySQL model code from a database datasource without cache support, specifying the database URL, table patterns, and output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$  goctl model mysql datasource -url={datasource} -table={patterns}  -dir={dir}\n```\n\n----------------------------------------\n\nTITLE: API Definition for Shorturl Service\nDESCRIPTION: API definition for shorturl service containing request/response types and endpoint definitions\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype (\n\texpandReq {\n\t\tshorten string `form:\"shorten\"`\n\t}\n\n\texpandResp {\n\t\turl string `json:\"url\"`\n\t}\n)\n\ntype (\n\tshortenReq {\n\t\turl string `form:\"url\"`\n\t}\n\n\tshortenResp {\n\t\tshorten string `json:\"shorten\"`\n\t}\n)\n\nservice shorturl-api {\n\t@server(\n\t\thandler: ShortenHandler\n\t)\n\tget /shorten(shortenReq) returns(shortenResp)\n\n\t@server(\n\t\thandler: ExpandHandler\n\t)\n\tget /expand(expandReq) returns(expandResp)\n}\n```\n\n----------------------------------------\n\nTITLE: Import Syntax Block Examples\nDESCRIPTION: Showcases various ways of importing API files with single and multiple imports\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_2\n\nLANGUAGE: api\nCODE:\n```\nimport \"foo.api\"\nimport \"foo/bar.api\"\n\nimport(\n    \"bar.api\"\n    \"foo/bar/foo.api\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel in go-zero Cache\nDESCRIPTION: This snippet shows how the TimingWheel is initialized within the cache implementation of go-zero. It sets up the timing wheel with a specified interval, number of slots, and an execution function for handling expired keys.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/timing-wheel.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntimingWheel, err := NewTimingWheel(time.Second, slots, func(k, v interface{}) {\n  key, ok := k.(string)\n  if !ok {\n    return\n  }\n  cache.Del(key)\n})\nif err != nil {\n  return nil, err\n}\n\ncache.timingWheel = timingWheel\n```\n\n----------------------------------------\n\nTITLE: Error Handler Configuration in Main\nDESCRIPTION: Configuration of custom error handler in the main application setup\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    flag.Parse()\n\n    var c config.Config\n    conf.MustLoad(*configFile, &c)\n\n    ctx := svc.NewServiceContext(c)\n    server := rest.MustNewServer(c.RestConf)\n    defer server.Stop()\n\n    handler.RegisterHandlers(server, ctx)\n\n    // Custom error\n    httpx.SetErrorHandler(func(err error) (int, interface{}) {\n        switch e := err.(type) {\n        case *errorx.CodeError:\n            return http.StatusOK, e.Data()\n        default:\n            return http.StatusInternalServerError, nil\n        }\n    })\n\n    fmt.Printf(\"Starting server at %s:%d...\\n\", c.Host, c.Port)\n    server.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Finding a Single Record with go-zero MySQL\nDESCRIPTION: Example of querying a single record from MySQL using go-zero, with automatic mapping of query results to a struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/mysql.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (um *UserModel) FindOne(uid int64) (*User, error) {\n    var user User\n    const querysql = `select `+userBuilderQueryRows+` from `+um.table+` where id=? limit 1`\n    err := um.conn.QueryRow(&user, querysql, uid)\n    if err != nil {\n        logx.Errorf(\"userId.findOne error, id=%d, err=%s\", uid, err.Error())\n        if err == sqlx.ErrNotFound {\n            return nil, ErrNotFound\n        }\n        return nil, err\n    }\n    return &user, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Code with Customized Template\nDESCRIPTION: The InsertData method generated after customizing the template, showing the method name change and added documentation comment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_12\n\nLANGUAGE: golang\nCODE:\n```\n// I am from custom template\nfunc (m *UserModel) InsertData(data User) (sql.Result, error) {\n\tquery := fmt.Sprintf(\"insert into %s (%s) values (?, ?, ?, ?, ?)\", m.table, userRowsExpectAutoSet)\n\tret, err := m.conn.Exec(query, data.Name, data.Password, data.Mobile, data.Gender, data.Nickname)\n\treturn ret, err\n}\n```\n\n----------------------------------------\n\nTITLE: Duration-based Logging Example\nDESCRIPTION: Shows how to log database queries with duration tracking for performance monitoring.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/logx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nstartTime := timex.Now()\n// Database query\nrows, err := conn.Query(q, args...)\nduration := timex.Since(startTime)\nif duration > slowThreshold {\n    logx.WithDuration(duration).Slowf(\"[SQL] query: slowcall - %s\", stmt)\n} else {\n    logx.WithDuration(duration).Infof(\"sql query: %s\", stmt)\n}\n```\n\n----------------------------------------\n\nTITLE: RPC with API Configuration in Go\nDESCRIPTION: This Go configuration struct represents the settings for the API server, including authentication parameters and RPC client configurations for various services such as User, Votes, and Common.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/rest\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    rest.RestConf\n\n    Auth struct {\n        AccessSecret string\n        AccessExpire int64\n    }\n    UserRpc   zrpc.RpcClientConf\n    CommonRpc zrpc.RpcClientConf\n    VotesRpc  zrpc.RpcClientConf\n\n    CacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Greet Logic in Go\nDESCRIPTION: Demonstrates the implementation of the Greet function in the GreetLogic struct. This function returns a simple greeting message.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-api.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *GreetLogic) Greet(req types.Request) (*types.Response, error) {\n\treturn &types.Response{\n\t\tMessage: \"Hello go-zero\",\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from DDL without Cache\nDESCRIPTION: Command to generate basic MySQL model code from DDL files without cache support, providing just the source patterns and output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$  goctl model -src={patterns} -dir={dir}\n```\n\n----------------------------------------\n\nTITLE: Search API Service Context Implementation\nDESCRIPTION: Service context implementation for search API with RPC client integration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config  config.Config\n    Example rest.Middleware\n    UserRpc user.User\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        Example: middleware.NewExampleMiddleware().Handle,\n        UserRpc: user.NewUser(zrpc.MustNewClient(c.UserRpc)),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Options Configuration in Go\nDESCRIPTION: Defines option types and functions for configuring stream processing behavior, particularly around worker parallelism.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/api/fx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nrxOptions struct {\n  // whether to limit the parallel number \n  // [true: defaultWorkers(16); false: option.workers]\n  unlimitedWorkers bool\n  // count of parallel workers\n  workers          int\n}\n\ntype Option func(opts *rxOptions)\n```\n\nLANGUAGE: go\nCODE:\n```\nfunc WithWorkers(workers int) Option\n```\n\n----------------------------------------\n\nTITLE: Defining User Service Protocol Buffer\nDESCRIPTION: Protobuf definition for user service with getUser RPC method that accepts an ID and returns user information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_0\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\n\noption go_package = \"./user\";\n\nmessage IdReq{\n  int64 id = 1;\n}\n\nmessage UserInfoReply{\n  int64 id = 1;\n  string name = 2;\n  string number = 3;\n  string gender = 4;\n}\n\nservice user {\n  rpc getUser(IdReq) returns(UserInfoReply);\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Template - Go\nDESCRIPTION: Updates a specified template in goctl, which requires parameters to indicate the category of the template to be updated.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template update -category api\n```\n\n----------------------------------------\n\nTITLE: Determining Call Layer Folder Name\nDESCRIPTION: Go code snippet showing how the call layer folder name is determined based on the service name in the proto file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nif strings.ToLower(proto.Service.Name) == strings.ToLower(proto.GoPackage) {\n\tcallDir = filepath.Join(ctx.WorkDir, strings.ToLower(stringx.From(proto.Service.Name+\"_client\").ToCamel()))\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Generation Example Using Custom Template\nDESCRIPTION: Example demonstrating RPC code generation using a custom template directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ goctl rpc new greet --home $HOME/template\n```\n\nLANGUAGE: text\nCODE:\n```\nDone\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template for RPC - Go\nDESCRIPTION: Creates a proto template file for RPC services. The command identifies if the call originates from the idea plugin, allowing optional parameters such as code storage directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngoctl rpc template -out ./proto_template\n```\n\n----------------------------------------\n\nTITLE: Implementing Queue Consumer Logic\nDESCRIPTION: Consumer implementation for processing messages from the queue.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/logx\"\n\t\"github.com/zeromicro/go-zero/core/threading\"\n\t\"job/internal/svc\"\n)\n\ntype Consumer struct {\n\tctx    context.Context\n\tsvcCtx *svc.ServiceContext\n\tlogx.Logger\n}\n\nfunc NewConsumerLogic(ctx context.Context, svcCtx *svc.ServiceContext) *Consumer {\n\treturn &Consumer{\n\t\tctx:    ctx,\n\t\tsvcCtx: svcCtx,\n\t\tLogger: logx.WithContext(ctx),\n\t}\n}\n\nfunc (l *Consumer)Start()  {\n\tlogx.Infof(\"start consumer \\n\")\n\tthreading.GoSafe(func() {\n\t\tl.svcCtx.Consumer.Consume(func(body []byte) {\n\t\t\tlogx.Infof(\"consumer job  %s \\n\" ,string(body))\n\t\t})\n\t})\n}\n\nfunc (l *Consumer)Stop()  {\n\tlogx.Infof(\"stop consumer \\n\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Service Context with Transformer Dependency\nDESCRIPTION: Initialize service context with transformer client for handling URL shortening and expansion operations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n\tConfig    config.Config\n\tTransformer transformer.Transformer\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tConfig:    c,\n\t\tTransformer: transformer.NewTransformer(zrpc.MustNewClient(c.Transform)),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Standard Type Declaration Example in Zero API\nDESCRIPTION: Shows the recommended way to declare types in Zero API with clean syntax and proper field declarations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_8\n\nLANGUAGE: api\nCODE:\n```\ntype Foo{\n    Id int `path:\"id\"`\n    Foo int `json:\"foo\"`\n}\n\ntype Bar{\n    Bar int `form:\"bar\"`\n}\n\ntype(\n    FooBar{\n        FooBar int\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Model Service Context\nDESCRIPTION: Service context implementation with model integration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n  c     config.Config\n  Model model.ShorturlModel   // manual code\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\treturn &ServiceContext{\n\t\tc:             c,\n\t\tModel: model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache), // manual code\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Plugin in Go\nDESCRIPTION: Basic implementation of a custom goctl plugin that demonstrates how to parse and handle API specifications and plugin parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \n    \"github.com/zeromicro/go-zero/tools/goctl/plugin\"\n)\n\nfunc main() {\n    plugin, err := plugin.NewPlugin()\n    if err != nil {\n        panic(err)\n    }\n    if plugin.Api != nil {\n        fmt.Printf(\"api: %+v \\n\", plugin.Api)\n    }\n    fmt.Printf(\"dir: %s \\n\", plugin.Dir)\n    fmt.Println(\"Enjoy anything you want.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model from Single DDL File (Bash)\nDESCRIPTION: Example command for generating a model from a single DDL file named user.sql and specifying the output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl model mysql ddl -src user.sql  -dir=./model\n```\n\n----------------------------------------\n\nTITLE: Configuring Monitoring Targets\nDESCRIPTION: JSON configuration for Prometheus targets, specifying the endpoint and labels for the shorturl service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-monitor.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n[\n    {\n        \"targets\": [\"127.0.0.1:9091\"],\n        \"labels\": {\n            \"job\": \"shorturl-api\",\n            \"app\": \"shorturl-api\",\n            \"env\": \"test\",\n            \"instance\": \"127.0.0.1:8888\"\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: SharedCalls makeCall Method Implementation in Go\nDESCRIPTION: The implementation of the makeCall method which creates a new call, executes the resource retrieval function, and handles synchronization between goroutines waiting for the result.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// 进入makeCall的一定只有一个goroutine，因为要拿锁锁住的\nfunc (g *sharedGroup) makeCall(key string, fn func() (interface{}, error)) *call {\n  // 创建call结构，用于保存本次请求的结果\n  c := new(call)\n  // wg加1，用于通知其他请求资源的goroutine等待本次资源获取的结束\n  c.wg.Add(1)\n  // 将用于保存结果的call放入map中，以供其他goroutine获取\n  g.calls[key] = c\n  // 释放锁，这样其他请求的goroutine才能获取call的内存占位\n  g.lock.Unlock()\n\n  defer func() {\n    // delete key first, done later. can't reverse the order, because if reverse,\n    // another Do call might wg.Wait() without get notified with wg.Done()\n    g.lock.Lock()\n    delete(g.calls, key)\n    g.lock.Unlock()\n\n    // 调用wg.Done，通知其他goroutine可以返回结果，这样本批次所有请求完成结果的共享\n    c.wg.Done()\n  }()\n\n  // 调用fn方法，将结果填入变量c中\n  c.val, c.err = fn()\n  return c\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Expand API Call with Curl\nDESCRIPTION: Illustrates how to use curl to call the expand API endpoint and shows the expected JSON response with the original URL.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/expand?shorten=f35b2a\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sat, 29 Aug 2020 10:51:53 GMT\nContent-Length: 34\n\n{\"url\":\"http://www.xiaoheiban.cn\"}\n```\n\n----------------------------------------\n\nTITLE: Running Add RPC Service\nDESCRIPTION: Command to start the Add RPC service with the specified configuration file, which will listen on port 8080 by default.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngo run add.go -f etc/add.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating BorrowSystemModel in Go\nDESCRIPTION: Code additions to the borrowsystemmodel.go file, including constants and new methods for querying the borrow system.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\t_ = iota\n\tBorrowing\n\tReturn\n)\n\nfunc (m *defaultBorrowSystemModel) FindOneByUserAndBookNo(userId int64, bookNo string) (*BorrowSystem, error) {\n\tquery := `select ` + borrowSystemRows + ` from ` + m.table + ` where user_id = ? and book_no = ? limit 1`\n\tvar resp BorrowSystem\n\terr := m.conn.QueryRow(&resp, query, userId, bookNo)\n\tswitch err {\n\tcase nil:\n\t\treturn &resp, nil\n\tcase sqlc.ErrNotFound:\n\t\treturn nil, ErrNotFound\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n\nfunc (m *defaultBorrowSystemModel) FindOneByBookNo(bookNo string, status int) (*BorrowSystem, error) {\n\tquery := `select ` + borrowSystemRows + ` from ` + m.table + ` where book_no = ? and status = ? limit 1`\n\tvar resp BorrowSystem\n\terr := m.conn.QueryRow(&resp, query, bookNo, status)\n\tswitch err {\n\tcase nil:\n\t\treturn &resp, nil\n\tcase sqlc.ErrNotFound:\n\t\treturn nil, ErrNotFound\n\tdefault:\n\t\treturn nil, err\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration Structures in Go\nDESCRIPTION: Redis configuration structures for both basic Redis connection settings and authentication key configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-config.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis 主机\n    Type string `json:\",default=node,options=node|cluster\"` // redis类型\n    Pass string `json:\",optional\"` // redis密码\n}\n\nRedisKeyConf struct {\n    RedisConf\n    Key string `json:\",optional\"` // 验证key\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Deployment\nDESCRIPTION: Command to apply the generated Kubernetes deployment YAML file using kubectl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f redis.yaml\n```\n\n----------------------------------------\n\nTITLE: Modified Handler Implementation\nDESCRIPTION: Customized Go-Zero handler implementation with standardized response format.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc GreetHandler(ctx *svc.ServiceContext) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tvar req types.Request\n\t\tif err := httpx.Parse(r, &req); err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t\treturn\n\t\t}\n\n\t\tl := logic.NewGreetLogic(r.Context(), ctx)\n\t\tresp, err := l.Greet(req)\n\t\tresponse.Response(w, resp, err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Request Signature Option in Go-Zero REST Server\nDESCRIPTION: Defines a RouteOption for adding request signature verification to routes. This function requires a SignatureConf parameter to configure the signature validation process.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/server.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc WithSignature(signature SignatureConf) RouteOption\n```\n\n----------------------------------------\n\nTITLE: Defining Add RPC Service Protocol\nDESCRIPTION: Protocol Buffers definition for the Add RPC service, specifying message structures and service method for adding a book with price.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_10\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage add;\n\noption go_package = \"./add\";\n\nmessage addReq {\n    string book = 1;\n    int64 price = 2;\n}\n\nmessage addResp {\n    bool ok = 1;\n}\n\nservice adder {\n    rpc add(addReq) returns(addResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile - Go\nDESCRIPTION: Generates a Dockerfile using goctl, specifying the main function file and an optional port for service exposure.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ngoctl docker -go main.go -port 8080\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Directory layout showing the generated files and project structure, including configuration, business logic, and service implementation files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-dir.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── etc\n│   └── greet.yaml\n├── go.mod\n├── go.sum\n├── greet // [1]\n│   ├── greet.pb.go\n│   └── greet_grpc.pb.go\n├── greet.go\n├── greet.proto\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── logic\n│   │   └── greetlogic.go\n│   ├── server\n│   │   └── streamgreeterserver.go\n│   └── svc\n│       └── servicecontext.go\n└── streamgreeter\n    └── streamgreeter.go\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template with goctl\nDESCRIPTION: This Bash command generates a proto template for creating a User RPC service, which can later be utilized for generating RPC service code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc template -o=user.proto\n```\n\n----------------------------------------\n\nTITLE: MongoDB Model Generation Options\nDESCRIPTION: Parameters for generating MongoDB models with options for cache generation, template customization, and model type specification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-commands.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngoctl model mongo -type=\"User\" -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: URL Shortening Database Schema\nDESCRIPTION: Define MySQL database schema for storing shortened URLs with primary key constraint\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `shorturl` (\n  `shorten` varchar(255) NOT NULL COMMENT 'shorten key',\n  `url` varchar(255) NOT NULL COMMENT 'original url',\n  PRIMARY KEY(`shorten`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: RPC Configuration Struct in Go\nDESCRIPTION: This Go code snippet defines a configuration struct necessary for setting up an RPC server. It embeds the RpcServerConf and includes MySQL and Redis cache configurations as nested structures.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    zrpc.RpcServerConf\n    Mysql struct {\n        DataSource string\n    }\n    CacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code with Redis Cache\nDESCRIPTION: Command to generate model code with Redis cache support using goctl for the 'user' table.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mysql datasource -url=\"root:password@tcp(127.0.0.1:3306)/gozero\" -table=\"user\" -dir ./model -c\n```\n\n----------------------------------------\n\nTITLE: Implementing the TaskContainer Interface in Go-Zero Executors\nDESCRIPTION: Definition of the TaskContainer interface in Go-Zero's executors package, which specifies methods for adding tasks, executing them, and removing all tasks from the container.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nTaskContainer interface {\n    // 把 task 加入 container\n    AddTask(task interface{}) bool\n    // 实际上是去执行传入的 execute func()\n\tExecute(tasks interface{})\n\t// 达到临界值，移除 container 中全部的 task，通过 channel 传递到 execute func() 执行\n\tRemoveAll() interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Correct Proto Import Example - Protocol Buffers\nDESCRIPTION: Example showing correct way of importing and using proto files within message definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"./greet\";\n\nimport \"base/common.proto\";\n\nmessage Request {\n  base.In in = 1;\n}\n\nmessage Response {\n base.Out out = 2;\n}\n\nservice Greet {\n  rpc Ping(Request) returns(Response);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Definition Template\nDESCRIPTION: Command to generate an API definition template file for defining the API Gateway's endpoints, request, and response structures.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api -o bookstore.api\n```\n\n----------------------------------------\n\nTITLE: Login Logic with Custom Error Handling\nDESCRIPTION: Implementation of login logic using custom error types for various error conditions\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nif len(strings.TrimSpace(req.Username)) == 0 || len(strings.TrimSpace(req.Password)) == 0 {\n        return nil, errorx.NewDefaultError(\"Invalid parameter\")\n    }\n\n    userInfo, err := l.svcCtx.UserModel.FindOneByNumber(req.Username)\n    switch err {\n    case nil:\n    case model.ErrNotFound:\n        return nil, errorx.NewDefaultError(\"Username does not exist\")\n    default:\n        return nil, err\n    }\n\n    if userInfo.Password != req.Password {\n        return nil, errorx.NewDefaultError(\"User password is incorrect\")\n    }\n\n    now := time.Now().Unix()\n    accessExpire := l.svcCtx.Config.Auth.AccessExpire\n    jwtToken, err := l.getJwtToken(l.svcCtx.Config.Auth.AccessSecret, now, l.svcCtx.Config.Auth.AccessExpire, userInfo.Id)\n    if err != nil {\n        return nil, err\n    }\n\n    return &types.LoginReply{\n        Id:           userInfo.Id,\n        Name:         userInfo.Name,\n        Gender:       userInfo.Gender,\n        AccessToken:  jwtToken,\n        AccessExpire: now + accessExpire,\n        RefreshAfter: now + accessExpire/2,\n    }, nil\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Code from Protobuf\nDESCRIPTION: Shell commands to generate Go code from the protobuf definition using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/mall/user/rpc\n$ goctl rpc template -o user.proto\n$ goctl rpc proto -src user.proto -dir .\n```\n\n----------------------------------------\n\nTITLE: Daily Task Initialization Example in Go\nDESCRIPTION: Example showing how to initialize and use BulkExecutor in a daily task service for MySQL to ClickHouse data synchronization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/executors.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) Init() {\n\tdts.insertExecutor = executors.NewBulkExecutor(\n\t\tdts.insertIntoCk,\n\t\texecutors.WithBulkInterval(time.Second*3),\n\t\texecutors.WithBulkTasks(10240),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dart Code for API - Go\nDESCRIPTION: Generates Dart code to access the API service, requiring the code storage directory and API source file indicated via flags.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api dart -dir ./dart_code -api user.api\n```\n\n----------------------------------------\n\nTITLE: Defining User RPC Service in Proto Format\nDESCRIPTION: This proto file snippet defines a User RPC service with a Login method. The messages for the login request and response are also structured to include username, password, name, and gender.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage remote;\n\noption go_package = \"remote\";\n  \nmessage Request {\n    // 用户名\n    string username = 1;\n    // 用户密码\n    string password = 2;\n  }\n\nmessage Response {\n    // 用户名称\n    string name = 1;\n    // 用户性别\n    string gender = 2;\n  }\n\nservice User {\n    // 登录\n    rpc Login(Request) returns(Response);\n  }\n```\n\n----------------------------------------\n\nTITLE: Port Assignment Script\nDESCRIPTION: Shell script for assigning ports to different services in the deployment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncase $1 in\n\"user-api\") echo 1000\n;;\n\"user-rpc\") echo 1001\n;;\n\"course-api\") echo 1002\n;;\n\"course-rpc\") echo 1003\n;;\n\"selection-api\") echo 1004\nesac\n```\n\n----------------------------------------\n\nTITLE: Displaying Goctl API Go Subcommand Help\nDESCRIPTION: Shows the help information for the goctl api go subcommand, which is used to generate Golang API services.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-api.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api go -h\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api go - generate go files for provided api in yaml file\n\nUSAGE:\n   goctl api go [command options] [arguments...]\n\nOPTIONS:\n   --dir value    the target dir\n   --api value    the api file\n   --style value  the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n```\n\n----------------------------------------\n\nTITLE: LogConf Structure Definition\nDESCRIPTION: Defines the configuration structure for the logging system including service name, mode, path, and other settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/logx.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype LogConf struct {\n\tServiceName         string `json:\",optional\"`\n\tMode                string `json:\",default=console,options=console|file|volume\"`\n\tPath                string `json:\",default=logs\"`\n\tLevel               string `json:\",default=info,options=info|error|severe\"`\n\tCompress            bool   `json:\",optional\"`\n\tKeepDays            int    `json:\",optional\"`\n\tStackCooldownMillis int    `json:\",default=100\"`\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template for Add RPC Service\nDESCRIPTION: Command to create a Protocol Buffers template file for the Add RPC service that will handle adding books to the store.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc template -o add.proto\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code from DDL in Go-Zero\nDESCRIPTION: This command generates model code from a SQL DDL file using goctl. It creates model files with caching enabled in the current directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/model-gen.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd service/user/model\n$ goctl model mysql ddl -src user.sql -dir . -c\n```\n\n----------------------------------------\n\nTITLE: Moving Tasks in the TimingWheel\nDESCRIPTION: This function handles repositioning a task in the timing wheel when its delay time changes. It calculates the new position and circle value, and updates or reschedules the task accordingly. It also handles immediate execution for tasks with very short delays.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/timingWheel.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (tw *TimingWheel) moveTask(task baseEntry) {\n\t// timers: Map => 通过key获取 [positionEntry「pos, task」]\n\tval, ok := tw.timers.Get(task.key)\n\tif !ok {\n\t\treturn\n\t}\n\n\ttimer := val.(*positionEntry)\n  \t// {delay < interval} => 延迟时间比一个时间格间隔还小，没有更小的刻度，说明任务应该立即执行\n\tif task.delay < tw.interval {\n\t\tthreading.GoSafe(func() {\n\t\t\ttw.execute(timer.item.key, timer.item.value)\n\t\t})\n\t\treturn\n\t}\n\t// 如果 > interval，则通过 延迟时间delay 计算其出时间轮中的 new pos, circle\n\tpos, circle := tw.getPositionAndCircle(task.delay)\n\tif pos >= timer.pos {\n\t\ttimer.item.circle = circle\n                // 记录前后的移动offset。为了后面过程重新入队\n\t\ttimer.item.diff = pos - timer.pos\n\t} else if circle > 0 {\n\t\t// 转移到下一层，将 circle 转换为 diff 一部分\n\t\tcircle--\n\t\ttimer.item.circle = circle\n\t\t// 因为是一个数组，要加上 numSlots [也就是相当于要走到下一层]\n\t\ttimer.item.diff = tw.numSlots + pos - timer.pos\n\t} else {\n\t\t// 如果 offset 提前了，此时 task 也还在第一层\n\t\t// 标记删除老的 task，并重新入队，等待被执行\n\t\ttimer.item.removed = true\n\t\tnewItem := &timingEntry{\n\t\t\tbaseEntry: task,\n\t\t\tvalue:     timer.item.value,\n\t\t}\n\t\ttw.slots[pos].PushBack(newItem)\n\t\ttw.setTimerPosition(pos, newItem)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating API Service Code\nDESCRIPTION: Shell commands to generate Go service code from the API definition using goctl CLI tool.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-coding.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd book/service/user/api\n$ goctl api go -api user.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Install protoc-gen-go\nDESCRIPTION: Downloads and installs the protoc-gen-go plugin using `go get`. This plugin is used to generate Go code from protobuf definitions. It requires Go Modules to be enabled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ go get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go Package\nDESCRIPTION: Command to install the protoc-gen-go package at version 1.3.2 using go get\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Type Syntax Block Examples\nDESCRIPTION: Shows correct and recommended type definitions for structures in Zero Micro API syntax\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_4\n\nLANGUAGE: api\nCODE:\n```\ntype Foo{\n    Id int `path:\"id\"`\n    Foo int `json:\"foo\"`\n}\n\ntype Bar{\n    Bar int `form:\"bar\"`\n}\n\ntype(\n    FooBar{\n        FooBar int `json:\"fooBar\"`\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: MapReduceWithSource Implementation in go-zero\nDESCRIPTION: Shows the core implementation of the MapReduceWithSource function, which handles concurrent data processing using channels and goroutines.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/other-component/mapreduce.md#2025-04-22_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc MapReduceWithSource(source <-chan interface{}, mapper MapperFunc, reducer ReducerFunc,\n    opts ...Option) (interface{}, error) {\n    options := buildOptions(opts...)\n    output := make(chan interface{})\n    defer func() {\n        for range output {\n            panic(\"more than one element written in reducer\")\n        }\n    }()\n    collector := make(chan interface{}, options.workers)\n    done := syncx.NewDoneChan()\n    writer := newGuardedWriter(output, done.Done())\n    var closeOnce sync.Once\n    var retErr errorx.AtomicError\n    finish := func() {\n        closeOnce.Do(func() {\n            done.Close()\n            close(output)\n        })\n    }\n    cancel := once(func(err error) {\n        if err != nil {\n            retErr.Set(err)\n        } else {\n            retErr.Set(ErrCancelWithNil)\n        }\n        drain(source)\n        finish()\n    })\n\n    go func() {\n        defer func() {\n            drain(collector)\n            if r := recover(); r != nil {\n                cancel(fmt.Errorf(\"%v\", r))\n            } else {\n                finish()\n            }\n        }()\n        reducer(collector, writer, cancel)\n    }()\n    go executeMappers(func(item interface{}, w Writer) {\n        mapper(item, w, cancel)\n    }, source, collector, done.Done(), options.workers)\n    value, ok := <-output\n    if err := retErr.Load(); err != nil {\n        return nil, err\n    } else if ok {\n        return value, nil\n    } else {\n        return nil, ErrReduceNoOutput\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Tasks in Go\nDESCRIPTION: Go function to register multiple job tasks using a service group.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/go-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage handler\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/logic\"\n\t\"job/internal/svc\"\n)\n\nfunc RegisterJob(serverCtx *svc.ServiceContext,group *service.ServiceGroup)  {\n\n\tgroup.Add(logic.NewProducerLogic(context.Background(),serverCtx))\n\tgroup.Add(logic.NewConsumerLogic(context.Background(),serverCtx))\n\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Server Configuration Structure\nDESCRIPTION: Go struct defining RPC server configuration including MySQL and Redis cache settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    zrpc.RpcServerConf\n    Mysql struct {\n        DataSource string\n    }\n    CacheRedis cache.CacheConf\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Microservices Directory\nDESCRIPTION: This code snippet illustrates a proposed structure for organizing microservices in a project. Generally, it separates the API and RPC components into distinct directories, each containing subfolders for configuration, logic, and service handling. This structuring helps in maintaining a scalable and well-organized codebase which is crucial for large-scale applications.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/online-exchange.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n  bookstore\n  ├── api\n  │   ├── etc\n  │   └── internal\n  │       ├── config\n  │       ├── handler\n  │       ├── logic\n  │       ├── svc\n  │       └── types\n  └── rpc\n  ├── add\n  │   ├── adder\n  │   ├── etc\n  │   ├── internal\n  │   │   ├── config\n  │   │   ├── logic\n  │   │   ├── server\n  │   │   └── svc\n  │   └── pb\n  ├── check\n  │   ├── checker\n  │   ├── etc\n  │   ├── internal\n  │   │   ├── config\n  │   │   ├── logic\n  │   │   ├── server\n  │   │   └── svc\n  │   └── pb\n  └── model\n```\n\n----------------------------------------\n\nTITLE: Incorrect Proto Import Example - Protocol Buffers\nDESCRIPTION: Example showing incorrect way of importing proto files with direct use in service definition.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"./greet\";\n\nimport \"base/common.proto\";\n\nmessage Request {\n  string ping = 1;\n}\n\nmessage Response {\n  string pong = 1;\n}\n\nservice Greet {\n  rpc Ping(base.In) returns(base.Out);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Module Environment in Shell\nDESCRIPTION: These commands demonstrate how to configure the Go Module environment, including checking and setting GO111MODULE, GOPROXY, and GOMODCACHE.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ go env GO111MODULE\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ go env -w GO111MODULE=\"on\"\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ go env -w GOPROXY=https://goproxy.cn\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ go env GOMODCACHE\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo env -w GOMODCACHE=$GOPATH/pkg/mod\n```\n\n----------------------------------------\n\nTITLE: Main Function for go-zero Greet API\nDESCRIPTION: The main function of the Greet API, responsible for loading configuration, setting up the server, and registering handlers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\n\t\"greet/internal/config\"\n\t\"greet/internal/handler\"\n\t\"greet/internal/svc\"\n\n\t\"github.com/zeromicro/go-zero/core/conf\"\n\t\"github.com/zeromicro/go-zero/rest\"\n)\n\nvar configFile = flag.String(\"f\", \"etc/greet-api.yaml\", \"the config file\")\n\nfunc main() {\n\tflag.Parse()\n\n\tvar c config.Config\n\tconf.MustLoad(*configFile, &c)\n\n\tctx := svc.NewServiceContext(c)\n\tserver := rest.MustNewServer(c.RestConf)\n\tdefer server.Stop()\n\n\thandler.RegisterHandlers(server, ctx)\n\n\tfmt.Printf(\"Starting server at %s:%d...\\n\", c.Host, c.Port)\n\tserver.Start()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BulkExecutor with Options in Go\nDESCRIPTION: Creates a new BulkExecutor instance with configurable options for batch task processing. Uses functional options pattern for configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/executors.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc NewBulkExecutor(execute Execute, opts ...BulkOption) *BulkExecutor {\n\toptions := newBulkOptions()\n\tfor _, opt := range opts {\n\t\topt(&options)\n\t}\n\tcontainer := &bulkContainer{\n\t\texecute:  execute,\n\t\tmaxTasks: options.cachedTasks,\n\t}\n\texecutor := &BulkExecutor{\n\t\texecutor:  NewPeriodicalExecutor(options.flushInterval, container),\n\t\tcontainer: container,\n\t}\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Templates with goctl\nDESCRIPTION: The command initializes all templates and forces an update in the goctl environment. It allows specifying the home path for templates using the '--home' option.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template init - initialize the all templates(force update)\n\nUSAGE:\n   goctl template init [command options] [arguments...]\n\nOPTIONS:\n   --home value  the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Handler Shorthand Example\nDESCRIPTION: Example showing shortened handler syntax in API definition\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-api.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n@handler CreateProfileHandler\npost /api/profile/create(CreateRequest)\n```\n\n----------------------------------------\n\nTITLE: ANTLR v4 Info Block Definition\nDESCRIPTION: ANTLR grammar definition for info syntax blocks containing key-value pairs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_5\n\nLANGUAGE: antlrv4\nCODE:\n```\n'info' '(' (ID {checkKeyValue(p)}VALUE)+ ')'\n```\n\n----------------------------------------\n\nTITLE: Viewing the greet API Service Directory Structure\nDESCRIPTION: The directory structure of the generated greet API service, showing configuration files, API definition, handlers, logic implementation, and type definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── etc\n│   └── greet-api.yaml\n├── go.mod\n├── greet.api\n├── greet.go\n└── internal\n    ├── config\n    │   └── config.go\n    ├── handler\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic\n    │   └── greetlogic.go\n    ├── svc\n    │   └── servicecontext.go\n    └── types\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: ANTLR v4 Syntax Statement Definition\nDESCRIPTION: ANTLR grammar definition for syntax statements that define API version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_1\n\nLANGUAGE: antlrv4\nCODE:\n```\n'syntax'={checkVersion(p)}STRING\n```\n\n----------------------------------------\n\nTITLE: Validating API File - Go\nDESCRIPTION: Validates that the specified API file is valid using goctl. The '-api' flag is used to specify the source API file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api validate -api user.api\n```\n\n----------------------------------------\n\nTITLE: Custom Error Type Implementation\nDESCRIPTION: Implementation of custom error types with JSON support in Go\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage errorx\n\nconst defaultCode = 1001\n\ntype CodeError struct {\n    Code int    `json:\"code\"`\n    Msg  string `json:\"msg\"`\n}\n\ntype CodeErrorResponse struct {\n    Code int    `json:\"code\"`\n    Msg  string `json:\"msg\"`\n}\n\nfunc NewCodeError(code int, msg string) error {\n    return &CodeError{Code: code, Msg: msg}\n}\n\nfunc NewDefaultError(msg string) error {\n    return NewCodeError(defaultCode, msg)\n}\n\nfunc (e *CodeError) Error() string {\n    return e.Msg\n}\n\nfunc (e *CodeError) Data() *CodeErrorResponse {\n    return &CodeErrorResponse{\n        Code: e.Code,\n        Msg:  e.Msg,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Search API Configuration Integration\nDESCRIPTION: Configuration structure for search API including user RPC client settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    rest.RestConf\n    Auth struct {\n        AccessSecret string\n        AccessExpire int64\n    }\n    UserRpc zrpc.RpcClientConf\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Zero's CLI Tool (goctl)\nDESCRIPTION: Command to install goctl, the command-line tool for Go-Zero that generates boilerplate code for microservices.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile with goctl\nDESCRIPTION: Command to generate a Dockerfile for a Go-Zero service using goctl docker.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngoctl docker -go hello.go\n```\n\n----------------------------------------\n\nTITLE: Info Block Syntax Examples\nDESCRIPTION: Demonstrates different ways of defining info blocks with key-value pairs in API files\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_3\n\nLANGUAGE: api\nCODE:\n```\ninfo(\n    foo: \"foo value\"\n    bar: \"bar value\"\n    desc: \"long long long long long long text\"\n)\n```\n\n----------------------------------------\n\nTITLE: Data Processing with executeMappers in Go\nDESCRIPTION: This code defines the `executeMappers` function, responsible for concurrently processing data items from the input channel using the provided mapper function. It uses a worker pool to limit the number of concurrent mapper executions. The function also handles error scenarios and ensures proper cleanup of resources.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 数据加工\nfunc executeMappers(mapper MapFunc, input <-chan interface{}, collector chan<- interface{},\n    done <-chan lang.PlaceholderType, workers int) {\n    // goroutine协调同步信号量\n    var wg sync.WaitGroup\n    defer func() {\n        // 等待数据加工任务完成\n        // 防止数据加工的协程还未处理完数据就直接退出了\n        wg.Wait()\n        // 关闭数据加工channel\n        close(collector)\n    }()\n    // 带缓冲区的channel，缓冲区大小为workers\n    // 控制数据加工的协程数量\n    pool := make(chan lang.PlaceholderType, workers)\n    // 数据加工writer\n    writer := newGuardedWriter(collector, done)\n    for {\n        select {\n        // 监听到外部结束信号，直接结束\n        case <-done:\n            return\n        // 控制数据加工协程数量\n        // 缓冲区容量-1\n        // 无容量时将会被阻塞，等待释放容量\n        case pool <- lang.Placeholder:\n            // 阻塞等待生产数据channel\n            item, ok := <-input\n            // 如果ok为false则说明input已被关闭或者清空\n            // 数据加工完成，执行退出\n            if !ok {\n                // 缓冲区容量+1\n                <-pool\n                // 结束本次循环\n                return\n            }\n            // wg同步信号量+1\n            wg.Add(1)\n            // better to safely run caller defined method\n            // 异步执行数据加工，防止panic错误\n            threading.GoSafe(func() {\n                defer func() {\n                    // wg同步信号量-1\n                    wg.Done()\n                    // 缓冲区容量+1\n                    <-pool\n                }()\n\n                mapper(item, writer)\n            })\n        }\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Return Statement Formatting in go-zero\nDESCRIPTION: Shows the proper way to format functions with return statements by adding an empty line before the return for improved readability.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/specification.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc getUser(id string)(string,error){\n    ....\n\n    return \"xx\",nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Service Protocol Buffer\nDESCRIPTION: Defines the protocol buffer schema for the user RPC service with getUser method.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_1\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage user;\n    \noption go_package = \"./user\";\n  \nmessage IdRequest {\n    string id = 1;\n}\n    \nmessage UserResponse {\n    string id = 1;\n    string name = 2;\n    string gender = 3;\n}\n    \nservice User {\n    rpc getUser(IdRequest) returns(UserResponse);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Settings in YAML Config\nDESCRIPTION: The YAML configuration file with JWT settings added under the Auth section. Includes access secret and token expiration time in seconds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: user:password@tcp(127.0.0.1:3306)/gozero?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nAuth:\n  AccessSecret: ad879037-c7a4-4063-9236-6bfc35d54b7d\n  AccessExpire: 86400\n```\n\n----------------------------------------\n\nTITLE: Running Check RPC Service\nDESCRIPTION: Command to start the Check RPC service with the specified configuration file on port 8081.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ngo run check.go -f etc/check.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code (DDL)\nDESCRIPTION: This shell command uses `goctl` to generate model code from a SQL DDL file (`user.sql`). The `-src` flag specifies the source file, `-dir` specifies the output directory (current directory), and `-c` enables cache integration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cd service/user/model\n$ goctl model mysql ddl -src user.sql -dir . -c\n```\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Grammar definition for single-line comments\nDESCRIPTION: Defines the grammar rule for single-line comments, specifying that they must start with `//` and cannot contain newline characters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_14\n\nLANGUAGE: antlrv4\nCODE:\n```\n\"'//' ~[\\r\\n]*\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Goctl Model Help Information (Shell)\nDESCRIPTION: Shows the help information for the goctl model command, including available subcommands and options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model -h\n\nNAME:\n   goctl model - generate model code\n\nUSAGE:\n   goctl model command [command options] [arguments...]\n\nCOMMANDS:\n   mysql  generate mysql model\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Implementing the Add Method in PeriodicalExecutor\nDESCRIPTION: Implementation of the Add method in PeriodicalExecutor, which adds a task to the container and initiates task execution if needed. It manages task buffering and background processing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) Add(task interface{}) {\n\tif vals, ok := pe.addAndCheck(task); ok {\n\t\tpe.commander <- vals\n\t\t<-pe.confirmChan\n\t}\n}\n\nfunc (pe *PeriodicalExecutor) addAndCheck(task interface{}) (interface{}, bool) {\n\tpe.lock.Lock()\n\tdefer func() {\n        // 一开始为 false\n\t\tvar start bool\n\t\tif !pe.guarded {\n            // backgroundFlush() 会将 guarded 重新置反\n\t\t\tpe.guarded = true\n\t\t\tstart = true\n\t\t}\n\t\tpe.lock.Unlock()\n        // 在第一条 task 加入的时候就会执行 if 中的 backgroundFlush()。后台协程刷task\n\t\tif start {\n\t\t\tpe.backgroundFlush()\n\t\t}\n\t}()\n\t// 控制maxTask，>=maxTask 将container中tasks pop, return\n\tif pe.container.AddTask(task) {\n\t\treturn pe.container.RemoveAll(), true\n\t}\n\n\treturn nil, false\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Configuration Structure\nDESCRIPTION: Go structure for parsing queue configuration from YAML file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/go-queue.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n\t\"github.com/zeromicro/go-queue/dq\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n)\n\ntype Config struct {\n\tservice.ServiceConf\n\tDqConf dq.DqConf\n}\n```\n\n----------------------------------------\n\nTITLE: Histogram Observation in go-zero Metrics\nDESCRIPTION: This code snippet from go-zero's metric package illustrates how histogram observations are implemented.  It shows how the code atomically updates the count, sum, and bucket values when a new observation is made, ensuring thread safety.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/metric.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// Basically the statistics in prometheus are counted using the atomic CAS method\n// performance is higher than using Mutex\nfunc (h *histogram) observe(v float64, bucket int) {\n n := atomic.AddUint64(&h.countAndHotIdx, 1)\n hotCounts := h.counts[n>>63]\n\n if bucket < len(h.upperBounds) {\n    // val Corresponding data bucket +1\n  atomic.AddUint64(&hotCounts.buckets[bucket], 1)\n }\n for {\n  oldBits := atomic.LoadUint64(&hotCounts.sumBits)\n  newBits := math.Float64bits(math.Float64frombits(oldBits) + v)\n    // sum indicator value +v (after all, it is the total sum)\n  if atomic.CompareAndSwapUint64(&hotCounts.sumBits, oldBits, newBits) {\n   break\n  }\n }\n // count Statistics +1\n atomic.AddUint64(&hotCounts.count, 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining gRPC Resolver Builder Interface\nDESCRIPTION: Interface definition for custom resolver builders in gRPC, specifying methods to build and identify resolver schemes\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Builder interface {\n\tBuild(target Target, cc ClientConn, opts BuildOptions) (Resolver, error)\n\tScheme() string\n}\n```\n\n----------------------------------------\n\nTITLE: Irregular Type Declaration Example in Zero API\nDESCRIPTION: Demonstrates non-standard but valid type declarations including struct keyword usage and exported/non-exported fields with various tags.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_7\n\nLANGUAGE: api\nCODE:\n```\ntype Foo struct{\n    Id int `path:\"id\"` \n    Foo int `json:\"foo\"`\n}\n\ntype Bar struct{\n    // Non-exported field\n    bar int `form:\"bar\"`\n}\n\ntype(\n    // Non-derived structure\n    fooBar struct{\n        FooBar int\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code (Datasource)\nDESCRIPTION: This shell command uses `goctl` to generate model code by connecting to a MySQL datasource.  The `-url` flag specifies the database connection string, `-table` specifies the table name (`user`), `-c` enables cache integration, and `-dir` specifies the output directory (current directory).\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"$datasource\" -table=\"user\" -c -dir .\n```\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Stream Reverse Example\nDESCRIPTION: Demonstrates how to reverse elements in a stream using the Reverse operation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(1, 2, 3, 4, 5).Reverse().ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Line Comments in ANTLR4\nDESCRIPTION: This snippet defines the syntax for single-line comments in ANTLR4. Comments must start with '//' and cannot contain newline characters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_3\n\nLANGUAGE: antlrv4\nCODE:\n```\n'//' ~[\\r\\n]*\n```\n\n----------------------------------------\n\nTITLE: Etcd Configuration Structure in Go\nDESCRIPTION: Configuration structure for etcd service discovery settings, including hosts and registration key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-config.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype EtcdConf struct {\n\tHosts []string // etcd host数组\n\tKey   string // rpc注册key\n}\n```\n\n----------------------------------------\n\nTITLE: RPC Service Configuration\nDESCRIPTION: YAML configuration for RPC service including MySQL, Redis and ETCD settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nName: common.rpc\nListenOn: 127.0.0.1:8081\nMysql:\n  DataSource: root:admin@tcp(127.0.0.1:3306)/datacenter?charset=utf8&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n- Host: 127.0.0.1:6379\n  Pass:\n  Type: node  \nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: common.rpc\n```\n\n----------------------------------------\n\nTITLE: Install Goctl (Go 1.16 and above)\nDESCRIPTION: Installs Goctl using `go install` with a specific GOPROXY for Go versions 1.16 and above.  This is the recommended way to install Go binaries with modules enabled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# Go 1.16 及以后版本\n    GOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Expand API Response Example\nDESCRIPTION: This HTTP response shows the expected output from the expand API endpoint. The response includes the HTTP status code (200 OK), content type (application/json), and a JSON object containing the original URL. The `url` field in the JSON object contains the expanded URL.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_8\n\nLANGUAGE: http\nCODE:\n```\n\"HTTP/1.1 200 OK\\nContent-Type: application/json\\nDate: Sat, 29 Aug 2020 10:51:53 GMT\\nContent-Length: 34\\n\\n{\\\"url\\\":\\\"http://www.xiaoheiban.cn\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Enable Go Modules\nDESCRIPTION: Enables Go Modules by setting the GO111MODULE environment variable to \"on\".  This is required to use Go Modules for dependency management.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GO111MODULE=\"on\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Service Registration with etcd\nDESCRIPTION: Command to check if the service is properly registered in etcd using etcdctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nETCDCTL_API=3 etcdctl get hello.rpc --prefix\n```\n\n----------------------------------------\n\nTITLE: Proto Definition for Transform Service\nDESCRIPTION: Protocol buffer definition for the transform RPC service containing message and service definitions\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_3\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage transform;\n\nmessage expandReq {\n    string shorten = 1;\n}\n\nmessage expandResp {\n    string url = 1;\n}\n\nmessage shortenReq {\n    string url = 1;\n}\n\nmessage shortenResp {\n    string shorten = 1;\n}\n\nservice transformer {\n    rpc expand(expandReq) returns(expandResp);\n    rpc shorten(shortenReq) returns(shortenResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ServiceContext in Go\nDESCRIPTION: ServiceContext implementation for the borrow API service, including RPC clients and model dependencies.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n\t\"book/borrow/api/internal/config\"\n\t\"book/borrow/model\"\n\t\"book/library/rpc/libraryclient\"\n\t\"book/user/rpc/user\"\n\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n\t\"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype ServiceContext struct {\n\tConfig            config.Config\n\tBorrowSystemModel model.BorrowSystemModel\n\tUserRpc           userclient.User\n\tLibraryRpc        libraryclient.Library\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n\tconn := sqlx.NewMysql(c.Mysql.DataSource)\n\tur := userclient.NewUser(zrpc.MustNewClient(c.UserRpc))\n\tlr := libraryclient.NewLibrary(zrpc.MustNewClient(c.LibraryRpc))\n\treturn &ServiceContext{\n\t\tConfig:            c,\n\t\tBorrowSystemModel: model.NewBorrowSystemModel(conn),\n\t\tUserRpc:           ur,\n\t\tLibraryRpc:        lr,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Schema Definition for User Table\nDESCRIPTION: Example SQL DDL script for creating a user table with various fields including name, password, mobile, gender, and nickname.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n-- 用户表 --\nCREATE TABLE `user` (\n  `id` bigint(10) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '用户名称',\n  `password` varchar(255) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '用户密码',\n  `mobile` varchar(255) COLLATE utf8mb4_general_ci NOT NULL DEFAULT '' COMMENT '手机号',\n  `gender` char(5) COLLATE utf8mb4_general_ci NOT NULL COMMENT '男｜女｜未公开',\n  `nickname` varchar(255) COLLATE utf8mb4_general_ci DEFAULT '' COMMENT '用户昵称',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name_index` (`name`),\n  UNIQUE KEY `mobile_index` (`mobile`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;\n```\n\n----------------------------------------\n\nTITLE: Defining Config Structure in Go\nDESCRIPTION: Config structure definition adding transform service dependency\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\trest.RestConf\n\tTransform zrpc.RpcClientConf     // manual code\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Generated API Service with curl\nDESCRIPTION: Command to test the generated API service using curl, which by default listens on port 8888.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro/brief.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl using Go Get Command\nDESCRIPTION: This snippet shows how to install Goctl, a crucial tool for go-zero project development, using the go get command for different Go versions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n# Go 1.15 and earlier\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl@latest\n\n# Go 1.16 and later\nGOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Generating API Service Example\nDESCRIPTION: Demonstrates how to use the goctl api go command to generate an API service, specifying the API file, output directory, and code style.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-api.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -api user.api -dir . -style gozero\n```\n\n----------------------------------------\n\nTITLE: Check Go Mod Cache\nDESCRIPTION: Checks the current value of the GOMODCACHE environment variable, which specifies the location of the Go module cache.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GOMODCACHE\n```\n\n----------------------------------------\n\nTITLE: Example API Response\nDESCRIPTION: Sample HTTP response from the generated API endpoint.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nDate: Sun, 30 Aug 2020 15:32:35 GMT\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Deployment YAML with goctl\nDESCRIPTION: Command to generate a Kubernetes deployment YAML file for a Redis service using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoctl kube deploy -name redis -namespace adhoc -image redis:6-alpine -o redis.yaml -port 6379\n```\n\n----------------------------------------\n\nTITLE: Generating gRPC Code with goctl\nDESCRIPTION: Shell command for generating Go code from protocol buffer definition using goctl, including environment checks and protoc compilation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-dir.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl rpc protoc greet.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Configuring RPC Client in Go-Zero Search API\nDESCRIPTION: Adds UserRpc configuration to the Config struct and updates the YAML configuration file for the search API to include UserRpc settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_14\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n    rest.RestConf\n    Auth struct {\n        AccessSecret string\n        AccessExpire int64\n    }\n    UserRpc zrpc.RpcClientConf\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nName: search-api\nHost: 0.0.0.0\nPort: 8889\nAuth:\n  AccessSecret: $AccessSecret\n  AccessExpire: $AccessExpire\nUserRpc:\n  Etcd:\n    Hosts:\n      - $etcdHost\n    Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: Executing Goctl Plugin Command\nDESCRIPTION: Example command showing how to execute a Goctl plugin for Android code generation with custom package parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-plugin.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n$ goctl api plugin -p goctl-android=\"android -package com.tal\" -api user.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Template with goctl\nDESCRIPTION: Command to generate a Protocol Buffers template file for RPC service definition using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc template -o add.proto\n```\n\n----------------------------------------\n\nTITLE: Before and After Template Modification\nDESCRIPTION: Illustrates code transformation resulting from template customization, showing handler function changes and response struct configuration updates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc GreetHandler(ctx *svc.ServiceContext) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\tvar req types.Request\n\t\tif err := httpx.Parse(r, &req); err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t\treturn\n\t\t}\n\n\t\tl := logic.NewGreetLogic(r.Context(), ctx)\n\t\tresp, err := l.Greet(req)\n\t\t// Following content will be replaced by custom template\n\t\tif err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t} else {\n\t\t\thttpx.OkJson(w, resp)\n\t\t}\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Directory Structure of RPC Service\nDESCRIPTION: This snippet displays the directory structure of the generated RPC service after executing the goctl command. It lists all the files and folders that make up the RPC service, providing a clear overview of the project's organization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n➜ rpc tree\n.\n├── common\n│  └── common.pb.go\n├── common.go\n├── common.proto\n├── commonclient\n│  └── common.go\n├── etc\n│  └── common.yaml\n└── internal\n├── config\n│  └── config.go\n├── logic\n│  ├── getappconfiglogic.go\n│  └── getbaseapplogic.go\n├── server\n│  └── commonserver.go\n└── svc\n└── servicecontext.go\n\n8 directories, 10 files\n```\n\n----------------------------------------\n\nTITLE: Verify Protoc Installation\nDESCRIPTION: Verifies the successful installation of protoc by checking its version. It requires that protoc is installed and its directory is in the PATH.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ protoc --version\n```\n\n----------------------------------------\n\nTITLE: Configuring GitLab CI for Go-Zero Project Testing\nDESCRIPTION: This YAML configuration sets up a basic CI pipeline for a Go-Zero project. It defines a single stage for analysis, which runs Go tests on the project. The pipeline uses the official Golang Docker image as the execution environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/cicd.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n- analysis\n\nanalysis:\nstage: analysis\nimage: golang\nscript:\n- go version && go env\n- go test -short $(go list ./...) | grep -v \"no test\"\n```\n\n----------------------------------------\n\nTITLE: Starting go-zero Greet Service\nDESCRIPTION: Shows the command to start the go-zero greet service using the configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-api.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/greet\n$ go run greet.go -f etc/greet-api.yaml\n```\n\nLANGUAGE: text\nCODE:\n```\nStarting server at 0.0.0.0:8888...\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Datacenter Project\nDESCRIPTION: Shell commands to create a new Go module for the datacenter project\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n➜ blogs mkdir datacenter && cd datacenter\n➜ datacenter go mod init datacenter\ngo: creating new go.mod: module datacenter\n➜ datacenter\n```\n\n----------------------------------------\n\nTITLE: Stream Distinct Function Example\nDESCRIPTION: Shows how to remove duplicate elements from a stream using the Distinct operation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/stream.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfx.Just(1, 2, 2, 2, 3, 3, 4, 5, 6).Distinct(func(item interface{}) interface{} {\n  return item\n}).ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logx Configuration in Go\nDESCRIPTION: Shows how to initialize logx configuration. If not explicitly set up, default configuration will be used.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nlogx.MustSetUp(c)\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Resolvers\nDESCRIPTION: Method for registering custom resolvers using gRPC's resolver.Register function to enable service discovery\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc RegisterResolver() {\n\tresolver.Register(&dirBuilder)\n\tresolver.Register(&disBuilder)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying API Command Help\nDESCRIPTION: Shows the help menu for goctl api command, listing all available subcommands and options for API-related file generation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api -h\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api - generate api related files\n\nUSAGE:\n   goctl api command [command options] [arguments...]\n\nCOMMANDS:\n   new       fast create api service\n   format    format api files\n   validate  validate api file\n   doc       generate doc files\n   go        generate go files for provided api in yaml file\n   java      generate java files for provided api in api file\n   ts        generate ts files for provided api in api file\n   dart      generate dart files for provided api in api file\n   kt        generate kotlin code for provided api file\n   plugin    custom file generator\n\nOPTIONS:\n   -o value    the output api file\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Generating Front-end Code from API File\nDESCRIPTION: Commands to generate Java, Dart, and other front-end code based on the defined API file using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro/brief.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ngoctl api java -api greet.api -dir greet\ngoctl api dart -api greet.api -dir greet\n...\n```\n\n----------------------------------------\n\nTITLE: Complete Workflow in Terminal 1\nDESCRIPTION: A complete sequence of commands showing the entire workflow from creating a new service to running it, including resolving dependencies using Go Modules.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl api new greet\nDone.\n$ cd greet \n$ ls\netc  greet.api  greet.go  internal\n$ go run greet.go etc/greet-api.yaml             \ngreet.go:11:2: cannot find package \"github.com/zeromicro/go-zero/core/conf\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/core/conf (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/core/conf (from $GOPATH)\ninternal/logic/greetlogic.go:9:2: cannot find package \"github.com/zeromicro/go-zero/core/logx\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/core/logx (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/core/logx (from $GOPATH)\ngreet.go:12:2: cannot find package \"github.com/zeromicro/go-zero/rest\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/rest (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/rest (from $GOPATH)\ninternal/handler/greethandler.go:10:2: cannot find package \"github.com/zeromicro/go-zero/rest/httpx\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/rest/httpx (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/rest/httpx (from $GOPATH)\n$ go mod init  \ngo: creating new go.mod: module greet\n$ go run greet.go etc/greet-api.yaml\ngo: finding module for package github.com/zeromicro/go-zero/core/conf\ngo: finding module for package github.com/zeromicro/go-zero/rest\ngo: finding module for package github.com/zeromicro/go-zero/rest/httpx\ngo: finding module for package github.com/zeromicro/go-zero/core/logx\ngo: found github.com/zeromicro/go-zero/core/conf in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/rest in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/rest/httpx in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/core/logx in github.com/zeromicro/go-zero v1.3.0\nStarting server at 0.0.0.0:8888...\n{\"@timestamp\":\"2020-10-22T23:22:17.248+08\",\"level\":\"info\",\"content\":\"200 - /from/you - 127.0.0.1:56136 - curl/7.68.0 - 0.1ms\",\"trace\":\"6b2d6d3c733233e9\",\"span\":\"0\"}\n```\n\n----------------------------------------\n\nTITLE: Defining Etcd Configuration Struct - Go\nDESCRIPTION: Defines the structure for Etcd configuration, specifying the hosts and rpc registration key necessary for service discovery.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/config.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype EtcdConf struct {\n\tHosts []string // etcd host数组\n\tKey   string // rpc注册key\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Borrow System Table in SQL\nDESCRIPTION: SQL script to create the 'borrow_system' table for tracking book borrowing information in the library management system.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `borrow_system` (\n  `id` bigint NOT NULL AUTO_INCREMENT,\n  `book_no` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL DEFAULT '' COMMENT '书籍号',\n  `user_id` bigint NOT NULL COMMENT '借书人',\n  `status` tinyint(1) DEFAULT '0' COMMENT '书籍状态，0-未归还，1-已归还',\n  `return_plan_date` timestamp NOT NULL COMMENT '预计还书时间',\n  `return_date` int DEFAULT '0' COMMENT '实际还书时间',\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `user_idx` (`user_id`,`book_no`) USING BTREE,\n  KEY `book_no_idx` (`book_no`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n```\n\n----------------------------------------\n\nTITLE: Streaming Data Example with go-zero fx\nDESCRIPTION: This code demonstrates a simple streaming data processing pipeline using go-zero's fx package. It simulates data input using the inputStream function, and processes the data in the outputStream function. The outputStream uses fx.From to create a stream, Walk to process each item, Filter to keep only even numbers, and ForEach to print the results.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n\n\t\"github.com/zeromicro/go-zero/core/fx\"\n)\n\nfunc main() {\n\tch := make(chan int)\n\n\tgo inputStream(ch)\n\tgo outputStream(ch)\n\n\tc := make(chan os.Signal, 1)\n\tsignal.Notify(c, syscall.SIGTERM, syscall.SIGINT)\n\t<-c\n}\n\nfunc inputStream(ch chan int) {\n\tcount := 0\n\tfor {\n\t\tch <- count\n\t\ttime.Sleep(time.Millisecond * 500)\n\t\tcount++\n\t}\n}\n\nfunc outputStream(ch chan int) {\n\tfx.From(func(source chan<- interface{}) {\n\t\tfor c := range ch {\n\t\t\tsource <- c\n\t\t}\n\t}).Walk(func(item interface{}, pipe chan<- interface{}) {\n\t\tcount := item.(int)\n\t\tpipe <- count\n\t}).Filter(func(item interface{}) bool {\n\t\titemInt := item.(int)\n\t\tif itemInt%2 == 0 {\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}).ForEach(func(item interface{}) {\n\t\tfmt.Println(item)\n\t})\n}\n\n```\n\n----------------------------------------\n\nTITLE: Goctl Version Output\nDESCRIPTION: Shows the expected output after running the command to check Goctl's version, displaying the version number and the target operating system and architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_17\n\nLANGUAGE: text\nCODE:\n```\ngoctl version 1.1.4 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Checking System Overload Conditions\nDESCRIPTION: This function checks if the system's CPU usage exceeds the defined threshold, indicating a potential overload situation. It uses a sliding average to smooth out transient spikes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// cpu 是否过载\nfunc (as *adaptiveShedder) systemOverloaded() bool {\n    return systemOverloadChecker(as.cpuThreshold)\n}\n\n// cpu 检查函数\nsystemOverloadChecker = func(cpuThreshold int64) bool {\n        return stat.CpuUsage() >= cpuThreshold\n}\n\n// cpu滑动平均值\ncurUsage := internal.RefreshCpu()\nprevUsage := atomic.LoadInt64(&cpuUsage)\n// cpu = cpuᵗ⁻¹ * beta + cpuᵗ * (1 - beta)\n// 滑动平均算法\nusage := int64(float64(prevUsage)*beta + float64(curUsage)*(1-beta))\natomic.StoreInt64(&cpuUsage, usage)\n```\n\n----------------------------------------\n\nTITLE: Displaying Datasource-based Model Generation Help (Shell)\nDESCRIPTION: Shows the help information for generating MySQL models from a database connection, including available options and their descriptions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-model.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -h\n\nNAME:\n   goctl model mysql datasource - generate model from datasource\n\nUSAGE:\n   goctl model mysql datasource [command options] [arguments...]\n\nOPTIONS:\n   --url value              the data source of database,like \"root:password@tcp(127.0.0.1:3306)/database\n   --table value, -t value  the table or table globbing patterns in the database\n   --cache, -c              generate code with cache [optional]\n   --dir value, -d value    the target dir\n   --style value            the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --idea                   for idea plugin [optional]\n```\n\n----------------------------------------\n\nTITLE: Update API Templates\nDESCRIPTION: Command to update API templates\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template update -c api\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Source Config\nDESCRIPTION: Configuration structure for database and cache settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tzrpc.RpcServerConf\n\tDataSource string             // manual code\n\tTable      string             // manual code\n\tCache      cache.CacheConf    // manual code\n}\n```\n\n----------------------------------------\n\nTITLE: Route Registration without Middleware in go-zero\nDESCRIPTION: Shows how routes are registered without middleware in the go-zero application.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc RegisterHandlers(engine *rest.Server, serverCtx *svc.ServiceContext) {\n\tengine.AddRoutes(\n\t\t[]rest.Route{\n\t\t\t{\n\t\t\t\tMethod:  http.MethodGet,\n\t\t\t\tPath:    \"/from/:name\",\n\t\t\t\tHandler: greetHandler(serverCtx),\n\t\t\t},\n\t\t},\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Goctl Installation\nDESCRIPTION: Verifies the successful installation of Goctl by checking its version. It depends on Goctl being installed and its directory being in the PATH.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl -v\n```\n\n----------------------------------------\n\nTITLE: Generating Kotlin Code for API - Go\nDESCRIPTION: Generates Kotlin code for accessing the API service, requiring the code storage directory, API source file, and package name.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api kt -dir ./kt_code -api user.api -pkg myPackage\n```\n\n----------------------------------------\n\nTITLE: Generating Greet RPC Service with goctl\nDESCRIPTION: This snippet shows the command to generate a greet RPC service using the goctl tool. By executing this command, developers can rapidly create the service structure without writing boilerplate code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc new greet\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes Deployment YAML\nDESCRIPTION: The complete Kubernetes deployment YAML file generated by goctl for a Redis service, including Deployment, Service, and HorizontalPodAutoscaler resources.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: adhoc\n  labels:\n    app: redis\nspec:\n  replicas: 3\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:6-alpine\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"sh\",\"-c\",\"sleep 5\"]\n        ports:\n        - containerPort: 6379\n        readinessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 15\n          periodSeconds: 20\n        resources:\n          requests:\n            cpu: 500m\n            memory: 512Mi\n          limits:\n            cpu: 1000m\n            memory: 1024Mi\n        volumeMounts:\n        - name: timezone\n          mountPath: /etc/localtime\n      volumes:\n        - name: timezone\n          hostPath:\n            path: /usr/share/zoneinfo/Asia/Shanghai\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-svc\n  namespace: adhoc\nspec:\n  ports:\n    - port: 6379\n  selector:\n    app: redis\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-c\n  namespace: adhoc\n  labels:\n    app: redis-hpa-c\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageUtilization: 80\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-m\n  namespace: adhoc\n  labels:\n    app: redis-hpa-m\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 80\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes deployment\nDESCRIPTION: kubectl command to apply the generated Kubernetes deployment YAML file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f redis.yaml\n```\n\n----------------------------------------\n\nTITLE: Goctl Template Revert Command Help\nDESCRIPTION: Help information for the revert subcommand, showing how to revert a specific template file to its latest version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template revert - revert the target template to the latest\n\nUSAGE:\n   goctl template revert [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model]\n   --name value, -n value      the target file name of template\n```\n\n----------------------------------------\n\nTITLE: Generating API File\nDESCRIPTION: Command to generate an API definition file using goctl\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api -o greet.api\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template for Check RPC Service\nDESCRIPTION: Command to create a Protocol Buffers template file for the Check RPC service that will handle querying book prices.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc template -o check.proto\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL in YAML for Go-Zero API\nDESCRIPTION: YAML configuration to add MySQL settings in the Go-Zero API project's configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: user:password@tcp(127.0.0.1:3306)/gozero?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format in JSON\nDESCRIPTION: Example of JSON response structure for successful business operations with code 0\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 0,\n  \"msg\": \"successful\",\n  \"data\": {\n    ....\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Structure in Go-Zero\nDESCRIPTION: Defines the configuration structure for MySQL and Redis cache connections in a Go-Zero REST service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/business-coding.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport \"github.com/zeromicro/go-zero/rest\"\n\ntype Config struct {\n    rest.RestConf\n    Mysql struct{\n        DataSource string\n    }\n    \n    CacheRedis cache.CacheConf\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go using Go Get\nDESCRIPTION: This command installs the protoc-gen-go plugin, which is necessary for translating proto files into Go language RPC stub code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\n$ go get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Defining Error Constants in Go\nDESCRIPTION: Definition of error constants for the borrow API service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage logic\n\nimport (\n\t\"book/shared\"\n)\n\nvar (\n\terrUserNotFound = shared.NewDefaultError(\"用户不存在\")\n\terrBookNotFound = shared.NewDefaultError(\"书籍不存在\")\n\terrInvalidParam = shared.NewDefaultError(\"参数错误\")\n    errUserReturn   = shared.NewDefaultError(\"没有查询到该用户的借书记录\")\n    errBookBorrowed = shared.NewDefaultError(\"该书籍已被借阅\")\n)\n```\n\n----------------------------------------\n\nTITLE: Filtering Stream Elements with Filter function in go-zero fx\nDESCRIPTION: This code demonstrates how to filter stream elements using the Filter function in go-zero's fx package. It takes a FilterFunc as input, which defines the filtering logic. Elements that satisfy the condition (return true) are kept, while others are discarded. It showcases filtering for even numbers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// 例子 保留偶数\ns := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 0}\nfx.From(func(source chan<- interface{}) {\n  for _, v := range s {\n    source <- v\n  }\n}).Filter(func(item interface{}) bool {\n  if item.(int)%2 == 0 {\n    return true\n  }\n  return false\n})\n\n// 源码\nfunc (p Stream) Filter(fn FilterFunc, opts ...Option) Stream {\n\treturn p.Walk(func(item interface{}, pipe chan<- interface{}) {\n    // 执行过滤函数true保留，false丢弃\n\t\tif fn(item) {\n\t\t\tpipe <- item\n\t\t}\n\t}, opts...)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Go-Zero Datacenter Project with Go Modules\nDESCRIPTION: Commands to create and initialize a new Go module for the datacenter project. This sets up the basic project structure with go.mod file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n➜ blogs mkdir datacenter && cd datacenter\n➜ datacenter go mod init datacenter\ngo: creating new go.mod: module datacenter\n➜ datacenter\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: This text block represents a directory structure of a mall project, showcasing a well-organized approach to separate concerns into common libraries and individual services. Each service (e.g., afterSale, cart) contains API, model, and RPC directories.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.\nmall // 工程名称\n├── common // 通用库\n│   ├── randx\n│   └── stringx\n├── go.mod\n├── go.sum\n└── service // 服务存放目录\n    ├── afterSale\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── cart\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── order\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── pay\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── product\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    └── user\n        ├── api\n        ├── cronjob\n        ├── model\n        ├── rmq\n        ├── rpc\n        └── script\n```\n\n----------------------------------------\n\nTITLE: Initialize Templates\nDESCRIPTION: Command to initialize API/RPC/model templates\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template init\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Concurrent Requests\nDESCRIPTION: This function calculates the maximum concurrent requests that the system can handle based on the window's maximum throughput and the minimum response time. It employs mathematics to transform throughput and response time into a concurrency limit.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// 计算每秒系统的最大并发数\n// 最大并发数 = 最大请求数（qps）* 最小响应时间（rt）\nfunc (as *adaptiveShedder) maxFlight() int64 {\n    // windows = buckets per second\n    // maxQPS = maxPASS * windows\n    // minRT = min average response time in milliseconds\n    // maxQPS * minRT / milliseconds_per_second\n    // as.maxPass()*as.windows - 每个桶最大的qps * 1s内包含桶的数量\n    // as.minRt()/1e3 - 窗口所有桶中最小的平均响应时间 / 1000ms这里是为了转换成秒\n    return int64(math.Max(1, float64(as.maxPass()*as.windows)*(as.minRt()/1e3)))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway with YAML\nDESCRIPTION: YAML configuration for API Gateway to discover add/check services via etcd\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nAdd:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: add.rpc\nCheck:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: check.rpc\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Bookstore Project\nDESCRIPTION: Command to initialize a Go module in the bookstore directory, creating a go.mod file for dependency management.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init bookstore\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service with goctl\nDESCRIPTION: Using goctl command to generate RPC service structure from proto file\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n➜  rpc goctl rpc proto -src common.proto -dir .\nprotoc  -I=/Users/jackluo/works/blogs/datacenter/common/rpc common.proto --go_out=plugins=grpc:/Users/jackluo/works/blogs/datacenter/common/rpc/common\nDone.\n```\n\n----------------------------------------\n\nTITLE: Defining Prometheus Configuration in Go\nDESCRIPTION: This snippet defines the Config struct for Prometheus, including settings for the listening host, port, and metrics reporting path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-config.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Config struct {\n\tHost string `json:\",optional\"` // prometheus 监听host\n\tPort int    `json:\",default=9101\"` // prometheus 监听端口\n\tPath string `json:\",default=/metrics\"` // 上报地址\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Code from Protocol Buffers\nDESCRIPTION: Command to generate Go code for the RPC service based on the Protocol Buffers definition, creating server, client, and logic files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc proto -src add.proto -dir .\n```\n\n----------------------------------------\n\nTITLE: Generating Dockerfile\nDESCRIPTION: Command to generate a Dockerfile for the hello service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoctl docker -go greet.go\n```\n\n----------------------------------------\n\nTITLE: Initializing Templates with Goctl\nDESCRIPTION: Example command for initializing all templates with goctl. This will initialize templates if they don't already exist locally.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl template init\n```\n\n----------------------------------------\n\nTITLE: Displaying goctl rpc template Subcommand Usage\nDESCRIPTION: Shows the usage information for the goctl rpc template subcommand, which generates a proto file template.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   goctl rpc template - generate proto template\n\nUSAGE:\n   goctl rpc template [command options] [arguments...]\n\nOPTIONS:\n   --out value, -o value  the target path of proto\n```\n\n----------------------------------------\n\nTITLE: Opening Environment Variable Configuration File\nDESCRIPTION: Command to edit the paths file for adding environment variables on Unix-based systems.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo vim /etc/paths\n```\n\n----------------------------------------\n\nTITLE: Integrating UserRpc in Go-Zero Service Context\nDESCRIPTION: Updates the ServiceContext struct to include UserRpc and initializes it in the NewServiceContext function.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config  config.Config\n    Example rest.Middleware\n    UserRpc userclient.User\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        Example: middleware.NewExampleMiddleware().Handle,\n        UserRpc: userclient.NewUser(zrpc.MustNewClient(c.UserRpc)),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic fx Stream Usage Pattern in Go\nDESCRIPTION: Demonstrates how to use fx stream processing to handle class and student data, including stream generation, transformation, and final evaluation operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/fx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nresult := make(map[string]string)\nfx.From(func(source chan<- interface{}) {\n  for _, item := range data {\n    source <- item\n  }\n}).Walk(func(item interface{}, pipe chan<- interface{}) {\n  each := item.(*model.ClassData)\n\n  class, err := l.rpcLogic.GetClassInfo()\n  if err != nil {\n    l.Errorf(\"get class %s failed: %s\", each.ClassId, err.Error())\n    return\n  }\n  \n  students, err := l.rpcLogic.GetUsersInfo(class.ClassId)\n  if err != nil {\n    l.Errorf(\"get students %s failed: %s\", each.ClassId, err.Error())\n    return\n  }\n\n  pipe <- &classObj{\n    classId: each.ClassId\n    studentIds: students\n  }\n}).ForEach(func(item interface{}) {\n    o := item.(*classObj)\n    result[o.classId] = o.studentIds\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code from API Definition\nDESCRIPTION: Command to generate Go code for the API gateway based on the bookstore.api definition, creating handlers, logic, and configuration files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -api bookstore.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Modifying goctl Handler Template\nDESCRIPTION: Provides instructions for modifying the goctl handler template to integrate custom response formatting, allowing for enhanced consistency in handler implementations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vim ~/.goctl/api/handler.tpl\n```\n\nLANGUAGE: go\nCODE:\n```\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"greet/response\"// ①\n\t{% raw %}\n\t{{.ImportPackages}}\n\t{% endraw %}\n)\n\n{% raw %}\nfunc {{.HandlerName}}(ctx *svc.ServiceContext) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t{{if .HasRequest}}var req types.{{.RequestType}}\n\t\tif err := httpx.Parse(r, &req); err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t\treturn\n\t\t}{{end}}\n\n\t\tl := logic.New{{.LogicType}}(r.Context(), ctx)\n\t\t{{if .HasResp}}resp, {{end}}err := l.{{.Call}}({{if .HasRequest}}req{{end}})\n\t\t{{if .HasResp}}response.Response(w, resp, err){{else}}response.Response(w, nil, err){{end}}//②\n\t}\n}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Creating API Definition File\nDESCRIPTION: Shell command to create a new API definition file for user service using vim editor.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-coding.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vim service/user/api/user.api\n```\n\n----------------------------------------\n\nTITLE: Verifying Goctl Installation in Shell\nDESCRIPTION: This command checks the installed version of Goctl to verify successful installation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n$ goctl -v\n```\n\nLANGUAGE: text\nCODE:\n```\ngoctl version 1.1.4 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Setting up YAML Configuration for User API\nDESCRIPTION: YAML configuration file for user API service, including MySQL and Redis connection settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/business-coding.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Generating a Proto File Template\nDESCRIPTION: Creates a new proto file template named 'greet.proto' using the goctl rpc template command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl rpc template -o greet.proto\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Type in Go\nDESCRIPTION: Defines the core Stream struct that represents a readable data stream containing a source channel of interface{} type.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/api/fx.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nStream struct {\n\tsource <-chan interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing goctl CLI Tool\nDESCRIPTION: Command to install the goctl command-line tool using Go modules.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Updating API Gateway Service Context\nDESCRIPTION: Go code that modifies the API Gateway's service context to include RPC client instances for the Add and Check services and their initialization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_19\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config  config.Config\n    Adder   adder.Adder          // 手动代码\n    Checker checker.Checker      // 手动代码\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        Adder:   adder.NewAdder(zrpc.MustNewClient(c.Add)),         // 手动代码\n        Checker: checker.NewChecker(zrpc.MustNewClient(c.Check)),   // 手动代码\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting RPC and API Services for Short URL Application\nDESCRIPTION: Shell commands to start the RPC and API services for the short URL application after setting up dependencies and modifying the code.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# etcd,redis,mysql 自行根据找教程安装启动\n# 启动 rpc 服务\ncd rpc/transform\ngo run transform.go -f etc/transform.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\ncd api\ngo run shorturl.go -f etc/shorturl-api.yaml\n```\n\n----------------------------------------\n\nTITLE: RPC Server YAML Configuration\nDESCRIPTION: YAML configuration file for RPC server including connection settings for various services\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nName: user.rpc\nListenOn: 127.0.0.1:8080\nEtcd:\n  Hosts:\n    - $etcdHost\n  Key: user.rpc\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\n```\n\n----------------------------------------\n\nTITLE: Initializing Daily Task Executor\nDESCRIPTION: Initializes a BulkExecutor for daily task processing with specified interval and batch size settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) Init() {\n\tdts.insertExecutor = executors.NewBulkExecutor(\n\t\tdts.insertIntoCk,\n\t\texecutors.WithBulkInterval(time.Second*3),\n\t\texecutors.WithBulkTasks(10240),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service Code - Bash\nDESCRIPTION: Command to generate RPC service code from proto file using protoc with go-zero extensions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Configuring GOMODCACHE\nDESCRIPTION: Commands to check and set the GOMODCACHE directory for storing downloaded dependencies\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/gomod-config.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GOMODCACHE\n```\n\nLANGUAGE: shell\nCODE:\n```\ngo env -w GOMODCACHE=$GOPATH/pkg/mod\n```\n\n----------------------------------------\n\nTITLE: Generating Java Code for API - Go\nDESCRIPTION: Generates Java code to access the API service, requiring flags for code storage directory and API source file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api java -dir ./java_code -api user.api\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code from Datasource in Go-Zero\nDESCRIPTION: This command generates model code from a MySQL datasource using goctl. It creates model files with caching enabled for the 'user' table in the current directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/model-gen.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"$datasource\" -table=\"user\" -c -dir .\n```\n\n----------------------------------------\n\nTITLE: Regenerating API Code (Bash)\nDESCRIPTION: Command to regenerate the API code after modifying the user.api file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl api go -api user.api -dir .\n```\n\n----------------------------------------\n\nTITLE: Testing Redis service in Kubernetes\nDESCRIPTION: Commands to test the deployed Redis service in Kubernetes using a temporary pod.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl run -i --tty --rm cli --image=redis:6-alpine -n adhoc -- sh\n/data # redis-cli -h redis-svc\nredis-svc:6379> set go-zero great\nOK\nredis-svc:6379> get go-zero\n\"great\"\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Login Endpoint with cURL\nDESCRIPTION: Example cURL command to test the login endpoint, which should return user information and a JWT token on successful authentication. Note includes a warning about JSON escaping on Windows.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i -X POST \\\n  http://127.0.0.1:8888/user/login \\\n  -H 'cache-control: no-cache' \\\n  -H 'content-type: application/json' \\\n  -d '{\n        \"username\":\"admin\",\n        \"password\":\"666666\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Edit Profile (Linux)\nDESCRIPTION: Opens the user's .profile file for editing. This is usually done to add Go's bin directory to the PATH environment variable. Requires `vim` to be installed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ $HOME/.profile\n```\n\n----------------------------------------\n\nTITLE: Function and Constant Naming Conventions\nDESCRIPTION: Rules for naming functions and constants in Go, emphasizing capitalization and export visibility\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/naming-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n* Camel case naming\n* The first letter of the exported must be capitalized\n* The first letter must be lowercase if it cannot be exported\n* Avoid the combination of all uppercase and underscore (_)\n```\n\n----------------------------------------\n\nTITLE: Navigation Links in Markdown\nDESCRIPTION: A markdown structure defining the navigation hierarchy for go-zero documentation, including links to tools, plugins and distributed transaction documentation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/eco.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# go-zero around\n* [Tools](tool-center.md)\n  * [Intellij Plugin](intellij.md)\n  * [VSCode Plugin](vscode.md)\n* [Distributed Transaction](distributed-transaction.md)\n* [Plugins](plugin-center.md)\n```\n\n----------------------------------------\n\nTITLE: Generated Insert Method in UserModel\nDESCRIPTION: The Insert method generated in the UserModel struct, showing how the model code generation works with default templates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_10\n\nLANGUAGE: golang\nCODE:\n```\nfunc (m *UserModel) Insert(data User) (sql.Result, error) {\n\tquery := fmt.Sprintf(\"insert into %s (%s) values (?, ?, ?, ?, ?)\", m.table, userRowsExpectAutoSet)\n\tret, err := m.conn.Exec(query, data.Name, data.Password, data.Mobile, data.Gender, data.Nickname)\n\treturn ret, err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Library Table in SQL\nDESCRIPTION: SQL script to create the 'library' table for storing book information in the library management system.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `library` (\n  `id` varchar(36) NOT NULL DEFAULT '' COMMENT '书籍序列号',\n  `name` varchar(255) NOT NULL DEFAULT '' COMMENT '书籍名称',\n  `author` varchar(255) DEFAULT '' COMMENT '书籍作者',\n  `publish_date` date DEFAULT NULL,\n  `create_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP,\n  `update_time` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `name_unique` (`name`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\n```\n\n----------------------------------------\n\nTITLE: 解决API服务启动失败问题\nDESCRIPTION: 当API服务启动失败并报配置文件错误时，需要检查配置文件中的配置项是否已配置，以及yaml格式是否正确。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/error.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nerror: config file etc/user-api.yaml, error: type mismatch for field xx\n```\n\n----------------------------------------\n\nTITLE: Editing User API Configuration File\nDESCRIPTION: Shows the command to edit the config.go file in the user API project to add JWT configuration settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/JWT生成.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vi book/user/api/internal/config/config.go\n```\n\n----------------------------------------\n\nTITLE: Filtering Sensitive Words in Go with stringx.NewTrie\nDESCRIPTION: This code snippet demonstrates how to filter sensitive words from text by replacing them with masked characters. It returns the filtered text, found keywords, and a boolean indicating if any keywords were found.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfilter := stringx.NewTrie([]string{\n  \"AV演员\",\n  \"苍井空\",\n  \"AV\",\n  \"日本AV女优\",\n  \"AV演员色情\",\n}, stringx.WithMask('?')) // 默认替换为*\nsafe, keywords, found := filter.Filter(\"日本AV演员兼电视、电影演员。苍井空AV女优是xx出道, 日本AV女优们最精彩的表演是AV演员色情表演\")\nfmt.Println(safe)\nfmt.Println(keywords)\nfmt.Println(found)\n```\n\n----------------------------------------\n\nTITLE: Verifying Goctl Installation\nDESCRIPTION: Commands to verify successful installation of Goctl by checking its version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-install.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl -v\n```\n\nLANGUAGE: text\nCODE:\n```\ngoctl version 1.1.4 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl CLI Tool\nDESCRIPTION: Command to install the goctl command-line tool using go get with module mode enabled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: RPC Service YAML Configuration\nDESCRIPTION: YAML configuration for user RPC service with etcd registration details\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/quick-start/build-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nName: user.rpc\nListenOn: 127.0.0.1:8080\nEtcd:\n  Hosts:\n  - 127.0.0.1:2379\n  Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: GRPC Proto Import Path Error\nDESCRIPTION: Error when protoc-gen-go cannot determine Go import path for proto files. Requires either go_package option in proto file or M argument in command line.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nprotoc-gen-go: unable to determine Go import path for \"greet.proto\"\n\nPlease specify either:\n• a \"go_package\" option in the .proto source file, or\n• a \"M\" argument on the command line.\n\nSee https://developers.google.com/protocol-buffers/docs/reference/go-generated#package for more information.\n\n--go_out: protoc-gen-go: Plugin failed with status code 1.\n```\n\n----------------------------------------\n\nTITLE: Generating API Service\nDESCRIPTION: This shell command uses `goctl` to generate the API service code from the `user.api` file. The `-api` flag specifies the input API definition file and the `-dir` flag specifies the output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd book/service/user/api\n$ goctl api go -api user.api -dir .\n```\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Enabling GO111MODULE\nDESCRIPTION: Command to enable GO111MODULE for dependency management\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/gomod-config.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GO111MODULE=\"on\"\n```\n\n----------------------------------------\n\nTITLE: Verifying protoc installation\nDESCRIPTION: Commands to verify the successful installation of protoc by checking its version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/protoc-install.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nprotoc --version\n```\n\nLANGUAGE: shell\nCODE:\n```\nlibprotoc 3.14.0\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Code for API - Go\nDESCRIPTION: Generates TypeScript code to access the API service, with multiple flags available for code directory location and API source specification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api ts -dir ./ts_code -api user.api\n```\n\n----------------------------------------\n\nTITLE: Create New API Service\nDESCRIPTION: Command to quickly create a new API service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api new user\n```\n\n----------------------------------------\n\nTITLE: Configuring Borrow API in YAML\nDESCRIPTION: YAML configuration for the borrow API service, including database and RPC client settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nName: borrow-api\nHost: 0.0.0.0\nPort: 9999\nMysql:\n  DataSource: user:password@tcp(127.0.0.1:3306)/gozero?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nAuth:\n  AccessSecret: ad879037-c7a4-4063-9236-6bfc35d54b7d\n  AccessExpire: 86400\nLibraryRpc:\n  Etcd:\n    Hosts:\n      - 127.0.0.1:2379\n    Key: library.rpc\nUserRpc:\n  Etcd:\n    Hosts:\n      - 127.0.0.1:2379\n    Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: JSON Tag Template for API Files\nDESCRIPTION: Live template for inserting a JSON tag in API files, where $FIELD_NAME$ is replaced with the actual field name.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/intellij.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njson:\"$FIELD_NAME$\"\n```\n\n----------------------------------------\n\nTITLE: Generated Kubernetes deployment YAML\nDESCRIPTION: Example Kubernetes deployment YAML generated by goctl kube command for a Redis service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: adhoc\n  labels:\n    app: redis\nspec:\n  replicas: 3\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:6-alpine\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"sh\",\"-c\",\"sleep 5\"]\n        ports:\n        - containerPort: 6379\n        readinessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 15\n          periodSeconds: 20\n        resources:\n          requests:\n            cpu: 500m\n            memory: 512Mi\n          limits:\n            cpu: 1000m\n            memory: 1024Mi\n        volumeMounts:\n        - name: timezone\n          mountPath: /etc/localtime\n      volumes:\n        - name: timezone\n          hostPath:\n            path: /usr/share/zoneinfo/Asia/Shanghai\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-svc\n  namespace: adhoc\nspec:\n  ports:\n    - port: 6379\n  selector:\n    app: redis\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-c\n  namespace: adhoc\n  labels:\n    app: redis-hpa-c\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageUtilization: 80\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-m\n  namespace: adhoc\n  labels:\n    app: redis-hpa-m\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 80\n```\n\n----------------------------------------\n\nTITLE: Verifying protoc installation in macOS\nDESCRIPTION: This command checks the installed version of protoc to ensure it was installed correctly.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/protoc-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ protoc --version\n```\n\n----------------------------------------\n\nTITLE: Displaying API Command Help\nDESCRIPTION: Shows the help menu for goctl api command, revealing available subcommands and options for API generation\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api -h\n```\n\n----------------------------------------\n\nTITLE: Info Block Examples\nDESCRIPTION: Examples of correct info block syntax with key-value pairs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_6\n\nLANGUAGE: api\nCODE:\n```\ninfo(\nfoo: foo value\nbar:\"bar value\"\n    desc:\"long long long long\nlong long text\"\n)\n```\n\nLANGUAGE: api\nCODE:\n```\ninfo(\n    foo: \"foo value\"\n    bar: \"bar value\"\n    desc: \"long long long long long long text\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Project Structure\nDESCRIPTION: Creates a new Go module for the datacenter project using go mod init command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n➜ blogs mkdir datacenter && cd datacenter\n➜ datacenter go mod init datacenter\ngo: creating new go.mod: module datacenter\n➜ datacenter\n```\n\n----------------------------------------\n\nTITLE: Generating API Gateway Template with Goctl\nDESCRIPTION: Command to generate API gateway template which will be placed in $HOME/.goctl directory for customization\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-api.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go template\n```\n\n----------------------------------------\n\nTITLE: Goctl Command Not Found Error\nDESCRIPTION: Error when goctl command is not found in system path. Indicates either missing installation or environment variable configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncommand not found: goctl\n```\n\n----------------------------------------\n\nTITLE: Syntax Declaration Examples\nDESCRIPTION: Demonstrates correct and incorrect syntax version declarations for Zero Micro API files\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_1\n\nLANGUAGE: api\nCODE:\n```\nsyntax=\"v1\"\n```\n\nLANGUAGE: api\nCODE:\n```\nsyntax = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Closing the logx logger\nDESCRIPTION: This code snippet shows how to close the logx logger using `logx.Close()`. It's important to close the logger to prevent log loss. The logger cannot be reopened after it has been closed. The closing action ensures that all asynchronous logging operations are completed before the application exits.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nlogx.Close()\n```\n\n----------------------------------------\n\nTITLE: Constant log levels\nDESCRIPTION: These constants define the supported log levels for filtering log output. `InfoLevel` prints all levels, `ErrorLevel` prints errors, slows, and stacks, and `SevereLevel` prints only severe logs. These levels can be configured using `logx.SetLevel` or through configuration initialization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\t// 打印所有级别的日志\n\tInfoLevel = iota\n\t// 打印 errors, slows, stacks 日志\n\tErrorLevel\n\t// 仅打印 severe 级别日志\n\tSevereLevel\n)\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code from SQL DDL\nDESCRIPTION: Command for generating model code from the user.sql DDL file using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mysql ddl -src user.sql  -dir=.\n```\n\n----------------------------------------\n\nTITLE: TimingWheel getPositionAndCircle Function\nDESCRIPTION: This code snippet calculates the position and circle for a given delay in the TimingWheel. It divides the delay by the interval to determine the number of steps, calculates the position using the modulo operator, and calculates the circle by dividing the number of steps (minus 1) by the number of slots.  This allows the TimingWheel to handle delays that are longer than a single rotation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n```go\n// interval: 4min, d: 60min, numSlots: 16, tickedPos = 15\n// step = 15, pos = 14, circle = 0\nfunc (tw *TimingWheel) getPositionAndCircle(d time.Duration) (pos int, circle int) {\n\tsteps := int(d / tw.interval)\n\tpos = (tw.tickedPos + steps) % tw.numSlots\n\tcircle = (steps - 1) / tw.numSlots\n\treturn\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Testing the API Gateway\nDESCRIPTION: Command to test the API Gateway by making a request to check the price of a book.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/check?book=go-zero\"\n```\n\n----------------------------------------\n\nTITLE: Search API YAML Configuration\nDESCRIPTION: YAML configuration for search API including authentication and RPC client settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nName: search-api\nHost: 0.0.0.0\nPort: 8889\nAuth:\n  AccessSecret: $AccessSecret\n  AccessExpire: $AccessExpire\nUserRpc:\n  Etcd:\n    Hosts:\n      - $etcdHost\n    Key: user.rpc\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Buffer Generator in Go\nDESCRIPTION: Command to install protoc-gen-go package for Protocol Buffer code generation\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Testing go-zero Greet API with cURL\nDESCRIPTION: Demonstrates how to test the newly created greet API using cURL, sending a GET request to the service endpoint.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-api.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i -X GET \\\n  http://localhost:8888/from/you\n```\n\nLANGUAGE: text\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sun, 07 Feb 2021 04:31:25 GMT\nContent-Length: 27\n\n{\"message\":\"Hello go-zero\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transform Service in YAML\nDESCRIPTION: YAML configuration for the transform service using etcd for service discovery\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nTransform:\n  Etcd:\n    Hosts:\n      - localhost:2379\n    Key: transform.rpc\n```\n\n----------------------------------------\n\nTITLE: Running the API Gateway Service\nDESCRIPTION: Command to start the API gateway service using the generated configuration file, which listens on port 8888 by default.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngo run bookstore.go -f etc/bookstore-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Before and After Response Modification\nDESCRIPTION: Demonstrates the JSON response structure before and after the template modification, illustrating how template customization impacts output.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Hello go-zero!\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"msg\": \"OK\",\n    \"data\": {\n        \"message\": \"Hello go-zero!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ANTLR v4 Import Block Definition\nDESCRIPTION: ANTLR grammar definition for import syntax blocks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_3\n\nLANGUAGE: antlrv4\nCODE:\n```\n'import' {checkImportValue(p)}STRING  \n|'import' '(' ({checkImportValue(p)}STRING)+ ')'\n```\n\n----------------------------------------\n\nTITLE: Checking GO111MODULE Status\nDESCRIPTION: Command to check if GO111MODULE is enabled in the environment\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/gomod-config.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GO111MODULE\n```\n\nLANGUAGE: text\nCODE:\n```\non\n```\n\n----------------------------------------\n\nTITLE: 解决protoc-gen-go安装失败问题\nDESCRIPTION: 当安装protoc-gen-go遇到超时错误时，需要确保正确设置了GOPROXY。详细的GOPROXY设置可以参考go module配置文档。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/error.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngo get github.com/golang/protobuf/protoc-gen-go: module github.com/golang/protobuf/protoc-gen-go: Get \"https://proxy.golang.org/github.com/golang/protobuf/protoc-gen-go/@v/list\": dial tcp 216.58.200.49:443: i/o timeout\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair\nDESCRIPTION: Command to generate a new SSH key pair with RSA encryption for GitLab authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nssh-keygen -t rsa -b 2048 -C \"email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Service Context for RPC in Go\nDESCRIPTION: Creates a new ServiceContext for the RPC service, initializing database connections and models.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage svc\n\nimport (\n    \"datacenter/common/model\"\n    \"datacenter/common/rpc/internal/config\"\n\n    \"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\ntype ServiceContext struct {\n    c              config.Config\n    AppConfigModel model.AppConfigModel\n    BaseAppModel   model.BaseAppModel\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    conn := sqlx.NewMysql(c.Mysql.DataSource)\n    apm := model.NewAppConfigModel(conn, c.CacheRedis)\n    bam := model.NewBaseAppModel(conn, c.CacheRedis)\n    return &ServiceContext{\n        c:              c,\n        AppConfigModel: apm,\n        BaseAppModel:   bam,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go and protoc-gen-go-grpc in macOS\nDESCRIPTION: These commands use go install to download and install the latest versions of protoc-gen-go and protoc-gen-go-grpc, which are necessary plugins for generating Go code from .proto files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/protoc-install.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\n----------------------------------------\n\nTITLE: Making an HTTP Request to the Service\nDESCRIPTION: Command to send an HTTP request to the running greet API service using curl, with the -i flag to display response headers.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Starting the Greet Service in Shell\nDESCRIPTION: These shell commands navigate to the greet directory and start the service using the 'go run' command, specifying the configuration file location.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/monolithic-service.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd greet\n$ go run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Environment Information\nDESCRIPTION: Commands and output showing the Ubuntu version and Go version used in the tutorial, providing context for the development environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ lsb_release -a\nNo LSB modules are available.\nDistributor ID: Ubuntu\nDescription:    Ubuntu 20.04.1 LTS\nRelease:        20.04\nCodename:       focal\n\n$ go version\ngo version go1.15.2 linux/amd64\n```\n\n----------------------------------------\n\nTITLE: 解决Windows上的权限错误\nDESCRIPTION: 当在Windows上运行goctl时遇到权限错误，可以通过以管理员身份运行来解决。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/error.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA required privilege is not held by the client.\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Single-Line Comments in API\nDESCRIPTION: This snippet demonstrates the correct usage of single-line comments in API syntax. Each comment starts with '//' and is on a separate line.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_4\n\nLANGUAGE: api\nCODE:\n```\n// doc\n// comment\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code with Goctl\nDESCRIPTION: Command to generate Go model code for the borrow_system table using Goctl tool.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/rpc调用.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/gozero\" -table=\"borrow_system\" -dir ./model\n```\n\n----------------------------------------\n\nTITLE: Quote on Program Readability\nDESCRIPTION: Quote from Hal Abelson and Gerald Sussman emphasizing that programs should be written primarily for human readability.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/dev-specification.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nPrograms must be written for people to read, and only incidentally for machines to execute\n```\n\n----------------------------------------\n\nTITLE: Navigating to protoc binary directory\nDESCRIPTION: Command to navigate to the extracted protoc binary directory after downloading from protobuf releases.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/protoc-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd protoc-3.14.0-osx-x86_64/bin\n```\n\n----------------------------------------\n\nTITLE: Reverting Templates in goctl\nDESCRIPTION: This command reverts the specified template to its latest version. It requires both the category and name of the target template.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template revert - revert the target template to the latest\n\nUSAGE:\n   goctl template revert [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model,docker,kube]\n   --name value, -n value      the target file name of template\n   --home value                the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Creating API Definition File\nDESCRIPTION: Generates an initial API definition file using goctl command line tool.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n➜  datacenter goctl api -o datacenter.api\nDone.\n➜  datacenter tree\n.\n├── datacenter.api\n└── go.mod\n```\n\n----------------------------------------\n\nTITLE: Creating Hello Service\nDESCRIPTION: Command to create a new hello service using goctl\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api new hello\n```\n\n----------------------------------------\n\nTITLE: Generating Goctl Autocomplete File\nDESCRIPTION: Demonstrates the process of generating the autocomplete script and shows the required shell configuration commands.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-completion.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl completion\nGenerate autocomplete successfully!\nExecute the following script to set up the shell.\necho PROG=goctl source /Users/keson/.goctl/.auto_complete/zsh/goctl_autocomplete >> ~/.zshrc && source ~/.zshrc\nor\necho PROG=goctl source /Users/keson/.goctl/.auto_complete/bash/goctl_autocomplete >> ~/.bashrc && source ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool for go-zero\nDESCRIPTION: Shell command to install goctl, the code generation tool for go-zero framework that automates creation of microservice components.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Testing Redis Service in Kubernetes\nDESCRIPTION: Commands to run a temporary Redis client pod and connect to the deployed Redis service for testing.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl run -i --tty --rm cli --image=redis:6-alpine -n adhoc -- sh\n/data # redis-cli -h redis-svc\nredis-svc:6379> set go-zero great\nOK\nredis-svc:6379> get go-zero\n\"great\"\n```\n\n----------------------------------------\n\nTITLE: Sample Goctl Version Output\nDESCRIPTION: Example of actual version output showing specific version, OS, and architecture information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngoctl version 1.1.5 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Generating client code with goctl\nDESCRIPTION: These commands use `goctl` to generate client code for different platforms (Java, Dart) based on the API definition in `greet.api`. The generated code is placed in the 'greet' directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api java -api greet.api -dir greet\ngoctl api dart -api greet.api -dir greet\n...\n```\n\n----------------------------------------\n\nTITLE: Markdown Link Reference to go-zero Demo\nDESCRIPTION: Markdown link syntax referencing the go-zero demo repository on GitHub.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/source.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [demo](https://github.com/zeromicro/go-zero-demo)\n```\n\n----------------------------------------\n\nTITLE: Generating Golang API Service with Goctl\nDESCRIPTION: Example of using the goctl api go command to generate a Golang API service based on a user.api file, with output in the current directory and using the 'gozero' naming style.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-api.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api go -api user.api -dir . -style gozero\n```\n\n----------------------------------------\n\nTITLE: Configuring API with RPC Clients in Go\nDESCRIPTION: Defines the Config struct for the API service, including REST configuration, authentication settings, and RPC client configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage config\n\nimport (\n    \"github.com/zeromicro/go-zero/core/stores/cache\"\n    \"github.com/zeromicro/go-zero/rest\"\n    \"github.com/zeromicro/go-zero/zrpc\"\n)\n\ntype Config struct {\n    rest.RestConf\n\n    Auth struct {\n        AccessSecret string\n        AccessExpire int64\n    }\n    UserRpc   zrpc.RpcClientConf\n    CommonRpc zrpc.RpcClientConf\n    VotesRpc  zrpc.RpcClientConf\n\n    CacheRedis cache.ClusterConf\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go in Go\nDESCRIPTION: Shell command to install the Protocol Buffers compiler plugin for Go version 1.3.2, which is required for generating Go code from protobuf definitions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Database Creation Commands\nDESCRIPTION: SQL commands for creating database and importing schema\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\ncreate database gozero;\n```\n\nLANGUAGE: sql\nCODE:\n```\nsource shorturl.sql;\n```\n\n----------------------------------------\n\nTITLE: Search API Service Context Implementation\nDESCRIPTION: ServiceContext implementation for search API including RPC client initialization\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n    Config  config.Config\n    Example rest.Middleware\n    UserRpc user.User\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return &ServiceContext{\n        Config:  c,\n        Example: middleware.NewExampleMiddleware().Handle,\n        UserRpc: user.NewUser(zrpc.MustNewClient(c.UserRpc)),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Goctl Template Command Help Information\nDESCRIPTION: This shows the help information for the goctl template command, displaying the available subcommands and their descriptions for template operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template - template operation\n\nUSAGE:\n   goctl template command [command options] [arguments...]\n\nCOMMANDS:\n   init    initialize the all templates(force update)\n   clean   clean the all cache templates\n   update  update template of the target category to the latest\n   revert  revert the target template to the latest\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Verifying Generated Model Files\nDESCRIPTION: This shell command output illustrates the generated files after executing the `goctl model` command. It lists the `user.sql` file, the generated `usermodel.go` file containing the model logic, and the `vars.go` file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tree，依次点击进入 New->Go Zero->Api Code\n```\n\nLANGUAGE: text\nCODE:\n```\n.\n├── user.sql\n├── usermodel.go\n└── vars.go\n```\n\n----------------------------------------\n\nTITLE: Shorten API Response Example\nDESCRIPTION: This HTTP response shows the expected output from the shorten API endpoint. The response includes the HTTP status code (200 OK), content type (application/json), and a JSON object containing the shortened key. The `shorten` field in the JSON object contains the generated short key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_6\n\nLANGUAGE: http\nCODE:\n```\n\"HTTP/1.1 200 OK\\nContent-Type: application/json\\nDate: Sat, 29 Aug 2020 10:49:49 GMT\\nContent-Length: 21\\n\\n{\\\"shorten\\\":\\\"f35b2a\\\"}\"\n```\n\n----------------------------------------\n\nTITLE: Defining Java-Style Doc Comments in ANTLR4\nDESCRIPTION: This snippet defines the syntax for Java-style doc comments in ANTLR4. Comments must start with '/*' and end with '*/', allowing any characters in between.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_6\n\nLANGUAGE: antlrv4\nCODE:\n```\n'/*' .*? '*/'\n```\n\n----------------------------------------\n\nTITLE: Generating Check RPC Service Code\nDESCRIPTION: Command to generate Go code for the Check RPC service from the Protocol Buffers definition, including client, server, and service implementation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngoctl rpc protoc check.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Context in Go\nDESCRIPTION: Service context implementation that initializes database model with MySQL connection and cache configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype ServiceContext struct {\n  c     config.Config\n  Model model.ShorturlModel   // 手动代码\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n  return &ServiceContext{\n    c:             c,\n    Model: model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache), // 手动代码\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Check RPC Service\nDESCRIPTION: Command to start the Check RPC service using the generated configuration file with port changed to 8081 to avoid conflict with the Add service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngo run check.go -f etc/check.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Goctl Installation\nDESCRIPTION: Commands to verify successful installation of Goctl and check its version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-install.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl -v\n```\n\nLANGUAGE: text\nCODE:\n```\ngoctl version 1.1.4 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Template Update Command Usage\nDESCRIPTION: Shows the usage and options for updating templates, including category selection and home path specification.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template update - update template of the target category to the latest\n\nUSAGE:\n   goctl template update [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model,docker,kube]\n   --home value                the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Testing Shorten and Expand APIs for Short URL Service\nDESCRIPTION: Curl commands to test the shorten and expand APIs of the short URL service, demonstrating the functionality of the implemented service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n# 新开终端调用\ncurl -i \"http://localhost:8888/shorten?url=https://go-zero.dev\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n# shorten 值为上一步返回的值为准，每个人返回的值不一样\ncurl -i \"http://localhost:8888/expand?shorten=b0434f\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh Shell Autocomplete\nDESCRIPTION: Command to configure autocomplete for Zsh shell environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-completion.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo PROG=goctl source /Users/keson/.goctl/.auto_complete/zsh/goctl_autocomplete >> ~/.zshrc && source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Creating and Setting Up a go-zero Project in Shell\nDESCRIPTION: This snippet shows the shell commands to create a new go-zero project named 'go-zero-demo' and set up a 'greet' service within it. It includes initializing the Go module and running goctl to generate the service structure.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/monolithic-service.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir go-zero-demo\n$ cd go-zero-demo\n$ go mod init go-zero-demo\n$ goctl api new greet\n$ go mod tidy\n```\n\n----------------------------------------\n\nTITLE: Displaying Goctl Autocomplete Help\nDESCRIPTION: Shows the help command output for goctl autocomplete, including available options and usage syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-completion.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl completion -h\nName.\ngoctl autocomplete - generates completion scripts, it only works on unix-like operating systems\n\nUsage.\ngoctl completion [command options] [arguments...] (command options).\n\nOptions.\n--name value, -n value filename of the autocomplete script, default is [goctl_autocomplete]\n```\n\n----------------------------------------\n\nTITLE: Testing the API Gateway with curl\nDESCRIPTION: Command to test the API gateway's check endpoint, which at this point returns default values since the business logic isn't implemented yet.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/check?book=go-zero\"\n```\n\n----------------------------------------\n\nTITLE: Example of RPC Generation Command\nDESCRIPTION: Demonstrates how to generate a new RPC service using a specified template directory by passing the '--home' flag.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl rpc new greet --home $HOME/template\n```\n\nLANGUAGE: text\nCODE:\n```\nDone\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service Structure with goctl in Go\nDESCRIPTION: Uses the goctl command to generate the basic structure for an RPC service from a proto file. This creates the necessary directories and files for the service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n➜  rpc goctl rpc proto -src common.proto -dir .\nprotoc  -I=/Users/jackluo/works/blogs/datacenter/common/rpc common.proto --go_out=plugins=grpc:/Users/jackluo/works/blogs/datacenter/common/rpc/common\nDone.\n```\n\n----------------------------------------\n\nTITLE: Creating Filebeat Configuration File\nDESCRIPTION: Shell command to create and edit the Filebeat configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/log-collection.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vim xx/filebeat.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Deployment Files - Go\nDESCRIPTION: Generates Kubernetes deployment files using goctl, which requires various parameters for the service name, image, and resource allocations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ngoctl kube deploy -name myservice -image myimage -namespace default\n```\n\n----------------------------------------\n\nTITLE: Generating Configuration File - Go\nDESCRIPTION: Generates a configuration file using the goctl tool, which requires specifying the configuration file directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ngoctl config -path ./config\n```\n\n----------------------------------------\n\nTITLE: Original Response Format\nDESCRIPTION: Default JSON response format before customization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"message\": \"Hello go-zero!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing protoc and protoc-gen-go using goctl in macOS\nDESCRIPTION: This snippet demonstrates how to use goctl to automatically install protoc, protoc-gen-go, and protoc-gen-go-grpc. It checks the environment and installs the necessary components if they are not found in the PATH.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/protoc-install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl env check -i -f --verbose\n```\n\n----------------------------------------\n\nTITLE: Server Log Output After Request\nDESCRIPTION: The log output from the server after processing an HTTP request, showing request details, status code, path, client IP, user agent, and request processing time.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nStarting server at 0.0.0.0:8888...\n{\"@timestamp\":\"2020-10-22T11:31:46.248+08\",\"level\":\"info\",\"content\":\"200 - /from/you - 127.0.0.1:56136 - curl/7.68.0 - 0.1ms\",\"trace\":\"6b2d6d3c733233e9\",\"span\":\"0\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Schema\nDESCRIPTION: SQL schema definition for the shorturl table\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `shorturl`\n(\n  `shorten` varchar(255) NOT NULL COMMENT 'shorten key',\n  `url` varchar(255) NOT NULL COMMENT 'original url',\n  PRIMARY KEY(`shorten`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function in Go\nDESCRIPTION: Example of a live template for inserting a main function in Go files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/intellij.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main(){\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl via Go Get and Install Commands\nDESCRIPTION: Commands for installing Goctl using go get (Go 1.15 and earlier) or go install (Go 1.16+) with GOPROXY configuration for Chinese users.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Go 1.15 及之前版本\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl@latest\n\n# Go 1.16 及以后版本\nGOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Installing Go on Linux\nDESCRIPTION: Series of commands to install Go on Linux, including extracting the archive and configuring environment variables.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/golang-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ $HOME/.profile\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:/usr/local/go/bin\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ source $HOME/.profile\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ go version\n```\n\nLANGUAGE: text\nCODE:\n```\ngo version go1.15.1 linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Running Docker container for Go-Zero service\nDESCRIPTION: Command to run the Docker container for the Go-Zero service and expose it on port 8888.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -p 8888:8888 hello:v1\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool\nDESCRIPTION: Command to install the goctl tool from go-zero using go get\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/shorturl-en.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Adding GOPATH to Environment Path\nDESCRIPTION: Text to add to the paths file to include GOPATH/bin in the system PATH variable.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-install.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Initializing go-zero Greet Service Project\nDESCRIPTION: Commands to create a new go-zero project and initialize the greet service structure using goctl tool.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/monolithic-service.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir go-zero-demo\n$ cd go-zero-demo\n$ go mod init go-zero-demo\n$ goctl api new greet\n$ go mod tidy\nDone.\n```\n\n----------------------------------------\n\nTITLE: Testing the API Endpoint with curl\nDESCRIPTION: Command to test the automatically generated API endpoint using curl, which should return a JSON response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Go Version Output\nDESCRIPTION: Shows the expected output after running `go version` command. It displays the installed Go version and the target operating system and architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngo version go1.15.1 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: File Naming Guidelines\nDESCRIPTION: Recommendations for creating file names that are concise, lowercase, and avoid unnecessary complexity\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/naming-spec.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n* All lowercase\n* Avoid underscores (_) except for unit test\n* The file name should not be too long\n```\n\n----------------------------------------\n\nTITLE: Initializing TimingWheel\nDESCRIPTION: This code snippet shows the initialization process of the TimingWheel, including setting up the interval, ticker, slots, timers, and channels for task communication. It initializes the slots with lists and starts a goroutine to run the TimingWheel's main loop.  The `newTimingWheelWithClock` function creates and initializes a new TimingWheel instance.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/timing-wheel.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 真正做初始化\nfunc newTimingWheelWithClock(interval time.Duration, numSlots int, execute Execute, ticker timex.Ticker) (\n\t*TimingWheel, error) {\n\ttw := &TimingWheel{\n\t\tinterval:      interval,                     // 单个时间格时间间隔\n\t\tticker:        ticker,                       // 定时器，做时间推动，以interval为单位推进\n\t\tslots:         make([]*list.List, numSlots), // 时间轮\n\t\ttimers:        NewSafeMap(),                 // 存储task{key, value}的map [执行execute所需要的参数]\n\t\ttickedPos:     numSlots - 1,                 // at previous virtual circle\n\t\texecute:       execute,                      // 执行函数\n\t\tnumSlots:      numSlots,                     // 初始化 slots num\n\t\tsetChannel:    make(chan timingEntry),       // 以下几个channel是做task传递的\n\t\tmoveChannel:   make(chan baseEntry),\n\t\tremoveChannel: make(chan interface{}),\n\t\tdrainChannel:  make(chan func(key, value interface{})),\n\t\tstopChannel:   make(chan lang.PlaceholderType),\n\t}\n\t// 把 slot 中存储的 list 全部准备好\n\ttw.initSlots()\n\t// 开启异步协程，使用 channel 来做task通信和传递\n\tgo tw.run()\n\n\treturn tw, nil\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Viewing SSH Public Key in Shell\nDESCRIPTION: Command to display the SSH public key used for GitLab authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncat ~/.ssh/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Running the go-zero RPC Server\nDESCRIPTION: Shell command to start the RPC server application.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/zrpc服务端.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo run hello.go\n```\n\n----------------------------------------\n\nTITLE: Plugin Structure Definition\nDESCRIPTION: Shows the core Plugin struct definition that contains API specification, style preferences, and directory information.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    Api   *spec.ApiSpec\n    Style string\n    Dir   string\n}\n```\n\n----------------------------------------\n\nTITLE: Template Init Command Usage\nDESCRIPTION: Shows the usage and options for initializing templates, including the home path specification option.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template init - initialize the all templates(force update)\n\nUSAGE:\n   goctl template init [command options] [arguments...]\n\nOPTIONS:\n   --home value  the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Cleaning Cache Template - Go\nDESCRIPTION: Clears cached templates in the goctl application, effectively removing any previous changes or updates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template clean\n```\n\n----------------------------------------\n\nTITLE: Generate API File Command\nDESCRIPTION: Command to create a new API file using goctl\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api -o user.api\n```\n\n----------------------------------------\n\nTITLE: Template Initialization Example\nDESCRIPTION: Example showing template initialization to a specific directory and its output.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ goctl template init --home $HOME/template\n```\n\nLANGUAGE: text\nCODE:\n```\nTemplates are generated in /Users/anqiansong/template, edit on your risk!\n```\n\n----------------------------------------\n\nTITLE: Viewing SSH Public Key in Shell\nDESCRIPTION: Command to view the existing SSH public key on the Jenkins server, which will be added to Gitlab for authentication.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/deploy.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cat ~/.ssh/id_rsa.pub\n```\n\n----------------------------------------\n\nTITLE: Sample API Response\nDESCRIPTION: Example HTTP response returned by the generated API service, showing headers and a JSON body.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Thu, 22 Oct 2020 14:03:18 GMT\nContent-Length: 14\n\n{\"message\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring Data Source and Cache\nDESCRIPTION: YAML configuration for database and Redis cache settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nDataSource: root:@tcp(localhost:3306)/gozero\nTable: shorturl\nCache:\n  - Host: localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Starting zRPC Server with Service Registration\nDESCRIPTION: Server startup logic including etcd service registration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (ags keepAliveServer) Start(fn RegisterFn) error {\n\tif err := ags.registerEtcd(); err != nil {\n\t\treturn err\n\t}\n\treturn ags.Server.Start(fn)\n}\n```\n\n----------------------------------------\n\nTITLE: Installation Links in Markdown\nDESCRIPTION: Markdown links to various installation guides including Golang setup, Go Module configuration, Goctl installation, and protoc setup documents.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/prepare.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* [Golang Installation](golang-install.md)\n* [Go Module Configuration](gomod-config.md)\n* [Goctl Installation](goctl-install.md)\n* [protoc & protoc-gen-go Installation](protoc-install.md)\n* [More](prepare-other.md)\n```\n\n----------------------------------------\n\nTITLE: Reversing Stream Elements with Reverse function in go-zero fx\nDESCRIPTION: This code demonstrates how to reverse the order of elements in a stream using the Reverse function in go-zero's fx package. It collects all elements into a slice, reverses the slice, and then outputs the reversed slice as a new stream.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/stream.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n// 例子\nfx.Just(1, 2, 3, 4, 5).Reverse().ForEach(func(item interface{}) {\n  fmt.Println(item)\n})\n\n// 源码\nfunc (p Stream) Reverse() Stream {\n\tvar items []interface{}\n  // 获取流中数据\n\tfor item := range p.source {\n\t\titems = append(items, item)\n\t}\n\t// 反转算法\n\tfor i := len(items)/2 - 1; i >= 0; i-- {\n\t\topp := len(items) - 1 - i\n\t\titems[i], items[opp] = items[opp], items[i]\n\t}\n\t\n  // 写入流\n\treturn Just(items...)\n}\n\n```\n\n----------------------------------------\n\nTITLE: RPC Directory Structure - Go\nDESCRIPTION: Shows the generated directory structure and files for a basic RPC service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n.\n├── etc\n│   └── greet.yaml\n├── go.mod\n├── go.sum\n├── greet\n│   ├── greet.go\n│   ├── greet.pb.go\n│   └── greet_grpc.pb.go\n├── greet.go\n├── greet.proto\n└── internal\n    ├── config\n    │   └── config.go\n    ├── logic\n    │   └── pinglogic.go\n    ├── server\n    │   └── greetserver.go\n    └── svc\n        └── servicecontext.go\n```\n\n----------------------------------------\n\nTITLE: Block Statement Formatting in Go\nDESCRIPTION: Shows proper formatting for code blocks in Go functions, with recommended blank line spacing after block statements like if and for loops.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/coding-spec.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc main (){\n    if x==1{\n        // do something\n    }\n\n    fmt.println(\"xxx\")\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Exponential Moving Average (EMA) in Shell\nDESCRIPTION: This snippet shows the formula for calculating the Exponential Moving Average (EMA). EMA is used to estimate the local mean of a variable over time. It allows for smoothing out the metrics and reducing frequent load shedding operations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nVt=β⋅Vt−1+(1−β)⋅θt\n```\n\n----------------------------------------\n\nTITLE: Testing URL Expansion API via cURL\nDESCRIPTION: Example of testing the URL expansion API endpoint using cURL command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/expand?shorten=f35b2a\"\n```\n\n----------------------------------------\n\nTITLE: Common RPC Service Protobuf Definition\nDESCRIPTION: Protocol buffer definition for the Common RPC service, including message types for app configuration and base app information with corresponding RPC method declarations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/datacenter.md#2025-04-22_snippet_5\n\nLANGUAGE: protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage common;\n\noption go_package = \"common\";\n\nmessage BaseAppReq{\n  int64 beid=1;\n}\n\nmessage BaseAppResp{\n  int64 beid=1;\n  string logo=2;\n  string sname=3;\n  int64 isclose=4;\n  string fullwebsite=5;\n}\n\nmessage AppConfigReq {\n  int64 beid=1;\n  int64 ptyid=2;\n}\n\nmessage AppConfigResp {\n  int64 id=1;\n  int64 beid=2;\n  int64 ptyid=3;\n  string appid=4;\n  string appsecret=5;\n  string title=6;\n}\n\nservice Common {\n  rpc GetAppConfig(AppConfigReq) returns(AppConfigResp);\n  rpc GetBaseApp(BaseAppReq) returns(BaseAppResp);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Key Pair in Shell\nDESCRIPTION: Command to generate a new RSA SSH key pair if one doesn't exist. This creates both a private and public key for authentication with Gitlab.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/deploy.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh-keygen -t rsa -b 2048 -C \"email@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Model Files Structure\nDESCRIPTION: This snippet demonstrates how to view the directory structure containing the generated model files. The tree command is used to visualize the contents of the user model directory, confirming the model files created.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/model-gen.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tree\n```\n\nLANGUAGE: text\nCODE:\n```\n.\n├── user.sql\n├── usermodel.go\n├── usermodel_gen.go\n└── vars.go\n```\n\n----------------------------------------\n\nTITLE: Function Return Statement Formatting in Go\nDESCRIPTION: Illustrates the proper formatting of function return statements in Go, including the recommended blank line before return statements.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/coding-spec.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc getUser(id string)(string,error){\n    ....\n\n    return \"xx\",nil\n}\n```\n\n----------------------------------------\n\nTITLE: Add GOPATH/bin to PATH\nDESCRIPTION: Specifies the line to add to the /etc/paths file to include the $GOPATH/bin directory in the system's PATH environment variable. This allows executing Go binaries installed in that directory from anywhere.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Goctl Template Command Help Options\nDESCRIPTION: Displays the main help menu for template operations, showing available commands and their basic usage.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template - template operation\n\nUSAGE:\n   goctl template command [command options] [arguments...]\n\nCOMMANDS:\n   init    initialize the all templates(force update)\n   clean   clean the all cache templates\n   update  update template of the target category to the latest\n   revert  revert the target template to the latest\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Basic Go Main Function Template\nDESCRIPTION: Example of a main function template used in the live template feature for Go files\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/intellij.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main(){\n\n}\n```\n\n----------------------------------------\n\nTITLE: Clean Template Cache\nDESCRIPTION: Command to clean cached templates\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template clean\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Installation in Shell\nDESCRIPTION: This snippet demonstrates how to verify the successful installation of Go by checking its version using the command line.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n$ go version\n```\n\nLANGUAGE: text\nCODE:\n```\ngo version go1.15.1 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Viewing SSH Private Key in Shell\nDESCRIPTION: Command to view the private key on the Jenkins server, which corresponds to the public key added to Gitlab. This private key is needed for Jenkins credentials.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/deploy.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat id_rsa\n```\n\n----------------------------------------\n\nTITLE: Output of Keyword Replacement\nDESCRIPTION: The output of the keyword replacement example showing how overlapping keywords are handled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/keywords.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n东京是日本的首都\n```\n\n----------------------------------------\n\nTITLE: API Login Test Command\nDESCRIPTION: cURL command to test the login API endpoint\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error-handle.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \\\n  http://127.0.0.1:8888/user/login \\\n  -H 'content-type: application/json' \\\n  -d '{\n\t\"username\":\"1\",\n\t\"password\":\"123456\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Help Information for MySQL Datasource Model Generation\nDESCRIPTION: Displays help information for the MySQL datasource model generation command, showing available options including database URL, table patterns, cache flag, directory, naming style, and IDE plugin support.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl model mysql datasource - generate model from datasource\n\nUSAGE:\n   goctl model mysql datasource [command options] [arguments...]\n\nOPTIONS:\n   --url value              the data source of database,like \"root:password@tcp(127.0.0.1:3306)/database\n   --table value, -t value  the table or table globbing patterns in the database\n   --cache, -c              generate code with cache [optional]\n   --dir value, -d value    the target dir\n   --style value            the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --idea                   for idea plugin [optional]\n```\n\n----------------------------------------\n\nTITLE: Installing Go-Zero Framework\nDESCRIPTION: Command to install the go-zero framework using go get\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/zeromicro/go-zero\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl Tool\nDESCRIPTION: Command to install the goctl tool using go get with proxy settings\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Verify Go Installation\nDESCRIPTION: Verifies the successful installation of Go by checking the installed version. It relies on the 'go' command being available in the system's PATH.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go version\n```\n\n----------------------------------------\n\nTITLE: Reverting Template - Go\nDESCRIPTION: Restores a specified template file in goctl based on the category and the name of the template that requires restoration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template revert -category api -name user_template\n```\n\n----------------------------------------\n\nTITLE: Running the greet API Service\nDESCRIPTION: Command to run the greet API service, specifying the configuration file located in the etc directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ cd greet\n$ go run greet.go -f etc/greet-api.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring ZSH Autocompletion\nDESCRIPTION: Command to configure autocompletion for ZSH shell environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-completion.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo PROG=goctl source /Users/keson/.goctl/.auto_complete/zsh/goctl_autocomplete >> ~/.zshrc && source ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Setting timezone in Dockerfile\nDESCRIPTION: Shell commands to add and set timezone in an Alpine-based Dockerfile.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\n```\n\n----------------------------------------\n\nTITLE: Organizing Import Statements in Go\nDESCRIPTION: Demonstrates the proper organization of import statements in Go, grouped by Official packages, Project packages, and Third-party dependencies, separated by blank lines.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/coding-spec.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"string\"\n\n    \"greet/user/internal/config\"\n\n    \"google.golang.org/grpc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Go Module Status Output\nDESCRIPTION: Displays the expected output of the command to check the GO111MODULE status, indicating that Go Modules are enabled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\non\n```\n\n----------------------------------------\n\nTITLE: Protoc Version Output\nDESCRIPTION: Displays the expected output after running the command to check the protoc version, showing the installed version number.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nlibprotoc 3.14.0\n```\n\n----------------------------------------\n\nTITLE: Example of Template Initialization Command\nDESCRIPTION: An example demonstrating the initialization of templates in a specified directory using the '--home' flag. Intended for setup in specific development environments.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl template init --home $HOME/template\n```\n\nLANGUAGE: text\nCODE:\n```\nTemplates are generated in /Users/anqiansong/template, edit on your risk!\n```\n\n----------------------------------------\n\nTITLE: Validate API File\nDESCRIPTION: Command to validate if an API file is valid\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api validate -api user.api\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Subcommand Help\nDESCRIPTION: Shows the help menu for the 'go' subcommand, which is used specifically for generating Golang API services. Details the available options including directory output, API file specification, and file naming format.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-api.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -h\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api go - generate go files for provided api in yaml file\n\nUSAGE:\n   goctl api go [command options] [arguments...]\n\nOPTIONS:\n   --dir value    the target dir\n   --api value    the api file\n   --style value  the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown List of Go-Zero Resources\nDESCRIPTION: A Markdown list of links to Go-Zero related discussions, presentations, and implementation guides. Includes topics such as architecture design, microservice framework overview, caching strategies, JWT authentication, and migration from go-micro.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goreading.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Go夜读\n\n* [2020-08-16 晓黑板 go-zero 微服务框架的架构设计](https://talkgo.org/t/topic/729)\n* [2020-10-03 go-zero 微服务框架和线上交流](https://talkgo.org/t/topic/1070)\n* [防止缓存击穿之进程内共享调用](https://talkgo.org/t/topic/968)\n* [基于go-zero实现JWT认证](https://talkgo.org/t/topic/1114)\n* [再见go-micro！企业项目迁移go-zero全攻略（一）](https://talkgo.org/t/topic/1607)\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Implementation in Go\nDESCRIPTION: This Go code demonstrates the implementation of a basic plugin for the Goctl framework. It initializes a new plugin, checks for the presence of API data, and prints the API structure and directory path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/plugin.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"github.com/zeromicro/go-zero/tools/goctl/plugin\"\n)\n\nfunc main() {\n    plugin, err := plugin.NewPlugin()\n    if err != nil {\n        panic(err)\n    }\n    if plugin.Api != nil {\n        fmt.Printf(\"api: %+v \\n\", plugin.Api)\n    }\n    fmt.Printf(\"dir: %s \\n\", plugin.Dir)\n    fmt.Println(\"Enjoy anything you want.\")\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Dockerfile for Go-Zero service\nDESCRIPTION: Example Dockerfile generated by goctl docker command for a Go-Zero service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nFROM golang:alpine AS builder\nLABEL stage=gobuilder\nENV CGO_ENABLED 0\nENV GOOS linux\nENV GOPROXY https://goproxy.cn,direct\nWORKDIR /build/zero\nADD go.mod .\nADD go.sum .\nRUN go mod download\nCOPY . .\nCOPY service/hello/etc /app/etc\nRUN go build -ldflags=\"-s -w\" -o /app/hello service/hello/hello.go\nFROM alpine\nRUN apk update --no-cache\nRUN apk add --no-cache ca-certificates\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\nWORKDIR /app\nCOPY --from=builder /app/hello /app/hello\nCOPY --from=builder /app/etc /app/etc\nCMD [\"./hello\", \"-f\", \"etc/hello-api.yaml\"]\n```\n\n----------------------------------------\n\nTITLE: Signature Configuration Structures in Go\nDESCRIPTION: API signature configuration including strict mode settings, expiry duration, and private key configurations.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-config.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nSignatureConf struct {\n    Strict      bool          `json:\",default=false\"` // Whether it is Strict mode, if it is, Private Keys is required\n    Expiry      time.Duration `json:\",default=1h\"` // Validity period, default is 1 hour\n    PrivateKeys []PrivateKeyConf // Signing key related configuration\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nPrivateKeyConf struct {\n    Fingerprint string // Fingerprint configuration\n    KeyFile     string // Key configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Expiry in Zero SQL Model\nDESCRIPTION: Example showing how to set cache expiry time to 24 hours when creating a new node connection using sqlc.NewNodeConn\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsqlc.NewNodeConn(conn,redis,cache.WithExpiry(24*time.Hour))\n```\n\n----------------------------------------\n\nTITLE: Reverting API Config Template Example\nDESCRIPTION: Example command for reverting the config.tpl template in the API category to its latest version.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl template revert -c api -name config.tpl\n```\n\n----------------------------------------\n\nTITLE: Initializing Template - Go\nDESCRIPTION: Saves the API, RPC, or model templates using the goctl command, serving as a setup for all relevant templates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngoctl template init\n```\n\n----------------------------------------\n\nTITLE: Installing goctl CLI Tool\nDESCRIPTION: Command to install the goctl command-line tool for code generation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Checking GO111MODULE Status in Shell\nDESCRIPTION: Command to check the current status of GO111MODULE environment variable\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GO111MODULE\n```\n\n----------------------------------------\n\nTITLE: Defining Java-Style Documentation Comments in ANTLR\nDESCRIPTION: ANTLR grammar rule for defining Java-style multi-line documentation comments in the Zero-Doc syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_8\n\nLANGUAGE: antlrv4\nCODE:\n```\n'/*' .*? '*/'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Autocompletion\nDESCRIPTION: Command to configure autocompletion for Bash shell environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-completion.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ echo PROG=goctl source /Users/keson/.goctl/.auto_complete/bash/goctl_autocomplete >> ~/.bashrc && source ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Moving protoc binary to GOPATH\nDESCRIPTION: Command to move the protoc binary to the GOPATH/bin directory for system-wide accessibility.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/protoc-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmv protoc $GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Updating Model Templates Example\nDESCRIPTION: Example command for updating all templates in the model category to their latest versions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl template update -c model\n```\n\n----------------------------------------\n\nTITLE: Add Go to PATH (Linux)\nDESCRIPTION: Shows the line to add to the user's .profile file to include Go's bin directory in the PATH environment variable.  This allows the `go` command to be run from any directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport PATH=$PATH:/usr/local/go/bin\n```\n\n----------------------------------------\n\nTITLE: Verifying Kubernetes Deployment\nDESCRIPTION: Command to check the status of deployed resources in the specified namespace using kubectl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-kube.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get all -n adhoc\n```\n\n----------------------------------------\n\nTITLE: Checking Goctl Version\nDESCRIPTION: Command to view the installed version of goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngoctl -v\n```\n\n----------------------------------------\n\nTITLE: Template Initialization Command\nDESCRIPTION: Shell command to edit the handler template file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vim ~/.goctl/api/handler.tpl\n```\n\n----------------------------------------\n\nTITLE: Initializing Go-Zero Demo Project in Shell\nDESCRIPTION: Shell commands to create and initialize the go-zero-demo project directory with Go modules. This sets up the base structure for Go-Zero example code and subprojects.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/concept.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~\n$ mkdir go-zero-demo&&cd go-zero-demo\n$ go mod init go-zero-demo\n```\n\n----------------------------------------\n\nTITLE: Checking goctl Environment\nDESCRIPTION: Command to verify that the goctl environment is properly set up with all required dependencies like protoc, protoc-gen-go, and protoc-gen-go-grpc.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngoctl env check -i -f\n```\n\n----------------------------------------\n\nTITLE: Example HTTP Response\nDESCRIPTION: This is an example HTTP response from the API service. It shows a 200 OK status with a JSON response containing an empty 'message' field.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Thu, 22 Oct 2020 14:03:18 GMT\nContent-Length: 14\n\n{\"message\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Grammar definition for Java-style documentation comments\nDESCRIPTION: Defines the grammar rule for Java-style documentation comments, specifying that they must start with `/*` and end with `*/`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_17\n\nLANGUAGE: antlrv4\nCODE:\n```\n\"'/*' .*? '*/'\"\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template with goctl\nDESCRIPTION: This command generates a template proto file for a user service. It includes basic message and service definitions that can be customized.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc template -o=user.proto\n```\n\n----------------------------------------\n\nTITLE: Displaying the Directory Structure of the Greet Service in Shell\nDESCRIPTION: This shell command uses the 'tree' utility to display the directory structure of the newly created 'greet' service, showing the various components and files generated by goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/monolithic-service.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tree greet\n```\n\n----------------------------------------\n\nTITLE: Generating Model Code with goctl\nDESCRIPTION: Command to generate model code using goctl for the 'user' table. It specifies the database connection and output directory.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngoctl model mysql datasource -url=\"root:password@tcp(127.0.0.1:3306)/gozero\" -table=\"user\" -dir ./model\n```\n\n----------------------------------------\n\nTITLE: Set Go Proxy\nDESCRIPTION: Configures the GOPROXY environment variable to use a specific Go proxy. This is often done to improve download speeds and ensure reliable access to dependencies.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GOPROXY=https://goproxy.cn\n```\n\n----------------------------------------\n\nTITLE: Protoc-Gen-Go Installation Timeout Error\nDESCRIPTION: Network timeout error when installing protoc-gen-go package. Related to GOPROXY configuration issues.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngo get github.com/golang/protobuf/protoc-gen-go: module github.com/golang/protobuf/protoc-gen-go: Get \"https://proxy.golang.org/github.com/golang/protobuf/protoc-gen-go/@v/list\": dial tcp 216.58.200.49:443: i/o timeout\n```\n\n----------------------------------------\n\nTITLE: Goctl Error Message\nDESCRIPTION: Common error message when goctl is not found in system path.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ncommand not found: goctl\n```\n\n----------------------------------------\n\nTITLE: HTTP Response from the Service\nDESCRIPTION: The HTTP response output from the service, showing a successful 200 status code and an empty message in the JSON response body.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Thu, 22 Oct 2020 11:31:46 GMT\nContent-Length: 14\n\n{\"message\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Setting GOMODCACHE in Shell\nDESCRIPTION: Command to set GOMODCACHE to the standard modules directory\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo env -w GOMODCACHE=$GOPATH/pkg/mod\n```\n\n----------------------------------------\n\nTITLE: Installing goctl CLI Tool\nDESCRIPTION: Command to install the goctl command-line tool, which is used for code generation with go-zero.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Testing URL Shortening API via cURL\nDESCRIPTION: Example of testing the URL shortening API endpoint using cURL command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/shorturl.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/shorten?url=http://www.xiaoheiban.cn\"\n```\n\n----------------------------------------\n\nTITLE: Collecting System Logs in Go-Zero Logx\nDESCRIPTION: Demonstrates how to collect system logs into logx for unified logging.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/logx.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nlogx.CollectSysLog()\n```\n\n----------------------------------------\n\nTITLE: Log Level Constants Definition\nDESCRIPTION: Defines the available log levels as constants including InfoLevel, ErrorLevel, and SevereLevel.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/logx.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\t// Print all levels of logs\n\tInfoLevel = iotas\n\t// Print errors, slows, stacks logs\n\tErrorLevel\n\t// Only print server level logs\n\tSevereLevel\n)\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Text representation of the project directory layout showing response package location.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngreet\n├── response\n│   └── response.go\n└── xxx...\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Model Generation Options\nDESCRIPTION: Command options for generating PostgreSQL models from datasource. Includes configuration for schema selection, cache generation, and database connection settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-commands.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ngoctl model pg -url=\"postgres://root:password@127.0.0.1:5432/database?sslmode=disable\" -table=\"*\" -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker image for Go-Zero service\nDESCRIPTION: Command to build a Docker image for the Go-Zero service using the generated Dockerfile.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker build -t hello:v1 -f service/hello/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image\nDESCRIPTION: Command to build the Docker image for the hello service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t hello:v1 -f service/hello/Dockerfile .\n```\n\n----------------------------------------\n\nTITLE: Organizing Import Statements in go-zero\nDESCRIPTION: Shows the recommended pattern for organizing import statements, grouping them by official packages, current project packages, and third-party dependencies with appropriate line breaks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/specification.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"context\"\n    \"string\"\n\n    \"greet/user/internal/config\"\n\n    \"google.golang.org/grpc\"\n)\n```\n\n----------------------------------------\n\nTITLE: Testing the Service in Terminal 2\nDESCRIPTION: Command and output for testing the running service from a second terminal using curl, showing the successful HTTP response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i http://localhost:8888/from/you\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Thu, 22 Oct 2020 15:26:00 GMT\nContent-Length: 14\n\n{\"message\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Generation Complete Message\nDESCRIPTION: Confirmation message indicating successful API code generation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-coding.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Extract Go Archive (Linux)\nDESCRIPTION: Extracts the downloaded Go archive to the /usr/local directory. Requires the `tar` command to be available.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Installing protoc-gen-go plugins\nDESCRIPTION: Commands to install the latest versions of protoc-gen-go and protoc-gen-go-grpc plugins using go install.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/protoc-install.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n```\n\n----------------------------------------\n\nTITLE: Installing goctl CLI tool\nDESCRIPTION: Command to install the goctl CLI tool using Go modules.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: JSON Tag Template Definition\nDESCRIPTION: Template for generating JSON tags in api files using live templates\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/intellij.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njson:\"$FIELD_NAME$\"\n```\n\n----------------------------------------\n\nTITLE: Template Clean Command Usage\nDESCRIPTION: Displays the usage and options for cleaning cached templates, including the home path specification option.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template-cmd.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template clean - clean the all cache templates\n\nUSAGE:\n   goctl template clean [command options] [arguments...]\n\nOPTIONS:\n   --home value  the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Installing goctl tool\nDESCRIPTION: These commands install the `goctl` tool, which is used for code generation in go-zero projects.  The first command is for general usage, the second command demonstrates the installation for go1.16+ versions using `go install`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\nLANGUAGE: shell\nCODE:\n```\nGOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container\nDESCRIPTION: Command to run the Docker container with port mapping\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -it -p 8888:8888 hello:v1\n```\n\n----------------------------------------\n\nTITLE: GO111MODULE Status Output\nDESCRIPTION: Example output showing GO111MODULE is enabled\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\non\n```\n\n----------------------------------------\n\nTITLE: Verifying Generated Model Files in Go-Zero\nDESCRIPTION: This command displays the directory structure after model generation, showing the created files including user.sql, usermodel.go, usermodel_gen.go, and vars.go.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/model-gen.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tree\n```\n\n----------------------------------------\n\nTITLE: Collecting SysLog messages\nDESCRIPTION: This code snippet shows how to collect system log messages into logx using `logx.CollectSysLog()`. This allows system log entries to be integrated with the centralized logging system managed by logx.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/logx.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nlogx.CollectSysLog()\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl CLI Tool\nDESCRIPTION: Command to install the goctl command-line tool for code generation\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Generating User Models using DDL in Go Zero\nDESCRIPTION: This snippet demonstrates how to generate Go model files from a SQL DDL file using the goctl command in the specified directory. The command reads the user.sql file and creates the necessary model files based on its structure.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/model-gen.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cd service/user/model\n$ goctl model mysql ddl -src user.sql -dir . -c\n```\n\nLANGUAGE: text\nCODE:\n```\nDone.\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool using go install for Go 1.16+\nDESCRIPTION: Alternative command for installing goctl using go install for Go version 1.16 and above.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro/brief.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nGOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Inserting User Data\nDESCRIPTION: This SQL statement inserts a new user record into the `user` table with predefined values. This is for pre-setting user data for demonstration purposes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `user` (number,name,password,gender)values ('666','小明','123456','男');\n```\n\n----------------------------------------\n\nTITLE: Template Management Commands\nDESCRIPTION: Commands for managing go-zero templates including initialization, cleaning cache, updating, and reverting template changes.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-commands.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ngoctl template init\ngoctl template clean\ngoctl template update -c api\ngoctl template revert -c api -n template.tpl\n```\n\n----------------------------------------\n\nTITLE: Docker Login Script\nDESCRIPTION: Shell script for Docker registry authentication using environment variables.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\ndocker login --username=$docker-user --password=$docker-pass $docker-server\n```\n\n----------------------------------------\n\nTITLE: Cleaning Template Cache with Goctl\nDESCRIPTION: Example command for cleaning all cached templates from the local system.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl template clean\n```\n\n----------------------------------------\n\nTITLE: Generating API Template\nDESCRIPTION: Command to generate a new API template file using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api -o greet.api\n```\n\n----------------------------------------\n\nTITLE: Project Structure for go-zero Greet API\nDESCRIPTION: Shows the directory structure for a basic go-zero Greet API project generated by goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/HTTP Middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ tree                           \n.\n├── etc\n│   └── greet-api.yaml\n├── go.mod\n├── go.sum\n├── greet.api\n├── greet.go\n└── internal\n    ├── config\n    │   └── config.go\n    ├── handler\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic\n    │   └── greetlogic.go\n    ├── svc\n    │   └── servicecontext.go\n    └── types\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: Viewing Goctl Completion Help\nDESCRIPTION: Shows the help information for goctl completion command, displaying available options and usage instructions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-completion.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl completion -h\nNAME:\n   goctl completion - generation completion script, it only works for unix-like OS\n\nUSAGE:\n   goctl completion [command options] [arguments...]\n\nOPTIONS:\n   --name value, -n value  the filename of auto complete script, default is [goctl_autocomplete]\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Single-Line Comments\nDESCRIPTION: Demonstrates valid single-line comments, starting with `//`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_15\n\nLANGUAGE: api\nCODE:\n```\n\"// doc\n// comment\"\n```\n\n----------------------------------------\n\nTITLE: Creating a New Adaptive Shedder in Go\nDESCRIPTION: Constructor function for creating a new adaptive load shedder with configurable options. It sets up the sliding windows for tracking metrics and initializes the shedder with default or custom parameters.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewAdaptiveShedder(opts ...ShedderOption) Shedder {\n    // To ensure code uniformity\n    // To return the default empty implementation when the developer closes, for code uniformity\n    // go-zero uses this design in many places, such as Breaker, the logging component\n    if !enabled.True() {\n        return newNopShedder()\n    }\n    // options mode sets optional configuration parameters\n    options := shedderOptions{\n        // Default statistics for the last 5s\n        window: defaultWindow,\n        // Default barrel quantity 50\n        buckets:      defaultBuckets,\n        // cpu load\n        cpuThreshold: defaultCpuThreshold,\n    }\n    for _, opt := range opts {\n        opt(&options)\n    }\n    // Calculate each window interval time, default is 100ms\n    bucketDuration := options.window / time.Duration(options.buckets)\n    return &adaptiveShedder{\n        // cpu load\n        cpuThreshold:    options.cpuThreshold,\n        // How many sliding window cells are included in 1s time\n        windows:         int64(time.Second / bucketDuration),\n        // Last rejection time\n        dropTime:        syncx.NewAtomicDuration(),\n        // Have you been rejected recently\n        droppedRecently: syncx.NewAtomicBool(),\n        // qps statistics, sliding time window\n        // Ignore the current writing window (bucket), incomplete time period may lead to data anomalies\n        passCounter: collection.NewRollingWindow(options.buckets, bucketDuration,\n            collection.IgnoreCurrentBucket()),\n        // Response time statistics, sliding time window\n        // Ignore the current writing window (bucket), incomplete time period may lead to data anomalies\n        rtCounter: collection.NewRollingWindow(options.buckets, bucketDuration,\n            collection.IgnoreCurrentBucket()),\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Docker Container\nDESCRIPTION: Commands to add timezone data and set the container timezone to Asia/Shanghai\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-docker.md#2025-04-22_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\n```\n\n----------------------------------------\n\nTITLE: Defining Main Function Template in Go\nDESCRIPTION: This code snippet defines a basic structure for the main function in a Go application. It acts as a template for developers to quickly insert the main function structure in their Go files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/ecology/intellij.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main(){\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating go-stash Configuration File in Shell\nDESCRIPTION: Shell command to create and edit the go-stash configuration file using vim.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/log.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vim config.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool\nDESCRIPTION: Command to install the goctl CLI tool using go get.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-other.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Balancer Registration Method\nDESCRIPTION: Method for registering custom load balancer with gRPC during initialization\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/zrpc.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc init() {\n\tbalancer.Register(newBuilder())\n}\n\nfunc newBuilder() balancer.Builder {\n\treturn base.NewBalancerBuilder(Name, new(p2cPickerBuilder))\n}\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool\nDESCRIPTION: Command to install the goctl command-line tool from the go-zero repository using Go Modules, with environment variables set to use a Chinese proxy for faster downloads.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\ngo: found github.com/zeromicro/go-zero/tools/goctl in github.com/zeromicro/go-zero v1.0.22\ngo: downloading github.com/urfave/cli v1.22.4\ngo: downloading github.com/logrusorgru/aurora v2.0.3+incompatible\ngo: downloading github.com/iancoleman/strcase v0.0.0-20191112232945-16388991a334\ngo: downloading github.com/go-sql-driver/mysql v1.5.0\ngo: downloading github.com/cpuguy83/go-md2man/v2 v2.0.0-20190314233015-f79a8a8ca69d\ngo: downloading github.com/xwb1989/sqlparser v0.0.0-20180606152119-120387863bf2\ngo: downloading github.com/spaolacci/murmur3 v1.1.0\ngo: downloading github.com/russross/blackfriday/v2 v2.0.1\ngo: downloading go.uber.org/automaxprocs v1.3.0\ngo: downloading github.com/shurcooL/sanitized_anchor_name v1.0.0\ngo: downloading github.com/emicklei/proto v1.9.0\ngo: downloading gopkg.in/yaml.v2 v2.2.8\ngo: github.com/go-sql-driver/mysql upgrade => v1.5.0\ngo: gopkg.in/yaml.v2 upgrade => v2.3.0\ngo: github.com/urfave/cli upgrade => v1.22.4\ngo: github.com/cpuguy83/go-md2man/v2 upgrade => v2.0.0\ngo: github.com/iancoleman/strcase upgrade => v0.1.2\ngo: downloading github.com/cpuguy83/go-md2man/v2 v2.0.0\ngo: downloading github.com/iancoleman/strcase v0.1.2\ngo: downloading gopkg.in/yaml.v2 v2.3.0\n\n$ export GOPATH=$(go env GOPATH)\n$ export PATH=\"$GOPATH/bin:$PATH\"\n\n$ goctl -v\ngoctl version 20201021 linux/amd64\n```\n\n----------------------------------------\n\nTITLE: Configuring Bash Shell Autocomplete\nDESCRIPTION: Command to configure autocomplete for Bash shell environment.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-completion.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ echo PROG=goctl source /Users/keson/.goctl/.auto_complete/bash/goctl_autocomplete >> ~/.bashrc && source ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Flushing in PeriodicalExecutor in Go\nDESCRIPTION: This code snippet shows the backgroundFlush method of PeriodicalExecutor, which manages the periodic execution of tasks and handles task flushing based on various conditions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) backgroundFlush() {\n\tthreading.GoSafe(func() {\n\t\tticker := pe.newTicker(pe.interval)\n\t\tdefer ticker.Stop()\n\n\t\tvar commanded bool\n\t\tlast := timex.Now()\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase vals := <-pe.commander:\n\t\t\t\tcommanded = true\n\t\t\t\tpe.enterExecution()\n\t\t\t\tpe.confirmChan <- lang.Placeholder\n\t\t\t\tpe.executeTasks(vals)\n\t\t\t\tlast = timex.Now()\n\t\t\tcase <-ticker.Chan():\n\t\t\t\tif commanded {\n\t\t\t\t\tcommanded = false\n\t\t\t\t} else if pe.Flush() {\n\t\t\t\t\tlast = timex.Now()\n\t\t\t\t} else if timex.Since(last) > pe.interval*idleRound {\n\t\t\t\t\tpe.guarded = false\n\t\t\t\t\tpe.Flush()\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Error Output When Running Without Dependencies\nDESCRIPTION: Error messages displayed when attempting to run the service without first installing the required go-zero dependencies, showing missing packages.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ go run greet.go etc/greet-api.yaml             \ngreet.go:11:2: cannot find package \"github.com/zeromicro/go-zero/core/conf\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/core/conf (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/core/conf (from $GOPATH)\ninternal/logic/greetlogic.go:9:2: cannot find package \"github.com/zeromicro/go-zero/core/logx\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/core/logx (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/core/logx (from $GOPATH)\ngreet.go:12:2: cannot find package \"github.com/zeromicro/go-zero/rest\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/rest (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/rest (from $GOPATH)\ninternal/handler/greethandler.go:10:2: cannot find package \"github.com/zeromicro/go-zero/rest/httpx\" in any of:\n        /usr/local/go/src/github.com/zeromicro/go-zero/rest/httpx (from $GOROOT)\n        /home/username/Develop/Go/src/github.com/zeromicro/go-zero/rest/httpx (from $GOPATH)\n```\n\n----------------------------------------\n\nTITLE: Database Schema Definition\nDESCRIPTION: SQL schema for book table with name and price fields\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore-en.md#2025-04-22_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE `book` (\n  `book` varchar(255) NOT NULL COMMENT 'book name',\n  `price` int NOT NULL COMMENT 'book price',\n  PRIMARY KEY(`book`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;\n```\n\n----------------------------------------\n\nTITLE: Creating a new Go-Zero API service\nDESCRIPTION: Command to create a new Go-Zero API service named 'hello' using goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api new hello\n```\n\n----------------------------------------\n\nTITLE: Modified Response Format\nDESCRIPTION: Standardized JSON response format after customization.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 0,\n    \"msg\": \"OK\",\n    \"data\": {\n        \"message\": \"Hello go-zero!\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Installation on Windows\nDESCRIPTION: Commands to verify successful Go installation on Windows systems.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/golang-install.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ go version\n```\n\nLANGUAGE: text\nCODE:\n```\ngo version go1.15.1 windows/amd64\n```\n\n----------------------------------------\n\nTITLE: Goctl Command Autocompletion Demo\nDESCRIPTION: Demonstrates the available commands that appear when using tab completion with goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-completion.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl\napi            -- generate api related files\nbug            -- report a bug\ncompletion     -- generation completion script, it only works for unix-like OS\ndocker         -- generate Dockerfile\nhelp        h  -- Shows a list of commands or help for one command\nkube           -- generate kubernetes files\nmigrate        -- migrate from tal-tech to zeromicro\nmodel          -- generate model code\nrpc            -- generate rpc code\ntemplate       -- template operation\nupgrade        -- upgrade goctl to latest version\n```\n\n----------------------------------------\n\nTITLE: Example of Correct Java-Style Documentation Comments\nDESCRIPTION: Demonstrates a valid Java-style documentation comment, starting with `/*` and ending with `*/`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_18\n\nLANGUAGE: api\nCODE:\n```\n\"/**\n * java-style doc\n */\"\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Single-Line Comments\nDESCRIPTION: Demonstrates an invalid single-line comment, showing that newline characters are not permitted after `//`.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_16\n\nLANGUAGE: api\nCODE:\n```\n\"// break\nline comments\"\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes deployment YAML with goctl\nDESCRIPTION: Command to generate a Kubernetes deployment YAML file for a Redis service using goctl kube.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngoctl kube deploy -name redis -namespace adhoc -image redis:6-alpine -o redis.yaml -port 6379\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Single-Line Comments in API\nDESCRIPTION: This snippet shows an incorrect usage of single-line comments in API syntax. The comment is split across multiple lines, which is not allowed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/api-grammar.md#2025-04-22_snippet_5\n\nLANGUAGE: api\nCODE:\n```\n// break\nline comments\n```\n\n----------------------------------------\n\nTITLE: Generating Autocompletion Script\nDESCRIPTION: Demonstrates the process of generating the autocompletion script and provides instructions for shell configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-completion.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl completion\ngeneration auto completion success!\nexecutes the following script to setting shell:\necho PROG=goctl source /Users/keson/.goctl/.auto_complete/zsh/goctl_autocomplete >> ~/.zshrc && source ~/.zshrc\nor\necho PROG=goctl source /Users/keson/.goctl/.auto_complete/bash/goctl_autocomplete >> ~/.bashrc && source ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Markdown Table Structure for WeChat Account Details\nDESCRIPTION: HTML table markup showing the WeChat official account details including name, author and QR code\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/wechat.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n    <tr>\n        <td>Name</td>\n        <td>Author</td>\n        <td>QrCode</td>\n    </tr>\n    <tr>\n        <td>微服务实战</td>\n        <td><a href=\"https://github.com/kevwan\">kevwan</a></td>\n        <td><img src=\"https://zeromicro.github.io/go-zero-pages/resource/go-zero-practise.png\" alt=\"微服务实践\" width=\"300\"/></td>\n    </tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Selecting Nodes for Requests Using p2c Algorithm\nDESCRIPTION: This snippet implements the logic to select nodes based on the number of available connections. It includes handling cases for no nodes, one node, two nodes, and multiple nodes using the p2c algorithm.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/balance.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nswitch len(p.conns) {\n  case 0: // No node, return error\n    return emptyPickResult, balancer.ErrNoSubConnAvailable\n  case 1: // There is a node, return this node directly\n    chosen = p.choose(p.conns[0], nil)\n  case 2: // There are two nodes, calculate the load and return the node with the lower load\n    chosen = p.choose(p.conns[0], p.conns[1])\n  default: // There are multiple nodes, p2c picks two nodes, compares the load of these two nodes, and returns the node with the lower load\n    var node1, node2 *subConn\n    // 3 times random selection of two nodes\n    for i := 0; i < pickTimes; i++ {\n      a := p.r.Intn(len(p.conns))\n      b := p.r.Intn(len(p.conns) - 1)\n      if b >= a {\n        b++\n      }\n      node1 = p.conns[a]\n      node2 = p.conns[b]\n      // If the selected node meets the health requirements this time, break the selection\n      if node1.healthy() && node2.healthy() {\n        break\n      }\n    }\n    // Compare the load of the two nodes and choose the one with the lower load\n    chosen = p.choose(node1, node2)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a test request to the service\nDESCRIPTION: This command sends an HTTP request to the local API service running on port 8888 using `curl`. It requests the `/from/you` endpoint.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/intro/brief.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: 解决goctl命令找不到的问题\nDESCRIPTION: 当系统报告找不到goctl命令时，需要确保goctl已经正确安装，并且已添加到系统的环境变量中。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/error.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncommand not found: goctl\n```\n\n----------------------------------------\n\nTITLE: Moving protoc binary to GOPATH in macOS\nDESCRIPTION: After downloading and extracting the protoc binary, this command moves it to the GOPATH/bin directory, making it accessible from the command line.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/protoc-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mv protoc $GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Directory Structure\nDESCRIPTION: Using the tree command to display the initial directory structure containing only the go.mod file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n➜  datacenter tree\n.\n└── go.mod\n\n0 directories, 1 file\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Mall Project\nDESCRIPTION: Creates a new Go module for the mall microservices project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/micro-service.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir go-zero-demo\ncd go-zero-demo\ngo mod init go-zero-demo\n```\n\n----------------------------------------\n\nTITLE: Generating Go Server Code\nDESCRIPTION: Command to generate Go server code from an API definition file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -api greet.api -dir greet\n```\n\n----------------------------------------\n\nTITLE: Generate API Documentation\nDESCRIPTION: Command to generate markdown documentation for an API\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/build-tool/tool-intro.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api doc -dir user\n```\n\n----------------------------------------\n\nTITLE: Checking GOMODCACHE in Shell\nDESCRIPTION: Command to view current GOMODCACHE setting\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GOMODCACHE\n```\n\n----------------------------------------\n\nTITLE: Testing Go-Zero service HTTP endpoint\nDESCRIPTION: curl command to test the HTTP endpoint of the deployed Go-Zero service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8888/from/you\n```\n\n----------------------------------------\n\nTITLE: Adding GOPATH to Environment Variables\nDESCRIPTION: Configuration text to add GOPATH/bin to system path for Goctl accessibility.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-install.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: TaskContainer Interface Definition in Go\nDESCRIPTION: Defines the interface for task containers that handle adding, executing, and removing tasks in batch.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/executors.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nTaskContainer interface {\n\tAddTask(task interface{}) bool\n\tExecute(tasks interface{})\n\tRemoveAll() interface{}\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Blog Feature in Docusaurus Config\nDESCRIPTION: Shows how to disable the blog feature by setting blog configuration to false in the Docusaurus configuration\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-blog/2021-08-26-welcome/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nblog: false\n```\n\n----------------------------------------\n\nTITLE: Defining the Plugin Structure\nDESCRIPTION: This Go code snippet defines the structure of the Plugin used in Goctl. It includes the ApiSpec, style, and directory properties, which manage the plugin's functionality and behavior.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/plugin.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ntype Plugin struct {\n    Api   *spec.ApiSpec\n    Style string\n    Dir   string\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Environment Path Configuration\nDESCRIPTION: Command to edit the paths file for adding GOPATH/bin to environment variables on Mac/Linux systems.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-install.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo vim /etc/paths\n```\n\n----------------------------------------\n\nTITLE: Install Goctl (Go 1.15 and below)\nDESCRIPTION: Installs Goctl using `go get` with specific environment variables for Go versions 1.15 and below.  This ensures proper dependency resolution and installation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# Go 1.15 及之前版本\n    GO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment Configuration\nDESCRIPTION: Complete Kubernetes deployment YAML generated by goctl kube command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-other.md#2025-04-22_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: redis\n  namespace: adhoc\n  labels:\n    app: redis\nspec:\n  replicas: 3\n  revisionHistoryLimit: 5\n  selector:\n    matchLabels:\n      app: redis\n  template:\n    metadata:\n      labels:\n        app: redis\n    spec:\n      containers:\n      - name: redis\n        image: redis:6-alpine\n        lifecycle:\n          preStop:\n            exec:\n              command: [\"sh\",\"-c\",\"sleep 5\"]\n        ports:\n        - containerPort: 6379\n        readinessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 5\n          periodSeconds: 10\n        livenessProbe:\n          tcpSocket:\n            port: 6379\n          initialDelaySeconds: 15\n          periodSeconds: 20\n        resources:\n          requests:\n            cpu: 500m\n            memory: 512Mi\n          limits:\n            cpu: 1000m\n            memory: 1024Mi\n        volumeMounts:\n        - name: timezone\n          mountPath: /etc/localtime\n      volumes:\n        - name: timezone\n          hostPath:\n            path: /usr/share/zoneinfo/Asia/Shanghai\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: redis-svc\n  namespace: adhoc\nspec:\n  ports:\n    - port: 6379\n  selector:\n    app: redis\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-c\n  namespace: adhoc\n  labels:\n    app: redis-hpa-c\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      targetAverageUtilization: 80\n---\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: redis-hpa-m\n  namespace: adhoc\n  labels:\n    app: redis-hpa-m\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: redis\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: memory\n      targetAverageUtilization: 80\n```\n\n----------------------------------------\n\nTITLE: Check Go Module Status\nDESCRIPTION: Checks the current status of the GO111MODULE environment variable. This variable controls whether Go Modules are enabled.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ go env GO111MODULE\n```\n\n----------------------------------------\n\nTITLE: Project Structure Example\nDESCRIPTION: Directory structure showing the layout of a hello service project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-other.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngreet\n├── go.mod\n├── go.sum\n└── service\n    └── hello\n        ├── Dockerfile\n        ├── etc\n        │   └── hello-api.yaml\n        ├── hello.api\n        ├── hello.go\n        └── internal\n            ├── config\n            │   └── config.go\n            ├── handler\n            │   ├── hellohandler.go\n            │   └── routes.go\n            ├── logic\n            │   └── hellologic.go\n            ├── svc\n            │   └── servicecontext.go\n            └── types\n                └── types.go\n```\n\n----------------------------------------\n\nTITLE: Setting GOPROXY in Shell\nDESCRIPTION: Command to configure GOPROXY to use Chinese mirror\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GOPROXY=https://goproxy.cn\n```\n\n----------------------------------------\n\nTITLE: Enabling GO111MODULE in Shell\nDESCRIPTION: Command to enable GO111MODULE environment variable\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/gomod-config.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GO111MODULE=\"on\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Cached Templates with goctl\nDESCRIPTION: This command is used to clean all cached templates in the goctl environment, which helps in maintaining up-to-date templates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template clean - clean the all cache templates\n\nUSAGE:\n   goctl template clean [command options] [arguments...]\n\nOPTIONS:\n   --home value  the goctl home path of the template\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Docker Alpine Image\nDESCRIPTION: Shell commands to set timezone in Alpine-based Docker images.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-other.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nRUN apk add --no-cache tzdata\nENV TZ Asia/Shanghai\n```\n\n----------------------------------------\n\nTITLE: Search API Definition\nDESCRIPTION: API definitions for article search and management functionality\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/datacenter.md#2025-04-22_snippet_5\n\nLANGUAGE: api\nCODE:\n```\ntype SearchReq struct {\n\tKeyword string `json:\"keyword\"`\n\tPage string `json:\"page\"`\n\tSize string `json:\"size\"`\n}\n// ... [rest of the code]\n```\n\n----------------------------------------\n\nTITLE: Generating Go Server Code\nDESCRIPTION: Command to generate Go server-side code from API definition\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api go -api greet.api -dir greet\n```\n\n----------------------------------------\n\nTITLE: Windows Privilege Error Message\nDESCRIPTION: Error message when running goctl without administrator privileges on Windows. Solution requires running goctl as administrator.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nA required privilege is not held by the client.\n```\n\n----------------------------------------\n\nTITLE: Viewing SSH Private Key\nDESCRIPTION: Command to display the SSH private key for Jenkins credentials.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat id_rsa\n```\n\n----------------------------------------\n\nTITLE: Starting the Greet Service\nDESCRIPTION: Commands to start the go-zero greet service on port 8888.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/monolithic-service.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd greet\n$ go run greet.go -f etc/greet-api.yaml\nStarting server at 0.0.0.0:8888...\n```\n\n----------------------------------------\n\nTITLE: Loading Service Endpoints from etcd\nDESCRIPTION: Function to retrieve service endpoints from etcd cluster.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *cluster) load(cli EtcdClient, key string) {\n\tvar resp *clientv3.GetResponse\n\tfor {\n\t\tvar err error\n\t\tctx, cancel := context.WithTimeout(c.context(cli), RequestTimeout)\n\t\tresp, err = cli.Get(ctx, makeKeyPrefix(key), clientv3.WithPrefix())\n\t\tcancel()\n\t\tif err == nil {\n\t\t\tbreak\n\t\t}\n\n\t\tlogx.Error(err)\n\t\ttime.Sleep(coolDownInterval)\n\t}\n\n\tvar kvs []KV\n\tc.lock.Lock()\n\tfor _, ev := range resp.Kvs {\n\t\tkvs = append(kvs, KV{\n\t\t\tKey: string(ev.Key),\n\t\t\tVal: string(ev.Value),\n\t\t})\n\t}\n\tc.lock.Unlock()\n\n\tc.handleChanges(key, kvs)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating API Files with Go-Zero's goctl Tool\nDESCRIPTION: Command to generate API boilerplate files using the goctl command line tool, with the resulting directory structure showing various API files created.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/datacenter.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n➜  datacenter goctl api -o datacenter.api\nDone.\n➜  datacenter tree\n.\n├── datacenter.api\n├── user.api  #用户\n├── votes.api #投票\n├── search.api #搜索\n├── questions.api #问答\n└── go.mod\n```\n\n----------------------------------------\n\nTITLE: Testing the Greet Service\nDESCRIPTION: Command to test the running service using curl, showing the HTTP request and response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/monolithic-service.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i -X GET http://localhost:8888/from/you\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sun, 07 Feb 2021 04:31:25 GMT\nContent-Length: 27\n\n{\"message\":\"Hello go-zero\"}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SharedCalls for Concurrent Resource Access in Go\nDESCRIPTION: A code example showing how multiple goroutines can share the result of a single function call using SharedCalls. This prevents duplicate work when multiple requests need the same resource simultaneously.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/sharedcalls.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n  const round = 5\n  var wg sync.WaitGroup\n  barrier := syncx.NewSharedCalls()\n\n  wg.Add(round)\n  for i := 0; i < round; i++ {\n    // 多个线程同时执行\n    go func() {\n      defer wg.Done()\n      // 可以看到，多个线程在同一个key上去请求资源，获取资源的实际函数只会被调用一次\n      val, err := barrier.Do(\"once\", func() (interface{}, error) {\n        // sleep 1秒，为了让多个线程同时取once这个key上的数据\n        time.Sleep(time.Second)\n        // 生成了一个随机的id\n        return stringx.RandId(), nil\n      })\n      if err != nil {\n        fmt.Println(err)\n      } else {\n        fmt.Println(val)\n      }\n    }()\n  }\n\n  wg.Wait()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RPC Server Configuration in Go\nDESCRIPTION: This snippet shows the RpcServerConf structure which configures RPC server settings in Go-Zero. It includes options for service configuration, listener address, etcd integration, authentication, timeouts, and performance thresholds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nRpcServerConf struct {\n    service.ServiceConf // service configuration, see the api configuration description for details, not to be repeated here\n    ListenOn string // rpc listener address and port, e.g. 127.0.0.1:8888\n    Etcd discov.EtcdConf `json:\",optional\"` // etcd related configuration\n    Auth bool `json:\",optional\"` // whether Auth is enabled, if yes then Redis is required\n    Redis redis.RedisKeyConf `json:\",optional\"` // Auth authentication\n    StrictControl bool `json:\",optional\"` // Strict mode or not, if yes then Auth fails if an error is encountered, otherwise it can be considered successful\n    // pending forever is not allowed\n    // never set it to 0, if zero, the underlying will set to 2s automatically\n    Timeout int64 `json:\",default=2000\"` // Timeout control, in milliseconds\n    CpuThreshold int64 `json:\",default=900,range=[0:1000]\"` cpu down load threshold, default 900, allowable range 0 to 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Service Endpoint Changes\nDESCRIPTION: Implementation of etcd watch mechanism for service endpoint updates.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/zrpc.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (c *cluster) watch(cli EtcdClient, key string) {\n\trch := cli.Watch(clientv3.WithRequireLeader(c.context(cli)), makeKeyPrefix(key), clientv3.WithPrefix())\n\tfor {\n\t\tselect {\n\t\tcase wresp, ok := <-rch:\n\t\t\tif !ok {\n\t\t\t\tlogx.Error(\"etcd monitor chan has been closed\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif wresp.Canceled {\n\t\t\t\tlogx.Error(\"etcd monitor chan has been canceled\")\n\t\t\t\treturn\n\t\t\t}\n\t\t\tif wresp.Err() != nil {\n\t\t\t\tlogx.Error(fmt.Sprintf(\"etcd monitor chan error: %v\", wresp.Err()))\n\t\t\t\treturn\n\t\t\t}\n\t\t\tc.handleWatchEvents(key, wresp.Events)\n\t\tcase <-c.done:\n\t\t\treturn\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Protocol Buffer Tools via goctl\nDESCRIPTION: Using goctl env check command to automatically install protoc, protoc-gen-go, and protoc-gen-go-grpc. This method checks for existing installations and installs missing components.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/protoc-install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngoctl env check -i -f -v\n```\n\n----------------------------------------\n\nTITLE: Truncating Docusaurus Blog Post\nDESCRIPTION: This snippet demonstrates the use of the `<!--truncate-->` comment in a Docusaurus blog post.  Docusaurus uses this comment to determine where to cut off the blog post content when displaying it in a list or preview. Content before the comment is shown as a summary, while the full content is displayed on the individual blog post page.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-blog/2019-05-29-long-blog-post.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"<!--truncate-->\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes deployment status\nDESCRIPTION: kubectl command to check the status of the deployed Kubernetes resources.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-other.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get all -n adhoc\n```\n\n----------------------------------------\n\nTITLE: Creating ServiceContext with Database and Cache Models in servicecontext.go\nDESCRIPTION: This Go snippet defines the service context for the transform service. It initializes the `ServiceContext` struct with the configuration and the `ShorturlModel`, which is responsible for interacting with the database and cache. The `NewShorturlModel` function creates a new instance of the model using a MySQL connection and the cache configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/shorturl.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"type ServiceContext struct {\\n  c     config.Config\\n  Model model.ShorturlModel   // 手动代码\\n}\\n\\nfunc NewServiceContext(c config.Config) *ServiceContext {\\n  return &ServiceContext{\\n    c:             c,\\n    Model: model.NewShorturlModel(sqlx.NewMysql(c.DataSource), c.Cache), // 手动代码\\n  }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Adding File Service Discovery in Prometheus\nDESCRIPTION: Configuration for Prometheus file-based service discovery, specifying the job name and target file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-monitor.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n- job_name: 'file_ds'\n  file_sd_configs:\n  - files:\n    - targets.json\n```\n\n----------------------------------------\n\nTITLE: Generating Basic RPC Service Structure - Bash\nDESCRIPTION: Command to generate a new greet RPC service with default structure and files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ goctl rpc new greet\n```\n\n----------------------------------------\n\nTITLE: Goctl Command Autocomplete Demo\nDESCRIPTION: Demonstrates the available commands that appear when using tab completion with goctl.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-completion.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl\napi -- generate api-related files\nbug -- report a bug\ncompletion -- generates a completion script, which is only available for unix-like operating systems\ndocker -- generates a Docker file\nhelp h -- displays a list of commands or help information for a command\nkube -- generates kubernetes files\nmigrate -- migrate from tal-tech to zeromicro\nmodel -- Generate model code\nrpc -- generate rpc code\ntemplate -- Template operations\nupgrade -- upgrade goctl to the latest version\n```\n\n----------------------------------------\n\nTITLE: Complete Project Directory Structure\nDESCRIPTION: Shows the full project directory structure including common libraries, services, and their subcomponents, demonstrating how all pieces fit together in a complete microservice architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-design.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nmall // 工程名称\n├── common // 通用库\n│   ├── randx\n│   └── stringx\n├── go.mod\n├── go.sum\n└── service // 服务存放目录\n    ├── afterSale\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── cart\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── order\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── pay\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    ├── product\n    │   ├── api\n    │   └── model\n    │   └── rpc\n    └── user\n        ├── api\n        ├── cronjob\n        ├── model\n        ├── rmq\n        ├── rpc\n        └── script\n```\n\n----------------------------------------\n\nTITLE: Go Subcommand Help for API Generation\nDESCRIPTION: Help menu for the goctl api go subcommand, detailing options for generating Go API service files with directory, API source file, and naming style configurations\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api go -h\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Modules and Running the Service\nDESCRIPTION: Commands to initialize Go Modules in the project directory and run the service, showing automatic dependency resolution and successful service startup.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ go mod init  \ngo: creating new go.mod: module greet\n\n$ go run greet.go etc/greet-api.yaml\ngo: finding module for package github.com/zeromicro/go-zero/core/conf\ngo: finding module for package github.com/zeromicro/go-zero/rest\ngo: finding module for package github.com/zeromicro/go-zero/rest/httpx\ngo: finding module for package github.com/zeromicro/go-zero/core/logx\ngo: found github.com/zeromicro/go-zero/core/conf in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/rest in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/rest/httpx in github.com/zeromicro/go-zero v1.3.0\ngo: found github.com/zeromicro/go-zero/core/logx in github.com/zeromicro/go-zero v1.3.0\nStarting server at 0.0.0.0:8888...\n```\n\n----------------------------------------\n\nTITLE: API Service Configuration Error\nDESCRIPTION: Error indicating configuration type mismatch in the user-api.yaml file. Requires verification of configuration items and YAML format.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/error.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nerror: config file etc/user-api.yaml, error: type mismatch for field xx\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure Layout\nDESCRIPTION: Shows the complete directory structure of a Go API project including configuration files, handlers, business logic, middleware, and type definitions. Each directory and file serves a specific purpose in the API architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-dir.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n.\n├── etc\n│   └── greet-api.yaml              // yaml configuration file\n├── go.mod                          // go module file\n├── greet.api                       // api interface description language file\n├── greet.go                        // main function entry\n└── internal                        \n    ├── config  \n    │   └── config.go               // configuration declaration type\n    ├── handler                     // routing and handler forwarding\n    │   ├── greethandler.go\n    │   └── routes.go\n    ├── logic                       // business logic\n    │   └── greetlogic.go\n    ├── middleware                  // middleware file\n    │   └── greetmiddleware.go\n    ├── svc                         // the resource pool that logic depends on\n    │   └── servicecontext.go\n    └── types                       // The struct of request and response is automatically generated according to the api, and editing is not recommended\n        └── types.go\n```\n\n----------------------------------------\n\nTITLE: Channel Read/Write Permission Example in Go\nDESCRIPTION: This code illustrates how to define channels with read-only and write-only permissions. The `readChan` function accepts a read-only channel (`<-chan`), while the `writeChan` function accepts a write-only channel (`chan<-`). This restricts the functions to either reading from or writing to the channel, enforcing better data flow control.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/other-component/mapreduce.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n```go\n// 只读channel\nfunc readChan(rch <-chan interface{}) {\n    for i := range rch {\n        log.Println(i)\n    }\n}\n\n// 只写channel\nfunc writeChan(wch chan<- interface{}) {\n    wch <- 1\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Invalid Type Declaration Examples in Zero API\nDESCRIPTION: Demonstrates incorrect type declarations including unsupported features like type aliases, time.Time usage, and invalid map keys.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_9\n\nLANGUAGE: api\nCODE:\n```\ntype Gender int // not support\n\n// Non-struct token\ntype Foo structure{ \n  CreateTime time.Time // Does not support time.Time\n}\n\n// golang keyword var\ntype var{} \n\ntype Foo{\n  // golang keyword interface\n  Foo interface \n}\n\n\ntype Foo{\n  foo int \n  // The map key must have the built-in data type of golang\n  m map[Bar]string\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying goctl rpc proto Subcommand Usage\nDESCRIPTION: Shows the usage information for the goctl rpc proto subcommand, which generates RPC code from a proto file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-rpc.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nNAME:\n   goctl rpc proto - generate rpc from proto\n\nUSAGE:\n   goctl rpc proto [command options] [arguments...]\n\nOPTIONS:\n   --src value, -s value         the file path of the proto source file\n   --proto_path value, -I value  native command of protoc, specify the directory in which to search for imports. [optional]\n   --dir value, -d value         the target path of the code\n   --style value                 the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n   --idea                        whether the command execution environment is from idea plugin. [optional]\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect API Service Syntax\nDESCRIPTION: Demonstrates invalid API service definitions, highlighting common errors such as empty server/service blocks, missing quotation marks in documentation, duplicate handlers/routes, incorrect order of handler and doc, missing handlers, and unsupported data types for request/response bodies.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_13\n\nLANGUAGE: api\nCODE:\n```\n\"// Empty server syntax block is not supported\n@server(\n)\n// Empty service syntax block is not supported\nservice foo-api{\n}\n\nservice foo-api{\n  @doc kkkk // The short version of the doc must be enclosed in English double quotation marks\n  @handler foo\n  post /foo\n  \n  @handler foo // Duplicate handler\n  post /bar\n  \n  @handler fooBar\n  post /bar // Duplicate routing\n  \n  // @handler and @doc are in the wrong order\n  @handler someHandler\n  @doc \\\"some doc\\\"\n  post /some/path\n  \n  // handler is missing\n  post /some/path/:id\n  \n  @handler reqTest\n  post /foo/req (*Foo) // Data types other than ordinary structures are not supported as the request body\n  \n  @handler replyTest\n  post /foo/reply returns (*Foo) // Does not support data types other than ordinary structures and arrays (forward compatibility, later considered to be discarded) as response bodies\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL and Redis in YAML for Go-Zero API\nDESCRIPTION: YAML configuration to add both MySQL and Redis cache settings in the Go-Zero API project's configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/model生成.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: user:password@tcp(127.0.0.1:3306)/gozero?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n- Host: 127.0.0.1:6379\n  Pass: \n  Type: node\n```\n\n----------------------------------------\n\nTITLE: Generating Proto Template - Bash\nDESCRIPTION: Command to generate a proto file template for user service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-rpc.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngoctl rpc template -o=user.proto\n```\n\n----------------------------------------\n\nTITLE: Example of Incorrect Java-Style Documentation Comments\nDESCRIPTION: Demonstrates an invalid Java-style documentation comment, highlighting the importance of matching `/*` with `*/` correctly.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_19\n\nLANGUAGE: api\nCODE:\n```\n\"/*\n * java-style doc */\n */\"\n```\n\n----------------------------------------\n\nTITLE: Registering Job Handlers with ServiceGroup\nDESCRIPTION: Handler registration logic that adds producer and consumer job logic to a service group. This centralizes job registration and makes it easy to manage multiple jobs.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/go-queue.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n/**\n* @Description 注册job\n* @Author Mikael\n* @Email 13247629622@163.com\n* @Date 2021/1/18 12:05\n* @Version 1.0\n**/\npackage handler\n\nimport (\n\t\"context\"\n\t\"github.com/zeromicro/go-zero/core/service\"\n\t\"job/internal/logic\"\n\t\"job/internal/svc\"\n)\n\nfunc RegisterJob(serverCtx *svc.ServiceContext,group *service.ServiceGroup)  {\n\n\tgroup.Add(logic.NewProducerLogic(context.Background(),serverCtx))\n\tgroup.Add(logic.NewConsumerLogic(context.Background(),serverCtx))\n\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shorten API Call with Curl\nDESCRIPTION: Shows how to use curl to call the shorten API endpoint and displays the expected JSON response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/shorturl.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i \"http://localhost:8888/shorten?url=http://www.xiaoheiban.cn\"\n```\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\nDate: Sat, 29 Aug 2020 10:49:49 GMT\nContent-Length: 21\n\n{\"shorten\":\"f35b2a\"}\n```\n\n----------------------------------------\n\nTITLE: Evaluating Concurrent Request Load\nDESCRIPTION: This method checks if the current number of concurrent requests is exceeding the system's maximum allowable concurrency. It uses locking to ensure accurate tracking of average flying requests.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/load.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc (as *adaptiveShedder) highThru() bool {\n    // 加锁\n    as.avgFlyingLock.Lock()\n    // 获取滑动平均值\n    // 每次请求结束后更新\n    avgFlying := as.avgFlying\n    // 解锁\n    as.avgFlyingLock.Unlock()\n    // 系统此时最大并发数\n    maxFlight := as.maxFlight()\n    // 正在处理的并发数和平均并发数是否大于系统的最大并发数\n    return int64(avgFlying) > maxFlight && atomic.LoadInt64(&as.flying) > maxFlight\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Go on Linux using Shell Commands\nDESCRIPTION: This code block shows the steps to install Go on a Linux system, including downloading, extracting, and setting up environment variables.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/prepare.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ tar -C /usr/local -xzf go1.15.8.linux-amd64.tar.gz\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ $HOME/.profile\n```\n\nLANGUAGE: Shell\nCODE:\n```\nexport PATH=$PATH:/usr/local/go/bin\n```\n\nLANGUAGE: Shell\nCODE:\n```\n$ source $HOME/.profile\n```\n\n----------------------------------------\n\nTITLE: Custom User Model Extension in go-zero\nDESCRIPTION: Custom Go code for extending the User model functionality. This file allows for adding custom methods to the UserModel interface and implementing them in the customUserModel struct.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-model.md#2025-04-22_snippet_3\n\nLANGUAGE: golang\nCODE:\n```\npackage model\n\nimport (\n\t\"github.com/zeromicro/go-zero/core/stores/cache\"\n\t\"github.com/zeromicro/go-zero/core/stores/sqlx\"\n)\n\nvar _ UserModel = (*customUserModel)(nil)\n\ntype (\n\t// UserModel is an interface to be customized, add more methods here,\n\t// and implement the added methods in customUserModel.\n\tUserModel interface {\n\t\tuserModel\n\t}\n\n\tcustomUserModel struct {\n\t\t*defaultUserModel\n\t}\n)\n\n// NewUserModel returns a model for the database table.\nfunc NewUserModel(conn sqlx.SqlConn, c cache.CacheConf) UserModel {\n\treturn &customUserModel{\n\t\tdefaultUserModel: newUserModel(conn, c),\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Index-Based Cache Query Implementation\nDESCRIPTION: Implementation of QueryRowIndex method that handles caching for index-based queries, managing both index-to-primary-key and primary-key-to-data mappings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/redis-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (cc CachedConn) QueryRowIndex(v interface{}, key string, keyer func(primary interface{}) string,\n  indexQuery IndexQueryFn, primaryQuery PrimaryQueryFn) error {\n  var primaryKey interface{}\n  var found bool\n  if err := cc.cache.TakeWithExpire(&primaryKey, key, func(val interface{}, expire time.Duration) (err error) {\n    primaryKey, err = indexQuery(cc.db, v)\n    if err != nil {\n      return\n    }\n    found = true\n    return cc.cache.SetCacheWithExpire(keyer(primaryKey), v, expire+cacheSafeGapBetweenIndexAndPrimary)\n  }); err != nil {\n    return err\n  }\n  if found {\n    return nil\n  }\n  return cc.cache.Take(v, keyer(primaryKey), func(v interface{}) error {\n    return primaryQuery(cc.db, v, primaryKey)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding JWT Configuration to YAML\nDESCRIPTION: This YAML code adds the `Auth` section with `AccessSecret` and `AccessExpire` settings to the `user-api.yaml` file.  `AccessSecret` is the secret key used to sign the JWT, and `AccessExpire` is the token's expiration time in seconds.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/business.md#2025-04-22_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nName: user-api\nHost: 0.0.0.0\nPort: 8888\nMysql:\n  DataSource: $user:$password@tcp($url)/$db?charset=utf8mb4&parseTime=true&loc=Asia%2FShanghai\nCacheRedis:\n  - Host: $host\n    Pass: $pass\n    Type: node\nAuth:\n  AccessSecret: $AccessSecret\n  AccessExpire: $AccessExpire\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Button using React in MDX\nDESCRIPTION: This snippet demonstrates how to create a clickable button that triggers an alert in a Docusaurus blog post using MDX. The button leverages React's onClick event handler. The required dependency is React, and it integrates seamlessly within the MDX format for Docusaurus.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-blog/2021-08-01-mdx-blog-post.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<button onClick={() => alert('button clicked!')}>Click me!</button>\"\n```\n\n----------------------------------------\n\nTITLE: protoc-gen-go Installation Output\nDESCRIPTION: Illustrates the expected output after running the command to install protoc-gen-go, which includes information about found and upgraded packages.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_22\n\nLANGUAGE: text\nCODE:\n```\ngo: found github.com/golang/protobuf/protoc-gen-go in github.com/golang/protobuf v1.4.3\n    go: google.golang.org/protobuf upgrade => v1.25.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Task Addition in PeriodicalExecutor in Go\nDESCRIPTION: This code snippet demonstrates the Add method of PeriodicalExecutor, which adds tasks to the executor and manages the background flushing process.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) Add(task interface{}) {\n\tif vals, ok := pe.addAndCheck(task); ok {\n\t\tpe.commander <- vals\n\t\t<-pe.confirmChan\n\t}\n}\n\nfunc (pe *PeriodicalExecutor) addAndCheck(task interface{}) (interface{}, bool) {\n\tpe.lock.Lock()\n\tdefer func() {\n\t\tvar start bool\n\t\tif !pe.guarded {\n\t\t\tpe.guarded = true\n\t\t\tstart = true\n\t\t}\n\t\tpe.lock.Unlock()\n\t\tif start {\n\t\t\tpe.backgroundFlush()\n\t\t}\n\t}()\n\tif pe.container.AddTask(task) {\n\t\treturn pe.container.RemoveAll(), true\n\t}\n\n\treturn nil, false\n}\n```\n\n----------------------------------------\n\nTITLE: Testing JWT Authentication - Unauthorized (Bash)\nDESCRIPTION: Curl command to test the user info endpoint without providing an authorization token, which should result in an unauthorized response.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/获取用户信息(JWT鉴权).md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i -X GET \\\n  http://127.0.0.1:8888/user/info \\\n  -H 'cache-control: no-cache'\n```\n\n----------------------------------------\n\nTITLE: Move Protoc Binary\nDESCRIPTION: Moves the protoc binary to a directory included in the PATH environment variable, such as $GOPATH/bin. This makes the protoc command accessible system-wide. Requires the `mv` command.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ mv protoc $GOPATH/bin\n```\n\n----------------------------------------\n\nTITLE: Defining the Picker Interface in gRPC\nDESCRIPTION: This code snippet defines the Picker interface in gRPC. The `Pick` method is responsible for selecting a backend server for a given request. It takes `PickInfo` as input, which contains information about the request, and returns a `PickResult` and an error.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/component/balance.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"type Picker interface {\\n  Pick(info PickInfo) (PickResult, error)\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure\nDESCRIPTION: A markdown-formatted table of contents showing the hierarchical documentation structure for the zero-doc project. Includes sections for introduction, concepts, development guides, tools, and user practices.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/summary.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Summary\n\n* [Introduction](README.md)\n* [About Us](about-us.md)\n* [Join Us](join-us.md)\n* [Concepts](concept-introduction.md)\n* [Quick Start](quick-start.md)\n    * [Monolithic Service](monolithic-service.md)\n    * [Micro Service](micro-service.md)\n* [Framework Design](framework-design.md)\n    * [Go-Zero Design](go-zero-design.md)\n    * [Go-Zero Features](go-zero-features.md)\n    * [API IDL](api-grammar.md)\n    * [API Directory Structure](api-dir.md)\n    * [RPC Directory Structure](rpc-dir.md)\n* [Project Development](project-dev.md)\n    * [Prepare](prepare.md)\n        * [Golang Installation](golang-install.md)\n        * [Go Module Configuration](gomod-config.md)\n        * [Goctl Installation](goctl-install.md)\n        * [protoc & protoc-gen-go Installation](protoc-install.md)\n        * [More](prepare-other.md)\n    * [Development Rules](dev-specification.md)\n        * [Naming Rules](naming-spec.md)\n        * [Route Rules](route-naming-spec.md)\n        * [Coding Rules](coding-spec.md)\n    * [Development Flow](dev-flow.md)\n    * [Configuration Introduction](config-introduction.md)\n        * [API Configuration](api-config.md)\n        * [RPC Configuration](rpc-config.md)\n    * [Business Development](business-dev.md)\n        * [Directory Structure](service-design.md)\n        * [Model Generation](model-gen.md)\n        * [API Coding](api-coding.md)\n        * [Business Coding](business-coding.md)\n        * [JWT](jwt.md)\n        * [Middleware](middleware.md)\n        * [RPC Implement & Call](rpc-call.md)\n        * [Error Handling](error-handle.md)\n    * [CI/CD](ci-cd.md)\n    * [Service Deployment](service-deployment.md)\n    * [Log Collection](log-collection.md)\n    * [Trace](trace.md)\n    * [Monitor](service-monitor.md)\n* [Goctl](goctl.md)\n    * [Auto Completion](goctl-completion.md)\n    * [Commands & Flags](goctl-commands.md)\n    * [API Commands](goctl-api.md)\n    * [RPC Commands](goctl-rpc.md)\n    * [Model Commands](goctl-model.md)\n    * [Plugin Commands](goctl-plugin.md)\n    * [More Commands](goctl-other.md)\n* [Template](template-manage.md)\n    * [Command](template-cmd.md)\n    * [Custom](template.md)\n* [Extended](extended-reading.md)\n    * [logx](logx.md)\n    * [bloom](bloom.md)\n    * [executors](executors.md)\n    * [fx](fx.md)\n    * [mysql](mysql.md)\n    * [redis-lock](redis-lock.md)\n    * [periodlimit](periodlimit.md)\n    * [tokenlimit](tokenlimit.md)\n    * [TimingWheel](timing-wheel.md)\n* [Around](eco.md)\n  * [Tools](tool-center.md)\n      * [Intellij Plugin](intellij.md)\n      * [VSCode Plugin](vscode.md)\n  * [Distributed Transaction](distributed-transaction.md)\n  * [Plugins](plugin-center.md)\n* [Learning Resources](learning-resource.md)\n    * [Wechat](wechat.md)\n    * [Night](goreading.md)\n    * [OpenTalk](gotalk.md)\n* [User Practise](practise.md)\n    * [Persistent layer cache](redis-cache.md)\n    * [Business layer cache](buiness-cache.md)\n    * [Queue](go-queue.md)\n    * [Middle Ground System](datacenter.md)\n    * [Stream Handler](stream.md)\n    * [Online Exchange](online-exchange.md)\n* [Contributor](contributor.md)\n* [Document Contribute](doc-contibute.md)\n* [Error](error.md)\n* [Source Code](source.md)\n```\n\n----------------------------------------\n\nTITLE: Generated Directory Structure\nDESCRIPTION: Tree view of the generated project structure showing configuration, source files, and directory organization for the RPC service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-dir.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n.\n├── etc\n│   └── greet.yaml\n├── go.mod\n├── go.sum\n├── greet // [1]\n│   ├── greet.pb.go\n│   └── greet_grpc.pb.go\n├── greet.go\n├── greet.proto\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── logic\n│   │   └── greetlogic.go\n│   ├── server\n│   │   └── streamgreeterserver.go\n│   └── svc\n│       └── servicecontext.go\n└── streamgreeter\n    └── streamgreeter.go\n```\n\n----------------------------------------\n\nTITLE: Inserting Sample User Data in SQL\nDESCRIPTION: SQL query to insert preset user data into the user table with basic fields like number, name, password and gender. This sample data is used for demonstration purposes in the library system example.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/business-dev.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO `user` (number,name,password,gender)values ('666','xiaoming','123456','male');\n```\n\n----------------------------------------\n\nTITLE: Goctl Model MySQL Command Help Output\nDESCRIPTION: This is the output of the `goctl model mysql -h` command, it shows the command's usage, available subcommands (`ddl` and `datasource`), and options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl model mysql - generate mysql model\"\n\nUSAGE:\n   goctl model mysql command [command options] [arguments...]\n\nCOMMANDS:\n   ddl         generate mysql model from ddl\"\n   datasource  generate model from datasource\"\n\nOPTIONS:\n   --help, -h  show help\n```\n\n----------------------------------------\n\nTITLE: Request Cooling Period Check in Go\nDESCRIPTION: Checks if the system is in a cooling-off period after dropping requests. Uses atomic operations and time tracking to determine if new requests should be processed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/load.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ndropTime := as.dropTime.Load()\nif dropTime == 0 {\n    return false\n}\n// Cooling time default is 1s\nhot := timex.Since(dropTime) < coolOffDuration\n// Not in cooling-off period, normal processing of requests in progress\nif !hot {\n    // Reset drop records\n    as.droppedRecently.Set(false)\n}\n\nreturn hot\n```\n\n----------------------------------------\n\nTITLE: Response Formatting in Go\nDESCRIPTION: This Go code defines an HTTP response body format and implements a response-writing function to handle successful and error responses consistently within a RESTful service.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/template.md#2025-04-22_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage response\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/zeromicro/go-zero/rest/httpx\"\n)\n\ntype Body struct {\n\tCode int         `json:\"code\"`\n\tMsg  string      `json:\"msg\"`\n\tData interface{} `json:\"data,omitempty\"`\n}\n\nfunc Response(w http.ResponseWriter, resp interface{}, err error) {\n\tvar body Body\n\tif err != nil {\n\t\tbody.Code = -1\n\t\tbody.Msg = err.Error()\n\t} else {\n\t\tbody.Msg = \"OK\"\n\t\tbody.Data = resp\n\t}\n\thttpx.OkJson(w, body)\n}\n```\n\n----------------------------------------\n\nTITLE: Blog Post Filename Conventions\nDESCRIPTION: Demonstrates standard naming conventions for blog post files, which allow automatic date extraction and organization\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-blog/2021-08-26-welcome/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n2019-05-30-welcome.md\n```\n\nLANGUAGE: markdown\nCODE:\n```\n2019-05-30-welcome\\/index.md\n```\n\n----------------------------------------\n\nTITLE: RPC Tracing Interceptor Implementation\nDESCRIPTION: Implements RPC client interceptor for trace propagation, handling span creation and context metadata management in gRPC calls.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/trace.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc TracingInterceptor(ctx context.Context, method string, req, reply interface{},\n    cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n    ctx, span := trace.StartClientSpan(ctx, cc.Target(), method)\n    defer span.Finish()\n    var pairs []string\n    span.Visit(func(key, val string) bool {\n        pairs = append(pairs, key, val)\n        return true\n    })\n    ctx = metadata.AppendToOutgoingContext(ctx, pairs...)\n    return invoker(ctx, method, req, reply, cc, opts...)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PeriodicalExecutor in Go-Zero\nDESCRIPTION: Implementation of the periodical executor initialization function. This shows how the core executor structure is created with its channels, interval, and container components.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc New...(interval time.Duration, container TaskContainer) *PeriodicalExecutor {\n\texecutor := &PeriodicalExecutor{\n\t\tcommander:   make(chan interface{}, 1),\n\t\tinterval:    interval,\n\t\tcontainer:   container,\n\t\tconfirmChan: make(chan lang.PlaceholderType),\n\t\tnewTicker: func(d time.Duration) timex.Ticker {\n\t\t\treturn timex.NewTicker(interval)\n\t\t},\n\t}\n    ...\n\treturn executor\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Wait and enterExecution Methods in PeriodicalExecutor\nDESCRIPTION: Implementation of the Wait and enterExecution methods in PeriodicalExecutor, which manage synchronization using WaitGroup. These methods ensure that all tasks complete before allowing the program to proceed.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/extension/executors.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc (pe *PeriodicalExecutor) enterExecution() {\n\tpe.wgBarrier.Guard(func() {\n\t\tpe.waitGroup.Add(1)\n\t})\n}\n\nfunc (pe *PeriodicalExecutor) Wait() {\n\tpe.wgBarrier.Guard(func() {\n\t\tpe.waitGroup.Wait()\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Handler Template\nDESCRIPTION: Customized Go-Zero handler template implementing the standardized response format.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/template.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage handler\n\nimport (\n\t\"net/http\"\n\t\"greet/response\"\n\n\t{{.ImportPackages}}\n)\n\nfunc {{.HandlerName}}(ctx *svc.ServiceContext) http.HandlerFunc {\n\treturn func(w http.ResponseWriter, r *http.Request) {\n\t\t{{if .HasRequest}}var req types.{{.RequestType}}\n\t\tif err := httpx.Parse(r, &req); err != nil {\n\t\t\thttpx.Error(w, err)\n\t\t\treturn\n\t\t}{{end}}\n\n\t\tl := logic.New{{.LogicType}}(r.Context(), ctx)\n\t\t{{if .HasResp}}resp, {{end}}err := l.{{.Call}}({{if .HasRequest}}req{{end}})\n\t\t{{if .HasResp}}response.Response(w, resp, err){{else}}response.Response(w, nil, err){{end}}\n\t\t\t\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Proto Import Example\nDESCRIPTION: This example shows an incorrect way to import and use external message types in the main service definition. The Ping method directly uses imported types, which is not supported.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_4\n\nLANGUAGE: Protobuf\nCODE:\n```\nsyntax = \"proto3\";\n\npackage greet;\n\noption go_package = \"./greet\";\n\nimport \"base/common.proto\";\n\nmessage Request {\n  string ping = 1;\n}\n\nmessage Response {\n  string pong = 1;\n}\n\nservice Greet {\n  rpc Ping(base.In) returns(base.Out);// request and return do not support import\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Protobuf Generator for Go\nDESCRIPTION: Command to install the Protocol Buffers compiler plugin for Go, necessary for generating Go code from .proto files.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/bookstore.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Implementing Expand Logic in Go for Short URL Service\nDESCRIPTION: Updates the Expand function in expandlogic.go to use the Model to find and return the expanded URL for a given short URL.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(in *transform.ExpandReq) (*transform.ExpandResp, error) {\n  // 手动代码开始\n  res, err := l.svcCtx.Model.FindOne(l.ctx,in.Shorten)\n  if err != nil {\n    return nil, err\n  }\n\n  return &transform.ExpandResp{\n    Url: res.Url,\n  }, nil\n  // 手动代码结束\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Gitlab CI Pipeline with Go Testing\nDESCRIPTION: A basic Gitlab CI configuration that sets up a pipeline for running Go tests. It uses the golang image and executes unit tests for all packages in the project.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/ci-cd.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstages:\n- analysis\n\nanalysis:\nstage: analysis\nimage: golang\nscript:\n- go version && go env\n- go test -short $(go list ./...) | grep -v \"no test\"\n```\n\n----------------------------------------\n\nTITLE: Initializing DailyTask with BulkExecutor in Go\nDESCRIPTION: This code snippet shows how to initialize a DailyTask struct with a BulkExecutor. It demonstrates setting up the executor with specific options for interval and maximum tasks.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/executors.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (dts *DailyTask) Init() {\n\tdts.insertExecutor = executors.NewBulkExecutor(\n\t\tdts.insertIntoCk,\n\t\texecutors.WithBulkInterval(time.Second*3),\n\t\texecutors.WithBulkTasks(10240),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Service Account Configuration\nDESCRIPTION: Kubernetes deployment configuration demonstrating how to specify a service account for enabling Endpoints-based service discovery with proper RBAC permissions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/discovery.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: alpine-deployment\n  labels:\n    app: alpine\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: alpine\n  template:\n    metadata:\n      labels:\n        app: alpine\n    spec:\n      serviceAccountName: endpoints-reader\n      containers:\n      - name: alpine\n        image: alpine\n        command:\n        - sleep\n        - infinity\n```\n\n----------------------------------------\n\nTITLE: Direct Connection RPC Configuration in go-zero\nDESCRIPTION: Simplest service discovery method for single machine or static endpoint configurations. Directly specifies service endpoints in RPC configuration with manual node management.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/component/discovery.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nRpc:\n  Endpoints:\n  - 192.168.0.111:3456\n  - 192.168.0.112:3456\n```\n\n----------------------------------------\n\nTITLE: Block Formatting with Empty Lines in go-zero\nDESCRIPTION: Demonstrates the recommended practice of ending code blocks with empty lines to improve readability and organization in function bodies.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/specification.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc main (){\n    if x==1{\n        // do something\n    }\n\n    fmt.println(\"xxx\")\n}\n```\n\n----------------------------------------\n\nTITLE: Edit Paths (Mac/Linux)\nDESCRIPTION: Opens the /etc/paths file for editing, typically using vim with sudo privileges. This allows adding directories to the system-wide PATH environment variable. Requires root permissions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo vim /etc/paths\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Key Configuration in Go\nDESCRIPTION: This snippet shows the RedisKeyConf structure which extends RedisConf to include an additional key field for authentication purposes in Go-Zero RPC services.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nRedisConf struct {\n    Host string // redis host\n    Type string `json:\",default=node,options=node|cluster\"` // redis type\n    Pass string `json:\",optional\"` // redis password\n}\n\nRedisKeyConf struct {\n    RedisConf\n    Key string `json:\",optional\"` // authentication key\n}\n```\n\n----------------------------------------\n\nTITLE: Example User Model Unique Index Caching\nDESCRIPTION: Concrete implementation of unique index-based caching for a user model, demonstrating key generation and query strategies\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/extension/redis-cache.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc (m *defaultUserModel) FindOneByUser(user string) (*User, error) {\n  var resp User\n  indexKey := fmt.Sprintf(\"%s%v\", cacheUserPrefix, user)\n  \n  err := m.QueryRowIndex(&resp, indexKey, ...) // Detailed index querying\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Model Generation Options\nDESCRIPTION: Options for generating MySQL models either from DDL or datasource. Includes parameters for cache generation, template customization, and database connection configuration.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-commands.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ngoctl model mysql -url=\"root:password@tcp(127.0.0.1:3306)/database\" -table=\"*\" -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: Defining Single-Line Comments in ANTLR\nDESCRIPTION: ANTLR grammar rule for defining single-line comments in the Zero-Doc syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api-grammar.md#2025-04-22_snippet_7\n\nLANGUAGE: antlrv4\nCODE:\n```\n'//' ~[\\r\\n]*\n```\n\n----------------------------------------\n\nTITLE: Reorganizing User RPC Directory Structure\nDESCRIPTION: Shell command to create a new directory for the user client and move the generated user.go file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ cd ~/go-zero-demo/mall/rpc\n$ mkdir userclient && mv /user/user.go /userclient\n```\n\n----------------------------------------\n\nTITLE: Implementing Greet Logic in Go\nDESCRIPTION: This Go code snippet shows the implementation of the Greet logic in the GreetLogic struct. It returns a simple response with the message \"Hello go-zero\".\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/monolithic-service.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *GreetLogic) Greet(req *types.Request) (*types.Response, error) {\n\treturn &types.Response{\n\t\tMessage: \"Hello go-zero\",\n\t}, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Expansion Logic\nDESCRIPTION: Logic for expanding shortened URLs using the transformer service\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/doc/shorturl-en.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *ExpandLogic) Expand(req types.ExpandReq) (*types.ExpandResp, error) {\n  // manual code start\n\tresp, err := l.svcCtx.Transformer.Expand(l.ctx, &transformer.ExpandReq{\n\t\tShorten: req.Shorten,\n\t})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &types.ExpandResp{\n\t\tUrl: resp.Url,\n\t}, nil\n  // manual code stop\n}\n```\n\n----------------------------------------\n\nTITLE: GetUser RPC Logic Implementation\nDESCRIPTION: Implementation of the GetUser RPC method that retrieves user information from the database.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/rpc-call.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *GetUserLogic) GetUser(in *user.IdReq) (*user.UserInfoReply, error) {\n    one, err := l.svcCtx.UserModel.FindOne(in.Id)\n    if err != nil {\n        return nil, err\n    }\n    \n    return &user.UserInfoReply{\n        Id:     one.Id,\n        Name:   one.Name,\n        Number: one.Number,\n        Gender: one.Gender,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Etcd Configuration in Go\nDESCRIPTION: This code defines the EtcdConf structure used for configuring etcd integration in Go-Zero RPC services. It includes settings for etcd hosts and the registration key.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/config.md#2025-04-22_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype EtcdConf struct {\n\tHosts []string // etcd host array\n\tKey string // rpc registration key\n}\n```\n\n----------------------------------------\n\nTITLE: Source Profile (Linux)\nDESCRIPTION: Reloads the user's .profile file to apply the changes made to the PATH environment variable.  This makes the `go` command available in the current shell.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ source $HOME/.profile\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation - Go\nDESCRIPTION: Generates Markdown documentation for the specified API directory using the goctl tool. The '-dir' flag is used to indicate the target directory for the documentation.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/tool-intro.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngoctl api doc -dir user\n```\n\n----------------------------------------\n\nTITLE: Go Subcommand Help Text Output\nDESCRIPTION: Detailed help text for the go subcommand, showing options for specifying output directory, API source file, and file naming style\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl api go - generate go files for provided api in yaml file\n\nUSAGE:\n   goctl api go [command options] [arguments...]\n\nOPTIONS:\n   --dir value    the target dir\n   --api value    the api file\n   --style value  the file naming format, see [https://github.com/zeromicro/go-zero/tree/master/tools/goctl/config/readme.md]\n```\n\n----------------------------------------\n\nTITLE: Goctl Template Update Command Help\nDESCRIPTION: Help information for the update subcommand, showing how to update templates in a specific category (api, rpc, or model).\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/goctl-template.md#2025-04-22_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nNAME:\n   goctl template update - update template of the target category to the latest\n\nUSAGE:\n   goctl template update [command options] [arguments...]\n\nOPTIONS:\n   --category value, -c value  the category of template, enum [api,rpc,model]\n```\n\n----------------------------------------\n\nTITLE: Generating RPC Service Code from Proto\nDESCRIPTION: This command generates the RPC service code from a user.proto file. It outputs Go code, gRPC code, and zRPC code to their respective directories.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/goctl-rpc.md#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\ngoctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n```\n\n----------------------------------------\n\nTITLE: Example API Generation Command\nDESCRIPTION: Demonstrates how to generate Go API service files using goctl, specifying the API source file, output directory, and naming style\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/api.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl api go -api user.api -dir . -style gozero\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUser RPC Logic\nDESCRIPTION: Implementation of GetUser RPC method logic for retrieving user information\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/rpc-call.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc (l *GetUserLogic) GetUser(in *user.IdReq) (*user.UserInfoReply, error) {\n    one, err := l.svcCtx.UserModel.FindOne(in.Id)\n    if err != nil {\n        return nil, err\n    }\n    \n    return &user.UserInfoReply{\n        Id:     one.Id,\n        Name:   one.Name,\n        Number: one.Number,\n        Gender: one.Gender,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Import Block Examples\nDESCRIPTION: Examples of correct import block syntax.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_4\n\nLANGUAGE: api\nCODE:\n```\nimport \"foo.api\"\nimport \"foo/bar.api\"\n\nimport(\n    \"bar.api\"\n    \"foo/bar/foo.api\"\n)\n```\n\n----------------------------------------\n\nTITLE: Set Go Mod Cache\nDESCRIPTION: Sets the GOMODCACHE environment variable to a specific directory, usually within the GOPATH. This ensures that Go modules are cached in a consistent location.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/docs/project/prepare.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngo env -w GOMODCACHE=$GOPATH/pkg/mod\n```\n\n----------------------------------------\n\nTITLE: Goctl Model MySQL Help\nDESCRIPTION: This shell command shows the help information for the `goctl model mysql` command, listing the available subcommands and options.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/build-tool/model.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql -h\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Model from Datasource\nDESCRIPTION: Command to generate model code directly from a MySQL database connection.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl-model.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ goctl model mysql datasource -url=\"user:password@tcp(127.0.0.1:3306)/database\" -table=\"*\"  -dir=\"./model\"\n```\n\n----------------------------------------\n\nTITLE: Creating go-stash Configuration File\nDESCRIPTION: Shell command to create and edit the go-stash configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/log-collection.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vim config.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting User RPC Service\nDESCRIPTION: Shell command to start the user RPC service using the specified YAML configuration file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/quick-start/build-rpc.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ go run user.go -f etc/user.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting GOPROXY\nDESCRIPTION: Command to configure GOPROXY to use the Chinese proxy server for better download speeds\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/gomod-config.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ go env -w GOPROXY=https://goproxy.cn\n```\n\n----------------------------------------\n\nTITLE: Development Practice Document Template in Markdown\nDESCRIPTION: Template structure for creating development practice documentation, including author attribution and content formatting.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/doc-contibute.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Title\n\n> Author：The author name\n>\n> Original link： The original link\n\nsome markdown content\n```\n\n----------------------------------------\n\nTITLE: Installing goctl with Go 1.16+\nDESCRIPTION: Alternative installation command for goctl using go install, which is the recommended approach for Go 1.16 and newer versions.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nGOPROXY=https://goproxy.cn/,direct go install github.com/zeromicro/go-zero/tools/goctl@latest\n```\n\n----------------------------------------\n\nTITLE: Server Startup Output\nDESCRIPTION: The output displayed when the greet API service starts successfully, showing the listening address and port.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/快速开始.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nStarting server at 0.0.0.0:8888...\n```\n\n----------------------------------------\n\nTITLE: Goctl Version Output Format\nDESCRIPTION: Example of the version information output format showing version number, OS, and architecture.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ngoctl version ${version} ${os}/${arch}\n```\n\n----------------------------------------\n\nTITLE: Testing API Endpoint\nDESCRIPTION: Command to test the generated API endpoint using curl\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/readme-en.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -i http://localhost:8888/greet/from/you\n```\n\n----------------------------------------\n\nTITLE: Installing go-zero Framework\nDESCRIPTION: Command to install the go-zero framework using go get.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/zeromicro/go-zero\n```\n\n----------------------------------------\n\nTITLE: Verifying Go Installation on macOS\nDESCRIPTION: Commands to verify successful Go installation on macOS systems.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/golang-install.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ go version\n```\n\nLANGUAGE: text\nCODE:\n```\ngo version go1.15.1 darwin/amd64\n```\n\n----------------------------------------\n\nTITLE: Quote on Software Simplicity\nDESCRIPTION: Quote from Edsger W. Dijkstra on the importance of simplicity in software reliability.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/dev-specification.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSimplicity is prerequisite for reliability\n```\n\n----------------------------------------\n\nTITLE: API Syntax Statement Examples\nDESCRIPTION: Examples of correct and incorrect syntax statement usage.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/api-grammar.md#2025-04-22_snippet_2\n\nLANGUAGE: api\nCODE:\n```\nsyntax=\"v1\"\n```\n\nLANGUAGE: api\nCODE:\n```\nsyntax = \"v2\"\n```\n\n----------------------------------------\n\nTITLE: Installing Goctl via Go Get\nDESCRIPTION: Command to install goctl using go get with specific module and proxy settings.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/goctl.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Endpoint\nDESCRIPTION: curl command to test the shorturl service endpoint for monitoring.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/en/service-monitor.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i \"http://localhost:8888/shorten?url=http://www.xiaoheiban.cn\"\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code for Multiple Languages\nDESCRIPTION: Commands to generate client code in Java and Dart from the API definition file.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/docs/zero/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngoctl api java -api greet.api -dir greet\ngoctl api dart -api greet.api -dir greet\n...\n```\n\n----------------------------------------\n\nTITLE: 解决gRPC相关的protoc-gen-go错误\nDESCRIPTION: 当遇到无法确定Go导入路径的protoc-gen-go错误时，可以通过更新protoc-gen-go来解决。\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/go-zero.dev/cn/error.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nprotoc-gen-go: unable to determine Go import path for \"greet.proto\"\n\nPlease specify either:\n• a \"go_package\" option in the .proto source file, or\n• a \"M\" argument on the command line.\n\nSee https://developers.google.com/protocol-buffers/docs/reference/go-generated#package for more information.\n\n--go_out: protoc-gen-go: Plugin failed with status code 1.\n```\n\nLANGUAGE: text\nCODE:\n```\ngo get -u github.com/golang/protobuf/protoc-gen-go@v1.3.2\n```\n\n----------------------------------------\n\nTITLE: Installing goctl Tool using go get\nDESCRIPTION: Command to install the goctl tool using go get. This tool allows for code generation and simplifies development with go-zero.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/intro/brief.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nGO111MODULE=on GOPROXY=https://goproxy.cn/,direct go get -u github.com/zeromicro/go-zero/tools/goctl\n```\n\n----------------------------------------\n\nTITLE: Creating Filebeat Configuration File in Shell\nDESCRIPTION: Shell command to create and edit the Filebeat configuration file using vim.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/project/log.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vim xx/filebeat.yaml\n```\n\n----------------------------------------\n\nTITLE: JSON Tag Template in Go\nDESCRIPTION: This snippet shows the definition of a JSON tag template used in Go for struct fields. It allows developers to insert JSON tags automatically when defining struct fields.\nSOURCE: https://github.com/zeromicro/zero-doc/blob/main/website/i18n/en/docusaurus-plugin-content-docs/current/ecology/intellij.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\njson:\"$FIELD_NAME$\"\n```"
  }
]