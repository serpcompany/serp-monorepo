[
  {
    "owner": "opengeospatial",
    "repo": "geoparquet",
    "content": "TITLE: GeoParquet File Metadata Schema\nDESCRIPTION: Schema definition for required file-level metadata in GeoParquet files including version, primary column, and columns object containing geometry metadata.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/format-specs/geoparquet.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"string\",\n  \"primary_column\": \"string\",\n  \"columns\": {\n    \"string\": {\n      \"encoding\": \"string\",\n      \"geometry_types\": [\"string\"],\n      \"crs\": \"object|null\",\n      \"orientation\": \"string\",\n      \"edges\": \"string\",\n      \"bbox\": [\"number\"],\n      \"epoch\": \"number\",\n      \"covering\": \"object\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OGC:CRS84 Coordinate Reference System in PROJJSON\nDESCRIPTION: PROJJSON object specification for the OGC:CRS84 coordinate reference system defining the WGS 84 longitude-latitude system with its geodetic reference frame, ellipsoid parameters, and coordinate system axes.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/format-specs/geoparquet.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://proj.org/schemas/v0.5/projjson.schema.json\",\n    \"type\": \"GeographicCRS\",\n    \"name\": \"WGS 84 longitude-latitude\",\n    \"datum\": {\n        \"type\": \"GeodeticReferenceFrame\",\n        \"name\": \"World Geodetic System 1984\",\n        \"ellipsoid\": {\n            \"name\": \"WGS 84\",\n            \"semi_major_axis\": 6378137,\n            \"inverse_flattening\": 298.257223563\n        }\n    },\n    \"coordinate_system\": {\n        \"subtype\": \"ellipsoidal\",\n        \"axis\": [\n        {\n            \"name\": \"Geodetic longitude\",\n            \"abbreviation\": \"Lon\",\n            \"direction\": \"east\",\n            \"unit\": \"degree\"\n        },\n        {\n            \"name\": \"Geodetic latitude\",\n            \"abbreviation\": \"Lat\",\n            \"direction\": \"north\",\n            \"unit\": \"degree\"\n        }\n        ]\n    },\n    \"id\": {\n        \"authority\": \"OGC\",\n        \"code\": \"CRS84\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MultiPolygon Geometry Column in Parquet Schema\nDESCRIPTION: This snippet illustrates the Parquet schema for a 'multipolygon' geometry type. It shows the nested structure of lists representing parts, rings, and coordinates of a multipolygon.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/format-specs/geoparquet.md#2025-04-21_snippet_2\n\nLANGUAGE: parquet\nCODE:\n```\n// \"multipolygon\" geometry column with multiple levels of nesting\noptional group geometry (List) {\n  // the parts of the MultiPolygon\n  repeated group list {\n    required group element (List) {\n      // the rings of one Polygon\n      repeated group list {\n        required group element (List) {\n          // the list of coordinates of one ring\n          repeated group list {\n            required group element {\n              required double x;\n              required double y;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Point Geometry Column in Parquet Schema\nDESCRIPTION: This snippet demonstrates the Parquet schema for a 'point' geometry type. It shows a struct with two required double fields for x and y coordinates.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/format-specs/geoparquet.md#2025-04-21_snippet_1\n\nLANGUAGE: parquet\nCODE:\n```\n// \"point\" geometry column as simple field with two child fields for x and y\noptional group geometry {\n  required double x;\n  required double y;\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Bounding Box Covering in GeoParquet Metadata\nDESCRIPTION: This JSON snippet demonstrates how to specify a bounding box covering in the GeoParquet metadata. It defines the column names and fields containing the bounding box coordinates for each geometry.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/format-specs/geoparquet.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"covering\": {\n    \"bbox\": {\n        \"xmin\": [\"bbox\", \"xmin\"],\n        \"ymin\": [\"bbox\", \"ymin\"],\n        \"xmax\": [\"bbox\", \"xmax\"],\n        \"ymax\": [\"bbox\", \"ymax\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating GeoParquet with GPQ in Command Line\nDESCRIPTION: This command uses the GPQ tool to validate a GeoParquet file and generate a report. It demonstrates how to check if a GeoParquet file complies with the specification.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngpq validate example.parquet\n```\n\n----------------------------------------\n\nTITLE: Validating GeoParquet with GDAL/OGR Python Script\nDESCRIPTION: This command uses the GDAL/OGR validation script to check compliance of a GeoParquet file. It runs a Python script that verifies if the file adheres to the GeoParquet specification, including data validation.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 validate_geoparquet.py --check-data my_geo.parquet\n```\n\n----------------------------------------\n\nTITLE: Converting NZ Building Outlines to Parquet\nDESCRIPTION: Script to convert New Zealand building outlines from GPKG to Parquet format with SNAPPY compression.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npoetry run python write_nz_building_outline.py \\\n    --input nz-building-outlines.gpkg \\\n    --output nz-building-outlines.parquet \\\n    --compression SNAPPY\n```\n\n----------------------------------------\n\nTITLE: Generating Example Parquet File\nDESCRIPTION: Command to generate example.parquet file using Poetry's environment.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npoetry run python generate_example.py\n```\n\n----------------------------------------\n\nTITLE: Running PyTest with Poetry\nDESCRIPTION: Command to run Python tests using pytest within Poetry's environment.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npoetry run pytest test_json_schema.py -v\n```\n\n----------------------------------------\n\nTITLE: Recompiling PyGEOS from Source\nDESCRIPTION: Command to reinstall PyGEOS package from source for improved performance.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npoetry run pip install -U --force-reinstall pygeos --no-binary pygeos\n```\n\n----------------------------------------\n\nTITLE: Running Python Scripts with Poetry\nDESCRIPTION: Example of running a Python script using Poetry's virtual environment.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npoetry run python generate_example.py\n```\n\n----------------------------------------\n\nTITLE: Installing Poetry Dependencies\nDESCRIPTION: Command to install project dependencies using Poetry's lockfile for consistent environment setup.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npoetry install\n```\n\n----------------------------------------\n\nTITLE: Updating Poetry Dependencies\nDESCRIPTION: Command to update the Poetry lockfile when adding new dependencies.\nSOURCE: https://github.com/opengeospatial/geoparquet/blob/main/scripts/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npoetry update\n```"
  }
]