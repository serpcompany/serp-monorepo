[
  {
    "owner": "blakeblackshear",
    "repo": "frigate",
    "content": "TITLE: Docker Compose Configuration for Frigate\nDESCRIPTION: Full Docker Compose configuration for running Frigate including volume mounts, port mappings, and environment variables.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    container_name: frigate\n    privileged: true # this may not be necessary for all setups\n    restart: unless-stopped\n    stop_grace_period: 30s # allow enough time to shut down the various services\n    image: ghcr.io/blakeblackshear/frigate:stable\n    shm_size: \"512mb\" # update for your cameras based on calculation above\n    devices:\n      - /dev/bus/usb:/dev/bus/usb # Passes the USB Coral, needs to be modified for other versions\n      - /dev/apex_0:/dev/apex_0 # Passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux\n      - /dev/video11:/dev/video11 # For Raspberry Pi 4B\n      - /dev/dri/renderD128:/dev/dri/renderD128 # For intel hwaccel, needs to be updated for your hardware\n    volumes:\n      - /etc/localtime:/etc/localtime:ro\n      - /path/to/your/config:/config\n      - /path/to/your/storage:/media/frigate\n      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear\n        target: /tmp/cache\n        tmpfs:\n          size: 1000000000\n    ports:\n      - \"8971:8971\"\n      # - \"5000:5000\" # Internal unauthenticated access. Expose carefully.\n      - \"8554:8554\" # RTSP feeds\n      - \"8555:8555/tcp\" # WebRTC over tcp\n      - \"8555:8555/udp\" # WebRTC over udp\n    environment:\n      FRIGATE_RTSP_PASSWORD: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Camera in Frigate YAML Configuration\nDESCRIPTION: A complete example of camera configuration in Frigate NVR. It shows how to set up RTSP streams, define detection zones, configure MQTT snapshots, enable ONVIF PTZ controls with autotracking, and set up generative AI description capabilities.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n# Required\ncameras:\n  # Required: name of the camera\n  back:\n    # Optional: Enable/Disable the camera (default: shown below).\n    # If disabled: config is used but no live stream and no capture etc.\n    # Events/Recordings are still viewable.\n    enabled: True\n    # Optional: camera type used for some Frigate features (default: shown below)\n    # Options are \"generic\" and \"lpr\"\n    type: \"generic\"\n    # Required: ffmpeg settings for the camera\n    ffmpeg:\n      # Required: A list of input streams for the camera. See documentation for more information.\n      inputs:\n        # Required: the path to the stream\n        # NOTE: path may include environment variables or docker secrets, which must begin with 'FRIGATE_' and be referenced in {}\n        - path: rtsp://viewer:{FRIGATE_RTSP_PASSWORD}@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n          # Required: list of roles for this stream. valid values are: audio,detect,record\n          # NOTICE: In addition to assigning the audio, detect, and record roles\n          # they must also be enabled in the camera config.\n          roles:\n            - audio\n            - detect\n            - record\n          # Optional: stream specific global args (default: inherit)\n          # global_args:\n          # Optional: stream specific hwaccel args (default: inherit)\n          # hwaccel_args:\n          # Optional: stream specific input args (default: inherit)\n          # input_args:\n      # Optional: camera specific global args (default: inherit)\n      # global_args:\n      # Optional: camera specific hwaccel args (default: inherit)\n      # hwaccel_args:\n      # Optional: camera specific input args (default: inherit)\n      # input_args:\n      # Optional: camera specific output args (default: inherit)\n      # output_args:\n\n    # Optional: timeout for highest scoring image before allowing it\n    # to be replaced by a newer image. (default: shown below)\n    best_image_timeout: 60\n\n    # Optional: URL to visit the camera web UI directly from the system page. Might not be available on every camera.\n    webui_url: \"\"\n\n    # Optional: zones for this camera\n    zones:\n      # Required: name of the zone\n      # NOTE: This must be different than any camera names, but can match with another zone on another\n      #       camera.\n      front_steps:\n        # Required: List of x,y coordinates to define the polygon of the zone.\n        # NOTE: Presence in a zone is evaluated only based on the bottom center of the objects bounding box.\n        coordinates: 0.033,0.306,0.324,0.138,0.439,0.185,0.042,0.428\n        # Optional: The real-world distances of a 4-sided zone used for zones with speed estimation enabled (default: none)\n        # List distances in order of the zone points coordinates and use the unit system defined in the ui config\n        distances: 10,15,12,11\n        # Optional: Number of consecutive frames required for object to be considered present in the zone (default: shown below).\n        inertia: 3\n        # Optional: Number of seconds that an object must loiter to be considered in the zone (default: shown below)\n        loitering_time: 0\n        # Optional: List of objects that can trigger this zone (default: all tracked objects)\n        objects:\n          - person\n        # Optional: Zone level object filters.\n        # NOTE: The global and camera filters are applied upstream.\n        filters:\n          person:\n            min_area: 5000\n            max_area: 100000\n            threshold: 0.7\n\n    # Optional: Configuration for the jpg snapshots published via MQTT\n    mqtt:\n      # Optional: Enable publishing snapshot via mqtt for camera (default: shown below)\n      # NOTE: Only applies to publishing image data to MQTT via 'frigate/<camera_name>/<object_name>/snapshot'.\n      # All other messages will still be published.\n      enabled: True\n      # Optional: print a timestamp on the snapshots (default: shown below)\n      timestamp: True\n      # Optional: draw bounding box on the snapshots (default: shown below)\n      bounding_box: True\n      # Optional: crop the snapshot (default: shown below)\n      crop: True\n      # Optional: height to resize the snapshot to (default: shown below)\n      height: 270\n      # Optional: jpeg encode quality (default: shown below)\n      quality: 70\n      # Optional: Restrict mqtt messages to objects that entered any of the listed zones (default: no required zones)\n      required_zones: []\n\n    # Optional: Configuration for how camera is handled in the GUI.\n    ui:\n      # Optional: Adjust sort order of cameras in the UI. Larger numbers come later (default: shown below)\n      # By default the cameras are sorted alphabetically.\n      order: 0\n      # Optional: Whether or not to show the camera in the Frigate UI (default: shown below)\n      dashboard: True\n\n    # Optional: connect to ONVIF camera\n    # to enable PTZ controls.\n    onvif:\n      # Required: host of the camera being connected to.\n      # NOTE: HTTP is assumed by default; HTTPS is supported if you specify the scheme, ex: \"https://0.0.0.0\".\n      host: 0.0.0.0\n      # Optional: ONVIF port for device (default: shown below).\n      port: 8000\n      # Optional: username for login.\n      # NOTE: Some devices require admin to access ONVIF.\n      user: admin\n      # Optional: password for login.\n      password: admin\n      # Optional: Skip TLS verification from the ONVIF server (default: shown below)\n      tls_insecure: False\n      # Optional: Ignores time synchronization mismatches between the camera and the server during authentication.\n      # Using NTP on both ends is recommended and this should only be set to True in a \"safe\" environment due to the security risk it represents.\n      ignore_time_mismatch: False\n      # Optional: PTZ camera object autotracking. Keeps a moving object in\n      # the center of the frame by automatically moving the PTZ camera.\n      autotracking:\n        # Optional: enable/disable object autotracking. (default: shown below)\n        enabled: False\n        # Optional: calibrate the camera on startup (default: shown below)\n        # A calibration will move the PTZ in increments and measure the time it takes to move.\n        # The results are used to help estimate the position of tracked objects after a camera move.\n        # Frigate will update your config file automatically after a calibration with\n        # a \"movement_weights\" entry for the camera. You should then set calibrate_on_startup to False.\n        calibrate_on_startup: False\n        # Optional: the mode to use for zooming in/out on objects during autotracking. (default: shown below)\n        # Available options are: disabled, absolute, and relative\n        #   disabled - don't zoom in/out on autotracked objects, use pan/tilt only\n        #   absolute - use absolute zooming (supported by most PTZ capable cameras)\n        #   relative - use relative zooming (not supported on all PTZs, but makes concurrent pan/tilt/zoom movements)\n        zooming: disabled\n        # Optional: A value to change the behavior of zooming on autotracked objects. (default: shown below)\n        # A lower value will keep more of the scene in view around a tracked object.\n        # A higher value will zoom in more on a tracked object, but Frigate may lose tracking more quickly.\n        # The value should be between 0.1 and 0.75\n        zoom_factor: 0.3\n        # Optional: list of objects to track from labelmap.txt (default: shown below)\n        track:\n          - person\n        # Required: Begin automatically tracking an object when it enters any of the listed zones.\n        required_zones:\n          - zone_name\n        # Required: Name of ONVIF preset in camera's firmware to return to when tracking is over. (default: shown below)\n        return_preset: home\n        # Optional: Seconds to delay before returning to preset. (default: shown below)\n        timeout: 10\n        # Optional: Values generated automatically by a camera calibration. Do not modify these manually. (default: shown below)\n        movement_weights: []\n\n    # Optional: Configuration for how to sort the cameras in the Birdseye view.\n    birdseye:\n      # Optional: Adjust sort order of cameras in the Birdseye view. Larger numbers come later (default: shown below)\n      # By default the cameras are sorted alphabetically.\n      order: 0\n\n    # Optional: Configuration for AI generated tracked object descriptions\n    genai:\n      # Optional: Enable AI description generation (default: shown below)\n      enabled: False\n      # Optional: Use the object snapshot instead of thumbnails for description generation (default: shown below)\n      use_snapshot: False\n      # Optional: The default prompt for generating descriptions. Can use replacement\n      # variables like \"label\", \"sub_label\", \"camera\" to make more dynamic. (default: shown below)\n      prompt: \"Describe the {label} in the sequence of images with as much detail as possible. Do not describe the background.\"\n      # Optional: Object specific prompts to customize description results\n      # Format: {label}: {prompt}\n      object_prompts:\n        person: \"My special person prompt.\"\n      # Optional: objects to generate descriptions for (default: all objects that are tracked)\n      objects:\n        - person\n        - cat\n      # Optional: Restrict generation to objects that entered any of the listed zones (default: none, all zones qualify)\n      required_zones: []\n      # Optional: What triggers to use to send frames for a tracked object to generative AI (default: shown below)\n      send_triggers:\n        # Once the object is no longer tracked\n        tracked_object_end: True\n        # Optional: After X many significant updates are received (default: shown below)\n        after_significant_updates: None\n      # Optional: Save thumbnails sent to generative AI for review/debugging purposes (default: shown below)\n      debug_save_thumbnails: False\n```\n\n----------------------------------------\n\nTITLE: Complete Frigate Configuration in YAML\nDESCRIPTION: Full reference configuration file for Frigate NVR showing all available configuration options with their default values and explanatory comments. This includes settings for MQTT, detectors, database, TLS, proxy configuration, authentication, models, audio events, logging, environment variables, and birdseye view.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  # Optional: Enable mqtt server (default: shown below)\n  enabled: True\n  # Required: host name\n  host: mqtt.server.com\n  # Optional: port (default: shown below)\n  port: 1883\n  # Optional: topic prefix (default: shown below)\n  # NOTE: must be unique if you are running multiple instances\n  topic_prefix: frigate\n  # Optional: client id (default: shown below)\n  # NOTE: must be unique if you are running multiple instances\n  client_id: frigate\n  # Optional: user\n  # NOTE: MQTT user can be specified with an environment variable or docker secrets that must begin with 'FRIGATE_'.\n  #       e.g. user: '{FRIGATE_MQTT_USER}'\n  user: mqtt_user\n  # Optional: password\n  # NOTE: MQTT password can be specified with an environment variable or docker secrets that must begin with 'FRIGATE_'.\n  #       e.g. password: '{FRIGATE_MQTT_PASSWORD}'\n  password: password\n  # Optional: tls_ca_certs for enabling TLS using self-signed certs (default: None)\n  tls_ca_certs: /path/to/ca.crt\n  # Optional: tls_client_cert and tls_client key in order to use self-signed client\n  # certificates (default: None)\n  # NOTE: certificate must not be password-protected\n  #       do not set user and password when using a client certificate\n  tls_client_cert: /path/to/client.crt\n  tls_client_key: /path/to/client.key\n  # Optional: tls_insecure (true/false) for enabling TLS verification of\n  # the server hostname in the server certificate (default: None)\n  tls_insecure: false\n  # Optional: interval in seconds for publishing stats (default: shown below)\n  stats_interval: 60\n  # Optional: QoS level for subscriptions and publishing (default: shown below)\n  # 0 = at most once\n  # 1 = at least once\n  # 2 = exactly once\n  qos: 0\n\n# Optional: Detectors configuration. Defaults to a single CPU detector\ndetectors:\n  # Required: name of the detector\n  detector_name:\n    # Required: type of the detector\n    # Frigate provides many types, see https://docs.frigate.video/configuration/object_detectors for more details (default: shown below)\n    # Additional detector types can also be plugged in.\n    # Detectors may require additional configuration.\n    # Refer to the Detectors configuration page for more information.\n    type: cpu\n\n# Optional: Database configuration\ndatabase:\n  # The path to store the SQLite DB (default: shown below)\n  path: /config/frigate.db\n\n# Optional: TLS configuration\ntls:\n  # Optional: Enable TLS for port 8971 (default: shown below)\n  enabled: True\n\n# Optional: Proxy configuration\nproxy:\n  # Optional: Mapping for headers from upstream proxies. Only used if Frigate's auth\n  # is disabled.\n  # NOTE: Many authentication proxies pass a header downstream with the authenticated\n  #       user name. Not all values are supported. It must be a whitelisted header.\n  #       See the docs for more info.\n  header_map:\n    user: x-forwarded-user\n  # Optional: Url for logging out a user. This sets the location of the logout url in\n  # the UI.\n  logout_url: /api/logout\n  # Optional: Auth secret that is checked against the X-Proxy-Secret header sent from\n  # the proxy. If not set, all requests are trusted regardless of origin.\n  auth_secret: None\n\n# Optional: Authentication configuration\nauth:\n  # Optional: Enable authentication\n  enabled: True\n  # Optional: Reset the admin user password on startup (default: shown below)\n  # New password is printed in the logs\n  reset_admin_password: False\n  # Optional: Cookie to store the JWT token for native auth (default: shown below)\n  cookie_name: frigate_token\n  # Optional: Set secure flag on cookie. (default: shown below)\n  # NOTE: This should be set to True if you are using TLS\n  cookie_secure: False\n  # Optional: Session length in seconds (default: shown below)\n  session_length: 86400 # 24 hours\n  # Optional: Refresh time in seconds (default: shown below)\n  # When the session is going to expire in less time than this setting,\n  # it will be refreshed back to the session_length.\n  refresh_time: 43200 # 12 hours\n  # Optional: Rate limiting for login failures to help prevent brute force\n  # login attacks (default: shown below)\n  # See the docs for more information on valid values\n  failed_login_rate_limit: None\n  # Optional: Trusted proxies for determining IP address to rate limit\n  # NOTE: This is only used for rate limiting login attempts and does not bypass\n  # authentication. See the authentication docs for more details.\n  trusted_proxies: []\n  # Optional: Number of hashing iterations for user passwords\n  # As of Feb 2023, OWASP recommends 600000 iterations for PBKDF2-SHA256\n  # NOTE: changing this value will not automatically update password hashes, you\n  #       will need to change each user password for it to apply\n  hash_iterations: 600000\n\n# Optional: model modifications\n# NOTE: The default values are for the EdgeTPU detector.\n# Other detectors will require the model config to be set.\nmodel:\n  # Required: path to the model. Frigate+ models use plus://<model_id> (default: automatic based on detector)\n  path: /edgetpu_model.tflite\n  # Required: path to the labelmap (default: shown below)\n  labelmap_path: /labelmap.txt\n  # Required: Object detection model input width (default: shown below)\n  width: 320\n  # Required: Object detection model input height (default: shown below)\n  height: 320\n  # Required: Object detection model input colorspace\n  # Valid values are rgb, bgr, or yuv. (default: shown below)\n  input_pixel_format: rgb\n  # Required: Object detection model input tensor format\n  # Valid values are nhwc or nchw (default: shown below)\n  input_tensor: nhwc\n  # Required: Object detection model type, currently only used with the OpenVINO detector\n  # Valid values are ssd, yolox, yolonas (default: shown below)\n  model_type: ssd\n  # Required: Label name modifications. These are merged into the standard labelmap.\n  labelmap:\n    2: vehicle\n  # Optional: Map of object labels to their attribute labels (default: depends on model)\n  attributes_map:\n    person:\n      - amazon\n      - face\n    car:\n      - amazon\n      - fedex\n      - license_plate\n      - ups\n\n# Optional: Audio Events Configuration\n# NOTE: Can be overridden at the camera level\naudio:\n  # Optional: Enable audio events (default: shown below)\n  enabled: False\n  # Optional: Configure the amount of seconds without detected audio to end the event (default: shown below)\n  max_not_heard: 30\n  # Optional: Configure the min rms volume required to run audio detection (default: shown below)\n  # As a rule of thumb:\n  #  - 200 - high sensitivity\n  #  - 500 - medium sensitivity\n  #  - 1000 - low sensitivity\n  min_volume: 500\n  # Optional: Types of audio to listen for (default: shown below)\n  listen:\n    - bark\n    - fire_alarm\n    - scream\n    - speech\n    - yell\n  # Optional: Filters to configure detection.\n  filters:\n    # Label that matches label in listen config.\n    speech:\n      # Minimum score that triggers an audio event (default: shown below)\n      threshold: 0.8\n\n# Optional: logger verbosity settings\nlogger:\n  # Optional: Default log verbosity (default: shown below)\n  default: info\n  # Optional: Component specific logger overrides\n  logs:\n    frigate.event: debug\n\n# Optional: set environment variables\nenvironment_vars:\n  EXAMPLE_VAR: value\n\n# Optional: birdseye configuration\n# NOTE: Can (enabled, mode) be overridden at the camera level\nbirdseye:\n  # Optional: Enable birdseye view (default: shown below)\n  enabled: True\n  # Optional: Restream birdseye via RTSP (default: shown below)\n  # NOTE: Enabling this will set birdseye to run 24/7 which may increase CPU usage somewhat.\n  restream: False\n  # Optional: Width of the output resolution (default: shown below)\n  width: 1280\n  # Optional: Height of the output resolution (default: shown below)\n  height: 720\n  # Optional: Encoding quality of the mpeg1 feed (default: shown below)\n  # 1 is the highest quality, and 31 is the lowest. Lower quality feeds utilize less CPU resources.\n  quality: 8\n  # Optional: Mode of the view. Available options are: objects, motion, and continuous\n  #   objects - cameras are included if they have had a tracked object within the last 30 seconds\n  #   motion - cameras are included if motion was detected in the last 30 seconds\n  #   continuous - all cameras are included always\n  mode: objects\n  # Optional: Threshold for camera activity to stop showing camera (default: shown below)\n  inactivity_threshold: 30\n  # Optional: Configure the birdseye layout\n  layout:\n    # Optional: Scaling factor for the layout calculator, range 1.0-5.0 (default: shown below)\n    scaling_factor: 2.0\n    # Optional: Maximum number of cameras to show at one time, showing the most recent (default: show all cameras)\n    max_cameras: 1\n\n# Optional: ffmpeg configuration\n```\n\n----------------------------------------\n\nTITLE: Standalone Intel Mini PC Configuration with USB Coral\nDESCRIPTION: Configuration for a standalone Intel Mini PC with USB Coral detector. Features VAAPI hardware acceleration, disabled MQTT (not integrated with Home Assistant), and settings for video recording with motion detection and snapshot retention.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/index.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  enabled: False\n\nffmpeg:\n  hwaccel_args: preset-vaapi\n\ndetectors:\n  coral:\n    type: edgetpu\n    device: usb\n\nrecord:\n  enabled: True\n  retain:\n    days: 7\n    mode: motion\n  alerts:\n    retain:\n      days: 30\n  detections:\n    retain:\n      days: 30\n\nsnapshots:\n  enabled: True\n  retain:\n    default: 30\n\ncameras:\n  name_of_your_camera:\n    detect:\n      width: 1280\n      height: 720\n      fps: 5\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp\n          roles:\n            - detect\n    motion:\n      mask:\n        - 0.000,0.427,0.002,0.000,0.999,0.000,0.999,0.781,0.885,0.456,0.700,0.424,0.701,0.311,0.507,0.294,0.453,0.347,0.451,0.400\n```\n\n----------------------------------------\n\nTITLE: Configuring Single USB Coral EdgeTPU\nDESCRIPTION: YAML configuration for setting up a single USB Coral EdgeTPU detector in Frigate.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral:\n    type: edgetpu\n    device: usb\n```\n\n----------------------------------------\n\nTITLE: Configuring Hardware Acceleration for Raspberry Pi H264/H265\nDESCRIPTION: YAML configuration for enabling hardware acceleration on Raspberry Pi for both H264 and H265 video streams. This requires allocating at least 128MB of GPU memory.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# if you want to decode a h264 stream\nffmpeg:\n  hwaccel_args: preset-rpi-64-h264\n\n# if you want to decode a h265 (hevc) stream\nffmpeg:\n  hwaccel_args: preset-rpi-64-h265\n```\n\n----------------------------------------\n\nTITLE: Configuring Coral TPU Detector in Frigate\nDESCRIPTION: This configuration sets up a Coral EdgeTPU as the object detector for Frigate and enables object detection for a camera. This significantly improves detection performance compared to CPU-only detection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt: ...\n\ndetectors: # <---- add detectors\n  coral:\n    type: edgetpu\n    device: usb\n\ncameras:\n  name_of_your_camera:\n    ffmpeg: ...\n    detect:\n      enabled: True # <---- turn on detection\n      ...\n```\n\n----------------------------------------\n\nTITLE: Raspberry Pi Home Assistant Add-on Configuration with USB Coral\nDESCRIPTION: Configuration example for a Raspberry Pi running Frigate as a Home Assistant Add-on with USB Coral. Includes MQTT connection to Mosquitto, hardware acceleration, motion detection, and video/snapshot retention settings.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/index.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  host: core-mosquitto\n  user: mqtt-user\n  password: xxxxxxxxxx\n\nffmpeg:\n  hwaccel_args: preset-rpi-64-h264\n\ndetectors:\n  coral:\n    type: edgetpu\n    device: usb\n\nrecord:\n  enabled: True\n  retain:\n    days: 7\n    mode: motion\n  alerts:\n    retain:\n      days: 30\n  detections:\n    retain:\n      days: 30\n\nsnapshots:\n  enabled: True\n  retain:\n    default: 30\n\ncameras:\n  name_of_your_camera:\n    detect:\n      width: 1280\n      height: 720\n      fps: 5\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp\n          roles:\n            - detect\n    motion:\n      mask:\n        - 0.000,0.427,0.002,0.000,0.999,0.000,0.999,0.781,0.885,0.456,0.700,0.424,0.701,0.311,0.507,0.294,0.453,0.347,0.451,0.400\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Camera Detection in Frigate\nDESCRIPTION: This YAML configuration sets up a basic Frigate configuration with MQTT disabled and a single camera configured for object detection. The camera URL should be replaced with your actual camera's RTSP URL.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  enabled: False\n\ncameras:\n  name_of_your_camera: # <------ Name the camera\n    enabled: True\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp # <----- The stream you want to use for detection\n          roles:\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Object Detection Configuration in YAML\nDESCRIPTION: Specifies detection settings including frame dimensions, FPS, object tracking parameters, and stationary object handling. Contains settings for initialization thresholds and annotation timing.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndetect:\n  enabled: False\n  width: 1280\n  height: 720\n  fps: 5\n  min_initialized: 2\n  max_disappeared: 25\n  stationary:\n    interval: 50\n    threshold: 50\n    max_frames:\n      default: 3000\n      objects:\n        person: 1000\n  annotation_offset: 0\n```\n\n----------------------------------------\n\nTITLE: Object Tracking and Filtering Configuration in YAML\nDESCRIPTION: Defines object tracking parameters including which objects to track, masking areas, and detailed filtering rules for specific object types like size, ratio, and detection confidence thresholds.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nobjects:\n  track:\n    - person\n  mask: 0.000,0.000,0.781,0.000,0.781,0.278,0.000,0.278\n  filters:\n    person:\n      min_area: 5000\n      max_area: 100000\n      min_ratio: 0.5\n      max_ratio: 2.0\n      min_score: 0.5\n      threshold: 0.7\n      mask: 0.000,0.000,0.781,0.000,0.781,0.278,0.000,0.278\n```\n\n----------------------------------------\n\nTITLE: Home Assistant Integrated Intel Mini PC with OpenVino\nDESCRIPTION: Configuration for an Intel Mini PC using OpenVino for object detection, integrated with Home Assistant via MQTT. Includes VAAPI hardware acceleration, custom model configuration, and settings for video recording and snapshot retention.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/index.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  host: 192.168.X.X # <---- same mqtt broker that home assistant uses\n  user: mqtt-user\n  password: xxxxxxxxxx\n\nffmpeg:\n  hwaccel_args: preset-vaapi\n\ndetectors:\n  ov:\n    type: openvino\n    device: AUTO\n\nmodel:\n  width: 300\n  height: 300\n  input_tensor: nhwc\n  input_pixel_format: bgr\n  path: /openvino-model/ssdlite_mobilenet_v2.xml\n  labelmap_path: /openvino-model/coco_91cl_bkgr.txt\n\nrecord:\n  enabled: True\n  retain:\n    days: 7\n    mode: motion\n  alerts:\n    retain:\n      days: 30\n  detections:\n    retain:\n      days: 30\n\nsnapshots:\n  enabled: True\n  retain:\n    default: 30\n\ncameras:\n  name_of_your_camera:\n    detect:\n      width: 1280\n      height: 720\n      fps: 5\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp\n          roles:\n            - detect\n    motion:\n      mask:\n        - 0.000,0.427,0.002,0.000,0.999,0.000,0.999,0.781,0.885,0.456,0.700,0.424,0.701,0.311,0.507,0.294,0.453,0.347,0.451,0.400\n```\n\n----------------------------------------\n\nTITLE: Frigate Configuration with Hardware Acceleration\nDESCRIPTION: This configuration enables hardware acceleration in Frigate using the VAAPI preset for Intel GPUs. This reduces CPU usage by offloading video decoding to the GPU.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt: ...\n\ncameras:\n  name_of_your_camera:\n    ffmpeg:\n      inputs: ...\n      hwaccel_args: preset-vaapi\n    detect: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring YOLO (v3, v4, v7, v9) Models in Frigate\nDESCRIPTION: YAML configuration for using YOLO models (v3, v4, v7, v9) with the ONNX detector in Frigate, including model path and input specifications.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx:\n    type: onnx\n\nmodel:\n  model_type: yolo-generic\n  width: 320 # <--- should match the imgsize set during model export\n  height: 320 # <--- should match the imgsize set during model export\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/yolo.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Camera Input Roles in Frigate\nDESCRIPTION: YAML configuration for setting up a camera with different input streams for detection and recording. This example shows how to use environment variables for passwords and assign specific roles to different camera streams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/cameras.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  host: mqtt.server.com\ncameras:\n  back:\n    enabled: True\n    ffmpeg:\n      inputs:\n        - path: rtsp://viewer:{FRIGATE_RTSP_PASSWORD}@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n          roles:\n            - detect\n        - path: rtsp://viewer:{FRIGATE_RTSP_PASSWORD}@10.0.10.10:554/live\n          roles:\n            - record\n    detect:\n      width: 1280 # <- optional, by default Frigate tries to automatically detect resolution\n      height: 720 # <- optional, by default Frigate tries to automatically detect resolution\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Configuration Settings in YAML\nDESCRIPTION: Defines FFmpeg-related settings including binary path, global arguments, hardware acceleration, input/output stream configurations, and retry parameters. Includes options for HEVC compatibility and stream handling.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  path: \"default\"\n  global_args: -hide_banner -loglevel warning -threads 2\n  hwaccel_args: \"auto\"\n  input_args: preset-rtsp-generic\n  output_args:\n    detect: -threads 2 -f rawvideo -pix_fmt yuv420p\n    record: preset-record-generic\n  retry_interval: 10\n  apple_compatibility: false\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Frigate\nDESCRIPTION: Complete Docker run command for deploying Frigate container with volume mounts, device access, and network configuration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  --restart=unless-stopped \\\n  --stop-timeout 30 \\\n  --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 \\\n  --device /dev/bus/usb:/dev/bus/usb \\\n  --device /dev/dri/renderD128 \\\n  --shm-size=64m \\\n  -v /path/to/your/storage:/media/frigate \\\n  -v /path/to/your/config:/config \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -e FRIGATE_RTSP_PASSWORD='password' \\\n  -p 8971:8971 \\\n  -p 8554:8554 \\\n  -p 8555:8555/tcp \\\n  -p 8555:8555/udp \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Mixing Different Coral Types\nDESCRIPTION: YAML configuration for using both USB and PCI Coral EdgeTPU detectors together.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral_usb:\n    type: edgetpu\n    device: usb\n  coral_pci:\n    type: edgetpu\n    device: pci\n```\n\n----------------------------------------\n\nTITLE: Basic Frigate Configuration Example with MQTT and Camera Setup\nDESCRIPTION: Minimal starting configuration for Frigate with MQTT disabled and a dummy camera that will be replaced with an actual camera later. This serves as a foundation for building more complex configurations.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  enabled: False\n\ncameras:\n  dummy_camera: # <--- this will be changed to your actual camera later\n    enabled: False\n    ffmpeg:\n      inputs:\n        - path: rtsp://127.0.0.1:554/rtsp\n          roles:\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Configuring Recording Settings in YAML\nDESCRIPTION: Defines recording configuration including enabling/disabling recording, cleanup intervals, retention policies, and export settings. This section also includes specific settings for alert and detection recordings, controlling how long recordings are kept and under what conditions.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: False\n  expire_interval: 60\n  sync_recordings: False\n  retain:\n    days: 0\n    mode: all\n  export:\n    timelapse_args: \"-vf setpts=0.04*PTS -r 30\"\n  preview:\n    quality: medium\n  alerts:\n    pre_capture: 5\n    post_capture: 5\n    retain:\n      days: 14\n      mode: motion\n  detections:\n    pre_capture: 5\n    post_capture: 5\n    retain:\n      days: 14\n      mode: motion\n```\n\n----------------------------------------\n\nTITLE: Configuring Generative AI in Frigate YAML\nDESCRIPTION: Basic YAML configuration for enabling Generative AI in Frigate, including global settings and camera-specific overrides.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: gemini\n  api_key: \"{FRIGATE_GEMINI_API_KEY}\"\n  model: gemini-1.5-flash\n\ncameras:\n  front_camera: ...\n  indoor_camera:\n    genai: # <- disable GenAI for your indoor camera\n      enabled: False\n```\n\n----------------------------------------\n\nTITLE: Docker Compose with Hardware Acceleration for Frigate\nDESCRIPTION: This docker-compose.yml configuration adds hardware acceleration support for Intel GPUs by passing through the GPU device to the Frigate container. This needs to be modified based on your specific hardware.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    devices:\n      - /dev/dri/renderD128:/dev/dri/renderD128 # for intel hwaccel, needs to be updated for your hardware\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring YOLOx Model in Frigate\nDESCRIPTION: YAML configuration for using a YOLOx model with the ONNX detector in Frigate, including model path and input specifications.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx:\n    type: onnx\n\nmodel:\n  model_type: yolox\n  width: 416 # <--- should match the imgsize set during model export\n  height: 416 # <--- should match the imgsize set during model export\n  input_tensor: nchw\n  input_dtype: float_denorm\n  path: /config/model_cache/yolox_tiny.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Defining NVIDIA TensorRT Dependencies for Frigate (pip requirements)\nDESCRIPTION: Specifies all required Python packages with version constraints for NVIDIA TensorRT support on x86_64 architecture. The dependencies include TensorRT core components, CUDA libraries, cuDNN, ONNX, and essential supporting packages like numpy and protobuf, all conditionally installed based on platform architecture.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/tensorrt/requirements-amd64.txt#2025-04-21_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\n--extra-index-url 'https://pypi.nvidia.com'\nnumpy < 1.24; platform_machine == 'x86_64'\ntensorrt == 8.6.1; platform_machine == 'x86_64'\ntensorrt_bindings == 8.6.1; platform_machine == 'x86_64'\ncuda-python == 11.8.*; platform_machine == 'x86_64'\ncython == 3.0.*; platform_machine == 'x86_64'\nnvidia-cuda-runtime-cu12 == 12.1.*; platform_machine == 'x86_64'\nnvidia-cuda-runtime-cu11 == 11.8.*; platform_machine == 'x86_64'\nnvidia-cublas-cu11 == 11.11.3.6; platform_machine == 'x86_64'\nnvidia-cudnn-cu11 == 8.6.0.*; platform_machine == 'x86_64'\nnvidia-cudnn-cu12 == 9.5.0.*; platform_machine == 'x86_64'\nnvidia-cufft-cu11==10.*; platform_machine == 'x86_64'\nnvidia-cufft-cu12==11.*; platform_machine == 'x86_64'\nonnx==1.16.*; platform_machine == 'x86_64'\nonnxruntime-gpu==1.20.*; platform_machine == 'x86_64'\nprotobuf==3.20.3; platform_machine == 'x86_64'\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Detection Settings in YAML\nDESCRIPTION: Defines motion detection parameters including threshold, lightning threshold, contour area, frame alpha, frame height, mask, contrast improvement, and MQTT off delay. These settings control the sensitivity and behavior of Frigate's motion detection system.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  enabled: False\n  threshold: 30\n  lightning_threshold: 0.8\n  contour_area: 10\n  frame_alpha: 0.01\n  frame_height: 100\n  mask: 0.000,0.469,1.000,0.469,1.000,1.000,0.000,1.000\n  improve_contrast: True\n  mqtt_off_delay: 30\n```\n\n----------------------------------------\n\nTITLE: Configuring ONVIF PTZ Camera Controls in Frigate\nDESCRIPTION: YAML configuration for setting up ONVIF PTZ controls for a camera, including host, port, user, and password parameters.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/cameras.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  back:\n    ffmpeg: ...\n    onvif:\n      host: 10.0.10.10\n      port: 8000\n      user: admin\n      password: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate with Tailscale or Private Networking\nDESCRIPTION: Docker Compose configuration for running Frigate with Tailscale or other private networking solutions.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/home-assistant.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    image: ghcr.io/blakeblackshear/frigate:stable\n    ...\n    ports:\n      - \"<tailscale_ip>:5000:5000\"\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Tracking with Attribute Labels in Frigate YAML\nDESCRIPTION: YAML configuration example showing how to configure Frigate to track various objects including special attribute labels like faces, license plates, and delivery service logos. This configuration enables advanced features like face detection and delivery vehicle identification.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/plus/index.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nobjects:\n  track:\n    - person\n    - face\n    - license_plate\n    - dog\n    - cat\n    - car\n    - amazon\n    - fedex\n    - ups\n    - package\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant and Frigate with Docker Compose (Host Networking)\nDESCRIPTION: Docker Compose configuration example for running Home Assistant with host networking and Frigate with port mapping.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/home-assistant.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homeassistant:\n    image: ghcr.io/home-assistant/home-assistant:stable\n    network_mode: host\n    ...\n\n  frigate:\n    image: ghcr.io/blakeblackshear/frigate:stable\n    ...\n    ports:\n      - \"172.17.0.1:5000:5000\"\n      ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Coral TPU Integration\nDESCRIPTION: This docker-compose.yml configuration passes through either a USB Coral or PCIe Coral device to the Frigate container, enabling hardware-accelerated object detection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    devices:\n      - /dev/bus/usb:/dev/bus/usb # passes the USB Coral, needs to be modified for other versions\n      - /dev/apex_0:/dev/apex_0 # passes a PCIe Coral, follow driver instructions here https://coral.ai/docs/m2/get-started/#2a-on-linux\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Continuous Recording in Frigate YAML\nDESCRIPTION: Basic configuration to enable continuous recording with a one-day retention period. This setting determines how long standard recordings are kept.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  retain:\n    days: 1 # <- number of days to keep continuous recordings\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Object Detection Model\nDESCRIPTION: YAML configuration for using a custom object detection model, specifying its path, dimensions, input tensor format, and pixel format.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: model config\nmodel:\n  path: /path/to/model\n  width: 320\n  height: 320\n  input_tensor: \"nhwc\"\n  input_pixel_format: \"bgr\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MJPEG Camera Streams in Frigate\nDESCRIPTION: Setup for MJPEG cameras using go2rtc for h264 conversion and multiple camera roles. Includes hardware acceleration for better performance.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    mjpeg_cam: \"ffmpeg:http://your_mjpeg_stream_url#video=h264#hardware\"\n\ncameras:\n  ...\n  mjpeg_cam:\n    ffmpeg:\n      inputs:\n        - path: rtsp://127.0.0.1:8554/mjpeg_cam\n          roles:\n            - detect\n            - record\n```\n\n----------------------------------------\n\nTITLE: Configuring VAAPI Hardware Acceleration for Intel/AMD GPUs\nDESCRIPTION: YAML configuration for enabling VAAPI-based hardware acceleration which works with both H.264 and H.265 streams and supports automatic profile selection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-vaapi\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple PCIE/M.2 Corals\nDESCRIPTION: YAML configuration for setting up multiple PCIE/M.2 Coral EdgeTPU detectors.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral1:\n    type: edgetpu\n    device: pci:0\n  coral2:\n    type: edgetpu\n    device: pci:1\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated LPR Camera with Frigate+ Model in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up a dedicated LPR camera using a Frigate+ model or any model that natively detects license plates, including detection settings and object tracking.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# LPR global configuration\nlpr:\n  enabled: True\n  device: CPU # can also be GPU if available\n\n# Dedicated LPR camera configuration\ncameras:\n  dedicated_lpr_camera:\n    type: \"lpr\" # required to use dedicated LPR camera mode\n    ffmpeg: ... # add your streams\n    detect:\n      enabled: True\n      fps: 5 # increase to 10 if vehicles move quickly across your frame. Higher than 15 is unnecessary and is not recommended.\n      min_initialized: 2\n      width: 1920\n      height: 1080\n    objects:\n      track:\n        - license_plate\n      filters:\n        license_plate:\n          threshold: 0.7\n    motion:\n      threshold: 30\n      contour_area: 60 # use an increased value to tune out small motion changes\n      improve_contrast: false\n      mask: 0.704,0.007,0.709,0.052,0.989,0.055,0.993,0.001 # ensure your camera's timestamp is masked\n    record:\n      enabled: True # disable recording if you only want snapshots\n    snapshots:\n      enabled: True\n    review:\n      detections:\n        labels:\n          - license_plate\n```\n\n----------------------------------------\n\nTITLE: Customizing Object Detection Labelmap\nDESCRIPTION: Configuration to customize the object detection labelmap, allowing for renaming or combining object types to improve recognition or simplify classification.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  labelmap:\n    2: vehicle\n    3: vehicle\n    5: vehicle\n    7: vehicle\n    15: animal\n    16: animal\n    17: animal\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate with NVIDIA Runtime on Jetson using Docker Compose\nDESCRIPTION: Docker Compose configuration for deploying Frigate on a Jetson device, specifying the NVIDIA runtime and the appropriate image.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    image: ghcr.io/blakeblackshear/frigate:stable-tensorrt-jp6\n    runtime: nvidia   # Add this\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate+ Model Path\nDESCRIPTION: Configuration snippet showing how to specify a Frigate+ model in the configuration file using the model ID.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/plus/first_model.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  path: plus://<your_model_id>\n```\n\n----------------------------------------\n\nTITLE: Configuring License Plate Recognition in Frigate\nDESCRIPTION: YAML configuration for enabling license plate recognition (LPR) in Frigate. Includes settings for detection thresholds, minimum plate area, character validation, and image enhancement options.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: Configuration for license plate recognition capability\n# NOTE: enabled, min_area, and enhancement can be overridden at the camera level\nlpr:\n  # Optional: Enable license plate recognition (default: shown below)\n  enabled: False\n  # Optional: The device to run the models on (default: shown below)\n  device: CPU\n  # Optional: Set the model size used for text detection. (default: shown below)\n  model_size: small\n  # Optional: License plate object confidence score required to begin running recognition (default: shown below)\n  detection_threshold: 0.7\n  # Optional: Minimum area of license plate to begin running recognition (default: shown below)\n  min_area: 1000\n  # Optional: Recognition confidence score required to add the plate to the object as a sub label (default: shown below)\n  recognition_threshold: 0.9\n  # Optional: Minimum number of characters a license plate must have to be added to the object as a sub label (default: shown below)\n  min_plate_length: 4\n  # Optional: Regular expression for the expected format of a license plate (default: shown below)\n  format: None\n  # Optional: Allow this number of missing/incorrect characters to still cause a detected plate to match a known plate\n  match_distance: 1\n  # Optional: Known plates to track (strings or regular expressions) (default: shown below)\n  known_plates: {}\n  # Optional: Enhance the detected plate image with contrast adjustment and denoising (default: shown below)\n  # A value between 0 and 10. Higher values are not always better and may perform worse than lower values.\n  enhancement: 0\n  # Optional: Save plate images to /media/frigate/clips/lpr for debugging purposes (default: shown below)\n  debug_save_plates: False\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Zones for Alerts in YAML\nDESCRIPTION: Example configuration for setting up required zones for camera alerts. This snippet shows how to configure a camera to only create alerts when objects enter a specific zone named 'entire_yard'.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    review:\n      alerts:\n        required_zones:\n          - entire_yard\n    zones:\n      entire_yard:\n        coordinates: ...\n```\n\n----------------------------------------\n\nTITLE: Validating Frigate Config via Command Line\nDESCRIPTION: Docker command to validate a Frigate configuration file directly using the Frigate container, useful for CI/CD pipelines as it returns appropriate exit codes.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run                                \\\n  -v $(pwd)/config.yml:/config/config.yml \\\n  --entrypoint python3                    \\\n  ghcr.io/blakeblackshear/frigate:stable  \\\n  -u -m frigate                           \\\n  --validate-config\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording in Frigate YAML\nDESCRIPTION: Configuration example demonstrating how to enable video recording functionality by adding record roles to camera streams and configuring recording settings.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt: ...\n\ndetectors: ...\n\ncameras:\n  name_of_your_camera:\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp\n          roles:\n            - detect\n        - path: rtsp://10.0.10.10:554/high_res_stream\n          roles:\n            - record\n    detect: ...\n    record:\n      enabled: True\n    motion: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate+ Model Path\nDESCRIPTION: Basic configuration for using a Frigate+ model in your Frigate setup by specifying the model path with your model ID.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/plus.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  path: plus://<your_model_id>\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Protocol Streams in Frigate\nDESCRIPTION: Example configuration showing how to properly set up a Reolink camera with different presets for detect and record roles, using both HTTP and RTSP protocols via go2rtc streaming.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/ffmpeg_presets.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    reolink_cam: http://192.168.0.139/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=admin&password=password\n\ncameras:\n  reolink_cam:\n    ffmpeg:\n      inputs:\n        - path: http://192.168.0.139/flv?port=1935&app=bcs&stream=channel0_ext.bcs&user=admin&password=password\n          input_args: preset-http-reolink\n          roles:\n            - detect\n        - path: rtsp://127.0.0.1:8554/reolink_cam\n          input_args: preset-rtsp-generic\n          roles:\n            - record\n```\n\n----------------------------------------\n\nTITLE: Configuring Lightning Threshold for Motion Detection in Frigate (YAML)\nDESCRIPTION: Sets the percentage of image change that triggers motion detection recalibration. Useful for handling large motion changes like PTZ moves or IR mode switches.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/motion_detection.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  # Optional: The percentage of the image used to detect lightning or other substantial changes where motion detection\n  #           needs to recalibrate. (default: shown below)\n  # Increasing this value will make motion detection more likely to consider lightning or ir mode changes as valid motion.\n  # Decreasing this value will make motion detection more likely to ignore large amounts of motion such as a person approaching\n  # a doorbell camera.\n  lightning_threshold: 0.8\n```\n\n----------------------------------------\n\nTITLE: Mapping Video Devices to Frigate in Docker Compose\nDESCRIPTION: Docker Compose configuration to map video devices to the Frigate container, which is necessary for hardware acceleration on Raspberry Pi.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    devices:\n      - /dev/video11:/dev/video11\n```\n\n----------------------------------------\n\nTITLE: Configuring Global LPR Settings in YAML for Frigate\nDESCRIPTION: This YAML snippet demonstrates how to configure global LPR settings in Frigate, including enabling LPR, setting minimum area and plate length, and defining known plates with various matching patterns.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nlpr:\n  enabled: True\n  min_area: 1500 # Ignore plates with an area (length x width) smaller than 1500 pixels\n  min_plate_length: 4 # Only recognize plates with 4 or more characters\n  known_plates:\n    Wife's Car:\n      - \"ABC-1234\"\n      - \"ABC-I234\" # Accounts for potential confusion between the number one (1) and capital letter I\n    Johnny:\n      - \"J*N-*234\" # Matches JHN-1234 and JMN-I234, but also note that \"*\" matches any number of characters\n    Sally:\n      - \"[S5]LL 1234\" # Matches both SLL 1234 and 5LL 1234\n    Work Trucks:\n      - \"EMP-[0-9]{3}[A-Z]\" # Matches plates like EMP-123A, EMP-456Z\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Cameras to Frigate Configuration\nDESCRIPTION: YAML snippet demonstrating how to add multiple cameras to the Frigate configuration file under the 'cameras' entry.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/cameras.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt: ...\ncameras:\n  back: ...\n  front: ...\n  side: ...\n```\n\n----------------------------------------\n\nTITLE: Camera-Specific GenAI Configuration\nDESCRIPTION: YAML configuration for camera-level Generative AI settings including snapshot usage, custom prompts, object filtering, and zone requirements.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  front_door:\n    genai:\n      use_snapshot: True\n      prompt: \"Analyze the {label} in these images from the {camera} security camera at the front door. Focus on the actions and potential intent of the {label}.\"\n      object_prompts:\n        person: \"Examine the person in these images. What are they doing, and how might their actions suggest their purpose (e.g., delivering something, approaching, leaving)? If they are carrying or interacting with a package, include details about its source or destination.\"\n        cat: \"Observe the cat in these images. Focus on its movement and intent (e.g., wandering, hunting, interacting with objects). If the cat is near the flower pots or engaging in any specific actions, mention it.\"\n      objects:\n        - person\n        - cat\n      required_zones:\n        - steps\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated LPR Camera with Secondary Pipeline in YAML\nDESCRIPTION: This YAML configuration shows how to set up a dedicated LPR camera using Frigate's built-in secondary LPR pipeline for users not running a Frigate+ model, including motion detection and review settings.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# LPR global configuration\nlpr:\n  enabled: True\n  device: CPU # can also be GPU if available\n  detection_threshold: 0.7 # change if necessary\n\n# Dedicated LPR camera configuration\ncameras:\n  dedicated_lpr_camera:\n    type: \"lpr\" # required to use dedicated LPR camera mode\n    lpr:\n      enabled: True\n      enhancement: 3 # optional, enhance the image before trying to recognize characters\n    ffmpeg: ... # add your streams\n    detect:\n      enabled: False # disable Frigate's standard object detection pipeline\n      fps: 5 # increase if necessary, though high values may slow down Frigate's enrichments pipeline and use considerable CPU\n      width: 1920\n      height: 1080\n    objects:\n      track: [] # required when not using a Frigate+ model for dedicated LPR mode\n    motion:\n      threshold: 30\n      contour_area: 60 # use an increased value here to tune out small motion changes\n      improve_contrast: false\n      mask: 0.704,0.007,0.709,0.052,0.989,0.055,0.993,0.001 # ensure your camera's timestamp is masked\n    record:\n      enabled: True # disable recording if you only want snapshots\n    review:\n      detections:\n        enabled: True\n        retain:\n          default: 7\n```\n\n----------------------------------------\n\nTITLE: Review and Alerts Configuration in YAML\nDESCRIPTION: Configures alert and detection review settings including enabled status, tracked labels, and required zones for triggering alerts and detections.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreview:\n  alerts:\n    enabled: True\n    labels:\n      - car\n      - person\n    required_zones:\n      - driveway\n  detections:\n    enabled: True\n    labels:\n      - car\n      - person\n    required_zones:\n      - driveway\n```\n\n----------------------------------------\n\nTITLE: Installing Frigate Docker Container on QNAP NAS\nDESCRIPTION: This shell script downloads the Frigate Docker image, creates necessary directories, and runs the Frigate container with specific settings for QNAP NAS. It includes volume mapping, port forwarding, and resource limits.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n# Download Frigate image\ndocker pull ghcr.io/blakeblackshear/frigate:stable\n# Create directory to host Frigate config file on QNAP file system.\n# E.g., you can choose to create it under /share/Container.\nmkdir -p /share/Container/frigate/config\n# Copy the config file prepared in step 2 into the newly created config directory.\ncp path/to/your/config/file /share/Container/frigate/config\n# Create directory to host Frigate media files on QNAP file system.\n# (if you have a surveillance disk, create media directory on the surveillance disk.\n# Example command assumes share_vol2 is the surveillance drive\nmkdir -p /share/share_vol2/frigate/media\n# Create Frigate docker container.  Replace shm-size value with the value from preparation step 3.\n# Also replace the time zone value for 'TZ' in the sample command.\n# Example command will create a docker container that uses at most 2 CPUs and 4G RAM.\n# You may need to add \"--env=LIBVA_DRIVER_NAME=i965 \\\" to the following docker run command if you\n# have certain CPU (e.g., J4125). See https://docs.frigate.video/configuration/hardware_acceleration.\ndocker run \\\n  --name=frigate \\\n  --shm-size=256m \\\n  --restart=unless-stopped \\\n  --env=TZ=America/New_York \\\n  --volume=/share/Container/frigate/config:/config:rw \\\n  --volume=/share/share_vol2/frigate/media:/media/frigate:rw \\\n  --network=bridge \\\n  --privileged \\\n  --workdir=/opt/frigate \\\n  -p 8971:8971 \\\n  -p 8554:8554 \\\n  -p 8555:8555 \\\n  -p 8555:8555/udp \\\n  --label='com.qnap.qcs.network.mode=nat' \\\n  --label='com.qnap.qcs.gpu=False' \\\n  --memory=\"4g\" \\\n  --cpus=\"2\" \\\n  --detach=true \\\n  -t \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: NVIDIA TensorRT GPU Requirements\nDESCRIPTION: NVIDIA GPU requirements for TensorRT detector including minimum driver version (>=525.60.13) and compute capability (5.0+).\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/hardware.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n>=525.60.13\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg Stream with Hardware Acceleration in go2rtc YAML\nDESCRIPTION: YAML configuration for setting up an FFmpeg stream with hardware acceleration in go2rtc. This is useful when the camera stream needs to be re-encoded to H264.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n      - \"ffmpeg:back#video=h264#hardware\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AI-Generated Descriptions in Frigate\nDESCRIPTION: YAML configuration for enabling AI-generated descriptions of tracked objects in Frigate. Supports multiple LLM providers (Ollama, Gemini, OpenAI) with customizable prompts for different object types.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: Configuration for AI generated tracked object descriptions\n# WARNING: Depending on the provider, this will send thumbnails over the internet\n# to Google or OpenAI's LLMs to generate descriptions. It can be overridden at\n# the camera level (enabled: False) to enhance privacy for indoor cameras.\ngenai:\n  # Optional: Enable AI description generation (default: shown below)\n  enabled: False\n  # Required if enabled: Provider must be one of ollama, gemini, or openai\n  provider: ollama\n  # Required if provider is ollama. May also be used for an OpenAI API compatible backend with the openai provider.\n  base_url: http://localhost::11434\n  # Required if gemini or openai\n  api_key: \"{FRIGATE_GENAI_API_KEY}\"\n  # Optional: The default prompt for generating descriptions. Can use replacement\n  # variables like \"label\", \"sub_label\", \"camera\" to make more dynamic. (default: shown below)\n  prompt: \"Describe the {label} in the sequence of images with as much detail as possible. Do not describe the background.\"\n  # Optional: Object specific prompts to customize description results\n  # Format: {label}: {prompt}\n  object_prompts:\n    person: \"My special person prompt.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NVIDIA GPU Decoder in YAML\nDESCRIPTION: YAML configuration for setting up the NVIDIA GPU decoder in Frigate. It uses the 'preset-nvidia' argument for automatic profile selection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-nvidia\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenVINO Multiple Detectors\nDESCRIPTION: YAML configuration for setting up multiple OpenVINO GPU detectors for handling many cameras.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov_0:\n    type: openvino\n    device: GPU\n  ov_1:\n    type: openvino\n    device: GPU\n```\n\n----------------------------------------\n\nTITLE: Setting Up Camera Groups in Frigate\nDESCRIPTION: YAML configuration for creating camera groups in Frigate with specific cameras, icon, and display order. This allows cameras to be filtered and reviewed together.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/cameras.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncamera_groups:\n  front:\n    cameras:\n      - driveway_cam\n      - garage_cam\n    icon: LuCar\n    order: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Masks in Frigate YAML\nDESCRIPTION: Configuration example showing how to set up motion masks for a camera in Frigate. Includes MQTT settings, detector configuration, and camera stream settings with motion mask coordinates.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  enabled: False\n\ndetectors:\n  coral:\n    type: edgetpu\n    device: usb\n\ncameras:\n  name_of_your_camera:\n    ffmpeg:\n      inputs:\n        - path: rtsp://10.0.10.10:554/rtsp\n          roles:\n            - detect\n    motion:\n      mask:\n        - 0,461,3,0,1919,0,1919,843,1699,492,1344,458,1346,336,973,317,869,375,866,432\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Events in Frigate YAML Configuration\nDESCRIPTION: This snippet demonstrates how to enable audio events globally and for specific cameras in the Frigate configuration file. It shows the YAML structure for enabling audio detection at different levels.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/audio_detectors.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\naudio: # <- enable audio events for all camera\n  enabled: True\n\ncameras:\n  front_camera:\n    ffmpeg:\n    ...\n    audio:\n      enabled: True # <- enable audio events for the front_camera\n```\n\n----------------------------------------\n\nTITLE: Reolink Camera Configuration\nDESCRIPTION: Comprehensive setup for Reolink cameras using HTTP streams and NVR integration with multiple channels and roles.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    your_reolink_camera:\n      - \"ffmpeg:http://reolink_ip/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=username&password=password#video=copy#audio=copy#audio=opus\"\n    your_reolink_camera_sub:\n      - \"ffmpeg:http://reolink_ip/flv?port=1935&app=bcs&stream=channel0_ext.bcs&user=username&password=password\"\n    your_reolink_camera_via_nvr:\n      - \"ffmpeg:http://reolink_nvr_ip/flv?port=1935&app=bcs&stream=channel3_main.bcs&user=username&password=password\"\n      - \"ffmpeg:your_reolink_camera_via_nvr#audio=aac\"\n    your_reolink_camera_via_nvr_sub:\n      - \"ffmpeg:http://reolink_nvr_ip/flv?port=1935&app=bcs&stream=channel3_ext.bcs&user=username&password=password\"\n\ncameras:\n  your_reolink_camera:\n    ffmpeg:\n      inputs:\n        - path: rtsp://127.0.0.1:8554/your_reolink_camera\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n        - path: rtsp://127.0.0.1:8554/your_reolink_camera_sub\n          input_args: preset-rtsp-restream\n          roles:\n            - detect\n  reolink_via_nvr:\n    ffmpeg:\n      inputs:\n        - path: rtsp://127.0.0.1:8554/your_reolink_camera_via_nvr?video=copy&audio=aac\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n        - path: rtsp://127.0.0.1:8554/your_reolink_camera_via_nvr_sub?video=copy\n          input_args: preset-rtsp-restream\n          roles:\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Configuring Face Recognition in Frigate\nDESCRIPTION: YAML configuration for enabling face recognition in Frigate. Settings include confidence thresholds, minimum face area requirements, and training parameters for face detection and matching.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n# NOTE: Can (enabled, min_area) be overridden at the camera level\nface_recognition:\n  # Optional: Enable semantic search (default: shown below)\n  enabled: False\n  # Optional: Minimum face distance score required to mark as a potential match (default: shown below)\n  unknown_score: 0.8\n  # Optional: Minimum face detection score required to detect a face (default: shown below)\n  # NOTE: This only applies when not running a Frigate+ model\n  detection_threshold: 0.7\n  # Optional: Minimum face distance score required to be considered a match (default: shown below)\n  recognition_threshold: 0.9\n  # Optional: Min area of detected face box to consider running face recognition (default: shown below)\n  min_area: 500\n  # Optional: Number of images of recognized faces to save for training (default: shown below)\n  save_attempts: 100\n  # Optional: Apply a blur quality filter to adjust confidence based on the blur level of the image (default: shown below)\n  blur_confidence_filter: True\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate+ Model with Custom Labelmap\nDESCRIPTION: Advanced configuration for using a Frigate+ model with a custom labelmap, allowing for label remapping. Note that this may break the Submit to Frigate+ feature if labels aren't available in Frigate+.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/plus.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  path: plus://<your_model_id>\n  labelmap:\n    3: animal\n    4: animal\n    5: animal\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple USB Coral EdgeTPUs\nDESCRIPTION: YAML configuration for setting up multiple USB Coral EdgeTPU detectors with different device IDs.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral1:\n    type: edgetpu\n    device: usb:0\n  coral2:\n    type: edgetpu\n    device: usb:1\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Support in go2rtc\nDESCRIPTION: YAML configuration example showing how to set up audio streaming for both RTSP and HTTP cameras with support for multiple audio codecs.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/live.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    rtsp_cam: # <- for RTSP streams\n      - rtsp://192.168.1.5:554/live0 # <- stream which supports video & aac audio\n      - \"ffmpeg:rtsp_cam#audio=opus\" # <- copy of the stream which transcodes audio to the missing codec (usually will be opus)\n    http_cam: # <- for http streams\n      - http://192.168.50.155/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=user&password=password # <- stream which supports video & aac audio\n      - \"ffmpeg:http_cam#audio=opus\" # <- copy of the stream which transcodes audio to the missing codec (usually will be opus)\n```\n\n----------------------------------------\n\nTITLE: Configuring Autotracking for PTZ Camera in Frigate YAML\nDESCRIPTION: YAML configuration snippet for setting up autotracking with an ONVIF-capable PTZ camera in Frigate. Includes ONVIF connection parameters, autotracking settings, and optional calibration configuration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/autotracking.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  ptzcamera:\n    ...\n    onvif:\n      host: 0.0.0.0\n      port: 8000\n      user: admin\n      password: admin\n      tls_insecure: False\n      autotracking:\n        enabled: False\n        calibrate_on_startup: False\n        zooming: disabled\n        zoom_factor: 0.3\n        track:\n          - person\n        required_zones:\n          - zone_name\n        return_preset: home\n        timeout: 10\n        movement_weights: []\n```\n\n----------------------------------------\n\nTITLE: Setting Up Snapshot Configuration in YAML\nDESCRIPTION: Configures snapshot settings including enabling/disabling snapshots, clean copy creation, timestamp and bounding box drawing, cropping, resizing, required zones, and retention policies. These settings control how Frigate captures and stores snapshot images of detected objects.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nsnapshots:\n  enabled: False\n  clean_copy: True\n  timestamp: False\n  bounding_box: True\n  crop: False\n  height: 175\n  required_zones: []\n  retain:\n    default: 10\n    objects:\n      person: 15\n  quality: 70\n```\n\n----------------------------------------\n\nTITLE: Configuring Object-Specific Zones in YAML\nDESCRIPTION: Configuration example demonstrating how to restrict zones to specific object types, allowing different zones to track different types of objects.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    zones:\n      entire_yard:\n        coordinates: ... (everywhere you want a person)\n        objects:\n          - person\n      front_yard_street:\n        coordinates: ... (just the street)\n        objects:\n          - car\n```\n\n----------------------------------------\n\nTITLE: Configuring Quicksync Hardware Acceleration for Intel CPUs with H264\nDESCRIPTION: YAML configuration for enabling Intel Quicksync hardware acceleration specifically for H.264 video streams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-intel-qsv-h264\n```\n\n----------------------------------------\n\nTITLE: Configuring go2rtc Stream in Frigate YAML\nDESCRIPTION: Example YAML configuration for setting up a go2rtc stream in Frigate. This snippet demonstrates how to add an RTSP stream for a camera named 'back'.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n```\n\n----------------------------------------\n\nTITLE: Enabling Bird Classification in Frigate Configuration (YAML)\nDESCRIPTION: This snippet shows the basic YAML configuration required to enable bird classification in Frigate. It must be added to the Frigate config file to activate the feature.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/bird_classification.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclassification:\n  bird:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Native Coral Dev Board\nDESCRIPTION: YAML configuration for setting up a native Coral Dev Board detector with empty device string.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral:\n    type: edgetpu\n    device: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Notifications in YAML\nDESCRIPTION: Basic notification configuration at the global level with email and cooldown settings. The cooldown parameter controls the minimum time between notifications across all cameras.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnotifications:\n  enabled: True\n  email: \"johndoe@gmail.com\"\n  cooldown: 10 # wait 10 seconds before sending another notification from any camera\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple ONNX Detectors in Frigate\nDESCRIPTION: YAML configuration for defining multiple ONNX detectors in Frigate to handle multiple cameras efficiently.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx_0:\n    type: onnx\n  onnx_1:\n    type: onnx\n```\n\n----------------------------------------\n\nTITLE: Configuring SR-IOV Support for GPU Stats\nDESCRIPTION: YAML configuration to enable support for GPU statistics on virtualized GPUs via SR-IOV.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry:\n  stats:\n    sriov: True\n```\n\n----------------------------------------\n\nTITLE: Configuring D-FINE Model\nDESCRIPTION: Configuration for using D-FINE model with OpenVINO detector. Currently only supports CPU mode execution.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov:\n    type: openvino\n    device: GPU\n\nmodel:\n  model_type: dfine\n  width: 640\n  height: 640\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/dfine_s_obj2coco.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring YOLO-NAS Model in Frigate\nDESCRIPTION: YAML configuration for using a YOLO-NAS model with the ONNX detector in Frigate, including model path and input specifications.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx:\n    type: onnx\n\nmodel:\n  model_type: yolonas\n  width: 320 # <--- should match whatever was set in notebook\n  height: 320 # <--- should match whatever was set in notebook\n  input_pixel_format: bgr\n  input_tensor: nchw\n  path: /config/yolo_nas_s.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for NVIDIA GPU Access\nDESCRIPTION: Docker Compose configuration to enable Frigate access to NVIDIA GPUs for hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    image: ghcr.io/blakeblackshear/frigate:stable\n    deploy:    # <------------- Add this section\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              device_ids: ['0'] # this is only needed when using multiple GPUs\n              count: 1 # number of GPUs\n              capabilities: [gpu]\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixed Retention Modes in Frigate YAML\nDESCRIPTION: Advanced configuration using different retention modes, storing all motion segments for 7 days and active objects for 14 days, demonstrating layered retention policies.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  retain:\n    days: 7\n    mode: motion\n  alerts:\n    retain:\n      days: 14\n      mode: active_objects\n  detections:\n    retain:\n      days: 14\n      mode: active_objects\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate Logger with YAML\nDESCRIPTION: Configuration for Frigate's logging system to set default log levels and module-specific logging levels for troubleshooting purposes.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  # Optional: default log level (default: shown below)\n  default: info\n  # Optional: module by module log level configuration\n  logs:\n    frigate.mqtt: error\n```\n\n----------------------------------------\n\nTITLE: Configuring Hailo YOLO Detector\nDESCRIPTION: YAML configuration for setting up a Hailo-8/8L detector using YOLO model with customizable parameters.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  hailo8l:\n    type: hailo8l\n    device: PCIe\n\nmodel:\n  width: 320\n  height: 320\n  input_tensor: nhwc\n  input_pixel_format: rgb\n  input_dtype: int\n  model_type: yolo-generic\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring RF-DETR Model in Frigate\nDESCRIPTION: YAML configuration for using an RF-DETR model with the ONNX detector in Frigate, including model path and input specifications.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx:\n    type: onnx\n\nmodel:\n  model_type: rfdetr\n  width: 560\n  height: 560\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/rfdetr.onnx\n```\n\n----------------------------------------\n\nTITLE: Mapping Video Devices to Frigate with Docker Run\nDESCRIPTION: Docker run command to map video devices to the Frigate container for hardware acceleration on Raspberry Pi.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  ... \\\n  --device /dev/video11 \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for NVIDIA GPU Access\nDESCRIPTION: Docker run command to enable Frigate access to NVIDIA GPUs for hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  ... \\\n  --gpus=all \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Configuring YOLO-NAS Model\nDESCRIPTION: Configuration for using YOLO-NAS models with OpenVINO detector. Requires manually downloading the model and placing it in the config folder.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov:\n    type: openvino\n    device: GPU\n\nmodel:\n  model_type: yolonas\n  width: 320\n  height: 320\n  input_tensor: nchw\n  input_pixel_format: bgr\n  path: /config/yolo_nas_s.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Quicksync Hardware Acceleration for Intel CPUs with H265\nDESCRIPTION: YAML configuration for enabling Intel Quicksync hardware acceleration specifically for H.265 video streams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-intel-qsv-h265\n```\n\n----------------------------------------\n\nTITLE: Configuring Alerts-Only Recording Retention in Frigate YAML\nDESCRIPTION: Minimal configuration that discards all video unless an alert is ongoing, retaining video for 30 days only during alerts with motion.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  retain:\n    days: 0\n  alerts:\n    retain:\n      days: 30\n      mode: motion\n```\n\n----------------------------------------\n\nTITLE: Configuring Object-Based Recording Retention in Frigate YAML\nDESCRIPTION: Configuration specifying retention periods for alert and detection recordings, allowing different retention policies for different types of events.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  alerts:\n    retain:\n      days: 10 # <- number of days to keep alert recordings\n  detections:\n    retain:\n      days: 10 # <- number of days to keep detections recordings\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for AMD GPU Access in Frigate\nDESCRIPTION: Docker Compose YAML configuration to enable AMD GPU access for Frigate by exposing necessary devices.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n---\ndevices:\n  - /dev/dri\n  - /dev/kfd\n```\n\n----------------------------------------\n\nTITLE: Configuring RF-DETR Model\nDESCRIPTION: Configuration for using RF-DETR model with OpenVINO detector. Recommended only for discrete Arc Graphics Cards due to model complexity.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov:\n    type: openvino\n    device: GPU\n\nmodel:\n  model_type: rfdetr\n  width: 560\n  height: 560\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/rfdetr.onnx\n```\n\n----------------------------------------\n\nTITLE: Adding PCIe Coral Support to Raspberry Pi 5 Config\nDESCRIPTION: Configuration changes required in config.txt to enable PCIe Coral detection on Raspberry Pi 5. These dtoverlay settings allow compatibility with the updated kernel.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/edgetpu.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndtoverlay=pciex1-compat-pi5,no-mip\ndtoverlay=pcie-32bit-dma-pi5\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Gemini Provider in Frigate YAML\nDESCRIPTION: YAML configuration for using Google Gemini as the Generative AI provider in Frigate, including API key and model selection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: gemini\n  api_key: \"{FRIGATE_GEMINI_API_KEY}\"\n  model: gemini-1.5-flash\n```\n\n----------------------------------------\n\nTITLE: Selecting Jina AI CLIP Model in Frigate YAML\nDESCRIPTION: This configuration snippet demonstrates how to select a specific Jina AI CLIP model version and size for Semantic Search in Frigate. It allows users to choose between small and large model sizes, affecting performance and resource usage.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/semantic_search.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsemantic_search:\n  enabled: True\n  model: \"jinav1\"\n  model_size: small\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Privileged Mode with Intel GPU\nDESCRIPTION: Docker Compose configuration to run Frigate in privileged mode for accessing Intel GPU stats.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    image: ghcr.io/blakeblackshear/frigate:stable\n    privileged: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Assistant and Frigate with Docker Compose (Separate Network)\nDESCRIPTION: Docker Compose configuration example for running Home Assistant and Frigate on separate networks.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/home-assistant.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  homeassistant:\n    image: ghcr.io/home-assistant/home-assistant:stable\n    # network_mode: host\n    ...\n\n  frigate:\n    image: ghcr.io/blakeblackshear/frigate:stable\n    ...\n    ports:\n      # - \"172.17.0.1:5000:5000\"\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Search in Frigate YAML\nDESCRIPTION: This YAML snippet shows how to enable Semantic Search in Frigate's configuration file. It allows users to turn on the feature and optionally trigger a reindex of the embeddings database.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/semantic_search.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsemantic_search:\n  enabled: True\n  reindex: False\n```\n\n----------------------------------------\n\nTITLE: Setting Up Notifications in YAML\nDESCRIPTION: Configures notification settings including enabling the service, specifying an email for push notifications, and setting a cooldown period. These settings control how and when Frigate sends notifications about detected events.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nnotifications:\n  enabled: False\n  email: \"admin@example.com\"\n  cooldown: 0\n```\n\n----------------------------------------\n\nTITLE: Defining Camera Groups in YAML for Frigate\nDESCRIPTION: This snippet demonstrates how to define camera groups in Frigate's configuration. It includes specifying cameras within a group, setting an icon, and defining the group's order. This allows for logical organization of cameras in the UI.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ncamera_groups:\n  front:\n    cameras:\n      - front_cam\n      - side_cam\n      - front_doorbell_cam\n    icon: LuCar\n    order: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion Detection Threshold in Frigate (YAML)\nDESCRIPTION: Sets the threshold for pixel luminance change to be considered motion. Value should be between 1 and 255, with lower values increasing sensitivity.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/motion_detection.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  # Optional: The threshold passed to cv2.threshold to determine if a pixel is different enough to be counted as motion. (default: shown below)\n  # Increasing this value will make motion detection less sensitive and decreasing it will make motion detection more sensitive.\n  # The value should be between 1 and 255.\n  threshold: 30\n```\n\n----------------------------------------\n\nTITLE: Nginx Reverse Proxy Configuration for Frigate\nDESCRIPTION: Nginx configuration for setting up a reverse proxy to Frigate with SSL support.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_4\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  set $forward_scheme http;\n  set $server         \"192.168.100.2\"; # FRIGATE SERVER LOCATION\n  set $port           8971;\n\n  listen 80;\n  listen 443 ssl http2;\n\n  server_name frigate.domain.com;\n\n  # Let's Encrypt SSL\n  include conf.d/include/letsencrypt-acme-challenge.conf;\n  include conf.d/include/ssl-ciphers.conf;\n  ssl_certificate /etc/letsencrypt/live/npm-1/fullchain.pem;\n  ssl_certificate_key /etc/letsencrypt/live/npm-1/privkey.pem;\n\n  proxy_set_header Upgrade $http_upgrade;\n  proxy_set_header Connection $http_connection;\n  proxy_http_version 1.1;\n\n  access_log /data/logs/proxy-host-40_access.log proxy;\n  error_log /data/logs/proxy-host-40_error.log warn;\n\n  location / {\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $http_connection;\n    proxy_http_version 1.1;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Frigate Integration via HACS in Home Assistant\nDESCRIPTION: Instructions for installing the Frigate integration using HACS (Home Assistant Community Store) in Home Assistant.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/home-assistant.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nHome Assistant > HACS > Click in the Search bar and type \"Frigate\" > Frigate\n```\n\n----------------------------------------\n\nTITLE: Customizing Audio Event Types in Frigate YAML Configuration\nDESCRIPTION: This snippet demonstrates how to customize the types of audio events that Frigate will detect. It shows the YAML configuration for specifying which audio types to listen for, such as barks, fire alarms, and screams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/audio_detectors.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\naudio:\n  enabled: True\n  listen:\n    - bark\n    - fire_alarm\n    - scream\n    - speech\n    - yell\n```\n\n----------------------------------------\n\nTITLE: Configuring Live Stream Settings in Frigate WebUI\nDESCRIPTION: YAML configuration for customizing the live stream view in Frigate's web interface. Settings include stream selection, resolution height, and encoding quality to balance stream quality with resource usage.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: Live stream configuration for WebUI.\n# NOTE: Can be overridden at the camera level\nlive:\n  # Optional: Set the streams configured in go2rtc\n  # that should be used for live view in frigate WebUI. (default: name of camera)\n  # NOTE: In most cases this should be set at the camera level only.\n  streams:\n    main_stream: main_stream_name\n    sub_stream: sub_stream_name\n  # Optional: Set the height of the jsmpeg stream. (default: 720)\n  # This must be less than or equal to the height of the detect stream. Lower resolutions\n  # reduce bandwidth required for viewing the jsmpeg stream. Width is computed to match known aspect ratio.\n  height: 720\n  # Optional: Set the encode quality of the jsmpeg stream (default: shown below)\n  # 1 is the highest quality, and 31 is the lowest. Lower quality feeds utilize less CPU resources.\n  quality: 8\n```\n\n----------------------------------------\n\nTITLE: Configuring Rockchip H264 Decoder in YAML\nDESCRIPTION: YAML configuration for setting up the Rockchip H264 decoder in Frigate. It uses the 'preset-rk-h264' argument for hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-rk-h264\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Live UI Streams\nDESCRIPTION: Complete configuration example showing how to set up multiple stream qualities with friendly names for the Live UI, including go2rtc and camera configurations.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/live.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    test_cam:\n      - rtsp://192.168.1.5:554/live_main\n      - \"ffmpeg:test_cam#audio=opus\"\n    test_cam_sub:\n      - rtsp://192.168.1.5:554/live_sub\n    test_cam_another_sub:\n      - rtsp://192.168.1.5:554/live_alt\n\ncameras:\n  test_cam:\n    ffmpeg:\n      output_args:\n        record: preset-record-generic-audio-copy\n      inputs:\n        - path: rtsp://127.0.0.1:8554/test_cam\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n        - path: rtsp://127.0.0.1:8554/test_cam_sub\n          input_args: preset-rtsp-restream\n          roles:\n            - detect\n    live:\n      streams:\n        Main Stream: test_cam\n        Sub Stream: test_cam_sub\n        Special Stream: test_cam_another_sub\n```\n\n----------------------------------------\n\nTITLE: Enabling License Plate Recognition in Frigate YAML Configuration\nDESCRIPTION: Basic YAML configuration to enable License Plate Recognition (LPR) globally in Frigate. This is the minimum required configuration to activate the LPR feature.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlpr:\n  enabled: True\n```\n\n----------------------------------------\n\nTITLE: Basic Motion Mask Configuration in YAML\nDESCRIPTION: Example of configuring a single motion mask using relative coordinates in Frigate's configuration file.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/masks.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  mask: \"0.000,0.427,0.002,0.000,0.999,0.000,0.999,0.781,0.885,0.456,0.700,0.424,0.701,0.311,0.507,0.294,0.453,0.347,0.451,0.400\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Speed Estimation in YAML\nDESCRIPTION: Example configuration for speed estimation in zones, including real-world distance measurements for accurate speed calculations.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    zones:\n      street:\n        coordinates: 0.033,0.306,0.324,0.138,0.439,0.185,0.042,0.428\n        distances: 10,12,11,13.5 # in meters or feet\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Memory Management in Frigate\nDESCRIPTION: This Docker Compose configuration example shows how to set memory limits and swap settings for the Frigate container to prevent swapping and manage resource allocation.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/recordings.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    mem_swappiness: 0\n    memswap_limit: <MAXSWAP>\n    deploy:\n      resources:\n        limits:\n          memory: <MAXRAM>\n```\n\n----------------------------------------\n\nTITLE: Setting Contour Area for Motion Detection in Frigate (YAML)\nDESCRIPTION: Defines the minimum size in pixels that counts as motion. Higher values reduce sensitivity to smaller moving objects, while lower values increase it.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/motion_detection.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  # Optional: Minimum size in pixels in the resized motion image that counts as motion (default: shown below)\n  # Increasing this value will prevent smaller areas of motion from being detected. Decreasing will\n  # make motion detection more sensitive to smaller moving objects.\n  # As a rule of thumb:\n  #  - 10 - high sensitivity\n  #  - 30 - medium sensitivity\n  #  - 50 - low sensitivity\n  contour_area: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Authentication\nDESCRIPTION: YAML configuration to disable Frigate's authentication and set up proxy authentication with a secret.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/authentication.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  enabled: False\n\nproxy:\n  auth_secret: <some random long string>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Provider in Frigate YAML\nDESCRIPTION: YAML configuration for using OpenAI as the Generative AI provider in Frigate, specifying the API key and model.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: openai\n  api_key: \"{FRIGATE_OPENAI_API_KEY}\"\n  model: gpt-4o\n```\n\n----------------------------------------\n\nTITLE: Configuring Birdseye Camera View Modes in YAML\nDESCRIPTION: Example configuration showing how to enable Birdseye globally while customizing individual camera settings. Demonstrates enabling/disabling cameras and setting different modes per camera.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Include all cameras by default in Birdseye view\nbirdseye:\n  enabled: True\n  mode: continuous\n\ncameras:\n  front:\n    # Only include the \"front\" camera in Birdseye view when objects are detected\n    birdseye:\n      mode: objects\n  back:\n    # Exclude the \"back\" camera from Birdseye view\n    birdseye:\n      enabled: False\n```\n\n----------------------------------------\n\nTITLE: Configuring D-FINE Model in Frigate\nDESCRIPTION: YAML configuration for using a D-FINE model with the ONNX detector in Frigate, including model path and input specifications.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  onnx:\n    type: onnx\n\nmodel:\n  model_type: dfine\n  width: 640\n  height: 640\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/dfine_m_obj2coco.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Example PromQL Queries for Frigate Metrics Analysis\nDESCRIPTION: This set of PromQL queries demonstrates how to analyze Frigate metrics. It includes queries for average CPU usage, total GPU memory usage, detection FPS by camera, storage usage percentage, and event count by camera in the last hour.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/metrics.md#2025-04-21_snippet_1\n\nLANGUAGE: promql\nCODE:\n```\n# Average CPU usage across all processes\navg(frigate_cpu_usage_percent)\n\n# Total GPU memory usage\nsum(frigate_gpu_mem_usage_percent)\n\n# Detection FPS by camera\nrate(frigate_detection_fps{camera_name=\"front_door\"}[5m])\n\n# Storage usage percentage\n(frigate_storage_used_bytes / frigate_storage_total_bytes) * 100\n\n# Event count by camera in last hour\nincrease(frigate_camera_events[1h])\n```\n\n----------------------------------------\n\nTITLE: Basic Face Recognition Configuration in YAML\nDESCRIPTION: Minimal YAML configuration to enable face recognition functionality in Frigate.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/face_recognition.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nface_recognition:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Detailed Visualization of Frigate's Video Pipeline with Mermaid\nDESCRIPTION: This complex Mermaid flowchart provides a detailed view of Frigate's video pipeline, including acquisition, motion detection, object detection, and storage processes. It shows the relationships between different components and the flow of data through the system.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/video_pipeline.md#2025-04-21_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {\"themeVariables\": {\"edgeLabelBackground\": \"transparent\"}}}%%\n\nflowchart TD\n    RecStore[(Recording\\nstore)]\n    SnapStore[(Snapshot\\nstore)]\n\n    subgraph Acquisition\n        Cam[\"Camera\"] -->|FFmpeg supported| Stream\n        Cam -->|\"Other streaming\\nprotocols\"| go2rtc\n        go2rtc(\"go2rtc\") --> Stream\n        Stream[Capture main and\\nsub streams] --> |detect stream|Decode(Decode and\\ndownscale)\n    end\n    subgraph Motion\n        Decode --> MotionM(Apply\\nmotion masks)\n        MotionM --> MotionD(Motion\\ndetection)\n    end\n    subgraph Detection\n        MotionD --> |motion regions| ObjectD(Object detection)\n        Decode --> ObjectD\n        ObjectD --> ObjectFilter(Apply object filters & zones)\n        ObjectFilter --> ObjectZ(Track objects)\n    end\n    Decode --> |decoded frames|Birdseye\n    MotionD --> |motion event|Birdseye\n    ObjectZ --> |object event|Birdseye\n\n    MotionD --> |\"video segments\\n(retain motion)\"|RecStore\n    ObjectZ --> |detection clip|RecStore\n    Stream -->|\"video segments\\n(retain all)\"| RecStore\n    ObjectZ --> |detection snapshot|SnapStore\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Inertia Settings in YAML\nDESCRIPTION: Configuration examples for zone inertia settings, showing how to adjust the number of consecutive frames required for zone detection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    zones:\n      front_yard:\n        inertia: 3\n        objects:\n          - person\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetson H264 Decoder in YAML\nDESCRIPTION: YAML configuration for setting up the Jetson H264 decoder in Frigate. It uses the 'preset-jetson-h264' argument for hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-jetson-h264\n```\n\n----------------------------------------\n\nTITLE: Calculating Required shm-size for Frigate\nDESCRIPTION: Python commands to calculate the minimum shared memory size required for Frigate based on camera resolution and count.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ python -c 'print(\"{:.2f}MB\".format((1280 * 720 * 1.5 * 20 + 270480) / 1048576 + 40))'\n66.63MB\n\n$ python -c 'print(\"{:.2f}MB\".format(((1280 * 720 * 1.5 * 20 + 270480) / 1048576) * 8 + 40))'\n253MB\n```\n\n----------------------------------------\n\nTITLE: Visualizing High-Level Video Processing Steps with Mermaid\nDESCRIPTION: This Mermaid flowchart illustrates the five main processing steps in Frigate's video pipeline: feed acquisition, video decoding, motion detection, object detection, and recording/visualization. It shows the flow of data between these steps.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/video_pipeline.md#2025-04-21_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n%%{init: {\"themeVariables\": {\"edgeLabelBackground\": \"transparent\"}}}%%\n\nflowchart LR\n    Feed(Feed\\nacquisition) --> Decode(Video\\ndecoding)\n    Decode --> Motion(Motion\\ndetection)\n    Motion --> Object(Object\\ndetection)\n    Feed --> Recording(Recording\\nand\\nvisualization)\n    Motion --> Recording\n    Object --> Recording\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Stream Restream in YAML\nDESCRIPTION: Sets up a single connection to the camera for restream, detect, and record roles. Includes configuration for both RTSP and HTTP cameras.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    name_your_rtsp_cam: # <- for RTSP streams\n      - rtsp://192.168.1.5:554/live0 # <- stream which supports video & aac audio\n      - \"ffmpeg:name_your_rtsp_cam#audio=opus\" # <- copy of the stream which transcodes audio to the missing codec (usually will be opus)\n    name_your_http_cam: # <- for other streams\n      - http://192.168.50.155/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=user&password=password # <- stream which supports video & aac audio\n      - \"ffmpeg:name_your_http_cam#audio=opus\" # <- copy of the stream which transcodes audio to the missing codec (usually will be opus)\n\ncameras:\n  name_your_rtsp_cam:\n    ffmpeg:\n      output_args:\n        record: preset-record-generic-audio-copy\n      inputs:\n        - path: rtsp://127.0.0.1:8554/name_your_rtsp_cam # <--- the name here must match the name of the camera in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n            - detect\n            - audio # <- only necessary if audio detection is enabled\n  name_your_http_cam:\n    ffmpeg:\n      output_args:\n        record: preset-record-generic-audio-copy\n      inputs:\n        - path: rtsp://127.0.0.1:8554/name_your_http_cam # <--- the name here must match the name of the camera in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n            - detect\n            - audio # <- only necessary if audio detection is enabled\n```\n\n----------------------------------------\n\nTITLE: Configuring Hailo SSD Detector\nDESCRIPTION: YAML configuration for setting up a Hailo-8/8L detector using SSD model type.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  hailo8l:\n    type: hailo8l\n    device: PCIe\n\nmodel:\n  width: 300\n  height: 300\n  input_tensor: nhwc\n  input_pixel_format: rgb\n  model_type: ssd\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Frigate Configuration\nDESCRIPTION: YAML configuration for setting environment variables within Frigate when container environment cannot be modified directly, such as in Home Assistant OS.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment_vars:\n  VARIABLE_NAME: variable_value\n```\n\n----------------------------------------\n\nTITLE: Global GenAI Configuration with Custom Prompts\nDESCRIPTION: YAML configuration for setting up global Generative AI settings including provider details and object-specific prompts for people and cars.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: ollama\n  base_url: http://localhost:11434\n  model: llava\n  prompt: \"Analyze the {label} in these images from the {camera} security camera. Focus on the actions, behavior, and potential intent of the {label}, rather than just describing its appearance.\"\n  object_prompts:\n    person: \"Examine the main person in these images. What are they doing and what might their actions suggest about their intent (e.g., approaching a door, leaving an area, standing still)? Do not describe the surroundings or static details.\"\n    car: \"Observe the primary vehicle in these images. Focus on its movement, direction, or purpose (e.g., parking, approaching, circling). If it's a delivery vehicle, mention the company.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Conservative Recording Retention in Frigate YAML\nDESCRIPTION: Configuration for storing all video for 3 days, with motion-containing video retained for 30 days when overlapping with alerts or detections.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  retain:\n    days: 3\n    mode: all\n  alerts:\n    retain:\n      days: 30\n      mode: motion\n  detections:\n    retain:\n      days: 30\n      mode: motion\n```\n\n----------------------------------------\n\nTITLE: Setting Birdseye Inactivity Threshold in YAML\nDESCRIPTION: Configuration example showing how to modify the inactivity threshold that determines how long cameras remain visible after their last activity.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nbirdseye:\n  enabled: True\n  inactivity_threshold: 15\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorRT Model Settings\nDESCRIPTION: Configuration for using TensorRT detector with converted models, including GPU device selection and model parameters.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  tensorrt:\n    type: tensorrt\n    device: 0\n\nmodel:\n  path: /config/model_cache/tensorrt/yolov7-320.trt\n  input_tensor: nchw\n  input_pixel_format: rgb\n  width: 320\n  height: 320\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Hailo-8 Hardware Access\nDESCRIPTION: YAML configuration to grant Docker permissions to access Hailo-8 hardware for Frigate.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndevices:\n  - /dev/hailo0\n```\n\n----------------------------------------\n\nTITLE: Frigate Events Message Format\nDESCRIPTION: JSON structure for object tracking events, including object details, scores, zones, and attributes. Published when tracked objects are detected, updated, or end tracking.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/mqtt.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"update\",\n  \"before\": {\n    \"id\": \"1607123955.475377-mxklsc\",\n    \"camera\": \"front_door\",\n    \"frame_time\": 1607123961.837752,\n    \"snapshot_time\": 1607123961.837752,\n    \"label\": \"person\",\n    \"sub_label\": null,\n    \"top_score\": 0.958984375,\n    \"false_positive\": false,\n    \"start_time\": 1607123955.475377,\n    \"end_time\": null,\n    \"score\": 0.7890625,\n    \"box\": [424, 500, 536, 712],\n    \"area\": 23744,\n    \"ratio\": 2.113207,\n    \"region\": [264, 450, 667, 853],\n    \"current_zones\": [\"driveway\"],\n    \"entered_zones\": [\"yard\", \"driveway\"],\n    \"thumbnail\": null,\n    \"has_snapshot\": false,\n    \"has_clip\": false,\n    \"active\": true,\n    \"stationary\": false,\n    \"motionless_count\": 0,\n    \"position_changes\": 2,\n    \"attributes\": {\n      \"face\": 0.64\n    },\n    \"current_attributes\": [],\n    \"current_estimated_speed\": 0.71,\n    \"velocity_angle\": 180,\n    \"recognized_license_plate\": \"ABC12345\",\n    \"recognized_license_plate_score\": 0.933451\n  },\n  \"after\": {\n    \"id\": \"1607123955.475377-mxklsc\",\n    \"camera\": \"front_door\",\n    \"frame_time\": 1607123962.082975,\n    \"snapshot_time\": 1607123961.837752,\n    \"label\": \"person\",\n    \"sub_label\": [\"John Smith\", 0.79],\n    \"top_score\": 0.958984375,\n    \"false_positive\": false,\n    \"start_time\": 1607123955.475377,\n    \"end_time\": null,\n    \"score\": 0.87890625,\n    \"box\": [432, 496, 544, 854],\n    \"area\": 40096,\n    \"ratio\": 1.251397,\n    \"region\": [218, 440, 693, 915],\n    \"current_zones\": [\"yard\", \"driveway\"],\n    \"entered_zones\": [\"yard\", \"driveway\"],\n    \"thumbnail\": null,\n    \"has_snapshot\": false,\n    \"has_clip\": false,\n    \"active\": true,\n    \"stationary\": false,\n    \"motionless_count\": 0,\n    \"position_changes\": 2,\n    \"attributes\": {\n      \"face\": 0.86\n    },\n    \"current_attributes\": [\n      {\n        \"label\": \"face\",\n        \"box\": [442, 506, 534, 524],\n        \"score\": 0.86\n      }\n    ],\n    \"current_estimated_speed\": 0.77,\n    \"velocity_angle\": 180,\n    \"recognized_license_plate\": \"ABC12345\",\n    \"recognized_license_plate_score\": 0.933451\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Frigate Logs via Docker CLI (Bash)\nDESCRIPTION: This command demonstrates how to view Frigate logs using the Docker CLI. It uses the 'docker logs' command with the '-f' flag to follow the log output in real-time for a container named 'frigate'.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/faqs.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker logs -f frigate\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Logging for Frigate LPR\nDESCRIPTION: YAML configuration to enable detailed debug logging for the license plate recognition module in Frigate. Sets the default logging level to info while enabling debug-level logging specifically for the license plate module.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  default: info\n  logs:\n    frigate.data_processing.common.license_plate: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Requirements for Snapshots in YAML\nDESCRIPTION: Example showing how to configure zone requirements for camera snapshots, limiting snapshot capture to specific zones.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    snapshots:\n      required_zones:\n        - entire_yard\n    zones:\n      entire_yard:\n        coordinates: ...\n```\n\n----------------------------------------\n\nTITLE: Advanced LPR Configuration with Recognition Threshold and Format in YAML\nDESCRIPTION: This YAML configuration shows advanced LPR settings including recognition threshold, plate format specification, and match distance for plate matching in Frigate.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nlpr:\n  enabled: True\n  min_area: 4000 # Run recognition on larger plates only (4000 pixels represents a 63x63 pixel square in your image)\n  recognition_threshold: 0.85\n  format: \"^[A-Z]{2} [A-Z][0-9]{4}$\" # Only recognize plates that are two letters, followed by a space, followed by a single letter and 4 numbers\n  match_distance: 1 # Allow one character variation in plate matching\n  known_plates:\n    Delivery Van:\n      - \"RJ K5678\"\n      - \"UP A1234\"\n    Supervisor:\n      - \"MN D3163\"\n```\n\n----------------------------------------\n\nTITLE: Reolink Doorbell Configuration\nDESCRIPTION: Configuration for Reolink doorbell with two-way audio support using both HTTP-FLV and RTSP streams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    your_reolink_doorbell:\n      - \"ffmpeg:http://reolink_ip/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=username&password=password#video=copy#audio=copy#audio=opus\"\n      - rtsp://reolink_ip/Preview_01_sub\n    your_reolink_doorbell_sub:\n      - \"ffmpeg:http://reolink_ip/flv?port=1935&app=bcs&stream=channel0_ext.bcs&user=username&password=password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Camera-Specific Notifications in YAML\nDESCRIPTION: Camera-level notification configuration that overrides global settings. Allows setting camera-specific cooldown periods for notification throttling.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  doorbell:\n    ...\n    notifications:\n      enabled: True\n      cooldown: 30 # wait 30 seconds before sending another notification from the doorbell camera\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic YOLO Models\nDESCRIPTION: Configuration for using YOLOv3, YOLOv4, YOLOv7, and YOLOv9 models with OpenVINO detector. Requires manually providing the ONNX model.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov:\n    type: openvino\n    device: GPU\n\nmodel:\n  model_type: yolo-generic\n  width: 320\n  height: 320\n  input_tensor: nchw\n  input_dtype: float\n  path: /config/model_cache/yolo.onnx\n  labelmap_path: /labelmap/coco-80.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Alert Labels in Frigate\nDESCRIPTION: YAML configuration for specifying which object and audio labels should trigger alerts in the review system. This can be overridden at the camera level.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/review.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# can be overridden at the camera level\nreview:\n  alerts:\n    labels:\n      - car\n      - cat\n      - dog\n      - person\n      - speech\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus for Frigate Metrics Scraping in YAML\nDESCRIPTION: This YAML configuration snippet shows how to set up Prometheus to scrape metrics from Frigate. It defines the job name, metrics path, target, and scrape interval.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/metrics.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: 'frigate'\n    metrics_path: '/api/metrics'\n    static_configs:\n      - targets: ['frigate:5000']\n    scrape_interval: 15s\n```\n\n----------------------------------------\n\nTITLE: UDP Camera Configuration\nDESCRIPTION: Configuration for cameras that only support UDP connections for RTSP.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  input_args: preset-rtsp-udp\n```\n\n----------------------------------------\n\nTITLE: Creating Frigate Directory Structure\nDESCRIPTION: This command creates the necessary directory structure for a Frigate installation, including storage and config directories, and creates an empty docker-compose.yml file.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmkdir storage config && touch docker-compose.yml\n```\n\n----------------------------------------\n\nTITLE: Generating JWT Secret Token\nDESCRIPTION: Shell command to generate a secure random JWT token using Python secrets library.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/authentication.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -c 'import secrets; print(secrets.token_hex(64))'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting with Trusted Proxies\nDESCRIPTION: YAML configuration for login rate limiting with trusted proxy settings for Docker Compose environments.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/authentication.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  failed_login_rate_limit: \"1/second;5/minute;20/hour\"\n  trusted_proxies:\n    - 172.18.0.0/16 # <---- this is the subnet for the internal Docker Compose network\n```\n\n----------------------------------------\n\nTITLE: Review Items Message Format\nDESCRIPTION: JSON structure for review items that includes detection and alert information, with object types, zones, and associated metadata.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/mqtt.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"update\",\n  \"before\": {\n    \"id\": \"1718987129.308396-fqk5ka\",\n    \"camera\": \"front_cam\",\n    \"start_time\": 1718987129.308396,\n    \"end_time\": null,\n    \"severity\": \"detection\",\n    \"thumb_path\": \"/media/frigate/clips/review/thumb-front_cam-1718987129.308396-fqk5ka.webp\",\n    \"data\": {\n      \"detections\": [\n        \"1718987128.947436-g92ztx\",\n        \"1718987148.879516-d7oq7r\",\n        \"1718987126.934663-q5ywpt\"\n      ],\n      \"objects\": [\"person\", \"car\"],\n      \"sub_labels\": [],\n      \"zones\": [],\n      \"audio\": []\n    }\n  },\n  \"after\": {\n    \"id\": \"1718987129.308396-fqk5ka\",\n    \"camera\": \"front_cam\",\n    \"start_time\": 1718987129.308396,\n    \"end_time\": null,\n    \"severity\": \"alert\",\n    \"thumb_path\": \"/media/frigate/clips/review/thumb-front_cam-1718987129.308396-fqk5ka.webp\",\n    \"data\": {\n      \"detections\": [\n        \"1718987128.947436-g92ztx\",\n        \"1718987148.879516-d7oq7r\",\n        \"1718987126.934663-q5ywpt\"\n      ],\n      \"objects\": [\"person\", \"car\"],\n      \"sub_labels\": [\"Bob\"],\n      \"zones\": [\"front_yard\"],\n      \"audio\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Frigate Object Detection Notification in Home Assistant\nDESCRIPTION: YAML configuration for basic notification automation that triggers on detected objects and updates existing notifications with improved images. Uses the frigate/events MQTT topic to monitor object detections.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/ha_notifications.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nautomation:\n  - alias: Notify of tracked object\n    trigger:\n      platform: mqtt\n      topic: frigate/events\n    action:\n      - service: notify.mobile_app_pixel_3\n        data:\n          message: 'A {{trigger.payload_json[\"after\"][\"label\"]}} was detected.'\n          data:\n            image: 'https://your.public.hass.address.com/api/frigate/notifications/{{trigger.payload_json[\"after\"][\"id\"]}}/thumbnail.jpg?format=android'\n            tag: '{{trigger.payload_json[\"after\"][\"id\"]}}'\n            when: '{{trigger.payload_json[\"after\"][\"start_time\"]|int}}'\n```\n\n----------------------------------------\n\nTITLE: Configuring SSDLite MobileNet v2 with OpenVINO\nDESCRIPTION: Configuration for using the default SSDLite MobileNet v2 model with OpenVINO detector. The model is pre-loaded in the container and uses FP16 precision.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  ov:\n    type: openvino\n    device: GPU\n\nmodel:\n  width: 300\n  height: 300\n  input_tensor: nhwc\n  input_pixel_format: bgr\n  path: /openvino-model/ssdlite_mobilenet_v2.xml\n  labelmap_path: /openvino-model/coco_91cl_bkgr.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Semantic Search in YAML\nDESCRIPTION: Sets up semantic search functionality including enabling/disabling the feature, reindexing options, and model selection. These settings control Frigate's ability to perform semantic searches on detected objects and events.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nsemantic_search:\n  enabled: False\n  reindex: False\n  model: \"jinav1\"\n  model_size: \"small\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Settings in YAML for Frigate\nDESCRIPTION: This snippet configures telemetry settings for Frigate, including network interface monitoring, system stats for GPU and network bandwidth, and version checking. It allows fine-tuning of system monitoring capabilities.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry:\n  network_interfaces:\n    - eth\n    - enp\n    - eno\n    - ens\n    - wl\n    - lo\n  stats:\n    amd_gpu_stats: True\n    intel_gpu_stats: True\n    sriov: False\n    network_bandwidth: False\n  version_check: True\n```\n\n----------------------------------------\n\nTITLE: Multiple Motion Masks Configuration in YAML\nDESCRIPTION: Example showing how to configure multiple motion masks as a list in Frigate's configuration file.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/masks.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmotion:\n  mask:\n    - 0.239,1.246,0.175,0.901,0.165,0.805,0.195,0.802\n    - 0.000,0.427,0.002,0.000,0.999,0.000,0.999,0.781,0.885,0.456\n```\n\n----------------------------------------\n\nTITLE: iOS-Specific Frigate Notification with Live Camera Preview\nDESCRIPTION: Enhanced YAML configuration for iOS devices that includes live camera preview functionality. Triggers on frigate/reviews MQTT topic and includes camera entity ID for live preview support.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/ha_notifications.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nautomation:\n  - alias: Security_Frigate_Notifications\n    description: \"\"\n    trigger:\n      - platform: mqtt\n        topic: frigate/reviews\n        payload: alert\n        value_template: \"{{ value_json['after']['severity'] }}\"\n    action:\n      - service: notify.mobile_app_iphone\n        data:\n          message: 'A {{trigger.payload_json[\"after\"][\"data\"][\"objects\"] | sort | join(\", \") | title}} was detected.'\n          data:\n            image: >\n              https://your.public.hass.address.com/api/frigate/notifications/{{trigger.payload_json[\"after\"][\"data\"][\"detections\"][0]}}/thumbnail.jpg\n            tag: '{{trigger.payload_json[\"after\"][\"id\"]}}'\n            when: '{{trigger.payload_json[\"after\"][\"start_time\"]|int}}'\n            entity_id: camera.{{trigger.payload_json[\"after\"][\"camera\"] | replace(\"-\",\"_\") | lower}}\n    mode: single\n```\n\n----------------------------------------\n\nTITLE: Converting YAML Config to JSON for API Validation\nDESCRIPTION: Command that uses yq to convert a YAML configuration file to JSON and pipes it to cURL to validate against the Frigate API.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyq r -j config.yml | curl -X POST http://frigate_host:5000/api/config/save -d @-\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio Stream Roles in Frigate YAML\nDESCRIPTION: This snippet shows how to configure multiple streams for a camera and assign the 'audio' role to a specific stream. It demonstrates the YAML structure for defining stream roles, including audio detection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/audio_detectors.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  front_camera:\n    ffmpeg:\n      inputs:\n        - path: rtsp://.../main_stream\n          roles:\n            - record\n        - path: rtsp://.../sub_stream # <- this stream must have audio enabled\n          roles:\n            - audio\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Privileged Mode with Intel GPU\nDESCRIPTION: Docker run command to enable privileged mode for accessing Intel GPU stats.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  ... \\\n  --privileged \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Running Frigate with NVIDIA Runtime on Jetson using Docker CLI\nDESCRIPTION: Docker run command for deploying Frigate on a Jetson device, specifying the NVIDIA runtime and the appropriate image tag.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  ...\n  --runtime nvidia\n  ghcr.io/blakeblackshear/frigate:stable-tensorrt-jp6\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLO-NAS-S model to ONNX format for Frigate\nDESCRIPTION: This snippet exports the loaded YOLO-NAS-S model to ONNX format with specific parameters for compatibility with Frigate. It sets the output format, maximum predictions, confidence threshold, and input image shape.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/notebooks/YOLO_NAS_Pretrained_Export.ipynb#2025-04-21_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# export the model for compatibility with Frigate\n\nmodel.export(\"yolo_nas_s.onnx\",\n             output_predictions_format=DetectionOutputFormatMode.FLAT_FORMAT,\n             max_predictions_per_image=20,\n             num_pre_nms_predictions=300,\n             confidence_threshold=0.4,\n             input_image_shape=(320,320),\n            )\n```\n\n----------------------------------------\n\nTITLE: Configuring Sub Stream Restream in YAML\nDESCRIPTION: Sets up two connections to the camera: one for the sub stream and one for the restream. The record role connects to the restream. Includes configuration for both RTSP and HTTP cameras.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    name_your_rtsp_cam:\n      - rtsp://192.168.1.5:554/live0 # <- stream which supports video & aac audio. This is only supported for rtsp streams, http must use ffmpeg\n      - \"ffmpeg:name_your_rtsp_cam#audio=opus\" # <- copy of the stream which transcodes audio to opus\n    name_your_rtsp_cam_sub:\n      - rtsp://192.168.1.5:554/substream # <- stream which supports video & aac audio. This is only supported for rtsp streams, http must use ffmpeg\n      - \"ffmpeg:name_your_rtsp_cam_sub#audio=opus\" # <- copy of the stream which transcodes audio to opus\n    name_your_http_cam:\n      - http://192.168.50.155/flv?port=1935&app=bcs&stream=channel0_main.bcs&user=user&password=password # <- stream which supports video & aac audio. This is only supported for rtsp streams, http must use ffmpeg\n      - \"ffmpeg:name_your_http_cam#audio=opus\" # <- copy of the stream which transcodes audio to opus\n    name_your_http_cam_sub:\n      - http://192.168.50.155/flv?port=1935&app=bcs&stream=channel0_ext.bcs&user=user&password=password # <- stream which supports video & aac audio. This is only supported for rtsp streams, http must use ffmpeg\n      - \"ffmpeg:name_your_http_cam_sub#audio=opus\" # <- copy of the stream which transcodes audio to opus\n\ncameras:\n  name_your_rtsp_cam:\n    ffmpeg:\n      output_args:\n        record: preset-record-generic-audio-copy\n      inputs:\n        - path: rtsp://127.0.0.1:8554/name_your_rtsp_cam # <--- the name here must match the name of the camera in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n        - path: rtsp://127.0.0.1:8554/name_your_rtsp_cam_sub # <--- the name here must match the name of the camera_sub in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - audio # <- only necessary if audio detection is enabled\n            - detect\n  name_your_http_cam:\n    ffmpeg:\n      output_args:\n        record: preset-record-generic-audio-copy\n      inputs:\n        - path: rtsp://127.0.0.1:8554/name_your_http_cam # <--- the name here must match the name of the camera in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - record\n        - path: rtsp://127.0.0.1:8554/name_your_http_cam_sub # <--- the name here must match the name of the camera_sub in restream\n          input_args: preset-rtsp-restream\n          roles:\n            - audio # <- only necessary if audio detection is enabled\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Configuring TensorRT Detector\nDESCRIPTION: Docker compose configuration for TensorRT detector showing environment variable setup for model conversion.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nfrigate:\n  environment:\n    - YOLO_MODELS=yolov7-320,yolov7x-640\n    - USE_FP16=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Speed Threshold in YAML\nDESCRIPTION: Example configuration for setting up speed thresholds in zones, requiring objects to meet minimum speed requirements.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    zones:\n      sidewalk:\n        coordinates: ...\n        distances: ...\n        inertia: 1\n        speed_threshold: 20 # unit is in kph or mph, depending on how unit_system is set\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg Stream in go2rtc YAML\nDESCRIPTION: YAML configuration for setting up an FFmpeg stream in go2rtc. This approach is useful for compatibility with more stream types, but may result in slower startup times.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - ffmpeg:rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n```\n\n----------------------------------------\n\nTITLE: Setting Base Path via Environment Variable in Docker Compose\nDESCRIPTION: Docker Compose configuration to set a custom base path for Frigate using the FRIGATE_BASE_PATH environment variable.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    image: blakeblackshear/frigate:latest\n    environment:\n      - FRIGATE_BASE_PATH=/frigate\n```\n\n----------------------------------------\n\nTITLE: Downloading exported ONNX model\nDESCRIPTION: This code uses Google Colab's files module to download the exported YOLO-NAS-S model in ONNX format. The file 'yolo_nas_s.onnx' will be downloaded to the user's local machine.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/notebooks/YOLO_NAS_Pretrained_Export.ipynb#2025-04-21_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import files\n\nfiles.download('yolo_nas_s.onnx')\n```\n\n----------------------------------------\n\nTITLE: Limiting Maximum Cameras in Birdseye View using YAML\nDESCRIPTION: Configuration showing how to limit the number of simultaneously displayed cameras in Birdseye view, useful for focusing on most recently active cameras.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbirdseye:\n  enabled: True\n  layout:\n    max_cameras: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Time-lapse Export Settings in Frigate YAML\nDESCRIPTION: Configuration for custom time-lapse export settings, changing the speed to 60x with 25 FPS to fit one hour of recording into one minute of time-lapse.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  export:\n    timelapse_args: \"-vf setpts=PTS/60 -r 25\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Video-Only Streams in go2rtc\nDESCRIPTION: YAML configuration for cameras without audio capabilities, forcing video-only streaming.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/live.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    no_audio_camera:\n      - ffmpeg:rtsp://192.168.1.5:554/live0#video=copy\n```\n\n----------------------------------------\n\nTITLE: Configuring Birdseye Camera Scaling in YAML\nDESCRIPTION: Example showing how to adjust the scaling factor for camera display in Birdseye view, affecting how cameras are sized and arranged.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbirdseye:\n  enabled: True\n  layout:\n    scaling_factor: 3.0\n```\n\n----------------------------------------\n\nTITLE: Docker Compose WebRTC Port Configuration\nDESCRIPTION: Docker Compose configuration example showing how to expose WebRTC ports when running Frigate in a container.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/live.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    ports:\n      - \"8555:8555/tcp\" # WebRTC over tcp\n      - \"8555:8555/udp\" # WebRTC over udp\n```\n\n----------------------------------------\n\nTITLE: Enabling Recording Sync with Disk in Frigate YAML\nDESCRIPTION: Configuration to enable synchronization between recorded files on disk and Frigate's database entries, useful when files may have been deleted externally.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  sync_recordings: True\n```\n\n----------------------------------------\n\nTITLE: Customizing Frigate Database Location\nDESCRIPTION: Configuration to specify a custom location for the Frigate database, which may be necessary when using network storage for the media folder.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndatabase:\n  path: /path/to/frigate.db\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Rockchip Hardware Access\nDESCRIPTION: Docker run command options for accessing Rockchip hardware devices with necessary security and device mappings.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n--security-opt systempaths=unconfined \\\n--security-opt apparmor=unconfined \\\n--device /dev/dri \\\n--device /dev/dma_heap \\\n--device /dev/rga \\\n--device /dev/mpp_service \\\n--volume /sys/:/sys/:ro\n```\n\n----------------------------------------\n\nTITLE: Configuring Birdseye Resolution and Dimensions in YAML\nDESCRIPTION: Example showing how to set custom width and height dimensions for the Birdseye view to control resolution and aspect ratio.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbirdseye:\n  enabled: True\n  width: 1280\n  height: 720\n```\n\n----------------------------------------\n\nTITLE: Rockchip Platform Support List\nDESCRIPTION: List of supported Rockchip platforms for hardware object detection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/hardware.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- RK3562\n- RK3566\n- RK3568\n- RK3576\n- RK3588\n```\n\n----------------------------------------\n\nTITLE: Configuring Rockchip H265 Decoder in YAML\nDESCRIPTION: YAML configuration for setting up the Rockchip H265 (HEVC) decoder in Frigate. It uses the 'preset-rk-h265' argument for hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  hwaccel_args: preset-rk-h265\n```\n\n----------------------------------------\n\nTITLE: Configuring Birdseye Restream in YAML\nDESCRIPTION: Enables 24/7 birdseye RTSP restream, which may increase CPU usage.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbirdseye:\n  restream: True\n```\n\n----------------------------------------\n\nTITLE: Traefik Reverse Proxy Configuration for Frigate\nDESCRIPTION: Docker Compose labels for configuring Traefik as a reverse proxy for Frigate.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    container_name: frigate\n    image: ghcr.io/blakeblackshear/frigate:stable\n    ...\n    ...\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.http.services.frigate.loadbalancer.server.port=8971\"\n      - \"traefik.http.routers.frigate.rule=Host(`traefik.example.com`)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Provider in Frigate YAML\nDESCRIPTION: YAML configuration for using Ollama as the Generative AI provider in Frigate, specifying the base URL and model.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: ollama\n  base_url: http://localhost:11434\n  model: llava:7b\n```\n\n----------------------------------------\n\nTITLE: Configuring Restreaming with go2rtc in Frigate\nDESCRIPTION: YAML configuration for setting up restreaming capabilities in Frigate using go2rtc. The integration uses go2rtc v1.9.9 and requires the default API port 1984.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: Restream configuration\n# Uses https://github.com/AlexxIT/go2rtc (v1.9.9)\n# NOTE: The default go2rtc API port (1984) must be used,\n#       changing this port for the integrated go2rtc instance is not supported.\ngo2rtc:\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Compose Configuration for Frigate\nDESCRIPTION: This is a minimal docker-compose.yml configuration for running Frigate. It sets up the container with necessary volumes for configuration and storage, as well as a tmpfs volume to reduce disk wear.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    container_name: frigate\n    restart: unless-stopped\n    stop_grace_period: 30s\n    image: ghcr.io/blakeblackshear/frigate:stable\n    volumes:\n      - ./config:/config\n      - ./storage:/media/frigate\n      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear\n        target: /tmp/cache\n        tmpfs:\n          size: 1000000000\n    ports:\n      - \"8971:8971\"\n      - \"8554:8554\" # RTSP feeds\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command with CAP_PERFMON for Intel GPU\nDESCRIPTION: Docker run command to add the CAP_PERFMON capability for accessing Intel GPU stats with minimal permissions.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  ... \\\n  --cap-add=CAP_PERFMON \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Detection Thresholds\nDESCRIPTION: Example configuration for object detection filters showing threshold and minimum score settings for various object types when using Frigate+ models.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/plus/first_model.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nobjects:\n  filters:\n    dog:\n      min_score: .7\n      threshold: .9\n    cat:\n      min_score: .65\n      threshold: .8\n    face:\n      min_score: .7\n    package:\n      min_score: .65\n      threshold: .9\n    license_plate:\n      min_score: .6\n    amazon:\n      min_score: .75\n    ups:\n      min_score: .75\n    fedex:\n      min_score: .75\n    person:\n      min_score: .65\n      threshold: .85\n    car:\n      min_score: .65\n      threshold: .85\n```\n\n----------------------------------------\n\nTITLE: Configuring GenAI Send Triggers in Frigate YAML\nDESCRIPTION: YAML configuration for setting up GenAI send triggers in Frigate, including options for tracked object end and significant updates.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  send_triggers:\n    tracked_object_end: true # default\n    after_significant_updates: 3 # how many updates to a tracked object before we should send an image\n```\n\n----------------------------------------\n\nTITLE: Mounting Custom Nginx Configuration in Docker Compose\nDESCRIPTION: Docker Compose configuration for binding a custom nginx.conf file into the Frigate container to modify network configuration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    container_name: frigate\n    ...\n    volumes:\n      ...\n      - /path/to/your/nginx.conf:/usr/local/nginx/conf/nginx.conf\n```\n\n----------------------------------------\n\nTITLE: Setting Camera Order in Birdseye View using YAML\nDESCRIPTION: Configuration example demonstrating how to specify the display order of cameras in the Birdseye view by setting order values at the camera level.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/birdseye.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# Include all cameras by default in Birdseye view\nbirdseye:\n  enabled: True\n  mode: continuous\n\ncameras:\n  front:\n    birdseye:\n      order: 1\n  back:\n    birdseye:\n      order: 2\n```\n\n----------------------------------------\n\nTITLE: Verifying NVIDIA GPU Decoding with nvidia-smi\nDESCRIPTION: Example output of the nvidia-smi command showing active ffmpeg processes using GPU resources, indicating successful hardware decoding setup.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n+-----------------------------------------------------------------------------+\n| NVIDIA-SMI 455.38       Driver Version: 455.38       CUDA Version: 11.1     |\n|-------------------------------+----------------------+----------------------|\n| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |\n| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |\n|                               |                      |               MIG M. |\n|===============================+======================+======================|\n|   0  GeForce GTX 166...  Off  | 00000000:03:00.0 Off |                  N/A |\n| 38%   41C    P2    36W / 125W |   2082MiB /  5942MiB |      5%      Default |\n|                               |                      |                  N/A |\n+-------------------------------+----------------------+----------------------+\n\n+-----------------------------------------------------------------------------+\n| Processes:                                                                  |\n|  GPU   GI   CI        PID   Type   Process name                  GPU Memory |\n|        ID   ID                                                   Usage      |\n|=============================================================================|\n|    0   N/A  N/A     12737      C   ffmpeg                            249MiB |\n|    0   N/A  N/A     12751      C   ffmpeg                            249MiB |\n|    0   N/A  N/A     12772      C   ffmpeg                            249MiB |\n|    0   N/A  N/A     12775      C   ffmpeg                            249MiB |\n|    0   N/A  N/A     12800      C   ffmpeg                            249MiB |\n|    0   N/A  N/A     12811      C   ffmpeg                            417MiB |\n|    0   N/A  N/A     12827      C   ffmpeg                            417MiB |\n+-----------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Jina AI CLIP V2 in Frigate YAML\nDESCRIPTION: This YAML configuration shows how to enable the Jina AI CLIP V2 model for Semantic Search in Frigate. It specifies the model version and size, with V2 offering multilingual support but requiring more resources.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/semantic_search.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsemantic_search:\n  enabled: True\n  model: \"jinav2\"\n  model_size: large\n```\n\n----------------------------------------\n\nTITLE: Configuring WebRTC Candidates\nDESCRIPTION: YAML configuration for setting up WebRTC candidates in go2rtc for internal/local access.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/live.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    test_cam: ...\n  webrtc:\n    candidates:\n      - 192.168.1.10:8555\n      - stun:8555\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache2 Reverse Proxy for Frigate\nDESCRIPTION: Apache2 configuration for setting up a reverse proxy to Frigate, including WebSocket support and SSL redirection.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<VirtualHost *:443>\n    ServerName cctv.mydomain.co.uk\n\n    ProxyPreserveHost On\n    ProxyPass \"/\"  \"http://frigatepi.local:8971/\"\n    ProxyPassReverse \"/\"  \"http://frigatepi.local:8971/\"\n\n    ProxyPass /ws ws://frigatepi.local:8971/ws\n    ProxyPassReverse /ws ws://frigatepi.local:8971/ws\n\n    ProxyPass /live/ ws://frigatepi.local:8971/live/\n    ProxyPassReverse /live/ ws://frigatepi.local:8971/live/\n\n    RewriteEngine on\n    RewriteCond %{HTTP:Upgrade} =websocket [NC]\n    RewriteRule /(.*)  ws://frigatepi.local:8971/$1 [P,L]\n    RewriteCond %{HTTP:Upgrade} !=websocket [NC]\n    RewriteRule /(.*)  http://frigatepi.local:8971/$1 [P,L]\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Configuring AAC Audio Re-encoding in go2rtc YAML\nDESCRIPTION: YAML configuration for re-encoding audio to AAC format on demand in go2rtc. This is useful when the camera's audio stream codec is not AAC.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n      - \"ffmpeg:back#audio=aac\"\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS in Frigate YAML Configuration\nDESCRIPTION: YAML configuration snippet to disable TLS in Frigate when using a reverse proxy that terminates TLS.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Admin Password Reset in YAML\nDESCRIPTION: YAML configuration to enable admin password reset functionality in Frigate on next startup.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/authentication.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  reset_admin_password: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Passwordless sudo Access for User\nDESCRIPTION: This command creates a sudo configuration file that allows a specific user to run sudo commands without entering a password. Replace 'blake' with your actual username.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho 'blake    ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/user\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Settings in YAML for Frigate\nDESCRIPTION: This snippet defines UI settings for Frigate, including timezone, time format, date and time styles, and unit system. It allows customization of how time and dates are displayed in the Frigate interface.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nui:\n  # timezone: America/Denver\n  time_format: browser\n  date_style: short\n  time_style: medium\n  strftime_fmt: \"%Y/%m/%d %H:%M\"\n  unit_system: metric\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose Volumes for Frigate\nDESCRIPTION: YAML configuration for setting up Docker Compose volumes for Frigate, including local storage and tmpfs cache.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    volumes:\n      - /path/to/your/config:/config\n      - /path/to/your/storage:/media/frigate\n      - type: tmpfs # Optional: 1GB of memory, reduces SSD/SD Card wear\n        target: /tmp/cache\n        tmpfs:\n          size: 1000000000\n    ...\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging for Frigate Recording Maintainer\nDESCRIPTION: This YAML configuration enables debug logging for the Frigate recording maintainer, which helps in troubleshooting recording segment issues by showing the time taken to copy segments from RAM cache to disk.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/recordings.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nlogger:\n  logs:\n    frigate.record.maintainer: debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshots for Frigate+ Image Submission in YAML\nDESCRIPTION: YAML configuration snippet to enable snapshots and clean copy snapshots for cameras to allow image submission to Frigate+. Both 'enabled' and 'clean_copy' must be set to true.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/plus/faq.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsnapshots:\n  enabled: true\n  clean_copy: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Stationary Object Detection in Frigate (YAML)\nDESCRIPTION: This YAML configuration snippet shows the default settings for stationary object detection in Frigate. It defines the interval for running detection on stationary objects and the threshold for considering an object stationary.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/stationary_objects.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndetect:\n  stationary:\n    interval: 50\n    threshold: 50\n```\n\n----------------------------------------\n\nTITLE: Disabling LPR for Specific Cameras in Frigate YAML Configuration\nDESCRIPTION: This YAML snippet shows how to disable LPR for specific cameras in Frigate, allowing detection of cars without running LPR on them to conserve resources.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  side_yard:\n    lpr:\n      enabled: False\n    ...\n```\n\n----------------------------------------\n\nTITLE: Excluding Camera from Detections in Frigate\nDESCRIPTION: YAML configuration example showing how to exclude a specific camera from generating detection events by providing an empty labels list.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/review.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  gatecamera:\n    review:\n      detections:\n        labels: []\n```\n\n----------------------------------------\n\nTITLE: Checking Rockchip Platform Compatibility\nDESCRIPTION: Console commands to verify Rockchip platform compatibility with Frigate, including kernel version and driver checks.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ uname -r\n5.10.xxx-rockchip # or 6.1.xxx; the -rockchip suffix is important\n$ ls /dev/dri\nby-path  card0  card1  renderD128  renderD129 # should list renderD128 (VPU) and renderD129 (NPU)\n$ sudo cat /sys/kernel/debug/rknpu/version\nRKNPU driver: v0.9.2 # or later version\n```\n\n----------------------------------------\n\nTITLE: Configuring Go2RTC Logging in YAML\nDESCRIPTION: Configuration for Go2RTC's logging system with custom trace levels for specific modules.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    # ...\n  log:\n    exec: trace\n```\n\n----------------------------------------\n\nTITLE: Mounting TLS Certificates in Docker Compose (YAML)\nDESCRIPTION: YAML configuration for mounting TLS certificates in a Docker Compose file. This shows how to bind mount a certificate folder to the expected location in the Frigate container.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/tls.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfrigate:\n  ...\n  volumes:\n    - /path/to/your/certificate_folder:/etc/letsencrypt/live/frigate:ro\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML for Frigate Testing\nDESCRIPTION: Example YAML configuration for testing Frigate with a looped video input. This configuration sets up MQTT and a test camera using a local video file.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmqtt:\n  host: mqtt\n\ncameras:\n  test:\n    ffmpeg:\n      inputs:\n        - path: /media/frigate/car-stopping.mp4\n          input_args: -re -stream_loop -1 -fflags +genpts\n          roles:\n            - detect\n```\n\n----------------------------------------\n\nTITLE: Detecting Video Devices for Hardware Acceleration on Raspberry Pi\nDESCRIPTION: Bash script to identify video devices supporting H264 encoding on Raspberry Pi.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfor d in /dev/video*; do\n  echo -e \"---\\n$d\"\n  v4l2-ctl --list-formats-ext -d $d\ndone\n```\n\n----------------------------------------\n\nTITLE: Running Frigate Docker Container with Persistent Logs (Bash)\nDESCRIPTION: This Docker run command shows how to set up a Frigate container with various configurations, including persistent log storage. It mounts a local directory to '/dev/shm/logs' in the container for log persistence and direct access from the host.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/faqs.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n  --name frigate \\\n  --restart=unless-stopped \\\n  --mount type=tmpfs,target=/tmp/cache,tmpfs-size=1000000000 \\\n  --device /dev/bus/usb:/dev/bus/usb \\\n  --device /dev/dri/renderD128 \\\n  --shm-size=64m \\\n  -v /path/to/your/storage:/media/frigate \\\n  -v /path/to/your/config:/config \\\n  -v /etc/localtime:/etc/localtime:ro \\\n  -v /path/to/local/log/dir:/dev/shm/logs \\\n  -e FRIGATE_RTSP_PASSWORD='password' \\\n  -p 5000:5000 \\\n  -p 8554:8554 \\\n  -p 8555:8555/tcp \\\n  -p 8555:8555/udp \\\n  ghcr.io/blakeblackshear/frigate:stable\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Zone Requirements in YAML\nDESCRIPTION: Configuration example showing how to set up different zone requirements for alerts and detections, allowing for more granular control over object tracking in different areas.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    review:\n      alerts:\n        required_zones:\n          - inner_yard\n      detections:\n        required_zones:\n          - edge_yard\n    zones:\n      edge_yard:\n        coordinates: ...\n      inner_yard:\n        coordinates: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Detection Labels in Frigate\nDESCRIPTION: YAML configuration for filtering which labels should be included in detections that don't qualify as alerts.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/review.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# can be overridden at the camera level\nreview:\n  detections:\n    labels:\n      - bark\n      - dog\n```\n\n----------------------------------------\n\nTITLE: Blue Iris RTSP Camera Configuration\nDESCRIPTION: FFmpeg input arguments for Blue Iris RTSP cameras without nobuffer flag.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  input_args: preset-rtsp-blue-iris\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg Stream with AAC Audio in go2rtc YAML\nDESCRIPTION: YAML configuration for setting up an FFmpeg stream with AAC audio re-encoding in go2rtc. This approach copies video and original audio, while also adding an AAC audio stream.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - \"ffmpeg:rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2#video=copy#audio=copy#audio=aac#hardware\"\n```\n\n----------------------------------------\n\nTITLE: Installing SuperGradients library from GitHub\nDESCRIPTION: This snippet installs the SuperGradients library directly from its GitHub repository using pip. The -q flag is used for quiet installation.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/notebooks/YOLO_NAS_Pretrained_Export.ipynb#2025-04-21_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n! pip install -q git+https://github.com/Deci-AI/super-gradients.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio in Recordings for Frigate (YAML)\nDESCRIPTION: This snippet shows how to enable audio in Frigate recordings by setting an FFmpeg preset that supports audio. It uses the 'preset-record-generic-audio-aac' preset in the ffmpeg output arguments.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/troubleshooting/faqs.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  output_args:\n    record: preset-record-generic-audio-aac\n```\n\n----------------------------------------\n\nTITLE: Handling Complex Passwords in go2rtc Configuration\nDESCRIPTION: Demonstrates how to URL-encode complex passwords in the go2rtc configuration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    my_camera: rtsp://username:$%40foo%25@192.168.1.100\n```\n\n----------------------------------------\n\nTITLE: Tracked Object Update Message Format\nDESCRIPTION: JSON structure for updates to tracked object metadata, specifically for GenAI-generated descriptions of tracked objects.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/mqtt.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"description\",\n  \"id\": \"1607123955.475377-mxklsc\",\n  \"description\": \"The car is a red sedan moving away from the camera.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Frigate NVR\nDESCRIPTION: A comprehensive list of Python package dependencies with pinned version requirements for the Frigate NVR (Network Video Recorder) project. The dependencies are organized into functional categories including web frameworks, general utilities, image manipulation, AI inference engines, and notification systems, with platform-specific dependencies for different CPU architectures.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/main/requirements-wheels.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\naiofiles == 24.1.*\nclick == 8.1.*\n# FastAPI\naiohttp == 3.11.3\nstarlette == 0.41.2\nstarlette-context == 0.3.6\nfastapi == 0.115.*\nuvicorn == 0.30.*\nslowapi == 0.1.*\njoserfc == 1.0.*\npathvalidate == 3.2.*\nmarkupsafe == 3.0.*\npython-multipart == 0.0.12\n# General\nmypy == 1.6.1\nonvif-zeep-async == 3.1.*\npaho-mqtt == 2.1.*\npandas == 2.2.*\npeewee == 3.17.*\npeewee_migrate == 1.13.*\npsutil == 6.1.*\npydantic == 2.10.*\ngit+https://github.com/fbcotter/py3nvml#egg=py3nvml\npytz == 2025.*\npyzmq == 26.2.*\nruamel.yaml == 0.18.*\ntzlocal == 5.2\nrequests == 2.32.*\ntypes-requests == 2.32.*\nnorfair == 2.2.*\nsetproctitle == 1.3.*\nws4py == 0.5.*\nunidecode == 1.3.*\n# Image Manipulation\nnumpy == 1.26.*\nopencv-python-headless == 4.11.0.*\nopencv-contrib-python == 4.11.0.*\nscipy == 1.14.*\n# OpenVino & ONNX\nopenvino == 2024.4.*\nonnxruntime-openvino == 1.20.* ; platform_machine == 'x86_64'\nonnxruntime == 1.20.* ; platform_machine == 'aarch64'\n# Embeddings\ntransformers == 4.45.*\n# Generative AI\ngoogle-generativeai == 0.8.*\nollama == 0.3.*\nopenai == 1.65.*\n# push notifications\npy-vapid == 1.9.*\npywebpush == 2.0.*\n# alpr\npyclipper == 1.3.*\nshapely == 2.0.*\nLevenshtein==0.26.*\n# HailoRT Wheels\nappdirs==1.4.*\nargcomplete==2.0.*\ncontextlib2==0.6.*\ndistlib==0.3.*\nfilelock==3.8.*\nfuture==0.18.*\nimportlib-metadata==5.1.*\nimportlib-resources==5.1.*\nnetaddr==0.8.*\nnetifaces==0.10.*\nverboselogs==1.7.*\nvirtualenv==20.17.*\nprometheus-client == 0.21.*\n# TFLite\ntflite_runtime @ https://github.com/frigate-nvr/TFlite-builds/releases/download/v2.17.1/tflite_runtime-2.17.1-cp311-cp311-linux_x86_64.whl; platform_machine == 'x86_64'\ntflite_runtime @ https://github.com/feranick/TFlite-builds/releases/download/v2.17.1/tflite_runtime-2.17.1-cp311-cp311-linux_aarch64.whl; platform_machine == 'aarch64'\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy Header Mapping\nDESCRIPTION: YAML configuration for mapping proxy authentication headers to Frigate's internal user and role system.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/authentication.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  ...\n  header_map:\n    user: x-forwarded-user\n    role: x-forwarded-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Provider in Frigate YAML\nDESCRIPTION: YAML configuration for using Azure OpenAI as the Generative AI provider in Frigate, including the base URL and API key.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngenai:\n  enabled: True\n  provider: azure_openai\n  base_url: https://example-endpoint.openai.azure.com/openai/deployments/gpt-4o/chat/completions?api-version=2023-03-15-preview\n  api_key: \"{FRIGATE_OPENAI_API_KEY}\"\n```\n\n----------------------------------------\n\nTITLE: Testing FFMPEG Hardware Acceleration for QSV\nDESCRIPTION: Shell command to test FFMPEG hardware acceleration using Intel Quick Sync Video (QSV).\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -c:v h264_qsv -re -stream_loop -1 -i https://streams.videolan.org/ffmpeg/incoming/720p60.mp4 -f rawvideo -pix_fmt yuv420p pipe: > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv9 to ONNX Format\nDESCRIPTION: This script clones the YOLOv9 repository, sets up a virtual environment, installs dependencies, downloads YOLOv9-t weights, modifies the export script, and exports the model to ONNX format with image size 320px and simplification enabled.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/WongKinYiu/yolov9\ncd yolov9\n\n# setup the virtual environment so installation doesn't affect main system\npython3 -m venv ./\nbin/pip install -r requirements.txt\nbin/pip install onnx onnxruntime onnx-simplifier>=0.4.1\n\n# download the weights\nwget -O yolov9-t.pt \"https://github.com/WongKinYiu/yolov9/releases/download/v0.1/yolov9-t-converted.pt\" # download the weights\n\n# prepare and run export script\nsed -i \"s/ckpt = torch.load(attempt_download(w), map_location='cpu')/ckpt = torch.load(attempt_download(w), map_location='cpu', weights_only=False)/g\" ./models/experimental.py\npython3 export.py --weights ./yolov9-t.pt --imgsz 320 --simplify --include onnx\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Unattended Upgrades on Debian\nDESCRIPTION: This set of commands installs and configures unattended-upgrades package, which automatically applies security updates to the Debian system without manual intervention.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y unattended-upgrades\necho unattended-upgrades unattended-upgrades/enable_auto_updates boolean true | sudo debconf-set-selections\nsudo dpkg-reconfigure -f noninteractive unattended-upgrades\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Security Options for Rockchip Hardware\nDESCRIPTION: Docker configuration settings required for accessing Rockchip hardware devices. Includes security options and device mappings.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/frigate/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsecurity_opt:\n  - apparmor=unconfined\n  - systempaths=unconfined\ndevices:\n  - /dev/dri\n  - /dev/dma_heap\n  - /dev/rga\n  - /dev/mpp_service\nvolumes:\n  - /sys/:/sys/:ro\n```\n\n----------------------------------------\n\nTITLE: Testing FFMPEG Hardware Acceleration for NVIDIA GPU\nDESCRIPTION: Shell command to test FFMPEG hardware acceleration on NVIDIA GPUs using CUDA.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -c:v h264_cuvid -re -stream_loop -1 -i https://streams.videolan.org/ffmpeg/incoming/720p60.mp4 -f rawvideo -pix_fmt yuv420p pipe: > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Updating Debian System Packages\nDESCRIPTION: This command updates the package list and upgrades all installed packages on a Debian system, ensuring the system is up-to-date before installing additional software.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Configuring Motion-Based Recording Retention in Frigate YAML\nDESCRIPTION: Configuration to reduce storage by only retaining video where motion was detected for 3 days, with extended retention for motion during alerts and detections.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/record.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrecord:\n  enabled: True\n  retain:\n    days: 3\n    mode: motion\n  alerts:\n    retain:\n      days: 30\n      mode: motion\n  detections:\n    retain:\n      days: 30\n      mode: motion\n```\n\n----------------------------------------\n\nTITLE: Advanced Restream Configuration with Custom FFmpeg Command\nDESCRIPTION: Uses the exec source in go2rtc for a custom FFmpeg command to stream a looped video file.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    stream1: exec:ffmpeg -hide_banner -re -stream_loop -1 -i /media/BigBuckBunny.mp4 -c copy -rtsp_transport tcp -f rtsp {{output}}\n```\n\n----------------------------------------\n\nTITLE: Overriding AMD GPU Chipset Version in Docker for Frigate\nDESCRIPTION: Docker run command to override the AMD GPU chipset version using the HSA_OVERRIDE_GFX_VERSION environment variable.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -e HSA_OVERRIDE_GFX_VERSION=9.0.0 \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies for Frigate Project\nDESCRIPTION: This snippet lists the required Python packages for the Frigate project. It includes NumPy for numerical computing, TensorFlow for machine learning, and OpenVINO for optimized neural network inference.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/main/requirements-ov.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nnumpy\ntensorflow\nopenvino-dev>=2024.0.0\n```\n\n----------------------------------------\n\nTITLE: Exporting YOLOv3, YOLOv4, and YOLOv7 to ONNX Format\nDESCRIPTION: This script clones the tensorrt_demos repository, downloads YOLO model weights, and exports a YOLOv7-320 model to ONNX format. The process works for YOLOv3, YOLOv4, and YOLOv7 models.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/NateMeyer/tensorrt_demos\ncd tensorrt_demos/yolo\n./download_yolo.sh\npython3 yolo_to_onnx.py -m yolov7-320\n```\n\n----------------------------------------\n\nTITLE: CI/CD Workflow Configuration for Board Builds\nDESCRIPTION: GitHub Actions workflow configuration for building and pushing board-specific Docker images during Frigate releases.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing-boards.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Build and push board build\n  uses: docker/bake-action@v3\n  with:\n    push: true\n    targets: board\n    files: docker/board/board.hcl\n    set: |\n      board.tags=ghcr.io/${{ steps.lowercaseRepo.outputs.lowercase }}:${{ github.ref_name }}-${{ env.SHORT_SHA }}-board\n      *.cache-from=type=gha\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom ONNX Runtime ROCm Wheel for Frigate\nDESCRIPTION: This line specifies a custom wheel package for ONNX Runtime with ROCm support. It points to a specific version (1.20.1) compiled for Python 3.11 on Linux x86_64, hosted on GitHub.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/rocm/requirements-wheels-rocm.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nonnxruntime-rocm @ https://github.com/NickM-27/frigate-onnxruntime-rocm/releases/download/v6.3.3/onnxruntime_rocm-1.20.1-cp311-cp311-linux_x86_64.whl\n```\n\n----------------------------------------\n\nTITLE: Apache2 Basic Authentication Configuration\nDESCRIPTION: Apache2 configuration snippet for adding basic authentication to the Frigate reverse proxy.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<VirtualHost *:443>\n    <Location />\n        AuthType Basic\n        AuthName \"Restricted Files\"\n        AuthUserFile \"/var/www/passwords\"\n        Require user paul\n    </Location>\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zone Loitering Detection in YAML\nDESCRIPTION: Example showing how to configure loitering detection for zones, setting minimum time thresholds before objects are considered to be loitering.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  name_of_your_camera:\n    zones:\n      sidewalk:\n        loitering_time: 4 # unit is in seconds\n        objects:\n          - person\n```\n\n----------------------------------------\n\nTITLE: Apache2 SSL Redirection Configuration\nDESCRIPTION: Apache2 configuration snippet for redirecting unencrypted requests to the SSL port.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/reverse_proxy.md#2025-04-21_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<VirtualHost *:80>\nServerName cctv.mydomain.co.uk\nRewriteEngine on\nRewriteCond %{SERVER_NAME} =cctv.mydomain.co.uk\nRewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Frigate\nDESCRIPTION: This snippet lists the required Python packages for the Frigate project. It specifies scikit-build version 0.18.* and nvidia-pyindex without a version constraint.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/main/requirements.txt#2025-04-21_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nscikit-build == 0.18.*\nnvidia-pyindex\n```\n\n----------------------------------------\n\nTITLE: Configuring CPU Detectors in Frigate (Not Recommended)\nDESCRIPTION: YAML configuration for setting up CPU-based detectors in Frigate, including thread count and model path. This method is not recommended for general use.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  cpu1:\n    type: cpu\n    num_threads: 3\n  cpu2:\n    type: cpu\n    num_threads: 3\n\nmodel:\n  path: \"/custom_model.tflite\"\n```\n\n----------------------------------------\n\nTITLE: Modifying SuperGradients configuration files\nDESCRIPTION: These commands use sed to replace the URL 'sghub.deci.ai' with 'sg-hub-nv.s3.amazonaws.com' in two Python files within the SuperGradients package. This likely updates the source for pretrained models and checkpoints.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/notebooks/YOLO_NAS_Pretrained_Export.ipynb#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n! sed -i 's/sghub.deci.ai/sg-hub-nv.s3.amazonaws.com/' /usr/local/lib/python3.11/dist-packages/super_gradients/training/pretrained_models.py\n! sed -i 's/sghub.deci.ai/sg-hub-nv.s3.amazonaws.com/' /usr/local/lib/python3.11/dist-packages/super_gradients/training/utils/checkpoint_utils.py\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies for ARM64 Platform\nDESCRIPTION: Specifies version constraints for ONNX, Protocol Buffers, and NumPy packages when running on ARM64 architecture. These versions are specifically required for compatibility with python-tensorrt 8.2.1 in Jetpack 4.6 environment.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/tensorrt/requirements-models-arm64.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nonnx == 1.14.0; platform_machine == 'aarch64'\nprotobuf == 3.20.3; platform_machine == 'aarch64'\nnumpy == 1.23.*; platform_machine == 'aarch64'  # required by python-tensorrt 8.2.1 (Jetpack 4.6)\n```\n\n----------------------------------------\n\nTITLE: Enabling GPU Acceleration for Semantic Search in Frigate YAML\nDESCRIPTION: This configuration snippet demonstrates how to enable GPU acceleration for Semantic Search in Frigate by selecting the large model size. GPU usage depends on the Docker build and available hardware.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/semantic_search.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsemantic_search:\n  enabled: True\n  model_size: large\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcuts Table in Markdown\nDESCRIPTION: A markdown table defining keyboard shortcuts and their descriptions for efficient image labeling workflow in Frigate+.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/plus/improving_model.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Shortcut Key      | Description                   |\n| ----------------- | ----------------------------- |\n| `?`               | Show all keyboard shortcuts   |\n| `w`               | Add box                       |\n| `d`               | Toggle difficult              |\n| `s`               | Switch to the next label      |\n| `tab`             | Select next largest box       |\n| `del`             | Delete current box            |\n| `esc`             | Deselect/Cancel               |\n| `← ↑ → ↓`         | Move box                      |\n| `Shift + ← ↑ → ↓` | Resize box                    |\n| `scrollwheel`     | Zoom in/out                   |\n| `f`               | Hide/show all but current box |\n| `spacebar`        | Verify and save               |\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies for Frigate Frontend\nDESCRIPTION: Command to install required npm packages for the Frigate web interface. Must be executed from within the /web directory of the project.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/web/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Loading pre-trained YOLO-NAS-S model\nDESCRIPTION: This code imports necessary modules from SuperGradients and loads a pre-trained YOLO-NAS-S model with COCO weights. The model is assigned to the variable 'model' for further use.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/notebooks/YOLO_NAS_Pretrained_Export.ipynb#2025-04-21_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom super_gradients.common.object_names import Models\nfrom super_gradients.conversion import DetectionOutputFormatMode\nfrom super_gradients.training import models\n\nmodel = models.get(Models.YOLO_NAS_S, pretrained_weights=\"coco\")\n```\n\n----------------------------------------\n\nTITLE: Creating Highlight Component with MDX and React\nDESCRIPTION: Defines a React component called Highlight that applies background color styling to wrapped text. The component accepts children and color props to create highlighted text spans.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/mdx.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport const Highlight = ({children, color}) => ( <span style={{\n      backgroundColor: color,\n      borderRadius: '2px',\n      color: '#fff',\n      padding: '0.2rem',\n    }}>{children}</span> );\n```\n\n----------------------------------------\n\nTITLE: Running Frigate Frontend Development Server\nDESCRIPTION: Command to start the development server with proxy configuration. PROXY_HOST parameter specifies the connection to the Frigate backend instance, defaulting to localhost:5000 if not specified.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/web/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPROXY_HOST=<ip_address:port> npm run dev\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration with CAP_PERFMON for Intel GPU\nDESCRIPTION: Docker Compose configuration to add the CAP_PERFMON capability for accessing Intel GPU stats with minimal permissions.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/hardware_acceleration.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    ...\n    image: ghcr.io/blakeblackshear/frigate:stable\n    cap_add:\n      - CAP_PERFMON\n```\n\n----------------------------------------\n\nTITLE: Reloading Nginx Configuration in Development Container\nDESCRIPTION: Shell command to copy and reload Nginx configuration for testing without rebuilding the container in the development environment.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo cp docker/main/rootfs/usr/local/nginx/conf/* /usr/local/nginx/conf/ && sudo /usr/local/nginx/sbin/nginx -s reload\n```\n\n----------------------------------------\n\nTITLE: Specifying CUDA Python Dependency for ARM64 in Frigate\nDESCRIPTION: Defines a dependency on CUDA Python version 12.6.* specifically for ARM64 architecture. This constraint ensures compatibility with the Frigate project on ARM-based systems.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/tensorrt/requirements-arm64.txt#2025-04-21_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\ncuda-python == 12.6.*; platform_machine == 'aarch64'\n```\n\n----------------------------------------\n\nTITLE: Specifying RKNN Toolkit Dependencies for Frigate Project\nDESCRIPTION: Lists the required versions of RKNN toolkit libraries for the Frigate project. It specifies rknn-toolkit2 and rknn-toolkit-lite2, both at version 2.3.0.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docker/rockchip/requirements-wheels-rk.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrknn-toolkit2 == 2.3.0\nrknn-toolkit-lite2 == 2.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Timestamp Style in Frigate Video Feeds\nDESCRIPTION: YAML configuration for customizing the appearance and position of timestamps in Frigate video feeds. Options include position, date/time format, color, thickness, and visual effects.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/reference.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Optional: in-feed timestamp style configuration\n# NOTE: Can be overridden at the camera level\ntimestamp_style:\n  # Optional: Position of the timestamp (default: shown below)\n  #           \"tl\" (top left), \"tr\" (top right), \"bl\" (bottom left), \"br\" (bottom right)\n  position: \"tl\"\n  # Optional: Format specifier conform to the Python package \"datetime\" (default: shown below)\n  #           Additional Examples:\n  #             german: \"%d.%m.%Y %H:%M:%S\"\n  format: \"%m/%d/%Y %H:%M:%S\"\n  # Optional: Color of font\n  color:\n    # All Required when color is specified (default: shown below)\n    red: 255\n    green: 255\n    blue: 255\n  # Optional: Line thickness of font (default: shown below)\n  thickness: 2\n  # Optional: Effect of lettering (default: shown below)\n  #           None (No effect),\n  #           \"solid\" (solid background in inverse color of font)\n  #           \"shadow\" (shadow for font)\n  effect: None\n```\n\n----------------------------------------\n\nTITLE: Installing sudo Package on Debian for Frigate Setup\nDESCRIPTION: This command updates the package list and installs the sudo package on Debian, which is required for proper user permission management during Frigate setup.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\napt update && apt install -y sudo\n```\n\n----------------------------------------\n\nTITLE: Configuring Board-Specific Make Targets\nDESCRIPTION: Template Makefile configuration for adding board-specific build targets. Includes targets for local building, version-tagged builds, and pushing images to registry.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing-boards.md#2025-04-21_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nBOARDS += board\n\nlocal-rpi: version\n\tdocker buildx bake --load --file=docker/board/board.hcl --set board.tags=frigate:latest-board bake-target\n\nbuild-rpi: version\n\tdocker buildx bake --file=docker/board/board.hcl --set board.tags=$(IMAGE_REPO):${GITHUB_REF_NAME}-$(COMMIT_HASH)-board bake-target\n\npush-rpi: build-rpi\n\tdocker buildx bake --push --file=docker/board/board.hcl --set board.tags=$(IMAGE_REPO):${GITHUB_REF_NAME}-$(COMMIT_HASH)-board bake-target\n```\n\n----------------------------------------\n\nTITLE: Adding User to sudo Group in Debian\nDESCRIPTION: This command adds a user to the sudo group in Debian, allowing the user to execute commands with elevated privileges. The username 'blake' should be replaced with your actual username.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/getting_started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nusermod -aG sudo blake\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Frigate Website Development Server\nDESCRIPTION: These commands install the necessary dependencies and start the development server for the Frigate project website. Run these in the project directory to set up the local development environment.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Unifi Protect Camera Configuration\nDESCRIPTION: Stream configuration for Unifi Protect cameras using rtspx protocol with go2rtc.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    front:\n      - rtspx://192.168.1.1:7441/abcdefghijk\n```\n\n----------------------------------------\n\nTITLE: Disabling LPR for Specific Cameras in Frigate YAML Configuration\nDESCRIPTION: YAML configuration example showing how to disable License Plate Recognition for a specific camera (in this case, 'garage') while it remains enabled globally.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/license_plate_recognition.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  garage:\n    ...\n    lpr:\n      enabled: False\n```\n\n----------------------------------------\n\nTITLE: HTML Translation Status Widget\nDESCRIPTION: HTML markup for displaying the Weblate multi-language translation status widget.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/README.md#2025-04-21_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://hosted.weblate.org/engage/frigate-nvr/\">\n<img src=\"https://hosted.weblate.org/widget/frigate-nvr/multi-auto.svg\" alt=\"Translation status\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for AMD GPU Access in Frigate\nDESCRIPTION: Docker run command to enable AMD GPU access for Frigate by exposing necessary devices.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run --device=/dev/kfd --device=/dev/dri  \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate for HTTPS on Port 443 (YAML)\nDESCRIPTION: YAML configuration to map Frigate's default HTTPS port (8971) to the standard HTTPS port (443). This allows accessing Frigate without specifying a port number in the URL.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/tls.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nfrigate:\n  ...\n  ports:\n    - \"443:8971\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Mounting Certbot Certificates in Docker Compose (YAML)\nDESCRIPTION: YAML configuration for mounting Certbot certificates in a Docker Compose file. This includes mounting both the live and archive folders to handle Certbot's symlinks.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/tls.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfrigate:\n  ...\n  volumes:\n    - /etc/letsencrypt/live/frigate:/etc/letsencrypt/live/frigate:ro\n    - /etc/letsencrypt/archive/frigate:/etc/letsencrypt/archive/frigate:ro\n  ...\n```\n\n----------------------------------------\n\nTITLE: Securing RTSP Restream with Authentication in YAML\nDESCRIPTION: Sets up username and password authentication for go2rtc RTSP restream. Note that this does not apply to localhost requests.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/restream.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  rtsp:\n    username: \"admin\"\n    password: \"pass\"\n  streams: ...\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Overriding AMD GPU Chipset in Frigate\nDESCRIPTION: Docker Compose YAML configuration to override the AMD GPU chipset version using the HSA_OVERRIDE_GFX_VERSION environment variable.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n\nenvironment:\n  HSA_OVERRIDE_GFX_VERSION: \"9.0.0\"\n```\n\n----------------------------------------\n\nTITLE: HTML Translation Status Badge\nDESCRIPTION: HTML markup for displaying the Weblate translation status badge with link.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/README.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://hosted.weblate.org/engage/frigate-nvr/\">\n<img src=\"https://hosted.weblate.org/widget/frigate-nvr/language-badge.svg\" alt=\"Translation status\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Single PCIE/M.2 Coral\nDESCRIPTION: YAML configuration for setting up a single PCIE/M.2 Coral EdgeTPU detector.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/object_detectors.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndetectors:\n  coral:\n    type: edgetpu\n    device: pci\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Unit System in YAML\nDESCRIPTION: Configuration for setting the unit system used in the UI for measurements and speed calculations.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/zones.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nui:\n  # can be \"metric\" or \"imperial\", default is metric\n  unit_system: metric\n```\n\n----------------------------------------\n\nTITLE: Default Description Prompt Template for Frigate\nDESCRIPTION: The default prompt template used by Frigate to generate object descriptions. Supports variable substitution for label, sub_label, and camera names.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/genai.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nAnalyze the sequence of images containing the {label}. Focus on the likely intent or behavior of the {label} based on its actions and movement, rather than describing its appearance or the surroundings. Consider what the {label} is doing, why, and what it might do next.\n```\n\n----------------------------------------\n\nTITLE: Disabling TLS in Frigate Configuration (YAML)\nDESCRIPTION: YAML configuration snippet to disable TLS in Frigate. This is useful in many deployments where TLS is unnecessary.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/tls.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  enabled: False\n```\n\n----------------------------------------\n\nTITLE: Setting up Buildx for Multi-architecture Builds\nDESCRIPTION: Shell commands to set up Docker Buildx for multi-architecture builds, used for official Frigate releases.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker buildx stop builder && docker buildx rm builder # <---- if existing\ndocker run --privileged --rm tonistiigi/binfmt --install all\ndocker buildx create --name builder --driver docker-container --driver-opt network=host --use\ndocker buildx inspect builder --bootstrap\nmake push\n```\n\n----------------------------------------\n\nTITLE: Annke C800 Camera Configuration\nDESCRIPTION: Setup for Annke C800 H.265 camera with Apple device compatibility and audio support.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ncameras:\n  annkec800:\n    ffmpeg:\n      apple_compatibility: true\n      output_args:\n        record: preset-record-generic-audio-aac\n\n      inputs:\n        - path: rtsp://USERNAME:PASSWORD@CAMERA-IP/H264/ch1/main/av_stream\n          roles:\n            - detect\n            - record\n    detect:\n      width:\n      height:\n```\n\n----------------------------------------\n\nTITLE: Testing FFMPEG Hardware Acceleration for VAAPI\nDESCRIPTION: Shell command to test FFMPEG hardware acceleration using VAAPI (Video Acceleration API).\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -hwaccel vaapi -hwaccel_device /dev/dri/renderD128 -hwaccel_output_format yuv420p -re -stream_loop -1 -i https://streams.videolan.org/ffmpeg/incoming/720p60.mp4 -f rawvideo -pix_fmt yuv420p pipe: > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Testing FFMPEG Hardware Acceleration for NVIDIA Jetson\nDESCRIPTION: Shell command to test FFMPEG hardware acceleration on NVIDIA Jetson devices.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -c:v h264_nvmpi -re -stream_loop -1 -i https://streams.videolan.org/ffmpeg/incoming/720p60.mp4 -f rawvideo -pix_fmt yuv420p pipe: > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Testing FFMPEG Hardware Acceleration for Raspberry Pi\nDESCRIPTION: Shell command to test FFMPEG hardware acceleration on Raspberry Pi (64bit). This command should show less than 50% CPU usage in top.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nffmpeg -c:v h264_v4l2m2m -re -stream_loop -1 -i https://streams.videolan.org/ffmpeg/incoming/720p60.mp4 -f rawvideo -pix_fmt yuv420p pipe: > /dev/null\n```\n\n----------------------------------------\n\nTITLE: Validating Frigate Config via API with cURL\nDESCRIPTION: cURL command to validate and save a Frigate configuration by sending it to the configuration API endpoint, which will validate before saving.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://frigate_host:5000/api/config/save -d @config.json\n```\n\n----------------------------------------\n\nTITLE: RTMP Camera Input Configuration\nDESCRIPTION: FFmpeg input arguments configuration for RTMP camera streams.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/camera_specific.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nffmpeg:\n  input_args: preset-rtmp-generic\n```\n\n----------------------------------------\n\nTITLE: Using Tailscale to Serve Frigate with HTTPS\nDESCRIPTION: Command to make Frigate accessible via HTTPS using Tailscale by forwarding requests to the Frigate HTTP server with a custom base path.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/advanced.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ntailscale serve --https=443 --bg --set-path /frigate http://localhost:5000/frigate\n```\n\n----------------------------------------\n\nTITLE: Basic Board-Specific Dockerfile Structure\nDESCRIPTION: Required base structure for board-specific Dockerfile including environment setup, base image configuration, and file copying from main build.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/development/contributing-boards.md#2025-04-21_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\n# syntax=docker/dockerfile:1.4\n\n# https://askubuntu.com/questions/972516/debian-frontend-environment-variable\nARG DEBIAN_FRONTEND=noninteractive\n\n# All board-specific work should be done with `deps` as the base\nFROM deps AS board-deps\n\n# do stuff specific\n# to the board\n\n# set workdir\nWORKDIR /opt/frigate/\n\n# copies base files from the main frigate build\nCOPY --from=rootfs / /\n```\n\n----------------------------------------\n\nTITLE: Importing Label Definitions in JSX\nDESCRIPTION: React/JSX code that imports label definitions from a labelmap file and renders them as an unordered list, stripping numeric prefixes from labels.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/configuration/objects.md#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport labels from \"../../../labelmap.txt\";\n\n<ul>\n  {labels.split(\"\\n\").map((label) => (\n    <li>{label.replace(/^\\d+\\s+/, \"\")}</li>\n  ))}\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Frigate on a Separate Machine with Docker Compose\nDESCRIPTION: Docker Compose configuration for running Frigate on a separate machine, exposing the authenticated port.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/integrations/home-assistant.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  frigate:\n    image: ghcr.io/blakeblackshear/frigate:stable\n    ...\n    ports:\n      - \"8971:8971\"\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Video and Audio Re-encoding in go2rtc YAML\nDESCRIPTION: YAML configuration for re-encoding both video and audio streams in go2rtc. This setup converts video to H264 and audio to AAC with hardware acceleration.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/docs/docs/guides/configuring_go2rtc.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ngo2rtc:\n  streams:\n    back:\n      - rtsp://user:password@10.0.10.10:554/cam/realmonitor?channel=1&subtype=2\n      - \"ffmpeg:back#video=h264#audio=aac#hardware\"\n```\n\n----------------------------------------\n\nTITLE: HTML Center-Aligned Logo Image\nDESCRIPTION: HTML markup for center-aligning the Frigate logo image in the documentation.\nSOURCE: https://github.com/blakeblackshear/frigate/blob/dev/README.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n  <img align=\"center\" alt=\"logo\" src=\"docs/static/img/frigate.png\">\n</p>\n```"
  }
]