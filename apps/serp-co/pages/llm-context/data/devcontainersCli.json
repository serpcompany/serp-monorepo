[
  {
    "owner": "devcontainers",
    "repo": "cli",
    "content": "TITLE: Dev Container CLI Help Output\nDESCRIPTION: Shows the available commands and options for the Dev Container CLI, including commands for container management, feature handling, and command execution.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer <command>\n\nCommands:\n  devcontainer up                   Create and run dev container\n  devcontainer build [path]         Build a dev container image\n  devcontainer run-user-commands    Run user commands\n  devcontainer read-configuration   Read configuration\n  devcontainer features             Features commands\n  devcontainer templates            Templates commands\n  devcontainer exec <cmd> [args..]  Execute a command on a running dev container\n\nOptions:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n```\n\n----------------------------------------\n\nTITLE: Installing Dev Container CLI via npm\nDESCRIPTION: Command to install the Dev Container CLI globally using npm package manager.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\n```\n\n----------------------------------------\n\nTITLE: Starting a Dev Container with Sample Project\nDESCRIPTION: Example showing how to clone a Rust sample project and start a dev container using the CLI's up command.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/vscode-remote-try-rust\ndevcontainer up --workspace-folder <path-to-vscode-remote-try-rust>\n```\n\n----------------------------------------\n\nTITLE: Running Commands in Dev Container\nDESCRIPTION: Demonstrates how to execute commands inside a running dev container using the exec command.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer exec --workspace-folder <path-to-vscode-remote-try-rust> cargo run\n```\n\n----------------------------------------\n\nTITLE: Applying Debian Template with CLI\nDESCRIPTION: This snippet demonstrates how to use the CLI to apply the Debian template to a local folder. It shows the command structure, including specifying the template and its arguments.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/templates/apply.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[/tmp]$ mkdir my-project\n\n[/tmp]$ devcontainer templates apply \\\n                 -t 'ghcr.io/devcontainers/templates/debian' \\\n                 -a '{\"imageVariant\": \"buster\"}' \\\n                 -w ./my-project\n\n[0 ms] @devcontainers/cli 0.28.0. Node.js v19.3.0. darwin 21.6.0 arm64.\n{\"files\":[\"./.devcontainer/devcontainer.json\"]}\n\n[/tmp]$ tree -a my-project\n\nmy-project\n└── .devcontainer\n    └── devcontainer.json\n\n1 directory, 1 file\n\n[/tmp]$ cat my-project/.devcontainer/devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Generated devcontainer.json for Debian Template\nDESCRIPTION: This snippet shows the content of the generated devcontainer.json file after applying the Debian template. It includes configuration for the dev container, such as the base image and commented-out options for customization.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/templates/apply.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"Debian\",\n\t// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile\n\t\"image\": \"mcr.microsoft.com/devcontainers/base:buster\"\n\n\t// Features to add to the dev container. More info: https://containers.dev/features.\n\t// \"features\": {},\n\n\t// Use 'forwardPorts' to make a list of ports inside the container available locally.\n\t// \"forwardPorts\": [],\n\n\t// Configure tool-specific properties.\n\t// \"customizations\": {},\n\n\t// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.\n\t// \"remoteUser\": \"root\"\n}\n```\n\n----------------------------------------\n\nTITLE: Building Dev Container Image\nDESCRIPTION: Basic command to build a dev container image using the provided build script. Creates an image with default name 'devcontainer-cli-test-image'.\nSOURCE: https://github.com/devcontainers/cli/blob/main/example-usage/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nimage-build/build-image.sh\n```\n\n----------------------------------------\n\nTITLE: Building Custom Dev Container Image with Registry Push\nDESCRIPTION: Advanced command for building a dev container image with custom name, registry pushing, and multi-architecture support.\nSOURCE: https://github.com/devcontainers/cli/blob/main/example-usage/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nimage-build/build-image.sh ghcr.io/my-org/my-image-name-here true \"linux/amd64 linux/arm64\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Templates to Registry with CLI\nDESCRIPTION: Command for publishing Dev Container Templates to a registry. This example publishes the 'color' and 'hello' templates to the GitHub Container Registry with a specified namespace.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/templates/publish.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[/tmp]$  GITHUB_TOKEN=\"$CR_PAT\" devcontainer templates publish -r ghcr.io -n devcontainers/templates ./src\n```\n\n----------------------------------------\n\nTITLE: Applying Published Template with CLI\nDESCRIPTION: Command for applying a published Dev Container Template. This example applies the 'color' template with a parameter specifying 'red' as the favorite color.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/templates/publish.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[/tmp]$  devcontainer templates apply \\\n                 -t 'ghcr.io/devcontainers/templates/color' \\\n                 -a '{\"favorite\": \"red\"}'\n```\n\n----------------------------------------\n\nTITLE: Building Dev Container CLI from Source\nDESCRIPTION: Commands to compile the CLI from source code using yarn package manager.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nyarn\nyarn compile\n```\n\n----------------------------------------\n\nTITLE: Verifying CLI Installation from Source\nDESCRIPTION: Command to verify the CLI installation by displaying the help text.\nSOURCE: https://github.com/devcontainers/cli/blob/main/README.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode devcontainer.js --help\n```\n\n----------------------------------------\n\nTITLE: Running Feature Tests with the CLI Command\nDESCRIPTION: Example command for running tests for a specific feature using the Dev Container CLI with a specified base image.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndevcontainer features test  -f dotnet --base-image ubuntu\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Dev Container Templates\nDESCRIPTION: Example directory structure for organizing Dev Container Templates according to the Templates distribution specification. The structure shows how to organize multiple templates with their configuration files and tests.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/templates/publish.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── src\n│   ├── color\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      └── devcontainer.json\n│   ├── hello\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      ├── devcontainer.json\n│   │      └── Dockerfile\n|   ├── ...\n│   │   ├── devcontainer-template.json\n│   │   └──| .devcontainer\n│   │      └── devcontainer.json\n├── test\n│   ├── color\n│   │   └── test.sh\n│   ├── hello\n│   │   └── test.sh\n│   └──test-utils\n│      └── test-utils.sh\n...\n```\n\n----------------------------------------\n\nTITLE: Example Project Structure for Testing Dev Container Features\nDESCRIPTION: Example directory structure for a project that uses the Dev Container Features testing framework, showing the organization of source code and test files for multiple features.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── README.md\n├── src\n│   ├── dotnet\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n│   ├── oryx\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n|   ├── ...\n│   │   ├── devcontainer-feature.json\n│   │   └── install.sh\n├── test\n│   ├── _global\n│\t│\t├── scenarios.json\n│   │   └── some_test_scenario.sh\n│   ├── dotnet\n|   |   ├── duplicate.sh\n│   │   └── test.sh\n│   ├── oryx\n|   |   ├── scenarios.json\n|   |   ├── install_dotnet_and_oryx.sh\n│   |   └── test.sh\n|   ├── ...\n│   │   └── test.sh\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Test Scenarios in JSON\nDESCRIPTION: Example of a scenarios.json file that defines a test scenario for installing multiple features with specific configuration options.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"install_dotnet_and_oryx\": {\n        \"image\": \"ubuntu:focal\",\n        \"features\": {\n            \"dotnet\": {\n                \"version\": \"6\",\n                \"installUsingApt\": \"false\"\n            },\n            \"oryx\": {}\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Shell-Based Test Script\nDESCRIPTION: Example of a test script that validates the installation of features in a container. The script performs a series of checks using the test library's check command and reports the results.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\nset -e\n\n# Import test library for `check` command\nsource dev-container-features-test-lib\n\ncheck \"Oryx version\" oryx --version\ncheck \"Dotnet is not removed if it is not installed by the Oryx Feature\" dotnet --version\n\n# Install platforms with oryx build tool\ncheck \"oryx-install-dotnet-2.1\" oryx prep --skip-detection --platforms-and-versions dotnet=2.1.30\ncheck \"dotnet-2-installed-by-oryx\" ls /opt/dotnet/ | grep 2.1\n\n....\n....\n\n# Replicates Oryx's behavior for universal image\nmkdir -p /opt/oryx\necho \"vso-focal\" >> /opt/oryx/.imagetype\n\nmkdir -p /opt/dotnet/lts\ncp -R /usr/local/dotnet/current/dotnet /opt/dotnet/lts\ncp -R /usr/local/dotnet/current/LICENSE.txt /opt/dotnet/lts\ncp -R /usr/local/dotnet/current/ThirdPartyNotices.txt /opt/dotnet/lts\n\n....\n....\n\n# Report result\nreportResults\n```\n\n----------------------------------------\n\nTITLE: Running CI Build Script with Dev Container\nDESCRIPTION: Command to execute the build-app script that demonstrates using dev containers for CI build environments.\nSOURCE: https://github.com/devcontainers/cli/blob/main/example-usage/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nci-app-build-script/build-app.sh\n```\n\n----------------------------------------\n\nTITLE: Using Check Command with Arguments\nDESCRIPTION: Demonstrates the check command syntax for executing and validating commands. The command takes a label and a command with optional arguments, returning success (exit code 0) or failure based on command execution.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncheck \"python is available\" python3 --version\n```\n\n----------------------------------------\n\nTITLE: Check Command Format\nDESCRIPTION: Shows the formal syntax structure for the check command. Takes a LABEL parameter followed by a command and optional arguments.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ncheck <LABEL> <cmd> [args...]\n```\n\n----------------------------------------\n\nTITLE: Defining Advanced Scenarios with Custom Dockerfile\nDESCRIPTION: Example of a scenario configuration that uses a custom Dockerfile for building the test container, showing how to implement more complex testing scenarios.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// ...\n\t\"frowning_with_a_dockerfile\": {\n\t\t\"build\": {\n\t\t\t\"dockerfile\": \"Dockerfile\"\n\t\t},\n\t\t\"features\": {\n\t\t\t\"smile\": {\n\t\t\t\t\"shouldFrown\": true\n\t\t\t}\n\t\t}\n\t}\n// ... \n```\n\n----------------------------------------\n\nTITLE: Writing Duplicate Test Script\nDESCRIPTION: Example of a duplicate test script that validates whether a feature can be installed multiple times with different options, using environment variables to access feature settings.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\n\nset -e\n\n# Optional: Import test library\nsource dev-container-features-test-lib\n\n# The values of the randomized options will be set as environment variables.\nif [ -z \"${VERSION}\" ]; then\n\techo \"Version of dotnet to install from randomized Feature not set!\"\n\texit 1\nfi\n\nif [ -z \"${INSTALLUSINGAPT}\" ]; then\n\techo \"Boolean to install using apt from randomized Feature not set!\"\n\texit 1\nfi\n\n# The values of the default options will be set as environment variables.\nif [ -z \"${VERSION__DEFAULT}\" ]; then\n\techo \"Version of dotnet to install default Feature not set!\"\n\texit 1\nfi\n\nif [ -z \"${INSTALLUSINGAPT__DEFAULT}\" ]; then\n\techo \"oolean to install using apt from default Feature not set!\"\n\texit 1\nfi\n\ncheck \"randomized version of dotnet installed\"  bash -c \"dotnet --list-sdks | ${VERSION}\"\ncheck \"default version of dotnet installed\"  bash -c \"dotnet --list-sdks | ${VERSION__DEFAULT}\"\n\n# ...\n# ...\n\n# Report result\nreportResults\n```\n\n----------------------------------------\n\nTITLE: File Structure for Custom Dockerfile Testing\nDESCRIPTION: Example directory structure for implementing tests with custom Dockerfiles, showing how the files are organized to support scenario-based testing.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── src\n│   └── smile\n│       ├── devcontainer-feature.json\n│       └── install.sh\n└── test\n    └── smile\n        ├── frowning.sh\n        ├── frowning_with_a_dockerfile  <------------ new folder   \n        │   └── Dockerfile              <----- gets copied over to generated .devcontainer\n        ├── frowning_with_a_dockerfile.sh\n        ├── scenarios.json\n        ├── smiling.sh\n        └── test.sh\n```\n\n----------------------------------------\n\nTITLE: Intermediate .devcontainer Folder Structure\nDESCRIPTION: Example of the intermediate .devcontainer folder structure created by the test command, showing how files are organized during the testing process.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n/tmp/devcontainercli/container-features-test/1667949592814 $ tree -a\n.\n├── .devcontainer\n│   ├── devcontainer.json\n│   ├── Dockerfile\n│   └── smile\n│       ├── devcontainer-feature.json\n│       └── install.sh\n│\n├── dev-container-features-test-lib\n├── frowning.sh\n├── frowning_with_a_dockerfile\n│   └── Dockerfile\n├── frowning_with_a_dockerfile.sh\n├── scenarios.json\n├── smiling.sh\n└── test.sh\n```\n\n----------------------------------------\n\nTITLE: Generated devcontainer.json for Duplicate Tests\nDESCRIPTION: Example of a devcontainer.json file generated for duplicate testing, which installs the same feature twice with different options to test idempotency.\nSOURCE: https://github.com/devcontainers/cli/blob/main/docs/features/test.md#2025-04-17_snippet_7\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"image\": \"ubuntu\",\n    \"features\": {\n        \"./dotnet\": {\n            \"version\": \"5\",\n            \"installUsingApt\": \"false\"\n        },\n        \"./dotnet-0\": {} // Default\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing Git Version for Release\nDESCRIPTION: Commands for creating and pushing a git tag to trigger the publish workflow for a new version of the CLI package.\nSOURCE: https://github.com/devcontainers/cli/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit tag v0.10.0\ngit push origin v0.10.0\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Structured changelog entries showing version changes, feature additions, and bug fixes for the Dev Containers CLI project spanning multiple months and versions.\nSOURCE: https://github.com/devcontainers/cli/blob/main/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Change Log\n\nNotable changes.\n\n## March 2025\n\n### [0.75.0]\n- Fix: add check for missing FROM instructions in Dockerfile parsing (https://github.com/devcontainers/cli/pull/950)\n- Update dependencies (https://github.com/devcontainers/cli/pull/954)\n\n## February 2025\n\n### [0.74.0]\n- Ignore non-writeable HOME (https://github.com/microsoft/vscode-remote-release/issues/10707)\n```\n\n----------------------------------------\n\nTITLE: JSBN License Notice Block\nDESCRIPTION: Copyright notice and license terms for the JSBN cryptography library by Tom Wu. Includes specific conditions for redistribution and liability disclaimers.\nSOURCE: https://github.com/devcontainers/cli/blob/main/ThirdPartyNotices.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/*\n * Copyright (c) 2003-2005  Tom Wu\n * All Rights Reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS-IS\" AND WITHOUT WARRANTY OF ANY KIND, \n * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY \n * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  \n *\n * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,\n * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER\n * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF\n * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT\n * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n *\n * In addition, the following condition applies:\n *\n * All redistributions must retain an intact copy of this copyright notice\n * and disclaimer.\n */\n```"
  }
]