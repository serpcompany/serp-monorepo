[
  {
    "owner": "abema",
    "repo": "go-mp4",
    "content": "TITLE: Reading MP4 Box Structure in Go\nDESCRIPTION: This code snippet demonstrates how to read the box structure of an MP4 file using the `ReadBoxStructure` function. It iterates through all boxes in the file, printing their depth, type, size, and payload.  It requires the `github.com/abema/go-mp4` package. The `h.Expand()` function expands the children of each box.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// expand all boxes\n_, err := mp4.ReadBoxStructure(file, func(h *mp4.ReadHandle) (interface{}, error) {\n\tfmt.Println(\"depth\", len(h.Path))\n\n\t// Box Type (e.g. \"mdhd\", \"tfdt\", \"mdat\")\n\tfmt.Println(\"type\", h.BoxInfo.Type.String())\n\n\t// Box Size\n\tfmt.Println(\"size\", h.BoxInfo.Size)\n\n\tif h.BoxInfo.IsSupportedType() {\n\t\t// Payload\n\t\tbox, _, err := h.ReadPayload()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tstr, err := mp4.Stringify(box, h.BoxInfo.Context)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tfmt.Println(\"payload\", str)\n\n\t\t// Expands children\n\t\treturn h.Expand()\n\t}\n\treturn nil, nil\n})\n```\n\n----------------------------------------\n\nTITLE: Probing MP4 File Information in Go\nDESCRIPTION: This code snippet demonstrates how to retrieve basic information from an MP4 file using the `Probe` function. It wraps the file with `bufseekio.NewReadSeeker` to provide buffering for I/O operations. The result, `info`, contains information such as the number of tracks. Dependencies: `github.com/abema/go-mp4` and `github.com/sunfish-shogi/bufseekio`.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// get basic informations\ninfo, err := mp4.Probe(bufseekio.NewReadSeeker(file, 1024, 4))  \nif err != nil {\n   :\n}\nfmt.Println(\"track num:\", len(info.Tracks))\n```\n\n----------------------------------------\n\nTITLE: Writing and Editing MP4 Boxes in Go\nDESCRIPTION: This code snippet demonstrates how to edit an MP4 box (specifically, the Emsg box) and write the modified content to a new file. It uses `ReadBoxStructure` to iterate through the boxes, modifies the `MessageData` field of the Emsg box, and writes the changes to the output file.  It relies on `github.com/abema/go-mp4` and `github.com/sunfish-shogi/bufseekio`.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nr := bufseekio.NewReadSeeker(inputFile, 128*1024, 4)\nw := mp4.NewWriter(outputFile)\n_, err = mp4.ReadBoxStructure(r, func(h *mp4.ReadHandle) (interface{}, error) {\n\tswitch h.BoxInfo.Type {\n\tcase mp4.BoxTypeEmsg():\n\t\t// write box size and box type\n\t\t_, err := w.StartBox(&h.BoxInfo)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// read payload\n\t\tbox, _, err := h.ReadPayload()\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// update MessageData\n\t\temsg := box.(*mp4.Emsg)\n\t\temsg.MessageData = []byte(\"hello world\")\n\t\t// write box playload\n\t\tif _, err := mp4.Marshal(w, emsg, h.BoxInfo.Context); err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\t// rewrite box size\n\t\t_, err = w.EndBox()\n\t\treturn nil, err\n\tdefault:\n\t\t// copy all\n\t\treturn nil, w.CopyBox(r, &h.BoxInfo)\n\t}\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific MP4 Boxes with Payload in Go\nDESCRIPTION: This code extracts specific boxes (Tkhd - Track Header Box) from an MP4 file using `ExtractBoxWithPayload`. It then iterates through the extracted boxes and prints the TrackID from the Tkhd box. The code depends on the `github.com/abema/go-mp4` package.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// extract specific boxes\nboxes, err := mp4.ExtractBoxWithPayload(file, nil, mp4.BoxPath{mp4.BoxTypeMoov(), mp4.BoxTypeTrak(), mp4.BoxTypeTkhd()})\nif err != nil {\n   :\n}\nfor _, box := range boxes {\n  tkhd := box.Payload.(*mp4.Tkhd)\n  fmt.Println(\"track ID:\", tkhd.TrackID)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User-Defined MP4 Boxes in Go\nDESCRIPTION: This code snippet demonstrates how to define a custom MP4 box type. It defines a new box type `Xxxx`, registers it with the `mp4` package, and defines the structure of the box. This allows the library to parse and serialize the custom box type. Requires the `github.com/abema/go-mp4` package.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc BoxTypeXxxx() BoxType { return mp4.StrToBoxType(\"xxxx\") }\n\nfunc init() {\n\tmp4.AddBoxDef(&Xxxx{}, 0)\n}\n\ntype Xxxx struct {\n\tFullBox  `mp4:\"0,extend\"`\n\tUI32      uint32 `mp4:\"1,size=32\"`\n\tByteArray []byte `mp4:\"2,size=8,len=dynamic\"`\n}\n\nfunc (*Xxxx) GetType() BoxType {\n\treturn BoxTypeXxxx()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Using the mp4tool Command-Line Tool\nDESCRIPTION: This code snippet provides instructions on how to install the `mp4tool` command-line tool using `go install` and how to use it to display the MP4 box tree. The tool helps to analyze the structure of MP4 files. The command requires Go to be installed.\nSOURCE: https://github.com/abema/go-mp4/blob/master/README.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ngo install github.com/abema/go-mp4/cmd/mp4tool@latest\n\nmp4tool -help\n```"
  }
]