[
  {
    "owner": "abice",
    "repo": "go-enum",
    "content": "TITLE: Defining an Integer Enum in Go\nDESCRIPTION: Demonstrates how to define an integer-based enum using go-enum's comment syntax. This example creates an ImageType enum with various image format options.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// ENUM(jpeg, jpg, png, tiff, gif)\ntype ImageType int\n```\n\n----------------------------------------\n\nTITLE: Defining a String Enum in Go\nDESCRIPTION: Shows how to define a string-based enum using go-enum's comment syntax. This example creates a StrState enum with various state options.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// ENUM(pending, running, completed, failed)\ntype StrState string\n```\n\n----------------------------------------\n\nTITLE: Complete Enum Type Declaration Example\nDESCRIPTION: A comprehensive example showing how to define a Color enum with various values, custom offsets, and comments. Demonstrates multiple naming conventions for enum values.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// Color is an enumeration of colors that are allowed.\n/* ENUM(\nBlack, White, Red\nGreen = 33 // Green starts with 33\n*/\n// Blue\n// grey=\n// yellow\n// blue-green\n// red-orange\n// yellow_green\n// red-orange-blue\n// )\ntype Color int32\n```\n\n----------------------------------------\n\nTITLE: Defining Commented Enum Type in Go\nDESCRIPTION: Shows how to define an enum type with comments using the go-enum syntax. Comments that appear at the end of enum values will be included in the generated constants.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// Commented is an enumeration of commented values\n/*\nENUM(\nvalue1 // Commented value 1\nvalue2\nvalue3 // Commented value 3\n)\n*/\ntype Commented int\n```\n\n----------------------------------------\n\nTITLE: Generated Go Code for Color Enum\nDESCRIPTION: The complete generated code for the Color enum example, showing constant declarations, String method implementation, parsing functions, and JSON marshaling/unmarshaling support.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by go-enum DO NOT EDIT.\n// Version: example\n// Revision: example\n// Build Date: example\n// Built By: example\n\npackage example\n\nimport (\n \"fmt\"\n \"strings\"\n)\n\nconst (\n // ColorBlack is a Color of type Black.\n ColorBlack Color = iota\n // ColorWhite is a Color of type White.\n ColorWhite\n // ColorRed is a Color of type Red.\n ColorRed\n // ColorGreen is a Color of type Green.\n // Green starts with 33\n ColorGreen Color = iota + 30\n // ColorBlue is a Color of type Blue.\n ColorBlue\n // ColorGrey is a Color of type Grey.\n ColorGrey\n // ColorYellow is a Color of type Yellow.\n ColorYellow\n // ColorBlueGreen is a Color of type Blue-Green.\n ColorBlueGreen\n // ColorRedOrange is a Color of type Red-Orange.\n ColorRedOrange\n // ColorYellowGreen is a Color of type Yellow_green.\n ColorYellowGreen\n // ColorRedOrangeBlue is a Color of type Red-Orange-Blue.\n ColorRedOrangeBlue\n)\n\nconst _ColorName = \"BlackWhiteRedGreenBluegreyyellowblue-greenred-orangeyellow_greenred-orange-blue\"\n\nvar _ColorMap = map[Color]string{\n ColorBlack:         _ColorName[0:5],\n ColorWhite:         _ColorName[5:10],\n ColorRed:           _ColorName[10:13],\n ColorGreen:         _ColorName[13:18],\n ColorBlue:          _ColorName[18:22],\n ColorGrey:          _ColorName[22:26],\n ColorYellow:        _ColorName[26:32],\n ColorBlueGreen:     _ColorName[32:42],\n ColorRedOrange:     _ColorName[42:52],\n ColorYellowGreen:   _ColorName[52:64],\n ColorRedOrangeBlue: _ColorName[64:79],\n}\n\n// String implements the Stringer interface.\nfunc (x Color) String() string {\n if str, ok := _ColorMap[x]; ok {\n  return str\n }\n return fmt.Sprintf(\"Color(%d)\", x)\n}\n\nvar _ColorValue = map[string]Color{\n _ColorName[0:5]:                    ColorBlack,\n strings.ToLower(_ColorName[0:5]):   ColorBlack,\n _ColorName[5:10]:                   ColorWhite,\n strings.ToLower(_ColorName[5:10]):  ColorWhite,\n _ColorName[10:13]:                  ColorRed,\n strings.ToLower(_ColorName[10:13]): ColorRed,\n _ColorName[13:18]:                  ColorGreen,\n strings.ToLower(_ColorName[13:18]): ColorGreen,\n _ColorName[18:22]:                  ColorBlue,\n strings.ToLower(_ColorName[18:22]): ColorBlue,\n _ColorName[22:26]:                  ColorGrey,\n strings.ToLower(_ColorName[22:26]): ColorGrey,\n _ColorName[26:32]:                  ColorYellow,\n strings.ToLower(_ColorName[26:32]): ColorYellow,\n _ColorName[32:42]:                  ColorBlueGreen,\n strings.ToLower(_ColorName[32:42]): ColorBlueGreen,\n _ColorName[42:52]:                  ColorRedOrange,\n strings.ToLower(_ColorName[42:52]): ColorRedOrange,\n _ColorName[52:64]:                  ColorYellowGreen,\n strings.ToLower(_ColorName[52:64]): ColorYellowGreen,\n _ColorName[64:79]:                  ColorRedOrangeBlue,\n strings.ToLower(_ColorName[64:79]): ColorRedOrangeBlue,\n}\n\n// ParseColor attempts to convert a string to a Color\nfunc ParseColor(name string) (Color, error) {\n if x, ok := _ColorValue[name]; ok {\n  return x, nil\n }\n return Color(0), fmt.Errorf(\"%s is not a valid Color\", name)\n}\n\nfunc (x Color) Ptr() *Color {\n return &x\n}\n\n// MarshalText implements the text marshaller method\nfunc (x Color) MarshalText() ([]byte, error) {\n return []byte(x.String()), nil\n}\n\n// UnmarshalText implements the text unmarshaller method\nfunc (x *Color) UnmarshalText(text []byte) error {\n name := string(text)\n tmp, err := ParseColor(name)\n if err != nil {\n  return err\n }\n *x = tmp\n return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Integer Enum Code in Go\nDESCRIPTION: Shows the generated code for the ImageType enum, including constant definitions, String() method, parsing function, and marshalling/unmarshalling methods.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n // ImageTypeJpeg is a ImageType of type Jpeg.\n ImageTypeJpeg ImageType = iota\n // ImageTypeJpg is a ImageType of type Jpg.\n ImageTypeJpg\n // ImageTypePng is a ImageType of type Png.\n ImageTypePng\n // ImageTypeTiff is a ImageType of type Tiff.\n ImageTypeTiff\n // ImageTypeGif is a ImageType of type Gif.\n ImageTypeGif\n)\n\n// String implements the Stringer interface.\nfunc (x ImageType) String() string\n\n// ParseImageType attempts to convert a string to a ImageType.\nfunc ParseImageType(name string) (ImageType, error)\n\n// MarshalText implements the text marshaller method.\nfunc (x ImageType) MarshalText() ([]byte, error)\n\n// UnmarshalText implements the text unmarshaller method.\nfunc (x *ImageType) UnmarshalText(text []byte) error\n```\n\n----------------------------------------\n\nTITLE: Generated String Enum Code in Go\nDESCRIPTION: Displays the generated code for the StrState enum, including constant definitions with string values.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n // StrStatePending is a StrState of type pending.\n StrStatePending StrState = \"pending\"\n // StrStateRunning is a StrState of type running.\n StrStateRunning StrState = \"running\"\n // StrStateCompleted is a StrState of type completed.\n StrStateCompleted StrState = \"completed\"\n // StrStateFailed is a StrState of type failed.\n StrStateFailed StrState = \"failed\"\n)\n```\n\n----------------------------------------\n\nTITLE: Generated Code for Commented Enum Types\nDESCRIPTION: Shows the resulting generated code for a commented enum type, including how the comments are preserved in the constant declarations.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n...\nconst (\n    // CommentedValue1 is a Commented of type Value1\n    // Commented value 1\n    CommentedValue1 Commented = iota\n    // CommentedValue2 is a Commented of type Value2\n    CommentedValue2\n    // CommentedValue3 is a Commented of type Value3\n    // Commented value 3\n    CommentedValue3\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Using go-enum with go generate\nDESCRIPTION: Demonstrates how to use go-enum with go generate by adding a generate comment to the source file and running go generate.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n//go:generate go-enum --marshal\n```\n\n----------------------------------------\n\nTITLE: Integrating go-enum in a Makefile\nDESCRIPTION: Shows how to integrate go-enum into a Makefile for generating enums with different flags for standard and nullable enums.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_7\n\nLANGUAGE: makefile\nCODE:\n```\nSTANDARD_ENUMS = ./example/animal_enum.go \\\n ./example/color_enum.go\n\nNULLABLE_ENUMS = ./example/sql_enum.go\n\n$(STANDARD_ENUMS): GO_ENUM_FLAGS=--nocase --marshal --names --ptr\n$(NULLABLE_ENUMS): GO_ENUM_FLAGS=--nocase --marshal --names --sqlnullint --ptr\n\nenums: $(STANDARD_ENUMS) $(NULLABLE_ENUMS)\n\n# The generator statement for go enum files.  Files that invalidate the\n# enum file: source file, the binary itself, and this file (in case you want to generate with different flags)\n%_enum.go: %.go $(GOENUM) Makefile\n $(GOENUM) -f $*.go $(GO_ENUM_FLAGS)\n```\n\n----------------------------------------\n\nTITLE: Using go-enum with Docker\nDESCRIPTION: Demonstrates how to run go-enum using a Docker image, allowing users to generate enums without installing the tool locally.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -w /app -v $(pwd):/app abice/go-enum:$(GO_ENUM_VERSION)\n```\n\n----------------------------------------\n\nTITLE: Installing go-enum from GitHub Releases\nDESCRIPTION: Shows how to download and install go-enum directly from GitHub releases using curl, with automatic detection of the correct binary for the user's system.\nSOURCE: https://github.com/abice/go-enum/blob/master/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -fsSL \"https://github.com/abice/go-enum/releases/download/$(GO_ENUM_VERSION)/go-enum_$(uname -s)_$(uname -m)\" -o go-enum\n```"
  }
]