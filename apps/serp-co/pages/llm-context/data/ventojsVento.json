[
  {
    "owner": "ventojs",
    "repo": "vento",
    "content": "TITLE: Vento Template Example\nDESCRIPTION: This snippet demonstrates the basic syntax of a Vento template, showing how to use conditional statements, variable interpolation, JavaScript code, and filters. It utilizes 'if' blocks, asynchronous operations (await), and the pipeline operator for filtering.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/index.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<header>\n  {{ if printName }}\n  <h1>{{ (await getUser(34)).name |> toUpperCase }}</h1>\n  {{ /if }}\n</header>\n```\n\n----------------------------------------\n\nTITLE: Installing Vento via NPM and Importing in Node.js JavaScript\nDESCRIPTION: Shows how to install the Vento package from NPM using npm install, then import it in a Node.js project using ES module syntax. Requires Node.js runtime and npm package manager.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install ventojs\n```\n\n----------------------------------------\n\nTITLE: Including a Dynamic Template Filename with JavaScript Expression in Vento\nDESCRIPTION: Enables the inclusion of template files where the filename is determined at runtime via a JavaScript template string. Dependencies include the Vento engine and any context data (e.g., a variable named 'name'). This allows for dynamic composition of template paths. Input is a JavaScript expression; output is the rendered content of the resolved filename.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/6.include.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ include `${name}.vto` }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vento with default options - JavaScript\nDESCRIPTION: This code initializes a Vento environment with the default configuration options. It demonstrates how to create a Vento instance using the `vento()` function and shows the default values for options like `dataVarname`, `autoDataVarname`, `includes`, and `autoescape`.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Example with the default options:\nconst env = vento({\n  dataVarname: \"it\",\n  autoDataVarname: true,\n  includes: Deno.cwd(),\n  autoescape: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Including a Static Template with Vento Syntax in Vento\nDESCRIPTION: Includes another template file into the current template using the Vento {{ include }} syntax. The filename argument points to the required Vento template within the \"includes\" folder. No dependencies other than the Vento engine are needed. The output is the rendered content of the included file, and the include is staticâ€”no dynamic resolution is performed.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/6.include.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ include \"filename.vto\" }}\n```\n\n----------------------------------------\n\nTITLE: Importing All Exports as Namespace in Vento\nDESCRIPTION: Shows how to import all exports from a template as a namespace object, then access the exports as properties.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_9\n\nLANGUAGE: vento\nCODE:\n```\n{{ import fns from \"./functions.vto\" }}\n\n{{ fns.message() }}\n```\n\n----------------------------------------\n\nTITLE: Printing HTML Content with Autoescaping in Vento\nDESCRIPTION: This snippet displays the default behavior of autoescaping for HTML content.  The `{{ }}` tags are used to output HTML, but the content is escaped by default to prevent XSS vulnerabilities.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"<h1>Hello, world!</h1>\" }}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Function in Vento\nDESCRIPTION: Demonstrates importing a function from another template and then calling it in the current template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_8\n\nLANGUAGE: vento\nCODE:\n```\n{{ import { message } from \"./functions.vto\" }}\n\n{{ message() }}\n```\n\n----------------------------------------\n\nTITLE: Enabling auto-escaping in Vento - JavaScript\nDESCRIPTION: This code enables the `autoescape` option in Vento, which automatically escapes printed variables to prevent XSS vulnerabilities. This configuration ensures that HTML entities are properly encoded when rendering templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst env = vento({\n  autoescape: true,\n});\n\nconst result = env.runString(\"{{ title }}\", {\n  title: \"<h1>Hello, world!</h1>\",\n});\n// &lt;h1&gt;Hello, world!&lt;/h1&gt;\n\n// Like in Nunjucks, you can use the `safe` filter for trusted content:\nconst result = env.runString(\"{{ title |> safe }}\", {\n  title: \"<h1>Hello world</h1>\",\n});\n// <h1>Hello world</h1>\n```\n\n----------------------------------------\n\nTITLE: Defining custom filter function - JavaScript\nDESCRIPTION: This code defines a custom filter function named `italic` that wraps a given text in `<em>` tags. This example demonstrates how to create custom filters for transforming content within Vento templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction italic(text: string) {\n  return `<em>${text}</em>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Block in Vento\nDESCRIPTION: Shows how to export a multi-line content block as a variable using the block export syntax with opening and closing tags.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ export message }}\n  Hello, world!\n{{ /export }}\n```\n\n----------------------------------------\n\nTITLE: Using custom filter in Vento template - Vento\nDESCRIPTION: This code demonstrates how to use a registered custom filter within a Vento template.  The `|> italic` syntax applies the `italic` filter to the `title` variable.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_8\n\nLANGUAGE: vento\nCODE:\n```\n<p>Welcome to {{ title |> italic }}</p>\n```\n\n----------------------------------------\n\nTITLE: Exporting a Block with Transformation in Vento\nDESCRIPTION: Demonstrates exporting a block with a pipe transformation, converting the content to uppercase.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ export message |> toUpperCase }}\n  Hello, world!\n{{ /export }}\n```\n\n----------------------------------------\n\nTITLE: Configuring data variable name in Vento - JavaScript\nDESCRIPTION: This code snippet shows how to change the default data variable name (`it`) in Vento using the `dataVarname` option. This allows you to customize the variable name used to access data within your templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst env = vento({\n  dataVarname: \"global\",\n});\n```\n\n----------------------------------------\n\nTITLE: Basic If Statement in Vento\nDESCRIPTION: A basic conditional statement that checks if a user exists and displays a message if the condition is true. The condition is evaluated as a JavaScript expression.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/5.if.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ if it.user }}\n  The user is {{ it.user }}.\n{{ /if }}\n```\n\n----------------------------------------\n\nTITLE: If/Else If/Else Chain in Vento\nDESCRIPTION: A more complex conditional chain with multiple conditions. It checks if a user exists, then if the user has a name, and handles each case with appropriate messages.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/5.if.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ if !it.user }}\n  No user found!\n{{ else if !it.user.name }}\n  The user doesn't have name.s\n{{ else }}\n  The user is {{ it.user.name }}.\n{{ /if }}\n```\n\n----------------------------------------\n\nTITLE: Printing Async Operation Result with Vento\nDESCRIPTION: This example shows how to use `await` to print the result of an asynchronous operation.  It calls `users.getUserName(23)` and awaits the result before outputting it.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ await users.getUserName(23) }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Arrays Using for Loop - Vento\nDESCRIPTION: Demonstrates how to iterate over a simple array using the Vento for loop syntax. No external dependencies are required. The variable after 'for' corresponds to each element in the array, and the loop body defines the output for each iteration.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ for number of [1, 2, 3] }}\n  {{ number }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays Inline Before Iteration - Vento\nDESCRIPTION: Illustrates filtering an array with a JavaScript expression before iterating, by placing the filter operation inside the Vento for loop declaration. Requires support for inline JavaScript expressions within Vento templates. The for loop will only iterate over values that satisfy the filter condition.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ for odd_number of [1, 2, 3].filter((n) => n%2) }}\n  {{ odd_number }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Strings as Arrays of Characters - Vento\nDESCRIPTION: Demonstrates automatic conversion of a string into an array of its characters for iteration in Vento. Each loop yields one character at a time. No additional dependencies or configuration are needed.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n{{ for letter of \"abcd\" }}\n  {{ letter }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Capturing Block Content in Vento 'set' Tag (Block Mode) - Vento\nDESCRIPTION: Shows how to assign multiline or templated content to a variable using the block form of the Vento 'set' tag, capturing all content between the opening and closing tags. No external dependencies required, and variable becomes globally accessible upon assignment. Inputs are template block contents; output is the captured content as a global variable value.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ set message }}\n  Hello, world!\n{{ /set }}\n```\n\n----------------------------------------\n\nTITLE: Transforming Variable Value with Pipes in Vento 'set' Tag - Vento\nDESCRIPTION: Illustrates using a pipe to apply a transformation function (here, 'toUpperCase') to the value being assigned to the 'message' variable via the Vento 'set' tag. Requires the transformation function to be available in the template context. The variable stores the resulting transformed value globally, suitable for value preprocessing and formatting. Input is a string passed through a pipe; output is the transformed global variable.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ set message = \"Hello, world!\" |> toUpperCase }}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Function in Vento\nDESCRIPTION: Shows how to export a function that takes a parameter. The function can be used by other templates that import it.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n{{ export function message (name) }}\n  Hello, {{ name }}!\n{{ /export }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Async and Sync Functions Using Pipe Operator in Vento in Vento and JavaScript\nDESCRIPTION: Demonstrates chaining multiple transformations with the pipe operator including asynchronous functions using 'await' within Vento templates. The example fetches JSON data from a URL and serializes it using JSON.stringify. It shows equivalence to the native JavaScript nested async calls syntax. Dependencies include async support in Vento and standard Web APIs like fetch.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/2.pipes.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"https://example.com/data.json\" |> await fetch |> await json |> JSON.stringify }}\n```\n\nLANGUAGE: js\nCODE:\n```\nJSON.stringify(await (await fetch(\"https://example.com/data.json\")).json());\n```\n\n----------------------------------------\n\nTITLE: Including a Template with Additional Data in Vento\nDESCRIPTION: Demonstrates including a template and passing extra data as an object alongside the filename. The Vento engine merges this additional data with the data context of the parent template. Dependencies include the Vento engine and relevant data fields. The included file can access both inherited and newly provided properties.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/6.include.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ include \"./filename.vto\" { name: \"Ã“scar\" } }}\n```\n\n----------------------------------------\n\nTITLE: Including a Relative Template File with Vento Syntax in Vento\nDESCRIPTION: Illustrates how to include a template file using a relative path with the Vento {{ include }} statement. This syntax allows for referencing files relative to the current template's location. The primary dependency is the Vento engine; relative path resolution happens at render time, and the output will be the processed content of the specified file.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/6.include.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ include \"./filename.vto\" }}\n```\n\n----------------------------------------\n\nTITLE: Including and Transforming Template Output with a Pipe in Vento\nDESCRIPTION: Uses the Vento pipe syntax to transform the result of an included template before rendering. In this example, the output from a file is passed through a 'toUpperCase' pipe, converting all text to uppercase. Dependencies include the Vento engine and availability of the transformation pipe. The output is the transformed content of the included template; input pipes must conform to the Vento pipes interface.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/6.include.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ include \"/hello-world.vto\" |> toUpperCase }}\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Tag Example\nDESCRIPTION: This snippet demonstrates the basic usage of the `layout` tag. It defines a `container.vto` layout and then uses the `layout` tag to insert the `<h1>Hello, world!</h1>` into that layout.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n<div class=\"container\">\n  {{ content }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Tag Usage\nDESCRIPTION: This example demonstrates how to pass content to a layout using the `layout` tag. The content within the opening and closing `layout` tags is captured and rendered in the `container.vto` template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ layout \"container.vto\" }}\n<h1>Hello, world!</h1>\n{{ /layout }}\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Tag with Pipes\nDESCRIPTION: This code showcases how to use pipes to transform the content passed to the layout. The `toUpperCase` pipe converts the content within the layout tags to uppercase before rendering it in the layout template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ layout \"container.vto\" |> toUpperCase }}\n<h1>Hello, world!</h1>\n{{ /layout }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scoped Variables within a Vento Function\nDESCRIPTION: Illustrates that Vento functions can access variables defined in their parent scope (`name` set using `{{ set }}`) without needing them to be explicitly passed as arguments, similar to closures in JavaScript.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/9.function.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ set name = \"world\" }}\n\n{{ function hello }}\n  Hello, {{ name }}!\n{{ /function }}\n\n{{ hello() }}\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling an Async Vento Function\nDESCRIPTION: Demonstrates defining an asynchronous function `hello` using the `async` keyword in Vento. It shows how to use `await` inside the function to handle Promises (e.g., `Promise.resolve`) and how to call the async function using `{{ await hello() }}`.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/9.function.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ async function hello }}\n  {{ await Promise.resolve(\"Hello, world!\") }}\n{{ /function }}\n\n{{ await hello() }}\n```\n\n----------------------------------------\n\nTITLE: Disabling auto data variable name prefixing - JavaScript\nDESCRIPTION: This code snippet demonstrates how to disable the `autoDataVarname` option in Vento. Disabling this option requires you to explicitly use the `dataVarname` prefix (e.g., `it.title`) when accessing variables in your templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst env = vento({\n  autoDataVarname: false,\n});\n```\n\n----------------------------------------\n\nTITLE: Invoking Prototype Methods with Vento Pipe Operator in Vento\nDESCRIPTION: Illustrates the fallback behavior where Vento executes the piped function as a method of the variable's prototype if not recognized as a filter or global function. The example converts a string to uppercase using the native toUpperCase() method. This enables concise method calls within templates using the pipe syntax.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/2.pipes.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"Hello, world!\" |> toUpperCase }}\n```\n\n----------------------------------------\n\nTITLE: Explicit Array Conversion for String Iteration - Vento\nDESCRIPTION: Equivalent to the automatic string conversion, this snippet manually creates an array of characters for iteration. Useful for illustration or when preprocessing strings. Results are identical to the automatic conversion.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_7\n\nLANGUAGE: vento\nCODE:\n```\n{{ for letter of [\"a\", \"b\", \"c\", \"d\"] }}\n  {{ letter }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Variable in Vento\nDESCRIPTION: Demonstrates how to export a simple variable in a Vento template. The exported variable is also available for use within the current template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ export message = \"Hello, world!\" }}\n```\n\n----------------------------------------\n\nTITLE: Exporting a Variable with Transformation in Vento\nDESCRIPTION: Shows how to export a variable with a pipe transformation applied to it, in this case converting the text to uppercase.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ export message = \"Hello, world!\" |> toUpperCase }}\n```\n\n----------------------------------------\n\nTITLE: Using an Exported Variable in the Current Template\nDESCRIPTION: Demonstrates that exported variables are accessible within the same template where they are defined.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ export message = \"Hello, world!\" }}\n\n{{ message }}\n```\n\n----------------------------------------\n\nTITLE: Printing Conditional Output with Vento\nDESCRIPTION: This snippet demonstrates a conditional expression using the `||` operator.  If the `name` variable is truthy, its value is printed; otherwise, \"Unknown\" is printed.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ name || \"Unknown\" }}\n```\n\n----------------------------------------\n\nTITLE: Applying Pipes to Block Content with Echo in Vento\nDESCRIPTION: This snippet shows how to apply a pipe to a block of content. The `{{ echo |> md }}` uses a hypothetical 'md' filter to transform Markdown to HTML.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_10\n\nLANGUAGE: vento\nCODE:\n```\n{{ echo |> md }}\n## Header\n\n- First item.\n- Second item.\n{{ /echo }}\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Data Access\nDESCRIPTION: This snippet demonstrates how to access data passed to the layout through the `layout` tag. The `size` variable, passed to the layout, is used within the layout template to set a CSS class.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n<div class=\"container size-{{ size }}\">\n  {{ content }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace Before and After Content in Vento\nDESCRIPTION: This snippet shows removing whitespace before and after a tag using `-` in both the opening and closing tags.  It trims whitespace surrounding the printed variable.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_7\n\nLANGUAGE: vento\nCODE:\n```\n<h1>\n  {{- \"Hello, world!\" -}}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Tag with Pipes Output\nDESCRIPTION: This example displays the HTML output generated by the layout tag when combined with a pipe. The content within the layout tag is transformed to uppercase due to the `toUpperCase` pipe.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"container\">\n  <h1>HELLO, WORLD!</h1>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling a Basic Vento Function\nDESCRIPTION: Demonstrates the basic syntax for defining a function named `hello` using `{{ function }}` and `{{ /function }}` tags in Vento, and then calling it using `{{ hello() }}` to output its content.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/9.function.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ function hello }}\n  Hello, world!\n{{ /function }}\n\n{{ hello() }}\n```\n\n----------------------------------------\n\nTITLE: Printing Expression Result with Vento\nDESCRIPTION: This code shows how to evaluate a JavaScript expression within Vento's delimiters. It combines the `name` and `surname` variables, concatenates them with a space, and converts the result to uppercase.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ (name + \" \" + surname).toUpperCase() }}\n```\n\n----------------------------------------\n\nTITLE: Echo Tag Alternative for Printing in Vento\nDESCRIPTION: This snippet illustrates an alternative way to print content directly in Vento. It's functionally identical to a direct print statement using the double curly braces.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_12\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"Hello, world!\" }}\n```\n\n----------------------------------------\n\nTITLE: Using Escape Filter with Vento\nDESCRIPTION: This snippet utilizes the built-in `escape` filter to escape HTML content before it is printed.  This is essential for preventing XSS vulnerabilities and ensures the HTML is treated as text, rather than rendered.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_8\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"<h1>Hello, world!</h1>\" |> escape }}\n```\n\n----------------------------------------\n\nTITLE: Inline Echo Usage in Vento\nDESCRIPTION: This example shows the inline usage of the `echo` tag.  `{{ echo \"Hello, world!\" }}` is equivalent to `{{ \"Hello, world!\" }}`.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_11\n\nLANGUAGE: vento\nCODE:\n```\n{{ echo \"Hello, world!\" }}\n```\n\n----------------------------------------\n\nTITLE: Printing Trust HTML Content with Safe Filter in Vento\nDESCRIPTION: This snippet showcases how to use the `safe` filter to mark content as trusted and prevent escaping. It outputs the HTML content directly without escaping it.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"<h1>Hello, world!</h1>\" |> safe }}\n```\n\n----------------------------------------\n\nTITLE: Printing Variable with Vento\nDESCRIPTION: This snippet demonstrates the basic syntax for printing a variable in a Vento template. It uses the `{{ }}` delimiters to output the value of the `name` variable.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Disabling Tag Processing with Echo in Vento\nDESCRIPTION: This demonstrates using the `{{ echo }}` tag to enclose content, preventing Vento from processing the enclosed syntax. It is used for displaying code examples, or content that contains Vento syntax, without the syntax being evaluated.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_9\n\nLANGUAGE: vento\nCODE:\n```\n{{ echo }}\nIn Vento, {{ name }} will print the \"name\" variable.\nUse {{ name |> escape }} to HTML-escape its content\n{{ /echo }}\n```\n\n----------------------------------------\n\nTITLE: Importing Vento Template Engine in Node.js Using JavaScript\nDESCRIPTION: Example of importing the installed ventojs module in Node.js using ES module import syntax. Precondition is that ventojs is installed via npm.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport vento from \"ventojs\";\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Global Functions with Vento Pipe Operator in Vento\nDESCRIPTION: Shows how to use global JavaScript namespace functions like JSON.stringify in Vento pipe chains. The input value is passed as the first argument to the function, with optional additional arguments following. Dependencies include availability of standard JavaScript global functions. This allows JSON serialization of objects directly in the template with readable syntax.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/2.pipes.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ { name: \"Ã“scar\", surname: \"Otero\" } |> JSON.stringify }}\n```\n\nLANGUAGE: vento\nCODE:\n```\n{{ { name: \"Ã“scar\", surname: \"Otero\" } |> JSON.stringify(null, 2) }}\n```\n\n----------------------------------------\n\nTITLE: Applying HTML Escaping Filters Using Vento Pipe Operator in Vento\nDESCRIPTION: Demonstrates usage of built-in Vento filters such as 'escape' and 'safe' to transform or mark trusted HTML content within templates. Dependencies include Vento template engine's built-in filters. The example inputs a string containing HTML tags, escapes it to render safely, or marks HTML as trusted without modification. Shows syntax for passing arguments to custom filters.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/2.pipes.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"<h1>Hello, world!</h1>\" |> escape }}\n```\n\nLANGUAGE: vento\nCODE:\n```\n{{ myTrustedSource.getHtml() |> safe }}\n```\n\nLANGUAGE: vento\nCODE:\n```\n{{ \"<h1>Hello, world!</h1>\" |> filter_name(arg1, arg2, ...) }}\n```\n\n----------------------------------------\n\nTITLE: Defining a Vento Function with Arguments\nDESCRIPTION: Shows how to define a Vento function `hello` that accepts an argument `name` with a default value 'world'. It demonstrates calling the function both without arguments (using the default) and with a specific argument ('Vento').\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/9.function.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ function hello(name = \"world\") }}\n  Hello, {{ name }}!\n{{ /function }}\n\n{{ hello() }}\n\n{{ hello(\"Vento\") }}\n```\n\n----------------------------------------\n\nTITLE: If/Else Statement in Vento\nDESCRIPTION: A conditional statement with both if and else branches. If a user exists, it displays the user; otherwise, it shows a fallback message.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/5.if.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ if it.user }}\n  The user is {{ it.user }}.\n{{ else }}\n  No user found!\n{{ /if }}\n```\n\n----------------------------------------\n\nTITLE: Embedding Console Log in Vento\nDESCRIPTION: This snippet demonstrates how to embed and execute arbitrary JavaScript code within a Vento template using the `{{> }}` tag syntax. It specifically shows a `console.log` statement, which will be executed when the template is rendered at runtime.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/11.javascript.md#_snippet_0\n\nLANGUAGE: Vento\nCODE:\n```\n{{> console.log(\"Hello, world!\") }}\n```\n\n----------------------------------------\n\nTITLE: Setting a Global Variable Using Vento 'set' Tag - Vento\nDESCRIPTION: Demonstrates assigning a string value to a global template variable using the Vento 'set' tag. No dependencies are required beyond Vento itself, and the variable 'message' becomes available throughout the template and all included files. The operation is atomic and overwrites any previous value associated with 'message'. Input is a direct string assignment; output is a globally accessible variable.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{ set message = \"Hello, world!\" }}\n```\n\n----------------------------------------\n\nTITLE: Safely Re-Assigning Global Variables with Vento 'set' Tag - Vento\nDESCRIPTION: Demonstrates that the 'set' tag in Vento allows safe re-assignment of the same global variable multiple times without errors, unlike JavaScript variable declarations. Useful when global variable values need to be updated in sequence within a template. Inputs are two 'set' assignments; output is the final globally assigned value.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n{{ set name = \"Ã“scar\" }}\n{{ set name = \"Laura\" }}\n```\n\n----------------------------------------\n\nTITLE: Applying Transformation Pipes in Block Mode in Vento 'set' Tag - Vento\nDESCRIPTION: Demonstrates block mode assignment with transformation by applying a pipe (e.g., 'toUpperCase') to the captured content of the block, storing the transformed result in the global variable 'message'. Requires pipe support in the template runtime. Inputs are template block contents; output is processed and globally assigned variable content.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ set message |> toUpperCase }}\n  Hello, world!\n{{ /set }}\n```\n\n----------------------------------------\n\nTITLE: Duplicated JavaScript Variable Declaration in Vento Template - Vento\nDESCRIPTION: Highlights a pitfall where declaring the same variable twice using JavaScript via '{{> }}' syntax leads to an error due to reinitialization of 'name'. Demonstrates the limitation of JavaScript-scoped variables in Vento templates as opposed to the 'set' tag's resilience. Inputs are two consecutive variable declarations; expected output is an initialization error.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n{{> const name = \"Ã“scar\" }}\n{{> const name = \"Laura\" }}\n```\n\n----------------------------------------\n\nTITLE: Vento Layout Tag Data Passing\nDESCRIPTION: This snippet shows how to pass additional data to the layout. An object containing the `size` property is passed as an argument to the `layout` tag, making the `size` variable available within the layout template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/7.layout.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n{{ layout \"container.vto\" { size: \"big\" } }}\n<h1>Hello, world!</h1>\n{{ /layout }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Keys and Values of an Object During Iteration - Vento\nDESCRIPTION: Shows how to extract both the key and value when iterating over an object using Vento's extended for loop syntax. Outputs the key as a term ('dt') and the value as a definition ('dd') in an HTML description list. Requires iteration over JavaScript objects within Vento.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_2\n\nLANGUAGE: vento\nCODE:\n```\n<dl>\n{{ for key, value of { name: \"Ã“scar\", surname: \"Otero\" } }}\n  <dt>{{ key }}</dt>\n  <dd>{{ value }}</dd>\n{{ /for }}\n</dl>\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Arrays for Iteration - Vento\nDESCRIPTION: Shows how Vento automatically converts an integer to an array, iterating from 1 up to the given number. No dependencies are required. The loop variable will take values from 1 to the specified integer, inclusive.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{ for count of 10 }}\n  {{ count }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Handling null or undefined in Iteration - Vento\nDESCRIPTION: Demonstrates robust handling when iterating over a potentially null or undefined variable in Vento. The engine coerces null/undefined values to empty arrays, resulting in no iterations and no errors. No dependencies required.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_8\n\nLANGUAGE: vento\nCODE:\n```\n{{ for item of undefined }}\n  {{ item }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Filtering Arrays with Pipes Before Iteration - Vento\nDESCRIPTION: Shows use of Vento's pipe operator to apply a filter transformation to an array before iterating. The provided filter ensures only even numbers are included in the iteration. Requires pipe and filter support within Vento.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_10\n\nLANGUAGE: vento\nCODE:\n```\n{{ for even_number of [1, 2, 3] |> filter((n) => n % 2 === 0) }}\n  {{ even_number }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Async Iterables Using for await - Vento\nDESCRIPTION: Demonstrates iteration over an asynchronous iterable (such as a Promise or async generator) using the 'for await' syntax in Vento. Requires support for async/await in the underlying data source. Each resolved item from getItems() is output per loop iteration.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ for await item of getItems() }}\n  {{ item }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Defining a basic comment in Vento template\nDESCRIPTION: This snippet demonstrates the syntax for creating a comment in Vento templates using '{{#' to start and '#}}' to end. Comments are ignored during rendering and are used for documentation or annotation purposes within the template code.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/8.comments.md#_snippet_0\n\nLANGUAGE: vento\nCODE:\n```\n{{# This is a comment! #}}\n```\n\n----------------------------------------\n\nTITLE: Using comment trimming to remove spaces in Vento templates\nDESCRIPTION: This snippet shows how to trim spaces around comments using the '-' character in the comment delimiters. When including '{{#-' and '-#}}', the template engine removes leading and/or trailing spaces surrounding the comment, affecting the rendered output to eliminate unwanted whitespace.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/8.comments.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n<h1>\n  {{#- This is a comment! -#}}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Importing and Enabling autoTrim Plugin in Vento (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the autoTrim plugin from Vento and attach it to a Vento environment instance to enable automatic trimming of whitespace from around specific template tags. No extra installation is required, as the plugin comes bundled with Vento. The primary dependency is a Vento environment instance (e.g., env). Expected input is a Vento environment; output is an environment with enhanced trimming behavior. Limitations: Only trims predefined tags unless configured otherwise.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/auto-trim.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport autoTrim from \"vento/plugins/auto_trim.ts\";\n// import autoTrim from \"ventojs/plugins/auto_trim.js\";\n\nenv.use(autoTrim());\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Vento Fragments Plugin in Deno (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the Vento fragments plugin from a Deno URL and register it with the 'env' environment object by calling 'env.use(fragments())'. The dependencies include Deno with support for direct URL imports and access to the Vento environment variable 'env'. After registration, templates can use fragment features. The input is a direct module URL; no other parameters are expected.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fragments from \"https://deno.land/x/vento_plugin_fragments@0.1.0/mod.ts\";\n\nenv.use(fragments());\n```\n\n----------------------------------------\n\nTITLE: Explicit Empty Array Handling for null/undefined - Vento\nDESCRIPTION: Equivalent to the implicit conversion of null or undefined, this example iterates explicitly over an empty array in Vento. No iterations will occur, and no output will be generated. Used for illustrating engine defaults or for clarity in templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_9\n\nLANGUAGE: vento\nCODE:\n```\n{{ for item of [] }}\n  {{ item }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Explicit Array Conversion for Number Iteration - Vento\nDESCRIPTION: Equivalent to the automatic number conversion, this snippet explicitly provides an array for iteration using Vento. Yields identical output to the implicit conversion. This is useful for clarity or when customizing value sequences.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/4.for.md#_snippet_5\n\nLANGUAGE: vento\nCODE:\n```\n{{ for count of [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] }}\n  {{ count }}\n{{ /for }}\n```\n\n----------------------------------------\n\nTITLE: Customizing Trimmed Tags with autoTrim Plugin (JavaScript)\nDESCRIPTION: This snippet shows how to customize the list of template tags that are trimmed by the autoTrim plugin. It imports both the plugin and the defaultTags array, then passes a custom tag list to the plugin configuration. The setup requires the Vento environment and the autoTrim plugin. Key parameter: tags (array of strings) specifying which tags to trim. Inputs: a Vento environment and a tags array; Output: customized trimming behavior. Limitation: Only tags listed will be trimmed.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/auto-trim.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport autoTrim, { defaultTags } from \"vento/plugins/auto_trim.ts\";\n// import autoTrim, { defaultTags } from \"ventojs/plugins/auto_trim.js\";\n\nenv.use(autoTrim({\n  tags: [\"tag\", ...defaultTags],\n}));\n```\n\n----------------------------------------\n\nTITLE: Configuring dprint.json for markup_fmt plugin - JSONC\nDESCRIPTION: This JSONC snippet illustrates how to configure the dprint.json file to include the markup_fmt plugin by adding its URL to the plugins array. It clarifies that the configuration key is \"markup\", not \"markup_fmt\", where plugin specific settings can be applied. Users must replace the {version} placeholder with the actual plugin version, e.g., \"v0.7.0\". The configuration enables dprint to recognize and format Vento templates properly.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/7.formatter.md#_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // ...\n  \"plugins\": [\n    // ... other plugins URL\n    \"https://plugins.dprint.dev/g-plane/markup_fmt-{version}.wasm\"\n  ],\n  \"markup\": { // <-- the key name here is \\\"markup\\\", not \\\"markup_fmt\\\"\n    // config comes here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Template Fragment with Nunjucks Syntax (Nunjucks)\nDESCRIPTION: This snippet shows how to define a template fragment by marking a section using '{{ fragment list }}' and '{{ /fragment }}' in a Nunjucks template, iterating over a list of users to generate individual list items. It expects a variable 'users' as an array as input for rendering. The code is placed inside an HTML document. Requires the Vento fragments plugin registered in the environment.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_3\n\nLANGUAGE: Nunjucks\nCODE:\n```\n<html>\n    {{ fragment list }}\n        {{ for user in users }}\n            <li>{{ user }}</li>\n        {{ /for }}\n    {{ /fragment }}\n</html>\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace in Template If Blocks (Vento)\nDESCRIPTION: This snippet illustrates the usage of trimmed template tags inside a Vento template block. When rendered in a Vento environment with autoTrim enabled, whitespace and specified tags such as if and set are removed, preserving the intended output while maintaining markup. The main dependency is the autoTrim plugin being active in the environment. Input: template context with a variable 'name'; Output: formatted markup with trimmed tags.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/auto-trim.md#_snippet_2\n\nLANGUAGE: Vento\nCODE:\n```\n{{ if true }}\n  Hello, {{ name }}!\n  {{ set variable = 10 }}\n{{ /if }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Fragment from a Template with Vento Environment (JavaScript)\nDESCRIPTION: This snippet demonstrates how to execute rendering of a specific fragment from a template using 'env.run' with a query parameter, passing a list of users as context. It returns the HTML content of the named fragment ('list'). Required dependencies include the Vento environment and a configured template file ('template.vto'). The input is an array of usernames, and the output is the rendered fragment HTML.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst users = [\"Jared\", \"Kim\", \"Bob\"];\n\nconst fragment = await env.run(\"template.vto#list\", { users }).content;\n```\n\n----------------------------------------\n\nTITLE: Installing Vento Fragments Plugin in Node.js Environment (Bash)\nDESCRIPTION: This snippet shows the shell command required to install the Vento fragments plugin from npm in a Node.js project using the 'npm install' command. Ensure Node.js and npm are installed prior to running this command. No other parameters or configuration options are supplied here. The command adds the plugin as a dependency in your project.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nnpm install vento-plugin-fragments\n```\n\n----------------------------------------\n\nTITLE: Configuring nvim-treesitter for Vento, HTML, and JS in Neovim (Lua)\nDESCRIPTION: This Lua snippet sets up the `nvim-treesitter` plugin to ensure the necessary parsers for Vento, HTML, and Javascript are installed. It adds `vento`, `html`, and `javascript` to the `ensure_installed` list within the `nvim-treesitter.configs.setup` function. Installing these parsers enables accurate syntax highlighting for Vento templates and embedded languages.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/3.editor-integrations.md#_snippet_1\n\nLANGUAGE: Lua\nCODE:\n```\nrequire(\"nvim-treesitter.configs\").setup({\n    ensure_installed = { \"vento\", \"html\", \"javascript\", \"...\" },\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Variables Using JavaScript in Vento Template - Vento\nDESCRIPTION: Shows variable declaration within Vento templates using embedded JavaScript code via '{{> }}' syntax. Requires JavaScript execution capability in the Vento engine. Variable 'name' is declared and immediately accessible for output within the template. Inputs are standard JavaScript statements; outputs are local variables in the JavaScript scope, not globally exported between includes.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/3.set.md#_snippet_4\n\nLANGUAGE: vento\nCODE:\n```\n{{> const name = \"Ã“scar\" }}\n{{ name }}\n```\n\n----------------------------------------\n\nTITLE: Adding markup_fmt and related plugins to dprint configuration - Shell\nDESCRIPTION: This snippet provides the shell commands necessary to add the markup_fmt plugin along with malva and typescript plugins to dprint. These plugins enable formatting support for Vento templates, JavaScript, and CSS code within template files. Users should ensure dprint is installed prior to running these commands.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/7.formatter.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndprint config add g-plane/markup_fmt\ndprint config add g-plane/malva\ndprint config add typescript\n```\n\n----------------------------------------\n\nTITLE: Importing and Registering Vento Fragments Plugin in Node.js (JavaScript)\nDESCRIPTION: This code demonstrates importing the Vento fragments plugin after installation from npm and registering it with the 'env' environment by calling 'env.use(fragments())'. It requires Node.js, the vento-plugin-fragments package installed, and the existence of an 'env' object. No other arguments are required.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport fragments from \"vento-plugin-fragments\";\n\nenv.use(fragments());\n```\n\n----------------------------------------\n\nTITLE: Associating .vto Extension with Vento Filetype in Neovim (Lua)\nDESCRIPTION: This Lua snippet configures Neovim to recognize files with the `.vto` extension as being of the `vento` filetype. This is a prerequisite for applying Vento-specific syntax highlighting and configurations via plugins like `nvim-treesitter`. It uses the `vim.filetype.add` function to register the new extension-to-filetype mapping.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/3.editor-integrations.md#_snippet_0\n\nLANGUAGE: Lua\nCODE:\n```\nvim.filetype.add({\n  extension = {\n    vto = \"vento\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Example Output: Rendered HTML List from Template Fragment (HTML)\nDESCRIPTION: This output snippet displays the HTML list generated by rendering the 'list' fragment in the previous examples. Each line is a list item corresponding to a user. Expect this output format when supplying the users array to the template rendering code.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/5.plugins/fragments.md#_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<li>Jared</li>\n<li>Kim</li>\n<li>Bob</li>\n```\n\n----------------------------------------\n\nTITLE: Loading and Compiling a Vento Template with JavaScript\nDESCRIPTION: Uses the async load method of a Vento environment instance to load and compile a template from a file path. The compiled template is cached internally and returned as a callable function that accepts a context object. Calling the template returns the rendered result string.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst template = await env.load(\"my-template.vto\");\nconst result = await template({ title: \"Hello, world!\" });\n```\n\n----------------------------------------\n\nTITLE: Running a Vento Template from a String Using JavaScript\nDESCRIPTION: Executes template code provided directly as a string without loading from a file, using the runString method of the Vento environment. Accepts the template string and a context object; returns an object containing the rendered content string.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = await env.runString(\"<h1>{{ title }}</h1>\", {\n  title: \"Hello, world!\",\n});\n\nconsole.log(result.content);\n// <h1>Hello, world!</h1>\n```\n\n----------------------------------------\n\nTITLE: Clearing Vento Template Cache in JavaScript\nDESCRIPTION: Illustrates how to clear the internal template compilation cache stored in the Vento environment instance. This is useful when templates need to be reloaded and recompiled, such as during development to reflect changes without restarting the runtime.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nenv.cache.clear();\n```\n\n----------------------------------------\n\nTITLE: Loading and Running a Vento Template in One Call Using JavaScript\nDESCRIPTION: Combines loading, compiling, and executing a Vento template file in a single async call via the run method. Takes the template file path and a context object as parameters and returns the rendered template output string.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst result = await env.run(\"my-template.vto\", { title: \"Hello, world!\" });\n```\n\n----------------------------------------\n\nTITLE: Importing Vento Template Engine with Deno in JavaScript\nDESCRIPTION: Demonstrates how to import the Vento template engine in a Deno environment using ES module import syntax. Also shows installing Vento globally via the Deno CLI. Requires Deno runtime and internet access to jsr package registry.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport vento from \"jsr:@vento/vento\";\n```\n\n----------------------------------------\n\nTITLE: Accessing data in Vento templates - Vento\nDESCRIPTION: This code snippet shows how to access data passed to a Vento template using the default `it` variable. The `it` variable is an object containing all the data available within the template.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_1\n\nLANGUAGE: vento\nCODE:\n```\n{{ it.title }}\n```\n\n----------------------------------------\n\nTITLE: Accessing data with custom variable name - Vento\nDESCRIPTION: This code shows how to access data passed to a Vento template when a custom `dataVarname` is specified.  It demonstrates using the `global` variable to access the `title` property.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_3\n\nLANGUAGE: vento\nCODE:\n```\n{{ global.title }}\n```\n\n----------------------------------------\n\nTITLE: Trimming Whitespace with Vento\nDESCRIPTION: This snippet demonstrates whitespace trimming using the `-` character within the opening tag.  The `-` removes whitespace before the printed content, affecting how the HTML is rendered.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/1.print.md#_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n<h1>\n  {{- \"Hello, world!\" }}\n</h1>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Vento Template Environment in JavaScript\nDESCRIPTION: Creates a new instance of the Vento template engine environment by invoking the default exported function without arguments. This instance manages the template cache and rendering state.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/1.getting-started.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst env = vento();\n```\n\n----------------------------------------\n\nTITLE: Registering custom filter in Vento - JavaScript\nDESCRIPTION: This code registers a custom filter function (defined previously) with the Vento environment. Registering a filter makes it available for use within your Vento templates.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/2.configuration.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nenv.filters.italic = italic;\n```\n\n----------------------------------------\n\nTITLE: Using an Exported Function in the Current Template\nDESCRIPTION: Demonstrates that exported functions are accessible within the same template where they are defined.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_6\n\nLANGUAGE: vento\nCODE:\n```\n{{ export function message (name) }}\n  Hello, {{ name }}!\n{{ /export }}\n\n{{ message(\"world\") }}\n```\n\n----------------------------------------\n\nTITLE: Importing Specific Exports in Vento\nDESCRIPTION: Shows how to import specific named exports (like variables or functions) from another template file.\nSOURCE: https://github.com/ventojs/vento/blob/main/docs/4.syntax/10.import-export.md#_snippet_7\n\nLANGUAGE: vento\nCODE:\n```\n{{ import { message } from \"./vars.vto\" }}\n\n{{ message }}\n```"
  }
]