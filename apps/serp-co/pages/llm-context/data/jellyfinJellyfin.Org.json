[
  {
    "owner": "jellyfin",
    "repo": "jellyfin.org",
    "content": "TITLE: Pulling Jellyfin Docker Image\nDESCRIPTION: Command to download the latest Jellyfin container image from Docker Hub.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Inspecting and executing Jellyfin installation script\nDESCRIPTION: These commands allow you to inspect the contents of the Jellyfin installation script using 'less' and then execute it with sudo privileges.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/linux.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nless install-debuntu.sh\nsudo bash install-debuntu.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin on Debian/Ubuntu using BASH script\nDESCRIPTION: This command downloads and executes a BASH script to install Jellyfin on Debian/Ubuntu and derivative systems. It requires curl or wget to be installed.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/linux.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl https://repo.jellyfin.org/install-debuntu.sh | sudo bash\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Systemd Container Configuration with Hardware Acceleration\nDESCRIPTION: An enhanced systemd container configuration that includes hardware acceleration support via device mapping. It provides container definitions for Jellyfin with DRI device access and additional settings for persistent storage and networking.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n[Unit]\nDescription=jellyfin\n\n[Container]\nImage=docker.io/jellyfin/jellyfin:latest\nAutoUpdate=registry\nPublishPort=8096:8096/tcp\nUserNS=keep-id\n#SecurityLabelDisable=true # Only needed for older versions of container-selinux < 2.226\nAddDevice=/dev/dri/:/dev/dri/\nVolume=jellyfin-config:/config:Z\nVolume=jellyfin-cache:/cache:Z\nVolume=jellyfin-media:/media:Z\n\n[Service]\n# Inform systemd of additional exit status\nSuccessExitStatus=0 143\n\n[Install]\n# Start by default on boot\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Menu Links in Jellyfin Web\nDESCRIPTION: JSON configuration example for adding custom links to the Jellyfin navigation menu. Links can include names, URLs, and optional custom icons from Material Design Icons.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/web-config.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"menuLinks\": [\n    {\n        \"name\": \"Custom Link\",\n        \"url\": \"https://jellyfin.org\"\n    },\n    {\n        \"name\": \"Custom Link w. Custom Icon\",\n        \"icon\": \"attach_money\",\n        \"url\": \"https://demo.jellyfin.org/stable\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for TV Shows in Jellyfin\nDESCRIPTION: Example of recommended folder and file organization for TV shows, including multiple seasons, specials, and multi-part episodes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/shows.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nShows\n├── Series Name A (2010)\n│   ├── Season 00\n│   │   ├── Some Special.mkv\n│   │   ├── Series Name A S00E01.mkv\n│   │   └── Series Name A S00E02.mkv\n│   ├── Season 01\n│   │   ├── Series Name A S01E01-E02.mkv\n│   │   ├── Series Name A S01E03.mkv\n│   │   └── Series Name A S01E04.mkv\n│   └── Season 02\n│       ├── Series Name A S02E01.mkv\n│       ├── Series Name A S02E02.mkv\n│       ├── Series Name A S02E03 Part 1.mkv\n│       └── Series Name A S02E03 Part 2.mkv\n└── Series Name B (2018)\n    ├── Season 01\n    |   ├── Series Name B S01E01.mkv\n    |   └── Series Name B S01E02.mkv\n    └── Season 02\n        ├── Series Name B S02E01-E02.mkv\n        └── Series Name B S02E03.mkv\n```\n\n----------------------------------------\n\nTITLE: Verifying jellyfin-ffmpeg Version in Shell\nDESCRIPTION: Command to check the version of jellyfin-ffmpeg to ensure it has the required '-Jellyfin' suffix for full hardware acceleration support.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/index.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ /usr/lib/jellyfin-ffmpeg/ffmpeg\n\nffmpeg version 6.0.1-Jellyfin Copyright (c) 2000-2023 the FFmpeg developers\n  built with gcc 12.2.0 (crosstool-NG 1.25.0.90_cf9beb1)\n...\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Docker Container\nDESCRIPTION: Docker command to create and run a Jellyfin container with host networking, bind mounts for configuration, cache, and media, and optional font directories.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d \\\n --name jellyfin \\\n --user uid:gid \\\n --net=host \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --mount type=bind,source=/path/to/media,target=/media \\\n --restart=unless-stopped \\\n jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Basic Movie Folder Structure Example\nDESCRIPTION: Demonstrates the basic folder structure for organizing movies in Jellyfin, including single files and movies split across folders.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n├── Film (1990).mp4\n├── Film (1994).mp4\n├── Film (2008)\n│   └── Film.mkv\n└── Film (2010)\n    ├── Film-cd1.avi\n    └── Film-cd2.avi\n```\n\n----------------------------------------\n\nTITLE: Checking Available GPUs with lspci in Linux\nDESCRIPTION: Shell command using lspci to identify graphics cards available in a Linux system for hardware acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/index.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nlspci -nn | grep -Ei \"3d|display|vga\"\n```\n\n----------------------------------------\n\nTITLE: Censoring Sensitive Information in Nginx Logs\nDESCRIPTION: Configuration for censoring the API key parameter from Nginx logs for Jellyfin. Creates a custom log format that filters out sensitive information from request URLs and implements it in the access log configuration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/nginx.md#2025-04-21_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\n#Must be in HTTP block\nlog_format stripsecrets '$remote_addr $host - $remote_user [$time_local] '\n                    '\"$secretfilter\" $status $body_bytes_sent '\n                    '$request_length $request_time $upstream_response_time '\n                    '\"$http_referer\" \"$http_user_agent\"';\n\nmap $request $secretfilter {\n    ~*^(?<prefix1>.*[\\?&]api_key=)([^&]*)(?<suffix1>.*)$  \"${prefix1}***$suffix1\";\n    default                                               $request;\n}\n\n#Must be inside server block\n#Insert into all servers where you want filtering (e.g HTTP + HTTPS block)\naccess_log /var/log/nginx/access.log stripsecrets;\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Kubernetes Deployment Configuration with Hardware Acceleration\nDESCRIPTION: Kubernetes YAML configuration for a Jellyfin deployment with Intel GPU hardware acceleration. Sets up security contexts, supplemental groups, volume mounts, and device mapping for the GPU.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# Example of an incomplete deployment spec\napiVersion: apps/v1\nkind: Deployment\nmetadata: ...\nspec:\n  template:\n    metadata: ...\n    spec:\n      securityContext:\n        runAsUser: 1000 # Similar to \"user: 1000:1000\" on Docker\n        runAsGroup: 1000\n        supplementalGroups:\n          - 122 # Change this to match your \"render\" host group id and remove this comment\n      containers:\n        - name: \"jellyfin\"\n          image: ...\n          ports: ...\n          env: ...\n          securityContext:\n            privileged: true # Container must run as privileged inside of the pod\n          volumeMounts:\n            - name: \"render-device\"\n              mountPath: \"/dev/dri/renderD128\"\n      volumes:\n        - name: \"render-device\"\n          hostPath:\n            path: \"/dev/dri/renderD128\"\n```\n\n----------------------------------------\n\nTITLE: Basic Music Folder Structure for Jellyfin\nDESCRIPTION: Example of a properly organized music folder structure for Jellyfin, showing how albums should be contained in their own folders with artist organization.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nMusic\n├── Some Artist\n│   ├── Album A\n│   │   ├── Song 1.flac\n│   │   ├── Song 2.flac\n│   │   └── Song 3.flac\n│   └── Album B\n│       ├── Track 1.m4a\n│       ├── Track 2.m4a\n│       └── Track 3.m4a\n└── Album X\n    ├── Whatever You.mp3\n    ├── Like To.mp3\n    ├── Name Your.mp3\n    └── Music Files.mp3\n```\n\n----------------------------------------\n\nTITLE: Checking Display Hardware with lshw in Linux\nDESCRIPTION: Alternative command using lshw to identify display hardware in a Linux system for hardware acceleration setup.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/index.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nlshw -C display\n```\n\n----------------------------------------\n\nTITLE: Verifying Jellyfin installation script integrity\nDESCRIPTION: This command verifies the integrity of the Jellyfin installation script by comparing its SHA256 checksum with the provided checksum file. It requires sha256sum to be installed.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/linux.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndiff <( curl -s https://repo.jellyfin.org/install-debuntu.sh -o install-debuntu.sh; sha256sum install-debuntu.sh ) <( curl -s https://repo.jellyfin.org/install-debuntu.sh.sha256sum )\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Dependencies on Ubuntu\nDESCRIPTION: Commands to install required NVIDIA libraries for decode and encode support on Ubuntu systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y libnvidia-decode libnvidia-encode\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Docker Compose\nDESCRIPTION: Command to start the Jellyfin container using Docker Compose.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Startup Script for Linux\nDESCRIPTION: Bash script to start Jellyfin on Linux with appropriate parameters for data, cache, config, and log directories, as well as the path to FFmpeg.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\nJELLYFINDIR=\"/opt/jellyfin\"\nFFMPEGDIR=\"/usr/share/jellyfin-ffmpeg\"\n\n$JELLYFINDIR/jellyfin/jellyfin \\\n -d $JELLYFINDIR/data \\\n -C $JELLYFINDIR/cache \\\n -c $JELLYFINDIR/config \\\n -l $JELLYFINDIR/log \\\n --ffmpeg $FFMPEGDIR/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Checking VA-API Codec Support\nDESCRIPTION: Command to verify the VA-API codecs supported by the GPU using the vainfo utility from jellyfin-ffmpeg. This helps determine which hardware acceleration features can be enabled in Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/vainfo --display drm --device /dev/dri/renderD128\n\nlibva info: VA-API version 1.17.0\nlibva info: Trying to open /usr/lib/jellyfin-ffmpeg/lib/dri/radeonsi_drv_video.so\nlibva info: Found init function __vaDriverInit_1_17\nlibva info: va_openDriver() returns 0\nTrying display: drm\nvainfo: VA-API version: 1.17 (libva 2.17.0)\nvainfo: Driver version: Mesa Gallium driver 23.1.0-devel for AMD Radeon RX Vega (vega10, LLVM 15.0.7, DRM 3.49, 6.1.14-1)\nvainfo: Supported profile and entrypoints\n...\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Docker Compose Configuration\nDESCRIPTION: Basic Docker Compose configuration for Jellyfin container deployment. Includes volume mapping, network settings, resource limits, and optional hardware acceleration settings. The configuration allows customization of user permissions, timezone, ports, and storage locations.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/truenas.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    container_name: jellyfin\n    image: ghcr.io/jellyfin/jellyfin:latest\n    user: '568:568'\n    # group_add:\n    # - '107'\n    # devices:\n    # - /dev/dri/renderD128:/dev/dri/renderD128\n    # - /dev/dri/card0:/dev/dri/card0\n    environment:\n      - TZ=America/Los_Angeles\n    network_mode: bridge\n    ports:\n      - 8096:8096/tcp\n    # cpus: '8' # optional\n    # mem_limit: 16G # optional\n    restart: unless-stopped\n    volumes:\n      - /mnt/path/to/config:/config:rw\n      - /mnt/path/to/cache:/cache:rw\n      # rw = read & write\n      # ro = read only\n```\n\n----------------------------------------\n\nTITLE: HTTPS Caddyfile Configuration for Jellyfin with Domain Name\nDESCRIPTION: A Caddyfile configuration for setting up Caddy as an HTTPS reverse proxy for Jellyfin using a domain name, which automatically handles TLS certificate provisioning.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nexample.com\n\nreverse_proxy 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Restoring Admin Permissions in Jellyfin Database\nDESCRIPTION: This SQL command repairs admin permissions by enabling all standard administrator capabilities. It updates the Permissions table to set multiple permission kinds to enabled (Value=1) for the specified admin user.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Permissions SET Value = 1 WHERE (Kind = 0 OR Kind = 3 OR Kind = 4 OR Kind = 5 OR Kind = 6 OR Kind = 7 OR Kind = 8 OR Kind = 9 OR Kind = 10 OR Kind = 11 OR Kind = 12 OR Kind = 13 OR Kind = 14 OR Kind = 15 OR Kind = 16 OR Kind = 17 OR Kind = 18 OR Kind = 19 OR Kind = 20 OR Kind = 21) AND UserId IN (SELECT Id FROM Users WHERE Username = 'AdminUsername');\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Docker Container via Docker CLI\nDESCRIPTION: Docker command for migrating a Linux installation to Docker while maintaining the same file paths and permissions. Mounts appropriate volumes and sets environment variables to match the original installation paths.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d \\\n    --user <uid>:<gid> \\\n    -e JELLYFIN_CACHE_DIR=/var/cache/jellyfin \\\n    -e JELLYFIN_CONFIG_DIR=/etc/jellyfin \\\n    -e JELLYFIN_DATA_DIR=/var/lib/jellyfin \\\n    -e JELLYFIN_LOG_DIR=/var/log/jellyfin \\\n    --mount type=bind,source=/etc/jellyfin,target=/etc/jellyfin \\\n    --mount type=bind,source=/var/cache/jellyfin,target=/var/cache/jellyfin \\\n    --mount type=bind,source=/var/lib/jellyfin,target=/var/lib/jellyfin \\\n    --mount type=bind,source=/var/log/jellyfin,target=/var/log/jellyfin \\\n    --mount type=bind,source=</path/to/media>,target=</path/to/media> \\\n    --net=host \\\n    --restart=unless-stopped \\\n    jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: HTTPS Reverse Proxy Command in Caddy with Domain Name\nDESCRIPTION: A one-line command to set up Caddy as an HTTPS reverse proxy for Jellyfin using a domain name, which automatically provisions a TLS certificate for the domain.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from example.com --to 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Checking Device Permissions for GPU Access\nDESCRIPTION: Command to list DRI devices and their permissions, which helps identify the render devices available for hardware acceleration and their associated group permissions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ls -l /dev/dri\n\ntotal 0\ndrwxr-xr-x  2 root root        120 Mar  5 05:15 by-path\ncrw-rw----+ 1 root video  226,   0 Mar  5 05:15 card0\ncrw-rw----+ 1 root video  226,   1 Mar  5 05:15 card1\ncrw-rw----+ 1 root render 226, 128 Mar  5 05:15 renderD128\ncrw-rw----+ 1 root render 226, 129 Mar  5 05:15 renderD129\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Virtual Host for Jellyfin Root Path\nDESCRIPTION: Apache virtual host configuration for Jellyfin at the root path with SSL/TLS support. Includes HTTP to HTTPS redirect, WebSocket proxy, and security settings for SSL/TLS.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/apache.md#2025-04-21_snippet_0\n\nLANGUAGE: conf\nCODE:\n```\n<VirtualHost *:80>\n    ServerName DOMAIN_NAME\n\n    # Comment to prevent HTTP to HTTPS redirect\n    Redirect permanent / https://DOMAIN_NAME/\n\n    ErrorLog /var/log/apache2/DOMAIN_NAME-error.log\n    CustomLog /var/log/apache2/DOMAIN_NAME-access.log combined\n</VirtualHost>\n\n# If you are not using a SSL certificate, replace the 'redirect'\n# line above with all lines below starting with 'Proxy'\n<IfModule mod_ssl.c>\n<VirtualHost *:443>\n    ServerName DOMAIN_NAME\n    # This folder exists just for certbot (You may have to create it, chown and chmod it to give apache permission to read it)\n    DocumentRoot /var/www/html/jellyfin/public_html\n\n    ProxyPreserveHost On\n\n    # Letsencrypt's certbot will place a file in this folder when updating/verifying certs\n    # This line will tell apache to not to use the proxy for this folder.\n    ProxyPass \"/.well-known/\" \"!\"\n\n    # Tell Jellyfin to forward requests that came from TLS connections\n    RequestHeader set X-Forwarded-Proto \"https\"\n    RequestHeader set X-Forwarded-Port \"443\"\n\n    ProxyPass \"/socket\" \"ws://SERVER_IP_ADDRESS:8096/socket\"\n    ProxyPassReverse \"/socket\" \"ws://SERVER_IP_ADDRESS:8096/socket\"\n\n    ProxyPass \"/\" \"http://SERVER_IP_ADDRESS:8096/\"\n    ProxyPassReverse \"/\" \"http://SERVER_IP_ADDRESS:8096/\"\n\n    SSLEngine on\n    SSLCertificateFile /etc/letsencrypt/live/DOMAIN_NAME/fullchain.pem\n    SSLCertificateKeyFile /etc/letsencrypt/live/DOMAIN_NAME/privkey.pem\n    Protocols h2 http/1.1\n\n    # Enable only strong encryption ciphers and prefer versions with Forward Secrecy\n    SSLCipherSuite HIGH:RC4-SHA:AES128-SHA:!aNULL:!MD5\n    SSLHonorCipherOrder on\n\n    # Disable insecure SSL and TLS versions\n    SSLProtocol all -SSLv2 -SSLv3 -TLSv1 -TLSv1.1\n\n    ErrorLog /var/log/apache2/DOMAIN_NAME-error.log\n    CustomLog /var/log/apache2/DOMAIN_NAME-access.log combined\n</VirtualHost>\n</IfModule>\n```\n\n----------------------------------------\n\nTITLE: Setting Permissions for Jellyfin on Linux\nDESCRIPTION: Shell commands to set appropriate ownership and execution permissions for Jellyfin files on Linux, allowing a non-root user to run the service.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsudo chown -R user:group *\nsudo chmod u+x jellyfin.sh\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Container with Podman\nDESCRIPTION: Podman command to create and run a Jellyfin container with rootless mode, published ports, volumes for config and cache, and a bind mount for media.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npodman run \\\n --detach \\\n --label \"io.containers.autoupdate=registry\" \\\n --name myjellyfin \\\n --publish 8096:8096/tcp \\\n --rm \\\n --user $(id -u):$(id -g) \\\n --userns keep-id \\\n --volume jellyfin-cache:/cache:Z \\\n --volume jellyfin-config:/config:Z \\\n --mount type=bind,source=/path/to/media,destination=/media,ro=true,relabel=private \\\n docker.io/jellyfin/jellyfin:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring HAProxy Reverse Proxy for Jellyfin\nDESCRIPTION: HAProxy configuration that sets up a reverse proxy for Jellyfin server with optional SSL certificate support and LetsEncrypt authentication. Includes health checks and forwarding rules for both HTTP and HTTPS traffic.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/haproxy.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nfrontend jellyfin_proxy\n    bind *:80\n\n# Note that haproxy requires you to concatenate the certificate and key into a single file\n# Uncomment the appropriate lines after you have acquired a SSL Certificate\n#\n#  HAProxy <1.7\n#    bind *:443 ssl crt /etc/ssl/DOMAIN_NAME.pem\n#\n#  HAProxy >1.8\n#    bind *:443 ssl crt /etc/ssl/DOMAIN_NAME.pem alpn h2,http/1.1\n#    redirect scheme https if !{ ssl_fc }\n#\n# Uncomment these lines to allow LetsEncrypt authentication\n#    acl letsencrypt_auth path_beg /.well-known/acme-challenge/\n#    use_backend letsencrypt if letsencrypt_auth\n\n    acl jellyfin_server hdr(host) -i DOMAIN_NAME\n    use_backend jellyfin if jellyfin_server\n\nbackend jellyfin\n    option httpchk\n    option forwardfor\n    http-check send meth GET uri /health\n    http-check expect string Healthy\n    server jellyfin SERVER_IP_ADDRESS:8096\n\n# Uncomment these lines to allow LetsEncrypt authentication\n#\n#backend letsencrypt\n#    server letsencrypt 127.0.0.1:8888\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Utils on Arch Linux\nDESCRIPTION: Command to install NVIDIA utilities package for NVENC and NVDEC support on Arch Linux.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu nvidia-utils\n```\n\n----------------------------------------\n\nTITLE: Creating a timestamped Jellyfin backup on Debian\nDESCRIPTION: This Bash script creates a timestamped backup of Jellyfin data and configuration directories on a Debian-based system. It uses the current date and specified Jellyfin version to create a uniquely named directory, then copies both data and configuration folders to this location.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/backup-and-restore.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nTIMESTAMP=$(date +%Y%m%d%H%M%S)\nVERSION=10.9.10\nsudo mkdir -p /media/backups/jellyfin.${TIMESTAMP}_${VERSION}  # Or change the path wherever in your system makes sense to you\nsudo cp -a /var/lib/jellyfin /media/backups/jellyfin.${TIMESTAMP}_${VERSION}/data\nsudo cp -a /etc/jellyfin /media/backups/jellyfin.${TIMESTAMP}_${VERSION}/config\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin in Docker with Hardware Acceleration\nDESCRIPTION: Docker command to run Jellyfin with Intel GPU hardware acceleration. This configuration mounts necessary directories, sets the correct user permissions, adds the container to the render group, and passes the GPU device to the container.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n --name=jellyfin \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --volume /path/to/media:/media \\\n --user 1000:1000 \\\n --group-add=\"122\" \\ # Change this to match your \"render\" host group id and remove this comment\n --net=host \\\n --restart=unless-stopped \\\n --device /dev/dri/renderD128:/dev/dri/renderD128 \\\n jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin Packages\nDESCRIPTION: Installs Jellyfin metapackage or individual components\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install jellyfin\n```\n\n----------------------------------------\n\nTITLE: Adding Jellyfin User to Render Group on Linux\nDESCRIPTION: Commands to add the jellyfin user to the render group (which has permissions to access GPU devices) and restart the jellyfin service to apply the changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG render jellyfin\nsudo systemctl restart jellyfin\n```\n\n----------------------------------------\n\nTITLE: Deploying Jellyfin Vue with Docker Compose\nDESCRIPTION: This Docker Compose configuration sets up Jellyfin Vue and Watchtower for automatic updates. It exposes Jellyfin Vue on port 8080 and configures Watchtower to update the container regularly.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/jellyfin-vue.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin_vue:\n    container_name: jellyfin_vue\n    image: ghcr.io/jellyfin/jellyfin-vue:unstable\n    restart: always\n    ports:\n      - 8080:80\n    labels:\n      - 'com.centurylinklabs.watchtower.enable=true'\n\n  watchtower:\n    container_name: watchtower\n    image: ghcr.io/containrrr/watchtower\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n    environment:\n      TZ: Europe/Madrid\n      WATCHTOWER_CLEANUP: 1\n      WATCHTOWER_INCLUDE_RESTARTING: 1\n      WATCHTOWER_POLL_INTERVAL: 60\n      WATCHTOWER_LABEL_ENABLE: 1\n    restart: on-failure\n```\n\n----------------------------------------\n\nTITLE: Installing Portable jellyfin-ffmpeg on Linux\nDESCRIPTION: Commands to download, extract, and install the portable jellyfin-ffmpeg binary on a Linux system. This process requires root permissions and includes steps to verify the installation.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/\nmkdir -p jellyfin-ffmpeg\nwget https://repo.jellyfin.org/releases/ffmpeg/<VERSION>/jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz\ntar -xvf jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz -C jellyfin-ffmpeg\nsudo mv jellyfin-ffmpeg /usr/lib\nsudo ldd -v /usr/lib/jellyfin-ffmpeg/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Creating a Jellyfin Systemd Container Configuration\nDESCRIPTION: This configuration file defines how Jellyfin should run as a Podman container managed by systemd. It specifies the container image, port mapping, volume mounts for configuration, cache, and media storage.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n[Container]\nImage=docker.io/jellyfin/jellyfin:latest\nAutoUpdate=registry\nPublishPort=8096:8096/tcp\nUserNS=keep-id\nVolume=jellyfin-config:/config:Z\nVolume=jellyfin-cache:/cache:Z\nVolume=jellyfin-media:/media:Z\n\n[Service]\n# Inform systemd of additional exit status\nSuccessExitStatus=0 143\n\n[Install]\n# Start by default on boot\nWantedBy=default.target\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Caddyfile Configuration for Jellyfin\nDESCRIPTION: A Caddyfile configuration equivalent to the basic HTTP reverse proxy command, setting up Caddy to listen on port 5001 and proxy requests to Jellyfin at 127.0.0.1:8096.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n:5001\n\nreverse_proxy 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Docker Run Command for Jellyfin\nDESCRIPTION: Docker command line configuration for running Jellyfin container with hardware acceleration support, including volume mounts and device mappings.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n --name=jellyfin \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --volume /path/to/media:/media \\\n --user 1000:1000 \\\n --group-add=\"122\" \\ # Change this to match your \"render\" host group id and remove this comment\n --net=host \\\n --restart=unless-stopped \\\n --device /dev/dri/renderD128:/dev/dri/renderD128 \\\n jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Installing Portable Jellyfin FFmpeg on Other Linux Distributions\nDESCRIPTION: Commands to download, extract, and install the portable Jellyfin FFmpeg package for Linux distributions without official package support. This includes verifying the installation with ldd.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/\nmkdir -p jellyfin-ffmpeg\nwget https://repo.jellyfin.org/releases/ffmpeg/<VERSION>/jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz\ntar -xvf jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz -C jellyfin-ffmpeg\nsudo mv jellyfin-ffmpeg /usr/lib\nsudo ldd -v /usr/lib/jellyfin-ffmpeg/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Opening Firewall Port for Jellyfin\nDESCRIPTION: Firewall commands to open port 8096 for Jellyfin HTTP traffic using firewalld.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo firewall-cmd --add-port=8096/tcp --permanent\nsudo firewall-cmd --reload\n```\n\n----------------------------------------\n\nTITLE: Creating Persistent Storage for Jellyfin Docker Container\nDESCRIPTION: Commands to create directories for configuration and cache data, or create Docker volumes for persistent storage.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir /path/to/config\nmkdir /path/to/cache\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker volume create jellyfin-config\ndocker volume create jellyfin-cache\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Docker Container with NVIDIA GPU Access\nDESCRIPTION: Docker run command to start a Jellyfin container with NVIDIA GPU access. This configuration mounts necessary volumes, sets user permissions, and enables GPU capabilities.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n --name=jellyfin \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --volume /path/to/media:/media \\\n --user 1000:1000 \\\n --net=host \\\n --restart=unless-stopped \\\n --runtime=nvidia \\\n --gpus all \\\n jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Creating Fail2ban Jail for Jellyfin\nDESCRIPTION: This snippet shows the configuration for a Fail2ban jail specific to Jellyfin. It sets up monitoring for failed authentication attempts on specified ports.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/fail2ban.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[jellyfin]\n\nbackend = auto\nenabled = true\nport = 80,443\nprotocol = tcp\nfilter = jellyfin\nmaxretry = 3\nbantime = 86400\nfindtime = 43200\nlogpath = /path_to_logs/jellyfin*.log\n```\n\n----------------------------------------\n\nTITLE: Enabling Required Apache Modules\nDESCRIPTION: Command to enable necessary Apache modules for Jellyfin reverse proxy functionality including proxy, SSL, WebSocket tunneling, and HTTP/2 support.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/apache.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo a2enmod proxy proxy_http ssl proxy_wstunnel remoteip http2 headers\n```\n\n----------------------------------------\n\nTITLE: Nginx Proxy Manager Custom Configuration for Jellyfin\nDESCRIPTION: Custom Nginx configuration snippet for use with Nginx Proxy Manager's advanced tab. Disables buffering to improve streaming performance with Jellyfin when using the Nginx Proxy Manager GUI tool.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/nginx.md#2025-04-21_snippet_2\n\nLANGUAGE: config\nCODE:\n```\n    # Disable buffering when the nginx proxy gets very resource heavy upon streaming\n    proxy_buffering off;\n```\n\n----------------------------------------\n\nTITLE: Checking VA-API Support on Linux\nDESCRIPTION: Command using vainfo to check supported VA-API codecs and driver information on a specific render device. This helps verify proper hardware acceleration configuration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/vainfo --display drm --device /dev/dri/renderD128\n\nlibva info: VA-API version 1.17.0\nlibva info: Trying to open /usr/lib/jellyfin-ffmpeg/lib/dri/iHD_drv_video.so\nlibva info: Found init function __vaDriverInit_1_17\nlibva info: va_openDriver() returns 0\nTrying display: drm\nvainfo: VA-API version: 1.17 (libva 2.17.0)\nvainfo: Driver version: Intel iHD driver for Intel(R) Gen Graphics - 23.1.2 (xxxxxxx)\nvainfo: Supported profile and entrypoints\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Jellyfin as a System Service on Linux\nDESCRIPTION: Shell commands to set permissions for the Jellyfin service file, reload systemd, enable the service to start on boot, and start the service immediately.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nsudo chmod 644 jellyfin.service\nsudo systemctl daemon-reload\nsudo systemctl enable jellyfin.service\nsudo systemctl start jellyfin.service\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Docker Compose Configuration with NVIDIA GPU Support\nDESCRIPTION: Docker Compose YAML configuration for running Jellyfin with NVIDIA GPU support. This setup includes volume mounts, network settings, and GPU resource reservations.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    user: 1000:1000\n    network_mode: 'host'\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - /path/to/media:/media\n    runtime: nvidia\n    deploy:\n      resources:\n        reservations:\n          devices:\n            - driver: nvidia\n              count: all\n              capabilities: [gpu]\n```\n\n----------------------------------------\n\nTITLE: Creating Data Directories for Jellyfin on Linux\nDESCRIPTION: Shell command to create necessary data subdirectories for Jellyfin on Linux, including directories for data, cache, configuration, and logs.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir data cache config log\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Jellyfin\nDESCRIPTION: YAML configuration for docker-compose setup of Jellyfin with hardware acceleration support.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    user: 1000:1000\n    group_add:\n      - \"122\" # Change this to match your \"render\" host group id and remove this comment\n    network_mode: 'host'\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - /path/to/media:/media\n    devices:\n      - /dev/dri/renderD128:/dev/dri/renderD128\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin FFmpeg Package on Debian/Ubuntu\nDESCRIPTION: Command to update apt repositories and install the jellyfin-ffmpeg7 package, which contains the necessary components for hardware acceleration on Debian-based systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y jellyfin-ffmpeg7\n```\n\n----------------------------------------\n\nTITLE: Enabling All Video Codecs in Mesa Driver for AMD Linux Systems\nDESCRIPTION: Command to rebuild the Mesa driver with options to restore hardware codecs that were stripped from some Linux distributions like Fedora, OpenSUSE, and Manjaro. This is necessary to use AMD VA-API transcoding on the server system.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/known-issues.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-D video-codecs=all\n```\n\n----------------------------------------\n\nTITLE: Managing Jellyfin Service\nDESCRIPTION: Commands for managing the Jellyfin system service using systemctl or service\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl {action} jellyfin\nsudo service jellyfin {action}\n```\n\n----------------------------------------\n\nTITLE: Media Container Compatibility Table in Markdown\nDESCRIPTION: Markdown table showing container format compatibility across different platforms, including MP4, MKV, WebM, TS, and OGG containers. Includes detailed footnotes about container-specific behaviors and limitations.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/codec-support.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n|                               Container                               | Chrome | Edge | Firefox | Safari | Android | Android TV | Kodi | Roku |\n| :-------------------------------------------------------------------: | :----: | :--: | :-----: | :----: | :-----: | :--------: | :--: | :--: |\n|    [MP4](https://en.wikipedia.org/wiki/MPEG-4_Part_14)<sup>1</sup>    |   ✅   |  ✅  |   ✅    |   ✅   |   ✅    |     ✅     |  ✅  |  ✅  |\n|     [MKV](https://en.wikipedia.org/wiki/Matroska)<sup>2, 3</sup>      |   ❌   |  ✅  |   ❌    |   ❌   |   ✅    |     ✅     |  ✅  |  ✅  |\n|     [WebM](https://en.wikipedia.org/wiki/WebM)<sup>3, 5, 6</sup>      |   ✅   |  ✅  |   ✅    |   ✅   |   ✅    |     ✅     |  ✅  |  ✅  |\n| [TS](https://en.wikipedia.org/wiki/MPEG_transport_stream)<sup>4</sup> |   ✅   |  ✅  |   ✅    |   ✅   |   ✅    |     ✅     |  ✅  |  ✅  |\n|        [OGG](https://en.wikipedia.org/wiki/Ogg)<sup>5, 7</sup>        |   ✅   |  ✅  |   ✅    |   ✅   |   ✅    |     ✅     |  ✅  |  ✅  |\n```\n\n----------------------------------------\n\nTITLE: Configuring User and Docker for NVIDIA GPU Access\nDESCRIPTION: Shell commands to add the user to the video group, update dynamic links, and restart the Docker service to ensure proper NVIDIA GPU access for Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG video $USER\ndocker exec -it jellyfin ldconfig\nsudo systemctl restart docker\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin with Custom Data Location in Windows Batch Script\nDESCRIPTION: A Windows batch command to run Jellyfin with a custom data location specified using the -d parameter. This allows storing Jellyfin data in a user-defined directory.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n<--Your install path-->\\jellyfin\\system\\jellyfin.exe -d <--Your install path-->\\jellyfin\\data\n```\n\n----------------------------------------\n\nTITLE: Checking VA-API Codecs in Jellyfin Docker Container\nDESCRIPTION: Command to verify available QSV and VA-API codecs in a running Jellyfin Docker container. This helps confirm that hardware acceleration is properly configured.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it jellyfin /usr/lib/jellyfin-ffmpeg/vainfo\n```\n\n----------------------------------------\n\nTITLE: Mounting a Custom Web Config in Docker\nDESCRIPTION: Docker command example showing how to override the default config.json file by mounting a local file into the container.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/web-config.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n--volume /path/to/config/web-config.json:/jellyfin/jellyfin-web/config.json\n```\n\n----------------------------------------\n\nTITLE: Resolving Dependencies\nDESCRIPTION: Fixes missing dependencies after manual package installation\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt -f install\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin FFmpeg Package on Debian/Ubuntu Linux\nDESCRIPTION: Command to install the jellyfin-ffmpeg7 package which includes necessary Intel media drivers for hardware acceleration on Debian or Ubuntu Linux systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y jellyfin-ffmpeg7\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Docker Compose Configuration with Hardware Acceleration\nDESCRIPTION: Docker Compose YAML configuration for Jellyfin with Intel GPU hardware acceleration. Sets up volumes, networking, user permissions, and device mapping for the Intel GPU render node.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    user: 1000:1000\n    group_add:\n      - \"122\" # Change this to match your \"render\" host group id and remove this comment\n    network_mode: 'host'\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - /path/to/media:/media\n    devices:\n      - /dev/dri/renderD128:/dev/dri/renderD128\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Locked User Account with SQLite\nDESCRIPTION: These SQL commands reset a locked user account in Jellyfin by clearing the invalid login attempt counter and resetting the lockout flag. This is useful when an admin account is locked and password recovery isn't working.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nUPDATE Users SET InvalidLoginAttemptCount = 0 WHERE Username = 'LockedUserName';\nUPDATE Permissions SET Value = 0 WHERE Kind = 2 AND UserId IN (SELECT Id FROM Users WHERE Username = 'LockedUserName');\n```\n\n----------------------------------------\n\nTITLE: Enabling Prometheus Metrics in Jellyfin Configuration\nDESCRIPTION: XML configuration snippet showing how to enable Prometheus metrics in Jellyfin by modifying the system.xml file. By default, metrics are disabled for security reasons.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/monitoring.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<EnableMetrics>false</EnableMetrics>\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenCL Runtime in Jellyfin Docker Container\nDESCRIPTION: Command to check the OpenCL runtime status in a Jellyfin Docker container. This validates that both VA-API and OpenCL hardware acceleration are properly initialized.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it jellyfin /usr/lib/jellyfin-ffmpeg/ffmpeg -v verbose -init_hw_device vaapi=va -init_hw_device opencl@va\n```\n\n----------------------------------------\n\nTITLE: Installing VA-API Utilities and Checking Support on Arch Linux\nDESCRIPTION: Commands to install the libva-utils package and check VA-API support and driver status on Arch Linux systems, which is necessary for hardware acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu libva-utils\nsudo vainfo --display drm --device /dev/dri/renderD128\nsudo /usr/lib/jellyfin-ffmpeg/ffmpeg -v verbose -init_hw_device vaapi=va:/dev/dri/renderD128 -init_hw_device opencl@va\n```\n\n----------------------------------------\n\nTITLE: Querying Render Group ID for Docker/Container Setup in Linux\nDESCRIPTION: Command to identify the render group ID on the host system, which is needed for properly passing GPU access to containers running Jellyfin. This group ID is critical for hardware acceleration permissions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngetent group render | cut -d: -f3\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify Watch Limit for Debian/RedHat Linux\nDESCRIPTION: This shell command increases the maximum number of inotify watches to 524288 on Debian or RedHat-based Linux systems. This resolves issues with real-time monitoring when Jellyfin needs to watch large media libraries.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.d/40-max-user-watches.conf && sudo sysctl -p\n```\n\n----------------------------------------\n\nTITLE: Proxmox VE LXC Container Configuration for Intel GPU Passthrough\nDESCRIPTION: Configuration to be added to a Proxmox VE LXC container configuration file to enable Intel GPU passthrough. Sets up cgroup permissions and device mounts for the render device.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_18\n\nLANGUAGE: conf\nCODE:\n```\nlxc.cgroup2.devices.allow: c 226:0 rwm\nlxc.cgroup2.devices.allow: c 226:128 rwm\nlxc.mount.entry: /dev/dri/renderD128 dev/dri/renderD128 none bind,optional,create=file\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in Jellyfin with JSON Configuration\nDESCRIPTION: This JSON configuration enables debug logging in Jellyfin by modifying the logging.json file to set the minimum log level to Debug. This creates extensive logs that are useful for troubleshooting but should be disabled in production environments.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Debug\",\n      \"Override\": {\n        \"\": \"Debug\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Intel OpenCL ICD on Debian/Ubuntu\nDESCRIPTION: Command to install the Intel OpenCL Implementation (ICD) package which provides OpenCL support for Intel GPUs, required for certain hardware acceleration features.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install -y intel-opencl-icd\n```\n\n----------------------------------------\n\nTITLE: Configuring udev Rules for Rockchip Devices\nDESCRIPTION: udev rules to set appropriate permissions for Rockchip devices, ensuring Jellyfin can access them.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nKERNEL==\"mpp_service\", MODE=\"0660\", GROUP=\"video\"\nKERNEL==\"rga\", MODE=\"0660\", GROUP=\"video\"\nKERNEL==\"system\", MODE=\"0666\", GROUP=\"video\"\nKERNEL==\"system-dma32\", MODE=\"0666\", GROUP=\"video\"\nKERNEL==\"system-uncached\", MODE=\"0666\", GROUP=\"video\"\nKERNEL==\"system-uncached-dma32\", MODE=\"0666\", GROUP=\"video\" RUN+=\"/usr/bin/chmod a+rw /dev/dma_heap\"\n```\n\n----------------------------------------\n\nTITLE: Building Docker Container Image\nDESCRIPTION: Commands for building Jellyfin container image using Docker or Podman, with optional Python build script\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t $USERNAME/jellyfin --file docker/Dockerfile .\n```\n\nLANGUAGE: sh\nCODE:\n```\npodman build -t $USERNAME/jellyfin --file docker/Dockerfile .\n```\n\nLANGUAGE: sh\nCODE:\n```\n./build.py auto docker\n```\n\n----------------------------------------\n\nTITLE: Illustrating Advanced External File Naming with Flags in Jellyfin\nDESCRIPTION: This code snippet demonstrates a more complex directory structure for a movie with external files using various naming flags. It shows how to specify default tracks, forced subtitles, and hearing impaired subtitles, as well as how to include stream titles in the filename.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/external-files.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n/Movies\n    /Film (1986)\n        Film.mkv\n        Film.default.srt\n        Film.default.en.forced.ass\n        Film.forced.en.dts\n        Film.en.sdh.srt\n        Film.English Commentary.en.mp3\n```\n\n----------------------------------------\n\nTITLE: Installing Intel GPU Tools on Debian/Ubuntu\nDESCRIPTION: Command to install the intel-gpu-tools package on Debian/Ubuntu systems. This package provides tools for debugging and monitoring Intel GPU performance and utilization.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y intel-gpu-tools\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Docker Container with Rockchip Hardware Access\nDESCRIPTION: Docker run command to start Jellyfin container with access to Rockchip hardware devices and necessary privileges.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo docker run -d \\\n --privileged \\\n --name=jellyfin \\\n --volume /path/to/config:/config \\\n --volume /path/to/cache:/cache \\\n --volume /path/to/media:/media \\\n --net=host \\\n --restart=unless-stopped \\\n`for dev in dri dma_heap mali0 rga mpp_service \\\n   iep mpp-service vpu_service vpu-service \\\n   hevc_service hevc-service rkvdec rkvenc vepu h265e ; do \\\n  [ -e \"/dev/$dev\" ] && echo \" --device /dev/$dev\"; \\\n done` \\\n jellyfin/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Checking Vulkan Runtime Status\nDESCRIPTION: Command to verify Vulkan runtime support using FFmpeg, showing GPU discovery and available hardware features. This helps confirm Vulkan-based hardware acceleration capabilities.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/ffmpeg -v debug -init_hw_device drm=dr:/dev/dri/renderD128 -init_hw_device vulkan@dr\n\n[AVHWDeviceContext @ 0x557f13a57bc0] GPU listing:\n[AVHWDeviceContext @ 0x557f13a57bc0]     0: AMD Radeon RX Vega (RADV VEGA10) (discrete) (0x687f)\n[AVHWDeviceContext @ 0x557f13a57bc0]     1: llvmpipe (LLVM 15.0.7, 256 bits) (software) (0x0)\n[AVHWDeviceContext @ 0x557f13a57bc0] Device 0 selected: AMD Radeon RX Vega (RADV VEGA10) (discrete) (0x687f)\n[AVHWDeviceContext @ 0x557f13a57bc0] Queue families:\n[AVHWDeviceContext @ 0x557f13a57bc0]     0: graphics compute transfer sparse (queues: 1)\n[AVHWDeviceContext @ 0x557f13a57bc0]     1: compute transfer sparse (queues: 4)\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_KHR_push_descriptor\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_KHR_sampler_ycbcr_conversion\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_KHR_synchronization2\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_KHR_external_memory_fd\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_EXT_external_memory_dma_buf\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_EXT_image_drm_format_modifier\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_KHR_external_semaphore_fd\n[AVHWDeviceContext @ 0x557f13a57bc0] Using device extension VK_EXT_external_memory_host\n...\n```\n\n----------------------------------------\n\nTITLE: LXC Container Configuration for VPU Device Mapping\nDESCRIPTION: Configuration entries for LXC container to enable VPU hardware acceleration by mapping necessary device files and setting permissions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nlxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir\nlxc.mount.entry: /dev/dma_heap dev/dma_heap none bind,optional,create=dir\nlxc.mount.entry: /dev/mpp_service dev/mpp_service none bind,optional,create=file\nlxc.mount.entry: /dev/rga dev/rga none bind,optional,create=file\nlxc.mount.entry: /dev/mali0 dev/mali0 none bind,optional,create=file\nlxc.cgroup2.devices.allow: a\n```\n\n----------------------------------------\n\nTITLE: Linux/MacOS Build Commands\nDESCRIPTION: Commands for building Jellyfin on Linux or MacOS using the build script\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./build --help\n./build --list-platforms\n./build <platform> all\n```\n\n----------------------------------------\n\nTITLE: Configuring Fail2ban Action for Dynamic Chains on Upstream Proxy\nDESCRIPTION: This snippet shows the configuration for a Fail2ban action that creates and manages dynamic iptables chains on an upstream proxy server.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/fail2ban.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n[Definition]\n\nactionban = ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<upstream-server-ip> \\\n                   'iptables -N f2b-<name> 2>/dev/null || true; \\\n                    iptables -C INPUT -j f2b-<name> 2>/dev/null || iptables -I INPUT -j f2b-<name>; \\\n                    iptables -I f2b-<name> 1 -s <ip> -j DROP' && \\\n                    echo \"Banned <ip> from jail <name> via upstream proxy\" >> /var/log/fail2ban.log\n\nactionunban = ssh -i /root/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@<upstream-server-ip> \\\n                   'iptables -D f2b-<name> -s <ip> -j DROP; \\\n                    if ! iptables -L f2b-<name> | grep -q \"DROP\"; then \\\n                        iptables -D INPUT -j f2b-<name>; \\\n                        iptables -F f2b-<name>; \\\n                        iptables -X f2b-<name>; \\\n                    fi' && \\\n                    echo \"Unbanned <ip> from jail <name> via upstream proxy and cleaned up chain if empty\" >> /var/log/fail2ban.log\n```\n\n----------------------------------------\n\nTITLE: Enabling GuC Loading HuC Firmware in i915 Kernel Driver\nDESCRIPTION: Commands to create the i915 kernel module configuration file and set the enable_guc parameter to 2, enabling the GuC to load HuC firmware for Intel LP mode.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkdir -p /etc/modprobe.d\nsudo sh -c \"echo 'options i915 enable_guc=2' >> /etc/modprobe.d/i915.conf\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mopidy Jellyfin Extension (INI)\nDESCRIPTION: Example configuration for the Mopidy Jellyfin extension in the mopidy.conf file. It includes settings for server connection, library selection, and display options.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n[jellyfin]\nhostname = Jellyfin server hostname\nusername = username\npassword = password\nlibraries = Library1, Library2 (Optional: will default to \"Music\" if left undefined)\nalbumartiststort = False (Optional: will default to True if left undefined)\nalbum_format = {ProductionYear} - {Name} (Optional: will default to \"{Name}\" if left undefined)\n```\n\n----------------------------------------\n\nTITLE: Verifying NVIDIA GPU Status in Jellyfin Docker Container\nDESCRIPTION: Command to check the NVIDIA GPU status within the Jellyfin Docker container using nvidia-smi. This helps confirm that the GPU is properly accessible to Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it jellyfin nvidia-smi\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Reverse Proxy Command in Caddy\nDESCRIPTION: A simple one-line command to set up Caddy as a plaintext HTTP reverse proxy for Jellyfin, listening on port 5001 and forwarding to the Jellyfin server at 127.0.0.1:8096.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncaddy reverse-proxy --from :5001 --to 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Detecting VPU Device Files for LXC Container\nDESCRIPTION: Shell command to identify required device files that need to be passed to the LXC container for VPU hardware acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nfor dev in dri dma_heap mali0 rga mpp_service iep mpp-service vpu_service vpu-service hevc_service hevc-service rkvdec rkvenc vepu h265e ; do [ -e \"/dev/$dev\" ] && echo \"device /dev/$dev\";  done\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting Jellyfin on Linux\nDESCRIPTION: Shell commands to download and extract the Jellyfin archive on Linux. This example uses version 10.8.13 for AMD64 architecture.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsudo wget https://repo.jellyfin.org/?path=/server/linux/stable/combined/jellyfin_10.8.13_amd64.tar.gz\nsudo tar xvzf jellyfin_10.8.13_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Executing Live TV Post Processor Command in Jellyfin\nDESCRIPTION: Example of how Jellyfin executes the post-processing command based on the configured settings in the DVR section. It shows the command line format with path parameters.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/live-tv/post-process.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"/path/to/run_post_process.sh\" \"\\\"/path/to/LiveTV/Shows/Series/Season/Episode.ts\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Initramfs and Grub on Debian & Ubuntu\nDESCRIPTION: Commands to update the initial RAM filesystem and GRUB bootloader on Debian and Ubuntu-based distributions, applying the kernel parameter changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nsudo update-initramfs -u && sudo update-grub\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Server URL in Kodi Add-on\nDESCRIPTION: Examples of how to enter the Jellyfin server URL when configuring the Kodi add-on. Includes options for local network, SSL with reverse proxy, and using a baseurl.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Enter the server name or IP address and the port number (default value is 8096)\n  - Host: `192.168.1.10:8096`\n- If using SSL and a reverse proxy, enter the full URL in the \"Host\" field\n  - Host: `https://jellyfin.example.com`\n- Note that if you have a baseurl set, you should append that value to the end of the host field.\n  - Host: `192.168.0.10:8096/jellyfin`\n```\n\n----------------------------------------\n\nTITLE: Building Jellyfin Master Branch in Docker Container\nDESCRIPTION: A comprehensive script for setting up a development environment inside a Docker container named 'jftest' to build and test the Jellyfin master branch. The script installs all required dependencies, clones the repositories, builds the application, and restarts the service.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -ti jftest bash\napt-get update && apt-get install -y git gnupg curl autoconf g++ make libpng-dev gifsicle automake libtool gcc musl-dev nasm ca-certificates\ncurl -fsSL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor -o /usr/share/keyrings/microsoft-prod.gpg\ncurl -LO https://packages.microsoft.com/config/debian/12/prod.list && mv prod.list /etc/apt/sources.list.d/microsoft-prod.list\napt-get update && apt-get install -y dotnet-sdk-8.0\ncurl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg\necho \"deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_20.x nodistro main\" | tee /etc/apt/sources.list.d/nodesource.list\napt-get update && apt-get install -y nodejs\ncd /opt && git clone https://github.com/jellyfin/jellyfin.git && git clone https://github.com/jellyfin/jellyfin-web.git\ncd jellyfin/ && DOTNET_CLI_TELEMETRY_OPTOUT=1 && DOTNET_CLI_HOME=\"/tmp/\" dotnet publish Jellyfin.Server --configuration Debug --output=\"/jellyfin\" --self-contained --runtime linux-x64\ncd /opt/jellyfin-web && npm install && npm run build:development && cp -r /opt/jellyfin-web/dist /jellyfin/jellyfin-web\napt-get remove -y gnupg curl && apt-get clean -y autoclean && apt-get autoremove -y\nkill -15 $(pidof jellyfin)\n```\n\n----------------------------------------\n\nTITLE: Installing Podman on Fedora\nDESCRIPTION: Command to install Podman on Fedora-based systems using DNF package manager.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install -y podman\n```\n\n----------------------------------------\n\nTITLE: Checking OpenCL Runtime Status with FFmpeg\nDESCRIPTION: Command to verify OpenCL integration with VA-API using FFmpeg. This confirms that the OpenCL runtime is properly installed and can interact with hardware acceleration for video processing.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/ffmpeg -v verbose -init_hw_device vaapi=va:/dev/dri/renderD128 -init_hw_device opencl@va\n\n[AVHWDeviceContext @ 0x55cc8ac21a80] 0.0: Intel(R) OpenCL HD Graphics / Intel(R) Iris(R) Xe Graphics [0x9a49]\n[AVHWDeviceContext @ 0x55cc8ac21a80] Intel QSV to OpenCL mapping function found (clCreateFromVA_APIMediaSurfaceINTEL).\n[AVHWDeviceContext @ 0x55cc8ac21a80] Intel QSV in OpenCL acquire function found (clEnqueueAcquireVA_APIMediaSurfacesINTEL).\n[AVHWDeviceContext @ 0x55cc8ac21a80] Intel QSV in OpenCL release function found (clEnqueueReleaseVA_APIMediaSurfacesINTEL).\n...\n```\n\n----------------------------------------\n\nTITLE: Remuxing Audio Files for Jellyfin Compatibility Using FFmpeg\nDESCRIPTION: FFmpeg command to remux problematic audio files to .mka containers for better compatibility with Jellyfin. This is useful for files with format issues that might not be recognized properly.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nffmpeg -i <Input File> -c:a copy <Output File>.mka\n```\n\n----------------------------------------\n\nTITLE: Installing Required Packages on Arch Linux\nDESCRIPTION: Commands to install jellyfin-ffmpeg and the required Mesa drivers for VA-API and Vulkan support on Arch Linux systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu jellyfin-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Configuring DLNA Debug Logging in Jellyfin\nDESCRIPTION: JSON configuration snippet for enabling DLNA debug logs in Jellyfin's logging.default.json file. Sets the default logging level to Warning while specifically enabling Debug level logs for the DLNA plugin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/dlna.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Warning\",\n      \"Override\": {\n        \"Microsoft\": \"Warning\",\n        \"System\": \"Warning\",\n        \"Jellyfin.Plugin.Dlna\": \"Debug\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jellyfin Repository URL in Kodi File Manager\nDESCRIPTION: Instructions for adding the Jellyfin repository URL as a source in Kodi's file manager. This is typically used for embedded devices like Android TV or Firestick.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Open Kodi, go to the settings menu, and navigate to \"File manager\"\n   - Select \"Add source\"\n   - In the text box, enter `https://kodi.jellyfin.org`\n   - Enter a name for the data source, such as \"Jellyfin Repo\" and select Ok\n```\n\n----------------------------------------\n\nTITLE: Removing Emby Server\nDESCRIPTION: Command to purge the Emby server package from the system before installing Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt purge emby-server\n```\n\n----------------------------------------\n\nTITLE: Cloning Jellyfin Repository\nDESCRIPTION: Initial steps to clone the Jellyfin packaging repository\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/jellyfin/jellyfin-packaging.git\ncd jellyfin-packaging\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin FFmpeg on Arch Linux\nDESCRIPTION: Command to install the jellyfin-ffmpeg package from the Arch Linux extra repository, which provides FFmpeg with hardware acceleration support for Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu jellyfin-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Using curl to Check Jellyfin Health Endpoint\nDESCRIPTION: A shell command that demonstrates how to check the Jellyfin server health status using curl. The '-i' flag includes HTTP response headers in the output to verify the 200 OK status.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/monitoring.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -i http://myserver:8096/health\n```\n\n----------------------------------------\n\nTITLE: Installing and Checking VA-API on Arch Linux\nDESCRIPTION: Commands to install VA-API utilities and check VA-API codec support on Arch Linux systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu libva-utils\nsudo vainfo --display drm --device /dev/dri/renderD128\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Shares for Jellyfin Native Mode in Kodi\nDESCRIPTION: Examples of network share formats for NFS and Samba when configuring Jellyfin for Kodi in Native mode. This allows direct access to media files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- Possible formats:\n  - NFS\n    - `nfs://192.168.0.10:/path/to/media`\n  - Samba\n    - Guest User - `\\\\192.168.0.10\\share_name`\n    - Custom User (Not Recommended) - `\\\\user:password@192.168.0.10\\share_name`\n      - It's more secure to use the generic Guest mapping here and specify credentials from within Kodi\n  - Mounted share\n    - If you have mounted your network share, you can reference the local mount point. This can be more performant but generally means it only works for one type of operating system, given the difference between the file systems\n      - `/mnt/media` (Linux)\n      - `Z:\\media` (Windows)\n      - `/Volumes/media` (Mac OS)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Intel GPU Usage with intel_gpu_top\nDESCRIPTION: Command to monitor Intel GPU engine utilization in real-time. This helps verify that hardware acceleration is working properly in Jellyfin by showing engine usage during transcoding.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nsudo intel_gpu_top\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Vue with Docker\nDESCRIPTION: This command demonstrates how to run Jellyfin Vue using Docker without Docker Compose. It starts a container with the unstable version of Jellyfin Vue and maps port 8080 to the container's port 80.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/jellyfin-vue.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:80 ghcr.io/jellyfin/jellyfin-vue:unstable\n```\n\n----------------------------------------\n\nTITLE: Installing Mesa Drivers for Arch Linux\nDESCRIPTION: Command to install the necessary Mesa drivers for VA-API and RADV Vulkan support on Arch Linux, which are required for hardware acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu libva-mesa-driver vulkan-radeon\n```\n\n----------------------------------------\n\nTITLE: Installing NVIDIA Dependencies on Debian\nDESCRIPTION: Commands to install required NVIDIA libraries for NVENC and NVDEC support on Debian systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y libnvcuvid1 libnvidia-encode1\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin on Fedora using RPM Fusion\nDESCRIPTION: Commands to enable RPM Fusion, install Jellyfin packages, and start the Jellyfin service on Fedora.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/community.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install jellyfin\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable --now jellyfin\n```\n\n----------------------------------------\n\nTITLE: Querying Render and Video Group IDs\nDESCRIPTION: Commands to obtain the group IDs for render and video groups from the host system, which are needed for Docker configuration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngetent group render | cut -d: -f3\ngetent group video | cut -d: -f3\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Repository\nDESCRIPTION: Creates repository configuration file with system-specific variables for architecture and OS version\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nexport VERSION_OS=\"$( awk -F'=' '/^ID=/{ print $NF }' /etc/os-release )\"\nexport VERSION_CODENAME=\"$( awk -F'=' '/^VERSION_CODENAME=/{ print $NF }' /etc/os-release )\"\nexport DPKG_ARCHITECTURE=\"$( dpkg --print-architecture )\"\ncat <<EOF | sudo tee /etc/apt/sources.list.d/jellyfin.sources\nTypes: deb\nURIs: https://repo.jellyfin.org/${VERSION_OS}\nSuites: ${VERSION_CODENAME}\nComponents: main\nArchitectures: ${DPKG_ARCHITECTURE}\nSigned-By: /etc/apt/keyrings/jellyfin.gpg\nEOF\n```\n\n----------------------------------------\n\nTITLE: Checking Device Permissions in Linux\nDESCRIPTION: Command to list and verify the permissions on DRI devices, which are required for hardware acceleration access in Linux. This helps identify which group (usually render) has access to the graphics devices.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ ls -l /dev/dri\n\ntotal 0\ndrwxr-xr-x  2 root root        120 Mar  5 05:15 by-path\ncrw-rw----+ 1 root video  226,   0 Mar  5 05:15 card0\ncrw-rw----+ 1 root video  226,   1 Mar  5 05:15 card1\ncrw-rw----+ 1 root render 226, 128 Mar  5 05:15 renderD128\ncrw-rw----+ 1 root render 226, 129 Mar  5 05:15 renderD129\n```\n\n----------------------------------------\n\nTITLE: Creating Linux Directories for Jellyfin Installation\nDESCRIPTION: Shell commands to create the installation directory for Jellyfin on Linux and navigate to it. This sets up the base directory structure for a manual installation.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir /opt/jellyfin\ncd /opt/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin-FFmpeg Dependencies on Debian\nDESCRIPTION: APT command to fix any dependency issues when installing the Jellyfin-FFmpeg package on Debian-based distributions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install -f\n```\n\n----------------------------------------\n\nTITLE: Creating an M3U File for Internet Radio in Jellyfin\nDESCRIPTION: This code snippet shows the proper format for an M3U file that can be used to add Internet radio stations to Jellyfin. The #EXTINF line is required to give the station a channel entry in the Live TV interface.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/live-tv/internet-radio.md#2025-04-21_snippet_0\n\nLANGUAGE: m3u\nCODE:\n```\n#EXTM3U\n#EXTINF:0,Radio Freccia\nhttps://streamingv2.shoutcast.com/radiofreccia\n```\n\n----------------------------------------\n\nTITLE: Checking Rockchip Device Files on Linux\nDESCRIPTION: Shell command to list and verify the presence of required Rockchip device files in the /dev directory.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ls -l /dev | grep -E \"mpp|rga|dri|dma_heap\"\n```\n\n----------------------------------------\n\nTITLE: Checking VA-API Codecs in Jellyfin Kubernetes Pod\nDESCRIPTION: Command to verify available QSV and VA-API codecs in a running Jellyfin Kubernetes pod. This helps validate that hardware acceleration is properly configured in the Kubernetes environment.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec <JELLYFIN_POD_NAME> -- /usr/lib/jellyfin-ffmpeg/vainfo\n```\n\n----------------------------------------\n\nTITLE: Installing Radeontop on Arch Linux\nDESCRIPTION: Command to install the radeontop package for monitoring AMD GPU usage on Arch Linux.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu radeontop\n```\n\n----------------------------------------\n\nTITLE: Updating Fail2ban Jails for Dynamic Chain Action\nDESCRIPTION: This snippet demonstrates how to configure Fail2ban jails to use the dynamic chain action for managing bans on an upstream proxy server.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/fail2ban.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n[jellyfin]\nenabled  = true\nfilter   = jellyfin\nlogpath  = /path/to/jellyfin/log\nmaxretry = 3\nbantime  = 3600\naction   = proxy-iptables-dynamic\n\n[nginx-http-auth]\nenabled  = true\nfilter   = nginx-http-auth\nlogpath  = /var/log/nginx/error.log\nmaxretry = 5\nbantime  = 3600\naction   = proxy-iptables-dynamic\n```\n\n----------------------------------------\n\nTITLE: Adding GPU to LXC/LXD Container for Jellyfin\nDESCRIPTION: Command to add an Intel GPU device to an LXC/LXD container with the correct group ID permissions. This enables hardware acceleration for Jellyfin running in the container.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nlxc config device add <CONTAINER_NAME> gpu gpu gid=<GID_OF_HOST_RENDER_GROUP>\n```\n\n----------------------------------------\n\nTITLE: Structuring JavaScript Modules for Jellyfin\nDESCRIPTION: This snippet demonstrates the recommended file structure for JavaScript modules in Jellyfin. It includes import statements, JSDoc comments, and examples of private and public functions. The structure emphasizes clean organization and documentation practices.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/style-guides/javascript.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This module documents the structure used by JavaScript code in Jellyfin.\n *\n * @module path/to/this/module\n */\n\nimport module from 'dependency';\nimport { myFunction, myClass } from 'dependency/submodule';\nimport 'otherDependency';\n\n/**\n * Defines a non-exported function, accessible only from this module.\n *\n * @param {Object} argument - The argument to pass to the function.\n * @returns {Int|null} The resulting object from the function.\n */\nfunction privateFunction (argument) {\n    // Code omitted\n}\n\nexport function publicFunction (argument) {\n    // Code omitted\n}\n\nexport default { publicFunction }\n```\n\n----------------------------------------\n\nTITLE: Apple Silicon Codec Support Table\nDESCRIPTION: Markdown table showing codec support for Apple M1, M2, and M3 family processors, indicating encode/decode capabilities\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-selection.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Codec       | M1, M2 Family | M3 Family      |\n| ----------- | ------------- | -------------- |\n| H.264 8bit  | ✅            | ✅             |\n| H.264 10bit | 🔶            | 🔶             |\n| H.265 8bit  | ✅            | ✅             |\n| H.265 10bit | ✅            | ✅             |\n| VP9 8bit    | 🔶            | 🔶             |\n| VP9 10bit   | 🔶            | 🔶             |\n| AV1         | ❌            | ❌<sup>1</sup> |\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Jellyfin (Subpath)\nDESCRIPTION: This Caddyfile configuration sets up a reverse proxy for Jellyfin under a subpath. It redirects requests and forwards them to the local Jellyfin server running on port 8096.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/quick-start/windows.md#2025-04-21_snippet_2\n\nLANGUAGE: Caddyfile\nCODE:\n```\n<your (sub)domain here>\n\nredir /jellyfin /jellyfin/\nreverse_proxy /jellyfin/* 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Verifying Vulkan Runtime Status\nDESCRIPTION: Command to check Vulkan runtime initialization and status in the Jellyfin container.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it jellyfin /usr/lib/jellyfin-ffmpeg/ffmpeg -v debug -init_hw_device vulkan\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin FFmpeg on Arch Linux\nDESCRIPTION: Command to install jellyfin-ffmpeg package on Arch Linux systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu jellyfin-ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Creating Fail2ban Filter for Jellyfin\nDESCRIPTION: This snippet defines the filter rules for Fail2ban to identify failed authentication attempts in Jellyfin logs.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/fail2ban.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n[Definition]\nfailregex = ^.*Authentication request for .* has been denied \\(IP: \"<ADDR>\"\\)\\.\n```\n\n----------------------------------------\n\nTITLE: Manual Jellyfin Installation on Fedora using RPM Packages\nDESCRIPTION: Steps to manually install Jellyfin on Fedora by enabling RPM Fusion, installing server and web packages, starting the service, and configuring the firewall.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/community.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install <link to server `.rpm` file URL>\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo dnf install <link to web `.rpm` file URL>\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable --now jellyfin\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo firewall-cmd --permanent --add-service=jellyfin\n```\n\nLANGUAGE: sh\nCODE:\n```\nsudo firewall-cmd --reload\n```\n\n----------------------------------------\n\nTITLE: Extracting Embedded Subtitles from OTA Recorded Content using FFmpeg\nDESCRIPTION: This FFmpeg command extracts embedded subtitles (typically EIA-608 for analog or EIA-708 for digital) from OTA recorded content. It uses the lavfi filter to process the input file and maps the subtitle stream to an SRT output file.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/codec-support.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -f lavfi -i \"movie=Ronin (1998).ts[out+subcc]\" -map 0:1  \"Ronin (1998).srt\"\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Docker Compose Configuration\nDESCRIPTION: Docker Compose YAML configuration for running Jellyfin container with host networking, volumes for config and cache, bind mounts for media and fonts, and environment variables.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    container_name: jellyfin\n    user: uid:gid\n    network_mode: 'host'\n    volumes:\n      - /path/to/config:/config\n      - /path/to/cache:/cache\n      - type: bind\n        source: /path/to/media\n        target: /media\n      - type: bind\n        source: /path/to/media2\n        target: /media2\n        read_only: true\n      - type: bind\n        source: /path/to/fonts\n        target: /usr/local/share/fonts/custom\n        read_only: true\n    restart: 'unless-stopped'\n    environment:\n      - JELLYFIN_PublishedServerUrl=http://example.com\n    extra_hosts:\n      - 'host.docker.internal:host-gateway'\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin FFmpeg Package on Debian/Ubuntu\nDESCRIPTION: Command to install the jellyfin-ffmpeg7 package on Debian/Ubuntu systems for NVIDIA hardware acceleration support.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/nvidia.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y jellyfin-ffmpeg7\n```\n\n----------------------------------------\n\nTITLE: Installing Portable FFmpeg for Other Distributions\nDESCRIPTION: Set of commands to download, extract, and install the portable jellyfin-ffmpeg package on distributions without official packages, along with verifying the binary dependencies.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/\nmkdir -p jellyfin-ffmpeg\nwget https://repo.jellyfin.org/releases/ffmpeg/<VERSION>/jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz\ntar -xvf jellyfin-ffmpeg_<VERSION>_portable_linux64-gpl.tar.xz -C jellyfin-ffmpeg\nsudo mv jellyfin-ffmpeg /usr/lib\nsudo ldd -v /usr/lib/jellyfin-ffmpeg/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Packages for Jellyfin and OpenCL\nDESCRIPTION: Command to verify the installation of required packages including Jellyfin, libmali drivers, and OpenCL tools.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndpkg -l | egrep \"libmali|clinfo|jellyfin\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration for NFS Storage\nDESCRIPTION: Shows the environment variable setting for disabling .NET file locking when using NFSv3 storage\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/storage.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nDOTNET_SYSTEM_IO_DISABLEFILELOCKING\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin from Default Location in Windows Batch Script\nDESCRIPTION: A Windows batch command to run Jellyfin executable from the default installation path. This uses the default library/data location at %localappdata%.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_0\n\nLANGUAGE: cmd\nCODE:\n```\n<--Your install path-->\\jellyfin\\system\\jellyfin.exe\n```\n\n----------------------------------------\n\nTITLE: Adding Jellyfin User to Required Groups\nDESCRIPTION: Commands to add the jellyfin user to render and video groups, followed by restarting the jellyfin service to apply the changes. This grants necessary permissions for hardware acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG render jellyfin\nsudo usermod -aG video jellyfin\nsudo systemctl restart jellyfin\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Container with Hardware Acceleration using Podman\nDESCRIPTION: This command launches a Jellyfin container with hardware acceleration by mounting the DRI device. It includes container labeling for auto-updates, user namespace settings, volume mounts for persistent storage, and a bind mount for media access.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/container.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\npodman run \\\n    --detach \\\n    --label \"io.containers.autoupdate=registry\" \\\n    --name myjellyfin \\\n    --publish 8096:8096/tcp \\\n    --device /dev/dri/:/dev/dri/ \\\n    # --security-opt label=disable # Only needed for older versions of container-selinux < 2.226\n    --rm \\\n    --user $(id -u):$(id -g) \\\n    --userns keep-id \\\n    --volume jellyfin-cache:/cache:Z \\\n    --volume jellyfin-config:/config:Z \\\n    --mount type=bind,source=/path/to/media,destination=/media,ro=true,relabel=private \\\n    docker.io/jellyfin/jellyfin:latest\n```\n\n----------------------------------------\n\nTITLE: Testing FFmpeg Hardware Device Initialization\nDESCRIPTION: Command to test FFmpeg hardware device initialization for RKMPP and OpenCL acceleration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/ffmpeg -v debug -init_hw_device rkmpp=rk -init_hw_device opencl=ocl@rk\n```\n\n----------------------------------------\n\nTITLE: Alternative DRI Device Checking Commands\nDESCRIPTION: Commands to check GuC and HuC status using an alternative DRI device number, useful if the default commands return a 'No such file or directory' error.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nsudo sh -c \"cat /sys/kernel/debug/dri/1/gt*/uc/guc_info\"\nsudo sh -c \"cat /sys/kernel/debug/dri/1/gt*/uc/huc_info\"\n```\n\n----------------------------------------\n\nTITLE: Installing Manual DEB Packages\nDESCRIPTION: Installs downloaded .deb packages manually using dpkg\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nsudo dpkg -i jellyfin_*.deb jellyfin-ffmpeg_*.deb\n```\n\n----------------------------------------\n\nTITLE: Executing Jellyfin Batch File in Windows\nDESCRIPTION: The command to run the jellyfin.bat file that contains the Jellyfin startup configuration for Windows portable installations.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\njellyfin.bat\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Jellyfin (Domain Root)\nDESCRIPTION: This Caddyfile configuration sets up a reverse proxy for Jellyfin at the domain root. It forwards requests to the local Jellyfin server running on port 8096.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/quick-start/windows.md#2025-04-21_snippet_1\n\nLANGUAGE: Caddyfile\nCODE:\n```\n<your (sub)domain here>\n\nreverse_proxy 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin with Custom Data Location and Disabled Auto-start in Windows\nDESCRIPTION: A Windows batch command to run Jellyfin with a custom data location and the -noautorunwebapp flag, which prevents the web interface from automatically launching in the browser.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_2\n\nLANGUAGE: cmd\nCODE:\n```\n<--Your install path-->\\jellyfin\\system\\jellyfin.exe -d <--Your install path-->\\jellyfin\\data -noautorunwebapp\n```\n\n----------------------------------------\n\nTITLE: Extracting SSA/ASS Subtitles using FFmpeg\nDESCRIPTION: This command uses FFmpeg to extract SSA/ASS subtitles from an MKV file. It maps the second subtitle stream (0:s:1) and saves it as an ASS file.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/codec-support.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nffmpeg -dump_attachment:t \"\" -i file.mkv -map 0:s:1 -c:s ass extracted-subtitle.ass\n```\n\n----------------------------------------\n\nTITLE: Checking OpenCL Runtime in Docker Container\nDESCRIPTION: Commands to verify OpenCL runtime status within the Jellyfin Docker container using FFmpeg.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n# Check the OpenCL (GPU firmware) on host with clinfo\nsudo apt update && sudo apt install -y clinfo && clinfo\n\n# Check the OpenCL runtime of Docker image with jellyfin-ffmpeg\nsudo docker exec -it jellyfin /usr/lib/jellyfin-ffmpeg/ffmpeg -v debug -init_hw_device rkmpp=rk -init_hw_device opencl=ocl@rk\n```\n\n----------------------------------------\n\nTITLE: Initializing Git Submodules\nDESCRIPTION: Initialize and update Git submodules for the Jellyfin project\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit submodule update --init\n```\n\n----------------------------------------\n\nTITLE: Installing Individual Jellyfin Packages\nDESCRIPTION: Alternative installation method specifying individual packages\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install jellyfin-server jellyfin-web\n```\n\n----------------------------------------\n\nTITLE: Installing Mopidy Jellyfin Extension on Raspberry Pi (Shell)\nDESCRIPTION: Command to install the Mopidy Jellyfin extension and web client on a Raspberry Pi using pip with sudo privileges.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo pip3 install mopidy-jellyfin mopidy-musicbox-webclient\n```\n\n----------------------------------------\n\nTITLE: Insecure DNS Provider Configuration in Caddy (Cautioned Against)\nDESCRIPTION: An example of a Caddyfile configuration that includes a DNS provider API token, which is cautioned against as it may lead to security issues and is often unnecessary for automatic HTTPS.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_0\n\nLANGUAGE: Caddyfile\nCODE:\n```\nexample.com {\n    reverse_proxy 127.0.0.1:8096\n    // highlight-start\n    tls {\n        dns <DNS Provider> <API Token>\n    }\n    // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Systemd Service Configuration for Linux\nDESCRIPTION: Systemd unit file for setting up Jellyfin as a system service on Linux. This configuration enables Jellyfin to start automatically on system boot.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Jellyfin\nAfter=network.target\n\n[Service]\nType=simple\nUser=youruser\nRestart=always\nExecStart=/opt/jellyfin/jellyfin.sh\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Movie Extras Folder Organization\nDESCRIPTION: Shows the folder structure for organizing movie extras including behind the scenes, interviews, and additional content.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n└── Best_Movie_Ever (2019)\n    ├── Best_Movie_Ever (2019) - 1080P.mp4\n    ├── Best_Movie_Ever (2019) - 720P.mp4\n    ├── Best_Movie_Ever (2019) - Directors Cut.mp4\n    ├── behind the scenes\n    │   ├── Making of the Best Movie Ever.mp4\n    │   └── Finding the right score.mp4\n    ├── interviews\n    │   └── Interview with the Director.mp4\n    └── extras\n        └── Home recreation.mp4\n```\n\n----------------------------------------\n\nTITLE: Installing Intel GPU Tools on Arch Linux\nDESCRIPTION: Command to install the intel-gpu-tools package on Arch Linux. This provides tools for monitoring and debugging Intel GPU performance during Jellyfin hardware-accelerated transcoding.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu intel-gpu-tools\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin GPG Key\nDESCRIPTION: Downloads and installs the Jellyfin team's GPG signing key for package verification\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/jellyfin.gpg\n```\n\n----------------------------------------\n\nTITLE: Installing Mopidy Jellyfin Extension using pip (Shell)\nDESCRIPTION: Command to install the Mopidy Jellyfin extension using pip in user mode. This is recommended for general-use computers to avoid conflicts with package managers.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip3 install --user mopidy-jellyfin\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Metadata Configuration\nDESCRIPTION: YAML configuration for customizing the Jellyfin app metadata in TrueNAS SCALE, including app version, description, and icon settings.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/truenas.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncustom_app: true\nhuman_version: 1.0.0_custom\nmetadata:\n  app_version: custom\n  capabilities: []\n  description: This is a custom app where user can use his/her own docker compose\n    file for deploying services\n  home: ''\n  host_mounts: []\n  icon: https://media.sys.truenas.net/apps/jellyfin/icons/icon.svg\n  maintainers: []\n  name: custom-app\n  run_as_context: []\n  sources: []\n  title: Custom App\n  train: stable\n  version: 1.0.0\nmigrated: false\nnotes: null\nportals: {}\nversion: 1.0.0\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Firmware Packages on Arch Linux\nDESCRIPTION: Command to update and install the linux-firmware package on Arch Linux, which is required for Intel LP mode.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nsudo pacman -Syu linux-firmware\n```\n\n----------------------------------------\n\nTITLE: Movie Versions with Bracketed Labels\nDESCRIPTION: Demonstrates alternative naming convention for movie versions using bracketed labels.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n└── Best_Movie_Ever (2019)\n    ├── Best_Movie_Ever (2019) - [1080P].mp4\n    ├── Best_Movie_Ever (2019) - [720P].mp4\n    └── Best_Movie_Ever (2019) - [Directors Cut].mp4\n```\n\n----------------------------------------\n\nTITLE: Cloning a Jellyfin Repository for Contribution\nDESCRIPTION: Commands to clone your fork of a Jellyfin project repository to your local machine and set up the upstream remote for syncing with the main project.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:yourusername/projectname.git\ncd projectname/\n```\n\n----------------------------------------\n\nTITLE: Installing Required Dependencies\nDESCRIPTION: Installs curl and gnupg packages required for repository setup\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install curl gnupg\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Firmware Packages from Linux Repository\nDESCRIPTION: Commands to directly download firmware files from the Linux kernel repository and install them in the appropriate directories, providing an alternative method for obtaining required firmware.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/\ngit clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/firmware/linux-firmware.git\nsudo mkdir -p /usr/lib/firmware\nsudo cp -r linux-firmware/i915 linux-firmware/xe /usr/lib/firmware\n```\n\n----------------------------------------\n\nTITLE: Setting Jellyfin Directory Permissions\nDESCRIPTION: Command to correct ownership of the Jellyfin data directory after copying Emby data.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo chown -R jellyfin:jellyfin /var/lib/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin on Gentoo\nDESCRIPTION: Command to install Jellyfin on Gentoo using the emerge package manager.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/community.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nemerge www-apps/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Windows PowerShell Setup\nDESCRIPTION: Configure PowerShell execution policy for building Jellyfin on Windows\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nset-executionpolicy unrestricted\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Simple External File Structure for Jellyfin\nDESCRIPTION: This code snippet shows a basic directory structure for a movie with various external audio and subtitle files. It illustrates how Jellyfin matches external files to the main video file based on naming conventions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/external-files.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\n/Movies\n    /Film (1946)\n        Film.mkv\n        Film.vtt\n        Film.aac\n        Film.mka\n        Film.mks\n        Film.en.ac3\n        Film.de.srt\n        Film.en.dts\n        Film.german.ac3\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Docker Compose\nDESCRIPTION: This YAML snippet demonstrates how to set environment variables for the Jellyfin Vue container in the Docker Compose file. It shows an example of setting the HISTORY_ROUTER_MODE variable.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/jellyfin-vue.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvironment:\n  HISTORY_ROUTER_MODE: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Ad-hoc Signature for Jellyfin on macOS\nDESCRIPTION: Terminal command to create an ad-hoc code signature for the Jellyfin application on macOS, which is required to run the application without security warnings.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncodesign -fs - --deep jellyfin\n```\n\n----------------------------------------\n\nTITLE: Updating Initramfs and Grub on Arch Linux\nDESCRIPTION: Commands to rebuild the initramfs and update the GRUB bootloader on Arch Linux, applying the kernel parameter changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nsudo mkinitcpio -P && sudo update-grub\n```\n\n----------------------------------------\n\nTITLE: Testing Jellyfin Pull Requests in Docker Container\nDESCRIPTION: A script for testing specific Jellyfin pull requests inside a Docker container. This process fetches the PR code, creates a local branch, merges it, builds the application, and restarts the service to test the changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -ti jftest bash\ncd /opt/jellyfin\ngit fetch origin pull/<PR_ID>/head:my-testing-branch\ngit merge my-testing-branch\ndotnet build\nkill -15 $(pidof jellyfin)\n```\n\n----------------------------------------\n\nTITLE: Get Jellyfin User ID for Docker Migration\nDESCRIPTION: Command to identify the user ID and group ID of the Jellyfin system user for proper Docker permission configuration.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nid jellyfin\n```\n\n----------------------------------------\n\nTITLE: Organizing Book Library Folder Structure in Jellyfin\nDESCRIPTION: Example folder structure for organizing books, audiobooks, and comics in a Jellyfin media library. Shows how to arrange content by type and author, with proper file naming and metadata file placement.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/books.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nBooks\n├── Audiobooks\n│   ├── Author\n│   │   ├── Book1\n│   │   │   └── Book1.flac\n│   │   └── Book2\n│   │       └── Book2.mp3\n│   └── Book3\n│       ├── Book3.aac\n│       ├── content.opf\n│       └── cover.jpg\n├── Books\n│   └── Author\n│       ├── Book4\n│       │   └── Book4.epub\n│       ├── Book5\n│       │   └── Book5.epub\n│       ├── Book6\n│       │   ├── Book6.epub\n│       │   ├── cover.png\n│       │   └── metadata.opf\n│       └── Book7\n│           └── Book7.pdf\n└── Comics\n    ├── Plastic Man (1944)\n    │   └── Plastic Man #002 (1944).cbz\n    ├── Attack on Titan (2012)\n    │   └── Attack on Titan #001 (2012).pdf\n    └── Comic (2008)\n        ├── ComicInfo.xml\n        └── Comic #001 (2008).cbr\n```\n\n----------------------------------------\n\nTITLE: Rebasing Local Branch Against Upstream Master\nDESCRIPTION: Commands to fetch all changes from upstream and rebase your local branches to ensure you're working with the latest code before making changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch --all\ngit rebase upstream/master\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Firmware Packages on Debian\nDESCRIPTION: Command to update and install the firmware-linux-nonfree package on Debian-based distributions, which is required for Intel LP mode.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y firmware-linux-nonfree\n```\n\n----------------------------------------\n\nTITLE: Checking Kernel Module for GPU Driver\nDESCRIPTION: Command to check which kernel module (i915 or xe) is currently in use for the GPU, which determines the next steps in the configuration process.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nlspci -knn | grep -E \"i915|xe|VGA|Display\"\n\n00:02.0 Display controller [0380]: Intel Corporation Alder Lake-P GT2 [Iris Xe Graphics] [8086:46a6] (rev 0c)\n        Kernel driver in use: i915\n        Kernel modules: i915, xe\n03:00.0 VGA compatible controller [0300]: Intel Corporation DG1 [Iris Xe MAX Graphics] [8086:4905] (rev 01)\n        Kernel driver in use: i915\n        Kernel modules: i915, xe\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenCL Runtime Status\nDESCRIPTION: FFmpeg command to check the OpenCL runtime status and detect available OpenCL devices.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsudo /usr/lib/jellyfin-ffmpeg/ffmpeg -v debug -init_hw_device rkmpp=rk -init_hw_device opencl=ocl@rk\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Docker Container via Docker Compose\nDESCRIPTION: Docker Compose configuration for migrating a Linux installation to Docker. Defines services, volumes, environment variables, and network settings to match the original installation.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jellyfin:\n    image: jellyfin/jellyfin\n    user: <uid>:<gid>\n    network_mode: 'host'\n    restart: 'unless-stopped'\n    environment:\n      - JELLYFIN_CACHE_DIR=/var/cache/jellyfin\n      - JELLYFIN_CONFIG_DIR=/etc/jellyfin\n      - JELLYFIN_DATA_DIR=/var/lib/jellyfin\n      - JELLYFIN_LOG_DIR=/var/log/jellyfin\n    volumes:\n      - /etc/jellyfin:/etc/jellyfin\n      - /var/cache/jellyfin:/var/cache/jellyfin\n      - /var/lib/jellyfin:/var/lib/jellyfin\n      - /var/log/jellyfin:/var/log/jellyfin\n      - <path-to-media>:<path-to-media>\n```\n\n----------------------------------------\n\nTITLE: Checking Out Pull Request Testing Branch\nDESCRIPTION: Command to switch to the local branch created for testing another contributor's pull request.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout my-testing-branch\n```\n\n----------------------------------------\n\nTITLE: Viewing User Permissions in Jellyfin Database\nDESCRIPTION: This SQL query joins the Permissions and Users tables to show the current permission settings for all users in the Jellyfin database. It's useful for troubleshooting permission-related issues.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Permissions.Value,Permissions.Kind,Users.Username  FROM Permissions INNER JOIN Users ON Permissions.UserID = Users.Id;\n```\n\n----------------------------------------\n\nTITLE: Running unstable Jellyfin server on macOS with custom FFmpeg\nDESCRIPTION: Command to start the Jellyfin server with a custom FFmpeg path, allowing for testing of unstable builds.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/server/macos.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n/path/to/jellyfin-folder/jellyfin --ffmpeg /path/to/ffmpeg-folder/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Removing quarantine flags and signing Jellyfin server on macOS\nDESCRIPTION: Commands to prepare the Jellyfin server binary for testing by removing the quarantine flag and creating an ad-hoc signature.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/server/macos.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/jellyfin\nxattr -rd com.apple.quarantine .\ncodesign -fs - --deep jellyfin\n```\n\n----------------------------------------\n\nTITLE: Checking VA-API Codecs\nDESCRIPTION: Command to verify VA-API codec support in the Jellyfin container.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec -it jellyfin /usr/lib/jellyfin-ffmpeg/vainfo --display drm --device /dev/dri/renderD128\n```\n\n----------------------------------------\n\nTITLE: Backing Up Emby Data Directory\nDESCRIPTION: Command to move the existing Emby data directory to a backup location before installing Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo mv /var/lib/emby /var/lib/emby.backup\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Music Video Folder Structure in Jellyfin\nDESCRIPTION: This code snippet illustrates the recommended folder structure for organizing music videos in Jellyfin. It shows how videos can be nested in folders and subfolders, and includes examples of multiple versions of songs and accompanying NFO files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music-videos.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nMusicVideos\n├── Folder 1\n│   ├── Folder 1.1\n│   │   └── Song 1\n│   │       ├── Song 1 Version 1.mp4\n│   │       ├── Song 1 Version 2.mp4\n│   │       └── Song 1 Version 3.mp4\n│   ├── Song 2\n│   │   ├── Song 2 Version 1.mp4\n│   │   ├── Song 2 Version 1.nfo\n│   │   ├── Song 2 Version 2.mp4\n│   │   └── Song 2 Version 2.nfo\n│   └── Song 3\n│       ├── Song 3.mkv\n│       └── Song 3.nfo\n└── Song 4\n    └── Song 4.avi\n```\n\n----------------------------------------\n\nTITLE: Unsynchronized Lyrics Format Example for Jellyfin\nDESCRIPTION: Example of an unsynchronized lyrics file format for Jellyfin, containing plain text lyrics without timestamps. These are easier to create but don't allow synchronized playback features.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nLine 1\nLine 2\nLine 3\nLine 4\nLine 5\n(...)\n```\n\n----------------------------------------\n\nTITLE: Additional Mopidy Configuration Options (INI)\nDESCRIPTION: Additional configuration options for Mopidy, including MPD and HTTP settings for remote access and control.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\n[mpd]\nenabled = true\n# Useful if you want to control this instance from a remote MPD client\nhostname = 0.0.0.0\nport = 6600\n# This will help avoid timeout errors for  artists or folders with large amounts of files\nconnection_timeout = 300\n\n# Used in the event you want to control this system from a web browser\n[http]\nhostname = 0.0.0.0\nport = 6680\n```\n\n----------------------------------------\n\nTITLE: Checking OpenCL Package Version on Debian/Ubuntu\nDESCRIPTION: Command to check the available version of the intel-opencl-icd package in the system repositories. This helps determine if the package supports the latest Intel hardware.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ apt policy intel-opencl-icd\n\nintel-opencl-icd:\n  Installed: (none)\n  Candidate: 22.14.22890-1\n...\n```\n\n----------------------------------------\n\nTITLE: Removing quarantine flags from FFmpeg binaries on macOS\nDESCRIPTION: Commands to prepare the FFmpeg binaries for use with Jellyfin by removing the quarantine flag.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/server/macos.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd /path/to/jellyfin-ffmpeg\nxattr -rd com.apple.quarantine .\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Manually on Linux\nDESCRIPTION: Shell command to manually start Jellyfin on Linux using the startup script. This will display log information in the terminal.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n./jellyfin.sh\n```\n\n----------------------------------------\n\nTITLE: Stopping Jellyfin Service\nDESCRIPTION: Command to stop the Jellyfin daemon before copying Emby data files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo service jellyfin stop\n```\n\n----------------------------------------\n\nTITLE: Lyrics File Organization in Jellyfin\nDESCRIPTION: Example showing how to organize lyrics files alongside music files in Jellyfin. Lyrics files must match the filename of their corresponding music file with .lrc, .elrc, or .txt extensions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nMusic\n└── Some Artist\n    └── Album A\n        ├── Song 1.flac\n        ├── Song 1.lrc\n        ├── Song 2.flac\n        ├── Song 2.lrc\n        ├── Song 3.flac\n        └── Song 3.lrc\n```\n\n----------------------------------------\n\nTITLE: Runner Shell Script for Jellyfin Live TV Post Processing\nDESCRIPTION: A shell script that serves as the entry point for post-processing. It logs the execution, captures the file path argument, and calls the actual Python post-processing script with the proper parameters.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/live-tv/post-process.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\nexec > \"/path/to/logging/directory/logs/$(date +\"%Y-%m-%d_%H-%M-%S\")-run_post_process-sh.log\" 2>&1\necho $1\n/usr/local/bin/python3 /path/to/record_post_process.py \"$1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring IPBan Log File Settings for Jellyfin\nDESCRIPTION: XML configuration for IPBan log file monitoring. Includes settings for Jellyfin log file path, regex patterns for failed and successful login attempts, and various monitoring parameters.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/ipban.md#2025-04-21_snippet_1\n\nLANGUAGE: config\nCODE:\n```\n<LogFile>\n\n        <Source>Jellyfin</Source>\n        <PathAndMask>\n          C:/ProgramData/Jellyfin/Server/log/log_{year-local}{month-local}{day-local}.log\n        </PathAndMask>\n        <FailedLoginRegex>\n          <![CDATA[\n              Authentication\\s+request\\s+for\\s+\\S+?(?<username>[^\\s]+)\\S+\\s+has\\s+been\\s+(?<log>denied)\\s+\\(IP:\\s+\"(?<ipaddress>[^,\"\\s]+)\"\\)\n          ]]>\n        </FailedLoginRegex>\n        <SuccessfulLoginRegex>\n          <![CDATA[\n              Authentication\\s+request\\s+for\\s+\\S+?(?<username>[^\\s]+)\\S+\\s+has\\s+succeeded\n          ]]>\n        </SuccessfulLoginRegex>\n        <PlatformRegex>Windows</PlatformRegex>\n        <PingInterval>10000</PingInterval>\n        <MaxFileSize>16777216</MaxFileSize>\n        <FailedLoginThreshold>0</FailedLoginThreshold>\n\n</LogFile>\n```\n\n----------------------------------------\n\nTITLE: Installing Radeontop on Debian/Ubuntu\nDESCRIPTION: Command to install the radeontop package for monitoring AMD GPU usage on Debian-based systems.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/amd.md#2025-04-21_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y radeontop\n```\n\n----------------------------------------\n\nTITLE: Backing up Jellyfin data on macOS\nDESCRIPTION: Command showing the locations of Jellyfin data folders that should be backed up before testing unstable builds.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/server/macos.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n~/.config/jellyfin/\n~/.local/share/jellyfin/\n~/Library/Application Support/Jellyfin/\n```\n\n----------------------------------------\n\nTITLE: Copying Emby Data to Jellyfin\nDESCRIPTION: Command to copy all data files from the Emby backup directory to the Jellyfin data directory.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp -a /var/lib/emby.backup/* /var/lib/jellyfin/\n```\n\n----------------------------------------\n\nTITLE: Marking Jellyfin Startup Wizard as Completed\nDESCRIPTION: Command to set the startup wizard as completed in Jellyfin's system.xml file for security purposes, especially when remote access is enabled.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nsudo sed -i '/IsStartupWizardCompleted/s/false/true/' /etc/jellyfin/system.xml\n```\n\n----------------------------------------\n\nTITLE: Supported NFO Metadata Tags Reference\nDESCRIPTION: Comprehensive list of supported metadata tags that can be used in .nfo files for Jellyfin media. Includes basic metadata, user data, and media-specific attributes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/metadata/nfo.md#2025-04-21_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<name>\n<title>\n<localtitle>\n<dateadded>\n<originaltitle>\n<sortname>\n<criticrating>\n<sorttitle>\n<plot>\n<biography>\n<review>\n<language>\n<watched>\n<playcount>\n<lastplayed>\n<countrycode>\n<lockedfields>\n<tagline>\n<country>\n<mpaa>\n<customrating>\n<runtime>\n<aspectratio>\n<lockdata>\n<studio>\n<director>\n<credits>\n<writer>\n<actor>\n<trailer>\n<displayorder>\n<year>\n<rating>\n<ratings>\n<aired>\n<formed>\n<premiered>\n<releasedate>\n<enddate>\n<genre>\n<tag>\n<style>\n<fileinfo>\n<uniqueid>\n<thumb>\n<fanart>\n```\n\n----------------------------------------\n\nTITLE: Installing Linux Firmware Packages on Ubuntu\nDESCRIPTION: Command to update and install the linux-firmware package on Ubuntu-based distributions, which is required for Intel LP mode.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt update && sudo apt install -y linux-firmware\n```\n\n----------------------------------------\n\nTITLE: Enabling and Starting Mopidy Service on Raspberry Pi (Shell)\nDESCRIPTION: Command to enable and start the Mopidy service on a Raspberry Pi using systemctl.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo systemctl enable --now mopidy\n```\n\n----------------------------------------\n\nTITLE: Running Caddy Server for HTTP Test\nDESCRIPTION: This command starts a Caddy server instance that responds with 'test' on port 80. It's used to verify if HTTP traffic is routable to the server from the internet.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/quick-start/windows.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\ncaddy respond --body test --listen :80\n```\n\n----------------------------------------\n\nTITLE: Adding Rounded Edges to Images in Jellyfin\nDESCRIPTION: This snippet adds rounded corners to images by targeting cardContent-button and itemDetailImage classes and applying a border-radius of 0.25em to create a subtle rounded edge effect.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_20\n\nLANGUAGE: css\nCODE:\n```\n.cardContent-button,\n.itemDetailImage {\n  border-radius: 0.25em;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Jellyfin Service\nDESCRIPTION: Command to start the Jellyfin daemon after completing the migration process.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo service jellyfin start\n```\n\n----------------------------------------\n\nTITLE: Listing C# API Changes for Jellyfin Plugin Development\nDESCRIPTION: This shell script snippet outlines key changes to the Jellyfin C# API that affect plugin development. It includes modifications to namespaces, method names, and property accessors.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/07-17-plugin-updates.mdx#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nIExternalID.Name -> IExternalID.ProviderName\nMediaBrowser.Controller.Entities.User -> Jellyfin.Data.Entities.User\nMetadataProviders -> MetadataProvider\nCompressionMethod -> CompressionMethods\nRequestContentBytes = request -> RequestContent = Encoding.UTF8.GetString(request)\nUser.Name -> User.Username\nitem.GetDisplayExtras() -> item.GetExtras(BaseItem.DisplayExtraTypes)\nuser.RootFolder -> libraryManager.GetUserRootFolder()\n```\n\n----------------------------------------\n\nTITLE: Stopping Emby Server for Migration\nDESCRIPTION: Command to stop the Emby server daemon before migrating data to Jellyfin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/migrate.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo service emby-server stop\n```\n\n----------------------------------------\n\nTITLE: Disabling YouTube Trailer Support in Jellyfin Web\nDESCRIPTION: JSON configuration example showing the line to remove from config.json to disable YouTube trailer functionality in the Jellyfin Web interface.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/web-config.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"plugins/youtubePlayer/plugin\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Jellyfin Server Source Tree Structure in Markdown\nDESCRIPTION: This code snippet shows the directory structure of the Jellyfin server project, explaining the purpose of each main directory and some key files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/source-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Jellyfin Server](https://github.com/jellyfin/jellyfin)\n\n1. .ci: `Azure Pipelines Build definitions`\n2. DvdLib: `DVD Anaylzer`\n3. Emby.Dlna: `DLNA support for the server`\n   - Profiles: `DLNA Profiles for clients`\n4. Emby.Drawing: `image processor managing the image encoder and image cache paths`\n5. Emby.Naming: `parsers for the media filenames`\n6. Emby.Notifications: `listening for events and sending the associated notification`\n7. Emby.Photos: `metadata provider for photos`\n8. Emby.Server.Implementations: `main implementations of the interfaces`\n   - ScheduledTasks: `all scheduled tasks can be found here`\n9. Jellyfin.Api: `Jellyfin API`\n   - Controller: `API controllers answering the Jellyfin API requests`\n   - Helpers:\n     - MediaInfoHelper.cs: `logic for the stream builder that determines method of playback such as Direct Play or Transcoding`\n10. Jellyfin.Data: `models used in the Entity Framework Core Database schema`\n11. Jellyfin.Drawing.Skia: `image manipulation like resizing images, making image collages`\n12. Jellyfin.Networking: `managing network interaces and settings`\n13. Jellyfin.Server.Implementations: `like Emby.Server.Implementations, implementations using the EF Core Database`\n14. Jellyfin.Server: `main server project that starts the whole server`\n15. MediaBrowser.Common: `common methods used throughout the server`\n16. MediaBrowser.Controller: `interface definitions`\n17. MediaBrowser.LocalMetadata: `metadata provider and saver for local images, local Collections and Playlists`\n18. MediaBrowser.MediaEncoding: `managing ffmpeg while interacting with the media files`\n19. MediaBrowser.Model: `defining models used throughout the server`\n20. MediaBrowser.Providers: `managing multiple metadata sources`\n21. MediaBrowser.XbmcMetadata: `metadata provider and saver for local .nfo files`\n22. RSSDP: [RSSDP library](https://github.com/Yortw/RSSDP)`, including custom changes, for the Simple Service Discovery (SSDP) protocol`\n23. apiclient: `files used for generating the axios API client`\n24. deployment: `files used while building Jellyfin for different plattforms`\n25. tests: `multiple Unit Test projects testing Jellyfin functionality`\n26. Dockerfile.* `Dockerfiles defining the Jellyfin Docker image`\n```\n\n----------------------------------------\n\nTITLE: Enabling Jellyfin on NixOS\nDESCRIPTION: NixOS configuration to enable the Jellyfin service using the built-in module.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/community.md#2025-04-21_snippet_3\n\nLANGUAGE: nix\nCODE:\n```\n{\n  services.jellyfin.enable = true;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Console Panel Color in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet modifies the color of the left menu panel in Jellyfin to yellow.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_29\n\nLANGUAGE: css\nCODE:\n```\n.mainDrawer-scrollContainer {\n  color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Normal Logging in Jellyfin with JSON Configuration\nDESCRIPTION: This JSON configuration restores normal logging levels in Jellyfin by setting the minimum log level back to Information with specific overrides for Microsoft and System namespaces.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Serilog\": {\n    \"MinimumLevel\": {\n      \"Default\": \"Information\",\n      \"Override\": {\n        \"Microsoft\": \"Warning\",\n        \"System\": \"Warning\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Unstable Repository for Debian/Ubuntu\nDESCRIPTION: This snippet shows how to add the unstable repository component for Debian and Ubuntu systems. It demonstrates the line to be added to the /etc/apt/sources.list.d/jellyfin.list file to enable access to unstable builds.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/06-21-packaging-updates.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndeb [arch=amd64] https://repo.jellyfin.org/debian buster unstable\n```\n\n----------------------------------------\n\nTITLE: Windows Build Repository Setup\nDESCRIPTION: Clone Windows-specific build repository for Jellyfin versions newer than 10.6.4\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\ngit clone https://github.com/jellyfin/jellyfin-server-windows.git windows\n```\n\n----------------------------------------\n\nTITLE: NFO File Naming Conventions for Different Media Types\nDESCRIPTION: Reference table showing the required .nfo filename patterns for different types of media content in Jellyfin. This ensures proper metadata association with media files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/metadata/nfo.md#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nMovies:       movie.nfo, VIDEO_TS.nfo or <filename of the movie>.nfo\nTV Shows:     tvshow.nfo\nTV Season:    season.nfo\nEpisode:      <filename of the episode>.nfo\nMusic Artist: artist.nfo\nMusic Album:  album.nfo\nMusic Video:  (same as Movies)\n```\n\n----------------------------------------\n\nTITLE: Disabling Chromecast Support in Jellyfin Web\nDESCRIPTION: JSON configuration example showing the line to remove from config.json to disable Google Chromecast support, which prevents downloading files from Google servers.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/web-config.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"plugins/chromecastPlayer/plugin\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Border Colors in Jellyfin (CSS)\nDESCRIPTION: These CSS snippets change the border color for text fields and drop-down menus in Jellyfin. The first snippet sets a red border color, while the second changes the border color of highlighted elements to white.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_31\n\nLANGUAGE: css\nCODE:\n```\n.emby-input,\n.emby-textarea,\n.emby-select {\n  border-color: #d00000;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.emby-input:focus,\n.emby-textarea:focus,\n.emby-select-withcolor {\n  border-color: #ffffff !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Increasing inotify Watch Limit for ArchLinux\nDESCRIPTION: This shell command increases the maximum number of inotify watches to 524288 on ArchLinux systems. This setting helps Jellyfin monitor large media libraries without encountering watch limits.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\necho fs.inotify.max_user_watches=524288 | sudo tee /etc/sysctl.d/40-max-user-watches.conf && sudo sysctl --system\n```\n\n----------------------------------------\n\nTITLE: Refreshing Jellyfin APT Repository GPG Key in Debian/Ubuntu\nDESCRIPTION: Command to download and install the updated Jellyfin APT repository GPG key that no longer has an expiration date. This replaces the old key that was set to expire on December 15, 2020.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/11-24-jellyfin-apt-key.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nwget -O- https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Windows Build Script Execution\nDESCRIPTION: Run the Jellyfin build script on Windows with verbose output\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nwindows\\build-jellyfin.ps1 -verbose\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example with .ignore Files for Jellyfin\nDESCRIPTION: This example shows a directory structure for a TV series where Season 03 and OST folders are excluded from Jellyfin scans using .ignore files. It demonstrates the placement of .ignore files to exclude specific directories from being scanned and shown to the end user.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/excluding-directory.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nShows\n└── Series (2010)\n    ├── Season 01\n    │   ├── ...\n    ├── Season 02\n    │   ├── ...\n    ├── Season 03\n    │   ├── .ignore\n    │   └── ...\n    └── OST\n        ├── .ignore\n        └── ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Apache Subpath Location for Jellyfin\nDESCRIPTION: Apache configuration for hosting Jellyfin under a subpath (e.g., example.org/jellyfin). Includes both WebSocket and HTTP proxy settings.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/apache.md#2025-04-21_snippet_2\n\nLANGUAGE: conf\nCODE:\n```\n# Jellyfin hosted on http(s)://DOMAIN_NAME/jellyfin\n<Location /jellyfin/socket>\n    ProxyPreserveHost On\n    ProxyPass \"ws://127.0.0.1:8096/jellyfin/socket\"\n    ProxyPassReverse \"ws://127.0.0.1:8096/jellyfin/socket\"\n</Location>\n<Location /jellyfin>\n    ProxyPass \"http://127.0.0.1:8096/jellyfin\"\n    ProxyPassReverse \"http://127.0.0.1:8096/jellyfin\"\n</Location>\n```\n\n----------------------------------------\n\nTITLE: Reducing Live TV Channel Width in Jellyfin\nDESCRIPTION: This snippet reduces the width of Live TV channels in the guide by setting a maximum width of 8em on the channelsContainer class.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_10\n\nLANGUAGE: css\nCODE:\n```\n.channelsContainer {\n  max-width: 8em;\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Jellyfin on MacOS\nDESCRIPTION: These shell commands completely remove all Jellyfin data from a MacOS system by deleting the configuration, cache, and data directories located in the user's home folder.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nrm -Rfv ~/.config/jellyfin\nrm -Rfv ~/.cache/jellyfin\nrm -Rfv ~/.local/share/jellyfin\n```\n\n----------------------------------------\n\nTITLE: Adding Unstable Plugin Repository URL in Jellyfin\nDESCRIPTION: The URL to use when adding the Unstable plugin repository in Jellyfin's dashboard. This repository provides plugin versions compatible with Unstable Jellyfin releases.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/upgrades.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://repo.jellyfin.org/files/plugin-unstable/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Removing Jellyfin APT Key for Troubleshooting\nDESCRIPTION: Command to remove the Jellyfin APT key using its fingerprint identifier. This can be used if refreshing the key doesn't work properly and needs to be reinstalled.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/11-24-jellyfin-apt-key.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-key remove 1DE21A7B\n```\n\n----------------------------------------\n\nTITLE: Updating Local Master After PR Merge\nDESCRIPTION: Commands to update your local master branch after your PR has been merged, ensuring your local repository stays in sync with upstream.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch --all\ngit checkout master\ngit rebase upstream/master\ngit push -u origin master\n```\n\n----------------------------------------\n\nTITLE: Multiple Movie Versions Organization\nDESCRIPTION: Shows how to organize multiple versions of the same movie with different quality levels and cuts, including proper naming with media provider identifiers.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n├── Best_Movie_Ever (2019)\n│   ├── Best_Movie_Ever (2019) - 1080P.mp4\n│   ├── Best_Movie_Ever (2019) - 720P.mp4\n│   └── Best_Movie_Ever (2019) - Directors Cut.mp4\n└── Movie (2021) [imdbid-tt12801262]\n    ├── Movie (2021) [imdbid-tt12801262] - 2160p.mp4\n    ├── Movie (2021) [imdbid-tt12801262] - 1080p.mp4\n    └── Movie (2021) [imdbid-tt12801262] - Directors Cut.mp4\n```\n\n----------------------------------------\n\nTITLE: Subpath Caddyfile Configuration for Jellyfin\nDESCRIPTION: A Caddyfile configuration that makes Jellyfin accessible at a specific base path (e.g., /jellyfin) rather than at the root of the domain, including a redirect for trailing slashes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/caddy.md#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nexample.com\n\nredir /jellyfin /jellyfin/\nreverse_proxy /jellyfin/* 127.0.0.1:8096\n```\n\n----------------------------------------\n\nTITLE: Hiding Star Ratings in Jellyfin\nDESCRIPTION: This snippet removes the star ratings from media items by targeting the starRatingContainer div and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_14\n\nLANGUAGE: css\nCODE:\n```\ndiv.starRatingContainer {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Permissions for a Specific User in Jellyfin\nDESCRIPTION: This SQL query retrieves all permission values for a specific user in the Jellyfin database. It shows the permission kinds and their values (1=enabled, 0=disabled) for troubleshooting account permission issues.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSELECT Value,Kind FROM Permissions WHERE UserId IN (SELECT Id FROM Users WHERE Username = 'AdminUsername');\n```\n\n----------------------------------------\n\nTITLE: Adding Stable Plugin Repository URL in Jellyfin\nDESCRIPTION: The command shows the URL to be used when adding the Stable repository for Jellyfin plugins. This should be entered in the Dashboard Plugins Repository section after removing the Unstable repository.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/upgrades.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nhttps://repo.jellyfin.org/files/plugin/manifest.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Debian/Ubuntu Repository for Unstable Jellyfin\nDESCRIPTION: Example of how to modify the Jellyfin repository configuration file to include the unstable component alongside the main component. This enables apt to find and install Unstable Jellyfin packages.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/upgrades.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n...\nComponents: main unstable\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Upstream Remote to Jellyfin Repository\nDESCRIPTION: Command to add the main Jellyfin repository as an upstream remote to allow pulling down changes from the main project.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add upstream git@github.com:jellyfin/projectname.git\n```\n\n----------------------------------------\n\nTITLE: Synchronized Lyrics Format Example for Jellyfin\nDESCRIPTION: Example of a synchronized lyrics file format (.lrc) for Jellyfin, containing metadata about the song and timestamped lyrics that allow users to jump to specific points in the song.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n[ar: Some Artist]\n[ti: Song 1]\n[al: Album 1]\n[by: Author]\n[length: 2:57]\n[00:10.89]Line 1\n[00:14.58]Line 2\n[00:16.78]Line 3\n[00:21.03]Line 4\n[00:24.86]Line 5\n(...)\n```\n\n----------------------------------------\n\nTITLE: Full Header Modification in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet applies a comprehensive style change to various elements in Jellyfin, including the header, drawer, input fields, and card boxes, setting their background color to #ff9475.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_32\n\nLANGUAGE: css\nCODE:\n```\n.skinHeader,\n.mainDrawer,\n.emby-input,\n.emby-textarea,\n.emby-select,\n.navMenuOption-selected,\n.cardBox,\n.paperList {\n  background: #ff9475;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stylized Episode Previews in Jellyfin\nDESCRIPTION: This snippet creates more compact episode previews in the season view to reduce vertical scrolling and improve space utilization. It adjusts the height of images, content containers, and overview text.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_23\n\nLANGUAGE: css\nCODE:\n```\n/* Size episode preview images in a more compact way */\n.listItemImage.listItemImage-large.itemAction.lazy {\n  height: 110px;\n}\n.listItem-content {\n  height: 115px;\n}\n.secondary.listItem-overview.listItemBodyText {\n  height: 61px;\n  margin: 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling System Clock Synchronization for Linux\nDESCRIPTION: This bash command enables Network Time Protocol synchronization on systemd-based Linux systems. It resolves issues with active devices not showing correctly in the Jellyfin dashboard due to system clock inaccuracies.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/troubleshooting.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ntimedatectl set-ntp true\n```\n\n----------------------------------------\n\nTITLE: Modifying Jellyfin Repository Configuration for Downgrade Process\nDESCRIPTION: This snippet shows the same configuration change to jellyfin.sources as in the previous example, but in the context of downgrading to an older Stable version. The unstable component is removed from the Components line.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/upgrades.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n...\nComponents: main\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Local Feature Branch for Development\nDESCRIPTION: Command to create and checkout a new local feature branch based on master where you can make your changes isolated from other work.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b my-feature master\n```\n\n----------------------------------------\n\nTITLE: Displaying Connection Failure Message for Locked Users in Jellyfin\nDESCRIPTION: This snippet shows the error message displayed when a user is locked out after exceeding the maximum number of failed login attempts in Jellyfin. It informs the user that the connection to the server failed and suggests ensuring the server is running before trying again.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/users/adding-managing-users.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```sh\nConnection Failure\nWe\\'re unable to connect to the selected server right now. Please ensure it is running and try again.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Minimalistic Login Page for Jellyfin\nDESCRIPTION: This CSS creates a cleaner, minimalistic login page by narrowing the login form, hiding the 'please login' text, and removing the 'manual' and 'forgot password' buttons for a simplified appearance.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_22\n\nLANGUAGE: css\nCODE:\n```\n/* Narrow the login form */\n#loginPage .readOnlyContent,\n#loginPage form {\n  max-width: 22em;\n}\n\n/* Hide \"please login\" text, margin is to prevent login form moving too far up */\n#loginPage h1 {\n  display: none;\n}\n#loginPage .padded-left.padded-right.padded-bottom-page {\n  margin-top: 50px;\n}\n\n/* Hide \"manual\" and \"forgot\" buttons */\n#loginPage .raised.cancel.block.btnManual.emby-button {\n  display: none;\n}\n#loginPage .raised.cancel.block.btnForgotPassword.emby-button {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up JellyCon Widget for Recently Added Movies in Kodi\nDESCRIPTION: Path configuration for creating a widget that displays recently added movies from all Jellyfin libraries on the Kodi home screen.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nAdd-On -> Video Add-On -> JellyCon -> Global Lists -> Movies -> Movies - Recently Added (20) -> Use as widget\n```\n\n----------------------------------------\n\nTITLE: HTTPS Nginx Configuration for Jellyfin Subdomain\nDESCRIPTION: A complete Nginx server block configuration for serving Jellyfin through HTTPS on a subdomain. Includes SSL certificate setup, security headers, proxy settings for both main traffic and WebSockets, and HTTP to HTTPS redirection.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/nginx.md#2025-04-21_snippet_0\n\nLANGUAGE: config\nCODE:\n```\nserver {\n    # Nginx versions prior to 1.25\n    #listen 443 ssl http2;\n    #listen [::]:443 ssl http2;\n\n    # Nginx versions 1.25+\n    listen 443 ssl;\n    listen [::]:443 ssl;\n    http2 on;\n\n    server_name jellyfin.example.org;\n\n    ## The default `client_max_body_size` is 1M, this might not be enough for some posters, etc.\n    client_max_body_size 20M;\n\n    # Comment next line to allow TLSv1.0 and TLSv1.1 if you have very old clients\n    ssl_protocols TLSv1.3 TLSv1.2;\n\n    ssl_certificate /etc/letsencrypt/live/example.org/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/example.org/privkey.pem;\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n    ssl_trusted_certificate /etc/letsencrypt/live/example.org/chain.pem;\n\n    # use a variable to store the upstream proxy\n    set $jellyfin 127.0.0.1;\n\n    # Security / XSS Mitigation Headers\n    add_header X-Content-Type-Options \"nosniff\";\n\n    # Permissions policy. May cause issues with some clients\n    add_header Permissions-Policy \"accelerometer=(), ambient-light-sensor=(), battery=(), bluetooth=(), camera=(), clipboard-read=(), display-capture=(), document-domain=(), encrypted-media=(), gamepad=(), geolocation=(), gyroscope=(), hid=(), idle-detection=(), interest-cohort=(), keyboard-map=(), local-fonts=(), magnetometer=(), microphone=(), payment=(), publickey-credentials-get=(), serial=(), sync-xhr=(), usb=(), xr-spatial-tracking=()\" always;\n\n    # Content Security Policy\n    # See: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP\n    # Enforces https content and restricts JS/CSS to origin\n    # External Javascript (such as cast_sender.js for Chromecast) must be whitelisted.\n    add_header Content-Security-Policy \"default-src https: data: blob: ; img-src 'self' https://* ; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' https://www.gstatic.com https://www.youtube.com blob:; worker-src 'self' blob:; connect-src 'self'; object-src 'none'; frame-ancestors 'self'; font-src 'self'\";\n\n    location / {\n        # Proxy main Jellyfin traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n\n        # Disable buffering when the nginx proxy gets very resource heavy upon streaming\n        proxy_buffering off;\n    }\n\n    location /socket {\n        # Proxy Jellyfin Websockets traffic\n        proxy_pass http://$jellyfin:8096;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header X-Forwarded-Protocol $scheme;\n        proxy_set_header X-Forwarded-Host $http_host;\n    }\n}\n\nserver {\n    listen 80;\n    listen [::]:80;\n    server_name jellyfin.example.org;\n    return 301 https://$host$request_uri;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Third-Party Plugin Repositories Using React Component\nDESCRIPTION: Renders the third-party plugin repositories using the PluginRepositoryList component with the ThirdPartyRepositories data as props.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/plugins/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: JSX\nCODE:\n```\n<PluginRepositoryList repositories={ThirdPartyRepositories} />\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Jellyfin on Linux\nDESCRIPTION: Shell command to create a symbolic link to the Jellyfin installation directory on Linux. This facilitates easy upgrades without changing the path references.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nsudo ln -s jellyfin_10.8.13 jellyfin\n```\n\n----------------------------------------\n\nTITLE: Enabling Live TV Support on Apple TV\nDESCRIPTION: Steps to enable the alpha version of Live TV support in Swiftfin on Apple TV. This feature allows users to watch Jellyfin Live TV sources on the big screen, though it's still in development and may not work reliably in all cases.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2022/12-29-swiftfin/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. In the top menu bar, go to the \"Settings\" (⚙️) icon.\n2. Scroll down to and choose \"Experimental\".\n3. Scroll down to and enable \"Live TV (Alpha)\".\n\nAfter you've enabled it, you can access it through the \"Media\" section of the App. There should be a new Library named \"LiveTV\".\n```\n\n----------------------------------------\n\nTITLE: Disabling Image Carousel for Libraries in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet disables the image carousel for libraries on the Jellyfin homepage, making media fit neatly without left-to-right scrolling. It applies to screens wider than 50em.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_33\n\nLANGUAGE: css\nCODE:\n```\n@media all and (min-width: 50em) {\n  .homePage .emby-scroller {\n    margin-right: 0;\n  }\n  .homePage .emby-scrollbuttons {\n    display: none;\n  }\n  .homePage .itemsContainer {\n    flex-wrap: wrap;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Jellyfin Web Client Source Tree Structure in Markdown\nDESCRIPTION: This code snippet outlines the directory structure of the Jellyfin web client project, detailing the purpose of each main directory and some key files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/source-tree.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [Web Client](https://github.com/jellyfin/jellyfin-web)\n\n1. src:\n    - assets: `images, styles, splash screens, and any other static assets`\n        - css: `all global stylesheets used throughout the client`\n        - img: `images for things like device icons and logos`\n        - splash: `progressive web apps will show these splash screens`\n    - components: `custom elements used for different sections of the user interface`\n        - playerstats.js: `display playback info in browsers and other clients that include the web source`\n    - controllers: `scripts that handle the logic for different pages`\n    - elements: `custom UI components that are used globally such as buttons or menus`\n    - legacy: `currently used for all polyfills and scripts related to backwards compatibility`\n    - libraries: `dependencies that we eventually want to remove and include during the build step`\n    - scripts: `any script that isn't tied to a UI element or page but rather general functionality`\n    - strings: `translations for the entire interface`\n    - themes: `custom and bundled themes can be found here in their own directories`\n```\n\n----------------------------------------\n\nTITLE: Configuring Jellyfin Vue for Custom Web Server\nDESCRIPTION: This YAML configuration shows how to modify the Jellyfin Vue service in Docker Compose to use a custom web server. It removes port mapping and adds volume mounting and a custom command to copy assets to the web server directory.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/jellyfin-vue.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnetwork_mode: none\nvolumes:\n  - _𝘱𝘢𝘵𝘩_:/dest\ncommand: /bin/sh -c 'rm -rf /dest/* && cp -r . /dest && sleep infinity'\n```\n\n----------------------------------------\n\nTITLE: Enabling Universe Repository\nDESCRIPTION: Enables the Ubuntu Universe repository for FFmpeg dependencies\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nsudo add-apt-repository universe\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for TV Show Extras in Jellyfin\nDESCRIPTION: Example of how to organize extra content for TV shows, including behind-the-scenes footage, interviews, and other supplementary material.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/shows.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nShows\n└── Series Name (2010)\n    ├── Season 01\n    │   ├── Series Name S01E01.mkv\n    │   ├── Series Name S01E02.mkv\n    │   ├── featurettes\n    │   │   └── Some Featurette.mkv\n    │   └── interviews\n    │       └── Interview with the Director.mp4\n    ├── Season 02\n    │   ├── Series Name S02E01.mkv\n    │   ├── Series Name S02E02.mkv\n    │   └── behind the scenes\n    │       └── Behind the Scenes.mp4\n    └── extras\n        └── Fantastic Extra.mkv\n```\n\n----------------------------------------\n\nTITLE: Legacy Build System Reference (BASH)\nDESCRIPTION: Reference to the legacy BASH-based build system that was previously used for package finalization, mentioned as being complex and error-prone.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2024/03-05-new-ci-new-repo/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhttps://github.com/jellyfin/jellyfin-metapackages\n```\n\n----------------------------------------\n\nTITLE: Creating Floating Now Playing Controls in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet modifies the \"Now Playing\" controls in Jellyfin to create a floating panel. It adjusts the position, size, and appearance of various elements within the now playing bar.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_36\n\nLANGUAGE: css\nCODE:\n```\n/* fixed height for the bottom row */\n:root {\n  --element-fixed-top: 95px;\n}\n\n/* Now playing bar in the footer */\n.nowPlayingBar {\n       width: 650px;\n       z-index: 10;\n       position: fixed;\n       top: 300px;\n       height: 120px;\n      border-style: solid;\n      border-color: white;\n      background-color: black;\n      margin-left: 50%;\n}\n\n/* Only child of nowPlayingBar */\n.nowPlayingBarTop {\n     height: 5px !important;\n     max-width: 500px\n     top: 10px;\n}\n\n/* Song progress seekbar */\n.nowPlayingBarPositionContainer {\n     position: relative;\n     top: 1.0em !important;\n}\n\n/* Container that holds album thumbnail, artist and album name */\n.nowPlayingBarInfoContainer {\n     position: fixed !important;\n     left: 12px;\n     top: 34px;\n     height: 60px;\n     width: 1100px;\n}\n\n/* Holds the next, previous track, play/pause, next and time elements */\n.nowPlayingBarCenter {\n     position: relative !important;\n     left: 32px;\n     top: var(--element-fixed-top);\n     min-width: 500px;\n}\n\n/* Hold mute, volume slider container, repeat, favorite and remote control buttons */\n.nowPlayingBarRight {\n     width: 402px !important;\n     left: -60px;\n}\n\n/* Mute button */\n.muteButton {\n    position: relative;\n    top: var(--element-fixed-top);\n}\n\n/* Volume slider */\n.nowPlayingBarVolumeSliderContainer {\n     position: relative;\n     left: -4px;\n     top: var(--element-fixed-top);\n}\n\n/* Toggle repeat */\n.toggleRepeatButton {\n     position: relative !important;\n     left: -20px;\n     top: var(--element-fixed-top);\n}\n\n/* Favorite */\n.nowPlayingBarUserDataButtons {\n     position: relative;\n     left: -4px;\n     top: var(--element-fixed-top);\n}\n\n/* Remote control */\n.remoteControlButton {\n     left: -110px;\n     top: var(--element-fixed-top);\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Method for Installing Jellyfin APT Key via Ubuntu Keyserver\nDESCRIPTION: Command to obtain the Jellyfin APT key directly from the Ubuntu keyserver as an alternative to downloading from the Jellyfin repository server.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/11-24-jellyfin-apt-key.md#2025-04-21_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nsudo apt-key adv --keyserver keyserver.ubuntu.com --recv 1DE21A7B\n```\n\n----------------------------------------\n\nTITLE: Installing Mopidy and Dependencies on Raspberry Pi (Shell)\nDESCRIPTION: Commands to install Mopidy and required OS packages on a Raspberry Pi, including MPD support and necessary GStreamer plugins.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install mopidy mopidy-mpd gstreamer1.0-plugins-bad python3-pip\n```\n\n----------------------------------------\n\nTITLE: Updating APT Repositories\nDESCRIPTION: Updates the package lists after adding new repository\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt update\n```\n\n----------------------------------------\n\nTITLE: Image Styling in Markdown\nDESCRIPTION: Example of styling an image with max height constraint using inline HTML and CSS in markdown.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2022/03-17-android-tv-13/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<img\n  src={require('./newprefs.png').default}\n  alt='Screenshot of the new preference categories'\n  style={{ maxHeight: '500px' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Hiding Sync Icon from Jellyfin Header\nDESCRIPTION: This CSS hides the sync icon from the Jellyfin header by targeting the headerSyncButton class and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.headerSyncButton {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Main Repository Release in Web Client Release Notes\nDESCRIPTION: Markdown template for the release body when creating a web client release. This references the main repository release for detailed release notes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/release-procedure.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Please see the release announcement on the main repository.](https://github.com/jellyfin/jellyfin/releases/tag/vX.Y.Z)\n```\n\n----------------------------------------\n\nTITLE: Upgrading Mopidy Jellyfin Extension (Shell)\nDESCRIPTION: Command to upgrade the Mopidy Jellyfin extension using pip with the --upgrade flag.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\npip3 install --user --upgrade mopidy-jellyfin\n```\n\n----------------------------------------\n\nTITLE: HTML Badge Links for Jellyfin Project Status\nDESCRIPTION: A collection of HTML links with embedded badge images displaying various project statuses including license, release, translations, build status, and Docker pull count. These badges provide quick visual indicators of the project's current state.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p align=\"center\">\n<a href=\"https://github.com/jellyfin/jellyfin\"><img className=\"badge\" alt=\"GPL 2.0 License\" src=\"https://img.shields.io/github/license/jellyfin/jellyfin.svg\"/></a>\n<a href=\"https://github.com/jellyfin/jellyfin/releases\"><img className=\"badge\" alt=\"Current Release\" src=\"https://img.shields.io/github/release/jellyfin/jellyfin.svg\"/></a>\n<a href=\"https://translate.jellyfin.org/engage/jellyfin/?utm_source=widget\"><img className=\"badge\" alt=\"Translations\" src=\"https://translate.jellyfin.org/widgets/jellyfin/-/svg-badge.svg\"/></a>\n<a href=\"https://cloud.drone.io/jellyfin/jellyfin\"><img className=\"badge\" alt=\"Build Status\" src=\"https://cloud.drone.io/api/badges/jellyfin/jellyfin/status.svg\"/></a>\n<a href=\"https://hub.docker.com/r/jellyfin/jellyfin\"><img className=\"badge\" alt=\"Docker Pull Count\" src=\"https://img.shields.io/docker/pulls/jellyfin/jellyfin.svg\"/></a>\n<br/>\n<a href=\"https://jellyfin.org\"><img className=\"badge\" alt=\"Visit our Website\" src=\"https://img.shields.io/website/http/jellyfin.org.svg?up_message=online&down_message=offline\"/></a>\n<a href=\"https://forum.jellyfin.org\"><img className=\"badge\" alt=\"Join our Forum\" src=\"https://img.shields.io/website/http/forum.jellyfin.org.svg?label=forum&up_message=online&down_message=offline\"/></a>\n<a href=\"https://matrix.to/#/+jellyfin:matrix.org\"><img className=\"badge\" alt=\"Chat on Matrix\" src=\"https://img.shields.io/matrix/jellyfin:matrix.org.svg?logo=matrix\"/></a>\n<a href=\"https://opencollective.com/jellyfin\"><img className=\"badge\" alt=\"Donate\" src=\"https://img.shields.io/opencollective/all/jellyfin.svg?label=backers\"/></a>\n</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables - Video Codec Compatibility Matrix\nDESCRIPTION: Detailed compatibility table showing support for various video codecs (MPEG-4, H.264, H.265, VP9, AV1) across different Jellyfin clients including browsers, mobile devices, and streaming platforms. Includes footnotes explaining specific compatibility requirements and limitations.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/codec-support.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Sorted by efficency (excluding bit depth) | Chrome | Edge | Firefox | Safari | Android | Android TV | iOS | SwiftFin (iOS) | Roku | Kodi | Desktop |\n| --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |\n| MPEG-4 Part 2/SP | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ✅ | ✅ | ✅ | ✅ |\n| MPEG-4 Part 2/ASP | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ❌ | ✅ | | ✅ | ✅ |\n```\n\n----------------------------------------\n\nTITLE: Configuring JellyCon Add-on Path for Home Screen in Kodi\nDESCRIPTION: Example path configuration for adding a Jellyfin library link to the Kodi home screen using JellyCon add-on.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nAdd-On -> Video Add-On -> JellyCon -> Jellyfin Libraries -> Kid's Movies -> Create menu item to here\n```\n\n----------------------------------------\n\nTITLE: Styling Cast & Crew Info in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet modifies the appearance of cast and crew information in Jellyfin, making thumbnails smaller and squared or rounded. It also adjusts image aspect ratios and centers mouseover buttons.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_24\n\nLANGUAGE: css\nCODE:\n```\n/* Shrink and square (or round) cast thumnails */\n#castContent .card.overflowPortraitCard.personCard.card-hoverable.card-withuserdata {width: 4.2cm !important; font-size: 90% !important;}\n#castContent .card.overflowPortraitCard.personCard.card-withuserdata {width: 4.2cm !important; font-size: 90% !important;}\n\n/* Correct image aspect ratio behaviour, set border-radius to zero for square tiles */\n#castContent .cardContent-button.cardImageContainer.coveredImage.cardContent.cardContent-shadow.itemAction.lazy {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardContent-button.cardImageContainer.coveredImage.defaultCardBackground.defaultCardBackground1.cardContent.cardContent-shadow.itemAction {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardContent-button.cardImageContainer.coveredImage.defaultCardBackground.defaultCardBackground2.cardContent.cardContent-shadow.itemAction {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardContent-button.cardImageContainer.coveredImage.defaultCardBackground.defaultCardBackground3.cardContent.cardContent-shadow.itemAction {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardContent-button.cardImageContainer.coveredImage.defaultCardBackground.defaultCardBackground4.cardContent.cardContent-shadow.itemAction {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardContent-button.cardImageContainer.coveredImage.defaultCardBackground.defaultCardBackground5.cardContent.cardContent-shadow.itemAction {background-size: cover; !important; border-radius: 2.5cm;}\n#castContent .cardScalable {width: 3.8cm !important; height: 3.8cm !important; border-radius: 2.5cm;}\n#castContent .cardOverlayContainer.itemAction {border-radius: 2.5cm;}\n\n/* Center the mouseover buttons */\n#castContent .cardOverlayButton-br {bottom: 4%; right: 15%; width: 70%;}\n#castContent .cardOverlayButton.cardOverlayButton-hover.itemAction.paper-icon-button-light {margin:auto;}\n```\n\n----------------------------------------\n\nTITLE: Hiding Cast Icon from Jellyfin Header\nDESCRIPTION: This snippet removes the cast icon from the Jellyfin header by targeting the headerCastButton class and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.headerCastButton {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Mopidy Packages (Shell)\nDESCRIPTION: Optional command to install additional Mopidy-related packages using pip in user mode, including MPD support and a web client.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/mopidy.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip3 install --user mopidy-mpd mopidy-musicbox-webclient\n```\n\n----------------------------------------\n\nTITLE: Customizing Played Indicator Color in Jellyfin\nDESCRIPTION: This CSS snippet changes the color of the played/watched indicator to green. It targets the .playedIndicator class to override the default color.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.playedIndicator {\n  background: #5dd000;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Download and Release Notes Buttons in React JSX\nDESCRIPTION: This snippet shows the implementation of download and release notes buttons in JSX. The buttons are styled with different classes for primary and secondary styling and include margin adjustments for spacing.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/03-07-jellyfin-10-5-0/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"margin-bottom--md\">\n    <a href=\"/downloads/\" className=\"button button--primary margin-right--md\">Download Jellyfin 10.5.0</a>\n    <a href=\"https://github.com/jellyfin/jellyfin/releases/tag/v10.5.0\" className=\"button button--secondary\">Read the full release notes</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Enlarging Tab Buttons in Jellyfin\nDESCRIPTION: This CSS increases the size of tab buttons (like suggested, genres) by adjusting their text size and padding. It improves usability, especially on mobile devices where the default buttons can be too small.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_21\n\nLANGUAGE: css\nCODE:\n```\n/* Adjust both \"size-adjust\" and \"size\" to modify size */\n.headerTabs.sectionTabs {\n  text-size-adjust: 110%;\n  font-size: 110%;\n}\n.pageTitle {\n  margin-top: auto;\n  margin-bottom: auto;\n}\n.emby-tab-button {\n  padding: 1.75em 1.7em;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Pictures from Cast & Crew Display in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet removes pictures from the cast and crew display in Jellyfin, creating a text-only list. It adjusts the layout and sizing of the cast and crew information.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_25\n\nLANGUAGE: css\nCODE:\n```\n#castContent .card.overflowPortraitCard {\n  width: 4.2cm;\n  font-size: 90%;\n}\n\n#castContent .personCard {\n  width: auto;\n}\n\n#castContent .personCard .cardBox {\n  margin-bottom: 0px;\n  margin-right: 0px;\n}\n\n#castContent {\n  flex-wrap: wrap;\n  max-height: 9.75em;\n}\n\ndiv.personCard > :first-child > :first-child {\n  display: none;\n}\n\n.itemDetailPage .cardText {\n  text-align: left;\n}\n\n.itemDetailPage .textActionButton {\n  text-align: left;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Live TV Channel Listings in Jellyfin\nDESCRIPTION: This CSS hides the channel numbers in the Live TV guide by targeting the guideChannelNumber class and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.guideChannelNumber {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Repository URL Configuration\nDESCRIPTION: URLs for configuring the unstable and stable plugin repositories in Jellyfin. These URLs are used to manage plugin compatibility during testing and stable releases.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2024/09-10-release-roadmap-10.10.0/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://repo.jellyfin.org/files/plugin-unstable/manifest.json\nhttps://repo.jellyfin.org/files/plugin/manifest.json\n```\n\n----------------------------------------\n\nTITLE: External Images Organization for Jellyfin Music\nDESCRIPTION: Example showing how to organize external images (cover, backdrop, logo) alongside music files in Jellyfin. These images take precedence over embedded album art.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nAlbum\n├── cover.jpg\n├── backdrop.webp\n├── logo.png\n├── Track 1.wav\n├── Track 2.wav\n└── Track 3.wav\n```\n\n----------------------------------------\n\nTITLE: Darkening Background in Jellyfin Themes (CSS)\nDESCRIPTION: This CSS snippet darkens the background for Blue Radiance and Purple Haze themes in Jellyfin. The brightness can be adjusted by changing the percentage value.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_27\n\nLANGUAGE: css\nCODE:\n```\n/* Darken background, only works with blue radiance */\n.backgroundContainer {\n  background-color: #000000;\n  filter: brightness(50%);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Top Menu in Jellyfin\nDESCRIPTION: This CSS makes the top menu header completely transparent by targeting the skinHeader classes and setting their background to none and background-color to transparent.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_19\n\nLANGUAGE: css\nCODE:\n```\n.skinHeader.focuscontainer-x.skinHeader-withBackground.skinHeader-blurred {\n  background: none;\n  background-color: rgba(0, 0, 0, 0);\n}\n.skinHeader.focuscontainer-x.skinHeader-withBackground.skinHeader-blurred.noHomeButtonHeader {\n  background: none;\n  background-color: rgba(0, 0, 0, 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Header Button Colors in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet changes the color of the cast, search, and user buttons in the top right of the Jellyfin interface to yellow.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_28\n\nLANGUAGE: css\nCODE:\n```\n.headerRight {\n  color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Similar Content Section in Jellyfin\nDESCRIPTION: This snippet removes the 'More Like This' section on media detail pages by targeting the similarCollapsible ID and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n#similarCollapsible {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing ImgComparisonSlider Component in React\nDESCRIPTION: Code snippet showing the import statement for the ImgComparisonSlider component from the @img-comparison-slider/react package, used for visual comparisons in the blog post.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2023/04-03-vue_vue3/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImgComparisonSlider } from '@img-comparison-slider/react';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Jellyfin Website\nDESCRIPTION: Command to install all required npm dependencies for the Jellyfin website project. This must be run before starting local development or building the site.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Importing ImgComparisonSlider Component in React\nDESCRIPTION: This code snippet imports the ImgComparisonSlider component from the @img-comparison-slider/react package. This component is used later in the document to display before and after images for the RTL support feature.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2022/12-24-android-tv-15/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { ImgComparisonSlider } from '@img-comparison-slider/react';\n```\n\n----------------------------------------\n\nTITLE: Pushing Local Feature Branch to GitHub Fork\nDESCRIPTION: Command to push your local feature branch to your GitHub fork and set up tracking, preparing it for creating a pull request.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit push --set-upstream origin my-feature\n```\n\n----------------------------------------\n\nTITLE: Applying \"Hotdogs and Catsup\" Color Theme to Jellyfin (CSS)\nDESCRIPTION: This CSS snippet applies a custom color theme to Jellyfin, changing various element colors to create a \"Hotdogs and Catsup\" theme with red, yellow, and orange tones.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_35\n\nLANGUAGE: css\nCODE:\n```\n.skinHeader,\n.mainDrawer,\n.emby-input,\n.emby-textarea,\n.emby-select,\n.navMenuOption-selected,\n.cardBox,\n.paperList {\n  background: #ff9475;\n}\n\n.emby-input,\n.emby-textarea,\n.emby-select {\n  border-color: #fdbe7d;\n}\n\n.backgroundContainer.withBackdrop,\n.backdropContainer,\n.backgroundContainer {\n  background: #fdbe7d;\n}\n\n#myPreferencesMenuPage .listItemBodyText,\n.emby-tab-button[data-index='0'],\n#myPreferencesMenuPage > div > div > div > a:nth-child(odd),\n.button-submit,\n.mainAnimatedPage *:nth-child(odd),\n.dashboardGeneralForm *:nth-child(odd),\n.mainDrawer-scrollContainer *:nth-child(odd),\n.headerRight *:nth-child(odd) {\n  color: red;\n}\n\n#myPreferencesMenuPage .listItemIcon,\n.emby-tab-button[data-index='1'],\n#myPreferencesMenuPage > div > div > div > a:nth-child(even),\n.mainAnimatedPage *:nth-child(even),\n.dashboardGeneralForm *:nth-child(even),\n.mainDrawer-scrollContainer *:nth-child(even),\n.headerRight *:nth-child(even) .cancel {\n  color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying User Disabled Message in Jellyfin Admin Interface\nDESCRIPTION: This snippet shows the message displayed in the Jellyfin admin interface when viewing the profile of a disabled user. It informs the administrator that the user is currently disabled and hints at how to re-enable the account.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/users/adding-managing-users.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```sh\nThis user is currently disabled\nSee below to reenable\n```\n```\n\n----------------------------------------\n\nTITLE: Modifying Jellyfin Repository Configuration for Debian/Ubuntu\nDESCRIPTION: This snippet shows how to modify the jellyfin.sources file to remove the 'unstable' component, switching back to the stable repository. This is a crucial step when downgrading from Unstable to Stable releases.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/testing/upgrades.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n...\nComponents: main\n...\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Jellyfin Website\nDESCRIPTION: Command to start a local development server that opens a browser window for previewing the Jellyfin website. Changes to the site will be reflected live without needing to restart the server.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up After Testing a Pull Request\nDESCRIPTION: Commands to return to the master branch and delete the temporary testing branch after completing the review of another contributor's pull request.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout master\ngit branch -D my-testing-branch\n```\n\n----------------------------------------\n\nTITLE: Creating Transparent Dark Watched Indicators in Jellyfin\nDESCRIPTION: This code makes the watched indicator dark and semi-transparent. It uses !important to ensure the style overrides any other styles applied to the indicator.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n/* Make watched icon dark and transparent */\n.indicator {\n  background: #00000058 !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Background Image to Jellyfin Login Page\nDESCRIPTION: This snippet sets a custom background image for the login page by targeting the loginPage ID. It uses background-size: cover to ensure the image fills the entire background.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_17\n\nLANGUAGE: css\nCODE:\n```\n#loginPage {\n  background: url('https://i.ytimg.com/vi/avCWDDox1nE/maxresdefault.jpg');\n  background-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Anilist Plugin Metadata in Markdown\nDESCRIPTION: Shows badges for the Anilist plugin's primary language, number of contributors, and license using shields.io.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/plugins/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n![Anilist Language](https://img.shields.io/github/languages/top/jellyfin/jellyfin-plugin-anilist.svg)\n![Anilist Contributors](https://img.shields.io/github/contributors/jellyfin/jellyfin-plugin-anilist.svg)\n![Anilist License](https://img.shields.io/github/license/jellyfin/jellyfin-plugin-anilist.svg)\n```\n\n----------------------------------------\n\nTITLE: Implementing Content Truncation Comment in JSX\nDESCRIPTION: This is a JSX comment that indicates where content truncation should occur in the blog post. It's used to create a preview of the content that appears before the \"Read more\" section on a blog listing page.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/03-07-jellyfin-10-5-0/index.mdx#2025-04-21_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n{/* truncate */}\n```\n\n----------------------------------------\n\nTITLE: Building Static Content for Jellyfin Website\nDESCRIPTION: Command to generate static website content for the Jellyfin website into the build directory. The resulting files can be deployed to any static content hosting service.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Displaying Jellyfin Kodi Addon Source Tree Structure in Markdown\nDESCRIPTION: This code snippet shows the directory structure of the Jellyfin Kodi addon project, explaining the purpose of key directories and files.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/source-tree.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [Kodi](https://github.com/jellyfin/jellyfin-kodi)\n\n1. jellyfin_kodi\n   - database: `manipulating the local Jellyfin sqlite database`\n   - dialogs: `code behind popup menus for user interaction`\n   - entrypoint: `main add-on settings page`\n   - helper: `small helper functions, mostly formatting or reused functions`\n   - jellyfin: `interacting with the server`\n   - objects:\n     - kodi: `handling local Kodi media types and database`\n2. resources:\n   - language: `string files for localization`\n   - skins: `design of popup menus for user interaction`\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Background Image to Jellyfin Homepage\nDESCRIPTION: This CSS adds a custom background image to the homepage by hiding the default backdrop image and applying a new background image with a blur effect to the backgroundContainer class.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_18\n\nLANGUAGE: css\nCODE:\n```\n.backdropImage {\n  display: none;\n}\n\n.backgroundContainer {\n  background-color: rgba(0, 0, 0, 0);\n  background-image: url('https://i.ytimg.com/vi/avCWDDox1nE/maxresdefault.jpg');\n  filter: blur(10px);\n  background-size: cover;\n}\n```\n\n----------------------------------------\n\nTITLE: 3D Movie Organization Examples\nDESCRIPTION: Shows proper naming conventions for 3D movies with different formats and quality versions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n└── Awesome 3D Movie (2022)\n    ├── Awesome 3D Movie (2022) - 3D_FTAB.mp4\n    ├── Awesome 3D Movie (2022) - 3D.hsbs.mp4\n    └── Awesome 3D Movie (2022) - 1080p.mp4\n```\n\n----------------------------------------\n\nTITLE: Displaying Anidb Plugin Metadata in Markdown\nDESCRIPTION: Shows badges for the Anidb plugin's primary language, number of contributors, and license using shields.io.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/plugins/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Language](https://img.shields.io/github/languages/top/jellyfin/jellyfin-plugin-anidb.svg)\n![Contributors](https://img.shields.io/github/contributors/jellyfin/jellyfin-plugin-anidb.svg)\n![License](https://img.shields.io/github/license/jellyfin/jellyfin-plugin-anidb.svg)\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Feature Branch After Merge\nDESCRIPTION: Command to delete your local feature branch once it's no longer needed after your PR has been merged.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit branch -d my-feature\n```\n\n----------------------------------------\n\nTITLE: Jellyfin Color Specification\nDESCRIPTION: The official color codes used in Jellyfin's branding, including gradient colors for the logo and theme colors for interfaces.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/branding.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nGradient Start: #AA5CC3\nGradient End: #00A4DC\nBackground Color: #000B25\nTheme Background: #101010\nTheme Accent: #00A4DC\n```\n\n----------------------------------------\n\nTITLE: Customizing Background Color in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet changes the background color of the Jellyfin interface to a specific color (#0fd0d0). It affects the main background, dialogs, and HTML elements.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_26\n\nLANGUAGE: css\nCODE:\n```\n.backgroundContainer,\n.dialog,\nhtml {\n  background-color: #0fd0d0;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing 'Latest Movies' Text in Jellyfin\nDESCRIPTION: This CSS replaces the 'Latest Movies' heading with 'Recently Added Movies ›' by hiding the original elements and using the :after pseudo-element to insert custom text.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_15\n\nLANGUAGE: css\nCODE:\n```\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(1)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a\n  > h2 {\n  display: none;\n}\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(1)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a\n  > span {\n  display: none;\n}\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(1)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a:after {\n  content: 'Recently Added Movies ›';\n  font-size: 24px;\n  font-weight: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Movie Extras Organization\nDESCRIPTION: Shows basic organization of movie extras using simple filename conventions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n└── Best_Movie_Ever (2019)\n    ├── Best_Movie_Ever (2019) - 1080P.mp4\n    ├── sample.mp4\n    ├── theme.mp3\n    └── trailer.mp4\n```\n\n----------------------------------------\n\nTITLE: Rendering Official Jellyfin Plugin Repositories Using React Component\nDESCRIPTION: Renders the official Jellyfin plugin repositories using the PluginRepositoryList component with the OfficialPluginRepositories data as props.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/plugins/index.mdx#2025-04-21_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<PluginRepositoryList repositories={OfficialPluginRepositories} />\n```\n\n----------------------------------------\n\nTITLE: Fetching and Testing Another Contributor's Pull Request\nDESCRIPTION: Commands to fetch changes from someone else's pull request and create a local branch for testing their changes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/contributing/development.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch upstream pull/<PR_ID>/head:my-testing-branch\n```\n\n----------------------------------------\n\nTITLE: Displaying External Links in Mobile Layout for Jellyfin\nDESCRIPTION: This snippet forces the display of external links (IMDb, TheMovieDB, Trakt, etc.) in the mobile app layout, which are hidden by default. It uses !important to override the default display property.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.layout-mobile .itemExternalLinks {\n  display: block !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing IPBan on Windows via PowerShell\nDESCRIPTION: PowerShell command to install IPBan with TLS 1.2 security protocol. Downloads and executes the installation script from the IPBan GitHub repository.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/networking/ipban.md#2025-04-21_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/DigitalRuby/IPBan/master/IPBanCore/Windows/Scripts/install_latest.ps1'))\n```\n\n----------------------------------------\n\nTITLE: Changing Icon Pack in Jellyfin (CSS)\nDESCRIPTION: These CSS snippets allow changing the icon pack used in Jellyfin. Options include Material Icons (Outlined, Rounded, Sharp) and Fontawesome Icons (Solid, Regular, Light, Duotone).\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_37\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Outline.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/round.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Sharp.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Font%20Awesome/solid.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Font%20Awesome/regular.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Font%20Awesome/light.css\");\n```\n\nLANGUAGE: css\nCODE:\n```\n@import url(\"https://cdn.jsdelivr.net/gh/prayag17/Jellyfin-Icons/Font%20Awesome/duotone.css\");\n```\n\n----------------------------------------\n\nTITLE: Multi-Disc Album Organization Options in Jellyfin\nDESCRIPTION: Examples showing how to organize multi-disc albums in Jellyfin, either with all tracks in one folder or separated into disc subfolders. Embedded metadata takes priority for disc identification.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/music.md#2025-04-21_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nMusic\n├── Album 1\n│   ├── Disc 1 Track 1.ogg\n│   ├── Disc 1 Track 2.ogg\n│   ├── Disc 2 Track 1.ogg\n│   ├── Disc 3 Track 1.ogg\n│   ├── Disc 3 Track 2.ogg\n│   └── Disc 3 Track 3.ogg\n└── Album 2\n    ├── Disc 1\n    │   ├── Disc 1 Track 1.aiff\n    │   └── Disc 1 Track 2.aiff\n    ├── Disc 2\n    │   ├── Disc 2 Track 1.aiff\n    │   ├── Disc 2 Track 2.aiff\n    │   └── Disc 2 Track 3.aiff\n    └── Disc 3\n        └── Disc 3 Track 1.aiff\n```\n\n----------------------------------------\n\nTITLE: Removing macOS Quarantine Flag from Jellyfin\nDESCRIPTION: Terminal command to remove the quarantine attribute from the Jellyfin application folder on macOS, which is necessary to run the application after downloading.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nxattr -rd com.apple.quarantine .\n```\n\n----------------------------------------\n\nTITLE: Importing React Component for Image Comparison\nDESCRIPTION: This code imports the ImgComparisonSlider component from the @img-comparison-slider/react package, likely used for visual comparisons in the blog post.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/07-19-jellyfin-10-6-0/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { ImgComparisonSlider } from '@img-comparison-slider/react';\n```\n\n----------------------------------------\n\nTITLE: Verifying GuC & HuC Status After Reboot\nDESCRIPTION: Commands to reboot the system and check the status of GuC and HuC firmware loading, verifying that the configuration was successful.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nsudo reboot\nsudo dmesg | grep -E \"i915|xe\"\nsudo sh -c \"cat /sys/kernel/debug/dri/0/gt*/uc/guc_info\"\nsudo sh -c \"cat /sys/kernel/debug/dri/0/gt*/uc/huc_info\"\n```\n\n----------------------------------------\n\nTITLE: Naming Convention for TV Show Extras with File Suffixes in Jellyfin\nDESCRIPTION: Example of how to name extra content files using specific suffixes to identify their type when keeping all files in a single folder.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/shows.md#2025-04-21_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nShows\n└── Series Name (2010)\n    ├── Season 01\n    │   ├── Series Name S01E01.mkv\n    │   ├── Series Name S01E02.mkv\n    │   ├── Alternate Ending-deleted.mkv\n    │   └── Interview with the Director-interview.mp4\n    └── Fantastic Extra-extra.mkv\n    └── Making the Show-featurette.mp4\n```\n\n----------------------------------------\n\nTITLE: Making Count Indicators Transparent in Jellyfin\nDESCRIPTION: This CSS makes count indicators (such as those on series) dark and transparent by targeting the countIndicator class and changing its background color.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* Make count indicator icon dark and transparent */\n.countIndicator {\n  background: #00000058;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JellyCon Widget for Next Up Episodes in Kodi\nDESCRIPTION: Path configurations for creating widgets that display next up episodes from specific or all Jellyfin libraries on the Kodi home screen.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/kodi.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nAdd-On -> Video Add-On -> JellyCon -> Jellyfin Libraries -> Anime -> Anime - Next Up (20) -> Use as widget\n```\n\nLANGUAGE: markdown\nCODE:\n```\nAdd-On -> Video Add-On -> JellyCon -> Global Lists -> TV Shows -> TV Shows - Next Up (20) -> Use as widget\n```\n\n----------------------------------------\n\nTITLE: Installing Jellyfin Repository using extrepo on Debian\nDESCRIPTION: Shell commands to install and enable the Jellyfin repository on Debian using extrepo, which provides a more secure method than manual repository setup.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/manual.md#2025-04-21_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install extrepo\nsudo extrepo enable jellyfin\n```\n\n----------------------------------------\n\nTITLE: Legacy Kernel GuC & HuC Status Checking\nDESCRIPTION: Commands for checking GuC and HuC status on older Linux kernels (4.16 and earlier), which use a different file path structure.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/intel.md#2025-04-21_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\nsudo cat /sys/kernel/debug/dri/0/i915_guc_load_status\nsudo cat /sys/kernel/debug/dri/0/i915_huc_load_status\n```\n\n----------------------------------------\n\nTITLE: Repositioning Scroller Buttons in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet modifies the position and behavior of scroller buttons in Jellyfin, placing them at the edges of the content area and making them clickable through pointer events.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_34\n\nLANGUAGE: css\nCODE:\n```\n.emby-scrollbuttons {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n  padding: 0;\n  justify-content: space-between;\n  pointer-events: none;\n}\n\n.emby-scrollbuttons-button {\n  pointer-events: initial;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ubuntu Hardware Enablement Stack for Intel GPU Compatibility\nDESCRIPTION: Command to install the Hardware Enablement Stack on Ubuntu 22.04 LTS to fix a regression issue on Intel Gen 11 graphics and provide support for newer Intel processors. This moves the system from kernel 5.15 to a newer version.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/known-issues.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo apt install --install-recommends linux-generic-hwe-22.04\n```\n\n----------------------------------------\n\nTITLE: Modifying Border Colors in Jellyfin CSS\nDESCRIPTION: This snippet changes the border color of input fields, text areas, and select dropdowns to red. It demonstrates CSS chaining to apply the same style to multiple elements.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.emby-input,\n.emby-textarea,\n.emby-select {\n  border-color: #d00000;\n}\n```\n\n----------------------------------------\n\nTITLE: Movie Extras with File Suffixes\nDESCRIPTION: Demonstrates organization of movie extras using filename suffixes to identify content types.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/media/movies.md#2025-04-21_snippet_5\n\nLANGUAGE: txt\nCODE:\n```\nMovies\n└── Best_Movie_Ever (2019)\n    ├── Best_Movie_Ever (2019) - 1080P.mp4\n    ├── That clip that I want everyone to see-clip.mp4\n    ├── Release Trailer-trailer.mp4\n    ├── Preview Trailer.trailer.avi\n    ├── Release Trailer 2_trailer.avi\n    ├── Teaser.sample.mp4\n    ├── Favorite Scene-scene.mp4\n    ├── The Best Ever-clip.mp4\n    ├── Making of The Best Movie Ever-behindthescenes.mp4\n    ├── Not the best scene-deleted.mp4\n    ├── Theme Song Music Video-featurette.mp4\n    └── Art of the Best Movie Ever-short.mp4\n```\n\n----------------------------------------\n\nTITLE: Adding Jellyfin User to Required Groups\nDESCRIPTION: Shell commands to add the Jellyfin user to the render and video groups, granting necessary permissions.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-acceleration/rockchip.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo usermod -aG render jellyfin\nsudo usermod -aG video jellyfin\nsudo systemctl restart jellyfin\n```\n\n----------------------------------------\n\nTITLE: Hiding Home Icon from Jellyfin Header\nDESCRIPTION: This CSS hides the home icon and user button from the Jellyfin header by setting their display property to none, effectively removing them from view.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n.headerHomeButton {\n  display: none;\n}\n\n.headerButton.headerButtonRight.headerUserButton.paper-icon-button-light {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Download and Release Notes Buttons\nDESCRIPTION: This JSX snippet renders two buttons: one for downloading Jellyfin 10.6.0 and another for viewing the full release notes on GitHub.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/07-19-jellyfin-10-6-0/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n<div className=\"margin-bottom--md\">\n    <a href=\"/downloads/\" className=\"button button--primary margin-right--md\">Download Jellyfin 10.6.0</a>\n    <a href=\"https://github.com/jellyfin/jellyfin/releases/tag/v10.6.0\" className=\"button button--secondary\">Read the full release notes</a>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Repository Data Components in React\nDESCRIPTION: Imports data for official and third-party plugin repositories along with a React component to display the plugin repository list.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/server/plugins/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { OfficialPluginRepositories, ThirdPartyRepositories } from '../../../../src/data/pluginRepositories';\nimport PluginRepositoryList from '../../../../src/components/plugins/PluginRepositoryList';\n```\n\n----------------------------------------\n\nTITLE: Starting Jellyfin on Windows\nDESCRIPTION: Commands to start Jellyfin from PowerShell or CMD after installation\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n&\"$env:APPDATA\\Jellyfin-Server\\jellyfin.exe\"\n```\n\nLANGUAGE: cmd\nCODE:\n```\n%APPDATA%\\Jellyfin-Server\\jellyfin.exe\n```\n\n----------------------------------------\n\nTITLE: Replacing 'Latest TV Shows' Text in Jellyfin\nDESCRIPTION: This CSS replaces the 'Latest TV Shows' heading with 'Recently Added TV Shows ›' by hiding the original elements and using the :after pseudo-element to insert custom text.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_16\n\nLANGUAGE: css\nCODE:\n```\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(2)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a\n  > h2 {\n  display: none;\n}\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(2)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a\n  > span {\n  display: none;\n}\n#homeTab\n  > div\n  > div.section2\n  > div:nth-child(2)\n  > div.sectionTitleContainer.sectionTitleContainer-cards.padded-left\n  > a:after {\n  content: 'Recently Added TV Shows ›';\n  font-size: 24px;\n  font-weight: normal;\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Cast & Crew Section in Jellyfin\nDESCRIPTION: This CSS hides the Cast & Crew section on media detail pages by targeting the castCollapsible ID and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n#castCollapsible {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Tables - Video Format Reference\nDESCRIPTION: Reference table showing relationships between different MPEG video standards and their alternative names/implementations. Includes links to detailed specifications and clarifying footnotes.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/codec-support.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| MPEG-2 Part 2 | MPEG-4 Part-2 | MPEG-4 Part-10 | MPEG-4 Part-14 | MPEG-H Part 2 |\n| :---: | :---: | :---: | :---: | :---: |\n| H.262 | MPEG-4 SP/ASP | H.264 | MP4 Container | H.265 |\n| MPEG-2 Video | DivX | MPEG-4 AVC | | HEVC |\n| DVD-Video | DX50 | | | |\n```\n\n----------------------------------------\n\nTITLE: Verifying Jellyfin APT Key Status and Expiration\nDESCRIPTION: Commands to check the Jellyfin APT key before and after refreshing it. The output shows the removal of the expiration date from the key after updating.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/11-24-jellyfin-apt-key.md#2025-04-21_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ apt-key list | grep -C2 jellyfin  # Notice the expires: field\nWarning: apt-key output should not be parsed (stdout is not a terminal)\npub   rsa3072 2018-12-16 [SC] [expires: 2020-12-15]\n      4918 AABC 486C A052 358D  778D 4902 3CD0 1DE2 1A7B\nuid           [ unknown] Jellyfin Team <team@jellyfin.org>\nsub   rsa3072 2018-12-16 [E] [expires: 2020-12-15]\n\n$ wget -O- https://repo.jellyfin.org/jellyfin_team.gpg.key | sudo apt-key add -\n[...]\n\n$ apt-key list | grep -C2 jellyfin  # Notice the expires: is now gone\nWarning: apt-key output should not be parsed (stdout is not a terminal)\npub   rsa3072 2018-12-16 [SC]\n      4918 AABC 486C A052 358D  778D 4902 3CD0 1DE2 1A7B\nuid           [ unknown] Jellyfin Team <team@jellyfin.org>\nsub   rsa3072 2018-12-16 [E]\n```\n\n----------------------------------------\n\nTITLE: Hiding Next Up Section in Jellyfin\nDESCRIPTION: This CSS hides the 'Next Up' section that appears on show detail pages by targeting the nextUpSection div and setting its display property to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_13\n\nLANGUAGE: css\nCODE:\n```\ndiv.nextUpSection {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Manifest in JSON for Jellyfin\nDESCRIPTION: This JSON snippet demonstrates the structure of a plugin manifest file for Jellyfin. It includes metadata such as category, GUID, name, description, and version information for a plugin.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/07-17-plugin-updates.mdx#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n        \"category\": \"Metadata\",\n        \"guid\": \"a4df60c5-6ab4-412a-8f79-2cab93fb2bc5\",\n        \"name\": \"Anime\",\n        \"description\": \"This plugin supports several different metadata providers and options for organizing your collection.\",\n        \"owner\": \"jellyfin\",\n        \"overview\": \"Manage Your Anime in Jellyfin\",\n        \"versions\": [\n            {\n                \"checksum\": \"ad6db5175f4732308b5dd166f79a1c2d\",\n                \"changelog\": \"bug fixes and improvements\",\n                \"targetAbi\": \"10.6.0.0\",\n                \"sourceUrl\": \"https://repo.jellyfin.org/releases/other/whats-this-plugin.zip.gif\",\n                \"timestamp\": \"2020-03-27 06:02:58\",\n                \"version\": \"1.0.3.0\"\n            }\n        ]\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Hiding User Settings from Jellyfin Header\nDESCRIPTION: This snippet removes the user settings (person) icon from the Jellyfin header by targeting the material-icons.person class and setting its display to none.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.material-icons.person {\n  display: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Download Links in Markdown\nDESCRIPTION: This code snippet renders download links for the Jellyfin Android app on various platforms using Markdown syntax with inline HTML. It includes links to Google Play, Amazon App Store, and F-Droid, along with their respective icons.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2021/11-04-android-v2.4.0.mdx#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<a className=\"margin-right--md\" href=\"https://play.google.com/store/apps/details?id=org.jellyfin.mobile\">\n  <img width=\"153\" alt=\"Jellyfin on Google Play\" src=\"/images/store-icons/google-play.png\" />\n</a>\n\n<a className=\"margin-right--md\" href=\"https://www.amazon.com/gp/product/B081RFTTQ9\">\n  <img width=\"153\" alt=\"Jellyfin on Amazon App Store\" src=\"/images/store-icons/amazon.png\" />\n</a>\n\n<a href=\"https://f-droid.org/en/packages/org.jellyfin.mobile/\">\n  <img width=\"153\" alt=\"Jellyfin on F-Droid\" src=\"/images/store-icons/fdroid.png\" />\n</a>\n```\n\n----------------------------------------\n\nTITLE: Changing General Page Color in Jellyfin (CSS)\nDESCRIPTION: This CSS snippet changes the color of text on the General Page in Jellyfin to yellow.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/clients/css-customization.md#2025-04-21_snippet_30\n\nLANGUAGE: css\nCODE:\n```\n.dashboardGeneralForm {\n  color: yellow;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying WebOS Icons Image with Data Label in React JSX\nDESCRIPTION: This code shows how to display an image with a data-label attribute in React JSX. The image demonstrates the WebOS icons in Jellyfin 10.5.0, with a label identifying the version.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/03-07-jellyfin-10-5-0/index.mdx#2025-04-21_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img data-label=\"10.5.0\" src={require(\"./webos-icons.png\").default} />\n```\n\n----------------------------------------\n\nTITLE: Using ImgComparisonSlider Component for RTL Support Demonstration\nDESCRIPTION: This code snippet demonstrates the use of the ImgComparisonSlider component to show a before and after comparison of the app's interface with RTL support. It includes two images, one for the 'before' state and one for the 'after' state.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2022/12-24-android-tv-15/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgComparisonSlider className='margin-bottom--md'>\n  <img slot='before' src={require('./rtlbefore.png').default} />\n  <img slot='after' src={require('./rtlafter.png').default} />\n</ImgComparisonSlider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Comparison Slider in React JSX\nDESCRIPTION: This code snippet shows the usage of the ImgComparisonSlider component from the @img-comparison-slider/react package to create a before/after comparison of UI changes between versions. The component displays two images in slots that users can compare by sliding.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/03-07-jellyfin-10-5-0/index.mdx#2025-04-21_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgComparisonSlider className=\"margin-bottom--md\">\n    <img slot=\"before\" src={require(\"./old-home.jpg\").default} />\n    <img slot=\"after\" src={require(\"./new-home.jpg\").default} />\n</ImgComparisonSlider>\n```\n\n----------------------------------------\n\nTITLE: Implementing Web Client Detail Page Comparison in React JSX\nDESCRIPTION: This snippet demonstrates another use of the ImgComparisonSlider component to compare the old and new detail pages in the Jellyfin web client. It shows visual differences between interface versions using before/after images.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2020/03-07-jellyfin-10-5-0/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ImgComparisonSlider className=\"margin-bottom--md\">\n    <img slot=\"before\" src={require(\"./old-details.png\").default} />\n    <img slot=\"after\" src={require(\"./new-details.png\").default} />\n</ImgComparisonSlider>\n```\n\n----------------------------------------\n\nTITLE: Rockchip VPU Codec Support Table\nDESCRIPTION: Markdown table showing codec support for RK3588/3588S SoC, detailing encode/decode capabilities for various video formats\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/administration/hardware-selection.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Codec          | RK3588/3588S |\n| -------------- | ------------ |\n| MPEG1/2/4 8bit | 🔶           |\n| VC1 8bit       | ❌           |\n| H.264 8bit     | ✅           |\n| H.264 10bit    | 🔶           |\n| H.265 8bit     | ✅           |\n| H.265 10bit    | 🔶           |\n| VP8 8bit       | 🔶           |\n| VP9 8bit       | 🔶           |\n| VP9 10bit      | 🔶           |\n| AV1            | 🔶           |\n```\n\n----------------------------------------\n\nTITLE: New Unified Package Repository Reference (Python)\nDESCRIPTION: Reference to the new Python-based unified packaging system that handles both server and web components via submodules.\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/blog/2024/03-05-new-ci-new-repo/index.mdx#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nhttps://github.com/jellyfin/jellyfin-packaging\n```\n\n----------------------------------------\n\nTITLE: Running Jellyfin Container\nDESCRIPTION: Commands to run Jellyfin in a container using Docker or Podman\nSOURCE: https://github.com/jellyfin/jellyfin.org/blob/master/docs/general/installation/advanced/source.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 8096:8096 $USERNAME/jellyfin\n```\n\nLANGUAGE: sh\nCODE:\n```\npodman run -d -p 8096:8096 $USERNAME/jellyfin\n```"
  }
]