[
  {
    "owner": "linkedin",
    "repo": "dexmaker",
    "content": "TITLE: Generating and Invoking Runtime Code with Dexmaker Java\nDESCRIPTION: This Java snippet demonstrates how to use the Dexmaker library to generate a simple class (`HelloWorld`) and a static method (`hello`) programmatically at runtime. It then shows how to generate the Dalvik `.dex` file, load the generated class into the current process, and execute the generated method using Java reflection. The `generateHelloMethod` function illustrates adding individual Dalvik instructions using the `Code` builder API for tasks like loading constants, performing operations, and invoking methods.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/README.md#_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic final class HelloWorldMaker {\n    public static void main(String[] args) throws Exception {\n        DexMaker dexMaker = new DexMaker();\n\n        // Generate a HelloWorld class.\n        TypeId<?> helloWorld = TypeId.get(\"LHelloWorld;\");\n        dexMaker.declare(helloWorld, \"HelloWorld.generated\", Modifier.PUBLIC, TypeId.OBJECT);\n        generateHelloMethod(dexMaker, helloWorld);\n\n        // Create the dex file and load it.\n        File outputDir = new File(\".\");\n        ClassLoader loader = dexMaker.generateAndLoad(HelloWorldMaker.class.getClassLoader(),\n                outputDir, outputDir);\n        Class<?> helloWorldClass = loader.loadClass(\"HelloWorld\");\n\n        // Execute our newly-generated code in-process.\n        helloWorldClass.getMethod(\"hello\").invoke(null);\n    }\n\n    /**\n     * Generates Dalvik bytecode equivalent to the following method.\n     *    public static void hello() {\n     *        int a = 0xabcd;\n     *        int b = 0xaaaa;\n     *        int c = a - b;\n     *        String s = Integer.toHexString(c);\n     *        System.out.println(s);\n     *        return;\n     *    }\n     */\n    private static void generateHelloMethod(DexMaker dexMaker, TypeId<?> declaringType) {\n        // Lookup some types we'll need along the way.\n        TypeId<System> systemType = TypeId.get(System.class);\n        TypeId<PrintStream> printStreamType = TypeId.get(PrintStream.class);\n\n        // Identify the 'hello()' method on declaringType.\n        MethodId hello = declaringType.getMethod(TypeId.VOID, \"hello\");\n\n        // Declare that method on the dexMaker. Use the returned Code instance\n        // as a builder that we can append instructions to.\n        Code code = dexMaker.declare(hello, Modifier.STATIC | Modifier.PUBLIC);\n\n        // Declare all the locals we'll need up front. The API requires this.\n        Local<Integer> a = code.newLocal(TypeId.INT);\n        Local<Integer> b = code.newLocal(TypeId.INT);\n        Local<Integer> c = code.newLocal(TypeId.INT);\n        Local<String> s = code.newLocal(TypeId.STRING);\n        Local<PrintStream> localSystemOut = code.newLocal(printStreamType);\n\n        // int a = 0xabcd;\n        code.loadConstant(a, 0xabcd);\n\n        // int b = 0xaaaa;\n        code.loadConstant(b, 0xaaaa);\n\n        // int c = a - b;\n        code.op(BinaryOp.SUBTRACT, c, a, b);\n\n        // String s = Integer.toHexString(c);\n        MethodId<Integer, String> toHexString\n                = TypeId.get(Integer.class).getMethod(TypeId.STRING, \"toHexString\", TypeId.INT);\n        code.invokeStatic(toHexString, s, c);\n\n        // System.out.println(s);\n        FieldId<System, PrintStream> systemOutField = systemType.getField(printStreamType, \"out\");\n        code.sget(systemOutField, localSystemOut);\n        MethodId<PrintStream, Void> printlnMethod = printStreamType.getMethod(\n                TypeId.VOID, \"println\", TypeId.STRING);\n        code.invokeVirtual(printlnMethod, null, localSystemOut, s);\n\n        // return;\n        code.returnVoid();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Mockito Dependency with Dexmaker Gradle\nDESCRIPTION: This Gradle snippet demonstrates how to add the `dexmaker-mockito` library as a dependency in an Android project's `build.gradle` file using the `androidTestImplementation` configuration. This makes the library available for instrumentation tests, allowing the use of Mockito mocks. The specified version `2.28.4` ensures the correct library version is included.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/README.md#_snippet_2\n\nLANGUAGE: gradle\nCODE:\n```\n    androidTestImplementation 'com.linkedin.dexmaker:dexmaker-mockito:2.28.4'\n```\n\n----------------------------------------\n\nTITLE: Declaring Mockito Dependency with Dexmaker Maven XML\nDESCRIPTION: This XML snippet shows the required configuration to add the `dexmaker-mockito` library as a dependency in a Maven project's `pom.xml` file. This library enables the use of the Mockito mocking framework in Android projects by providing Dalvik bytecode generation capabilities. The specified version `2.28.4` determines the compatibility with Mockito.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/README.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n      <groupId>com.linkedin.dexmaker</groupId>\n      <artifactId>dexmaker-mockito</artifactId>\n      <version>2.28.4</version>\n      <type>pom</type>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Releasing Steps for Dexmaker Project in Markdown\nDESCRIPTION: Step-by-step instructions for releasing a new version of Dexmaker, including version updates, git operations, and artifact promotion in Sonatype Nexus.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/RELEASING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Releasing\n\n1. Change the version in `gradle.properties` to a non-SNAPSHOT version.\n2. Update the `CHANGELOG.md` for the impending release.\n3. Update the `README.md` with the new version.\n4. `git commit -am \"Prepare for release X.Y.Z.\"` (where X.Y.Z is the new version)\n5. `git tag -a X.Y.Z -m \"Version X.Y.Z\"` (where X.Y.Z is the new version)\n6. Update the `gradle.properties` to the next SNAPSHOT version.\n7. `git commit -am \"Prepare next development version.\"`\n8. `git push && git push --tags`\n9. Create a new release in the releases tab on GitHub\n10. Wait for the [publish-maven-central.yml](.github/workflows/publish-maven-central.yml) action to complete.\n11. Visit [Sonatype Nexus](https://oss.sonatype.org/) and promote the artifact.\n```\n\n----------------------------------------\n\nTITLE: Defining Slicer Sources\nDESCRIPTION: This command defines a variable containing the list of source files for the slicer library. It lists the relative paths to each C++ source file.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(slicer_sources\n    ../dexmaker-mockito-inline/external/slicer/bytecode_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/code_ir.cc\n    ../dexmaker-mockito-inline/external/slicer/common.cc\n    ../dexmaker-mockito-inline/external/slicer/control_flow_graph.cc\n    ../dexmaker-mockito-inline/external/slicer/debuginfo_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_bytecode.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_format.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_ir_builder.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_ir.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_utf8.cc\n    ../dexmaker-mockito-inline/external/slicer/instrumentation.cc\n    ../dexmaker-mockito-inline/external/slicer/reader.cc\n    ../dexmaker-mockito-inline/external/slicer/tryblocks_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/writer.cc)\n```\n\n----------------------------------------\n\nTITLE: CI/CD Workflow Explanation for Dexmaker in Markdown\nDESCRIPTION: Explanation of how the CI/CD workflows function for deploying snapshots and releases of Dexmaker to Maven repositories through GitHub Actions.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/RELEASING.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## How it works\n\nThe [deploy-snapshot.yml](.github/workflows/deploy-snapshot.yml) workflow runs on every\npush to the main branch as long as the commit message does not contain `Prepare for release`. This\nworkflow calls Gradle to publish to the Sonatype snapshot repository.\n\nFor actual releases, there is a separate [publish-maven-central.yml](.github/workflows/publish-maven-central.yml)\nworkflow which runs after a new release is created in the GitHub UI. This will call Gradle on the\ntagged release commit and upload to the staging repository. After that completes, you will need to\ngo and promote the artifacts to production.\n```\n\n----------------------------------------\n\nTITLE: Adding Snapshot Repository with Dexmaker Gradle\nDESCRIPTION: This Gradle snippet shows how to configure a project's repositories to include the Sonatype snapshot repository. Adding this repository allows the project to download and use snapshot builds of the Dexmaker library, which contain the latest unreleased changes. This is useful for testing pre-release versions.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/README.md#_snippet_3\n\nLANGUAGE: gradle\nCODE:\n```\nrepositories {\n    maven {\n        url \"https://oss.sonatype.org/content/repositories/snapshots/\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JVMTI Agent Shared Library with Custom Flags in CMake\nDESCRIPTION: Defines a shared library target 'multiplejvmtiagentsinterferenceagent' from a single C++ source file implementing the JVMTI agent's agent.cc. The C++ compiler flags are configured for Android STL support, enabling runtime type information (RTTI), and customizing warning behaviors to treat most warnings as errors except selected ones. The target links against the previously defined 'slicer' static library to utilize dex bytecode manipulation functionalities.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-tests/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(multiplejvmtiagentsinterferenceagent\n            SHARED\n            src/main/jni/multiplejvmtiagentsinterferenceagent/agent.cc)\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DANDROID_STL=c++_shared -frtti -Wall -Werror -Wno-unused-parameter -Wno-shift-count-overflow -Wno-error=non-virtual-dtor -Wno-sign-compare -Wno-switch -Wno-missing-braces\")\n\ntarget_link_libraries(multiplejvmtiagentsinterferenceagent slicer)\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Build for Slicer Static Library in CMake\nDESCRIPTION: Defines a static library target 'slicer' composed of multiple C++ source files related to dex bytecode encoding, decoding, and instrumentation. It includes source file paths relative to an external slicer directory and links against the zlib compression library. This setup is prerequisite for building components that manipulate dex files within the project.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-tests/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)  \n\nset(slicer_sources\n    ../dexmaker-mockito-inline/external/slicer/bytecode_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/code_ir.cc\n    ../dexmaker-mockito-inline/external/slicer/common.cc\n    ../dexmaker-mockito-inline/external/slicer/control_flow_graph.cc\n    ../dexmaker-mockito-inline/external/slicer/debuginfo_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_bytecode.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_format.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_ir_builder.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_ir.cc\n    ../dexmaker-mockito-inline/external/slicer/dex_utf8.cc\n    ../dexmaker-mockito-inline/external/slicer/instrumentation.cc\n    ../dexmaker-mockito-inline/external/slicer/reader.cc\n    ../dexmaker-mockito-inline/external/slicer/tryblocks_encoder.cc\n    ../dexmaker-mockito-inline/external/slicer/writer.cc)\n\nadd_library(slicer\n            STATIC\n            ${slicer_sources})\n\ntarget_link_libraries(slicer z)\n```\n\n----------------------------------------\n\nTITLE: Including Header Directories for External JDK and Slicer in CMake\nDESCRIPTION: Specifies additional include directories for the build, pointing to external JDK headers and slicer export headers. This enables the compiler to find necessary header files during compilation of source files that depend on JDK components and slicer APIs.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-tests/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../dexmaker-mockito-inline/external/jdk ../dexmaker-mockito-inline/external/slicer/export/)\n```\n\n----------------------------------------\n\nTITLE: Defining slicer Sources\nDESCRIPTION: Defines a variable containing a list of source files for the 'slicer' library.  This variable is later used to create the library. It includes various .cc files related to bytecode encoding, code IR, control flow graphs, dex format, instrumentation, and more.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(slicer_sources\n    external/slicer/bytecode_encoder.cc\n    external/slicer/code_ir.cc\n    external/slicer/common.cc\n    external/slicer/control_flow_graph.cc\n    external/slicer/debuginfo_encoder.cc\n    external/slicer/dex_bytecode.cc\n    external/slicer/dex_format.cc\n    external/slicer/dex_ir_builder.cc\n    external/slicer/dex_ir.cc\n    external/slicer/dex_utf8.cc\n    external/slicer/instrumentation.cc\n    external/slicer/reader.cc\n    external/slicer/tryblocks_encoder.cc\n    external/slicer/writer.cc)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Compiler Flags\nDESCRIPTION: This command sets compiler flags for C++. It defines ANDROID_STL, enables RTTI (Runtime Type Identification), enables all warnings, treats warnings as errors, and disables specific warnings related to unused parameters, shift count overflows, non-virtual destructors, sign comparison, switch statements, and missing braces. These flags ensure code quality and portability.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DANDROID_STL=c++_shared -frtti -Wall -Werror -Wno-unused-parameter -Wno-shift-count-overflow -Wno-error=non-virtual-dtor -Wno-sign-compare -Wno-switch -Wno-missing-braces\")\n```\n\n----------------------------------------\n\nTITLE: Setting CXX Flags\nDESCRIPTION: Sets compiler flags for C++ code.  These flags control various aspects of the compilation process, such as enabling specific language features, setting warning levels, and defining preprocessor macros. It defines ANDROID_STL and disables some warnings.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DANDROID_STL=c++_shared -frtti -Wall -Werror -Wno-unused-parameter -Wno-shift-count-overflow -Wno-error=non-virtual-dtor -Wno-sign-compare -Wno-switch -Wno-missing-braces\")\n```\n\n----------------------------------------\n\nTITLE: Adding Slicer Library\nDESCRIPTION: This command creates a static library named 'slicer' from the source files listed in the slicer_sources variable. This means the library will be linked directly into the executables that use it.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(slicer\n            STATIC\n            ${slicer_sources})\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This command adds include directories for the compiler.  These directories are searched for header files during compilation. It adds the jdk and slicer export directories.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(../dexmaker-mockito-inline/external/jdk ../dexmaker-mockito-inline/external/slicer/export/)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: Specifies additional include directories for the project. This allows the compiler to find header files located in the specified directories during the build process. It includes directories such as external/jdk and external/slicer/export/.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(external/jdk external/slicer/export/)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Minimum Version\nDESCRIPTION: Specifies the minimum required CMake version for the project.  This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file. The version is set to 3.4.1.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum CMake Version\nDESCRIPTION: This command specifies the minimum required version of CMake to use for the build.  Ensures that the CMake version is at least 3.4.1.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.4.1)\n```\n\n----------------------------------------\n\nTITLE: Adding slicer Library\nDESCRIPTION: Creates a static library named 'slicer' using the source files listed in the 'slicer_sources' variable.  This library will be statically linked into other targets that depend on it.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(slicer\n            STATIC\n            ${slicer_sources})\n```\n\n----------------------------------------\n\nTITLE: Linking slicer Library\nDESCRIPTION: Links the 'slicer' library and the 'z' (zlib) library to other targets.  This allows code in those targets to use functions and data structures defined in the linked libraries.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(slicer z)\n```\n\n----------------------------------------\n\nTITLE: Linking Slicer Library\nDESCRIPTION: This command links the 'slicer' library with the 'z' library (zlib). The 'z' library provides data compression functionality.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(slicer z)\n```\n\n----------------------------------------\n\nTITLE: Linking Static JVM TI Agent Library\nDESCRIPTION: This command links the 'staticjvmtiagent' library with the 'slicer' library. This means that the staticjvmtiagent library depends on the code within the slicer library.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(staticjvmtiagent slicer)\n```\n\n----------------------------------------\n\nTITLE: Linking dexmakerjvmtiagent Library\nDESCRIPTION: Links the 'dexmakerjvmtiagent' library with the 'slicer' library.  This allows the agent to use functions and data structures defined in the 'slicer' library.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_link_libraries(dexmakerjvmtiagent slicer)\n```\n\n----------------------------------------\n\nTITLE: Adding dexmakerjvmtiagent Library\nDESCRIPTION: Creates a shared library named 'dexmakerjvmtiagent' using the source file 'src/main/jni/dexmakerjvmtiagent/agent.cc'.  This library is a JVMTI agent, which is a native library loaded by the Java Virtual Machine to perform runtime instrumentation.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/CMakeLists.txt#_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(dexmakerjvmtiagent\n            SHARED\n            src/main/jni/dexmakerjvmtiagent/agent.cc)\n```\n\n----------------------------------------\n\nTITLE: Adding Static JVM TI Agent Library\nDESCRIPTION: This command adds a shared library named 'staticjvmtiagent'.  This is the JVM TI (JVM Tool Interface) agent.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline-extended/CMakeLists.txt#_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(staticjvmtiagent\n            SHARED\n            src/main/jni/staticjvmtiagent/agent.cc)\n```\n\n----------------------------------------\n\nTITLE: Creating dispatcher.jar from APK using Shell\nDESCRIPTION: This sequence of shell commands first unzips the `classes.dex` file from the specified unsigned release APK path (`dexmaker-mockito-inline-dispatcher/build/outputs/apk/release/dexmaker-mockito-inline-dispatcher-release-unsigned.apk`). It then uses the `jar` command to create a new JAR file named `dispatcher.jar` containing only `classes.dex`, placing it in the `dexmaker-mockito-inline/src/main/resources/` directory. Finally, it removes the extracted `classes.dex` file.\nSOURCE: https://github.com/linkedin/dexmaker/blob/main/dexmaker-mockito-inline/src/main/resources/README.txt#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nunzip dexmaker-mockito-inline-dispatcher/build/outputs/apk/release/dexmaker-mockito-inline-dispatcher-release-unsigned.apk classes.dex\njar -cf dexmaker-mockito-inline/src/main/resources/dispatcher.jar classes.dex\nrm classes.dex\n```"
  }
]