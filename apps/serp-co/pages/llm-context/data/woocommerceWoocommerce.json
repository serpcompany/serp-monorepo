[
  {
    "owner": "woocommerce",
    "repo": "woocommerce",
    "content": "TITLE: Implementing Translatable Text in WordPress/WooCommerce\nDESCRIPTION: Demonstrates proper internationalization implementation using WordPress translation functions with a defined text domain.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/coding-standards.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add welcome message.\n */\nfunction YOUR_PREFIX_welcome_message() {\n    echo __( 'Welcome to our website', 'YOUR-TEXTDOMAIN' );\n}\nadd_action( 'wp_footer', 'YOUR_PREFIX_welcome_message' );\n```\n\n----------------------------------------\n\nTITLE: Creating and Using WooCommerce Product Repository (JavaScript)\nDESCRIPTION: This code sets up a product repository for SimpleProduct using an HTTP client created with HTTPClientFactory. It demonstrates constructing the repository, creating a product using typed model properties, and accessing structured responses. Dependencies include '@woocommerce/api' and valid authentication credentials. This method leverages repository patterns for type-safe and autocomplete-supported API operations, suitable for TypeScript-aware projects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HTTPClientFactory, SimpleProduct } from '@woocommerce/api';\n\n// Prepare the HTTP client that will be consumed by the repository.\n// This is necessary so that it can make requests to the REST API.\nconst httpClient = HTTPClientFactory.build( 'https://example.com' )\n    .withBasicAuth( 'username', 'password' )\n    .create();\n\nconst repository = SimpleProduct.restRepository( httpClient );\n\n// The repository can now be used to create models.\nconst product = repository.create( { name: 'Simple Product', regularPrice: '9.99' } );\n\n// The response will be one of the models with structured properties and TypeScript support.\nproduct.id;\n\n```\n\n----------------------------------------\n\nTITLE: Preventing Direct Access to PHP Files in WooCommerce\nDESCRIPTION: This code snippet checks if the ABSPATH constant is defined, which indicates that the file is being accessed through WordPress. If not defined, the script exits to prevent direct access and potential data leaks. This should be implemented at the beginning of each PHP file in a WooCommerce extension.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/security/prevent-data-leaks.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! defined( 'ABSPATH' ) ) {\n    exit; // Exit if accessed directly\n}\n```\n\n----------------------------------------\n\nTITLE: Example Implementation of Payment Gateway Features List Filter in PHP\nDESCRIPTION: A practical example showing how to add a custom feature to a specific payment gateway using the __experimental_woocommerce_blocks_payment_gateway_features_list filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// The action callback function.\nfunction my_function_callback( $features, $gateway ) {\n    if ( 'my-gateway' !== $gateway->id ) {\n\t\t\treturn $features;\n\t\t}\n    $features[] = 'some-feature';\n    return $features;\n}\n\nadd_filter( '__experimental_woocommerce_blocks_payment_gateway_features_list', 'my_function_callback', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimentalOrderShippingPackages` SlotFill Slot (JavaScript/React)\nDESCRIPTION: An experimental SlotFill slot named `__experimentalOrderShippingPackages`. This allows extensions to inject React components or other content related to shipping packages within the Cart and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Slot Name:\n__experimentalOrderShippingPackages\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer Data from WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to get customer shipping and billing address information from the WooCommerce cart store. Returns an object containing structured address data including name, company, address lines, city, state, postcode, and country.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_23\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst customerData = store.getCustomerData();\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint to Delete All Cart Coupons (HTTP)\nDESCRIPTION: Defines the HTTP DELETE request structure for removing all coupons currently applied to the cart via the WooCommerce Store API. No parameters are required for this endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nDELETE /cart/coupons/\n```\n\n----------------------------------------\n\nTITLE: Defining a Success Response Object for onPaymentSetup in JavaScript\nDESCRIPTION: Defines the minimal JavaScript object structure for a successful payment method response. Returning this shape sets the payment method context status to `SUCCESS`. Optional properties like `paymentMethodData`, `billingAddress`, and `shippingAddress` can be included to trigger additional actions like adding payment data or updating checkout addresses.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst successResponse = { type: 'success' };\n```\n\n----------------------------------------\n\nTITLE: Initializing Payment Gateway Class in PHP\nDESCRIPTION: This snippet shows how to initialize a custom payment gateway class for WooCommerce. It hooks into the 'plugins_loaded' action and extends the WC_Payment_Gateway class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action( 'plugins_loaded', 'init_your_gateway_class' );\n\nfunction init_your_gateway_class() {\nclass WC_Gateway_Your_Gateway extends WC_Payment_Gateway {}\n}\n```\n\n----------------------------------------\n\nTITLE: Show Only Free Shipping and Local Pickup Methods\nDESCRIPTION: PHP function that filters shipping rates to only show free shipping and local pickup when available. Maintains both shipping methods while hiding all others.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/free_shipping_customization.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * If Free Shipping is available hide other rates, excluding Local Pickup.\n *\n * @param array $rates Array of rates found for the package.\n *\n * @return array\n */\nfunction fsc_hide_shipping_rates_when_free_is_available_excluding_local( $rates ) {\n\t// Define arrays to hold our Free Shipping and Local Pickup methods, if found.\n\t$free_shipping = [];\n\t$local_pickup  = [];\n\n\t// Go through each rate received.\n\tforeach ( $rates as $rate_id => $rate ) {\n\t\t// If either method is found, add them to their respective array.\n\t\tif ( 'free_shipping' === $rate->method_id ) {\n\t\t\t$free_shipping[ $rate_id ] = $rate;\n\t\t\tcontinue;\n\t\t}\n\t\tif ( 'pickup_location' === $rate->method_id ) {\n\t\t\t$local_pickup[ $rate_id ] = $rate;\n\t\t}\n\t}\n\n\t// If the free_shipping array contains a method, then merge the local_pickup into it, and overwrite the rates array.\n\tif ( ! empty( $free_shipping ) ) {\n\t\t$rates = array_merge( $free_shipping, $local_pickup );\n\t}\n\n\treturn $rates;\n}\n\nadd_filter( 'woocommerce_package_rates', 'fsc_hide_shipping_rates_when_free_is_available_excluding_local', 10, 1 );\n```\n\n----------------------------------------\n\nTITLE: Setting Definition Format in WooCommerce Settings API\nDESCRIPTION: Template structure for defining settings in the form_fields array. Shows all available properties that can be used when defining a setting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'setting_name' => array(\n\t'title'       => 'Title for your setting shown on the settings page',\n\t'description' => 'Description for your setting shown on the settings page',\n\t'type'        => 'text|password|textarea|checkbox|select|multiselect',\n\t'default'     => 'Default value for the setting',\n\t'class'       => 'Class for the input element',\n\t'css'         => 'CSS rules added inline on the input element',\n\t'label'       => 'Label', // For checkbox inputs only.\n\t'options'     => array( // Array of options for select/multiselect inputs only.\n\t\t'key' => 'value'\n\t),\n)\n```\n\n----------------------------------------\n\nTITLE: Putting It All Together - Main WooCommerce Extension File Example - PHP\nDESCRIPTION: This snippet presents a full example of a WordPress plugin main file tailored for a WooCommerce extension. It details plugin metadata, activation/deactivation hooks for handling setup and cleanup, and a singleton-based core class structure. The class includes methods for dependency loading, initialization, and prevents cloning/unserializing. Includes is responsible for requiring dependencies using Composer and extension helpers. Limitations include missing implementation details for actual subsystems. Assumes a Composer-based autoload and standard WooCommerce/WordPress plugin environment. Inputs: activation/deactivation events. Outputs: registered hooks, initialized extension.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Plugin Name: My Great WooCommerce Extension\n * Plugin URI: https://woocommerce.com/products/woocommerce-extension/\n * Description: Your extension's description text.\n * Version: 1.0.0\n * Author: Your Name\n * Author URI: http://yourdomain.com/\n * Developer: Your Name\n * Developer URI: http://yourdomain.com/\n * Text Domain: my-extension\n * Domain Path: /languages\n *\n * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd\n *\n * License: GNU General Public License v3.0\n * License URI: http://www.gnu.org/licenses/gpl-3.0.html\n */\n\ndefined( 'ABSPATH' ) || exit;\n\n/**\n * Activation and deactivation hooks for WordPress\n */\nfunction myPrefix_extension_activate() {\n    // Your activation logic goes here.\n}\nregister_activation_hook( __FILE__, 'myPrefix_extension_activate' );\n\nfunction myPrefix_extension_deactivate() {\n    // Your deactivation logic goes here.\n\n    // Don't forget to:\n    // Remove Scheduled Actions\n    // Remove Notes in the Admin Inbox\n    // Remove Admin Tasks\n}\nregister_deactivation_hook( __FILE__, 'myPrefix_extension_deactivate' );\n\n\nif ( ! class_exists( 'My_Extension' ) ) :\n    /**\n     * My Extension core class\n     */\n    class My_Extension {\n\n        /**\n         * The single instance of the class.\n         */\n        protected static $_instance = null;\n\n        /**\n         * Constructor.\n         */\n        protected function __construct() {\n            $this->includes();\n            $this->init();\n        }\n\n        /**\n         * Main Extension Instance.\n         */\n        public static function instance() {\n            if ( is_null( self::$_instance ) ) {\n                self::$_instance = new self();\n            }\n            return self::$_instance;\n        }\n\n        /**\n         * Cloning is forbidden.\n         */\n        public function __clone() {\n            // Override this PHP function to prevent unwanted copies of your instance.\n            //   Implement your own error or use `wc_doing_it_wrong()`\n        }\n\n        /**\n         * Unserializing instances of this class is forbidden.\n         */\n        public function __wakeup() {\n            // Override this PHP function to prevent unwanted copies of your instance.\n            //   Implement your own error or use `wc_doing_it_wrong()`\n        }\n\n        /**\n        * Function for loading dependencies.\n        */\n        private function includes() {\n            $loader = include_once dirname( __FILE__ ) . '/' . 'vendor/autoload.php';\n\n            if ( ! $loader ) {\n                throw new Exception( 'vendor/autoload.php missing please run `composer install`' );\n            }\n\n            require_once dirname( __FILE__ ) . '/' . 'includes/my-extension-functions.php';\n        }\n\n        /**\n         * Function for getting everything set up and ready to run.\n         */\n        private function init() {\n\n            // Examples include:\n\n            // Set up cache management.\n            // new My_Extension_Cache();\n\n            // Initialize REST API.\n            // new My_Extension_REST_API();\n\n            // Set up email management.\n            // new My_Extension_Email_Manager();\n\n            // Register with some-action hook\n            // add_action('some-action', 'my-extension-function');\n        }\n    }\nendif;\n\n/**\n * Function for delaying initialization of the extension until after WooCommerce is loaded.\n */\nfunction my_extension_initialize() {\n\n    // This is also a great place to check for the existence of the WooCommerce class\n    if ( ! class_exists( 'WooCommerce' ) ) {\n    // You can handle this situation in a variety of ways,\n    //   but adding a WordPress admin notice is often a good tactic.\n        return;\n    }\n\n    $GLOBALS['my_extension'] = My_Extension::instance();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Plugin Header Comment for WooCommerce Extension in PHP\nDESCRIPTION: This code snippet demonstrates the structure of a WordPress plugin header comment for a WooCommerce extension. It includes fields for plugin metadata, compatibility information, and licensing details. This header should be placed at the top of the main plugin file for WordPress to read.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/example-header-plugin-comment.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Plugin Name: WooCommerce Extension\n* Plugin URI: https://woocommerce.com/products/woocommerce-extension/\n* Description: Your extension's description text.\n* Version: 1.0.0\n* Author: Your Name\n* Author URI: http://yourdomain.com/\n* Developer: Your Name\n* Developer URI: http://yourdomain.com/\n* Text Domain: woocommerce-extension\n* Domain Path: /languages\n*\n* WC requires at least: 8.0\n* WC tested up to: 8.3\n*\n* License: GNU General Public License v3.0\n* License URI: http://www.gnu.org/licenses/gpl-3.0.html\n* Woo: 12345:342928dfsfhsf8429842374wdf4234sfd\n*/\n```\n\n----------------------------------------\n\nTITLE: Adding a Basic Text Field in WooCommerce Product Editor (PHP)\nDESCRIPTION: This snippet demonstrates how to add a basic text field to the WooCommerce product editor. It includes settings for label, property, placeholder, required status, help text, and tooltip.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/text/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n$section->add_block(\n  array(\n    'id'         => 'example-text-meta',\n    'blockName'  => 'woocommerce/product-text-field',\n    'order'      => 13,\n    'attributes' => array(\n      'label'       => 'Text',\n      'property'    => 'meta_data.text',\n      'placeholder' => 'Placeholder',\n      'required'    => true,\n      'help'        => 'Add additional information here',\n      'tooltip'     => 'My tooltip',\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Updating Cart Item Quantity\nDESCRIPTION: Command line example using cURL to update the quantity of a specific item in the cart. Shows how to include the required Nonce authentication header and pass item key and quantity parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/cart/update-item?key=e369853df766fa44e1ed0ff613f563bd&quantity=10\n```\n\n----------------------------------------\n\nTITLE: Using addAProductToCart Utility in Playwright Test (JavaScript)\nDESCRIPTION: Demonstrates importing and using the `addAProductToCart` utility function from the @woocommerce/e2e-utils-playwright package within a Playwright test. The example test adds a product with a specific ID to the cart, navigates to the cart page, and then asserts that the product's name is present on the cart page. Requires a Playwright test environment and the installed package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils-playwright/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { addAProductToCart } from '@woocommerce/e2e-utils-playwright';\n\ntest('can add products to cart', async ({ page }) => {\n  const product = {\n    id: 1,\n    name: 'Test Product',\n  };\n\n  await addAProductToCart(page, product.id);\n  await page.goto('/cart/');\n\n  await expect(page.locator('td.product-name')).toContainText(product.name);\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Status with React Hooks in WooCommerce\nDESCRIPTION: Demonstrates how to use the WordPress data layer and React hooks to access checkout status from the checkout store. Shows implementation of status checking in a React component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useSelect } = window.wp.data;\nconst { checkoutStore } = window.wc.wcBlocksData;\n\nconst MyComponent = ( props ) => {\n\tconst isComplete = useSelect( ( select ) =>\n\t\tselect( checkoutStore ).isComplete()\n\t);\n\t// do something with isComplete\n};\n```\n\n----------------------------------------\n\nTITLE: Using usePaymentEventsContext OnPaymentSetup Hook (Internal React Integration, WooCommerce, JSX)\nDESCRIPTION: This code illustrates how internal WooCommerce JavaScript components can subscribe to payment setup events using the usePaymentEventsContext hook. With React's useEffect, the onPaymentSetup callback registers an event observer and returns an unsubscribe function for cleanup. Dependencies are the WooCommerce base-contexts package and @wordpress/element. This allows internal components to react to payment setup events and execute side effects when triggered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePaymentEventsContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onPaymentSetup } = usePaymentEventsContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( () => true );\n\t\treturn unsubscribe;\n\t}, [ onPaymentSetup ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Date for REST API in PHP\nDESCRIPTION: Parses and formats a date for ISO8601/RFC3339 standard used in REST APIs. Set $utc to false to get local/offset time instead of UTC.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nwc_rest_prepare_date_response( $date, $utc = true )\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom WooCommerce Shipping Method Plugin in PHP\nDESCRIPTION: This snippet defines the plugin header, checks for WooCommerce dependencies, and sets up the necessary hooks to initialize and add the custom shipping method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Plugin Name: Your Shipping plugin\n * Plugin URI: https://woocommerce.com/\n * Description: Your shipping method plugin\n * Version: 1.0.0\n * Author: WooCommerce\n * Author URI: https://woocommerce.com/\n * Text Domain: your_text_domain\n */\n\n/**\n * If WooCommerce is active, then the class will exist.\n */\nif ( class_exists( 'woocommerce' ) && class_exists( 'WC_Shipping_Method' ) && function_exists( 'WC' ) ) {\n\t// We add an action to init our shipping method class, and a filter to add our shipping method to the method list.\n\tadd_action( 'woocommerce_shipping_init', 'your_shipping_method_init' );\n\tadd_filter( 'woocommerce_shipping_methods', 'your_shipping_method_add' );\n}\n\n/**\n * Your function to add your shipping method to the shipping method list.\n */\nfunction your_shipping_method_add( $methods ) {\n\t$methods['your_shipping_method'] = 'WC_Your_Shipping_Method';\n\treturn $methods;\n}\n\n/**\n * Your function to init your shipping method class.\n */\nfunction your_shipping_method_init() {\n\t/**\n\t * Ideally this would include the class from another file, but for demonstration purposes we will include it here.\n\t */\n\tif ( ! class_exists( 'WC_Your_Shipping_Method' ) ) {\n\t\tclass WC_Your_Shipping_Method extends WC_Shipping_Method {\n\t\t\t// Class implementation goes here\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using WooProductTabItem for Custom Product Editor Tabs in React/JSX\nDESCRIPTION: This example demonstrates how to add a new tab to the WooCommerce product editor using the WooProductTabItem component. It shows both the Fill implementation with custom content and the Slot placement.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/woo-product-tab-item/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WooProductTabItem id={ key } location=\"tab/general\" order={ 2 } pluginId=\"test-plugin\" tabProps={ { title: 'New tab', name: 'new-tab' } } >\n        <Card>\n          <CardBody>{ /* Tab content */ }</CardBody>\n        </Card>\n</WooProductTabItem>\n\n<WooProductTabItem.Slot location=\"tab/general\" />\n```\n\n----------------------------------------\n\nTITLE: Extending Webpack Config from @wordpress/scripts with WooCommerce Plugin - JavaScript\nDESCRIPTION: This snippet shows how to extend a webpack configuration derived from @wordpress/scripts by replacing its default DependencyExtractionWebpackPlugin instance with WooCommerceDependencyExtractionWebpackPlugin. This ensures WooCommerce packages are handled. It imports the default config, filters out the default plugin, and adds the WooCommerce plugin. Dependencies include @wordpress/scripts and @woocommerce/dependency-extraction-webpack-plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/dependency-extraction-webpack-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultConfig = require( '@wordpress/scripts/config/webpack.config' );\nconst webpackConfig = {\n\t...defaultConfig,\n\tplugins: [\n\t\t...defaultConfig.plugins.filter(\n\t\t\t( plugin ) =>\n\t\t\t\tplugin.constructor.name !== 'DependencyExtractionWebpackPlugin'\n\t\t),\n\t\tnew WooCommerceDependencyExtractionWebpackPlugin(),\n\t],\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic React Form with State Management - JSX\nDESCRIPTION: This JSX snippet demonstrates usage of a custom Form component in React with initial values, error handling, and submission. It passes helper props to a TextControl and manages the disabled state of the Submit button based on form errors. The Form supplies input-props and state to children via a render prop. Dependencies include React, the Form component, a Button component, and a TextControl component. Inputs are provided via getInputProps for 'firstName', outputs include form values on submission.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/form/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nconst initialValues = { firstName: '' };\n\n<Form onSubmit={ ( values ) => {} } initialValues={ initialValues }>\n\t{ ( { getInputProps, values, errors, handleSubmit } ) => (\n\t\t<div>\n\t\t\t<TextControl\n\t\t\t\tlabel={ 'First Name' }\n\t\t\t\t{ ...getInputProps( 'firstName' ) }\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tisPrimary\n\t\t\t\tonClick={ handleSubmit }\n\t\t\t\tdisabled={ Object.keys( errors ).length }\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</Button>\n\t\t</div>\n\t) }\n</Form>;\n```\n\n----------------------------------------\n\nTITLE: Registering a Shipping Rate via WooCommerce Shipping API in PHP\nDESCRIPTION: This snippet demonstrates how to construct and register a shipping rate array using the WooCommerce Shipping API in PHP. Dependencies include WooCommerce and its extension mechanisms for shipping methods. Key parameters are 'label', 'cost', 'taxes', and 'calc_tax', which configure the display, amount, and tax behavior for the shipping rate. The snippet assumes usage within a shipping method class and that each rate must have a unique id when used in actual implementation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$rate = array(\\n    'label' => '',   // Label for the rate.\\n    'cost'  => '0',  // Amount for shipping or an array of costs (for per item shipping).\\n    'taxes' => '',   // Pass an array of taxes, or pass nothing to have it calculated for you, or pass 'false' to calculate no tax for this method.\\n    'calc_tax' => 'per_order' // Calc tax per_order or per_item. Per item needs an array of costs passed via 'cost'.\\n);\\n\\n// Register the rate\\n$this->add_rate( $rate );\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Product in WooCommerce with PHP\nDESCRIPTION: This snippet demonstrates how to load a product object using the wc_get_product() function, passing a post ID as the parameter. This is the recommended way to access product data in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/class-reference.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$product = wc_get_product( $post->ID );\n```\n\n----------------------------------------\n\nTITLE: Adding Meta Boxes Compatibly with Both Legacy and HPOS Order Screens\nDESCRIPTION: This code snippet demonstrates how to add meta boxes that work with both legacy WordPress order screens and new HPOS-powered order editor screens. It checks if HPOS is enabled and adds the meta box to the appropriate screen.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Internal\\DataStores\\Orders\\CustomOrdersTableController;\n\nadd_action( 'add_meta_boxes', 'add_xyz_metabox' );\n\nfunction add_xyz_metabox() {\n\t$screen = class_exists( '\\Automattic\\WooCommerce\\Internal\\DataStores\\Orders\\CustomOrdersTableController' ) && wc_get_container()->get( CustomOrdersTableController::class )->custom_orders_table_usage_is_enabled()\n\t\t? wc_get_page_screen_id( 'shop-order' )\n\t\t: 'shop_order';\n\n\tadd_meta_box(\n\t\t'xyz',\n\t\t'Custom Meta Box',\n\t\t'render_xyz_metabox',\n\t\t$screen,\n\t\t'side',\n\t\t'high'\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Form Component with Form Context and Custom Field - JSX\nDESCRIPTION: This snippet shows advanced Form usage in React, highlighting useFormContext to manage input props and state within field components. A Field component utilizes useFormContext to access Form context and bind props to an input for 'firstName'. The main Form uses initialValues, and onSubmit handler, manages errors, and shares state and actions via render props. Dependencies are React, Form, useFormContext hook, and Button component. Key parameters include context-driven getInputProps and handleSubmit. Outputs are handled through the submission handler.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/form/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nconst initialValues = { firstName: '' };\n\nconst Field = () => {\n\tconst formProps = useFormContext< { foo: string } >();\n\n\treturn <input type=\"text\" { ...formProps.getInputProps<string>( 'firstName' ) } />\n}\n\n<Form\n\tonSubmit={ ( values ) => {} }\n\tinitialValues={ initialValues }\n>\n\t{ ( {\n\t\terrors,\n\t\thandleSubmit,\n\t} ) => (\n\t\t<div>\n\t\t\t<Field />\n\t\t\t<Button\n\t\t\t\tisPrimary\n\t\t\t\tonClick={ handleSubmit }\n\t\t\t\tdisabled={ Object.keys( errors ).length }\n\t\t\t>\n\t\t\t\tSubmit\n\t\t\t</Button>\n\t\t</div>\n\t) }\n</Form>\n```\n\n----------------------------------------\n\nTITLE: Declaring WooCommerce Extension Metadata in PHP\nDESCRIPTION: Example of a plugin header comment that includes all required metadata fields for a WooCommerce extension. This includes plugin name, URIs, author information, version, text domain, and Woo marketplace identifier.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Plugin Name: My Great WooCommerce Extension\n * Plugin URI: https://woocommerce.com/products/woocommerce-extension/\n * Description: Your extension's description text.\n * Version: 1.0.0\n * Author: Your Name\n * Author URI: http://yourdomain.com/\n * Developer: Your Name\n * Developer URI: http://yourdomain.com/\n * Text Domain: my-extension\n * Domain Path: /languages\n *\n * Woo: 12345:342928dfsfhsf8429842374wdf4234sfd\n *\n * License: GNU General Public License v3.0\n * License URI: http://www.gnu.org/licenses/gpl-3.0.html\n */\n```\n\n----------------------------------------\n\nTITLE: Checking if Customer Bought Product in PHP\nDESCRIPTION: Verifies if a customer has purchased a specific product. The check can be performed using customer email, user ID, or both along with the product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nwc_customer_bought_product( $customer_email, $user_id, $product_id )\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Data Store Status with React Hooks\nDESCRIPTION: Demonstrates how to use the WordPress data API with the useSelect hook to access checkout completion status from the checkout store in a React component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useSelect } = window.wp.data;\nconst { checkoutStore } = window.wc.wcBlocksData;\n\nconst MyComponent = ( props ) => {\n\tconst isComplete = useSelect( ( select ) =>\n\t\tselect( checkoutStore ).isComplete()\n\t);\n\t// do something with isComplete\n};\n```\n\n----------------------------------------\n\nTITLE: Hide Other Shipping Methods When Free Shipping Available\nDESCRIPTION: PHP function that filters shipping rates to only show free shipping when it's available. Uses the woocommerce_package_rates filter to modify available shipping methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/free_shipping_customization.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Hide other shipping rates when free shipping is available.\n *\n * @param array $rates Array of rates found for the package.\n *\n * @return array\n */\nfunction fsc_hide_shipping_rates_when_free_is_available( $rates ) {\n\t// Go through each rate found.\n\tforeach ( $rates as $rate_id => $rate ) {\n\t\t// If Free Shipping is found, define it as the only rate and break out of the foreach.\n\t\tif ( 'free_shipping' === $rate->method_id ) {\n\t\t\t$rates = [ $rate_id => $rate ];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $rates;\n}\nadd_filter( 'woocommerce_package_rates', 'fsc_hide_shipping_rates_when_free_is_available', 10, 1 );\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Product in PHP\nDESCRIPTION: Main function for retrieving a single product using the WC_Product_Factory class. The parameter can be a post object or a post ID of the product.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nwc_get_product( $the_product = false )\n```\n\n----------------------------------------\n\nTITLE: Processing Custom Field Data in WooCommerce Checkout in PHP\nDESCRIPTION: This code demonstrates how to retrieve and save custom field data during the WooCommerce checkout process. It hooks into the checkout update process to save the custom shipping instructions to order metadata.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nprivate function save_shipping_instructions() {\n\t/**\n\t * We write a hook, using the `woocommerce_store_api_checkout_update_order_from_request` action\n\t * that will update the order metadata with the shipping-workshop alternate shipping instruction.\n\t *\n\t * The documentation for this hook is at: https://github.com/woocommerce/woocommerce-blocks/blob/b73fbcacb68cabfafd7c3e7557cf962483451dc1/docs/third-party-developers/extensibility/hooks/actions.md#woocommerce_store_api_checkout_update_order_from_request\n\t */\n\tadd_action(\n\t\t'woocommerce_store_api_checkout_update_order_from_request',\n\t\tfunction( \\WC_Order $order, \\WP_REST_Request $request ) {\n\t\t\t$shipping_workshop_request_data = $request['extensions'][$this->get_name()];\n\t\t\t$alternate_shipping_instruction = $shipping_workshop_request_data['alternateShippingInstruction'];\n\t\t\t$other_shipping_value           = $shipping_workshop_request_data['otherShippingValue'];\n\t\t\t$order->update_meta_data( 'shipping_workshop_alternate_shipping_instruction', $alternate_shipping_instruction );\n\t\t\t$order->save();\n\t\t},\n\t\t10,\n\t\t2\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Task in JavaScript for WooCommerce\nDESCRIPTION: This snippet demonstrates how to register a custom task in JavaScript using the @wordpress/plugins and @woocommerce/onboarding packages. It includes both the task content and the task list item components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * External dependencies\n */\nimport { createElement } from '@wordpress/element';\nimport {\n\tWooOnboardingTask,\n\tWooOnboardingTaskListItem,\n} from '@woocommerce/onboarding';\nimport { registerPlugin } from '@wordpress/plugins';\n\nconst Task = ( { onComplete, task, query } ) => {\n\t// Implement your task UI/feature here.\n\treturn <div></div>;\n};\n\nregisterPlugin( 'add-task-content', {\n\trender: () => (\n\t\t<WooOnboardingTask id=\"my-task\">\n\t\t\t{ ( { onComplete, query, task } ) => (\n\t\t\t\t<Task onComplete={ onComplete } task={ task } query={ query } />\n\t\t\t) }\n\t\t</WooOnboardingTask>\n\t),\n} );\n\nregisterPlugin( 'add-task-list-item', {\n\tscope: 'woocommerce-tasks',\n\trender: () => (\n\t\t<WooOnboardingTaskListItem id=\"my-task\">\n\t\t\t{ ( { defaultTaskItem: DefaultTaskItem } ) => (\n\t\t\t\t// Add a custom wrapper around the default task item.\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"woocommerce-custom-tasklist-item\"\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\tborder: '1px solid red',\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t<DefaultTaskItem />\n\t\t\t\t</div>\n\t\t\t) }\n\t\t</WooOnboardingTaskListItem>\n\t),\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Custom Field Block Plugin in PHP\nDESCRIPTION: This code snippet represents the main plugin file that loads the custom block integration and Store API extension. It hooks into WooCommerce Blocks to register the custom integration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/**\n * Plugin Name:     New Field Block\n * Version:         1.0\n * Author:          Your Name Here\n * License:         GPL-2.0-or-later\n * License URI:     https://www.gnu.org/licenses/gpl-2.0.html\n * Text Domain:     new-field-block\n *\n * @package         create-block\n */\n\n// ... Some code here\n\n/**\n * Include the dependencies needed to instantiate the block.\n */\nadd_action(\n\t'woocommerce_blocks_loaded',\n\tfunction() {\n\t\trequire_once __DIR__ . '/custom-inner-block-blocks-integration.php';\n\t\trequire_once __DIR__ . '/custom-inner-block-blocks-integration.php';\n\n\t\t// Initialize our store endpoint extension when WC Blocks is loaded.\n\t\tCustom_Inner_Block_Extend_Store_Endpoint::init();\n\n\t\tadd_action(\n\t\t\t'woocommerce_blocks_checkout_block_registration',\n\t\t\tfunction( $integration_registry ) {\n\t\t\t\t$integration_registry->register( new Custom_Inner_Block_Blocks_Integration() );\n\t\t\t}\n\t\t);\n\t}\n);\n\n// ... Some code here\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Selection with SelectControl - React - JavaScript\nDESCRIPTION: This snippet demonstrates how to use the SelectControl component with basic array-based item selection, leveraging React's useState hook for managing selected items. It requires React (with hooks support) and a UI environment for rendering SelectControl, taking props for items, selected state, and handlers for selecting or removing items. The component supports multi-selection and expects item objects with value and label properties as inputs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/experimental-select-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst [ selected, setSelected ] = useState< SelectedType >( [] );\\n\\nconst items = [\\n\\t{ value: 'item-1', label: 'Item 1' },\\n\\t{ value: 'item-2', label: 'Item 2' },\\n];\\n\\n<SelectControl\\n    multiple\\n    items={ items }\\n    label=\\\"My select control\\\"\\n    selected={ selected }\\n    onSelect={ ( item ) => item && setSelected( [ ...selected, item ] ) }\\n    onRemove={ () => setSelected( selected.filter( ( i ) => i !== item ) ) }\\n/>\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Data from Checkout Block to Server in WooCommerce JavaScript\nDESCRIPTION: This JavaScript component demonstrates how to participate in the WooCommerce checkout event flow by subscribing to 'onPaymentProcessing'. It emits custom data (myGatewayCustomData) for server-side processing upon successful validation. The snippet depends on usePaymentMethodInterface and emits responses that WooCommerce will forward in the payment request. Assumes a React environment and usePaymentMethodInterface context is available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst Content = ( props ) => {\\n\\tconst { eventRegistration, emitResponse } = props;\\n\\tconst { onPaymentProcessing } = eventRegistration;\\n\\tuseEffect( () => {\\n\\t\\tconst unsubscribe = onPaymentProcessing( async () => {\\n\\t\\t\\t// Here we can do any processing we need, and then emit a response.\\n\\t\\t\\t// For example, we might validate a custom field, or perform an AJAX request, and then emit a response indicating it is valid or not.\\n\\t\\t\\tconst myGatewayCustomData = '12345';\\n\\t\\t\\tconst customDataIsValid = !! myGatewayCustomData.length;\\n\\n\\t\\t\\tif ( customDataIsValid ) {\\n\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\ttype: emitResponse.responseTypes.SUCCESS,\\n\\t\\t\\t\\t\\tmeta: {\\n\\t\\t\\t\\t\\t\\tpaymentMethodData: {\\n\\t\\t\\t\\t\\t\\t\\tmyGatewayCustomData,\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t};\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn {\\n\\t\\t\\t\\ttype: emitResponse.responseTypes.ERROR,\\n\\t\\t\\t\\tmessage: 'There was an error',\\n\\t\\t\\t};\\n\\t\\t} );\\n\\t\\t// Unsubscribes when this component is unmounted.\\n\\t\\treturn () => {\\n\\t\\t\\tunsubscribe();\\n\\t\\t};\\n\\t}, [\\n\\t\\temitResponse.responseTypes.ERROR,\\n\\t\\temitResponse.responseTypes.SUCCESS,\\n\\t\\tonPaymentProcessing,\\n\\t] );\\n\\treturn decodeEntities( settings.description || '' );\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Checking Account Creation Preference in Checkout Store with JavaScript\nDESCRIPTION: Shows how to determine if the shopper has opted to create an account using the getShouldCreateAccount selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst shouldCreateAccount = store.getShouldCreateAccount();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Add Item To Cart Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Illustrates dispatching the addItemToCart action, with productId (number) and quantity (number, default: 1), to add a product to the WooCommerce cart. This action updates the Redux store and triggers cart state changes. Required: valid productId and optionally a quantity.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( addItemToCart( productId, quantity ) );\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Item Quantity HTTP Endpoint\nDESCRIPTION: HTTP endpoint specification for updating an item's quantity in the cart. Requires authentication via Nonce Token or Cart Token and accepts the item key and new quantity.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_13\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/update-item\n```\n\n----------------------------------------\n\nTITLE: Initializing Core Extension Setup - PHP\nDESCRIPTION: This private method demonstrates a standard way to register and initialize various subsystems (cache, REST API, email manager) and hook custom actions for a WooCommerce extension class. Dependencies like extension-specific subsystems must be available and included beforehand. This function assumes the environment is ready (likely called in the constructor) and performs registrations at the appropriate time for WordPress. No inputs/outputs; side effects include registering actions and instantiating classes needed for runtime operation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nprivate function init() {\n    // Set up cache management.\n    new My_Extension_Cache();\n\n    // Initialize REST API.\n    new My_Extension_REST_API();\n\n    // Set up email management.\n    new My_Extension_Email_Manager();\n\n    // Register with some-action hook\n    add_action( 'some-action', 'my-extension-function' );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Payment Method Integration Using WooCommerce Hooks in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register a custom payment method integration server-side using the woocommerce_blocks_payment_method_type_registration action. The new payment method class is added to the registry so WooCommerce Blocks can discover and use it in checkout. It requires WordPress action hooks and WooCommerce's PaymentMethodRegistry. Ensure the class is included before registration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse MyPlugin\\MyPaymentMethod\\MyPaymentMethodType;\\nuse Automattic\\WooCommerce\\Blocks\\Payments\\PaymentMethodRegistry;\\n\\nadd_action(\\n\\t'woocommerce_blocks_payment_method_type_registration',\\n\\tfunction( PaymentMethodRegistry $payment_method_registry ) {\\n\\t\\t$payment_method_registry->register( new MyPaymentMethodType() );\\n\\t}\\n);\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Gateway to WooCommerce Payment Methods in PHP\nDESCRIPTION: This code demonstrates how to add a custom payment gateway class to the list of available payment methods in WooCommerce using the 'woocommerce_payment_gateways' filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction add_your_gateway_class( $methods ) {\n$methods[] = 'WC_Gateway_Your_Gateway';\nreturn $methods;\n}\n\nadd_filter( 'woocommerce_payment_gateways', 'add_your_gateway_class' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Control in React\nDESCRIPTION: React implementation of the dropdown control using WordPress components with JSX syntax.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { createElement, useState } from '@wordpress/element';\nimport { ComboboxControl } from '@wordpress/components';\nimport { useWooBlockProps } from '@woocommerce/block-templates';\n\nfunction Edit( { attributes } ) {\n\tconst [ value, setValue ] = useState();\n\tconst [ filteredOptions, setFilteredOptions ] =\n\t\tuseState( DROPDOWN_OPTIONS );\n\n\tconst blockProps = useWooBlockProps( attributes );\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<ComboboxControl\n\t\t\t\tlabel=\"Example dropdown\"\n\t\t\t\tvalue={ value }\n\t\t\t\tonChange={ setValue }\n\t\t\t\toptions={ filteredOptions }\n\t\t\t\tonFilterValueChange={ ( inputValue ) =>\n\t\t\t\t\tsetFilteredOptions(\n\t\t\t\t\t\tDROPDOWN_OPTIONS.filter( ( option ) =>\n\t\t\t\t\t\t\toption.label\n\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t.startsWith( inputValue.toLowerCase() )\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Example PUT Request Payload for Checkout Update - JSON\nDESCRIPTION: Shows an example JSON request body for updating checkout information, including custom additional fields, selected payment method, and order notes. Useful for frontend applications making AJAX or REST calls to persist changes to draft orders. Parameters set here influence backend order state and UI representation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"additional_fields\": {\n    \"plugin-namespace/leave-on-porch\": true,\n    \"plugin-namespace/location-on-porch\": \"dsdd\"\n  },\n  \"payment_method\": \"bacs\",\n  \"order_notes\": \"Please leave package on back porch\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Customized Type-Safe Store in TypeScript\nDESCRIPTION: Demonstrates how to create a customized, type-safe data store using `createCrudDataStore` in TypeScript. It utilizes extended types (`MyCustomActions`, `MyCustomSelectors`) and provides custom implementations for the reducer, actions, and selectors within the `storeConfig` option, ensuring type safety for both standard CRUD operations and custom extensions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// index.ts\nimport { Reducer } from 'redux';\nimport { createCrudDataStore } from '../crud';\nimport { ResourceState } from '../crud/reducer';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\nimport { reducer } from './reducer';\nimport { MyCustomActions, MyCustomSelectors } from './types';\n\nexport const store = createCrudDataStore<MyCustomActions, MyCustomSelectors>({\n    storeName: 'my/custom/store',\n    resourceName: 'MyCustomResource',\n    pluralResourceName: 'MyCustomResources',\n    namespace: '/my/rest/namespace',\n    storeConfig: {\n        reducer: reducer as Reducer<ResourceState>,\n        actions: actions as MyCustomActions,\n        selectors: selectors as MyCustomSelectors,\n    },\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Unregistering Admin Tasks on WooCommerce Extension Deactivation (PHP)\nDESCRIPTION: Demonstrates how to unregister tasks created by an extension when it is deactivated. This involves removing the filter that registers the task.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-deactivation-and-uninstallation.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Unregister task.\nfunction my_extension_deactivate_task() {\n    remove_filter( 'woocommerce_get_registered_extended_tasks', 'my_extension_register_the_task', 10, 1 );\n}\n \nregister_deactivation_hook( __FILE__, 'my_extension_deactivate_task' );\n```\n\n----------------------------------------\n\nTITLE: Complete Government ID Field Implementation in WooCommerce\nDESCRIPTION: Comprehensive example showing how to implement a government ID field with validation, including field registration, sanitization, and cross-field validation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_init',\n\tfunction() {\n\t\twoocommerce_register_additional_checkout_field(\n\t\t\tarray(\n\t\t\t\t'id'            => 'namespace/gov-id',\n\t\t\t\t'label'         => 'Government ID',\n\t\t\t\t'location'      => 'address',\n\t\t\t\t'required'      => true,\n\t\t\t\t'attributes'    => array(\n\t\t\t\t\t'autocomplete' => 'government-id',\n\t\t\t\t\t'pattern'      => '[A-Z0-9]{5}',\n\t\t\t\t\t'title'        => 'Your 5-digit Government ID',\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\t// ... additional code ...\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Dependency Extraction Webpack Plugin with Webpack - JavaScript\nDESCRIPTION: This snippet demonstrates how to import and instantiate the WooCommerceDependencyExtractionWebpackPlugin within a webpack configuration file (e.g., webpack.config.js). By adding the plugin to the plugins array, WooCommerce and WordPress dependencies are automatically managed during the build process. Ensure that @woocommerce/dependency-extraction-webpack-plugin and webpack are installed as dependencies. No additional configuration is required for standard usage.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/dependency-extraction-webpack-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst WooCommerceDependencyExtractionWebpackPlugin = require( '@woocommerce/dependency-extraction-webpack-plugin' );\n\nmodule.exports = {\n // …snip\n plugins: [ new WooCommerceDependencyExtractionWebpackPlugin() ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce API Client via HTTPClientFactory (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import, configure, and instantiate a WooCommerce API client using the HTTPClientFactory. It covers both basic and OAuth authentication. The client object provides the main interface for making API requests; the example shows fetching product data with client.get and handling API responses and errors. Requires '@woocommerce/api' as a dependency, and authentication credentials for the target WooCommerce site. Intended for use in Node.js or browser (with appropriate build tools).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HTTPClientFactory } from '@woocommerce/api';\n\n// You can create an API client using the client factory with pre-configured middleware for convenience.\nlet client = HTTPClientFactory.build( 'https://example.com' )\n    .withBasicAuth( 'username', 'password' )\n    .create();\n\n// You can also create an API client configured for requests using OAuth.\nclient = HTTPClientFactory.build( 'https://example.com' )\n    .withOAuth( 'consumer_secret', 'consumer_password' )\n    .create();\n\n// You can then use the client to make API requests.\nclient.get( '/wc/v3/products' ).then( ( response ) => {\n  // Access the status code from the response.\n  response.status;\n  // Access the headers from the response.\n  response.headers;\n  // Access the data from the response, in this case, the products.\n  response.data;\n}, ( error ) => {\n  // Handle errors that may have come up.\n} );\n\n```\n\n----------------------------------------\n\nTITLE: Defining Gateway Settings Fields in PHP for WooCommerce\nDESCRIPTION: This snippet shows how to define form fields for a payment gateway's settings in WooCommerce. It includes fields for enabling/disabling the gateway, setting its title, and adding a description.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$this->form_fields = array(\n'enabled' => array(\n'title' => __( 'Enable/Disable', 'woocommerce' ),\n'type' => 'checkbox',\n'label' => __( 'Enable Cheque Payment', 'woocommerce' ),\n'default' => 'yes'\n),\n'title' => array(\n'title' => __( 'Title', 'woocommerce' ),\n'type' => 'text',\n'description' => __( 'This controls the title which the user sees during checkout.', 'woocommerce' ),\n'default' => __( 'Cheque Payment', 'woocommerce' ),\n'desc_tip' => true,\n),\n'description' => array(\n'title' => __( 'Customer Message', 'woocommerce' ),\n'type' => 'textarea',\n'default' => ''\n)\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting Prices in PHP\nDESCRIPTION: Formats a price with the correct number of decimals and currency symbol. Accepts optional arguments array with settings like ex_tax_label which can append an 'excluding tax' message.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nwc_price( $price, $args = array() )\n```\n\n----------------------------------------\n\nTITLE: Listing Cart Items Using WooCommerce Store API - HTTP\nDESCRIPTION: Performs an HTTP GET request to retrieve all cart items from the /cart/items endpoint of the WooCommerce Store API. No additional parameters are needed for this request. Expected output is a JSON array representing all items currently present in the cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /cart/items\n```\n\n----------------------------------------\n\nTITLE: Using Parent and Child Repositories for WooCommerce Variations (JavaScript)\nDESCRIPTION: This snippet illustrates advanced use of repository patterns with parent and child relationships (VariableProduct and ProductVariation). It includes configuration with HTTPClientFactory, project setup with index permalinks, model creation with attributes, and use of TypeScript-typed CRUD methods. Dependencies include '@woocommerce/api', relevant product and variation model classes, and appropriate WooCommerce site credentials. All child repository methods require a parentId. The code is asynchronous and assumes a modern JavaScript runtime supporting async/await.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { HTTPClientFactory, VariableProduct, ProductVariation } from '@woocommerce/api';\n\nconst httpClient = HTTPClientFactory.build( 'https://example.com' )\n    .withBasicAuth( 'username', 'password' )\n    .withIndexPermalinks()\n    .create();\n\nconst productRepository = VariableProduct.restRepository( httpClient );\nconst variationRepository = ProductVariation.restRepository( httpClient );\n\nconst product = await productRepository.create({\n    \"name\": \"Variable Product with Three Attributes\",\n    \"defaultAttributes\": [\n    {\n     \"id\": 0,\n     \"name\": \"Size\",\n     \"option\": \"Medium\"\n    },\n    {\n     \"id\": 0,\n     \"name\": \"Colour\",\n     \"option\": \"Blue\"\n    }\n    ],\n    \"attributes\": [\n    {\n     \"id\": 0,\n     \"name\": \"Colour\",\n     \"isVisibleOnProductPage\": true,\n     \"isForVariations\": true,\n     \"options\": [\n       \"Red\",\n       \"Green\",\n       \"Blue\"\n     ],\n     \"sortOrder\": 0\n    },\n    {\n     \"id\": 0,\n     \"name\": \"Size\",\n     \"isVisibleOnProductPage\": true,\n     \"isForVariations\": true,\n     \"options\": [\n       \"Small\",\n       \"Medium\",\n       \"Large\"\n     ],\n     \"sortOrder\": 0\n   }\n  ]\n});\n\nconst variation = await variationRepository.create( product.id, {\n    \"regularPrice\": \"19.99\",\n    \"attributes\": [\n      {\n        \"name\": \"Size\",\n        \"option\": \"Large\"\n      },\n      {\n        \"name\": \"Colour\",\n        \"option\": \"Red\"\n      }\n    ]\n});\n\n```\n\n----------------------------------------\n\nTITLE: Using the wc_session_expiration Filter in PHP\nDESCRIPTION: This filter allows customization of the session expiration time in seconds for WooCommerce cart sessions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'wc_session_expiration', int $expiration )\n```\n\n----------------------------------------\n\nTITLE: Implementing WooProductFieldItem Fill and Slot in JSX for WooCommerce Product Editor\nDESCRIPTION: This snippet demonstrates how to use the WooProductFieldItem fill component to add a new text field to the 'details' section of the product editor, and how to render the corresponding slot. The fill component includes props for id, section, order, and pluginId, while the slot component specifies the section to render.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/woo-product-field-item/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WooProductFieldItem id={ key } section=\"details\" order={ 2 } pluginId=\"test-plugin\" >\n  { () => {\n    return (\n      <TextControl\n        label=\"Name\"\n        name={ `product-mvp-name` }\n        placeholder=\"e.g. 12 oz Coffee Mug\"\n        value=\"Test Name\"\n        onChange={ () => console.debug( 'Changed!' ) }\n      />\n    );\n} }\n</WooProductFieldItem>\n\n<WooProductFieldItem.Slot section=\"details\" />\n```\n\n----------------------------------------\n\nTITLE: New Customer Data Filter\nDESCRIPTION: Filter hook to modify customer data before account registration. Allows modifying username, password, email, and other user data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_new_customer_data', array $add_to_cart_data )\n```\n\n----------------------------------------\n\nTITLE: Verifying Calculation Status in Checkout Store using JavaScript\nDESCRIPTION: Demonstrates how to check if the checkout is currently calculating totals using the isCalculating selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isCalculating = store.isCalculating();\n```\n\n----------------------------------------\n\nTITLE: Dispatching Set Shipping Address Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows dispatching setShippingAddress with a shippingAddress object (fields: first_name, last_name, company, address_1, address_2, city, state, postcode, country). This action only updates the shipping address locally in the Redux store and does not submit it to the server. Parameter: shippingAddress must match the required structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( setShippingAddress( shippingAddress ) );\n```\n\n----------------------------------------\n\nTITLE: Implementing Redeem Button Click Handler in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to implement a click handler for a 'Redeem' button in a WooCommerce extension. It uses the extensionCartUpdate function to send the points input value to the server for processing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { extensionCartUpdate } = window.wc.blocksCheckout;\n\nconst buttonClickHandler = () => {\n\textensionCartUpdate( {\n\t\tnamespace: 'super-coupons',\n\t\tdata: {\n\t\t\tpointsInputValue,\n\t\t},\n\t} );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Shop Order via CLI\nDESCRIPTION: Creates a new WooCommerce shop order. Allows specifying various order details like `parent_id`, `status`, `currency`, `customer_id`, `customer_note`, `billing`/`shipping` addresses, `payment_method` details, `transaction_id`, `meta_data`, `line_items`, `shipping_lines`, `fee_lines`, and `coupon_lines`. The `--set_paid` flag can mark the order as paid, update status, and adjust stock. Use `--porcelain` to output only the new order ID on success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order create\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameters for API Authentication\nDESCRIPTION: Example of authenticating WooCommerce REST API requests using query string parameters when the Authorization header isn't properly parsed by the server.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/rest-api/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nhttps://local.wordpress.dev/wp-json/wc/v2/orders?consumer_key=XXXX&consumer_secret=XXXX\n```\n\n----------------------------------------\n\nTITLE: Modifying Proceed to Checkout Button Label in WooCommerce Blocks\nDESCRIPTION: This snippet demonstrates how to use the proceedToCheckoutButtonLabel filter to change the default text of the 'Proceed to Checkout' button. It checks if cart items exist before applying the custom label.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/checkout-and-place-order-button.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyProceedToCheckoutButtonLabel = (\n\tdefaultValue,\n\textensions,\n\targs\n) => {\n\tif ( ! args?.cart.items ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn 'Go to checkout';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tproceedToCheckoutButtonLabel: modifyProceedToCheckoutButtonLabel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Declaring HPOS Compatibility for a WooCommerce Extension in PHP\nDESCRIPTION: This PHP snippet demonstrates how to declare a WooCommerce extension as compatible with High-Performance Order Storage (HPOS). It hooks into the `before_woocommerce_init` action and uses the `FeaturesUtil::declare_compatibility` method, passing `true` as the compatibility flag. This code should typically be placed in the main plugin file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'before_woocommerce_init', function() {\n\tif ( class_exists( \\Automattic\\WooCommerce\\Utilities\\FeaturesUtil::class ) ) {\n\t\t\\Automattic\\WooCommerce\\Utilities\\FeaturesUtil::declare_compatibility( 'custom_order_tables', __FILE__, true );\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding a New Field to WooCommerce Admin Product Form in PHP\nDESCRIPTION: This code snippet demonstrates how to add a new field to the WooCommerce Admin product form using the `FormFactory::add_field` method. It checks for the method's existence before adding a text field named 'test_new_field' to a specific section of the form.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Internal/Admin/ProductForm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction add_product_form_field() {\n    if (\n        ! method_exists( '\\Automattic\\WooCommerce\\Internal\\Admin\\ProductForm\\FormFactory', 'add_field' )\n    ) {\n        return;\n    }\n\n    \\Automattic\\WooCommerce\\Internal\\Admin\\ProductForm\\FormFactory::add_field(\n        'test_new_field',\n        'woocommerce-plugin-name',\n        array(\n          'type'       => 'text',\n          'section'    => 'Section',\n          'properties' => array( 'name' => 'test_new_field', 'label' => 'Test New Field' ),\n        )\n    );\n}\nadd_action( 'init', 'add_product_form_field' );\n```\n\n----------------------------------------\n\nTITLE: Using the WooCommerce Chart Component (JSX)\nDESCRIPTION: Demonstrates how to render the `Chart` component in a React application. It defines sample timeseries data (`data`) as an array of objects, each representing a date with nested objects for different data series (e.g., 'Hoodie', 'Sunglasses'). The `Chart` component is then instantiated, passing the `data`, a `title`, and a specific `layout` prop.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/chart/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst data = [\n\t{\n\t\tdate: '2018-05-30T00:00:00',\n\t\tHoodie: {\n\t\t\tlabel: 'Hoodie',\n\t\t\tvalue: 21599,\n\t\t},\n\t\tSunglasses: {\n\t\t\tlabel: 'Sunglasses',\n\t\t\tvalue: 38537,\n\t\t},\n\t\tCap: {\n\t\t\tlabel: 'Cap',\n\t\t\tvalue: 106010,\n\t\t},\n\t},\n\t{\n\t\tdate: '2018-05-31T00:00:00',\n\t\tHoodie: {\n\t\t\tlabel: 'Hoodie',\n\t\t\tvalue: 14205,\n\t\t},\n\t\tSunglasses: {\n\t\t\tlabel: 'Sunglasses',\n\t\t\tvalue: 24721,\n\t\t},\n\t\tCap: {\n\t\t\tlabel: 'Cap',\n\t\t\tvalue: 70131,\n\t\t},\n\t},\n\t{\n\t\tdate: '2018-06-01T00:00:00',\n\t\tHoodie: {\n\t\t\tlabel: 'Hoodie',\n\t\t\tvalue: 10581,\n\t\t},\n\t\tSunglasses: {\n\t\t\tlabel: 'Sunglasses',\n\t\t\tvalue: 19991,\n\t\t},\n\t\tCap: {\n\t\t\tlabel: 'Cap',\n\t\t\tvalue: 53552,\n\t\t},\n\t},\n\t{\n\t\tdate: '2018-06-02T00:00:00',\n\t\tHoodie: {\n\t\t\tlabel: 'Hoodie',\n\t\t\tvalue: 9250,\n\t\t},\n\t\tSunglasses: {\n\t\t\tlabel: 'Sunglasses',\n\t\t\tvalue: 16072,\n\t\t},\n\t\tCap: {\n\t\t\tlabel: 'Cap',\n\t\t\tvalue: 47821,\n\t\t},\n\t},\n];\n\n<Chart data={ data } title=\"Example Chart\" layout=\"item-comparison\" />\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Removing Item from Cart\nDESCRIPTION: Command line example using cURL to remove a specific item from the cart by its key. Shows how to include the required Nonce authentication header.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/cart/remove-item?key=e369853df766fa44e1ed0ff613f563bd\n```\n\n----------------------------------------\n\nTITLE: Implementing the DatePicker Component in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `DatePicker` component. It shows how to pass state variables (`date`, `text`, `error`) and an update handler (`onUpdate`) which likely updates the component's state. The `dateFormat` prop specifies the desired date format using moment.js tokens.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/calendar/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DatePicker\n\tdate={ date }\n\ttext={ text }\n\terror={ error }\n\tonUpdate={ ( { date, text, error } ) => setState( { date, text, error } ) }\n\tdateFormat=\"MM/DD/YYYY\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Pending Quantity Update Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: This example demonstrates dispatching the itemIsPendingQuantity action to indicate if a cart item's quantity is currently being updated. It accepts cartItemKey (string) and isPending (boolean, default: true). Dispatching this action updates the Redux state to reflect item quantity update activity for the specified item.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( itemIsPendingQuantity( cartItemKey, isPending ) );\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Coupon Data Store Class in PHP\nDESCRIPTION: Defines a new WC_Coupon_Data_Store_Custom_Table class that extends WC_Data_Store_WP and implements necessary interfaces for coupon data handling.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * WC Coupon Data Store: Custom Table.\n */\nclass WC_Coupon_Data_Store_Custom_Table extends WC_Data_Store_WP implements WC_Coupon_Data_Store_Interface, WC_Object_Data_Store_Interface {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Numeric Value Range Filter - WooCommerce React - JavaScript\nDESCRIPTION: This example illustrates a numeric range filter configuration ('quantity'), with support for rules like 'lessthan', 'morethan', and 'between' and a 'Number' input component. Each rule is provided with a translation-enabled label. This filter can also be extended to handle currencies by adding input.type as 'currency', which enables locale-aware formatting. Prerequisites include the use of the localization function __ and optionally store currency context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/advanced-filters/README.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n\t...,\n\tfilters: {\n\t\tquantity: {\n\t\t\trules: [\n\t\t\t\t{\n\t\t\t\t\tvalue: 'lessthan',\n\t\t\t\t\tlabel: __( 'Less Than', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'morethan',\n\t\t\t\t\tlabel: __( 'More Than', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'between',\n\t\t\t\t\tlabel: __( 'Between', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t],\n\t\t\tinput: {\n\t\t\t\tcomponent: 'Number',\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Extending WooCommerce Store API Cart Items with Subscription Data in PHP\nDESCRIPTION: This PHP code defines a class `WC_Subscriptions_Extend_Store_Endpoint` that hooks into `woocommerce_blocks_loaded` to extend the WooCommerce Store API. It uses the `ExtendSchema` class to register custom data (via `extend_cart_item_data`) and schema definitions (via `extend_cart_item_schema`) for the `cart/items` endpoint. This adds subscription-specific details like billing period, interval, length, trial information, and formatted sign-up fees to each cart item representing a subscription product. It depends on WooCommerce core, WooCommerce Subscriptions plugin features (like `WC_Subscriptions_Product`), and the Automattic WooCommerce StoreApi components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-data.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * WooCommerce Subscriptions Extend Store API.\n *\n * A class to extend the store public API with subscription related data\n * for each subscription item\n *\n * @package WooCommerce Subscriptions\n */\nuse Automattic\\WooCommerce\\StoreApi\\StoreApi;\nuse Automattic\\WooCommerce\\StoreApi\\Schemas\\ExtendSchema;\nuse Automattic\\WooCommerce\\StoreApi\\Schemas\\V1\\CartItemSchema;\n\nadd_action( 'woocommerce_blocks_loaded', function() {\n\t$extend = StoreApi::container()->get( ExtendSchema::class );\n\tWC_Subscriptions_Extend_Store_Endpoint::init( $extend );\n});\n\nclass WC_Subscriptions_Extend_Store_Endpoint {\n\t/**\n\t * Stores Rest Extending instance.\n\t *\n\t * @var ExtendSchema\n\t */\n\tprivate static $extend;\n\n\t/**\n\t * Plugin Identifier, unique to each plugin.\n\t *\n\t * @var string\n\t */\n\tconst IDENTIFIER = 'subscriptions';\n\n\t/**\n\t * Bootstraps the class and hooks required data.\n\t *\n\t * @param ExtendSchema $extend_rest_api An instance of the ExtendSchema class.\n\t *\n\t * @since 3.1.0\n\t */\n\tpublic static function init( ExtendSchema $extend_rest_api ) {\n\t\tself::$extend = $extend_rest_api;\n\t\tself::extend_store();\n\t}\n\n\t/**\n\t * Registers the actual data into each endpoint.\n\t */\n\tpublic static function extend_store() {\n\n\t\t// Register into `cart/items`\n\t\tself::$extend->register_endpoint_data(\n\t\t\tarray(\n\t\t\t\t'endpoint'        => CartItemSchema::IDENTIFIER,\n\t\t\t\t'namespace'       => self::IDENTIFIER,\n\t\t\t\t'data_callback'   => array( 'WC_Subscriptions_Extend_Store_Endpoint', 'extend_cart_item_data' ),\n\t\t\t\t'schema_callback' => array( 'WC_Subscriptions_Extend_Store_Endpoint', 'extend_cart_item_schema' ),\n\t\t\t\t'schema_type'       => ARRAY_A,\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Register subscription product data into cart/items endpoint.\n\t *\n\t * @param array $cart_item Current cart item data.\n\t *\n\t * @return array $item_data Registered data or empty array if condition is not satisfied.\n\t */\n\tpublic static function extend_cart_item_data( $cart_item ) {\n\t\t$product   = $cart_item['data'];\n\t\t$item_data = array(\n\t\t\t'billing_period'      => null,\n\t\t\t'billing_interval'    => null,\n\t\t\t'subscription_length' => null,\n\t\t\t'trial_length'        => null,\n\t\t\t'trial_period'        => null,\n\t\t\t'sign_up_fees'        => null,\n\t\t\t'sign_up_fees_tax'    => null,\n\n\t\t);\n\n\t\tif ( in_array( $product->get_type(), array( 'subscription', 'subscription_variation' ), true ) ) {\n\t\t\t$item_data = array_merge(\n\t\t\t\tarray(\n\t\t\t\t\t'billing_period'      => WC_Subscriptions_Product::get_period( $product ),\n\t\t\t\t\t'billing_interval'    => (int) WC_Subscriptions_Product::get_interval( $product ),\n\t\t\t\t\t'subscription_length' => (int) WC_Subscriptions_Product::get_length( $product ),\n\t\t\t\t\t'trial_length'        => (int) WC_Subscriptions_Product::get_trial_length( $product ),\n\t\t\t\t\t'trial_period'        => WC_Subscriptions_Product::get_trial_period( $product ),\n\t\t\t\t),\n\t\t\t\tself::format_sign_up_fees( $product )\n\t\t\t);\n\t\t}\n\n\t\treturn $item_data;\n\t}\n\n\t/**\n\t * Register subscription product schema into cart/items endpoint.\n\t *\n\t * @return array Registered schema.\n\t */\n\tpublic static function extend_cart_item_schema() {\n\t\treturn array(\n\t\t\t'billing_period'      => array(\n\t\t\t\t'description' => __( 'Billing period for the subscription.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'string', 'null' ),\n\t\t\t\t'enum'        => array_keys( wcs_get_subscription_period_strings() ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'billing_interval'    => array(\n\t\t\t\t'description' => __( 'The number of billing periods between subscription renewals.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'integer', 'null' ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'subscription_length' => array(\n\t\t\t\t'description' => __( 'Subscription Product length.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'integer', 'null' ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'trial_period'        => array(\n\t\t\t\t'description' => __( 'Subscription Product trial period.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'string', 'null' ),\n\t\t\t\t'enum'        => array_keys( wcs_get_subscription_period_strings() ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'trial_length'        => array(\n\t\t\t\t'description' => __( 'Subscription Product trial interval.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'integer', 'null' ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'sign_up_fees'        => array(\n\t\t\t\t'description' => __( 'Subscription Product signup fees.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'string', 'null' ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t\t'sign_up_fees_tax'    => array(\n\t\t\t\t'description' => __( 'Subscription Product signup fees taxes.', 'woocommerce-subscriptions' ),\n\t\t\t\t'type'        => array( 'string', 'null' ),\n\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t'readonly'    => true,\n\t\t\t),\n\t\t);\n\t}\n\n\n\t/**\n\t * Format sign-up fees.\n\t *\n\t * @param \\WC_Product $product current product.\n\t * @return array\n\t */\n\tprivate static function format_sign_up_fees( $product ) {\n\t\t$fees_excluding_tax = wcs_get_price_excluding_tax(\n\t\t\t$product,\n\t\t\tarray(\n\t\t\t\t'qty'   => 1,\n\t\t\t\t'price' => WC_Subscriptions_Product::get_sign_up_fee( $product ),\n\t\t\t)\n\t\t);\n\n\t\t$fees_including_tax = wcs_get_price_including_tax(\n\t\t\t$product,\n\t\t\tarray(\n\t\t\t\t'qty'   => 1,\n\t\t\t\t'price' => WC_Subscriptions_Product::get_sign_up_fee( $product ),\n\t\t\t)\n\t\t);\n\n\t\t$money_formatter = self::$extend->get_formatter( 'money' );\n\n\t\treturn array(\n\t\t\t'sign_up_fees'     => $money_formatter->format(\n\t\t\t\t$fees_excluding_tax\n\t\t\t),\n\t\t\t'sign_up_fees_tax' => $money_formatter->format(\n\t\t\t\t$fees_including_tax\n\t\t\t\t- $fees_excluding_tax\n\t\t\t),\n\n\t\t);\n\t}\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using CompareFilter Component in React - JSX\nDESCRIPTION: This code snippet illustrates how to use the CompareFilter React component to provide a user interface for comparing products. The example sets up required props such as 'path', an asynchronous 'getLabels' function for fetching options, and a 'labels' object for localized UI text. Dependencies include React, React Router (for the 'path'), and an API endpoint for dynamic label fetching. Required props are 'type', 'param', 'path', 'getLabels', and 'labels'. The component expects string and function parameters, and outputs a search/filter card allowing users to compare at least two products; it presumes integration with a routing context and an API for label resolution.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/compare-filter/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst path = ''; // from React Router\nconst getLabels = () => Promise.resolve( [] );\nconst labels = {\n\thelpText: 'Select at least two products to compare',\n\tplaceholder: 'Search for products to compare',\n\ttitle: 'Compare Products',\n\tupdate: 'Compare',\n};\n\n<CompareFilter\n\ttype=\"products\"\n\tparam=\"product\"\n\tpath={ path }\n\tgetLabels={ getLabels }\n\tlabels={ labels }\n/>\n```\n\n----------------------------------------\n\nTITLE: Dispatching Coupon Removal Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Illustrates dispatching the receiveRemovingCoupon action for the cartStore, which creates an action object to track removal of a coupon. This example uses useDispatch to obtain the dispatch function and passes couponCode (string) to the action creator. On dispatch, an action indicating the specified coupon is being removed is sent to the Redux store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( receiveRemovingCoupon( couponCode ) );\n```\n\n----------------------------------------\n\nTITLE: Registering an Observer for Checkout Validation Event\nDESCRIPTION: Shows how to register an observer specifically for the onCheckoutValidation event emitter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = onCheckoutValidation( myCallback );\n```\n\n----------------------------------------\n\nTITLE: Adding Static Data to AssetDataRegistry in PHP\nDESCRIPTION: Demonstrates how to add static data to the AssetDataRegistry in WooCommerce, which is then serialized and sent to the client on page load. This method is used for data that doesn't change based on shopper actions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/overview-of-data-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n    'woocommerce_blocks_loaded',\n    function() {\n      $asset_data_registry = \\Automattic\\WooCommerce\\Blocks\\Package::container()->get( \\Automattic\\WooCommerce\\Blocks\\Assets\\AssetDataRegistry::class );\n      $asset_data_registry->add( 'namespace/value', 'this is a custom value' );\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying WooCommerce Orders with Metadata Conditions in PHP\nDESCRIPTION: This snippet demonstrates how to use the new meta_query argument in wc_get_orders() to retrieve orders based on custom metadata conditions. It queries for orders with any 'color' metadata and 'size' metadata containing 'small'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$orders = wc_get_orders(\n    array(\n        'meta_query' => array(\n            array(\n                'key' => 'color',\n            ),\n            array(\n                'key'        => 'size',\n                'value'      => 'small',\n                'compare'    => 'LIKE'\n            ),\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Add Cart Coupon\nDESCRIPTION: Shows an example JSON response after successfully adding a coupon to the cart. The response contains the details of the newly applied coupon object, including its code, type, and calculated totals.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"code\": \"20off\",\n\t\"type\": \"percent\",\n\t\"totals\": {\n\t\t\"currency_code\": \"GBP\",\n\t\t\"currency_symbol\": \"£\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\"currency_suffix\": \"\",\n\t\t\t\"total_discount\": \"1667\",\n\t\t\t\"total_discount_tax\": \"333\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom States to WooCommerce Countries\nDESCRIPTION: Function to add or modify states for countries in WooCommerce. Uses the 'woocommerce_states' filter to inject new states. Each state must have a unique identifier prefixed with the country code (XX). Includes translation support through WordPress localization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/add-or-modify-states.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_add_or_modify_states' ) ) {\n  /**\n   * Add or modify States\n   * \n   * @param array $states Existing country states.\n   * @return array $states Modified country states.\n   */\n  function YOUR_PREFIX_add_or_modify_states( $states ) {\n    $states['XX'] = array(\n      'XX1' => __( 'State 1', 'YOUR-TEXTDOMAIN' ),\n      'XX2' => __( 'State 2', 'YOUR-TEXTDOMAIN' ),\n    );\n\n    return $states;\n  }\n  add_filter( 'woocommerce_states', 'YOUR_PREFIX_add_or_modify_states' );\n}\n```\n\n----------------------------------------\n\nTITLE: URL Encoding for REST API in PHP\nDESCRIPTION: Encodes a value according to RFC 3986 standards, which is required for proper REST API URL formatting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nwc_rest_urlencode_rfc3986( $value )\n```\n\n----------------------------------------\n\nTITLE: Avoiding Specific Execution Path Hooks in PHP for WooCommerce\nDESCRIPTION: Shows an example of what to avoid when adding hooks in WooCommerce. Hooks should not be tied to specific execution paths but should be more generic with context passed to the callback.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Pretend this function is only called following an ajax request\n * (perhaps it is itself hooked in using a `wp_ajax_*` action).\n */\nfunction on_ajax_order_creation() {\n    /* Avoid this! */\n    do_action( 'woocommerce_on_order_creation' );\n}\n```\n\n----------------------------------------\n\nTITLE: Using WooCommerce Number Formatting Utilities in JavaScript\nDESCRIPTION: Demonstrates how to use the number formatting utilities from the @woocommerce/number package. Shows importing functions, setting up site locale configuration, composing functions with locale settings, and formatting different types of numerical values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/number/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { numberFormat, formatValue, calculateDelta } from '@woocommerce/number';\n\n// It's best to retrieve the site currency settings and compose them with the format functions.\nimport { partial } from 'lodash';\n// Retrieve this from the API or a global settings object.\nconst siteNumberOptions = {\n  precision: 2,\n  decimalSeparator: '.',\n  thousandSeparator: ',',\n};\n// Compose.\nconst formatStoreNumber = partial( numberFormat, siteNumberOptions );\nconst formatStoreValue = partial( formatValue, siteNumberOptions );\n\n// Formats a number using site's current locale.\nconst localizedNumber = formatStoreNumber( 1337 ); // '1,377'\n\n// formatValue's second argument is a type: average, or number\n// The third argument is the number/value to format\n// (The first argument is the config object we composed with earlier)\nconst formattedAverage = formatStoreValue( 'average', '10.5' ); // 11 just uses Math.round\nconst formattedNumber = formatStoreValue( 'number', '1337' ); // 1,337 calls formatNumber ( see above )\n\n// Get a rounded percent change/delta between two numbers\nconst delta = calculateDelta( 10, 8 ); // '25'\n```\n\n----------------------------------------\n\nTITLE: Connecting PHP-powered Page to WooCommerce Admin\nDESCRIPTION: This snippet demonstrates how to use the wc_admin_connect_page() function to register an existing PHP-powered admin page with the PageController. It includes required arguments such as id, screen_id, title, and path.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/working-with-woocommerce-admin-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwc_admin_connect_page(\n    array(\n        'id'        => 'woocommerce-settings',\n        'screen_id' => 'woocommerce_page_wc-settings-general',\n        'title'     => array( 'Settings', 'General' ),\n        'path'      => add_query_arg( 'page', 'wc-settings', 'admin.php' ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Using the SearchListControl Component in React (JSX)\nDESCRIPTION: Demonstrates the basic usage of the `SearchListControl` React component. It shows how to pass essential props like `list` (the array of items), `isLoading` (a boolean for loading state), `selected` (an array of currently selected item IDs), and `onChange` (a callback function to handle selection changes). This component renders a searchable list interface.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/search-list-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n<SearchListControl\n\tlist={ list }\n\tisLoading={ loading }\n\tselected={ selected }\n\tonChange={ items => setState( { selected: items } ) }\n/>\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Checkout Data in Block Component\nDESCRIPTION: Complete React component implementation showing how to use the setExtensionData function within a block component. The example uses the useEffect hook to update the checkout data store when certain values change.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// block.js\nexport const Block = ( { checkoutExtensionData, extensions } ) => {\n/**\n\t * setExtensionData will update the wc/store/checkout data store with the values supplied. It\n\t * can be used to pass data from the client to the server when submitting the checkout form.\n\t */\n\tconst { setExtensionData } = checkoutExtensionData;\n}\n\n// ... Some code here\n\nuseEffect( () => {\n/**\n\t* This code should use `setExtensionData` to update the `key-of-your-data` key\n\t* in the `namespace-of-your-block` namespace of the checkout data store.\n*/\nsetExtensionData(\n\t'namespace-of-your-block',\n\t'key-of-your-data',\n\tvalue\n);\n}, [ setExtensionData, value ] );\n```\n\n----------------------------------------\n\nTITLE: Setting Up Namespace and Dependency Checks for Admin Notes in PHP\nDESCRIPTION: This PHP code snippet sets up the initial environment for creating a WooCommerce Admin Note. It defines a namespace for the extension, includes a standard WordPress security check (`defined('ABSPATH')`), and verifies that the necessary WooCommerce Admin classes (`Notes`, `NoteTraits`) and the core WooCommerce `WC_Data_Store` class are available before proceeding.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace My\\Wonderfully\\Namespaced\\Extension\\Area;\n \ndefined ( 'ABSPATH' ) || exit;\n \nif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes') ||\n     ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\NoteTraits') ) {\n    return;\n}\n \nif ( ! class_exists( 'WC_Data_Store' ) ) {\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Example POST Request Payload for Order and Payment - JSON\nDESCRIPTION: Represents a JSON-encoded request to the checkout endpoint, including full billing and shipping addresses, customer notes, payment method, payment data (for gateway plugins), and extension data. Used by clients to transmit all necessary checkout and payment info when creating an order and initiating payment processing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"billing_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\",\n    \"email\": \"admin@example.com\",\n    \"phone\": \"555-2368\"\n  },\n  \"shipping_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\"\n  },\n  \"customer_note\": \"Test notes on order.\",\n  \"create_account\": false,\n  \"payment_method\": \"cheque\",\n  \"payment_data\": [],\n  \"extensions\": {\n    \"some-extension-name\": {\n      \"some-data-key\": \"some data value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading WooCommerce Setting Groups with WordPress Data Store - JavaScript\nDESCRIPTION: This snippet shows how to consume the experimental WooCommerce setting options data store in a React component utilizing the @wordpress/data useSelect hook. It fetches both the original and potentially edited versions of a settings group using the getSettings selector. Dependencies include @wordpress/data and @woocommerce/data. The settings group to retrieve is specified by group ID (e.g., 'general'), and the results can include edits by setting options.includeEdits to true. Input is a group ID string; output is an object containing both original and edited settings arrays or objects. The snippet is designed for frontend React usage and expects the WooCommerce data plugin and WordPress data module to be available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/setting-options/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { useSelect } from '@wordpress/data';\\nimport { experimentalSettingOptionsStore as settingOptionsStore } from '@woocommerce/data';\\n\\nfunction MySettingsComponent() {\\n\\tconst settings = useSelect( ( select ) => {\\n\\t\\tconst { getSettings } = select( settingOptionsStore );\\n\\n\\t\\t// Get settings without edits\\n\\t\\tconst originalSettings = getSettings( 'general' );\\n\\n\\t\\t// Get settings with edits\\n\\t\\tconst editedSettings = getSettings( 'general', { includeEdits: true } );\\n\\n\\t\\treturn { originalSettings, editedSettings };\\n\\t}, [] );\\n\\n\\treturn <div>{ /* Use your settings here */ }</div>;\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Example API Response for Checkout Data - JSON\nDESCRIPTION: Presents a sample JSON structure returned by the checkout data endpoint, containing order ID, draft status, billing and shipping addresses, and initial (empty) payment fields. The output helps developers map API responses to UI fields or application state, and illustrates data shape required for frontend consumption.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order_id\": 146,\n  \"status\": \"checkout-draft\",\n  \"order_key\": \"wc_order_VPffqyvgWVqWL\",\n  \"customer_note\": \"\",\n  \"customer_id\": 1,\n  \"billing_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\",\n    \"email\": \"admin@example.com\",\n    \"phone\": \"555-2368\"\n  },\n  \"shipping_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\"\n  },\n  \"payment_method\": \"\",\n  \"payment_result\": {\n    \"payment_status\": \"\",\n    \"payment_details\": [],\n    \"redirect_url\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tokenization Support to Gateway Constructor in PHP\nDESCRIPTION: Shows how to add tokenization support to a gateway's constructor by including it in the 'supports' array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->supports = array(\n    'subscriptions',\n    'products',\n    ...\n    'refunds',\n    'pre-orders',\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Payment in WooCommerce Gateway in PHP\nDESCRIPTION: This function demonstrates how to process a payment in a WooCommerce payment gateway. It updates the order status, empties the cart, and returns a success response with a redirect URL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction process_payment( $order_id ) {\nglobal $woocommerce;\n$order = new WC_Order( $order_id );\n\n    // Mark as on-hold (we're awaiting the cheque)\n    $order->update_status('on-hold', __( 'Awaiting cheque payment', 'woocommerce' ));\n\n    // Remove cart\n    $woocommerce->cart->empty_cart();\n\n    // Return thankyou redirect\n    return array(\n        'result' => 'success',\n        'redirect' => $this->get_return_url( $order )\n    );\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Email Content Settings in WooCommerce (PHP)\nDESCRIPTION: This code shows how to add new email content settings that the email preview listens for changes. It uses the 'woocommerce_email_preview_email_content_setting_ids' filter to add a custom content setting ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_email_content_setting_ids', function( $setting_ids ) {\n    $setting_ids[] = 'my_extension_email_content';\n    return $setting_ids;\n} );\n```\n\n----------------------------------------\n\nTITLE: Interpreting Checkout Order Processing Response (JSON)\nDESCRIPTION: Shows an example JSON response after a successful order processing request. It includes the final `order_id`, `status` ('on-hold' for cheque payment), `order_key`, customer details, final billing and shipping addresses, the `payment_method` used, and a `payment_result` object indicating success and providing a `redirect_url` to the order received page.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout-order.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"order_id\": 146,\n\t\"status\": \"on-hold\",\n\t\"order_key\": \"wc_order_oFmQYREzh9Tfv\",\n\t\"customer_note\": \"\",\n\t\"customer_id\": 1,\n\t\"billing_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"email\": \"admin@example.com\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"shipping_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"payment_method\": \"cheque\",\n\t\"payment_result\": {\n\t\t\"payment_status\": \"success\",\n\t\t\"payment_details\": [],\n\t\t\"redirect_url\": \"https://local.wordpress.test/block-checkout/order-received/146/?key=wc_order_VPffqyvgWVqWL\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Payment Method\nDESCRIPTION: Example showing how to retrieve the ID of the active payment method using the getActivePaymentMethod selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst activePaymentMethod = store.getActivePaymentMethod();\n```\n\n----------------------------------------\n\nTITLE: Declaring HPOS Incompatibility for a WooCommerce Extension in PHP\nDESCRIPTION: This PHP snippet shows how to declare a WooCommerce extension as incompatible with High-Performance Order Storage (HPOS). It utilizes the `before_woocommerce_init` action hook and calls the `FeaturesUtil::declare_compatibility` method with `false` as the compatibility flag. This declaration prevents issues by warning users if they try to enable HPOS with the incompatible extension active. Place this code in the main plugin file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'before_woocommerce_init', function() {\n\tif ( class_exists( \\Automattic\\WooCommerce\\Utilities\\FeaturesUtil::class ) ) {\n\t\t\\Automattic\\WooCommerce\\Utilities\\FeaturesUtil::declare_compatibility( 'custom_order_tables', __FILE__, false );\n\t}\n} );\n```\n\n----------------------------------------\n\nTITLE: Express Payment Method Button Attributes Implementation\nDESCRIPTION: Example showing how to implement button attributes for express payment methods, demonstrating proper handling of style synchronization across different contexts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Get your extension specific settings and set defaults if not available\nlet {\n\tborderRadius = '4',\n\theight = '48',\n} = getButtonSettingsFromConfig();\n\n// In a cart & checkout block context, we receive `buttonAttributes` as a prop which overwrite the extension specific settings\nif ( typeof buttonAttributes !== 'undefined' ) {\n\theight = buttonAttributes.height;\n\tborderRadius = buttonAttributes.borderRadius;\n}\n...\n\nreturn &lt;button style={height: `${height}px`, borderRadius: `${borderRadius}px`} /&gt;\n```\n\n----------------------------------------\n\nTITLE: Importing WooCommerce Blocks API using ES Module Syntax\nDESCRIPTION: Example of importing the WooCommerce Blocks API using ES module syntax with @woocommerce/dependency-extraction-webpack-plugin. This approach provides a more modern alternative to window globals.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extensibility-in-blocks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerCheckoutFilters } from '@woocommerce/blocks-checkout';\n```\n\n----------------------------------------\n\nTITLE: Example Response for Order and Payment Processing - JSON\nDESCRIPTION: Shows typical JSON response after posting order/payment data, including success status, the created order, customer associations, selected payment method, and payment result. Contains payment status and redirect URL if further action is needed (e.g., off-site payment gateways). Useful for integrating order confirmation and post-payment flows.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"order_id\": 146,\n  \"status\": \"on-hold\",\n  \"order_key\": \"wc_order_VPffqyvgWVqWL\",\n  \"customer_note\": \"\",\n  \"customer_id\": 1,\n  \"billing_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\",\n    \"email\": \"admin@example.com\",\n    \"phone\": \"555-2368\"\n  },\n  \"shipping_address\": {\n    \"first_name\": \"Peter\",\n    \"last_name\": \"Venkman\",\n    \"company\": \"\",\n    \"address_1\": \"550 Central Park West\",\n    \"address_2\": \"Corner Penthouse Spook Central\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"postcode\": \"10023\",\n    \"country\": \"US\"\n  },\n  \"payment_method\": \"cheque\",\n  \"payment_result\": {\n    \"payment_status\": \"success\",\n    \"payment_details\": [],\n    \"redirect_url\": \"https://local.wordpress.test/block-checkout/order-received/146/?key=wc_order_VPffqyvgWVqWL\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Order Status Filter Configuration - WooCommerce React - JavaScript\nDESCRIPTION: This snippet demonstrates how to build a configuration object used to render advanced filters for order status in WooCommerce React components. It includes translation hooks for all user-facing text, customizable rules, select-based inputs, and support for dynamic option mapping. Dependencies include WordPress localization functions like __ and _x, and an available orderStatuses object. Required parameters include label definitions (for add, remove, rule, title, filter), rule arrays, and input component setup. The filters structure enables easy extension to more filter types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/advanced-filters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n\ttitle: __(\n\t\t// A sentence describing filters for Orders\n\t\t// See screen shot for context: https://cloudup.com/cSsUY9VeCVJ\n\t\t'Orders Match <select/> Filters',\n\t\t'woocommerce'\n\t),\n\tfilters: {\n\t\tstatus: {\n\t\t\tlabels: {\n\t\t\t\tadd: __( 'Order Status', 'woocommerce' ),\n\t\t\t\tremove: __( 'Remove order status filter', 'woocommerce' ),\n\t\t\t\trule: __(\n\t\t\t\t\t'Select an order status filter match',\n\t\t\t\t\t'woocommerce'\n\t\t\t\t),\n\t\t\t\t// A sentence describing an Order Status filter\n\t\t\t\t// See screen shot for context: https://cloudup.com/cSsUY9VeCVJ\n\t\t\t\ttitle: __( 'Order Status <rule/> <filter/>', 'woocommerce' ),\n\t\t\t\tfilter: __( 'Select an order status', 'woocommerce' ),\n\t\t\t},\n\t\t\trules: [\n\t\t\t\t{\n\t\t\t\t\tvalue: 'is',\n\t\t\t\t\t// Sentence fragment, logical, \"Is\"\n\t\t\t\t\t// Refers to searching for orders matching a chosen order status\n\t\t\t\t\t// Screenshot for context: https://cloudup.com/cSsUY9VeCVJ\n\t\t\t\t\tlabel: _x( 'Is', 'order status', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'is_not',\n\t\t\t\t\t// Sentence fragment, logical, \"Is Not\"\n\t\t\t\t\t// Refers to searching for orders that don't match a chosen order status\n\t\t\t\t\t// Screenshot for context: https://cloudup.com/cSsUY9VeCVJ\n\t\t\t\t\tlabel: _x( 'Is Not', 'order status', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t],\n\t\t\tinput: {\n\t\t\t\tcomponent: 'SelectControl',\n\t\t\t\toptions: Object.keys( orderStatuses ).map( ( key ) => ( {\n\t\t\t\t\tvalue: key,\n\t\t\t\t\tlabel: orderStatuses[ key ],\n\t\t\t\t} ) ),\n\t\t\t},\n\t\t\tallowMultiple: false, // Set to true to allow multiple instances of this filter.\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Processing Payments with WooCommerce Store API Context Hook in PHP\nDESCRIPTION: This PHP snippet shows how to process payments in WooCommerce using the 'woocommerce_rest_checkout_process_payment_with_context' action hook. The callback accesses payment context and result objects, allowing custom handling and response for a specific payment method. When status and details are set on the PaymentResult, legacy payment code is bypassed. This pattern requires WooCommerce Store API and proper handling of PaymentContext and PaymentResult objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\\n\\t'woocommerce_rest_checkout_process_payment_with_context',\\n\\tfunction( $context, $result ) {\\n\\t\\tif ( $context->payment_method === 'my_payment_method' ) {\\n\\t\\t\\t// Order processing would happen here!\\n\\t\\t\\t// $context->order contains the order object if needed\\n\\t\\t\\t// ...\\n\\n\\t\\t\\t// If the logic above was successful, we can set the status to success.\\n\\t\\t\\t$result->set_status( 'success' );\\n\\t\\t\\t$result->set_payment_details(\\n\\t\\t\\t\\tarray_merge(\\n\\t\\t\\t\\t\\t$result->payment_details,\\n\\t\\t\\t\\t\\t[\\n\\t\\t\\t\\t\\t\\t'custom-data' => '12345',\\n\\t\\t\\t\\t\\t]\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t\\t\\t$result->set_redirect_url( 'some/url/to/redirect/to' );\\n\\t\\t}\\n\\t},\\n  10,\\n  2\\n);\\n\n```\n\n----------------------------------------\n\nTITLE: Extending Cart Items Endpoint with ExtendSchema in PHP\nDESCRIPTION: This snippet illustrates how to extend the WooCommerce Store API cart items endpoint using ExtendSchema. It adds custom meta data to each cart item in the response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/available-endpoints-to-extend.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => CartItemSchema::IDENTIFIER,\n\t\t'namespace'       => 'my_plugin_namespace',\n\t\t'data_callback'   => function( $cart_item ) {\n\t\t\t$product = $cart_item['data'];\n\t\t\treturn array(\n\t\t\t\t'my_meta_data' => get_post_meta( $product->get_id(), 'my_meta_data', true ),\n\t\t\t);\n\t\t},\n\t\t'schema_callback' => function() {\n\t\t\treturn array(\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'my_meta_data' => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\t'schema_type'     => ARRAY_A,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Listing Product Brands Sample Response (JSON)\nDESCRIPTION: This JSON snippet provides an example response from the /products/brands endpoint, listing multiple brand objects with fields such as id, name, slug, description, image, review_count, and permalink. The structure demonstrates typical returned data and is helpful for integration design and testing. The response includes all top-level fields that may be populated depending on the brand's data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 16,\n\t\t\"name\": \"Nike\",\n\t\t\"slug\": \"nike\",\n\t\t\"description\": \"This is the Nike brand.\",\n\t\t\"parent\": 0,\n\t\t\"count\": 11,\n\t\t\"image\": {\n\t\t\t\"id\": 55,\n\t\t\t\"src\": \"https://store.local/wp-content/uploads/2021/11/nike-logo.jpg\",\n\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2021/11/nike-logo-324x324.jpg\",\n\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2021/11/nike-logo.jpg 800w, https://store.local/wp-content/uploads/2021/11/nike-logo-324x324.jpg 324w, https://store.local/wp-content/uploads/2021/11/nike-logo-100x100.jpg 100w, https://store.local/wp-content/uploads/2021/11/nike-logo-416x416.jpg 416w, https://store.local/wp-content/uploads/2021/11/nike-logo-300x300.jpg 300w, https://store.local/wp-content/uploads/2021/11/nike-logo-150x150.jpg 150w, https://store.local/wp-content/uploads/2021/11/nike-logo-768x768.jpg 768w\",\n\t\t\t\"sizes\": \"(max-width: 800px) 100vw, 800px\",\n\t\t\t\"name\": \"nike-logo.jpg\",\n\t\t\t\"alt\": \"\"\n\t\t},\n\t\t\"review_count\": 2,\n\t\t\"permalink\": \"https://store.local/product-brand/nike/\"\n\t},\n\t{\n\t\t\"id\": 21,\n\t\t\"name\": \"Adidas\",\n\t\t\"slug\": \"adidas\",\n\t\t\"description\": \"\",\n\t\t\"parent\": 0,\n\t\t\"count\": 1,\n\t\t\"image\": null,\n\t\t\"review_count\": 1,\n\t\t\"permalink\": \"https://store.local/product-brand/adidas/\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Advanced Subtotal Price Format Filter Implementation in TypeScript\nDESCRIPTION: Shows an advanced implementation that applies different price format strings based on product names. Includes conditional logic to display custom 'per item' text for specific products like beanies and sunglasses.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifySubtotalPriceFormat = (\n\tdefaultValue,\n\textensions,\n\targs,\n\tvalidation\n) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn '&lt;price/&gt; per warm beanie';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn '&lt;price/&gt; per cool sunglasses';\n\t}\n\n\treturn '&lt;price/&gt; per item';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tsubtotalPriceFormat: modifySubtotalPriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Shipping Method Settings and Form Fields in PHP\nDESCRIPTION: This PHP code defines three methods within a shipping method class: `init`, `init_form_fields`, and `init_instance_form_fields`. The `init` method hooks into the WooCommerce update options action to save settings via `process_admin_options`, initializes both standalone and instance form fields, and retrieves saved options like title, tax status, and cost using the `get_option` method from the Settings API. `init_form_fields` defines the settings fields for the main shipping method settings page. `init_instance_form_fields` defines fields specific to shipping method instances (e.g., within a shipping zone), including dynamic fields based on existing WooCommerce shipping classes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\t/**\n\t * Additional initialization of options for the shipping method not necessary in the constructor.\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t\t// Save settings in admin if any have been defined. (using Shipping/Settings API)\n\t\tadd_action( 'woocommerce_update_options_shipping_' . $this->id, array( $this, 'process_admin_options' ) );\n\n\t\t// Init stand alone settings and also the instance settings form fields.\n\t\t$this->init_form_fields();\n\t\t$this->init_instance_form_fields();\n\n\t\t// Use the Settings API to get the saved options to use for the settings fields.\n\t\t$this->title      = $this->get_option( 'title' );\n\t\t$this->tax_status = $this->get_option( 'tax_status' );\n\t\t$this->cost       = $this->get_option( 'cost' );\n\t\t$this->type       = $this->get_option( 'type', 'class' );\n\t}\n\n\t/**\n\t * Our method to initialize our form fields for our stand alone settings page, if needed.\n\t *\n\t * @return void\n\t */\n\tpublic function init_form_fields() {\n\t\t// Set the form_fields property to an array that will be able to be used by the Settings API to show the fields on the page.\n\t\t$this->form_fields = array(\n\t\t\t'title'      => array(\n\t\t\t\t'title'       => __( 'Name', 'your_text_domain' ),\n\t\t\t\t'type'        => 'text',\n\t\t\t\t'description' => __( 'Your customers will see the name of this shipping method during checkout.', 'your_text_domain' ),\n\t\t\t\t'default'     => __( 'Your shipping method', 'your_text_domain' ),\n\t\t\t\t'placeholder' => __( 'e.g. Standard national', 'your_text_domain' ),\n\t\t\t\t'desc_tip'    => true, // Include this if you would like your description to show as a tooltip.\n\t\t\t),\n\t\t\t'tax_status' => array(\n\t\t\t\t'title'   => __( 'Tax status', 'your_text_domain' ),\n\t\t\t\t'type'    => 'select',\n\t\t\t\t'class'   => 'wc-enhanced-select',\n\t\t\t\t'default' => 'taxable',\n\t\t\t\t'options' => array(\n\t\t\t\t\t'taxable' => __( 'Taxable', 'your_text_domain' ),\n\t\t\t\t\t'none'    => _x( 'None', 'Tax status', 'your_text_domain' ),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'cost'       => array(\n\t\t\t\t'title'             => __( 'Cost', 'your_text_domain' ),\n\t\t\t\t'type'              => 'text',\n\t\t\t\t'placeholder'       => '',\n\t\t\t\t'description'       => __( 'Enter a cost (excl. tax).', 'your_text_domain' ),\n\t\t\t\t'default'           => '0',\n\t\t\t\t'desc_tip'          => true,\n\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_cost' ),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Our method to initialize our form fields for separate instances.\n\t *\n\t * @return void\n\t */\n\tprivate function init_instance_form_fields() {\n\t\t// Define some strings that will be used several times for the cost decription and link.\n\t\t$cost_desc = __( 'Enter a cost (excl. tax).', 'your_text_domain' );\n\t\t$cost_link = sprintf( '<span id=\"wc-shipping-advanced-costs-help-text\">%s <a target=\"_blank\" href=\"https://woocommerce.com/document/flat-rate-shipping/#advanced-costs\">%s</a>.</span>', __( 'Charge a flat rate per item, or enter a cost formula to charge a percentage based cost or a minimum fee. Learn more about', 'your_text_domain' ), __( 'advanced costs', 'your_text_domain' ) );\n\n\t\t// Start the array of fields.\n\t\t$fields = array(\n\t\t\t'title'      => array(\n\t\t\t\t'title'       => __( 'Name', 'your_text_domain' ),\n\t\t\t\t'type'        => 'text',\n\t\t\t\t'description' => __( 'Your customers will see the name of this shipping method during checkout.', 'your_text_domain' ),\n\t\t\t\t'default'     => __( 'Your shipping method', 'your_text_domain' ),\n\t\t\t\t'placeholder' => __( 'e.g. Standard national', 'your_text_domain' ),\n\t\t\t\t'desc_tip'    => true,\n\t\t\t),\n\t\t\t'tax_status' => array(\n\t\t\t\t'title'   => __( 'Tax status', 'your_text_domain' ),\n\t\t\t\t'type'    => 'select',\n\t\t\t\t'class'   => 'wc-enhanced-select',\n\t\t\t\t'default' => 'taxable',\n\t\t\t\t'options' => array(\n\t\t\t\t\t'taxable' => __( 'Taxable', 'your_text_domain' ),\n\t\t\t\t\t'none'    => _x( 'None', 'Tax status', 'your_text_domain' ),\n\t\t\t\t),\n\t\t\t),\n\t\t\t'cost'       => array(\n\t\t\t\t'title'             => __( 'Cost', 'your_text_domain' ),\n\t\t\t\t'type'              => 'text',\n\t\t\t\t'class'             => 'wc-shipping-modal-price',\n\t\t\t\t'placeholder'       => '',\n\t\t\t\t'description'       => $cost_desc,\n\t\t\t\t'default'           => '0',\n\t\t\t\t'desc_tip'          => true,\n\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_cost' ),\n\t\t\t),\n\t\t);\n\n\t\t/**\n\t\t * Flat rate shipping has the ability to add rates per shipping class, so here we get the shipping classes and then provide fields\n\t\t * for merchants/admins to use to be able to specify these costs. \n\t\t */\n\t\t$shipping_classes = WC()->shipping()->get_shipping_classes();\n\n\t\tif ( ! empty( $shipping_classes ) ) {\n\t\t\t$fields['class_costs'] = array(\n\t\t\t\t'title'       => __( 'Shipping class costs', 'your_text_domain' ),\n\t\t\t\t'type'        => 'title',\n\t\t\t\t'default'     => '',\n\t\t\t\t/* translators: %s: URL for link */\n\t\t\t\t'description' => sprintf( __( 'These costs can optionally be added based on the <a target=\"_blank\" href=\"%s\">product shipping class</a>. Learn more about <a target=\"_blank\" href=\"https://woocommerce.com/document/flat-rate-shipping/#shipping-classes\">setting shipping class costs</a>.', 'your_text_domain' ), admin_url( 'admin.php?page=wc-settings&tab=shipping&section=classes' ) ),\n\t\t\t);\n\t\t\tforeach ( $shipping_classes as $shipping_class ) {\n\t\t\t\tif ( ! isset( $shipping_class->term_id ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$fields[ 'class_cost_' . $shipping_class->term_id ] = array(\n\t\t\t\t\t/* translators: %s: shipping class name */\n\t\t\t\t\t'title'             => sprintf( __( '\"%s\" shipping class cost', 'your_text_domain' ), esc_html( $shipping_class->name ) ),\n\t\t\t\t\t'type'              => 'text',\n\t\t\t\t\t'class'             => 'wc-shipping-modal-price',\n\t\t\t\t\t'placeholder'       => __( 'N/A', 'your_text_domain' ),\n\t\t\t\t'description'       => $cost_desc,\n\t\t\t\t'default'           => $this->get_option( 'class_cost_' . $shipping_class->slug ),\n\t\t\t\t'desc_tip'          => true,\n\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_cost' ),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$fields['no_class_cost'] = array(\n\t\t\t\t'title'             => __( 'No shipping class cost', 'your_text_domain' ),\n\t\t\t\t'type'              => 'text',\n\t\t\t\t'class'             => 'wc-shipping-modal-price',\n\t\t\t\t'placeholder'       => __( 'N/A', 'your_text_domain' ),\n\t\t\t\t'description'       => $cost_desc,\n\t\t\t\t'default'           => '',\n\t\t\t\t'desc_tip'          => true,\n\t\t\t\t'sanitize_callback' => array( $this, 'sanitize_cost' ),\n\t\t\t);\n\n\t\t\t$fields['type'] = array(\n\t\t\t\t'title'       => __( 'Calculation type', 'your_text_domain' ),\n\t\t\t\t'type'        => 'select',\n\t\t\t\t'class'       => 'wc-enhanced-select',\n\t\t\t\t'default'     => 'class',\n\t\t\t\t'options'     => array(\n\t\t\t\t\t'class' => __( 'Per class: Charge shipping for each shipping class individually', 'your_text_domain' ),\n\t\t\t\t\t'order' => __( 'Per order: Charge shipping for the most expensive shipping class', 'your_text_domain' ),\n\t\t\t\t),\n\t\t\t\t'description' => $cost_link,\n\t\t\t);\n\t\t}\n\n\t\t// And finally we set the instance_form_fields property for the Shipping API to use.\n\t\t$this->instance_form_fields = $fields;\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Using registerPaymentMethodExtensionCallbacks to filter payment methods in JavaScript\nDESCRIPTION: Example of using the registerPaymentMethodExtensionCallbacks function to conditionally show or hide payment methods based on checkout data. This example shows the COD method only for Berlin city addresses and hides the cheque method completely.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/filtering-payment-methods.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nregisterPaymentMethodExtensionCallbacks( 'my-hypothetical-extension', {\n\tcod: ( arg ) => {\n\t\treturn arg.shippingAddress.city === 'Berlin';\n\t},\n\tcheque: ( arg ) => {\n\t\treturn false;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Reserving Stock for an Order Using WooCommerce PHP API (PHP)\nDESCRIPTION: This PHP snippet demonstrates programmatic reservation of product stock during checkout using the WooCommerce ReserveStock class. The code tries to reserve the specified order's stock for a given duration, handling exceptions if reservation fails. Dependencies include the WooCommerce PHP environment and the ReserveStock class; an order object must already be instantiated. The function takes the order object and time (in minutes); it either reserves the requested stock or throws a ReserveStockException if reservation isn't possible. Returns void on success, or error handling must be performed in case of failure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/stock-reservation.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\\n$reserve_stock = new ReserveStock();\\n\\ntry {\\n    // Try to reserve stock for 10 mins, if available.\\n    $reserve_stock->reserve_stock_for_order( $order_object, 10 );\\n} catch ( ReserveStockException $e ) {\\n    // ...handle error\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Cart Contents with receiveCartContents Action\nDESCRIPTION: Example showing how to update cart contents in the store while preserving customer address information. This action is used specifically to update items and totals without affecting address data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( receiveCartContents( newCartContents ) );\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Custom Settings Fields with WooCommerce Hooks in PHP\nDESCRIPTION: This snippet shows how to hook into the WooCommerce settings save process to sanitize configuration data, specifically converting the 'api_key' field to uppercase. The filter is added in the constructor using add_filter, and the sanitize_settings method returns the updated settings array. Dependencies include WooCommerce's filter system and the integration class structure. This ensures sanitized data before saving and can be extended for other custom cleaning needs. Inputs are the settings array; output is the cleaned array. Note that sanitization occurs after validation and before saving.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/implementing-settings.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Init and hook in the integration.\n */\npublic function __construct() {\n\n    // do other constructor stuff first\n\n\t// Filters.\n\tadd_filter( 'woocommerce_settings_api_sanitized_fields_' . $this->id, array( $this, 'sanitize_settings' ) );\n\n}\n\n/**\n * Sanitize our settings\n */\npublic function sanitize_settings( $settings ) {\n\t// We're just going to make the api key all upper case characters since that's how our imaginary API works\n\tif ( isset( $settings ) &&\n\t     isset( $settings['api_key'] ) ) {\n\t\t$settings['api_key'] = strtoupper( $settings['api_key'] );\n\t}\n\treturn $settings;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Examples of Using wc_get_weight Function in PHP\nDESCRIPTION: Demonstrates how to use the wc_get_weight function with different parameter combinations. Shows converting to kilograms using default source unit and specifying a custom source unit.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nwc_get_weight( 55, 'kg' );\nwc_get_weight( 55, 'kg', 'lbs' );\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Endpoints for Product Reviews\nDESCRIPTION: Various HTTP GET request endpoints for retrieving product reviews with optional query parameters for filtering by category or product IDs and sorting options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-reviews.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/reviews\nGET /products/reviews?category_id=1,2,3\nGET /products/reviews?product_id=1,2,3\nGET /products/reviews?orderby=rating&order=desc\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for E2E Testing in JavaScript\nDESCRIPTION: Demonstrates extending the ESLint configuration using `useE2EEsLintConfig` from `@woocommerce/e2e-environment`. This helps avoid linting errors related to global variables used by Puppeteer during headless browser testing. It merges with existing configuration options like `root`, `env`, and `globals` defined in the project's ESLint config.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useE2EEsLintConfig } = require( '@woocommerce/e2e-environment' );\n\nmodule.exports = useE2EEsLintConfig( {\n\troot: true,\n\tenv: {\n\t\tbrowser: true,\n\t\tes6: true,\n\t\tnode: true\n\t},\n\tglobals: {\n\t\twp: true,\n\t\twpApiSettings: true,\n\t\twcSettings: true,\n\t\tes6: true\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using WC_Payment_Tokens to Retrieve Customer Tokens in PHP\nDESCRIPTION: Shows how to use the WC_Payment_Tokens class to retrieve tokens for a customer, optionally filtered by gateway.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Get all tokens for the current user\n$tokens = WC_Payment_Tokens::get_customer_tokens( get_current_user_id() );\n// Get all tokens for user 42\n$tokens = WC_Payment_Tokens::get_customer_tokens( 42 );\n// Get all Simplify tokens for the current user\n$tokens = WC_Payment_Tokens::get_customer_tokens( get_current_user_id(), 'simplify_commerce' );\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Task Component with Action and Completion in React\nDESCRIPTION: Implements a custom task component using React hooks and WooCommerce data store. It includes buttons for actioning and completing the task, demonstrating state management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onboardingStore } from '@woocommerce/data';\nimport { useDispatch } from '@wordpress/data';\n\nconst Task = ( { onComplete, task } ) => {\n\tconst { actionTask } = useDispatch( onboardingStore );\n\tconst { isActioned } = task;\n\n\treturn (\n\t\t<Card className=\"woocommerce-task-card\">\n\t\t\t<CardBody>\n\t\t\t\t{ __(\n\t\t\t\t\t\"This task's completion status is dependent on being actioned. The action button below will action this task, while the complete button will optimistically complete the task in the task list and redirect back to the task list. Note that in this example, the task must be actioned for completion to persist.\",\n\t\t\t\t\t'plugin-domain'\n\t\t\t\t) }{ ' ' }\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t{ __( 'Task actioned status: ', 'plugin-domain' ) }{ ' ' }\n\t\t\t\t{ isActioned ? 'actioned' : 'not actioned' }\n\t\t\t\t<br />\n\t\t\t\t<br />\n\t\t\t\t<div>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\tactionTask( 'my-task' );\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t{ __( 'Action task', 'plugin-domain' ) }\n\t\t\t\t\t</button>\n\t\t\t\t\t<button onClick={ onComplete }>\n\t\t\t\t\t\t{ __( 'Complete', 'plugin-domain' ) }\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</CardBody>\n\t\t</Card>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Checkout Data with setExtensionData\nDESCRIPTION: JavaScript function call that demonstrates how to set custom checkout data to be sent to the wc/store/checkout endpoint. This allows developers to pass additional data from the client to the server when processing orders.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetExtensionData(\n\t'namespace-of-your-block',\n\t'key-of-your-data',\n\tvalue\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Country to WooCommerce Countries and Continents Lists - PHP\nDESCRIPTION: Two PHP functions that add a new country (Northern Ireland) to WooCommerce's countries list and associate it with Europe in the continents list. The code uses WordPress filters 'woocommerce_countries' and 'woocommerce_continents' to modify the existing geographical data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/add-a-country.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_add_country_to_countries_list' ) ) {\n  /**\n   * Add a country to countries list\n   * \n   * @param array $countries Existing country list.\n   * @return array $countries Modified country list.\n   */\n  function YOUR_PREFIX_add_country_to_countries_list( $countries ) {\n    $new_countries = array(\n      'NIRE'  => __( 'Northern Ireland', 'YOUR-TEXTDOMAIN' ),\n    );\n\n    return array_merge( $countries, $new_countries );\n  }\n  add_filter( 'woocommerce_countries',  'YOUR_PREFIX_add_country_to_countries_list' );\n}\n\nif ( ! function_exists( 'YOUR_PREFIX_add_country_to_continents_list' ) ) {\n  /**\n   * Add a country to continents list\n   * \n   * @param array $continents Existing continents list.\n   * @return array $continents Modified continents list.\n   */\n  function YOUR_PREFIX_add_country_to_continents_list( $continents ) {\n    $continents['EU']['countries'][] = 'NIRE';\n\n    return $continents;\n  }\n  add_filter( 'woocommerce_continents', 'YOUR_PREFIX_add_country_to_continents_list' );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting On-Sale Product IDs in PHP\nDESCRIPTION: Returns an array containing the IDs of all products that are currently on sale.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nwc_get_product_ids_on_sale()\n```\n\n----------------------------------------\n\nTITLE: Using Checkout Data Store Selectors\nDESCRIPTION: Example showing the available selector functions in the Checkout Data Store to access checkout state information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nisComplete(); // True when checkout processing is complete\nisIdle(); // True when checkout is in IDLE status\nisBeforeProcessing(); // True during BEFORE_PROCESSING status\nisProcessing(); // True during PROCESSING status\nisAfterProcessing(); // True during AFTER_PROCESSING status\nisCalculating(); // True when totals are being recalculated\nhasOrder(); // True when orderId exists\nhasError(); // True when checkout has an error\ngetOrderNotes(); // Returns order notes\ngetCustomerId(); // Returns customer ID\ngetOrderId(); // Returns order ID\ngetRedirectUrl(); // Returns redirect URL\ngetExtensionData(); // Returns extension data\ngetCheckoutStatus(); // Returns checkout status\ngetShouldCreateAccount(); // Returns account creation preference\ngetUseShippingAsBilling(); // Returns shipping as billing preference\n```\n\n----------------------------------------\n\nTITLE: Fetching Checkout Data via WooCommerce REST API - HTTP\nDESCRIPTION: Executes a GET request to obtain required checkout data, including a draft order and address information, for initializing the checkout process in WooCommerce. This endpoint requires either a Nonce Token or Cart Token sent as a header for authentication. The call has no parameters, and returns draft order details with empty payment data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /wc/store/v1/checkout\n```\n\n----------------------------------------\n\nTITLE: Handling Successful Payment in Direct WooCommerce Gateway in PHP\nDESCRIPTION: This code demonstrates how to handle a successful payment in a direct WooCommerce payment gateway. It marks the payment as complete and returns a success response with a redirect URL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n// Payment complete\n$order->payment_complete();\n\n// Return thank you page redirect\nreturn array(\n'result' => 'success',\n'redirect' => $this->get_return_url( $order )\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutFail via useCheckoutContext Hook in WooCommerce (JSX)\nDESCRIPTION: This snippet illustrates how to subscribe to the `onCheckoutFail` event emitter using the `useCheckoutContext` hook in an internal WooCommerce development context. Dependencies include the React `useEffect` hook from `@wordpress/element` and the `useCheckoutContext` from `@woocommerce/base-contexts`. The observer subscribes to the event and cleans up on unmount. No inputs or outputs are generated beyond the subscription/unsubscription process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_20\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\\nimport { useEffect } from '@wordpress/element';\\n\\nconst Component = () => {\\n\\tconst { onCheckoutFail } = useCheckoutContext();\\n\\tuseEffect( () => {\\n\\t\\tconst unsubscribe = onCheckoutFail( () => true );\\n\\t\\treturn unsubscribe;\\n\\t}, [ onCheckoutFail ] );\\n\\treturn null;\\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Single Product by Slug\nDESCRIPTION: API request to retrieve a specific product using its slug instead of ID. Returns the same detailed product information as the ID endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/products.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /products/:slug\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/wordpress-pennant\"\n```\n\n----------------------------------------\n\nTITLE: Getting Account Endpoint URL in PHP\nDESCRIPTION: Retrieves the URL for a specific account endpoint, such as 'orders', 'downloads', or 'edit-address'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\nwc_get_account_endpoint_url( $endpoint )\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Data for WooCommerce Store API Cart Endpoint (PHP)\nDESCRIPTION: This snippet demonstrates how to register custom data for the WooCommerce Store API Cart endpoint using the ExtendSchema. It includes callbacks for data and schema, which are registered on the 'woocommerce_blocks_loaded' action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-data.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nuse Automattic\\WooCommerce\\StoreApi\\Schemas\\V1\\CartSchema;\n\nadd_action('woocommerce_blocks_loaded', function() {\n woocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint' => CartSchema::IDENTIFIER,\n\t\t'namespace' => 'plugin_namespace',\n\t\t'data_callback' => 'my_data_callback',\n\t\t'schema_callback' => 'my_schema_callback',\n\t\t'schema_type' => ARRAY_A,\n\t\t)\n\t);\n});\n\n\nfunction my_data_callback() {\n\treturn [\n\t\t'custom-key' => 'custom-value';\n\t]\n}\n\nfunction my_schema_callback() {\n\treturn [\n\t\t'custom-key' => [\n\t\t\t'description' => __( 'My custom data', 'plugin-namespace' ),\n\t\t\t'type' => 'string',\n\t\t\t'readonly' => true,\n\t\t]\n\t];\n}\n```\n\n----------------------------------------\n\nTITLE: Delaying Extension Initialization with plugins_loaded Hook - PHP\nDESCRIPTION: This global function shows how to delay instantiating the main extension class until after all plugins (including WooCommerce) have loaded by hooking into 'plugins_loaded'. Prior to instantiation, it checks for WooCommerce using class_exists. If WooCommerce is not present, it aborts; otherwise, a singleton instance is assigned to the $GLOBALS array for global access. This ensures WooCommerce dependencies are loaded and avoids errors during activation. Inputs: none. Outputs: global variable registration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction my_extension_initialize() {\n    // This is also a great place to check for the existence of the WooCommerce class\n    if ( ! class_exists( 'WooCommerce' ) ) {\n    // You can handle this situation in a variety of ways,\n    //   but adding a WordPress admin notice is often a good tactic.\n        return;\n    }\n\n    $GLOBALS['my_extension'] = My_Extension::instance();\n}\nadd_action( 'plugins_loaded', 'my_extension_initialize', 10 );\n```\n\n----------------------------------------\n\nTITLE: Searching Orders in PHP\nDESCRIPTION: Searches for orders based on a given term or keyword.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nwc_order_search( $term )\n```\n\n----------------------------------------\n\nTITLE: Advanced Cart Item Class Modification\nDESCRIPTION: Advanced implementation of cartItemClass filter that applies different classes based on product names. Adds specific classes for 'Beanie with Logo' and 'Sunglasses' products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemClass = ( defaultValue, extensions, args ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn 'cool-class';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn 'hot-class';\n\t}\n\n\treturn 'my-custom-class';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemClass: modifyCartItemClass,\n} );\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Selecting Shipping Rate in WooCommerce\nDESCRIPTION: HTTP endpoint specification for selecting a shipping rate for a package in WooCommerce. This endpoint requires authentication via a nonce token or cart token and accepts package ID and rate ID parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_20\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/select-shipping-rate\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Cart Store which is responsible for handling cart-related data and operations in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { cartStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Implementing Activation Hook in WooCommerce Extension\nDESCRIPTION: Code snippet demonstrating how to create and register an activation hook for a WooCommerce extension. This function is executed when the plugin is activated in WordPress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_extension_activate() {\n    // Your activation logic goes here.\n}\nregister_activation_hook( __FILE__, 'my_extension_activate' );\n```\n\n----------------------------------------\n\nTITLE: Checkout Order Processing Example\nDESCRIPTION: Example demonstrating how to hook into checkout order processing to perform additional actions after order creation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n// The action callback function.\nfunction my_function_callback( $order ) {\n  // Do something with the $order object.\n  $order->save();\n}\n\nadd_action( 'woocommerce_blocks_checkout_order_processed', 'my_function_callback', 10 );\n```\n\n----------------------------------------\n\nTITLE: Registering Update Callback for WooCommerce Blocks Store API in PHP\nDESCRIPTION: This snippet defines a PHP function 'redeem_points' responsible for applying a cart discount, then registers it as a callback with the WooCommerce Blocks Store API via the 'woocommerce_store_api_register_update_callback' hook. The action is attached within the 'woocommerce_blocks_loaded' event, associating the callback with the 'super-coupons' namespace, so when the 'cart/extensions' endpoint is called (and the namespace matches), the function will be invoked. No external dependencies are required beyond WooCommerce Blocks, and 'redeem_points' is expected to mutate the cart state based on input data. The function expects an array input containing 'points' and does not return a value; WooCommerce handles the client cart update after processing. Ensure 'woocommerce_blocks_loaded' is available for compatibility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction redeem_points( $points ) {\n  /* Do some processing here that applies a discount to the WC cart based on the value of $points */\n}\n\nadd_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_update_callback(\n    [\n      'namespace' => 'super-coupons',\n      'callback'  => function( $data ) {\n        redeem_points( $data['points'] );\n      },\n    ]\n  );\n} );\n```\n\n----------------------------------------\n\nTITLE: Querying Products with WooCommerce REST API\nDESCRIPTION: A comprehensive set of HTTP GET requests demonstrating different query parameters available for filtering products. Parameters include search, slug, date filters, pagination, ordering, product attributes, pricing, stock status, and taxonomies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/products.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products\nGET /products?search=product%20name\nGET /products?slug=slug-1,slug-2\nGET /products?after=2017-03-22&date_column=date\nGET /products?before=2017-03-22&date_column=date\nGET /products?exclude=10,44,33\nGET /products?include=10,44,33\nGET /products?offset=10\nGET /products?order=asc&orderby=price\nGET /products?parent=10\nGET /products?parent_exclude=10\nGET /products?type=simple\nGET /products?sku=sku-1,sku-2\nGET /products?featured=true\nGET /products?category=22\nGET /products?brand=adidas\nGET /products?_unstable_tax_my-taxonomy=my-taxonomy-term-id\nGET /products?tag=special-items\nGET /products?attributes[0][attribute]=pa_color&attributes[0][slug]=red\nGET /products?on_sale=true\nGET /products?min_price=5000\nGET /products?max_price=10000\nGET /products?stock_status=['outofstock']\nGET /products?catalog_visibility=search\nGET /products?rating=4,5\nGET /products?return_price_range=true\nGET /products?return_attribute_counts=pa_size,pa_color\nGET /products?return_rating_counts=true\n```\n\n----------------------------------------\n\nTITLE: Using ProductImage Component in React/JSX\nDESCRIPTION: This example demonstrates how to use the `ProductImage` component in a React/JSX context. It requires a `product` object prop containing an `images` array with at least one image object specifying the `src`. If the `product` object or its `images` are invalid or missing, a placeholder image matching the front-end placeholder will be displayed. The component accepts other props like `width`, `height`, `className`, and `alt` for further customization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/product-image/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Use a real WooCommerce Product here.\nconst product = {\n\timages: [\n\t\t{\n\t\t\tsrc: 'https://cldup.com/6L9h56D9Bw.jpg',\n\t\t},\n\t],\n};\n\n<ProductImage product={ product } />\n```\n\n----------------------------------------\n\nTITLE: MoneyFormatter Usage Example in WooCommerce\nDESCRIPTION: Shows how to use the MoneyFormatter to format a monetary value with specific decimals and rounding mode, returning the value in cents to avoid floating point errors.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nget_formatter( 'money' )->format( 10.443, [\n  'rounding_mode' => PHP_ROUND_HALF_DOWN,\n  'decimals'      => 2\n] );\n```\n\n----------------------------------------\n\nTITLE: Making Authenticated Store API Requests with Nonce Header - curl - Shell\nDESCRIPTION: This shell snippet demonstrates making a GET request to the WooCommerce Store API 'checkout' endpoint using curl, including a 'Nonce' HTTP header for authentication. It highlights the proper way to send a previously generated nonce to meet API security requirements. Dependencies include a generated nonce value and the curl command-line tool. The input is the Nonce value and the request URL, and the output returns the API response or an error if authentication fails.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/nonce-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request GET https://example-store.com/wp-json/wc/store/v1/checkout\n```\n\n----------------------------------------\n\nTITLE: Fetching Products via Store API using cURL (Shell)\nDESCRIPTION: This snippet demonstrates a basic GET request using cURL to fetch a list of products from the WooCommerce Store API. It targets the `products` endpoint within the `wc/store/v1` namespace on a specified domain.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom WooCommerce Shipping Method Class in PHP\nDESCRIPTION: Implementation of a custom shipping method class that extends WC_Shipping_Method. Includes property definitions, constructor setup with instance handling, and configuration of supported features like settings and shipping zones.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ( ! class_exists( 'WC_Your_Shipping_Method' ) ) {\n\tclass WC_Your_Shipping_Method extends WC_Shipping_Method {\n\t\t/**\n\t\t * Shipping method cost.\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $cost;\n\n\t\t/**\n\t\t * Shipping method type.\n\t\t *\n\t\t * @var string\n\t\t */\n\t\tpublic $type;\n\n\t\t/**\n\t\t * Constructor for your shipping class.\n\t\t *\n\t\t * @param  int  $instance_id Shipping method instance ID. A new instance ID is assigned per instance created in a shipping zone.\n\t\t * @return void\n\t\t */\n\t\tpublic function __construct( $instance_id = 0 ) {\n\t\t\t$this->id                 = 'your_shipping_method'; // ID for your shipping method. Should be unique.\n\t\t\t$this->instance_id        = absint( $instance_id );\n\t\t\t$this->method_title       = __( 'Your Shipping Method', 'your_text_domain' );  // Title shown in admin.\n\t\t\t$this->method_description = __( 'Description of your shipping method', 'your_text_domain' ); // Description shown in admin.\n\t\t\t$this->supports           = array(\n\t\t\t\t'settings',                // Provides a stand alone settings tab for your shipping method under WooCommerce > Settings > Shipping.\n\t\t\t\t'shipping-zones',          // Allows merchants to add your shipping method to shipping zones.\n\t\t\t\t'instance-settings',       // Allows for a page where merchants can edit the instance of your method included in a shipping zone.\n\t\t\t\t'instance-settings-modal', // Allows for a modal where merchants can edit the instance of your method included in a shipping zone.\n\t\t\t);\n\n\t\t\t// Additional initialization of the shipping method.\n\t\t\t$this->init();\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React Component for WooCommerce Admin Page\nDESCRIPTION: This JavaScript snippet demonstrates how to create a React component for a WooCommerce admin page and add it to the pages list using the woocommerce_admin_pages_list filter. It includes importing necessary functions and defining a simple functional component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/working-with-woocommerce-admin-pages.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\n\nconst MyExamplePage = () => <h1>My Example Extension</h1>;\n\naddFilter( 'woocommerce_admin_pages_list', 'my-namespace', ( pages ) => {\n\tpages.push( {\n\t\tcontainer: MyExamplePage,\n\t\tpath: '/example',\n\t\tbreadcrumbs: [ __( 'My Example Page', 'YOUR-TEXTDOMAIN' ) ],\n\t} );\n\n\treturn pages;\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Payment Method with Options\nDESCRIPTION: Shows the basic syntax for registering a payment method using the configuration options object. The options object should include properties like savedTokenComponent, label, ariaLabel, placeOrderButtonLabel, and supports object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nregisterPaymentMethod( options );\n```\n\n----------------------------------------\n\nTITLE: Basic Event Subscription in JSX\nDESCRIPTION: Shows the basic pattern for subscribing to an event emitter and getting an unsubscribe function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = emitter( myCallback );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Currency and Symbol to WooCommerce in PHP\nDESCRIPTION: This code snippet defines two functions: one to add a custom currency to WooCommerce's currency list, and another to specify the symbol for the new currency. The functions are hooked into WooCommerce filters to integrate seamlessly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/add-a-currency-symbol.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_add_currency_name' ) ) {\n  /**\n   * Add custom currency\n   * \n   * @param array $currencies Existing currencies.\n   * @return array $currencies Updated currencies.\n   */\n  function YOUR_PREFIX_add_currency_name( $currencies ) {\n    $currencies['ABC'] = __( 'Currency name', 'YOUR-TEXTDOMAIN' );\n\n    return $currencies;\n  }\n  add_filter( 'woocommerce_currencies', 'YOUR_PREFIX_add_currency_name' );\n}\n\nif ( ! function_exists( 'YOUR_PREFIX_add_currency_symbol' ) ) {\n  /**\n   * Add custom currency symbol\n   * \n   * @param string $currency_symbol Existing currency symbols.\n   * @param string $currency Currency code.\n   * @return string $currency_symbol Updated currency symbol(s).\n   */\n  function YOUR_PREFIX_add_currency_symbol( $currency_symbol, $currency ) {\n    switch( $currency ) {\n      case 'ABC': $currency_symbol = '$'; break;\n    }\n\n    return $currency_symbol;\n  }\n  add_filter('woocommerce_currency_symbol', 'YOUR_PREFIX_add_currency_symbol', 10, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Cart Item Update Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows how to dispatch the receiveCartItem action to update a specific item in the WooCommerce cart. The snippet expects a CartResponseItem object, containing at least a cartItem with details matching the getCartItem selector. On dispatch, the Redux store receives an action object indicating which item is being updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( receiveCartItem( CartResponseItem ) );\n```\n\n----------------------------------------\n\nTITLE: Express Payment Method Configuration Options\nDESCRIPTION: Complete example of the configuration object structure required for registering an express payment method, including all possible options and their types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst options = {\n\tname: 'my_payment_method',\n\ttitle: 'My Mayment Method',\n\tdescription: 'A setence or two about your payment method',\n\tgatewayId: 'gateway-id',\n\tlabel: <ReactNode />,\n\tcontent: <ReactNode />,\n\tedit: <ReactNode />,\n\tcanMakePayment: () => true,\n\tpaymentMethodId: 'my_payment_method',\n\tsupports: {\n\t\tfeatures: [],\n\t\tstyle: [],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Product Collection Data API Response Format\nDESCRIPTION: Example JSON response showing the structure of returned data including price range, attribute counts, and rating counts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-collection-data.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"price_range\": [\n\t\t\"currency_minor_unit\": 2,\n\t\t\"min_price\": \"0\",\n\t\t\"max_price\": \"9000\",\n\t\t\"currency_code\": \"USD\",\n\t\t\"currency_decimal_separator\": \".\",\n\t\t\"currency_minor_unit\": 2,\n\t\t\"currency_prefix\": \"$\",\n\t\t\"currency_suffix\": \"\",\n\t\t\"currency_symbol\": \"$\",\n\t\t\"currency_thousand_separator\": \",\",\n\t],\n\t\"attribute_counts\": [\n\t\t{\n\t\t\t\"term\": 22,\n\t\t\t\"count\": 4\n\t\t},\n\t\t{\n\t\t\t\"term\": 23,\n\t\t\t\"count\": 3\n\t\t},\n\t\t{\n\t\t\t\"term\": 24,\n\t\t\t\"count\": 4\n\t\t}\n\t],\n\t\"rating_counts\": [\n\t\t{\n\t\t\t\"rating\": 3,\n\t\t\t\"count\": 1\n\t\t},\n\t\t{\n\t\t\t\"rating\": 4,\n\t\t\t\"count\": 1\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Tag Component with Different Props in JSX\nDESCRIPTION: This JSX snippet demonstrates various ways to use the `Tag` component. The first example shows a basic tag with a label and an ID. The second example illustrates a removable tag by providing a `remove` function (represented by `noop`). The third example shows how to attach a popover that appears on click, using the `popoverContents` prop to supply the popover's content as a ReactNode.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/tag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag label=\"My tag\" id={ 1 } />\n<Tag label=\"Removable tag\" id={ 2 } remove={ noop } />\n<Tag label=\"Tag with popover\" popoverContents={ ( <p>This is a popover</p> ) } />\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Cart and Checkout Document Schema in JSON\nDESCRIPTION: Specifies the complete JSON Schema definition for the WooCommerce 'document object'. It outlines the structure, data types, descriptions, and constraints for properties within the `cart`, `checkout`, and `customer` objects, including nested structures like `totals` and `address`. This schema is used to validate the structure of the document object and serves as the basis for defining conditional logic for checkout fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"http://json-schema.org/draft-07/schema#\",\n\t\"title\": \"Cart and Checkout Schema\",\n\t\"description\": \"Schema for cart, checkout, and customer information\",\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"cart\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Information about the shopping cart\",\n\t\t\t\"properties\": {\n\t\t\t\t\"coupons\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"List of coupon codes applied to the cart\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"shipping_rates\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"List of currently selected shipping rates\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\"description\": \"Shipping rate identifier using the full shipping rate ID so method_id:instance_id, for example: flat_rate:1\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"items\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"List of product IDs in the cart, IDs will be dubplicated depending on the quantity of the product in the cart, so if you have 2 of product ID 1, the array will have 2 entries of product ID 1\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"integer\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"items_type\": {\n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"description\": \"Types of items in the cart, for example: simple, variation, subscription, etc.\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"items_count\": {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"description\": \"Total number of items in the cart\",\n\t\t\t\t\t\"minimum\": 0\n\t\t\t\t},\n\t\t\t\t\"items_weight\": {\n\t\t\t\t\t\"type\": \"number\",\n\t\t\t\t\t\"description\": \"Total weight of items in the cart\",\n\t\t\t\t\t\"minimum\": 0\n\t\t\t\t},\n\t\t\t\t\"needs_shipping\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"description\": \"Whether the items in the cart require shipping\"\n\t\t\t\t},\n\t\t\t\t\"prefers_collection\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"description\": \"Whether the customer prefers using Local Pickup\"\n\t\t\t\t},\n\t\t\t\t\"totals\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"description\": \"Cart totals information\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t\t\"totalPrice\": {\n\t\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\t\"description\": \"Total price of the cart in smallest currency unit (e.g., cents), after applying all discounts, shipping, and taxes\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"totalTax\": {\n\t\t\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\t\t\"description\": \"Total tax amount in smallest currency unit (e.g., cents), after applying all discounts, shipping, and taxes\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"extensions\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"description\": \"Additional cart extension data, this is similar to what's passed in Store API's extensions parameter\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"checkout\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Checkout preferences and settings\",\n\t\t\t\"properties\": {\n\t\t\t\t\"create_account\": {\n\t\t\t\t\t\"type\": \"boolean\",\n\t\t\t\t\t\"description\": \"Whether the customer checked the create account checkbox, this will be false if the customer is logged in, cannot create an account, or forced to create an account.\"\n\t\t\t\t},\n\t\t\t\t\"customer_note\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Customer's note or special instructions for the order, this will be empty if the customer didn't add a note.\"\n\t\t\t\t},\n\t\t\t\t\"additional_fields\": {\n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"description\": \"Additional checkout fields, both applied to the contact or the order locations.\",\n\t\t\t\t\t\"additionalProperties\": {\n\t\t\t\t\t\t\"type\": \"string\"\n\t\t\t\t\t},\n\t\t\t\t\t\"patternProperties\": {\n\t\t\t\t\t\t\"^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$\": {\n\t\t\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\t\t\"description\": \"Custom fields with namespace identifiers\"\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"payment_method\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Selected payment method identifier, this will be the payment method ID regardless if the customer selected a saved payment method or new payment method\"\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\"customer\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Customer information\",\n\t\t\t\"properties\": {\n\t\t\t\t\"id\": {\n\t\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\t\"description\": \"Customer ID, this will be 0 if the customer is not logged in\"\n\t\t\t\t},\n\t\t\t\t\"billing_address\": {\n\t\t\t\t\t\"$ref\": \"#/definitions/address\",\n\t\t\t\t\t\"description\": \"Customer's billing address\"\n\t\t\t\t},\n\t\t\t\t\"shipping_address\": {\n\t\t\t\t\t\"$ref\": \"#/definitions/address\",\n\t\t\t\t\t\"description\": \"Customer's shipping address\"\n\t\t\t\t},\n\t\t\t\t\"address\": {\n\t\t\t\t\t\"$ref\": \"#/definitions/address\",\n\t\t\t\t\t\"description\": \"This is a dynamic field that will be the billing or shipping address depending on the context of the field being evaluted.\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\t\"definitions\": {\n\t\t\"address\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"description\": \"Customer address information\",\n\t\t\t\"properties\": {\n\t\t\t\t\"first_name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"First name of the recipient\"\n\t\t\t\t},\n\t\t\t\t\"last_name\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Last name of the recipient\"\n\t\t\t\t},\n\t\t\t\t\"company\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Company name\"\n\t\t\t\t},\n\t\t\t\t\"address_1\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Primary address line\"\n\t\t\t\t},\n\t\t\t\t\"address_2\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Secondary address line\"\n\t\t\t\t},\n\t\t\t\t\"city\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"City name\"\n\t\t\t\t},\n\t\t\t\t\"state\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"State or province, this will be the state code if it's a predefined list, for example: CA, TX, NY, etc, or the field value if it's a freeform state, for example: London.\"\n\t\t\t\t},\n\t\t\t\t\"postcode\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Postal or ZIP code\"\n\t\t\t\t},\n\t\t\t\t\"country\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Country code (e.g., US, UK)\"\n\t\t\t\t},\n\t\t\t\t\"email\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"format\": \"email\",\n\t\t\t\t\t\"description\": \"Email address\"\n\t\t\t\t},\n\t\t\t\t\"phone\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Phone number\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"additionalProperties\": {\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"description\": \"Custom fields with namespace identifiers\"\n\t\t\t},\n\t\t\t\"patternProperties\": {\n\t\t\t\t\"^[a-zA-Z0-9_-]+/[a-zA-Z0-9_-]+$\": {\n\t\t\t\t\t\"type\": \"string\",\n\t\t\t\t\t\"description\": \"Custom fields with namespace identifiers\"\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coupon Being Applied in WooCommerce Cart (JavaScript)\nDESCRIPTION: Example of how to get the coupon code that is currently being applied to the cart. Returns a string with the coupon code in the process of being applied.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst couponBeingApplied = store.getCouponBeingApplied();\n```\n\n----------------------------------------\n\nTITLE: Adding a Text Area Field to WooCommerce Product Editor in PHP\nDESCRIPTION: This code snippet demonstrates how to add a text area field to the WooCommerce product editor. It configures a rich text editor with specific formatting options for product descriptions, including placeholder text and help information to guide users.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/text-area/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$section->add_block(\n  array(\n    'id'         => 'example-text-area-meta',\n    'blockName'  => 'woocommerce/product-text-area-field',\n    'order'      => 15,\n    'attributes' => array(\n      'label'       => 'Detailed Description',\n      'property'    => 'short_description',\n      'placeholder' => 'Enter a short product information here',\n      'required'    => false,\n      'help'        => 'Add any additional details or information that customers should know.',\n      'mode'        => 'rich-text',\n      'allowedFormats' => [ 'core/bold', 'core/italic', 'core/link' ],\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Cost Input for WooCommerce Settings in PHP\nDESCRIPTION: This PHP method `sanitize_cost` is designed to be used as a `sanitize_callback` within the WooCommerce Settings API for cost-related fields. It takes an unsanitized string value as input, performs several cleaning steps (handles null, uses `wp_kses_post`, removes currency symbols, normalizes decimal separators, trims whitespace and invalid characters), and validates if the resulting string is numeric. If the value is not numeric after sanitization, it throws an `Exception`. Otherwise, it returns the sanitized numeric string.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\t/**\n\t * Sanitize the cost value.\n\t * This method is called when the `sanitize_callback` method is called in the Settings API while the values input by the merchant are being saved.\n\t *\n\t * @param string $value Unsanitized value.\n\t * @return string\n\t * @throws Exception If the cost is not numeric.\n\t */\n\tpublic function sanitize_cost( $value ) {\n\t\t// If the value is null, then set it to zero. Run the value through WordPress core sanitization functions, the remove the currency symbol, if present.\n\t\t$value = is_null( $value ) ? '0' : $value;\n\t\t$value = wp_kses_post( trim( wp_unslash( $value ) ) );\n\t\t$value = str_replace( array( get_woocommerce_currency_symbol(), html_entity_decode( get_woocommerce_currency_symbol() ) ), '', $value );\n\n\t\t// Get the current locale and all possible decimal separators.\n\t\t$locale   = localeconv();\n\t\t$decimals = array( wc_get_price_decimal_separator(), $locale['decimal_point'], $locale['mon_decimal_point'], ',' );\n\n\t\t// Remove whitespace, then decimals, and then invalid start/end characters.\n\t\t$value = preg_replace( '/\\s+/', '', $value );\n\t\t$value = str_replace( $decimals, '.', $value );\n\t\t$value = rtrim( ltrim( $value, \"\\t\\n\\r\\0\\x0B+*/\" ), \"\\t\\n\\r\\0\\x0B+-*/\" );\n\n\t\t// If the value is not numeric, then throw an exception.\n\t\tif ( ! is_numeric( $value ) ) {\n\t\t\tthrow new Exception( 'Invalid cost entered.' );\n\t\t}\n\t\treturn $value;\n\t}\n\n```\n\n----------------------------------------\n\nTITLE: Forcing Cart Refresh in JavaScript\nDESCRIPTION: These JavaScript snippets demonstrate two methods to force a refresh of the cart data: using the receiveCart action and invalidating the cart resolution.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = window.wp.data;\n\ndispatch( 'wc/store/cart' ).receiveCart( cartObject )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = window.wp.data;\n\ndispatch('wc/store/cart').invalidateResolutionForStore()\n```\n\n----------------------------------------\n\nTITLE: Listing Product Categories in WooCommerce CLI\nDESCRIPTION: Command for retrieving product categories with extensive filtering options including pagination, search, ordering, and parent/product relationships.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_36\n\nLANGUAGE: bash\nCODE:\n```\nwc product_cat list\n```\n\n----------------------------------------\n\nTITLE: Registering a Checkout Block and Frontend Component (JavaScript)\nDESCRIPTION: Shows importing and using the 'registerCheckoutBlock' function from the WooCommerce Checkout Blocks package. A metadata object (from blocks.json) and a React functional component are provided as properties to the registration function. The component renders in place of the block on the frontend, with all attributes and context available. Used in JavaScript (React) code within WooCommerce custom block plugins/extensions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { registerCheckoutBlock } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { registerCheckoutBlock } = wc.blocksCheckout;\n\nconst options = {\n\tmetadata: {\n\t\tname: 'namespace/block-name',\n\t\tparent: [ 'woocommerce/checkout-totals-block' ],\n\t},\n\tcomponent: () => <div>A Function Component</div>,\n};\n\nregisterCheckoutBlock( options );\n```\n\n----------------------------------------\n\nTITLE: Using WebPreview Component in React JSX\nDESCRIPTION: Illustrates the usage of the WebPreview component by providing required 'title' and 'src' props within a JSX expression. The component embeds the specified web page in an iframe, showing a loading spinner by default until the content is ready. Dependencies include React and the WebPreview component, with expected props such as 'title' for accessibility and 'src' as the iframe source; both are required and must be valid strings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/web-preview/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WebPreview\n    title=\\\"My Web Preview\\\"\n    src=\\\"https://themes.woocommerce.com/?name=galleria\\\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using the __experimental_woocommerce_blocks_payment_gateway_features_list Filter in PHP\nDESCRIPTION: This filter controls what features are available for each payment gateway, allowing developers to customize the supported features list for specific gateways.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\napply_filters( '__experimental_woocommerce_blocks_payment_gateway_features_list', array $features, string $name )\n```\n\n----------------------------------------\n\nTITLE: Example of Terms and Conditions Validation Implementation in TypeScript\nDESCRIPTION: Shows how to implement validation for a Terms and Conditions checkbox using useEffect hook. The code sets or clears validation errors based on checkbox state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect( () => {\n\tif ( ! checkbox ) {\n\t\treturn;\n\t}\n\tif ( checked ) {\n\t\tclearValidationError( validationErrorId );\n\t} else {\n\t\tsetValidationErrors( {\n\t\t\t[ validationErrorId ]: {\n\t\t\t\tmessage: __(\n\t\t\t\t\t'Please read and accept the terms and conditions.',\n\t\t\t\t\t'woo-gutenberg-products-block'\n\t\t\t\t),\n\t\t\t\thidden: true,\n\t\t\t},\n\t\t} );\n\t}\n\treturn () => {\n\t\tclearValidationError( validationErrorId );\n\t};\n}, [\n\tcheckbox,\n\tchecked,\n\tvalidationErrorId,\n\tclearValidationError,\n\tsetValidationErrors,\n] );\n```\n\n----------------------------------------\n\nTITLE: Creating New WooCommerce Simple Product\nDESCRIPTION: Example of creating a new simple product using WooCommerce CRUD objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$product = new WC_Product_Simple();\n$product->set_name( 'My Product' );\n$product->set_slug( 'myproduct' );\n$product->set_description( 'A new simple product' );\n$product->set_regular_price( '9.50' );\n$product->save();\n\n$product_id = $product->get_id();\n```\n\n----------------------------------------\n\nTITLE: Registering Checkout Filters in JavaScript\nDESCRIPTION: This example demonstrates how to use the registerCheckoutFilters function to register a callback for a specific filter. It shows both aliased and global import methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/filter-registry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { registerCheckoutFilters } from '@woocommerce/blocks-checkout';\n\n// Global import\nconst { registerCheckoutFilters } = wc.blocksCheckout;\n\nconst callback = ( value ) => {\n\treturn value;\n};\n\nregisterCheckoutFilters( 'my-extension-namespace', {\n\tfilterName: callback,\n} );\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Order Count in PHP\nDESCRIPTION: Retrieves the total number of orders placed by a customer. Takes a single parameter $user_id to identify the customer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nwc_get_customer_order_count( $user_id )\n```\n\n----------------------------------------\n\nTITLE: Extending WooCommerce Store API for Custom Fields in PHP\nDESCRIPTION: This code extends the WooCommerce Store API to add support for custom field blocks. It registers new endpoint data and defines the schema for the custom fields in the checkout process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nuse Automattic\\WooCommerce\\Blocks\\Package;\nuse Automattic\\WooCommerce\\Blocks\\StoreApi\\Schemas\\CartSchema;\nuse Automattic\\WooCommerce\\Blocks\\StoreApi\\Schemas\\CheckoutSchema;\n\n/**\n * Your New Field Block Extend Store API.\n */\nclass Custom_Inner_Block_Extend_Store_Endpoint {\n\t/**\n\t * Stores Rest Extending instance.\n\t *\n\t * @var ExtendRestApi\n\t */\n\tprivate static $extend;\n\n\t/**\n\t * Plugin Identifier, unique to each plugin.\n\t *\n\t * @var string\n\t */\n\tconst IDENTIFIER = 'new-field-block';\n\n\t/**\n\t * Bootstraps the class and hooks required data.\n\t *\n\t */\n\tpublic static function init() {\n\t\tself::$extend = Automattic\\WooCommerce\\StoreApi\\StoreApi::container()->get( Automattic\\WooCommerce\\StoreApi\\Schemas\\ExtendSchema::class );\n\t\tself::extend_store();\n\t}\n\n\t/**\n\t * Registers the actual data into each endpoint.\n\t */\n\tpublic static function extend_store() {\n\t\tif ( is_callable( [ self::$extend, 'register_endpoint_data' ] ) ) {\n\t\t\tself::$extend->register_endpoint_data(\n\t\t\t\t[\n\t\t\t\t\t'endpoint'        => CheckoutSchema::IDENTIFIER,\n\t\t\t\t\t'namespace'       => self::IDENTIFIER,\n\t\t\t\t\t'schema_callback' => [ 'Custom_Inner_Block_Extend_Store_Endpoint', 'extend_checkout_schema' ],\n\t\t\t\t\t'schema_type'     => ARRAY_A,\n\t\t\t\t]\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Register the new field block schema into the Checkout endpoint.\n\t *\n\t * @return array Registered schema.\n\t *\n\t */\n\tpublic static function extend_checkout_schema() {\n\t\treturn [\n            'Value_1'   => [\n                'description' => 'A description of the field',\n                'type'        => 'string', // ... type of the field, this should be a string\n                'context'     => [ 'view', 'edit' ], // ... context of the field, this should be an array containing 'view' and 'edit'\n                'readonly'    => true, // ... whether the field is readonly or not, this should be a boolean\n                'optional'    => true, // ... whether the field is optional or not, this should be a boolean\n            ],\n\t\t\t// ... other values\n        ];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce.com Extensions via CLI - Markdown\nDESCRIPTION: Outlines the CLI command for installing a specific WooCommerce.com plugin extension by slug. It includes options to force reinstall, enable upon install, network activate for multisite, and to bypass certificate validation in case of TLS errors. Dependencies include access to the WooCommerce.com extension repository and appropriate permissions. The command enables streamlined, scriptable extension management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_65\n\nLANGUAGE: markdown\nCODE:\n```\n#### wc com extension install [extension]\n\n- `--extension` - Install one plugin from the available extensions.Accepts a plugin slug\n- `--force` - If set, the command will overwrite any installed version of the extension without prompting for confirmation.\n- `--activate` - If set, after installation, the plugin will activate it.\n- `--activate-network` - If set, the plugin will be network activated immediately after installation\n- `--insecure` - Retry downloads without certificate validation if TLS handshake fails. Note: This makes the request vulnerable to a MITM attack.\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering Button Component in WooCommerce Blocks (TypeScript)\nDESCRIPTION: This TypeScript snippet demonstrates how to import and use the Button component from the @woocommerce/blocks-components package within a React functional component. It highlights two import options: using an aliased import or accessing the component globally through wc.blocksCheckout. No additional dependencies beyond WooCommerce Blocks and React are required. The component, MyButton, renders a Button labeled 'Click Me!'. Inputs are not required; the output is a rendered Button element in the UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Aliased import\\nimport { Button } from '@woocommerce/blocks-components';\\n\\n// Global import\\n// const { Button } = wc.blocksCheckout;\\n\\nexport default function MyButton() {\\n\\treturn <Button>Click Me!</Button>;\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Snackbar Notices in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to create and manage snackbar notices using the WordPress notices system, including creation with custom actions and dismissal functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/notices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = window.wp.data;\n\ndispatch( 'core/notices' ).createNotice(\n\t'snackbar',\n\t'This is a snackbar notice',\n\t{\n\t\ttype: 'snackbar',\n\t\tactions: [\n\t\t\t{\n\t\t\t\tlabel: 'Dismiss',\n\t\t\t\tonClick: () => {\n\t\t\t\t\tdispatch( 'core/notices' ).removeNotice(\n\t\t\t\t\t\t'snackbar-notice-id'\n\t\t\t\t\t);\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t},\n\t'snackbar-notice-id'\n);\n```\n\n----------------------------------------\n\nTITLE: cURL Request Example for Product Collection Data\nDESCRIPTION: Example cURL command demonstrating how to request product collection data with multiple calculation parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-collection-data.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/collection-data?calculate_price_range=true&calculate_attribute_counts=pa_size,pa_color&calculate_rating_counts=true\"\n```\n\n----------------------------------------\n\nTITLE: Complex WooCommerce Order Query Combining Status and Metadata Conditions in PHP\nDESCRIPTION: This advanced example demonstrates a complex query that combines order status conditions with metadata queries. It retrieves orders with specific statuses and metadata conditions for weight, color, and size.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$query_args = array(\n    'status' => array( 'pending', 'on-hold' ),\n    'meta_query' => array(\n        array(\n            'key'     => 'weight',\n            'value'   => '50',\n            'compare' => '>=',\n        ),\n        array(\n            'relation' => 'OR',\n            array(\n                'key'     => 'color',\n                'compare' => 'EXISTS',\n            ),\n            array(\n                'key'     => 'size',\n                'compare' => 'EXISTS',\n            )\n        ),\n    )\n);\n\n$orders = wc_get_orders( $query_args );\n```\n\n----------------------------------------\n\nTITLE: Implementing WooCommerce Blocks Integration in PHP\nDESCRIPTION: This code snippet defines a class that implements the IntegrationInterface for integrating with WooCommerce Blocks. It includes methods for specifying the integration name and initialization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nuse Automattic\\WooCommerce\\Blocks\\Integrations\\IntegrationInterface;\n\n/**\n * Class for integrating with WooCommerce Blocks\n */\nclass Custom_Inner_Block_Blocks_Integration implements IntegrationInterface {\n\n\t/**\n\t * The name of the integration.\n\t *\n\t * @return string\n\t */\n\tpublic function get_name() {\n\t\treturn 'new-field-block';\n\t}\n\n\t/**\n\t * When called invokes any initialization/setup for the integration.\n\t */\n\tpublic function initialize() {\n\t\t// ... Some code here: (e.g. init functions that registers scripts and styles, and other instructions)\n\t}\n\n\t// ... Other functions here\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Deactivation Hook in WooCommerce Extension\nDESCRIPTION: Code snippet demonstrating how to create and register a deactivation hook for a WooCommerce extension. This function is executed when the plugin is deactivated in WordPress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction my_extension_deactivate() {\n    // Your deactivation logic goes here.\n}\nregister_deactivation_hook( __FILE__, 'my_extension_deactivate' );\n```\n\n----------------------------------------\n\nTITLE: Defining GET Request for WooCommerce Order API (HTTP)\nDESCRIPTION: Specifies the HTTP GET method and URL structure for retrieving a specific order using its ID and a unique key. The `key` parameter is required, and `billing_email` must be included for guest orders.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/order.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /order/{ORDER_ID}?key={KEY}&billing_email={BILLING_EMAIL}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom WooCommerce Shipping Method Class in PHP\nDESCRIPTION: This snippet defines the WC_Your_Shipping_Method class, which extends WC_Shipping_Method. It includes the constructor, initialization methods, and core functionality for calculating shipping costs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nclass WC_Your_Shipping_Method extends WC_Shipping_Method {\n\t/**\n\t * Shipping method cost.\n\t *\n\t * @var string\n\t */\n\tpublic $cost;\n\n\t/**\n\t * Shipping method type.\n\t *\n\t * @var string\n\t */\n\tpublic $type;\n\n\t/**\n\t * Constructor for your shipping class.\n\t *\n\t * @param  int  $instance_id Shipping method instance ID. A new instance ID is assigned per instance created in a shipping zone.\n\t * @return void\n\t */\n\tpublic function __construct( $instance_id = 0 ) {\n\t\t$this->id                 = 'your_shipping_method'; // ID for your shipping method. Should be unique.\n\t\t$this->instance_id        = absint( $instance_id );\n\t\t$this->method_title       = __( 'Your Shipping Method', 'your_text_domain' );  // Title shown in admin.\n\t\t$this->method_description = __( 'Description of your shipping method', 'your_text_domain' ); // Description shown in admin.\n\t\t$this->supports           = array(\n\t\t\t'settings',                // Provides a stand alone settings tab for your shipping method under WooCommerce > Settings > Shipping.\n\t\t\t'shipping-zones',          // Allows merchants to add your shipping method to shipping zones.\n\t\t\t'instance-settings',       // Allows for a page where merchants can edit the instance of your method included in a shipping zone.\n\t\t\t'instance-settings-modal', // Allows for a modal where merchants can edit the instance of your method included in a shipping zone.\n\t\t);\n\n\t\t// Additional initialization of the shipping method.\n\t\t$this->init();\n\t}\n\n\t/**\n\t * Additional initialization of options for the shipping method not necessary in the constructor.\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t\t// Save settings in admin if any have been defined. (using Shipping/Settings API)\n\t\tadd_action( 'woocommerce_update_options_shipping_' . $this->id, array( $this, 'process_admin_options' ) );\n\n\t\t// Init stand alone settings and also the instance settings form fields.\n\t\t$this->init_form_fields();\n\t\t$this->init_instance_form_fields();\n\n\t\t// Use the Settings API to get the saved options to use for the settings fields.\n\t\t$this->title      = $this->get_option( 'title' );\n\t\t$this->tax_status = $this->get_option( 'tax_status' );\n\t\t$this->cost       = $this->get_option( 'cost' );\n\t\t$this->type       = $this->get_option( 'type', 'class' );\n\t}\n\n\t/**\n\t * Calculate the shipping costs.\n\n\t * @param array $package Package of items from cart.\n\t */\n\tpublic function calculate_shipping( $package = array() ) {\n\t\t// Implementation details\n\t}\n\n\t/**\n\t * Finds and returns shipping classes and the products with said class.\n\t *\n\t * @param mixed $package Package of items from cart.\n\t * @return array\n\t */\n\tpublic function find_shipping_classes( $package ) {\n\t\t// Implementation details\n\t}\n\n\t/**\n\t * Sanitize the cost value.\n\t * This method is called when the `sanitize_callback` method is called in the Settings API while the values input by the merchant are being saved.\n\t *\n\t * @param string $value Unsanitized value.\n\t * @return string\n\t * @throws Exception If the cost is not numeric.\n\t */\n\tpublic function sanitize_cost( $value ) {\n\t\t// Implementation details\n\t}\n\n\t/**\n\t * Our method to initialize our form fields for our stand alone settings page, if needed.\n\t *\n\t * @return void\n\t */\n\tpublic function init_form_fields() {\n\t\t// Implementation details\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Validation Error Display in JavaScript\nDESCRIPTION: A simplified JSX snippet showing how to conditionally render validation error messages when they should be visible.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tvalidationError?.hidden === false && (\n\t\t<div className=\"wc-block-components-validation-error\" role=\"alert\">\n\t\t\t<p>{ validationError?.message }</p>\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exporter with SetSiteOptions in PHP\nDESCRIPTION: This snippet demonstrates how to implement the export method in a custom exporter class. It uses the SetSiteOptions step to export WordPress options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Blueprint\\Exporters\\StepExporter;\nuse Automattic\\WooCommerce\\Blueprint\\Steps\\Step;\n\nclass MyCustomExporter extends StepExporter {\n    public function export(): Step {\n        $data = [\n            'option1' => get_option( 'option1', 'value1' ),\n            'option2' => get_option( 'option2', 'value2' ),\n       ];\n       return new SetSiteOptions( $data );\n    }\n    \n    public function get_step_name() {\n        return SetSiteOptions::get_step_name();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Controlled Storybook Template with useState in React (TSX)\nDESCRIPTION: This code defines a Template function for a Storybook story of a controlled component using React and TypeScript. It manages its own state (myState) with useState and synchronizes local changes both with Storybook controls and the child component. Dependencies include React, Storybook types (Story, MyControlledComponentProps), and the useState hook. Inputs are args (with optional onChange handler); outputs are the rendered component with handlers. Constraints include that the Storybook controls may become unsynchronized unless further logic is added.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript React (TSX)\nCODE:\n```\nconst Template: Story< MyControlledComponentProps > = ( args ) => {\n\tconst [ myState, setMyState ] = useState( 0 );\n\n\tconst onChange = ( newVal ) => {\n\t\targs.onChange?.( newVal );\n\t\tsetMyState( newVal );\n\t};\n\n\treturn (\n\t\t<MyControlledComponent\n\t\t\t{ ...args }\n\t\t\tonChange={ onChange }\n\t\t\tstate={ myState }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Product Attributes - JSON\nDESCRIPTION: Provides a sample JSON array response from the product attributes listing endpoint. Each object in the array represents a product attribute, including fields like id, name, taxonomy, type, order, and has_archives. Consumers of the API should expect this structure when fetching attribute lists.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"Color\",\n\t\t\"taxonomy\": \"pa_color\",\n\t\t\"type\": \"select\",\n\t\t\"order\": \"menu_order\",\n\t\t\"has_archives\": false\n\t},\n\t{\n\t\t\"id\": 2,\n\t\t\"name\": \"Size\",\n\t\t\"taxonomy\": \"pa_size\",\n\t\t\"type\": \"select\",\n\t\t\"order\": \"menu_order\",\n\t\t\"has_archives\": false\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Logic After WooCommerce Blocks Order Processing in PHP\nDESCRIPTION: This snippet defines a PHP function `my_function_callback` that receives the `WC_Order` object as an argument when the `woocommerce_blocks_checkout_order_processed` action fires. It then hooks this function using `add_action` to run custom code after an order is placed via the WooCommerce Blocks checkout. The example function includes a placeholder comment for custom actions and demonstrates saving the order object. This hook requires WooCommerce and the Blocks feature to be active.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/examples/checkout-order-processed.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// The action callback function.\nfunction my_function_callback( $order ) {\n  // Do something with the $order object.\n  $order->save();\n}\n\nadd_action( 'woocommerce_blocks_checkout_order_processed', 'my_function_callback', 10 );\n```\n\n----------------------------------------\n\nTITLE: Accessing ExtendSchema Instance in WooCommerce (PHP)\nDESCRIPTION: This snippet demonstrates how to properly access the shared ExtendSchema instance in WooCommerce using the StoreApi dependency injection container. It's hooked to the 'woocommerce_blocks_loaded' action to ensure availability.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-data.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nuse Automattic\\WooCommerce\\StoreApi\\StoreApi;\nuse Automattic\\WooCommerce\\StoreApi\\Schemas\\ExtendSchema;\n\nadd_action( 'woocommerce_blocks_loaded', function() {\n\t$extend = StoreApi::container()->get( ExtendSchema::class );\n\t// my logic.\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a WooCommerce Customer via WC-CLI in Bash\nDESCRIPTION: Updates an existing WooCommerce customer identified by their `id`. Allows modification of email, first name, last name, username, password, billing address, shipping address, and metadata. Use `--porcelain` to output only the customer ID upon successful update.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer update <id> [options]\n```\n\n----------------------------------------\n\nTITLE: Reacting to Cart Data Changes in React Component\nDESCRIPTION: This snippet demonstrates how to use the useSelect hook to react to changes in the cart data, specifically the shipping address, within a React component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * External dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { cartStore } from '@woocommerce/block-data';\nimport { useEffect } from '@wordpress/element';\n\nexport const MyComponent = () => {\n\tconst { shippingAddress } = useSelect(\n\t\t( select ) => select( cartStore ).getCartData(),\n\t\t[]\n\t);\n\tuseEffect( () => {\n\t\t// Do something when shippingAddress changes\n\t}, [ shippingAddress ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Advanced Cart Item Class Modification in WooCommerce Checkout\nDESCRIPTION: This advanced example shows how to apply different CSS classes to specific products in the order summary based on their names, with a fallback class for other items.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemClass = ( defaultValue, extensions, args ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn 'cool-class';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn 'hot-class';\n\t}\n\n\treturn 'my-custom-class';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemClass: modifyCartItemClass,\n} );\n```\n\n----------------------------------------\n\nTITLE: Enqueuing JavaScript for WooCommerce Store Management Links in PHP\nDESCRIPTION: This PHP snippet shows how to properly enqueue a JavaScript file with the correct dependencies and priority to add custom store management links to the WooCommerce admin home screen.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-add-your-own-store-management-links.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction enqueue_management_link_script() {\n    wp_enqueue_script( $script_name, $script_url, array( 'wp-hooks' ), 10 );\n}\n\nadd_action( 'admin_enqueue_scripts', 'enqueue_management_link_script' );\n```\n\n----------------------------------------\n\nTITLE: Validating WooCommerce Cart Items with a Custom Callback in PHP\nDESCRIPTION: This PHP snippet registers a custom validation callback with WooCommerce's 'woocommerce_store_api_cart_errors' hook. The function 'my_function_callback' checks if the cart contains more than 10 items and, if so, adds an error to the error collection, enforcing a business rule on cart item limits. Required dependencies include WooCommerce and its available hooks. The callback receives the WP_Error object and the cart instance, and it is invoked by WooCommerce's validation process. Inputs are the cart and errors passed by WooCommerce; the function adds errors for user feedback if the cart is over the item limit. The snippet assumes WooCommerce is initialized and the relevant hooks are available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/examples/validate-cart.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// The action callback function.\nfunction my_function_callback( $errors, $cart ) {\n\n  // Validate the $cart object and add errors. For example, to create an error if the cart contains more than 10 items:\n  if ( $cart->get_cart_contents_count() > 10 ) {\n    $errors->add( 'my_error_code', 'Too many cart items!' );\n  }\n}\n\nadd_action( 'woocommerce_store_api_cart_errors', 'my_function_callback', 10 );\n\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_after_shop_loop Hook in PHP\nDESCRIPTION: This hook fires after the shop loop ends. It's commonly used with woocommerce_pagination() which renders pagination with priority 10.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_after_shop_loop' )\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Product Pricing Field in WooCommerce (PHP)\nDESCRIPTION: This PHP code snippet demonstrates how to add a custom pricing field to a WooCommerce product form. It defines two functions: one for creating the pricing field block, and another for hooking it into the WooCommerce block template system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/pricing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nif ( ! function_exists( 'add_pricing_field' ) ) {\n  function add_pricing_field( $product_summary_field ) {\n    $product_summary_field->get_parent()->add_block(\n      [\n        'id'         => 'example-pricing-field',\n        'blockName'  => 'woocommerce/product-pricing-field',\n        'order'      => $product_summary_field->get_order() + 5,\n        'attributes' => [\n          'label'    => __( 'Example price field', 'woocommerce'),\n          'property' => 'custom_price',\n          'help'     => 'This is a help text',\n          'tooltip'  => 'This is a tooltip',\n        ],\n      ]\n    );\n  }\n}\n\nif ( ! function_exists( 'example_hook_up_block_template_modifications_pricing' ) ) {\n  function example_hook_up_block_template_modifications_pricing() {\n    add_action(\n      'woocommerce_block_template_area_product-form_after_add_block_product-summary',\n      'add_pricing_field'\n    );\n  }\n}\n\nadd_action( 'init', 'example_hook_up_block_template_modifications_pricing', 0 );\n```\n\n----------------------------------------\n\nTITLE: Using useCheckoutContext OnCheckoutSuccess Hook (Internal React Integration, WooCommerce, JSX)\nDESCRIPTION: This snippet shows an internal WooCommerce React component subscribing to the onCheckoutSuccess event via the useCheckoutContext hook. By registering an effect with useEffect and handling unsubscribe logic, the component can perform actions after successful checkout processing. Dependencies include @woocommerce/base-contexts and @wordpress/element, with the onCheckoutSuccess function available from context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onCheckoutSuccess } = useCheckoutContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutSuccess( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutSuccess ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Extending WC_Settings_API for Custom Settings in PHP\nDESCRIPTION: Basic class structure for extending WooCommerce's Settings API. This is the foundation for creating custom settings for a WooCommerce extension.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass My_Extension_Settings extends WC_Settings_API {\n\t//\n}\n```\n\n----------------------------------------\n\nTITLE: Using ImageUpload Component in React JSX\nDESCRIPTION: This snippet demonstrates rendering the ImageUpload component and managing its state using React. The component accepts an image object and an onChange handler, which updates the local state with the new image URL when a user selects or uploads an image. Dependencies include React, the ImageUpload component, and an appropriate state management function (e.g., useState). The image prop should be an object containing 'id' and 'url', while onChange expects a callback to handle updates. It outputs the selected image object and updates the parent component accordingly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/image-upload/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n\t<ImageUpload image={ image } onChange={ newImage => setState( { url: newImage } ) } />\n```\n\n----------------------------------------\n\nTITLE: Batch Cart Operations HTTP Endpoint\nDESCRIPTION: HTTP endpoint specification for performing multiple cart operations in a single request using the batch endpoint, allowing clients to add multiple items at once.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nPOST /wc/store/v1/batch\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe CRUD Data Store in TypeScript\nDESCRIPTION: Demonstrates how to use previously defined TypeScript types (`MyThingActions`, `MyThingSelectors`) as generic parameters when calling `createCrudDataStore`. This ensures the resulting data store's actions and selectors are type-safe according to the defined resource and query structures.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// index.ts\nimport { createCrudDataStore } from '../crud';\nimport { MyThingActions, MyThingSelectors } from './types';\n\nexport const store = createCrudDataStore<MyThingActions, MyThingSelectors>({\n    storeName: 'my/custom/store',\n    resourceName: 'MyThing',\n    pluralResourceName: 'MyThings',\n    namespace: '/my/rest/namespace',\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing IntegrationInterface Class for WooCommerce Blocks Integration\nDESCRIPTION: A complete implementation of the IntegrationInterface class that handles script, style, and data integration with WooCommerce Blocks. This class registers and enqueues assets, handles translations, and provides server-side data to client-side scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/integration-interface.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Automattic\\WooCommerce\\Blocks\\Integrations\\IntegrationInterface;\n\n/**\n * Class for integrating with WooCommerce Blocks\n */\nclass WooCommerce_Example_Plugin_Integration implements IntegrationInterface {\n\t/**\n\t * The name of the integration.\n\t *\n\t * @return string\n\t */\n\tpublic function get_name() {\n\t\treturn 'woocommerce-example-plugin';\n\t}\n\n\t/**\n\t * When called invokes any initialization/setup for the integration.\n\t */\n\tpublic function initialize() {\n\t\t$script_path = '/build/index.js';\n\t\t$style_path = '/build/style-index.css';\n\n    /**\n     * The assets linked below should be a path to a file, for the sake of brevity\n     * we will assume \\WooCommerce_Example_Plugin_Assets::$plugin_file is a valid file path\n    */\n\t\t$script_url = plugins_url( $script_path, \\WooCommerce_Example_Plugin_Assets::$plugin_file );\n\t\t$style_url = plugins_url( $style_path, \\WooCommerce_Example_Plugin_Assets::$plugin_file );\n\n\t\t$script_asset_path = dirname( \\WooCommerce_Example_Plugin_Assets::$plugin_file ) . '/build/index.asset.php';\n\t\t$script_asset      = file_exists( $script_asset_path )\n\t\t\t? require $script_asset_path\n\t\t\t: array(\n\t\t\t\t'dependencies' => array(),\n\t\t\t\t'version'      => $this->get_file_version( $script_path ),\n\t\t\t);\n\n\t\twp_enqueue_style(\n\t\t\t'wc-blocks-integration',\n\t\t\t$style_url,\n\t\t\t[],\n\t\t\t$this->get_file_version( $style_path )\n\t\t);\n\n\t\twp_register_script(\n\t\t\t'wc-blocks-integration',\n\t\t\t$script_url,\n\t\t\t$script_asset['dependencies'],\n\t\t\t$script_asset['version'],\n\t\t\ttrue\n\t\t);\n\t\twp_set_script_translations(\n\t\t\t'wc-blocks-integration',\n\t\t\t'woocommerce-example-plugin',\n\t\t\tdirname( \\WooCommerce_Example_Plugin_Assets::$plugin_file ) . '/languages'\n\t\t);\n\t}\n\n\t/**\n\t * Returns an array of script handles to enqueue in the frontend context.\n\t *\n\t * @return string[]\n\t */\n\tpublic function get_script_handles() {\n\t\treturn array( 'wc-blocks-integration' );\n\t}\n\n\t/**\n\t * Returns an array of script handles to enqueue in the editor context.\n\t *\n\t * @return string[]\n\t */\n\tpublic function get_editor_script_handles() {\n\t\treturn array( 'wc-blocks-integration' );\n\t}\n\n\t/**\n\t * An array of key, value pairs of data made available to the block on the client side.\n\t *\n\t * @return array\n\t */\n\tpublic function get_script_data() {\n\t    $woocommerce_example_plugin_data = some_expensive_serverside_function();\n\t    return [\n\t        'expensive_data_calculation' => $woocommerce_example_plugin_data\n        ];\n\t}\n\n\t/**\n\t * Get the file modified time as a cache buster if we're in dev mode.\n\t *\n\t * @param string $file Local path to the file.\n\t * @return string The cache buster value to use for the given file.\n\t */\n\tprotected function get_file_version( $file ) {\n\t\tif ( defined( 'SCRIPT_DEBUG' ) && SCRIPT_DEBUG && file_exists( $file ) ) {\n\t\t\treturn filemtime( $file );\n\t\t}\n\n\t\t// As above, let's assume that WooCommerce_Example_Plugin_Assets::VERSION resolves to some versioning number our\n\t\t// extension uses.\n\t\treturn \\WooCommerce_Example_Plugin_Assets::VERSION;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Block in PHP\nDESCRIPTION: PHP code to register the custom block and add it to the WooCommerce product editor template.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\Features\\ProductBlockEditor\\BlockRegistry;\n\nfunction example_custom_product_form_init() {\n\tif ( isset( $_GET['page'] ) && $_GET['page'] === 'wc-admin' ) {\n\t\tBlockRegistry::get_instance()->register_block_type_from_metadata( __DIR__ . '/js/sample-block' );\n\t}\n}\nadd_action( 'init', 'example_custom_product_form_init' );\n```\n\n----------------------------------------\n\nTITLE: Setting Checkout Status to Complete in TypeScript\nDESCRIPTION: This code sets the 'status' property to 'complete' in the checkout data store when there are no errors, indicating that the checkout process is complete.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Data via WooCommerce REST API - HTTP\nDESCRIPTION: Sends a PUT request to the WooCommerce checkout endpoint to update checkout data, such as additional fields or payment method. The '__experimental_calc_totals' query parameter controls whether cart totals are recalculated post-update. No body is required for a basic call; parameters may be sent via query or JSON payload.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPUT /wc/store/v1/checkout?__experimental_calc_totals=true\n```\n\n----------------------------------------\n\nTITLE: Implementing Escape Hooks in PHP for WooCommerce Function\nDESCRIPTION: Shows how to add an escape hook to a WooCommerce function, allowing for short-circuiting of the function's execution. This pattern is useful for overriding functionality when better alternatives are not available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction get_product_metrics( $args ): array {\n    $pre = apply_filters( 'pre_woocommerce_get_product_metrics', null, $args );\n\n    if ( $pre !== null ) {\n        return (array) $pre;\n    }\n\n    /* ...Default logic... */\n    return $metrics;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to WooCommerce Checkout (PHP)\nDESCRIPTION: This snippet adds a custom text field to the WooCommerce checkout form after the order notes. It includes field validation, saving the field value to order meta, and displaying it on the admin order page.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add the field to the checkout\n */\nadd_action( 'woocommerce_after_order_notes', 'my_custom_checkout_field' );\n\nfunction my_custom_checkout_field( $checkout ) {\n\n    echo '<div id=\"my_custom_checkout_field\"><h2>' . esc_html__( 'My Field' ) . '</h2>';\n\n    woocommerce_form_field(\n        'my_field_name',\n        array(\n            'type'        => 'text',\n            'class'       => array( 'my-field-class form-row-wide' ),\n            'label'       => __( 'Fill in this field' ),\n            'placeholder' => __( 'Enter something' ),\n        ),\n        $checkout->get_value( 'my_field_name' )\n    );\n\n    echo '</div>';\n\n}\n\n/**\n * Process the checkout\n */\nadd_action( 'woocommerce_checkout_process', 'my_custom_checkout_field_process' );\n\nfunction my_custom_checkout_field_process() {\n    // Check if this field contains just letters.\n    if ( ! preg_match( '/^[a-zA-Z]+$/', $_POST['my_field_name'] ) ) {\n\t\twc_add_notice( esc_html__( 'Please enter only letters into this new shiny field.' ), 'error' );\n\t}\n}\n\n/**\n * Update the order meta with field value\n */\nadd_action( 'woocommerce_checkout_update_order_meta', 'my_custom_checkout_field_update_order_meta' );\n\nfunction my_custom_checkout_field_update_order_meta( $order_id ) {\n    if ( ! empty( $_POST['my_field_name'] ) ) {\n        $order = wc_get_order( $order_id );\n        $order->update_meta_data( 'My Field', sanitize_text_field( $_POST['my_field_name'] ) );\n        $order->save_meta_data();\n    }\n}\n\n/**\n * Display field value on the order edit page\n */\nadd_action( 'woocommerce_admin_order_data_after_billing_address', 'my_custom_checkout_field_display_admin_order_meta', 10, 1 );\n\nfunction my_custom_checkout_field_display_admin_order_meta( $order ){\n    echo '<p><strong>' . esc_html__( 'My Field' ) . ':</strong> ' . esc_html( $order->get_meta( 'My Field', true ) ) . '</p>';\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Checkout with Slot Fills in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to use Slot Fills to extend the Checkout functionality in WooCommerce Blocks, using the ExperimentalOrderMeta component as an example.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/slot/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\n\n// Aliased import\nimport { ExperimentalOrderMeta } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { ExperimentalOrderMeta } = wc.blocksCheckout;\n\n// extensions and cartData are both fillProps.\nconst MyComponent = ( { extensions, cartData } ) => {\n\tconst { myPlugin } = extensions;\n\treturn <Meta data={ myPlugin } />;\n};\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalOrderMeta>\n\t\t\t<MyComponent />\n\t\t</ExperimentalOrderMeta>\n\t);\n};\n\nregisterPlugin( 'my-plugin', { render } );\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Settings and Button Rendering with WooCommerce Settings API in PHP\nDESCRIPTION: This pair of methods demonstrates how to define a custom settings button field for a WooCommerce integration panel and render its HTML. The init_form_fields method populates an array that defines a settings form, including field type, attributes, and descriptions. The generate_button_html method outputs the custom markup for rendering a button in the settings panel, using customizable attributes and sanitized values. Requires WooCommerce's Settings API environment, the plugin's integration class structure, and localization functionality via __(). Parameters in the configuration specify field design, target URL, and description. Output is directly injected into the admin settings table. Ensure that escaping and attribute rendering follows WooCommerce best practices for security.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/implementing-settings.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Initialize integration settings form fields.\n *\n * @return void\n */\npublic function init_form_fields() {\n\t$this->form_fields = array(\n\t\t// don't forget to put your other settings here\n\t\t'customize_button' => array(\n\t\t\t'title'             => __( 'Customize!', 'woocommerce-integration-demo' ),\n\t\t\t'type'              => 'button',\n\t\t\t'custom_attributes' => array(\n\t\t\t\t'onclick' => \"location.href='https://woocommerce.com'\",\n\t\t\t),\n\t\t\t'description'       => __( 'Customize your settings by going to the integration site directly.', 'woocommerce-integration-demo' ),\n\t\t\t'desc_tip'          => true,\n\t\t)\n\t);\n}\n\n\n/**\n * Generate Button HTML.\n *\n * @access public\n * @param mixed $key\n * @param mixed $data\n * @since 1.0.0\n * @return string\n */\npublic function generate_button_html( $key, $data ) {\n\t$field    = $this->plugin_id . $this->id . '_' . $key;\n\t$defaults = array(\n\t\t'class'             => 'button-secondary',\n\t\t'css'               => '',\n\t\t'custom_attributes' => array(),\n\t\t'desc_tip'          => false,\n\t\t'description'       => '',\n\t\t'title'             => '',\n\t);\n\n\t$data = wp_parse_args( $data, $defaults );\n\n\tob_start();\n\t?>\n\t&lt;tr valign=\"top\"&gt;\n\t\t&lt;th scope=\"row\" class=\"titledesc\"&gt;\n\t\t\t&lt;label for=\"<?php echo esc_attr( $field ); ?>\"><?php echo wp_kses_post( $data['title'] ); ?>&lt;/label&gt;\n\t\t\t<?php echo $this->get_tooltip_html( $data ); ?>\n\t\t&lt;/th&gt;\n\t\t&lt;td class=\"forminp\"&gt;\n\t\t\t&lt;fieldset&lt;\n\t\t\t\t&lt;legend class=\"screen-reader-text\"&gt;&lt;span&gt;<?php echo wp_kses_post( $data['title'] ); ?&gt;&lt;/span&gt;&lt;/legend&gt;\n\t\t\t\t&lt;button class=\"<?php echo esc_attr( $data['class'] ); ?>\" type=\"button\" name=\"<?php echo esc_attr( $field ); ?>\" id=\"<?php echo esc_attr( $field ); ?>\" style=\"<?php echo esc_attr( $data['css'] ); ?>\" <?php echo $this->get_custom_attribute_html( $data ); ?>&gt;<?php echo wp_kses_post( $data['title'] ); ?>&lt;/button&gt;\n\t\t\t\t<?php echo $this->get_description_html( $data ); ?>\n\t\t\t&lt;/fieldset&gt;\n\t\t&lt;/td&gt;\n\t&lt;/tr&gt;\n\t<?php\n\treturn ob_get_clean();\n}\n\n```\n\n----------------------------------------\n\nTITLE: Returning a Successful Payment Response Object (WooCommerce JavaScript)\nDESCRIPTION: This snippet defines a minimal successful payment response for WooCommerce blocks integration, setting the status to 'success'. No dependencies are required, but the response object can be extended with optional properties like paymentMethodData, billingAddress, or shippingAddress, as described in the accompanying documentation. This response shape is expected from payment method observers or integrations to indicate that payment checks passed, with the possibility of additional processing or address updates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst successResponse = { type: 'success' };\n```\n\n----------------------------------------\n\nTITLE: Hooking Payment Gateway Callback Handler using WC-API in PHP\nDESCRIPTION: Registers a method within the payment gateway class (`check_ipn_response`) to handle incoming WC-API callbacks. It uses the WordPress `add_action` function to hook into the dynamically generated action `woocommerce_api_{gateway_class_name}` (in this case, `woocommerce_api_wc_gateway_paypal`). When a request hits the URL generated in the previous snippet, WooCommerce triggers this action, executing the specified handler method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_api_wc_gateway_paypal', array( $this, 'check_ipn_response' ) );\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint to List Cart Coupons (HTTP)\nDESCRIPTION: Defines the HTTP GET request structure for retrieving a list of all coupons currently applied to the user's cart via the WooCommerce Store API. No parameters are required for this endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /cart/coupons\n```\n\n----------------------------------------\n\nTITLE: Validating Custom API Key Field in WooCommerce Settings with PHP\nDESCRIPTION: This method validates the custom 'api_key' field before WooCommerce settings are sanitized and saved. It checks if the value is set and if its string length exceeds 20 characters; if so, it adds an admin error via WC_Admin_Settings::add_error and restricts input to the maximum length allowed by the API. Relies on WooCommerce's admin settings error display and uses proper localization with esc_html__. Requires the field and value to be present as arguments. Returns the original or corrected value after validation. Intended for custom settings extensions ensuring user input meets external API requirements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/implementing-settings.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function validate_api_key_field( $key, $value ) {\n    if ( isset( $value ) && 20 < strlen( $value ) ) {\n        WC_Admin_Settings::add_error( esc_html__( 'Looks like you made a mistake with the API Key field. Make sure it isn\\'t longer than 20 characters', 'woocommerce-integration-demo' ) );\n    }\n\n    return $value;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Checkout Data with Nonce Authentication - Bash (cURL)\nDESCRIPTION: Uses cURL to perform an authenticated GET request to WooCommerce's Checkout endpoint, specifying a Nonce header for authorization. The response provides draft order, addresses, and is utilized to prefill checkout fields on client interfaces. Requires a valid Nonce token for the 'Nonce' header.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request GET https://example-store.com/wp-json/wc/store/v1/checkout\n```\n\n----------------------------------------\n\nTITLE: JavaScript Hook Naming Example in WooCommerce\nDESCRIPTION: Example of WooCommerce JavaScript hook following the woocommerce prefix convention using camelCase.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nwoocommerceTracksEventProperties\n```\n\n----------------------------------------\n\nTITLE: Checking if Express Payment Method is Active\nDESCRIPTION: Example showing how to determine if an express payment method is currently active (open and taking user input) using the isExpressPaymentMethodActive selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst isExpressPaymentMethodActive = store.isExpressPaymentMethodActive();\n```\n\n----------------------------------------\n\nTITLE: Importing and Using the Experimental Shipping Zones Data Store in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to import the `experimentalShippingZonesStore` from the `@woocommerce/data` package and use the `useDispatch` hook from `@wordpress/data` within a component context. It shows how to get access to the store's actions and specifically calls the `createShippingZone` action with a sample payload (`{ name: 'test' }`). This pattern is typical for interacting with WooCommerce data stores in a React/WordPress environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/shipping-zones/README.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\n```ts\\nimport {\\n\\texperimentalShippingZonesStore,\\n} from '@woocommerce/data';\\nimport { useDispatch } from '@wordpress/data';\\n\\nfunction Component() {\\n\\tconst actions = useDispatch(\\n\\t\\texperimentalShippingZonesStore\\n\\t);\\n\\tactions.createShippingZone( { name: 'test' } );\\n}\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Pagination with the <Pagination> Component in React/JSX\nDESCRIPTION: Demonstrates the basic usage of the `<Pagination>` component. It requires `page`, `perPage`, and `total` props to define the pagination state, and `onPageChange` and `onPerPageChange` callback functions to handle user interactions for changing the current page or the number of items per page. This component renders a standard pagination UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/pagination/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pagination\n\tpage={ 1 }\n\tperPage={ 10 }\n\ttotal={ 500 }\n\tonPageChange={ ( newPage ) => setState( { page: newPage } ) }\n\tonPerPageChange={ ( newPerPage ) => setState( { perPage: newPerPage } ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Overflow List Popover with ViewMoreList (React, JSX)\nDESCRIPTION: This JSX snippet demonstrates how to render the ViewMoreList component, supplying the 'items' prop as an array of ReactNode elements. The component displays a button labeled 'X more' and, upon interaction, shows a popover containing the provided items. Dependencies include React and the ViewMoreList component from the codebase. The 'items' prop is an array, each element being a ReactNode (e.g., <i>Lorem</i>), which will be rendered inside the popover. No additional configuration or state management is required in this usage; the popover appears on button click.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/view-more-list/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<ViewMoreList\\n    items={ [ <i>Lorem</i>, <i>Ipsum</i>, <i>Dolor</i>, <i>Sit</i> ] }\\n/>\\n```\n```\n\n----------------------------------------\n\nTITLE: Removing a Checkout Field\nDESCRIPTION: Example of removing the order_comments field from the checkout form using the woocommerce_checkout_fields filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    unset( $fields['order']['order_comments'] );\n\n    return $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Log Free Shipping Availability Status\nDESCRIPTION: PHP function that hooks into WooCommerce's free shipping availability check to log whether free shipping is available. Demonstrates how to programmatically check free shipping status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/free_shipping_customization.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Log if Free Shipping is available or not.\n *\n * @param bool $is_available If Free Shipping is available, then `true`, `false` if not.\n *\n * @return bool\n */\nfunction fsc_free_shipping_is_available( $is_available ) {\n\tif ( $is_available ) {\n\t\terror_log( 'Free shipping is available' );\n\t} else {\n\t\terror_log( 'Free shipping is NOT available' );\n\t}\n\treturn $is_available;\n}\nadd_filter( 'woocommerce_shipping_free_shipping_is_available', 'fsc_free_shipping_is_available', 10, 1 );\n```\n\n----------------------------------------\n\nTITLE: Importing the Payment Store in WooCommerce\nDESCRIPTION: Example showing how to import the paymentStore StoreDescriptor in any module that needs to use it, assuming @woocommerce/block-data is registered as an external.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { paymentStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Image Sizes in PHP for Theme Support\nDESCRIPTION: This code snippet demonstrates how to declare custom image sizes when adding WooCommerce support to a theme. It sets the width for thumbnail, gallery thumbnail, and single product images.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/image-sizes.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'woocommerce', array(\n    'thumbnail_image_width' => 200,\n    'gallery_thumbnail_image_width' => 100,\n    'single_image_width' => 500,\n) );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Product Type with JavaScript Filter in WooCommerce\nDESCRIPTION: This snippet demonstrates how to use the addFilter function from @wordpress/hooks to add a custom product type to the WooCommerce onboarding list. It includes setting up icons, title, and content for the new product type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-custom-products-to-add-products-onboarding-list.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* External dependencies\n*/\nimport { addFilter } from '@wordpress/hooks';\nimport { Icon, chevronRight } from '@wordpress/icons';\nimport { __ } from '@wordpress/i18n';\nimport FolderMultipleIcon from 'gridicons/dist/folder-multiple';\n\naddFilter(\n   'experimental_woocommerce_tasklist_product_types',\n   'custom-product',\n   (productTypes) => [\n       ...productTypes,\n       {\n           key: 'custom-product',\n           title: __('Custom product', 'custom-product'),\n           content: __('Create an awesome custom product.', 'custom-product'),\n           before: <FolderMultipleIcon />,\n           after: <Icon icon={chevronRight} />,\n           onClick: () => {\n           }\n       },\n   ]\n);\n```\n\n----------------------------------------\n\nTITLE: Function to check cart contents and set payment requirements in PHP\nDESCRIPTION: A PHP function that checks if the cart contains a bookable product and returns appropriate payment requirements. This is used to control which payment methods can be used based on cart contents.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/filtering-payment-methods.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Check the content of the cart and add required payment methods.\n *\n *\n * @return array list of features required by cart items.\n */\nfunction inject_payment_feature_requirements_for_cart_api() {\n  // Cart contains a bookable product, so return an array containing our requirement of booking_availability.\n  if ( Pseudo_Booking_Class::cart_contains_bookable_product() ) {\n    return array( 'booking_availability' );\n  }\n\n  // No bookable products in the cart, no need to add anything.\n  return array();\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Messages and Errors with WooCommerce Remote Logger\nDESCRIPTION: Demonstrates how to use the remote logger to log informational messages, warnings, and errors. It includes examples of logging with extra data and capturing exceptions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { log, captureException } from '@woocommerce/remote-logging';\n\n// Log an informational message\nlog('info', 'User completed checkout', { extra: { orderId: '12345' } });\n\n// Log a warning\nlog('warning', 'API request failed, retrying...', { extra: { attempts: 3 } });\n\n// Log an error\ntry {\n  // Some operation that might throw\n} catch (error) {\n  captureException(error, { extra: { orderId: '12345' } });\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating and Adding Shipping Rates with Shipping Classes in WooCommerce using PHP\nDESCRIPTION: This PHP code defines calculate_shipping() and find_shipping_classes() methods for a WooCommerce shipping method class. The calculate_shipping() method computes applicable shipping rates based on user-defined costs and product shipping classes, supporting both per-class and per-order logic. Prerequisites: methods are used in a WooCommerce Shipping Method extension, relying on API calls (e.g., WC()->shipping(), $this->add_rate) and product data structures. Inputs include a cart package array, and outputs are registered shipping rates; the code expects WooCommerce context and may require access to custom rate and class cost options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n    /**\\n    * Calculate the shipping costs.\\n    *\\n    * @param array $package Package of items from cart.\\n    */\\n    public function calculate_shipping( $package = array() ) {\\n        // Get the rate set for this instance.\\n        $rate = array(\\n            'id'      => $this->get_rate_id(), // Get the instance rate ID from the Shipping API.\\n            'label'   => $this->title,\\n            'cost'    => 0,\\n            'package' => $package,\\n        );\\n\\n        // Calculate the costs.\\n        $has_costs = false; // True when a cost is set. False if all costs are blank strings.\\n        $cost      = $this->get_option( 'cost' );\\n\\n        // If a cost has been set, then we evaluate the cost to make sure it is valid.\\n        if ( '' !== $cost ) {\\n            $has_costs    = true;\\n            $rate['cost'] = $cost;\\n        }\\n\\n        // Flat rate shipping has the ability to set a cost per shipping class, so here we get the shipping classes and add those costs, as well.\\n        $shipping_classes = WC()->shipping()->get_shipping_classes();\\n        if ( ! empty( $shipping_classes ) ) {\\n            // Check to see if there are shipping classes assigned to the products in the package/cart.\\n            $found_shipping_classes = $this->find_shipping_classes( $package );\\n            $highest_class_cost     = 0;\\n\\n            // If shipping classes are found to be assigned to the products, then we go through each shipping class.\\n            foreach ( $found_shipping_classes as $shipping_class => $products ) {\\n                // Also handles backwards compatibility when slugs were used instead of ids.\\n                $shipping_class_term = get_term_by( 'slug', $shipping_class, 'product_shipping_class' );\\n                $class_cost   = $shipping_class_term && $shipping_class_term->term_id ? $this->get_option( 'class_cost_' . $shipping_class_term->term_id, $this->get_option( 'class_cost_' . $shipping_class, '' ) ) : $this->get_option( 'no_class_cost', '' );\\n\\n                // If a cost is not assigned to the shipping class, then we move to the next class.\\n                if ( '' === $class_cost ) {\\n                    continue;\\n                }\\n\\n                // We have a shipping class cost, so we evaluate the class cost to confirm it is valid.\\n                $has_costs = true;\\n\\n                /**\\n                * Flat rate has two options when it comes to shipping class, per class or per order.\\n                * Here we check that setting so we can apply the costs accordingly.\\n                */\\n                if ( 'class' === $this->type ) {\\n                    $rate['cost'] += $class_cost;\\n                } else {\\n                    $highest_class_cost = $class_cost > $highest_class_cost ? $class_cost : $highest_class_cost;\\n                }\\n            }\\n\\n            // If the cost is per order, then we apply the highest class cost to the base cost.\\n            if ( 'order' === $this->type && $highest_class_cost ) {\\n                $rate['cost'] += $highest_class_cost;\\n            }\\n        }\\n\\n        if ( $has_costs ) {\\n            $this->add_rate( $rate );\\n        }\\n\\n        /**\\n        * Developers can add additional flat rates based on this one via this action since @version 2.4.\\n        *\\n        * Previously there were (overly complex) options to add additional rates however this was not user.\\n        * friendly and goes against what Flat Rate Shipping was originally intended for.\\n        */\\n        do_action( 'woocommerce_' . $this->id . '_shipping_add_rate', $this, $rate );\\n    }\\n\\n    /**\\n    * Finds and returns shipping classes and the products with said class.\\n    *\\n    * @param mixed $package Package of items from cart.\\n    * @return array\\n    */\\n    public function find_shipping_classes( $package ) {\\n        $found_shipping_classes = array();\\n\\n        foreach ( $package['contents'] as $item_id => $values ) {\\n            if ( $values['data']->needs_shipping() ) {\\n                $found_class = $values['data']->get_shipping_class();\\n\\n                if ( ! isset( $found_shipping_classes[ $found_class ] ) ) {\\n                    $found_shipping_classes[ $found_class ] = array();\\n                }\\n\\n                $found_shipping_classes[ $found_class ][ $item_id ] = $values;\\n            }\\n        }\\n\\n        return $found_shipping_classes;\\n    }\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint to Get Single Cart Coupon (HTTP)\nDESCRIPTION: Defines the HTTP GET request structure for retrieving details of a specific coupon applied to the cart. The `:code` path parameter is required and represents the coupon code to fetch.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /cart/coupons/:code\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Message to WooCommerce Checkout Page using PHP\nDESCRIPTION: This snippet adds a custom reminder message to the WooCommerce checkout page. It uses the 'woocommerce_before_checkout_form' action hook to insert a styled paragraph before the checkout form.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action('woocommerce_before_checkout_form', function() {\n    echo '<p style=\"color: red; font-weight: bold;\">Reminder: Ensure your shipping address is correct before placing your order.</p>';\n});\n```\n\n----------------------------------------\n\nTITLE: Detecting HPOS Usage in WooCommerce Store\nDESCRIPTION: This code snippet demonstrates how to detect whether High-Performance Order Storage (HPOS) tables are being used in a WooCommerce store. The OrderUtil class provides a method to check if custom orders table usage is enabled.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Utilities\\OrderUtil;\n\nif ( OrderUtil::custom_orders_table_usage_is_enabled() ) {\n\t// HPOS usage is enabled.\n} else {\n\t// Traditional CPT-based orders are in use.\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Payment Method in WooCommerce Checkout Block using JavaScript\nDESCRIPTION: This JavaScript snippet illustrates client-side registration of a payment method for the WooCommerce block-based checkout. It fetches settings, defines content and label components for the checkout, and registers the gateway with properties consumed by the block. 'features', 'title', and 'description' are derived from the server and exposed via wc.wcSettings. The implementation relies on global wc.wcSettings, React components, and must be included in the checkout scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n// Get our settings that were provided when the payment method was registered\\nconst settings = window.wc.wcSettings.getSetting( 'bacs_data' );\\n\\n// This is a component that would be rendered in the checkout block when the BACS payment method is selected\\nconst Content = () => {\\n\\treturn decodeEntities( settings?.description || '' );\\n};\\n\\n// This is the label for the payment method\\nconst Label = ( props ) => {\\n\\tconst { PaymentMethodLabel } = props.components;\\n\\treturn <PaymentMethodLabel text={ decodeEntities( settings?.title || 'BACS' ) } />;\\n};\\n\\n// Register the payment method\\nconst bankTransferPaymentMethod = {\\n\\tname: 'BACS',\\n\\tlabel: <Label />,\\n\\tcontent: <Content />,\\n\\tedit: <Content />,\\n\\tcanMakePayment: () => true,\\n\\tsupports: {\\n\\t\\tfeatures: settings?.supports ?? [],\\n\\t},\\n};\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Customer Country Data in WooCommerce\nDESCRIPTION: This code shows how to access the current customer's country by using the global $woocommerce object and the WC_Customer class. The customer object is automatically initialized and stored in the main WooCommerce class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/class-reference.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nglobal $woocommerce;\n$customer_country = $woocommerce->customer->get_country();\n```\n\n----------------------------------------\n\nTITLE: Modifying Related Products Display Arguments in WooCommerce (PHP)\nDESCRIPTION: Function that modifies the arguments for related products display in WooCommerce. It sets the number of products to 4 and arranges them in 2 columns. The function includes a safety check to ensure the input argument is an array and uses WordPress filter hooks for implementation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/number-of-products-per-row.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_related_products_args' ) ) {\n\t/**\n\t * Change number of related products output.\n\t *\n\t * @param  array $args The related products args.\n\t * @return array The modified related products args.\n\t */\n\tfunction YOUR_PREFIX_related_products_args( $args ) {\n\t\tif ( ! is_array( $args ) ) {\n\t\t\t$args = array();\n\t\t}\n\n\t\t$args['posts_per_page'] = 4; // 4 related products.\n\t\t$args['columns']        = 2; // Arranged in 2 columns.\n\n\t\treturn $args;\n\t}\n}\nadd_filter( 'woocommerce_output_related_products_args', 'YOUR_PREFIX_related_products_args', 20 );\n```\n\n----------------------------------------\n\nTITLE: Getting Single Product by ID\nDESCRIPTION: API request to retrieve a specific product using its ID. Returns complete product details including pricing, descriptions, images and stock information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/products.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /products/:id\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/34\"\n```\n\n----------------------------------------\n\nTITLE: Applying WooCommerce Block Props with useWooBlockProps Hook in JavaScript/React\nDESCRIPTION: Illustrates using the `useWooBlockProps` hook within a block's `Edit` component in React. This hook accepts the block's `attributes` and optional additional HTML props (like `className`). It returns an object containing props (`blockProps`) which must be spread onto the block's root element to ensure proper functionality and styling within WooCommerce block template contexts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/block-templates/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { useWooBlockProps } from '@woocommerce/block-templates';\n\nexport function Edit( { attributes } ) {\n\tconst { blockProps } = useWooBlockProps( attributes, {\n\t\tclassName: 'my-block',\n\t} );\n\n\treturn <div { ...blockProps }>Block content</div>;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Redirect URL from Checkout Store in JavaScript\nDESCRIPTION: Shows how to fetch the redirect URL after checkout completion using the getRedirectUrl selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst redirectUrl = store.getRedirectUrl();\n```\n\n----------------------------------------\n\nTITLE: Creating a New WooCommerce Product - Bash\nDESCRIPTION: This snippet creates a new simple WooCommerce product named 'New Product' with a regular price of 19.99 using the WC-CLI. It leverages the 'wp wc product create' command along with key options for product name, type, and price. Dependencies include WP-CLI, WooCommerce, and administrator-level access. The product details can be adjusted by modifying the command parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwp wc product create --name=\\\"New Product\\\" --type=\\\"simple\\\" --regular_price=\\\"19.99\\\"\n```\n\n----------------------------------------\n\nTITLE: Registering BACS Payment Method in JavaScript\nDESCRIPTION: Configuration object for registering a bank transfer (BACS) payment method in WooCommerce. Defines basic properties like name, label, content components, and supported features.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst bankTransferPaymentMethod = {\n\tname: PAYMENT_METHOD_NAME,\n\tlabel: <Label />,\n\tcontent: <Content />,\n\tedit: <Content />,\n\tcanMakePayment: () => true,\n\tariaLabel: label,\n\tsupports: {\n\t\tfeatures: settings?.supports ?? [],\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Registering an Express Payment Method in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This JavaScript snippet registers a custom express payment method in WooCommerce Blocks using wc.wcBlocksRegistry.registerExpressPaymentMethod. It requires WooCommerce's Blocks scripts and the wp.element global for creating React elements. The object passed defines the payment method's properties, including a simple render element and capability checking. Inputs: a configuration object specifying name, content, paymentMethodId, supports, and capability callbacks. Output: Makes the new payment method available in the checkout UI. Limitations: The method will appear for all users unless further limited (see following snippet for conditional display).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/600.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nwc.wcBlocksRegistry.registerExpressPaymentMethod( {\n\tname: 'expressMethod',\n\tedit: null,\n\tcontent: wp.element.createElement( 'div', {}, 'My express test method' ),\n\tcanMakePayment: () => true,\n\tpaymentMethodId: 'expressMethod',\n\tsupports: {\n\t\tfeatures: [ 'products' ],\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using DynamicForm with WooCommerce Fields in React (JSX)\nDESCRIPTION: Demonstrates how to initialize and render the DynamicForm component in a React application, setting up initial values, configuring field structures from the WooCommerce/WordPress Settings API, and passing event handlers for submit and change operations. Developers must have the DynamicForm component, a suitable React environment, required field definitions, and state management for handling submissions. The code expects 'fields' as either an object or array following the WooCommerce schema and shows configuration for form validation, submission, button labeling, and busy state. Inputs are taken from user interaction; outputs are managed via event handlers (e.g., setSubmitted in the example).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/dynamic-form/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst initialValues = { firstName: '' };\n\n<DynamicForm\n\tfields={ fields }\n\tonSubmit={ ( values ) => {\n\t\tsetSubmitted( values );\n\t} }\n\tisBusy={ false }\n\tonChange={ () => {} }\n\tvalidate={ () => ( {} ) }\n\tsubmitLabel=\"Submit\"\n/>;\n\n```\n\n----------------------------------------\n\nTITLE: Using Global WC Object - TypeScript\nDESCRIPTION: Demonstrates how to use the product collection registration function through the global WC object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nwc.wcBlocksRegistry.__experimentalRegisterProductCollection({\n...  \n});\n```\n\n----------------------------------------\n\nTITLE: Checking for Validation Errors in WooCommerce Store\nDESCRIPTION: Shows how to check if any validation errors exist in the validation store. Returns a boolean indicating whether validation errors occurred.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( validationStore );\nconst hasValidationErrors = store.hasValidationErrors();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Variations\nDESCRIPTION: Example of how to retrieve product variations using the type parameter in the Store API request.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/products.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products?type=variation\"\n```\n\n----------------------------------------\n\nTITLE: Querying Registered Blocks for a Parent Area (JavaScript)\nDESCRIPTION: Illustrates use of the 'getRegisteredBlocks' function from the WooCommerce blocks-checkout package to fetch all blocks registered for a specific parent area (e.g., 'woocommerce/checkout-totals-block'). Returns an array of block objects which can be rendered or inspected. Requires WooCommerce blocks-checkout and runs in a WordPress JS context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { getRegisteredBlocks } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { getRegisteredBlocks } = wc.blocksCheckout;\n\nconst registeredBlocks = getRegisteredBlocks(\n\t'woocommerce/checkout-totals-block'\n);\n```\n\n----------------------------------------\n\nTITLE: Advanced WooCommerce Order Query with Field and Value Comparisons in PHP\nDESCRIPTION: This complex example showcases the use of field_query to retrieve orders based on multiple conditions including partial name matching, total amount, and discount total. It demonstrates the use of LIKE comparison and numeric value typing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$orders = wc_get_orders(\n    array(\n        'field_query' => array(\n            array(\n                'field'   => 'billing_first_name',\n                'value'   => 'laur',\n                'compare' => 'LIKE',\n            ),\n            array(\n                'relation' => 'AND',\n                array(\n                    'field'   => 'total',\n                    'value'   => '10.0',\n                    'compare' => '<',\n                    'type'    => 'NUMERIC',\n                ),\n                array(\n                    'field'   => 'discount_total',\n                    'value'   => '5.0',\n                    'compare' => '>=',\n                    'type'    => 'NUMERIC',\n                )\n            )\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Actions to WooCommerce Admin Note in PHP\nDESCRIPTION: This code shows how to add action buttons to a WooCommerce Admin Note using the add_action() method. It demonstrates adding two actions with different purposes: one for navigation and one for an external link.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$note->add_action(\n    'settings', 'Open Settings', '?page=wc-settings&tab=general'\n);\n$note->add_action(\n    'learn_more', 'Learn More', 'https://example.com'\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Available Payment Methods\nDESCRIPTION: Example demonstrating how to retrieve all available payment methods (excluding express methods) using the getAvailablePaymentMethods selector, with sample return data structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst availablePaymentMethods = store.getAvailablePaymentMethods();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"cheque\": {\n        name: \"cheque\",\n    },\n    \"cod\": {\n        name: \"cod\",\n    },\n    \"bacs\": {\n        name: \"bacs\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Coupon Apply Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows how to dispatch the applyCoupon action with couponCode (string) to add a coupon to the cart in WooCommerce. This action triggers server/request logic for coupon application and updates UI status or error messaging accordingly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( applyCoupon( couponCode ) );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Headers in JavaScript\nDESCRIPTION: Demonstrates how to use the getCollectionHeaders selector to retrieve headers for a specific collection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( COLLECTIONS_STORE_KEY );\nconst headers = store.getCollectionHeaders( state, namespace, resourceName, queryString );\n```\n\n----------------------------------------\n\nTITLE: Dispatching Extension Cart Update Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: This snippet dispatches the applyExtensionCartUpdate action to send a POST request to /cart/extensions, passing extension-specific data. The args object must include extensionId (string), data (object with key and value as strings), and overwriteDirtyCustomerData (boolean). The action updates the cart via an extension, and optionally overwrites client-side customer data. Requires Redux and WooCommerce extension integration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( applyExtensionCartUpdate( args ) );\n```\n\n----------------------------------------\n\nTITLE: Selecting Option in Select2 Field in JavaScript\nDESCRIPTION: This helper method searches for select2 type fields and selects plus inserts a value inside. It takes the selector and value as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_26\n\nLANGUAGE: JavaScript\nCODE:\n```\nselectOptionInSelect2(selector, value)\n```\n\n----------------------------------------\n\nTITLE: Removing an Item from Cart HTTP Endpoint\nDESCRIPTION: HTTP endpoint specification for removing an item from the cart by its key. Requires authentication via Nonce Token or Cart Token.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_11\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/remove-item\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Adding Product Variation to Cart\nDESCRIPTION: JSON example for adding a product variation to the cart with multiple attributes including global attributes (with pa_ prefix), product-specific attributes by name, and attributes identified by slug.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 13,\n\t\"quantity\": 1,\n\t\"variation\": [\n\t\t{\n\t\t\t\"attribute\": \"pa_color\",\n\t\t\t\"value\": \"blue\"\n\t\t},\n\t\t{\n\t\t\t\"attribute\": \"attribute_autograph-%e2%9c%8f%ef%b8%8f\",\n\t\t\t\"value\": \"Yes\"\n\t\t},\n\t\t{\n\t\t\t\"attribute\": \"Logo\",\n\t\t\t\"value\": \"Yes\"\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fees to WooCommerce Cart (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to add custom fees to the WooCommerce cart using the `woocommerce_cart_calculate_fees` action hook. It defines a function `add_fees` that adds two distinct fees ('Packaging 1' and 'Packaging 2') with specified amounts to the cart object ($cart). This code is intended to be added to `woocommerce-gutenberg-products-block.php` for testing the display of itemized fee rows in the Cart and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/430.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_cart_calculate_fees', 'add_fees', 10 );\nfunction add_fees( $cart ) {\n    $cart->add_fee( __( 'Packaging 1', 'woo-gutenberg-products-block' ), 100, true );\n    $cart->add_fee( __( 'Packaging 2', 'woo-gutenberg-products-block' ), 50, true );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Sortable List in JSX\nDESCRIPTION: This example demonstrates the basic usage of the `Sortable` component. Child elements (e.g., `div`s) are wrapped within `<Sortable>`. Each child element must have a unique `key` prop, which is used to identify the items in the `onOrderChange` callback. The `onOrderChange` prop accepts a function that is triggered after items are reordered, receiving an array of the item keys in their new order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/sortable/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Sortable onOrderChange={ ( items ) => console.log( 'Items have been reordered:', items ) }>\n    <div key=\"item-1\">List item 1</div>\n    <div key=\"item-2\">List item 2</div>\n    <div key=\"item-3\">List item 3</div>\n</Sortable>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Pagination UI with `usePagination` Hook and Components in React/JSX\nDESCRIPTION: Illustrates a custom pagination setup using the `usePagination` hook to manage state (like start/end item indices) based on `totalCount` and `defaultPerPage`. The hook's return value (`paginationProps`) is spread onto custom components (`PaginationPageArrowsWithPicker`, `PaginationPageSizePicker`) to build a flexible pagination interface. It also shows how to display the current item range and configure per-page options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/pagination/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst paginationProps = usePagination( {\n\ttotalCount: 200,\n\tdefaultPerPage: 25,\n} );\n\nreturn (\n\t<div>\n\t\t<div>\n\t\t\tViewing { paginationProps.start }-{ paginationProps.end } of 200\n\t\t\titems\n\t\t</div>\n\t\t<PaginationPageArrowsWithPicker { ...paginationProps } />\n\t\t<PaginationPageSizePicker\n\t\t\t{ ...paginationProps }\n\t\t\ttotal={ 200 }\n\t\t\tperPageOptions={ [ 5, 10, 25 ] }\n\t\t\tlabel=\"\"\n\t\t/>\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the OrderStatus React Component\nDESCRIPTION: This JSX snippet demonstrates how to use the `OrderStatus` component. It initializes a sample order object with a 'processing' status and then renders the `OrderStatus` component, passing the order object via the `order` prop. The component will display a badge corresponding to the 'processing' status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/order-status/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst order = { status: 'processing' }; // Use a real WooCommerce Order here.\n\n<OrderStatus order={ order } />\n```\n\n----------------------------------------\n\nTITLE: Loading Custom WooCommerce Translations in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to load custom translations for WooCommerce from a specified directory. It uses the 'load_textdomain_mofile' filter to intercept the loading of translation files and redirect to a custom file location.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/making_translations_upgrade_safe.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// Code to be placed in functions.php of your theme or a custom plugin file.\nadd_filter( 'load_textdomain_mofile', 'load_custom_plugin_translation_file', 10, 2 );\n\n/*\n * Replace 'textdomain' with your plugin's textdomain. e.g. 'woocommerce'. \n * File to be named, for example, yourtranslationfile-en_GB.mo\n * File to be placed, for example, wp-content/lanaguages/textdomain/yourtranslationfile-en_GB.mo\n */\nfunction load_custom_plugin_translation_file( $mofile, $domain ) {\n  if ( 'textdomain' === $domain ) {\n    $mofile = WP_LANG_DIR . '/textdomain/yourtranslationfile-' . get_locale() . '.mo';\n  }\n  return $mofile;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific Order in PHP\nDESCRIPTION: Main function for retrieving a single order using the WC_Order_Factory class. The parameter can be a post object or a post ID of the order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nwc_get_order( $the_order = false )\n```\n\n----------------------------------------\n\nTITLE: Adding a Validated Text Field in WooCommerce Product Editor (PHP)\nDESCRIPTION: This snippet shows how to add a text field with advanced validation rules to the WooCommerce product editor. It includes URL type validation, minimum length requirement, and custom error messages for each validation rule.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/text/README.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n$section->add_block(\n  array(\n    'id'         => 'product-external-url',\n    'blockName'  => 'woocommerce/product-text-field',\n    'order'      => 10,\n    'attributes' => array(\n      'property'    => 'external_url',\n      'label'       => __( 'Link to the external product', 'woocommerce' ),\n      'placeholder' => __( 'Enter the external URL to the product', 'woocommerce' ),\n      'suffix'      => true,\n      'type'        => array(\n        'value'   => 'url',\n        'message' => __( 'Link to the external product is an invalid URL.', 'woocommerce' ),\n      ),\n      'minLength'   => array(\n        'value'   => 8,\n        'message' => __( 'The link must be longer than %d.', 'woocommerce' ),\n      ),\n      'required'    => __( 'Link to the external product is required.', 'woocommerce' ),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Counting Orders by Status in PHP\nDESCRIPTION: Returns the count of orders with a specific status. Optionally can filter by order type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\nwc_orders_count( $status, string $type = '' )\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Search Autocomplete Filter - WooCommerce React - JavaScript\nDESCRIPTION: This code demonstrates configuring a 'product' filter that uses an autocomplete search input, integrating with WooCommerce's Search component. The 'type' parameter specifies the autocompleter type, and 'getLabels' is a function returning a promise for matching items in the ID-label shape. This pattern enables rapid product lookup and selection, provided the NAMESPACE variable and getRequestByIdString utility are available in scope.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/advanced-filters/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n\t...,\n\tfilters: {\n\t\tproduct: {\n\t\t\tinput: {\n\t\t\t\tcomponent: 'Search',\n\t\t\t\ttype: 'products',\n\t\t\t\tgetLabels: getRequestByIdString( NAMESPACE + 'products', product => ( {\n\t\t\t\t\tid: product.id,\n\t\t\t\t\tlabel: product.name,\n\t\t\t\t} ) ),\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Modifying Dummy Product Variation for Email Preview in WooCommerce (PHP)\nDESCRIPTION: This snippet shows how to modify the dummy product variation used in email preview. It uses the 'woocommerce_email_preview_dummy_product_variation' filter to change the name of the variation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_dummy_product_variation', function( $variation ) {\n    // Modify the dummy variation object\n    $variation->set_name( 'My Variation' );\n    return $variation;\n} );\n```\n\n----------------------------------------\n\nTITLE: Accessing Schema Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Schema Store which is primarily used for accessing routes internally in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst { SCHEMA_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extension Data from Checkout Store in JavaScript\nDESCRIPTION: Illustrates how to access extra data registered by extensions using the getExtensionData selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst extensionData = store.getExtensionData();\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox is Set in JavaScript\nDESCRIPTION: This function verifies that a checkbox is checked. It takes the selector of the checkbox as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_33\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyCheckboxIsSet(selector)\n```\n\n----------------------------------------\n\nTITLE: Accessing PaymentEventsContext in WooCommerce Checkout\nDESCRIPTION: Example showing how to use the usePaymentEventsContext hook to access the onPaymentSetup handler from the PaymentEventsContext in WooCommerce Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { onPaymentSetup } = usePaymentEventsContext();\n```\n\n----------------------------------------\n\nTITLE: Installing @woocommerce/data using pnpm (Bash)\nDESCRIPTION: This command uses the `pnpm` package manager to install the `@woocommerce/data` package and adds it as a project dependency. This package is essential for accessing the data store and utilities provided for WooCommerce Admin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/data --save\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Field in WooCommerce Checkout\nDESCRIPTION: Example of registering a text field for Government ID in the address section with custom attributes including aria labels, pattern validation, and data attributes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_init',\n\tfunction() {\n\t\twoocommerce_register_additional_checkout_field(\n\t\t\tarray(\n\t\t\t\t'id'            => 'namespace/gov-id',\n\t\t\t\t'label'         => 'Government ID',\n\t\t\t\t'optionalLabel' => 'Government ID (optional)',\n\t\t\t\t'location'      => 'address',\n\t\t\t\t'required'      => true,\n\t\t\t\t'attributes'    => array(\n\t\t\t\t\t'autocomplete'     => 'government-id',\n\t\t\t\t\t'aria-describedby' => 'some-element',\n\t\t\t\t\t'aria-label'       => 'custom aria label',\n\t\t\t\t\t'pattern'          => '[A-Z0-9]{5}',\n\t\t\t\t\t'title'            => 'Title to show on hover',\n\t\t\t\t\t'data-custom'      => 'custom data',\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting to Custom Store API Endpoint in WooCommerce via PHP\nDESCRIPTION: This PHP snippet defines a WordPress admin initialization action to programmatically trigger a POST request to the '/wc/store/patterns' endpoint. It sets an option to allow AI connection, constructs a WP_REST_Request object, sets necessary parameters (such as 'business_description'), performs the request using rest_do_request(), and logs the response for debugging purposes. Required dependencies are WooCommerce Blocks, WordPress REST API functions, and appropriate permissions (must run within the admin context). Input parameters such as 'business_description' should be tailored as needed, and outputs are logged to the debug.log file for verification.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1120.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\\nfunction connect_to_endpoint() {\\n\\tupdate_option( 'woocommerce_blocks_allow_ai_connection', true );\\n\\n\\t$request = new WP_REST_Request( 'POST', '/wc/store/patterns' );\\n\\n\\t$request->set_param( 'business_description', 'selling art' );\\n\\n\\t$response = rest_do_request( $request )->get_data();\\n\\n\\terror_log( print_r( $response, true ) );\\n}\\n\\nadd_action( 'admin_init', 'connect_to_endpoint' );\n```\n\n----------------------------------------\n\nTITLE: Defining Select Options for Custom Field\nDESCRIPTION: Example of adding options to a select-type field in the checkout form, defining key-value pairs for the dropdown options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$fields['billing']['your_field']['options'] = array(\n    'option_1' => 'Option 1 text',\n    'option_2' => 'Option 2 text'\n);\n```\n\n----------------------------------------\n\nTITLE: Using Event Emitter Response Utilities in a Payment Method Component\nDESCRIPTION: Demonstrates how to access response utilities provided to payment method components via props.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyPaymentMethodComponent = ( { emitResponse } ) => {\n\tconst { noticeContexts, responseTypes } = emitResponse;\n\t// other logic for payment method...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Failure Response Object for onPaymentSetup in JavaScript\nDESCRIPTION: Defines the minimal JavaScript object structure for a failed payment processing response. Returning this shape sets the payment method context status to `FAIL`. Optional properties like `message`, `messageContext`, `paymentMethodData`, and `billingAddress` can be included to display error notices, specify notice context, add payment data, or update billing addresses.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst failResponse = { type: 'failure' };\n```\n\n----------------------------------------\n\nTITLE: Generating WooCommerce WC-API Callback URL in PHP\nDESCRIPTION: Generates the specific URL that an external payment service (like PayPal) should use to send callback notifications (e.g., IPN) back to the WooCommerce store. It uses WordPress functions to construct a URL containing the 'wc-api' query parameter and the target gateway class name ('WC_Gateway_Paypal' in this example), directing the request to the WC-API handler. The `str_replace` function is shown potentially converting HTTPS to HTTP, which might be specific to older implementations or PayPal Standard requirements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nstr_replace( 'https:', 'http:', add_query_arg( 'wc-api', 'WC_Gateway_Paypal', home_url( '/' ) ) );\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Validation with Regex Pattern in PHP\nDESCRIPTION: Illustrates how to set up a validation rule for a WooCommerce field using a PHP array representing a JSON schema fragment. This example ensures the field value is a string matching a specific pattern (VAT code format: 2 uppercase letters followed by 8-12 digits) using the `pattern` keyword. An `errorMessage` is provided for user feedback upon validation failure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n'validation' => [\n\t\"type\" => \"string\",\n\t\"pattern\" => \"^[A-Z]{2}[0-9]{8,12}$\"\n\t\"errorMessage\" => \"Please enter a valid VAT code with 2 letters for country code and 8-12 numbers.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Dispatching Shipping Rate Selection Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates dispatching the shippingRatesBeingSelected action to indicate shipping rate selection is in progress. Accepts isResolving (boolean) as input and updates the Redux state to reflect shipping rate update operations, typically for UI feedback or blocking further changes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( shippingRatesBeingSelected( isResolving ) );\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Failure in WooCommerce Gateway in PHP\nDESCRIPTION: This snippet shows how to handle a payment failure in a WooCommerce payment gateway. It adds an error notice and returns a failure status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nwc_add_notice( __('Payment error:', 'woothemes') . $error_message, 'error' );\nreturn array(\n    'result'   => 'failure'\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Saved Payment Methods in WooCommerce\nDESCRIPTION: Demonstrates how to retrieve saved payment methods for the current customer, including example response structure for Stripe tokens.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nsavedPaymentMethods: {\n\tcc: [\n\t\t{\n\t\t\tmethod: {\n\t\t\t\tgateway: 'stripe',\n\t\t\t\tlast4: '4242',\n\t\t\t\tbrand: 'Visa',\n\t\t\t},\n\t\t\texpires: '04/24',\n\t\t\tis_default: true,\n\t\t\tactions: {\n\t\t\t\twcs_deletion_error: {\n\t\t\t\t\turl: '#choose_default',\n\t\t\t\t\tname: 'Delete',\n\t\t\t\t},\n\t\t\t},\n\t\t\ttokenId: 2,\n\t\t},\n\t];\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst savedPaymentMethods = store.getSavedPaymentMethods();\n```\n\n----------------------------------------\n\nTITLE: Fetching WooCommerce Settings with useSelect and settingsStore (JavaScript/React)\nDESCRIPTION: This JavaScript/React example demonstrates fetching WooCommerce general settings within a functional component. It utilizes the `useSelect` hook from `@wordpress/data` to interact with the `settingsStore` provided by `@woocommerce/data`. The component retrieves the 'general' settings group and renders the keys of the fetched settings object in an unordered list. It requires `@woocommerce/data`, `@wordpress/data`, and a React environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { settingsStore } from '@woocommerce/data';\nimport { useSelect } from '@wordpress/data';\n\nfunction MySettings() {\n\tconst settings = useSelect( select => {\n\t\treturn select( settingsStore ).getSettings('general').general;\n\t} );\n\treturn (\n\t\t<ul>\n\t\t\t{ Object.keys( settings ?? {} ).map( setting => (\n\t\t\t\t<li key={ setting }>{ setting }</li>\n\t\t\t) ) }\n\t\t</ul>\n\t);\n}\n\n// Rendered in the application:\n//\n//  <MySettings />\n```\n\n----------------------------------------\n\nTITLE: Example Successful Order Response Structure (JSON)\nDESCRIPTION: Illustrates the detailed JSON format of a successful response returned by the Order API. The structure includes the order ID, status, applied coupons, shipping and billing addresses, line items with product details and prices, order totals, payment/shipping requirements, and any errors.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/order.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 147,\n\t\"status\": \"pending\",\n\t\"coupons\": [\n\t\t{\n\t\t\t\"code\": \"discount20\",\n\t\t\t\"totals\": {\n\t\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"total_discount\": \"421\",\n\t\t\t\t\"total_discount_tax\": \"0\"\n\t\t\t}\n\t\t}\n\t],\n\t\"shipping_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"billing_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"email\": \"admin@example.com\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"items\": [\n\t\t{\n\t\t\t\"key\": \"9bf31c7ff062936a96d3c8bd1f8f2ff3\",\n\t\t\t\"id\": 15,\n\t\t\t\"quantity\": 1,\n\t\t\t\"quantity_limits\": {\n\t\t\t\t\"minimum\": 1,\n\t\t\t\t\"maximum\": 99,\n\t\t\t\t\"multiple_of\": 1,\n\t\t\t\t\"editable\": true\n\t\t\t},\n\t\t\t\"name\": \"Beanie\",\n\t\t\t\"short_description\": \"<p>This is a simple product.</p>\",\n\t\t\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\t\t\"sku\": \"woo-beanie\",\n\t\t\t\"low_stock_remaining\": null,\n\t\t\t\"backorders_allowed\": false,\n\t\t\t\"show_backorder_badge\": false,\n\t\t\t\"sold_individually\": false,\n\t\t\t\"permalink\": \"https://local.wordpress.test/product/beanie/\",\n\t\t\t\"images\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 44,\n\t\t\t\t\t\"src\": \"https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2.jpg\",\n\t\t\t\t\t\"thumbnail\": \"https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-324x324.jpg\",\n\t\t\t\t\t\"srcset\": \"https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2.jpg 801w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-324x324.jpg 324w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-100x100.jpg 100w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-416x416.jpg 416w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-300x300.jpg 300w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-150x150.jpg 150w, https://local.wordpress.test/wp-content/uploads/2020/03/beanie-2-768x768.jpg 768w\",\n\t\t\t\t\t\"sizes\": \"(max-width: 801px) 100vw, 801px\",\n\t\t\t\t\t\"name\": \"beanie-2.jpg\",\n\t\t\t\t\t\"alt\": \"\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"variation\": [],\n\t\t\t\"prices\": {\n\t\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"price\": \"1000\",\n\t\t\t\t\"regular_price\": \"2000\",\n\t\t\t\t\"sale_price\": \"1000\",\n\t\t\t\t\"price_range\": null,\n\t\t\t\t\"raw_prices\": {\n\t\t\t\t\t\"precision\": 6,\n\t\t\t\t\t\"price\": \"10000000\",\n\t\t\t\t\t\"regular_price\": \"20000000\",\n\t\t\t\t\t\"sale_price\": \"10000000\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"item_data\": [],\n\t\t\t\"totals\": {\n\t\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"line_subtotal\": \"1000\",\n\t\t\t\t\"line_subtotal_tax\": \"0\",\n\t\t\t\t\"line_total\": \"800\",\n\t\t\t\t\"line_total_tax\": \"0\"\n\t\t\t},\n\t\t\t\"catalog_visibility\": \"view\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"e369853df766fa44e1ed0ff613f563bd\",\n\t\t\t\"id\": 34,\n\t\t\t\"quantity\": 1,\n\t\t\t\"quantity_limits\": {\n\t\t\t\t\"minimum\": 1,\n\t\t\t\t\"maximum\": 99,\n\t\t\t\t\"multiple_of\": 1,\n\t\t\t\t\"editable\": true\n\t\t\t},\n\t\t\t\"name\": \"WordPress Pennant\",\n\t\t\t\"short_description\": \"<p>This is an external product.</p>\",\n\t\t\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\t\t\"sku\": \"wp-pennant\",\n\t\t\t\"low_stock_remaining\": null,\n\t\t\t\"backorders_allowed\": false,\n\t\t\t\"show_backorder_badge\": false,\n\t\t\t\"sold_individually\": false,\n\t\t\t\"permalink\": \"https://local.wordpress.test/product/wordpress-pennant/\",\n\t\t\t\"images\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 57,\n\t\t\t\t\t\"src\": \"https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1.jpg\",\n\t\t\t\t\t\"thumbnail\": \"https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-324x324.jpg\",\n\t\t\t\t\t\"srcset\": \"https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1.jpg 800w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-324x324.jpg 324w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-100x100.jpg 100w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-416x416.jpg 416w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-300x300.jpg 300w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-150x150.jpg 150w, https://local.wordpress.test/wp-content/uploads/2020/03/pennant-1-768x768.jpg 768w\",\n\t\t\t\t\t\"sizes\": \"(max-width: 800px) 100vw, 800px\",\n\t\t\t\t\t\"name\": \"pennant-1.jpg\",\n\t\t\t\t\t\"alt\": \"\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"variation\": [],\n\t\t\t\"prices\": {\n\t\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"price\": \"1105\",\n\t\t\t\t\"regular_price\": \"1105\",\n\t\t\t\t\"sale_price\": \"1105\",\n\t\t\t\t\"price_range\": null,\n\t\t\t\t\"raw_prices\": {\n\t\t\t\t\t\"precision\": 6,\n\t\t\t\t\t\"price\": \"11050000\",\n\t\t\t\t\t\"regular_price\": \"11050000\",\n\t\t\t\t\t\"sale_price\": \"11050000\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"item_data\": [],\n\t\t\t\"totals\": {\n\t\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"line_subtotal\": \"1105\",\n\t\t\t\t\"line_subtotal_tax\": \"0\",\n\t\t\t\t\"line_total\": \"884\",\n\t\t\t\t\"line_total_tax\": \"0\"\n\t\t\t},\n\t\t\t\"catalog_visibility\": \"view\"\n\t\t}\n\t],\n\t\"needs_payment\": true,\n\t\"needs_shipping\": true,\n\t\"totals\": {\n\t\t\"subtotal\":\"2105\",\n\t\t\"total_discount\": \"421\",\n\t\t\"total_shipping\": \"500\",\n\t\t\"total_fees\": \"0\",\n\t\t\"total_tax\": \"0\",\n\t\t\"total_refund\": \"0\",\n\t\t\"total_price\": \"2184\",\n\t\t\"total_items\": \"2105\",\n\t\t\"total_items_tax\": \"0\",\n\t\t\"total_fees_tax\": \"0\",\n\t\t\"total_discount_tax\": \"0\",\n\t\t\"total_shipping_tax\": \"0\",\n\t\t\"tax_lines\": []\n\t},\n\t\"errors\": [],\n\t\"payment_requirements\": [ \"products\" ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Main Plugin File for WooCommerce Integration in PHP\nDESCRIPTION: This code creates the main plugin file that initializes the WooCommerce integration. It hooks into plugins_loaded, checks if WC_Integration exists, includes the integration class file, and registers the integration through the woocommerce_integrations filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/implementing-settings.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: WooCommerce Integration Demo\n * Plugin URI: https://gist.github.com/BFTrick/091d55feaaef0c5341d8\n * Description: A plugin demonstrating how to add a new WooCommerce integration.\n * Author: Patrick Rauland\n * Author URI: http://speakinginbytes.com/\n * Version: 1.0\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\n *\n */\nif ( ! class_exists( 'WC_Integration_Demo' ) ) :\n    /**\n     * Integration demo class.\n     */\n    class WC_Integration_Demo {\n        /**\n         * Construct the plugin.\n         */\n        public function __construct() {\n            add_action( 'plugins_loaded', array( $this, 'init' ) );\n        }\n\n        /**\n         * Initialize the plugin.\n         */\n        public function init() {\n            // Checks if WooCommerce is installed.\n            if ( class_exists( 'WC_Integration' ) ) {\n                // Include our integration class.\n                include_once 'class-wc-integration-demo-integration.php';\n                // Register the integration.\n                add_filter( 'woocommerce_integrations', array( $this, 'add_integration' ) );\n            } else {\n                // throw an admin error if you like\n            }\n        }\n\n        /**\n         * Add a new integration to WooCommerce.\n         *\n         * @param array Array of integrations.\n         */\n        public function add_integration( $integrations ) {\n            $integrations[] = 'WC_Integration_Demo_Integration';\n            return $integrations;\n        }\n    }\nendif;\n\n$WC_Integration_Demo = new WC_Integration_Demo( __FILE__ );\n```\n\n----------------------------------------\n\nTITLE: Verifying Post-Processing Status in Checkout Store using JavaScript\nDESCRIPTION: Shows how to check if the checkout is in the after processing state using the isAfterProcessing selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isAfterProcessing = store.isAfterProcessing();\n```\n\n----------------------------------------\n\nTITLE: Order API Routes and Test Paths\nDESCRIPTION: Table detailing order-related API endpoints and their test file locations. Covers order creation, viewing, updating, deletion, and complex order scenarios.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/api-critical-flows.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Route  | Flow name                                                        | Endpoints                    | Test File                                                 |\n|--------|------------------------------------------------------------------|------------------------------|-----------------------------------------------------------|\n| Orders | Can create an order                                              | `/wp-json/wc/v3/orders`      | `tests/api-core-tests/tests/orders/orders-crud.test.js`   |\n| Orders | Can view a single order                                          | `/wp-json/wc/v3/orders/{id}` | `tests/api-core-tests/tests/orders/orders-crud.test.js`   |\n| Orders | Can update an order                                              | `/wp-json/wc/v3/orders/{id}` | `tests/api-core-tests/tests/orders/orders-crud.test.js`   |\n| Orders | Can delete an order                                              | `/wp-json/wc/v3/orders/{id}` | `tests/api-core-tests/tests/orders/orders-crud.test.js`   |\n| Orders | Can view all orders                                              | `/wp-json/wc/v3/orders`      | `tests/api-core-tests/tests/orders/orders.test.js`        |\n| Orders | Can search orders                                                | `/wp-json/wc/v3/orders`      | `tests/api-core-tests/tests/orders/order-search.test.js`  |\n| Orders | Can add new Order complex - multiple product types & tax classes | `/wp-json/wc/v3/orders`      | `tests/api-core-tests/tests/orders/order-complex.test.js` |\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for Updating Customer Data in WooCommerce\nDESCRIPTION: HTTP endpoint specification for updating customer data in WooCommerce. This endpoint requires authentication via a nonce token or cart token and accepts customer billing and shipping address information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_19\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/update-customer\n```\n\n----------------------------------------\n\nTITLE: Defining the Data Object for onCheckoutSuccess Callback in JavaScript\nDESCRIPTION: Illustrates the structure of the data object passed as an argument to observers registered with the `onCheckoutSuccess` event emitter. This object contains details about the successfully processed order, including `redirectUrl`, `orderId`, `customerId`, `orderNotes`, and `paymentResult` (which itself contains `paymentStatus` and `paymentDetails` from the server response).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst onCheckoutProcessingData = {\n\tredirectUrl,\n\torderId,\n\tcustomerId,\n\torderNotes,\n\tpaymentResult,\n};\n```\n\n----------------------------------------\n\nTITLE: Showing All Validation Errors in JavaScript\nDESCRIPTION: Example showing how to show all validation errors at once using the showAllValidationErrors action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = wp.data;\nconst { showAllValidationErrors } = dispatch( validationStore );\n\nshowAllValidationErrors();\n```\n\n----------------------------------------\n\nTITLE: Implementing `CustomerEffortScore` with Console Logging (JavaScript/React)\nDESCRIPTION: Defines a React functional component `CustomerEffortScoreConsole` that wraps the `CustomerEffortScore` component from `@woocommerce/customer-effort-score`. It demonstrates passing required props like `recordScoreCallback`, `title`, and `firstQuestion`, along with optional props like `secondQuestion` and callbacks for various events (`onNoticeShown`, `onNoticeDismissed`, `onModalShown`), logging the events and score data to the console. Requires React and the `@woocommerce/customer-effort-score` package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/customer-effort-score/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport CustomerEffortScore from '@woocommerce/customer-effort-score';\n\nexport function CustomerEffortScoreConsole( { label } ) {\n    const onNoticeShown = () => console.log( 'onNoticeShown' );\n    const onModalShown = () => console.log( 'onModalShown' );\n    const onNoticeDismissed = () => console.log( 'onNoticeDismissed' );\n    const recordScore = ( score, score2, comments ) => console.log( { score, score2, comments } );\n\n    return (\n        <CustomerEffortScore\n\t\t\trecordScoreCallback={ recordScore }\n\t\t\ttitle=\"My title\" \n            firstQuestion=\"My first question\"\n            secondQuestion=\"My optional second question\"\n\t\t\tonNoticeShownCallback={ onNoticeShown }\n\t\t\tonNoticeDismissedCallback={ onNoticeDismissed }\n\t\t\tonModalShownCallback={ onModalShown }\n\t\t\ticon={\n\t\t\t\t<span\n\t\t\t\t\tstyle={ { height: 21, width: 21 } }\n\t\t\t\t\trole=\"img\"\n\t\t\t\t\taria-label=\"Pencil icon\"\n\t\t\t\t>\n\t\t\t\t\t✏️\n\t\t\t\t</span>\n\t\t\t}\n        />\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding an Item to Cart using HTTP POST Request\nDESCRIPTION: HTTP endpoint specification for adding an item to the cart. Requires authentication via Nonce Token or Cart Token and accepts product ID, quantity, and variation attributes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_5\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/add-item\n```\n\n----------------------------------------\n\nTITLE: Defining Data and Rendering a D3 Chart Component in React/JSX\nDESCRIPTION: This snippet imports `D3Chart` and `D3Legend` from 'react-d3-chart'. It defines a constant `data` which is an array of objects, each representing a time point and associated values for different items (Hoodie, Sunglasses, Cap). A React functional component `MyChart` is defined, which renders a `D3Chart` component, passing the `data`, a `title` ('Example Chart'), and a `layout` type ('item-comparison') as props. This component requires the 'react-d3-chart' library as a dependency.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/chart/d3chart/example.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { D3Chart, D3Legend } from 'react-d3-chart';\n\nconst data =  [\n\t{\n\t\tdate: '2018-05-30T00:00:00',\n\t\tHoodie: { value: 21599 },\n\t\tSunglasses: { value: 38537 },\n\t\tCap: { value: 106010 },\n\t},\n\t{\n\t\tdate: '2018-05-31T00:00:00',\n\t\tHoodie: { value: 14205 },\n\t\tSunglasses: { value: 24721 },\n\t\tCap: { value: 70131 },\n\t},\n\t{\n\t\tdate: '2018-06-01T00:00:00',\n\t\tHoodie: { value: 10581 },\n\t\tSunglasses: { value: 19991 },\n\t\tCap: { value: 53552 },\n\t},\n\t{\n\t\tdate: '2018-06-02T00:00:00',\n\t\tHoodie: { value: 9250 },\n\t\tSunglasses: { value: 16072 },\n\t\tCap: { value: 47821 },\n\t},\n];\n\nconst MyChart = () => (\n\t<div>\n\t\t<D3Chart data={ data } title=\"Example Chart\" layout=\"item-comparison\" />\n\t</div>\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Manual Action Handlers for Storybook argTypes in TypeScript\nDESCRIPTION: This TypeScript snippet exports a default Storybook story configuration with an argTypes property for manually specifying action handlers for props that do not follow the 'on*' naming pattern. This enables action logging for props like 'myHandler' in the Storybook UI. Dependencies are Storybook and TypeScript. Inputs are handler names; outputs are configured actions that display in the Actions panel. The manual configuration is needed when automatic action detection does not apply.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default {\n\t// ...\n\targTypes: {\n\t\tmyHandler: {\n\t\t\t// <- this doesn't start with `on` so it needs manual config\n\t\t\taction: 'This text will show in the panel along with the data',\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Order Types Using OrderUtil Instead of WordPress Functions\nDESCRIPTION: This code snippet shows how to check if an ID corresponds to an order using WooCommerce's OrderUtil class instead of WordPress post type functions. This is necessary for HPOS compatibility as orders may not be stored as posts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Pattern to check when an ID is an order\n'shop_order' === get_post_type( $post_id ); // or\nin_array( get_post_type( $post_type ), wc_get_order_types() );\n\n// replace with:\nuse Automattic\\WooCommerce\\Utilities\\OrderUtil;\n'shop_order' === OrderUtil::get_order_type( $post_id ); // or\nOrderUtil::is_order( $post_id, wc_get_order_types() );\n```\n\n----------------------------------------\n\nTITLE: Registering Update Callback in PHP for WooCommerce Blocks\nDESCRIPTION: This PHP snippet demonstrates how to register a callback function that will be executed when the cart/extensions endpoint is hit. It uses the woocommerce_store_api_register_update_callback function within the woocommerce_blocks_loaded action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_update_callback(\n    [\n      'namespace' => 'extension-unique-namespace',\n      'callback'  => /* Add your callable here */\n    ]\n  );\n} );\n```\n\n----------------------------------------\n\nTITLE: Verifying Pre-Processing Status in Checkout Store using JavaScript\nDESCRIPTION: Illustrates how to check if the checkout is in the before processing state using the isBeforeProcessing selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isBeforeProcessing = store.isBeforeProcessing();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Placeholders for Email Preview in WooCommerce (PHP)\nDESCRIPTION: This snippet shows how to modify placeholders to be replaced in the email preview. It uses the 'woocommerce_email_preview_placeholders' filter to add a custom placeholder and its value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_placeholders', function( $placeholders ) {\n    // Add custom placeholders\n    $placeholders['{custom_placeholder}'] = 'Custom Value';\n    return $placeholders;\n} );\n```\n\n----------------------------------------\n\nTITLE: Executing Request to Add Cart Coupon (Shell/cURL)\nDESCRIPTION: Provides a sample cURL command to make a POST request to add a coupon ('20off') to the cart. The coupon code is passed as a query parameter `code` to the `/cart/coupons` endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request POST https://example-store.com/wp-json/wc/store/v1/cart/coupons?code=20off\n```\n\n----------------------------------------\n\nTITLE: Conditionally Requiring/Hiding a Field Based on Cart Data in PHP\nDESCRIPTION: Demonstrates defining conditional logic for a WooCommerce checkout field using PHP arrays that represent partial JSON schemas. The 'required' rule makes the field mandatory if `cart.prefers_collection` is true, while the 'hidden' rule hides the field if `cart.prefers_collection` is false. Both rules utilize the `const` JSON schema keyword to check for a specific boolean value within the document object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n'required' => [\n    \"type\" => \"object\",\n\t\"properties\" => [\n\t\t\"cart\" => [\n\t\t\t\"properties\" => [\n\t\t\t\t\"prefers_collection\" => [\n\t\t\t\t\t\"const\" => true\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t]\n],\n'hidden' => [\n\t\"type\" => \"object\",\n\t\"properties\" => [\n\t\t\"cart\" => [\n\t\t\t\"properties\" => [\n\t\t\t\t\"prefers_collection\" => [\n\t\t\t\t\t\"const\" => false\n\t\t\t\t]\n\t\t\t]\n\t\t]\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onPaymentSetup Internally using Hooks in JSX\nDESCRIPTION: Demonstrates how an internal WooCommerce component subscribes to the `onPaymentSetup` event emitter using the `usePaymentEventsContext` hook from '@woocommerce/base-contexts' and the `useEffect` hook from '@wordpress/element'. The effect registers a callback (returning true in this example) and returns an unsubscribe function for cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nimport { usePaymentEventsContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onPaymentSetup } = usePaymentEventsContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( () => true );\n\t\treturn unsubscribe;\n\t}, [ onPaymentSetup ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting Featured Product IDs in PHP\nDESCRIPTION: Returns an array containing the IDs of all featured products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nwc_get_featured_product_ids()\n```\n\n----------------------------------------\n\nTITLE: Updating Order Status in WooCommerce Gateway in PHP\nDESCRIPTION: This code demonstrates how to update an order status and add a note in a WooCommerce payment gateway. It sets the status to 'on-hold' and adds a note about awaiting payment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$order = new WC_Order( $order_id );\n$order->update_status('on-hold', __('Awaiting cheque payment', 'woothemes'));\n```\n\n----------------------------------------\n\nTITLE: Creating a Default CRUD Data Store in JavaScript\nDESCRIPTION: Demonstrates the basic usage of the `createCrudDataStore` function to quickly initialize a data store with default CRUD operations. Requires importing `createCrudDataStore` and providing configuration parameters like `storeName`, `resourceName`, `pluralResourceName`, `namespace`, and an optional `storeConfig` for extensions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { createCrudDataStore } from '../crud';\n\ncreateCrudDataStore( {\n\tstoreName: 'my/custom/store',\n\tresourceName: 'MyThing',\n\tpluralResourceName: 'MyThings',\n\tnamespace: '/my/rest/namespace',\n    storeConfig: {\n        actions: additionalActions,\n        selectors: additionalSelectors,\n        resolvers: additionalResolvers,\n        controls: additionalControls,\n    }\n} );\n```\n```\n\n----------------------------------------\n\nTITLE: Registering Payment Gateway Feature with WooCommerce PHP\nDESCRIPTION: This PHP snippet defines a callback function and registers it with the '__experimental_woocommerce_blocks_payment_gateway_features_list' filter to add a custom feature 'some-feature' to a specific payment gateway ('my-gateway'). It requires WooCommerce version that supports this experimental filter and familiarity with WordPress hooks. The parameters include the current features list and the $gateway object; if the gateway matches 'my-gateway', the function appends a feature. The filter is hooked with priority 10 and expects 2 arguments. The code is intended to be added to a plugin or a theme's functions.php to customize payment gateway behavior in WooCommerce Blocks. Inputs: $features (array), $gateway (object). Output: Modified $features array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/examples/payment-gateways-features-list.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// The action callback function.\nfunction my_function_callback( $features, $gateway ) {\n    if ( 'my-gateway' !== $gateway->id ) {\n\t\t\treturn $features;\n\t\t}\n    $features[] = 'some-feature';\n    return $features;\n}\n\nadd_filter( '__experimental_woocommerce_blocks_payment_gateway_features_list', 'my_function_callback', 10, 2 );\n\n```\n\n----------------------------------------\n\nTITLE: Adding Registered Date Range Filter - WooCommerce React - JavaScript\nDESCRIPTION: This snippet details how to define a 'registered' date filter with rules ('before', 'after', 'between') and use a 'Date' input component in WooCommerce filter configurations. Each rule is given a translation label, emphasizing localization. The setup can be expanded for other temporal fields needing date-based logic. No external dependencies beyond localization functions are required.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/advanced-filters/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n\t...,\n\tfilters: {\n\t\tregistered: {\n\t\t\trules: [\n\t\t\t\t{\n\t\t\t\t\tvalue: 'before',\n\t\t\t\t\tlabel: __( 'Before', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'after',\n\t\t\t\t\tlabel: __( 'After', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tvalue: 'between',\n\t\t\t\t\tlabel: __( 'Between', 'woocommerce' ),\n\t\t\t\t},\n\t\t\t],\n\t\t\tinput: {\n\t\t\t\tcomponent: 'Date',\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Preparing Translations for Mini-Cart Block Inner Blocks in PHP\nDESCRIPTION: This function prepares translations for the inner blocks and dependencies of the Mini-Cart block. It registers scripts for chunks, prints translations, and then deregisters the scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-for-lazy-loaded-components.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function get_inner_blocks_translations() {\n\t$wp_scripts   = wp_scripts();\n\t$translations = array();\n\n\t$chunks        = $this->get_chunks_paths( $this->chunks_folder );\n\t$vendor_chunks = $this->get_chunks_paths( 'vendors--mini-cart-contents-block' );\n\t$shared_chunks = [ 'cart-blocks/cart-line-items--mini-cart-contents-block/products-table-frontend' ];\n\n\tforeach ( array_merge( $chunks, $vendor_chunks, $shared_chunks ) as $chunk ) {\n\t\t$handle = 'wc-blocks-' . $chunk . '-chunk';\n\t\t$this->asset_api->register_script( $handle, $this->asset_api->get_block_asset_build_path( $chunk ), [], true );\n\t\t$translations[] = $wp_scripts->print_translations( $handle, false );\n\t\twp_deregister_script( $handle );\n\t}\n\n\t$translations = array_filter( $translations );\n\n\treturn implode( '', $translations );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Checkout Store which manages the checkout process and user experience in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { checkoutStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Checking Completion Status in Checkout Store with JavaScript\nDESCRIPTION: Illustrates how to determine if the checkout process is complete using the isComplete selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isComplete = store.isComplete();\n```\n\n----------------------------------------\n\nTITLE: Dispatching receiveLastModified Action in JavaScript\nDESCRIPTION: Demonstrates how to dispatch the receiveLastModified action to update the store with the last modified timestamp for collections.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( COLLECTIONS_STORE_KEY );\ndispatch( receiveLastModified( timestamp ) );\n```\n\n----------------------------------------\n\nTITLE: Configuring Varnish Cache Rules for WooCommerce Dynamic Pages\nDESCRIPTION: This Varnish configuration snippet prevents caching of WooCommerce dynamic pages like cart, my-account, and checkout. It also excludes add-to-cart queries from being cached to ensure proper functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/configuring-caching-plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: varnish\nCODE:\n```\nif (req.url ~ \"^/(cart|my-account|checkout|addons)\") {\n  return (pass);\n}\nif ( req.url ~ \"\\\\?add-to-cart=\" ) {\n  return (pass);\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Product Collection with Preview in WooCommerce (TSX)\nDESCRIPTION: This snippet demonstrates how to register a new product collection with an initial preview state. It sets custom attributes for query and display layout, and hides specific controls.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection-with-preview\",\n  title: \"My Custom Collection with Preview\",\n  icon: \"games\",\n  description: \"This is a custom collection with preview.\",\n  keywords: [\"My Custom Collection with Preview\", \"product collection\"],\n  preview: {\n    initialPreviewState: {\n      isPreview: true,\n      previewMessage:\n        \"This is a preview message for my custom collection with preview.\",\n    },\n  },\n  attributes: {\n    query: {\n      perPage: 5,\n      featured: true,\n    },\n    displayLayout: {\n      type: \"grid\",\n      columns: 3,\n      shrinkColumns: true,\n    },\n\thideControls: [ \"created\", \"stock-status\" ]\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Classic Template Block in HTML\nDESCRIPTION: This snippet demonstrates how to use the Classic Template block in HTML with a specific template attribute. The block renders a particular template on the front-end and a placeholder in the Site Editor.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/classic-template/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:woocommerce/legacy-template {\"template\":\"single-product\"} /-->\n```\n\n----------------------------------------\n\nTITLE: Using TableCard for Sortable Analytics Tables in React (JSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the TableCard component with configurable headers, rows, summary data, and additional table preface content including a dismissible Notice in a React application. The TableCard is used to display analytics such as revenue, provides pagination, and supports interactive table actions. It expects props like title, rows, headers, query, summary, rowsPerPage, and handlers for table events. Dependencies include the TableCard component, React (for useState), and optionally the Notice component used in the tablePreface prop. Inputs include arrays for headers, rows, summary, and state for showing the notice. Outputs will be a rendered card with an analytics table and optional prefacing content. Limitations: Must be used within a React app, and the TableCard and Notice components must be available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst headers = [\n\t{ key: 'month', label: 'Month' },\n\t{ key: 'orders', label: 'Orders' },\n\t{ key: 'revenue', label: 'Revenue' },\n];\nconst rows = [\n\t[\n\t\t{ display: 'January', value: 1 },\n\t\t{ display: 10, value: 10 },\n\t\t{ display: '$530.00', value: 530 },\n\t],\n\t[\n\t\t{ display: 'February', value: 2 },\n\t\t{ display: 13, value: 13 },\n\t\t{ display: '$675.00', value: 675 },\n\t],\n\t[\n\t\t{ display: 'March', value: 3 },\n\t\t{ display: 9, value: 9 },\n\t\t{ display: '$460.00', value: 460 },\n\t],\n];\nconst summary = [\n\t{ label: 'Gross Income', value: '$830.00' },\n\t{ label: 'Taxes', value: '$96.32' },\n\t{ label: 'Shipping', value: '$50.00' },\n];\n\nconst [ showNotice, setShowNotice ] = useState( true );\n\n<TableCard\n\ttitle=\"Revenue last week\"\n\trows={ rows }\n\theaders={ headers }\n\tquery={ { page: 2 } }\n\trowsPerPage={ 7 }\n\ttotalRows={ 10 }\n\tsummary={ summary }\n\ttablePreface={\n    showNotice && (\n      <Notice\n        status=\"info\"\n        isDismissible={ true }\n        onRemove={ () => setShowNotice( false ) }\n      >\n        This is an informative notice about the table.\n      </Notice>\n\t\t\t\t)\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Cart and Checkout Filters in WooCommerce with TSX\nDESCRIPTION: This example demonstrates how to combine various WooCommerce filters to customize the order summary. It filters cart item classes, prices, item names, and subtotal price formats based on the context, specifically targeting the order summary context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst isOrderSummaryContext = ( args ) => args?.context === 'summary';\n\nconst modifyCartItemClass = ( defaultValue, extensions, args ) => {\n\tif ( isOrderSummaryContext( args ) ) {\n\t\treturn 'my-custom-class';\n\t}\n\treturn defaultValue;\n};\n\nconst modifyCartItemPrice = ( defaultValue, extensions, args ) => {\n\tif ( isOrderSummaryContext( args ) ) {\n\t\treturn '&lt;price/&gt; for all items';\n\t}\n\treturn defaultValue;\n};\n\nconst modifyItemName = ( defaultValue, extensions, args ) => {\n\tif ( isOrderSummaryContext( args ) ) {\n\t\treturn `${ defaultValue }`;\n\t}\n\treturn defaultValue;\n};\n\nconst modifySubtotalPriceFormat = ( defaultValue, extensions, args ) => {\n\tif ( isOrderSummaryContext( args ) ) {\n\t\treturn '&lt;price/&gt; per item';\n\t}\n\treturn defaultValue;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemClass: modifyCartItemClass,\n\tcartItemPrice: modifyCartItemPrice,\n\titemName: modifyItemName,\n\tsubtotalPriceFormat: modifySubtotalPriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Processing Order and Payment - Bash (cURL)\nDESCRIPTION: Performs a POST request using cURL to submit selected payment method and data, finalizing the order process. The Nonce header is required for authentication. Client applications use this call after user confirmation of billing, shipping, and payment details, relaying all necessary fields to backend for order creation and payment initiation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/checkout?payment_method=paypal&payment_data[0][key]=test-key&payment_data[0][value]=test-value\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving a WC_Payment_Token_CC Object in PHP\nDESCRIPTION: Demonstrates how to create a new WC_Payment_Token_CC object, set its properties, and save it to the database.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$token = new WC_Payment_Token_CC();\n$token->set_token( $token_string );\n$token->set_gateway_id( $this->id );\n$token->set_card_type( 'visa' );\n$token->set_last4( '1234' );\n$token->set_expiry_month( '12' );\n$token->set_expiry_year( '2018' );\n$token->set_user_id( get_current_user_id() );\n$token->save();\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimentalOrderMeta` SlotFill Slot (JavaScript/React)\nDESCRIPTION: An experimental SlotFill slot named `__experimentalOrderMeta`. This allows extensions to inject React components or other content into the order meta section within the Cart and Checkout blocks, enabling customization of displayed order metadata.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// Slot Name:\n__experimentalOrderMeta\n```\n\n----------------------------------------\n\nTITLE: Shape of onCheckoutSuccess Event Data (WooCommerce Checkout Event, JavaScript)\nDESCRIPTION: This snippet defines the structure of data received by observers subscribing to the onCheckoutSuccess event in WooCommerce's block checkout. The object includes redirectUrl, orderId, customerId, orderNotes, and paymentResult (with paymentStatus and paymentDetails). Integrations must handle these keys to perform post-checkout processing, redirects, or error management based on returned server data. This shape ensures interoperability for checkout event observers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst onCheckoutProcessingData = {\n  redirectUrl,\n  orderId,\n  customerId,\n  orderNotes,\n  paymentResult,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Product Attributes in WooCommerce CLI\nDESCRIPTION: Command for creating new product attributes with required name parameter and optional settings like slug, type, sort order, and archive options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_32\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute create\n```\n\n----------------------------------------\n\nTITLE: Modifying Cart Item Price Format in WooCommerce Checkout\nDESCRIPTION: This code snippet demonstrates how to use the cartItemPrice filter to customize the display format of item prices in the order summary, ensuring the required price placeholder is preserved.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemPrice = ( defaultValue, extensions, args, validation ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn '&lt;price/&gt; for all items';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemPrice: modifyCartItemPrice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Data Store in WooCommerce\nDESCRIPTION: Shows how to register a new custom data store using the 'woocommerce_data_stores' filter for use with custom data or new product types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_set_my_custom_data_store( $stores ) {\n\t$stores['mycustomdata'] = 'WC_My_Custom_Data_Store';\n\treturn $stores;\n}\n\nadd_filter( 'woocommerce_data_stores', 'myplugin_set_my_custom_data_store' );\n```\n\n----------------------------------------\n\nTITLE: Dispatching Customer Data Update Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows usage of updatingCustomerData action, which updates customer state to indicate an ongoing data update (such as address updates). The isResolving parameter (boolean) is provided to mark if the customer data is being resolved. The resulting action, when dispatched, affects the store state and can be used to trigger loading indicators.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( updatingCustomerData( isResolving ) );\n```\n\n----------------------------------------\n\nTITLE: Handling Checkout Form Submission in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This snippet shows how to use the 'experimental__woocommerce_blocks-checkout-submit' action hook to log when the checkout form is submitted. This hook does not receive any arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-submit',\n\t'plugin/namespace',\n\t() => {\n\t\tconsole.log( 'The checkout form was submitted.' );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Grouped Product in JavaScript\nDESCRIPTION: This function creates a grouped product for testing purposes. It returns the product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateGroupedProduct()\n```\n\n----------------------------------------\n\nTITLE: Accessing Store API Endpoints (HTTP)\nDESCRIPTION: These examples illustrate the structure of GET requests to access different resources (products and cart) within the WooCommerce Store API. They highlight the required `/wp-json/wc/store/v1/` namespace path. The API uses JSON, so `.json` suffix is not needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /wp-json/wc/store/v1/products\nGET /wp-json/wc/store/v1/cart\n```\n\n----------------------------------------\n\nTITLE: Setting Error Data with setErrorData Action\nDESCRIPTION: Example of using the setErrorData action to update error information in the store. Error data includes code, message, and optional additional data like status and cart information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( setErrorData( newErrorData ) );\n```\n\n----------------------------------------\n\nTITLE: Modifying CSV Template Path for Custom Product Type in WooCommerce\nDESCRIPTION: This PHP snippet shows how to use the woocommerce_product_template_csv_file_path filter to change the CSV template path for a custom product type in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-custom-products-to-add-products-onboarding-list.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_product_template_csv_file_path', function($path) {\n   // Specify your custom template path here\n   return $newPath;\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutSuccess in a Registered Payment Method Component using Props in JSX\nDESCRIPTION: Shows how a registered payment method component subscribes to the `onCheckoutSuccess` event. It receives an `eventRegistration` prop containing the `onCheckoutSuccess` function and uses the `useEffect` hook (from `window.wp.element`) to register a callback, returning an unsubscribe function for cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onCheckoutSuccess } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutSuccess( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutSuccess ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Components in WooCommerce Cart/Checkout using ExperimentalOrderMeta\nDESCRIPTION: This code demonstrates how to use ExperimentalOrderMeta to render a custom component in the Order summary section of Cart and Checkout blocks. It passes cart data, extensions data, and context to the child component and registers the plugin with the WooCommerce checkout scope.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/slot-fills.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { registerPlugin } = wp.plugins;\nconst { ExperimentalOrderMeta } = wc.blocksCheckout;\n\nconst MyCustomComponent = ( { cart, extensions } ) => {\n\treturn <div className=\"my-component\">Hello WooCommerce</div>;\n};\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalOrderMeta>\n\t\t\t<MyCustomComponent />\n\t\t</ExperimentalOrderMeta>\n\t);\n};\n\nregisterPlugin( 'my-plugin-namespace', {\n\trender,\n\tscope: 'woocommerce-checkout',\n} );\n```\n\n----------------------------------------\n\nTITLE: Using ListItem within Sortable Container in React (JSX)\nDESCRIPTION: Illustrates how to use multiple `ListItem` components nested within a `Sortable` parent container. When used inside `Sortable`, the `ListItem` component automatically includes a drag handle, enabling users to reorder the items. This requires the `Sortable` component to be available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/list-item/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Sortable>\n    <ListItem>Item 1 with handle</ListItem>\n    <ListItem>Item 2 with handle</ListItem>\n</Sortable>\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Field Values in WooCommerce Checkout\nDESCRIPTION: Demonstrates how to hook into WooCommerce to save custom field values during checkout. The code handles both address-specific and order-level custom fields using meta data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_set_additional_field_value',\n\tfunction ( $key, $value, $group, $wc_object ) {\n\t\tif ( 'my-plugin-namespace/address-field' !== $key ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( 'billing' === $group ) {\n\t\t\t$my_plugin_address_key = 'existing_billing_address_field_key';\n\t\t} else {\n\t\t\t$my_plugin_address_key = 'existing_shipping_address_field_key';\n\t\t}\n\n\t\t$wc_object->update_meta_data( $my_plugin_address_key, $value, true );\n\t},\n\t10,\n\t4\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Billing Address Edit State\nDESCRIPTION: Demonstrates how to toggle the billing address editing state in the checkout. The address will only collapse if all fields are valid.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( checkoutStore );\nstore.setEditingBillingAddress( true );\n```\n\n----------------------------------------\n\nTITLE: Registering Integration with WooCommerce Blocks\nDESCRIPTION: Code that registers the IntegrationInterface implementation with WooCommerce Blocks using the appropriate action hooks. This enables the integration for Mini-Cart, Cart, and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/integration-interface.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n    'woocommerce_blocks_mini-cart_block_registration',\n    function( $integration_registry ) {\n        $integration_registry->register( new WooCommerce_Example_Plugin_Integration() );\n    }\n);\nadd_action(\n    'woocommerce_blocks_cart_block_registration',\n    function( $integration_registry ) {\n        $integration_registry->register( new WooCommerce_Example_Plugin_Integration() );\n    }\n);\nadd_action(\n    'woocommerce_blocks_checkout_block_registration',\n    function( $integration_registry ) {\n        $integration_registry->register( new WooCommerce_Example_Plugin_Integration() );\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Extending Product Endpoint with ExtendSchema in PHP\nDESCRIPTION: This snippet demonstrates how to extend the WooCommerce Store API product endpoint using ExtendSchema. It adds custom meta data to each product in the response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/available-endpoints-to-extend.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => ProductSchema::IDENTIFIER,\n\t\t'namespace'       => 'my_plugin_namespace',\n\t\t'data_callback'   => function( $product ) {\n\t\t\treturn array(\n\t\t\t\t'my_meta_data' => get_post_meta( $product->get_id(), 'my_meta_data', true ),\n\t\t\t);\n\t\t},\n\t\t'schema_callback' => function() {\n\t\t\treturn array(\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'my_meta_data' => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\t'schema_type'     => ARRAY_A,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering WooCommerce Billing Fields\nDESCRIPTION: Hook that filters the billing fields before they are returned, allowing for customization of billing fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$address_fields = apply_filters( 'woocommerce_billing_fields', $address_fields );\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_blocks_enqueue_checkout_block_scripts_after Hook in PHP\nDESCRIPTION: Fires after checkout block scripts are enqueued. This hook allows developers to perform actions or enqueue additional scripts after the checkout block scripts have been loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_enqueue_checkout_block_scripts_after' )\n```\n\n----------------------------------------\n\nTITLE: Creating a Singleton Pattern for WooCommerce Extension Class\nDESCRIPTION: Implementation of a singleton pattern for a WooCommerce extension's core class. This ensures only one instance of the extension exists in memory and includes proper class encapsulation with protected constructor and prevention of cloning/unserialization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ( ! class_exists( 'My_Extension' ) ) :\n    /**\n     * My Extension core class\n     */\n    class My_Extension {\n        /**\n         * The single instance of the class.\n         */\n        protected static $_instance = null;\n\n        /**\n         * Constructor.\n         */\n        protected function __construct() {\n            // Instantiation logic will go here.\n        }\n\n        /**\n         * Main Extension Instance.\n         * Ensures only one instance of the extension is loaded or can be loaded.\n         */\n        public static function instance() {\n            if ( is_null( self::$_instance ) ) {\n                self::$_instance = new self();\n            }\n\n            return self::$_instance;\n        }\n\n        /**\n         * Cloning is forbidden.\n         */\n        public function __clone() {\n            // Override this PHP function to prevent unwanted copies of your instance.\n            //   Implement your own error or use `wc_doing_it_wrong()`\n        }\n\n        /**\n         * Unserializing instances of this class is forbidden.\n         */\n        public function __wakeup() {\n            // Override this PHP function to prevent unwanted copies of your instance.\n            //   Implement your own error or use `wc_doing_it_wrong()`\n        }\n    }\nendif;\n```\n\n----------------------------------------\n\nTITLE: Displaying WooCommerce Product Custom Fields in PHP\nDESCRIPTION: PHP function that displays a custom field value on single product pages after the short description. The function checks if it's a product page, gets the product object, retrieves the custom field value using get_post_meta(), and displays it if not empty.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/displaying_custom_fields_in_your_theme_or_site.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n// Display a product custom field within single product pages after the short description \n\nfunction woocommerce_custom_field_example() {\n\n    if ( ! is_product() ) {\n        return;\n    }\n   \n    global $product;\n\n    if ( ! is_object( $product ) ) {\n        $product = wc_get_product( get_the_ID() );\n    }\n\n    $custom_field_value = get_post_meta( $product->get_id(), 'woo_custom_field', true );\n    \n    if ( ! empty( $custom_field_value ) ) {\n       echo '&lt;div class=\"custom-field\"&gt;' . esc_html( $custom_field_value ) . '&lt;/div&gt;';\n    }\n}\n\nadd_action( 'woocommerce_before_add_to_cart_form', 'woocommerce_custom_field_example', 10 );\n```\n\n----------------------------------------\n\nTITLE: Setup Requirements for Cart Testing in Markdown\nDESCRIPTION: Lists the prerequisites for testing cart functionality, including individually sold items and products with specific stock threshold configurations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/items.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   You will need an item that is [sold individually](https://docs.woocommerce.com/wp-content/uploads/2016/06/disable-stock-mgmt.png).\n-   You will need a low stock item with a [low threshold quantity](https://docs.woocommerce.com/wp-content/uploads/2016/06/simpleproduct-inventory.png) below the stock quantity.\n-   You will need a low stock item with a [low threshold quantity](https://docs.woocommerce.com/wp-content/uploads/2016/06/simpleproduct-inventory.png) above 0 and a stock quantity below the threshold.\n```\n\n----------------------------------------\n\nTITLE: Modifying Proceed to Checkout Button Link\nDESCRIPTION: This snippet shows how to use the proceedToCheckoutButtonLink filter to change the default link of the 'Proceed to Checkout' button. It verifies cart items exist before applying a custom checkout URL path.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/checkout-and-place-order-button.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyProceedToCheckoutButtonLink = (\n\tdefaultValue,\n\textensions,\n\targs\n) => {\n\tif ( ! args?.cart.items ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn '/custom-checkout';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tproceedToCheckoutButtonLink: modifyProceedToCheckoutButtonLink,\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Settings to WooCommerce Admin Analytics\nDESCRIPTION: Example of how to use the woocommerce_admin_analytics_settings filter to add a custom setting to the WooCommerce analytics. This snippet demonstrates adding a text input setting with a label, help text, and default value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/analytics/settings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\naddFilter( 'woocommerce_admin_analytics_settings', 'wc-example/my-setting', settings => {\n\treturn [\n\t\t...settings,\n\t\t{\n            name: 'custom_setting',\n            label: __( 'Custom setting:', 'woocommerce' ),\n            inputType: 'text',\n            helpText: __( 'Help text to describe what the setting does.' ),\n            defaultValue: 'Default value',\n\t\t},\n\t];\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Shipping Method Plugin Bootstrap in PHP\nDESCRIPTION: Initial plugin setup code that checks for WooCommerce dependencies and registers hooks for the shipping method. Includes checks for required WooCommerce classes and functions, and sets up action/filter hooks to initialize the custom shipping method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * If WooCommerce is active, then these classes and function will exist.\n */\nif ( class_exists( 'woocommerce' ) && class_exists( 'WC_Shipping_Method' ) && function_exists( 'WC' ) ) {\n\t// We add an action to init our shipping method class, and a filter to add our shipping method to the method list.\n\tadd_action( 'woocommerce_shipping_init', 'your_shipping_method_init' );\n\tadd_filter( 'woocommerce_shipping_methods', 'your_shipping_method_add' );\n}\n\n/**\n * Your function to add your shipping method to the shipping method list.\n */\nfunction your_shipping_method_add( $methods ) {\n\t$methods['your_shipping_method'] = 'WC_Your_Shipping_Method';\n\treturn $methods;\n}\n\n/**\n * Your function to init your shipping method class.\n */\nfunction your_shipping_method_init() {\n    // Your class will go here\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Cart Action Hooks Reference Table\nDESCRIPTION: Markdown table documenting WooCommerce cart action hooks, their block compatibility status, and implementation notes for developers migrating to blocks-based architecture.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Old hook                                     | Works in blocks? | Notes                                                                                                                                                                                                                                                                                                                                                                       |\n|----------------------------------------------|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Downloadable Product in JavaScript\nDESCRIPTION: This function creates a simple downloadable product with specified name, download limit, download name, and price.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateSimpleDownloadableProduct(name, downloadLimit, downloadName, price)\n```\n\n----------------------------------------\n\nTITLE: Adding JOIN Clause to WooCommerce Analytics Queries\nDESCRIPTION: PHP function to add a JOIN clause to WooCommerce analytics queries for filtering by currency.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction add_join_subquery( $clauses ) {\n\tglobal $wpdb;\n\n\t$clauses[] = \"JOIN {$wpdb->postmeta} currency_postmeta ON {$wpdb->prefix}wc_order_stats.order_id = currency_postmeta.post_id\";\n\n\treturn $clauses;\n}\n\nadd_filter( 'woocommerce_analytics_clauses_join_orders_subquery', 'add_join_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_join_orders_stats_total', 'add_join_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_join_orders_stats_interval', 'add_join_subquery' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for WooCommerce Extension Class\nDESCRIPTION: Example of a constructor method for a WooCommerce extension class that handles the setup process by loading dependencies and initializing the extension functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function __construct() {\n    $this->includes();\n    $this->init();\n    // You might also include post-setup steps such as showing activation notices here.\n}\n```\n\n----------------------------------------\n\nTITLE: Getting the Active Saved Token\nDESCRIPTION: Example demonstrating how to retrieve the active saved payment token using the getActiveSavedToken selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst activeSavedToken = store.getActiveSavedToken();\n```\n\n----------------------------------------\n\nTITLE: Using SearchListControl Component in React\nDESCRIPTION: Example showing basic implementation of SearchListControl component with required props including list, loading state, selected items, and onChange handler.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/editor-components/search-list-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SearchListControl\n\tlist={ list }\n\tisLoading={ loading }\n\tselected={ selected }\n\tonChange={ ( items ) => setState( { selected: items } ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Modifying Checkout Field Placeholder\nDESCRIPTION: Example of overriding the placeholder text of the order_comments field using the woocommerce_checkout_fields filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    $fields['order']['order_comments']['placeholder'] = 'My new placeholder';\n    return $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Dependencies - PHP\nDESCRIPTION: PHP code to enqueue the necessary script dependencies for custom product collections.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction enqueue_my_custom_product_collection_script() {\n    wp_enqueue_script(\n        'my-custom-product-collection',\n        plugins_url( '/dist/my-custom-product-collection.js', __FILE__ ),\n        array( 'wc-blocks-registry' ),\n        10\n    );\n}\nadd_action( 'enqueue_block_editor_assets', 'enqueue_my_custom_product_collection_script' );\n```\n\n----------------------------------------\n\nTITLE: Using the Card Component in React (JSX)\nDESCRIPTION: Demonstrates how to import and use the `Card` component from `@woocommerce/components` within a React functional component. It shows passing `title` and `description` props and including child content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n/**\n * WooCommerce dependencies\n */\nimport { Card } from '@woocommerce/components';\n\nexport default function MyCard() {\n  return (\n    <Card title=\"Store Performance\" description=\"Key performance metrics\">\n      <p>Your stuff in a Card.</p>\n    </Card>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing SSL Detection Behind Load Balancers in WordPress\nDESCRIPTION: This code snippet fixes SSL detection for websites behind load balancers or reverse proxies by checking the HTTP_X_FORWARDED_PROTO header. It should be added to wp-config.php above the require_once call to ensure WordPress properly recognizes HTTPS connections coming through proxies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/ssl_and_https_and_woocommerce_websites_behind_load_balanacers_or_reverse_proxies.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( isset( $_SERVER['HTTP_X_FORWARDED_PROTO'] ) && 'https' == $_SERVER['HTTP_X_FORWARDED_PROTO'] ) {\n    $_SERVER['HTTPS'] = 'on';\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Product Attribute Term via CLI\nDESCRIPTION: Fetches details for a specific WooCommerce product attribute term using its `id` and the parent `attribute_id`. Optional parameters allow filtering fields (`--fields`, `--field`), controlling response context (`--context`), and specifying output format (`--format`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\nwc product_attribute_term get <attribute_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Applying Coupon to Cart HTTP Endpoint\nDESCRIPTION: HTTP endpoint specification for applying a coupon code to the cart. Requires authentication via Nonce Token or Cart Token and accepts the coupon code to apply.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_15\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/apply-coupon/\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of TextControl Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the fundamental implementation of the `TextControl` component. It shows how to set a visible `label` for the input field, bind its current `value` to a state variable (represented by `value`), and update that state using the `onChange` handler when the user types into the field. This pattern is typical for controlled components in React.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/text-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextControl\n\tlabel=\"Input label\"\n\tvalue={ value }\n\tonChange={ value => setState( { value } ) }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Using EllipsisMenu with Custom Content in React JSX\nDESCRIPTION: This JSX snippet demonstrates how to implement the EllipsisMenu component to create a dropdown menu hidden behind a vertical ellipsis icon. The renderContent prop provides a callback for rendering dynamic menu items such as MenuTitle, MenuItem, and ToggleControl, with interactive state handling and a close button. To function as intended, dependencies include React, EllipsisMenu, MenuTitle, MenuItem, ToggleControl, and Button components, and state management via setState and showCustomers/showOrders variables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/ellipsis-menu/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<EllipsisMenu label=\"Choose which analytics to display\"\n\trenderContent={ ( { onToggle } )=> {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<MenuTitle>Display stats</MenuTitle>\n\t\t\t\t<MenuItem onInvoke={ () => setState( { showCustomers: ! showCustomers } ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel=\"Show Customers\"\n\t\t\t\t\t\tchecked={ showCustomers }\n\t\t\t\t\t\tonChange={ () => setState( { showCustomers: ! showCustomers } ) }\n\t\t\t\t\t/>\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onInvoke={ () => setState( { showOrders: ! showOrders } ) }>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel=\"Show Orders\"\n\t\t\t\t\t\tchecked={ showOrders }\n\t\t\t\t\t\tonChange={ () => setState( { showOrders: ! showOrders } ) }\n\t\t\t\t\t/>\n\t\t\t\t</MenuItem>\n\t\t\t\t<MenuItem onInvoke={ onToggle }>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tlabel=\"Close menu\"\n\t\t\t\t\t\tonClick={ onToggle }\n\t\t\t\t\t>\n\t\t\t\t\tClose Menu\n\t\t\t\t\t</Button>\n\t\t\t\t</MenuItem>\n\t\t\t</div>\n\t\t);\n\t} }\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Product in WooCommerce - Bash\nDESCRIPTION: This command updates a WooCommerce product (here, with ID 123), setting its regular price to 24.99. The 'wp wc product update' CLI operation is utilized, which mandates the product ID and desired update options. WP-CLI, WooCommerce, and valid authentication are prerequisites. Update parameters can be tailored for other fields or products as needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwp wc product update 123 --regular_price=\\\"24.99\\\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Errors from WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to get customer-facing cart errors from the WooCommerce cart store. Returns an array of error objects containing error code, message, and API response data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_29\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst cartErrors = store.getCartErrors();\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutFail from wc.blocksCheckoutEvents (JavaScript)\nDESCRIPTION: This code demonstrates subscribing to the `onCheckoutFail` event using the `wc.blocksCheckoutEvents` global object. The snippet assumes a context where `useEffect` is in scope (e.g., via React), and binds an observer that responds when a checkout failure occurs. Unsubscription is handled by returning the unsubscribe function from the effect. This approach is suitable for subscribing outside the React component tree or from non-WooCommerce extensions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { onCheckoutFail } = wc.blocksCheckoutEvents;\\n\\nuseEffect( () => {\\n  const unsubscribe = onCheckoutFail( () => true );\\n  return unsubscribe;\\n}, [ onCheckoutFail ] );\n```\n\n----------------------------------------\n\nTITLE: Defining an Error Response Object for onPaymentSetup in JavaScript\nDESCRIPTION: Defines the minimal JavaScript object structure for an error response, typically related to user input validation on the checkout form. Returning this shape sets the payment method context status to `ERROR`. Optional properties like `message`, `messageContext`, and `validationErrors` can be included to display error notices, specify notice context, and highlight specific field validation issues.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_11\n\nLANGUAGE: js\nCODE:\n```\nconst errorResponse = { type: 'error' };\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Block Editor Testing Checklist\nDESCRIPTION: Markdown checklist detailing the testing requirements for Cart and Checkout block editor functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/editor.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Editor experience <!-- omit in toc -->\n\n## What to test\n\n-   [ ] You should be able to add one and only one Cart or Checkout block to a page.\n-   [ ] The preview in the inserter should show a skeleton of how the block structure should look like.\n-   [ ] When inserting any of the blocks, it should have some data already in it.\n-   [ ] You should not be able to interact directly with the block (except for some sections).\n-   [ ] You should be able to see block settings on the sidebar when it is focused.\n-   [ ] Proceed to Checkout and Back to cart block settings should present you with a list of your website pages.\n```\n\n----------------------------------------\n\nTITLE: Querying Express Payment Methods in WooCommerce Payment Store\nDESCRIPTION: Example showing how to get available express payment methods from the payment store. Returns an object containing payment method IDs and their names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst availableExpressPaymentMethods =\n\tstore.getAvailableExpressPaymentMethods();\n```\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"payment_request\": {\n        name: \"payment_request\",\n    },\n    \"other_express_method\": {\n        name: \"other_express_method\",\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExperimentalOrderShippingPackages Slot Fill in WooCommerce\nDESCRIPTION: This TypeScript snippet shows how to utilize the ExperimentalOrderShippingPackages slot to add custom content inside the shipping step of Checkout and inside the shipping options in Cart. It registers a plugin with appropriate WooCommerce scope.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-slot-fills.md#2025-04-23_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst { __ } = window.wp.i18n;\nconst { registerPlugin } = window.wp.plugins;\nconst { ExperimentalOrderShippingPackages } = window.wc.blocksCheckout;\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalOrderShippingPackages>\n\t\t\t<div>{ __( 'Express Shipping', 'YOUR-TEXTDOMAIN' ) }</div>\n\t\t</ExperimentalOrderShippingPackages>\n\t);\n};\n\nregisterPlugin( 'slot-and-fill-examples', {\n\trender,\n\tscope: 'woocommerce-checkout',\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Block Editor Field in Vanilla JavaScript\nDESCRIPTION: JavaScript implementation of a basic product form field using vanilla JS and WordPress block editor APIs. Creates a simple 'Hello World' output in the editor.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n( function ( wp ) {\n\tvar el = wp.element.createElement;\n\n\twp.blocks.registerBlockType( 'tutorial/new-product-form-field', {\n\t\ttitle: 'Product form field',\n\t\tattributes: {},\n\t\tedit: function () {\n\t\t\treturn el( 'p', {}, 'Hello World (from the editor).' );\n\t\t},\n\t} );\n} )( window.wp );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Sections to WooCommerce Dashboard in JavaScript\nDESCRIPTION: Example code demonstrating how to hook into 'woocommerce_dashboard_default_sections' filter to add a new custom section to the WooCommerce dashboard. This snippet shows the proper structure for section objects, including required properties like key, component, title, visibility settings, and icon.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/dashboard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { arrowRight } from '@wordpress/icons';\naddFilter( 'woocommerce_dashboard_default_sections', ( sections ) => {\n\treturn [\n\t\t...sections,\n\t\t{\n\t\t\tkey: 'example',\n\t\t\tcomponent: ExampleSection,\n\t\t\ttitle: 'My Example Dashboard Section',\n\t\t\tisVisible: true,\n\t\t\ticon: arrowRight,\n\t\t\thiddenBlocks: [],\n\t\t},\n\t];\n} );\n```\n\n----------------------------------------\n\nTITLE: Validating Related Address Fields using WooCommerce Hook (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to use the `woocommerce_blocks_validate_location_address_fields` action hook to perform validation across multiple fields within the same address location (billing or shipping). It checks if the `namespace/gov-id` field matches the `namespace/confirm-gov-id` field and adds a `WP_Error` if they don't match. This validation occurs during checkout or when updating addresses. Dependencies include WooCommerce Blocks and the presence of the specified custom fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_blocks_validate_location_address_fields',\n\tfunction ( \\WP_Error $errors, $fields, $group ) {\n\t\tif ( $fields['namespace/gov-id'] !== $fields['namespace/confirm-gov-id'] ) {\n\t\t\t$errors->add( 'gov_id_mismatch', 'Please ensure your government ID matches the confirmation.' );\n\t\t}\n\t},\n\t10,\n\t3\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Hooks for Variable Products in WooCommerce\nDESCRIPTION: This PHP snippet demonstrates how to add action hooks for handling variable products in WooCommerce. It includes hooks for adding and saving fields for both simple products and variations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nprivate function hooks() {\n\tadd_action( 'woocommerce_product_options_inventory_product_data', array( $this, 'add_field' ) );\n\tadd_action( 'woocommerce_process_product_meta', array( $this, 'save_field' ), 10, 2 );\n\n\tadd_action( 'woocommerce_variation_options_inventory', array( $this, 'add_variation_field' ), 10, 3 );\n\tadd_action( 'woocommerce_save_product_variation', array( $this, 'save_variation_field' ), 10, 2 );\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Shipping Address Change in WooCommerce Blocks Checkout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'experimental__woocommerce_blocks-checkout-set-shipping-address' action hook to log when the shipping address is changed on the checkout page. This hook does not receive any arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-set-shipping-address',\n\t'plugin/namespace',\n\t() => {\n\t\tconsole.log( 'The shipping address was changed.' );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Static Select Control Filter Options - WooCommerce React - JavaScript\nDESCRIPTION: This snippet shows how to configure a SelectControl filter input for a 'fruit' filter using static option arrays in WooCommerce. Each option includes a label and key, and the component is referenced in the input configuration structure. No external dependencies are required, and options should conform to the specified array shape with label and key properties. The pattern is easily extensible for other static select-type filters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/advanced-filters/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst config = {\n\t...,\n\tfilters: {\n\t\tfruit: {\n\t\t\tinput: {\n\t\t\t\tcomponent: 'SelectControl',\n\t\t\t\toptions: [\n\t\t\t\t\t{ label: 'Apples', key: 'apples' },\n\t\t\t\t\t{ label: 'Oranges', key: 'oranges' },\n\t\t\t\t\t{ label: 'Bananas', key: 'bananas' },\n\t\t\t\t\t{ label: 'Cherries', key: 'cherries' },\n\t\t\t\t],\n\t\t\t},\n\t\t},\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Basic WooCommerce Theme Support Declaration\nDESCRIPTION: Simple implementation of adding WooCommerce support to a WordPress theme.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction mytheme_add_woocommerce_support() {\n    add_theme_support( 'woocommerce' );\n}\n\nadd_action( 'after_setup_theme', 'mytheme_add_woocommerce_support' );\n```\n\n----------------------------------------\n\nTITLE: Modifying Currency Symbols in WooCommerce with PHP\nDESCRIPTION: This PHP function hooks into WooCommerce's currency symbol filter to change the symbol for specific currencies. The example changes the Australian dollar symbol from '$' to 'AUD$', but can be expanded to modify any currency symbol by adding more cases to the switch statement.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/change-a-currency-symbol.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_change_currency_symbol' ) ) {\n  /**\n   * Change a currency symbol\n   * \n   * @param string $currency_symbol Existing currency symbols.\n   * @param string $currency Currency code.\n   * @return string $currency_symbol Updated currency symbol(s).\n   */  \n  function YOUR_PREFIX_change_currency_symbol( $currency_symbol, $currency ) {\n    switch ( $currency ) {\n      case 'AUD': $currency_symbol = 'AUD$'; break;\n    }\n\n    return $currency_symbol;       \n  }\n  add_filter( 'woocommerce_currency_symbol', 'YOUR_PREFIX_change_currency_symbol', 10, 2 );  \n}\n```\n\n----------------------------------------\n\nTITLE: Extending Checkout Endpoint with ExtendSchema in PHP\nDESCRIPTION: This snippet demonstrates how to extend the WooCommerce Store API checkout endpoint using ExtendSchema. It adds a custom key-value pair to the checkout data in the response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/available-endpoints-to-extend.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => CheckoutSchema::IDENTIFIER,\n\t\t'namespace'       => 'my_plugin_namespace',\n\t\t'data_callback'   => function() {\n\t\t\treturn array(\n\t\t\t\t'foo' => 'bar',\n\t\t\t);\n\t\t},\n\t\t'schema_callback' => function() {\n\t\t\treturn array(\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'foo' => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\t'schema_type'     => ARRAY_A,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Data in JavaScript Client\nDESCRIPTION: Shows how to retrieve static data on the client side that was previously added to the AssetDataRegistry. It uses the wc.wcSettings.getSetting method to access the data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/overview-of-data-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst myCustomValue = wc.wcSettings.getSetting(\n\t'namespace/value',\n\t'Fallback value.'\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Gallery Thumbnail Size in PHP using WooCommerce Filter\nDESCRIPTION: This snippet shows how to use the 'woocommerce_get_image_size_gallery_thumbnail' filter to change the dimensions and cropping of gallery thumbnail images. It sets the size to 150x150 pixels without cropping.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/image-sizes.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_get_image_size_gallery_thumbnail', function( $size ) {\n    return array(\n        'width' => 150,\n        'height' => 150,\n        'crop' => 0,\n    );\n} );\n```\n\n----------------------------------------\n\nTITLE: Using DateTimePickerControl in React JSX\nDESCRIPTION: This snippet shows how to render the DateTimePickerControl component, enabling users to pick a date and time through a graphical picker or manual entry. It sets a custom date format and defines the onChange handler, which receives the selected date string and logs it to the console. Requires React and the DateTimePickerControl component, with key props such as dateFormat and onChange; outputs selected date in the specified format, and expects functions like onChange for interaction.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/date-time-picker-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\\n<DateTimePickerControl\\n\\tonChange={ ( date ) => console.log( date ) }\\n\\tdateFormat=\\\"DD-MM-YYYY H:MM\\\"\\n/>\\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Data from WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to select and retrieve the complete cart data from the WooCommerce cart store. Returns an object containing information about coupons, shipping rates, addresses, items, totals, errors, and more.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_22\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst cartData = store.getCartData();\n```\n\n----------------------------------------\n\nTITLE: Checking for Errors in Checkout Store with JavaScript\nDESCRIPTION: Illustrates how to determine if an error occurred during the checkout process using the hasError selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst hasError = store.hasError();\n```\n\n----------------------------------------\n\nTITLE: Get Single Product Category Endpoint\nDESCRIPTION: HTTP GET endpoint to retrieve a single product category by ID. Returns a category object containing details like ID, name, slug, description, parent, count, image data, review count and permalink.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-categories.md#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nGET /products/categories/:id\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/categories/1\"\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 1,\n\t\"name\": \"Decor\",\n\t\"slug\": \"decor\",\n\t\"description\": \"\",\n\t\"parent\": 0,\n\t\"count\": 1,\n\t\"image\": null,\n\t\"review_count\": 1,\n\t\"permalink\": \"https://store.local/product-category/decor/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Pending Deletion Update Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates using the itemIsPendingDelete action to mark a cart item as being deleted in WooCommerce's cartStore Redux state. Accepts cartItemKey (string) and isPending (boolean, default: true), signaling to the UI and store logic that a removal operation is in progress for the specified item.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( itemIsPendingDelete( cartItemKey, isPending ) );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Store API Endpoint Data via Callback in WooCommerce (PHP)\nDESCRIPTION: This PHP snippet registers two additional schemas for the Store API checkout route by calling woocommerce_store_api_register_endpoint_data with custom endpoints and schema_callback anonymous functions. It is intended to be added to functions.php or a main plugin file. Dependencies include WooCommerce Blocks plugin and proper namespace usage. The key parameters are 'endpoint' for the schema identifier, 'namespace' for custom separation, and 'schema_callback' which returns the schema array. These schemas enable custom extension data fields for the checkout API; appropriate extension data must then be provided by the client to pass validation. Inputs: configuration arrays specifying schema. Outputs: registers new schema fields for order checkout. The behavior allows validation errors to correctly indicate which custom extension's data structure is invalid.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1160.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => \\Automattic\\WooCommerce\\StoreApi\\Schemas\\V1\\CheckoutSchema::IDENTIFIER,\n\t\t'namespace'       => 'my-extension-test',\n\t\t'schema_callback' => function () {\n\t\t\treturn [\n\t\t\t\t'my_field' => array(\n\t\t\t\t\t'description' => 'test 1',\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t'default'     => '',\n\t\t\t\t)\n\t\t\t];\n\t\t},\n\t)\n);\n\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => \\Automattic\\WooCommerce\\StoreApi\\Schemas\\V1\\CheckoutSchema::IDENTIFIER,\n\t\t'namespace'       => 'my-extension-test-2',\n\t\t'schema_callback' => function () {\n\t\t\treturn [\n\t\t\t\t'my_field' => array(\n\t\t\t\t\t'description' => 'test 2',\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t'required'    => true,\n\t\t\t\t)\n\t\t\t];\n\t\t},\n\t)\n);\n\n```\n\n----------------------------------------\n\nTITLE: Importing Payment Method Registry using ES6 Import\nDESCRIPTION: Demonstrates how to import the registerPaymentMethod function using ES6 module imports with the @woocommerce/blocks-registry package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPaymentMethod } from '@woocommerce/blocks-registry';\n```\n\n----------------------------------------\n\nTITLE: Individual Use Coupon Filter\nDESCRIPTION: Filter for controlling which coupons should be removed when applying an individual use coupon.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_apply_individual_use_coupon', array $coupons, \\WC_Coupon $coupon, array $applied_coupons )\n```\n\n----------------------------------------\n\nTITLE: Creating Variable Product in JavaScript\nDESCRIPTION: This function creates a variable product for testing purposes. It returns the product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateVariableProduct()\n```\n\n----------------------------------------\n\nTITLE: Passing Objects in PHP Filters for WooCommerce\nDESCRIPTION: Illustrates the preferred approach of passing complete objects rather than just IDs in WooCommerce filters. This provides more context and flexibility for developers using the filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction get_featured_product_for_current_customer( ) {\n    /* ...Logic to find the featured product for this customer... */\n\n    return apply_filters( \n        'woocommerce_featured_product_for_current_customer', \n        $product, /* WC_Product */\n        $customer \n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Payment Processing Hook in JavaScript\nDESCRIPTION: Code snippet showing the function signature for usePaymentProcessing hook with added eventRegistration parameter for payment processing in WooCommerce Stripe gateway.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nusePaymentProcessing(\n\tonStripeError,\n\terror,\n\tstripe,\n\tbilling,\n\temitResponse,\n\tsourceId,\n\tsetSourceId,\n\tonPaymentSetup,\n\teventRegistration\n);\n```\n\n----------------------------------------\n\nTITLE: Removing WooCommerce Checkout Fields for All Countries\nDESCRIPTION: This code demonstrates how to remove specific checkout fields (address, postcode, city, state) for all countries that a store sells to. It loops through all countries in the locale and applies the same field visibility settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_get_country_locale', function( $locale ) {\n\tforeach ( $locale as $key => $value ) {\n\t\t$locale[ $key ]['address_1'] = [\n\t\t\t'required' => false,\n\t\t\t'hidden'   => true,\n\t\t];\n\n\t\t$locale[ $key ]['postcode'] = [\n\t\t\t'required' => false,\n\t\t\t'hidden'   => true,\n\t\t];\n\n\t\t$locale[ $key ]['city'] = [\n\t\t\t'required' => false,\n\t\t\t'hidden'   => true,\n\t\t];\n\n\t\t$locale[ $key ]['state'] = [\n\t\t\t'required' => false,\n\t\t\t'hidden'   => true,\n\t\t];\n\t}\n\n\treturn $locale;\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting All Cart Items - HTTP DELETE Request\nDESCRIPTION: API endpoint for removing all items from the cart at once. No additional parameters required.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE /cart/items/\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request DELETE https://example-store.com/wp-json/wc/store/v1/cart/items\n```\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Displaying WooCommerce Dashboard Charts Table\nDESCRIPTION: Markdown table listing available charts in the dashboard section, including chart names, descriptions, and their corresponding report references.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/analytics-dashboard.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Chart Name  | Description  | Links To ( Report Name > Chart Name ) |\n|---|---|---|\n| Total sales | Gross sales - Returns - Coupons + Taxes + Shipping | Revenue Report > Total sales | \n| Net sales | Gross sales - Returns - Coupons | Revenue Report > Net sales |\n| Orders | The number of new orders placed for a selected date range | Orders Report > Orders |\n```\n\n----------------------------------------\n\nTITLE: Checking Block Area for Inner Block Support (JavaScript)\nDESCRIPTION: Demonstrates checking if a given checkout block/area supports inner block registration using WooCommerce's 'hasInnerBlocks' JS API. Returns true if the specified parent block can contain inner blocks, otherwise false. Especially useful for dynamic plugins/extensions wishing to add custom blocks programmatically.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { hasInnerBlocks } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { hasInnerBlocks } = wc.blocksCheckout;\n\nconst isValid = hasInnerBlocks( 'woocommerce/checkout-totals-block' ); // true\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding a Block in Product Editor Templates in PHP\nDESCRIPTION: This snippet shows how to conditionally hide a block in product editor templates. It adds a hide condition to the sale price block if the regular price is less than 10.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/Features/ProductBlockEditor/ProductTemplates/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n\n// hide sale price block if regular_price is less than 10\nfunction YOUR_PREFIX_hide_block( BlockInterface $sale_price_block ) {\n  $sale_price_block->add_hide_condition( 'editedProduct.regular_price < 10' );\n}\n\nadd_action( 'woocommerce_block_template_area_product-form_after_add_block_product-sale-price', 'YOUR_PREFIX_hide_block' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Step Progress with Stepper Component in React (JSX)\nDESCRIPTION: This snippet demonstrates usage of a React Stepper component to visualize progress across multiple steps. It details the definition of an array of step objects, specifying keys, labels, descriptions, and associated content, and shows how to render the Stepper with props such as 'steps', 'currentStep', and 'isPending' to control its state and display. Dependencies include React and the Stepper component; the 'steps' array must follow a prescribed object schema, with 'currentStep' indicating the active step and 'isPending' showing loading feedback. Expected input includes well-formed steps and a matching 'currentStep' key; output is a visual stepper reflecting this configuration. Only steps defined in the array are shown, and all keys must be unique.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/stepper/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst steps = [\n\t{\n\t\tkey: 'first',\n\t\tlabel: 'First',\n\t\tdescription: 'Step item description',\n\t\tcontent: <div>First step content.</div>,\n\t},\n\t{\n\t\tkey: 'second',\n\t\tlabel: 'Second',\n\t\tdescription: 'Step item description',\n\t\tcontent: <div>Second step content.</div>,\n\t},\n];\n\n<Stepper\n\tsteps={ steps }\n\tcurrentStep=\"first\"\n\tisPending={ true }\n/>\n```\n\n----------------------------------------\n\nTITLE: Converting WordPress Metadata Operations to WooCommerce Order API\nDESCRIPTION: This code snippet demonstrates how to replace direct WordPress metadata operations with WooCommerce's order API. Instead of using update_post_meta(), add_post_meta(), and delete_post_meta(), use the equivalent methods on the WC_Order object with a save() call.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Instead of following update/add/delete methods, use:\nupdate_post_meta( $post_id, $meta_key_1, $meta_value_1 );\nadd_post_meta( $post_id, $meta_key_2, $meta_value_2 );\ndelete_post_meta( $post_id, $meta_key_3, $meta_value_3 );\n\n// use\n$order = wc_get_order( $post_id );\n$order->update_meta_data( $meta_key_1, $meta_value_1 );\n$order->add_meta_data( $meta_key_2, $meta_value_2 );\n$order->delete_meta_data( $meta_key_3, $meta_value_3 );\n$order->save();\n```\n\n----------------------------------------\n\nTITLE: Managing Product Tags via WooCommerce CLI\nDESCRIPTION: Commands for managing product tags including listing, creating, retrieving, updating and deleting tags. Each command supports various parameters for filtering, pagination, and output formatting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_51\n\nLANGUAGE: cli\nCODE:\n```\nwc product_tag list\nwc product_tag create\nwc product_tag get [id]\nwc product_tag update [id]\nwc product_tag delete [id]\n```\n\n----------------------------------------\n\nTITLE: Importing registerPaymentMethodExtensionCallbacks with aliased import in JavaScript\nDESCRIPTION: Shows how to import the registerPaymentMethodExtensionCallbacks function using the aliased import approach from the @woocommerce/blocks-registry package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/filtering-payment-methods.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { registerPaymentMethodExtensionCallbacks } from '@woocommerce/blocks-registry';\n```\n\n----------------------------------------\n\nTITLE: Checking Available Payment Methods in TypeScript\nDESCRIPTION: The 'checkPaymentMethodsCanPay()' function iterates through all registered payment methods, checks if they can be used for payment, and adds eligible methods to the 'availablePaymentMethods' property in the payment data store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Returning a Failed Payment Response Object (WooCommerce JavaScript)\nDESCRIPTION: This snippet specifies how to construct a fail response object in WooCommerce block-based payment integrations. By returning an object with type 'failure', the payment context status is updated accordingly. Optional properties such as message, messageContext, paymentMethodData, and billingAddress can be included for additional error handling or user feedback. This shape is necessary for integrations to convey payment rejections or errors in processing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nconst failResponse = { type: 'failure' };\n```\n\n----------------------------------------\n\nTITLE: Updating Cart via Extension in TypeScript\nDESCRIPTION: Demonstrates how to use the extensionCartUpdate function to update the cart through the cart/extensions REST API endpoint. This function returns a promise that resolves when the cart is updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Aliased import\nimport { extensionCartUpdate } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { extensionCartUpdate } = wc.blocksCheckout;\n\nextensionCartUpdate( {\n\tnamespace: 'extension-unique-namespace',\n\tdata: {\n\t\tkey: 'value',\n\t},\n} ).then( () => {\n\t// Cart has been updated.\n} ).catch( ( error ) => {\n\t// Handle error.\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing the Cart Store Descriptor in JavaScript\nDESCRIPTION: Example of how to import the cartStore StoreDescriptor from the WooCommerce Blocks Data package. This is the initial step required to interact with the Cart Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { cartStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Getting a Validation Error in JavaScript\nDESCRIPTION: Example showing how to retrieve a specific validation error using the getValidationError selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( validationStore );\nconst billingFirstNameError = store.getValidationError( 'billing-first-name' );\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox is Unset in JavaScript\nDESCRIPTION: This function verifies that a checkbox is unchecked. It takes the selector of the checkbox as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyCheckboxIsUnset(selector)\n```\n\n----------------------------------------\n\nTITLE: Updating Cart with extensionCartUpdate in TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the extensionCartUpdate function on the client-side to trigger a cart update. It includes error handling using the processErrorResponse function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { extensionCartUpdate } = wc.blocksCheckout;\nconst { processErrorResponse } = wc.wcBlocksData;\n\nextensionCartUpdate( {\n\tnamespace: 'extension-unique-namespace',\n\tdata: {\n\t\tkey: 'value',\n\t\tanother_key: 100,\n\t\tthird_key: {\n\t\t\tfourth_key: true,\n\t\t},\n\t},\n} ).then( () => {\n\t// Cart has been updated.\n} ).catch( ( error ) => {\n\t// Handle error.\n\tprocessErrorResponse(error);\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding a Log Entry in PHP with WooCommerce Logger\nDESCRIPTION: This snippet demonstrates how to add a log entry using the WooCommerce logger. It includes specifying the log level, message, and context with various details like source, backtrace, and custom data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwc_get_logger()->info(\n    'It is time for lunch.',\n    array(\n        'source'        => 'your_stomach',\n        'backtrace'     => true,\n        'previous_meal' => $elapsed_time_since_breakfast,\n        'lunch_options' => array( 'fridge leftovers', 'bahn mi', 'tacos', 'pupusas' ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Removing WooCommerce Default Email Notifications in PHP\nDESCRIPTION: This function unhooks all default WooCommerce email notifications by removing action hooks. It prevents emails from being sent for stock statuses, order status changes, and customer notes. The function needs to be called with the 'woocommerce_email' action hook and should be prefixed with your own identifier to avoid conflicts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/unhook--remove-woocommerce-emails.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_unhook_woocommerce_emails' ) ) {\n\t/**\n\t * Callback for woocommerce_email action hook\n\t *\n\t * @param WC_Email $email_class An Email class instance.\n\t * @return void\n\t */\n\tfunction YOUR_PREFIX_unhook_woocommerce_emails( $email_class ) {\n\t\t/**\n\t\t * Hooks for sending emails during store events.\n\t\t */\n\t\tremove_action( 'woocommerce_low_stock_notification', array( $email_class, 'low_stock' ) );\n\t\tremove_action( 'woocommerce_no_stock_notification', array( $email_class, 'no_stock' ) );\n\t\tremove_action( 'woocommerce_product_on_backorder_notification', array( $email_class, 'backorder' ) );\n\n\t\t// New order emails.\n\t\tremove_action( 'woocommerce_order_status_pending_to_processing_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_pending_to_completed_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_pending_to_on-hold_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_failed_to_processing_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_failed_to_completed_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_failed_to_on-hold_notification', array( $email_class->emails['WC_Email_New_Order'], 'trigger' ) );\n\n\t\t// Processing order emails.\n\t\tremove_action( 'woocommerce_order_status_pending_to_processing_notification', array( $email_class->emails['WC_Email_Customer_Processing_Order'], 'trigger' ) );\n\t\tremove_action( 'woocommerce_order_status_pending_to_on-hold_notification', array( $email_class->emails['WC_Email_Customer_On_Hold_Order'], 'trigger' ) );\n\n\t\t// Completed order emails.\n\t\tremove_action( 'woocommerce_order_status_completed_notification', array( $email_class->emails['WC_Email_Customer_Completed_Order'], 'trigger' ) );\n\n\t\t// Note emails.\n\t\tremove_action( 'woocommerce_new_customer_note_notification', array( $email_class->emails['WC_Email_Customer_Note'], 'trigger' ) );\n\t}\n}\nadd_action( 'woocommerce_email', 'YOUR_PREFIX_unhook_woocommerce_emails' );\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_add_to_cart Action Hook in PHP\nDESCRIPTION: This hook fires when an item is added to the cart. It's triggered from the Store API but also by WooCommerce core add to cart events, providing access to cart item details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_add_to_cart', string $cart_id, integer $product_id, integer $request_quantity, integer $variation_id, array $variation, array $cart_item_data )\n```\n\n----------------------------------------\n\nTITLE: Handling Billing Address Change in WooCommerce Blocks Checkout (JavaScript)\nDESCRIPTION: This snippet shows how to use the 'experimental__woocommerce_blocks-checkout-set-billing-address' action hook to log when the billing address is changed on the checkout page. This hook does not receive any arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-set-billing-address',\n\t'plugin/namespace',\n\t() => {\n\t\tconsole.log( 'The billing address was changed.' );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Cart Item Class with Basic Filter\nDESCRIPTION: Basic implementation of cartItemClass filter to add a custom class to cart items. Only applies in cart context and adds 'my-custom-class' to items.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemClass = ( defaultValue, extensions, args ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn 'my-custom-class';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemClass: modifyCartItemClass,\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing the Slot Component for WooProductMoreMenuItem in React JSX\nDESCRIPTION: Example showing how to implement the Slot component with the WordPress MoreMenuDropdown. This code demonstrates how to render all fills in the WooProductMoreMenuItem slot while passing additional properties to the fills.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/header/woo-more-menu-item/Readme.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { MoreMenuDropdown } from '@wordpress/interface';\nexport { __experimentalWooProductMoreMenuItem as WooProductMoreMenuItem } from '@woocommerce/product-editor';\n\nexport const MoreMenu = () => {\n    return (\n        <MoreMenuDropdown\n            toggleProps={ { onClick: () => console.log( 'Menu opened' ) } }\n            popoverProps={ { className: 'woocommerce-product-header__more-menu' } }\n        >\n            { ( { onClose } ) => (\n                <WooProductMoreMenuItem.Slot fillProps={ { onClose } } />\n            ) }\n        </MoreMenuDropdown>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Order with API in JavaScript\nDESCRIPTION: This function creates an order using the API with the passed in details. It takes an object containing order options as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_42\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateOrder(orderOptions)\n```\n\n----------------------------------------\n\nTITLE: Implementing Edit State in WooCommerce Products by Category Block\nDESCRIPTION: This code snippet shows how to implement an 'edit state' in a Gutenberg block, specifically for the Products by Category block. It demonstrates the logic for switching between different edit states.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ngetInspectorControls() {\n\tconst { editMode } = this.state;\n\n\tif ( editMode ) {\n\t\treturn this.getSearchResultsInspectorControls();\n\t}\n\n\treturn this.getProductCategoryControls();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Checkout Endpoints\nDESCRIPTION: Lists the URL endpoints used for checkout-related functionality in WooCommerce, including payment processing, order confirmation, and payment method management. These endpoints are appended to the base checkout page URL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/woocommerce-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   Pay page - `/order-pay/{ORDER_ID}`\n-   Order received (thanks) - `/order-received/`\n-   Add payment method - `/add-payment-method/`\n-   Delete payment method - `/delete-payment-method/`\n-   Set default payment method - `/set-default-payment-method/`\n```\n\n----------------------------------------\n\nTITLE: Using the Date Component in React (JSX)\nDESCRIPTION: This snippet demonstrates the basic usage of the `Date` component in JSX. It shows how to render the component by passing a date string ('2019-01-01') to the required `date` prop. The component will then display this date according to its default or specified format props (`machineFormat`, `screenReaderFormat`, `visibleFormat`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/date/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Date date=\"2019-01-01\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom WooCommerce Admin Note Provider Class in PHP\nDESCRIPTION: This PHP snippet demonstrates a complete example of creating a custom WooCommerce Admin Note provider. It defines a class `ExampleNote` that utilizes the `Note` and `NoteTraits` from WooCommerce Admin to configure and manage an admin note. The example includes setting the note's title, content, type, layout, source, name, and actions. It also shows how to hook into WordPress activation and deactivation to add or remove the note using methods provided by `NoteTraits`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Simple note provider\n *\n * Adds a note with a timestamp showing when the note was added.\n */\n \nnamespace My\\Wonderfully\\Namespaced\\Extension\\Area;\n \n// Exit if this code is accessed outside of WordPress.\ndefined ( 'ABSPATH' ) || exit;\n \n// Check for Admin Note support\nif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes' ) ||\n     ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\NoteTraits' )) {\n    return;\n}\n \n// Make sure the WooCommerce Data Store is available\nif ( ! class_exists( 'WC_Data_Store' ) ) {\n    return;\n}\n \n \n/**\n * Example note class.\n */\nclass ExampleNote {\n \n    // Use the Note class to create Admin Note objects\n    use Automatic\\WooCommerce\\Admin\\Notes\\Note;\n \n    // Use the NoteTraits trait, which handles common note operations.\n    use Automatic\\WooCommerce\\Admin\\Notes\\NoteTraits;\n \n    // Provide a note name.\n    const NOTE_NAME = 'my-prefix-example-note';\n \n    public static function get_note() {\n    // Our welcome note will include information about when the extension\n    // was activated.  This is just for demonstration. You might include\n    // other logic here depending on what data your note should contain.\n        $activated_time = current_time( 'timestamp', 0 );\n        $activated_time_formatted = date( 'F jS', $activated_time );\n \n        // Instantiate a new Note object\n        $note = new Automattic\\WooCommerce\\Admin\\Notes\\Note();\n \n        // Set our note's title.\n        $note->set_title( 'Getting Started' );\n \n        // Set our note's content.\n        $note->set_content(\n            sprintf(\n                'Extension activated on %s.', $activated_time_formatted\n            )\n        );\n \n        // In addition to content, notes also support structured content.\n        // You can use this property to re-localize notes on the fly, but\n        // that is just one use. You can store other data here too. This\n        // is backed by a longtext column in the database.\n        $note->set_content_data( (object) array(\n            'getting_started'       => true,\n            'activated'             => $activated_time,\n            'activated_formatted'   => $activated_time_formatted\n        ) );\n \n        // Set the type of the note. Note types are defined as enum-style\n        // constants in the Note class. Available note types are:\n        // error, warning, update, info, marketing.\n        $note->set_type( Note::E_WC_ADMIN_NOTE_INFORMATIONAL );\n \n        // Set the type of layout the note uses. Supported layout types are:\n        // 'plain', 'thumbnail'\n        $note->set_layout( 'plain' );\n \n        // Set the image for the note. This property renders as the src\n        // attribute for an img tag, so use a string here.\n        $note->set_image( '' );\n \n \n        // Set the note name and source.  You should store your extension's\n        //   name (slug) in the source property of the note.  You can use\n        //   the name property of the note to support multiple sub-types of\n        //   notes.  This also gives you a handy way of namespacing your notes.\n        $note->set_source( 'inbox-note-example');\n        $note->set_name( self::NOTE_NAME );\n \n        // Add action buttons to the note.  A note can support 0, 1, or 2 actions.\n        //   The first parameter is the action name, which can be used for event handling.\n        //   The second parameter renders as the label for the button.\n        //   The third parameter is an optional URL for actions that require navigation.\n        $note->add_action(\n            'settings', 'Open Settings', '?page=wc-settings&tab=general'\n        );\n        $note->add_action(\n            'learn_more', 'Learn More', 'https://example.com'\n        );\n \n        return $note;\n    }\n}\n \nfunction my_great_extension_activate() {\n    // This uses the functionality from the NoteTraits trait to conditionally add your note if it passes all of the appropriate checks.\n    ExampleNote::possibly_add_note();\n}\nregister_activation_hook( __FILE__, 'my_great_extension_activate' );\n \nfunction my_great_extension_deactivate() {\n    // This uses the functionality from the NoteTraits trait to conditionally remove your note if it passes all of the appropriate checks.\n    ExampleNote::possibly_delete_note();\n}\nregister_deactivation_hook( __FILE__, 'my_great_extension_deactivate' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Formatters from ExtendSchema in WooCommerce Store API\nDESCRIPTION: Demonstrates how to get specific formatters using the get_formatter method of the ExtendSchema class to format values like money, HTML, or currency information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nget_formatter('money'); // For the MoneyFormatter\nget_formatter('html'); // For the HtmlFormatter\nget_formatter('currency'); // CurrencyFormatter\n```\n\n----------------------------------------\n\nTITLE: Basic Fill Component Usage for WooProductMoreMenuItem in React JSX\nDESCRIPTION: Simple example demonstrating how to use the WooProductMoreMenuItem as a Fill component to add a custom menu item. The order property is set to 2 to position this item in the menu sequence.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/header/woo-more-menu-item/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nexport { __experimentalWooProductMoreMenuItem as WooProductMoreMenuItem } from '@woocommerce/product-editor';\n\nconst CustomMenuItem = () => (\n    <WooProductMoreMenuItem order={ 2 }>\n        <div>My Custom Menu Item</div>\n    </WooProductMoreMenuItem>\n);\n```\n\n----------------------------------------\n\nTITLE: Using the SummaryList Component with SummaryNumber Children in JSX\nDESCRIPTION: This snippet demonstrates how to implement the `SummaryList` component. It requires a function as its child, which should return an array of `SummaryNumber` components. Each `SummaryNumber` displays a specific metric (e.g., total sales, refunds) with its value, label, change delta, and an optional link (`href`). The `selected` prop highlights a specific `SummaryNumber`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/summary/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SummaryList>\n\t{ () => {\n\t\treturn [\n\t\t\t<SummaryNumber\n\t\t\t\tkey=\"revenue\"\n\t\t\t\tvalue={ '$829.40' }\n\t\t\t\tlabel=\"Total sales\"\n\t\t\t\tdelta={ 29 }\n\t\t\t\thref=\"/analytics/report\"\n\t\t\t>\n\t\t\t\t<span>27 orders</span>\n\t\t\t</SummaryNumber>,\n\t\t\t<SummaryNumber\n\t\t\t\tkey=\"refunds\"\n\t\t\t\tvalue={ '$24.00' }\n\t\t\t\tlabel=\"Refunds\"\n\t\t\t\tdelta={ -10 }\n\t\t\t\thref=\"/analytics/report\"\n\t\t\t\tselected\n\t\t\t/>,\n\t\t];\n\t} }\n</SummaryList>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Data to Cart Items with PHP Filter\nDESCRIPTION: PHP code example showing how to use the 'woocommerce_store_api_add_to_cart_data' filter to add supplemental data to cart items before they are processed by CartController::add_to_cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_store_api_add_to_cart_data', function( $add_to_cart_data, \\WP_REST_Request $request ) {\n\tif ( ! empty( $request['custom-request-param'] ) ) {\n\t\t$add_to_cart_data['cart_item_data']['custom-request-data'] = sanitize_text_field( $request['custom-request-param'] );\n\t}\n\treturn $add_to_cart_data;\n}, 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Filtering Unwanted Log Messages in WooCommerce\nDESCRIPTION: Function that filters out specific log messages by checking the content. This example demonstrates how to ignore logs containing a particular text string while allowing all other logs to be processed normally.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction my_ignored_logs( $message, $level, $context, $handler ) {\n\tif ( false !== strpos( $message, 'Look, a squirrel!' ) ) {\n\t\treturn null;\n\t}\n\t\n\treturn $message;\n}\nadd_filter( 'woocommerce_logger_log_message', 'my_ignored_logs', 10, 4 );\n```\n\n----------------------------------------\n\nTITLE: Rendering a Generic Star Rating Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to use the `Rating` React component to display a star rating. It accepts a `rating` prop (which can be a decimal like 2.5 for half-stars) and an optional `totalStars` prop to define the scale (defaulting to 5). Other props like `size` and `className` allow for visual customization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/rating/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Rating rating={ 2.5 } totalStars={ 6 } />\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Attribute Value in JavaScript\nDESCRIPTION: This function asserts the value of the desired HTML attribute of a selector. It takes the selector, attribute, and expected value as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_36\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyValueOfElementAttribute(selector, attribute, expectedValue)\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Product Quantity Input Settings in PHP\nDESCRIPTION: Two functions that customize the quantity input behavior for WooCommerce products. The first function modifies simple products' quantity settings including start value, max, min, and step values. The second function adjusts the maximum and minimum quantities specifically for product variations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/adjust-quantity-input-values.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_woocommerce_quantity_input_args' ) ) {\n\t/**\n\t * Adjust the quantity input values for simple products\n\t */\n\tfunction YOUR_PREFIX_woocommerce_quantity_input_args( $args, $product ) {\n\t\t// Only affect the starting value on product pages, not the cart\n\t\tif ( is_singular( 'product' ) ) {\n\t\t\t$args['input_value'] = 4;\n\t\t}\n\n\t\t$args['max_value'] \t= 10; // Maximum value\n\t\t$args['min_value'] \t= 2;  // Minimum value\n\t\t$args['step'] \t\t= 2;  // Quantity steps\n\n\t\treturn $args;\n\t}\n\n\tadd_filter( 'woocommerce_quantity_input_args', 'YOUR_PREFIX_woocommerce_quantity_input_args', 10, 2 );\n}\n\nif ( ! function_exists( 'YOUR_PREFIX_woocommerce_available_variation' ) ) {\n\t/**\n\t * Adjust the quantity input values for variations\n\t */\n\tfunction YOUR_PREFIX_woocommerce_available_variation( $args ) {\n\t\t$args['max_qty'] = 20; // Maximum value (variations)\n\t\t$args['min_qty'] = 2;  // Minimum value (variations)\n\n\t\t// Note: the starting value and step for variations is controlled\n\t\t// from the 'woocommerce_quantity_input_args' filter shown above for\n    // simple products\n\n\t\treturn $args;\n\t}\n\n\tadd_filter( 'woocommerce_available_variation', 'YOUR_PREFIX_woocommerce_available_variation' );\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Change Cart Item Quantity Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates dispatching changeCartItemQuantity with cartItemKey (string) and quantity (number) to adjust a given item's quantity in the cart. Sends an update action to the Redux store, triggering cart state updates and allowing related UI changes (like recalculations or warnings).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( changeCartItemQuantity( cartItemKey, quantity ) );\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimental_woocommerce_blocks_add_data_attributes_to_namespace` PHP Hook\nDESCRIPTION: A PHP filter hook prefixed with `__experimental` that allows third-party developers (3PD) to specify a namespace of blocks. Blocks within this namespace will automatically receive their block attributes rendered as HTML `data-` attributes on the frontend.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Hook name:\n__experimental_woocommerce_blocks_add_data_attributes_to_namespace\n```\n\n----------------------------------------\n\nTITLE: Safe Function Declaration with Existence Check in PHP\nDESCRIPTION: Shows how to safely declare functions using function_exists() check to prevent redeclaration errors. Implements theme setup functionality with proper hook usage.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/coding-standards.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add thumbnail support.\n */\nif ( ! function_exists( 'YOUR_PREFIX_theme_setup' ) ) {\n    function YOUR_PREFIX_theme_setup() {\n        add_theme_support( 'post-thumbnails' );\n    }\n}\nadd_action( 'after_setup_theme', 'YOUR_PREFIX_theme_setup' );\n```\n\n----------------------------------------\n\nTITLE: Sanitizing User Input in WooCommerce Checkout Fields with PHP\nDESCRIPTION: Example of a sanitize_callback function that removes spaces from a field value in WooCommerce checkout. This function is used to clean user input before it's processed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'sanitize_callback' => function( $field_value ) {\n\treturn str_replace( ' ', '', $field_value );\n},\n```\n\n----------------------------------------\n\nTITLE: Controlling Product Collection Visibility in WooCommerce (TSX)\nDESCRIPTION: These snippets demonstrate how to control the visibility of a product collection using the 'scope' argument. They show how to hide a collection from the Collection Chooser or make it appear only in the block inserter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection\",\n  title: \"My Custom Collection\",\n  icon: \"games\",\n  description: \"This is a custom collection.\",\n  keywords: [\"custom collection\", \"product collection\"],\n  scope: [],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection\",\n  title: \"My Custom Collection\",\n  description: \"This is a custom collection.\",\n  keywords: [\"custom collection\", \"product collection\"],\n  scope: [\"inserter\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Shipping Address Edit State\nDESCRIPTION: Shows how to toggle the shipping address editing state in the checkout. The address will only collapse if all fields are valid.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( checkoutStore );\nstore.setEditingShippingAddress( true );\n```\n\n----------------------------------------\n\nTITLE: Changing Price Slider Accent Color using CSS Custom Property (CSS)\nDESCRIPTION: This CSS snippet customizes the WooCommerce Filter by Price block's slider accent color. It targets the progress bar element (`.wc-block-components-price-slider__range-input-progress`) and its right-to-left variant, setting the `--range-color` custom property to `#ee6948`. This method is preferred for modern browsers supporting CSS custom properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/filter-blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-price-slider__range-input-progress,\n.rtl .wc-block-components-price-slider__range-input-progress {\n\t--range-color: #ee6948;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing and Hooking a Thank You Action Handler - WooCommerce - PHP\nDESCRIPTION: This PHP snippet demonstrates how to create and hook a function into the woocommerce_before_thankyou action in WooCommerce, ensuring that the argument type matches the core hook signature by requiring an integer order ID. The function outputs a formatted message with the order ID to the checkout thank you page. Dependencies include WooCommerce and an environment where add_action is available; the function expects a valid integer order ID as input and outputs directly via printf. It should be included in the theme's functions.php file or a custom plugin, and omitting the type hint may trigger parameter warnings in strict environments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1160.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction test_function_11851( int $order_id ): void {\n    printf( 'Hello, this is order %d', $order_id );\n}\nadd_action( 'woocommerce_before_thankyou', 'test_function_11851' );\n\n```\n\n----------------------------------------\n\nTITLE: Setting Default State for WooCommerce Checkout Phone Field\nDESCRIPTION: This snippet shows how to modify the default value for the phone field in WooCommerce checkout. It uses the 'default_option_woocommerce_checkout_phone_field' filter to change the field's default state to 'required'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter(\n\t'default_option_woocommerce_checkout_phone_field',\n\tfunction ( $default_value ) {\n\t\treturn \"required\";\n\t},\n\t10,\n\t1\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Meta Information from WooCommerce (JavaScript)\nDESCRIPTION: Example of how to get cart meta information from the WooCommerce cart store. Returns an object with metadata about cart operations such as updating customer data, selected rates, cart staleness, and coupon application status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_28\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst cartMeta = store.getCartMeta();\n```\n\n----------------------------------------\n\nTITLE: Using Event Emitters with React useEffect for Cleanup\nDESCRIPTION: Example of using an event emitter in a React component with proper cleanup using the useEffect hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = ( { onCheckoutValidation } ) => {\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Checking if Cart Needs Shipping in WooCommerce (JavaScript)\nDESCRIPTION: Example of how to determine if the current cart requires shipping. Returns a boolean value indicating whether shipping is needed for the current cart contents.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_25\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst needsShipping = store.getNeedsShipping();\n```\n\n----------------------------------------\n\nTITLE: Basic Notice Banner Implementation in JSX\nDESCRIPTION: Demonstrates how to create a basic informational notice using the NoticeBanner component with a simple string message.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/base/components/notice-banner/docs/docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NoticeBanner } from '@woocommerce/base-components';\n\n<NoticeBanner status=\"info\">Your message here</NoticeBanner>;\n```\n\n----------------------------------------\n\nTITLE: Using getRouteFromResourceEntries in WooCommerce Schema Store\nDESCRIPTION: Example showing how to use the getRouteFromResourceEntries selector to retrieve a route from a slice of the route state. This is useful when working with specific parts of the schema state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/schema.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( SCHEMA_STORE_KEY );\nconst route = store.getRouteFromResourceEntries( stateSlice, ids );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Customer CSV Output\nDESCRIPTION: This CSV snippet shows how WP-CLI returns full customer record details when queried in CSV format. Fields include IDs, timestamped creation/modification, user/info, serialized billing and shipping JSON, meta-data, and activity stats. This output is suitable for import/export or verification steps in automation workflows.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_5\n\nLANGUAGE: csv\nCODE:\n```\nField,Value\\nid,17\\ndate_created,2016-12-09T20:22:10\\ndate_modified,2016-12-09T20:22:10\\nemail,woo@woo.local\\nfirst_name,Bob\\nlast_name,Tester\\nrole,customer\\nusername,mrbob\\nbilling,\"{\"\"first_name\"\":\"\"Bob\"\",\"\"last_name\"\":\"\"Tester\"\",\"\"company\"\":\"\"Woo\"\",\"\"address_1\"\":\"\"123 Main St.\"\",\"\"address_2\"\":\"\"\"\",\"\"city\"\":\"\"New York\"\",\"\"state\"\":\"\"\"\",\"\"postcode\"\":\"\"\"\",\\n\"country\"\":\"\"USA\"\",\"\"email\"\":\"\"\"\",\"\"phone\"\":\"\"\"\"}\"\\nshipping,\"{\"\"first_name\"\":\"\"Bob\"\",\"\"last_name\"\":\"\"Tester\"\",\"\"company\"\":\"\"Woo\"\",\"\"address_1\"\":\"\"123 Main St.\"\",\"\"address_2\"\":\"\"\"\",\"\"city\"\":\"\"New York\"\",\"\"state\"\":\"\"\"\",\"\"postcode\"\":\"\"\"\",\\n\"\"country\"\":\"\"USA\"\"}\"\\nis_paying_customer,false\\nmeta_data,\"[{\"\"id\"\":825,\"\"key\"\":\"\"shipping_company\"\",\"\"value\"\":\"\"Woo\"\"},{\"\"id\"\":829,\"\"key\"\":\"\"_order_count\"\",\"\"value\"\":\"\"0\"\"},{\"\"id\"\":830,\"\"key\"\":\"\"_money_spent\"\",\"\"value\"\":\"\"0\"\"}]\"\\norders_count,0\\ntotal_spent,0.00\\navatar_url,http://2.gravatar.com/avatar/5791d33f7d6472478c0b5fa69133f09a?s=96\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Select All Label in TreeSelectControl JSX\nDESCRIPTION: This snippet shows how to customize or disable the root select-all checkbox in a Tree Select Control by using the `selectAllLabel` prop. It is dependent on a React environment and an internationalization function like __(). Pass a string for a custom label, or false to remove the checkbox. The keys parameters are `options` (the nested options data) and `selectAllLabel`, whose value controls the visibility and text of the select-all node. Output is unchanged; only UI is affected.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/tree-select-control/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<TreeSelectControl\noptions={ options }\nselectAllLabel={ __(\"Select all options\", \"my-awesome-plugin-domain\") }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Formatting and Working with Currency Values using @woocommerce/currency in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to import the CurrencyFactory from @woocommerce/currency and utilize its methods to format currency and decimal values. Dependencies include the @woocommerce/currency package and an ES2015+ compatible environment. Key parameters across these methods include the amount to format, and optional configuration for currency symbol, precision, and separators. The methods demonstrated are: formatAmount for formatted currency strings, formatDecimal for rounded decimal numbers, and formatDecimalString for precise decimal string representations. Inputs are numeric values and the output adapts based on store settings, with sensible defaults for symbol ('$'), precision (2), and separator characters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/currency/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport CurrencyFactory from '@woocommerce/currency';\n\nconst storeCurrency = CurrencyFactory(); // pass store settings into constructor.\n\n// Formats money with a given currency symbol. Uses site's currency settings for formatting,\n// from the settings api. Defaults to symbol=`$`, precision=2, decimalSeparator=`.`, thousandSeparator=`,`\nconst total = storeCurrency.formatAmount( 20.923 ); // '$20.92'\n\n// Get the rounded decimal value of a number at the precision used for the current currency,\n// from the settings api. Defaults to 2.\nconst total = storeCurrency.formatDecimal( '6.2892' ); // 6.29\n\n// Get the string representation of a floating point number to the precision used by the current\n// currency. This is different from `formatAmount` by not returning the currency symbol.\nconst total = storeCurrency.formatDecimalString( 1088.478 ); // '1088.48'\n```\n\n----------------------------------------\n\nTITLE: Handling Product View Event in WooCommerce\nDESCRIPTION: Example of listening to the wc-blocks_viewed_product event that fires when a product is clicked for viewing. The event provides both collection type and product ID in the detail parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/dom-events.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.document.addEventListener(\n  'wc-blocks_viewed_product',\n  ( e ) => {\n    const { collection, productId } = e.detail;\n    console.log( collection ) // -> collection name, e.g. \"woocommerce/product-collection/featured\" or undefined for default one\n    console.log( productId ) // -> product ID, e.g. 34\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Removing Checkout Fields for Specific Country in WooCommerce with PHP\nDESCRIPTION: This snippet demonstrates how to hide and make optional specific checkout fields (postal code and city) for Algeria only. It uses the 'woocommerce_get_country_locale' filter to modify field requirements for a specific country.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_get_country_locale', function( $locale ) {\n\n\t$locale['DZ']['postcode']['required'] = false;\n\t$locale['DZ']['postcode']['hidden'] = true;\n\n\t$locale['DZ']['city']['required'] = false;\n\t$locale['DZ']['city']['hidden'] = true;\n\n\t return $locale;\n});\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Test in Specs Index - JavaScript\nDESCRIPTION: This code demonstrates how to import and register a new test function within the specs/index.js module. By requiring the exported test from its file and adding it to the module.exports object, the test becomes part of the available suite. It assumes the test has been defined and exported as shown in earlier snippets, and does not require any input parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-core-tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst runExampleTestName = require( './grouping/example-test-name.test' );\\n// ...\\nmodule.exports = {\\n// ...\\n    runExampleTestName,\\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering List Items with React List Component - JSX\nDESCRIPTION: This snippet demonstrates how to define and render a list of item objects using the List component in a React application. Dependencies include React and a List component, with optional usage of icon components like Gridicon. The 'listItems' array defines each item's properties such as title, description, pre/post icons, and click handlers. The expected input is an array of item objects, and the output is a rendered list; limitations depend on the provided List and icon components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/list/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst listItems = [\n\t{\n\t\ttitle: 'List item title',\n\t\tdescription: 'List item description text',\n\t},\n\t{\n\t\tbefore: <Gridicon icon=\"star\" />,\n\t\ttitle: 'List item with before icon',\n\t\tdescription: 'List item description text',\n\t},\n\t{\n\t\tbefore: <Gridicon icon=\"star\" />,\n\t\tafter: <Gridicon icon=\"chevron-right\" />,\n\t\ttitle: 'List item with before and after icons',\n\t\tdescription: 'List item description text',\n\t},\n\t{\n\t\ttitle: 'Clickable list item',\n\t\tdescription: 'List item description text',\n\t\tonClick: () => alert( 'List item clicked' ),\n\t},\n];\n\n<List items={ listItems } />;\n```\n\n----------------------------------------\n\nTITLE: Generating Security Nonces for Store API - WordPress - PHP\nDESCRIPTION: This PHP snippet uses WordPress's built-in 'wp_create_nonce' function to generate a nonce for the 'wc_store_api' endpoint, ensuring API requests are authenticated and protected against CSRF attacks. The dependency is the WordPress environment, specifically the 'wp_create_nonce' function. The input parameter is the nonce key, here 'wc_store_api'; the output is a unique nonce string. This mechanism is used to secure Store API requests and must be present in the PHP code executing within WordPress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/nonce-tokens.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwp_create_nonce( 'wc_store_api' )\n```\n\n----------------------------------------\n\nTITLE: Registering Data Attribute Behavior for Block Namespace (PHP)\nDESCRIPTION: Registers a custom namespace with WooCommerce's filter to automatically add 'data-*' attributes to all blocks under a given namespace when rendering frontend checkout blocks. Uses the '__experimental_woocommerce_blocks_add_data_attributes_to_namespace' filter. Requires WordPress and WooCommerce, applied in theme or plugin PHP files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter(\n\t'__experimental_woocommerce_blocks_add_data_attributes_to_namespace',\n\tfunction ( $allowed_namespaces ) {\n\t\t$allowed_namespaces[] = 'namespace';\n\t\treturn $allowed_namespaces;\n\t},\n\t10,\n\t1\n);\n```\n\n----------------------------------------\n\nTITLE: Cart Quantity Limits Filter\nDESCRIPTION: Filter for modifying cart item quantity limits including minimum, maximum and step values\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_product_quantity_{$value_type}\n```\n\n----------------------------------------\n\nTITLE: Implementing Formatters in WooCommerce Store API Extensions\nDESCRIPTION: Demonstrates a real-world example of using MoneyFormatter and CurrencyFormatter together to format price data in a WooCommerce Store API extension, including importing the required classes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\StoreApi\\StoreApi;\nuse Automattic\\WooCommerce\\StoreApi\\Utilities\\ExtendSchema;\n\n$extend = StoreApi::container()->get( ExtendSchema::class );\n\n$my_custom_price = $extend->get_formatter( 'money' )->format( '10.00', [\n  'rounding_mode' => PHP_ROUND_HALF_DOWN,\n  'decimals'      => 2\n] );\n\n$price_response = $extend->get_formatter( 'currency' )->format( [\n\t'price'         => $my_custom_price,\n] );\n```\n\n----------------------------------------\n\nTITLE: Validating Remote Specifications in PHP for WooCommerce\nDESCRIPTION: This PHP code demonstrates how to use the RemoteSpecValidator class to validate a remote specification. It creates a validator instance, loads a JSON specification, and checks its validity.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/remote-specs-validation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Tests\\RemoteSpecsValidation\\RemoteSpecValidator;\n$validator = RemoteSpecValidator::create_from_bundle( 'remote-inbox-notification' );\n\n$spec = json_decode( file_get_contents(\":your-remote-inbox-noficiation-json\") );\n\n$result = $validator->validate( $spec );\n\nif ( !$result->is_valid() ) {\n\tvar_dump( $result->get_errors() );\n} else {\n\tvar_dump('everything looks good!');\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Product Collection with Reference in WooCommerce (TSX)\nDESCRIPTION: This example shows how to register a product collection that requires a specific reference to work properly. It demonstrates using the 'usesReference' argument to specify required references like 'product' or 'order'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection\",\n  title: \"My Custom Collection\",\n  icon: \"games\",\n  description: \"This is a custom collection.\",\n  keywords: [\"custom collection\", \"product collection\"],\n  usesReference: [\"product\"],\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection\",\n  title: \"My Custom Collection\",\n  icon: \"games\",\n  description: \"This is a custom collection.\",\n  keywords: [\"custom collection\", \"product collection\"],\n  usesReference: [\"product\", \"order\"],\n});\n```\n\n----------------------------------------\n\nTITLE: Dispatching Coupon Remove Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates dispatching the removeCoupon action with couponCode (string) to remove a given coupon from the cart. The Redux action updates store state and ensures any server-side coupon removal logic is triggered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( removeCoupon( couponCode ) );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Theme Wrappers for WooCommerce\nDESCRIPTION: Implementation of custom theme wrappers for WooCommerce content using action hooks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action('woocommerce_before_main_content', 'my_theme_wrapper_start', 10);\nadd_action('woocommerce_after_main_content', 'my_theme_wrapper_end', 10);\n\nfunction my_theme_wrapper_start() {\n    echo '&lt;section id=\"main\"&gt;';\n}\n\nfunction my_theme_wrapper_end() {\n    echo '&lt;/section&gt;';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Variation Visibility Toggle with WooCommerce\nDESCRIPTION: Example showing how to use the product-checkbox-field to toggle a product variation between 'publish' and 'private' status. This implementation demonstrates using custom checked and unchecked values instead of boolean values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/checkbox/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$parent_container->add_block(\n  [\n    'id'         => 'product-variation-visibility',\n    'blockName'  => 'woocommerce/product-checkbox-field',\n    'order'      => 30,\n    'attributes' => [\n      'property' => 'status',\n      'label'    => __( 'Hide in product catalog', 'woocommerce' ),\n      'checkedValue'  => 'private',\n      'uncheckedValue' => 'publish',\n    ],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Product Field in Admin\nDESCRIPTION: PHP function to add a custom text input field to the WooCommerce product inventory section.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function add_field() {\n\tglobal $product_object;\n\t?>\n\t<div class=\"inventory_new_stock_information options_group show_if_simple show_if_variable\">\n\t\t<?php woocommerce_wp_text_input(\n\t\t\tarray(\n\t\t\t\t'id'      \t=> '_new_stock_information',\n\t\t\t\t'label'   \t=> __( 'New Stock', 'woo_product_field' ),\n\t\t\t\t'description' => __( 'Information shown in store', 'woo_product_field' ),\n\t\t\t\t'desc_tip'\t=> true,\n\t\t\t\t'value' => $product_object->get_meta( '_new_stock_information' )\n\t\t\t)\n\t\t); ?>\n\t</div>\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Product Attributes API Request - HTTP\nDESCRIPTION: Demonstrates the HTTP GET request required to list all product attributes in the WooCommerce Store API. This endpoint does not require any parameters. The expected result is an array of product attribute objects in JSON form. It is used to fetch available product attributes in a WooCommerce store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/attributes\n```\n\n----------------------------------------\n\nTITLE: Recording User Event in React\nDESCRIPTION: Example of recording a page view event using the recordEvent function from @woocommerce/tracks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { recordEvent } from '@woocommerce/tracks';\n\nrecordEvent( 'page_view', { path } )\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Class in /includes Directory\nDESCRIPTION: Example of defining a PHP class in the /includes directory. The class name is prefixed with WC_ and uses Upper_Snake_Case convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/naming-conventions.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nclass WC_Cache_Helper {\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Custom Payment Data from the Store API Context in WooCommerce PHP\nDESCRIPTION: This PHP snippet demonstrates how to retrieve custom data posted in payment_data when handling payments via the woocommerce_rest_checkout_process_payment_with_context hook. It uses $context->payment_data to access values sent from frontend scripts, enabling custom payment logic on the server. Relies on the Store API and expects proper schema for payment_data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_rest_checkout_process_payment_with_context', function( $context, $result ) {\\n  if ( $context->payment_method === 'bacs' ) {\\n    $myGatewayCustomData = $context->payment_data['myGatewayCustomData'];\\n    // Here we would use the $myGatewayCustomData to process the payment\\n  }\\n}, 10, 2 );\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Context Notice Container in WooCommerce Blocks\nDESCRIPTION: Shows how to use StoreNoticesContainer to handle notices from multiple contexts simultaneously, specifically for shipping and billing address notifications.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/notices.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { StoreNoticesContainer } = window.wc.blocksCheckout;\n\nconst AddressForm = () => {\n\treturn (\n\t\t<StoreNoticesContainer\n\t\t\tcontext={ [\n\t\t\t\t'wc/checkout/shipping-address',\n\t\t\t\t'wc/checkout/billing-address',\n\t\t\t] }\n\t\t/>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Execution Commands\nDESCRIPTION: Various commands for running and debugging Playwright E2E tests including UI mode, specific files, and test filtering\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# Run all available tests.\npnpm test:e2e\n\n# Run in headed mode.\npnpm test:e2e --headed\n\n# Run/Debug in UI mode.\npnpm test:e2e --ui\n\n# Run a single test file.\npnpm run test:e2e cart-block.spec.ts\n\n# Run a set of files from a different directories.\npnpm run test:e2e tests/cart/ tests/products/\n\n# Run files that have `cart` or `checkout` in the file name.\npnpm run test:e2e cart checkout\n\n# Run a single test via its line number.\npnpm run test:e2e cart-block.spec.ts:38\n\n# Run/Debug a test with a specific title.\npnpm run test:e2e -g \"should display a discount label\" --ui\n```\n\n----------------------------------------\n\nTITLE: Checkout Validation Event Handler\nDESCRIPTION: Implementation of onCheckoutValidation event handler for WooCommerce checkout process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribeValidation = eventRegistration.onCheckoutValidation( ( a ) => {\n\tconsole.log( 'onCheckoutValidation', a );\n} );\n```\n\n----------------------------------------\n\nTITLE: Increasing Webhook Retry Attempts in WooCommerce\nDESCRIPTION: This code snippet demonstrates how to use the 'woocommerce_max_webhook_delivery_failures' filter to increase the number of retry attempts for failed webhook deliveries in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/webhooks.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_max_webhook_delivery_failures', 'increase_webhook_retries' );\n\nfunction increase_webhook_retries( $max_delivery_failures ) {\n    return 10; // Increase to 10 retries\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Quantity Inputs to WooCommerce Loop Add to Cart Buttons\nDESCRIPTION: Function that modifies the default WooCommerce loop template to include quantity input fields next to add to cart buttons for simple, purchasable, in-stock products that are not sold individually. The function creates a form with quantity input and submit button, replacing the default add to cart link.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/override-loop-template-show-quantities-next-add-cart.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_quantity_inputs_for_woocommerce_loop_add_to_cart_link' ) ) {\n  /**\n   * Override loop template and show quantities next to add to cart buttons\n   * @param  string $html    Default loop template.\n   * @param  object $product Product data.\n   * @return string          Modified loop template.\n   */\n\tfunction YOUR_PREFIX_quantity_inputs_for_woocommerce_loop_add_to_cart_link( $html, $product ) {\n\t\tif ( $product && $product->is_type( 'simple' ) && $product->is_purchasable() && $product->is_in_stock() && ! $product->is_sold_individually() ) {\n\t\t\t$html  = '<form action=\"' . esc_url( $product->add_to_cart_url() ) . '\" class=\"cart\" method=\"post\" enctype=\"multipart/form-data\">';\n\t\t\t$html .= woocommerce_quantity_input( array(), $product, false );\n\t\t\t$html .= '<button type=\"submit\" class=\"button alt\">' . esc_html( $product->add_to_cart_text() ) . '</button>';\n\t\t\t$html .= '</form>';\n\t\t}\n\n\t\treturn $html;\n\t}\n\tadd_filter( 'woocommerce_loop_add_to_cart_link', 'YOUR_PREFIX_quantity_inputs_for_woocommerce_loop_add_to_cart_link', 10, 2 );\n}\n```\n\n----------------------------------------\n\nTITLE: Using ExperimentalOrderMeta Slot Fill in WooCommerce Checkout\nDESCRIPTION: This TypeScript snippet demonstrates how to use the ExperimentalOrderMeta slot to add custom content below the Checkout summary section and above the \"Proceed to Checkout\" button in the Cart. It registers a plugin with the WooCommerce checkout scope.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-slot-fills.md#2025-04-23_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nconst { __ } = window.wp.i18n;\nconst { registerPlugin } = window.wp.plugins;\nconst { ExperimentalOrderMeta } = window.wc.blocksCheckout;\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalOrderMeta>\n\t\t\t<div class=\"wc-block-components-totals-wrapper\">\n\t\t\t\t{ __( 'Yearly recurring total ...', 'YOUR-TEXTDOMAIN' ) }\n\t\t\t</div>\n\t\t</ExperimentalOrderMeta>\n\t);\n};\n\nregisterPlugin( 'slot-and-fill-examples', {\n\trender,\n\tscope: 'woocommerce-checkout',\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Wireit Task Output Caching Configuration\nDESCRIPTION: Configuration for task output caching using wireit, demonstrating webpack build caching setup with input/output file tracking and dependency management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"build\": \"pnpm --if-present --workspace-concurrency=Infinity --stream --filter=\\\"$npm_package_name...\\\" '/^build:project:.*$/'\",\n    \"build:project\": \"pnpm --if-present '/^build:project:.*$/'\",\n    \"build:project:bundle\": \"wireit\"\n  },\n  \"wireit\": {\n    \"build:project:bundle\": {\n      \"command\": \"webpack\",\n      \"files\": [\n        \"... - package resources as input\"\n      ],\n      \"output\": [\n        \"... - package resources as output\"\n      ],\n      \"dependencies\": [\n        \"dependencyOutputs\"\n      ]\n    },\n    \"dependencyOutputs\": {\n      \"files\": [\n        \"... - dependencies resources as input\",\n        \"... - updated automatically by monorepo tooling which hooks up into `pnpm install`\",\n        \"... - see `.pnpmfile.cjs` file and https://pnpm.io/pnpmfile for details\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TableSummary for Tabular Data Summarization in React (JSX)\nDESCRIPTION: This snippet illustrates how to pass summary data to the TableSummary component for rendering analytics summary information, such as gross income, taxes, and shipping, in a condensed form. Dependencies: TableSummary component, React. Expects a prop called data which is an array of objects, each with label and value properties. Output is a single-line summary element for use beneath tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst summary = [\n\t{ label: 'Gross Income', value: '$830.00' },\n\t{ label: 'Taxes', value: '$96.32' },\n\t{ label: 'Shipping', value: '$50.00' },\n];\n\n<TableSummary data={ summary } />\n```\n\n----------------------------------------\n\nTITLE: Clearing a Single Validation Error in JavaScript\nDESCRIPTION: Example showing how to clear a specific validation error using the clearValidationError action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( validationStore );\nstore.clearValidationError( 'billing-first-name' );\n```\n\n----------------------------------------\n\nTITLE: Clear Button Block Implementation (TypeScript)\nDESCRIPTION: Implementation of experimental Clear button block with feature flags across PHP, Webpack, and TypeScript files. Used as part of the product filtering system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nindex.tsx#L15\n```\n\n----------------------------------------\n\nTITLE: Checking Processing Status in Checkout Store with JavaScript\nDESCRIPTION: Demonstrates how to determine if the checkout is currently processing using the isProcessing selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isProcessing = store.isProcessing();\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Task to WooCommerce Task List in PHP\nDESCRIPTION: This code shows how to add a custom task to the WooCommerce task list using the TaskLists::add_task() method. It specifies the task list ID and creates a new instance of the custom task.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\Features\\OnboardingTasks\\TaskLists;\n\nTaskLists::add_task(\n  'extended', // The task list ID. See the TaskList section below for more information.\n  new MyTask(\n    $task_lists::get_list( 'extended' ), // The task list object.\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling Default WooCommerce Stylesheet Enqueuing (PHP)\nDESCRIPTION: PHP code snippet using the 'add_filter' function with the 'woocommerce_enqueue_styles' hook and the '__return_false' callback. This prevents WooCommerce from loading its default 'woocommerce.css' stylesheet, allowing themes to provide entirely custom styles. This code should be placed in the active theme's 'functions.php' file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_enqueue_styles', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Adding Email Log Handler in WooCommerce\nDESCRIPTION: Example function that adds the WooCommerce Email log handler to the existing handlers. This handler sends logs to specified email recipients, with parameters to customize recipient addresses and the minimum log level threshold for sending emails.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction my_wc_log_handlers( $handlers ) {\n\t$recipients = array( 'wayne@example.com', 'garth@example.com' ); // Send logs to multiple recipients.\n\t$threshold  = 'critical'; // Only send emails for logs of this level and higher.\n\t$handlers[] = new WC_Log_Handler_Email( $recipients, $threshold );\n\t\n\treturn $handlers;\n}\nadd_filter( 'woocommerce_register_log_handlers', 'my_wc_log_handlers' );\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Component from WooCommerce Experimental Package\nDESCRIPTION: Example of importing a Text component from the experimental package and using it in a React component render method. The package will automatically use the non-experimental version if available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/experimental/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Text } from '@woocommerce/experimental';\n\nrender() {\n\treturn (\n\t\t<Text>\n\t\t\t…\n\t\t</Text>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling Remove Item Link Visibility in WooCommerce Cart - TSX\nDESCRIPTION: Shows how to control the visibility of cart item remove links. The filter can hide remove links for specific products like 'Beanie with Logo' and 'Sunglasses' while showing them for other items.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyShowRemoveItemLink = ( defaultValue, extensions, args ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn false;\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn false;\n\t}\n\n\treturn true;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tshowRemoveItemLink: modifyShowRemoveItemLink,\n} );\n```\n\n----------------------------------------\n\nTITLE: Overriding Chart Colors using WooCommerce Filters (JavaScript)\nDESCRIPTION: Illustrates how to customize the colors used in the WooCommerce `Chart` component. It defines an array of desired color hex codes (`colorScales`) and uses the `addFilter` function (likely from `@wordpress/hooks` or a similar system) to hook into the `woocommerce_admin_chart_item_color` filter. The provided callback function returns a color from the `colorScales` array based on the item's index, effectively overriding the default chart colors for each data series.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/chart/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst colorScales = [\n  \"#0A2F51\",\n  \"#0E4D64\",\n  \"#137177\",\n  \"#188977\",\n];\naddFilter( 'woocommerce_admin_chart_item_color', 'example', ( index, key, orderedKeys ) => colorScales[index] );\n```\n\n----------------------------------------\n\nTITLE: Uploading Image from URL in REST API in PHP\nDESCRIPTION: Uploads an image from a given URL to the WordPress media library. Useful for REST API operations that need to import external images.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nwc_rest_upload_image_from_url( $image_url )\n```\n\n----------------------------------------\n\nTITLE: Creating Product Shipping Classes in WooCommerce CLI\nDESCRIPTION: Command for creating new product shipping classes with required name parameter and options for slug and description.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_47\n\nLANGUAGE: bash\nCODE:\n```\nwc product_shipping_class create\n```\n\n----------------------------------------\n\nTITLE: Setting Cart Data with setCartData Action\nDESCRIPTION: Example showing how to use the setCartData action to update the cart data in the store. This action takes a comprehensive cart data object with properties like coupons, items, totals, and more.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( setCartData( newCartData ) );\n```\n\n----------------------------------------\n\nTITLE: Executing Request to Delete Single Cart Coupon (Shell/cURL)\nDESCRIPTION: Provides a sample cURL command to make a DELETE request to remove a specific coupon ('20off') from the cart using the WooCommerce Store API endpoint `/cart/coupons/:code`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request DELETE https://example-store.com/wp-json/wc/store/v1/cart/coupons/20off\n```\n\n----------------------------------------\n\nTITLE: Implementing LegacyProxy with Dependency Injection in PHP\nDESCRIPTION: Demonstrates how to use LegacyProxy through dependency injection in a class. Shows the basic setup of injecting and using the proxy to call legacy functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Proxies\\LegacyProxy;\n\nclass TheClass {\n    private $legacy_proxy;\n\n    public function init( LegacyProxy $legacy_proxy ) {\n        $this->legacy_proxy = $legacy_proxy;            \n    }\n\n    public function do_something_using_some_function() {\n        $this->legacy_proxy->call_function( 'the_function_name', 'param1', 'param2' );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Route for Single Product Example in WooCommerce Blocks\nDESCRIPTION: Example showing how to retrieve a route for a single product using the getRoute selector with a specific product ID. This demonstrates accessing a route with placeholders.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/schema.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// '/wc/blocks/products/20'\nwp.data.select( SCHEMA_STORE_KEY ).getRoute( '/wc/blocks', 'products', [ 20 ] );\n```\n\n----------------------------------------\n\nTITLE: Checking if Shipping Has Been Calculated in WooCommerce (JavaScript)\nDESCRIPTION: Example of how to determine if shipping calculations have been performed for the current cart. Returns a boolean value indicating whether shipping has been calculated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_26\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst hasCalculatedShipping = store.getHasCalculatedShipping();\n```\n\n----------------------------------------\n\nTITLE: Customizing Item Names in WooCommerce Checkout Order Summary\nDESCRIPTION: This example demonstrates how to use the itemName filter to modify product names in the order summary by adding decorative emojis around each product name.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyItemName = ( defaultValue, extensions, args ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn `🪴 ${ defaultValue } 🪴`;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\titemName: modifyItemName,\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering a Block Renderer with WooCommerce in PHP\nDESCRIPTION: Code snippet showing how to register a custom block renderer with the WooCommerce blocks registry. The function hooks into the 'woocommerce_blocks_renderer_initialized' action and registers a renderer for the 'core/heading' block type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/src/Engine/Renderer/readme.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Automattic\\WooCommerce\\EmailEditor\\Engine\\Renderer\\ContentRenderer\\Blocks_Registry;\n\nadd_action('woocommerce_blocks_renderer_initialized', 'register_my_block_email_renderer');\n\nfunction register_my_block_email_renderer(Blocks_Registry $blocksRegistry): void {\n  $blocksRegistry->add_block_renderer('core/heading', new Renderer\\Blocks\\Heading());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Field in WooCommerce Checkout\nDESCRIPTION: Example of registering a select field with multiple options in the order information section.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_init',\n\tfunction() {\n\t\twoocommerce_register_additional_checkout_field(\n\t\t\tarray(\n\t\t\t\t'id'          => 'namespace/how-did-you-hear-about-us',\n\t\t\t\t'label'       => 'How did you hear about us?',\n\t\t\t\t'placeholder' => 'Select a source',\n\t\t\t\t'location'    => 'order',\n\t\t\t\t'type'        => 'select',\n\t\t\t\t'options'     => [\n\t\t\t\t\t[\n\t\t\t\t\t\t'value' => 'google',\n\t\t\t\t\t\t'label' => 'Google'\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'value' => 'facebook',\n\t\t\t\t\t\t'label' => 'Facebook'\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'value' => 'friend',\n\t\t\t\t\t\t'label' => 'From a friend'\n\t\t\t\t\t],\n\t\t\t\t\t[\n\t\t\t\t\t\t'value' => 'other',\n\t\t\t\t\t\t'label' => 'Other'\n\t\t\t\t\t],\n\t\t\t\t]\n\t\t\t)\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Coupon Code by ID in PHP\nDESCRIPTION: Retrieves a coupon code using the coupon's ID. The function takes a single parameter $id representing the coupon ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nwc_get_coupon_code_by_id( $id )\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Customer Creation Hook\nDESCRIPTION: Hook that fires after a new customer account has been registered, passing the customer ID, data and generated password.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_created_customer', integer $customer_id, array $new_customer_data, string $password_generated )\n```\n\n----------------------------------------\n\nTITLE: Product Filter Block Implementation (TypeScript)\nDESCRIPTION: Implementation of experimental Product Filter block with feature flags across PHP, Webpack, and TypeScript files. The block is controlled by experimental flags and requires specific configuration in multiple places.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nindex.tsx#L30\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Extension with create-block\nDESCRIPTION: Command to scaffold a new WooCommerce extension using @wordpress/create-block with the WooCommerce template. Creates initial extension structure with necessary boilerplate code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/building-your-first-extension.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @wordpress/create-block -t @woocommerce/create-woo-extension my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Setting Publish After Time Rule in JSON\nDESCRIPTION: This rule allows a notification to be shown only after a specified date and time. It can be used in combination with 'publish_before_time' for timeboxing notifications.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"publish_after_time\",\n\t\"publish_after\": \"2020-04-22 00:00:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Set Billing Address Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates dispatching setBillingAddress with a billingAddress object (containing first_name, last_name, company, address_1, address_2, city, state, postcode, and country fields) to set the billing address locally in the cart. Unlike updateCustomerData, this does not send the address to the server but only updates locally within Redux state. Parameter: billingAddress must include all relevant keys as specified.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( setBillingAddress( billingAddress ) );\n```\n\n----------------------------------------\n\nTITLE: Removing a Block from Product Editor Templates in PHP\nDESCRIPTION: This snippet demonstrates how to remove a block from product editor templates. It uses the 'woocommerce_block_template_area_product-form_after_remove_block_product-sale-price' action hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/Features/ProductBlockEditor/ProductTemplates/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n\nfunction YOUR_PREFIX_remove_block( BlockInterface $sale_price_block ) {\n  $sale_price_block->remove();\n}\n\nadd_action( 'woocommerce_block_template_area_product-form_after_remove_block_product-sale-price', 'YOUR_PREFIX_remove_block' );\n```\n\n----------------------------------------\n\nTITLE: Implementing SnackbarList Component in React/JSX\nDESCRIPTION: Example of how to use the SnackbarList component to display snackbar notices. Shows basic implementation with a single notice including ID, content, status, dismissibility, and spoken message properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/base/components/snackbar-list/docs/docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { SnackbarList } from '@woocommerce/base-components';\n\nconst notices = [\n\t{\n        id: '1',\n        content: 'This is a snackbar notice.',\n        status: 'default',\n        isDismissible: true,\n        spokenMessage: \"Hello snackbar!\"\n    }\n];\n\n<SnackbarList notices={ notices }>;\n```\n\n----------------------------------------\n\nTITLE: WooCommerce CRUD Delete Method\nDESCRIPTION: Implementation of the delete method in WC_Data class, handling object deletion from the database.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function delete( $force_delete = false ) {\n\tif ( $this->data_store ) {\n\t\t$this->data_store->delete( $this, array( 'force_delete' => $force_delete ) );\n\t\t$this->set_id( 0 );\n\t\treturn true;\n\t}\n\treturn false;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Configuration in default.json for E2E Tests\nDESCRIPTION: Example JSON configuration showing how to override the default settings by creating or modifying the `/tests/e2e/config/default.json` file. This example changes the site URL and adds configuration for both an admin user and a customer user, omitting the email address which is not used by the sequencer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"http://localhost:8089/\",\n  \"users\": {\n    \"admin\": {\n      \"username\": \"admin\",\n      \"password\": \"password\",\n    },\n    \"customer\": {\n      \"username\": \"customer\",\n      \"password\": \"password\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dependency-Injectable Class in PHP\nDESCRIPTION: Example of creating a class that can be resolved by the WooCommerce dependency injection container. Shows how to properly structure a class with dependencies using the init method pattern.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nnamespace Automattic\\WooCommerce\\TheClassNamespace;\nuse Automattic\\WooCommerce\\TheDependencyNamespace\\TheDependencyClass;\n\n\nclass TheClass {\n    private $the_dependency;\n    \n    public function init( TheDependencyClass $dependency ) {\n        $this->the_dependency = $dependency;\n    }\n            \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of SelectControl Menu Items - React - JavaScript\nDESCRIPTION: This snippet illustrates how to override the default menu rendering of SelectControl by providing a render prop function as its child. The function receives item and menu props, allowing custom rendering of the items within a dynamic list (ul > li), while managing selection and state based on the provided context. Useful for advanced UIs requiring complete control over selected item presentation; dependencies include React and the SelectControl component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/experimental-select-control/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectControl\\n    label=\\\"Custom render\\\"\\n    items={ items }\\n    selected={ selected }\\n    onSelect={ ( item ) => setSelectedItem( item ) }\\n    onRemove={ () => setSelectedItem( null ) }\\n>\\n    { ( {\\n        items,\\n        isOpen,\\n        highlightedIndex,\\n        getItemProps,\\n        getMenuProps,\\n        getItemLabel,\\n        getItemValue\\n    } ) => {\\n        return (\\n            <ul { ...getMenuProps() }>\\n                { isOpen && items.map( ( item, index: number ) => (\\n                    <li \\n                        key={ `${ getItemValue(item) }${ index }` }\\n                        { ...getItemProps() }\\n                    >\\n                        { getItemLabel(item) }\\n                    </li>\\n                ) ) }\\n            </ul>\\n        );\\n    } }\\n</SelectControl>\n```\n\n----------------------------------------\n\nTITLE: Customizing Checkout Button Label with JavaScript Filter in WooCommerce Blocks\nDESCRIPTION: This JavaScript snippet demonstrates how to customize the text of the 'Place Order' button in the WooCommerce Checkout block using the `__experimentalRegisterCheckoutFilters` function. It registers a filter named 'custom-place-order-button-label' that provides a function `label` returning 'Pay now' for the `placeOrderButtonLabel` property. Requires the WooCommerce Blocks checkout functionality and is intended to be run in a context where `window.wc.blocksCheckout` is available, such as via the 'Simple Custom CSS and JS' WordPress plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/870.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nconst label = () => 'Pay now';\nconst {__experimentalRegisterCheckoutFilters} = window.wc.blocksCheckout;\n__experimentalRegisterCheckoutFilters('custom-place-order-button-label', {\n    placeOrderButtonLabel: label,\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to All Checkout Fields\nDESCRIPTION: Hook that allows for filtering all checkout fields at once, including billing, shipping, account, and order fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$this->checkout_fields = apply_filters( 'woocommerce_checkout_fields', $this->checkout_fields );\n```\n\n----------------------------------------\n\nTITLE: Loading Custom WooCommerce Translation Files with WordPress Filter\nDESCRIPTION: This PHP code snippet allows loading custom translation files from a specified directory. The filter hooks into 'load_textdomain_mofile' to replace the default translation file path with a custom one for a specific text domain. This makes custom translations upgrade-safe by storing them outside the plugin directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/localization-translation/translating-woocommerce.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Code to be placed in functions.php of your theme or a custom plugin file.\nadd_filter( 'load_textdomain_mofile', 'load_custom_plugin_translation_file', 10, 2 );\n\n/**\n * Replace 'textdomain' with your plugin's textdomain. e.g. 'woocommerce'.\n * File to be named, for example, yourtranslationfile-en_GB.mo\n * File to be placed, for example, wp-content/languages/textdomain/yourtranslationfile-en_GB.mo\n */\nfunction load_custom_plugin_translation_file( $mofile, $domain ) {\n  if ( 'textdomain' === $domain ) {\n    $mofile = WP_LANG_DIR . '/textdomain/yourtranslationfile-' . get_locale() . '.mo';\n  }\n\n  return $mofile;\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Report Page in PHP\nDESCRIPTION: PHP code to register a new analytics report page in the WooCommerce Admin menu structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction add_report_menu_item( $report_pages ) {\n\t$report_pages[] = array(\n\t\t'id'     => 'example-analytics-report',\n\t\t'title'  => __( 'Example', 'my-textdomain' ),\n\t\t'parent' => 'woocommerce-analytics',\n\t\t'path'   => '/analytics/example',\n\t);\n\n\treturn $report_pages;\n}\nadd_filter( 'woocommerce_admin_report_menu_items', 'add_report_menu_item' );\n```\n\n----------------------------------------\n\nTITLE: Rendering Table with Data and Row Key in React (JSX)\nDESCRIPTION: This usage snippet shows how to render the Table component with analytics data, caption, headers, and a custom rowKey accessor for unique keys. It integrates with the data structure in a reporting dashboard. Dependencies: Table React component and React; requires headers, rows, rowKey, and caption props. The caption must be a descriptive string, and rowKey should be a function returning a unique value for each row. Outputs a sortable, accessible table suitable for analytics.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Table\n\tcaption=\"Revenue last week\"\n\trows={ rows }\n\theaders={ headers }\n\trowKey={ row => row.display }\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Settings with admin_options Method\nDESCRIPTION: Implementation of the admin_options method that renders the settings HTML. This generates a settings form with a header and the form fields defined earlier.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction admin_options() {\n\t?>\n\t&lt;h2&gt;<?php esc_html_e( 'Your plugin name', 'your-text-domain' ); ?>&lt;/h2&gt;\n\t&lt;table class=\"form-table\"&gt;\n\t\t<?php $this->generate_settings_html(); ?>\n\t&lt;/table&gt;\n\t<?php\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Script with Asset File Dependencies (PHP)\nDESCRIPTION: Example demonstrating how to properly register a JavaScript file with WordPress, using the asset file generated by the Dependency Extraction Webpack Plugin to handle dependencies and versioning.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/extensibility-getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$script_path = '/build/index.js';\n$script_url  = plugins_url( $script_path, __FILE__ );\n\n$script_asset_path = dirname( __FILE__ ) . '/build/index.asset.php';\n$script_asset      = file_exists( $script_asset_path )\n  ? require $script_asset_path\n  : [\n    'dependencies' => [],\n    'version'      => $this->get_file_version( $script_path ),\n  ];\n\nwp_register_script(\n  'example-blocks-integration-handle',\n  $script_url,\n  $script_asset['dependencies'],\n  $script_asset['version'],\n  true\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying Cart Item Class in WooCommerce Checkout using JavaScript\nDESCRIPTION: This code example demonstrates how to use the cartItemClass filter to modify the CSS class of order summary items. The filter checks if the context is 'summary' and applies a custom class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemClass = ( defaultValue, extensions, args ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn 'my-custom-class';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemClass: modifyCartItemClass,\n} );\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce API Client with npm (Bash)\nDESCRIPTION: This snippet shows how to install the @woocommerce/api package as a development dependency using npm, which is required before using any of the provided JavaScript or TypeScript functionality. No configuration is required, but the command must be run from the root directory of your project. Upon completion, the package will be available in your node_modules for use in import statements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/api --save-dev\n```\n\n----------------------------------------\n\nTITLE: Querying WooCommerce Orders with Date Conditions in PHP\nDESCRIPTION: This example uses the new date_query argument to retrieve orders based on complex date conditions. It fetches orders paid in the last month that were created before noon on any date, demonstrating the use of multiple date columns and comparisons.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$orders = wc_get_orders(\n    array(\n        'date_query' => array(\n            'relation' => 'AND',\n            array(\n                'column'  => 'date_created_gmt',\n                'hour'    => 12,\n                'compare' => '<'\n            ),\n            array(\n                'column'  => 'date_paid_gmt',\n                'after'   => '1 month ago',\n            ),\n        ),\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Payment Method Component Event Registration\nDESCRIPTION: Example of implementing event registration in a payment method component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onCheckoutValidation } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_archive_description Hook in PHP\nDESCRIPTION: This hook is used for displaying archive descriptions. It works with woocommerce_taxonomy_archive_description() and woocommerce_product_archive_description() which render taxonomy and product archive descriptions respectively.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_archive_description' )\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Add Item with StoreAPI - text\nDESCRIPTION: This snippet demonstrates the structure of the JSON payload required to add an item to the WooCommerce cart using the StoreAPI endpoint via a POST request. The payload includes the product ID and quantity fields. To use this, replace the \\\"id\\\" value with your product’s actual ID; on success, the API should add the item to the cart and subsequent GET requests to the cart/items resource should reflect the cart state. A valid response requires WooCommerce REST API endpoints enabled and products configured for stock management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/400.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{\n\t\"id\": 163,\n\t\"quantity\":1\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WooCommerce Components in React\nDESCRIPTION: Example showing how to import WooCommerce components into a custom extension using the @woocommerce/blocks-components package, which is externalized through the dependency extraction plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/extensibility-getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Button } from '@woocommerce/blocks-components';\n\nconst MyComponent = () => {\n  return <div class=\"my-wrapper\">\n    <Button type=\"button\" />\n  </div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column to WooCommerce Downloads Report Query in PHP\nDESCRIPTION: This PHP code snippet adds a new 'access_expires' column to the Downloads report SQL query using the 'woocommerce_admin_report_columns' filter. It includes the access expiry timestamp in the SELECT statement.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/adding-columns-to-analytics-reports-and-csv-downloads.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction add_access_expires_select( $report_columns, $context, $table_name ) {\n\tif ( $context !== 'downloads' ) {\n\t\treturn $report_columns;\n\t}\n\t$report_columns['access_expires'] =\n\t\t'product_permissions.access_expires AS access_expires';\n\treturn $report_columns;\n}\nadd_filter( 'woocommerce_admin_report_columns', 'add_access_expires_select', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Running All Shopper Tests with E2E-Core-Tests Package - JavaScript\nDESCRIPTION: This snippet demonstrates how to invoke all shopper tests provided by the @woocommerce/e2e-core-tests package. It imports the runShopperTests orchestrator function from the package and executes it. Prerequisites include installing @woocommerce/e2e-core-tests as a dev dependency. No parameters are required, and all tests relevant to shoppers are automatically run. The code should be placed in a .test.js file within the appropriate specs folder.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-core-tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { runShopperTests } = require( '@woocommerce/e2e-core-tests' );\\n\\nrunShopperTests();\n```\n\n----------------------------------------\n\nTITLE: Defining the Checkout Order Processing Endpoint (HTTP)\nDESCRIPTION: Specifies the HTTP method (POST) and URL structure for the endpoint used to process an existing order and its payment. The `{ORDER_ID}` path parameter must be replaced with the actual ID of the order being processed. Authentication via a Nonce or Cart Token is required.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout-order.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /wc/store/v1/checkout/{ORDER_ID}\n```\n\n----------------------------------------\n\nTITLE: Extending Collection Type for Control Filtering\nDESCRIPTION: Extension of the Collection type interface to include hideControls property, which allows collections to specify which inspector controls should be hidden from users. This is useful for maintaining collection-specific behaviors.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/product-collection/collections/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype Collection = {\n\t...;\n\thideControls: FilterName[];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Payment Gateway with Feature Support (PHP)\nDESCRIPTION: This code snippet demonstrates how a WooCommerce payment gateway class (Simplify Commerce) is initialized with support for various features including subscriptions, refunds, and pre-orders. The supported features are defined in the '$this->supports' array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/check_payment_method_support.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass WC_Gateway_Simplify_Commerce extends WC_Payment_Gateway {    \n\n/**      * Constructor   */\n    public function __construct() {\n        $this->id\n                 = 'simplify_commerce';\n        $this->method_title\n       = __( 'Simplify Commerce', 'woocommerce' );\n        $this->method_description = __( 'Take payments via Simplify Commerce - uses simplify.js to create card tokens and the Simplify Commerce SDK. Requires SSL when sandbox is disabled.', 'woocommerce' );\n        $this->has_fields         = true;\n        $this->supports           = array(\n            'subscriptions',\n            'products',\n            'subscription_cancellation',\n            'subscription_reactivation',\n            'subscription_suspension',\n            'subscription_amount_changes',\n            'subscription_payment_method_change',\n            'subscription_date_changes',\n            'default_credit_card_form',\n            'refunds',\n            'pre-orders'\n        );    \n```\n\n----------------------------------------\n\nTITLE: Using Product Category Data Store in WooCommerce (JavaScript)\nDESCRIPTION: This snippet demonstrates how to import the experimental product categories store name from the WooCommerce data package and use React hooks to dispatch a createProductCategory action. It requires dependencies from the @woocommerce/data and @wordpress/data packages and should be used within a React component. The actions object allows category creation by passing a category object (e.g., with a name property); the function does not return a value but triggers an asynchronous request to the REST API for product category creation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/product-categories/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EXPERIMENTAL_PRODUCT_CATEGORIES_STORE_NAME } from '@woocommerce/data';\\nimport { useDispatch } from '@wordpress/data';\\n\\nfunction Component() {\\n\\tconst actions = useDispatch(\\n\\t\\tEXPERIMENTAL_PRODUCT_CATEGORIES_STORE_NAME\\n\\t);\\n\\tactions.createProductCategory( { name: 'test' } );\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Forced Checkout Block with Locking (JSON)\nDESCRIPTION: Expands the block metadata to include an 'attributes' section with a 'lock' property that defines the block as non-removable and non-movable. Setting 'remove' and 'move' to true ensures merchants cannot accidentally alter the presence or position of this block in the checkout flow. Useful for blocks that must appear unconditionally (e.g., essential checkout actions).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"woocommerce/checkout-actions-block\",\n\t\"title\": \"Actions\",\n\t\"description\": \"Allow customers to place their order.\",\n\t\"category\": \"woocommerce\",\n\t\"parent\": [ \"woocommerce/checkout-fields-block\" ],\n\t\"attributes\": {\n\t\t\"lock\": {\n\t\t\t\"type\": \"object\",\n\t\t\t\"default\": {\n\t\t\t\t\"remove\": true,\n\t\t\t\t\"move\": true\n\t\t\t}\n\t\t}\n\t}\n\t// ...snip\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ListItem Component in React (JSX)\nDESCRIPTION: Demonstrates the fundamental implementation of the `ListItem` component in a React application. It shows how to wrap child content (e.g., text 'Your content') within the `ListItem` tags. This component applies basic styling to the enclosed list item.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/list-item/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ListItem>\n    Your content\n</ListItem>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Payment Token Type in PHP\nDESCRIPTION: Demonstrates how to create a custom payment token type by extending the WC_Payment_Token class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass WC_Payment_Token_eCheck extends WC_Payment_Token {\n\n    /** @protected string Token Type String */\n    protected $type = 'eCheck';\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Order Refund via CLI\nDESCRIPTION: Creates a new refund for a specific WooCommerce order identified by `order_id`. Requires specifying the refund `amount`. Optional parameters include `reason`, `refunded_by` user ID, `meta_data`, `line_items`. The `--api_refund` flag triggers the payment gateway API for the refund process. Use `--porcelain` to output only the new refund ID on success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order_refund create <order_id>\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Report Page in PHP for WooCommerce Analytics\nDESCRIPTION: This PHP snippet demonstrates how to register a new report page in the WooCommerce Analytics menu. It adds a menu item by hooking into the 'woocommerce_analytics_report_menu_items' filter and defining the report's ID, title, parent menu, and path.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/analytics/report/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction register_page( $report_pages ) {\n\t$report_pages[] = array(\n\t\t'id'     => 'extension-example',\n\t\t'title'  => __( 'Example', 'plugin-domain' ),\n\t\t'parent' => 'woocommerce-analytics',\n\t\t'path'   => '/analytics/example',\n\t);\n\treturn $report_pages;\n}\n\nadd_filter( 'woocommerce_analytics_report_menu_items', 'register_page' );\n```\n\n----------------------------------------\n\nTITLE: Extending WooCommerce Payment Integration - PHP\nDESCRIPTION: Demonstrates how to create a new payment method integration for WooCommerce by subclassing the Automattic\\WooCommerce\\Blocks\\Payments\\Integrations\\AbstractPaymentMethodType class in PHP. This class registers payment method assets and provides the server-side representation required for Store API and Checkout block registration. Requires WooCommerce Blocks installed and available, and the developer should separately implement the Payment Gateway API for processing. The class expects you to override necessary methods as required by your payment method logic.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// Server Side Integration for Payment Methods in WooCommerce\n// Create a subclass for your payment method:\nclass My_Payment_Method extends Automattic\\WooCommerce\\Blocks\\Payments\\Integrations\\AbstractPaymentMethodType {\n    // Implement necessary methods here.\n    // For example:\n    // public function initialize() {\n    //     // initialization logic\n    // }\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Headers Structure for WooCommerce Table Components in JavaScript\nDESCRIPTION: An array of column header objects with properties defining how table columns should behave, display, and sort. Includes settings for default sorting, alignment, numeric values, sortability, and accessibility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  defaultSort: Boolean, // Boolean, true if this column is the default for sorting\n  defaultOrder: String, // String, asc|desc if this column is the default for sorting\n  isLeftAligned: Boolean, // Boolean, true if this column should be aligned to the left\n  isNumeric: Boolean, // Boolean, true if this column is a number value\n  isSortable: Boolean, // Boolean, true if this column is sortable\n  key: String, // The API parameter name for this column\n  label: ReactNode, // The display label for this column\n  required: Boolean, // Boolean, true if this column should always display in the table\n  screenReaderLabel: String // The label used for screen readers for this column\n}\n```\n\n----------------------------------------\n\nTITLE: WP-CLI Tool List Output Table in Bash\nDESCRIPTION: This output snippet illustrates the tabular response from running 'wp wc tool list', listing each system tool's ID, name, corresponding action, and descriptive details. The output is formatted as a table for quick visual reference and troubleshooting, making it easy to match IDs to their functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n+----------------------------+----------------------------------+-------------------------------+-----------------------------------------------------------------------------------+\\n| id                         | name                             | action                        | description                                                                       |\\n+----------------------------+----------------------------------+-------------------------------+-----------------------------------------------------------------------------------+\\n| clear_transients           | WC transients                    | Clear transients              | This tool will clear the product/shop transients cache.                           |\\n| clear_expired_transients   | Expired transients               | Clear expired transients      | This tool will clear ALL expired transients from WordPress.                       |\\n| delete_orphaned_variations | Orphaned variations              | Delete orphaned variations    | This tool will delete all variations which have no parent.                        |\\n| recount_terms              | Term counts                      | Recount terms                 | This tool will recount product terms - useful when changing your settings in a wa |\\n|                            |                                  |                               | y which hides products from the catalog.                                          |\\n| reset_roles                | Capabilities                     | Reset capabilities            | This tool will reset the admin, customer and shop_manager roles to default. Use t |\\n|                            |                                  |                               | his if your users cannot access all of the WooCommerce admin pages.               |\\n| clear_sessions             | Customer sessions                | Clear all sessions            | <strong class=\\\"red\\\">Note:</strong> This tool will delete all customer session dat |\\n|                            |                                  |                               | a from the database, including any current live carts.                            |\\n| install_pages              | Install WooCommerce pages        | Install pages                 | <strong class=\\\"red\\\">Note:</strong> This tool will install all the missing WooComm |\\n|                            |                                  |                               | erce pages. Pages already defined and set up will not be replaced.                |\\n| delete_taxes               | Delete all WooCommerce tax rates | Delete ALL tax rates          | <strong class=\\\"red\\\">Note:</strong> This option will delete ALL of your tax rates, |\\n|                            |                                  |                               |  use with caution.                                                                |\\n| reset_tracking             | Reset usage tracking settings    | Reset usage tracking settings | This will reset your usage tracking settings, causing it to show the opt-in banne |\\n|                            |                                  |                               | r again and not sending any data.                                                 |\\n+----------------------------+----------------------------------+-------------------------------+-----------------------------------------------------------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Creating D3 Base Component in React - JavaScript\nDESCRIPTION: This conceptual snippet illustrates the design of a React base component that integrates D3.js for dynamic chart rendering. It sets up core responsibilities such as mounting/unmounting root elements, reacting to resize and prop changes, and accepting callbacks for chart calculations (getParams) and drawing (drawChart). Dependencies include React, D3.js, and appropriate event handler setup. The main props allow passing a CSS class name, a parameter calculation function, and a drawing function; expected outputs are SVG-based charts in a controlled div. Implementation should ensure correct cleanup and efficient re-rendering on updates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/chart/d3chart/d3base/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Responsible for integrating D3 with React lifecycles\n//\n// Props:\n// - className: string to apply to parent div\n// - getParams(node): function to compute parameters for drawing (invoked before each render)\n//      - svg: the parent div node (to calculate size)\n// - drawChart(svg, params): function to render the SVG chart\n//      - svg: the base SVG node\n//      - params: properties returned from getParams\n//\n// Handles:\n// - Mounting/unmounting of div and svg containers\n// - Window resize handling\n// - Re-renders when props change\n\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Accordion Item Block Configuration\nDESCRIPTION: Block configuration for individual Accordion items that combine a header and expandable panel. Supports color, layout, and spacing customization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/accordion/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n-   **Name:** woocommerce/accordion-item\n-   **Experimental:** true\n-   **Category:** design\n-   **Parent:** woocommerce/accordion-group\n-   **Allowed Blocks:** woocommerce/accordion-header, woocommerce/accordion-panel\n-   **Supports:** align (full, wide), color (background, gradient, text), interactivity, layout, shadow, spacing (blockGap, margin)\n-   **Attributes:** openByDefault\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Report Component in JavaScript for WooCommerce Analytics\nDESCRIPTION: This JavaScript snippet shows how to add a custom report component to WooCommerce Analytics. It uses the 'woocommerce_admin_reports_list' filter to register a new report by specifying the report path, title, React component, and navigation arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/analytics/report/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\naddFilter(\n\t'woocommerce_admin_reports_list',\n\t'analytics/my-report',\n\t( pages ) => {\n\t\treturn [\n\t\t\t...pages,\n\t\t\t{\n\t\t\t\treport: 'example',\n\t\t\t\ttitle: 'My Example Extension',\n\t\t\t\tcomponent: Report,\n\t\t\t\tnavArgs: {\n\t\t\t\t\tid: 'my-example-report',\n\t\t\t\t},\n\t\t\t},\n\t\t];\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Titles with MenuTitle in React JSX Menus\nDESCRIPTION: This code demonstrates how to render static section titles or headings in a custom dropdown menu by using the MenuTitle component. The children prop takes any renderable node, typically a string, to label the menu section. There are no dependencies beyond React and MenuTitle. The component does not provide accessibility roles and should not be used as a replacement for semantic labeling via EllipsisMenu's label prop.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/ellipsis-menu/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuTitle>Display stats</MenuTitle>\n```\n\n----------------------------------------\n\nTITLE: React Component Event Subscription\nDESCRIPTION: Shows how to properly subscribe and unsubscribe to events within a React component using useEffect.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst MyComponent = ( { onCheckoutValidation } ) => {\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Field Data for WooCommerce Product Variation\nDESCRIPTION: This PHP function saves the custom 'New Stock Information' field data for a WooCommerce product variation. It sanitizes the input and updates the variation's meta data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\npublic function save_variation_field( $variation_id, $i  ) {\n\tif ( isset( $_POST['_new_stock_information'][$i] ) ) {\n\t\t$variation_product = wc_get_product( $variation_id );\n\t\t$variation_product->update_meta_data( '_new_stock_information', sanitize_text_field( $_POST['_new_stock_information'][$i] ) );\n\t\t$variation_product->save_meta_data();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering TablePlaceholder for Loading State in React (JSX)\nDESCRIPTION: This snippet showcases usage of the TablePlaceholder component to render a table-like placeholder while data is loading. It configures a caption and table headers, simulating the structure of the final data table. TablePlaceholder is useful in asynchronous data loading situations. Dependencies: TablePlaceholder component, React. Requires headers (array of columns) and a caption (string). Output is a loading placeholder. Number of rows defaults to 5 but can be overridden.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst headers = [\n\t{ key: 'month', label: 'Month' },\n\t{ key: 'orders', label: 'Orders' },\n\t{ key: 'revenue', label: 'Revenue' },\n];\n\n<TablePlaceholder\n\tcaption=\"Revenue last week\"\n\theaders={ headers }\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing the DateRange Component in React (JSX)\nDESCRIPTION: This JSX snippet shows how to use the `DateRange` component, which wraps `react-dates`. It demonstrates setting start (`after`, `afterText`) and end (`before`, `beforeText`) date properties, handling state updates with `onUpdate`, specifying the date format (`shortDateFormat`), controlling the initially focused input (`focusedInput`), and providing a custom date validation function (`isInvalidDate`) using moment.js.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/calendar/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DateRange\n\tafter={ after }\n\tafterText={ afterText }\n\tbefore={ before }\n\tbeforeText={ beforeText }\n\tonUpdate={ ( update ) => setState( update ) }\n\tshortDateFormat=\"MM/DD/YYYY\"\n\tfocusedInput=\"startDate\"\n\tisInvalidDate={ ( date ) =>\n\t\t// not a future date\n\t\tmoment().isBefore( moment( date ), 'date' )\n\t}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using @woocommerce/e2e-utils in a Test (JavaScript)\nDESCRIPTION: This example demonstrates importing and using utilities like `shopper`, `merchant`, and `createSimpleProduct` from `@woocommerce/e2e-utils` within a JavaScript end-to-end test suite (e.g., using Jest and Playwright). It shows setting up a test (`describe`), performing actions before tests (`beforeAll`), and writing a specific test case (`it`) that uses the `shopper` utility to navigate and the Playwright `expect` function to assert page content. Requires a test runner environment and the `@woocommerce/e2e-utils` package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport {\n\tshopper,\n\tmerchant,\n\tcreateSimpleProduct\n} from '@woocommerce/e2e-utils';\n\ndescribe( 'Cart page', () => {\n\tbeforeAll( async () => {\n\t\tawait createSimpleProduct();\n\t} );\n\n\tit( 'should display no item in the cart', async () => {\n\t\tawait shopper.goToCart();\n\t\tawait expect( page ).toMatchElement( '.cart-empty', { text: 'Your cart is currently empty.' } );\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Class in PHP\nDESCRIPTION: This snippet defines the main WooCommerce class, which serves as the core of the WooCommerce plugin. It includes properties for version, plugin file, and various internal objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/PREVIOUS_CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nclass WooCommerce {\n\n\t/**\n\t * WooCommerce version.\n\t *\n\t * @var string\n\t */\n\tpublic $version = '7.8.0';\n\n\t/**\n\t * The single instance of the class.\n\t *\n\t * @var WooCommerce\n\t * @since 2.1\n\t */\n\tprotected static $_instance = null;\n\n\t/**\n\t * Main WooCommerce Instance.\n\t *\n\t * Ensures only one instance of WooCommerce is loaded or can be loaded.\n\t *\n\t * @since 2.1\n\t * @static\n\t * @see WC()\n\t * @return WooCommerce - Main instance.\n\t */\n\tpublic static function instance() {\n\t\tif ( is_null( self::$_instance ) ) {\n\t\t\tself::$_instance = new self();\n\t\t}\n\t\treturn self::$_instance;\n\t}\n\n\t/**\n\t * Cloning is forbidden.\n\t *\n\t * @since 2.1\n\t */\n\tpublic function __clone() {\n\t\twc_doing_it_wrong( __FUNCTION__, __( 'Cloning is forbidden.', 'woocommerce' ), '2.1' );\n\t}\n\n\t/**\n\t * Unserializing instances of this class is forbidden.\n\t *\n\t * @since 2.1\n\t */\n\tpublic function __wakeup() {\n\t\twc_doing_it_wrong( __FUNCTION__, __( 'Unserializing instances of this class is forbidden.', 'woocommerce' ), '2.1' );\n\t}\n\n\t/**\n\t * Auto-load in-accessible properties on demand.\n\t *\n\t * @param mixed $key Key name.\n\t * @return mixed\n\t */\n\tpublic function __get( $key ) {\n\t\tif ( in_array( $key, array( 'payment_gateways', 'shipping', 'mailer', 'checkout' ), true ) ) {\n\t\t\treturn $this->$key();\n\t\t}\n\t}\n\n\t/**\n\t * WooCommerce Constructor.\n\t */\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->define_tables();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t}\n\n\t// ... (more methods)\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Accordion Group Block Configuration\nDESCRIPTION: Block configuration for the Accordion Group component that serves as a container for accordion items. Supports various alignment, background, color, and spacing options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/accordion/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   **Name:** woocommerce/accordion-group\n-   **Experimental:** true\n-   **Category:** design\n-   **Allowed Blocks:** woocommerce/accordion-item\n-   **Supports:** align (full, wide), background (backgroundImage, backgroundSize), color (background, gradient, text), interactivity, layout, shadow, spacing (blockGap, margin, padding)\n-   **Attributes:** allowedBlocks, autoclose, iconPosition\n```\n\n----------------------------------------\n\nTITLE: Filtering Options and Selecting a Value with SelectControl in React (JSX)\nDESCRIPTION: This snippet demonstrates initializing and using the SelectControl component in a React JSX context. The options array defines selectable items, and the SelectControl handles single selection with a controlled selected value via the onChange handler (setState). Required dependencies include React and the SelectControl component. Main parameters are label (input field label), options (list of selectable options), placeholder (search hint), and selected (selected value). The output is the filtered and selected value, limited to single selection in this example. The code expects integration into a React functional component and that SelectControl is available in the scope.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/select-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n\t{\n\t\tkey: 'apple',\n\t\tlabel: 'Apple',\n\t\tvalue: { id: 'apple' },\n\t},\n\t{\n\t\tkey: 'apricot',\n\t\tlabel: 'Apricot',\n\t\tvalue: { id: 'apricot' },\n\t},\n];\n\n<SelectControl\n\tlabel=\"Single value\"\n\tonChange={ ( selected ) => setState( { singleSelected: selected } ) }\n\toptions={ options }\n\tplaceholder=\"Start typing to filter options...\"\n\tselected={ singleSelected }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Task Data Store in JavaScript\nDESCRIPTION: Example of using WooCommerce data store to interact with task lists using React hooks. Shows how to access task lists and snooze tasks using the onboarding store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { onboardingStore } from '@woocommerce/data';\nimport { useSelect } from '@wordpress/data';\n\nconst { snoozeTask } = useDispatch( onboardingStore );\nconst { taskLists } = useSelect( ( select ) => {\n  const { getTaskLists } = select( onboardingStore );\n\n  return {\n    taskLists: getTaskLists(),\n  };\n} );\n```\n\n----------------------------------------\n\nTITLE: Using the woocommerce_add_cart_item Filter in PHP\nDESCRIPTION: This filter allows modification of cart item data when an item is being added to the cart. It matches the filter name used in WooCommerce core.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_add_cart_item', array $cart_item_data, string $cart_id )\n```\n\n----------------------------------------\n\nTITLE: Using esc_attr_x() Function for Contextual Attribute-Safe Translation in PHP\nDESCRIPTION: The esc_attr_x() function translates a string with gettext context, and escapes it for safe use in HTML attributes. This combines context-aware translation with attribute escaping.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = esc_attr_x( string $text, string $domain = 'default' );\n\n// Example\n$translation = esc_attr_x( 'Search', 'Search button text' 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating WooCommerce Activity Panel Inbox Notes - PHP Plugin Example\nDESCRIPTION: A complete plugin implementation demonstrating how to create, update, and remove inbox notes in WooCommerce's Activity Panel. Features include dynamic content generation, note status management, and proper cleanup on deactivation. Requires WooCommerce Admin package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/activity-panel-inbox.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: WooCommerce Activity Panel Inbox Example Plugin Two\n * Plugin URI: https://woocommerce.com/\n * Description: An example plugin.\n * Author: Automattic\n * Author URI: https://woocommerce.com/\n * Text Domain: wapi-example-plugin-two\n * Version: 1.0.0\n */\n \nuse Automattic\\WooCommerce\\Admin\\Notes\\Notes as Notes;\nuse Automattic\\WooCommerce\\Admin\\Notes\\Note as Note;\n\nclass WooCommerce_Activity_Panel_Inbox_Example_Plugin_Two {\n\tconst NOTE_NAME = 'wapi-example-plugin-two';\n\n\t/**\n\t * Adds a note to the merchant' inbox.\n\t */\n\tpublic static function add_or_update_activity_panel_inbox_note() {\n\t\tif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! class_exists( 'WC_Data_Store' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$data_store = WC_Data_Store::load( 'admin-note' );\n\n\t\t// First, see if we've already created our note so we don't do it again.\n\t\t$note_ids = $data_store->get_notes_with_name( self::NOTE_NAME );\n\t\tif ( empty( $note_ids ) ) {\n\t\t\t$note = new Note();\n\t\t\t$note->set_title( __( 'Domain Renewal Coming Up', 'wapi-example-plugin-two' ) );\n\t\t} else {\n\t\t\t$note = Notes::get_note( $note_ids[0] );\n\t\t}\n\n\t\t$expires_in_days = rand( 2, 365 );\n\t\t$note->set_content(\n\t\t\tsprintf(\n\t\t\t\t/* translators: a number of days, e.g. 100 */\n\t\t\t\t__( 'Your domain expires in %d days.', 'wapi-example-plugin-wto' ),\n\t\t\t\t$expires_in_days\n\t\t\t)\n\t\t);\n\t\t$note->set_content_data( (object) array(\n\t\t\t'expires_in_days'     => $expires_in_days,\n\t\t) );\n\n\t\t$note->set_type( Note::E_WC_ADMIN_NOTE_INFORMATIONAL );\n\t\t$note->set_name( self::NOTE_NAME );\n\t\t$note->set_layout('plain');\n\t\t$note->set_image('');\n\t\t$note->set_source( 'wapi-example-plugin-two' );\n\t\t// This example has no actions. A note can have 1 or 2 as well.\n\t\t$note->save();\n\t}\n\n\t/**\n\t * Removes any notes this plugin created.\n\t */\n\tpublic static function remove_activity_panel_inbox_notes() {\n\t\tif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tNotes::delete_notes_with_name( self::NOTE_NAME );\n\t}\n}\n\nfunction admin_init() {\n\tWooCommerce_Activity_Panel_Inbox_Example_Plugin_Two::add_or_update_activity_panel_inbox_note();\n}\nadd_action( 'admin_init', 'admin_init' );\n\nfunction wapi_example_two_deactivate() {\n\tWooCommerce_Activity_Panel_Inbox_Example_Plugin_Two::remove_activity_panel_inbox_notes();\n}\nregister_deactivation_hook( __FILE__, 'wapi_example_two_deactivate' );\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Total Label in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the 'totalLabel' filter to change the label of the total item in the footer of the Cart and Checkout blocks. It replaces the default 'Total' label with 'Deposit due today'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/totals-footer-item.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyTotalLabel = ( defaultValue, extensions, args ) => {\n\treturn 'Deposit due today';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\ttotalLabel: modifyTotalLabel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Accessing Query-State Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Query-State Store which holds arbitrary values indexed by context and key, often used for tracking query objects state in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { QUERY_STATE_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutFail Event in WooCommerce Payment Method Components (JavaScript)\nDESCRIPTION: This snippet shows how to subscribe to the onCheckoutFail event in a WooCommerce payment method component. It uses the useEffect hook from the WordPress element package to set up and clean up the event subscription.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onCheckoutFail } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutFail( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutFail ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Hooking into WooCommerce API Callback with PHP\nDESCRIPTION: This code snippet demonstrates how to add an action hook to handle WooCommerce API callbacks. It registers a custom function that will be executed when the callback URL is accessed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/woocommerce-plugin-api-callback.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_api_callback', 'your_callback_handler_function' );\n```\n\n----------------------------------------\n\nTITLE: Fetching Order ID from Checkout Store in JavaScript\nDESCRIPTION: Illustrates the usage of the getOrderId selector to obtain the WooCommerce order ID from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst orderId = store.getOrderId();\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_before_main_content Hook in PHP\nDESCRIPTION: Called before rendering the main content for a product. This hook is used with several functions including woocommerce_output_content_wrapper(), woocommerce_breadcrumb(), and WC_Structured_Data::generate_website_data().\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_before_main_content' )\n```\n\n----------------------------------------\n\nTITLE: Accessing Collections Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Collections Store which holds data indexed by namespace, model name, and query string in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { COLLECTIONS_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Adding a New Group to Product Editor Templates in PHP\nDESCRIPTION: This snippet demonstrates how to add a new group to product editor templates after an existing group. It uses the 'woocommerce_block_template_area_product-form_after_add_block_general' action hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/Features/ProductBlockEditor/ProductTemplates/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n\nfunction YOUR_PREFIX_add_group( BlockInterface $general_group ) {\n  $parent = $general_group->get_parent();\n\n  $parent->add_group(\n    [\n      'id'         => 'YOUR-PREFIX-group',\n      'order'      => $general_group->get_order() + 5,\n      'attributes' => [\n        'title' => __( 'My Group', 'YOUR-TEXT-DOMAIN' ),\n      ],\n    ]\n  );\n}\n\nadd_action( 'woocommerce_block_template_area_product-form_after_add_block_general', 'YOUR_PREFIX_add_group' );\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Block Styles with Global Styles in theme.json\nDESCRIPTION: This JSON snippet demonstrates how to customize the Product Price block styles by modifying the theme.json file. It shows how to change background color, text color, font style, and font weight for a specific WooCommerce block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/theming-woo-blocks.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"styles\": {\n\t\"blocks\": {\n\t\t\"woocommerce/product-price\": {\n\t\t\t\"color\": {\n\t\t\t\t\"background\": \"#00cc00\",\n\t\t\t\t\"text\": \"#fff\"\n\t\t\t},\n\t\t\t\"typography\": {\n\t\t\t\t\"fontStyle\": \"italic\",\n\t\t\t\t\"fontWeight\": \"700\"\n\t\t\t}\n\t\t}\n\t\t...\n\t}\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Responsive Container Styles for WooCommerce Checkout\nDESCRIPTION: Example of applying responsive styles based on container width classes for the Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/css-styling.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-checkout.is-medium,\n.wc-block-checkout.is-large {\n\tfont-size: 1.1em;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Block Type and Registering Pattern in WooCommerce\nDESCRIPTION: This PHP method initializes the block type and hooks the registration of the empty cart message block pattern into the WordPress lifecycle.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-FSE-templates.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprotected function initialize() {\n    parent::initialize();\n    add_action( 'wp_loaded', array( $this, 'register_empty_cart_message_block_pattern' ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dummy Order for Email Preview in WooCommerce (PHP)\nDESCRIPTION: This snippet shows how to modify the dummy WC_Order object used in email preview. It uses the 'woocommerce_email_preview_dummy_order' filter to change the currency of the order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_dummy_order', function( $order ) {\n    // Modify the dummy order object\n    $order->set_currency( 'EUR' );\n    return $order;\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering payment requirements callback in PHP\nDESCRIPTION: Code to register the payment requirements callback with WooCommerce Blocks API. This hooks into woocommerce_blocks_loaded to ensure the Store API is available before registering the callback.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/filtering-payment-methods.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_payment_requirements(\n    array(\n      'data_callback' => 'inject_payment_feature_requirements_for_cart_api',\n    )\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Customized CRUD Data Store in JavaScript\nDESCRIPTION: Shows how to build a data store with custom behavior by manually creating CRUD actions, selectors, and resolvers using `createActions`, `createSelectors`, and `createResolvers`. These generated components are then combined with custom reducers (`myReducer`), actions (`myActions`), and selectors (`mySelectors`) using `@wordpress/data`'s `registerStore` and `combineReducers` for greater flexibility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { createSelectors } from '../crud/selectors';\nimport { createResolvers } from '../crud/resolvers';\nimport { createActions } from '../crud/actions';\nimport { registerStore, combineReducers } from '@wordpress/data';\n\nconst dataStoreArgs = {\n    resourceName: 'MyThing',\n    pluralResourceName: 'MyThings',\n}\n\nconst crudActions = createActions( dataStoreArgs )\nconst crudSelectors = createSelectors( dataStoreArgs )\nconst crudResolvers = createResolvers( { ...dataStoreArgs, namespace: 'my/rest/namespace' } )\n\nregisterStore( 'my/custom/store', {\n\treducer: combineReducers( { reducer, myReducer } ),\n\tactions: { ...crudActions, myActions },\n\tcontrols,\n\tselectors: { ...crudSelectors, mySelectors },\n\tresolvers: { ...crudResolvers, myResolvers },\n} );\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Category Details in WooCommerce CLI\nDESCRIPTION: Command for getting details of a specific product category by its ID, with options for formatting and field selection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_38\n\nLANGUAGE: bash\nCODE:\n```\nwc product_cat get [id]\n```\n\n----------------------------------------\n\nTITLE: Using the Pill Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the `Pill` component in a JSX context. It shows how to render the component by placing the desired content (e.g., 'Content') between the opening and closing `<Pill>` tags. This component is likely part of a React-based UI library used within WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/pill/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Pill>Content</Pill>\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Validation Errors in JavaScript\nDESCRIPTION: Example showing how to set multiple validation errors at once using the setValidationErrors action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = wp.data;\nconst { setValidationErrors } = dispatch( validationStore );\n\nsetValidationErrors( {\n\t'billing-first-name': {\n\t\tmessage: 'First name is required.',\n\t\thidden: false,\n\t},\n\t'billing-last-name': {\n\t\tmessage: 'Last name is required.',\n\t\thidden: false,\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering a WooCommerce Block Type using JavaScript\nDESCRIPTION: Demonstrates how to register a WooCommerce block type using the `registerWooBlockType` function from `@woocommerce/block-templates`. It requires importing the function, block metadata (typically from `block.json`), and the block's Edit component. The function is called with an object containing the block's name, metadata, and settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/block-templates/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { registerWooBlockType } from '@woocommerce/block-templates';\n\nimport metadata from './block.json';\nimport { Edit } from './edit';\n\nregisterWooBlockType( {\n\tname: metadata.name,\n\tmetadata: metadata,\n\tsettings: {\n\t\tedit: Edit,\n\t},\n} );\n```\n```\n\n----------------------------------------\n\nTITLE: Unscheduling Actions in WooCommerce Extension (PHP)\nDESCRIPTION: Demonstrates how to unschedule all actions for a specific hook, arguments, and group using Action Scheduler when an extension is deactivated or uninstalled.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-deactivation-and-uninstallation.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nas_unschedule_all_actions( $hook, $args, $group );\n```\n\n----------------------------------------\n\nTITLE: Accessing WooCommerce Blocks API via Window Global\nDESCRIPTION: Example of accessing the WooCommerce Blocks API through a window global object. This approach is used for accessing the checkout filters registration function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extensibility-in-blocks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n```\n\n----------------------------------------\n\nTITLE: Sample POT File Structure for WooCommerce Blocks\nDESCRIPTION: Example of a POT (Portable Object Template) file structure showing header information and string entries for translation. This template contains all original English strings and is automatically generated by GlotPress when a new plugin version is released.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_0\n\nLANGUAGE: pot\nCODE:\n```\n\"Project-Id-Version: WooCommerce Blocks\\n\"\n\"POT-Creation-Date: 2022-05-25 19:01+0700\\n\"\n\"PO-Revision-Date: 2022-05-25 19:00+0700\\n\"\n\"Last-Translator: \\n\"\n\"Language-Team: \\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=INTEGER; plural=EXPRESSION;\\n\"\n\"X-Generator: Poedit 3.0.1\\n\"\n\"X-Poedit-Basepath: ..\\n\"\n\"X-Poedit-Flags-xgettext: --add-comments=translators:\\n\"\n\"X-Poedit-WPHeader: woocommerce-gutenberg-products-block.php\\n\"\n\"X-Poedit-SourceCharset: UTF-8\\n\"\n\"X-Poedit-KeywordsList: __;_e;_n:1,2;_x:1,2c;_ex:1,2c;_nx:4c,1,2;esc_attr__;\"\n\"esc_attr_e;esc_attr_x:1,2c;esc_html__;esc_html_e;esc_html_x:1,2c;_n_noop:1,2;\"\n\"_nx_noop:3c,1,2;__ngettext_noop:1,2\\n\"\n\"X-Poedit-SearchPath-0: .\\n\"\n\"X-Poedit-SearchPathExcluded-0: *.min.js\\n\"\n\"X-Poedit-SearchPathExcluded-1: vendor\\n\"\n\"X-Poedit-SearchPathExcluded-2: node_modules\\n\"\n\n\"#: assets/js/blocks/handpicked-products/block.js:42\"\n\"#: assets/js/blocks/product-best-sellers/block.js:34\"\n\"#: assets/js/blocks/product-category/block.js:157\"\n\"#: assets/js/blocks/product-new/block.tsx:36\"\n\"#: assets/js/blocks/product-on-sale/block.js:52\"\n\"#: assets/js/blocks/product-tag/block.js:121\"\n\"#: assets/js/blocks/product-top-rated/block.js:36\"\n\"#: assets/js/blocks/products-by-attribute/block.js:46\"\n\"#: assets/js/blocks/single-product/edit/layout-editor.js:56\"\n\"msgid \"Layout\"\"\n\"msgstr \"\"\n\n\"[...]\"\n```\n\n----------------------------------------\n\nTITLE: Advanced Field Query for WooCommerce Orders Based on Total or Shipping Total in PHP\nDESCRIPTION: This snippet demonstrates a more complex use of field_query, retrieving orders where either the total or shipping total is less than 5.0. It showcases the ability to use comparison operators and combine conditions with OR logic.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$orders = wc_get_orders(\n    array(\n        'field_query' => array(\n            'relation' => 'OR',\n            array(\n                'field'   => 'total',\n                'value'   => '5.0',\n                'compare' => '<',\n            ),\n            array(\n                'field'   => 'shipping_total',\n                'value'   => '5.0',\n                'compare' => '<',\n            ),\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Remove Coupon Notice in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This advanced example shows how to use the 'showRemoveCouponNotice' filter to conditionally hide the remove coupon notice in the WooCommerce checkout. It hides the notice only for a specific coupon code ('10off').\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/coupons.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyShowRemoveCouponNotice = ( defaultValue, extensions, args ) => {\n\tif ( args?.couponCode === '10off' ) {\n\t\treturn false;\n\t}\n\n\treturn defaultValue;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tshowRemoveCouponNotice: modifyShowRemoveCouponNotice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Making Phone Number Optional in WooCommerce Checkout (PHP)\nDESCRIPTION: This code snippet makes the phone number field not required in the WooCommerce checkout form. It uses the 'woocommerce_billing_fields' filter to modify the 'required' property of the billing phone field.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_billing_fields', 'wc_npr_filter_phone', 10, 1 );\n\nfunction wc_npr_filter_phone( $address_fields ) {\n\t$address_fields['billing_phone']['required'] = false;\n\treturn $address_fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Product with Category in JavaScript\nDESCRIPTION: This function creates a simple product with specified name, price, and category. It returns the product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateSimpleProductWithCategory(name, price, categoryName)\n```\n\n----------------------------------------\n\nTITLE: Importing Product Collection Registry - TypeScript\nDESCRIPTION: Shows how to import the experimental product collection registration function using webpack configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { __experimentalRegisterProductCollection } from \"@woocommerce/blocks-registry\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items Pending Delete in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the getItemsPendingDelete selector to get an array of item keys for items that are currently being deleted.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst itemsPendingDelete = store.getItemsPendingDelete();\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Validation Against Another Field Value in PHP\nDESCRIPTION: Shows a validation rule for a WooCommerce field (e.g., alternative email) using a PHP array representing a JSON schema fragment. This rule validates that the input is a string in email format using the `format` keyword. Additionally, it uses the `not` and `const` keywords combined with a `$data` reference (JSON Pointer `0/customer/billing_address/email`) to ensure the entered value is different from the customer's primary billing email address. A custom `errorMessage` is included.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n'validation' => [\n\t\"type\" => \"string\",\n\t\"format\" => \"email\",\n\t\"not\" => [\n\t\t\"const\" => [\"$data\", \"0/customer/billing_address/email\"]\n\t]\n\t\"errorMessage\" => \"Please enter a valid VAT code with 2 letters for country code and 8-12 numbers.\"\n]\n```\n\n----------------------------------------\n\nTITLE: Saving Settings for Shipping Methods in WooCommerce\nDESCRIPTION: Hook implementation for saving shipping method settings. Similar to the payment gateway hook, but used specifically for shipping method extensions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_update_options_shipping_methods', array( $this, 'process_admin_options' ) );\n```\n\n----------------------------------------\n\nTITLE: Conditionally Hiding Apply Coupon Notice in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This advanced example demonstrates how to use the 'showApplyCouponNotice' filter to conditionally hide the apply coupon notice in the WooCommerce checkout. It hides the notice only for a specific coupon code ('10off').\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/coupons.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyShowApplyCouponNotice = ( defaultValue, extensions, args ) => {\n\tif ( args?.couponCode === '10off' ) {\n\t\treturn false;\n\t}\n\n\treturn defaultValue;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tshowApplyCouponNotice: modifyShowApplyCouponNotice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to WooCommerce Product Variation\nDESCRIPTION: This PHP function adds a custom text input field to a WooCommerce product variation. It uses the woocommerce_wp_text_input function to create a full-width text input for 'New Stock Information'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic function add_variation_field( $loop, $variation_data, $variation ) {\n\t$variation_product = wc_get_product( $variation->ID );\n\n\twoocommerce_wp_text_input(\n\t\tarray(\n\t\t\t'id' => '\\_new_stock_information' . '[' . $loop . ']',\n\t\t\t'label' => \\_\\_( 'New Stock Information', 'woo_product_field' ),\n\t\t\t'wrapper_class' => 'form-row form-row-full',\n\t\t\t'value' => $variation_product->get_meta( '\\_new_stock_information' )\n\t\t)\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Using the woocommerce_add_cart_item_data Filter in PHP\nDESCRIPTION: This filter allows modification of cart item data for add to cart requests. It matches the filter name used in WooCommerce core.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_add_cart_item_data', array $cart_item_data, integer $product_id, integer $variation_id, integer $quantity )\n```\n\n----------------------------------------\n\nTITLE: Creating a wp-admin Link with the Link Component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to use the `Link` component to create a hyperlink. The `href` prop specifies the target path ('edit.php?post_type=shop_coupon'), and the `type='wp-admin'` prop ensures the correct wp-admin URL prefix is automatically added based on the environment. The text 'Coupons' will be displayed as the link's clickable text. This component likely needs to be imported from a WooCommerce UI library.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/link/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Link\n\thref=\"edit.php?post_type=shop_coupon\"\n\ttype=\"wp-admin\"\n>\n\tCoupons\n</Link>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Shipping Phone Field in WooCommerce Checkout (PHP)\nDESCRIPTION: This code adds a custom shipping phone field to the WooCommerce checkout form. It also displays the field value on the order edit page in the admin area. The field is added using the 'woocommerce_checkout_fields' filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n     $fields['shipping']['shipping_phone'] = array(\n        'label'       => __( 'Phone', 'woocommerce' ),\n        'placeholder' => _x( 'Phone', 'placeholder', 'woocommerce' ),\n        'required'    => false,\n        'class'       => array( 'form-row-wide' ),\n        'clear'       => true\n     );\n\n     return $fields;\n}\n\n/**\n * Display field value on the order edit page\n */\nadd_action( 'woocommerce_admin_order_data_after_shipping_address', 'my_custom_checkout_field_display_admin_order_meta', 10, 1 );\n\nfunction my_custom_checkout_field_display_admin_order_meta($order){\n    echo '<p><strong>'. esc_html__( 'Phone From Checkout Form' ) . ':</strong> ' . esc_html( $order->get_meta( '_shipping_phone', true ) ) . '</p>';\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Number Product Field using ES Modules in JavaScript\nDESCRIPTION: This snippet illustrates the standard usage of `registerProductField` within a module-based JavaScript environment. It imports `registerProductField` from `@woocommerce/components` and `__` from `@wordpress/i18n`. It then registers a 'number' field, defining its name and a `render` function that returns an `<InputControl type=\"number\" />` React component. This requires `@woocommerce/components` and potentially `@wordpress/i18n` as dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/product-fields/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { __ } from '@wordpress/i18n';\nimport { registerProductField } from '@woocommerce/components';\n\nregisterProductField( 'number', {\n\tname: 'number',\n\trender: () => {\n\t\treturn <InputControl type=\"number\" />;\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Comparing Simple and Field Query Approaches for WooCommerce Order Retrieval in PHP\nDESCRIPTION: This example shows two equivalent ways to query WooCommerce orders: using direct order properties and using the new field_query argument. It retrieves orders with specific billing first name and order key.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/wc-order-query-improvements.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$orders = wc_get_orders(\n    array(\n        'billing_first_name' => 'Lauren',\n        'order_key'          => 'my_order_key',\n    )\n);\n\n$orders = wc_get_orders(\n    array(\n        'field_query' => array(\n            array(\n                'field' => 'billing_first_name',\n                'value' => 'Lauren'\n            ),\n            array(\n                'field' => 'order_key',\n                'value' => 'my_order_key',\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Checking if Coupon is Being Applied in WooCommerce (JavaScript)\nDESCRIPTION: Example of how to determine if a coupon is currently being applied to the cart. Returns a boolean value indicating whether a coupon application is in progress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_30\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst isApplyingCoupon = store.isApplyingCoupon();\n```\n\n----------------------------------------\n\nTITLE: Checking Payment Processing Status\nDESCRIPTION: Example demonstrating how to check if the payment is currently processing using the isPaymentProcessing selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst isPaymentProcessing = store.isPaymentProcessing();\n```\n\n----------------------------------------\n\nTITLE: Implementing the Product Categories Taxonomy Field in WooCommerce\nDESCRIPTION: This snippet shows how to implement the product-taxonomy-field block specifically for product categories. It demonstrates how to add the block to a product catalog section with all necessary attributes configured for the categories taxonomy.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/taxonomy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$product_catalog_section->add_block(\n  [\n    'id'         => 'product-categories',\n    'blockName'  => 'woocommerce/product-taxonomy-field',\n    'order'      => 10,\n    'attributes' => [\n      'slug'               => 'product_cat',\n      'property'           => 'categories',\n      'label'              => __( 'Categories', 'woocommerce' ),\n      'createTitle'        => __( 'Create new category', 'woocommerce' ),\n      'dialogNameHelpText' => __( 'Shown to customers on the product page.', 'woocommerce' ),\n      'parentTaxonomyText' => __( 'Parent category', 'woocommerce' ),\n    ],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting Total Price in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This code snippet shows how to use the 'totalValue' filter to format the total price in the footer of the Cart and Checkout blocks. It modifies the default format to 'Pay <price/> now', where <price/> is a placeholder for the actual price.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/totals-footer-item.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyTotalsPrice = ( defaultValue, extensions, args, validation ) => {\n\treturn 'Pay <price/> now';\n};\n\nregisterCheckoutFilters( 'my-extension', {\n\ttotalValue: modifyTotalsPrice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Navigating to Extension Directory\nDESCRIPTION: Command to change directory into the newly created extension folder for further development and setup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/building-your-first-extension.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Adding a Customer Note to WooCommerce Order with WP-CLI in Bash\nDESCRIPTION: This Bash command adds a customer-visible note to a specific order using WP-CLI. Requires WooCommerce, WP-CLI, the order ID, --user, --note text, and --customer_note flag. On success, returns the new order_note ID. Useful for CRM and post-order communication automation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc order_note create 355 --note=\"Great repeat customer\" --customer_note=true --user=1\n```\n\n----------------------------------------\n\nTITLE: Implementing BEM Naming Convention in WooCommerce CSS\nDESCRIPTION: Demonstrates the proper implementation of BEM (Block Element Modifier) methodology in WooCommerce CSS, including examples of blocks, nested blocks, elements, and modifiers. All classes are prefixed with 'woocommerce-' to prevent conflicts with WordPress core and other plugins.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/css-sass-naming-conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Block */\n.woocommerce-loop {}\n\n/* Nested block */\n.woocommerce-loop-product {}\n\n/* Modifier */\n.woocommerce-loop-product--sale {}\n\n/* Element */\n.woocommerce-loop-product__link {}\n\n/* Element */\n.woocommerce-loop-product__button-add-to-cart {}\n\n/* Modifier */\n.woocommerce-loop-product__button-add-to-cart--added {}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Cart Response JSON Structure\nDESCRIPTION: Comprehensive JSON schema showing the structure of a WooCommerce cart response. Includes line items with product details, applied coupons, shipping rates, address information, and cart totals. Contains nested objects for prices, taxes, and shipping calculations with currency formatting details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"items\": [\n\t\t{\n\t\t\t\"key\": \"a5771bce93e200c36f7cd9dfd0e5deaa\",\n\t\t\t\"id\": 38,\n\t\t\t\"quantity\": 1,\n\t\t\t\"quantity_limits\": {\n\t\t\t\t\"minimum\": 1,\n\t\t\t\t\"maximum\": 9999,\n\t\t\t\t\"multiple_of\": 1,\n\t\t\t\t\"editable\": true\n\t\t\t},\n\t\t\t\"name\": \"Beanie with Logo\",\n\t\t\t\"short_description\": \"<p>This is a simple product.</p>\",\n\t\t\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\t\t\"sku\": \"Woo-beanie-logo\",\n\t\t\t\"low_stock_remaining\": null,\n\t\t\t\"backorders_allowed\": false,\n\t\t\t\"show_backorder_badge\": false,\n\t\t\t\"sold_individually\": false,\n\t\t\t\"permalink\": \"https://local.wordpress.test/product/beanie-with-logo/\",\n\t\t\t\"images\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 61,\n\t\t\t\t\t\"src\": \"https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1.jpg\",\n\t\t\t\t\t\"thumbnail\": \"https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-450x450.jpg\",\n\t\t\t\t\t\"srcset\": \"https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1.jpg 800w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-450x450.jpg 450w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-100x100.jpg 100w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-600x600.jpg 600w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-300x300.jpg 300w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-150x150.jpg 150w, https://local.wordpress.test/wp-content/uploads/2023/03/beanie-with-logo-1-768x768.jpg 768w\",\n\t\t\t\t\t\"sizes\": \"(max-width: 800px) 100vw, 800px\",\n\t\t\t\t\t\"name\": \"beanie-with-logo-1.jpg\",\n\t\t\t\t\t\"alt\": \"\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"variation\": [],\n\t\t\t\"item_data\": [],\n\t\t\t\"prices\": {\n\t\t\t\t\"price\": \"1800\",\n\t\t\t\t\"regular_price\": \"2000\",\n\t\t\t\t\"sale_price\": \"1800\",\n\t\t\t\t\"price_range\": null,\n\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"raw_prices\": {\n\t\t\t\t\t\"precision\": 6,\n\t\t\t\t\t\"price\": \"18000000\",\n\t\t\t\t\t\"regular_price\": \"20000000\",\n\t\t\t\t\t\"sale_price\": \"18000000\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"totals\": {\n\t\t\t\t\"line_subtotal\": \"1800\",\n\t\t\t\t\"line_subtotal_tax\": \"180\",\n\t\t\t\t\"line_total\": \"1530\",\n\t\t\t\t\"line_total_tax\": \"153\",\n\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t},\n\t\t\t\"catalog_visibility\": \"visible\",\n\t\t\t\"extensions\": {}\n\t\t},\n\t\t{\n\t\t\t\"key\": \"b6d767d2f8ed5d21a44b0e5886680cb9\",\n\t\t\t\"id\": 22,\n\t\t\t\"quantity\": 1,\n\t\t\t\"quantity_limits\": {\n\t\t\t\t\"minimum\": 1,\n\t\t\t\t\"maximum\": 9999,\n\t\t\t\t\"multiple_of\": 1,\n\t\t\t\t\"editable\": true\n\t\t\t},\n\t\t\t\"name\": \"Belt\",\n\t\t\t\"short_description\": \"<p>This is a simple product.</p>\",\n\t\t\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\t\t\"sku\": \"woo-belt\",\n\t\t\t\"low_stock_remaining\": null,\n\t\t\t\"backorders_allowed\": false,\n\t\t\t\"show_backorder_badge\": false,\n\t\t\t\"sold_individually\": false,\n\t\t\t\"permalink\": \"https://local.wordpress.test/product/belt/\",\n\t\t\t\"images\": [\n\t\t\t\t{\n\t\t\t\t\t\"id\": 51,\n\t\t\t\t\t\"src\": \"https://local.wordpress.test/wp-content/uploads/2023/03/belt-2.jpg\",\n\t\t\t\t\t\"thumbnail\": \"https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-450x450.jpg\",\n\t\t\t\t\t\"srcset\": \"https://local.wordpress.test/wp-content/uploads/2023/03/belt-2.jpg 801w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-450x450.jpg 450w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-100x100.jpg 100w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-600x600.jpg 600w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-300x300.jpg 300w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-150x150.jpg 150w, https://local.wordpress.test/wp-content/uploads/2023/03/belt-2-768x768.jpg 768w\",\n\t\t\t\t\t\"sizes\": \"(max-width: 801px) 100vw, 801px\",\n\t\t\t\t\t\"name\": \"belt-2.jpg\",\n\t\t\t\t\t\"alt\": \"\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"variation\": [],\n\t\t\t\"item_data\": [],\n\t\t\t\"prices\": {\n\t\t\t\t\"price\": \"5500\",\n\t\t\t\t\"regular_price\": \"6500\",\n\t\t\t\t\"sale_price\": \"5500\",\n\t\t\t\t\"price_range\": null,\n\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\"currency_suffix\": \"\",\n\t\t\t\t\"raw_prices\": {\n\t\t\t\t\t\"precision\": 6,\n\t\t\t\t\t\"price\": \"55000000\",\n\t\t\t\t\t\"regular_price\": \"65000000\",\n\t\t\t\t\t\"sale_price\": \"55000000\"\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"totals\": {\n\t\t\t\t\"line_subtotal\": \"5500\",\n\t\t\t\t\"line_subtotal_tax\": \"550\",\n\t\t\t\t\"line_total\": \"4675\",\n\t\t\t\t\"line_total_tax\": \"468\",\n\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t},\n\t\t\t\"catalog_visibility\": \"visible\",\n\t\t\t\"extensions\": {}\n\t\t}\n\t],\n\t\"coupons\": [\n\t\t{\n\t\t\t\"code\": \"test\",\n\t\t\t\"discount_type\": \"percent\",\n\t\t\t\"totals\": {\n\t\t\t\t\"total_discount\": \"1095\",\n\t\t\t\t\"total_discount_tax\": \"109\",\n\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t}\n\t\t}\n\t],\n\t\"fees\": [],\n\t\"totals\": {\n\t\t\"total_items\": \"7300\",\n\t\t\"total_items_tax\": \"730\",\n\t\t\"total_fees\": \"0\",\n\t\t\"total_fees_tax\": \"0\",\n\t\t\"total_discount\": \"1095\",\n\t\t\"total_discount_tax\": \"110\",\n\t\t\"total_shipping\": \"1300\",\n\t\t\"total_shipping_tax\": \"130\",\n\t\t\"total_price\": \"8256\",\n\t\t\"total_tax\": \"751\",\n\t\t\"tax_lines\": [\n\t\t\t{\n\t\t\t\t\"name\": \"Tax\",\n\t\t\t\t\"price\": \"751\",\n\t\t\t\t\"rate\": \"10%\"\n\t\t\t}\n\t\t],\n\t\t\"currency_code\": \"USD\",\n\t\t\"currency_symbol\": \"$\",\n\t\t\"currency_minor_unit\": 2,\n\t\t\"currency_decimal_separator\": \".\",\n\t\t\"currency_thousand_separator\": \",\",\n\t\t\"currency_prefix\": \"$\",\n\t\t\"currency_suffix\": \"\"\n\t},\n\t\"shipping_address\": {\n\t\t\"first_name\": \"John\",\n\t\t\"last_name\": \"Doe\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"Hello street\",\n\t\t\"address_2\": \"\",\n\t\t\"city\": \"beverly hills\",\n\t\t\"state\": \"CA\",\n\t\t\"postcode\": \"90211\",\n\t\t\"country\": \"US\",\n\t\t\"phone\": \"123456778\"\n\t},\n\t\"billing_address\": {\n\t\t\"first_name\": \"John\",\n\t\t\"last_name\": \"Doe\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"Hello street\",\n\t\t\"address_2\": \"\",\n\t\t\"city\": \"beverly hills\",\n\t\t\"state\": \"CA\",\n\t\t\"postcode\": \"90211\",\n\t\t\"country\": \"US\",\n\t\t\"email\": \"checkout@templates.com\",\n\t\t\"phone\": \"123456778\"\n\t},\n\t\"needs_payment\": true,\n\t\"needs_shipping\": true,\n\t\"payment_requirements\": [ \"products\" ],\n\t\"has_calculated_shipping\": true,\n\t\"shipping_rates\": [\n\t\t{\n\t\t\t\"package_id\": 0,\n\t\t\t\"name\": \"Shipment 1\",\n\t\t\t\"destination\": {\n\t\t\t\t\"address_1\": \"Hello street\",\n\t\t\t\t\"address_2\": \"\",\n\t\t\t\t\"city\": \"beverly hills\",\n\t\t\t\t\"state\": \"CA\",\n\t\t\t\t\"postcode\": \"90211\",\n\t\t\t\t\"country\": \"US\"\n\t\t\t},\n\t\t\t\"items\": [\n\t\t\t\t{\n\t\t\t\t\t\"key\": \"a5771bce93e200c36f7cd9dfd0e5deaa\",\n\t\t\t\t\t\"name\": \"Beanie with Logo\",\n\t\t\t\t\t\"quantity\": 1\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"key\": \"b6d767d2f8ed5d21a44b0e5886680cb9\",\n\t\t\t\t\t\"name\": \"Belt\",\n\t\t\t\t\t\"quantity\": 1\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"shipping_rates\": [\n\t\t\t\t{\n\t\t\t\t\t\"rate_id\": \"flat_rate:10\",\n\t\t\t\t\t\"name\": \"Flat rate\",\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\"delivery_time\": \"\",\n\t\t\t\t\t\"price\": \"1300\",\n\t\t\t\t\t\"taxes\": \"130\",\n\t\t\t\t\t\"instance_id\": 10,\n\t\t\t\t\t\"method_id\": \"flat_rate\",\n\t\t\t\t\t\"meta_data\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"key\": \"Items\",\n\t\t\t\t\t\t\t\"value\": \"Beanie with Logo &times; 1, Belt &times; 1\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"selected\": true,\n\t\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"rate_id\": \"free_shipping:12\",\n\t\t\t\t\t\"name\": \"Free shipping\",\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\"delivery_time\": \"\",\n\t\t\t\t\t\"price\": \"0\",\n\t\t\t\t\t\"taxes\": \"0\",\n\t\t\t\t\t\"instance_id\": 12,\n\t\t\t\t\t\"method_id\": \"free_shipping\",\n\t\t\t\t\t\"meta_data\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"key\": \"Items\",\n\t\t\t\t\t\t\t\"value\": \"Beanie with Logo &times; 1, Belt &times; 1\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"selected\": false,\n\t\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"rate_id\": \"local_pickup:13\",\n\t\t\t\t\t\"name\": \"Local pickup\",\n\t\t\t\t\t\"description\": \"\",\n\t\t\t\t\t\"delivery_time\": \"\",\n\t\t\t\t\t\"price\": \"0\",\n\t\t\t\t\t\"taxes\": \"0\",\n\t\t\t\t\t\"instance_id\": 13,\n\t\t\t\t\t\"method_id\": \"local_pickup\",\n\t\t\t\t\t\"meta_data\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"key\": \"Items\",\n\t\t\t\t\t\t\t\"value\": \"Beanie with Logo &times; 1, Belt &times; 1\"\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t\"selected\": false,\n\t\t\t\t\t\"currency_code\": \"USD\",\n\t\t\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\t\t\"currency_suffix\": \"\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t],\n\t\"items_count\": 2,\n\t\"items_weight\": 0,\n\t\"cross_sells\": [],\n\t\"errors\": [],\n\t\"payment_methods\": [ \"bacs\", \"cod\" ],\n\t\"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Actions for Remote Inbox Notifications in WooCommerce\nDESCRIPTION: This snippet demonstrates the structure of action objects for remote inbox notifications. It includes properties such as name, locales, URL, and status, with examples for both admin and external links.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteInboxNotifications/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"install-automate-woo\",\n\t \"locales\": [\n\t\t<ActionLocale>,\n\t\t...\n\t],\n\t\"url\": \"?page=automatewoo-dashboard\",\n\t\"url_is_admin_query\": true,\n\t\"status\": \"actioned\"\n},\n{\n\t\"name\": \"set-up-concierge\",\n\t\"locales\": [\n\t\t{\n\t\t\t\"locale\": \"en_US\",\n\t\t\t\"label\": \"Schedule free session\"\n\t\t}\n\t],\n\t\"url\": \"https://wordpress.com/me/concierge\",\n\t\"url_is_admin_query\": false,\n\t\"status\": \"actioned\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Task in WooCommerce Admin TaskLists\nDESCRIPTION: Adds the custom task to the WooCommerce Admin TaskLists. This should be called before or during the 'init' hook as onboarding tasks are registered in the 'init' hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n# Register the task.\nfunction register_custom_task() {\n    // Register the task.\n    use Automattic\\WooCommerce\\Admin\\Features\\OnboardingTasks\\TaskLists;\n\n    TaskLists::add_task(\n        'extended', // The task list ID (e.g., 'extended' for \"Things to do next\").\n        new MyCustomTask(\n            TaskLists::get_list( 'extended' ) // Retrieve the task list object.\n        )\n    );\n}\n\n// Hook the registration function to the 'init' action.\nadd_action('init', 'register_custom_task');\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Task Class in PHP for WooCommerce\nDESCRIPTION: This snippet demonstrates how to create a custom task class by extending the Task base class. It implements required methods like get_id(), get_title(), get_content(), and get_time().\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\Features\\OnboardingTasks\\Task;\n\nclass MyTask extends Task {\n  public function get_id() {\n    return 'my-task';\n  }\n\n  public function get_title() {\n    return __( 'My task', 'woocommerce' );\n  }\n\n  public function get_content() {\n    return __( 'Add your task description here for display in the task list.', 'woocommerce');\n  }\n\n  public function get_time() {\n    return __( '2 minutes', 'woocommerce' );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using getFromState Selector in JavaScript\nDESCRIPTION: Shows how to use the getFromState selector to retrieve the state from the collections store with specific parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( COLLECTIONS_STORE_KEY );\nconst state = store.getFromState( state, namespace, resourceName, queryString, ids, type, fallback );\n```\n\n----------------------------------------\n\nTITLE: Implementing ActivityCard Component in React JSX\nDESCRIPTION: Example of how to use the ActivityCard component in a React render method. This snippet demonstrates creating an insight card with a title, icon, date, actions, and content. The component requires at minimum a title and content children.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/activity-panel/activity-card/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ActivityCard } from 'components/activity-card';\n\nrender: function() {\n  return (\n    <ActivityCard\n      title=\"Insight\"\n      icon={ <Gridicon icon=\"search\" /> }\n      date=\"2018-07-10T00:00:00Z\"\n      actions={ [ <a href=\"/\">Action link</a>, <a href=\"/\">Action link 2</a> ] }\n    >\n      Insight content goes in this area here. It will probably be a couple of lines long and may\n      include an accompanying image. We might consider color-coding the icon for quicker\n      scanning.\n    </ActivityCard>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Registering WooCommerce Task Scripts in PHP\nDESCRIPTION: Function to register and enqueue JavaScript files for custom WooCommerce tasks. Includes checks for WooCommerce admin loader class and proper page context, and handles asset dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Register the scripts to fill the task content on the frontend.\n */\nfunction add_task_register_script() {\n\tif (\n\t\t! class_exists( 'Automattic\\WooCommerce\\Internal\\Admin\\Loader' ) ||\n\t\t! \\Automattic\\WooCommerce\\Admin\\PageController::is_admin_or_embed_page()\n\t) {\n\t\treturn;\n\t}\n\n\t$asset_file = require __DIR__ . '/dist/index.asset.php';\n\twp_register_script(\n\t\t'add-task',\n\t\tplugins_url( '/dist/index.js', __FILE__ ), // task registration JS\n\t\t$asset_file['dependencies'],\n\t\t$asset_file['version'],\n\t\ttrue\n\t);\n\n\twp_enqueue_script( 'add-task' );\n}\n\nadd_action( 'admin_enqueue_scripts', 'add_task_register_script' );\n```\n\n----------------------------------------\n\nTITLE: Registering React-powered Page in WooCommerce Admin\nDESCRIPTION: This PHP snippet shows how to register a React-powered page using the wc_admin_register_page() function. It includes required arguments like id, title, parent, and path, and is hooked to the admin_menu action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/working-with-woocommerce-admin-pages.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_add_extension_register_page' ) ) {\n  function YOUR_PREFIX_add_extension_register_page() {\n    if ( ! function_exists( 'wc_admin_register_page' ) ) {\n        return;\n    }\n\n    wc_admin_register_page( array(\n        'id'       => 'my-example-page',\n        'title'    => __( 'My Example Page', 'YOUR-TEXTDOMAIN' ),\n        'parent'   => 'woocommerce',\n        'path'     => '/example',\n    ) );\n  }\n}\nadd_action( 'admin_menu', 'YOUR_PREFIX_add_extension_register_page' );\n```\n\n----------------------------------------\n\nTITLE: Extending WC_Payment_Gateway_CC for Simplify Commerce Gateway in PHP\nDESCRIPTION: Demonstrates how to extend the WC_Payment_Gateway_CC class for a credit card-based gateway like Simplify Commerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass WC_Gateway_Simplify_Commerce extends WC_Payment_Gateway_CC\n```\n\n----------------------------------------\n\nTITLE: Adding Extended Schema Property\nDESCRIPTION: Demonstrates how to add the extensions property to the get_properties method return array in an endpoint schema class. This enables schema extension support.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/rest-api/extend-rest-api-new-endpoint.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nself::EXTENDING_KEY => $this->get_extended_schema( self::IDENTIFIER ),\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimentalDeRegisterPaymentMethod` JavaScript Function\nDESCRIPTION: An experimental JavaScript function used to deregister a standard payment method from the WooCommerce Blocks payment method registry. According to the documentation, this function is intended for use only within testing environments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Function Signature (based on context):\n__experimentalDeRegisterPaymentMethod( paymentMethodName: string ): void;\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Groups via npm (Shell)\nDESCRIPTION: Shows how to run a specific group of tests (e.g., 'orders') using the `--group=` flag passed to the `npm e2e` command. This relies on the `jest-runner-groups` package and JSDoc tags in the test files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm e2e -- --group=orders\n```\n\n----------------------------------------\n\nTITLE: Using wc.blocksCheckoutEvents for Checkout Success Subscription (General Extensibility, JSX)\nDESCRIPTION: This snippet presents a generic approach for subscribing to the onCheckoutSuccess event using the global wc.blocksCheckoutEvents object, suitable for cases where useCheckoutContext or eventRegistration are not available. It uses useEffect to register and clean up the event observer. This method is generally used for extensibility outside of React components controlled by WooCommerce's context system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\nconst { onCheckoutSuccess } = wc.blocksCheckoutEvents;\n\nuseEffect( () => {\n  const unsubscribe = onCheckoutSuccess( () => true );\n  return unsubscribe;\n}, [ onCheckoutSuccess ] );\n```\n\n----------------------------------------\n\nTITLE: Adding Product Radio Field Block in WooCommerce Product Editor (PHP)\nDESCRIPTION: This code snippet demonstrates how to add a product radio field block to the Pricing section of the WooCommerce product editor. It sets up a 'Charge sales tax on' field with three options for tax status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/radio/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$product_pricing_section->add_block(\n  [\n    'id'         => 'product-sale-tax',\n    'blockName'  => 'woocommerce/product-radio-field',\n    'order'      => 30,\n    'attributes' => [\n      'title'    => __( 'Charge sales tax on', 'woocommerce' ),\n      'property' => 'tax_status',\n      'options'  => [\n        [\n          'label' => __( 'Product and shipping', 'woocommerce' ),\n          'value' => 'taxable',\n        ],\n        [\n          'label' => __( 'Only shipping', 'woocommerce' ),\n          'value' => 'shipping',\n        ],\n        [\n          'label' => __( \"Don't charge tax\", 'woocommerce' ),\n          'value' => 'none',\n        ],\n      ],\n    ],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Templates with WooCommerce Hooks in PHP\nDESCRIPTION: Provides a high-level explanation of the render_block_template() method, which is registered with the 'template_redirect' filter to conditionally enable block templates in WooCommerce before the WordPress template is selected. The method checks whether a block template should load, applies the 'woocommerce_has_block_template' filter to influence rendering, and may disable a compatibility layer using another filter. This method does not accept parameters or return a value; instead, it sets up filter hooks for the rendering process. Dependencies include the WooCommerce core and WordPress filter APIs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/templates/individual-template-classes.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n// render_block_template() is registered on the 'template_redirect' filter\n// It determines if a block template should render for the current page request\n// and calls appropriate WooCommerce filters.\n\nadd_filter( 'template_redirect', 'render_block_template' );\n\nfunction render_block_template() {\n    // Check if should use block template and override via filter\n    if ( should_load_block_template() ) {\n        add_filter( 'woocommerce_has_block_template', '__return_true' );\n    }\n    // Optionally disable compatibility layer under certain conditions\n    if ( page_contains_legacy_block() ) {\n        add_filter( 'woocommerce_disable_compatibility_layer', '__return_true' );\n    }\n    // No return value\n}\n\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output for Custom Exporter in WordPress Blueprint\nDESCRIPTION: This JSON snippet represents the output generated by the custom exporter when exporting a Blueprint. It includes a 'setSiteOptions' step with exported WordPress options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"steps\": [\n        {\n            \"name\": \"setSiteOptions\",\n            \"options\": {\n                \"option1\": \"value1\",\n                \"option2\": \"value2\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column to WooCommerce Downloads Report Table in JavaScript\nDESCRIPTION: This JavaScript code snippet adds the 'Access expires' column to the Downloads report table and CSV generated in the browser. It uses the 'woocommerce_admin_report_table' filter to modify the report data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/adding-columns-to-analytics-reports-and-csv-downloads.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from \"@wordpress/hooks\";\nfunction addAccessExpiresToDownloadsReport(reportTableData) {\n  const { endpoint, items } = reportTableData;\n  if (\"downloads\" !== endpoint) {\n    return reportTableData;\n  }\n\n  reportTableData.headers = [\n    ...reportTableData.headers,\n    {\n      label: \"Access expires\",\n      key: \"access_expires\",\n    },\n  ];\n  reportTableData.rows = reportTableData.rows.map((row, index) => {\n    const item = items.data[index];\n    const newRow = [\n      ...row,\n      {\n        display: item.access_expires,\n        value: item.access_expires,\n      },\n    ];\n    return newRow;\n  });\n\n  return reportTableData;\n}\naddFilter(\n  \"woocommerce_admin_report_table\",\n  \"dev-blog-example\",\n  addAccessExpiresToDownloadsReport\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Get and Set Methods for Token Data in PHP\nDESCRIPTION: Demonstrates how to implement get_ and set_ methods for custom token data using meta functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\npublic function get_last4() {\n    return $this->get_meta( 'last4' );\n}\n\npublic function set_last4( $last4 ) {\n    $this->add_meta_data( 'last4', $last4, true );\n}\n```\n\n----------------------------------------\n\nTITLE: Avoiding Enumeration Values in Hook Names for WooCommerce\nDESCRIPTION: Illustrates the preferred approach of avoiding dynamic hook names with enumeration values in WooCommerce. This prevents the need for developers to include multiple filters for different enumeration values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nif ( is_wp_error( $result ) ) {\n    /* Avoid this */\n    $error_code = $result->get_error_code();\n    do_action( \"woocommerce_foo_bar_{$error_code}_problem\", $intermediate_result );\n    \n    /* Prefer this */\n    do_action( 'woocommerce_foo_bar_problem', $result );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Categories in WooCommerce CLI\nDESCRIPTION: Command for creating new product categories with required name parameter and options for slug, parent, description, display type, image, and menu order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_37\n\nLANGUAGE: bash\nCODE:\n```\nwc product_cat create\n```\n\n----------------------------------------\n\nTITLE: Defining Text Domain in WordPress Plugin Header\nDESCRIPTION: This PHP code snippet demonstrates how to define a text domain in the header of a main plugin file. The text domain must match the slug of the plugin and is used for translations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-basics.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * [...]\n * Text Domain:  woo-gutenberg-products-block\n * [...]\n */\n```\n\n----------------------------------------\n\nTITLE: WooCommerce CSS File Structure Overview\nDESCRIPTION: Defines the main CSS file structure used in WooCommerce, including shared styles location, embedded page styles, and main application styles. The shared directory contains reset styles and Gutenberg component imports, while _embedded.scss and _index.scss serve specific application parts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/stylesheets.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n/shared/* – these are the styles that will appear in compiled CSS - the reset, gutenberg components import, etc\n_embedded.scss – this file is used for the embed pages CSS, and is imported in embedded.js only\n_index.scss – this file is used for the app's CSS, and is imported in index.js only\n```\n\n----------------------------------------\n\nTITLE: Using __() Translation Function in TypeScript\nDESCRIPTION: Shows how to use the __() function to retrieve translations of text strings. The function takes a text string and an optional domain parameter for specifying the translation context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-JS-TS-files.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Schema\nconst translation = __( string text, string domain = 'default' );\n\n// Example\nconst { __ } = window.wp.i18n;\n\nconst translation = __( 'Place Order', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Variables in Expressions\nDESCRIPTION: Example showing how to access variables from the provided context in an expression evaluation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = evaluate( 'foo', { foo: 1 } );\n\nconsole.log( result ); // 1\n```\n\n----------------------------------------\n\nTITLE: Custom WooCommerce Email Hook Implementation\nDESCRIPTION: Boilerplate code showing how to implement a custom function that hooks into the WooCommerce email order details action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/template-structure.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_email_order_details', 'my_custom_woo_function');\nfunction my_custom_woo_function() { \n    /* Your code goes here */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Coupon in JavaScript\nDESCRIPTION: This function creates a basic coupon with a specified amount and type. It returns the generated coupon code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateCoupon(couponAmount, couponType)\n```\n\n----------------------------------------\n\nTITLE: Adding Order Note in WooCommerce Gateway in PHP\nDESCRIPTION: This snippet shows how to add a note to an order in a WooCommerce payment gateway without changing the order status. It's useful for adding debug messages or additional information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-api.md#2025-04-23_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$order->add_order_note( __('IPN payment completed', 'woothemes') );\n```\n\n----------------------------------------\n\nTITLE: Using the woocommerce_add_to_cart_sold_individually_quantity Filter in PHP\nDESCRIPTION: This filter modifies the quantity for products marked as 'sold individually' in add to cart requests. It matches the filter name in WooCommerce core.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_add_to_cart_sold_individually_quantity', integer $sold_individually_quantity, integer $quantity, integer $product_id, integer $variation_id, array $cart_item_data )\n```\n\n----------------------------------------\n\nTITLE: Reading Custom Field Values in WooCommerce Checkout\nDESCRIPTION: Shows how to implement filters for reading custom field default values from existing meta fields in WooCommerce checkout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\nadd_filter(\n\t\"woocommerce_get_default_value_for_my-plugin-namespace/address-field\",\n\tfunction ( $value, $group, $wc_object ) {\n\n\t\tif ( 'billing' === $group ) {\n\t\t\t$my_plugin_key = 'existing_billing_address_field_key';\n\t\t} else {\n\t\t\t$my_plugin_key = 'existing_shipping_address_field_key';\n\t\t}\n\n\t\treturn $wc_object->get_meta( $my_plugin_key );\n\t},\n\t10,\n\t3\n);\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Cart/Checkout Extension Template with create-block\nDESCRIPTION: Command to generate a new WooCommerce Blocks extension using the @woocommerce/extend-cart-checkout-block template. Run this from your WordPress plugins directory to scaffold a new extension with the specified name.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/extend-cart-checkout-block/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @wordpress/create-block -t @woocommerce/extend-cart-checkout-block your_extension_name\n```\n\n----------------------------------------\n\nTITLE: Checking Billing Address Editing Status in Checkout Store with JavaScript\nDESCRIPTION: Demonstrates how to determine if the billing address is being edited using the getEditingBillingAddress selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst editingBillingAddress = store.getEditingBillingAddress();\n```\n\n----------------------------------------\n\nTITLE: Creating a WooCommerce Payment Gateway Plugin Template in PHP\nDESCRIPTION: This code provides a basic template for creating a custom payment gateway plugin for WooCommerce. It includes the plugin header information, initialization hooks, internationalization support, the gateway class extending WC_Payment_Gateway, and the method to register the new gateway with WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-gateway-plugin-base.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n/*\nPlugin Name: WooCommerce <enter name> Gateway\nPlugin URI: https://woothemes.com/woocommerce\nDescription: Extends WooCommerce with an <enter name> gateway.\nVersion: 1.0\nAuthor: WooThemes\nAuthor URI: https://woothemes.com/\n\tCopyright: © 2009-2011 WooThemes.\n\tLicense: GNU General Public License v3.0\n\tLicense URI: http://www.gnu.org/licenses/gpl-3.0.html\n*/\nadd_action('plugins_loaded', 'woocommerce_gateway_name_init', 0);\nfunction woocommerce_gateway_name_init() {\n\tif ( !class_exists( 'WC_Payment_Gateway' ) ) return;\n\t/**\n \t * Localisation\n\t */\n\tload_plugin_textdomain('wc-gateway-name', false, dirname( plugin_basename( __FILE__ ) ) . '/languages');\n    \n\t/**\n \t * Gateway class\n \t */\n\tclass WC_Gateway_Name extends WC_Payment_Gateway {\n\t\n\t\t// Go wild in here\n\t}\n\t\n\t/**\n \t* Add the Gateway to WooCommerce\n \t**/\n\tfunction woocommerce_add_gateway_name_gateway($methods) {\n\t\t$methods[] = 'WC_Gateway_Name';\n\t\treturn $methods;\n\t}\n\t\n\tadd_filter('woocommerce_payment_gateways', 'woocommerce_add_gateway_name_gateway' );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Existing WooCommerce Coupon\nDESCRIPTION: Example of updating an existing coupon using WooCommerce CRUD objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$coupon = new WC_Coupon( $coupon_id );\n$coupon->set_discount_type( 'percent' );\n$coupon->set_amount( 25.00 );\n$coupon->save();\n```\n\n----------------------------------------\n\nTITLE: Scanning for Specific Changes in WooCommerce\nDESCRIPTION: Command to scan for specific types of changes (hooks in this example) between two branches since a particular version. Useful for targeted analysis of specific change types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/code-analyzer/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm analyzer scan hooks \"release/6.8\" \"release/6.7\" --since \"6.8.0\"\n```\n\n----------------------------------------\n\nTITLE: Using the `experimental__woocommerce_blocks-cart-set-item-quantity` JavaScript Hook\nDESCRIPTION: Describes an experimental JavaScript action hook fired via `@wordpress/hooks` when a customer changes the quantity of an item in the Mini-cart or Cart block. It passes the product object and the new quantity to callback functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-cart-set-item-quantity',\n\t'plugin/namespace',\n\t( { product, quantity } ) => {\n\t\tconsole.log( `${ product.name }'s quantity was changed to ${ quantity }` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Embedding Button Inside MenuItem for Interactive Menus in React JSX\nDESCRIPTION: This snippet shows how to use the MenuItem component to wrap a Button, enabling keyboard and mouse activation via the onInvoke prop. The Button, when clicked, executes the onToggle handler to close or manipulate the menu. Core dependencies are React, MenuItem, and Button components. The snippet assumes onToggle is a function passed as a prop or defined in scope, and demonstrates accessible menu item handling.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/ellipsis-menu/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<MenuItem onInvoke={ onToggle }>\n\t<Button\n\t\tlabel=\"Close menu\"\n\t\tonClick={ onToggle }\n\t>\n\tClose Menu\n\t</Button>\n</MenuItem>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Batch Adding Multiple Items to Cart\nDESCRIPTION: JSON example showing how to structure a batch request to add multiple products to the cart in a single API call. Each request in the batch includes its own path, method, and authentication.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"requests\": [\n\t\t{\n\t\t\t\"path\": \"/wc/store/v1/cart/add-item\",\n\t\t\t\"method\": \"POST\",\n\t\t\t\"cache\": \"no-store\",\n\t\t\t\"body\": {\n\t\t\t\t\"id\": 26,\n\t\t\t\t\"quantity\": 1\n\t\t\t},\n\t\t\t\"headers\": {\n\t\t\t\t\"Nonce\": \"1db1d13784\"\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t\"path\": \"/wc/store/v1/cart/add-item\",\n\t\t\t\"method\": \"POST\",\n\t\t\t\"cache\": \"no-store\",\n\t\t\t\"body\": {\n\t\t\t\t\"id\": 27,\n\t\t\t\t\"quantity\": 1\n\t\t\t},\n\t\t\t\"headers\": {\n\t\t\t\t\"Nonce\": \"1db1d13784\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Store API Cart Validation Example\nDESCRIPTION: Example showing how to validate cart contents by hooking into the Store API cart errors action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// The action callback function.\nfunction my_function_callback( $errors, $cart ) {\n\n  // Validate the $cart object and add errors. For example, to create an error if the cart contains more than 10 items:\n  if ( $cart->get_cart_contents_count() > 10 ) {\n    $errors->add( 'my_error_code', 'Too many cart items!' );\n  }\n}\n\nadd_action( 'woocommerce_store_api_cart_errors', 'my_function_callback', 10 );\n```\n\n----------------------------------------\n\nTITLE: Implementing VerticalCSSTransition Component in React JSX\nDESCRIPTION: Example showing how to use the VerticalCSSTransition component with nested content. This demonstrates setting timeout, in prop, classNames, and defaultStyle to configure the transition behavior.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/experimental/src/vertical-css-transition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<VerticalCSSTransition timeout={ 500 } in={ true } classNames=\"my-node\" defaultStyle={ transitionProperty: 'max-height, opacity' }>\n\t<div>some content</div>\n\t<div>\n\t\tsome more content <br /> line 2 <br /> line 3\n\t</div>\n</VerticalCSSTransition>\n```\n\n----------------------------------------\n\nTITLE: Customizing Subtotal Price Format in WooCommerce Cart - TSX\nDESCRIPTION: Demonstrates how to customize the subtotal price format for cart items. The filter applies custom formatting for specific products, adding descriptive text like 'per warm beanie' or 'per cool sunglasses'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifySubtotalPriceFormat = (\n\tdefaultValue,\n\textensions,\n\targs,\n\tvalidation\n) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn '&lt;price/&gt; per warm beanie';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn '&lt;price/&gt; per cool sunglasses';\n\t}\n\n\treturn '&lt;price/&gt; per item';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tsubtotalPriceFormat: modifySubtotalPriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Validation with useValidation Hook\nDESCRIPTION: Demonstrates how to use the useValidation hook to validate a product field. Returns validation references, error state, and validation function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/contexts/validation-context/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  ref: myRef,\n  error: myValidationError,\n  validate: validateMyField,\n} = useValidation<Product>('myfield',\nasync function myFieldValidator() {\n  if (!myField) {\n    return {\n      message: 'My error message',\n      context: clientId,\n    };\n  }\n},\n[myField]);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Totals from WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to get cart totals from the WooCommerce cart store. Returns an object with detailed pricing information including item totals, taxes, fees, discounts, shipping costs, and currency information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_27\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst cartTotals = store.getCartTotals();\n```\n\n----------------------------------------\n\nTITLE: Paginating Product Results with cURL (Shell)\nDESCRIPTION: This cURL command shows how to retrieve a specific page of product results from the Store API using pagination parameters. It requests page 2 (`page=2`) with 20 items per page (`per_page=20`) from the `products` endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products?page=2&per_page=20\"\n```\n\n----------------------------------------\n\nTITLE: Creating a WooCommerce Order Note via WC-CLI in Bash\nDESCRIPTION: Creates a new note for a specific WooCommerce order, identified by `<order_id>`. Requires the `--note` parameter containing the note content. The `--customer_note` flag determines if the note is visible to the customer (and triggers a notification) or is internal only. Use `--porcelain` to output only the new note ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc order_note create <order_id> --note=<note_content> [options]\n```\n\n----------------------------------------\n\nTITLE: Checking Major-Minor Version with WooCommerce Analyzer\nDESCRIPTION: Command to retrieve the latest .0 major/minor released version of a plugin's mainfile based on WooCommerce release conventions. Checks the version in the specified branch and file path.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/code-analyzer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm analyzer major-minor \"release/6.8\" \"plugins/woocommerce/woocommerce.php\"\n```\n\n----------------------------------------\n\nTITLE: Registering onCheckoutValidation in Payment Method Components\nDESCRIPTION: Shows how payment method components can register observers for the onCheckoutValidation event using props.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onCheckoutValidation } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Additional Inner Block Types for WooCommerce Cart and Checkout\nDESCRIPTION: This code demonstrates how to use the additionalCartCheckoutInnerBlockTypes filter to allow additional block types in Cart and Checkout inner blocks. It adds 'core/quote' to all areas and 'core/table' specifically to the shipping address block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/additional-cart-checkout-inner-block-types.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ndocument.addEventListener( 'DOMContentLoaded', function () {\n\tconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\n\tconst modifyAdditionalInnerBlockTypes = (\n\t\tdefaultValue,\n\t\textensions,\n\t\targs,\n\t\tvalidation\n\t) => {\n\t\tdefaultValue.push( 'core/quote' );\n\n\t\tif ( args?.block === 'woocommerce/checkout-shipping-address-block' ) {\n\t\t\tdefaultValue.push( 'core/table' );\n\t\t}\n\n\t\treturn defaultValue;\n\t};\n\n\tregisterCheckoutFilters( 'example-extension', {\n\t\tadditionalCartCheckoutInnerBlockTypes: modifyAdditionalInnerBlockTypes,\n\t} );\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Logging Settings and Log Viewer Link in WooCommerce Extension\nDESCRIPTION: Implements logging configuration in a WooCommerce extension using the Settings API. Creates a checkbox setting to enable logging and dynamically adds a link to the log viewer when logging is enabled. Uses WooCommerce's LoggingUtil for managing logging state and URLs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/link-to-logged-data.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Utilities\\LoggingUtil;\n\n// Define the label and description for the logging option\n$label = \\_\\_( 'Enable logging', 'your-textdomain-here' );\n$description = \\_\\_( 'Log events and errors to help with troubleshooting.', 'your-textdomain-here' );\n\n// Check if WooCommerce's logging feature is enabled.\nif ( LoggingUtil::logging_is_enabled() ) {\n    // The source value you use for your extension's log entries. Could be the same as your text domain.\n    $source = 'yourpluginslug';\n    \n    $logs_url = add_query_arg(\n        'source',\n        $source,\n        LoggingUtil::get_logs_tab_url()\n    );\n    \n    $label .= ' | ' . sprintf(\n        \\_\\_( '<a href=\"%s\">View logs</a>', 'your-textdomain-here' ),\n        $logs_url\n    );\n}\n\n// Add the logging option to the form fields.\n$form_fields['yourpluginslug_debug'] = array(\n  'title'       => \\_\\_( 'Debugging', 'your-textdomain-here' ),\n  'label'       => $label,\n  'description' => $description,\n  'type'        => 'checkbox',\n  'default'     => 'no'\n);\n```\n\n----------------------------------------\n\nTITLE: Using esc_html__() Function for HTML-Safe Translation in PHP\nDESCRIPTION: The esc_html__() function retrieves the translation of a text string and escapes it for safe use in HTML output. This prevents potential XSS vulnerabilities.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = esc_html__( string $text, string $domain = 'default' );\n\n// Example\n$translation = esc_html__( 'Select a category', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Adding a Currency Column to WooCommerce Orders Report Table using JS Filter\nDESCRIPTION: This JavaScript function `addTableColumn` is designed to be used with the `woocommerce_admin_report_table` filter hook. It checks if the current report is the 'orders' report and, if so, prepends a 'Currency' column header and adds the corresponding currency value from the `item.currency` property to the beginning of each row in the `reportTableData` object. It requires the `addFilter` function and operates on the `reportTableData` object structure provided by the filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst addTableColumn = (reportTableData) => {\n  if (\"orders\" !== reportTableData.endpoint) {\n    return reportTableData;\n  }\n\n  const newHeaders = [\n    {\n      label: \"Currency\",\n      key: \"currency\",\n    },\n    ...reportTableData.headers,\n  ];\n  const newRows = reportTableData.rows.map((row, index) => {\n    const item = reportTableData.items.data[index];\n    const newRow = [\n      {\n        display: item.currency,\n        value: item.currency,\n      },\n      ...row,\n    ];\n    return newRow;\n  });\n\n  reportTableData.headers = newHeaders;\n  reportTableData.rows = newRows;\n\n  return reportTableData;\n};\n\naddFilter(\"woocommerce_admin_report_table\", \"dev-blog-example\", addTableColumn);\n```\n\n----------------------------------------\n\nTITLE: Validating Token User ID in PHP\nDESCRIPTION: Shows how to check if a loaded token belongs to the current user during payment processing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nif ( $token->get_user_id() !== get_current_user_id() ) {\n    // Optionally display a notice with `wc_add_notice`\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Product Reviews in WooCommerce CLI\nDESCRIPTION: Command for retrieving product reviews for a specific product, requiring the product_id parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nwc product_review list <product_id>\n```\n\n----------------------------------------\n\nTITLE: Avoiding Filters as Feature Flags in PHP for WooCommerce\nDESCRIPTION: Demonstrates the preferred approach of using options instead of filters for feature flags in WooCommerce. Options persist in the database and are already filterable for temporary overrides.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/* Avoid this */\n$super_products_enabled = (bool) apply_filters( 'woocommerce_super_products_are_enabled', true );\n\n/* Prefer this */\n$super_products_enabled = get_option( 'woocommerce_super_products_are_enabled', 'no' ) === 'yes';\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper Cart Flow Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing critical flows for shoppers interacting with the cart, including adding/removing products, applying coupons, and viewing shipping options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area | Flow Name                                  | Test File                                   |\n| --------- | --------- | ------------------------------------------ | ------------------------------------------- |\n| Shopper   | Cart      | Add to cart redirects to cart when enabled | shopper/cart-redirection.spec.js            |\n| Shopper   | Cart      | View cart                                  | shopper/cart.spec.js                        |\n| Shopper   | Cart      | Update product quantity within limits      | shopper/cart.spec.js                        |\n| Shopper   | Cart      | Remove products from cart                  | shopper/cart.spec.js                        |\n| Shopper   | Cart      | Apply all coupon types                     | shopper/cart-coupons.spec.js                |\n| Shopper   | Cart      | Display shipping options by address        | shopper/calculate-shipping.spec.js          |\n| Shopper   | Cart      | View empty cart                            | shopper/cart.spec.js                        |\n| Shopper   | Cart      | Display correct tax                        | shopper/cart-checkout-calculate-tax.spec.js |\n| Shopper   | Cart      | Respect coupon usage constraints           | shopper/cart-checkout-coupons.spec.js       |\n| Shopper   | Cart      | Display cross-sell products                | products/product-linked-products.spec.js    |\n| Shopper   | Cart      | Proceed to checkout                        | shopper/checkout.spec.js                    |\n```\n\n----------------------------------------\n\nTITLE: Generating and Downloading a CSV File in JavaScript\nDESCRIPTION: Demonstrates the usage of the CSV export module within an `onClick` handler. It first calls `generateCSVFileName` to create a timestamped filename (e.g., 'revenue-2018-11-01-interval-month.csv') based on a base name ('revenue') and parameters ({ interval: 'month' }). Then, it uses `generateCSVDataFromTable` to convert an array of headers and a 2D array of rows into a CSV-formatted string. Finally, `downloadCSVFile` is called to trigger a browser download prompt with the generated filename and CSV data string.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/csv-export/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nonClick = () => {\n\t// Create a file name based on a title and optional query. Will return a timestamped\n\t// name, for example: revenue-2018-11-01-interval-month.csv\n\tconst name = generateCSVFileName( 'revenue', { interval: 'month' } );\n\n\t// Create a string of CSV data, `headers` is an array of row headers, put at the top\n\t// of the file. `rows` is a 2 dimensional array. Each array is a line in the file,\n\t// separated by newlines. The second-level arrays are the data points in each row.\n\tconst data = generateCSVDataFromTable( headers, rows );\n\n\t// Triggers a browser UI to save a file, named the first argument, with the contents of\n\t// the second argument.\n\tdownloadCSVFile( name, data );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Dependency Extraction with Options - JavaScript\nDESCRIPTION: This snippet illustrates passing a configuration object to WooCommerceDependencyExtractionWebpackPlugin in the webpack config to customize its behavior. The bundledPackages option accepts an array of WooCommerce packages that should be included in the bundle even if normally excluded. Key prerequisite is @woocommerce/dependency-extraction-webpack-plugin. The plugins array in the module.exports object sets up the plugin with custom options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/dependency-extraction-webpack-plugin/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n plugins: [\n  new WooCommerceDependencyExtractionWebpackPlugin( {\n   bundledPackages: [ '@woocommerce/components' ],\n  } ),\n ],\n};\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies in WooCommerce Unit Tests\nDESCRIPTION: Demonstrates how to mock dependencies in unit tests using PHPUnit's test doubles and the ExtendedContainer class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$dependency_mock = somehow_create_mock();\n$container = wc_get_container();\n$container->reset_all_resolved(); //if either the SUT or the dependency are shared\n$container->replace( TheDependencyClass::class, $dependency_mock );\n$sut = $container->get( TheClassToTest::class );\n$result = $sut->do_something();\n$this->assertEquals( $result, 'the expected result' );\n```\n\n----------------------------------------\n\nTITLE: Verifying Input Field Value in JavaScript\nDESCRIPTION: This function verifies an input contains the passed value. It takes the selector and expected value as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_37\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyValueOfInputField(selector, value)\n```\n\n----------------------------------------\n\nTITLE: Getting a WooCommerce Coupon via WP-CLI in Bash\nDESCRIPTION: This WP-CLI command retrieves all properties of a coupon in a human-readable table, including code, amount, usage limits, and metadata, for a given coupon ID. Ideal for script-based management or administrative audits of promotional codes in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc shop_coupon get 45 --user=1\n```\n\n----------------------------------------\n\nTITLE: Modifying Coupon Display in WooCommerce Cart and Checkout (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to use the 'coupons' filter to modify the display of coupon codes in the WooCommerce cart and checkout sidebars. It specifically targets auto-generated coupons and changes their label to 'Automatic coupon'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/coupons.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCoupons = ( coupons, extensions, args ) => {\n\treturn coupons.map( ( coupon ) => {\n\t\tif ( ! coupon.label.match( /autocoupon(?:_\\d+)+/ ) ) {\n\t\t\treturn coupon;\n\t\t}\n\n\t\treturn {\n\t\t\t...coupon,\n\t\t\tlabel: 'Automatic coupon',\n\t\t};\n\t} );\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcoupons: modifyCoupons,\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Currency Settings to WooCommerce Data Registry\nDESCRIPTION: PHP function to add currency options to the WooCommerce data registry, making them available on the client-side.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction add_currency_settings() {\n\t$currencies = array(\n\t\tarray(\n\t\t\t'label' => __( 'United States Dollar', 'dev-blog-example' ),\n\t\t\t'value' => 'USD',\n\t\t),\n\t\tarray(\n\t\t\t'label' => __( 'New Zealand Dollar', 'dev-blog-example' ),\n\t\t\t'value' => 'NZD',\n\t\t),\n\t\tarray(\n\t\t\t'label' => __( 'Mexican Peso', 'dev-blog-example' ),\n\t\t\t'value' => 'MXN',\n\t\t),\n\t);\n\n\t$data_registry = Automattic\\WooCommerce\\Blocks\\Package::container()->get(\n\t\tAutomattic\\WooCommerce\\Blocks\\Assets\\AssetDataRegistry::class\n\t);\n\n\t$data_registry->add( 'multiCurrency', $currencies );\n}\n\nadd_action( 'init', 'add_currency_settings' );\n```\n\n----------------------------------------\n\nTITLE: Using getHistory with React Router in WooCommerce\nDESCRIPTION: Shows how to integrate the history object from the navigation module with React Router. This is necessary for the other path functions from the library to work correctly within a React application.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/navigation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { getHistory } from '@woocommerce/navigation';\n\nrender() {\n\treturn (\n\t\t<Router history={ getHistory() }>\n\t\t\t…\n\t\t</Router>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a WooCommerce Product Editor Block Project - Bash\nDESCRIPTION: This snippet demonstrates how to scaffold a new WooCommerce Product Editor Block extension using the npx command-line utility, with the template sourced from @woocommerce/create-product-editor-block. It requires Node.js and npm to be installed, along with access to the npm registry. The project folder 'my-extension-name' is created with all necessary files for block development. The primary input is the desired extension project name. The output is a new directory initialized with relevant templates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-product-editor-block/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block --template @woocommerce/create-product-editor-block my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Checkout Validation Event Subscription\nDESCRIPTION: Example of subscribing to the onCheckoutValidation event emitter specifically.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = onCheckoutValidation( myCallback );\n```\n\n----------------------------------------\n\nTITLE: Emitting checkout_after_processing_with_error Event in JavaScript\nDESCRIPTION: This code snippet emits the 'checkout_after_processing_with_error' event if there has been an error during the checkout process. It allows other plugins to register event listeners to display errors to the user.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Registering Data Attribute Behavior for a Single Block (PHP)\nDESCRIPTION: Enables frontend data attribute behavior for a specific block instance, not the entire namespace, using '__experimental_woocommerce_blocks_add_data_attributes_to_block' WordPress filter. The target block is appended to the allowed_blocks array so its HTML will include relevant 'data-*' attributes for React or other JS consumption. Used in plugin or theme PHP code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter(\n\t'__experimental_woocommerce_blocks_add_data_attributes_to_block',\n\tfunction ( $allowed_blocks ) {\n\t\t$allowed_blocks[] = 'namespace/block-name';\n\t\treturn $allowed_blocks;\n\t},\n\t10,\n\t1\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Schema Store Key in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to import the SCHEMA_STORE_KEY from the WooCommerce Block Data package. This key is required to interact with the Schema Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/schema.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { SCHEMA_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Adding WHERE Clause to WooCommerce Analytics Queries\nDESCRIPTION: PHP function to add a WHERE clause to WooCommerce analytics queries for filtering by currency.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction add_where_subquery( $clauses ) {\n\t$currency = 'USD';\n\n\tif ( isset( $_GET['currency'] ) ) {\n\t\t$currency = sanitize_text_field( wp_unslash( $_GET['currency'] ) );\n\t}\n\n\t$clauses[] = \"AND currency_postmeta.meta_key = '_order_currency' AND currency_postmeta.meta_value = '{$currency}'\";\n\n\treturn $clauses;\n}\n\nadd_filter( 'woocommerce_analytics_clauses_where_orders_subquery', 'add_where_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_where_orders_stats_total', 'add_where_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_where_orders_stats_interval', 'add_where_subquery' );\n```\n\n----------------------------------------\n\nTITLE: Using the woocommerce_add_to_cart_quantity Filter in PHP\nDESCRIPTION: This filter allows changing the quantity of items when adding to cart, providing control over the default quantity for specific products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_add_to_cart_quantity', \\Automattic\\WooCommerce\\Blocks\\BlockTypes\\number $default_quantity, \\Automattic\\WooCommerce\\Blocks\\BlockTypes\\number $product_id )\n```\n\n----------------------------------------\n\nTITLE: Syncing Order Status with `wc hpos backfill` (Plaintext)\nDESCRIPTION: Demonstrates syncing only the 'status' property for order ID 100126 from the posts datastore to the HPOS datastore using the `--props` parameter. This step aims to reconcile differences found previously.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos backfill 100126 --from=posts --to=hpos --props=status\nSuccess: Order 100126 backfilled from posts to hpos.\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Coupon Data Store in WooCommerce\nDESCRIPTION: Demonstrates how to use the 'woocommerce_data_stores' filter to replace the default coupon data store with a custom implementation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nfunction myplugin_set_wc_coupon_data_store( $stores ) {\n\t$stores['coupon'] = 'WC_Coupon_Data_Store_Custom_Table';\n\treturn $stores;\n}\n\nadd_filter( 'woocommerce_data_stores', 'myplugin_set_wc_coupon_data_store' );\n```\n\n----------------------------------------\n\nTITLE: Setting up WooCommerce Monorepo with Node, PNPM, and Composer\nDESCRIPTION: This bash script demonstrates the process of setting up the WooCommerce Monorepo for development. It ensures the correct Node version is installed, installs PHP and Composer dependencies, and builds all plugins, packages, and tools in the monorepo.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Ensure that correct version of Node is installed and being used\nnvm install\n# Install the PHP and Composer dependencies for all of the plugins, packages, and tools\npnpm install -frozen-lockfile\n# Build all of the plugins, packages, and tools in the monorepo\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Querying Product Brands API Endpoint (HTTP)\nDESCRIPTION: This HTTP request retrieves a list of all product brands via the WooCommerce Store API. No parameters are required, and the endpoint returns a JSON array with details for each brand. It is a standard GET request endpoint, requiring the WooCommerce Store API to be active and accessible.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/brands\n```\n\n----------------------------------------\n\nTITLE: Structuring Table Data for Table Component (JavaScript)\nDESCRIPTION: This snippet sets up table headers and rows as arrays for consumption by the Table component. It defines a simple table schema for displaying monthly revenue analytics. Dependencies: JavaScript arrays; intended for use in a React Table component. The output is the data structure, not a rendered component. Headers must be objects with at least a label, and rows must be arrays of display/value objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst headers = [ { label: 'Month' }, { label: 'Orders' }, { label: 'Revenue' } ];\nconst rows = [\n\t[\n\t\t{ display: 'January', value: 1 },\n\t\t{ display: 10, value: 10 },\n\t\t{ display: '$530.00', value: 530 },\n\t],\n\t[\n\t\t{ display: 'February', value: 2 },\n\t\t{ display: 13, value: 13 },\n\t\t{ display: '$675.00', value: 675 },\n\t],\n\t[\n\t\t{ display: 'March', value: 3 },\n\t\t{ display: 9, value: 9 },\n\t\t{ display: '$460.00', value: 460 },\n\t],\n]\n```\n\n----------------------------------------\n\nTITLE: Adding a New Block to Product Editor Templates in PHP\nDESCRIPTION: This snippet shows how to add a new block to product editor templates after an existing block. It uses the 'woocommerce_block_template_area_product-form_after_add_block_product-name' action hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/Features/ProductBlockEditor/ProductTemplates/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n\nfunction YOUR_PREFIX_add_block( BlockInterface $product_name_block ) {\n  $parent = $product_name_block->get_parent();\n\n  $parent->add_block(\n    [\n      'id'         => 'YOUR-PREFIX-block',\n      'blockName'  => 'woocommerce/product-text-field',\n      'order'      => $product_name_block->get_order() + 5,\n      'attributes' => [\n        'label' => __( 'My Block', 'YOUR-TEXT-DOMAIN' ),\n      ],\n    ]\n  );\n}\n\nadd_action( 'woocommerce_block_template_area_product-form_after_add_block_product-name', 'YOUR_PREFIX_add_block' );\n```\n\n----------------------------------------\n\nTITLE: Modifying Coupon Display in Checkout Summary\nDESCRIPTION: This JavaScript snippet demonstrates how to use the registerCheckoutFilters function to modify the display of coupons in the checkout summary, specifically changing the label of a particular coupon.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCoupons = ( coupons, extensions, args ) => {\n\treturn coupons.map( ( coupon ) => {\n\t\tif ( ! coupon.label === 'mailing-list-10-percent-coupon' ) {\n\t\t\treturn coupon;\n\t\t}\n\n\t\treturn {\n\t\t\t...coupon,\n\t\t\tlabel: 'Mailing list discount',\n\t\t};\n\t} );\n};\n\nregisterCheckoutFilters( 'extension-unique-namespace', {\n\tcoupons: modifyCoupons,\n} );\n```\n\n----------------------------------------\n\nTITLE: Applying Currency Control to Storybook Story argTypes in TypeScript\nDESCRIPTION: This code exports a default Storybook story configuration object and demonstrates assigning the custom currencyControl to the currency property in argTypes. This enables Storybook UI users to select among predefined currency options. The setup assumes the prior definition of currencyControl. No additional dependencies are required besides TypeScript and Storybook. Inputs are component args; the output is a Storybook UI with a custom currency select option.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default {\n\t// ...\n\targTypes: {\n\t\tcurrency: currencyControl,\n\t},\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing the WooCommerce Attribute Menu Filter Hook in PHP\nDESCRIPTION: Shows the filter hook that WooCommerce uses when registering taxonomies for custom attributes. This filter controls whether an attribute is available for use in navigation menus.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/using-custom-attributes-in-menus.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$show_in_nav_menus = apply_filters('woocommerce_attribute_show_in_nav_menus', false, $name);\n```\n\n----------------------------------------\n\nTITLE: Accessing Payment Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Payment Store which deals with all payment-related data and transactions in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { paymentStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Modifying Error Data with WordPress Filter in JavaScript\nDESCRIPTION: Demonstrates the use of the 'woocommerce_remote_logging_error_data' WordPress filter to modify the error data before sending it to the remote API. This example adds a custom tag to the error data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n  'woocommerce_remote_logging_error_data',\n  'my-plugin',\n  (errorData) => {\n    // Custom logic to modify error data\n    errorData.tags = [ ...errorData.tags, 'my-plugin' ];\n    return errorData;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Controlled State with Storybook Controls Using useArgs in React (TSX)\nDESCRIPTION: This snippet illustrates how to use the useArgs hook from Storybook to synchronize a controlled component's state with Storybook controls in a React+TypeScript story template. useArgs provides a method to update Storybook’s args, ensuring external controls and internal state stay aligned. It requires Storybook's client API and component-specific types and props. Inputs are the current args; outputs are updated controls and component props. It adds complexity but improves bidirectional control synchronization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript React (TSX)\nCODE:\n```\nimport { useArgs } from '@storybook/client-api';\n\nconst Template: Story< MyControlledComponentProps > = ( args ) => {\n\tconst [ _, setArgs ] = useArgs();\n\n\tconst onChange = ( newVal ) => {\n\t\targs.onChange?.( newVal );\n\t\tsetArgs( { state: newVal } );\n\t};\n\n\treturn <MyControlledComponent { ...args } onChange={ onChange } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Cart Items Collection - WooCommerce Store API\nDESCRIPTION: Provides the full JSON response structure returned by the WooCommerce Store API when listing all items in the cart. Each item includes product details, pricing, variation data (if applicable), images, pricing breakdown, and links for further actions. This response is useful for frontend development, integrations, or API documentation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"key\": \"c74d97b01eae257e44aa9d5bade97baf\",\n\t\t\"id\": 16,\n\t\t\"quantity\": 1,\n\t\t\"type\": \"simple\",\n\t\t\"quantity_limits\": {\n\t\t\t\"minimum\": 1,\n\t\t\t\"maximum\": 1,\n\t\t\t\"multiple_of\": 1,\n\t\t\t\"editable\": false\n\t\t},\n\t\t\"name\": \"Beanie\",\n\t\t\"short_description\": \"<p>This is a simple product.</p>\",\n\t\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\t\"sku\": \"woo-beanie\",\n\t\t\"low_stock_remaining\": null,\n\t\t\"backorders_allowed\": false,\n\t\t\"show_backorder_badge\": false,\n\t\t\"sold_individually\": true,\n\t\t\"permalink\": \"https://store.local/product/beanie/\",\n\t\t\"images\": [\n\t\t\t{\n\t\t\t\t\"id\": 45,\n\t\t\t\t\"src\": \"https://store.local/wp-content/uploads/2023/01/beanie-2.jpg\",\n\t\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2023/01/beanie-2-450x450.jpg\",\n\t\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2023/01/beanie-2.jpg 801w, https://store.local/wp-content/uploads/2023/01/beanie-2-450x450.jpg 450w, https://store.local/wp-content/uploads/2023/01/beanie-2-100x100.jpg 100w, https://store.local/wp-content/uploads/2023/01/beanie-2-600x600.jpg 600w, https://store.local/wp-content/uploads/2023/01/beanie-2-300x300.jpg 300w, https://store.local/wp-content/uploads/2023/01/beanie-2-150x150.jpg 150w, https://store.local/wp-content/uploads/2023/01/beanie-2-768x768.jpg 768w\",\n\t\t\t\t\"sizes\": \"(max-width: 801px) 100vw, 801px\",\n\t\t\t\t\"name\": \"beanie-2.jpg\",\n\t\t\t\t\"alt\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"variation\": [],\n\t\t\"item_data\": [],\n\t\t\"prices\": {\n\t\t\t\"price\": \"1800\",\n\t\t\t\"regular_price\": \"2000\",\n\t\t\t\"sale_price\": \"1800\",\n\t\t\t\"price_range\": null,\n\t\t\t\"currency_code\": \"USD\",\n\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\"currency_suffix\": \"\",\n\t\t\t\"raw_prices\": {\n\t\t\t\t\"precision\": 6,\n\t\t\t\t\"price\": \"18000000\",\n\t\t\t\t\"regular_price\": \"20000000\",\n\t\t\t\t\"sale_price\": \"18000000\"\n\t\t\t}\n\t\t},\n\t\t\"totals\": {\n\t\t\t\"line_subtotal\": \"1800\",\n\t\t\t\"line_subtotal_tax\": \"360\",\n\t\t\t\"line_total\": \"1800\",\n\t\t\t\"line_total_tax\": \"360\",\n\t\t\t\"currency_code\": \"USD\",\n\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\"currency_suffix\": \"\"\n\t\t},\n\t\t\"catalog_visibility\": \"visible\",\n\t\t\"extensions\": {},\n\t\t\"_links\": {\n\t\t\t\"self\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items/c74d97b01eae257e44aa9d5bade97baf\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"collection\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t{\n\t\t\"key\": \"e03e407f41901484125496b5ec69a76f\",\n\t\t\"id\": 29,\n\t\t\"quantity\": 1,\n\t\t\"type\": \"variation\",\n\t\t\"quantity_limits\": {\n\t\t\t\"minimum\": 1,\n\t\t\t\"maximum\": 9999,\n\t\t\t\"multiple_of\": 1,\n\t\t\t\"editable\": true\n\t\t},\n\t\t\"name\": \"Hoodie\",\n\t\t\"short_description\": \"\",\n\t\t\"description\": \"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vestibulum sagittis orci ac odio dictum tincidunt. Donec ut metus leo. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed luctus, dui eu sagittis sodales, nulla nibh sagittis augue, vel porttitor diam enim non metus. Vestibulum aliquam augue neque. Phasellus tincidunt odio eget ullamcorper efficitur. Cras placerat ut turpis pellentesque vulputate. Nam sed consequat tortor. Curabitur finibus sapien dolor. Ut eleifend tellus nec erat pulvinar dignissim. Nam non arcu purus. Vivamus et massa massa.</p>\",\n\t\t\"sku\": \"woo-hoodie-red\",\n\t\t\"low_stock_remaining\": null,\n\t\t\"backorders_allowed\": false,\n\t\t\"show_backorder_badge\": false,\n\t\t\"sold_individually\": false,\n\t\t\"permalink\": \"https://store.local/product/hoodie/?attribute_pa_color=red&attribute_logo=No\",\n\t\t\"images\": [\n\t\t\t{\n\t\t\t\t\"id\": 40,\n\t\t\t\t\"src\": \"https://store.local/wp-content/uploads/2023/01/hoodie-2.jpg\",\n\t\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2023/01/hoodie-2-450x450.jpg\",\n\t\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2023/01/hoodie-2.jpg 801w, https://store.local/wp-content/uploads/2023/01/hoodie-2-450x450.jpg 450w, https://store.local/wp-content/uploads/2023/01/hoodie-2-100x100.jpg 100w, https://store.local/wp-content/uploads/2023/01/hoodie-2-600x600.jpg 600w, https://store.local/wp-content/uploads/2023/01/hoodie-2-300x300.jpg 300w, https://store.local/wp-content/uploads/2023/01/hoodie-2-150x150.jpg 150w, https://store.local/wp-content/uploads/2023/01/hoodie-2-768x768.jpg 768w\",\n\t\t\t\t\"sizes\": \"(max-width: 801px) 100vw, 801px\",\n\t\t\t\t\"name\": \"hoodie-2.jpg\",\n\t\t\t\t\"alt\": \"\"\n\t\t\t}\n\t\t],\n\t\t\"variation\": [\n\t\t\t{\n\t\t\t\t\"attribute\": \"Color\",\n\t\t\t\t\"value\": \"Red\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"attribute\": \"Logo\",\n\t\t\t\t\"value\": \"No\"\n\t\t\t}\n\t\t],\n\t\t\"item_data\": [],\n\t\t\"prices\": {\n\t\t\t\"price\": \"4200\",\n\t\t\t\"regular_price\": \"4500\",\n\t\t\t\"sale_price\": \"4200\",\n\t\t\t\"price_range\": null,\n\t\t\t\"currency_code\": \"USD\",\n\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\"currency_suffix\": \"\",\n\t\t\t\"raw_prices\": {\n\t\t\t\t\"precision\": 6,\n\t\t\t\t\"price\": \"42000000\",\n\t\t\t\t\"regular_price\": \"45000000\",\n\t\t\t\t\"sale_price\": \"42000000\"\n\t\t\t}\n\t\t},\n\t\t\"totals\": {\n\t\t\t\"line_subtotal\": \"4200\",\n\t\t\t\"line_subtotal_tax\": \"840\",\n\t\t\t\"line_total\": \"4200\",\n\t\t\t\"line_total_tax\": \"840\",\n\t\t\t\"currency_code\": \"USD\",\n\t\t\t\"currency_symbol\": \"$\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"$\",\n\t\t\t\"currency_suffix\": \"\"\n\t\t},\n\t\t\"catalog_visibility\": \"visible\",\n\t\t\"extensions\": {},\n\t\t\"_links\": {\n\t\t\t\"self\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items/e03e407f41901484125496b5ec69a76f\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"collection\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: ValidationInputError Component Implementation in TypeScript\nDESCRIPTION: Complete implementation of the ValidationInputError component that conditionally displays validation error messages based on their state in the validation store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const ValidationInputError = ( {\n\terrorMessage = '',\n\tpropertyName = '',\n\telementId = '',\n}: ValidationInputErrorProps ): JSX.Element | null => {\n\tconst { validationError, validationErrorId } = useSelect( ( select ) => {\n\t\tconst store = select( validationStore );\n\t\treturn {\n\t\t\tvalidationError: store.getValidationError( propertyName ),\n\t\t\tvalidationErrorId: store.getValidationErrorId( elementId ),\n\t\t};\n\t} );\n\n\tif ( ! errorMessage || typeof errorMessage !== 'string' ) {\n\t\tif ( validationError?.message && ! validationError?.hidden ) {\n\t\t\terrorMessage = validationError.message;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"wc-block-components-validation-error\" role=\"alert\">\n\t\t\t<p id={ validationErrorId }>{ errorMessage }</p>\n\t\t</div>\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Using getRelatedProducts Function in JavaScript\nDESCRIPTION: Example demonstrating how to use the getRelatedProducts function to fetch related products for a specific product ID, including error handling and the optional fallback to random products feature.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/utils/get-related-products/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport getRelatedProducts from './path-to-getRelatedProducts';\n\ngetRelatedProducts( 123, { fallbackToRandomProducts: true } )\n  .then( relatedProducts => {\n    console.log( relatedProducts );\n  } )\n  .catch( error => {\n    console.error( 'Error fetching related products:', error );\n  } );\n```\n\n----------------------------------------\n\nTITLE: Checking HPOS Status via WP-CLI\nDESCRIPTION: Displays the current status of HPOS on a site, including whether HPOS and compatibility mode are enabled, and statistics about unsynced orders and orders subject to cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos status\nHPOS enabled?: yes\nCompatibility mode enabled?: no\nUnsynced orders: 651\nOrders subject to cleanup: 348\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Single Product Attribute - JSON\nDESCRIPTION: Shows an example of the JSON response from fetching a single product attribute by ID. The object contains keys such as id, name, taxonomy, type, order, and has_archives. API clients can use this sample to understand the response shape for single attribute queries.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 1,\n\t\"name\": \"Color\",\n\t\"taxonomy\": \"pa_color\",\n\t\"type\": \"select\",\n\t\"order\": \"menu_order\",\n\t\"has_archives\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling HPOS with Compatibility Mode via WP-CLI\nDESCRIPTION: Enables HPOS and compatibility mode from the command line. The --with-sync flag enables compatibility mode which keeps both storage systems in sync.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos enable --with-sync\nRunning pre-enable checks...\nSuccess: Sync enabled.\nSuccess: HPOS enabled.\n```\n\n----------------------------------------\n\nTITLE: Fixing PHP Notices and Invalid CSS Output in StyleAttributesUtils\nDESCRIPTION: This fix addresses PHP notices and invalid CSS output in StyleAttributesUtils, particularly for settings like Border Radius, Border Width, Margin, and Padding in the Products (Beta) block, Product Image, and On-Sale Badge blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/911.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// No specific code provided, but changes affect StyleAttributesUtils functionality\n```\n\n----------------------------------------\n\nTITLE: Creating a Section Beneath the Products Tab in WooCommerce\nDESCRIPTION: This code snippet demonstrates how to add a new section called 'WC Slider' under the Products tab in WooCommerce settings. It hooks into the 'woocommerce_get_sections_products' filter to add a new entry to the sections array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-a-section-to-a-settings-tab.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n\n* Create the section beneath the products tab\n\n**/\n\nadd_filter( 'woocommerce_get_sections_products', 'wcslider_add_section' );\n\nfunction wcslider_add_section( $sections ) {\n\n    $sections['wcslider'] = __( 'WC Slider', 'text-domain' );\n\n    return $sections;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Checkout Failure Event Handler\nDESCRIPTION: Implementation of onCheckoutFail event handler for handling checkout failures in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribeOnCheckoutFail = eventRegistration.onCheckoutFail( ( a ) => {\n\tconsole.log( 'onCheckoutFail', a );\n} );\n```\n\n----------------------------------------\n\nTITLE: Using is_woocommerce Conditional Function in PHP\nDESCRIPTION: Returns true if on a page which uses WooCommerce templates. Note that cart and checkout are standard pages with shortcodes and thus are not included in this check.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nis_woocommerce()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Product Tour Steps in WooCommerce using JavaScript\nDESCRIPTION: This code demonstrates how to create a custom product tour by using the experimental_woocommerce_admin_product_tour_steps filter. It shows how to define tour steps with reference elements, focus elements, and localized text content. The implementation includes desktop-specific configurations and internationalization support.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/creating-custom-product-tours.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n* External dependencies\n*/\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\n\naddFilter(\n   experimental_woocommerce_admin_product_tour_steps,\n   'custom-product',\n   (tourSteps, tourType) => {\n\tif ('custom-product' !== tourType) {\n   \t\treturn tourSteps;\n}\n\n\treturn [\n\t\t{\n\t\t   referenceElements: {\n\t\t      desktop: '#title',// The element to highlight\n\t\t   },\n\t\t   focusElement: {\n\t\t      desktop: '#title',// A form element to be focused\n\t\t   },\n\t\t   meta: {\n\t\t      name: 'product-name', // Step name\n\t\t      heading: __( 'Product name', 'custom-product' ),\n  \t\t      descriptions: {\n\t\t         desktop: __(\n\t\t            'Start typing your new product name here. This will be what your customers will see in your store.',\n\t\t            'custom-product'\n\t\t         ),\n\t\t      },\n\t\t   },\n\t\t},\n\t];\n   }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining WC_Object_Data_Store_Interface Methods in PHP\nDESCRIPTION: This code snippet outlines the required methods that must be implemented in a WooCommerce data store class. These methods handle CRUD operations and meta data management for WooCommerce objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n\"create\"\n\"read\"\n\"update\"\n\"delete\"\n\"read_meta\"\n\"delete_meta\"\n\"add_meta\"\n\"update_meta\"\n```\n\n----------------------------------------\n\nTITLE: Deleting WooCommerce Order Refund via CLI\nDESCRIPTION: Deletes a specific WooCommerce order refund identified by its `id` and `order_id`. Requires the `--force` flag as refunds typically do not support trashing. The `--porcelain` flag outputs only the ID on successful deletion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order_refund delete <order_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Using Icons in WooCommerce Blocks with WordPress Icon Component\nDESCRIPTION: Demonstrates how to import and use icons from both @woocommerce/icons and @wordpress/icons packages. Shows different ways to implement the Icon component with various size configurations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/icons/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { woo } from '@woocommerce/icons';\nimport { Icon, postComments } from '@wordpress/icons';\n\n<Icon icon={ woo } /> // icon  from '@woocommerce/icons'\n<Icon icon={ postComments } /> // icon from '@wordpress/icons'\n<Icon icon={ woo } size={ 16 } />\n<Icon icon={ woo } width={ 20 } height={ Math.floor( 20 * 1.67 ) } />\n```\n\n----------------------------------------\n\nTITLE: Checkout Success Event Handler\nDESCRIPTION: Implementation of onCheckoutSuccess event handler for handling successful checkouts in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribeOnCheckoutSuccess = eventRegistration.onCheckoutSuccess(\n\t( a ) => {\n\t\tconsole.log( 'onCheckoutSuccess', a );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Settings to a Custom WooCommerce Section\nDESCRIPTION: This code snippet shows how to add custom settings to a previously created WooCommerce section. It hooks into 'woocommerce_get_settings_products' and checks if the current section matches the custom section before adding specific settings fields such as a checkbox and a text field.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-a-section-to-a-settings-tab.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n\n* Add settings to the specific section we created before\n\n*/\n\nadd_filter( 'woocommerce_get_settings_products', 'wcslider_all_settings', 10, 2 );\n\nfunction wcslider_all_settings( $settings, $current_section ) {\n\n/**\n\n* Check the current section is what we want\n\n**/\n\n  if ( $current_section == 'wcslider' ) {\n  \n      $settings_slider = array();\n    \n      // Add Title to the Settings\n      \n      $settings_slider[] = array( 'name' => __( 'WC Slider Settings', 'text-domain' ), 'type' => 'title', 'desc' => __( 'The following options are used to configure WC Slider', 'text-domain' ), 'id' => 'wcslider' );\n      \n      // Add first checkbox option\n      \n      $settings_slider[] = array(\n      \n          'name' => __( 'Auto-insert into single product page', 'text-domain' ),\n          \n          'desc_tip' => __( 'This will automatically insert your slider into the single product page', 'text-domain' ),\n          \n          'id' => 'wcslider_auto_insert',\n          \n          'type' => 'checkbox',\n          \n          'css' => 'min-width:300px;',\n          \n          'desc' => __( 'Enable Auto-Insert', 'text-domain' ),\n      \n      );\n      \n      // Add second text field option\n      \n      $settings_slider[] = array(\n      \n          'name' => __( 'Slider Title', 'text-domain' ),\n          \n          'desc_tip' => __( 'This will add a title to your slider', 'text-domain' ),\n          \n          'id' => 'wcslider_title',\n          \n          'type' => 'text',\n          \n          'desc' => __( 'Any title you want can be added to your slider with this option!', 'text-domain' ),\n      \n      );\n      \n      $settings_slider[] = array( 'type' => 'sectionend', 'id' => 'wcslider' );\n      \n      return $settings_slider;\n    \n    /**\n    \n    * If not, return the standard settings\n    \n    **/\n    \n    } else {\n    \n        return $settings;\n  \n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing WC_Integration Class for Custom WooCommerce Settings in PHP\nDESCRIPTION: This code creates a custom integration class that extends WC_Integration to add settings for API key and debug options. It includes initialization of form fields, hooks for saving options, and proper documentation of each setting field.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/implementing-settings.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Integration Demo Integration.\n *\n * @package  WC_Integration_Demo_Integration\n * @category Integration\n * @author   Patrick Rauland\n */\nif ( ! class_exists( 'WC_Integration_Demo_Integration' ) ) :\n    /**\n     * Demo Integration class.\n     */\n    class WC_Integration_Demo_Integration extends WC_Integration {\n        /**\n         * Init and hook in the integration.\n         */\n        public function __construct() {\n            global $woocommerce;\n\n            $this->id                 = 'integration-demo';\n            $this->method_title       = __( 'Integration Demo', 'woocommerce-integration-demo' );\n            $this->method_description = __( 'An integration demo to show you how easy it is to extend WooCommerce.', 'woocommerce-integration-demo' );\n\n            // Load the settings.\n            $this->init_form_fields();\n            $this->init_settings();\n\n            // Define user set variables.\n            $this->api_key = $this->get_option( 'api_key' );\n            $this->debug   = $this->get_option( 'debug' );\n\n            // Actions.\n            add_action( 'woocommerce_update_options_integration_' .  $this->id, array( $this, 'process_admin_options' ) );\n        }\n\n        /**\n         * Initialize integration settings form fields.\n         */\n        public function init_form_fields() {\n            $this->form_fields = array(\n                'api_key' => array(\n                    'title'       => __( 'API Key', 'woocommerce-integration-demo' ),\n                    'type'        => 'text',\n                    'description' => __( 'Enter with your API Key. You can find this in \"User Profile\" drop-down (top right corner) > API Keys.', 'woocommerce-integration-demo' ),\n                    'desc_tip'    => true,\n                    'default'     => '',\n                ),\n                'debug' => array(\n                    'title'       => __( 'Debug Log', 'woocommerce-integration-demo' ),\n                    'type'        => 'checkbox',\n                    'label'       => __( 'Enable logging', 'woocommerce-integration-demo' ),\n                    'default'     => 'no',\n                    'description' => __( 'Log events such as API requests', 'woocommerce-integration-demo' ),\n                ),\n            );\n        }\n    }\nendif;\n```\n\n----------------------------------------\n\nTITLE: Clicking Enabled Element in JavaScript\nDESCRIPTION: This function clicks an element only if it is enabled. Otherwise, it raises an error. It takes the selector as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_44\n\nLANGUAGE: JavaScript\nCODE:\n```\nclick(selector)\n```\n\n----------------------------------------\n\nTITLE: Checking for Field Validation Errors in TypeScript\nDESCRIPTION: Simple code snippet showing how to determine if a validation error exists and should be displayed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasError = validationError?.message && ! validationError?.hidden;\n```\n\n----------------------------------------\n\nTITLE: Initializing Form Fields in WooCommerce Settings\nDESCRIPTION: Call to initialize form fields in the class constructor. This should be placed in your constructor to ensure settings are defined before use.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$this->init_form_fields();\n```\n\n----------------------------------------\n\nTITLE: Customizing Remote Logging API Endpoint with WordPress Filter\nDESCRIPTION: Example of using the 'woocommerce_remote_logging_log_endpoint' WordPress filter to modify the URL of the remote logging API endpoint. This allows for custom endpoint configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n  'woocommerce_remote_logging_log_endpoint',\n  'my-plugin',\n  (endpoint) => 'https://my-custom-endpoint.com/log'\n);\n```\n\n----------------------------------------\n\nTITLE: Field Sanitization in WooCommerce Checkout\nDESCRIPTION: Example of implementing field sanitization using the woocommerce_sanitize_additional_field filter to format government ID input.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_sanitize_additional_field',\n\tfunction ( $field_value, $field_key ) {\n\t\tif ( 'namespace/gov-id' === $field_key ) {\n\t\t\t$field_value = str_replace( ' ', '', $field_value );\n\t\t\t$field_value = strtoupper( $field_value );\n\t\t}\n\t\treturn $field_value;\n\t},\n\t10,\n\t2\n);\n```\n\n----------------------------------------\n\nTITLE: Loading and Using Data Stores in WooCommerce\nDESCRIPTION: Demonstrates how to load and use data stores in WooCommerce, including both built-in and custom data stores.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Load the shipping zone data store.\n$data_store = WC_Data_Store::load( 'shipping-zone' );\n// Get the number of shipping methods for zone ID 4.\n$num_of_methods = $data_store->get_method_count( 4 );\n\n// Get the number of shipping methods for zone ID 4.\n$num_of_methods = WC_Data_Store::load( 'shipping-zone' )->get_method_count( 4 );\n\n$data_store = WC_Data_Store::load( 'mycustomdata' );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Product Editor UI Store Actions and Selectors Overview\nDESCRIPTION: Overview of the action types, actions, and selectors defined in the WooCommerce Product Editor UI store. The store manages modal editor and prepublish panel states through specific actions and provides selectors to retrieve current state values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/store/product-editor-ui/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Structure\n\nDefines action types for the UI state:\n\n-   `ACTION_MODAL_EDITOR_OPEN`\n-   `ACTION_MODAL_EDITOR_CLOSE`\n-   `ACTION_PANEL_PREPUBLISH_OPEN`\n-   `ACTION_PANEL_PREPUBLISH_CLOSE`\n\n### Actions\n\n-   `openModalEditor`\n-   `closeModalEditor`\n-   `openPrepublishPanel`\n-   `closePrepublishPanel`\n\n### Selectors\n\nSelector function:\n\n-   `isModalEditorOpen`\n-   `isPrepublishPanelOpen`\n\n### Store\n\nRegisters the WooCommerce Product Editor UI store with the following:\n\n-   Store Name: `woo/product-editor-ui`\n```\n\n----------------------------------------\n\nTITLE: Registering Corrected WooCommerce Checkout Filter (JavaScript)\nDESCRIPTION: Registers a custom checkout filter using `wc.blocksCheckout.__experimentalRegisterCheckoutFilters`. This filter modifies the `subtotalPriceFormat` to include the required '<price/>' placeholder along with 'test'. This snippet is used to verify that the Cart and Checkout blocks load correctly after applying a valid format filter, following the error test. Requires a plugin like 'Simple Custom CSS and JS' to inject this code into the footer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/640.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nwc.blocksCheckout.__experimentalRegisterCheckoutFilters( 'my-test-extension', {\n\tsubtotalPriceFormat: ( value ) => '<price/>test',\n} );\n```\n\n----------------------------------------\n\nTITLE: Product Title Controls Feature Flag (TypeScript)\nDESCRIPTION: Feature flag implementation for new product title controls including multiple flag checks for different aspects of the title block functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nattributes.ts#L25-L32\n```\n\n----------------------------------------\n\nTITLE: Verifying Publish and Trash Actions in JavaScript\nDESCRIPTION: This function verifies that an item can be published and trashed. It takes parameters for the button, publish notice, publish verification, and trash verification.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyPublishAndTrash(button, publishNotice, publishVerification, trashVerification)\n```\n\n----------------------------------------\n\nTITLE: Customizing Dummy Product for Email Preview in WooCommerce (PHP)\nDESCRIPTION: This code demonstrates how to modify the dummy product used in email preview. It uses the 'woocommerce_email_preview_dummy_product' filter to change the name of the product.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_dummy_product', function( $product ) {\n    // Modify the dummy product object\n    $product->set_name( 'My Product' );\n    return $product;\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering WooCommerce Checkout Filter for Error Testing (JavaScript)\nDESCRIPTION: Registers a custom checkout filter using `wc.blocksCheckout.__experimentalRegisterCheckoutFilters`. This filter intentionally sets the `subtotalPriceFormat` to a static string 'test', omitting the required '<price/>' placeholder, in order to trigger and test the `mustContain` validation error message. Requires a plugin like 'Simple Custom CSS and JS' to inject this code into the footer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/640.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nwc.blocksCheckout.__experimentalRegisterCheckoutFilters( 'my-test-extension', {\n\tsubtotalPriceFormat: ( value ) => 'test',\n} );\n```\n\n----------------------------------------\n\nTITLE: Processing Order and Payment via WooCommerce REST API - HTTP\nDESCRIPTION: Issues a POST request to the WooCommerce checkout endpoint to finalize customer addresses, payment method, and payment data, initiating order processing and attempting payment. All required checkout fields are provided in the request body. The endpoint responds synchronously with payment result and possible redirect URL for payment completion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPOST /wc/store/v1/checkout\n```\n\n----------------------------------------\n\nTITLE: HtmlFormatter Usage Example in WooCommerce\nDESCRIPTION: Shows how to use the HtmlFormatter to sanitize and format HTML content by running it through WordPress text processing functions and stripping unsafe HTML tags.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nget_formatter( 'html' )->format(\n  \"<script>alert('bad script!')</script> This \\\"coffee\\\" is <strong>very strong</strong>.\"\n);\n```\n\n----------------------------------------\n\nTITLE: Using the Flag Component in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `Flag` component. It renders the flag for the country specified by the `code` prop ('VU' for Vanuatu) and sets the emoji's font size using the `size` prop (48). The component relies on operating system emojis for rendering the flag.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/flag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Flag code=\"VU\" size={ 48 } />\n```\n\n----------------------------------------\n\nTITLE: Using SectionActions Component in WooCommerce Product Editor\nDESCRIPTION: This example demonstrates how to import and implement the SectionActions component within a custom product block edit function. The component creates a slot for section-specific actions, in this case containing a button that triggers a product action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-slot-fill/section-actions/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { __experimentalSectionActions as SectionActions } from '@woocommerce/product-editor'\nimport { Button } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\n\nfunction CustomProductBlockEdit() {\n  return (\n    <>\n      <SectionActions>\n        <Button\n          onClick={ handleProductAction }\n          variant=\"secondary\"\n        >\n          { __( 'Product action!', 'woocommerce' ) }\n        </Button>\n      </SectionActions>\n\n      <OtherBlockComponents { ...other} />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Sanitizing Variables in PHP\nDESCRIPTION: Cleans variables using sanitize_text_field. Can process arrays recursively, while ignoring non-scalar values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nwc_clean( $var )\n```\n\n----------------------------------------\n\nTITLE: Using the WooCommerce Search Component in JSX\nDESCRIPTION: Example demonstrating the implementation of the Search component in a React (JSX) environment. It configures the component to search for 'products', sets a placeholder text, binds the selected items to component state via the 'selected' prop, and updates the state using the 'onChange' callback.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/search/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Search\n type=\"products\"\n placeholder=\"Search for a product\"\n selected={ selected }\n onChange={ items => setState( { selected: items } ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Filtering WooCommerce Shipping Fields\nDESCRIPTION: Hook that filters the shipping fields before they are returned, allowing for customization of shipping fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$address_fields = apply_filters( 'woocommerce_shipping_fields', $address_fields );\n```\n\n----------------------------------------\n\nTITLE: Using Number Literals in Expressions\nDESCRIPTION: Examples of different number literals that can be used in expressions, including positive, negative, and decimal numbers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n1\n5.23\n-9\n```\n\n----------------------------------------\n\nTITLE: Using the loop_shop_per_page Filter in PHP\nDESCRIPTION: A filter used in ProductQuery and ProductCollection blocks to control the number of products displayed per page in shop loops.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'loop_shop_per_page' )\n```\n\n----------------------------------------\n\nTITLE: Including Package Requirements in composer.json for WooCommerce\nDESCRIPTION: This snippet demonstrates how to add package requirements to the composer.json file in the WooCommerce root directory. It includes the package name, version, and other necessary dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/packages/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"woocommerce/woocommerce\",\n  \"description\": \"An eCommerce toolkit that helps you sell anything. Beautifully.\",\n  \"homepage\": \"https://woocommerce.com/\",\n  \"type\": \"wordpress-plugin\",\n  \"license\": \"GPL-3.0-or-later\",\n  \"prefer-stable\": true,\n  \"minimum-stability\": \"dev\",\n  \"require\": {\n    \"composer/installers\": \"1.6.0\",\n    \"woocommerce/woocommerce-rest-api\": \"dev-test/jetpack-autoloader\",\n    \"woocommerce/woocommerce-blocks\": \"dev-build/2.2.0-dev\",\n    \"automattic/jetpack-autoloader\": \"1.2.0\",\n    \"woocommerce/woocommerce-example-package\": \"1.0.0\"\n  },\n  ...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Number Field to WooCommerce Product Form Basic Details Section\nDESCRIPTION: This PHP snippet demonstrates how to add a custom 'Animal age' number field to the basic details section of the WooCommerce product form using the template API and the 'woocommerce_layout_template_after_instantiation' action hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/generic-fields-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_layout_template_after_instantiation',\n\tfunction( $layout_template_id, $layout_template_area, $layout_template ) {\n\t    $basic_details = $layout_template->get_section_by_id( 'basic-details' );\n\n        if ( $basic_details ) {\n\t        $basic_details->add_block(\n        \t\t[\n        \t\t\t'id' \t     => 'example-tutorial-animal-age',\n                    // This orders the field, core fields are separated by sums of 10.\n\t            \t'order'\t     => 40,\n\t            \t'blockName'  => 'woocommerce/product-number-field',\n\t            \t'attributes' => [\n                        // Attributes specific for the product-number-field.\n\t            \t\t'label' => 'Animal age',\n\t            \t\t'property' => 'meta_data.animal_age',\n\t            \t\t'suffix' => 'Yrs',\n\t            \t\t'placeholder' => 'Age of animal',\n\t            \t\t'required' => true,\n\t            \t\t'min' => 1,\n\t            \t\t'max' => 20\n\t            \t],\n                ]\n            );\n        }\n\t},\n\t10,\n\t3\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Additional Coupon Data Store Methods in PHP\nDESCRIPTION: Provides stub implementations for additional methods required by the WC_Coupon_Data_Store_Interface, including usage count management and code/ID retrieval.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Increase usage count for current coupon.\n * \n * @param WC_Coupon\n * @param string $used_by Either user ID or billing email\n */\npublic function increase_usage_count( &$coupon, $used_by = '' ) {\n\n}\n\n/**\n * Decrease usage count for current coupon.\n * \n * @param WC_Coupon\n * @param string $used_by Either user ID or billing email\n */\npublic function decrease_usage_count( &$coupon, $used_by = '' ) {\n\n}\n\n/**\n * Get the number of uses for a coupon by user ID.\n * \n * @param WC_Coupon\n * @param id $user_id\n * @return int\n */\npublic function get_usage_by_user_id( &$coupon, $user_id ) {\n\n}\n\n/**\n * Return a coupon code for a specific ID.\n * @param int $id\n * @return string Coupon Code\n */\n public function get_code_by_id( $id ) {\n \n }\n\n /**\n  * Return an array of IDs for for a specific coupon code.\n  * Can return multiple to check for existence.\n  * @param string $code\n  * @return array Array of IDs.\n  */\n public function get_ids_by_code( $code ) {\n \n }\n```\n\n----------------------------------------\n\nTITLE: Sending Custom-Routed Failure Report in Bash\nDESCRIPTION: Example command demonstrating how to send a failure report using custom routing configuration from a JSON file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/slack-test-report/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils slack-test-report \\\n  --config \".github/workflows/slack-report-config.json\" \\\n  -c failure \\\n  -r \"Daily Checks\" \\\n  -m \"Test commit message\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Cart Item Using WooCommerce Store API - HTTP\nDESCRIPTION: Issues an HTTP GET request to fetch a specific cart item using its unique key as a URL parameter. The :key placeholder should be replaced by the actual cart item key to uniquely identify the item in the cart. The response is expected to be a single cart item in JSON format.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /cart/items/:key\n```\n\n----------------------------------------\n\nTITLE: Implementing Checkbox Field in WooCommerce Checkout\nDESCRIPTION: Example of registering a checkbox field for newsletter subscription in the contact information section.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_init',\n\tfunction() {\n\t\twoocommerce_register_additional_checkout_field(\n\t\t\tarray(\n\t\t\t\t'id'       => 'namespace/marketing-opt-in',\n\t\t\t\t'label'    => 'Do you want to subscribe to our newsletter?',\n\t\t\t\t'location' => 'contact',\n\t\t\t\t'type'     => 'checkbox',\n\t\t\t)\n\t\t);\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding WooCommerce Button Background Color (CSS)\nDESCRIPTION: CSS code snippet demonstrating how to override the default background color of various WooCommerce buttons by targeting specific selectors (`a.button`, `button.button`, `input.button`, `#review_form #submit`) and setting the 'background' property to 'black'. This code should be added to the active theme's stylesheet.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\na.button, \nbutton.button, \ninput.button, \n#review_form #submit {\n    background:black; \n}\n```\n\n----------------------------------------\n\nTITLE: Settings Management Commands\nDESCRIPTION: CLI commands for managing WooCommerce settings. Includes commands for getting and updating setting values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_56\n\nLANGUAGE: cli\nCODE:\n```\nwc setting get [id]\nwc setting update [id]\n```\n\n----------------------------------------\n\nTITLE: Documenting WooCommerce Blocks Components in Markdown\nDESCRIPTION: This markdown snippet provides an overview of general purpose components used in WooCommerce blocks. It explains that these components are shared and can be used across different parts of the WooCommerce ecosystem. The snippet also includes a link to more detailed documentation on components and Storybook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/base/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# WooCommerce Blocks - General Purpose Components\n\nThese are shared components used in WooCommerce blocks, and may be used in the store front end (shopper experience) as well as the editor or admin dashboard.\n\nSee [_Components & Storybook_](../../../../docs/contributors/storybook-and-components.md) doc for more information.\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Admin Interface\nDESCRIPTION: Commands to build, lint, test, and type-check the React-based admin interface located in the plugins/woocommerce/client/admin directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build the React-based admin client.\npnpm --filter='@woocommerce/plugin-woocommerce' build:admin\n# Lint the React-based admin client.\npnpm --filter='@woocommerce/admin-library' lint\n# Test the React-based admin client.\npnpm --filter='@woocommerce/admin-library' test\n# Watch the tests of the React-based admin client.\npnpm --filter='@woocommerce/admin-library' test:watch\n# Run a type check over the React-based admin client's TypeScript files.\npnpm --filter='@woocommerce/admin-library' ts:check\n```\n\n----------------------------------------\n\nTITLE: Defining WordPress Plugin Header Comment for WooCommerce Extension in PHP\nDESCRIPTION: This code snippet demonstrates the structure of a WordPress plugin header comment for a WooCommerce extension. It includes various metadata fields such as plugin name, description, version, author details, WooCommerce compatibility, and licensing information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/example-plugin-header-comment.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n* Plugin Name: WooCommerce Extension\n* Plugin URI: https://woocommerce.com/products/woocommerce-extension/\n* Description: Your extension's description text.\n* Version: 1.0.0\n* Author: Your Name\n* Author URI: http://yourdomain.com/\n* Developer: Your Name\n* Developer URI: http://yourdomain.com/\n* Text Domain: woocommerce-extension\n* Domain Path: /languages\n*\n* Woo: 12345:342928dfsfhsf8429842374wdf4234sfd\n* WC requires at least: 8.0\n* WC tested up to: 8.3\n*\n* License: GNU General Public License v3.0\n* License URI: http://www.gnu.org/licenses/gpl-3.0.html\n*/\n```\n\n----------------------------------------\n\nTITLE: Defining WC_REMOVE_ALL_DATA Constant in PHP for WooCommerce Uninstallation\nDESCRIPTION: This PHP code snippet defines a constant WC_REMOVE_ALL_DATA as true in the wp-config.php file. When this constant is set, deactivating and deleting WooCommerce will remove all associated data from the WordPress database.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/uninstall_remove_all_woocommerce_data.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WC_REMOVE_ALL_DATA', true );\n\n/* That's all, stop editing! Happy publishing. */\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Store Management Link with JavaScript Filter\nDESCRIPTION: JavaScript implementation that adds a custom store management link to the WooCommerce home screen by using the WordPress hooks system and importing an icon from the @wordpress/icons package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-add-your-own-store-management-links.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { megaphone } from \"@wordpress/icons\";\nimport { addFilter } from \"@wordpress/hooks\";\n\naddFilter(\n  \"woocommerce_admin_homescreen_quicklinks\",\n  \"my-extension\",\n  (quickLinks) => {\n    return [\n      ...quickLinks,\n      {\n        title: \"My link\",\n        href: \"link/to/something\",\n        icon: megaphone,\n      },\n    ];\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Shipping and Payment Methods\nDESCRIPTION: Commands for managing shipping methods and payment gateways, including listing and retrieving individual methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_62\n\nLANGUAGE: cli\nCODE:\n```\nwc shipping_method list\nwc shipping_method get [id]\nwc payment_gateway list\nwc payment_gateway get [id]\n```\n\n----------------------------------------\n\nTITLE: Getting WooCommerce Page ID in PHP\nDESCRIPTION: Retrieves a WooCommerce page ID by its name (e.g., 'thankyou', 'cart', 'checkout').\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nwc_get_page_id( $page )\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Adding Item to Cart\nDESCRIPTION: Command line example using cURL to add a product to the cart. Shows how to include the required Nonce authentication header and pass product ID and quantity as query parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/cart/add-item?id=100&quantity=1\n```\n\n----------------------------------------\n\nTITLE: Accessing Store Notices Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Store Notices Store which is dedicated to handling various store notices and alerts in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst { storeNoticesStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Implementing Category-Specific Content with WooCommerce Conditional Tags - PHP\nDESCRIPTION: Example demonstrating how to display different content based on product categories using WooCommerce conditional tags. Shows nested conditional logic for 'shirts' and 'games' categories with a default fallback.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/conditional-tags.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( is_product_category() ) {\n\n  if ( is_product_category( 'shirts' ) ) {\n    echo 'Hi! Take a look at our sweet t-shirts below.';\n  } elseif ( is_product_category( 'games' ) ) {\n    echo 'Hi! Hungry for some gaming?';\n  } else {\n    echo 'Hi! Check out our products below.';\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering OnCheckoutSuccess via eventRegistration Prop (Extensible Payment Method Component, JSX)\nDESCRIPTION: This snippet demonstrates how a third-party or registered WooCommerce payment method component can subscribe to the onCheckoutSuccess event using the eventRegistration prop. The component uses React's useEffect from the global window.wp.element object to register and clean up the event observer. eventRegistration must be passed into the component by the WooCommerce checkout system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onCheckoutSuccess } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutSuccess( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutSuccess ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding SELECT Clause to WooCommerce Analytics Queries\nDESCRIPTION: PHP function to add a SELECT clause to WooCommerce analytics queries for including currency information in results.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction add_select_subquery( $clauses ) {\n\t$clauses[] = ', currency_postmeta.meta_value AS currency';\n\n\treturn $clauses;\n}\n\nadd_filter( 'woocommerce_analytics_clauses_select_orders_subquery', 'add_select_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_select_orders_stats_total', 'add_select_subquery' );\nadd_filter( 'woocommerce_analytics_clauses_select_orders_stats_interval', 'add_select_subquery' );\n```\n\n----------------------------------------\n\nTITLE: Removing Admin Notes on WooCommerce Extension Deactivation (PHP)\nDESCRIPTION: Shows how to delete admin notes created by an extension when it is deactivated. This example uses a dedicated Note class with the NoteTraits trait from WooCommerce Admin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-deactivation-and-uninstallation.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction my_great_extension_deactivate() {\n    ExampleNote::possibly_delete_note();\n}\nregister_deactivation_hook( __FILE__, 'my_great_extension_deactivate' );\n\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Gateway via WooCommerce CLI - Markdown\nDESCRIPTION: Documents the usage and available options for updating a payment gateway using the WooCommerce CLI. Specifies flags for setting the gateway ID, label, description, order, status, and settings, as well as a flag to output only the resource ID. Intended for administrators or automation scripts to configure payment gateways from the command line. Inputs are given as CLI flags, with no expected code outputs except success status and, optionally, the resource ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_63\n\nLANGUAGE: markdown\nCODE:\n```\n#### wc payment_gateway update [id]\n\n- `--id` - Unique identifier for the resource.\n- `--title` - Payment gateway title on checkout.\n- `--description` - Payment gateway description on checkout.\n- `--order` - Payment gateway sort order.\n- `--enabled` - Payment gateway enabled status.\n- `--settings` - Payment gateway settings.\n- `--porcelain` - Output just the id when the operation is successful.\n```\n\n----------------------------------------\n\nTITLE: Dispatching Coupon Application Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Demonstrates dispatching the receiveApplyingCoupon action for the cartStore Redux store in WooCommerce using the useDispatch hook. It requires the cartStore to be available in the context and dispatches the receiveApplyingCoupon action with a couponCode parameter, which should be a string representing the coupon being applied. The dispatch call returns an action object indicating the coupon is being applied. Input: couponCode (string). Output: Redux action object. Requires the WooCommerce data store context and Redux setup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( receiveApplyingCoupon( couponCode ) );\n```\n\n----------------------------------------\n\nTITLE: REST API Endpoints for WooCommerce Onboarding\nDESCRIPTION: Collection of REST API endpoints used for the WooCommerce onboarding process. These endpoints handle plugin installation, activation, Jetpack connection, WooCommerce.com integration, and profile management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding.md#2025-04-23_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nPOST /wc-admin/plugins/install\nGET /wc-admin/plugins/active\nPOST /wc-admin/plugins/activate\nGET /wc-admin/plugins/connect-jetpack\nPOST /wc-admin/plugins/request-wccom-connect\nPOST /wc-admin/plugins/finish-wccom-connect\nPOST /wc-admin/plugins/connect-square\nGET /wc-admin/onboarding/profile\nPOST /wc-admin/onboarding/profile\nPOST /wc-admin/onboarding/tasks/import_sample_products\nPOST /wc-admin/onboarding/tasks/create_homepage\n```\n\n----------------------------------------\n\nTITLE: Testing Instructions for WooCommerce 7.8 Filter Blocks - text\nDESCRIPTION: This code snippet outlines essential test notes and requirements for verifying that legacy filter block markup continues to function as expected in WooCommerce 7.8. It provides context for the subsequent HTML code snippet and reminds testers about the prerequisite WooCommerce version. No additional dependencies are required beyond having WooCommerce 7.8 active. Inputs: None. Outputs: Instructions to ensure environmental setup is correct for the tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1044.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nImportant: test needs to be conducted using WooCommerce 7.8\n```\n\n----------------------------------------\n\nTITLE: CurrencyFormatter Usage Example in WooCommerce\nDESCRIPTION: Demonstrates using the CurrencyFormatter to append currency information to an array of price data, allowing API consumers to properly format currency values according to store settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nget_formatter( 'currency' )->format( [\n  'price'         => 1800,\n  'regular_price' => 1800,\n  'sale_price'    => 1800,\n] );\n```\n\n----------------------------------------\n\nTITLE: Comparing Order Data with No Differences\nDESCRIPTION: Checks for differences in a specific order between legacy and HPOS datastores, reporting success when both versions match.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100087\nSuccess: No differences found.\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment, Installing Dependencies, and Running Build (Bash)\nDESCRIPTION: This sequence of Bash commands walks the user through navigating into the new extension directory, installing Node.js dependencies using npm, building the JavaScript assets, installing wp-env for WordPress local environments globally, and starting the WordPress environment for testing and development. Required dependencies include npm and Node.js, as well as access to the npm registry. Output is a fully initialized dev environment with a running local WordPress instance containing the new extension. Limitations: Assumes a UNIX-like shell and that npm global packages are accessible from PATH.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-woo-extension/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-extension-name\nnpm install # Install dependencies\nnpm run build # Build the javascript\nnpm -g i @wordpress/env # If you don't already have wp-env\nwp-env start # Start Wordpress environment\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Analytics Report in JavaScript\nDESCRIPTION: Example of adding a new analytics report using WordPress hooks and registering it with WooCommerce Admin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter( 'woocommerce_admin_reports_list', 'my-namespace', ( reports ) => {\n\treports.push( {\n\t\treport: 'example',\n\t\ttitle: __( 'Example', 'my-textdomain' ),\n\t\tcomponent: ExampleReportComponent,\n\t} );\n\n\treturn reports;\n} );\n```\n\n----------------------------------------\n\nTITLE: Overriding Block Image Styles via CSS for WooCommerce Cart/Checkout - CSS\nDESCRIPTION: This snippet demonstrates custom CSS to globally override the height and width of images inside WooCommerce Cart and Checkout Gutenberg blocks. It targets images using specific class selectors and applies styles with !important to ensure these dimensions override any theme-provided or default styles. This is useful when testing if payment method icons and other inline images remain visually correct despite strongly enforced custom styles. No external libraries are required; the code is intended for inclusion in a theme's custom CSS section or style.css.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/560.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.wp-block-woocommerce-cart img,\n.wp-block-woocommerce-checkout img {\n\theight: auto !important;\n\twidth: 100% !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Compatibility with WooCommerce Product Editor in PHP\nDESCRIPTION: This code snippet demonstrates how to declare compatibility with the WooCommerce product editor in a plugin's root PHP file. It uses the FeaturesUtil class to declare compatibility with the 'product_block_editor' feature.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/product-editor.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Utilities\\FeaturesUtil;\n\nadd_action(\n\t'before_woocommerce_init',\n\tfunction() {\n\t\tif ( class_exists( FeaturesUtil::class ) ) {\n\t\t\tFeaturesUtil::declare_compatibility( 'product_block_editor', plugin_basename( __FILE__ ), true );\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Hiding Apply Coupon Notice in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This basic example shows how to use the 'showApplyCouponNotice' filter to hide the apply coupon notice in the WooCommerce checkout process. It always returns false, effectively disabling the notice.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/coupons.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyShowApplyCouponNotice = ( defaultValue, extensions, args ) => {\n\treturn false;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tshowApplyCouponNotice: modifyShowApplyCouponNotice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Converting Dimension Units in PHP\nDESCRIPTION: Converts a measurement from WooCommerce's dimension unit to a target unit. Takes the dimension value, target unit, and optional source unit parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nwc_get_dimension( $dimension, $to_unit, $from_unit = '' )\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Product in JavaScript\nDESCRIPTION: This function creates a simple product configured in default.json. It returns the product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateSimpleProduct()\n```\n\n----------------------------------------\n\nTITLE: Creating Slot and Fill Components in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to use the createSlotFill function to create Slot and Fill components for extensibility in WooCommerce Blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/slot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n// Aliased import\nimport { createSlotFill } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { createSlotFill } = wc.blocksCheckout;\n\nconst slotName = '__experimentalSlotName';\n\nconst { Fill, Slot } = createSlotFill( slotName );\n```\n\n----------------------------------------\n\nTITLE: Adding Fees Based on Payment Method in PHP\nDESCRIPTION: This PHP snippet shows how to add fees to the cart based on the selected payment method using the woocommerce_cart_calculate_fees action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n\t'woocommerce_cart_calculate_fees',\n\tfunction () {\n\t\tif ( is_admin() && ! defined( 'DOING_AJAX' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$chosen_payment_method_id = WC()->session->get( 'chosen_payment_method' );\n\t\t$cart                     = WC()->cart;\n\n\t\tif ( 'your-payment-method-slug' === $chosen_payment_method_id ) {\n\t\t\t$percentage = 0.05;\n\t\t\t$surcharge  = ( $cart->cart_contents_total + $cart->shipping_total ) * $percentage;\n\t\t\t$cart->add_fee( 'Payment method fee', $surcharge );\n\t\t}\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding `CustomerEffortScoreConsole` Surveys (JavaScript/React)\nDESCRIPTION: Illustrates how to use the `CustomerEffortScoreConsole` wrapper component within another React component (`MyComponent`). It employs the `useState` hook to manage an array (`ceses`) storing instances of the survey component. A button click triggers the `addCES` function, which appends a new `CustomerEffortScoreConsole` instance to the state, dynamically rendering multiple surveys. Requires React and the previously defined `CustomerEffortScoreConsole` component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/customer-effort-score/README.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconst MyComponent = function() {\n    const [ ceses, setCeses ] = useState( [] );\n\t\n    const addCES = () => {\n\t\tsetCeses( \n\t\t\tceses.concat( \n\t\t\t\t<CustomerEffortScoreConsole\n\t\t\t\t\ttitle={ `survey ${ceses.length + 1}` }\n                    firstQuestion=\"My first question\"\n\t\t\t\t\tkey={ ceses.length + 1 }\n\t\t\t\t/> \n\t\t\t) \n\t\t);\n\t};\n\n    return (\n        <>\n            { ceses }\n            <button onClick={ addCES }>Show new survey</button>\n        </>\n    );\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Rate Limit Options in WooCommerce Store API\nDESCRIPTION: Applies a filter to customize rate limit options for the Store API. Takes an array of rate limit options as input and returns the modified array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_store_api_rate_limit_options', array $rate_limit_options )\n```\n\n----------------------------------------\n\nTITLE: Displaying TotalsWrapper Props Controls in Storybook\nDESCRIPTION: This JSX code renders the Controls component from Storybook, which displays interactive controls for the TotalsWrapper component's props. It allows users to dynamically adjust prop values and see the effects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/components/totals-wrapper/docs/docs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\n<Controls />\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Coupon Constructor Implementation\nDESCRIPTION: Constructor implementation for the WooCommerce coupon CRUD object, showing how to handle different input types and load coupon data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function __construct( $data = '' ) {\n\tparent::__construct( $data );\n\n\tif ( $data instanceof WC_Coupon ) {\n\t\t$this->set_id( absint( $data->get_id() ) );\n\t} elseif ( is_numeric( $data ) && 'shop_coupon' === get_post_type( $data ) ) {\n\t\t$this->set_id( $data );\n\t} elseif ( ! empty( $data ) ) {\n\t\t$this->set_id( wc_get_coupon_id_by_code( $data ) );\n\t\t$this->set_code( $data );\n\t} else {\n\t\t$this->set_object_read( true );\n\t}\n\n\t$this->data_store = WC_Data_Store::load( 'coupon' );\n\tif ( $this->get_id() > 0 ) {\n\t\t$this->data_store->read( $this );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Assets\nDESCRIPTION: Command to compile JavaScript and CSS assets required for WooCommerce operation\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/development-environment.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Setter Method\nDESCRIPTION: Example of a setter method implementation for updating the 'used_by' property of a WooCommerce coupon object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function set_used_by( $used_by ) {\n\t$this->set_prop( 'used_by', array_filter( $used_by ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Proceed to Checkout Button Label\nDESCRIPTION: This example shows how to conditionally modify the 'Proceed to Checkout' button label based on cart contents. It checks if specific products (Sunglasses) are in the cart before applying a custom emoji-decorated label.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/checkout-and-place-order-button.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyProceedToCheckoutButtonLabel = (\n\tdefaultValue,\n\textensions,\n\targs\n) => {\n\tif ( ! args?.cart.items ) {\n\t\treturn defaultValue;\n\t}\n\n\tconst isSunglassesInCart = args?.cart.items.some(\n\t\t( item ) => item.name === 'Sunglasses'\n\t);\n\n\tif ( isSunglassesInCart ) {\n\t\treturn '😎 Proceed to checkout 😎';\n\t}\n\n\treturn defaultValue;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tproceedToCheckoutButtonLabel: modifyProceedToCheckoutButtonLabel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Registering Server-Side Cart Update Callback in PHP\nDESCRIPTION: This PHP snippet demonstrates how to register a server-side callback to handle cart updates, specifically for applying or removing a coupon based on a checkbox state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_update_callback(\n    [\n      'namespace' => 'extension-unique-namespace',\n      'callback'  => function( $data ) {\n        if ( isset( $data['checked'] ) && filter_var( $data['checked'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n          WC()->cart->apply_coupon( 'mailing-list-10-percent-coupon' );\n        } else {\n          WC()->cart->remove_coupon( 'mailing-list-10-percent-coupon' );\n        }\n      }\n    ]\n  );\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Table Structure for WooCommerce Coupons\nDESCRIPTION: Specifies the column structure for a custom 'wc_coupons' table to store coupon data, matching prop names 1-to-1 with column names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nid, code, amount, date_created, date_modified, discount_type, description, date_expires, usage_count,individual_use, product_ids, excluded_product_ids, usage_limit, usage_limit_per_user, limit_usage_to_x_items, free_shipping, product_categories, excluded_product_categories, exclude_sale_items, minimum_amount, maximum_amount, email_restrictions, used_by\n```\n\n----------------------------------------\n\nTITLE: Google Analytics Tracking Filter\nDESCRIPTION: Controls whether Google Analytics tracking is enabled or disabled.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_ga_disable_tracking', boolean $disable_tracking )\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Removing a Coupon\nDESCRIPTION: Command line example using cURL to remove a coupon code from the cart. Shows how to include the required Nonce authentication header and pass the coupon code parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/cart/remove-coupon?code=20off\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Exporter with WordPress Filter in PHP\nDESCRIPTION: This snippet shows how to register a custom exporter with the WordPress Blueprint package using the 'wooblueprint_exporters' filter. It includes the full custom exporter class and the filter registration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Blueprint\\Exporters\\StepExporter;\nuse Automattic\\WooCommerce\\Blueprint\\Steps\\Step;\n\nclass MyCustomExporter extends StepExporter {\n    public function export(): Step {\n        $data = [\n            'option1' => get_option( 'option1', 'value1' ),\n            'option2' => get_option( 'option2', 'value2' ),\n       ];\n       return new SetSiteOptions( $data );\n    }\n    \n    public function get_step_name() {\n        return SetSiteOptions::get_step_name();\n    }\n}\n\nadd_filter( 'wooblueprint_exporters', function( array $exporters ) {\n    $exporters[] = new MyCustomExporter();\n    return $exporters;\n} );\n```\n\n----------------------------------------\n\nTITLE: Extending Shipping Package Name Rendering - WooCommerce Filter Hook - PHP\nDESCRIPTION: These PHP snippets demonstrate how to extend or modify the shipping package name in WooCommerce by hooking into the 'woocommerce_shipping_package_name' filter. The first snippet appends static HTML line breaks to the title, while the second tests robustness against XSS attempts by outputting a link with an image containing a crafted onerror attribute. Required dependencies include WooCommerce and the Code Snippets plugin. Parameters include the original package title, index, and package data array. Input expectations are a valid string title, and output is a string with additional HTML markup. Proper sanitization and awareness of security implications are necessary.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/860.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_shipping_package_name', 'test_package_name', 1, 3 );\nfunction test_package_name( $title, $index, $package ) {\n\treturn $title . '<br/>test<br/>test2';\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_shipping_package_name', 'test_xss', 1, 3 );\nfunction test_xss( $title, $index, $package ) {\n    return $title . '<br><a href=\"https://woocommerce.com/\" target=\"_blank\">WooCommerce.com<img src=x onerror=\"&#0000106&#0000097&#0000118&#0000097&#0000115&#0000099&#0000114&#0000105&#0000112&#0000116&#0000058&#0000097&#0000108&#0000101&#0000114&#0000116&#0000040&#0000039&#0000088&#0000083&#0000083&#0000039&#0000041\"></a>';\n}\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce.com Extensions via CLI - Markdown\nDESCRIPTION: Explains the command and options for listing installed extensions using WooCommerce CLI. Users can specify output format (table, csv, json, yaml) and limit the listed fields. This command is useful for administrators tracking status, renewals, and license allocations for extensions. Output is configurable and supports different formats with selective fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_64\n\nLANGUAGE: markdown\nCODE:\n```\n#### wc com extension list\n\n- `--format` - Render output in a particular format.\n\nDefault: table\n\nOptions: table, csv, json, yaml\n\n- `--fields` - Limit the output to specific object fields.\n\nDefault: all\n\nOptions: product_slug, product_name, auto_renew, expires_on, expired, sites_max, sites_active, maxed\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Single Cart Item - WooCommerce Store API\nDESCRIPTION: Presents the expected JSON output when fetching an individual cart item by key from the WooCommerce Store API. The response includes detailed product information, pricing, item data, and available actions via hypermedia links. Useful for frontend integrations where precise item detail pages or editing capabilities are needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"key\": \"c74d97b01eae257e44aa9d5bade97baf\",\n\t\"id\": 16,\n\t\"quantity\": 1,\n\t\"quantity_limits\": {\n\t\t\"minimum\": 1,\n\t\t\"maximum\": 1,\n\t\t\"multiple_of\": 1,\n\t\t\"editable\": false\n\t},\n\t\"name\": \"Beanie\",\n\t\"short_description\": \"<p>This is a simple product.</p>\",\n\t\"description\": \"<p>Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Vestibulum tortor quam, feugiat vitae, ultricies eget, tempor sit amet, ante. Donec eu libero sit amet quam egestas semper. Aenean ultricies mi vitae est. Mauris placerat eleifend leo.</p>\",\n\t\"sku\": \"woo-beanie\",\n\t\"low_stock_remaining\": null,\n\t\"backorders_allowed\": false,\n\t\"show_backorder_badge\": false,\n\t\"sold_individually\": true,\n\t\"permalink\": \"https://store.local/product/beanie/\",\n\t\"images\": [\n\t\t{\n\t\t\t\"id\": 45,\n\t\t\t\"src\": \"https://store.local/wp-content/uploads/2023/01/beanie-2.jpg\",\n\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2023/01/beanie-2-450x450.jpg\",\n\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2023/01/beanie-2.jpg 801w, https://store.local/wp-content/uploads/2023/01/beanie-2-450x450.jpg 450w, https://store.local/wp-content/uploads/2023/01/beanie-2-100x100.jpg 100w, https://store.local/wp-content/uploads/2023/01/beanie-2-600x600.jpg 600w, https://store.local/wp-content/uploads/2023/01/beanie-2-300x300.jpg 300w, https://store.local/wp-content/uploads/2023/01/beanie-2-150x150.jpg 150w, https://store.local/wp-content/uploads/2023/01/beanie-2-768x768.jpg 768w\",\n\t\t\t\"sizes\": \"(max-width: 801px) 100vw, 801px\",\n\t\t\t\"name\": \"beanie-2.jpg\",\n\t\t\t\"alt\": \"\"\n\t\t}\n\t],\n\t\"variation\": [],\n\t\"item_data\": [],\n\t\"prices\": {\n\t\t\"price\": \"1800\",\n\t\t\"regular_price\": \"2000\",\n\t\t\"sale_price\": \"1800\",\n\t\t\"price_range\": null,\n\t\t\"currency_code\": \"USD\",\n\t\t\"currency_symbol\": \"$\",\n\t\t\"currency_minor_unit\": 2,\n\t\t\"currency_decimal_separator\": \".\",\n\t\t\"currency_thousand_separator\": \",\",\n\t\t\"currency_prefix\": \"$\",\n\t\t\"currency_suffix\": \"\",\n\t\t\"raw_prices\": {\n\t\t\t\"precision\": 6,\n\t\t\t\"price\": \"18000000\",\n\t\t\t\"regular_price\": \"20000000\",\n\t\t\t\"sale_price\": \"18000000\"\n\t\t}\n\t},\n\t\"totals\": {\n\t\t\"line_subtotal\": \"1800\",\n\t\t\"line_subtotal_tax\": \"360\",\n\t\t\"line_total\": \"1800\",\n\t\t\"line_total_tax\": \"360\",\n\t\t\"currency_code\": \"USD\",\n\t\t\"currency_symbol\": \"$\",\n\t\t\"currency_minor_unit\": 2,\n\t\t\"currency_decimal_separator\": \".\",\n\t\t\"currency_thousand_separator\": \",\",\n\t\t\"currency_prefix\": \"$\",\n\t\t\"currency_suffix\": \"\"\n\t},\n\t\"catalog_visibility\": \"visible\",\n\t\"extensions\": {},\n\t\"_links\": {\n\t\t\"self\": [\n\t\t\t{\n\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items/(?P<key>[\\\\w-]{32})/c74d97b01eae257e44aa9d5bade97baf\"\n\t\t\t}\n\t\t],\n\t\t\"collection\": [\n\t\t\t{\n\t\t\t\t\"href\": \"https://store.local/wp-json/wc/store/v1/cart/items/(?P<key>[\\\\w-]{32})\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OR Operation for Rules in JSON\nDESCRIPTION: This rule performs an OR operation on the provided operands. It passes if any of the operands evaluates to true. Each operand can be a single rule or an array of rules (treated as AND operation).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"or\",\n\t\"operands\": [\n\t\t[\n\t\t\t<Rule>,\n\t\t\t...\n\t\t],\n\t\t[\n\t\t\t<Rule>,\n\t\t\t...\n\t\t]\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service Instance from Container in PHP\nDESCRIPTION: Demonstrates how to get an instance of a service class from the 'src' directory using the WooCommerce container. This approach is recommended over direct instantiation for most classes in the 'src' directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/includes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$container = wc_get_container();\n$service = $container->get( \\Automattic\\WooCommerce\\TheNamespace\\TheService::class );\n$service->do_something();\n```\n\n----------------------------------------\n\nTITLE: Forcing Old DI Container via Filter (PHP)\nDESCRIPTION: Uses the WordPress filter `woocommerce_use_old_di_container` with the `__return_true` callback. This achieves the same result as defining the constant, forcing WooCommerce (versions 9.5 to < 10.0) to use the legacy dependency injection container. This provides an alternative method for triggering the fallback.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_use_old_di_container', '__return_true');\n```\n\n----------------------------------------\n\nTITLE: Defining Form Fields Method for WooCommerce Settings\nDESCRIPTION: Implementation of the init_form_fields method that defines the settings structure. This example defines title and description fields with their respective properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Initialise gateway settings form fields.\n */\nfunction init_form_fields() {\n\t$this->form_fields = array(\n\t\t'title'       => array(\n\t\t\t'title'       => __( 'Title', 'your-text-domain' ),\n\t\t\t'type'        => 'text',\n\t\t\t'description' => __( 'This controls the title which the user sees during checkout.', 'your-text-domain' ),\n\t\t\t'default'     => __( 'PayPal', 'your-text-domain' )\n\t\t),\n\t\t'description' => array(\n\t\t\t'title'       => __( 'Description', 'your-text-domain' ),\n\t\t\t'type'        => 'textarea',\n\t\t\t'description' => __( 'This controls the description which the user sees during checkout.', 'your-text-domain' ),\n\t\t\t'default'     => __( \"Pay via PayPal; you can pay with your credit card if you don't have a PayPal account\", 'your-text-domain' )\n\t\t)\n\t);\n} // End init_form_fields()\n```\n\n----------------------------------------\n\nTITLE: Getting Coupon ID by Code in PHP\nDESCRIPTION: Retrieves a coupon ID using the coupon code. Takes the coupon code as $code parameter and an optional $exclude parameter to exclude a specific ID from the check.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwc_get_coupon_id_by_code( $code, $exclude = 0 )\n```\n\n----------------------------------------\n\nTITLE: Rendering SegmentedSelection Panel in React (JSX)\nDESCRIPTION: Demonstrates rendering the SegmentedSelection React component with multiple selectable options. Requires the SegmentedSelection component and React in scope, along with state management to handle the selected option. The props include: options (array of {value, label} pairs), selected (string, indicating current value), legend (string for accessibility), onSelect (function called when an option is selected), and name (string used as a key in selection events). The expected input is an array of option objects; output is a rendered, accessible set of checkbox-style options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/segmented-selection/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SegmentedSelection\n\toptions={ [\n\t\t{ value: 'one', label: 'One' },\n\t\t{ value: 'two', label: 'Two' },\n\t\t{ value: 'three', label: 'Three' },\n\t\t{ value: 'four', label: 'Four' },\n\t] }\n\tselected={ selected }\n\tlegend=\"Select a number\"\n\tonSelect={ ( data ) => setState( { selected: data[ name ] } ) }\n\tname={ name }\n/>\n```\n\n----------------------------------------\n\nTITLE: Loading Dependencies in WooCommerce Extension\nDESCRIPTION: Example of an includes() method that loads external dependencies for a WooCommerce extension using Composer's autoload feature and including internal files directly. Includes error handling if autoload fails.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-design-a-simple-extension.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function includes() {\n    $loader = include_once dirname( __FILE__ ) . '/' . 'vendor/autoload.php';\n\n    if ( ! $loader ) {\n        throw new Exception( 'vendor/autoload.php missing please run `composer install`' );\n    }\n\n    require_once dirname( __FILE__ ) . '/' . 'includes/my-extension-functions.php';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom WooCommerce Price Filter in PHP\nDESCRIPTION: Shows how to implement a price modification filter with proper function prefixing. Includes multiple parameters and demonstrates the WordPress filter hook syntax.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/coding-standards.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add custom discount.\n */\nfunction YOUR_PREFIX_custom_discount( $price, $product ) {\n    return $price * 0.9;  // 10% discount\n}\nadd_filter( 'woocommerce_product_get_price', 'YOUR_PREFIX_custom_discount', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Shipping Zone Commands\nDESCRIPTION: CLI commands for managing WooCommerce shipping zones, including operations to get, update, and delete shipping zone methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_58\n\nLANGUAGE: cli\nCODE:\n```\nwc shipping_zone_method get [id] --zone_id=<value> --instance_id=<value>\nwc shipping_zone_method update [id] --zone_id=<value> --instance_id=<value>\nwc shipping_zone_method delete [id] --zone_id=<value> --instance_id=<value>\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Translation File for JavaScript/TypeScript\nDESCRIPTION: Example of a JSON translation file used for JavaScript/TypeScript strings in WooCommerce Blocks. This file contains translations for frontend scripts and is automatically generated from the PO file by WordPress.org's translation system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"translation-revision-date\": \"2022-05-22 10:58:25+0000\",\n\t\"generator\": \"GlotPress/4.0.0-alpha.1\",\n\t\"domain\": \"messages\",\n\t\"locale_data\": {\n\t\t\"messages\": {\n\t\t\t\"\": {\n\t\t\t\t\"domain\": \"messages\",\n\t\t\t\t\"plural-forms\": \"nplurals=2; plural=n != 1;\",\n\t\t\t\t\"lang\": \"de\"\n\t\t\t},\n\t\t\t\"Price between %1$s and %2$s\": [ \"Preis zwischen %1$s und %2$s\" ],\n\t\t\t\"Discounted price:\": [ \"Reduzierter Preis:\" ],\n\t\t\t\"Previous price:\": [ \"Vorheriger Preis:\" ]\n\t\t}\n\t},\n\t\"comment\": { \"reference\": \"build/product-price-frontend.js\" }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Store Management Link with JavaScript Filter\nDESCRIPTION: JavaScript code to add a custom link to the WooCommerce admin store management section using WordPress filters. Implements icon support and link configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { megaphone } from '@wordpress/icons';\nimport { addFilter } from '@wordpress/hooks';\n \naddFilter(\n    'woocommerce_admin_homescreen_quicklinks',\n    'my-extension',\n    ( quickLinks ) => {\n        return [\n            ...quickLinks,\n            {\n                title: 'My link',\n                href: 'link/to/something',\n                icon: megaphone,\n            },\n        ];\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: WordPress Component Package Reference in Markdown\nDESCRIPTION: Reference to the WordPress components package used in building WooCommerce Admin interface. Shows the package name used for importing core WordPress design components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@wordpress/components\n```\n\n----------------------------------------\n\nTITLE: Using a Local Directory for Extension Scaffolding (Advanced Bash Workflow)\nDESCRIPTION: This advanced Bash snippet shows how to scaffold a WooCommerce extension using a locally available development template directory instead of fetching from npm. The user specifies the relative or absolute path to the @woocommerce/create-woo-extension source using the -t flag. Dependencies include local access to the WooCommerce repository and @wordpress/create-block via npx. It outputs a new project directory initialized from the local template; this is suited for extension developers working on the scaffolding tool itself.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-woo-extension/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block -t ./path/to/woocommerce/packages/js/create-woo-extension my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Enabling Price Suffixes for Variable Products in WooCommerce\nDESCRIPTION: This snippet enables the display of price suffixes for the main variable product, which is disabled by default for performance reasons when there are many variations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/configuring_special_tax_scenarios.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_show_variation_price', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Creating Product Fields Admin Class\nDESCRIPTION: PHP class definition for handling custom product fields in the admin area.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace WooProductField\\Admin;\n\ndefined( 'ABSPATH' ) || exit;\n\nclass ProductFields {\n\n    public function __construct() {\n\t\t$this->hooks();\n    }\n\n    private function hooks() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the WordPress Environment for Block Development - Bash\nDESCRIPTION: This snippet shows how to change into the generated project directory and start the WordPress local development environment via wp-env. Dependencies include npm, Node.js, and the wp-env package (typically installed as a devDependency or globally). The 'cd' command navigates to the new extension; 'npx wp-env start' boots the testing WordPress and WooCommerce environment for interactive development. Inputs are the existing path and expected folder; output is a running local development instance.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-product-editor-block/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd my-extension-name\nnpx wp-env start # Start Wordpress environment\n```\n\n----------------------------------------\n\nTITLE: Verifying Shipping Address Editing Status in Checkout Store using JavaScript\nDESCRIPTION: Shows how to check if the shipping address is being edited using the getEditingShippingAddress selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst editingShippingAddress = store.getEditingShippingAddress();\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Notes from Checkout Store in JavaScript\nDESCRIPTION: Demonstrates how to retrieve order notes using the getOrderNotes selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst orderNotes = store.getOrderNotes();\n```\n\n----------------------------------------\n\nTITLE: Loading a Payment Token from ID in PHP\nDESCRIPTION: Demonstrates how to load a payment token from its ID using the WC_Payment_Tokens class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$token_id = wc_clean( $_POST['wc-simplify_commerce-payment-token'] );\n$token    = WC_Payment_Tokens::get( $token_id );\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Orders Between Storage Systems\nDESCRIPTION: Syncs orders from the currently active datastore to the other one. This command shows a progress bar and reports on completion statistics including time taken.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos sync\nThere are 999 orders to be synced.\nOrder Data Sync  100% [============================================================================================] 0:08 / 0:08\nSync completed.\nSuccess: 999 orders were synced in 14 seconds.\n```\n\n----------------------------------------\n\nTITLE: Advanced WooCommerce Theme Support with Settings\nDESCRIPTION: Extended implementation of WooCommerce theme support including custom image sizes and product grid settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction mytheme_add_woocommerce_support() {\n    add_theme_support( 'woocommerce', array(\n        'thumbnail_image_width' => 150,\n        'single_image_width'    => 300,\n\n        'product_grid'          => array(\n            'default_rows'    => 3,\n            'min_rows'        => 2,\n            'max_rows'        => 8,\n            'default_columns' => 4,\n            'min_columns'     => 2,\n            'max_columns'     => 5,\n        ),\n    ) );\n}\n\nadd_action( 'after_setup_theme', 'mytheme_add_woocommerce_support' );\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Constants in PHP\nDESCRIPTION: This method defines various constants used throughout the WooCommerce plugin, including version numbers, table prefixes, and feature flags.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/PREVIOUS_CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nprivate function define_constants() {\n\t$upload_dir = wp_upload_dir( null, false );\n\n\t$this->define( 'WC_ABSPATH', dirname( WC_PLUGIN_FILE ) . '/' );\n\t$this->define( 'WC_PLUGIN_BASENAME', plugin_basename( WC_PLUGIN_FILE ) );\n\t$this->define( 'WC_VERSION', $this->version );\n\t$this->define( 'WOOCOMMERCE_VERSION', $this->version );\n\t$this->define( 'WC_ROUNDING_PRECISION', 6 );\n\t$this->define( 'WC_DISCOUNT_ROUNDING_MODE', 2 );\n\t$this->define( 'WC_TAX_ROUNDING_MODE', 'yes' === get_option( 'woocommerce_prices_include_tax', 'no' ) ? 2 : 1 );\n\t$this->define( 'WC_DELIMITER', '|' );\n\t$this->define( 'WC_LOG_DIR', $upload_dir['basedir'] . '/wc-logs/' );\n\t$this->define( 'WC_SESSION_CACHE_GROUP', 'wc_session_id' );\n\t$this->define( 'WC_TEMPLATE_DEBUG_MODE', false );\n\t$this->define( 'WC_NOTICE_MIN_PHP_VERSION', '7.2' );\n\t$this->define( 'WC_NOTICE_MIN_WP_VERSION', '5.8' );\n\t$this->define( 'WC_PHP_MIN_REQUIREMENTS_NOTICE', true );\n}\n```\n\n----------------------------------------\n\nTITLE: PHP Class Naming Examples in WooCommerce\nDESCRIPTION: Examples of WooCommerce PHP classes following the WC_ prefix convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nWC_Breadcrumb\nWC_Cart\n```\n\n----------------------------------------\n\nTITLE: Registering Lazy-Loaded Translations for Cart Block in PHP\nDESCRIPTION: This function registers translations for the inner blocks of the Cart block. It merges chunks from the cart blocks folder and vendor chunks, then calls the register_chunk_translations function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-for-lazy-loaded-components.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected function register_block_type_assets() {\n  parent::register_block_type_assets();\n  $chunks        = $this->get_chunks_paths( $this->chunks_folder );\n  $vendor_chunks = $this->get_chunks_paths( 'vendors--cart-blocks' );\n\n  $this->register_chunk_translations( array_merge( $chunks, $vendor_chunks ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting WooCommerce Order Note via CLI\nDESCRIPTION: Deletes a specific WooCommerce order note identified by its `id` and `order_id`. Requires the `--force` flag as order notes do not support trashing. The `--porcelain` flag outputs only the ID on successful deletion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nwc order_note delete <order_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Single Product Template Hook Mappings\nDESCRIPTION: Table showing the mapping between WooCommerce hooks and their corresponding block positions in Single Product templates. Used by SingleProductTemplateCompatibility class to inject hooks around product-related blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blockified-templates/compatibility-layer.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Hook                                      | Block Name                                                                                                                                             | Position |\n|-------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------|\n| woocommerce_before_main_content           | First block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs) | before   |\n| woocommerce_after_main_content            | Last block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs)  | after    |\n| woocommerce_sidebar                       | Last block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs)  | after    |\n| woocommerce_before_single_product         | First block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs) | before   |\n| woocommerce_before_single_product_summary | First block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs) | before |\n| woocommerce_single_product_summary        | First `core/post-excerpt` or `woocommerce/product-summary` block                                                                                                                         | before   |\n| woocommerce_after_single_product          | Last block related to the Single Product Template (Product Image Gallery, Product Details, Add to Cart Form, Product Meta, Product Price, Breadcrumbs)  | after    |\n| woocommerce_product_meta_start            | Product Meta                                                                                                                                           | before   |\n| woocommerce_product_meta_end              | Product Meta                                                                                                                                           | after    |\n| woocommerce_share                         | Product Details                                                                                                                                        | before   |\n| woocommerce_after_single_product_summary  | Product Details                                                                                                                                        | before   |\n```\n\n----------------------------------------\n\nTITLE: Dispatching Stale Cart Data Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Illustrates dispatching the setIsCartDataStale action to indicate whether the cart data in context is considered stale. Uses isCartDataStale (boolean, default: true) as input, and dispatches an action to update the Redux store state based on comparison of the lastCartUpdate timestamp and wcSettings data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( setIsCartDataStale( isCartDataStale ) );\n```\n\n----------------------------------------\n\nTITLE: Deleting All Shipping Zones in JavaScript\nDESCRIPTION: This function deletes all existing shipping zones. It's useful for cleaning up test data or resetting the shipping configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_40\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeleteAllShippingZones()\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Shop Coupons via WC-CLI in Bash\nDESCRIPTION: Creates a new WooCommerce shop coupon. Requires the `--code` parameter. Other options include setting the discount amount (`--amount`), type (`--discount_type`), description, expiration date (`--date_expires`, `--date_expires_gmt`), usage restrictions (`--individual_use`, `--usage_limit`, `--usage_limit_per_user`, `--limit_usage_to_x_items`, `--minimum_amount`, `--maximum_amount`, `--email_restrictions`), product/category applicability (`--product_ids`, `--excluded_product_ids`, `--product_categories`, `--excluded_product_categories`), free shipping (`--free_shipping`), sale item exclusion (`--exclude_sale_items`), and custom metadata (`--meta_data`). Use `--porcelain` to output only the new coupon ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc shop_coupon create --code=<coupon_code> [options]\n```\n\n----------------------------------------\n\nTITLE: Updating Product Attributes in WooCommerce CLI\nDESCRIPTION: Command for updating existing product attributes with options to modify name, slug, type, order_by, and archive settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_34\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute update [id]\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Field in Store Frontend\nDESCRIPTION: PHP function to display the custom field value on the product page in the store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\npublic function add_stock_info() {\n\tglobal $product;\n\t?>\n\t<p><?php echo esc_html( $product->get_meta( '_new_stock_information' ) ); ?> </p>\n\t<?php\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Documentation Path Reference in Markdown\nDESCRIPTION: Markdown link showing the relative path to the Query State Store documentation file within the WooCommerce project structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/data/query-state/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Query State Store\n\nThe docs for the Query State Store can be found in [docs/third-party-developers/extensibility/data-store/query-state.md](../../../../docs/third-party-developers/extensibility/data-store/query-state.md).\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Dependency Extraction Webpack Plugin\nDESCRIPTION: Shows the npm command to install the WooCommerce Dependency Extraction Webpack Plugin, which is used for aliased imports of the Checkout package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/dependency-extraction-webpack-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running Lint Command for WooCommerce Code Analysis\nDESCRIPTION: Command to analyze differences between two branches and identify hook/template/db changes since a specific version. Compares release/6.7 and release/6.8 branches for changes introduced since version 6.8.0.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/code-analyzer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm analyzer lint \"release/6.8\" \"6.8.0\" -b release/6.7\n```\n\n----------------------------------------\n\nTITLE: Theme Conflict Resolution CSS Examples\nDESCRIPTION: Shows CSS specificity examples for handling conflicts between WooCommerce block styles and third-party theme styles.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/coding-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\ninput[type='radio'] {\n\tbackground: red;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\ninput[type='radio']:checked {\n\tbackground: blue;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-radio-control__input {\n\tbackground: #fff;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-radio-control {\n\t.wc-block-components-radio-control__input {\n\t\tbackground: #fff;\n\t}\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-radio-control {\n\t.wc-block-components-radio-control__option\n\t\t.wc-block-components-radio-control__input {\n\t\tbackground: #fff;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Block Template Actions\nDESCRIPTION: Action hooks that fire when blocks are added to or removed from a template to support extensibility\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/block-template-lifecycle.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_block_template_area_{template_area_name}_after_add_block_{block_id}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_block_template_after_add_block\n```\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_block_template_area_{template_area_name}_after_remove_block_{block_id}\n```\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_block_template_after_remove_block\n```\n\n----------------------------------------\n\nTITLE: Customizing Dummy Address for Email Preview in WooCommerce (PHP)\nDESCRIPTION: This code demonstrates how to modify the dummy address used in email preview. It uses the 'woocommerce_email_preview_dummy_address' filter to change the first and last name in the address array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_dummy_address', function( $address ) {\n    // Modify the dummy address array\n    $address['first_name'] = 'Preview';\n    $address['last_name'] = 'Customer';\n    return $address;\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Page Configuration Object Structure\nDESCRIPTION: Object structure that defines page properties including container component, URL path, and WordPress menu integration for the WooCommerce admin interface.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/layout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  container: Component, // React component to render in main content area\n  path: String,      // Unique URL path for the page\n  wpMenu: String     // WordPress admin menu item ID for active state\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Data Verification Command\nDESCRIPTION: CLI command to verify the integrity of migrated data in HPOS tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/guide-large-store.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp wc cot verify_cot_data\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Collection - TypeScript\nDESCRIPTION: Example showing how to register a new custom product collection with basic configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection\",\n  title: \"My Custom Collection\",\n  icon: \"games\",\n  description: \"This is a custom collection.\",\n  keywords: [\"custom collection\", \"product collection\"]\n});\n```\n\n----------------------------------------\n\nTITLE: Product-Specific Price Format Customization in WooCommerce Checkout\nDESCRIPTION: This advanced example shows how to apply different price formats to specific products in the order summary based on their names, with custom messaging for each product type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemPrice = ( defaultValue, extensions, args, validation ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn '&lt;price/&gt; to keep you ☀️';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn '&lt;price/&gt; to keep you ❄️';\n\t}\n\n\treturn '&lt;price/&gt; for all items';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemPrice: modifyCartItemPrice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Example Validation Store Data Structure in JavaScript\nDESCRIPTION: Shows the expected data structure for the validation store. Each error has a unique ID as the key, with message content and visibility status as properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"error-id-1\": {\n        message: \"This is an error message\",\n        hidden: false,\n    },\n    \"error-id-2\": {\n        message: \"This is another error message\",\n        hidden: true,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Varnish Configuration for WooCommerce Compatibility\nDESCRIPTION: This comprehensive Varnish configuration addresses cookie handling for WooCommerce, excluding dynamic pages from caching, handling the WooCommerce API, and implementing security measures for admin pages. It includes rules for both vcl_recv and vcl_fetch sections.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/configuring-caching-plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAdd this to vcl_recv above \"if (req.http.cookie) {\":\n\n# Unset Cookies except for WordPress admin and WooCommerce pages \nif (!(req.url ~ \"(wp-login|wp-admin|cart|my-account/*|wc-api*|checkout|addons|logout|lost-password|product/*)\")) { \nunset req.http.cookie; \n} \n# Pass through the WooCommerce dynamic pages \nif (req.url ~ \"^/(cart|my-account/*|checkout|wc-api/*|addons|logout|lost-password|product/*)\") { \nreturn (pass); \n} \n# Pass through the WooCommerce add to cart \nif (req.url ~ \"\\?add-to-cart=\" ) { \nreturn (pass); \n} \n# Pass through the WooCommerce API\nif (req.url ~ \"\\?wc-api=\" ) { \nreturn (pass); \n} \n# Block access to php admin pages via website \nif (req.url ~ \"^/phpmyadmin/.*$\" || req.url ~ \"^/phppgadmin/.*$\" || req.url ~ \"^/server-status.*$\") { \nerror 403 \"For security reasons, this URL is only accessible using localhost (127.0.0.1) as the hostname\"; \n} \n\nAdd this to vcl_fetch:\n\n# Unset Cookies except for WordPress admin and WooCommerce pages \nif ( (!(req.url ~ \"(wp-(login|admin)|login|cart|my-account/*|wc-api*|checkout|addons|logout|lost-password|product/*)\")) || (req.request == \"GET\") ) { \nunset beresp.http.set-cookie; \n} \n```\n\n----------------------------------------\n\nTITLE: Implementing WordPress Action Hook with Proper Positioning in PHP\nDESCRIPTION: Demonstrates the recommended hook positioning pattern where the add_action call is placed below the function definition. Uses a prefixed function name to avoid conflicts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/coding-standards.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Add custom message.\n */\nfunction YOUR_PREFIX_custom_message() {\n    echo 'This is a custom message';\n}\nadd_action( 'wp_footer', 'YOUR_PREFIX_custom_message' );\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Customers via WC-CLI in Bash\nDESCRIPTION: Lists WooCommerce customers. Supports filtering by context, pagination (`--page`, `--per_page`), search term (`--search`), specific IDs (`--include`, `--exclude`), offset, ordering (`--order`, `--orderby`), email (`--email`), and role (`--role`). Allows selecting specific fields (`--fields`, `--field`) and specifying the output format (`--format`, default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer list [options]\n```\n\n----------------------------------------\n\nTITLE: Adding Extended Data to Item Response\nDESCRIPTION: Shows how to include extended data in the get_item_response method of an endpoint schema class. This exposes the extended data in the API response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/rest-api/extend-rest-api-new-endpoint.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nself::EXTENDING_KEY => $this->get_extended_data( self::IDENTIFIER, $cart_item ),\n```\n\n----------------------------------------\n\nTITLE: Implementing Product Purchase Limit Checkbox with WooCommerce\nDESCRIPTION: Example of using the product-checkbox-field to add a 'Sold Individually' checkbox in the Inventory section. This implementation creates a checkbox that limits purchases to one item per order when checked.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/checkbox/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$parent_container->add_block(\n  [\n    'id'         => 'product-limit-purchase',\n    'blockName'  => 'woocommerce/product-checkbox-field',\n    'order'      => 20,\n    'attributes' => [\n      'title'    => __(\n        'Restrictions',\n        'woocommerce'\n      ),\n      'label'    => __(\n        'Limit purchases to 1 item per order',\n        'woocommerce'\n      ),\n      'property' => 'sold_individually',\n      'tooltip'  => __(\n        'When checked, customers will be able to purchase only 1 item in a single order. This is particularly useful for items that have limited quantity, like art or handmade goods.',\n        'woocommerce'\n      ),\n    ],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Priority for Event Observer Execution\nDESCRIPTION: Demonstrates how to set a priority level when registering an observer to control when it executes relative to other observers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = onCheckoutValidation( myCallback, 10 );\n```\n\n----------------------------------------\n\nTITLE: Generating and Opening Allure Report with pnpm\nDESCRIPTION: Commands to generate an HTML report from allure-results and open it in the browser. These commands should be run from the WooCommerce monorepo root directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec allure generate --clean plugins/woocommerce/tests/e2e-pw/test-results/allure-results --output plugins/woocommerce/tests/e2e-pw/test-results/allure-report\npnpm exec allure open plugins/woocommerce/tests/e2e-pw/test-results/allure-report\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_after_main_content Hook in PHP\nDESCRIPTION: Called after rendering the main content for a product. This hook is commonly used with woocommerce_output_content_wrapper_end() which outputs the closing DIV for the content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_after_main_content' )\n```\n\n----------------------------------------\n\nTITLE: Adding Currency Filter to WooCommerce Orders Report\nDESCRIPTION: JavaScript code to add a currency filter dropdown to the WooCommerce Orders Report UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport { addFilter } from \"@wordpress/hooks\";\nimport { __ } from \"@wordpress/i18n\";\n\nconst addCurrencyFilters = (filters) => {\n  return [\n    {\n      label: __(\"Currency\", \"dev-blog-example\"),\n      staticParams: [],\n      param: \"currency\",\n      showFilters: () => true,\n      defaultValue: \"USD\",\n      filters: [...(wcSettings.multiCurrency || [])],\n    },\n    ...filters,\n  ];\n};\n\naddFilter(\n  \"woocommerce_admin_orders_report_filters\",\n  \"dev-blog-example\",\n  addCurrencyFilters\n);\n```\n\n----------------------------------------\n\nTITLE: Disabling WooCommerce Marketplace Suggestions using PHP Filter\nDESCRIPTION: This code snippet demonstrates how to use the 'woocommerce_allow_marketplace_suggestions' filter to disable marketplace suggestions in WooCommerce. It should be added to the theme's functions.php file or a custom plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/disabling_marketplace_suggestions_programmatically.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_allow_marketplace_suggestions', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Loading PHP Translation Fallbacks in WooCommerce Blocks\nDESCRIPTION: Function that provides fallback translations from WooCommerce Core when WooCommerce Blocks translations are missing. It checks if the translation matches the original text (indicating a missing translation) and falls back to Core translations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Filter translations so we can retrieve translations from Core when the original and the translated\n * texts are the same (which happens when translations are missing).\n *\n * @param string $translation Translated text based on WC Blocks translations.\n * @param string $text        Text to translate.\n * @param string $domain      The text domain.\n * @return string WC Blocks translation. In case it's the same as $text, Core translation.\n */\nfunction woocommerce_blocks_get_php_translation_from_core( $translation, $text, $domain ) {\n\tif ( 'woo-gutenberg-products-block' !== $domain ) {\n\t\treturn $translation;\n\t}\n\n\t// When translation is the same, that could mean the string is not translated.\n\t// In that case, load it from core.\n\tif ( $translation === $text ) {\n\t\treturn translate( $text, 'woocommerce' ); // phpcs:ignore WordPress.WP.I18n.LowLevelTranslationFunction, WordPress.WP.I18n.NonSingularStringLiteralText, WordPress.WP.I18n.TextDomainMismatch\n\t}\n\treturn $translation;\n}\n\nadd_filter( 'gettext', 'woocommerce_blocks_get_php_translation_from_core', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Initializing Flat Rate Shipping Form Fields in PHP\nDESCRIPTION: Defines form fields for WooCommerce flat rate shipping configuration including tax status, base cost, shipping class costs, and calculation types. Includes internationalization support and custom sanitization callbacks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/shipping/shipping-method-api.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nprivate function init_instance_form_fields() {\n    $cost_desc = __( 'Enter a cost (excl. tax).', 'your_text_domain' );\n    $cost_link = sprintf( '<span id=\"wc-shipping-advanced-costs-help-text\">%s <a target=\"_blank\" href=\"https://woocommerce.com/document/flat-rate-shipping/#advanced-costs\">%s</a>.</span>', __( 'Charge a flat rate per item, or enter a cost formula to charge a percentage based cost or a minimum fee. Learn more about', 'your_text_domain' ), __( 'advanced costs', 'your_text_domain' ) );\n\n    $fields = array(\n        'title'      => array(\n            'title'       => __( 'Name', 'your_text_domain' ),\n            'type'        => 'text',\n            'description' => __( 'Your customers will see the name of this shipping method during checkout.', 'your_text_domain' ),\n            'default'     => __( 'Your shipping method', 'your_text_domain' ),\n            'placeholder' => __( 'e.g. Standard national', 'your_text_domain' ),\n            'desc_tip'    => true,\n        ),\n        'tax_status' => array(\n            'title'   => __( 'Tax status', 'your_text_domain' ),\n            'type'    => 'select',\n            'class'   => 'wc-enhanced-select',\n            'default' => 'taxable',\n            'options' => array(\n                'taxable' => __( 'Taxable', 'your_text_domain' ),\n                'none'    => _x( 'None', 'Tax status', 'your_text_domain' ),\n            ),\n        ),\n        'cost'       => array(\n            'title'             => __( 'Cost', 'your_text_domain' ),\n            'type'              => 'text',\n            'class'             => 'wc-shipping-modal-price',\n            'placeholder'       => '',\n            'description'       => $cost_desc,\n            'default'           => '0',\n            'desc_tip'          => true,\n            'sanitize_callback' => array( $this, 'sanitize_cost' ),\n        ),\n    );\n\n    $shipping_classes = WC()->shipping()->get_shipping_classes();\n\n    if ( ! empty( $shipping_classes ) ) {\n        $fields['class_costs'] = array(\n            'title'       => __( 'Shipping class costs', 'your_text_domain' ),\n            'type'        => 'title',\n            'default'     => '',\n            'description' => sprintf( __( 'These costs can optionally be added based on the <a target=\"_blank\" href=\"%s\">product shipping class</a>. Learn more about <a target=\"_blank\" href=\"https://woocommerce.com/document/flat-rate-shipping/#shipping-classes\">setting shipping class costs</a>.', 'your_text_domain' ), admin_url( 'admin.php?page=wc-settings&tab=shipping&section=classes' ) ),\n        );\n        foreach ( $shipping_classes as $shipping_class ) {\n            if ( ! isset( $shipping_class->term_id ) ) {\n                continue;\n            }\n            $fields[ 'class_cost_' . $shipping_class->term_id ] = array(\n                'title'             => sprintf( __( '\"%s\" shipping class cost', 'your_text_domain' ), esc_html( $shipping_class->name ) ),\n                'type'              => 'text',\n                'class'             => 'wc-shipping-modal-price',\n                'placeholder'       => __( 'N/A', 'your_text_domain' ),\n                'description'       => $cost_desc,\n                'default'           => $this->get_option( 'class_cost_' . $shipping_class->slug ),\n                'desc_tip'          => true,\n                'sanitize_callback' => array( $this, 'sanitize_cost' ),\n            );\n        }\n\n        $fields['no_class_cost'] = array(\n            'title'             => __( 'No shipping class cost', 'your_text_domain' ),\n            'type'              => 'text',\n            'class'             => 'wc-shipping-modal-price',\n            'placeholder'       => __( 'N/A', 'your_text_domain' ),\n            'description'       => $cost_desc,\n            'default'           => '',\n            'desc_tip'          => true,\n            'sanitize_callback' => array( $this, 'sanitize_cost' ),\n        );\n\n        $fields['type'] = array(\n            'title'       => __( 'Calculation type', 'your_text_domain' ),\n            'type'        => 'select',\n            'class'       => 'wc-enhanced-select',\n            'default'     => 'class',\n            'options'     => array(\n                'class' => __( 'Per class: Charge shipping for each shipping class individually', 'your_text_domain' ),\n                'order' => __( 'Per order: Charge shipping for the most expensive shipping class', 'your_text_domain' ),\n            ),\n            'description' => $cost_link,\n        );\n    }\n\n    $this->instance_form_fields = $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All WooCommerce Products - Bash\nDESCRIPTION: This command lists all products in the WooCommerce store by invoking 'wp wc product list'. It requires the WP-CLI tool, the WooCommerce plugin, and sufficient administrative permissions. The resulting output is a tabulated or JSON-formatted list of product data, which can be filtered using additional options. No input beyond the command itself is necessary.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwp wc product list\n```\n\n----------------------------------------\n\nTITLE: Adding a WooCommerce Product Number Field in PHP\nDESCRIPTION: This snippet demonstrates how to add a number field to a WooCommerce product section. It configures various attributes including label, property, suffix, placeholder, required status, help text, and tooltip.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/number/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$section->add_block(\n  [\n    'id'         => 'example-number-meta',\n    'blockName'  => 'woocommerce/product-number-field',\n    'attributes' => [\n      'label' => 'Label',\n      'property' => 'meta_data.number',\n      'suffix' => 'suffix',\n      'placeholder' => 'Placeholder',\n      'required' => true,\n      'help' => 'Add additional information here',\n      'tooltip' => 'Tooltip information here'\n    ]\n  ],\n);\n```\n\n----------------------------------------\n\nTITLE: Store API Quantity Filter\nDESCRIPTION: Filter hook to modify quantity limits for products being added to cart via the Store API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_store_api_product_quantity_limit', integer $quantity_limit, \\WC_Product $product )\n```\n\n----------------------------------------\n\nTITLE: Notice Banner with Error List Implementation\nDESCRIPTION: Example of implementing a notice banner with a summary and list of error messages using TypeScript and JSX.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/base/components/notice-banner/docs/docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NoticeBanner } from '@woocommerce/base-components';\n\nconst errorMessages = [\n\t'First error message',\n\t'Second error message',\n\t'Third error message',\n];\n\n<NoticeBanner\n\tstatus=\"error\"\n\tsummary=\"There are errors in your form submission:\"\n>\n\t<ul>\n\t\t{ errorMessages.map( ( message ) => (\n\t\t\t<li key={ message }>{ message }</li>\n\t\t) ) }\n\t</ul>\n</NoticeBanner>;\n```\n\n----------------------------------------\n\nTITLE: AssetDataRegistry Usage Example\nDESCRIPTION: Example showing the recommended way to add data to the asset registry instead of using deprecated shared settings filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_22\n\nLANGUAGE: php\nCODE:\n```\nAutomattic\\WooCommerce\\Blocks\\Package::container()->get( Automattic\\WooCommerce\\Blocks\\Assets\\AssetDataRegistry::class )->add( $key, $value )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Release ZIP URL - JavaScript Helper Function\nDESCRIPTION: Helper function that returns the URL for the latest WooCommerce release. Accepts parameters for repository name, authorization token, prerelease flag, and pagination size. Used for accessing release artifacts programmatically.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\ngetLatestReleaseZipUrl( repository, authorizationToken, getPrerelease, perPage )\n```\n\n----------------------------------------\n\nTITLE: Using WooPaymentGatewayConfigure Fill and Slot Components in JSX\nDESCRIPTION: Demonstrates how to use both the WooPaymentGatewayConfigure fill component and its corresponding slot. The fill component wraps custom content while having access to the default form and other helper props, while the slot component defines where the fill content will be rendered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/onboarding/src/components/WooPaymentGatewayConfigure/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WooPaymentGatewayConfigure id={ key }>\n  {({defaultForm: DefaultForm}) => {\n    return <>\n      <p>\n        Fill Content\n      </p>\n      { defaultForm }\n    </>;\n}}\n</WooPaymentGatewayConfigure>\n\n<WooPaymentGatewayConfigure.Slot id={ key } />\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Test Environment\nDESCRIPTION: Commands to set up a development environment and initialize it with sample products and required shop settings using pnpm.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm env:dev --filter=@woocommerce/plugin-woocommerce\npnpm env:performance-init --filter=@woocommerce/plugin-woocommerce\n```\n\n----------------------------------------\n\nTITLE: Dispatching Shipping Rate Selection Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows dispatching selectShippingRate with rateId (string) and packageId (number|string, default: null) to choose a shipping option for a package. The Redux action updates cart shipping choices both locally and potentially on the server side. Parameters: rateId must be a valid shipping rate, packageId identifies the package being updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( selectShippingRate( rateId, packageId ) );\n```\n\n----------------------------------------\n\nTITLE: Checking Order Differences with `wc hpos diff` (Plaintext)\nDESCRIPTION: Shows the output of `wp wc hpos diff` for order ID 100126 after migrating specific metadata. It highlights remaining differences in other properties like status, total, modification date, and billing name between the HPOS and posts datastores.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100126\nWarning: Differences found for order 100126:\n+--------------------+---------------------------+---------------------------+\n| property           | hpos                      | post                      |\n+--------------------+---------------------------+---------------------------+\n| status             | completed                 | pending                   |\n| total              | 567.25                    | 267.25                    |\n| date_modified      | 2024-04-04T15:32:27+00:00 | 2024-04-04T19:00:26+00:00 |\n| billing_first_name | Hans                      | Jans                      |\n+--------------------+---------------------------+---------------------------+\n```\n\n----------------------------------------\n\nTITLE: PHP Hook Naming Examples in WooCommerce\nDESCRIPTION: Examples of WooCommerce PHP hooks (actions and filters) following the woocommerce_ prefix convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_after_checkout_validation\nwoocommerce_get_formatted_order_total\n```\n\n----------------------------------------\n\nTITLE: Advanced Customization of Proceed to Checkout Button Link\nDESCRIPTION: This example demonstrates conditionally modifying the checkout button destination link based on specific cart contents. It changes the checkout URL only when a specific product (Sunglasses) is in the cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/checkout-and-place-order-button.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyProceedToCheckoutButtonLink = (\n\tdefaultValue,\n\textensions,\n\targs\n) => {\n\tif ( ! args?.cart.items ) {\n\t\treturn defaultValue;\n\t}\n\n\tconst isSunglassesInCart = args?.cart.items.some(\n\t\t( item ) => item.name === 'Sunglasses'\n\t);\n\n\tif ( isSunglassesInCart ) {\n\t\treturn '/custom-checkout';\n\t}\n\n\treturn defaultValue;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tproceedToCheckoutButtonLink: modifyProceedToCheckoutButtonLink,\n} );\n```\n\n----------------------------------------\n\nTITLE: Setting Structured Content Data for WooCommerce Admin Note in PHP\nDESCRIPTION: This code demonstrates how to set structured content data for a WooCommerce Admin Note using the set_content_data() method. It allows for storing additional data that can be used for localization or other purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$note->set_content_data( (object) array(\n    'getting_started'     => true,\n    'activated'           => $activated_time,\n    'activated_formatted' => $activated_time_formatted\n) );\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_blocks_enqueue_checkout_block_scripts_before Hook in PHP\nDESCRIPTION: Fires before checkout block scripts are enqueued. This hook allows developers to perform actions or enqueue additional scripts before the checkout block scripts are loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_enqueue_checkout_block_scripts_before' )\n```\n\n----------------------------------------\n\nTITLE: Starting WooCommerce Blocks Development Environment using npm\nDESCRIPTION: This command uses npm to execute the `start` script defined in the project's `package.json`. It is typically used to start a local development server with features like hot-reloading, facilitating the testing of changes made in the PR branch (#10634) for the \"On sale\" badge fix.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1100.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Searching for Order in JavaScript\nDESCRIPTION: This helper method searches for an order using various terms such as order ID or customer name. It takes the search value, order ID, and customer name as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_38\n\nLANGUAGE: JavaScript\nCODE:\n```\nsearchForOrder(value, orderId, customerName)\n```\n\n----------------------------------------\n\nTITLE: Creating Specialized Action Proxy in PHP\nDESCRIPTION: Example of creating a specialized proxy class for WordPress actions and filters to improve code readability while maintaining testability.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nclass ActionsProxy {\n public function did_action( $tag ) {\n  return did_action( $tag );\n }\n\n public function apply_filters( $tag, $value, ...$parameters ) {\n  return apply_filters( $tag, $value, ...$parameters );\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Request for Applying a Coupon\nDESCRIPTION: Command line example using cURL to apply a coupon code to the cart. Shows how to include the required Nonce authentication header and pass the coupon code parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/cart/apply-coupon?code=20off\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Message to WooCommerce Login/Register Form in PHP\nDESCRIPTION: This PHP function adds a custom message above the login/register form on the WooCommerce my-account page. It checks if user registration is enabled and displays a message with a list of benefits for registering. The function is hooked to the 'woocommerce_before_customer_login_form' action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/before-login--register-form.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_login_message' ) ) {\n    /**\n     * Add a message above the login / register form on my-account page\n     */\n    function YOUR_PREFIX_login_message() {\n        if ( get_option( 'woocommerce_enable_myaccount_registration' ) == 'yes' ) {\n            ?>\n            <div class=\"woocommerce-info\">\n            <p><?php _e( 'Returning customers login. New users register for next time so you can:', 'YOUR-TEXTDOMAIN' ); ?></p>\n            <ul>\n                <li><?php _e( 'View your order history', 'YOUR-TEXTDOMAIN' ); ?></li>\n                <li><?php _e( 'Check on your orders', 'YOUR-TEXTDOMAIN' ); ?></li>\n                <li><?php _e( 'Edit your addresses', 'YOUR-TEXTDOMAIN' ); ?></li>\n                <li><?php _e( 'Change your password', 'YOUR-TEXTDOMAIN' ); ?></li>\n            </ul>\n            </div>\n            <?php\n        }\n    }\n    add_action( 'woocommerce_before_customer_login_form', 'YOUR_PREFIX_login_message' );\n}\n```\n\n----------------------------------------\n\nTITLE: Examples of Using wc_get_dimension Function in PHP\nDESCRIPTION: Demonstrates how to use the wc_get_dimension function with different parameter combinations. Shows converting to inches using default source unit and specifying a custom source unit.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nwc_get_dimension( 55, 'in' );\nwc_get_dimension( 55, 'in', 'm' );\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Experimental Package with pnpm\nDESCRIPTION: Command to install the @woocommerce/experimental package using pnpm package manager. This adds the package to your project's dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/experimental/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/experimental --save\n```\n\n----------------------------------------\n\nTITLE: Removing Coupon from Cart HTTP Endpoint\nDESCRIPTION: HTTP endpoint specification for removing a previously applied coupon from the cart. Requires authentication via Nonce Token or Cart Token and accepts the coupon code to remove.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_17\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/remove-coupon/\n```\n\n----------------------------------------\n\nTITLE: Importing WooCommerce Blueprints via CLI - Markdown\nDESCRIPTION: Describes the command to import a blueprint schema file into WooCommerce using a specified schema path. Optionally shows debug messages at various log levels. This functionality helps migrate or reproduce environment configurations from schema files. Key parameter is the schema file path, and logs are configurable as needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_66\n\nLANGUAGE: markdown\nCODE:\n```\n#### wc blueprint import [schema-path]\n\n- `--show-messages` - Show debug messages. Supported log levels: all, error, info, debug.\n```\n\n----------------------------------------\n\nTITLE: Running Deprecated End-to-End Tests using npm (sh)\nDESCRIPTION: Outlines the sequence of commands to run the deprecated end-to-end tests located in `tests/e2e-tests/specs/`. It involves building assets (`npm run build`), starting the WordPress test environment (`npm run wp-env start`), and then executing the tests (`npm run test:e2e`). Assumes dependencies are installed and the environment is configured.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/javascript-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run wp-env start\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test:e2e\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Wrapper and Pricing Field in WooCommerce PHP\nDESCRIPTION: This code snippet demonstrates how to create a conditional wrapper using the woocommerce/conditional block and add a product pricing field within it. The conditional rendering is based on the product name matching either 'Car' or 'Bike'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/conditional/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$wrapper = $product_summary_field->get_parent()->add_block(\n  [\n    'id'         => 'example-conditional-wrapper',\n    'blockName'  => 'woocommerce/conditional',\n    'order'      => $product_summary_field->get_order() + 5,\n    'attributes' => [\n      'mustMatch' => [\n        'name' => [ 'Car', 'Bike' ]\n      ],\n    ],\n  ]\n);\n$wrapper->add_block(\n  [\n    'id'         => 'example-pricing-field',\n    'blockName'  => 'woocommerce/product-pricing-field',\n    'order'      => $product_summary_field->get_order() + 5,\n    'attributes' => [\n      'label'    => __( 'Example price field', 'woocommerce'),\n      'property' => 'custom_price',\n      'help'     => 'This is a help text',\n    ],\n  ]\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Checkout Form Render in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'experimental__woocommerce_blocks-checkout-render-checkout-form' action hook to log when the checkout form is rendered. This hook does not receive any arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-render-checkout-form',\n\t'plugin/namespace',\n\t() => {\n\t\tconsole.log( 'The checkout form was rendered.' );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering a FilterPicker Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to import the `FilterPicker` component from `@woocommerce/components` and use it within a React function. The `config` object specifies possible filter values and nesting, including custom labels and an example of a not-yet-implemented custom component. The `FilterPicker` receives `config`, `path`, and `query` as props; dependencies are React, @woocommerce/components, and a routing context that provides `path` and `query`. Inputs include nested filters and component options; output is a dropdown UI that manipulates URL query parameters based on user selection. Limitations include incomplete support for custom components within filters and the requirement to define the full configuration structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/filter-picker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { FilterPicker } from '@woocommerce/components';\n\nconst renderFilterPicker = () => {\n\tconst config = {\n\t\tlabel: 'Meal',\n\t\tstaticParams: [],\n\t\tparam: 'meal',\n\t\tshowFilters: function showFilters() {\n\t\t\treturn true;\n\t\t},\n\t\tfilters: [\n\t\t\t{ label: 'Breakfast', value: 'breakfast' },\n\t\t\t{\n\t\t\t\tlabel: 'Lunch',\n\t\t\t\tvalue: 'lunch',\n\t\t\t\tsubFilters: [\n\t\t\t\t\t{ label: 'Meat', value: 'meat', path: [ 'lunch' ] },\n\t\t\t\t\t{ label: 'Vegan', value: 'vegan', path: [ 'lunch' ] },\n\t\t\t\t\t{ \n\t\t\t\t\t\tlabel: 'Pescatarian',\n\t\t\t\t\t\tvalue: 'fish',\n\t\t\t\t\t\tpath: [ 'lunch' ],\n\t\t\t\t\t\tsubFilters: [\n\t\t\t\t\t\t\t{ label: 'Snapper', value: 'snapper', path: [ 'lunch', 'fish' ] },\n\t\t\t\t\t\t\t{ label: 'Cod', value: 'cod', path: [ 'lunch', 'fish' ] },\n\t\t\t\t\t\t\t// Specify a custom component to render (Work in Progress)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlabel: 'Other',\n\t\t\t\t\t\t\t\tvalue: 'other_fish',\n\t\t\t\t\t\t\t\tpath: [ 'lunch', 'fish' ],\n\t\t\t\t\t\t\t\tcomponent: 'OtherFish'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t],\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t\t{ label: 'Dinner', value: 'dinner' },\n\t\t],\n\t};\n\n\treturn <FilterPicker config={ config } path={ path } query={ query } />;\n};\n```\n\n----------------------------------------\n\nTITLE: Importing and Invoking Modular Jest Test Functions - JavaScript\nDESCRIPTION: This snippet shows how to import a modular test function created in a test package and invoke it inside a test spec. It uses ES6 import syntax to bring in the test scenario from a specified package and executes it, which triggers the Jest test suite defined by the imported function. Requires support for ES6 imports and the presence of the modularized test function exported by the tests package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/test-packages.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { testMyCriticalFlow } from 'MyTestsPackage';\n\ntestMyCriticalFlow();\n```\n\n----------------------------------------\n\nTITLE: Rendering and Testing WooCommerce Filter Blocks in Gutenberg - HTML\nDESCRIPTION: This HTML snippet provides the complete Gutenberg markup—using HTML comments and div-based block placeholders—for a page containing WooCommerce filter blocks such as Price, Attribute, Stock, Active Filters, and an All Products grid. It is intended to be pasted in the WordPress Block Editor's Code view, allowing testers to render and interact with various WooCommerce filter blocks. Dependencies: WooCommerce plugin, WooCommerce Blocks package, and version 7.8 active. Key parameters include block types (e.g., price-filter, attribute-filter), data attributes for configuration (e.g., data-heading, data-attribute-id), and layout structure via wp:columns. Expected input: Copy-pasted into a Gutenberg 'Code Editor'. Expected output: Visual filter blocks on the frontend that can be interacted with for testing. Limitation: Requires WooCommerce 7.8 and compatible theme.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1044.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:columns -->\\n<div class=\\\"wp-block-columns\\\"><!-- wp:column {\\\"width\\\":\\\"33.33%\\\"} -->\\n<div class=\\\"wp-block-column\\\" style=\\\"flex-basis:33.33%\\\"><!-- wp:woocommerce/price-filter -->\\n<div class=\\\"wp-block-woocommerce-price-filter is-loading\\\" data-showinputfields=\\\"true\\\" data-showfilterbutton=\\\"false\\\" data-heading=\\\"Filter by price\\\" data-heading-level=\\\"3\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-product-categories__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/price-filter -->\\n\\n<!-- wp:woocommerce/attribute-filter {\\\"attributeId\\\":1,\\\"displayStyle\\\":\\\"dropdown\\\",\\\"heading\\\":\\\"Filter by Color\\\"} -->\\n<div class=\\\"wp-block-woocommerce-attribute-filter is-loading\\\" data-attribute-id=\\\"1\\\" data-show-counts=\\\"true\\\" data-query-type=\\\"or\\\" data-heading=\\\"Filter by Color\\\" data-heading-level=\\\"3\\\" data-display-style=\\\"dropdown\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-product-attribute-filter__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/attribute-filter -->\\n\\n<!-- wp:woocommerce/attribute-filter {\\\"attributeId\\\":2,\\\"heading\\\":\\\"Filter by Size\\\"} -->\\n<div class=\\\"wp-block-woocommerce-attribute-filter is-loading\\\" data-attribute-id=\\\"2\\\" data-show-counts=\\\"true\\\" data-query-type=\\\"or\\\" data-heading=\\\"Filter by Size\\\" data-heading-level=\\\"3\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-product-attribute-filter__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/attribute-filter -->\\n\\n<!-- wp:woocommerce/active-filters -->\\n<div class=\\\"wp-block-woocommerce-active-filters is-loading\\\" data-display-style=\\\"list\\\" data-heading=\\\"Active filters\\\" data-heading-level=\\\"3\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-active-product-filters__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/active-filters -->\\n\\n<!-- wp:woocommerce/stock-filter -->\\n<div class=\\\"wp-block-woocommerce-stock-filter is-loading\\\" data-show-counts=\\\"true\\\" data-heading=\\\"Filter by stock status\\\" data-heading-level=\\\"3\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-product-stock-filter__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/stock-filter --></div>\\n<!-- /wp:column -->\\n\\n<!-- wp:column {\\\"width\\\":\\\"66.66%\\\"} -->\\n<div class=\\\"wp-block-column\\\" style=\\\"flex-basis:66.66%\\\"><!-- wp:woocommerce/all-products {\\\"columns\\\":3,\\\"rows\\\":3,\\\"alignButtons\\\":false,\\\"contentVisibility\\\":{\\\"orderBy\\\":true},\\\"orderby\\\":\\\"date\\\",\\\"layoutConfig\\\":[[\\\"woocommerce/product-image\\\"],[\\\"woocommerce/product-title\\\"],[\\\"woocommerce/product-price\\\"],[\\\"woocommerce/product-rating\\\"],[\\\"woocommerce/product-button\\\"]]} -->\\n<div class=\\\"wp-block-woocommerce-all-products wc-block-all-products\\\" data-attributes=\\\"{&quot;alignButtons&quot;:false,&quot;columns&quot;:3,&quot;contentVisibility&quot;:{&quot;orderBy&quot;:true},&quot;isPreview&quot;:false,&quot;layoutConfig&quot;:[[&quot;woocommerce/product-image&quot;],[&quot;woocommerce/product-title&quot;],[&quot;woocommerce/product-price&quot;],[&quot;woocommerce/product-rating&quot;],[&quot;woocommerce/product-button&quot;]],&quot;orderby&quot;:&quot;date&quot;,&quot;rows&quot;:3}\\\"></div>\\n<!-- /wp:woocommerce/all-products --></div>\\n<!-- /wp:column --></div>\\n<!-- /wp:columns -->\n```\n\n----------------------------------------\n\nTITLE: Shop Coupon Output Table from WP-CLI in Bash\nDESCRIPTION: Displays all fields and current values for a coupon queried via WP-CLI in a formatted table. The response includes settings, limits, associations, and audit fields which are crucial for validation, analysis, or reporting. Useful for both manual inspection and as a parsing target in scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n+-----------------------------+---------------------+\\n| Field                       | Value               |\\n+-----------------------------+---------------------+\\n| id                          | 45                  |\\n| code                        | hello               |\\n| amount                      | 10.00               |\\n| date_created                | 2016-08-09T17:37:28 |\\n| date_modified               | 2016-12-09T20:30:32 |\\n| discount_type               | percent             |\\n| description                 | Yay                 |\\n| date_expires                | 2016-10-22T00:00:00 |\\n| usage_count                 | 2                   |\\n| individual_use              | false               |\\n| product_ids                 | []                  |\\n| excluded_product_ids        | []                  |\\n| usage_limit                 | null                |\\n| usage_limit_per_user        | null                |\\n| limit_usage_to_x_items      | null                |\\n| free_shipping               | true                |\\n| product_categories          | []                  |\\n| excluded_product_categories | []                  |\\n| exclude_sale_items          | false               |\\n| minimum_amount              | 0.00                |\\n| maximum_amount              | 0.00                |\\n| email_restrictions          | []                  |\\n| used_by                     | [\"1\",\"1\"]           |\\n| meta_data                   | []                  |\\n+-----------------------------+---------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Admin Note Properties in PHP\nDESCRIPTION: This snippet shows how to set various properties of a WooCommerce Admin Note, including type, layout, image, source, and name. It demonstrates the use of different setter methods provided by the Note class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$note->set_type( Note::E_WC_ADMIN_NOTE_INFORMATIONAL );\n$note->set_layout( 'plain' );\n$note->set_image( '' );\n$note->set_source( 'inbox-note-example');\n$note->set_name( self::NOTE_NAME );\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Cart Data Changes in Non-React Context\nDESCRIPTION: This snippet shows how to subscribe to changes in the cart data, specifically the shipping country, in a non-React context using the subscribe method from @wordpress/data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * External dependencies\n */\nimport { select, subscribe } from '@wordpress/data';\nimport { cartStore } from '@woocommerce/block-data';\n\nlet previousCountry = '';\nconst unsubscribe = subscribe( () => {\n  const { shippingAddress } = select( cartStore ).getCartData();\n  if ( shippingAddress.country !== previousCountry ) {\n    previousCountry = shippingAddress.country;\n    // Do something when shipping country changes.\n  }\n  if ( /* some other condition that makes this subscription no longer needed */ ) {\n    unsubscribe();\n  }\n}, cartStore );\n```\n\n----------------------------------------\n\nTITLE: Advanced Cart Item Price Formatting\nDESCRIPTION: Advanced implementation of cartItemPrice filter that applies different price formats based on product names. Adds custom text for specific products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemPrice = ( defaultValue, extensions, args, validation ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn '&lt;price/&gt; to keep you warm';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn '&lt;price/&gt; to keep you cool';\n\t}\n\n\treturn '&lt;price/&gt; for all items';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemPrice: modifyCartItemPrice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Unsetting Checkbox in JavaScript\nDESCRIPTION: This function unchecks a checkbox. It takes the selector of the checkbox as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_31\n\nLANGUAGE: JavaScript\nCODE:\n```\nunsetCheckbox(selector)\n```\n\n----------------------------------------\n\nTITLE: Reverting Product Image Width Expansion in WC Blocks 2.7.0 (CSS)\nDESCRIPTION: This CSS rule targets images within the product grid blocks (`.wc-block-grid__products .wc-block-grid__product-image img`). It sets the `width` property to `auto`, overriding the WC Blocks 2.7.0 update that caused images to expand to fill available horizontal space, thus restoring the previous behavior where images retain their intrinsic width.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/product-grid-270.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-grid__products .wc-block-grid__product-image img {\n\twidth: auto;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Cart Endpoint with ExtendSchema in PHP\nDESCRIPTION: This snippet shows how to extend the WooCommerce Store API cart endpoint using ExtendSchema. It adds a custom key-value pair to the cart data in the response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/available-endpoints-to-extend.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_register_endpoint_data(\n\tarray(\n\t\t'endpoint'        => CartSchema::IDENTIFIER,\n\t\t'namespace'       => 'my_plugin_namespace',\n\t\t'data_callback'   => function() {\n\t\t\treturn array(\n\t\t\t\t'foo' => 'bar',\n\t\t\t);\n\t\t},\n\t\t'schema_callback' => function() {\n\t\t\treturn array(\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'foo' => array(\n\t\t\t\t\t\t'type' => 'string',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t},\n\t\t'schema_type'     => ARRAY_A,\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Editor Utility Extension\nDESCRIPTION: Example showing how to extend core Editor utilities with WooCommerce-specific functionality\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Editor as CoreEditor } from '@wordpress/e2e-test-utils-playwright';\n\nexport class Editor extends CoreEditor {\n\tasync insertAllWooBlocks() {\n\t\tfor ( const wooBlock of [ 'all', 'woo', 'blocks' ] ) {\n\t\t\tawait this.insertBlock( wooBlock );\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Listing System Tools with WP-CLI in Bash\nDESCRIPTION: This bash command lists all available WooCommerce system tools through WP-CLI, displaying their IDs, names, actions, and descriptions in a formatted table. Requires WP-CLI and WooCommerce plugin. The command utilizes the --user parameter to indicate permissions context. Useful for identifying maintenance operations available in the system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc tool list --user=1\n```\n\n----------------------------------------\n\nTITLE: Clearing Multiple Validation Errors in JavaScript\nDESCRIPTION: Example showing how to clear specific validation errors using the clearValidationErrors action with an array of error IDs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( validationStore );\nstore.clearValidationErrors( [\n\t'billing-first-name',\n\t'billing-last-name',\n\t'terms-and-conditions',\n] );\n```\n\n----------------------------------------\n\nTITLE: Validating Payment Methods on Cart Load in TypeScript\nDESCRIPTION: This code validates payment methods when the cart loads to display express payment methods. It calls the 'checkPaymentMethodsCanPay()' function to update available payment methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Checking Checkout Status in Checkout Store using JavaScript\nDESCRIPTION: Demonstrates how to retrieve the current status of the checkout process using the getCheckoutStatus selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst checkoutStatus = store.getCheckoutStatus();\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Cache Clearing on Site Visibility Changes in PHP\nDESCRIPTION: Demonstrates how to clear server cache when WooCommerce coming soon mode settings are updated using WordPress hooks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/integrating-coming-soon-mode.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'update_option_woocommerce_coming_soon', 'clear_server_cache', 10, 3 );\nadd_action( 'update_option_woocommerce_store_pages_only', 'clear_server_cache', 10, 3 );\n\nfunction clear_server_cache( $old_value, $new_value, $option ) {\n    // Implement your logic to clear the server cache.\n    if ( function_exists( 'your_cache_clear_function' ) ) {\n        your_cache_clear_function();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests in UI Mode for WooCommerce Blocks\nDESCRIPTION: Command to execute end-to-end tests for WooCommerce Blocks in UI mode, which provides a graphical interface for test execution.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/block-library test:e2e --ui\n```\n\n----------------------------------------\n\nTITLE: Product-Specific Name Customization in WooCommerce Checkout\nDESCRIPTION: This advanced example shows how to modify product names differently based on the specific product, adding different emoji decorations for different product types in the order summary.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyItemName = ( defaultValue, extensions, args ) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn `⛷️ ${ defaultValue } ⛷️`;\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn `🏄‍♂️ ${ defaultValue } 🏄‍♂️`;\n\t}\n\n\treturn `🪴 ${ defaultValue } 🪴`;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\titemName: modifyItemName,\n} );\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutFail in Registered Payment Method Component (JavaScript)\nDESCRIPTION: This snippet shows how to subscribe to `onCheckoutFail` in a registered payment method component, using the `eventRegistration` prop provided by WooCommerce Blocks. The code uses the global `window.wp.element` namespace for accessing React's `useEffect`. The observer function unsubscribes automatically on unmount. This pattern is used for payment method extensions within the WooCommerce Blocks ecosystem.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { useEffect } = window.wp.element;\\n\\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\\n\\tconst { onCheckoutFail } = eventRegistration;\\n\\tuseEffect( () => {\\n\\t\\tconst unsubscribe = onCheckoutFail( () => true );\\n\\t\\treturn unsubscribe;\\n\\t}, [ onCheckoutFail ] );\\n};\n```\n\n----------------------------------------\n\nTITLE: Rows Structure for WooCommerce Table Components in JavaScript\nDESCRIPTION: An array of arrays representing rows and columns in a table. Each column object contains display and value properties, where display is used for rendering and value stores the actual data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  display: ReactNode, // Display value, used for rendering - strings or elements are best here\n  value: string | number | bool // The actual data value\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Remote Inbox Notification Details in WooCommerce\nDESCRIPTION: This snippet demonstrates the structure of a specification object for a remote inbox notification. It includes properties such as slug, type, status, and arrays for locales, actions, and rules.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteInboxNotifications/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"slug\": \"ad-for-automate-woo-2020-04-20\",\n\t\"type\": \"info\",\n\t\"status\": \"unactioned\",\n\t\"is_snoozable\": 0,\n\t\"source\": \"woo.com\",\n\t\"locales\": [\n\t\t<Locale>,\n\t\t...\n\t],\n\t\"actions\": [\n\t\t<Action>,\n\t\t...\n\t],\n\t\"rules\": [\n\t\t<Rule>,\n\t\t...\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Product Attribute Terms via CLI\nDESCRIPTION: Lists terms for a specific WooCommerce product attribute identified by `attribute_id`. Provides filtering and pagination options including `--context`, `--page`, `--per_page`, `--search`, exclusion/inclusion (`--exclude`, `--include`), sorting (`--order`, `--orderby`), hiding empty terms (`--hide_empty`), filtering by parent or product, and field limiting (`--fields`, `--field`). Output format can be specified using `--format`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nwc product_attribute_term list <attribute_id>\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Admin E2E Tests (JSON)\nDESCRIPTION: This JSON snippet illustrates the required configuration entries for the `default.json` file used by the WooCommerce Admin E2E tests. It defines default parameters for the onboarding wizard (industry, number of products, selling elsewhere) and shipping settings (zone name, regions, method), which are used during the test execution to simulate specific user choices.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/admin-e2e-tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n  \"onboardingwizard\": {\n    \"industry\": \"Test industry\",\n    \"numberofproducts\": \"1 - 10\",\n    \"sellingelsewhere\": \"No\"\n  },\n  \"settings\": {\n    \"shipping\": {\n      \"zonename\": \"United States\",\n      \"zoneregions\": \"United States (US)\",\n      \"shippingmethod\": \"Free shipping\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Converting Weight Units in PHP\nDESCRIPTION: Converts a weight measurement from WooCommerce's weight unit to a target unit. Takes the weight value, target unit, and optional source unit parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nwc_get_weight( $weight, $to_unit, $from_unit = '' )\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Address Card Display Format\nDESCRIPTION: This code modifies how saved addresses are displayed in the WooCommerce checkout. It changes the address format to only show the customer's name and country, removing all other address fields from the display.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_localisation_address_formats', function( $formats ) {\n\tforeach ( $formats as $key => $format ) {\n\t\t$formats[ $key ] = \"{first_name} {last_name}\\n{country}\";\n\t\t// You can also use `{name}` instead of first name and last name.\n\t}\n\n\treturn $formats;\n} );\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Contextual Heading Levels with H and Section Components in React (JSX)\nDESCRIPTION: This React (JSX) example shows how the `<H>` component renders headings (`<h3>`, `<h4>`, `<h5>`) with levels determined by its nesting depth within `<Section>` components. The first `<H>` defaults to `<h3>` in this context. The first `<Section>` wraps its content in an `<article>` tag and increases the heading level context, making the next `<H>` an `<h4>`. The nested `<Section>` with `component={false}` renders no wrapper but still increases the context, resulting in the final `<H>` being an `<h5>`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/section/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<div>\n\t<H>Header using a contextual level (h3)</H>\n\t<Section component=\"article\">\n\t\t<p>This is an article component wrapper.</p>\n\t\t<H>Another header with contextual level (h4)</H>\n\t\t<Section component={ false }>\n\t\t\t<p>There is no wrapper component here.</p>\n\t\t\t<H>This is an h5</H>\n\t\t</Section>\n\t</Section>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Storybook Components for TotalsWrapper Documentation\nDESCRIPTION: This code snippet imports necessary components from Storybook for creating interactive documentation. It also imports the TotalsWrapper stories for use in the documentation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/components/totals-wrapper/docs/docs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { Canvas, Meta, ArgTypes, Primary, Source, Controls } from '@storybook/blocks';\n\nimport * as TotalsWrapperStories from '../stories/index.stories.tsx';\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Order Note via CLI\nDESCRIPTION: Fetches details for a specific WooCommerce order note using its `id` and `order_id`. Optional parameters allow filtering fields (`--fields`, `--field`), controlling response context (`--context`), and specifying output format (`--format`). The `order_id` is required, while the specific note `id` is optional (behavior without `id` might vary, potentially listing notes for the order).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nwc order_note get <order_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Product Editor Module with pnpm\nDESCRIPTION: This command installs the @woocommerce/product-editor module using pnpm package manager. The --save flag ensures the dependency is added to the project's package.json file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/product-editor --save\n```\n\n----------------------------------------\n\nTITLE: Registering Payment Method Filters in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use the `registerPaymentMethodExtensionCallbacks` function from `@woocommerce/blocks-registry` to filter available payment methods in the WooCommerce Checkout block. It registers callbacks for 'cod' (Cash on Delivery) and 'cheque' (Check payments) under the namespace 'woocommerce-marketplace-extension'. The 'cod' method is always disabled (returns false), while 'cheque' is only enabled if the billing city provided in the `arg.billingData` object is 'Denver'. This requires the `@woocommerce/blocks-registry` package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/590.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nimport { registerPaymentMethodExtensionCallbacks } from '@woocommerce/blocks-registry';\n\nregisterPaymentMethodExtensionCallbacks( 'woocommerce-marketplace-extension', {\n\tcod: ( arg ) => {\n\t\treturn false;\n\t},\n\tcheque: ( arg ) => {\n\t\treturn arg.billingData.city === 'Denver';\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Disabling Local Taxes for WooCommerce Local Pickup\nDESCRIPTION: Filter to disable store-location-based taxes for Local Pickup shipping method. When applied, the standard tax configuration will be used instead of calculating taxes based on the store's location.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/legacy_local_pickup_advacned_settings_and_customization.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_apply_base_tax_for_local_pickup', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Handling Product View Link Click in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'experimental__woocommerce_blocks-product-view-link' action hook to log when a product view link is clicked. It receives the product object as an argument.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-product-view-link',\n\t'plugin/namespace',\n\t( { product } ) => {\n\t\tconsole.log( `${ product.name } view link clicked.` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing the AbbreviatedCard Component in JSX\nDESCRIPTION: This snippet demonstrates how to use the `AbbreviatedCard` React component. It imports the `Icon` component and a specific icon (`page`) from `@wordpress/icons`. The `AbbreviatedCard` is rendered with an `href` for linking, an `icon` element, an `onClick` handler that triggers an alert, and placeholder text 'Content' as its children.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/abbreviated-card/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Icon, box } from '@wordpress/icons';\n\n<AbbreviatedCard\n\thref=\"#\"\n\ticon={ <Icon icon={ page } /> }\n\tonClick={ () => alert( 'Abbreviated card clicked' ) }\n>\n\tContent\n</AbbreviatedCard>;\n```\n\n----------------------------------------\n\nTITLE: Registering Asset Data with AssetDataRegistry in PHP\nDESCRIPTION: Example showing how to register asset data using the AssetDataRegistry class within a block's enqueue_data method. This demonstrates the proper way to add data that will be available to block scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/block-assets.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function enqueue_data( array $attributes = [] ) {\n    $data_registry = Automattic\\WooCommerce\\Blocks\\Package::container()->get(\n        Automattic\\WooCommerce\\Blocks\\Assets\\AssetDataRegistry::class\n    );\n    $data_registry->add( 'some-asset-data', 'data-value' );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Product Summary Using WordPress Action Hook (PHP)\nDESCRIPTION: This PHP snippet demonstrates how to hook custom content into the single product summary section of a WooCommerce product page by leveraging the 'woocommerce_single_product_summary' action. The code uses an anonymous function to output the string 'woocommerce_single_product_summary' immediately before the product summary content. To use this, you must have WooCommerce and the Code Snippets plugin installed on your WordPress site, and the code should be added via the admin's snippets or directly in functions.php. There are no input parameters, and the output will be visible on single product pages wherever the action is executed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_action('woocommerce_single_product_summary', function() {\n\techo 'woocommerce_single_product_summary';\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Simple Order in JavaScript\nDESCRIPTION: This function creates a basic order with the provided status string. It's useful for setting up test scenarios.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\ncreateSimpleOrder(status)\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Payment Method Integration Class in WooCommerce PHP\nDESCRIPTION: This PHP snippet defines a server-side class that integrates a new payment method with WooCommerce Blocks by extending the AbstractPaymentMethodType. Responsibilities include specifying the payment method name, handling initialization, determining if the gateway is active, registering scripts for frontend and admin, and exposing settings as data to client-side JavaScript. Dependencies are WooCommerce, the payment methods API, and asset registration for JavaScript. The class must be registered server-side for the integration to function in block-based checkout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nnamespace MyPlugin\\MyPaymentMethod;\\n\\nuse Automattic\\WooCommerce\\Blocks\\Payments\\Integrations\\AbstractPaymentMethodType;\\n\\nfinal class MyPaymentMethodType extends AbstractPaymentMethodType {\\n\\t/**\\n\\t * This property is a string used to reference your payment method. It is important to use the same name as in your\\n\\t * client-side JavaScript payment method registration.\\n\\t *\\n\\t * @var string\\n\\t */\\n\\tprotected $name = 'my_payment_method';\\n\\n\\t/**\\n\\t * Initializes the payment method.\\n\\t * \\n\\t * This function will get called during the server side initialization process and is a good place to put any settings\\n\\t * population etc. Basically anything you need to do to initialize your gateway. \\n\\t * \\n\\t * Note, this will be called on every request so don't put anything expensive here.\\n\\t */\\n\\tpublic function initialize() {\\n\\t\\t$this->settings = get_option( 'woocommerce_my_payment_method_settings', [] );\\n\\t}\\n\\n\\t/**\\n\\t * This should return whether the payment method is active or not. \\n\\t * \\n\\t * If false, the scripts will not be enqueued.\\n\\t *\\n\\t * @return boolean\\n\\t */\\n\\tpublic function is_active() {\\n\\t\\treturn filter_var( $this->get_setting( 'enabled', false ), FILTER_VALIDATE_BOOLEAN );\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of scripts/handles to be registered for this payment method.\\n\\t * \\n\\t * In this function you should register your payment method scripts (using `wp_register_script`) and then return the \\n\\t * script handles you registered with. This will be used to add your payment method as a dependency of the checkout script \\n\\t * and thus take sure of loading it correctly. \\n\\t * \\n\\t * Note that you should still make sure any other asset dependencies your script has are registered properly here, if \\n\\t * you're using Webpack to build your assets, you may want to use the WooCommerce Webpack Dependency Extraction Plugin\\n\\t * (https://www.npmjs.com/package/@woocommerce/dependency-extraction-webpack-plugin) to make this easier for you.\\n\\t *\\n\\t * @return array\\n\\t */\\n\\tpublic function get_payment_method_script_handles() {\\n\\t\\twp_register_script(\\n\\t\\t\\t'my-payment-method',\\n\\t\\t\\t'path/to/your/script/my-payment-method.js',\\n\\t\\t\\t[],\\n\\t\\t\\t'1.0.0',\\n\\t\\t\\ttrue\\n\\t\\t);\\n\\t\\treturn [ 'my-payment-method' ];\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of script handles to be enqueued for the admin.\\n\\t * \\n\\t * Include this if your payment method has a script you _only_ want to load in the editor context for the checkout block. \\n\\t * Include here any script from `get_payment_method_script_handles` that is also needed in the admin.\\n\\t */\\n\\tpublic function get_payment_method_script_handles_for_admin() {\\n\\t\\treturn $this->get_payment_method_script_handles();\\n\\t}\\n\\n\\t/**\\n\\t * Returns an array of key=>value pairs of data made available to the payment methods script client side.\\n\\t * \\n\\t * This data will be available client side via `wc.wcSettings.getSetting`. So for instance if you assigned `stripe` as the \\n\\t * value of the `name` property for this class, client side you can access any data via: \\n\\t * `wc.wcSettings.getSetting( 'stripe_data' )`. That would return an object matching the shape of the associative array \\n\\t * you returned from this function.\\n\\t *\\n\\t * @return array\\n\\t */\\n\\tpublic function get_payment_method_data() {\\n\\t\\treturn [\\n\\t\\t\\t'title'       => $this->get_setting( 'title' ),\\n\\t\\t\\t'description' => $this->get_setting( 'description' ),\\n\\t\\t\\t'supports'    => $this->get_supported_features(),\\n\\t\\t];\\n\\t}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Item - HTTP POST Request\nDESCRIPTION: API endpoint for adding a new item to the cart. Requires product ID, quantity, and variation details if applicable.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/items/\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request POST https://example-store.com/wp-json/wc/store/v1/cart/items?id=100&quantity=1\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Cart via WooCommerce Store API (Shell/JSON)\nDESCRIPTION: These snippets demonstrate how to add an item to the WooCommerce cart using the Store API. The first snippet is a shell command making a POST request to the 'cart/add-item' endpoint on a test site. The second snippet is the required JSON payload specifying the product ID (32) and quantity (1). This is used as a prerequisite step for testing API interactions, such as checkout validation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/410.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPOST https://one.wordpress.test/wp-json/wc/store/cart/add-item\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 32,\n\t\"quantity\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching receiveCollection Action in JavaScript\nDESCRIPTION: Shows how to use the useDispatch hook to dispatch the receiveCollection action with the necessary parameters to update the store with collection results.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( COLLECTIONS_STORE_KEY );\ndispatch( receiveCollection( namespace, resourceName, queryString, ids, response ) );\n```\n\n----------------------------------------\n\nTITLE: Defining Onboarding Profile Type Structure in TypeScript\nDESCRIPTION: TypeScript interface that defines the structure of the woocommerce_onboarding_profile option. This stores merchant preferences and setup information collected during the Core Profiler process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/core-profiler.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n    business_choice: \"im_just_starting_my_business\" | \"im_already_selling\" | \"im_setting_up_a_store_for_a_client\" | undefined\n    business_extensions: Plugin[] // slugs of plugins that were installed, e.g 'woocommerce-payments', 'jetpack'\n    selling_online_answer: \"yes_im_selling_online\" | \"no_im_selling_offline\" | \"im_selling_both_online_and_offline\" | undefined\n    selling_platforms: (\"amazon\" | \"adobe_commerce\" | \"big_cartel\" | \"big_commerce\" | \"ebay\" | \"ecwid\" | \"etsy\" | \"facebook_marketplace\" | \"google_shopping\" | \"pinterest\" | \"shopify\" | \"square\" | \"squarespace\" | \"wix\" | \"wordpress\")[] | undefined\n    is_store_country_set: true | false\n    is_plugins_page_skipped: true | false // if the user has clicked skip on the Plugins page\n    skipped: true | false // if the user has clicked skip on the intro-opt-in page\n    completed: true | false // if the user has completed the Core Profiler\n    industry: \"clothing_and_accessories\" | \"health_and_beauty\" | \"food_and_drink\" | \"home_furniture_and_garden\" | \"education_and_learning\" | \"electronics_and_computers\" | \"arts_and_crafts\" | \"sports_and_recreation\" | \"other\"\n    store_email: string\n    is_agree_marketing: true | false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Product Shipping Classes in WooCommerce CLI\nDESCRIPTION: Command for updating existing product shipping classes with options to modify name, slug, and description.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_49\n\nLANGUAGE: bash\nCODE:\n```\nwc product_shipping_class update [id]\n```\n\n----------------------------------------\n\nTITLE: PHP Function Naming Examples in WooCommerce\nDESCRIPTION: Examples of WooCommerce PHP functions following the wc_ prefix convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nwc_get_product()\nwc_is_active_theme()\n```\n\n----------------------------------------\n\nTITLE: Running Adhoc Initialization Script with wc-e2e Docker Command\nDESCRIPTION: Shell command example showing how to execute a custom, ad-hoc initialization script (`init-wp-beta.sh`) when starting the E2E testing container using the `wc-e2e docker:up` command via `pnpm`. This allows for flexible setup beyond the standard initialization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm exec wc-e2e docker:up plugins/woocommerce/tests/e2e/docker/init-wp-beta.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a WooCommerce Product with Categories using WC-CLI in Bash\nDESCRIPTION: This Bash command uses the WooCommerce CLI (`wp wc`) to create a new product. It sets the product name using `--name` and assigns it to category ID 21 using the `--categories` argument, which requires a JSON string representing an array of category objects. The command is executed as the 'admin' user via the `--user=admin` flag, which is necessary for authentication as of WooCommerce 3.0.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/cli-faq.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp wc product create --name='Product Name' --categories='[ { \\\"id\\\" : 21 } ]' --user=admin\n```\n\n----------------------------------------\n\nTITLE: Getting Validation Error ID in WooCommerce Store\nDESCRIPTION: Demonstrates how to retrieve a validation error ID from the validation store that can be used as a CSS selector. The function prefixes the error ID with 'validate-error-' unless the validation error is hidden or doesn't exist.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( validationStore );\nconst billingFirstNameErrorId =\n\tstore.getValidationErrorId( 'billing-first-name' );\n```\n\n----------------------------------------\n\nTITLE: Handling Payment Method Selection in WooCommerce Blocks Checkout (JavaScript)\nDESCRIPTION: This snippet shows how to use the 'experimental__woocommerce_blocks-checkout-set-active-payment-method' action hook to log when a payment method is selected on the checkout page. It receives the payment method slug as an argument.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-set-active-payment-method',\n\t'plugin/namespace',\n\t( { paymentMethodSlug } ) => {\n\t\tconsole.log( `The selected payment method was changed to ${ paymentMethodSlug }` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Installing @woocommerce/e2e-utils using npm (Bash)\nDESCRIPTION: This command uses the Node Package Manager (npm) to download and add the @woocommerce/e2e-utils package as a project dependency. The `--save` flag ensures the package is added to the project's `package.json` file. This installation is a prerequisite for utilizing the package's utilities in end-to-end tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/e2e-utils --save\n```\n\n----------------------------------------\n\nTITLE: Updating a WooCommerce Shop Coupon via WC-CLI in Bash\nDESCRIPTION: Updates an existing WooCommerce shop coupon identified by its `id`. Allows modification of various coupon attributes like code, amount, type, description, dates, usage limits, restrictions, applicability, free shipping, sale item exclusion, amount limits, email restrictions, and metadata. Use `--porcelain` to output only the coupon ID upon successful update.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc shop_coupon update <id> [options]\n```\n\n----------------------------------------\n\nTITLE: Checking if Payment is Ready\nDESCRIPTION: Example showing how to check if the payment status is 'ready' using the isPaymentReady selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst isPaymentReady = store.isPaymentReady();\n```\n\n----------------------------------------\n\nTITLE: Using WooPaymentGatewaySetup Fill and Slot Components in React\nDESCRIPTION: Example of how to implement both the fill and slot components of WooPaymentGatewaySetup. The fill component must provide an id prop and can receive helper props through a render prop pattern, while the slot component requires the same id to connect them.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/onboarding/src/components/WooPaymentGatewaySetup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WooPaymentGatewaySetup id={ key }>\n  {({defaultStepper: DefaultStepper}) => <p>Fill Content</p>}\n</WooPaymentGatewaySetup>\n\n<WooPaymentGatewaySetup.Slot id={ key } />\n```\n\n----------------------------------------\n\nTITLE: Rendering WooCommerce Header Component with Breadcrumbs in JSX\nDESCRIPTION: Example showing how to import and use the Header component with sections prop to create breadcrumbs. The sections prop accepts both direct strings and arrays containing a link and a label.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/header/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Header from 'header';\n\nrender: function() {\n\treturn (\n\t\t<Header\n\t\t\tsections={ [\n\t\t\t\t[ '/analytics', __( 'Analytics', 'woocommerce' ) ],\n\t\t\t\t__( 'Report Title', 'woocommerce' ),\n\t\t\t] }\n\t\t/>\n  \t);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Checkout Order Processing Request via cURL (Shell)\nDESCRIPTION: Provides a sample `curl` command to send a POST request to the checkout order processing endpoint. It includes a Nonce header for authentication (`--header \"Nonce: 12345\"`) and a JSON data payload (`-d`) containing essential order details like the order key, billing email, payment method, and address objects. Replace `{ORDER_ID}` and placeholder data with actual values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout-order.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST https://example-store.com/wp-json/wc/store/v1/checkout/{ORDER_ID} -d '{\"key\":\"wc_order_oFmQYREzh9Tfv\",\"billing_email\":\"admin@example.com\",\"payment_method\":\"cheque\",\"billing_address\":{...},\"shipping_address\":{...}'\n```\n\n----------------------------------------\n\nTITLE: Rendering an Animated Sliding Transition with AnimationSlider - React JSX\nDESCRIPTION: This snippet demonstrates how to use the AnimationSlider component to render slideable content in a React application. The component takes the required props animationKey (a unique identifier for each slideable page) and animate (specifying direction: 'left', 'right', or null). It uses a function child, receiving the transition status from CSSTransition, which can be used to control rendered content. All props are forwarded to CSSTransition, so its dependencies must be installed (notably 'react-transition-group'). The output is a JSX element rendering a sliding transition, with inputs determining animation direction and key, and expected output as the animated content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/animation-slider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AnimationSlider animationKey=\"1\" animate=\"right\">\n\t{ ( status ) => (\n\t\t<span>One (1)</span>\n\t) }\n</AnimationSlider>\n```\n\n----------------------------------------\n\nTITLE: Applying Checkout Filters in JavaScript\nDESCRIPTION: This example shows how to use the applyCheckoutFilter function to apply a filter with specified options. It demonstrates both aliased and global import methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/filter-registry/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { applyCheckoutFilter } from '@woocommerce/blocks-checkout';\n\n// Global import\nconst { applyCheckoutFilter } = wc.blocksCheckout;\n\nconst options = {\n\tfilterName: 'my-filter',\n\tdefaultValue: 'Default Value',\n};\n\nconst filteredValue = applyCheckoutFilter( options );\n```\n\n----------------------------------------\n\nTITLE: Renaming a Country in WooCommerce with PHP\nDESCRIPTION: This function uses the 'woocommerce_countries' filter to rename a specific country in the WooCommerce countries list. In this example, 'Ireland' is renamed to 'Ireland (Changed)'. The function is wrapped in a conditional to prevent function redefinition errors.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/rename-a-country.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( 'YOUR_PREFIX_rename_country' ) ) {\n  /**\n   * Rename a country\n   *\n   * @param array $countries Existing country names\n   * @return array $countries Updated country name(s)\n   */\n  function YOUR_PREFIX_rename_country( $countries ) {\n     $countries['IE'] = __( 'Ireland (Changed)', 'YOUR-TEXTDOMAIN' );\n\n     return $countries;\n  }\n  add_filter( 'woocommerce_countries', 'YOUR_PREFIX_rename_country' );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mini Cart Block Template in WordPress Admin\nDESCRIPTION: Bash command to navigate to the mini cart block template in the WordPress site editor. This is used for testing the view switcher functionality in the mini cart block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/930.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp-admin/site-editor.php?postType=wp_template_part&postId=woocommerce%2Fwoocommerce%2F%2Fmini-cart\n```\n\n----------------------------------------\n\nTITLE: Registering Translatable Block Pattern for WooCommerce Mini-Cart\nDESCRIPTION: This PHP function registers a block pattern for the empty cart message in WooCommerce mini-cart. It makes the message translatable by using WordPress translation functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-FSE-templates.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function register_empty_cart_message_block_pattern() {\n    register_block_pattern(\n        'woocommerce/mini-cart-empty-cart-message',\n        array(\n            'title'    => __( 'Empty Mini-Cart Message', 'woo-gutenberg-products-block' ),\n            'inserter' => false,\n            'content'  => '<!-- wp:paragraph {\"align\":\"center\"} --><p class=\"has-text-align-center\"><strong>' . __( 'Your cart is currently empty!', 'woo-gutenberg-products-block' ) . '</strong></p><!-- /wp:paragraph -->',\n        )\n    );\n}\n```\n\n----------------------------------------\n\nTITLE: Using Experiment Component for A/B Testing in React\nDESCRIPTION: Example showing how to use the Experiment component to implement A/B testing in a React application. It demonstrates setting up default, treatment, and loading experiences with the basic Experiment component and the authenticated ExperimentWithAuth variant.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/explat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Experiment } from '@woocommerce/explat';\n\nconst DefaultExperience = <div>Hello World</div>;\n\nconst TreatmentExperience = <div>Hello WooCommerce!</div>;\n\nconst LoadingExperience = <div>⏰</div>;\n\n<Experiment\n\tname=\"woocommerce_example_experiment\"\n\tdefaultExperience={ DefaultExperience }\n\ttreatmentExperience={ TreatmentExperience }\n\tloadingExperience={ LoadingExperience }\n/>;\n\n// Get the experiment assignment with authentication as a WPCOM user.\nimport { ExperimentWithAuth } from '@woocommerce/explat';\n\n<ExperimentWithAuth\n\tname=\"woocommerce_example_experiment\"\n\tdefaultExperience={ DefaultExperience }\n\ttreatmentExperience={ TreatmentExperience }\n\tloadingExperience={ LoadingExperience }\n/>;\n```\n\n----------------------------------------\n\nTITLE: Testing wp_is_block_theme() Replacement in WooCommerce Blocks\nDESCRIPTION: This test case verifies the replacement of wp_is_block_theme() with wc_current_theme_is_fse_theme() in WooCommerce Blocks. It ensures that users can create and publish posts or pages without encountering fatal errors in WordPress 5.8.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/893.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n0. In WP 5.8.\n1. Create a post or page.\n2. Verify there is no fatal error and you can create the post or page and publish it.\n```\n\n----------------------------------------\n\nTITLE: Synchronizing Coming Soon Mode with Other Plugins in PHP\nDESCRIPTION: Example implementation of syncing WooCommerce coming soon mode status with other plugins, including one-way and two-way synchronization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/integrating-coming-soon-mode.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'update_option_woocommerce_coming_soon', 'sync_coming_soon_to_other_plugins', 10, 3 );\n\nfunction sync_coming_soon_to_other_plugins( $old_value, $new_value, $option ) {\n    $is_enabled = $new_value === 'yes';\n\n    // Implement your logic to sync coming soon status.\n    if ( function_exists( 'your_plugin_set_coming_soon' ) ) {\n        your_plugin_set_coming_soon( $is_enabled );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onPaymentSetup in a Registered Payment Method Component using Props in JSX\nDESCRIPTION: Shows how a registered payment method component subscribes to the `onPaymentSetup` event. It receives an `eventRegistration` prop containing the `onPaymentSetup` function and uses the `useEffect` hook (from `window.wp.element`) to register a callback, returning an unsubscribe function for cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onPaymentSetup } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( () => true );\n\t\treturn unsubscribe;\n\t}, [ onPaymentSetup ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Customer Checkout Field Values in PHP\nDESCRIPTION: Demonstrates how to retrieve customer billing and shipping field values using the CheckoutFields helper methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Blocks\\Package;\nuse Automattic\\WooCommerce\\Blocks\\Domain\\Services\\CheckoutFields;\n\n$field_id = 'my-plugin-namespace/my-field';\n$customer = wc()->customer; // Or new WC_Customer( $id )\n$checkout_fields = Package::container()->get( CheckoutFields::class );\n$my_customer_billing_field = $checkout_fields->get_field_from_object( $field_id, $customer, 'billing' );\n$my_customer_shipping_field = $checkout_fields->get_field_from_object( $field_id, $customer, 'shipping' );\n```\n\n----------------------------------------\n\nTITLE: Using the `experimental__woocommerce_blocks-cart-remove-item` JavaScript Hook\nDESCRIPTION: Describes an experimental JavaScript action hook fired via `@wordpress/hooks` when an item is removed from the cart in the Mini-cart or Cart block. It passes the removed product object and its quantity before removal to callback functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-cart-remove-item',\n\t'plugin/namespace',\n\t( { product, quantity } ) => {\n\t\tconsole.log( `${ product.name } was removed from the cart. There were ${ quantity } in the cart.` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for API Tests (.env format)\nDESCRIPTION: Example configuration block demonstrating the required environment variables (BASE_URL, USER_KEY, USER_SECRET) for running the WooCommerce API tests. These should be placed in a `.env` file in the test package folder. BASE_URL is the site URL, USER_KEY can be an admin username or consumer key, and USER_SECRET is the corresponding password or consumer secret.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n# Your site's base URL, not including a trailing slash\nBASE_URL=\"https://mysite.com\"\n\n# The admin user's username or generated consumer key\nUSER_KEY=\"\"\n\n# The admin user's password or generated consumer secret\nUSER_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimentalDeRegisterExpressPaymentMethod` JavaScript Function\nDESCRIPTION: An experimental JavaScript function used to deregister an express payment method from the WooCommerce Blocks payment method registry. According to the documentation, this function is intended for use only within testing environments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// Function Signature (based on context):\n__experimentalDeRegisterExpressPaymentMethod( expressPaymentMethodName: string ): void;\n```\n\n----------------------------------------\n\nTITLE: Applying Tax Based on Subtotal Amount in WooCommerce\nDESCRIPTION: This snippet applies a 'Zero Rate' tax class when the cart subtotal is less than or equal to 110 (currency units). It can be adjusted to set a minimum subtotal for tax application.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/configuring_special_tax_scenarios.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nadd_filter( 'woocommerce_product_get_tax_class', 'big_apple_get_tax_class', 1, 2 );\n\nfunction big_apple_get_tax_class( $tax_class, $product ) {\n\tif ( WC()->cart->subtotal <= 110 )\n\t\t$tax_class = 'Zero Rate';\n\n\treturn $tax_class;\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Jest Test Suites Inside Exported Functions - JavaScript\nDESCRIPTION: This snippet demonstrates the necessity to encapsulate Jest's 'describe', 'it', and 'beforeAll' functions inside a user-defined function to avoid fatal errors outside the Jest environment. It statically requires the Jest globals at runtime, and defines a test suite that checks a critical flow, then exports the test function for usage elsewhere. Dependencies include @jest/globals and any custom logic required in the test body. The exported function can later be invoked by a test runner or other importing module.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/test-packages.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n/**\n * Require the necessary jest functions to prevent the package build from referencing them\n * `import` references imported functions during package build\n */\n\nconst { describe, it, beforeAll } = require( '@jest/globals' );\n\nconst testMyCriticalFlow = () => {\n    describe( 'My Critical Flow', () => {\n        beforeAll( async () => {\n            // Test setup\n        } );\n        it( 'can complete first step', async () => {\n            // Do stuff\n          expect( someValue ).toBeTruthy();\n        } );\n    } );\n};\n\nmodules.exports = testMyFlow;\n```\n\n----------------------------------------\n\nTITLE: Fetching Featured Products for Discover Page in PHP\nDESCRIPTION: This code snippet shows the endpoint used to fetch curated extensions and themes for the Discover page. It uses the '/wc/v3/marketplace/featured' endpoint, which acts as a proxy to fetch and cache content from WooCommerce.com.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"/wc/v3/marketplace/featured\"\n```\n\n----------------------------------------\n\nTITLE: Product Variation List Command\nDESCRIPTION: CLI command to list product variations for a specific product ID. Supports pagination, filtering, and various output formats.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_54\n\nLANGUAGE: cli\nCODE:\n```\nwc product_variation list <product_id>\n```\n\n----------------------------------------\n\nTITLE: Adding Product to Order in JavaScript\nDESCRIPTION: This function adds a product to an order using the product search functionality. It takes the order ID and product name as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\naddProductToOrder(orderId, productName)\n```\n\n----------------------------------------\n\nTITLE: Updating Order in JavaScript\nDESCRIPTION: This helper method clicks the Update button on the order details page. It can optionally wait for the save operation to complete.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nclickUpdateOrder(noticeText, waitForSave)\n```\n\n----------------------------------------\n\nTITLE: Disabling Price Adjustment for Non-Base Locations in WooCommerce\nDESCRIPTION: This snippet disables the automatic adjustment of product prices for non-base locations in WooCommerce. It ensures that the total price remains consistent regardless of the applied tax rate.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/configuring_special_tax_scenarios.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nadd_filter( 'woocommerce_adjust_non_base_location_prices', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Defining Action Locales for Remote Inbox Notifications in WooCommerce\nDESCRIPTION: This snippet shows the structure of an action locale object used to provide translated labels for actions in remote inbox notifications.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteInboxNotifications/README.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"locale\": \"en_US\",\n\t\"label\": \"Install\"\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting WooCommerce Checkout Fields to Country and Names Only for Algeria\nDESCRIPTION: This code removes all checkout fields except for country and name fields specifically for Algeria. It sets multiple fields to be non-required and hidden by modifying the country locale settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_get_country_locale', function( $locale ) {\n\n\t$locale['DZ']['address_1'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\n\t$locale['DZ']['postcode'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\n\t$locale['DZ']['city'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\n\t$locale['DZ']['company'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\t\n\t$locale['DZ']['state'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\t\n\t$locale['DZ']['phone'] = [\n\t\t'required' => false,\n\t\t'hidden'   => true,\n\t];\n\n\treturn $locale;\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint to Delete Single Cart Coupon (HTTP)\nDESCRIPTION: Defines the HTTP DELETE request structure for removing a specific coupon from the cart. The `:code` path parameter is required and represents the coupon code to remove.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_9\n\nLANGUAGE: http\nCODE:\n```\nDELETE /cart/coupons/:code\n```\n\n----------------------------------------\n\nTITLE: Cloning WooCommerce Core Repository\nDESCRIPTION: Commands to clone the WooCommerce core repository into the WordPress plugins directory for development\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/development-environment.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd /your/server/wp-content/plugins\ngit clone https://github.com/woocommerce/woocommerce.git\ncd woocommerce\n```\n\n----------------------------------------\n\nTITLE: Dispatching Remove Item From Cart Action in WooCommerce Cart Store - JavaScript\nDESCRIPTION: Shows dispatching removeItemFromCart with cartItemKey (string) to remove a specific item from WooCommerce's cart. Updates the Redux state for the cart and triggers any related removal logic. Parameter: cartItemKey must reference an existing cart item.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( removeItemFromCart( cartItemKey ) );\n```\n\n----------------------------------------\n\nTITLE: Using esc_html_x() Function for Contextual HTML-Safe Translation in PHP\nDESCRIPTION: The esc_html_x() function translates a string with gettext context, and escapes it for safe use in HTML output. This combines context-aware translation with HTML escaping.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = esc_html_x( string $text, string $context, string $domain = 'default' );\n\n// Example\n$translation = esc_html_x( 'Select a category', 'Product category', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Using ExperimentalOrderLocalPickupPackages Slot Fill in WooCommerce\nDESCRIPTION: This TypeScript snippet demonstrates implementing the ExperimentalOrderLocalPickupPackages slot to add custom content inside the Checkout Pickup Options block. This slot only renders in the Checkout block, not in the Cart block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-slot-fills.md#2025-04-23_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst { __ } = window.wp.i18n;\nconst { registerPlugin } = window.wp.plugins;\nconst { ExperimentalOrderLocalPickupPackages } = window.wc.blocksCheckout;\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalOrderLocalPickupPackages>\n\t\t\t<div>\n\t\t\t\t{ __(\n\t\t\t\t\t'By using our convenient local pickup option, you can come to our store and pick up your order. We will send you and email when your order is ready for pickup.',\n\t\t\t\t\t'YOUR-TEXTDOMAIN'\n\t\t\t\t) }\n\t\t\t</div>\n\t\t</ExperimentalOrderLocalPickupPackages>\n\t);\n};\n\nregisterPlugin( 'slot-and-fill-examples', {\n\trender,\n\tscope: 'woocommerce-checkout',\n} );\n```\n\n----------------------------------------\n\nTITLE: Requesting Cart Data with Cart-Token Header - curl - sh\nDESCRIPTION: This shell script snippet demonstrates how to retrieve cart data from a WooCommerce Store API endpoint using curl by passing a Cart-Token in the request headers. It requires the curl command-line tool and a previously obtained Cart-Token value. The request is sent as a GET request, and the server responds with the current cart state associated with the token. Replace \\\"12345\\\" with an actual Cart-Token and \\\"https://example-store.com\\\" with your store’s base URL. The output is the JSON representation of the current cart session.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-tokens.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Cart-Token: 12345\" --request GET https://example-store.com/wp-json/wc/store/v1/cart\n```\n\n----------------------------------------\n\nTITLE: Styling Checkout-Specific Price Format in WooCommerce Blocks\nDESCRIPTION: Example of applying styles to formatted money amounts specifically within the Checkout block using both block and component class prefixes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/css-styling.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* This will apply to prices in the checkout block */\n.wc-block-checkout .wc-block-components-formatted-money-amount {\n\tfont-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Express Payment Method Registration\nDESCRIPTION: Basic registration call for an express payment method using the registry function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nregisterExpressPaymentMethod( options );\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Notice Component in React\nDESCRIPTION: A basic example showing how to import and use the Notice component in a React component. This example demonstrates setting essential props like id, description, icon, dismissibility, and variant.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/components/notice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Notice from '../notice/notice';\n\nfunction MyComponent() {\n\treturn (\n\t\t<Notice\n\t\t\tid=\"unique-notice-id\"\n\t\t\tdescription=\"This is a notice description.\"\n\t\t\ticon=\"info\"\n\t\t\tisDismissible={true}\n\t\t\tvariant=\"info\"\n\t\t>\n\t\t\t<p>Additional content can go here.</p>\n\t\t</Notice>\n\t);\n}\n\nexport default MyComponent;\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Number Package with PNPM\nDESCRIPTION: Command to install the @woocommerce/number package using pnpm package manager. This package provides utilities for number formatting in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/number/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/number --save\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Subtotal in WooCommerce\nDESCRIPTION: This snippet demonstrates how to access the cart subtotal using the global $woocommerce object and the WC_Cart class. The cart object stores and manages the user's current shopping cart data in the session.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/class-reference.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nglobal $woocommerce;\n$cart_subtotal = $woocommerce->cart->get_cart_subtotal();\n```\n\n----------------------------------------\n\nTITLE: Implementing WooProductSectionItem in React JSX\nDESCRIPTION: This snippet demonstrates how to use the WooProductSectionItem component to add a new section to the WooCommerce product editor. It shows the usage of both the fill and slot components with their respective props.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/woo-product-section-item/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<WooProductSectionItem id={ key } location=\"tab/general\" order={ 2 } pluginId=\"test-plugin\" >\n  { () => {\n    return (\n      <ProductSectionLayout\n        title={ __( 'Product test section', 'woocommerce' ) }\n        description={ __(\n          'In this area you can describe the section.',\n          'woocommerce'\n        ) }\n      >\n        <Card>\n          <CardBody>{ /* Section content */ }</CardBody>\n        </Card>\n\t\t  </ProductSectionLayout>\n    );\n} }\n</WooProductSectionItem>\n\n<WooProductSectionItem.Slot location=\"tab/general\" />\n```\n\n----------------------------------------\n\nTITLE: Example Response for Checkout Data Update - JSON\nDESCRIPTION: Provides a JSON object representing the updated checkout state after a successful PUT request, reflecting persisted additional fields, selected payment method, and other checkout attributes. The presence of '__experimentalCart' enables updating UI cart totals. Useful for updating frontend view post-checkout edit.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"order_id\": 1486,\n    \"status\": \"checkout-draft\",\n    \"order_key\": \"wc_order_KLpMaJ054PVlb\",\n    \"order_number\": \"1486\",\n    \"customer_note\": \"\",\n    \"customer_id\": 1,\n    \"billing_address\": {\n        \"first_name\": \"Peter\",\n        \"last_name\": \"Venkman\",\n        \"company\": \"\",\n        \"address_1\": \"550 Central Park West\",\n        \"address_2\": \"Corner Penthouse Spook Central\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postcode\": \"10023\",\n        \"country\": \"US\",\n        \"email\": \"admin@example.com\",\n        \"phone\": \"555-2368\"\n    },\n    \"shipping_address\": {\n        \"first_name\": \"Peter\",\n        \"last_name\": \"Venkman\",\n        \"company\": \"\",\n        \"address_1\": \"550 Central Park West\",\n        \"address_2\": \"Corner Penthouse Spook Central\",\n        \"city\": \"New York\",\n        \"state\": \"NY\",\n        \"postcode\": \"10023\",\n        \"country\": \"US\"\n    },\n    \"payment_method\": \"bacs\",\n    \"payment_result\": null,\n    \"additional_fields\": {\n        \"plugin-namespace/leave-on-porch\": true,\n        \"plugin-namespace/location-on-porch\": \"dsdd\"\n    },\n    \"__experimentalCart\": { ... },\n    \"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Product Attribute Terms via WooCommerce REST API (HTTP)\nDESCRIPTION: These examples demonstrate how to make HTTP GET requests to retrieve product attribute terms from the WooCommerce Store API. The endpoint supports optional query parameters for ordering and sorting (such as \\\"orderby=slug\\\") and requires the attribute ID. The returned JSON will include matching terms for the specified attribute. Valid parameters, their types, and allowed values are also specified in the documentation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attribute-terms.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/attributes/:id/terms\nGET /products/attributes/:id/terms?orderby=slug\n```\n\n----------------------------------------\n\nTITLE: Checking Customer Data Update Status in JavaScript\nDESCRIPTION: This code shows how to use the isCustomerDataUpdating selector to check if customer data is currently being updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst isCustomerDataUpdating = store.isCustomerDataUpdating();\n```\n\n----------------------------------------\n\nTITLE: Modifying Checkout Field Label and Placeholder\nDESCRIPTION: Example of changing both the label and placeholder of the order_comments field using the woocommerce_checkout_fields filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Hook in\nadd_filter( 'woocommerce_checkout_fields' , 'custom_override_checkout_fields' );\n\n// Our hooked in function - $fields is passed via the filter!\nfunction custom_override_checkout_fields( $fields ) {\n    $fields['order']['order_comments']['placeholder'] = 'My new placeholder';\n    $fields['order']['order_comments']['label']       = 'My new label';\n    return $fields;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `experimental__woocommerce_blocks-product-view-link` JavaScript Hook\nDESCRIPTION: Describes an experimental JavaScript action hook fired via `@wordpress/hooks` when a product link is clicked within WooCommerce Blocks. It passes the associated product object to callback functions, allowing tracking or modification of product view events.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// Hook Name:\n// experimental__woocommerce_blocks-product-view-link\n\n// Example Usage Concept (Code not fully provided in source):\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-product-view-link',\n\t'plugin/namespace',\n\t( { product } ) => {\n\t\t// Action to perform when a product link is clicked\n\t\tconsole.log( `Product link clicked for ${ product.name }` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Defining CheckoutFilterFunction Type in TypeScript\nDESCRIPTION: This snippet defines the type signature for the CheckoutFilterFunction used in registerCheckoutFilters. It specifies the function parameters and return type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/filter-registry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype CheckoutFilterFunction = < T >(\n\tvalue: T,\n\textensions: Record< string, unknown >,\n\targs?: CheckoutFilterArguments\n) => T;\n```\n\n----------------------------------------\n\nTITLE: Managing WooCommerce Admin Note Lifecycle in PHP\nDESCRIPTION: This snippet demonstrates how to add and delete WooCommerce Admin Notes using activation and deactivation hooks. It uses the possibly_add_note() and possibly_delete_note() methods from the NoteTraits class to manage the note lifecycle.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nfunction my_great_extension_activate() {\n    ExampleNote::possibly_add_note();\n}\nregister_activation_hook( __FILE__, 'my_great_extension_activate' );\n \nfunction my_great_extension_deactivate() {\n    ExampleNote::possibly_delete_note();\n}\nregister_deactivation_hook( __FILE__, 'my_great_extension_deactivate' );\n\n```\n\n----------------------------------------\n\nTITLE: Modifying Sale Badge Price Format in WooCommerce Cart - TSX\nDESCRIPTION: Demonstrates how to modify the sale badge price format based on specific cart items. The filter checks the cart context and applies custom price formats for specific products like 'Beanie with Logo' and 'Sunglasses'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifySaleBadgePriceFormat = (\n\tdefaultValue,\n\textensions,\n\targs,\n\tvalidation\n) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn '&lt;price/&gt; per item while keeping warm';\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn '&lt;price/&gt; per item while looking cool';\n\t}\n\n\treturn '&lt;price/&gt; per item';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tsaleBadgePriceFormat: modifySaleBadgePriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Using _ex() Function for Contextual Translation Display in PHP\nDESCRIPTION: The _ex() function displays the translated string with gettext context. The context parameter helps translators understand where and how the string is used.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n_ex( string $text, string $context, string $domain = 'default' );\n\n// Example\n_ex( 'Place Order', 'Place order button text', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Installing the CSV Export Module via PNPM\nDESCRIPTION: Installs the `@woocommerce/csv-export` package using the `pnpm` package manager and saves it as a project dependency.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/csv-export/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/csv-export --save\n```\n\n----------------------------------------\n\nTITLE: Displaying WooCommerce Dashboard Performance Indicators Table\nDESCRIPTION: Markdown table showing available performance indicators in the dashboard, including indicator names, descriptions, and their corresponding report linkages.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/analytics-dashboard.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Indicator Name  | Description  | Links To ( Report Name > Chart Name ) |\n|---|---|---|\n| Total sales | Gross sales - Returns - Coupons + Taxes + Shipping | Revenue Report > Total sales | \n| Net sales | Gross sales - Returns - Coupons | Revenue Report > Net sales |\n| Orders | The number of new orders placed for a selected date range | Orders Report > Orders |\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a New Storybook Story in TypeScript\nDESCRIPTION: This snippet demonstrates the basic structure for creating a new Storybook story for a component. It includes the necessary imports, default export for metadata, and a template for creating individual stories.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { Story, Meta } from '@storybook/react';\nimport MyComponent, { MyComponentProps } from '..';\n\nexport default {\n\ttitle: 'WooCommerce Blocks/${MyCategory}/${MyComponent}',\n\tcomponent: MyComponent,\n} as Meta< MyComponentProps >;\n\nconst Template: Story< MyComponentProps > = ( args ) => (\n\t<MyComponent { ...args } />\n);\n\nexport const Default = Template.bind( {} );\nDefault.args = {};\n```\n\n----------------------------------------\n\nTITLE: Initializing get_note() Method for WooCommerce Admin Note in PHP\nDESCRIPTION: This snippet defines the structure of the get_note() method used to instantiate and configure a Note object. It's a placeholder for the actual implementation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\npublic static function get_note() {\n    // We'll fill this in with logic that instantiates a Note object\n    //   and sets its properties.\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Checkout Store Descriptor in JavaScript\nDESCRIPTION: Demonstrates how to import the checkoutStore StoreDescriptor from @woocommerce/block-data or the global window object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { checkoutStore } = '@woocommerce/block-data'\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { checkoutStore } = window.wc.wcBlocksData\n```\n\n----------------------------------------\n\nTITLE: Creating Product Reviews in WooCommerce CLI\nDESCRIPTION: Command for creating new product reviews with required parameters for product_id, review content, reviewer name, and email.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_42\n\nLANGUAGE: bash\nCODE:\n```\nwc product_review create <product_id>\n```\n\n----------------------------------------\n\nTITLE: Applying Different Tax Rates Based on User Role in WooCommerce\nDESCRIPTION: This snippet applies a 'Zero Rate' tax class for users with 'administrator' capabilities. It can be customized to apply different tax rates based on various user roles.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/configuring_special_tax_scenarios.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Apply a different tax rate based on the user role.\n */\nfunction wc_diff_rate_for_user( $tax_class, $product ) {\n\tif ( is_user_logged_in() && current_user_can( 'administrator' ) ) {\n\t\t$tax_class = 'Zero Rate';\n\t}\n\n\treturn $tax_class;\n}\nadd_filter( 'woocommerce_product_get_tax_class', 'wc_diff_rate_for_user', 1, 2 );\nadd_filter( 'woocommerce_product_variation_get_tax_class', 'wc_diff_rate_for_user', 1, 2 );\n```\n\n----------------------------------------\n\nTITLE: Basic Subtotal Price Format Filter Implementation in TypeScript\nDESCRIPTION: Demonstrates a simple implementation of the subtotalPriceFormat filter to modify how prices are displayed in the order summary context. The filter changes the price format to show 'per item' suffix when displayed in the summary.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/order-summary-items.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifySubtotalPriceFormat = (\n\tdefaultValue,\n\textensions,\n\targs,\n\tvalidation\n) => {\n\tconst isOrderSummaryContext = args?.context === 'summary';\n\n\tif ( ! isOrderSummaryContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn '&lt;price/&gt; per item';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tsubtotalPriceFormat: modifySubtotalPriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Archive Product Template Hook Mappings\nDESCRIPTION: Table showing the mapping between WooCommerce hooks and their corresponding block positions in Archive Product templates. Used by ArchiveProductTemplatesCompatibility class to inject hooks for Product Collection and Products blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blockified-templates/compatibility-layer.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Hook Name                               | Block Name       | Position |\n|-----------------------------------------|------------------|----------|\n| woocommerce_before_main_content         | Products         | before   |\n| woocommerce_after_main_content          | Products         | after    |\n| woocommerce_before_shop_loop_item_title | Product Title    | before   |\n| woocommerce_shop_loop_item_title        | Product Title    | after    |\n| woocommerce_after_shop_loop_item_title  | Product Title    | before   |\n| woocommerce_before_shop_loop_item       | Loop Item        | before   |\n| woocommerce_after_shop_loop_item        | Loop Item        | after    |\n| woocommerce_before_shop_loop            | Product Template | before   |\n| woocommerce_after_shop_loop             | Product Template | after    |\n| woocommerce_no_products_found           | No Results       | before   |\n| woocommerce_archive_description         | Term Description | before   |\n```\n\n----------------------------------------\n\nTITLE: Selecting Order Action in JavaScript\nDESCRIPTION: This helper method selects an order action in the 'Order Actions' postbox. It takes the action as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_27\n\nLANGUAGE: JavaScript\nCODE:\n```\nselectOrderAction(action)\n```\n\n----------------------------------------\n\nTITLE: Disabling WooCommerce Taxes via Settings Path\nDESCRIPTION: This describes the navigation path and action (`[unchecked]`) within the WordPress admin area to disable the tax calculation feature in WooCommerce (`WooCommerce > Settings > General > Enable taxes`). This is used to test that the Checkout block respects this global setting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/370.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nWooCommerce > Settings > General > Enable taxes: [unchecked]\n```\n\n----------------------------------------\n\nTITLE: Deleting a WooCommerce Shop Coupon via WC-CLI in Bash\nDESCRIPTION: Deletes a specific WooCommerce shop coupon identified by its `id`. The `--force` option can be used to bypass the trash and permanently delete the coupon. Use `--porcelain` to output only the deleted coupon ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc shop_coupon delete <id> [options]\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Actions in PHP Callback\nDESCRIPTION: This PHP snippet demonstrates how to handle multiple actions within a single callback function. It uses a switch statement to determine which action to perform based on the data passed from the client-side.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-update-cart.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nfunction add_discount() {\n  /* Do some processing here */\n}\n\nfunction remove_discount() {\n  /* Do some processing here */\n}\n\nadd_action('woocommerce_blocks_loaded', function() {\n  woocommerce_store_api_register_update_callback(\n    [\n      'namespace' => 'extension-unique-namespace',\n      'callback'  => function( $data ) {\n        if ( $data['action'] === 'add' ) {\n          add_discount( );\n        }\n        if ( $data['action'] === 'remove' ) {\n          remove_discount();\n        }\n      }\n    ]\n  );\n} );\n```\n\n----------------------------------------\n\nTITLE: Validating Proper CheckboxControl Import - WooCommerce Blocks - Markdown\nDESCRIPTION: This snippet instructs testers to confirm that the 'Checkout' order note label does not incorrectly open the 'Shipping as billing' checkbox after CheckboxControl import changes. It is focused regression-testing for a specific event-handling bug, with prerequisites including a site with WooCommerce Blocks and a Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Import CheckboxControl from a single place [#12015](https://github.com/woocommerce/woocommerce-blocks/pull/12015)\n\n1. In Checkout, click the order note label.\n2. It should not open Shipping as billing checkbox.\n```\n\n----------------------------------------\n\nTITLE: Using Less Than Comparison Operator\nDESCRIPTION: Example of the less than (<) operator, which returns true if the left operand is less than the right operand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n1 < 2\n```\n\n----------------------------------------\n\nTITLE: Setting Calypso Environment Configuration in WordPress\nDESCRIPTION: Configuration code snippet showing valid values for WOOCOMMERCE_CALYPSO_ENVIRONMENT in wp-config.php to control which Calypso environment is used for WordPress.com connections.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ndefine('WOOCOMMERCE_CALYPSO_ENVIRONMENT', 'production'); // https://wordpress.com\n// or\ndefine('WOOCOMMERCE_CALYPSO_ENVIRONMENT', 'development'); // http://calypso.localhost:3000/\n// or\ndefine('WOOCOMMERCE_CALYPSO_ENVIRONMENT', 'wpcalypso'); // http://wpcalypso.wordpress.com/\n// or\ndefine('WOOCOMMERCE_CALYPSO_ENVIRONMENT', 'horizon'); // https://horizon.wordpress.com\n// or\ndefine('WOOCOMMERCE_CALYPSO_ENVIRONMENT', 'stage'); // https://wordpress.com (proxied)\n```\n\n----------------------------------------\n\nTITLE: Setting Content for WooCommerce Admin Note in PHP\nDESCRIPTION: This snippet shows how to set the content of a WooCommerce Admin Note using the set_content() method. It uses sprintf to format a string with the activation date.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n$note->set_content(\n    sprintf(\n        'Extension activated on %s.', $activated_time_formatted\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Verifying Payment Methods on Checkout Load in TypeScript\nDESCRIPTION: This code verifies all registered payment methods when the checkout process loads, ensuring that only valid payment options are presented to the user.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Verifying and Re-Migrating Orders with Inconsistencies\nDESCRIPTION: Verifies order data consistency and automatically re-migrates any orders with differences to resolve inconsistencies. This operation may overwrite order data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos verify_data --re-migrate\nOrder Data Verification  100% [====================================================================================] 0:00 / 0:00\nVerification completed.\nSuccess: 999 orders were verified in 0 seconds.\n```\n\n----------------------------------------\n\nTITLE: Disabling Store API Nonce Checks for Development - WordPress Hook - PHP\nDESCRIPTION: This PHP snippet disables nonce validation on WooCommerce Store API endpoints by adding a filter that returns true for 'woocommerce_store_api_disable_nonce_check'. Intended only for development purposes, it allows unauthenticated API requests for testing scenarios. Dependency is a WordPress environment with WooCommerce installed. No inputs are required; when added to a theme or plugin, it outputs an altered API behavior by bypassing security checks. This should never be used in production due to security risks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/nonce-tokens.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_store_api_disable_nonce_check', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Task List Item Component\nDESCRIPTION: Shows how to customize task list item appearance and behavior by registering a custom component using WordPress plugin system and WooCommerce onboarding components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WooOnboardingTaskListItem } from '@woocommerce/onboarding';\n\nregisterPlugin( 'my-task-list-item-plugin', {\n  scope: 'woocommerce-tasks',\n  render: () => (\n    <WooOnboardingTaskListItem id=\"appearance\">\n      { ( { defaultTaskItem, onComplete } ) => (\n        <MyTaskListItem onComplete={ onComplete } />\n      ) }\n    </WooOnboardingTaskListItem>\n  ),\n} );\n```\n\n----------------------------------------\n\nTITLE: Defining array_values Transformer (PHP)\nDESCRIPTION: Shows how to define the array_values transformer in PHP. This transformer returns all the values from an array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_values\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Locales for Remote Inbox Notifications in WooCommerce\nDESCRIPTION: This snippet shows the structure of locale objects used to provide translated content for remote inbox notifications. It includes examples for different locales with their respective titles and content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteInboxNotifications/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"locale\": \"en_US\",\n\t\"title\": \"Ad for Automate Woo\",\n\t\"content\": \"Hi There! This is an ad for Automate Woo.\"\n},\n{\n\t\"locale\": \"en_AU\",\n\t\"title\": \"G'day. Ad for Automate Woo, in en-AU.\",\n\t\"content\": \"en-AU content\"\n},\n{\n\t\"locale\": \"fr_FR\",\n\t\"title\": \"Annonce pour automatiser woo\",\n\t\"content\": \"Salut! Ceci est une publicité pour Automate Woo.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Product Stats Totals using WooCommerce Analytics Filters in PHP\nDESCRIPTION: Example showing how to add a custom column to product stats totals by hooking into the WooCommerce analytics clauses filter. The function adds a SUM calculation for a sample column to be included in the product stats totals query.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/data.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_analytics_clauses_product_stats_select_total', 'my_custom_product_stats' );\n/**\n * Add sample data to product stats totals.\n *\n * @param array $clauses array of SELECT clauses.\n * @return array\n */\nfunction my_custom_product_stats( $clauses ) {\n\t$clauses[] = ', SUM( sample_column ) as sample_total';\n\treturn $clauses;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating WordPress to Nightly Build in E2E Initialization Script\nDESCRIPTION: Example ad-hoc Bash initialization script designed to be passed as a parameter to `wc-e2e docker:up`. This script performs standard setup tasks (activating WooCommerce, theme, user creation, plugin installation) and additionally updates WordPress to the latest nightly point release using the WordPress Beta Tester plugin and WP-CLI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Initializing WooCommerce E2E\"\n\nwp plugin install woocommerce --activate\nwp theme install twentynineteen --activate\nwp user create customer customer@woocommercecoree2etestsuite.com --user_pass=password --role=customer --path=/var/www/html\n\n# we cannot create API keys for the API, so we using basic auth, this plugin allows that.\nwp plugin install https://github.com/WP-API/Basic-Auth/archive/master.zip --activate\n\necho \"Updating to WordPress Nightly Point Release\"\n\nwp plugin install wordpress-beta-tester --activate\nwp core check-update\n```\n\n----------------------------------------\n\nTITLE: Implementing the SummaryListPlaceholder Component in JSX\nDESCRIPTION: This snippet shows how to use the `SummaryListPlaceholder` component. It's used to display a placeholder UI while the actual summary data is loading. The `numberOfItems` prop is required and specifies how many placeholder items should be rendered, mimicking the structure of the eventual `SummaryList`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/summary/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SummaryListPlaceholder numberOfItems={ 2 } />\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Unit Tests using npm (sh)\nDESCRIPTION: Executes the JavaScript unit tests located in `*.test.js` files. These tests leverage Jest via `wp-scripts`. Dependencies must be installed (`npm install`, `composer install`) before running this command. Related commands `test:update` and `test:watch` are also available for updating snapshots and continuous testing respectively.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/javascript-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Defining Extended TypeScript Types for a Customized Store\nDESCRIPTION: Illustrates defining TypeScript types for a custom resource (`MyCustomResource`), specifying read-only and mutable properties, defining query parameters (`Query`), and creating interfaces for custom actions (`CustomActions`) and selectors (`CustomSelectors`). These are then combined with the base `CrudActions` and `CrudSelectors` to create comprehensive types (`MyCustomActions`, `MyCustomSelectors`) suitable for a customized, type-safe data store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// types.ts\nimport { CrudActions, CrudSelectors } from '../crud/types';\nimport { DispatchFromMap } from '@automattic/data-stores';\n\n// Define your resource type\nexport interface MyCustomResource {\n    id: number;\n    name: string;\n    // ... other properties\n}\n\n// Define which properties are read-only\ntype ReadOnlyProperties = 'id' | 'date_created';\n\n// Define mutable properties\ntype MutableProperties = Partial<Omit<MyCustomResource, ReadOnlyProperties>>;\n\n// Define query parameters\ntype Query = {\n    context?: string;\n    custom_filter?: string;\n};\n\n// Define any custom actions\nexport interface CustomActions {\n    customAction( id: number ): void;\n}\n\n// Define any custom selectors\nexport interface CustomSelectors {\n    getCustomData( id: number ): MyCustomResource | undefined;\n}\n\n// Combine CRUD and custom types\nexport type MyCustomActions = CrudActions<\n    'MyCustomResource',\n    MyCustomResource,\n    MutableProperties\n> & CustomActions;\n\nexport type MyCustomSelectors = CrudSelectors<\n    'MyCustomResource',\n    'MyCustomResources',\n    MyCustomResource,\n    Query,\n    MutableProperties\n> & CustomSelectors;\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Ubuntu Packages in WSL\nDESCRIPTION: Updates and upgrades all system packages to their latest versions using apt package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/WSL_SETUP_INSTRUCTIONS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update -y && sudo apt upgrade -y\n```\n\n----------------------------------------\n\nTITLE: Implementing ButtonWithDropdownMenu in React for WooCommerce\nDESCRIPTION: Example of how to use the ButtonWithDropdownMenu component in a React application. The component accepts a variant property, an onClick handler for the main button, and a controls array that defines the dropdown menu items with their labels and click handlers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/button-with-dropdown-menu/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ButtonWithDropdownMenu } from 'path_to_component';\n\n<ButtonWithDropdownMenu\n    variant=\"secondary\"\n    onClick={() => console.log( 'Button clicked' ) }\n    controls={ [\n        {\n            title: 'First Menu Item Label',\n            onClick: () => console.log( 'First option clicked' ).\n        },\n        {\n            title: 'Second Menu Item Label',\n            onClick: () => console.log( 'Second option clicked' ).\n        },\n    ] }\n>\n    Add to store\n</ButtonWithDropdownMenu>\n```\n\n----------------------------------------\n\nTITLE: Implementing A/B Testing with useExperiment Hook\nDESCRIPTION: Example demonstrating how to use the useExperiment hook to implement A/B testing in a React component. It shows how to check experiment assignment status and conditionally render different UI experiences based on the experiment results.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/explat/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useExperiment } from '@woocommerce/explat';\n\nconst DefaultExperience = <div>Hello World</div>;\n\nconst TreatmentExperience = <div>Hello WooCommerce!</div>;\n\nconst [ isLoadingExperiment, experimentAssignment ] = useExperiment('experiment-name');\n\nif ( ! isLoadingExperiment && experimentAssignment?.variationName === 'treatment' ) {\n\treturn <TreatmentExperience />\n}\n\nreturn <DefaultExperience />\n```\n\n----------------------------------------\n\nTITLE: Deleting a WooCommerce Product - Bash\nDESCRIPTION: This snippet permanently deletes a WooCommerce product, identified by ID 123, using the WC-CLI with the '--force' flag to ensure immediate removal. 'wp wc product delete' requires proper administrative access and should be used cautiously, as deleted products cannot be retrieved. Only the specified product will be affected unless the command is altered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nwp wc product delete 123 --force\n```\n\n----------------------------------------\n\nTITLE: Single Product Brand Sample Response (JSON)\nDESCRIPTION: This JSON snippet illustrates the structure of a typical response from the /products/brands/{identifier} endpoint, detailing a single brand's properties such as id, name, slug, and associated metadata. The output serves as a template for consumers integrating with the WooCommerce brands API. All fields shown may or may not be present depending on data availability.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"id\": 1,\n\t\"name\": \"Adidas\",\n\t\"slug\": \"adidas\",\n\t\"description\": \"\",\n\t\"parent\": 0,\n\t\"count\": 1,\n\t\"image\": null,\n\t\"review_count\": 1,\n\t\"permalink\": \"https://store.local/product-brand/adidas/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Returning an Error Payment Response Object (WooCommerce JavaScript)\nDESCRIPTION: This snippet shows the minimal required object for indicating an input or validation error during checkout in WooCommerce blocks. Returning type 'error' will set the payment method context status to 'ERROR'. The response can also include message, messageContext, and validationErrors properties to provide detailed feedback for inline field errors. This approach lets payment extensions or observers communicate validation issues back to the checkout UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nconst errorResponse = { type: 'error' };\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper Checkout Flow Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table detailing critical flows for shoppers during the checkout process, including adding addresses, placing orders, and applying coupons.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area | Flow Name                                | Test File                                   |\n| --------- | --------- | ---------------------------------------- | ------------------------------------------- |\n| Shopper   | Checkout  | Correct item in Order Review             | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Can add shipping address                 | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Guest can place order                    | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Create an account                        | shopper/checkout-create-account.spec.js     |\n| Shopper   | Checkout  | Login to existing account                | shopper/checkout-login.spec.js              |\n| Shopper   | Checkout  | Existing customer can place order        | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Use all coupon types                     | shopper/checkout-coupons.spec.js            |\n| Shopper   | Checkout  | View checkout                            | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Receive warnings when form is incomplete | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Add billing address                      | shopper/checkout.spec.js                    |\n| Shopper   | Checkout  | Respect coupon usage constraints         | shopper/cart-checkout-coupons.spec.js       |\n| Shopper   | Checkout  | Display correct tax in checkout          | shopper/cart-checkout-calculate-tax.spec.js |\n| Shopper   | Checkout  | View order confirmation page             | shopper/checkout.spec.js                    |\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated `__experimental_woocommerce_blocks_checkout_order_processed` PHP Hook\nDESCRIPTION: A deprecated PHP action hook (Deprecated in PR 5014) prefixed with `__experimental`. It was triggered when an order completed processing and was ready for payment during the checkout flow.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated Hook name:\n__experimental_woocommerce_blocks_checkout_order_processed\n```\n\n----------------------------------------\n\nTITLE: Viewing Incompatible Plugins List in WordPress Admin\nDESCRIPTION: This snippet demonstrates the WordPress admin page for reviewing plugins incompatible with High-Performance Order Storage in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n![Plugins page](https://woocommerce.com/wp-content/uploads/2023/10/image-22.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Adding Shipping Zone and Method in JavaScript\nDESCRIPTION: This utility helper method adds shipping zones with shipping methods. It takes parameters for zone name, location, zip code, and zone method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_39\n\nLANGUAGE: JavaScript\nCODE:\n```\naddShippingZoneAndMethod(zoneName, zoneLocation, zipCode, zoneMethod)\n```\n\n----------------------------------------\n\nTITLE: Example of Conditional Static Method Mocking in WooCommerce Tests\nDESCRIPTION: Example showing how to conditionally mock a static method based on the input parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/Tools/CodeHacking/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nStaticMockerHack::add_method_mocks([\n    'WC_Some_Legacy_Service' => [\n        'do_something' => function( $what ) {\n            return 'foo' === $what ? \"MOCKED do_something invoked for '$what'\" : WC_Some_Legacy_Service::do_something( $what );\n        }\n    ]\n]);\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Shop Coupons via WC-CLI in Bash\nDESCRIPTION: Lists WooCommerce shop coupons. Allows filtering by context, pagination (`--page`, `--per_page`), search term (`--search`), date range (`--after`, `--before`), specific IDs (`--include`, `--exclude`), offset, ordering (`--order`, `--orderby`), coupon code (`--code`), and selecting specific fields (`--fields`, `--field`). The output format can be specified using `--format` (default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc shop_coupon list [options]\n```\n\n----------------------------------------\n\nTITLE: Installing @woocommerce/components via pnpm (Bash)\nDESCRIPTION: This command installs the `@woocommerce/components` package and adds it as a dependency to your project using the pnpm package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/components --save\n```\n\n----------------------------------------\n\nTITLE: Using EmptyTable for No-Data States in React (JSX)\nDESCRIPTION: This snippet demonstrates rendering the EmptyTable component with an informational message. EmptyTable is intended to fill space and display a custom message when no table rows are available. It supports a numberOfRows prop to approximate the table's visual height. Dependencies: EmptyTable component and React. Expects content as children, and optionally numberOfRows as a prop. Outputs a placeholder element with appropriate vertical size. Use in scenarios where data is missing or yet to be loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<EmptyTable>\n\tThere are no entries.\n</EmptyTable>\n```\n\n----------------------------------------\n\nTITLE: Updating Product Reviews in WooCommerce CLI\nDESCRIPTION: Command for updating existing product reviews with options to modify review content, date, rating, name, and email.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_44\n\nLANGUAGE: bash\nCODE:\n```\nwc product_review update <product_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Managing Products via WooCommerce CLI\nDESCRIPTION: Commands for managing products including listing, creating, retrieving, and updating products. Supports extensive parameters for product attributes, pricing, inventory, shipping, and metadata management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_52\n\nLANGUAGE: cli\nCODE:\n```\nwc product list\nwc product create\nwc product get [id]\nwc product update [id]\n```\n\n----------------------------------------\n\nTITLE: Clearing and Filling Input in JavaScript\nDESCRIPTION: This function replaces the contents of an input field with a new value. It takes the selector and the new value as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nclearAndFillInput(selector, value)\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in PHP for WooCommerce Function\nDESCRIPTION: Demonstrates how to add 'before' and 'after' lifecycle hooks to a WooCommerce function, along with an optional filter for the return value. This pattern allows observation of the function's lifecycle and modification of its result.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction woocommerce_get_current_promotions( ...$args ) {\n    /* Any initial prep, then first lifecycle hook... */\n    do_action( 'woocommerce_before_get_current_promotions', $args );\n    /* ...Do actual work, then final lifecycle hook... */\n    do_action( 'woocommerce_after_get_current_promotions', $result, $args );\n    /* ...Return the result, optionally via a filter... */\n    return apply_filters( 'woocommerce_get_current_promotions', $result, $args );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific WooCommerce Customer via WC-CLI in Bash\nDESCRIPTION: Retrieves details for a specific WooCommerce customer using their unique identifier (`id`). Options include specifying the request context (`--context`), limiting the response to specific fields (`--fields`, `--field`), and controlling the output format (`--format`, default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer get <id> [options]\n```\n\n----------------------------------------\n\nTITLE: Structuring Mini-Cart Contents in HTML for WooCommerce FSE\nDESCRIPTION: This HTML snippet defines the structure of the mini-cart contents for WooCommerce Full Site Editing. It includes blocks for filled and empty cart states, with placeholders for various cart components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-FSE-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:woocommerce/mini-cart-contents -->\n<div class=\"wp-block-woocommerce-mini-cart-contents\">\n\t<!-- wp:woocommerce/filled-mini-cart-contents-block -->\n\t<div class=\"wp-block-woocommerce-filled-mini-cart-contents-block\">\n\t\t<!-- wp:woocommerce/mini-cart-title-block -->\n\t\t<div class=\"wp-block-woocommerce-mini-cart-title-block\"></div>\n\t\t<!-- /wp:woocommerce/mini-cart-title-block -->\n\t\t<!-- wp:woocommerce/mini-cart-items-block -->\n\t\t<div class=\"wp-block-woocommerce-mini-cart-items-block\">\n\t\t\t<!-- wp:woocommerce/mini-cart-products-table-block -->\n\t\t\t<div\n\t\t\t\tclass=\"wp-block-woocommerce-mini-cart-products-table-block\"\n\t\t\t></div>\n\t\t\t<!-- /wp:woocommerce/mini-cart-products-table-block -->\n\t\t</div>\n\t\t<!-- /wp:woocommerce/mini-cart-items-block -->\n\t\t<!-- wp:woocommerce/mini-cart-footer-block -->\n\t\t<div class=\"wp-block-woocommerce-mini-cart-footer-block\"></div>\n\t\t<!-- /wp:woocommerce/mini-cart-footer-block -->\n\t</div>\n\t<!-- /wp:woocommerce/filled-mini-cart-contents-block -->\n\n\t<!-- wp:woocommerce/empty-mini-cart-contents-block -->\n\t<div class=\"wp-block-woocommerce-empty-mini-cart-contents-block\">\n\t\t<!-- wp:paragraph {\"align\":\"center\"} -->\n\t\t<p class=\"has-text-align-center\">\n\t\t\t<strong>Your cart is currently empty!</strong>\n\t\t</p>\n\t\t<!-- /wp:paragraph -->\n\n\t\t<!-- wp:woocommerce/mini-cart-shopping-button-block -->\n\t\t<div class=\"wp-block-woocommerce-mini-cart-shopping-button-block\"></div>\n\t\t<!-- /wp:woocommerce/mini-cart-shopping-button-block -->\n\t</div>\n\t<!-- /wp:woocommerce/empty-mini-cart-contents-block -->\n</div>\n<!-- /wp:woocommerce/mini-cart-contents -->\n```\n\n----------------------------------------\n\nTITLE: Running a Single E2E Test File for WooCommerce Blocks\nDESCRIPTION: Command to run a specific end-to-end test file for WooCommerce Blocks. Replace 'path/to/the/file.spec.ts' with the actual file path.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/block-library test:e2e path/to/the/file.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages Dry Run\nDESCRIPTION: Command to perform a dry run of package publishing to verify the release process without actually publishing to NPM.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/package-release/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./tools/package-release/bin/dev publish -a --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring PNPM Task Orchestration Scripts in JSON\nDESCRIPTION: Base script configuration for monorepo projects using PNPM's filtering syntax for parallel task execution. Includes build, lint, and watch commands with workspace concurrency optimization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"scripts\": {\n\t\t\"build\": \"pnpm --if-present --workspace-concurrency=Infinity --stream --filter=\\\"$npm_package_name...\\\" '/^build:project:.*$/'\",\n\t\t\"build:project\": \"pnpm --if-present '/^build:project:.*$/'\",\n\t\t\"lint\": \"pnpm --if-present '/^lint:lang:.*$/'\",\n\t\t\"lint:fix\": \"pnpm --if-present '/^lint:fix:lang:.*$/'\",\n\t\t\"watch:build\": \"pnpm --if-present --workspace-concurrency=Infinity --filter=\\\"$npm_package_name...\\\" --parallel '/^watch:build:project:.*$/'\",\n\t\t\"watch:build:project\": \"pnpm --if-present run '/^watch:build:project:.*$/'\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Date Utilities via pnpm (bash)\nDESCRIPTION: Demonstrates how to install the @woocommerce/date package using pnpm, ensuring the utilities are available for use in your project. Assumes pnpm is installed and a compatible Node environment is present. The command saves the package as a dependency, which is required before using any JavaScript functions documented here.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/date/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/date --save\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Taxonomy ID by Name in PHP\nDESCRIPTION: Retrieves a product attribute's ID using its name.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_28\n\nLANGUAGE: php\nCODE:\n```\nwc_attribute_taxonomy_id_by_name( $name )\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tab to WooCommerce Admin Test Helper\nDESCRIPTION: Demonstrates how to add a new tab to the test helper interface using WordPress hooks. Creates a 'Super sekret' tab with custom content and components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/EXTENDING-WC-ADMIN-HELPER.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\nconst SuperSekret = () => (\n\t<>\n\t\t<h2>Super sekret</h2>\n\t\t<p>This section contains super sekret tools.</p>\n\t\t<NewTool/>\n\t</>\n);\naddFilter(\n\t'woocommerce_admin_test_helper_tabs',\n\t'wath',\n\t( tabs ) => [\n\t\t...tabs,\n\t\t{\n\t\t\tname: 'super-sekret',\n\t\t\ttitle: 'Super sekret',\n\t\t\tcontent: <SuperSekret/>,\n\t\t}\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Checkout Data with Additional Fields - Bash (cURL)\nDESCRIPTION: Performs a PUT request using cURL to update the checkout, passing additional fields, payment method, and notes as URL-encoded parameters. The Nonce header is included for authentication. This call lets clients persist additional custom or plugin-defined checkout fields and update the selected payment gateway for the order, where parameters are URL-encoded and sent via the query string.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request PUT https://example-store.com/wp-json/wc/store/v1/checkout?additional_fields[plugin-namespace/leave-on-porch]=true&additional_fields[plugin-namespace/location-on-porch]=dsdd&payment_method=bacs&order_notes=Please%20leave%20package%20on%20back%20porch\n```\n\n----------------------------------------\n\nTITLE: Implementing TextControlWithAffixes with Prefix and Suffix in JSX\nDESCRIPTION: Demonstrates the usage of the TextControlWithAffixes component in a React application (JSX). The first example shows adding a percentage sign (%) as a suffix, binding its value to the 'fourth' state variable and updating it via `onChange`. The second example adds a dollar sign ($) as a prefix, includes help text, binds its value to the 'fifth' state variable, and handles changes similarly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/text-control-with-affixes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TextControlWithAffixes\n    suffix=\"%\"\n    label=\"Text field with a suffix\"\n    value={ fourth }\n    onChange={ value => setState( { fourth: value } ) }\n/>\n<TextControlWithAffixes\n    prefix=\"$\"\n    label=\"Text field with prefix and help text\"\n    value={ fifth }\n    onChange={ value => setState( { fifth: value } ) }\n    help=\"This is some help text.\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Checkout Data Store Actions\nDESCRIPTION: Available action creators in the Checkout Data Store for modifying checkout state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n__internalSetIdle();\n__internalSetComplete();\n__internalSetProcessing();\n__internalSetBeforeProcessing();\n__internalSetAfterProcessing();\n__internalSrocessCheckoutResponse( response );\n__internalSetRedirectUrl( url );\n__internalSetHasError( trueOrFalse );\n__internalIncrementCalculating();\n__internalDecrementCalculating();\n__internalSetCustomerId( id );\n__internalSetUseShippingAsBilling( useShippingAsBilling );\n__internalSetShouldCreateAccount( shouldCreateAccount );\n__internalSetOrderNotes( orderNotes );\nsetExtensionData( namespace, extensionData );\n```\n\n----------------------------------------\n\nTITLE: Defining count Transformer (PHP)\nDESCRIPTION: Shows how to define the count transformer in PHP. This transformer returns the number of elements in an array or countable object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"count\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Creating a Ready Page for Test Sequencer Initialization - WP CLI - Shell\nDESCRIPTION: This shell snippet uses WP CLI to create a WordPress page titled 'Ready' with the content 'E2E-tests.'. This serves as a signal to the WooCommerce E2E test sequencer that the testing environment is ready. The command requires WP CLI to be installed and the site accessible from the command line. The key parameters are --post_type=page, --post_status=publish, --post_title, and --post_content. This initializes a required state for automated tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/external.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwp post create --post_type=page --post_status=publish --post_title='Ready' --post_content='E2E-tests.'\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Link for Collections Store\nDESCRIPTION: A markdown link pointing to the complete documentation for the Collections Store component in WooCommerce's data store system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/data/collections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Collections Store\n\nThe docs for the Collections Store can be found in [docs/third-party-developers/extensibility/data-store/collections.md](../../../../docs/third-party-developers/extensibility/data-store/collections.md).\n```\n\n----------------------------------------\n\nTITLE: Example: Retrieving Cart using cURL (Shell)\nDESCRIPTION: Provides a command-line example using cURL to send a GET request to the WooCommerce Store API's cart endpoint. Replace 'https://example-store.com' with the actual store's base URL. This command fetches the complete cart object response.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/cart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for X-Accel-Redirect/X-Sendfile or Force Downloads in WooCommerce\nDESCRIPTION: This NGINX configuration protects the WooCommerce upload folder from direct access when using X-Accel-Redirect/X-Sendfile or Force Downloads methods. It should be placed towards the end of the 'server' block in the NGINX configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/using_nginx_server_to_protect_your_uploads_directory.md#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~* /wp-content/uploads/woocommerce_uploads/ {\n    if ( $upstream_http_x_accel_redirect = \"\" ) {\n        return 403;\n    }\n    internal;\n}\n```\n\n----------------------------------------\n\nTITLE: Using _e() Function to Display Translated Text in PHP\nDESCRIPTION: The _e() function displays the translation of a text string using the specified domain. Unlike __(), this function outputs the text directly rather than returning it.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n_e( string $text, string $domain = 'default' );\n\n// Example\n_e( 'Place Order', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Filtering Rate Limit Identifier in WooCommerce Store API\nDESCRIPTION: Filters the identifier used for grouping rate limit requests in the Store API. Takes a string identifier as input and returns the modified identifier string.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_store_api_rate_limit_id', string $identifier );\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of WooCommerce Admin E2E Test Suite (JavaScript)\nDESCRIPTION: This JavaScript snippet shows how to create a basic E2E test file (`example.test.js`). It imports the `testAdminBasicSetup` function from the `@woocommerce/admin-e2e-tests` package and executes it to test the fundamental WooCommerce admin setup, including activation with pretty permalinks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/admin-e2e-tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { testAdminBasicSetup } from '@woocommerce/admin-e2e-tests';\n\ntestAdminBasicSetup();\n```\n\n----------------------------------------\n\nTITLE: Correlating Dynamic Data in WooCommerce Tests\nDESCRIPTION: Example shows how to extract woocommerce-process-checkout-nonce from a checkout GET request and use it in subsequent POST requests using k6's .find selector or findBetween utility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/?wc-ajax=checkout\n```\n\n----------------------------------------\n\nTITLE: Listing Product Brands with curl (Shell)\nDESCRIPTION: This curl command demonstrates how to call the product brands API endpoint on a WooCommerce store to retrieve all brands. It requires the endpoint URL and assumes public access; authentication may be required for private stores. The output will be a JSON array listing product brands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/brands\"\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Currency Utilities in Bash\nDESCRIPTION: This Bash snippet demonstrates how to install the @woocommerce/currency package using pnpm. It is a prerequisite for using the subsequent JavaScript examples and assumes that pnpm is installed on the system. Executing this command will add the package to the project's dependencies, enabling access to the currency utility functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/currency/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/currency --save\n```\n\n----------------------------------------\n\nTITLE: Creating Product Collection and Filter Blocks Layout in WooCommerce Blocks HTML\nDESCRIPTION: This HTML snippet enables the creation of a dynamic WooCommerce test page featuring product collections and multiple interactive filter blocks within the WordPress Block Editor. Dependencies include WooCommerce Blocks, Gutenberg-compatible WordPress environment, and a theme that supports block-based templates. Main parameters involve configuring the block attributes for layout, filters, and pagination. Users can copy-paste the code into a new page to facilitate isolated testing and UI validation; the layout organizes filter blocks (price, attribute, stock, rating, active) alongside the Product Collection block. Output displays products with filtering and pagination, while limitations include requiring the relevant plugins and blocks to be present and activated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/smoke-testing.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:columns {\"align\":\"wide\"} -->\\n<div class=\\\"wp-block-columns alignwide\\\"><!-- wp:column {\"width\":\"33.33%\"} -->\\n<div class=\\\"wp-block-column\\\" style=\\\"flex-basis:33.33%\\\"><!-- wp:woocommerce/filter-wrapper {\"filterType\":\"price-filter\",\"heading\":\"Filter by price\"} -->\\n<div class=\\\"wp-block-woocommerce-filter-wrapper\\\"><!-- wp:heading {\"level\":3} -->\\n<h3 class=\\\"wp-block-heading\\\">Filter by price</h3>\\n<!-- /wp:heading -->\\n\\n<!-- wp:woocommerce/price-filter {\"heading\":\"\",\"lock\":{\"remove\":true}} -->\\n<div class=\\\"wp-block-woocommerce-price-filter is-loading\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-product-categories__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/price-filter --></div>\\n<!-- /wp:woocommerce/filter-wrapper -->\\n\\n<!-- wp:woocommerce/filter-wrapper {\"filterType\":\"attribute-filter\",\"heading\":\"Filter by attribute\"} -->\\n<div class=\\\"wp-block-woocommerce-filter-wrapper\\\"><!-- wp:heading {\"level\":3} -->\\n<h3 class=\\\"wp-block-heading\\\">Filter by attribute</h3>\\n<!-- /wp:heading -->\\n\\n<!-- wp:woocommerce/attribute-filter {\"attributeId\":1,\"showCounts\":true,\"queryType\":\"and\",\"displayStyle\":\"dropdown\",\"heading\":\"\",\"lock\":{\"remove\":true}} -->\\n<div class=\\\"wp-block-woocommerce-attribute-filter is-loading\\\"></div>\\n<!-- /wp:woocommerce/attribute-filter --></div>\\n<!-- /wp:woocommerce/filter-wrapper -->\\n\\n<!-- wp:woocommerce/filter-wrapper {\"filterType\":\"stock-filter\",\"heading\":\"Filter by stock status\"} -->\\n<div class=\\\"wp-block-woocommerce-filter-wrapper\\\"><!-- wp:heading {\"level\":3} -->\\n<h3 class=\\\"wp-block-heading\\\">Filter by stock status</h3>\\n<!-- /wp:heading -->\\n\\n<!-- wp:woocommerce/stock-filter {\"showCounts\":true,\"heading\":\"\",\"lock\":{\"remove\":true}} -->\\n<div class=\\\"wp-block-woocommerce-stock-filter is-loading\\\"></div>\\n<!-- /wp:woocommerce/stock-filter --></div>\\n<!-- /wp:woocommerce/filter-wrapper -->\\n\\n<!-- wp:woocommerce/filter-wrapper {\"filterType\":\"rating-filter\",\"heading\":\"Filter by rating\"} -->\\n<div class=\\\"wp-block-woocommerce-filter-wrapper\\\"><!-- wp:heading {\"level\":3} -->\\n<h3 class=\\\"wp-block-heading\\\">Filter by rating</h3>\\n<!-- /wp:heading -->\\n\\n<!-- wp:woocommerce/rating-filter {\"showCounts\":true,\"displayStyle\":\"dropdown\",\"lock\":{\"remove\":true}} -->\\n<div class=\\\"wp-block-woocommerce-rating-filter is-loading\\\"></div>\\n<!-- /wp:woocommerce/rating-filter --></div>\\n<!-- /wp:woocommerce/filter-wrapper -->\\n\\n<!-- wp:woocommerce/filter-wrapper {\"filterType\":\"active-filters\",\"heading\":\"Active filters\"} -->\\n<div class=\\\"wp-block-woocommerce-filter-wrapper\\\"><!-- wp:heading {\"level\":3} -->\\n<h3 class=\\\"wp-block-heading\\\">Active filters</h3>\\n<!-- /wp:heading -->\\n\\n<!-- wp:woocommerce/active-filters {\"heading\":\"\",\"lock\":{\"remove\":true}} -->\\n<div class=\\\"wp-block-woocommerce-active-filters is-loading\\\"><span aria-hidden=\\\"true\\\" class=\\\"wc-block-active-filters__placeholder\\\"></span></div>\\n<!-- /wp:woocommerce/active-filters --></div>\\n<!-- /wp:woocommerce/filter-wrapper --></div>\\n<!-- /wp:column -->\\n\\n<!-- wp:column {\"width\":\"66.66%\"} -->\\n<div class=\\\"wp-block-column\\\" style=\\\"flex-basis:66.66%\\\"><!-- wp:woocommerce/product-collection {\"query\":{\"perPage\":9,\"pages\":0,\"offset\":0,\"postType\":\"product\",\"order\":\"asc\",\"orderBy\":\"title\"\",\"search\":\"\",\"exclude\":[],\"inherit\":false,\"taxQuery\":{},\"isProductCollectionBlock\":true,\"woocommerceOnSale\":false,\"woocommerceStockStatus\":[\"instock\",\"outofstock\",\"onbackorder\"],\"woocommerceAttributes\":[],\"woocommerceHandPickedProducts\":[]},\"tagName\":\"div\",\"displayLayout\":{\"type\":\"flex\",\"columns\":3}} -->\\n<div class=\\\"wp-block-woocommerce-product-collection\\\"><!-- wp:woocommerce/product-template -->\\n<!-- wp:woocommerce/product-image {\"imageSizing\":\"thumbnail\",\"isDescendentOfQueryLoop\":true} /-->\\n\\n<!-- wp:post-title {\"textAlign\":\"center\",\"level\":3,\"isLink\":true,\"style\":{\"spacing\":{\"margin\":{\"bottom\":\"0.75rem\",\"top\":\"0\"}}},\"fontSize\":\"medium\",\"__woocommerceNamespace\":\"woocommerce/product-collection/product-title\"} /-->\\n\\n<!-- wp:woocommerce/product-price {\"isDescendentOfQueryLoop\":true,\"textAlign\":\"center\",\"fontSize\":\"small\"} /-->\\n\\n<!-- wp:woocommerce/product-button {\"textAlign\":\"center\",\"isDescendentOfQueryLoop\":true,\"fontSize\":\"small\"} /-->\\n<!-- /wp:woocommerce/product-template -->\\n\\n<!-- wp:query-pagination {\"layout\":{\"type\":\"flex\",\"justifyContent\":\"center\"}} -->\\n<!-- wp:query-pagination-previous /-->\\n\\n<!-- wp:query-pagination-numbers /-->\\n\\n<!-- wp:query-pagination-next /-->\\n<!-- /wp:query-pagination -->\\n\\n<!-- wp:query-no-results -->\\n<!-- wp:paragraph {\"placeholder\":\"Add text or blocks that will display when a query returns no results.\"} -->\\n<p></p>\\n<!-- /wp:paragraph -->\\n<!-- /wp:query-no-results --></div>\\n<!-- /wp:woocommerce/product-collection --></div>\\n<!-- /wp:column --></div>\\n<!-- /wp:columns -->\n```\n\n----------------------------------------\n\nTITLE: Using WooCommerce Dependency Extraction Webpack Plugin (PHP)\nDESCRIPTION: Example of a PHP asset file automatically generated by the WooCommerce Dependency Extraction Webpack Plugin. It defines script dependencies and version information used when registering scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/extensibility-getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nreturn array(\n  'dependencies' => array(\n    'react',\n    'wc-settings',\n    'wp-block-editor',\n    'wp-blocks',\n    'wp-components',\n    'wp-element',\n    'wp-i18n',\n    'wp-primitives'\n  ),\n  'version' => '455da4f55e1ac73b6d34'\n);\n```\n\n----------------------------------------\n\nTITLE: Displaying Review Rating with React (JSX)\nDESCRIPTION: This snippet demonstrates the `ReviewRating` component. It's used to display the star rating for a specific product review. It requires a `review` object prop containing a `rating` property, usually obtained from the WooCommerce API for product reviews.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/rating/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Use a real WooCommerce Review here.\nconst review = { rating: 5 };\n\n<ReviewRating review={ review } />\n```\n\n----------------------------------------\n\nTITLE: Installing k6 on macOS using Homebrew\nDESCRIPTION: Command to install k6 performance testing tool using Homebrew package manager on macOS.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install k6\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Shipping Classes in WooCommerce CLI\nDESCRIPTION: Command for deleting product shipping classes by ID with force option required as trashing is not supported.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_50\n\nLANGUAGE: bash\nCODE:\n```\nwc product_shipping_class delete [id]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Option Check with Transformers in JSON\nDESCRIPTION: This complex rule demonstrates how to use option transformers to check for specific values within nested option structures. It uses dot notation, array column extraction, and array search to verify the presence of a specific industry.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"option\",\n\t\"transformers\": [\n\t    {\n\t        \"use\": \"dot_notation\",\n\t        \"arguments\": {\n\t            \"path\": \"industry\"\n\t        }\n\t    },\n\t    {\n\t        \"use\": \"array_column\",\n\t        \"arguments\": {\n\t            \"key\": \"slug\"\n\t        }\n\t    },\n\t    {\n\t        \"use\": \"array_search\",\n\t        \"arguments\": {\n\t            \"value\": \"fashion-apparel-accessories\"\n\t        }\n\t    }\n\t],\n\t\"option_name\": \"woocommerce_onboarding_profile\",\n\t\"value\": \"fashion-apparel-accessories\",\n\t\"default\": \"USD\",\n\t\"operation\": \"=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_blocks_loaded Action Hook in PHP\nDESCRIPTION: Fires when WooCommerce blocks are loaded and ready to use. This is the safe event hook for when the plugin has loaded and all dependency requirements have been met, providing a reliable alternative to plugins_loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_loaded' )\n```\n\n----------------------------------------\n\nTITLE: Updating a WooCommerce Coupon via WP-CLI in Bash\nDESCRIPTION: Update an existing WooCommerce coupon's properties (amount, discount type, free shipping) from the command line with WP-CLI. Requires WooCommerce, WP-CLI, and a valid coupon ID. The example changes the coupon to a 10% discount with free shipping. Useful for automation or bulk updates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc shop_coupon update 45 --amount='10' --discount_type='percent' --free_shipping=true --user=1\n```\n\n----------------------------------------\n\nTITLE: List All Product Categories Endpoint\nDESCRIPTION: HTTP GET endpoint to retrieve all product categories. Returns an array of category objects containing details like ID, name, slug, description, parent, count, image data, review count and permalink.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-categories.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/categories\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/categories\"\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 16,\n\t\t\"name\": \"Clothing\",\n\t\t\"slug\": \"clothing\",\n\t\t\"description\": \"This is the clothing category.\",\n\t\t\"parent\": 0,\n\t\t\"count\": 11,\n\t\t\"image\": {\n\t\t\t\"id\": 55,\n\t\t\t\"src\": \"https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1.jpg\",\n\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-324x324.jpg\",\n\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1.jpg 800w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-324x324.jpg 324w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-100x100.jpg 100w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-416x416.jpg 416w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-300x300.jpg 300w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-150x150.jpg 150w, https://store.local/wp-content/uploads/2021/11/t-shirt-with-logo-1-768x768.jpg 768w\",\n\t\t\t\"sizes\": \"(max-width: 800px) 100vw, 800px\",\n\t\t\t\"name\": \"t-shirt-with-logo-1.jpg\",\n\t\t\t\"alt\": \"\"\n\t\t},\n\t\t\"review_count\": 2,\n\t\t\"permalink\": \"https://store.local/product-category/clothing/\"\n\t},\n\t{\n\t\t\"id\": 21,\n\t\t\"name\": \"Decor\",\n\t\t\"slug\": \"decor\",\n\t\t\"description\": \"\",\n\t\t\"parent\": 0,\n\t\t\"count\": 1,\n\t\t\"image\": null,\n\t\t\"review_count\": 1,\n\t\t\"permalink\": \"https://store.local/product-category/decor/\"\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Enabling Rate Limiting for WooCommerce Store API in PHP\nDESCRIPTION: This PHP code snippet adds a filter to enable and configure rate limiting for the WooCommerce Store API. It sets the rate limit to 1 request per 500 seconds and disables proxy support.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/930.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nadd_filter( 'woocommerce_store_api_rate_limit_options', function() {\n\treturn [\n\t\t'enabled' => true, // enables/disables Rate Limiting. Default: false\n\t\t'proxy_support' => false, // enables/disables Proxy support. Default: false\n\t\t'limit' => 1, // limit of request per timeframe. Default: 25\n\t\t'seconds' => 500, // timeframe in seconds. Default: 10\n\t];\n} );\n```\n\n----------------------------------------\n\nTITLE: Product Variation Create Command\nDESCRIPTION: CLI command to create a new product variation for a specific product. Supports various attributes like price, stock, dimensions, and metadata.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_55\n\nLANGUAGE: cli\nCODE:\n```\nwc product_variation create <product_id>\n```\n\n----------------------------------------\n\nTITLE: Creating Woo AI Plugin ZIP File\nDESCRIPTION: Commands to install dependencies and build a ZIP file of the plugin for distribution.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woo-ai/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npnpm install\npnpm build:zip\n```\n\n----------------------------------------\n\nTITLE: TypeScript Checkout Validation Link Reference\nDESCRIPTION: Code reference showing the location of checkout validation logic in the WooCommerce codebase. Shows the path to validation-related components including ValidatedTextInput and ValidationInputError.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/data-store/validation.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/woocommerce/woocommerce-blocks/blob/2848a4b11025d9095511c6a92e68f4a2d05d21da/packages/checkout/components/text-input/validated-text-input.tsx\n```\n\nLANGUAGE: typescript\nCODE:\n```\nhttps://github.com/woocommerce/woocommerce-blocks/blob/d8ff1ce08a17a29d9f63a6fa4eeb894eea5dd609/packages/checkout/components/validation-input-error/index.tsx\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX for Redirect Only Method in WooCommerce\nDESCRIPTION: This NGINX configuration protects the WooCommerce upload folder from direct access when using the Redirect Only method for downloadable products. It should be placed towards the end of the 'server' block in the NGINX configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/using_nginx_server_to_protect_your_uploads_directory.md#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~* /wp-content/uploads/woocommerce_uploads/ {\n    autoindex off;\n}\n```\n\n----------------------------------------\n\nTITLE: Prioritized Event Subscription\nDESCRIPTION: Demonstrates how to register an event observer with a specific priority level.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = onCheckoutValidation( myCallback, 10 );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Customer ID from Checkout Store in JavaScript\nDESCRIPTION: Shows how to use the getCustomerId selector to retrieve the WordPress user ID of the customer from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst customerId = store.getCustomerId();\n```\n\n----------------------------------------\n\nTITLE: Using Subtraction Arithmetic Operator\nDESCRIPTION: Example of the subtraction (-) operator, which returns the difference of two operands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n2 - 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating BEM Class Naming in WooCommerce CSS\nDESCRIPTION: This snippet illustrates the proper use of BEM (Block, Element, Modifier) methodology for naming CSS classes in WooCommerce. It shows examples of blocks, nested blocks, elements, and modifiers with appropriate prefixing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/CSS-SASS-coding-guidelines-and-naming-conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n.woocommerce-loop {} /* block */\n.woocommerce-loop-product {} /* nested block */\n.woocommerce-loop-product--sale {} /* modifier */\n.woocommerce-loop-product__link {} /* element */\n.woocommerce-loop-product__title {} /* element */\n.woocommerce-loop-product__price {} /* element */\n.woocommerce-loop-product__rating {} /* element */\n.woocommerce-loop-product__button-add-to-cart {} /* element */\n.woocommerce-loop-product__button-add-to-cart--added {} /* modifier */\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutFail Event in Internal WooCommerce Development (JSX)\nDESCRIPTION: This snippet demonstrates how to subscribe to the onCheckoutFail event using the useCheckoutContext hook in internal WooCommerce development. It uses the useEffect hook to set up and clean up the event subscription.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onCheckoutFail } = useCheckoutContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutFail( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutFail ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Using esc_attr__() Function for Attribute-Safe Translation in PHP\nDESCRIPTION: The esc_attr__() function retrieves the translation of a text string and escapes it for safe use in HTML attributes. This prevents attribute value corruption and potential exploits.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = esc_attr__( string $text, string $domain = 'default' );\n\n// Example\n$translation = esc_attr__( 'Search', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom WooCommerce Admin Page in PHP\nDESCRIPTION: Example of registering a new page in the WooCommerce Admin interface using wc_admin_register_page().\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction add_extension_register_page() {\n    if ( ! function_exists( 'wc_admin_register_page' ) ) {\n        return;\n\t}\n\n    wc_admin_register_page( array(\n\t\t'id'       => 'my-example-page',\n\t\t'title'    => __( 'My Example Page', 'my-textdomain' ),\n\t\t'parent'   => 'woocommerce',\n\t\t'path'     => '/example',\n\t) );\n}\n\nadd_action( 'admin_menu', 'add_extension_register_page' );\n```\n\n----------------------------------------\n\nTITLE: Registering Lazy-Loading Components for Checkout Block in JavaScript\nDESCRIPTION: This code snippet demonstrates how lazy-loading components are registered for the Checkout block. It uses the lazy function from React to dynamically import the component when needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-for-lazy-loaded-components.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nregisterCheckoutBlock( {\n\tmetadata: metadata.CHECKOUT_CONTACT_INFORMATION,\n\tcomponent: lazy( () =>\n\t\timport(\n\t\t\t/* webpackChunkName: \"checkout-blocks/contact-information\" */ './checkout-contact-information-block/frontend'\n\t\t)\n\t),\n} );\n\nregisterCheckoutBlock( {\n\tmetadata: metadata.CHECKOUT_SHIPPING_ADDRESS,\n\tcomponent: lazy( () =>\n\t\timport(\n\t\t\t/* webpackChunkName: \"checkout-blocks/shipping-address\" */ './checkout-shipping-address-block/frontend'\n\t\t)\n\t),\n} );\n\nregisterCheckoutBlock( {\n\tmetadata: metadata.CHECKOUT_BILLING_ADDRESS,\n\tcomponent: lazy( () =>\n\t\timport(\n\t\t\t/* webpackChunkName: \"checkout-blocks/billing-address\" */ './checkout-billing-address-block/frontend'\n\t\t)\n\t),\n} );\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies via `init` Method (PHP)\nDESCRIPTION: Demonstrates method injection within the `src` directory. The `TheClassWithDependencies` class declares its dependencies (`Service1Class`, `Service2Class`) as type-hinted arguments in its `init` method. When the container resolves this class, it automatically resolves and injects instances of these dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse TheService1Namespace\\Service1;\nuse TheService2Namespace\\Service2;\n\nclass TheClassWithDependencies {\n    private $service1;\n\n    private $service2;\n\n    public function init( Service1Class $service1, Service2Class $service2 ) {\n        $this->$service1 = $service1;\n        $this->$service2 = $service2;\n    }\n\n    public function method_that_needs_service_1() {\n        $this->service1->do_something();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Product Collection with Inner Blocks in WooCommerce (TSX)\nDESCRIPTION: This snippet demonstrates how to define inner blocks for a product collection. It creates a collection with a heading, product image, and product price, showcasing the structure and customization of inner blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection-with-inner-blocks\",\n  title: \"My Custom Collection with Inner Blocks\",\n  icon: \"games\",\n  description: \"This is a custom collection with inner blocks.\",\n  keywords: [\"My Custom Collection with Inner Blocks\", \"product collection\"],\n  innerBlocks: [\n    [\n      \"core/heading\",\n      {\n        textAlign: \"center\",\n        level: 2,\n        content: \"Title of the collection\",\n      },\n    ],\n    [\n      \"woocommerce/product-template\",\n      {},\n      [\n        [\"woocommerce/product-image\"],\n        [\n          \"woocommerce/product-price\",\n          {\n            textAlign: \"center\",\n            fontSize: \"small\",\n          },\n        ],\n      ],\n    ],\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Transient File Path via WP-CLI using TransientFilesEngine\nDESCRIPTION: This command uses WP-CLI's `wp eval` to retrieve the full physical path of a specific transient file using the WooCommerce `TransientFilesEngine`. It calls the `get_transient_file_path` method, passing the unique name of the transient file (e.g., '7e7c1f0102030405060708090a0b0c0d0e0f00', which includes the encoded date and random name). The command outputs the absolute path to the file on the server's filesystem if found, or null otherwise. Requires WP-CLI and WooCommerce active.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Internal/TransientFiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp eval \"echo wc_get_container()->get(\\Automattic\\WooCommerce\\Internal\\TransientFiles\\TransientFilesEngine::class)->get_transient_file_path('7e7c1f0102030405060708090a0b0c0d0e0f00');\"\n```\n\n----------------------------------------\n\nTITLE: Getting Active Saved Payment Methods in WooCommerce\nDESCRIPTION: Shows how to get active saved payment methods that can be used for the current order, including example Stripe token structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nactiveSavedPaymentMethods: {\n\tcc: [\n\t\t{\n\t\t\tmethod: {\n\t\t\t\tgateway: 'stripe',\n\t\t\t\tlast4: '4242',\n\t\t\t\tbrand: 'Visa',\n\t\t\t},\n\t\t\texpires: '04/24',\n\t\t\tis_default: true,\n\t\t\tactions: {\n\t\t\t\twcs_deletion_error: {\n\t\t\t\t\turl: '#choose_default',\n\t\t\t\t\tname: 'Delete',\n\t\t\t\t},\n\t\t\t},\n\t\t\ttokenId: 2,\n\t\t},\n\t];\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst activeSavedPaymentMethods = store.getActiveSavedPaymentMethods();\n```\n\n----------------------------------------\n\nTITLE: Using _x() Function for Contextual Translation in PHP\nDESCRIPTION: The _x() function retrieves a translated string with gettext context. The context helps translators understand where and how the string is used.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = _x( string $text, string $context, string $domain = 'default' );\n\n// Example\n$translation = _x( 'Draft', 'Order status', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Clearing All Validation Errors in JavaScript\nDESCRIPTION: Example showing how to clear all validation errors using the clearAllValidationErrors action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst { clearAllValidationErrors } = dispatch( validationStore );\nclearAllValidationErrors();\n```\n\n----------------------------------------\n\nTITLE: Payment Gateway API Request Payload Structure\nDESCRIPTION: Example JSON structure showing how custom payment data is included in the API request payload when an order is placed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"shipping_address\": {},\n\t\"billing_address\": {},\n\t\"customer_note\": \"\",\n\t\"create_account\": false,\n\t\"payment_method\": \"bacs\",\n\t\"payment_data\": [\n\t\t{\n\t\t\t\"key\": \"myGatewayCustomData\",\n\t\t\t\"value\": \"12345\"\n\t\t}\n\t],\n\t\"extensions\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Order Retrieval with cURL (Shell)\nDESCRIPTION: Provides a command-line example using cURL to send a GET request to the WooCommerce Order API endpoint. Users need to replace placeholders `{ORDER_ID}`, `{KEY}`, and potentially `{BILLING_EMAIL}` with actual values for their specific order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/order.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/order/{ORDER_ID}?key={KEY}&billing_email={BILLING_EMAIL}\"\n```\n\n----------------------------------------\n\nTITLE: Ignoring Packages in WooCommerce Lib Directory\nDESCRIPTION: Steps to add a package without conflict avoidance in the WooCommerce lib directory. This process ensures the package appears in the root autoloader.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/lib/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n1. Add package to the `require` section of both the `lib/composer.json` and root `composer.json` file instead of `require-dev`\n2. Add package slug to `extra/mozart/excluded-packages` section of `composer.json`\n3. Run `composer run-script build-lib` from the root directory (You **should not** see the package in `packages/VendorName/PackageName` or `classes`)\n```\n\n----------------------------------------\n\nTITLE: Evaluating and Clicking Element in JavaScript\nDESCRIPTION: This helper method clicks an element inserted in the DOM by a script. It takes the selector as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nevalAndClick(selector)\n```\n\n----------------------------------------\n\nTITLE: Hook Compatibility Data Filter\nDESCRIPTION: Allows extensions to register their template hook functions for compatibility with blockified templates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_blocks_hook_compatibility_additional_data', array $data )\n```\n\n----------------------------------------\n\nTITLE: Example WooCommerce Document Object Structure in JSON\nDESCRIPTION: Provides a sample JSON representation of the 'document object' used in WooCommerce. This object encapsulates data related to the shopping cart (items, totals, shipping, coupons), checkout process (payment method, notes, custom fields), and customer details (ID, addresses). This structure serves as the data context against which conditional field rules are evaluated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"cart\": {\n\t\t\"coupons\": [\n\t\t\t\"my_coupon\"\n\t\t],\n\t\t\"shipping_rates\": [\n\t\t\t\"free_shipping:1\"\n\t\t],\n\t\t\"items\": [\n\t\t\t27,\n\t\t\t27,\n\t\t\t68\n\t\t],\n\t\t\"items_type\": [\n\t\t\t\"simple\",\n\t\t\t\"variation\"\n\t\t],\n\t\t\"items_count\": 3,\n\t\t\"items_weight\": 0,\n\t\t\"needs_shipping\": true,\n\t\t\"prefers_collection\": false,\n\t\t\"totals\": {\n\t\t\t\"totalPrice\": 6600,\n\t\t\t\"totalTax\": 600\n\t\t},\n\t\t\"extensions\": {}\n\t},\n\t\"checkout\": {\n\t\t\"create_account\": false,\n\t\t\"customer_note\": \"\",\n\t\t\"additional_fields\": {\n\t\t\t\"namespace/mycontact-field\": \"myvalue\"\n\t\t},\n\t\t\"payment_method\": \"bacs\"\n\t},\n\t\"customer\": {\n\t\t\"id\": 1,\n\t\t\"billing_address\": {\n\t\t\t\"first_name\": \"First Name\",\n\t\t\t\"last_name\": \"Last Name\",\n\t\t\t\"company\": \"Company\",\n\t\t\t\"address_1\": \"Address 1\",\n\t\t\t\"address_2\": \"Address 2\",\n\t\t\t\"city\": \"City\",\n\t\t\t\"state\": \"State\",\n\t\t\t\"postcode\": \"08000\",\n\t\t\t\"country\": \"US\",\n\t\t\t\"email\": \"email@example.com\",\n\t\t\t\"phone\": \"1234567890\",\n\t\t\t\"namespace/myfield\": \"myvalue\"\n\t\t},\n\t\t\"shipping_address\": {\n\t\t\t\"first_name\": \"First Name\",\n\t\t\t\"last_name\": \"Last Name\",\n\t\t\t\"company\": \"Company\",\n\t\t\t\"address_1\": \"Address 1\",\n\t\t\t\"address_2\": \"Address 2\",\n\t\t\t\"city\": \"City\",\n\t\t\t\"state\": \"State\",\n\t\t\t\"postcode\": \"08000\",\n\t\t\t\"country\": \"US\",\n\t\t\t\"phone\": \"1234567890\",\n\t\t\t\"namespace/myfield\": \"myvalue\"\n\t\t},\n\t\t\"address\": {\n\t\t\t\"first_name\": \"First Name\",\n\t\t\t\"last_name\": \"Last Name\",\n\t\t\t\"company\": \"Company\",\n\t\t\t\"address_1\": \"Address 1\",\n\t\t\t\"address_2\": \"Address 2\",\n\t\t\t\"city\": \"City\",\n\t\t\t\"state\": \"State\",\n\t\t\t\"postcode\": \"08000\",\n\t\t\t\"country\": \"US\",\n\t\t\t\"phone\": \"1234567890\",\n\t\t\t\"namespace/myfield\": \"myvalue\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Instructions for WooCommerce 7.7 Filter Block Translations - text\nDESCRIPTION: This snippet lists test requirements for verifying that filter block translations are correctly loaded for stores set to localized languages in WooCommerce 7.7. It describes setup and validation steps to confirm translated labels appear in the filter block UI, which is critical for internationalization QA. There are no additional software dependencies except for WooCommerce 7.7 and a translation-ready locale. Inputs: None. Outputs: Precondition notice for translation testing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1044.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nImportant: test needs to be conducted using WooCommerce 7.7\n```\n\n----------------------------------------\n\nTITLE: JavaScript Class Naming Example in WooCommerce\nDESCRIPTION: Example of WooCommerce JavaScript class following the WC prefix convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nWCOrdersTable\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than Comparison Operator\nDESCRIPTION: Example of the greater than (>) operator, which returns true if the left operand is greater than the right operand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n2 > 1\n```\n\n----------------------------------------\n\nTITLE: Product API Routes and Test Paths\nDESCRIPTION: Table showing product-related API endpoints and their corresponding test file locations. Includes routes for viewing, searching, adding, and managing different product types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/api-critical-flows.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Route    | Flow name                  | Endpoint                       | Test File                                                   |\n|----------|----------------------------|--------------------------------|-------------------------------------------------------------|\n| Products | Can view all products      | `/wp-json/wc/v3/products`      | `tests/api-core-tests/tests/products/product-list.test.js`  |\n| Products | Can search products        | `/wp-json/wc/v3/products`      | `tests/api-core-tests/tests/products/product-list.test.js`  |\n| Products | Can add a simple product   | `/wp-json/wc/v3/products`      | `tests/api-core-tests/tests/products/products-crud.test.js` |\n| Products | Can add a variable product | `/wp-json/wc/v3/products`      | `tests/api-core-tests/tests/products/products-crud.test.js` |\n| Products | Can add a virtual product  | `/wp-json/wc/v3/products`      | `tests/api-core-tests/tests/products/products-crud.test.js` |\n| Products | Can view a single product  | `/wp-json/wc/v3/products/{id}` | `tests/api-core-tests/tests/products/products-crud.test.js` |\n| Products | Can update a product       | `/wp-json/wc/v3/products/{id}` | `tests/api-core-tests/tests/products/products-crud.test.js` |\n| Products | Can delete a product       | `/wp-json/wc/v3/products/{id}` | `tests/api-core-tests/tests/products/products-crud.test.js` |\n```\n\n----------------------------------------\n\nTITLE: Store Notice Documentation Path Reference in Markdown\nDESCRIPTION: Markdown link pointing to the detailed documentation for the Store Notice Store functionality within the WooCommerce documentation structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/data/store-notices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Store-Notice Store\\n\\nThe docs for the Schema Store can be found in [docs/third-party-developers/extensibility/data-store/store-notices.md](../../../../docs/third-party-developers/extensibility/data-store/store-notices.md).\n```\n\n----------------------------------------\n\nTITLE: Enabling PayPal Standard Gateway via PHP Filter in WooCommerce\nDESCRIPTION: This PHP snippet forces the WooCommerce PayPal Standard payment gateway to load by using the `woocommerce_should_load_paypal_standard` filter and returning true. It's typically used for testing scenarios, such as verifying checkout button label changes specific to this payment method when other conditions might prevent its loading. Requires the WooCommerce plugin and can be added via a theme's `functions.php` or a plugin like 'Code Snippets'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/870.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_should_load_paypal_standard', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Testing Card Declined Error with Stripe in WooCommerce Checkout\nDESCRIPTION: This code snippet demonstrates how to test a card decline scenario using Stripe payment method in WooCommerce Checkout. It uses a specific test card number that will trigger a decline.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/900.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n4000 0000 0000 9995\n```\n\n----------------------------------------\n\nTITLE: Searching WooCommerce.com Products in TypeScript\nDESCRIPTION: This code snippet demonstrates the endpoint used for searching WooCommerce.com products. It utilizes the '/wp-json/wccom-extensions/1.0/search' endpoint and is implemented in the fetchSearchResults() function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n\"/wp-json/wccom-extensions/1.0/search\"\n```\n\n----------------------------------------\n\nTITLE: Listing Product Attributes in WooCommerce CLI\nDESCRIPTION: Command for retrieving a list of product attributes with various formatting options and filters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute list\n```\n\n----------------------------------------\n\nTITLE: Example of Payment Data Store State in WooCommerce\nDESCRIPTION: An example of the data structure held within the Payment Data Store, showing a state with several Payment Gateways active and a saved token.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    status: 'idle',\n    activePaymentMethod: 'stripe',\n    activeSavedToken: '1',\n    availablePaymentMethods: {\n      bacs: {\n        name: 'bacs'\n      },\n      cheque: {\n        name: 'cheque'\n      },\n      cod: {\n        name: 'cod'\n      },\n      stripe: {\n        name: 'stripe'\n      }\n    },\n     availableExpressPaymentMethods: {\n      payment_request: {\n        name: 'payment_request'\n      }\n    },\n    savedPaymentMethods: {\n      cc: [\n        {\n          method: {\n            gateway: 'stripe',\n            last4: '4242',\n            brand: 'Visa'\n          },\n          expires: '12/32',\n          is_default: true,\n          actions: {\n            'delete': {\n              url: 'https://store.local/checkout/delete-payment-method/1/?_wpnonce=123456',\n              name: 'Delete'\n            }\n          },\n          tokenId: 1\n        }\n      ]\n    },\n    paymentMethodData: {\n      token: '1',\n      payment_method: 'stripe',\n      'wc-stripe-payment-token': '1',\n      isSavedToken: true\n    },\n    paymentResult: null,\n    paymentMethodsInitialized: true,\n    expressPaymentMethodsInitialized: true,\n    shouldSavePaymentMethod: false\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Request Fingerprinting Implementation\nDESCRIPTION: Example of implementing custom request fingerprinting using User-Agent and Accept-Language headers to group requests for rate limiting purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/rate-limiting.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_store_api_rate_limit_id', function() {\n    $accept_language = isset( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ? sanitize_text_field( wp_unslash( $_SERVER['HTTP_ACCEPT_LANGUAGE'] ) ) : '';\n    \n    return md5( wc_get_user_agent() . $accept_language );\n} );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Webhook Management\nDESCRIPTION: Commands for managing webhooks and webhook deliveries, including listing, creating, updating, and deleting webhooks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_61\n\nLANGUAGE: cli\nCODE:\n```\nwc webhook list\nwc webhook create --topic=<value> --secret=<value> --delivery_url=<value>\nwc webhook update [id]\nwc webhook delete [id]\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress to Log Rather Than Display Debug Information\nDESCRIPTION: WordPress configuration settings that enable debugging but redirect all warnings and notices to a log file instead of displaying them on the page. This maintains security while still capturing deprecation warnings for developers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/deprecation-in-core.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_DEBUG', true );\ndefine( 'WP_DEBUG_LOG', true );\ndefine( 'WP_DEBUG_DISPLAY', false );\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Response Headers Example\nDESCRIPTION: Example of HTTP response headers showing rate limit information including limit values, remaining requests, reset timestamp, and retry delay.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/rate-limiting.md#2025-04-23_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nRateLimit-Limit: 5\nRateLimit-Remaining: 0\nRateLimit-Reset: 1654880642\nRateLimit-Retry-After: 28\n```\n\n----------------------------------------\n\nTITLE: Adding a Transient Notice in WooCommerce (PHP)\nDESCRIPTION: This snippet demonstrates how to add a transient notice in WooCommerce. It includes options for specifying the notice ID, status, content, and additional options such as action buttons.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/transient-notices.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\\Automattic\\WooCommerce\\Admin\\Features\\TransientNotices::add(\n    array(\n        'id'      => 'my-notice',\n        'status'  => 'success',\n        'content' => 'Some information to display to the user.',\n        'options' => array(\n            'actions' => array(\n                array(\n                    'label' => 'Click me',\n                    'url'   => 'http://wordpress.com',\n                )\n            )\n        )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Address Data Example for Checkout Testing\nDESCRIPTION: Sample address data to test entity decoding in checkout text input fields, specifically focusing on special characters handling in city names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1010.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAddress         : Stationsplein 151\nCountry/Region  : Nederland\nPostal code     : 5211 BP\nCity            : 's-Hertogenbosch\n```\n\n----------------------------------------\n\nTITLE: Defining Individual Stories in Storybook\nDESCRIPTION: This code demonstrates how to define individual stories using the template function. It shows how to bind the template and set specific arguments for each story variation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const Default = Template.bind( {} );\n\n{\n  /**\n   * Define the properties to pass for this specific story. Often,\n   * `Default` stories wouldn't even need this.\n   */\n  args: Partial< MyComponentProps >;\n\n  /**\n   * You will rarely need this, as story names are automatically generated\n   * from your constant name. But that's good to know if you ever need.\n   */\n  storyName: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimental_woocommerce_blocks_add_data_attributes_to_block` PHP Hook\nDESCRIPTION: A PHP filter hook prefixed with `__experimental` that allows third-party developers (3PD) to specify individual block names. These specified blocks will automatically receive their block attributes rendered as HTML `data-` attributes on the frontend.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Hook name:\n__experimental_woocommerce_blocks_add_data_attributes_to_block\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Methods for Custom Coupon Data Store in PHP\nDESCRIPTION: Provides stub implementations for create, read, update, and delete methods in the custom coupon data store class, including necessary hooks and data handling.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/data-stores.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Method to create a new coupon in the database.\n *\n * @param WC_Coupon\n */\npublic function create( &$coupon ) {\n\t$coupon->set_date_created( current_time( 'timestamp' ) );\n\t\n\t/**\n\t * This is where code for inserting a new coupon would go.\n\t * A query would be built using getters: $coupon->get_code(), $coupon->get_description(), etc.\n\t * After the INSERT operation, we want to pass the new ID to the coupon object.\n\t */\n\t$coupon->set_id( $coupon_id );\n\t\n\t// After creating or updating an entry, we need to also cause our 'meta' to save.\n\t$coupon->save_meta_data();\n\t\n\t// Apply changes let's the object know that the current object reflects the database and no \"changes\" exist between the two.\n\t$coupon->apply_changes();\n\t\n\t// It is helpful to provide the same hooks when an action is completed, so that plugins can interact with your data store.\n\tdo_action( 'woocommerce_new_coupon', $coupon_id );\n}\n\n/**\n * Method to read a coupon.\n *\n * @param WC_Coupon\n */\npublic function read( &$coupon ) {\n\t$coupon->set_defaults();\n\n\t// Read should do a check to see if this is a valid coupon\n\t// and otherwise\tthrow an 'Invalid coupon.' exception.\n\t// For valid coupons, set $data to contain our database result.\n\t// All props should be set using set_props with output from the database. This \"hydates\" the CRUD data object.\n\t$coupon_id = $coupon->get_id();\n\t$coupon->set_props( array(\n\t\t'code'                        => $data->code,\n\t\t'description'                 => $data->description,\n\t\t// ..\n\t) );\n\t\n\t\n\t// We also need to read our meta data into the object.\n\t$coupon->read_meta_data();\n\t\n\t// This flag reports if an object has been hydrated or not. If this ends up false, the database hasn't correctly set the object.\n\t$coupon->set_object_read( true );\n\tdo_action( 'woocommerce_coupon_loaded', $coupon );\n}\n\n/**\n * Updates a coupon in the database.\n *\n * @param WC_Coupon\n */\npublic function update( &$coupon ) {\n\t// Update coupon query, using the getters.\n\t\n\t$coupon->save_meta_data();\n\t$coupon->apply_changes();\n\tdo_action( 'woocommerce_update_coupon', $coupon->get_id() );\n}\n\n/**\n * Deletes a coupon from the database.\n *\n * @param WC_Coupon\n * @param array $args Array of args to pass to the delete method.\n */\npublic function delete( &$coupon, $args = array() ) {\n\t// A lot of objects in WordPress and WooCommerce support\n\t// the concept of trashing. This usually is a flag to move the object\n\t// to a \"recycling bin\". Since coupons support trashing, your layer should too.\n\t// If an actual delete occurs, set the coupon ID to 0.\n\t\n\t$args = wp_parse_args( $args, array(\n\t\t'force_delete' => false,\n\t) );\n\n\t$id = $coupon->get_id();\n\n\tif ( $args['force_delete'] ) {\n\t\t// Delete Query\n\t\t$coupon->set_id( 0 );\n\t\tdo_action( 'woocommerce_delete_coupon', $id );\n\t} else {\n\t\t// Trash Query\n\t\tdo_action( 'woocommerce_trash_coupon', $id );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using SectionHeader Component in JSX\nDESCRIPTION: This snippet demonstrates the basic usage of the `SectionHeader` React component. It shows how to render the component and provide a string value for the mandatory `title` prop. This component serves as a header, potentially including actions or a menu.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/section-header/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<SectionHeader title=\"Section title\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with WooCommerce Plugin in JavaScript\nDESCRIPTION: Example configuration for extending the WooCommerce ESLint plugin's recommended ruleset in a project's .eslintrc.js file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/eslint-plugin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  \"extends\": [ \"plugin:@woocommerce/eslint-plugin/recommended\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a WordPress Handler for Adding WooCommerce Blocks\nDESCRIPTION: This code shows how to register a WordPress specific handler to add WooCommerce blocks to a store template using the 'woocommerce/add-block-template' hook. It passes block name, template name, and other attributes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-slot-fill/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { addFilter } from '@wordpress/hooks';\nimport { useWooBlockProps } from '@woocommerce/block-templates';\nimport { ProductGallery } from '@woocommerce/blocks-components';\n\n// WordPress Editor specific handler.\naddFilter(\n    'woocommerce/add-block-template',\n    'woocommerce/add-block-template-wp-editor',\n    ( blockTemplates, blockName, templateName, attributes ) => {\n        if ( blockName === 'woocommerce/product-gallery' ) {\n            blockTemplates.wordpress = () => {\n                const blockProps = useWooBlockProps( attributes );\n\n                return (\n                    <div { ...blockProps }>\n                        <ProductGallery\n                            className={ attributes.className }\n                        />\n                    </div>\n                );\n            };\n        }\n\n        return blockTemplates;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Case in JavaScript\nDESCRIPTION: This function returns the 'it' or 'it.skip' function based on a condition. It's used for conditionally running individual test cases.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nutils.it(condition)\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Interface in TypeScript\nDESCRIPTION: TypeScript interface definition for Product Collections showing required properties including name, title, icon, description, attributes, and inner blocks structure. Collections are implemented as BlockVariations with specific attributes and templates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/product-collection/collections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Collection ={\n\tname: string;\n\ttitle: string;\n\ticon: Icon;\n\tdescription: string;\n\tattributes: ProductCollectionAttributes;\n\tinnerBlocks: InnerBlockTemplate[];\n\tisActive?:\n\t\t(blockAttrs: BlockAttributes, variationAttributes: BlockAttributes) => boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Tax Setting: Display Prices in Shop (Excluding Tax)\nDESCRIPTION: This represents the configuration setting within WooCommerce Tax options to display product prices excluding tax on shop pages. Used in testing tax display logic in the Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/370.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDisplay prices in the shop: Excluding tax\n```\n\n----------------------------------------\n\nTITLE: Creating a WooCommerce Customer via WP-CLI in Bash\nDESCRIPTION: This Bash command uses the WP-CLI interface to create a new WooCommerce customer with detailed fields for billing, shipping, and credentials. It relies on the WooCommerce and WP-CLI plugins and expects any JSON-formatted data for billing/shipping. Main parameters include --email, --user, --billing, --shipping, --password, --username, etc. Upon success, returns the created customer ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc customer create --email='woo@woo.local' --user=1 --billing='{\"first_name\":\"Bob\",\"last_name\":\"Tester\",\"company\":\"Woo\", \"address_1\": \"123 Main St.\", \"city\":\"New York\", \"state:\": \"NY\", \"country\":\"USA\"}' --shipping='{\"first_name\":\"Bob\",\"last_name\":\"Tester\",\"company\":\"Woo\", \"address_1\": \"123 Main St.\", \"city\":\"New York\", \"state:\": \"NY\", \"country\":\"USA\"}' --password='hunter2' --username='mrbob' --first_name='Bob' --last_name='Tester'\n```\n\n----------------------------------------\n\nTITLE: Basic Content Component Implementation\nDESCRIPTION: Simple implementation of the Content component that renders the payment method description from settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Content = () => {\n\treturn decodeEntities( settings.description || '' );\n};\n```\n\n----------------------------------------\n\nTITLE: Unregistering a Container Using the Store Notices Store\nDESCRIPTION: Example of using the unregisterContainer action to remove an existing container for notices. The containerContext parameter identifies which container to unregister.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/store-notices.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storeNoticesStore } from '@woocommerce/block-data';\n\ndispatch( storeNoticesStore ).unregisterContainer( 'someContainerContext' );\n```\n\n----------------------------------------\n\nTITLE: Disabling WooCommerce Product Gallery Features\nDESCRIPTION: Code to disable specific WooCommerce product gallery features.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nremove_theme_support( 'wc-product-gallery-zoom' );\nremove_theme_support( 'wc-product-gallery-lightbox' );\nremove_theme_support( 'wc-product-gallery-slider' );\n```\n\n----------------------------------------\n\nTITLE: Frontend Product Class Implementation\nDESCRIPTION: PHP class for handling the display of custom fields on the frontend store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace WooProductField;\n\ndefined( 'ABSPATH' ) || exit;\n\nclass Product {\n    public function __construct() {\n\t\t$this->hooks();\n    }\n\n    private function hooks() { }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Ternary Expression with Multiple Conditions\nDESCRIPTION: A ternary expression with complex condition evaluation including multiple logical operations and comparisons.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfoo.bar\n\t  && ( foo.baz === \"qux\" || foo.baz === \"quux\" )\n\t  && ( foo.quux > 1 && foo.quux <= 5 )\n\t? \"boo\"\n\t: \"baa\"\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Abuse Tracking Implementation\nDESCRIPTION: Example of implementing a custom action hook to track rate limit violations with IP address and action ID parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/rate-limiting.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n    'woocommerce_store_api_rate_limit_exceeded',\n    function ( $offending_ip, $action_id ) { /* Custom tracking implementation */ }\n);\n```\n\n----------------------------------------\n\nTITLE: Modifying WooPay Payment Handler in PHP to Display Error Messages with HTML\nDESCRIPTION: A code example showing how to modify the PaymentsHandler.php file in WooPay to throw an exception with HTML links in the error message. This is used for testing if HTML error messages display correctly in the Cart and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/870.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// if ( empty( $customer_id ) ) {\n          $session_data      = WooPaySession::UNSANITIZED_get_data();\n          $blog_checkout_url = esc_url( add_query_arg( 'skip_platform_checkout', 'true', $session_data['store_data']\n                                                 ['blog_checkout_url'] ) );\n          /* translators: %1$s opening anchor tag with url, %2$s closing anchor tag */\n          $error_message = __( 'we were unable to process your payment. Please %1$s go back to the merchant store %2$s and\n                                          log into WooPay again.', 'woopay' );\n          $open_tag      = '<a href=\"' . $blog_checkout_url . '\">';\n          $close_tag     = '</a>';\n          throw new InvalidSessionException(\n\t        sprintf( $error_message, $open_tag, $close_tag ),\n          );\n// }\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Taxonomies in PHP\nDESCRIPTION: Retrieves all taxonomies associated with product attributes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\nwc_get_attribute_taxonomies()\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests in Debug Mode for WooCommerce Blocks\nDESCRIPTION: Command to run end-to-end tests for WooCommerce Blocks in debug mode, which provides additional logging and debugging information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/block-library test:e2e --debug\n```\n\n----------------------------------------\n\nTITLE: Monitoring WooCommerce Debug Logs via Terminal Commands\nDESCRIPTION: This terminal command sequence allows a user to navigate to their WordPress installation's content directory and continuously monitor the debug.log for new entries. Required prerequisites include SSH access to the server and proper permissions to the file system. The command is useful for real-time observation of application-level logs, especially for verifying that manually-triggered REST API calls (from the PHP snippet) yield the expected output.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1120.md#2025-04-23_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\ncd /srv/users/user964902c9/apps/{insert-your-jurassic-ninja-username-here}/public/wp-content\\ntail -f debug.log\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Single Cart Coupon\nDESCRIPTION: Shows an example JSON response returned when requesting a single cart coupon. It contains the details for the specified coupon, including its code, type, and totals information (discount, tax, currency).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"code\": \"halfprice\",\n\t\"type\": \"percent\",\n\t\"totals\": {\n\t\t\"currency_code\": \"GBP\",\n\t\t\"currency_symbol\": \"£\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\"currency_suffix\": \"\",\n\t\t\t\"total_discount\": \"9950\",\n\t\t\t\"total_discount_tax\": \"0\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Displaying Notices in a Custom Block\nDESCRIPTION: Example of creating an error notice and using the StoreNoticesContainer component to display it in a custom block. The context parameter is used to specify where the notice should be displayed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/store-notices.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { store as noticesStore } from '@wordpress/notices';\n\nexport default function Block( attributes ) {\n\tconst context = 'your-namespace/custom-form-step';\n\n\tdispatch( noticesStore ).createNotice(\n\t\t'error',\n\t\t'This is an example of an error notice.',\n\t\t{ context }\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<StoreNoticesContainer context={ context } />\n\t\t\t{ /* Your custom block code here */ }\n\t\t</>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Test Groups using JSDoc (JavaScript)\nDESCRIPTION: Illustrates the convention for defining test groups within JavaScript test files using JSDoc comments. The `@group` tag (e.g., `@group api`, `@group endpoint`) is used by `jest-runner-groups` to enable running specific subsets of tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Tests for the WooCommerce API.\n *\n * @group api\n * @group endpoint\n *\n */\ndescribe('', () => {\n\tit('', async () => {});\n});\n```\n\n----------------------------------------\n\nTITLE: Example Payment Data Payload for Stripe Gateway Extension - JSON\nDESCRIPTION: Details the payment_data array expected when using the WooCommerce Stripe Gateway, including source, billing details, and payment method identifiers. These fields must be passed to the '/wc/store/v1/checkout' endpoint for Stripe-powered transactions. Implementation depends on Stripe's requirements; see Stripe docs for token generation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payment_data\": [\n    {\n      \"key\": \"stripe_source\",\n      \"value\": \"src_xxxxxxxxxxxxx\"\n    },\n    {\n      \"key\": \"billing_email\",\n      \"value\": \"myemail@email.com\"\n    },\n    {\n      \"key\": \"billing_first_name\",\n      \"value\": \"Jane\"\n    },\n    {\n      \"key\": \"billing_last_name\",\n      \"value\": \"Doe\"\n    },\n    {\n      \"key\": \"paymentMethod\",\n      \"value\": \"stripe\"\n    },\n    {\n      \"key\": \"paymentRequestType\",\n      \"value\": \"cc\"\n    },\n    {\n      \"key\": \"wc-stripe-new-payment-method\",\n      \"value\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Both Post and Order Objects in Metabox Rendering\nDESCRIPTION: This code snippet shows how to handle both WP_Post and WC_Order objects in metabox rendering functions. It converts the passed parameter to a WC_Order object regardless of whether it's a post or order object, ensuring compatibility with both storage systems.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nfunction render_xyz_metabox( $post_or_order_object ) {\n    $order = ( $post_or_order_object instanceof WP_Post ) ? wc_get_order( $post_or_order_object->ID ) : $post_or_order_object;\n\n    // ... rest of the code. $post_or_order_object should not be used directly below this point.\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Coupon Being Removed in WooCommerce Cart (JavaScript)\nDESCRIPTION: Example of how to get the coupon code that is currently being removed from the cart. Returns a string with the coupon code in the process of being removed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_34\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst couponBeingRemoved = store.getCouponBeingRemoved();\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Server web.config for WooCommerce Endpoints\nDESCRIPTION: This XML configuration for a Windows server's web.config file allows WooCommerce endpoints to work correctly. It sets up URL rewriting rules to properly handle endpoint requests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/customizing-endpoint-urls.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers accessPolicy=\"Read, Execute, Script\" />\n    <rewrite>\n    <rules>\n      <rule name=\"wordpress\" patternSyntax=\"Wildcard\">\n        <match url=\"*\" />\n        <conditions>\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n        </conditions>\n        <action type=\"Rewrite\" url=\"index.php\" />\n      </rule>\n    </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Extension Dependencies\nDESCRIPTION: Commands to install dependencies and build JavaScript files for the extension.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd woo-product-fields\nnpm install # Install dependencies\nnpm run build # Build the javascript\n```\n\n----------------------------------------\n\nTITLE: Accessing My Subscriptions API in PHP\nDESCRIPTION: This code snippet demonstrates the endpoint used for interacting with the My Subscriptions feature. It uses the '/wc/v3/marketplace/subscriptions' API endpoints for listing, installing, connecting, and updating products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"/wc/v3/marketplace/subscriptions\"\n```\n\n----------------------------------------\n\nTITLE: Net Sales Calculation Formula\nDESCRIPTION: Mathematical formula demonstrating how net sales are calculated for variations by subtracting refunds and coupons from the total sale price.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/analytics-variations-report.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(variation price * quantity) - refunds - coupons\n```\n\n----------------------------------------\n\nTITLE: Checking for Payment Errors\nDESCRIPTION: Example demonstrating how to check for payment errors using the hasPaymentError selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst hasPaymentError = store.hasPaymentError();\n```\n\n----------------------------------------\n\nTITLE: Instantiating the MediaUploader Component in React (JSX)\nDESCRIPTION: This JSX code demonstrates how to use the MediaUploader component. It sets a custom label and provides callback functions for `onSelect` (when media is chosen from the modal) and `onUpload` (when files are dropped), both designed to update the component's state (e.g., `images` array using `setImages`) with the selected/uploaded files. It relies on the default WordPress media modal functionality provided by `@wordpress/media-utils`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/media-uploader/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<MediaUploader\n\tlabel={ 'Click the button below to upload' }\n\tonSelect={ ( file ) => setImages( [ ...images, file ] ) }\n\tonUpload={ ( files ) => setImages( [ ...images, ...files ] ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Custom Environment\nDESCRIPTION: Commands demonstrating how to run tests with different environment configurations using the test:e2e:with-env script.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Runs the tests using the gutenberg-stable environment, \n# which is set up to run a subset of relevant tests against a wp-env instance with the latest stable version of the Gutenberg plugin\npnpm test:e2e:with-env gutenberg-stable\n\n# Runs the tests using the default-pressable environment, \n# which is an external site configured to run the tests against a permanent environment. \n# The envs/default-pressable/.env.enc file will be decrypted into .env and used to set the required environment variables\npnpm test:e2e:with-env default-pressable\n\n# Runs all the tests with the default environment. `pnpm test:e2e` already does that, but only runs e2e, ignoring the API tests.\npnpm test:e2e:with-env default\n```\n\n----------------------------------------\n\nTITLE: Getting WooCommerce Customer as CSV in Bash\nDESCRIPTION: This command retrieves customer information using WP-CLI and outputs the fields in CSV format. Requires an existing customer ID, a user context, and the WooCommerce CLI. The output includes account info, billing and shipping details (embedded JSON), and meta-data, making it easy to process programmatically or for exports.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc customer get 17 --user=1 --format=csv\n```\n\n----------------------------------------\n\nTITLE: Using WooCommerce Icons with WordPress Icon Component\nDESCRIPTION: Demonstrates how to import and use a specific icon from the WooCommerce icon library with WordPress's Icon component. Shows implementation of the bagAlt icon as an example.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/icons/docs/iconography.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { bagAlt } from '@woocommerce/icons';\nimport { Icon } from '@wordpress/icons';\n\nconst IconExample = () => <Icon icon={ bagAlt } />;\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Email Style Settings in WooCommerce (PHP)\nDESCRIPTION: This snippet demonstrates how to add new email style settings that the email preview listens for changes. It uses the 'woocommerce_email_preview_email_style_setting_ids' filter to append a custom setting ID to the list.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_email_preview_email_style_setting_ids', function( $setting_ids ) {\n    $setting_ids[] = 'my_extension_email_style';\n    return $setting_ids;\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Packages (Bash)\nDESCRIPTION: This command updates the installed PHP packages to their latest allowed versions according to the constraints specified in `composer.json`. It also updates the `composer.lock` file to reflect the newly installed versions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Product Attribute for WooCommerce Menus in PHP\nDESCRIPTION: Demonstrates how to add a filter to make a specific product attribute (in this case 'size') available in WordPress navigation menus. The function checks if the attribute is 'pa_size' and if so, returns true to register it for menu use.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/using-custom-attributes-in-menus.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_attribute_show_in_nav_menus', 'wc_reg_for_menus', 1, 2);\n\nfunction wc_reg_for_menus( $register, $name = '' ) {\nif ( $name == 'pa_size' ) $register = true;\nreturn $register;\n}\n```\n\n----------------------------------------\n\nTITLE: Clicking and Waiting for Selector in JavaScript\nDESCRIPTION: This function clicks a button and waits for a response. It takes parameters for the button selector, result selector, and timeout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_43\n\nLANGUAGE: JavaScript\nCODE:\n```\nclickAndWaitForSelector(buttonSelector, resultSelector, timeout)\n```\n\n----------------------------------------\n\nTITLE: Downloading Remote Plugin Zip using getRemotePluginZip\nDESCRIPTION: Provides an example of using the asynchronous `getRemotePluginZip` function within E2E tests to download a plugin zip file from a specified URL. This example downloads the WooCommerce trunk nightly build zip. The function handles potential nested zips and returns the local filesystem path to the downloaded (and potentially extracted) zip file, ready for use in tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst pluginZipUrl = 'https://github.com/woocommerce/woocommerce/releases/download/nightly/woocommerce-trunk-nightly.zip';\nawait getRemotePluginZip( pluginZipUrl );\n```\n\n----------------------------------------\n\nTITLE: Implementing 'contains' Operation for Onboarding Profile Rule in JSON\nDESCRIPTION: This snippet demonstrates how to use the 'contains' operation to check if a specific value is present in the onboarding profile's product types array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"onboarding_profile\",\n\t\"index\": \"product_types\",\n\t\"operation\": \"contains\",\n\t\"value\": \"physical\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Rates from WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to get available shipping rates from the WooCommerce cart store. Returns an array of shipping rate objects containing ID, label, cost, package ID, metadata, and taxes information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_24\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst shippingRates = store.getShippingRates();\n```\n\n----------------------------------------\n\nTITLE: Conditionally Disabling a Block in Product Editor Templates in PHP\nDESCRIPTION: This snippet demonstrates how to conditionally disable a block in product editor templates. It adds a disable condition to the sale price block if the regular price is not set.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/Features/ProductBlockEditor/ProductTemplates/README.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n\n// disable sale price block if regular_price is not set\nfunction YOUR_PREFIX_hide_block( BlockInterface $sale_price_block ) {\n  $sale_price_block->add_disable_condition( '!editedProduct.regular_price' );\n}\n\nadd_action( 'woocommerce_block_template_area_product-form_after_add_block_product-sale-price', 'YOUR_PREFIX_hide_block' );\n```\n\n----------------------------------------\n\nTITLE: Starting WP-ENV Test Environment\nDESCRIPTION: Commands for starting the wp-env testing environment and setting up test data\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd plugins/woocommerce/client/blocks/\npnpm env:start\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Customer Data\nDESCRIPTION: Example of retrieving customer information using WooCommerce CRUD objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$customer = new WC_Customer( $user_id );\n$email    = $customer->get_email();\n$address  = $customer->get_billing_address();\n$name     = $customer->get_first_name() . ' ' . $customer->get_last_name();\n```\n\n----------------------------------------\n\nTITLE: Displaying Product Average Rating with React (JSX)\nDESCRIPTION: This snippet shows the usage of the `ProductRating` component. It requires a `product` object prop, which must contain an `average_rating` property, typically fetched from the WooCommerce API. The component then renders the corresponding star rating.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/rating/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Use a real WooCommerce Product here.\nconst product = { average_rating: 3.5 };\n\n<ProductRating product={ product } />\n```\n\n----------------------------------------\n\nTITLE: Accessing WooCommerce Checkout Components in JavaScript\nDESCRIPTION: Demonstrates how to access the WooCommerce Checkout package components via the global 'wc' object. This is the standard method for using the package when the WooCommerce Blocks Feature Plugin is installed and activated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { ... } = wc.blocksCheckout;\n```\n\n----------------------------------------\n\nTITLE: Enhancing Product Elements Block Settings in WooCommerce Blocks\nDESCRIPTION: This update improves the block settings for Product Elements, allowing customization of typography, colors, dimensions, and other visual aspects for Product Price, Product Button, and Product Rating elements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/911.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n/* No specific code provided, but CSS changes affect Product Elements styling */\n```\n\n----------------------------------------\n\nTITLE: Success Notice with Check Icon and Action Buttons\nDESCRIPTION: An example of a success notice with a check icon, formatted text, and action buttons. This implementation shows how to create a confirmation message with additional interaction options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/components/notice/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Notice\n\tid=\"success-notice\"\n\tvariant=\"success\"\n\tdescription={ __(\n\t\t'<strong>Congratulations</strong> You successfully installed the plugin.',\n\t\t'woocommerce'\n\t) }\n\ticon=\"check\"\n\tisDismissible\n>\n\t<Button\n\t\tvariant=\"secondary\"\n\t\tonClick={ () => {\n\t\t\tconsole.log( 'Primary button clicked' );\n\t\t} }\n\t\ttext=\"Label\"\n\t/>\n\t<Button\n\t\tvariant=\"tertiary\"\n\t\tonClick={ () => {\n\t\t\tconsole.log( 'Secondary button clicked' );\n\t\t} }\n\t\ttext=\"Label\"\n\t/>\n</Notice>\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Checkout Fields from Object in PHP\nDESCRIPTION: Example of accessing all additional fields saved to an order or customer object using helper methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Blocks\\Package;\nuse Automattic\\WooCommerce\\Blocks\\Domain\\Services\\CheckoutFields;\n\n$order = wc_get_order( 1234 );\n$checkout_fields = Package::container()->get( CheckoutFields::class );\n$order_additional_billing_fields = $checkout_fields->get_all_fields_from_object( $order, 'billing' );\n$order_additional_shipping_fields = $checkout_fields->get_all_fields_from_object( $order, 'shipping' );\n$order_other_additional_fields = $checkout_fields->get_all_fields_from_object( $order, 'other' );\n```\n\n----------------------------------------\n\nTITLE: Defining array_column Transformer (PHP)\nDESCRIPTION: Shows how to define the array_column transformer in PHP. This transformer uses PHP's built-in array_column function to select values from a single column of input array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_column\",\n        \"arguments\": {\n            \"key\": \"industry\"\n        }\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Setting up WooCommerce Test Environment using WP-CLI\nDESCRIPTION: This shell script uses WP-CLI commands to automate the setup of a WordPress and WooCommerce environment for testing purposes. It configures the database connection, installs WordPress core, activates necessary plugins (including a specific version of WooCommerce and the importer), imports sample product data, and updates WooCommerce. This setup is intended to test fixes related to inconsistent template behavior in new installations with block themes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1092.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nwp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --dbhost=db  --force\nwp core install --url=http://localhost --title='WP Staging' --admin_user=admin --admin_password=pass --admin_email=admin@wp.loc\nwp option set blog_public 0\nwp plugin activate woocommerce-blocks\nwp plugin install woocommerce --version=6.0.0\nwp plugin activate woocommerce\nwp plugin install wordpress-importer --activate\nwp import ./wp-content/plugins/woocommerce/sample-data/sample_products.xml --authors=skip\nwp plugin update woocommerce\n```\n\n----------------------------------------\n\nTITLE: Passing Query Strings to Request Utility (JavaScript)\nDESCRIPTION: Demonstrates how to pass query string parameters to the API endpoint using the `getRequest` utility function. Query parameters are provided as a JavaScript object where keys represent parameter names and values represent their values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { getRequest } = require('./utils/request');\n\nconst queryString = {\n  dates_are_gmt: true,\n  after: '2021-05-13T19:00:00',\n  before: '2021-05-13T22:00:00'\n};\n\nconst response = await getRequest('/orders', queryString);\n```\n\n----------------------------------------\n\nTITLE: Default Jest Puppeteer Launch Configuration Examples\nDESCRIPTION: Provides examples of the default Puppeteer launch configurations (`puppeteerConfig`) used by the E2E environment. It shows distinct configurations for standard headless mode (using 'incognito' browser context) and development mode (setting `headless` to false, configuring window size, user agent, devtools, and viewport).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// headless\n\tpuppeteerConfig = {\n\t\tlaunch: {\n\t\t\t// Required for the logged out and logged in tests so they don't share app state/token.\n\t\t\tbrowserContext: 'incognito',\n\t\t},\n\t};\n// dev mode\n\tpuppeteerConfig = {\n\t\tlaunch: {\n\t\t\t...jestPuppeteerConfig.launch, // @automattic/puppeteer-utils\n\t\t\tignoreHTTPSErrors: true,\n\t\t\theadless: false,\n\t\t\targs: [ '--window-size=1920,1080', '--user-agent=chrome' ],\n\t\t\tdevtools: true,\n\t\t\tdefaultViewport: {\n\t\t\t\twidth: 1280,\n\t\t\t\theight: 800,\n\t\t\t},\n\t\t},\n\t};\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Groups in WooCommerce Tests\nDESCRIPTION: Groups are used to organize related test logic, such as grouping multiple requests under 'Proceed to checkout' for better test result analysis.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n\"Proceed to checkout\"\n```\n\n----------------------------------------\n\nTITLE: Using getState Selector in WooCommerce Payment Store\nDESCRIPTION: Example showing how to use the getState selector to retrieve the current state of the payment store. This selector should primarily be used for testing purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst currentState = store.getState();\n```\n\n----------------------------------------\n\nTITLE: Introducing New WooCommerce Store API Hook (PHP)\nDESCRIPTION: This code introduces a new hook 'woocommerce_store_api_add_to_cart_data' in the WooCommerce Store API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/readme.txt#2025-04-23_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nStore API: Introduced `woocommerce_store_api_add_to_cart_data` hook.\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Order Data Synchronization in PHP for WooCommerce HPOS\nDESCRIPTION: This snippet demonstrates how to programmatically trigger manual synchronization between the authoritative and backup order tables in WooCommerce's High Performance Order Storage system. It retrieves the DataSynchronizer from the WooCommerce container, gets a batch of orders needing synchronization, and processes them.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$synchronizer = wc_get_container()->get(Automattic\\WooCommerce\\Internal\\DataStores\\Orders\\DataSynchronizer::class);\n$order_ids = $synchronizer->get_next_batch_to_process( $batch_size );\nif ( count( $order_ids ) ) {\n\t$synchronizer->process_batch( $order_ids );\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Related Products in PHP\nDESCRIPTION: Retrieves related products for a given product based on its categories and tags. Can limit results and exclude specific product IDs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nwc_get_related_products( $product_id, $limit = 5, $exclude_ids = array() )\n```\n\n----------------------------------------\n\nTITLE: Removing Console Message Suppression in Jest Setup\nDESCRIPTION: Shows how to remove a previously added console message suppression rule using the `removeConsoleSuppression` function within a Jest setup script. The `searchString` parameter must exactly match the string that was originally passed to `addConsoleSuppression`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nremoveConsoleSuppression( 'suppress this after the first instance' );\n```\n\n----------------------------------------\n\nTITLE: Running WooCommerce Monorepo Utils CLI\nDESCRIPTION: Command to display available utility commands from the project root. This command is built during postinstall and provides access to monorepo management tools.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils\n```\n\n----------------------------------------\n\nTITLE: Accessing Setting Values in WooCommerce Extensions\nDESCRIPTION: Retrieving values from the settings array into class properties. This makes the settings accessible throughout your class for use in various methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Define user set variables\n$this->title       = $this->settings['title'];\n$this->description = $this->settings['description'];\n```\n\n----------------------------------------\n\nTITLE: CSS Class Name Replacements Example\nDESCRIPTION: Example of how derived class names are updated following the new naming convention. When a base class is changed, all related classes following the same pattern are also updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/class-names-update-280.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n/* Old classes */\nwc-block-address-form__company\nwc-block-address-form__address_1\n\n/* New classes */\nwc-block-components-address-form__company\nwc-block-components-address-form__address_1\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Coupon Data Structure\nDESCRIPTION: Example of protected data array structure for a WooCommerce coupon object, showing default values and supported properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected $data = array(\n\t'code'                        => '',\n\t'amount'                      => 0,\n\t'date_created'                => '',\n\t'date_modified'               => '',\n\t'discount_type'               => 'fixed_cart',\n\t'description'                 => '',\n\t'date_expires'                => '',\n\t'usage_count'                 => 0,\n\t'individual_use'              => false,\n\t'product_ids'                 => array(),\n\t'excluded_product_ids'        => array(),\n\t'usage_limit'                 => 0,\n\t'usage_limit_per_user'        => 0,\n\t'limit_usage_to_x_items'      => 0,\n\t'free_shipping'               => false,\n\t'product_categories'          => array(),\n\t'excluded_product_categories' => array(),\n\t'exclude_sale_items'          => false,\n\t'minimum_amount'              => '',\n\t'maximum_amount'              => '',\n\t'email_restrictions'          => array(),\n\t'used_by'                     => array(),\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Product List Rendered Event in WooCommerce\nDESCRIPTION: Example of listening to the wc-blocks_product_list_rendered event that fires when a Product Collection block is rendered or re-rendered. The event provides collection type information in the detail parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/dom-events.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.document.addEventListener(\n  'wc-blocks_product_list_rendered',\n  ( e ) => {\n    const { collection } = e.detail;\n    console.log( collection ) // -> collection name, e.g. woocommerce/product-collection/on-sale\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Endpoint URL in PHP\nDESCRIPTION: Retrieves the URL for a specific endpoint, which varies based on permalink settings. Can include value and custom permalink parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nwc_get_endpoint_url( $endpoint, $value = '', $permalink = '' )\n```\n\n----------------------------------------\n\nTITLE: Displaying Timeline Data with React Timeline Component (JSX)\nDESCRIPTION: This code demonstrates how to import and use a Timeline component in a React project to display a series of events. The snippet defines an array of item objects, each representing an event with a date, icon, headline, and additional details, then renders the Timeline with configurable grouping and ordering using 'groupByOptions' and 'orderByOptions'. Required dependencies include React, the Timeline component, icon components, and enum options for sorting and grouping. Inputs include the items array and optional props for ordering and grouping; outputs are rendered timeline elements based on provided data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/timeline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Timeline from './Timeline';\nimport { orderByOptions, groupByOptions } from './Timeline';\nimport GridIcon from 'gridicons';\n\nconst items = [\n  {\n    date: new Date( 2019, 9, 28, 9, 0 ),\n    icon: <GridIcon icon={ 'checkmark' } />,\n    headline: 'A payment of $90.00 was successfully charged',\n    body: [\n      <p key={ '1' }>{ 'Fee: $2.91 ( 2.9% + $0.30 )' }</p>,\n      <p key={ '2' }>{ 'Net deposit: $87.09' }</p>,\n    ],\n  },\n  {\n    date: new Date( 2019, 9, 28, 9, 32 ),\n    icon: <GridIcon icon={ 'plus' } />,\n    headline: '$94.16 was added to your October 29, 2019 deposit',\n    body: [],\n  },\n  {\n    date: new Date( 2019, 9, 27, 20, 9 ),\n    icon: <GridIcon icon={ 'checkmark' } className={ 'is-success' } />,\n    headline: 'A payment of $90.00 was successfully authorized',\n    body: [],\n  },\n]\n\n<Timeline\n  items={ items }\n  groupBy={ groupByOptions.DAY }\n  orderBy={ orderByOptions.ASC }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Class in /src Directory\nDESCRIPTION: Example of defining a PHP class in the /src directory following PSR-4 standard. The class is named using CamelCase and placed in the appropriate namespace.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/naming-conventions.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace Automattic\\WooCommerce\\Util;\n\nclass StringUtil {\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Function Mocks in WooCommerce Unit Tests\nDESCRIPTION: Example of how to register function mocks in unit tests using the WC_Unit_Test_Case helper methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n$this->register_legacy_proxy_function_mocks(\n array(\n  'the_function_name' => function( $param1, $param2 ) {\n   return \"I'm the mock of the_function_name and I was invoked with $param1 and $param2.\";\n  },\n )\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Story Template Function in React\nDESCRIPTION: This snippet shows how to create a template function for a Storybook story. The template renders the component with all provided arguments, allowing for easy creation of multiple stories with different props.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst Template: Story< MyComponentProps > = ( args ) => (\n\t<MyComponent { ...args } />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Panel Inbox Notes in a WooCommerce Extension\nDESCRIPTION: This PHP example demonstrates how to create a WooCommerce extension that adds a welcome note to the Activity Panel Inbox upon activation and removes it on deactivation. It shows the proper way to use the Notes API, including setting content, actions, and following best practices.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/activity-panel-inbox.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: WooCommerce Activity Panel Inbox Example Plugin One\n * Plugin URI: https://woocommerce.com/\n * Description: An example plugin.\n * Author: Automattic\n * Author URI: https://woocommerce.com/\n * Text Domain: wapi-example-one\n * Version: 1.0.1\n */\n\nuse Automattic\\WooCommerce\\Admin\\Notes\\Notes as Notes;\nuse Automattic\\WooCommerce\\Admin\\Notes\\Note as Note;\n\nclass WooCommerce_Activity_Panel_Inbox_Example_Plugin_One {\n\tconst NOTE_NAME = 'wapi-example-plugin-one';\n\n\t/**\n\t * Adds a note to the merchant' inbox.\n\t */\n\tpublic static function add_activity_panel_inbox_welcome_note() {\n\t\tif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! class_exists( 'WC_Data_Store' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$data_store = WC_Data_Store::load( 'admin-note' );\n\n\t\t// First, see if we've already created this kind of note so we don't do it again.\n\t\t$note_ids = $data_store->get_notes_with_name( self::NOTE_NAME );\n\t\tforeach( (array) $note_ids as $note_id ) {\n\t\t\t$note         = Notes::get_note( $note_id );\n\t\t\t$content_data = $note->get_content_data();\n \t\t\tif ( property_exists( $content_data, 'getting_started' ) ) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise, add the note\n\t\t$activated_time = current_time( 'timestamp', 0 );\n\t\t$activated_time_formatted = date( 'F jS', $activated_time );\n\t\t$note = new Note();\n\t\t$note->set_title( __( 'Getting Started', 'wapi-example-plugin-one' ) );\n\t\t$note->set_content(\n\t\t\tsprintf(\n\t\t\t\t/* translators: a date, e.g. November 1st */\n\t\t\t\t__( 'Plugin activated on %s.', 'wapi-example-plugin-one' ),\n\t\t\t\t$activated_time_formatted\n\t\t\t)\n\t\t);\n\t\t$note->set_content_data( (object) array(\n\t\t\t'getting_started'     => true,\n\t\t\t'activated'           => $activated_time,\n\t\t\t'activated_formatted' => $activated_time_formatted,\n\t\t) );\n\t\t$note->set_type( Note::E_WC_ADMIN_NOTE_INFORMATIONAL );\n\t\t$note->set_name( self::NOTE_NAME );\n\t\t$note->set_source( 'wapi-example-plugin-one' );\n\t\t$note->set_layout('plain');\n\t\t$note->set_image('');\n\t\t// This example has two actions. A note can have 0 or 1 as well.\n\t\t$note->add_action(\n\t\t\t'settings',\n\t\t\t__( 'Open Settings', 'wapi-example-plugin-one' ),\n\t\t\t'?page=wc-settings&tab=general'\n\t\t);\n\t\t$note->add_action(\n\t\t\t'settings',\n\t\t\t__( 'Learn More', 'wapi-example-plugin-one' ),\n\t\t\t'https://github.com/woocommerce/woocommerce-admin/tree/main/docs'\n\t\t);\n\t\t$note->save();\n\t}\n\n\t/**\n\t * Removes any notes this plugin created.\n\t */\n\tpublic static function remove_activity_panel_inbox_notes() {\n\t\tif ( ! class_exists( 'Automattic\\WooCommerce\\Admin\\Notes\\Notes' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tNotes::delete_notes_with_name( self::NOTE_NAME );\n\t}\n}\n\nfunction wapi_example_one_activate() {\n\tWooCommerce_Activity_Panel_Inbox_Example_Plugin_One::add_activity_panel_inbox_welcome_note();\n}\nregister_activation_hook( __FILE__, 'wapi_example_one_activate' );\n\nfunction wapi_example_one_deactivate() {\n\tWooCommerce_Activity_Panel_Inbox_Example_Plugin_One::remove_activity_panel_inbox_notes();\n}\nregister_deactivation_hook( __FILE__, 'wapi_example_one_deactivate' );\n\n```\n\n----------------------------------------\n\nTITLE: Using WooCommerce CLI to Manage Product Attribute Terms\nDESCRIPTION: Command for deleting product attribute terms through the WooCommerce CLI. Requires attribute_id and optionally an id parameter to identify the specific term to delete.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_30\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute_term delete <attribute_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Rendering the BlockIcon Component in React\nDESCRIPTION: Demonstrates how to use the BlockIcon component within a block's Edit function in React. The component requires passing the clientId prop to identify which block's icon to display.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-icon/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { __experimentalBlockIcon as BlockIcon } from '@woocommerce/product-editor';\n\nexport function BlockEdit( { clientId } ) {\n\tconst blockProps = useBlockProps();\n\n\treturn (\n\t\t<div { ...blockProps }>\n\t\t\t<h2>\n\t\t\t\t<BlockIcon clientId={ clientId } />\n\n\t\t\t\t<span>{ title }</span>\n\t\t\t</h2>\n\n\t\t\t<InnerBlocks />\n\t\t</div>\n\t);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Request to List Cart Coupons (Shell/cURL)\nDESCRIPTION: Provides a sample cURL command to make a GET request to the `/cart/coupons` endpoint of the WooCommerce Store API. This retrieves all coupons currently applied to the cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/cart/coupons\"\n```\n\n----------------------------------------\n\nTITLE: Enabling PayPal Standard in WooCommerce using PHP\nDESCRIPTION: This PHP code snippet adds a filter to enable the PayPal Standard payment method in WooCommerce, which is typically used for testing purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/920.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_should_load_paypal_standard', '__return_true' );\n```\n\n----------------------------------------\n\nTITLE: Defining Remote Data Source Schema for Payment Gateway Suggestions in JSON\nDESCRIPTION: This JSON schema defines the structure for recommended payment gateways, including key, title, content, image, required plugins, and visibility rules. It's used to provide the minimum information needed to display a list of gateways and initiate their setup process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/payment-gateway-suggestions.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"key\": \"gateway-key\",\n    \"title\": \"Gateway Example\",\n    \"content\": \"Content to be displayed in the recommended payment gateway list.\",\n    \"image\": \"https://paymentgateway.com/path/to/image.png\",\n    \"plugins\": [\"wp-org-plugin-slug\"],\n    \"is_visible\": [\n      <Rule>,\n      ...\n    ]\n  }\n  ...\n]\n```\n\n----------------------------------------\n\nTITLE: Basic JSON Schema Structure for Conditional Field Logic (JSON)\nDESCRIPTION: This JSON snippet illustrates the basic structure of a JSON Schema object used within WooCommerce Blocks for conditional field logic. It defines an object type with a property `fieldId` that must be one of the specified values (`value1`, `value2`) and is required. This schema is evaluated against the cart/checkout state to dynamically control field properties like visibility or validation rules based on other field values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"fieldId\": {\n      \"enum\": [\"value1\", \"value2\"]\n    }\n  },\n  \"required\": [\"fieldId\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Autoloader Class Maps (Bash)\nDESCRIPTION: This command regenerates Composer's autoloader class maps. It should be run after adding new classes to the WooCommerce `src` directory to ensure they are discoverable by the autoloader.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer dump-autoload\n```\n\n----------------------------------------\n\nTITLE: Importing and Mapping Icons Gallery in React\nDESCRIPTION: Imports icon gallery components from Storybook and maps through all available icons to display them in a gallery format. Uses Object.entries to iterate through the icon collection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/icons/docs/iconography.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Meta, Title, IconGallery, IconItem } from '@storybook/blocks';\nimport * as icons from '../index';\n\n<Meta title=\"Icons/Icon Library\" />\n\n<IconGallery>\n\t{ Object.entries( icons ).map( ( [ name, icon ] ) => {\n\t\treturn (\n\t\t\t<IconItem key={ name } name={ name }>\n\t\t\t\t{ typeof icon === 'function' ? icon( {} ) : icon }\n\t\t\t</IconItem>\n\t\t);\n\t} ) }\n</IconGallery>\n```\n\n----------------------------------------\n\nTITLE: Defining Global JavaScript Function\nDESCRIPTION: Example of defining a global JavaScript function. The function name is prefixed with wc and uses camelCase convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/naming-conventions.md#2025-04-23_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction wcSettings() {\n    // Function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest for E2E Testing in JavaScript\nDESCRIPTION: Shows how to configure Jest in `tests/e2e/config/jest.config.js` using `useE2EJestConfig` and `resolveLocalE2ePath` from `@woocommerce/e2e-environment`. This configuration is necessary for Jest to find and execute the project's E2E test files, typically located in a specified `roots` directory like `tests/e2e/specs`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require( 'path' );\nconst { useE2EJestConfig, resolveLocalE2ePath } = require( '@woocommerce/e2e-environment' );\n\nconst jestConfig = useE2EJestConfig( {\n\troots: [ resolveLocalE2ePath( 'specs' ) ],\n} );\n\nmodule.exports = jestConfig;\n```\n\n----------------------------------------\n\nTITLE: Disabling Package Lock for npm (\\.npmrc) - Text\nDESCRIPTION: This snippet represents the contents of the .npmrc configuration file for a new WooCommerce package. Setting 'package-lock=false' disables the automatic generation of package-lock.json files within the package, enforcing consistency across the monorepo. Requires npm to recognize .npmrc, and removing the lock file reduces extraneous files checked into source control.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/README.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npackage-lock=false\n```\n\n----------------------------------------\n\nTITLE: Overriding WooCommerce Cart Submit Container Shadow\nDESCRIPTION: CSS to completely override the box-shadow property of the Cart submit container, providing full control over the shadow appearance.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/cart-and-checkout.md#2025-04-23_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-cart__submit-container::before {\n\tbox-shadow: 0 -10px 20px 10px rgba( 214, 209, 203, 0.5 );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Block Component Buttons with CSS\nDESCRIPTION: CSS snippet for styling the WooCommerce button component with custom colors. This example changes the background color and text color, but additional rules can be added for border, shadow, and other states.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/cart-and-checkout.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-button {\n\tbackground-color: #d5502f;\n\tcolor: #fff;\n\t/* More rules can be added to modify the border, shadow, etc. */\n}\n/* It might be needed to modify the hover, focus, active and disabled states too */\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for E2E Testing in JavaScript\nDESCRIPTION: Shows how to extend the project's `babel.config.js` file using the `useE2EBabelConfig` function from `@woocommerce/e2e-environment`. This ensures Babel is correctly configured for E2E tests. It requires `@babel/preset-env` to be installed and integrates with existing presets like `@wordpress/babel-preset-default`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useE2EBabelConfig } = require( '@woocommerce/e2e-environment' );\n\nmodule.exports = function( api ) {\n\tapi.cache( true );\n\n\treturn useE2EBabelConfig( {\n\t\tpresets: [\n\t\t\t'@wordpress/babel-preset-default',\n\t\t],\n\t} );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Collection Preferences in WooCommerce Checkout\nDESCRIPTION: Example showing how to set customer collection preferences in the checkout store using dispatch.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( checkoutStore );\nstore.setPrefersCollection( true );\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Taxonomy to WooCommerce REST API for Product Taxonomy Field\nDESCRIPTION: This snippet demonstrates how to add an already registered custom taxonomy to the WooCommerce REST API, enabling it to work with the product-taxonomy-field block. It includes functions to prepare the taxonomy data for API responses and handle taxonomy updates when creating or updating products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/taxonomy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction YOUR_PREFIX_rest_api_prepare_custom1_to_product( $response, $post ) {\n\t$post_id = $post->get_id();\n\n\tif ( empty( $response->data[ 'custom1' ] ) ) {\n\t\t$terms = [];\n\n\t\tforeach ( wp_get_post_terms( $post_id, 'custom-taxonomy' ) as $term ) {\n\t\t\t$terms[] = [\n\t\t\t\t'id'   => $term->term_id,\n\t\t\t\t'name' => $term->name,\n\t\t\t\t'slug' => $term->slug,\n\t\t\t];\n\t\t}\n\n\t\t$response->data[ 'custom1' ] = $terms;\n\t}\n\n\treturn $response;\n}\n\nadd_filter( 'woocommerce_rest_prepare_product_object', 'YOUR_PREFIX_rest_api_prepare_custom1_to_product', 10, 2 );\n\nfunction YOUR_PREFIX_rest_api_add_custom1_to_product( $product, $request, $creating = true ) {\n\t$product_id = $product->get_id();\n\t$params     = $request->get_params();\n\t$custom1s     = isset( $params['custom1'] ) ? $params['custom1'] : array();\n\n\tif ( ! empty( $custom1s ) ) {\n\t\tif ( $custom1s[0]['id'] ) {\n\t\t\t$custom1s = array_map(\n\t\t\t\tfunction ( $custom1 ) {\n\t\t\t\t\treturn absint( $custom1['id'] );\n\t\t\t\t},\n\t\t\t\t$custom1s\n\t\t\t);\n\t\t} else {\n\t\t\t$custom1s = array_map( 'absint', $custom1s );\n\t\t}\n\t\twp_set_object_terms( $product_id, $custom1s, 'custom-taxonomy' );\n\t}\n}\n\nadd_filter( 'woocommerce_rest_insert_product_object', 'YOUR_PREFIX_rest_api_add_custom1_to_product', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Disabling HPOS Synchronization on Read with WordPress Filter\nDESCRIPTION: This PHP snippet disables synchronization on read for HPOS, which improves performance by preventing unnecessary data synchronization between the posts table and HPOS tables when reading order data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/guide-large-store.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_hpos_enable_sync_on_read', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Getting Attribute Taxonomy Name in PHP\nDESCRIPTION: Converts a product attribute name to its corresponding taxonomy name.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nwc_attribute_taxonomy_name( $attribute_name )\n```\n\n----------------------------------------\n\nTITLE: HTML Named References Example in WooCommerce Content\nDESCRIPTION: Demonstrates the use of HTML named references to create HTML-like tags when direct HTML is not allowed due to stripping of non-allowlisted elements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/contributing-docs.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n&lt; &gt;\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Email Order Details Hook Example\nDESCRIPTION: Example of a hook implementation in the admin-new-order.php template that controls the order details section of the New Order email notification.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/template-structure.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/*\n * @hooked WC_Emails::order_details() Shows the order details table.\n * @hooked WC_Structured_Data::generate_order_data() Generates structured data.\n * @hooked WC_Structured_Data::output_structured_data() Outputs structured data.\n * @since 2.5.0\n */\ndo_action( 'woocommerce_email_order_details', $order, $sent_to_admin, $plain_text, $email );\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Reviews in WooCommerce CLI\nDESCRIPTION: Command for deleting product reviews by product_id and review ID with optional force parameter to bypass trash.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_45\n\nLANGUAGE: bash\nCODE:\n```\nwc product_review delete <product_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Link\nDESCRIPTION: Documentation reference path for the WooCommerce validation store implementation details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/data/validation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Validation Store\n\nThe docs for the Validation Store can be found in [docs/third-party-developers/extensibility/data-store/validation.md](../../../../docs/third-party-developers/extensibility/data-store/validation.md).\n```\n\n----------------------------------------\n\nTITLE: Implementing WooCommerce Tag Component Examples in JSX\nDESCRIPTION: Demonstrates three different implementations of the Tag component: a basic tag, a removable tag, and a tag with popover content. The examples show how to use different props to achieve various functionalities.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/editor-components/tag/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Tag label=\"My tag\" id={ 1 } />\n<Tag label=\"Removable tag\" id={ 2 } remove={ noop } />\n<Tag label=\"Tag with popover\" popoverContents={ ( <p>This is a popover</p> ) } />\n```\n\n----------------------------------------\n\nTITLE: Integrating DropdownButton with Dropdown Component in React\nDESCRIPTION: This JSX snippet demonstrates integrating the `DropdownButton` as the trigger within a `Dropdown` component. It utilizes the `renderToggle` prop to pass the `isOpen` state and `onToggle` handler to `DropdownButton`, and sets the button's text content using the `labels` prop. The `DropdownButton` itself is designed to occupy the full width of its container and display provided labels.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/dropdown-button/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Dropdown\n\trenderToggle={ ( { isOpen, onToggle } ) => (\n\t\t<DropdownButton\n\t\t\tonClick={ onToggle }\n\t\t\tisOpen={ isOpen }\n\t\t\tlabels={ [ 'All products Sold' ] }\n\t\t/>\n\t) }\n\trenderContent={ () => (\n\t\t<p>Dropdown content here</p>\n\t) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Coupon API Routes and Test Paths\nDESCRIPTION: Table listing coupon-related API endpoints and their test file locations. Includes routes for creating, updating, deleting, and applying coupons to orders.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/api-critical-flows.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Route   | Flow name                 | Endpoints                            | Test File                                            |\n|---------|---------------------------|--------------------------------------|------------------------------------------------------|\n| Coupons | Can create a coupon       | `/wp-json/wc/v3/coupons`             | `tests/api-core-tests/tests/coupons/coupons.test.js` |\n| Coupons | Can update a coupon       | `/wp-json/wc/v3/coupons/{id}`        | `tests/api-core-tests/tests/coupons/coupons.test.js` |\n| Coupons | Can delete a coupon       | `/wp-json/wc/v3/coupons/{id}`        | `tests/api-core-tests/tests/coupons/coupons.test.js` |\n| Coupons | Can add a coupon to order | `/wp-json/wc/v3/orders/{id}/coupons` | `tests/api-core-tests/tests/coupons/coupons.test.js` |\n```\n\n----------------------------------------\n\nTITLE: Configuring Jest to Mock @woocommerce/settings (JavaScript)\nDESCRIPTION: Provides a Jest configuration snippet demonstrating how to resolve the '@woocommerce/settings' module resolution error during testing. It uses `moduleNameMapper` to point the alias to a mock file and `setupFiles` to define global mocks like `window.wcSettings` before tests run. Requires creating the specified mock files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  moduleNameMapper: {\n    '@woocommerce/settings': path.resolve(\n      __dirname,\n      './mock/woocommerce-settings'\n    ),\n  }\n  setupFiles: [\n    path.resolve( __dirname, 'build/setup-globals.js' ),\n  ],\n  // ...other config\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Currency Query Parameters in WooCommerce\nDESCRIPTION: PHP function to add the currency query argument to WooCommerce analytics queries for proper caching.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction apply_currency_arg( $args ) {\n\t$currency = 'USD';\n\n\tif ( isset( $_GET['currency'] ) ) {\n\t\t$currency = sanitize_text_field( wp_unslash( $_GET['currency'] ) );\n\t}\n\n\t$args['currency'] = $currency;\n\n\treturn $args;\n}\n\nadd_filter( 'woocommerce_analytics_orders_query_args', 'apply_currency_arg' );\nadd_filter( 'woocommerce_analytics_orders_stats_query_args', 'apply_currency_arg' );\n```\n\n----------------------------------------\n\nTITLE: Error Object Structure Example\nDESCRIPTION: Shows the structure of validation error objects returned when validation fails, including message, context, and validatorId.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/contexts/validation-context/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ message: 'Product name is required.'; context: [block id]; validatorId: [prefix + block id] }\n```\n\n----------------------------------------\n\nTITLE: Checking WooCommerce CLI Availability - Bash\nDESCRIPTION: This snippet checks if WooCommerce CLI is available by invoking the 'wp wc --info' command. It requires WP-CLI to be installed alongside WooCommerce version 3.0.0 or above. The command outputs diagnostic information about the current WC-CLI installation and environment, which can help verify that your setup is ready for command-line management of WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp wc --info\n```\n\n----------------------------------------\n\nTITLE: Setting Checkbox in JavaScript\nDESCRIPTION: This function checks a checkbox. It takes the selector of the checkbox as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_28\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetCheckbox(selector)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Exporter Class in PHP\nDESCRIPTION: This snippet shows how to create a custom exporter class that extends StepExporter. It includes the basic structure with export and get_step_name methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Automattic\\WooCommerce\\Blueprint\\Exporters\\StepExporter;\nuse Automattic\\WooCommerce\\Blueprint\\Steps\\Step;\n\nclass MyCustomExporter extends StepExporter {\n    public function export( array $data ): Step {\n       \n    }\n    \n    public function get_step_name() {\n        return 'setSiteOptions';\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Slot Component with fillProps in WooCommerce Blocks\nDESCRIPTION: Shows how to customize the Slot component by passing fillProps, which are then passed to all Fill implementations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/slot/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n// Aliased import\nimport { createSlotFill } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { createSlotFill } = wc.blocksCheckout;\n\nconst slotName = '__experimentalSlotName';\n\nconst { Fill: FillComponent, Slot: SlotComponent } = createSlotFill(\n\tslotName\n);\n\nconst Slot = ( { className } ) => {\n\treturn (\n\t\t<SlotComponent\n\t\t\tclassName={ 'my-slot-component' }\n\t\t\tfillProps={ { // ...custom data goes here and is passed to all fills } }\n\t\t/>\n\t);\n};\n\n// Assign your Slot to your Fill.\nFillComponent.Slot = Slot;\n\nexport default FillComponent;\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting Options in PHP\nDESCRIPTION: PHP filter implementation to configure rate limiting options including enable/disable status, proxy support, request limits, and timeframe settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/rate-limiting.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_store_api_rate_limit_options', function() {\n\treturn [\n\t\t'enabled' => false, // enables/disables Rate Limiting. Default: false\n\t\t'proxy_support' => false, // enables/disables Proxy support. Default: false\n\t\t'limit' => 25, // limit of request per timeframe. Default: 25\n\t\t'seconds' => 10, // timeframe in seconds. Default: 10\n\t];\n} );\n```\n\n----------------------------------------\n\nTITLE: Scaffolding a WooCommerce Extension via @woocommerce/create-woo-extension (Bash)\nDESCRIPTION: This snippet demonstrates how to initialize a new WooCommerce extension project with the @wordpress/create-block command-line tool, specifying @woocommerce/create-woo-extension as the template and providing a custom extension name. It requires Node.js and npm to be installed and assumes network access to fetch the template from npm. The key parameters are the template (-t) and the target folder name. The output is a newly created directory preconfigured for WooCommerce extension development.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-woo-extension/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block -t @woocommerce/create-woo-extension my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Verifying Order Creation in Checkout Store using JavaScript\nDESCRIPTION: Demonstrates how to check if a draft order has been created using the hasOrder selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst hasOrder = store.hasOrder();\n```\n\n----------------------------------------\n\nTITLE: Sale Badge Price Format Modification\nDESCRIPTION: Implementation of saleBadgePriceFormat filter to modify how sale prices are displayed in the cart, adding 'per item' text after the price.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifySaleBadgePriceFormat = (\n\tdefaultValue,\n\textensions,\n\targs,\n\tvalidation\n) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn '&lt;price/&gt; per item';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tsaleBadgePriceFormat: modifySaleBadgePriceFormat,\n} );\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Field Meta Values Directly in PHP\nDESCRIPTION: Example of directly accessing checkout field meta values using key construction.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$key      = CheckoutFields::get_group_key( \"other\" ) . 'my-plugin/is-opt-in';\n$opted_in = get_user_meta( 123, $key, true ) === \"1\" ? true : false;\n```\n\n----------------------------------------\n\nTITLE: Accessing Validation Store in WooCommerce Blocks\nDESCRIPTION: Example of how to access the Validation Store which holds data relating to validation errors, primarily used in Cart and Checkout flows in WooCommerce blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/README.md#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst { validationStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Using Custom REST API Endpoint\nDESCRIPTION: Demonstrates how to consume the custom REST API endpoint from the client side using WordPress apiFetch utility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/EXTENDING-WC-ADMIN-HELPER.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport apiFetch from '@wordpress/api-fetch';\n...\nconst response = await apiFetch( {\n    path: '/your-plugin/v1/area/action',\n    method: 'POST',\n} );\n```\n\n----------------------------------------\n\nTITLE: Styling WooCommerce Cart Submit Container Background\nDESCRIPTION: CSS code to customize the background color of the fixed bottom container that holds the Proceed to Checkout button on mobile viewports in the Cart block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/cart-and-checkout.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-cart__submit-container {\n\tbackground-color: #f9f4ee;\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Removing WooCommerce Checkout Fields for Virtual Carts\nDESCRIPTION: This snippet shows how to conditionally remove checkout fields based on cart type. It only applies field changes when the cart exists and contains only virtual products (no shipping needed).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/removing-checkout-fields.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter('woocommerce_get_country_locale', function( $locale ) {\n\t$cart = wc()->cart;\n\n\t// Only remove fields if we're operating on a cart.\n\tif ( ! $cart ) {\n\t\treturn $locale;\n\t}\n\n\t// Only remove fields if we're dealing with a virtual cart.\n\tif ( $cart->needs_shipping() ) {\n\t\treturn $locale;\n\t}\n  // Perform the rest of the logic below...\n```\n\n----------------------------------------\n\nTITLE: Implementing Client-Side Feature Flag Check in JavaScript\nDESCRIPTION: Shows how to conditionally render components based on feature flag status using the global wcAdminFeatures object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/feature-flags.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ window.wcAdminFeatures[ 'activity-panels' ] && <ActivityPanel /> }\n```\n\n----------------------------------------\n\nTITLE: Testing Successful Checkout with Stripe in WooCommerce\nDESCRIPTION: This code snippet provides a test card number for successfully completing a checkout process using Stripe payment method in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/900.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n4242 4242 4242 4242\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Activated Rule in JSON\nDESCRIPTION: This rule checks if all specified plugins are installed and activated. It requires a list of plugin slugs to be provided.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"plugins_activated\",\n\t\"plugins\": [\n\t\t\"plugin-slug-1',\n\t\t\"plugin-slug-2\"\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Product Attribute API Request - HTTP\nDESCRIPTION: Outlines the HTTP GET request for retrieving a single product attribute by its ID through the WooCommerce Store API. The placeholder :id should be replaced with the specific integer ID of the desired attribute. This endpoint returns the full object for one attribute in JSON format and requires the 'id' parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /products/attributes/:id\n```\n\n----------------------------------------\n\nTITLE: Formatting Activation Time for WooCommerce Admin Note in PHP\nDESCRIPTION: This code snippet retrieves the current timestamp and formats it for use in the Admin Note. It demonstrates how to prepare data for inclusion in the note's content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$activated_time = current_time( 'timestamp', 0);\n$activated_time_formatted = date( 'F jS', $activated_time );\n\n```\n\n----------------------------------------\n\nTITLE: Saving Permalink Settings in JavaScript\nDESCRIPTION: This function saves the current Permalink settings. It's used after making changes to permalink structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_24\n\nLANGUAGE: JavaScript\nCODE:\n```\npermalinkSettingsPageSaveChanges()\n```\n\n----------------------------------------\n\nTITLE: Registering WordPress-specific Global WooCommerce Blocks\nDESCRIPTION: This code demonstrates how to register WordPress-specific handlers for global blocks in WooCommerce using the 'woocommerce/register-block-template-handler' filter. It configures how various blocks like product image galleries should be rendered in the WordPress editor.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-slot-fill/Readme.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// WordPress Editor specific handler.\naddFilter(\n    'woocommerce/register-block-template-handler',\n    'woocommerce/register-block-template-handler-wp-editor',\n    ( blockHandlers ) => {\n        registerPlugin( 'woocommerce-block-templates', {\n            render() {\n                return (\n                    <GlobalBlockRenderer\n                        blockHandlers={ blockHandlers }\n                    />\n                );\n            },\n        } );\n\n        return blockHandlers;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Admin Note Class with Required Traits in PHP\nDESCRIPTION: This PHP snippet shows the basic class definition for an Admin Note provider (`ExampleNote`). It uses the `use` keyword to incorporate the `Note` trait (likely a typo in the source, should probably be the `Note` class itself or related functionality) and the `NoteTraits` trait from `Automattic\\WooCommerce\\Admin\\Notes`. These traits provide the necessary methods for creating and managing admin note objects within the class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass ExampleNote {\n \n    use Automatic\\WooCommerce\\Admin\\Notes\\Note;\n    use Automatic\\WooCommerce\\Admin\\Notes\\NoteTraits;\n \n}\n```\n\n----------------------------------------\n\nTITLE: Using is_product Conditional Function in PHP\nDESCRIPTION: Returns true when viewing a single product page.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nis_product()\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Specific WC-CLI Commands in Bash\nDESCRIPTION: This command retrieves detailed help information for a specific WooCommerce CLI command. Replace `[command]` with the command you need help with (e.g., `shop_coupon create`) to see its description, usage, and available options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp wc [command] --help\n```\n\n----------------------------------------\n\nTITLE: Non-Base Location Pricing Filter\nDESCRIPTION: Controls whether taxes should be removed for locations outside the store base location. Affects how prices are displayed across different tax jurisdictions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_adjust_non_base_location_prices', boolean $adjust_non_base_location_prices )\n```\n\n----------------------------------------\n\nTITLE: Removing Coupon in JavaScript\nDESCRIPTION: This helper method removes a single coupon within the cart or checkout. It's useful for testing coupon removal functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_25\n\nLANGUAGE: JavaScript\nCODE:\n```\nremoveCoupon()\n```\n\n----------------------------------------\n\nTITLE: Importing the Validation Store in JavaScript\nDESCRIPTION: Demonstrates how to import the validation store descriptor from the WooCommerce blocks data module.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { validationStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Extension Changelog Template\nDESCRIPTION: Standard template for formatting changelog entries in WooCommerce extensions. Shows version history with dates, version numbers, and categorized changes using standard entry types.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/changelog-txt.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n*** WooCommerce Extension Name Changelog ***\n\nYYYY-MM-DD - version 1.1.0\n* Added - Useful new feature\n* Fixed - Important bug fix\n\nYYYY-MM-DD - version 1.0.1\n* Fixed a bug\n\nYYYY-MM-DD - version 1.0.0\n* Initial release\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Task Class in PHP for WooCommerce Admin\nDESCRIPTION: Defines a custom task class that extends the WooCommerce Admin Task class. It sets up the task ID, title, content, and estimated time for completion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Custom task example.\n *\n */\nuse Automattic\\WooCommerce\\Admin\\Features\\OnboardingTasks\\Task;\n\n/**\n * Custom task class.\n */\nclass MyTask extends Task {\n\t/**\n\t * Get the task ID.\n\t *\n\t * @return string\n\t */\n\tpublic function get_id() {\n\t\treturn 'my-task';\n\t}\n\n\t/**\n\t * Title.\n\t *\n\t * @return string\n\t */\n\tpublic function get_title() {\n\t\treturn __( 'My task', 'woocommerce' );\n\t}\n\n\t/**\n\t * Content.\n\t *\n\t * @return string\n\t */\n\tpublic function get_content() {\n\t\treturn __( 'Add your task description here for display in the task list.', 'woocommerce' );\n\t}\n\n\t/**\n\t * Time.\n\t *\n\t * @return string\n\t */\n\tpublic function get_time() {\n\t\treturn __( '2 minutes', 'woocommerce' );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ActivityCardPlaceholder Component in React JSX\nDESCRIPTION: Example of how to use the ActivityCardPlaceholder component in a React render method. This component renders loading placeholders instead of actual content and is hidden from screen readers. The example shows usage with the hasDate prop enabled.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/activity-panel/activity-card/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { ActivityCardPlaceholder } from 'components/activity-card';\n\nrender: function() {\n  return (\n    <ActivityCardPlaceholder hasDate />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Formatting Configuration Objects in JavaScript\nDESCRIPTION: This JavaScript snippet defines a constant `currencies` object containing configuration details for Mexican Peso (MXN) and New Zealand Dollar (NZD). Each currency entry includes properties like `code`, `symbol`, `symbolPosition`, `thousandSeparator`, `decimalSeparator`, and `precision`, intended for formatting monetary values in WooCommerce reports.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_9\n\nLANGUAGE: js\nCODE:\n```\nconst currencies = {\n  MXN: {\n    code: \"MXN\",\n    symbol: \"$MXN\", // For the sake of the example.\n    symbolPosition: \"left\",\n    thousandSeparator: \",\",\n    decimalSeparator: \".\",\n    precision: 2,\n  },\n  NZD: {\n    code: \"NZD\",\n    symbol: \"$NZ\",\n    symbolPosition: \"left\",\n    thousandSeparator: \",\",\n    decimalSeparator: \".\",\n    precision: 2,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Post Tables Storage in WooCommerce\nDESCRIPTION: This snippet shows the configuration option for using WordPress Post Tables as the order data storage method in WooCommerce. When selected, order data is saved in _post and _postmeta tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n![Select WordPress Post Tables](https://woocommerce.com/wp-content/uploads/2023/10/image-18.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Registering a Checkout Block with Parent Restriction (JSON)\nDESCRIPTION: Demonstrates declaring a block type in blocks.json, specifying name, user-facing title, description, category, and a parent area in WooCommerce checkout where this block is allowed. This metadata is a prerequisite for registering a block in WooCommerce. The 'parent' property restricts the block's insertability to the specified area. Used by the WordPress block registration system and consumed by WooCommerce blocks registry.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/blocks-registry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"name\": \"woocommerce/checkout-actions-block\",\n\t\"title\": \"Actions\",\n\t\"description\": \"Allow customers to place their order.\",\n\t\"category\": \"woocommerce\",\n\t\"parent\": [ \"woocommerce/checkout-fields-block\" ]\n\t// ...snip\n}\n```\n\n----------------------------------------\n\nTITLE: Success Notice Without an Icon\nDESCRIPTION: An example of a success notice without an icon, demonstrating that the icon prop is optional. This shows how the component can be used with minimal configuration while still maintaining variant styling.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/components/notice/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Notice\n\tid=\"success-notice-no-icon\"\n\tvariant=\"success\"\n\tdescription={ __(\n\t\t'I am a success! But I am sad because I do not have an icon.',\n\t\t'woocommerce'\n\t) }\n\tisDismissible={ false }\n/>\n```\n\n----------------------------------------\n\nTITLE: Product Review Response Format\nDESCRIPTION: Example JSON response showing the structure of a product review including review details, product information, reviewer data, and avatar URLs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-reviews.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 83,\n\t\t\"date_created\": \"2022-01-12T15:42:14\",\n\t\t\"formatted_date_created\": \"January 12, 2022\",\n\t\t\"date_created_gmt\": \"2022-01-12T15:42:14\",\n\t\t\"product_id\": 33,\n\t\t\"product_name\": \"Beanie with Logo\",\n\t\t\"product_permalink\": \"https://store.local/product/beanie-with-logo/\",\n\t\t\"product_image\": {\n\t\t\t\"id\": 56,\n\t\t\t\"src\": \"https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1.jpg\",\n\t\t\t\"thumbnail\": \"https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-324x324.jpg\",\n\t\t\t\"srcset\": \"https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1.jpg 800w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-324x324.jpg 324w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-100x100.jpg 100w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-416x416.jpg 416w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-300x300.jpg 300w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-150x150.jpg 150w, https://store.local/wp-content/uploads/2021/11/beanie-with-logo-1-768x768.jpg 768w\",\n\t\t\t\"sizes\": \"(max-width: 800px) 100vw, 800px\",\n\t\t\t\"name\": \"beanie-with-logo-1.jpg\",\n\t\t\t\"alt\": \"\"\n\t\t},\n\t\t\"reviewer\": \"reviewer-name\",\n\t\t\"review\": \"<p>This is a fantastic product.</p>\\n\",\n\t\t\"rating\": 5,\n\t\t\"verified\": true,\n\t\t\"reviewer_avatar_urls\": {\n\t\t\t\"24\": \"https://secure.gravatar.com/avatar/12345?s=24&d=mm&r=g\",\n\t\t\t\"48\": \"https://secure.gravatar.com/avatar/12345?s=48&d=mm&r=g\",\n\t\t\t\"96\": \"https://secure.gravatar.com/avatar/12345?s=96&d=mm&r=g\"\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting WooCommerce Shop Order via CLI\nDESCRIPTION: Deletes a specific WooCommerce shop order identified by its `id`. The `--force` flag allows bypassing the trash and forcing permanent deletion. Use `--porcelain` to output only the ID on successful deletion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order delete [id]\n```\n\n----------------------------------------\n\nTITLE: Using Division Arithmetic Operator\nDESCRIPTION: Example of the division (/) operator, which returns the quotient of two operands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n6 / 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Dropdown Control in Vanilla JavaScript\nDESCRIPTION: JavaScript implementation of a dropdown control using WordPress components and state management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfunction ( { attributes } ) {\n    const [ value, setValue ] = wp.element.useState();\n    const [ filteredOptions, setFilteredOptions ] = wp.element.useState( DROPDOWN_OPTIONS );\n\n    const blockProps = window.wc.blockTemplates.useWooBlockProps( attributes );\n\n\treturn el( 'div', { ...blockProps }, [\n        el( wp.components.ComboboxControl, {\n            label: \"Example dropdown\",\n            value: value,\n            onChange: setValue,\n            options: filteredOptions,\n            onFilterValueChange: function( inputValue ) {\n                setFilteredOptions(\n                    DROPDOWN_OPTIONS.filter( ( option ) =>\n                        option.label\n                        .toLowerCase()\n                        .startsWith( inputValue.toLowerCase() )\n                    )\n                )\n            }\n        } )\n    ] );\n},\n```\n\n----------------------------------------\n\nTITLE: Restoring Two-Line Price Layout in 'All Products' Block (CSS)\nDESCRIPTION: These CSS rules target elements within the product price container (`.wc-block-grid__product-price`). They adjust font sizes, line heights, margins, colors, and display properties for the regular price (`.wc-block-grid__product-price__regular`) and the main price value (`.wc-block-grid__product-price__value`) to recreate the older, two-line price display style used before WC Blocks 2.7.0.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/product-grid-270.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-grid__product-price .wc-block-grid__product-price__regular {\n\tfont-size: 0.8em;\n\tline-height: 1;\n\tcolor: #555;\n\tmargin-top: -0.25em;\n\tdisplay: block;\n}\n.wc-block-grid__product-price .wc-block-grid__product-price__value {\n\tletter-spacing: -1px;\n\tfont-weight: 600;\n\tdisplay: block;\n\tfont-size: 1.25em;\n\tline-height: 1.25;\n\tcolor: #000;\n\tmargin-left: 0;\n}\n.wc-block-grid__product-price .wc-block-grid__product-price__value span {\n\twhite-space: nowrap;\n}\n```\n\n----------------------------------------\n\nTITLE: Using the AnalyticsError Component in JSX\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the `AnalyticsError` component within a React application. It renders a standard error message interface, typically including text and a reload action, designed for use in WooCommerce Analytics sections. An optional `className` prop can be passed for additional CSS styling as documented in the props table.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/analytics/error/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<AnalyticsError />\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper Shop Flow Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing critical flows for shoppers in the shop area, including search, browse, and product interaction functionalities.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area | Flow Name                                   | Test File                                    |\n| --------- | --------- | ------------------------------------------- | -------------------------------------------- |\n| Shopper   | Shop      | Search Store                                | shopper/shop-search-browse-sort.spec.js      |\n| Shopper   | Shop      | Browse by categories                        | shopper/shop-search-browse-sort.spec.js      |\n| Shopper   | Shop      | Can sort items                              | shopper/shop-search-browse-sort.spec.js      |\n| Shopper   | Shop      | Add Simple Product to Cart (from shop page) | shopper/cart.spec.js                         |\n| Shopper   | Shop      | Display shop catalog                        | shopper/shop-search-browse-sort.spec.js      |\n| Shopper   | Shop      | Products by tag                             | shopper/product-tags-attributes.spec.js      |\n| Shopper   | Shop      | Products by attribute                       | shopper/product-tags-attributes.spec.js      |\n| Shopper   | Shop      | Use product filters                         | shopper/shop-products-filer-by-price.spec.js |\n```\n\n----------------------------------------\n\nTITLE: Using Negation Arithmetic Operator\nDESCRIPTION: Example of the negation (-) operator, which returns the negation of an operand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n-1\n```\n\n----------------------------------------\n\nTITLE: Using 'in' Operation for Base Location Country Check in JSON\nDESCRIPTION: This example shows how to use the 'in' operation to check if the base location country is one of the specified countries. This feature was added in WooCommerce 8.2.0.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"base_location_country\",\n  \t\"value\": [\n\t\t\"US\",\n\t\t\"NZ\",\n\t\t\"ZA\"\n\t],\n\t\"operation\": \"in\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Tree Select Control in React JSX\nDESCRIPTION: The snippet demonstrates how to define a nested array of options and use the TreeSelectControl component to enable filtered, multi-level selection within a React interface. Dependencies include React, a compatible TreeSelectControl component, and state management functions such as setState. Key parameters:\n- `options`: An array of objects representing hierarchical options with labels and values, and optional nested children.\n- `label`, `onChange`, `placeholder`: Determine control appearance and selection handling. The input expects well-structured nested options; outputs are arrays of selected leaf node values. Customization options such as root select-all and maximum visible tags are supported.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/tree-select-control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n       {\n\t\tvalue: 'EU',\n\t\tlabel: 'Europe',\n\t\tchildren: [\n\t\t\t{ value: 'ES', label: 'Spain' },\n\t\t\t{ value: 'FR', label: 'France', children: [] }, // defining children as [] is equivalent to don't have children\n\t\t],\n\t},\n\t{\n\t\tvalue: 'NA',\n\t\tlabel: 'North America',\n\t\tchildren: [\n\t\t\t{ value: 'US', label: 'United States', children: [\n\t\t\t\t{ value: 'TX', label: 'Texas' },\n\t\t\t\t{ value: 'NY', label: 'New York' },\n\t\t\t] },\n\t\t\t{ value: 'CA', label: 'Canada' },\n\t\t],\n\t}\n     ];\n\n<TreeSelectControl\n\tlabel=\"Select multiple options\"\n\tonChange={ ( value ) => setState( { selectedValues: value } ) }\n\toptions={ options }\n\tplaceholder=\"Start typing to filter options...\"\n/>;\n```\n\n----------------------------------------\n\nTITLE: Correctly Representing Tag Data as an Array of Objects (PHP)\nDESCRIPTION: Demonstrates the recommended approach for representing collection data (like post tags) in an API response. Using a structured array of objects with consistent property names (like 'slug') allows for predictable schema definition and easier client consumption, which is preferred over using slugs as keys.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/guiding-principles.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntags: [\n  {\n    \"slug\": \"my-tag\",\n    // ...tag data\n  },\n  {\n    \"slug\": \"my-other-tag\",\n    // ...tag data\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Help Information\nDESCRIPTION: Command to show the help documentation for the markdown docs CLI tool, including available arguments and options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/md-docs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm utils md-docs create --help\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Tax Setting: Display Prices During Cart/Checkout (Including Tax)\nDESCRIPTION: This represents the configuration setting within WooCommerce Tax options to display product prices including tax during the cart and checkout processes. Used in testing tax display logic in the Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/370.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nDisplay prices during cart and checkout: Including tax\n```\n\n----------------------------------------\n\nTITLE: Illustrating the CRUD Data Store Internal Structure\nDESCRIPTION: Shows the typical internal state structure managed by the CRUD data store. The state includes an `items` object holding fetched resource data keyed by ID, an `errors` object mapping action/query keys to error messages, and a `data` object mapping query keys (e.g., 'GET_ITEMS:page=2') to arrays of corresponding resource IDs. By default, resources are expected to have an `id` property.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{\n    items: {\n        21: { ... },\n    },\n    errors: {\n        'GET_ITEMS:page=3': 'There was an error trying to fetch page 3',\n    },\n    data: {\n        'GET_ITEMS:page=2' : [ 21 ],\n    }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Taking Ad-Hoc Screenshots within E2E Tests\nDESCRIPTION: Shows the `takeScreenshotFor` asynchronous function call, available within Jest/Puppeteer test scripts, to manually capture a screenshot at a specific point during test execution. The function takes a string argument describing the current step or state, and saves the screenshot to `tests/e2e/screenshots`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nawait takeScreenshotFor( 'name of current step' );\n```\n\n----------------------------------------\n\nTITLE: Using ExperimentalDiscountsMeta Slot Fill in WooCommerce\nDESCRIPTION: This TypeScript snippet shows how to implement the ExperimentalDiscountsMeta slot to add custom content below the CouponCode input in both Cart and Checkout blocks. It uses the WooCommerce blocks checkout API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-slot-fills.md#2025-04-23_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nconst { __ } = window.wp.i18n;\nconst { registerPlugin } = window.wp.plugins;\nconst { ExperimentalDiscountsMeta } = window.wc.blocksCheckout;\n\nconst render = () => {\n\treturn (\n\t\t<ExperimentalDiscountsMeta>\n\t\t\t<div class=\"wc-block-components-totals-wrapper\">\n\t\t\t\t{ __( 'You have 98683 coins to spend ...', 'YOUR-TEXTDOMAIN' ) }\n\t\t\t</div>\n\t\t</ExperimentalDiscountsMeta>\n\t);\n};\n\nregisterPlugin( 'slot-and-fill-examples', {\n\trender,\n\tscope: 'woocommerce-checkout',\n} );\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Fee for Testing (PHP)\nDESCRIPTION: This PHP snippet hooks into 'woocommerce_cart_calculate_fees' to add a fixed fee (100) to the cart using the add_fee method. It's intended to be added to a PHP file (like the feature plugin's main file) to test the visibility of fees in the Cart and Checkout blocks, particularly when an order doesn't require shipping.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/410.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_cart_calculate_fees', 'add_fee', 10 );\nfunction add_fee( $cart ) {\n\t$cart->add_fee( __( 'Fee', 'woo-gutenberg-products-block' ), 100, true );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Email Object for Preview in WooCommerce (PHP)\nDESCRIPTION: This code demonstrates how to modify the WC_Email object used in preview. It uses the 'woocommerce_prepare_email_for_preview' filter to replace the WC_Order object with a custom object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/emails/email-preview.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_prepare_email_for_preview', function( $email ) {\n    // Modify the email object, e.g. to replace WC_Order\n    $email->set_object( $custom_object );\n    return $email;\n} );\n```\n\n----------------------------------------\n\nTITLE: Updating Setup Class Constructor\nDESCRIPTION: PHP code showing how to initialize the ProductFields class in the setup constructor.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nclass Setup {\n    public function __construct() {\n\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'register_scripts' ) );\n\n\t\tnew ProductFields();\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Single Cart Item - HTTP DELETE Request\nDESCRIPTION: API endpoint for removing a specific item from the cart using its key.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_8\n\nLANGUAGE: http\nCODE:\n```\nDELETE /cart/items/:key\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request DELETE https://example-store.com/wp-json/wc/store/v1/cart/items/e369853df766fa44e1ed0ff613f563bd\n```\n\n----------------------------------------\n\nTITLE: Sample Response from WooCommerce Product Attribute Terms API (JSON)\nDESCRIPTION: This snippet provides an example JSON array returned from the WooCommerce product attribute terms endpoint. Each object in the array represents a product attribute term, including its id, name, slug, and count. The output structure helps developers understand what to expect as a response and how to consume or process results in their applications.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attribute-terms.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 22,\n\t\t\"name\": \"Blue\",\n\t\t\"slug\": \"blue\",\n\t\t\"count\": 5\n\t},\n\t{\n\t\t\"id\": 48,\n\t\t\"name\": \"Burgundy\",\n\t\t\"slug\": \"burgundy\",\n\t\t\"count\": 1\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Using the deprecated_function_run Action Hook in PHP\nDESCRIPTION: This hook fires when a deprecated function is called in WooCommerce, allowing developers to track and handle deprecated function usage.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'deprecated_function_run' )\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Validation Method in PHP\nDESCRIPTION: Shows how to implement a custom validate() method for a payment token type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function validate() {\n    if ( false === parent::validate() ) {\n\t       return false;\n\t}\n    if ( ! $this->get_last4() ) {\n        return false;\n    }\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Icons Package via NPM\nDESCRIPTION: Command to install the @wordpress/icons package which provides icons for use in WooCommerce store management links.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/how-to-add-your-own-store-management-links.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @wordpress/icons --save\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Payment Test Credit Card Numbers\nDESCRIPTION: Test credit card numbers for successful and failed payment scenarios in WooCommerce Stripe integration. The number 4242424242424242 should result in successful payment, while 4000000000000002 should trigger a failed payment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/payment.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n4242424242424242 # Successful payment test card\\n4000000000000002 # Failed payment test card\n```\n\n----------------------------------------\n\nTITLE: Setting Page Metadata with Front Matter in YAML\nDESCRIPTION: Demonstrates how to add basic required metadata at the top of a markdown file using Front Matter. This example shows the minimum required field (post_title) that must be included at the start of any documentation page.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/contributing-docs.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npost_title: Your Post Title Goes Here\n---\n```\n\n----------------------------------------\n\nTITLE: Inserting or Updating Reserved Stock Rows with Concurrency Control (SQL)\nDESCRIPTION: This SQL statement inserts a new reservation for a product's stock into the reserved stock table or updates an existing entry if one already exists (by primary key). It atomically checks if there is at least one available unit of stock by subtracting reserved from total stock (using subqueries), and uses FOR UPDATE to lock rows and prevent concurrent modifications. ON DUPLICATE KEY ensures the reservation's expiry is updated if it already exists. Prerequisites include MySQL with appropriate tables, and variables $query_for_stock/$query_for_reserved_stock to get stock and reserved counts with row-level locking. Supplies parameters for order ID, product ID, stock quantity, and expiry time. The operation either inserts/updates a reservation or skips if constraints are not met.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/stock-reservation.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT INTO wp_wc_reserved_stock ( `order_id`, `product_id`, `stock_quantity`, `timestamp`, `expires` )\\nSELECT 99, 100, 1, NOW(), ( NOW() + INTERVAL 10 MINUTE ) FROM DUAL\\nWHERE ( $query_for_stock FOR UPDATE ) - ( $query_for_reserved_stock FOR UPDATE ) >= 1\\nON DUPLICATE KEY UPDATE `expires` = VALUES( `expires` )\\n\n```\n\n----------------------------------------\n\nTITLE: Calculating Net Sales Formula\nDESCRIPTION: Mathematical formula showing how net sales are calculated for products by subtracting refunds and coupons from the total sale price.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/analytics-products-report.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(product price * quantity) - refunds - coupons\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Card Number with Stripe in WooCommerce Checkout\nDESCRIPTION: This code snippet shows a test card number to use for simulating a card decline in Stripe payment method during WooCommerce Checkout testing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/900.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n4000 000 000 0002\n```\n\n----------------------------------------\n\nTITLE: General WC-CLI Command Structure - Bash\nDESCRIPTION: This snippet demonstrates the basic structure for executing WooCommerce CLI commands. The 'wp wc [command] [options]' syntax is used for invoking various store management operations, while appending '--help' displays detailed information about a specific command. WP-CLI and WooCommerce are required; replace [command] and [options] with appropriate actions and arguments to achieve the desired effect.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/using-wc-cli.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp wc [command] [options]\n```\n\nLANGUAGE: bash\nCODE:\n```\nwp wc [command] --help\n```\n\n----------------------------------------\n\nTITLE: Field Validation in WooCommerce Checkout\nDESCRIPTION: Example of implementing field validation using the woocommerce_validate_additional_field action to validate government ID format.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n'woocommerce_validate_additional_field',\n\tfunction ( WP_Error $errors, $field_key, $field_value ) {\n\t\tif ( 'namespace/gov-id' === $field_key ) {\n\t\t\t$match = preg_match( '/[A-Z0-9]{5}/', $field_value );\n\t\t\tif ( 0 === $match || false === $match ) {\n\t\t\t\t$errors->add( 'invalid_gov_id', 'Please ensure your government ID matches the correct format.' );\n\t\t\t}\n\t\t}\n\t},\n\t10,\n\t3\n);\n```\n\n----------------------------------------\n\nTITLE: Enabling WooCommerce Blocks Phase via INI Configuration - Text\nDESCRIPTION: This snippet demonstrates how to activate the WooCommerce Blocks feature flag for testing purposes by placing a blocks.ini file containing this line in the plugin directory. No external dependencies are required other than file system access. The key parameter, woocommerce_blocks_phase, is set to 1 to enable the feature. This change triggers the code path that schedules the cleanup action, allowing testers to verify cleanup scheduling behavior—remember to remove the file after testing to restore default functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/272.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nwoocommerce_blocks_phase = 1\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Package Metadata (package.json) - JavaScript (JSON)\nDESCRIPTION: This code snippet provides a template for the package.json file required when creating a new WooCommerce package. The configuration defines metadata such as package name, version, description, author, license, keywords, and pointers to entry points for different build targets. The \"publishConfig\" ensures the package is publicly accessible. Dependencies include npm and pnpm, and all parameters should be filled with appropriate values before publishing. The file must remain unaltered for subsequent version changes outside designated release processes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n \"name\": \"@woocommerce/package-name\",\n \"version\": \"1.0.0-beta.0\",\n \"description\": \"Package description.\",\n \"author\": \"Automattic\",\n \"license\": \"GPL-2.0-or-later\",\n \"keywords\": [ \"wordpress\", \"woocommerce\" ],\n \"homepage\": \"https://github.com/woocommerce/woocommerce/tree/trunk/packages/js/[_YOUR_PACKAGE_]/README.md\",\n \"repository\": {\n  \"type\": \"git\",\n  \"url\": \"https://github.com/woocommerce/woocommerce.git\"\n },\n \"bugs\": {\n  \"url\": \"https://github.com/woocommerce/woocommerce/issues\"\n },\n \"main\": \"build/index.js\",\n \"module\": \"build-module/index.js\",\n \"react-native\": \"src/index\",\n \"publishConfig\": {\n  \"access\": \"public\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of evaluate Function\nDESCRIPTION: Example of how to use the evaluate function to process an expression within a given context. This shows adding a context variable to a number.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { evaluate } from '@woocommerce/expression-evaluation';\n\nconst result = evaluate( '1 + foo', { foo: 2 } );\n\nconsole.log( result ); // 3\n```\n\n----------------------------------------\n\nTITLE: Modifying Order Data During Checkout in PHP\nDESCRIPTION: This PHP snippet demonstrates how to modify order data during the checkout process, specifically capitalizing the customer's first and last names using the woocommerce_store_api_checkout_order_processed action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n  'woocommerce_store_api_checkout_order_processed',\n  function( WC_Order $order ) {\n    $order->set_shipping_first_name( ucfirst( $order->get_shipping_first_name() ) );\n    $order->set_shipping_last_name( ucfirst( $order->get_shipping_last_name() ) );\n\n    $order->set_billing_first_name( ucfirst( $order->get_billing_first_name() ) );\n    $order->set_billing_last_name( ucfirst( $order->get_billing_last_name() ) );\n\n    $order->save();\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Playwright E2E Utils (Bash)\nDESCRIPTION: Installs the @woocommerce/e2e-utils-playwright package as a development dependency using the Node Package Manager (npm). This command should be run in a project's root directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils-playwright/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/e2e-utils-playwright --save-dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper Product Flow Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table detailing critical flows for shoppers interacting with products, including adding different product types to cart and viewing product details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area | Flow Name                                            | Test File                                |\n| --------- | --------- | ---------------------------------------------------- | ---------------------------------------- |\n| Shopper   | Product   | Add Simple Product to Cart                           | shopper/product-simple.spec.js           |\n| Shopper   | Product   | Add Grouped Product to Cart                          | shopper/product-grouped.spec.js          |\n| Shopper   | Product   | Variable Product info updates depending on variation | shopper/product-variable.spec.js         |\n| Shopper   | Product   | Add Variable Product to Cart                         | shopper/product-variable.spec.js         |\n| Shopper   | Product   | Display up-sell product                              | products/product-linked-products.spec.js |\n| Shopper   | Product   | Display related products                             | products/product-linked-products.spec.js |\n| Shopper   | Product   | Display reviews                                      | merchant/product-reviews.spec.js         |\n| Shopper   | Product   | Add review                                           | merchant/product-reviews.spec.js         |\n| Shopper   | Product   | View product images                                  | shopper/product-simple.spec.js           |\n| Shopper   | Product   | View product descriptions                            | shopper/product-simple.spec.js           |\n```\n\n----------------------------------------\n\nTITLE: Product Name Validation Implementation\nDESCRIPTION: Implements validation logic for product names, checking for empty values and length constraints with appropriate error messages.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/contexts/validation-context/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync function nameValidator() {\n  if (!name || name === AUTO_DRAFT_NAME) {\n    return {\n      message: __('Product name is required.', 'woocommerce'),\n      context: clientId,\n    };\n  }\n\n  if (name.length > 120) {\n    return {\n      message: __(\n        'Please enter a product name shorter than 120 characters.',\n        'woocommerce'\n      ),\n      context: clientId,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Products Function Signature in ES6\nDESCRIPTION: Function signature showing the basic structure of the getRelatedProducts helper function that retrieves related products for a given product ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/utils/get-related-products/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: es6\nCODE:\n```\ngetRelatedProducts( productId, options )\n```\n\n----------------------------------------\n\nTITLE: Defining Endpoint to Add Cart Coupon (HTTP)\nDESCRIPTION: Defines the HTTP POST request structure for applying a coupon to the cart via the WooCommerce Store API. It requires a `code` parameter specifying the coupon code to add.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_6\n\nLANGUAGE: http\nCODE:\n```\nPOST /cart/coupons/\n```\n\n----------------------------------------\n\nTITLE: Dispatching Success Notice in WooCommerce Blocks via wp.data (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to programmatically dispatch a success notice in the WooCommerce Cart block using the WordPress wp.data API. The function 'createSuccessNotice' is invoked on the 'core/notices' data store dispatcher, which creates a notice with a custom message and context; the notice should display as a green success banner. To use, execute this code in the browser's development console on a page containing the Cart block. Requires WordPress Gutenberg's wp.data and the relevant WooCommerce Blocks plugin; parameters include the notice message and an options object with 'context'. The output is a new notice visible to the user, with styling corresponding to a success message.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nwp.data.dispatch('core/notices').createSuccessNotice( 'This is a success message, it should show in green!', { context: 'wc/cart' } )\n```\n\n----------------------------------------\n\nTITLE: Structuring Stripe Payment Data for Checkout (JSON)\nDESCRIPTION: Provides an example of the `payment_data` array structure specifically required by the WooCommerce Stripe Payment Gateway. This array of key-value pairs includes the Stripe source ID (`stripe_source`), billing details (`billing_email`, `billing_first_name`, etc.), the payment method identifier (`paymentMethod`), type (`paymentRequestType`), and a flag for saving the payment method (`wc-stripe-new-payment-method`). This data is included within the main JSON request body.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout-order.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"payment_data\": [\n\t\t{\n\t\t\t\"key\": \"stripe_source\",\n\t\t\t\"value\": \"src_xxxxxxxxxxxxx\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"billing_email\",\n\t\t\t\"value\": \"myemail@email.com\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"billing_first_name\",\n\t\t\t\"value\": \"Jane\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"billing_last_name\",\n\t\t\t\"value\": \"Doe\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"paymentMethod\",\n\t\t\t\"value\": \"stripe\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"paymentRequestType\",\n\t\t\t\"value\": \"cc\"\n\t\t},\n\t\t{\n\t\t\t\"key\": \"wc-stripe-new-payment-method\",\n\t\t\t\"value\": true\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Payment Method Configuration Object in TypeScript\nDESCRIPTION: This code defines the structure of a payment method configuration object, which includes a 'canMakePayment' function. This function determines if the payment method can be used for the current cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Updating CSS Class Names for WooCommerce Blocks 3.4.0\nDESCRIPTION: Replacement mapping for deprecated checkout form class names. The old class 'wc-block-components-checkout-form' has been replaced with 'wc-block-checkout__form' to maintain consistent naming conventions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/class-names-update-340.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-checkout-form /* Old class */\n.wc-block-checkout__form /* New class */\n```\n\n----------------------------------------\n\nTITLE: Markdown Content Structure\nDESCRIPTION: Basic markdown structure defining compatibility testing requirements including supported WordPress versions, WooCommerce versions, themes, and browsers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/compatibility.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Compatibility\n\n## Table of Contents\n\n- [Setup](#setup)\n- [What to test](#what-to-test)\n\nThe main goal of this is to test in a variety of themes, browsers, platforms, and setups, this is a list of things you can test with, with sane expectations.\n\n## Setup\n\n-   WordPress 5.4 and up.\n-   WooCommerce 4.2 and up.\n-   [Storefront](https://wordpress.org/themes/storefront/), [Twenty Twenty-Two](https://wordpress.org/themes/twentytwentytwo/), and [Twenty Twenty-One](https://wordpress.org/themes/twentytwentyone/) themes.\n-   All Browsers supported by [those two versions](https://make.wordpress.org/core/handbook/best-practices/browser-support/) so this includes Internet Explorer 11, and latest two versions of each browser.\n\n## What to test\n\nTest the WooCommerce Blocks plugin against the versions as listed above.\n```\n\n----------------------------------------\n\nTITLE: Enabling Virtualized List Rendering with SelectControl in React (JSX)\nDESCRIPTION: This snippet demonstrates how to configure the SelectControl React component to handle large datasets via virtualization, leveraging the react-window library for efficient rendering. It uses several props: virtualScroll (enables virtualization), virtualItemHeight, and virtualListHeight (controls pixel dimensions of list items and menu container). Dependencies include React, SelectControl, and react-window. The options prop receives a largeDataset array, while event handling is delegated to handleSelect. The expected output is a performant selectable dropdown for thousands of options with virtual scrolling enabled. Ensure largeDataset is appropriately populated for meaningful virtualization benefits.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/select-control/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<SelectControl\n\tlabel=\"Select from large dataset\"\n\tonChange={ handleSelect }\n\toptions={ largeDataset } // Array with thousands of options\n\tplaceholder=\"Start typing to search...\"\n\tisSearchable={ true }\n\tvirtualScroll={ true } // Enable virtualization\n\tvirtualItemHeight={ 35 } // Height of each option in pixels\n\tvirtualListHeight={ 300 } // Maximum height of the dropdown\n/>\n```\n\n----------------------------------------\n\nTITLE: Migrating Full Order with `wc hpos backfill` (Plaintext)\nDESCRIPTION: Example demonstrating how to use `wp wc hpos backfill` to migrate the complete order data for order ID 99709 from the HPOS datastore to the legacy posts datastore. The success message confirms the operation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos backfill 99709\nSuccess: Order 99709 backfilled from hpos to posts.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Error in JavaScript\nDESCRIPTION: Shows how to use the getCollectionError selector to retrieve any error that occurred while fetching a collection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( COLLECTIONS_STORE_KEY );\nconst error = store.getCollectionError( state, namespace, resourceName, queryString );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom REST API Endpoint\nDESCRIPTION: Example of registering a new REST API endpoint for server-side actions. Includes permission checking and response handling for POST requests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/EXTENDING-WC-ADMIN-HELPER.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'rest_api_init', function() {\n    register_rest_route(\n        'your-plugin/v1',\n        '/area/action',\n        array(\n            'methods' => 'POST',\n            'callback' => 'your_plugin_area_action',\n            'permission_callback' => function( $request ) {\n                if ( ! wc_rest_check_manager_permissions( 'settings', 'edit ) ) {\n                    return new \\WP_Error(\n                        'woocommerce_rest_cannot_edit',\n                        __( 'Sorry, you cannot perform this action', 'your-plugin' )\n                    );\n                }\n                return true;\n            }\n        )\n    );\n} );\n\nfunction your_plugin_area_action() {\n    return [];\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Request to Get Single Cart Coupon (Shell/cURL)\nDESCRIPTION: Provides a sample cURL command to make a GET request to retrieve a specific coupon ('20off') from the cart using the WooCommerce Store API endpoint `/cart/coupons/:code`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/cart/coupons/20off\"\n```\n\n----------------------------------------\n\nTITLE: Forcing wp_mail Failure for Checkout Error Testing in PHP\nDESCRIPTION: This PHP snippet adds a filter to the WordPress `wp_mail` function. It immediately terminates the script execution using `exit;` whenever an email sending attempt is made via `wp_mail`. This method is employed specifically to simulate an email sending failure during the WooCommerce checkout process, allowing testers to verify the display and wording of the resulting error message. It requires a WordPress environment where WooCommerce is active.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1140.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\\nadd_filter( 'wp_mail', function( $args ) {\\n  exit;\\n} );\\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing WooCommerce Content Loop in PHP\nDESCRIPTION: Basic implementation of WooCommerce content loop to replace the standard WordPress loop in a custom template file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php woocommerce_content(); ?>\n```\n\n----------------------------------------\n\nTITLE: Defining Select Options for WooCommerce Checkout Fields in PHP\nDESCRIPTION: Example configuration for the 'options' parameter when creating a select field in WooCommerce checkout. Shows how to define multiple options with distinct values and user-friendly labels.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n[\n\n\t[\n\t\t'value' => 'store_1',\n\t\t'label' => 'Our London Store'\n\t],\n\t[\n\t\t'value' => 'store_2',\n\t\t'label' => 'Our Paris Store'\n\t],\n\t[\n\t\t'value' => 'store_3',\n\t\t'label' => 'Our New York Store'\n\t]\n]\n```\n\n----------------------------------------\n\nTITLE: WordPress Environment Commands for Plugin Development\nDESCRIPTION: Commands using wp-env to create, start, stop, and destroy WordPress development environments for plugins. These environments are plugin-specific to prevent conflicts between different plugins in the monorepo.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you are in the working directory of the plugin you are interested in setting up the environment for\ncd plugins/woocommerce\n# Start will create the environment if necessary or start an existing one\npnpm -- wp-env start\n# Stop will, well, stop the environment\npnpm -- wp-env stop\n# Destroy will remove all of the environment's files.\npnpm -- wp-env destroy\n```\n\n----------------------------------------\n\nTITLE: Importing Event Emitter Utilities in WooCommerce\nDESCRIPTION: Shows how to import various utility functions and constants for working with event emitters in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  noticeContexts,\n  responseTypes,\n  shouldRetry,\n} from '@woocommerce/base-context';\nimport {\n  isSuccessResponse,\n  isErrorResponse,\n  isFailResponse,\n} from '@woocommerce/types';\n```\n\n----------------------------------------\n\nTITLE: Updating Payment Methods on Cart Changes in TypeScript\nDESCRIPTION: This code updates payment methods when the cart changes, potentially enabling or disabling certain payment options based on the new cart state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Checking Payment Status with isPaymentIdle\nDESCRIPTION: Example demonstrating how to check if the payment status is in the 'idle' state using the isPaymentIdle selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst isPaymentIdle = store.isPaymentIdle();\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limiting to Store API Endpoints (PHP)\nDESCRIPTION: This enhancement adds rate limiting functionality to Store API endpoints to improve performance and security.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/readme.txt#2025-04-23_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nAdding rate limiting functionality to Store API endpoints.\n```\n\n----------------------------------------\n\nTITLE: Creating Playwright Fixture for Handlebars Templates in WooCommerce E2E Tests - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to define a custom Playwright fixture (filteredProductsTemplate) using utilities from '@woocommerce/e2e-utils'. The fixture uses requestUtils.createTemplateFromFile to provide a TemplateCompiler for Handlebars templates, enabling parameterized compilation with dynamic data in tests. Dependencies include Playwright and WooCommerce's E2E testing utilities, and the key parameter is the template file name.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// tests/product-collection.spec.ts\n\nimport { test as base, expect, TemplateCompiler } from '@woocommerce/e2e-utils';\n\nconst test = base.extend< {\n\tfilteredProductsTemplate: TemplateCompiler;\n} >( {\n\tfilteredProductsTemplate: async ( { requestUtils }, use ) => {\n\t\tconst compiler = await requestUtils.createTemplateFromFile(\n\t\t\t'archive-product_with-filters'\n\t\t);\n\t\tawait use( compiler );\n\t},\n} );\n```\n\n----------------------------------------\n\nTITLE: Using FormSection Component in React/JSX\nDESCRIPTION: This JSX snippet demonstrates the basic implementation of the `FormSection` component. It utilizes the `title` and `description` props to provide context for the form section and renders child elements, such as form fields enclosed within `Card` and `CardBody`, in the main content area. The component requires React and likely depends on components like `Card` and `CardBody` from a UI library (e.g., WooCommerce components).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/form-section/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<FormSection\n    title=\"My form section\"\n    description=\"Some text to describe what this section covers\"\n>\n    <Card>\n        <CardBody>\n            My form fields\n        </CardBody>\n    </Card>\n</FormSection>\n```\n\n----------------------------------------\n\nTITLE: Updating MiniCart.php for Correct Price Total Display in WooCommerce\nDESCRIPTION: This update fixes the price total amount display on page load when prices include tax. It requires enabling tax calculations and setting display prices to include tax in WooCommerce settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/911.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// No code snippet provided, but changes are made to MiniCart.php\n```\n\n----------------------------------------\n\nTITLE: Expression with Comments and Formatted Operations\nDESCRIPTION: A multiline arithmetic expression with comments and operations on variables with conditional evaluation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nfoo\n  + 5\n  /* This is a comment */\n  * ( bar ? baz : qux )\n```\n\n----------------------------------------\n\nTITLE: Registering Conditional Express Payment Method Extension Callback (JavaScript)\nDESCRIPTION: This JavaScript code snippet provides a way to conditionally filter out a registered express payment method by using registerPaymentMethodExtensionCallbacks for a specific extension. It depends on WooCommerce's wcBlocksRegistry global. The callback for 'expressMethod' logs activity to the console and always returns false, effectively preventing display of this payment in the UI. Inputs: an argument object, output: boolean indicating whether the payment method can be used. Limitations: This disables the express method unconditionally—custom logic can be added for more granular control.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/600.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nwc.wcBlocksRegistry.registerPaymentMethodExtensionCallbacks(\n\t'woocommerce-marketplace-extension',\n\t{\n\t\texpressMethod: ( arg ) => {\n\t\t\tconsole.log( 'canMakePayment expressMethod' );\n\t\t\treturn false;\n\t\t},\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Remote Logger in JavaScript\nDESCRIPTION: Example of how to initialize the remote logger at the start of your application. It sets up the logger with a rate limit of 1 minute between error reports.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { init } from '@woocommerce/remote-logging';\n\ninit({\n  errorRateLimitMs: 60000 // Set rate limit to 1 minute\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Orders with Parameters in PHP\nDESCRIPTION: Standard function for retrieving orders based on specific parameters. Designed to work consistently even after migration to custom tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nwc_get_orders( $args )\n```\n\n----------------------------------------\n\nTITLE: Displaying Zero-Value Taxes in WooCommerce\nDESCRIPTION: This snippet forces WooCommerce to display taxes with zero value, which are hidden by default. It can be useful for transparency in tax reporting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/configuring_special_tax_scenarios.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_order_hide_zero_taxes', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Using assembleRouteWithPlaceholders in WooCommerce Schema Store\nDESCRIPTION: Example demonstrating how to use the assembleRouteWithPlaceholders selector to build a complete route by replacing placeholders with actual values. This is useful for dynamically constructing API endpoint URLs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/schema.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( SCHEMA_STORE_KEY );\nconst route = store.assembleRouteWithPlaceholders( route, routePlaceholders, ids );\n```\n\n----------------------------------------\n\nTITLE: CSS Styling for VerticalCSSTransition Animation\nDESCRIPTION: CSS classes that define the transition effects for the component. This example shows opacity transition styles for the enter state, which can be applied to elements within the VerticalCSSTransition component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/experimental/src/vertical-css-transition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n.my-node-enter {\n\topacity: 0;\n}\n\n.my-node-enter-active {\n\topacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Conflict Error Response with Cart Data in WooCommerce\nDESCRIPTION: Example JSON response for conflict errors (409) that includes the current cart state in the response, allowing clients to stay in sync without additional requests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"woocommerce_rest_cart_invalid_key\",\n  \"message\": \"Cart item no longer exists or is invalid.\",\n  \"data\": {\n    \"status\": 409,\n    \"cart\": { ... }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if Cart Data is Stale in WooCommerce (JavaScript)\nDESCRIPTION: Example of how to check if the cart data is stale and needs refreshing. Returns a boolean value indicating whether the cart data needs to be updated from the server.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_31\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst isCartDataStale = store.isCartDataStale();\n```\n\n----------------------------------------\n\nTITLE: Displaying a Deprecation Warning in Bash\nDESCRIPTION: An example of how a deprecation warning appears in the browser or console when a deprecated WooCommerce function is called. This notice shows the deprecated function name, when it was deprecated, and what replacement function should be used instead.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/deprecation-in-core.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nNotice: woocommerce_show_messages is deprecated since version 2.1! Use wc_print_notices instead. in /srv/www/wordpress-default/wp-includes/functions.php on line 3783\n```\n\n----------------------------------------\n\nTITLE: Resetting WooCommerce Onboarding Wizard with SQL\nDESCRIPTION: SQL query to reset the WooCommerce onboarding wizard by deleting the onboarding profile option from the WordPress database.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nDELETE FROM wp_options WHERE option_name = 'woocommerce_onboarding_profile'\n```\n\n----------------------------------------\n\nTITLE: Failed Attempt to Disable HPOS with Pending Syncs\nDESCRIPTION: Shows the error message when trying to disable HPOS while there are still orders pending synchronization. This prevents data loss by requiring all orders to be synced first.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos disable\nRunning pre-disable checks...\nError: [Failed] There are orders pending sync. Please run `wp wc hpos sync` to sync pending orders.\n```\n\n----------------------------------------\n\nTITLE: Example New Account Password Reset URL Structure\nDESCRIPTION: This shows the format of the URL emailed to a new customer for setting their password after creating an account during checkout via the Checkout block. It includes `action=newaccount`, a unique key, and the login username. This feature requires WooCommerce 4.7+.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/370.md#2025-04-23_snippet_0\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:8333/my-account/lost-password/?action=newaccount&key=6lye4PPX11pbjWPJozSR&login=bob\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracks Debugging in JavaScript Console\nDESCRIPTION: JavaScript code to enable tracks debugging in the browser console by setting a localStorage item. Also requires setting Chrome's log level to verbose.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem( 'debug', 'wc-admin:tracks' );\n```\n\n----------------------------------------\n\nTITLE: Clicking Filter in JavaScript\nDESCRIPTION: This helper method clicks on a filter in a list page. It takes the selector of the filter as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclickFilter(selector)\n```\n\n----------------------------------------\n\nTITLE: Converting WordPress Post Retrieval to WooCommerce Order API\nDESCRIPTION: This code snippet shows how to convert direct WordPress post retrieval to using WooCommerce's order API. Instead of getting a WP_Post object with get_post(), use wc_get_order() to get a WC_Order object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Instead of\n$post = get_post( $post_id ); // returns WP_Post object.\n// use\n$order = wc_get_order( $post_id ); // returns WC_Order object.\n```\n\n----------------------------------------\n\nTITLE: Testing Cart and Checkout Notifications UI - WooCommerce Blocks - Markdown\nDESCRIPTION: This markdown-based test suite verifies that default cart and checkout notification message styles change from warning to informational after a UI update, including verifying link actions and message states. Screenshot comparisons are incorporated to ensure accuracy. Testing requires a site with WooCommerce Blocks and test pages for the Cart and Checkout blocks, with verification based on UI message style and text.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Update notice for default cart and checkout [#11861](https://github.com/woocommerce/woocommerce-blocks/pull/11861)\n\n1. Create a test page and add the Cart block to it.\n2. Open the settings sidebar.\n3. Select the Cart block.\n4. Verify that the notice _\"If you would like to use this block as your default cart, update your page settings.\"_ no longer appears as a warning (yellow border and background), but as info (blue border, white background).\n5. Click the link _\"[update your page settings\"_.\n6. Verify that the notice _\"Page settings updated\"_ becomes visible.\n7. Repeat steps 1. until 6. with the Checkout block. In step 4., the message should say _\"... as your default checkout, ...\"_ instead of _\"... as your default cart, ...\"_.\n\n#### Cart block\n\n<table>\n<tr>\n<td valign=\"top\">Before:\n<br><br>\n<img width=\"292\" alt=\"Screenshot 2023-11-21 at 18 17 37\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3323310/22e60e36-9818-4a0a-8393-5b5cd53f25d0\">\n</td>\n<td valign=\"top\">After:\n<br><br>\n<img width=\"293\" alt=\"Screenshot 2023-11-21 at 17 57 27\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3323310/e5ca3c95-f17a-47a0-b6e9-23395cc14144\">\n</td>\n</tr>\n</table>\n\n#### Checkout block\n\n<table>\n<tr>\n<td valign=\"top\">Before:\n<br><br>\n<img width=\"293\" alt=\"Screenshot 2023-11-21 at 18 11 48\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3323310/161a9bb4-626d-49d5-bf93-bc03a2d1d8dc\">\n</td>\n<td valign=\"top\">After:\n<br><br>\n<img width=\"295\" alt=\"Screenshot 2023-11-21 at 18 08 52\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3323310/cea552a4-4fd0-427a-8517-0e3eff105f9d\">\n</td>\n</tr>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Checking Idle Status in Checkout Store with JavaScript\nDESCRIPTION: Shows how to determine if the checkout is in an idle state using the isIdle selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst isIdle = store.isIdle();\n```\n\n----------------------------------------\n\nTITLE: Integrating Core E2E Tests with Travis CI - YAML\nDESCRIPTION: This YAML snippet demonstrates the addition of E2E test steps to a Travis CI configuration file. It specifies the environment and script steps, including global installation of 'jest' and execution of WooCommerce E2E tests using 'npx wc-e2e test:e2e'. The configuration should be added to the appropriate .travis.yml file sections and can be customized to fit project-specific initialization or shutdown scripts. 'php', 'env', and 'script' keys are critical for CI setup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/external.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: ~> 1.0\n\n  include:\n    - name: \"Core E2E Tests\"\n    php: 7.4\n    env: WP_VERSION=latest WP_MULTISITE=0 RUN_E2E=1\n\n....\n\nscript:\n  - npm install jest --global\n# add your initialization script here\n  - npx wc-e2e test:e2e\n\n....\n\nafter_script:\n# add script to shut down your test container\n```\n\n----------------------------------------\n\nTITLE: Removing Default WooCommerce Wrappers\nDESCRIPTION: Code to remove default WooCommerce content wrappers to prepare for custom theme implementation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nremove_action( 'woocommerce_before_main_content', 'woocommerce_output_content_wrapper', 10);\nremove_action( 'woocommerce_after_main_content', 'woocommerce_output_content_wrapper_end', 10);\n```\n\n----------------------------------------\n\nTITLE: Referencing WooCommerce Extend Cart Checkout Block Package\nDESCRIPTION: This snippet provides a link to the README file of the @woocommerce/extend-cart-checkout-block package, which contains instructions and examples for extending cart and checkout blocks in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[`@woocommerce/extend-cart-checkout-block`](https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/extend-cart-checkout-block/README.md)\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Live Branches Script\nDESCRIPTION: The script file path that needs to be installed via Tampermonkey for previewing WooCommerce PR changes. Users need to click this URL after installing Tampermonkey.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/userscripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwc-live-branches.user.js\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Onboarding Module with PNPM\nDESCRIPTION: This command installs the WooCommerce onboarding module as a dependency using PNPM package manager. The --save flag ensures the dependency is added to the project's package.json file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/onboarding/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/onboarding --save\n```\n\n----------------------------------------\n\nTITLE: RTL Style Exclusion Examples in CSS\nDESCRIPTION: Demonstrates how to use RTL control directives to exclude specific CSS rules or blocks from RTL stylesheets using rtlcss control comments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/coding-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n.code {\n\t/*rtl:ignore*/\n\tdirection: ltr;\n\t/*rtl:ignore*/\n\ttext-align: left;\n}\n```\n\nLANGUAGE: css\nCODE:\n```\n.code {\n\t/*rtl:begin:ignore*/\n\tdirection: ltr;\n\ttext-align: left;\n\t/*rtl:end:ignore*/\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Spinner Component in React JSX\nDESCRIPTION: Renders the Spinner component as an indeterminate circular progress indicator, typically used to indicate ongoing loading states in React applications. Requires a React environment with the Spinner component available, either from a library or custom implementation. Accepts optional props such as className for additional styling, but in this usage (`<Spinner />`), no props are provided. The component is displayed with default behavior and appearance, and outputs a visual spinner in the UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/spinner/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Spinner />\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_blocks_cart_enqueue_data Hook in PHP\nDESCRIPTION: Fires after cart block data is registered. This hook allows developers to perform actions after cart data has been enqueued for both the MiniCart and Cart blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_cart_enqueue_data' )\n```\n\n----------------------------------------\n\nTITLE: Installing E2E Environment and Jest\nDESCRIPTION: Installs the `@woocommerce/e2e-environment` package as a development dependency and installs `jest` globally using npm. These are the initial steps required to set up the testing environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/e2e-environment --save\nnpm install jest --global\n```\n\n----------------------------------------\n\nTITLE: Handling Composer Error with Jetpack Autoloader\nDESCRIPTION: An error message showing the signature incompatibility between Jetpack Autoloader and Composer 2.0.7. The recommended solution is to downgrade to Composer 2.0.6.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[ErrorException]\n  Declaration of Automattic\\Jetpack\\Autoloader\\AutoloadGenerator::dump(Composer\\Config $config, Composer\\Repository\\Inst\n  alledRepositoryInterface $localRepo, Composer\\Package\\PackageInterface $mainPackage, Composer\\Installer\\InstallationMa\n  nager $installationManager, $targetDir, $scanPsrPackages = false, $suffix = NULL) should be compatible with Composer\\A\n  utoload\\AutoloadGenerator::dump(Composer\\Config $config, Composer\\Repository\\InstalledRepositoryInterface $localRepo,\n  Composer\\Package\\RootPackageInterface $rootPackage, Composer\\Installer\\InstallationManager $installationManager, $targ\n  etDir, $scanPsrPackages = false, $suffix = '')\n```\n\n----------------------------------------\n\nTITLE: Applying Selected Local Pickup Rate in Block Checkout (PHP)\nDESCRIPTION: This code snippet applies the selected Local Pickup rate to the entire order (all packages) in the Block Checkout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/readme.txt#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nBlock Checkout: Apply selected Local Pickup rate to entire order (all packages).\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering of List Items with Functional Child - JSX\nDESCRIPTION: This snippet illustrates customizing the rendering of list items by passing a functional child to the List component in React. Prerequisites include a List component that supports functional children and an array of items as input. The functional child renders each item inside a div with a custom CSS class. Input is the items array, and output is a list with each item wrapped in a div; customization is limited by the allowed structure in the item object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/list/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<List items={ listItems } >\n{\n\t(item, index) => <div className=\"woocommerce-list__item-inner\">{item.title}</div>\n}\n</List>\n```\n\n----------------------------------------\n\nTITLE: Format Method Signature for Formatters in WooCommerce\nDESCRIPTION: Shows the method signature for the format method implemented by all formatter classes. The value parameter is required while options is optional and primarily used with MoneyFormatter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-formatters.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nformat( $value, array $options = [] );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Accordion Panel Block Configuration\nDESCRIPTION: Block configuration for the Accordion Panel component that contains the expandable content. Supports typography, color, and spacing customization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/accordion/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n-   **Name:** woocommerce/accordion-panel\n-   **Experimental:** true\n-   **Category:** design\n-   **Parent:** woocommerce/accordion-item\n-   **Supports:** border, color (background, gradient, text), interactivity, layout, shadow, spacing (blockGap, margin, padding), typography (fontSize, lineHeight)\n-   **Attributes:** allowedBlocks, isSelected, openByDefault, templateLock\n```\n\n----------------------------------------\n\nTITLE: Updating WooCommerce Product Attribute Term via CLI\nDESCRIPTION: Updates an existing WooCommerce product attribute term identified by its `id` and parent `attribute_id`. Allows modifying `name`, `slug`, `description`, and `menu_order`. Use `--porcelain` to output only the term ID on success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\nwc product_attribute_term update <attribute_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Dispatching updateCustomerData Action in WooCommerce Cart Store (JavaScript)\nDESCRIPTION: Example of how to update customer data in the WooCommerce cart store. The function accepts customer billing and shipping address data and an optional editing flag that determines whether to update the customer data in the store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_21\n\nLANGUAGE: js\nCODE:\n```\nconst { dispatch } = useDispatch( cartStore );\ndispatch( updateCustomerData( customerData, editing ) );\n```\n\n----------------------------------------\n\nTITLE: Using Inequality Comparison Operator\nDESCRIPTION: Example of the inequality (!=) operator, which returns true if the operands are not equal.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n1 != 2\n```\n\n----------------------------------------\n\nTITLE: Customizing Place Order Button Label\nDESCRIPTION: This snippet shows how to use the placeOrderButtonLabel filter to change the text of the 'Place Order' button at checkout. It replaces the default text with a custom label including emoji decorations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/checkout-and-place-order-button.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyPlaceOrderButtonLabel = ( defaultValue, extensions ) => {\n\treturn '😎 Pay now 😎';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tplaceOrderButtonLabel: modifyPlaceOrderButtonLabel,\n} );\n```\n\n----------------------------------------\n\nTITLE: Configuring High-Performance Order Storage in WooCommerce\nDESCRIPTION: This snippet illustrates the configuration option for using High-Performance Order Storage in WooCommerce. When selected, order data is saved in the new WooCommerce order tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![Select High-Performance Order Storage](https://woocommerce.com/wp-content/uploads/2023/10/image-19.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Page with WooCommerce Blocks in HTML\nDESCRIPTION: This HTML code snippet contains all the WooCommerce blocks needed for smoke testing. It includes featured products, categories, handpicked products, best sellers, top-rated products, new products, on-sale products, product categories, tags, reviews, search functionality, mini-cart, and customer account blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/smoke-testing.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:woocommerce/featured-product {\"editMode\":false,\"productId\":15} -->\n<!-- wp:button {\"align\":\"center\"} -->\n<div class=\"wp-block-button aligncenter\">\n\t<a\n\t\tclass=\"wp-block-button__link\"\n\t\thref=\"\"\n\t\t>Shop now</a\n\t>\n</div>\n<!-- /wp:button -->\n<!-- /wp:woocommerce/featured-product -->\n\n<!-- wp:woocommerce/featured-category {\"editMode\":false,\"categoryId\":16} -->\n<!-- wp:button {\"align\":\"center\"} -->\n<div class=\"wp-block-button aligncenter\">\n\t<a\n\t\tclass=\"wp-block-button__link\"\n\t\thref=\"\"\n\t\t>Shop now</a\n\t>\n</div>\n<!-- /wp:button -->\n<!-- /wp:woocommerce/featured-category -->\n\n<!-- wp:woocommerce/handpicked-products {\"editMode\":false,\"products\":[15,32,16]} /-->\n\n<!-- wp:woocommerce/product-best-sellers /-->\n\n<!-- wp:woocommerce/product-top-rated /-->\n\n<!-- wp:woocommerce/product-new /-->\n\n<!-- wp:woocommerce/product-on-sale /-->\n\n<!-- wp:woocommerce/product-category {\"categories\":[16]} /-->\n\n<!-- wp:woocommerce/product-tag /-->\n\n<!-- wp:woocommerce/products-by-attribute {\"attributes\":[{\"id\":22,\"attr_slug\":\"pa_color\"}],\"editMode\":false} /-->\n\n<!-- wp:woocommerce/product-categories /-->\n\n<!-- wp:woocommerce/product-categories {\"isDropdown\":true} /-->\n\n<!-- wp:woocommerce/reviews-by-product {\"editMode\":false,\"productId\":15} -->\n<div\n\tclass=\"wp-block-woocommerce-reviews-by-product wc-block-reviews-by-product has-image has-name has-date has-rating has-content\"\n\tdata-image-type=\"reviewer\"\n\tdata-orderby=\"most-recent\"\n\tdata-reviews-on-page-load=\"10\"\n\tdata-reviews-on-load-more=\"10\"\n\tdata-show-load-more=\"true\"\n\tdata-show-orderby=\"true\"\n\tdata-product-id=\"15\"\n></div>\n<!-- /wp:woocommerce/reviews-by-product -->\n\n<!-- wp:woocommerce/reviews-by-category {\"editMode\":false,\"categoryIds\":[16]} -->\n<div\n\tclass=\"wp-block-woocommerce-reviews-by-category wc-block-reviews-by-category has-image has-name has-date has-rating has-content has-product-name\"\n\tdata-image-type=\"reviewer\"\n\tdata-orderby=\"most-recent\"\n\tdata-reviews-on-page-load=\"10\"\n\tdata-reviews-on-load-more=\"10\"\n\tdata-show-load-more=\"true\"\n\tdata-show-orderby=\"true\"\n\tdata-category-ids=\"16\"\n></div>\n<!-- /wp:woocommerce/reviews-by-category -->\n\n<!-- wp:woocommerce/all-reviews -->\n<div\n\tclass=\"wp-block-woocommerce-all-reviews wc-block-all-reviews has-image has-name has-date has-rating has-content has-product-name\"\n\tdata-image-type=\"reviewer\"\n\tdata-orderby=\"most-recent\"\n\tdata-reviews-on-page-load=\"10\"\n\tdata-reviews-on-load-more=\"10\"\n\tdata-show-load-more=\"true\"\n\tdata-show-orderby=\"true\"\n></div>\n<!-- /wp:woocommerce/all-reviews -->\n\n<!-- wp:search {\"label\":\"Search\",\"placeholder\":\"Search products…\",\"buttonText\":\"Search\",\"query\":{\"post_type\":\"product\"}} /-->\n\n<!-- wp:woocommerce/mini-cart /-->\n\n<!-- wp:woocommerce/customer-account {\"iconClass\":\"wc-block-customer-account__account-icon\"} /-->\n\n<!-- wp:woocommerce/all-products {\"columns\":3,\"rows\":3,\"alignButtons\":false,\"contentVisibility\":{\"orderBy\":true},\"orderby\":\"date\",\"layoutConfig\":[[\"woocommerce/product-image\",{\"imageSizing\":\"cropped\"}],[\"woocommerce/product-title\"],[\"woocommerce/product-price\"],[\"woocommerce/product-rating\"],[\"woocommerce/product-button\"]]} -->\n<div class=\"wp-block-woocommerce-all-products wc-block-all-products\" data-attributes=\"{&quot;alignButtons&quot;:false,&quot;columns&quot;:3,&quot;contentVisibility&quot;:{&quot;orderBy&quot;:true},&quot;isPreview&quot;:false,&quot;layoutConfig&quot;:[[&quot;woocommerce/product-image&quot;,{&quot;imageSizing&quot;:&quot;cropped&quot;}],[&quot;woocommerce/product-title&quot;],[&quot;woocommerce/product-price&quot;],[&quot;woocommerce/product-rating&quot;],[&quot;woocommerce/product-button&quot;]],&quot;orderby&quot;:&quot;date&quot;,&quot;rows&quot;:3}\"></div>\n<!-- /wp:woocommerce/all-products -->\n\n```\n\n----------------------------------------\n\nTITLE: Accessing CLI Help\nDESCRIPTION: Command to display help information for the release candidate (rc) command.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/release-posts/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm release-post rc --help\n```\n\n----------------------------------------\n\nTITLE: Loading WooCommerce Checkout Fields\nDESCRIPTION: Code that demonstrates how checkout fields are loaded from different sources and added to the checkout_fields array. This includes billing, shipping, account, and order fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$this->checkout_fields['billing']  = $woocommerce->countries->get_address_fields( $this->get_value( 'billing_country' ), 'billing_' );\n$this->checkout_fields['shipping'] = $woocommerce->countries->get_address_fields( $this->get_value( 'shipping_country' ), 'shipping_' );\n$this->checkout_fields['account']  = array(\n    'account_username'   => array(\n        'type'        => 'text',\n        'label'       => __( 'Account username', 'woocommerce' ),\n        'placeholder' => _x( 'Username', 'placeholder', 'woocommerce' ),\n    ),\n    'account_password'   => array(\n        'type'        => 'password',\n        'label'       => __( 'Account password', 'woocommerce' ),\n        'placeholder' => _x( 'Password', 'placeholder', 'woocommerce' ),\n        'class'       => array( 'form-row-first' )\n    ),\n    'account_password-2' => array(\n        'type'        => 'password',\n        'label'       => __( 'Account password', 'woocommerce' ),\n        'placeholder' => _x( 'Password', 'placeholder', 'woocommerce' ),\n        'class'       => array( 'form-row-last' ),\n        'label_class' => array( 'hidden' )\n    ),\n);\n$this->checkout_fields['order']   = array(\n    'order_comments' => array(\n        'type'        => 'textarea',\n        'class'       => array( 'notes' ),\n        'label'       => __( 'Order Notes', 'woocommerce' ),\n        'placeholder' => _x( 'Notes about your order, e.g. special notes for delivery.', 'placeholder', 'woocommerce' )\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Reviews Count in Reviews by Product Selector - WooCommerce Blocks - Markdown\nDESCRIPTION: This snippet outlines the process to confirm that review counts are displayed next to product names in the Reviews by Product block selector within WooCommerce Blocks. Steps cover adding the block, verifying UI changes, inspecting aria-label values for accessibility, and screenshots for visual confirmation. Testing requires the block available with reviews assigned to products, and outputs are based on visual and accessibility verification.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Reviews by Product: fix reviews count not appearing in product selector [#11976](https://github.com/woocommerce/woocommerce-blocks/pull/11976)\n\n1. Create a post or page.\n2. Add the Reviews by Product block.\n3. Verify the number of reviews next to the product names:\n\n<img src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3616980/099d4c8a-c2bb-4615-9006-c3283924f768\" alt=\"\" width=\"646\" />\n\n4. Using the browser Inspector (<kbd>F12</kbd>), select one of the checkboxes.\n5. Verify the value of the `aria-label` shows the correct value (`<product_name>, has <reviews_count> reviews`). Ie: `Hoodie with Logo, has 1 review`.\n\n<img src=\"https://github.com/woocommerce/woocommerce-blocks/assets/3616980/afc4aeaa-6fea-4fac-ad54-2e03f8e02e1a\" alt=\"\" width=\"321\" />\n```\n\n----------------------------------------\n\nTITLE: Updating Cart with extensionCartUpdate in JavaScript\nDESCRIPTION: This JavaScript snippet shows how to use the extensionCartUpdate function to send cart update data to the server, specifically for handling a checkbox state change.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/faq.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { extensionCartUpdate } = window.wc.blocksCheckout;\n\nconst onChange = ( checked ) => {\n    extensionCartUpdate(\n        {\n            namespace: 'extension-unique-namespace',\n            data: {\n                checked\n            }  \n        } \n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing WooCommerce Rating Component Example - JSX\nDESCRIPTION: Demonstrates how to import and implement the Rating component from WooCommerce components package. The example shows basic usage with rating value, size, and total stars parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/storybook/stories/docs/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Rating } from '@woocommerce/components';\n\nexport default function MyProductRating() {\n\treturn <Rating rating={ 4.5 } size={ 18 } totalStars={ 5 } />;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Strict Equality Comparison Operator\nDESCRIPTION: Example of the strict equality (===) operator, which returns true if the operands are equal and of the same type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n1 === 1\n```\n\n----------------------------------------\n\nTITLE: Managing Request Headers with k6 in WooCommerce Tests\nDESCRIPTION: Headers are managed in a separate headers.js file for centralized control. Headers can be imported and used across multiple requests, with the ability to add request-specific headers as needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nheaders.js\n```\n\n----------------------------------------\n\nTITLE: WooCommerce No Products Found Hook\nDESCRIPTION: Action hook that fires when no products are found, typically used to display custom no-products-found content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_18\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_no_products_found' )\n```\n\n----------------------------------------\n\nTITLE: Importing WordPress i18n Functions in TypeScript\nDESCRIPTION: Demonstrates how to import translation functions from the WordPress i18n package in TypeScript files. These functions enable internationalization in JavaScript/TypeScript code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-JS-TS-files.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst { sprintf, _n } = window.wp.i18n;\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Auditing Order Administration Screen Functions\nDESCRIPTION: This regular expression helps identify code that interacts with WordPress order administration screens. These functions need to be updated to support the new HPOS-specific order administration screens in WooCommerce.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_5\n\nLANGUAGE: regexp\nCODE:\n```\npost_updated_messages|do_meta_boxes|enter_title_here|edit_form_before_permalink|edit_form_after_title|edit_form_after_editor|submitpage_box|submitpost_box|edit_form_advanced|dbx_post_sidebar|manage_shop_order_posts_columns|manage_shop_order_posts_custom_column\n```\n\n----------------------------------------\n\nTITLE: Removing a Transient Notice in WooCommerce (PHP)\nDESCRIPTION: This snippet shows how to remove a transient notice in WooCommerce by specifying its ID. This can be done before the admin_enqueue_scripts hook is run.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/transient-notices.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\\Automattic\\WooCommerce\\Admin\\Features\\TransientNotices::remove( 'my-notice' );\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Core E2E Environment - WP CLI - Shell\nDESCRIPTION: This shell script initializes a local WordPress site with WooCommerce for E2E testing using WP CLI commands. It installs WordPress, activates necessary plugins and themes, and creates a customer user. Dependencies include WP CLI, the target WordPress environment, and network access. Parameters customize admin and user credentials; output is a configured site ready for tests. Adjustments may be needed if your configuration or user info differ.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/external.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwp core install --url=http://localhost:8084 --admin_user=admin --admin_password=password --admin_email=wooadmin@example.org\nwp plugin activate woocommerce\nwp theme install twentynineteen --activate\nwp user create customer customer@woocommercecoree2etestsuite.com \\\n\t--user_pass=password \\\n\t--role=subscriber \\\n\t--first_name='Jane' \\\n\t--last_name='Smith'\n```\n\n----------------------------------------\n\nTITLE: Changing WooCommerce Gallery Thumbnail Size in PHP using WordPress Filter\nDESCRIPTION: This code demonstrates how to use the 'woocommerce_gallery_thumbnail_size' filter to change the gallery thumbnail size to use WordPress's default 'thumbnail' size instead of WooCommerce's custom size.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/image-sizes.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_gallery_thumbnail_size', function( $size ) {\n    return 'thumbnail';\n} );\n```\n\n----------------------------------------\n\nTITLE: Modifying Return to Shop Button Redirect URL in WooCommerce (PHP)\nDESCRIPTION: This snippet changes the redirect URL for the Return To Shop button in the cart to a specific category page. It uses the 'woocommerce_return_to_shop_redirect' filter with a custom priority to ensure it overrides default behavior.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Changes the redirect URL for the Return To Shop button in the cart.\n */\nfunction wc_empty_cart_redirect_url() {\n    return 'http://example.com/category/specials/';\n}\n\nadd_filter( 'woocommerce_return_to_shop_redirect', 'wc_empty_cart_redirect_url', 20 );\n```\n\n----------------------------------------\n\nTITLE: Fetching Categories in TypeScript\nDESCRIPTION: This code snippet shows the endpoint used to retrieve a list of categories from WooCommerce.com. It uses the 'wp-json/wccom-extensions/1.0/categories' endpoint and is implemented in the fetchCategories() function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n\"wp-json/wccom-extensions/1.0/categories\"\n```\n\n----------------------------------------\n\nTITLE: Running WooCommerce Unit Tests\nDESCRIPTION: Command to execute the WooCommerce unit tests. This runs the test:unit script defined in the project's composer configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/development.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run test:unit\n```\n\n----------------------------------------\n\nTITLE: Saving WooCommerce Settings in JavaScript\nDESCRIPTION: This function saves the current WooCommerce settings page. It's used after making changes to WooCommerce settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_29\n\nLANGUAGE: JavaScript\nCODE:\n```\nsettingsPageSaveChanges()\n```\n\n----------------------------------------\n\nTITLE: Comparing Order Data with Differences in Table Format\nDESCRIPTION: Shows a detailed comparison of differences between HPOS and legacy versions of an order in table format, highlighting specific fields that differ.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100126\nWarning: Differences found for order 100126:\n+--------------------+---------------------------+---------------------------+\n| property           | hpos                      | post                      |\n+--------------------+---------------------------+---------------------------+\n| status             | completed                 | pending                   |\n| total              | 567.25                    | 267.25                    |\n| date_modified      | 2024-04-04T15:32:27+00:00 | 2024-04-04T19:00:26+00:00 |\n| billing_first_name | Hans                      | Jans                      |\n| post_only_meta     |                           | why not?                  |\n+--------------------+---------------------------+---------------------------+\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Cart Items Validation Hook\nDESCRIPTION: Legacy hook for validating cart items. This hook is deprecated as it encourages usage of wc_add_notice instead of wp errors for API compatibility.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_check_cart_items' )\n```\n\n----------------------------------------\n\nTITLE: Running WooCommerce Storybook Development Server\nDESCRIPTION: Command to launch the Storybook development environment for WooCommerce UI components. This runs a local server that automatically opens in the browser for testing and developing components in isolation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/ux-guidelines-extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=@woocommerce/storybook watch:build\n```\n\n----------------------------------------\n\nTITLE: Dispatching receiveCollectionError Action in JavaScript\nDESCRIPTION: Illustrates how to dispatch the receiveCollectionError action to update the store with error information for a collection request.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = useDispatch( COLLECTIONS_STORE_KEY );\ndispatch( receiveCollectionError( namespace, resourceName, queryString, ids, error ) );\n```\n\n----------------------------------------\n\nTITLE: Enqueuing Store Management Link Script in PHP\nDESCRIPTION: Function to enqueue a custom JavaScript file for adding store management links in WooCommerce admin. Includes wp-hooks dependency and proper priority setting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction custom_store_management_link() {\n    wp_enqueue_script(\n        'add-my-custom-link',\n        plugins_url( '/dist/add-my-custom-link.js', __FILE__ ),\n        array( 'wp-hooks' ),\n        10\n    );\n}\nadd_action( 'admin_enqueue_scripts', 'custom_store_management_link' );\n```\n\n----------------------------------------\n\nTITLE: Ensuring String Containment in JavaScript\nDESCRIPTION: Shows the usage of the mustContain function, which ensures that a given value contains a specific string. If the required string is not found, an error is thrown.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/utils/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// Aliased import\nimport { mustContain } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { mustContain } = wc.blocksCheckout;\n\nmustContain( 'This is a string containing a <price />', '<price />' ); // This will not throw an error\nmustContain( 'This is a string', '<price />' ); // This will throw an error\n```\n\n----------------------------------------\n\nTITLE: Using Multiplication Arithmetic Operator\nDESCRIPTION: Example of the multiplication (*) operator, which returns the product of two operands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\n2 * 3\n```\n\n----------------------------------------\n\nTITLE: Stopping the Test Environment using npm (sh)\nDESCRIPTION: Stops the local test environment previously initiated with `npm run wp-env start` for running deprecated end-to-end tests. This command should be run when testing is complete to shut down the environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/javascript-testing.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run wp-env stop\n```\n\n----------------------------------------\n\nTITLE: Validating Email Input in WooCommerce Checkout Fields with PHP\nDESCRIPTION: Example of a validate_callback function that checks if a field value is a valid email address. Returns a WP_Error if validation fails, which is displayed to the user during checkout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n'validate_callback' => function( $field_value ) {\n\tif ( ! is_email( $field_value ) ) {\n\t\treturn new WP_Error( 'invalid_alt_email', 'Please ensure your alternative email matches the correct format.' );\n\t}\n},\n```\n\n----------------------------------------\n\nTITLE: Suppressing Console Messages in Jest Setup Script\nDESCRIPTION: Demonstrates using the `addConsoleSuppression` function within a Jest setup script (e.g., `tests/e2e/config/jest.setup.js`, added in v0.2.3) to filter console messages from test output. The first example suppresses a specific message string after its first occurrence, while the second suppresses another string completely. Useful for hiding expected or noisy console logs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\naddConsoleSuppression( 'suppress this after the first instance' );\naddConsoleSuppression( 'suppress this completely', false );\n```\n\n----------------------------------------\n\nTITLE: Modifying Cart Product Prices via WooCommerce Hook - PHP\nDESCRIPTION: This PHP snippet sets the price of every product in the WooCommerce cart to 50 using the 'woocommerce_before_calculate_totals' action hook. It should be added via the 'Code Snippets' WordPress plugin or in a custom plugin, and it requires that WooCommerce is active on the site. Parameters: '$cart_object' is the cart instance being processed. This function affects all cart items and removes any previous discounts or custom prices, with its effects visible in both the Cart and Checkout Block pages. This is primarily for development or debugging use and not recommended for production environments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1150.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction calc_price( $cart_object ) {\\n    foreach ( $cart_object->get_cart() as $hash => $value ) {\\n        $value['data']->set_price( 50 );\\n    }\\n}\\nadd_action( 'woocommerce_before_calculate_totals', 'calc_price' );\n```\n\n----------------------------------------\n\nTITLE: Auto-Generated Test Spec File for Multiple Modular Test Flows - JavaScript\nDESCRIPTION: Demonstrates a test spec file generated automatically to execute multiple modular test functions from a package. Each function is imported and called to register its corresponding Jest test suite. Used for hands-free scaffolded execution of multiple E2E scenarios in the WooCommerce E2E setup. Assumes that the imported functions are properly exported from the referenced package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/test-packages.md#2025-04-23_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n/* This file was auto-generated by the command `npx wc-e2e install your-package-name`. */\nimport { testSecondCriticalFlow, testThirdCriticalFlow } from 'your-package-name';\n\ntestSecondCriticalFlow();\ntestThirdCriticalFlow();\n```\n\n----------------------------------------\n\nTITLE: Using Less Than or Equal Comparison Operator\nDESCRIPTION: Example of the less than or equal (<=) operator, which returns true if the left operand is less than or equal to the right operand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n2 <= 2\n```\n\n----------------------------------------\n\nTITLE: Implementing Single Context Notice Container in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to use StoreNoticesContainer component to display notices for a single context. This example shows notices specifically for payment-related notifications.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/notices.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst { StoreNoticesContainer } = window.wc.blocksCheckout;\n\nconst PaymentErrors = () => {\n\treturn <StoreNoticesContainer context=\"wc/payment\" />;\n};\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Customer Registration Validation Hook\nDESCRIPTION: Pre-registration hook that allows adding extra validation logic before customer accounts are created.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_register_post', string $username, string $user_email, \\WP_Error $errors )\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for WooCommerce Dependency Extraction\nDESCRIPTION: Demonstrates how to include the WooCommerce Dependency Extraction Webpack Plugin in a Webpack configuration file. This setup allows for aliased imports of the Checkout package components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\nconst WooCommerceDependencyExtractionWebpackPlugin = require( '@woocommerce/dependency-extraction-webpack-plugin' );\n\nmodule.exports = {\n\t// …snip\n\tplugins: [ new WooCommerceDependencyExtractionWebpackPlugin() ],\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Price Slider Background Color for IE11 Fallback (CSS)\nDESCRIPTION: This CSS snippet provides a fallback for customizing the WooCommerce Filter by Price block's slider color specifically for Internet Explorer 11. It uses an IE11-specific media query (`@media all and ( -ms-high-contrast: none ), ( -ms-high-contrast: active )`) to target the browser and directly sets the `background` color of the progress bar element (`.wc-block-components-price-slider__range-input-progress`) to `#ee6948`, bypassing the CSS custom property used in modern browsers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/filter-blocks.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/* Target only IE11 */\n@media all and ( -ms-high-contrast: none ), ( -ms-high-contrast: active ) {\n\t.wc-block-components-price-slider__range-input-progress {\n\t\tbackground: #ee6948;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Service Provider with Auto-Arguments in PHP\nDESCRIPTION: Example of a service provider that registers multiple classes and uses auto-arguments resolution through reflection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nnamespace Automattic\\WooCommerce\\Internal\\DependencyManagement\\ServiceProviders;\n\nuse Automattic\\WooCommerce\\Internal\\DependencyManagement\\AbstractServiceProvider;\nuse Automattic\\WooCommerce\\TheClassNamespace\\TheClass;\nuse Automattic\\WooCommerce\\TheDependencyNamespace\\TheDependencyClass;\n\nclass TheClassServiceProvider extends AbstractServiceProvider {\n\n    protected $provides = array(\n        TheClass::class,\n        TheDependencyClass::class\n    );\n\n    public function register() {\n        $this->share( TheDependencyClass::class );\n        $this->share_with_auto_arguments( ActionsProxy::class );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Item in JavaScript using WooCommerce Cart Store\nDESCRIPTION: This snippet demonstrates how to use the getCartItem selector from the WooCommerce cart store to retrieve a specific cart item by its key.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst cartItem = store.getCartItem( cartItemKey );\n```\n\n----------------------------------------\n\nTITLE: Registering Payment Method Extension Callbacks in WooCommerce Blocks (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to register callbacks for a payment method extension in WooCommerce Blocks, allowing conditional availability of specific payment methods based on billing data. It depends on the global wc and wcBlocksRegistry objects provided by WooCommerce Gutenberg Blocks, and requires that the environment already has these script handles available (e.g., in admin or the frontend with Blocks enabled). The callback function checks if billing data matches specific criteria (e.g., first name is 'Alexandra') to enable Cash on Delivery. Input is an argument object containing billingData; output is a boolean determining method availability. Limitations: Should be run in an environment where the registry is already loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/600.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nwc.wcBlocksRegistry.registerPaymentMethodExtensionCallbacks(\n\t'woocommerce-marketplace-extension',\n\t{\n\t\tcod: ( arg ) => {\n\t\t\tconsole.log( 'checking COD' );\n\t\t\treturn arg.billingData.first_name === 'Alexandra';\n\t\t},\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring web.config for WooCommerce Endpoints on Windows Servers\nDESCRIPTION: This XML configuration for the web.config file on Windows servers allows WooCommerce endpoints to function correctly. It sets up URL rewriting rules to handle WordPress and WooCommerce URLs properly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/troubleshooting-endpoints.md#2025-04-23_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <handlers accessPolicy=\"Read, Execute, Script\" />\n    <rewrite>\n    <rules>\n      <rule name=\"wordpress\" patternSyntax=\"Wildcard\">\n        <match url=\"*\" />\n        <conditions>\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n        </conditions>\n        <action type=\"Rewrite\" url=\"index.php\" />\n      </rule>\n    </rules>\n    </rewrite>\n  </system.webServer>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Combining array_flatten and array_search Transformers (PHP)\nDESCRIPTION: Demonstrates how to use array_flatten and array_search transformers together to flatten a nested array and then search for a specific value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_flatten\",\n    },\n    {\n        \"use\": \"array_search\",\n        \"arguments\": {\n            \"key\": \"member2\"\n        }\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: E2E Tests Timeout Error\nDESCRIPTION: Error showing timeout issues when running E2E tests, typically caused by a broken build. The solution is to generate a fresh build with npm commands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n Store owner can complete onboarding wizard › can complete the product types section\n\n    TimeoutError: waiting for function failed: timeout 30000ms exceeded\n\n      1 | export const waitForElementCount = function ( page, domSelector, count ) {\n    > 2 | \treturn page.waitForFunction(\n        | \t            ^\n      3 | \t\t( domSelector, count ) => {\n      4 | \t\t\treturn document.querySelectorAll( domSelector ).length === count;\n      5 | \t\t},\n```\n\n----------------------------------------\n\nTITLE: Adding New Tool to Existing Options Tab\nDESCRIPTION: Shows how to add a new tool component to the existing Options tab using WordPress filters. Adds a simple tool with a description and execution button.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/EXTENDING-WC-ADMIN-HELPER.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\nconst NewTool = () => (\n\t<>\n\t\t<strong>New tool</strong>\n\t\t<p>Description</p>\n\t\t<button>Execute</button>\n\t</>\n);\naddFilter(\n\t'woocommerce_admin_test_helper_tab_options',\n\t'wath',\n\t( entries ) => [\n\t\t...entries,\n\t\t<NewTool/>\n\t]\n);\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Shop Orders via CLI\nDESCRIPTION: Lists WooCommerce shop orders. Provides extensive filtering and pagination options including `--context`, `--page`, `--per_page`, `--search`, date ranges (`--after`, `--before`), exclusion/inclusion (`--exclude`, `--include`), sorting (`--order`, `--orderby`), filtering by `status`, `customer`, `product`, and field limiting (`--fields`, `--field`). Output format can be specified using `--format`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order list\n```\n\n----------------------------------------\n\nTITLE: Styling Global Component Price Format in WooCommerce Blocks\nDESCRIPTION: Example of applying styles to all formatted money amounts across WooCommerce blocks using the component-specific class prefix.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/css-styling.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* This will apply to all block prices */\n.wc-block-components-formatted-money-amount {\n\tfont-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for Delete All Cart Coupons\nDESCRIPTION: Shows an example JSON response after successfully deleting all coupons from the cart. The expected response is typically an empty JSON array, indicating no coupons remain.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collection Last Modified Date in JavaScript\nDESCRIPTION: Illustrates how to use the getCollectionLastModified selector to retrieve the last modified date for a collection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( COLLECTIONS_STORE_KEY );\nconst lastModified = store.getCollectionLastModified( state, namespace, resourceName, queryString );\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Custom Task Plugin\nDESCRIPTION: Command to build the example plugin that adds a custom task to the WooCommerce onboarding wizard. This creates an add-task plugin in the project's plugins directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/extensions/add-task/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nWC_EXT=add-task pnpm --filter=@woocommerce/admin-library example\n```\n\n----------------------------------------\n\nTITLE: Checking for Express Payment Start\nDESCRIPTION: Example showing how to determine if an express payment method has been clicked using the isExpressPaymentStarted selector.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst isExpressPaymentStarted = store.isExpressPaymentStarted();\n```\n\n----------------------------------------\n\nTITLE: Using _n() Translation Function for Pluralization\nDESCRIPTION: Demonstrates the _n() function which translates and retrieves singular or plural forms based on a number. This is essential for handling grammatically correct pluralization in different languages.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-JS-TS-files.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Schema\nconst translation = _n( string single, string plural, int number, string domain = 'default' );\n\n// Example\nconst { sprintf, _n } = window.wp.i18n;\n\nconst translation = sprintf(\n    /* translators: %s number of products in cart. */\n    _n(\n        '%d product',\n        '%d products',\n        Math.abs( category->count ),\n        'woo-gutenberg-products-block'\n    ),\n    Math.abs( category->count )\n);\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Settings for WooCommerce E2E Container\nDESCRIPTION: JSON object representing the default configuration settings used by the `@woocommerce/e2e-environment` built-in container. It includes the default site URL, an optional appName for Docker container prefixing, and default admin user credentials. These settings can be customized.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"http://localhost:8084/\",\n  \"appName\": \"{repository-folder-name}\",\n  \"users\": {\n    \"admin\": {\n      \"username\": \"admin\",\n      \"password\": \"password\",\n      \"email\": \"admin@woocommercecoree2etestsuite.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in JavaScript\nDESCRIPTION: Demonstrates how to retrieve registered data on the client side using the wcSettings API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/block-assets.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nwc.wcSettings.getSetting( 'key' );\n```\n\n----------------------------------------\n\nTITLE: Customizing WooCommerce Cart Submit Container Shadow Color\nDESCRIPTION: CSS for modifying the top shadow color of the Cart submit container. This approach uses the color property which affects the currentColor value used in the shadow.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/cart-and-checkout.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-cart__submit-container::before {\n\tcolor: rgba( 214, 209, 203, 0.5 );\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Validation Errors in JavaScript\nDESCRIPTION: Example showing how to clear all validation errors using the clearValidationErrors action without parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = dispatch( validationStore );\nstore.clearValidationErrors();\n```\n\n----------------------------------------\n\nTITLE: Using Comments in Expressions\nDESCRIPTION: Example of using comments in expressions. Comments are treated as whitespace and ignored by the parser.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n/* This is a comment */\n```\n\n----------------------------------------\n\nTITLE: Initializing a Blank Changelog File (changelog.md) - Text\nDESCRIPTION: This snippet provides the required starting contents for a new package changelog in WooCommerce. The 'changelog.md' file announces adherence to Semantic Versioning and serves as an official log of changes across package versions. No changes are listed initially; developers append entries as the package evolves.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/README.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n# Changelog\n\nThis project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n```\n\n----------------------------------------\n\nTITLE: Implementing Slot Component in WooCommerce Blocks\nDESCRIPTION: Demonstrates how to implement and use the Slot component returned by createSlotFill, including customization options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/slot/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n// Aliased import\nimport { createSlotFill } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { createSlotFill } = wc.blocksCheckout;\n\nconst slotName = '__experimentalSlotName';\n\nconst { Fill: FillComponent, Slot: SlotComponent } = createSlotFill( slotName );\n\nconst Slot = ( { className } ) => {\n\treturn <SlotComponent className={ 'my-slot-component' } />;\n};\n\n// Assign your Slot to your Fill.\nFillComponent.Slot = Slot;\n\nexport default FillComponent;\n```\n\n----------------------------------------\n\nTITLE: Defining array_keys Transformer (PHP)\nDESCRIPTION: Shows how to define the array_keys transformer in PHP. This transformer returns the keys from an input array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_keys\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Exporting WooCommerce Blueprints via CLI - Markdown\nDESCRIPTION: Explains how to export WooCommerce blueprints to a target file using CLI commands, supporting selective step exportation. Essential for backup, migration, or version control of WooCommerce setups. The primary required parameter is the filename to which the blueprint will be saved, and an optional steps argument can limit the exported content.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_67\n\nLANGUAGE: markdown\nCODE:\n```\n#### wc blueprint export [save-to-filename]\n\n- `--steps` - name of steps to export.\n```\n\n----------------------------------------\n\nTITLE: Deleting All Email Logs in JavaScript\nDESCRIPTION: This function deletes all emails generated by the WP Mail Logging plugin. It's useful for cleaning up test data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeleteAllEmailLogs()\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Test User Credentials - WooCommerce Config JSON\nDESCRIPTION: This JSON snippet provides default configuration for the WooCommerce E2E test sequencer, specifying the site URL and login credentials for both admin and customer test users. It must be placed at /plugins/woocommerce/tests/e2e/config/default.json and accurately reflect the environment's user data and URL. Password changes or user renames should be updated here to prevent test failures.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/external.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"http://localhost:8084/\",\n  \"users\": {\n    \"admin\": {\n      \"username\": \"admin\",\n      \"password\": \"password\"\n    },\n    \"customer\": {\n      \"username\": \"customer\",\n      \"password\": \"password\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Plugins Component in React (JSX)\nDESCRIPTION: This JSX snippet demonstrates the basic usage of the <Plugins> component. It initializes the component, passing a callback function (`this.complete`) for the `onComplete` event and an array of plugin slugs (`jetpack`, `woocommerce-services`) to the `pluginSlugs` prop to specify which plugins should be installed. Refer to the props table for other configuration options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/plugins/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Plugins\n\tonComplete={ this.complete }\n\tpluginSlugs={ [ 'jetpack', 'woocommerce-services' ] }\n/>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Test Timeout via Environment Variable\nDESCRIPTION: Explains how to override the default Jest and Puppeteer test timeout by setting the `DEFAULT_TIMEOUT_OVERRIDE` environment variable with a value in milliseconds when running tests via `npx wc-e2e test:e2e`. This example sets the timeout to 35000ms (35 seconds), affecting methods like `page.setDefaultTimeout()` and `page.setDefaultNavigationTimeout()`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nDEFAULT_TIMEOUT_OVERRIDE=35000 npx wc-e2e test:e2e\n```\n\n----------------------------------------\n\nTITLE: Customizing Selection with Custom Item Types in SelectControl - React - JavaScript\nDESCRIPTION: This example shows how to customize the SelectControl component with a user-defined item shape using TypeScript-like type parameters and custom extraction functions for labels and values. It uses customItems with id, name, and optional email properties, and provides getItemLabel and getItemValue callbacks for extracting relevant info from complex item shapes. Requires React, TypeScript definitions or type assertions, and SelectControl's generic support.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/experimental-select-control/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst [ selected, setSelected ] =\\n\\tuseState< SelectedType< Array< CustomItemType > > >( null );\\n\\nconst customItems = [\\n  { id: 1, name: 'Joe', email: 'joe@notreally.com' },\\n  { id: 2, name: 'Jen' },\\n];\\n\\n<SelectControl < CustomItemType >\\n  multiple\\n  items={ customItems }\\n  label=\\\"CustomItemType value\\\"\\n  selected={ selected }\\n  onSelect={ ( item ) =>\\n    setSelected(\\n      Array.isArray( selected )\\n        ? [ ...selected, item ]\\n        : [ item ]\\n    )\\n  }\\n  onRemove={ ( item ) =>\\n    setSelected( selected.filter( ( i ) => i !== item ) )\\n  }\\n  getItemLabel={ ( item ) => item?.name }\\n  getItemValue={ ( item ) => String( item?.id ) }\\n/>\n```\n\n----------------------------------------\n\nTITLE: Testing `woocommerce_before_thankyou` Hook Parameter (PHP)\nDESCRIPTION: This PHP snippet defines a function `test_function_11851` that accepts an integer order ID and attaches it to the `woocommerce_before_thankyou` action hook. It's used to verify that the block checkout correctly passes an integer order ID, not an order object, to this hook as per fix #11862.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1149.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n```php\nfunction test_function_11851( int $order_id ): void {\n    printf( 'Hello, this is order %d', $order_id );\n}\nadd_action( 'woocommerce_before_thankyou', 'test_function_11851' );\n```\n```\n\n----------------------------------------\n\nTITLE: Simulating Component Interactions and Loading State in Storybook Stories with useArgs (React/TSX)\nDESCRIPTION: This code shows how to simulate user interactions—such as triggering a loading state on a Retry button—in a Storybook story. It uses useArgs from Storybook to update state and leverages a timeout (INTERACTION_TIMEOUT) to toggle the isLoading state. Inputs include current args and the onRetry handler; outputs are a component demonstration that can reflect async states. Prerequisites include importing useArgs and INTERACTION_TIMEOUT. This approach facilitates live demonstration of stateful actions but must be managed carefully to avoid inconsistent states.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript React (TSX)\nCODE:\n```\nconst Template: Story< MyComponentProps > = ( args ) => {\n\tconst [ { isLoading }, setArgs ] = useArgs();\n\n\tconst onRetry = () => {\n\t\targs.onRetry?.();\n\t\tsetArgs( { isLoading: true } );\n\n\t\tsetTimeout(\n\t\t\t() => setArgs( { isLoading: false } ),\n\t\t\tINTERACTION_TIMEOUT\n\t\t);\n\t};\n\n\treturn (\n\t\t<MyComponent { ...args } onRetry={ onRetry } isLoading={ isLoading } />\n\t);\n};\n```\n\n----------------------------------------\n\nTITLE: Documenting the ReportFilters React Component - JavaScript\nDESCRIPTION: This documentation snippet defines the props accepted by the ReportFilters component in WooCommerce, describing their types, default values, and purposes. Key dependencies alluded to include React, React-Router for path handling, and WooCommerce-specific subcomponents such as DatePicker, FilterPicker, and AdvancedFilters. The config options allow flexible display of date pickers and various filter types, with callbacks for handling user actions. Inputs are passed as objects, arrays, or primitives, and expected outputs are typically function callbacks or updates to query objects; required and optional parameters are all explained in the property table.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/filters/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nName | Type | Default | Description\\n--- | --- | --- | ---\\n`advancedFilters` | Object | `{}` | Config option passed through to `AdvancedFilters`\\n`siteLocale` | string| `en_US` | The locale of the site. Passed through to `AdvancedFilters`\\n`currency` | object | {} | The currency of the site. Passed through to `AdvancedFilters`\\n`filters` | Array | `[]` | Config option passed through to `FilterPicker` - if not used, `FilterPicker` is not displayed\\n`path` | String | `null` | (required) The `path` parameter supplied by React-Router\\n`query` | Object | `{}` | The query string represented in object form\\n`showDatePicker` | Boolean | `true` | Whether the date picker must be shown\\n`onDateSelect` | Function | `() => {}` | Function to be called after date selection\\n`onFilterSelect` | Function | `null` | Function to be called after filter selection\\n`onAdvancedFilterAction` | Function | `null` | Function to be called after an advanced filter action has been taken\\n`storeDate` | object | `null` | (required) Date utility function object bound to store settings.\n```\n\n----------------------------------------\n\nTITLE: Installing @woocommerce/ai package using PNPM (Bash)\nDESCRIPTION: This command utilizes the PNPM package manager to download and install the `@woocommerce/ai` module. The `--save` flag ensures that the module is added as a dependency to the project's `package.json` file. Requires `pnpm` to be installed and accessible in the environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/ai/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/ai --save\n```\n\n----------------------------------------\n\nTITLE: Styling WooCommerce Order Summary Item Quantity Badge\nDESCRIPTION: CSS for customizing the appearance of the quantity badge that appears next to product images in the Order Summary section of the Checkout block. This example changes background, border, shadow, and text color.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/block-theme-development/cart-and-checkout.md#2025-04-23_snippet_4\n\nLANGUAGE: css\nCODE:\n```\n.wc-block-components-order-summary-item__quantity {\n\tbackground-color: #f9f4ee;\n\tborder-color: #4b3918;\n\tbox-shadow: 0 0 0 2px #f9f4ee;\n\tcolor: #4b3918;\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Checkout Shortcode Implementation\nDESCRIPTION: The shortcode used to display the WooCommerce checkout page when not using the block-based checkout. This shortcode renders the traditional checkout form without pickup locations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/local-pickup.md#2025-04-23_snippet_0\n\nLANGUAGE: shortcode\nCODE:\n```\n[woocommerce_checkout]\n```\n\n----------------------------------------\n\nTITLE: Registering a Basic Number Product Field using window.wp.element in JavaScript\nDESCRIPTION: This snippet demonstrates a basic example of registering a product field named 'number'. It directly uses `window.wp.element` for creating React elements and calls `registerProductField` with the field name and a settings object. The `render` function within the settings returns an `<InputControl type=\"number\" />` component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/product-fields/README.md#2025-04-23_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// product-field.js\n( function ( element ) {\n\tconst el = element.createElement;\n\n\tregisterProductField( 'number', {\n\t\tname: 'number',\n\t\trender: () => {\n\t\t\treturn <InputControl type=\"number\" />;\n\t\t},\n\t} );\n} )( window.wp.element );\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Debug Log Path Plugin\nDESCRIPTION: A simple WordPress plugin that changes the path of the debug log file to a custom location. This helps keep the debug log private and not publicly accessible, which is important for security.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/deprecation-in-core.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: Custom Debug Log Path\n */\n\nini_set( 'error_log', '/path/to/site/logs/debug.log' );\n```\n\n----------------------------------------\n\nTITLE: Running Workflow Commands for WooCommerce Email Editor\nDESCRIPTION: These commands are used for managing the testing environment, running tests, and checking code style. They are executed using Composer run scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run env:start                             # start testing environment\ncomposer run env:stop                              # stop testing environment\ncomposer run test:unit                             # runs all the unit tests\ncomposer run test:unit -- [path_to_tests]          # runs a single unit test or a directory of tests\ncomposer run test:integration                      # runs all the integrations tests\ncomposer run test:integration -- [path_to_tests]   # run a single integration test or a directory of tests\ncomposer code-style                                # checks the code style\n```\n\n----------------------------------------\n\nTITLE: Registering onCheckoutValidation from Global Checkout Events\nDESCRIPTION: Demonstrates how to register an observer for the onCheckoutValidation event using the global WooCommerce checkout events object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\nconst { onCheckoutValidation } = wc.blocksCheckoutEvents;\n\nuseEffect( () => {\n  const unsubscribe = onCheckoutValidation( () => true );\n  return unsubscribe;\n}, [ onCheckoutValidation ] );\n```\n\n----------------------------------------\n\nTITLE: Add to Cart Args Filter in WooCommerce Loop\nDESCRIPTION: Filter hook to modify add to cart button arguments in product loops.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_19\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_loop_add_to_cart_args' )\n```\n\n----------------------------------------\n\nTITLE: Displaying Error Response Format in WooCommerce Store API\nDESCRIPTION: Example JSON response for error scenarios when cart actions cannot be performed. Shows the standard error structure including an error code, message, and status code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"code\": \"woocommerce_rest_cart_invalid_product\",\n\t\"message\": \"This product cannot be added to the cart.\",\n\t\"data\": {\n\t\t\"status\": 400\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing `wc hpos cleanup` (Plaintext)\nDESCRIPTION: Demonstrates using the `--force` flag with `wp wc hpos cleanup` for order ID 100126 to bypass the safety check that prevents deletion when legacy data appears more recent. This allows proceeding with the removal of the legacy post data despite potential recency differences.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos cleanup 100126 --force\nStarting cleanup for 1 order...\nHPOS cleanup  100% [=====================================================================================================================] 0:00 / 0:00\nSuccess: Cleanup completed for 1 order.\n```\n\n----------------------------------------\n\nTITLE: Building Woo AI Plugin Directory\nDESCRIPTION: Commands to install dependencies and build the plugin directory. This is useful when loading the plugin via symlink.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woo-ai/DEVELOPMENT.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\npnpm install\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Fetching a Layout Template with useLayoutTemplate Hook in JavaScript/React\nDESCRIPTION: Shows how to use the `useLayoutTemplate` hook within a React functional component to retrieve a specific layout template by its ID from the server. It utilizes object destructuring to get the `layoutTemplate` data and the `isResolving` boolean state, conditionally rendering content based on whether the template is loading, loaded, or not found.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/block-templates/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n```js\nimport { useLayoutTemplate } from '@woocommerce/block-templates';\n\nexport function Example() {\n\tconst { layoutTemplate, isResolving } =\n\t\tuseLayoutTemplate( 'my-layout-template' );\n\n\treturn (\n\t\t<div>\n\t\t\t{ isResolving && <p>Loading layout template...</p> }\n\t\t\t{ layoutTemplate && (\n\t\t\t\t<p>{ JSON.stringify( layoutTemplate, null, 4 ) }</p>\n\t\t\t) }\n\t\t\t{ ! layoutTemplate && ! isResolving && (\n\t\t\t\t<p>'Layout template does not exist!'</p>\n\t\t\t) }\n\t\t</div>\n\t);\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Properties in Context Variables\nDESCRIPTION: Example showing how to access nested properties of objects from the provided context using dot notation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst result = evaluate( 'foo.bar', { foo: { bar: 1 } } );\n\nconsole.log( result ); // 1\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimental_woocommerce_blocks_payment_gateway_features_list` PHP Hook\nDESCRIPTION: A PHP filter hook prefixed with `__experimental` that allows modification of the features supported by the PayPal Standard payment gateway integration within WooCommerce Blocks. It enables extending or altering the default supported features list.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Hook name:\n__experimental_woocommerce_blocks_payment_gateway_features_list\n```\n\n----------------------------------------\n\nTITLE: Customizing HTML Sanitization in Shipping Package Title - WooCommerce Block - TypeScript JSX\nDESCRIPTION: This TypeScript/JSX snippet shows how to adjust the 'dangerouslySetInnerHTML' sanitization for a block component in WooCommerce. By providing an explicit configuration to the 'sanitizeHTML' utility, only anchor tags are allowed in the package title, ensuring that certain HTML markup is preserved while maintaining security. This edit should be made in 'shipping-rates-control-package/index.tsx'. Dependencies include React, TypeScript, and the sanitizeHTML utility. The key parameter is 'tags', restricting allowed elements to anchors, and inputs must be trusted/sanitized user data. Outputs are HTML-rendered package titles compliant with allowed tags.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/860.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<div\n\tclassName=\"wc-block-components-shipping-rates-control__package-title\"\n\tdangerouslySetInnerHTML={ sanitizeHTML( packageData.name, {\n\t\ttags: [ 'a' ],\n\t} ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining array_flatten Transformer (PHP)\nDESCRIPTION: Shows how to define the array_flatten transformer in PHP. This transformer flattens a nested array structure into a single-level array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_flatten\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: PTE Request Template for WooCommerce Blocks\nDESCRIPTION: A template for requesting Project Translation Editor (PTE) permissions for the WooCommerce Blocks plugin. It includes the format for specifying locales and usernames as well as necessary project information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-management.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPTE Request for WooCommerce Blocks\n\nI am the plugin co-author for WooCommerce Blocks, and I'd like to be able to approve translation for our plugin. Please add my WordPress.org user account as translation editor for their respective locales:\n\nName: WooCommerce Blocks\nURL: https://wordpress.org/plugins/woo-gutenberg-products-block/\n\no #ar – @username\no #bn_BD – @username, @username\no #da_DK – @username\no #de_CH – @username\no etc...\n\nIf you have any questions, just comment here. Thank you!\n\n#editor-requests\n```\n\n----------------------------------------\n\nTITLE: Registering a Container Using the Store Notices Store\nDESCRIPTION: Example of using the registerContainer action to register a new container for notices. The containerContext parameter is the identifier for the container to be registered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/store-notices.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storeNoticesStore } from '@woocommerce/block-data';\n\ndispatch( storeNoticesStore ).registerContainer( 'someContainerContext' );\n```\n\n----------------------------------------\n\nTITLE: Disabling Debug Mode in WordPress Configuration\nDESCRIPTION: A configuration snippet for wp-config.php that disables debug mode in WordPress. This is recommended for production environments to prevent displaying deprecation warnings and other notices to end users.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/deprecation-in-core.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_DEBUG', false );\n```\n\n----------------------------------------\n\nTITLE: Getting a Specific WooCommerce Shop Coupon via WC-CLI in Bash\nDESCRIPTION: Retrieves details for a specific WooCommerce shop coupon using its unique identifier (`id`). Options include specifying the request context (`--context`), limiting the response to specific fields (`--fields`, `--field`), and controlling the output format (`--format`, default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc shop_coupon get <id> [options]\n```\n\n----------------------------------------\n\nTITLE: Loading JS/TS Translation Fallbacks in WooCommerce Blocks\nDESCRIPTION: Function that handles fallback translations for JavaScript/TypeScript files by attempting to load translations from WooCommerce Core when WooCommerce Blocks translations are not available. It checks multiple locations for translation files and falls back to Core translations if needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * WordPress will look for translation in the following order:\n * - wp-content/plugins/woocommerce/client/blocks/languages/woo-gutenberg-products-block-{locale}-{handle}.json\n * - wp-content/plugins/woocommerce/client/blocks/languages/woo-gutenberg-products-block-{locale}-{md5-handle}.json\n * - wp-content/languages/plugins/woo-gutenberg-products-block-{locale}-{md5-handle}.json\n *\n * We check if the last one exists, and if it doesn't we try to load the\n * corresponding JSON file from the WC Core.\n *\n * @param string|false $file   Path to the translation file to load. False if there isn't one.\n * @param string       $handle Name of the script to register a translation domain to.\n * @param string       $domain The text domain.\n *\n * @return string|false        Path to the translation file to load. False if there isn't one.\n */\nfunction load_woocommerce_core_js_translation( $file, $handle, $domain ) {\n\tif ( 'woo-gutenberg-products-block' !== $domain ) {\n\t\treturn $file;\n\t}\n\n\t$lang_dir = WP_LANG_DIR . '/plugins';\n\n\t/**\n\t * We only care about the translation file of the feature plugin in the\n\t * wp-content/languages folder.\n\t */\n\tif ( false === strpos( $file, $lang_dir ) ) {\n\t\treturn $file;\n\t}\n\n\t// If the translation file for feature plugin exist, use it.\n\tif ( is_readable( $file ) ) {\n\t\treturn $file;\n\t}\n\n\tglobal $wp_scripts;\n\n\tif ( ! isset( $wp_scripts->registered[ $handle ], $wp_scripts->registered[ $handle ]->src ) ) {\n\t\treturn $file;\n\t}\n\n\t$handle_src      = explode( '/build/', $wp_scripts->registered[ $handle ]->src );\n\t$handle_filename = $handle_src[1];\n\t$locale          = determine_locale();\n\t$lang_dir        = WP_LANG_DIR . '/plugins';\n\n\t// Translations are always based on the unminified filename.\n\tif ( substr( $handle_filename, -7 ) === '.min.js' ) {\n\t\t$handle_filename = substr( $handle_filename, 0, -7 ) . '.js';\n\t}\n\n\t$core_path_md5 = md5( 'packages/woocommerce-blocks/build/' . $handle_filename );\n\n\t/**\n\t * Return file path of the corresponding translation file in the WC Core is\n\t * enough because `load_script_translations()` will check for its existence\n\t * before loading it.\n\t */\n\treturn $lang_dir . '/woocommerce-' . $locale . '-' . $core_path_md5 . '.json';\n}\n\nadd_filter( 'load_script_translation_file', 'load_woocommerce_core_js_translation', 10, 3 );\n```\n\n----------------------------------------\n\nTITLE: Regular Expression for Auditing Direct DB Access in WooCommerce Code\nDESCRIPTION: This regular expression helps identify potential direct database access and WordPress API usage in code that should be updated to support HPOS. It searches for functions and terms commonly used to manipulate WordPress posts and metadata directly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/recipe-book.md#2025-04-23_snippet_1\n\nLANGUAGE: regexp\nCODE:\n```\nwpdb|get_post|get_post_field|get_post_status|get_post_type|get_post_type_object|get_posts|metadata_exists|get_post_meta|get_metadata|get_metadata_raw|get_metadata_default|get_metadata_by_mid|wp_insert_post|add_metadata|add_post_meta|wp_update_post|update_post_meta|update_metadata|update_metadata_by_mid|delete_metadata|delete_post_meta|delete_metadata_by_mid|delete_post_meta_by_key|wp_delete_post|wp_trash_post|wp_untrash_post|wp_transition_post_status|clean_post_cache|update_post_caches|update_postmeta_cache|post_exists|wp_count_post|shop_order\n```\n\n----------------------------------------\n\nTITLE: Defining Storybook Controls for Component Props\nDESCRIPTION: This code snippet shows how to define custom controls for component properties in Storybook. It demonstrates disabling controls and setting control types for specific props.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  [$myPropName]: {\n    control: { type: $controlType },\n    // Only applicable for selects/radios and such\n    options: $controlOptions\n  }\n}\n\n{\n  [$myPropName]: { control: false }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the deprecated_function_trigger_error Filter in PHP\nDESCRIPTION: This filter controls whether to trigger an error for deprecated functions in WooCommerce. It behaves similarly to the same filter in WordPress core.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'deprecated_function_trigger_error', bool $trigger )\n```\n\n----------------------------------------\n\nTITLE: Installing the Navigation Module in WooCommerce\nDESCRIPTION: Demonstrates how to install the navigation module using pnpm package manager. This is a prerequisite step before using any of the navigation functionality in a WooCommerce project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/navigation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/navigation --save\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product Brand by ID (HTTP)\nDESCRIPTION: This HTTP request fetches a single product brand from the WooCommerce API, using either a numeric brand ID or slug in the path parameter. It returns a JSON object of a single brand. The endpoint requires the identifier (ID or slug) to be specified, and the WooCommerce Store API must be accessible.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nGET /products/brands/:id\n```\n\n----------------------------------------\n\nTITLE: Using TaskItem Component in React JSX\nDESCRIPTION: Example of how to implement the TaskItem component with various props including action handlers, visual elements, and state controls. The component supports features like completion status, expandable content, and multiple action buttons.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/experimental/src/experimental-list/task-item/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<TaskItem\n\taction={ () => alert( '\"My action\" button has been clicked' ) }\n\tactionLabel=\"My action\"\n\tadditionalInfo=\"Additional task information\"\n\tbadge=\"Task badge\"\n\tcompleted={ true }\n\tcontent=\"Task content\"\n\texpandable={ false }\n\texpanded={ false }\n\tlevel=\"Task title\"\n\tonClick={ () => alert( 'The task has been clicked' ) }\n\tonCollapse={ () => alert( 'The task was collapsed' ) }\n\tonDelete={ () => alert( 'The task has been deleted' ) }\n\tonDismiss={ () => alert( 'The task was dismissed' ) }\n\tonExpand={ () => alert( 'The task was expanded' ) }\n\tonSnooze={ () => alert( 'The task was snoozed' ) }\n\tshowActionButton={ false }\n\ttime=\"10 minutes\"\n\ttitle=\"Task title\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Local Pickup Tax Location in WooCommerce\nDESCRIPTION: Filters to modify the base city and postcode used for local tax calculations when using Local Pickup. This allows merchants to set specific locations for tax calculation purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/legacy_local_pickup_advacned_settings_and_customization.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_countries_base_postcode', create_function( '', 'return \"80903\";' ) );\nadd_filter( 'woocommerce_countries_base_city', create_function( '', 'return \"COLORADO SPRINGS\";' ) );\n```\n\n----------------------------------------\n\nTITLE: Migrating Specific Metadata with `wc hpos backfill` (Plaintext)\nDESCRIPTION: Illustrates migrating only a specific metadata key ('post_only_meta') for order ID 100126 from the posts datastore to the HPOS datastore using the `--from`, `--to`, and `--meta_keys` parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos backfill 100126 --from=posts --to=hpos --meta_keys=post_only_meta\nSuccess: Order 100126 backfilled from posts to hpos.\n```\n\n----------------------------------------\n\nTITLE: WooCommerce CRUD Save Method\nDESCRIPTION: Implementation of the save method in WC_Data class, handling both creation and updates of WooCommerce objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function save() {\n\tif ( $this->data_store ) {\n\t\tdo_action( 'woocommerce_before_' . $this->object_type . '_object_save', $this, $this->data_store );\n\n\t\tif ( $this->get_id() ) {\n\t\t\t$this->data_store->update( $this );\n\t\t} else {\n\t\t\t$this->data_store->create( $this );\n\t\t}\n\t\treturn $this->get_id();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Header to WooCommerce Downloads CSV Export in PHP\nDESCRIPTION: This PHP code snippet adds the 'Access expires' column header to the Downloads report CSV export using the 'woocommerce_filter_downloads_export_columns' filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/adding-columns-to-analytics-reports-and-csv-downloads.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction add_column_header( $export_columns ) {\n\t$export_columns['access_expires'] = 'Access expires';\n\treturn $export_columns;\n}\nadd_filter( 'woocommerce_filter_downloads_export_columns', 'add_column_header' );\n```\n\n----------------------------------------\n\nTITLE: Implementing Hello World Generator Function in WooCommerce CLI\nDESCRIPTION: Example implementation of a generator function that runs a 'Hello World' command using the runCommand helper. This demonstrates the basic structure required for adding new CLI commands to the WooCommerce tooling system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/src/tools/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport function* helloWorld() {\n\tyield runCommand( 'Hello World', function* () {\n        console.log('Hello World');\n\t} );\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing translatejQueryEventToNative() Utility in WooCommerce Blocks\nDESCRIPTION: A reference to the utility function that translates jQuery events to native DOM events with the 'wc-blocks_' prefix. This function listens to jQuery events from WooCommerce core and triggers equivalent native DOM events.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/dom-events.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntranslatejQueryEventToNative()\n```\n\n----------------------------------------\n\nTITLE: Using the WC E2E Test Installer\nDESCRIPTION: Demonstrates commands using `npx wc-e2e install` to set up a default test environment, install specs from a specific E2E tests package (optionally specifying format `cjs`/`es6` and extension), and `npx wc-e2e uninstall` to remove specs for a package. This utility populates the `tests/e2e/*` folder.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx wc-e2e install\nnpx wc-e2e install @woocommerce-e2e-tests [--format cjs] [--ext spec.js]\nnpx wc-e2e uninstall @woocommerce-e2e-tests\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Exceeded Action Hook\nDESCRIPTION: Action hook that fires when the Store API rate limit is exceeded. Takes IP address and action ID as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_23\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_store_api_rate_limit_exceeded', string $ip_address, string $action_id )\n```\n\n----------------------------------------\n\nTITLE: Setting Jest Test Retries via Environment Variable\nDESCRIPTION: Shows how to set the number of times failed E2E tests should be automatically retried using the `E2E_RETRY_TIMES` environment variable when running tests with `pnpm exec wc-e2e test:e2e`. In this example, failed tests will be retried twice before being marked as failed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nE2E_RETRY_TIMES=2 pnpm exec wc-e2e test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Dependency Extraction Webpack Plugin - Bash\nDESCRIPTION: This snippet provides the bash command to add the WooCommerce Dependency Extraction Webpack Plugin as a development dependency using pnpm. It must be executed in a Node.js project root. The dependency will be saved under devDependencies in package.json, ensuring it is available for development and build-time plugin configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/dependency-extraction-webpack-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/dependency-extraction-webpack-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Redirecting After Checkout Completion in JavaScript\nDESCRIPTION: This code checks if the checkout status is 'complete' and if there's a 'redirectUrl' in the checkout data store. If both conditions are met, it redirects the user to the specified URL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/how-checkout-processes-an-order.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Code not provided in the original text\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Remote Inbox Notifications in WooCommerce\nDESCRIPTION: This snippet shows the overall structure of the JSON feed for remote inbox notifications. It contains an array of specification objects.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteInboxNotifications/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n\t<spec>,\n\t...\n]\n```\n\n----------------------------------------\n\nTITLE: Example Error Response Structure (JSON)\nDESCRIPTION: Shows the JSON structure returned when an error occurs during an Order API request, such as providing an invalid order ID or key. The response includes a machine-readable `code`, a human-readable `message`, and a `data` object containing additional details like the HTTP status code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/order.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"code\": \"woocommerce_rest_invalid_order\",\n\t\"message\": \"Invalid order ID or key provided.\",\n\t\"data\": {\n\t\t\"status\": 401\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Order Collection Preference in Checkout Store with JavaScript\nDESCRIPTION: Shows how to determine if the customer prefers to collect their order using the prefersCollection selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst prefersCollection = store.prefersCollection();\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Checkout Field Values in PHP\nDESCRIPTION: Shows how to retrieve order-specific field values using the CheckoutFields helper methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Blocks\\Package;\nuse Automattic\\WooCommerce\\Blocks\\Domain\\Services\\CheckoutFields;\n\n$field_id = 'my-plugin-namespace/my-field';\n$order = wc_get_order( 1234 );\n$checkout_fields = Package::container()->get( CheckoutFields::class );\n$my_order_billing_field = $checkout_fields->get_field_from_object( $field_id, $order, 'billing' );\n$my_order_shipping_field = $checkout_fields->get_field_from_object( $field_id, $order, 'shipping' );\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Customer Downloads via WC-CLI in Bash\nDESCRIPTION: Lists download permissions for a specific customer, identified by `<customer_id>`. Options allow specifying the request context (`--context`), selecting specific fields (`--fields`, `--field`), and controlling the output format (`--format`, default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer_download list <customer_id> [options]\n```\n\n----------------------------------------\n\nTITLE: Validating HTML Entity Decoding in Taxonomy Controls - WooCommerce Blocks - Markdown\nDESCRIPTION: This markdown snippet contains test instructions for ensuring that taxonomy filter controls within the Product Collection block properly decode HTML entities in product categories and tags. It provides steps to add filters and search for terms with HTML entities, verifying correct display. Requirements include having test categories/tags with HTML entities and the ability to observe the interface, with outputs based on display results.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### [Product Collection] Fix: HTML Entity Decoding in Taxonomy Controls [#11982](https://github.com/woocommerce/woocommerce-blocks/pull/11982)\n\n1. Create a new post & add Product Collection block to it.\n2. From filters dropdown, Add “Taxonomies” filter. This will add “Product Categories” and “Product Tag” taxonomy filters to inspector control.\n3. Inside “Product Categories” filter, search a category that contains an HTML Entity.\n    1. If you don’t have any category with HTML entities, then you will need to either rename the existing category or create a new category with HTML entities. For example, “Electronics & Gadgets” or “Health & Wellness / Supplements”\n    2. Verify that HTML entities show as expected.\n4. Perform step 3 for “Product Tags” too.\n```\n\n----------------------------------------\n\nTITLE: Describing WooCommerce Gutenberg Block File Structure\nDESCRIPTION: This snippet shows the typical file structure for a WooCommerce Gutenberg block. It includes the main JavaScript file, SCSS files for styling, and the core block file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n|- block.js\n|- editor.scss\n|- index.js\n|- style.scss\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Dependencies\nDESCRIPTION: Commands to install WooCommerce dependencies using pnpm and composer package managers\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/development-environment.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Visibility for WooCommerce Product Form Fields\nDESCRIPTION: This PHP snippet shows how to add a 'hideConditions' attribute to a custom field in the WooCommerce product form. It demonstrates hiding the field when the product price is greater than or equal to 20.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/generic-fields-tutorial.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n'hideConditions' => array(\n\tarray(\n\t\t'expression' => 'editedProduct.regular_price >= 20',\n\t),\n),\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Selecting Shipping Rate with Nonce Authentication\nDESCRIPTION: Example cURL command demonstrating how to select a shipping rate using the WooCommerce Store API. The command includes a nonce token for authentication and specifies package_id and rate_id as query parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncurl --header \"Nonce: 12345\" --request POST /cart/select-shipping-rate?package_id=1&rate_id=flat_rate:1\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated `__experimental_woocommerce_blocks_checkout_update_order_meta` PHP Hook\nDESCRIPTION: A deprecated PHP action hook (Deprecated in PR 5017) prefixed with `__experimental`. It was triggered after a draft order was created or updated from the cart, allowing extensions to modify order metadata before further processing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated Hook name:\n__experimental_woocommerce_blocks_checkout_update_order_meta\n```\n\n----------------------------------------\n\nTITLE: Enabling WooCommerce Experiment in Testing Instructions\nDESCRIPTION: This snippet demonstrates how to provide clear instructions for enabling a WooCommerce experiment using the WooCommerce Beta Tester plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/writing-high-quality-testing-instructions.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n- Install the WooCommerce Beta Tester plugin.\n- Go to `Tools > WCA Test Helper > Experiments`.\n- Toggle the [x] experiment.\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Types for a CRUD Resource\nDESCRIPTION: Illustrates defining TypeScript types for a resource (`MyThing`), query parameters (`QueryMyThing`, `Query`), mutable vs. read-only properties, and deriving specific action (`MyThingActions`) and selector (`MyThingSelectors`) types using the generic `CrudActions` and `CrudSelectors` types. This approach enhances type safety when implementing the data store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/crud/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// types.ts\nimport { CrudActions, CrudSelectors } from '../crud/types';\n\n// Define your resource type\nexport type MyThing = {\n    id: number;\n    name: string;\n    description: string;\n};\n\n// Define the query parameters for mutations\nexport type QueryMyThing = {\n    name: string;\n    description: string;\n};\n\n// Define which properties are read-only vs mutable\ntype ReadOnlyProperties = 'id';\ntype MutableProperties = Partial<Omit<QueryMyThing, ReadOnlyProperties>>;\n\n// Define your query parameters for selectors\ntype Query = {\n    context?: string;\n    order_by?: string;\n};\n\n// Create your typed actions and selectors\nexport type MyThingActions = CrudActions<\n    'MyThing',\n    MyThing,\n    MutableProperties\n>;\n\nexport type MyThingSelectors = CrudSelectors<\n    'MyThing',\n    'MyThings',\n    MyThing,\n    Query,\n    MutableProperties\n>;\n```\n```\n\n----------------------------------------\n\nTITLE: Email Template Structure for Negative Review Response\nDESCRIPTION: A structured template showing the key components of a professional response to a negative review, including introduction, empathetic acknowledgment, and call to action for review update.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/review-guidelines/responding-to-negative-reviews.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* Create a new response (via email, or on a public review) with subject: Regarding your recent review for xxx.\n* Start by introducing yourself, for example: \"Hey there, This is Andrew from the team that develops xxx\".\n* Use empathetic language and make it clear that this negative review had an impact on you. For example, \"I read your recent review for xxx and I am worried to hear that an issue is preventing you from using this plugin as you had in mind. I'd be happy to help you resolve this!\".\n```\n\n----------------------------------------\n\nTITLE: Disabling HPOS via WP-CLI\nDESCRIPTION: Successfully disables HPOS after all pre-disable checks have passed. This command will revert to using the traditional posts-based order storage.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos disable\nRunning pre-disable checks...\nSuccess: HPOS disabled.\n```\n\n----------------------------------------\n\nTITLE: Displaying Payment Method Props Table in Markdown\nDESCRIPTION: A markdown table listing and describing the props fed to payment method nodes in WooCommerce checkout blocks. It includes property names, types, and descriptions for various aspects of the checkout process and payment method integration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n| Property                 | Type                                                                                                                                                                                                                                                                                                                                                                      | Description                                                                                                                                                                                                                                                                                                        |\n| ------------------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `activePaymentMethod`    | String                                                                                                                                                                                                                                                                                                    | The slug of the current active payment method in the checkout.                                                                                                                                                                                                                                                     |\n| `billing`                | { `billingAddress`, `cartTotal`, `currency`, `cartTotalItems`, `displayPricesIncludingTax`, `appliedCoupons`, `customerId` }                                                                                                                                                                                                                                             | Contains everything related to billing.                                                                                                                                                                                                                                                                            |\n| `cartData`               | { `cartItems`, `cartFees`, `extensions` }                                                                                                                                                                                                                                                                                                                                 | Data exposed from the cart including items, fees, and any registered extension data. Note that this data should be treated as immutable (should not be modified/mutated) or it will result in errors in your application.                                                                                          |\n| `checkoutStatus`         | { `isCalculating`, `isComplete`, `isIdle`, `isProcessing` }                                                                                                                                                                                                                                                                                                               | The current checkout status exposed as various boolean state.                                                                                                                                                                                                                                                      |\n| `components`             | { `ValidationInputError`, `PaymentMethodLabel`, `PaymentMethodIcons`, `LoadingMask` }                                                                                                                                                                                                                                                                                      | It exposes React components that can be implemented by your payment method for various common interface elements used by payment methods.                                                                                                                                                                          |\n| `emitResponse`           | { `noticeContexts`: { `PAYMENTS`, `EXPRESS_PAYMENTS` }, `responseTypes`: { `SUCCESS`, `FAIL`, `ERROR` } }                                                                                                                                                                                                                                                                 | Contains some constants that can be helpful when using the event emitter. Read the _[Emitting Events](https://github.com/woocommerce/woocommerce-gutenberg-products-block/blob/e267cd96a4329a4eeef816b2ef627e113ebb72a5/docs/extensibility/checkout-flow-and-events.md#emitting-events)_ section for more details. |\n| `eventRegistration`      | { `onCheckoutValidation`, `onCheckoutSuccess`, `onCheckoutFail`, `onPaymentSetup`, `onShippingRateSuccess`, `onShippingRateFail`, `onShippingRateSelectSuccess`, `onShippingRateSelectFail` }                                                                                                                                                                                            | Contains all the checkout event emitter registration functions. These are functions the payment method can register observers on to interact with various points in the checkout flow (see [this doc](./checkout-flow-and-events.md) for more info).                                                               |\n| `onClick`                | Function                                                                                                                                                                                                                                                                                                                                                                                   | **Provided to express payment methods** that should be triggered when the payment method button is clicked (which will signal to checkout the payment method has taken over payment processing)                                                                                                                    |\n| `onClose`                | Function                                                                                                                                                                                                                                                                                                                                                                                   | **Provided to express payment methods** that should be triggered when the express payment method modal closes and control is returned to checkout.                                                                                                                                                                 |\n| `onSubmit`               | Function                                                                                                                                                                                                                                                                                                                                                                                   | Submits the checkout and begins processing                                                                                                                                                                                                                                                                         |\n| `buttonAttributes`       | { `height`, `borderRadius` }                                                                                                                                                                                                                                                                                                                                              | Styles set by the merchant that should be respected by all express payment buttons                                                                                                                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Disable HPOS Sync on Read\nDESCRIPTION: WordPress filter to disable synchronization when reading data from HPOS tables to improve performance.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/guide-large-store.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_hpos_enable_sync_on_read', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Installing Node Version Manager\nDESCRIPTION: Command to install and activate the required Node.js version using nvm\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/development-environment.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnvm install\n```\n\n----------------------------------------\n\nTITLE: Pluggable Function Structure\nDESCRIPTION: PHP code demonstrating the structure of a pluggable function that can be overridden in a child theme.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/set-up-a-child-theme.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ( ! function_exists( \"parent_function_name\" ) ) {\n    parent_function_name() {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Modulus Arithmetic Operator\nDESCRIPTION: Example of the modulus (%) operator, which returns the remainder after division of two operands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n5 % 2\n```\n\n----------------------------------------\n\nTITLE: Pulling k6 Docker Image\nDESCRIPTION: Command to pull the k6 Docker image for running performance tests in a containerized environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/performance/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull loadimpact/k6\n```\n\n----------------------------------------\n\nTITLE: Setting Up WordPress Environment for Woo AI Plugin Development\nDESCRIPTION: Commands for creating, starting, stopping, and destroying a WordPress development environment using @wordpress/env package. These commands should be run from the plugin's working directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woo-ai/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Make sure you are in the working directory of the plugin you are interested in setting up the environment for\ncd plugins/woo-ai\n# Start will create the environment if necessary or start an existing one\npnpm -- wp-env start\n# Stop will, well, stop the environment\npnpm -- wp-env stop\n# Destroy will remove all of the environment's files.\npnpm -- wp-env destroy\n```\n\n----------------------------------------\n\nTITLE: Updating Product Categories in WooCommerce CLI\nDESCRIPTION: Command for updating existing product categories with options to modify name, slug, parent, description, display type, image, and menu order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_39\n\nLANGUAGE: bash\nCODE:\n```\nwc product_cat update [id]\n```\n\n----------------------------------------\n\nTITLE: Configuring Storefront Child Theme CSS\nDESCRIPTION: Specific CSS configuration for Storefront child theme implementation with theme metadata and customization marker.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/set-up-a-child-theme.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n/*\nTheme Name: Storefront Child\nVersion: 1.0\nDescription: Child theme for Storefront.\nAuthor: Woo\nAuthor URI: https://woocommerce.com\nTemplate: storefront\n*/\n\n/* --------------- Theme customization starts here ----------------- */\n```\n\n----------------------------------------\n\nTITLE: Waiting for Selector Without Throwing Error in JavaScript\nDESCRIPTION: This function conditionally waits for a selector without throwing an error. It takes the selector and an optional timeout in seconds as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_41\n\nLANGUAGE: JavaScript\nCODE:\n```\nwaitForSelectorWithoutThrow(selector, timeoutInSeconds)\n```\n\n----------------------------------------\n\nTITLE: Executing Request to Delete All Cart Coupons (Shell/cURL)\nDESCRIPTION: Provides a sample cURL command to make a DELETE request to the `/cart/coupons` endpoint, which removes all coupons currently applied to the cart. No parameters are needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request DELETE https://example-store.com/wp-json/wc/store/v1/cart/coupons\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Representing Tag Data Using Slugs as Keys (PHP)\nDESCRIPTION: Illustrates an anti-pattern for representing collection data (like post tags) in an API response. Using dynamic keys (tag slugs) makes schema definition difficult and unpredictable for clients. This approach is discouraged as it's hard to represent in a consistent JSON schema.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/guiding-principles.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntags: [\n  \"my-tag\": {\n    // ...tag data\n  },\n  \"my-other-tag\": {\n    // ...tag data\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Attributes in WooCommerce CLI\nDESCRIPTION: Command for deleting product attributes by ID with force option required as trashing is not supported.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute delete [id]\n```\n\n----------------------------------------\n\nTITLE: Installing Composer Packages (Bash)\nDESCRIPTION: This command installs all the PHP packages required by the WooCommerce project, as defined in the `composer.json` file. It reads the `composer.lock` file to install exact versions if the file exists, otherwise it resolves and installs dependencies based on `composer.json` and creates a lock file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\n```\n\n----------------------------------------\n\nTITLE: Cart Contents Change Filter\nDESCRIPTION: Allows modification of cart contents when any changes occur to the cart.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_17\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_cart_contents_changed', array $cart_contents )\n```\n\n----------------------------------------\n\nTITLE: Combining array_column and dot_notation Transformers (PHP)\nDESCRIPTION: Demonstrates how to combine array_column and dot_notation transformers to extract specific data from a nested array structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_column\",\n        \"arguments\": {\n            \"key\": \"industry\"\n        }\n    },\n    {\n    \t\"use\": \"dot_notation\",\n    \t\"arguments\": {\n    \t\t\"key\": \"0\"\n    \t}\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Product Collection Data\nDESCRIPTION: Example cURL command to retrieve product collection data including price range, attribute counts, and rating counts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-reviews.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/collection-data?calculate_price_range=true&calculate_attribute_counts=pa_size,pa_color&calculate_rating_counts=true\"\n```\n\n----------------------------------------\n\nTITLE: Disabling WooCommerce Background Image Regeneration\nDESCRIPTION: PHP code snippet that demonstrates how to disable WooCommerce's background image regeneration functionality using the 'woocommerce_background_image_regeneration' filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/thumbnail-image-regeneration.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_background_image_regeneration', '__return_false' );\n```\n\n----------------------------------------\n\nTITLE: Nested Object Property Comparison in JavaScript\nDESCRIPTION: A complex expression that accesses a deeply nested property and compares it to a string value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfoo.bar.baz === 'qux'\n```\n\n----------------------------------------\n\nTITLE: Validate Add to Cart Action Hook\nDESCRIPTION: Action hook for validating items being added to cart via Store API. Handlers can throw exceptions to prevent cart addition. Takes product object and request parameters array.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_24\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_store_api_validate_add_to_cart', \\WC_Product $product, array $request )\n```\n\n----------------------------------------\n\nTITLE: Installing `@woocommerce/customer-effort-score` via pnpm (Bash)\nDESCRIPTION: Installs the `@woocommerce/customer-effort-score` package as a project dependency using the pnpm package manager. This command adds the package to your `node_modules` directory and updates your `package.json` file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/customer-effort-score/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/customer-effort-score --save\n```\n\n----------------------------------------\n\nTITLE: Subscribing to onCheckoutSuccess Internally using Hooks in JSX\nDESCRIPTION: Demonstrates how an internal WooCommerce component subscribes to the `onCheckoutSuccess` event emitter using the `useCheckoutContext` hook from '@woocommerce/base-contexts' and the `useEffect` hook from '@wordpress/element'. The effect registers a callback (returning true in this example) and returns an unsubscribe function for cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onCheckoutSuccess } = useCheckoutContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutSuccess( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutSuccess ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Placeholder for ScrollTo Component Usage in JSX\nDESCRIPTION: This code block serves as a placeholder for demonstrating how to use the `ScrollTo` component in JSX. According to the accompanying documentation, this component accepts an `offset` prop (String, default '0') which specifies the offset from the top of the component for scrolling.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/scroll-to/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n```jsx\n```\n```\n\n----------------------------------------\n\nTITLE: Dependency Configuration PHP Array for Payment Method Promotions\nDESCRIPTION: Generated PHP configuration array containing script dependencies and version information for the payment-method-promotions script. Includes React, WooCommerce components, and WordPress core dependencies.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/wp-admin-scripts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php return array('dependencies' => array('react', 'wc-components', 'wc-experimental', 'wc-settings', 'wc-store-data', 'wc-tracks', 'wp-components', 'wp-data', 'wp-element', 'wp-i18n'), 'version' => 'e64b1e69145febe07734');\n```\n\n----------------------------------------\n\nTITLE: Exporting Install Files Map for Test Scaffolding - JavaScript\nDESCRIPTION: Defines the module.exports for the installFiles directory, mapping key properties to relative file paths needed by the test installer. The exported object specifies the locations of default JSON configurations, initialization shell script, and test spec definitions, all relative to the package root. Required for scaffolding and automation steps, and should accurately reflect file structure and naming in the consuming package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/test-packages.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n\tdefaultJson: 'installFiles/default-test-config.json',\n\tinitializeSh: 'installFiles/initialize.sh.default',\n\ttestSpecs: 'installFiles/scaffold-tests.json',\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Remote Specification Validation Package for WooCommerce\nDESCRIPTION: This snippet shows how to install the remote specification validation package for WooCommerce using Composer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/remote-specs-validation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ncomposer require woocommerce/remote-specs-validation\n```\n\n----------------------------------------\n\nTITLE: Template Path Example in WordPress Directory Structure\nDESCRIPTION: Example file paths showing where to find and place WooCommerce templates when updating. Shows both the source plugin directory and destination theme directory paths.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/fixing-outdated-woocommerce-templates.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nwp-content/plugins/woocommerce/templates/[path-to-the-template]\nwp-content/themes/[path-to-theme]\n```\n\n----------------------------------------\n\nTITLE: Using _nx() Translation Function for Pluralization with Context\nDESCRIPTION: Demonstrates the _nx() function which handles both context and pluralization. This combines the functionality of _n() and _x() for scenarios requiring both contextual information and plural forms.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-JS-TS-files.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Schema\nconst translation = _nx( string single, string plural, int number, string context, string domain = 'default' );\n\n// Example\nconst { sprintf, _nx } = window.wp.i18n;\n\nconst translation = sprintf(\n    /* translators: %s number of products in cart. */\n    _nx(\n        '%d product',\n        '%d products',\n        Math.abs( category->count ),\n        'Number of products in the cart',\n        'woo-gutenberg-products-block'\n    ),\n    Math.abs( category->count )\n);\n```\n\n----------------------------------------\n\nTITLE: Showing a Validation Error in JavaScript\nDESCRIPTION: Example showing how to show a specific validation error using the showValidationError action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = wp.data;\nconst { showValidationError } = dispatch( validationStore );\n\nshowValidationError( 'billing-first-name' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Active Block Template Name in WordPress Block Editor (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to annotate a WordPress block template file with a paragraph indicating the file name being rendered. It is used as a visual aid in the editor and frontend during testing to verify which template is active. No external dependencies are required aside from the WordPress block editor; replace [template-filename] with the actual file name. The markup should be placed in the respective template HTML files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/660.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:paragraph -->\\n<p>Woo Blocks: [template-filename].html</p>\\n<!-- /wp:paragraph -->\n```\n\n----------------------------------------\n\nTITLE: Basic Item Name Modification\nDESCRIPTION: Simple implementation of itemName filter to add emoji decorations around product names in cart context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyItemName = ( defaultValue, extensions, args ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn `🪴 ${ defaultValue } 🪴`;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\titemName: modifyItemName,\n} );\n```\n\n----------------------------------------\n\nTITLE: Generating WooCommerce ZIP Archive\nDESCRIPTION: Command to create a deployable zip archive of WooCommerce for testing purposes\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/development-environment.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm build:zip\n```\n\n----------------------------------------\n\nTITLE: Deleting Product Categories in WooCommerce CLI\nDESCRIPTION: Command for deleting product categories by ID with force option required as trashing is not supported.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nwc product_cat delete [id]\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Documentation Category in YAML\nDESCRIPTION: YAML frontmatter that specifies the category title and slug for WooCommerce's 'Getting Started' documentation section. The category_title defines the display name while category_slug defines the URL-friendly identifier.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/md-docs/lib/__tests__/fixtures/example-docs/get-started/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory_title: Getting Started with WooCommerce\ncategory_slug: get-started\n---\n```\n\n----------------------------------------\n\nTITLE: Creating a Block Renderer Class for Core Blocks in PHP\nDESCRIPTION: Example of a PHP class that extends AbstractBlockRenderer to provide custom rendering for a heading block. The class overrides the renderContent method to handle specific rendering logic for the block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/src/Engine/Renderer/readme.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types = 1);\n\nnamespace Automattic\\WooCommerce\\EmailEditor\\Integrations\\Core\\Renderer\\Blocks;\n\nuse Automattic\\WooCommerce\\EmailEditor\\Engine\\Settings_Controller;\n\nclass Heading extends AbstractBlockRenderer {\n  protected function renderContent($blockContent, array $parsedBlock, Settings_Controller $settingsController): string {\n    return $blockContent;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products with Parameters in PHP\nDESCRIPTION: Standard function for retrieving products based on specific parameters. Provides consistent interface for product queries.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nwc_get_products( $args )\n```\n\n----------------------------------------\n\nTITLE: Complex Notice Banner with JSX Elements\nDESCRIPTION: Shows how to create a notice banner containing complex JSX elements including paragraphs and code blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/base/components/notice-banner/docs/docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { NoticeBanner } from '@woocommerce/base-components';\n\n<NoticeBanner status=\"error\">\n\t<p>\n\t\tAn error occurred: <code>{ errorDetails }</code>.\n\t</p>\n</NoticeBanner>;\n```\n\n----------------------------------------\n\nTITLE: VVV install-wp-tests.sh MySQL Permission Error\nDESCRIPTION: Error message showing a database access issue when running install-wp-tests.sh in VVV. The solution involves granting appropriate MySQL privileges to the wp user.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmysqladmin: CREATE DATABASE failed; error: 'Access denied for user 'wp'@'localhost' to database 'wordpress-one-tests''\n```\n\n----------------------------------------\n\nTITLE: Watching and Auto-rebuilding WooCommerce Task Plugin\nDESCRIPTION: Development command that watches for changes in the example plugin directory and automatically rebuilds the plugin when changes are detected.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/extensions/add-task/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWC_EXT=add-task pnpm --filter=@woocommerce/admin-library example --watch\n```\n\n----------------------------------------\n\nTITLE: Constructing Checkout Order Request Payload (JSON)\nDESCRIPTION: Illustrates the JSON structure required for the request body when calling the POST checkout order endpoint. Key fields include `key` (order verification key), `billing_email` (optional for guest verification), `billing_address` and `shipping_address` objects, the chosen `payment_method` ID ('cheque' in this example), and an empty `payment_data` array (as 'cheque' likely requires no extra data).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/checkout-order.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"key\": \"wc_order_oFmQYREzh9Tfv\",\n\t\"billing_email\": \"admin@example.com\",\n\t\"billing_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"email\": \"admin@example.com\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"shipping_address\": {\n\t\t\"first_name\": \"Peter\",\n\t\t\"last_name\": \"Venkman\",\n\t\t\"company\": \"\",\n\t\t\"address_1\": \"550 Central Park West\",\n\t\t\"address_2\": \"Corner Penthouse Spook Central\",\n\t\t\"city\": \"New York\",\n\t\t\"state\": \"NY\",\n\t\t\"postcode\": \"10023\",\n\t\t\"country\": \"US\",\n\t\t\"phone\": \"555-2368\"\n\t},\n\t\"payment_method\": \"cheque\",\n\t\"payment_data\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Defining array_search Transformer (PHP)\nDESCRIPTION: Shows how to define the array_search transformer in PHP. This transformer searches for a specific value in an array and returns its key if found.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"array_search\",\n        \"arguments\": {\n            \"value\": \"test\"\n        }\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Defining the Get Cart Endpoint (HTTP)\nDESCRIPTION: Specifies the HTTP method (GET) and relative path (/cart) used to retrieve the current state of the shopping cart via the WooCommerce Store API (v1). No parameters are required for this endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /cart\n```\n\n----------------------------------------\n\nTITLE: WordPress Filters for WooCommerce Onboarding\nDESCRIPTION: List of WordPress filters used to customize the WooCommerce onboarding experience. These filters allow modification of profile properties, industries, product types, plugins whitelist, and task lists.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_admin_onboarding_profile_properties\nwoocommerce_admin_onboarding_industries\nwoocommerce_admin_onboarding_industry_image\nwoocommerce_admin_onboarding_product_types\nwoocommerce_admin_onboarding_plugins_whitelist\nwoocommerce_admin_onboarding_themes\nwoocommerce_admin_onboarding_jetpack_connect_redirect_url\nwoocommerce_admin_onboarding_task_list\nwoocommerce_rest_onboarding_profile_collection_params\nwoocommerce_rest_onboarding_profile_object_query\nwoocommerce_rest_onboarding_prepare_onboarding_profile\n```\n\n----------------------------------------\n\nTITLE: Passing Environment Variables via Command Line (Shell)\nDESCRIPTION: Demonstrates how to provide the required environment variables (BASE_URL, USER_KEY, USER_SECRET) directly via the command line when executing the API tests using npm. This is an alternative to using a `.env` file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nBASE_URL=http://localhost:8086 USER_KEY=admin USER_SECRET=password npm run e2e:api\n```\n\n----------------------------------------\n\nTITLE: Deleting a WooCommerce Customer via WC-CLI in Bash\nDESCRIPTION: Deletes a specific WooCommerce customer identified by their `id`. Requires the `--force=true` parameter as customers cannot be trashed. Optionally, use `--reassign` to assign the customer's posts to another user ID. Use `--porcelain` to output only the deleted customer ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer delete <id> --force=true [options]\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper My Account Flow Table in Markdown\nDESCRIPTION: This code snippet presents a markdown table detailing critical flows for shoppers in the My Account area, including account creation, login, and managing account details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area  | Flow Name                 | Test File                                 |\n| --------- | ---------- | ------------------------- | ----------------------------------------- |\n| Shopper   | My Account | Create an account         | shopper/my-account-create-account.spec.js |\n| Shopper   | My Account | Login to existing account | shopper/my-account.spec.js                |\n| Shopper   | My Account | View Account Details      | shopper/my-account.spec.js                |\n| Shopper   | My Account | Update Addresses          | shopper/my-account-addresses.spec.js      |\n| Shopper   | My Account | View Orders               | shopper/my-account-pay-order.spec.js      |\n| Shopper   | My Account | Pay for Order             | shopper/my-account-pay-order.spec.js      |\n| Shopper   | My Account | View Downloads            | shopper/my-account-downloads.spec.js      |\n```\n\n----------------------------------------\n\nTITLE: Verifying and Publishing Item in JavaScript\nDESCRIPTION: This function verifies that an item can be published. It takes the notice text as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_32\n\nLANGUAGE: JavaScript\nCODE:\n```\nverifyAndPublish(noticeText)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Customer Token in PHP\nDESCRIPTION: Demonstrates how to retrieve the default token for a customer using WC_Payment_Tokens.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Get default token for the current user\n$token = WC_Payment_Tokens::get_customer_default_token( get_current_user_id() );\n// Get default token for user 520\n$token = WC_Payment_Tokens::get_customer_default_token( 520 );\n```\n\n----------------------------------------\n\nTITLE: WordPress Capability Reference in Markdown\nDESCRIPTION: Reference to the WordPress capability required for accessing WooCommerce reports in the admin interface. Specifies the permission needed for shop managers and administrators.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nview_woocommerce_reports\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Expression with AND and OR Operators\nDESCRIPTION: A complex expression that combines logical AND with a grouping of OR conditions to evaluate nested properties.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfoo.bar\n  && ( foo.bar.baz === 'qux' || foo.baz === 'quux' )\n```\n\n----------------------------------------\n\nTITLE: Setting Extended Page Metadata with Front Matter in YAML\nDESCRIPTION: Shows how to set additional optional metadata fields for documentation pages. Includes post_title (required), menu_title for sidebar display, and tags for categorization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/contributing-docs.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\npost_title: Your Post Title Goes Here\nmenu_title: Short Title Goes Here\ntags: tag1, tag2, tag3\n---\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Settings Editor Package using pnpm\nDESCRIPTION: This command installs the @woocommerce/settings-editor package using pnpm package manager and saves it as a dependency in the project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/settings-editor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/settings-editor --save\n```\n\n----------------------------------------\n\nTITLE: Moving All Items to Trash in JavaScript\nDESCRIPTION: This helper method checks every item in a list page and moves them to the trash. It's useful for cleaning up test data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_22\n\nLANGUAGE: JavaScript\nCODE:\n```\nmoveAllItemsToTrash()\n```\n\n----------------------------------------\n\nTITLE: Product Grid Cache Control Filter\nDESCRIPTION: Controls whether the product grid block results can be cached.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_blocks_product_grid_is_cacheable', boolean $is_cacheable, array $query_args )\n```\n\n----------------------------------------\n\nTITLE: Using _nx() Function for Contextual Plural Form Translation in PHP\nDESCRIPTION: The _nx() function translates and retrieves the singular or plural form based on the supplied number, with gettext context. This combines the functionality of _n() and _x().\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = _nx( string $single, string $plural, int $number, string $context, string $domain = 'default' );\n\n// Example\n$translation = sprintf(\n    /* translators: %s number of products in cart. */\n    _nx(\n        '%d product',\n        '%d products',\n        absint( $category->count ),\n        'Number of products in the cart',\n        'woo-gutenberg-products-block'\n    ),\n    absint( $category->count )\n);\n```\n\n----------------------------------------\n\nTITLE: Testing Product Lists with Handlebars Template Fixtures in WooCommerce - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates two end-to-end tests using the filteredProductsTemplate Playwright fixture to verify product lists for different price ranges in WooCommerce. It compiles the Handlebars template with specific price parameters, navigates to the /shop page, and asserts that the correct filtered products are listed. The tests depend on the previously defined fixture, Playwright, and the expected structure of the compiled templates.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntest( 'Renders correct products for $10-$99 price range', async ( {\n\tpage,\n\tfilteredProductsTemplate,\n} ) => {\n\tawait filteredProductsTemplate.compile( {\n\t\tprice: {\n\t\t\tfrom: '$10',\n\t\t\tto: '$99',\n\t\t},\n\t} );\n\n\tawait page.goto( '/shop' );\n\n\tawait expect( page.getByLabel( 'Products' ) ).toHaveText( [\n\t\t'Socks',\n\t\t'T-Shirt',\n\t] );\n} );\n\ntest( 'Renders correct products for $100-$999 price range', async ( {\n\tpage,\n\tfilteredProductsTemplate,\n} ) => {\n\tawait filteredProductsTemplate.compile( {\n\t\tprice: {\n\t\t\tfrom: '$100',\n\t\t\tto: '$990',\n\t\t},\n\t} );\n\n\tawait page.goto( '/shop' );\n\n\tawait expect( page.getByLabel( 'Products' ) ).toHaveText( [\n\t\t'Rolex',\n\t\t'Lambo',\n\t] );\n} );\n```\n\n----------------------------------------\n\nTITLE: Verifying CheckboxControl Refactor and Aliasing - WooCommerce Blocks - Markdown\nDESCRIPTION: This markdown snippet provides multi-step tests for verifying the migration of CheckboxControl to the components package and checking its alias in the checkout package. It covers checkout block functionality, Stripe payment integration, and filter block rendering both in the editor and front-end. The snippet assumes WooCommerce Stripe plugin setup and active WooCommerce Blocks, with focus on rendering and usability validation for all checkboxes involved.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### Move `CheckboxControl` to components package and leave alias in checkout package [#11662](https://github.com/woocommerce/woocommerce-blocks/pull/11662)\n\n1. Install [WooCommerce Stripe Payment Gateway](https://wordpress.org/plugins/woocommerce-gateway-stripe/) and set it up\n2. Edit the Checkout page in the Site editor, select the \"Terms and Conditions block\" and set the \"Require checkbox\" option to true.\n3. Ensure that order notes are enabled on the block. Ensure the checkboxes for these blocks all appear and the block as a whole renders OK.\n4. As a logged-in user, add an item to your cart and go to the Checkout block in the front-end.\n5. Ensure the \"Use same address for billing\" checkbox is available and works as intended.\n6. Scroll down to the Terms and conditions, ensure the checkbox renders and works correctly.\n7. Check the \"Add a note to your order\" box. Ensure it works and the textarea renders.\n8. Check out using Stripe and ensure the \"Save payment information to my account for future purchases.\" renders.\n9. Check this box and check out, ensure checkout is successful.\n10. Add an item to your cart again and go back to the Checkout block. Ensure your card was saved.\n11. In the site editor, create a page and add the \"All Products\" and \"Filter by Attribute\" blocks.\n12. On \"Filter by Attribute\" choose an attribute with multiple terms and ensure the checkboxes show up in the editor.\n13. View this page on the front-end and ensure they render there, too.\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Command\nDESCRIPTION: Command to start Storybook development server locally for testing and developing components in isolation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/storybook-and-components.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Submitting Checkout via WooCommerce Store API (Shell/JSON)\nDESCRIPTION: These snippets show how to submit checkout data using the WooCommerce Store API for testing purposes, specifically for validating address fields server-side. The first snippet is a shell command making a POST request to the '/checkout' endpoint on a test site. The second snippet is the JSON payload containing billing/shipping addresses and the selected payment method ('bacs'). Testers should modify or omit values in the payload to trigger specific validation errors (e.g., invalid email, missing state).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/410.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPOST https://one.wordpress.test/wp-json/wc/store/checkout\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"payment_method\": \"bacs\",\n\t\"billing_address\": {\n\t\t\"first_name\": \"Mike\",\n\t\t\"last_name\": \"Jolley\",\n\t\t\"address_1\": \"Test Address\",\n\t\t\"city\": \"Test City\",\n\t\t\"country\": \"US\",\n\t\t\"state\": \"AL\",\n\t\t\"postcode\": \"90210\",\n\t\t\"email\": \"test@test.com\"\n\t},\n\t\"shipping_address\": {\n\t\t\"first_name\": \"Mike\",\n\t\t\"last_name\": \"Jolley\",\n\t\t\"address_1\": \"Test Address\",\n\t\t\"city\": \"Test City\",\n\t\t\"country\": \"US\",\n\t\t\"state\": \"AL\",\n\t\t\"postcode\": \"90210\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced Item Name Modification\nDESCRIPTION: Advanced implementation of itemName filter that adds different emoji decorations based on product names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyItemName = ( defaultValue, extensions, args ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\tif ( args?.cartItem?.name === 'Beanie with Logo' ) {\n\t\treturn `⛷️ ${ defaultValue } ⛷️`;\n\t}\n\n\tif ( args?.cartItem?.name === 'Sunglasses' ) {\n\t\treturn `🏄‍♂️ ${ defaultValue } 🏄‍♂️`;\n\t}\n\n\treturn `🪴 ${ defaultValue } 🪴`;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\titemName: modifyItemName,\n} );\n```\n\n----------------------------------------\n\nTITLE: Extending Store Pages in Coming Soon Mode\nDESCRIPTION: Shows how to add custom pages to the list of store pages that are restricted by coming soon mode.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/integrating-coming-soon-mode.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_store_pages', function( $pages ) {\n    $page = get_page_by_path( 'your-page-slug' );\n    if ( $page ) {\n        $pages[] = $page->ID;\n    }\n    return $pages;\n} );\n```\n\n----------------------------------------\n\nTITLE: Using getSlug Function in JavaScript\nDESCRIPTION: This function takes a string name and generates a slug for it. It's part of the general utilities object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nutils.getSlug(text)\n```\n\n----------------------------------------\n\nTITLE: Testing API Connection via npm (Shell)\nDESCRIPTION: Provides the npm command to execute a specific test script (`e2e:hello`) designed to verify the API connection. This script checks connectivity to both non-authenticated (Index) and authenticated (System status properties) endpoints.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm run e2e:hello\n```\n\n----------------------------------------\n\nTITLE: Loading Settings in WooCommerce Extensions\nDESCRIPTION: Method call to load the defined settings. This should be placed in your constructor after defining the form fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Load the settings.\n$this->init_settings();\n```\n\n----------------------------------------\n\nTITLE: Creating a WooCommerce Customer via WC-CLI in Bash\nDESCRIPTION: Creates a new WooCommerce customer account. Requires the `--email` and `--password` parameters. Optional parameters include first name (`--first_name`), last name (`--last_name`), username (`--username`), billing address (`--billing`), shipping address (`--shipping`), and custom metadata (`--meta_data`). Use `--porcelain` to output only the new customer ID.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc customer create --email=<email> --password=<password> [options]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Shipping Class Details in WooCommerce CLI\nDESCRIPTION: Command for getting details of a specific product shipping class by its ID, with options for formatting and field selection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_48\n\nLANGUAGE: bash\nCODE:\n```\nwc product_shipping_class get [id]\n```\n\n----------------------------------------\n\nTITLE: Cart and Checkout Block Hooks\nDESCRIPTION: List of supported PHP hooks for modifying cart and checkout functionality including woocommerce_cart_calculate_fees for modifying fees, woocommerce_init for customer information updates, and woocommerce_product_get_name for changing product names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_cart_calculate_fees\nwoocommerce_init\nwoocommerce_product_get_name\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies\nDESCRIPTION: Installs system dependencies required for running Playwright tests in headless mode, including various libraries and utilities.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/WSL_SETUP_INSTRUCTIONS.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install -y ca-certificates fonts-liberation gconf-service libappindicator1 libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils\n```\n\n----------------------------------------\n\nTITLE: Adding Tax Classes to WooCommerce Product Select Field in PHP\nDESCRIPTION: This snippet demonstrates how to add tax classes as options to a single selection field in the WooCommerce product editor. It shows proper configuration of the product-select-field block with label, property, help text, and options array containing tax class choices.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/select/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$section->add_block(\n  array(\n    'id'         => 'unique-block-id',\n    'blockName'  => 'woocommerce/product-select-field',\n    'order'      => 13,\n    'attributes' => array(\n      'label'    => 'Tax class',\n      'property' => 'tax_class',\n      'help'     => 'Apply a tax rate if this product qualifies for tax reduction or exemption.',\n      'options'  => array(\n        array(\n          'value' => 'Standard rate',\n          'label' => '',\n        ),\n        array(\n          'value' => 'Reduced rate',\n          'label' => 'reduced-rate',\n        ),\n        array(\n          'value' => 'Zero rate',\n          'label' => 'zero-rate',\n        ),\n      ),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Replacing Hardcoded Text with Translatable Block Pattern in WooCommerce FSE\nDESCRIPTION: This HTML snippet demonstrates how to replace hardcoded text in an FSE template with a translatable block pattern. It uses a custom pattern slug for the empty cart message.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-FSE-templates.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:pattern {\"slug\":\"woocommerce/mini-cart-empty-cart-message\"} /-->\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Blocks Client\nDESCRIPTION: Commands to build, lint, and test the WooCommerce Blocks client located in the plugins/woocommerce/client/blocks directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Blocks client.\npnpm --filter='@woocommerce/plugin-woocommerce' build:blocks\n# Lint the Blocks client.\npnpm run --filter='@woocommerce/block-library' lint\n# Test the Blocks client.\npnpm run --filter='@woocommerce/block-library' test\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Groups via Jest (Shell)\nDESCRIPTION: Provides an alternative command using `jest` directly with the `--group=` flag to execute a specific test group (e.g., 'api'). This requires `jest` and `jest-runner-groups` to be set up.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\njest --group=api\n```\n\n----------------------------------------\n\nTITLE: Add to Cart Link Class Filter\nDESCRIPTION: Filter to modify the CSS class of the add to cart button link.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_loop_add_to_cart_link', string $class )\n```\n\n----------------------------------------\n\nTITLE: Complex Logical Expression with Multiple Conditions\nDESCRIPTION: A complex expression with multiple condition groups checking property values and numeric ranges.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfoo.bar\n\t&& ( foo.baz === \"qux\" || foo.baz === \"quux\" )\n\t&& ( foo.quux > 1 && foo.quux <= 5 )\n```\n\n----------------------------------------\n\nTITLE: Preparing Packages for Release via Command Line\nDESCRIPTION: Command to prepare all packages for release from the monorepo root. Can be used with -a flag for all packages or with specific package names separated by commas.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/package-release/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./tools/package-release/bin/dev prepare -a\n```\n\n----------------------------------------\n\nTITLE: Running Specific Integration Tests for WooCommerce Email Editor\nDESCRIPTION: This command demonstrates how to run specific integration tests for the WooCommerce Email Editor package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# To run test cases defined in tests/integration/Engine/Theme_Controller_Test.php run\ncomposer run integration-test -- tests/integration/Engine/Theme_Controller_Test.php\n```\n\n----------------------------------------\n\nTITLE: Adding React Component for Custom Page\nDESCRIPTION: JavaScript code to add a React component for a custom WooCommerce Admin page and register it with the pages list.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\nimport { __ } from '@wordpress/i18n';\n\nconst MyExamplePage = () => <h1>My Example Extension</h1>;\n\naddFilter( 'woocommerce_admin_pages_list', 'my-namespace', ( pages ) => {\n\tpages.push( {\n\t\tcontainer: MyExamplePage,\n\t\tpath: '/example',\n\t\tbreadcrumbs: [ __( 'My Example Page', 'my-textdomain' ) ],\n\t\tnavArgs: {\n\t\t\tid: 'my-example-page',\n\t\t},\n\t} );\n\n\treturn pages;\n} );\n```\n\n----------------------------------------\n\nTITLE: Cart Testing Checklist in Markdown\nDESCRIPTION: Comprehensive checklist of test cases for validating cart functionality, including quantity management, stock limit enforcement, and multi-session testing scenarios.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/items.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] You should be able to add items to your cart.\n-   [ ] You should be able to change item quantity in your Cart.\n-   [ ] You should not be able to change \"sold individually\" items quantity.\n-   [ ] Items that have quantity lower than the threshold should show \"x Left in stock\". - [ ] You should not be able to increase that item quantity to above that is left in stock.\n-   [ ] If you try to increase an item quantity to above its stock quantity, you get an error. **Note:** This is not something that can be tested with a single browser instance. To test you need to do the following:\n    -   [ ] Set a stock of 4 on an item.\n    -   [ ] Open tabs in two different browsers (so you have two different sessions in play).\n    -   [ ] In both browsers add 1 of that item into the cart.\n    -   [ ] In both browsers, load the cart (block).\n    -   [ ] In one browser, increase the quantity of that item to the maximum you can.\n    -   [ ] In the other browser, try increasing the quantity. An error should appear.\n-   [ ] You should be able to remove an item.\n```\n\n----------------------------------------\n\nTITLE: Configuring Composer Autoload for WordPress Classes\nDESCRIPTION: JSON configuration for composer.json to handle WordPress class naming conventions using classmap.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"autoload\": {\n   \t \"classmap\": [\"includes/\", \"includes/admin/\"]\n    }\n```\n\n----------------------------------------\n\nTITLE: Filter Blocks HTML Implementation\nDESCRIPTION: HTML markup for implementing WooCommerce filter blocks including price filter, attribute filter, active filters, and stock filter with product display configuration\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1024.md#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<!-- wp:columns -->\n<div class=\"wp-block-columns\"><!-- wp:column {\"width\":\"33.33%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:33.33%\"><!-- wp:woocommerce/price-filter -->\n<div class=\"wp-block-woocommerce-price-filter is-loading\" data-showinputfields=\"true\" data-showfilterbutton=\"false\" data-heading=\"Filter by price\" data-heading-level=\"3\"><span aria-hidden=\"true\" class=\"wc-block-product-categories__placeholder\"></span></div>\n<!-- /wp:woocommerce/price-filter -->\n\n<!-- wp:woocommerce/attribute-filter {\"attributeId\":1,\"displayStyle\":\"dropdown\",\"heading\":\"Filter by Color\"} -->\n<div class=\"wp-block-woocommerce-attribute-filter is-loading\" data-attribute-id=\"1\" data-show-counts=\"true\" data-query-type=\"or\" data-heading=\"Filter by Color\" data-heading-level=\"3\" data-display-style=\"dropdown\"><span aria-hidden=\"true\" class=\"wc-block-product-attribute-filter__placeholder\"></span></div>\n<!-- /wp:woocommerce/attribute-filter -->\n\n<!-- wp:woocommerce/attribute-filter {\"attributeId\":2,\"heading\":\"Filter by Size\"} -->\n<div class=\"wp-block-woocommerce-attribute-filter is-loading\" data-attribute-id=\"2\" data-show-counts=\"true\" data-query-type=\"or\" data-heading=\"Filter by Size\" data-heading-level=\"3\"><span aria-hidden=\"true\" class=\"wc-block-product-attribute-filter__placeholder\"></span></div>\n<!-- /wp:woocommerce/attribute-filter -->\n\n<!-- wp:woocommerce/active-filters -->\n<div class=\"wp-block-woocommerce-active-filters is-loading\" data-display-style=\"list\" data-heading=\"Active filters\" data-heading-level=\"3\"><span aria-hidden=\"true\" class=\"wc-block-active-product-filters__placeholder\"></span></div>\n<!-- /wp:woocommerce/active-filters -->\n\n<!-- wp:woocommerce/stock-filter -->\n<div class=\"wp-block-woocommerce-stock-filter is-loading\" data-show-counts=\"true\" data-heading=\"Filter by stock status\" data-heading-level=\"3\"><span aria-hidden=\"true\" class=\"wc-block-product-stock-filter__placeholder\"></span></div>\n<!-- /wp:woocommerce/stock-filter --></div>\n<!-- /wp:column -->\n\n<!-- wp:column {\"width\":\"66.66%\"} -->\n<div class=\"wp-block-column\" style=\"flex-basis:66.66%\"><!-- wp:woocommerce/all-products {\"columns\":3,\"rows\":3,\"alignButtons\":false,\"contentVisibility\":{\"orderBy\":true},\"orderby\":\"date\",\"layoutConfig\":[[\"woocommerce/product-image\"],[\"woocommerce/product-title\"],[\"woocommerce/product-price\"],[\"woocommerce/product-rating\"],[\"woocommerce/product-button\"]]} -->\n<div class=\"wp-block-woocommerce-all-products wc-block-all-products\" data-attributes=\"{&quot;alignButtons&quot;:false,&quot;columns&quot;:3,&quot;contentVisibility&quot;:{&quot;orderBy&quot;:true},&quot;isPreview&quot;:false,&quot;layoutConfig&quot;:[[&quot;woocommerce/product-image&quot;],[&quot;woocommerce/product-title&quot;],[&quot;woocommerce/product-price&quot;],[&quot;woocommerce/product-rating&quot;],[&quot;woocommerce/product-button&quot;]],&quot;orderby&quot;:&quot;date&quot;,&quot;rows&quot;:3}\"></div>\n<!-- /wp:woocommerce/all-products --></div>\n<!-- /wp:column --></div>\n<!-- /wp:columns -->\n```\n\n----------------------------------------\n\nTITLE: Mapping Custom Column Data for WooCommerce Downloads CSV Export in PHP\nDESCRIPTION: This PHP code snippet maps the 'access_expires' data from the database query to the CSV export item using the 'woocommerce_report_downloads_prepare_export_item' filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/adding-columns-to-analytics-reports-and-csv-downloads.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction map_access_expires( $export_item, $item ) {\n\t$export_item['access_expires'] = $item['access_expires'];\n\treturn $export_item;\n}\nadd_filter( 'woocommerce_report_downloads_prepare_export_item', 'map_access_expires', 10, 2 );\n```\n\n----------------------------------------\n\nTITLE: Registering Scripts with Translation Support in PHP\nDESCRIPTION: Code snippet from WooCommerce Blocks' Assets/Api.php file showing how scripts are registered with translation support. This function registers JavaScript files and sets up their translations using wp_set_script_translations(), which loads the corresponding JSON translation files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Registers a script according to `wp_register_script`, adding the correct prefix, and additionally loading translations.\n *\n * When creating script assets, the following rules should be followed:\n *   1. All asset handles should have a `wc-` prefix.\n *   2. If the asset handle is for a Block (in editor context) use the `-block` suffix.\n *   3. If the asset handle is for a Block (in frontend context) use the `-block-frontend` suffix.\n *   4. If the asset is for any other script being consumed or enqueued by the blocks plugin, use the `wc-blocks-` prefix.\n *\n * @since 2.5.0\n * @throws Exception If the registered script has a dependency on itself.\n *\n * @param string $handle        Unique name of the script.\n * @param string $relative_src  Relative url for the script to the path from plugin root.\n * @param array  $dependencies  Optional. An array of registered script handles this script depends on. Default empty array.\n * @param bool   $has_i18n      Optional. Whether to add a script translation call to this file. Default: true.\n */\npublic function register_script( $handle, $relative_src, $dependencies = [], $has_i18n = true ) {\n  $script_data = $this->get_script_data( $relative_src, $dependencies );\n\n  if ( in_array( $handle, $script_data['dependencies'], true ) ) {\n    if ( $this->package->feature()->is_development_environment() ) {\n      $dependencies = array_diff( $script_data['dependencies'], [ $handle ] );\n        add_action(\n          'admin_notices',\n          function() use ( $handle ) {\n              echo '<div class=\"error\"><p>';\n              /* translators: %s file handle name. */\n              printf( esc_html__( 'Script with handle %s had a dependency on itself which has been removed. This is an indicator that your JS code has a circular dependency that can cause bugs.', 'woo-gutenberg-products-block' ), esc_html( $handle ) );\n              echo '</p></div>';\n          }\n        );\n    } else {\n      throw new Exception( sprintf( 'Script with handle %s had a dependency on itself. This is an indicator that your JS code has a circular dependency that can cause bugs.', $handle ) );\n    }\n  }\n\n  /**\n   * Filters the list of script dependencies.\n   *\n   * @param array $dependencies The list of script dependencies.\n   * @param string $handle The script's handle.\n   * @return array\n   */\n  $script_dependencies = apply_filters( 'woocommerce_blocks_register_script_dependencies', $script_data['dependencies'], $handle );\n\n  wp_register_script( $handle, $script_data['src'], $script_dependencies, $script_data['version'], true );\n\n  if ( $has_i18n && function_exists( 'wp_set_script_translations' ) ) {\n    wp_set_script_translations( $handle, 'woo-gutenberg-products-block', $this->package->get_path( 'languages' ) );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in Markdown Documentation\nDESCRIPTION: Example showing how to use the permitted inline HTML video element in WooCommerce documentation as allowed by the custom linting rule MD033.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/style-guide.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n<video src=\"path_to_video.mp4\" controls></video>\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Getter Method\nDESCRIPTION: Example of a getter method implementation for accessing the 'used_by' property of a WooCommerce coupon object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/data-management/crud-objects.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\npublic function get_used_by( $context = 'view' ) {\n\treturn $this->get_prop( 'used_by', $context );\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a Validation Error in JavaScript\nDESCRIPTION: Example showing how to hide a specific validation error using the hideValidationError action.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/validation.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { dispatch } = wp.data;\nconst { hideValidationError } = dispatch( validationStore );\n\nhideValidationError( 'billing-first-name' );\n```\n\n----------------------------------------\n\nTITLE: Testing Steps for Featured Product/Category Image Editor\nDESCRIPTION: Markdown formatted testing instructions for verifying image editor functionality in Featured Product and Category blocks across WordPress versions 6.1 and 6.2\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1003.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n0. With WP 6.2:\n1. Create a post and add the Featured Category block.\n2. Click on the button to edit the image (note: this button is only available if the category has an image, if you don't have any categories with images, go to `wp-admin` > Products > Categories and edit a category to add an image):\n3. Make some changes (rotate, zoom, change aspect ratio, etc.) and apply them.\n4. Verify the changes are applied and there are no errors in the browser devtools console (you can open it with <kbd>F12</kbd>).\n5. Repeat all the steps above with the Featured Product block.\n6. Repeat all steps above with WP 6.1 (you can use [WP Downgrade](https://wordpress.org/plugins/wp-downgrade/)).\n```\n\n----------------------------------------\n\nTITLE: Using Conditional (Ternary) Operator\nDESCRIPTION: Example of the ternary operator (?:), which returns the first value if the condition is true, otherwise returns the second value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\ntrue ? 1 : 2\n```\n\n----------------------------------------\n\nTITLE: Starting the E2E Testing Environment\nDESCRIPTION: Command to start the environment for running end-to-end tests on WooCommerce Blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/block-library env:start\n```\n\n----------------------------------------\n\nTITLE: Using Strict Inequality Comparison Operator\nDESCRIPTION: Example of the strict inequality (!==) operator, which returns true if the operands are not equal and/or not of the same type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n1 !== \"1\"\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Status from Payment Data Store\nDESCRIPTION: Shows how to use WordPress data selectors to query the various payment status flags from the payment data store. This allows components to react to payment processing states.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { select } = window.wp.data;\nconst { paymentStore } = window.wc.wcBlocksData;\n\nconst MyComponent = ( props ) => {\n\tconst isPaymentIdle = select( paymentStore ).isPaymentIdle();\n\tconst isExpressPaymentStarted =\n\t\tselect( paymentStore ).isExpressPaymentStarted();\n\tconst isPaymentProcessing =\n\t\tselect( paymentStore ).isPaymentProcessing();\n\tconst isPaymentReady = select( paymentStore ).isPaymentReady();\n\tconst hasPaymentError = select( paymentStore ).hasPaymentError();\n\n\t// do something with the boolean values\n};\n```\n\n----------------------------------------\n\nTITLE: Installing PHP and Composer Dependencies\nDESCRIPTION: Installs PHP CLI, Composer package manager, and required PHP extensions (php-xml, php-mbstring). Includes verification of Composer's installation signature for security.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/WSL_SETUP_INSTRUCTIONS.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install php-cli unzip -y\n\ncd ~\n\ncurl -sS https://getcomposer.org/installer -o composer-setup.php\n\nHASH=`curl -sS https://composer.github.io/installer.sig`\n\necho $HASH\n\nphp -r \"if (hash_file('SHA384', 'composer-setup.php') === '$HASH') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;\"\n\nsudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer\n\ncomposer --version --no-interaction # Verify that Composer installation was successful\n\nsudo apt install php-xml -y\n\nsudo apt install php-mbstring -y\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items Pending Quantity Update in JavaScript\nDESCRIPTION: This code shows how to use the getItemsPendingQuantityUpdate selector to get an array of item keys for items whose quantity is being updated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst itemsPendingQuantityUpdate = store.getItemsPendingQuantityUpdate();\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Order Refund via CLI\nDESCRIPTION: Fetches details for a specific WooCommerce order refund using its `id` and associated `order_id`. Optional parameters allow filtering fields (`--fields`, `--field`), controlling response context (`--context`), and specifying output format (`--format`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order_refund get <order_id> [id]\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Tax Class Management\nDESCRIPTION: Commands for handling tax classes in WooCommerce, including listing, creating, and deleting tax classes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_59\n\nLANGUAGE: cli\nCODE:\n```\nwc tax_class list\nwc tax_class create --name=<value>\nwc tax_class delete [id] --slug=<value>\n```\n\n----------------------------------------\n\nTITLE: Stripe Test Card Number for 3D Secure Failure Simulation\nDESCRIPTION: This specific Stripe test card number (`4000 0027 6000 3184`) is used to trigger the 3D Secure authentication modal during checkout, allowing testers to simulate a failed authentication scenario and verify error handling in the Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/370.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n4000 0027 6000 3184\n```\n\n----------------------------------------\n\nTITLE: Implementing 'range' Operation for Option Check in JSON\nDESCRIPTION: This snippet demonstrates the use of the 'range' operation to check if an option value falls within a specified inclusive range. This example checks if the 'woocommerce_remote_variant_assignment' option is between 1 and 10.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"option\",\n  \"value\": [ 1, 10 ],\n  \"default\": 0,\n  \"operation\": \"range\",\n  \"option_name\": \"woocommerce_remote_variant_assignment\",\n}\n```\n\n----------------------------------------\n\nTITLE: Running WooCommerce Integration Tests with Composer\nDESCRIPTION: Composer command to execute integration tests for the WooCommerce project. This verifies how different components work together.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/development.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run test:integration\n```\n\n----------------------------------------\n\nTITLE: Comparing Order Data with JSON Output\nDESCRIPTION: Outputs differences between HPOS and legacy order data in JSON format, which can be useful for programmatic processing or exporting to a file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100126 --format=json\nWarning: Differences found for order 100126:\n[{\"property\":\"status\",\"hpos\":\"completed\",\"post\":\"pending\"},{\"property\":\"total\",\"hpos\":\"567.25\",\"post\":\"267.25\"},{\"property\":\"date_modified\",\"hpos\":\"2024-04-04T15:32:27+00:00\",\"post\":\"2024-04-04T19:00:26+00:00\"},{\"property\":\"billing_first_name\",\"hpos\":\"Hans\",\"post\":\"Jans\"},{\"property\":\"post_only_meta\",\"hpos\":\"\",\"post\":\"why not?\"}]\n```\n\n----------------------------------------\n\nTITLE: Creating Example WooCommerce Admin Class with Dependencies\nDESCRIPTION: Example PHP class demonstrating code that is difficult to test due to dependencies on WordPress options and legacy service static methods.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/Tools/CodeHacking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass WC_Admin_Foobar {\n\tpublic function do_something_that_depends_on_an_option() {\n\t\treturn 'The option returns: ' . get_option('some_option', 'default option value');\n\t}\n\n\tpublic function do_something_that_depends_on_the_legacy_service( $what ) {\n\t\treturn 'The legacy service returns: ' . WC_Some_Legacy_Service::do_something( $what );\n\t}\n}\n\nclass WC_Some_Legacy_Service {\n\tpublic static function do_something( $what ) {\n\t\treturn \"The legacy service does something with: \" . $what;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Mode\nDESCRIPTION: JavaScript code to enable debugging mode for WooCommerce Tracks by setting a localStorage value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem( 'debug', 'wc-admin:*' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Shop Order via CLI\nDESCRIPTION: Fetches details for a specific WooCommerce shop order using its `id`. Optional parameters allow filtering fields (`--fields`, `--field`), controlling response context (`--context`), and specifying output format (`--format`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order get [id]\n```\n\n----------------------------------------\n\nTITLE: Creating Ready Page for Test Sequencer using WP-CLI\nDESCRIPTION: WP-CLI command used during built-in initialization to create a WordPress page titled 'Ready' with specific content ('E2E-tests.'). The presence of this page signals to the test sequencer that the testing environment is fully initialized and ready to begin testing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nwp post create --post_type=page --post_status=publish --post_title='Ready' --post_content='E2E-tests.'\n```\n\n----------------------------------------\n\nTITLE: Example Test Specs Structure for Installer - JSON\nDESCRIPTION: Provides an example of a JSON object used by the test installer to register and discover E2E test suites, folders, and function mappings. Each group ('active') has a folder name, description, and a list of test files with associated test function names. This drives auto-generation of test runners and organizes test execution logically. Inputs should reflect all critical test flows to be included, outputs determine which test files are created.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/test-packages.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"active\": [\n    {\n      \"name\": \"first-folder-name\",\n      \"description\": \"First tests\",\n      \"testFiles\": [\n        {\n          \"name\": \"test-name-a\",\n          \"functions\": [\n            \"testMyCriticalFlow\"\n          ]\n        },\n        {\n          \"name\": \"test-name-b\",\n          \"functions\": [\n            \"testSecondCriticalFlow\",\n            \"testThirdCriticalFlow\"\n          ]\n        }\n      ]\n    },\n    {\n      \"name\": \"second-folder-name\",\n      \"description\": \"Second tests\",\n      \"testFiles\": [\n        ....\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Menu Item with WooProductMoreMenuItem in React JSX\nDESCRIPTION: Example showing how to create a custom menu item with a click action using the WooProductMoreMenuItem component. The order property is set to 3 to control the position of the item relative to other menu items.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/header/woo-more-menu-item/Readme.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nexport { __experimentalWooProductMoreMenuItem as WooProductMoreMenuItem } from '@woocommerce/product-editor';\n\nconst MyCustomMenuItem = () => (\n    <WooProductMoreMenuItem order={ 3 }>\n        <button onClick={() => console.log( 'Custom Action' ) }>\n            Custom Action\n        </button>\n    </WooProductMoreMenuItem>\n);\n```\n\n----------------------------------------\n\nTITLE: Confirming Order Sync with `wc hpos diff` (Plaintext)\nDESCRIPTION: Runs `wp wc hpos diff` on order ID 100126 after performing targeted `backfill` operations. The success message indicates that no differences remain between the HPOS and posts datastores for this order.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100126\nSuccess: No differences found.\n```\n\n----------------------------------------\n\nTITLE: Using Equality Comparison Operator\nDESCRIPTION: Example of the equality (==) operator, which returns true if the operands are equal.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n1 == 1\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Version Check in PHP\nDESCRIPTION: Example showing how to verify WooCommerce version compatibility using version_compare within the woocommerce_init hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/check-if-woo-is-active.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_init', 'prefix_woocommerce_init' );\n\nfunction prefix_woocommerce_init() {\n\t// Only continue if we have access to version 8.7.0 or higher.\n\tif ( version_compare( wc()->version, '8.7.0', '<' ) ) {\n\t\treturn;\n\t}\n\n\t// Custom code here. WooCommerce is active and initialized...\n}\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Fetching Product Tags\nDESCRIPTION: Example curl command demonstrating how to make a GET request to the product tags endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-tags.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/tags\"\n```\n\n----------------------------------------\n\nTITLE: Documenting and Validating WooCommerce Gutenberg Block Release - Markdown\nDESCRIPTION: This Markdown document provides sequential, step-by-step instructions for testing various features and bug fixes in the WooCommerce Gutenberg Products Block v7.0.0 release. No external dependencies are required beyond a running WordPress + WooCommerce setup and compatible themes; it integrates deeply with plugin and block workflows for visual and behavioral testing. Sections include checklists to validate UI customizations, correct application of settings, and smoke-testing for newly TypeScript-converted components. Inputs are user actions and observations; outputs are user-verified confirmations of expected results. The file is constrained to documentation purposes only and must be interpreted in the context of software QA for WordPress plugins.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/700.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Testing notes and ZIP for release 7.0.0\n\nZip file for testing: [woocommerce-gutenberg-products-block.zip](https://github.com/woocommerce/woocommerce-gutenberg-products-block/files/8074954/woocommerce-gutenberg-products-block.zip)\n\n## Feature Plugin\n\n### FSE: Enable global style for Attribute Filter Block ([5557](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5557))\n\n1.  Upgrade to `WordPress 5.9`.\n2.  Install and enable the `Twenty Twenty-Two` theme.\n3.  Add the `Filter Products By Attribute` Block to a post.\n4.  On the right sidebar, personalize the styles of the block.\n5.  Go on the page and check if there are changes.\n6.  Reset to default using the `Reset` button from the different sections.\n7.  Go to Dashboard and select Appearance > Editor (beta). On top of the screen, select Home > Browser all templates > Single Post. When the page is loaded, add the block to the page.\n8.  On the Editor page click on the `Styles` icon on the right-top corner.\n9.  Verify that the `Filter Products By Attribute` Block is shown under the `Blocks` section. Personalize again the block.\n10. Save your changes.\n11. Go on the page created earlier and check if all styles are applied correctly.\n12. Edit your previous post/page again.\n13. Change again the styles.\n14. Save your changes.\n15. Check if these styles have priority over the styles from the Site Editor.\n\n### FSE: Enable global style for Sale Product Block ([5565](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5565))\n\n1. Install and enable the `Twenty Twenty-Two` theme.\n2. Add the `All Products` Block to a post.\n3. Go to Dashboard and select Appearance > Editor (beta).\n4. On the Editor page click on the `Styles` icon on the right-top corner.\n5. Verify that the `On-Sale Badge` is shown under the `Blocks` section. Click on the label. Personalize the block.\n6. Save your changes.\n7. Go on the page created earlier and check if all styles are applied correctly.\n\n### FSE: Revert template customization for WooCommerce templates ([5746](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5746))\n\n1. Ensure you have the latest WooCommerce, WordPress 5.9 and a block theme so that the FSE feature is enabled.\n2. Go to Appearance > Editor and load Single Product template, customize the content and save the template.\n3. In a separate tab ensure these changes are represented on the frontend, be careful _not_ to reload the current tab.\n4. Back in your Site Editor tab, using the navigation please navigate back to All Templates view. In the list of templates your customized Single Product template should indicate it has been customized.\n5. Click the three dots on the right of this template and click \"Clear Customizations\" and wait until the action has been complete.\n6. Click \"Single Product\" again to go back into this template, check that all customizations have been cleared.\n7. In a separate tab ensure these changes are represented on the frontend, be careful _not_ to reload the current tab.\n8. Now in your Site Editor tab make another customization in this template and save it. Then using the navigation please navigate back to All Templates view. In the list of templates your customized Single Product template should indicate it has been customized.\n9. Now click \"Single Product\" again to go back into the Site Editor, check that these customizations are showing still in the Site Editor.\n10. Click the downward chevron in the top bar next to the block template title. It should show a \"Clear Customizations\" option here, click this and check that all customizations are reverted.\n11. Now add a WooCommerce template (e.g. `single-product.html`) into your theme or download and install [this version of TwentyTwentyTwo](https://github.com/woocommerce/woocommerce-gutenberg-products-block/files/8036005/twentytwentytwo.zip) and test steps 1-10 again.\n\n### Checkout: Local state management for shipping options ([5802](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5802))\n\n1. Ensure your store has multiple shipping methods setup\n2. Add something to your cart that requires shipping\n3. Go to the cart block\n4. Select a shipping option. Confirm the UI updates instantly, and the option remains checked once totals are updated\n5. Open 2 tabs with a cart block in each\n6. In tab 1, select a shipping method\n7. In tab 2, change an item qty. Confirm that once the update completes, the correct shipping method is selected.\n\n### Cart and Checkout: Appender button overlap ([5801](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5801))\n\n1. Open up a page with the Checkout block in the editor\n2. Select the “Wide Width” option\n3. Confirm that the \"Place Order\" button and the \"Add Block\" button at the bottom of the block don't overlap\n4. Confirm that in the right hand side bar, the total price doesn't overlap with the \"Add block\" button\n5. Also check the Cart block that the insert inner block buttons don't overlap\n\n### Cart and Checkout: Fix button hover and focus states ([5712](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5712))\n\n1. Create test pages for cart, mini cart, and checkout blocks.\n2. In each page check the hover and focus styles for the `View my cart`, `Go to checkout`, `Proceed to Checkout`, and `Place Order` buttons.\n3. You can do the same test using the available default themes and the Storefront theme as well.\n\n### Product blocks: Fix ignoring redirection to cart after add ([5708](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5708))\n\n1. Go to WooCommerce Settings > Products > General and toggle _Redirect to the cart page after successful addition_\n2. Add All Blocks and/or other products blocks.\n3. Hit the _Add to Cart_ button\n4. If setting is enabled you should be automatically redirected to the cart\n\n### Checkout: Fix default attributes not being passed to the front-end ([5732](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5732))\n\n1. Add the Checkout block and select the Shipping Address in the editor.\n2. Change the settings (try a few different, random settings) in the sidebar and ensure the block changes as expected.\n3. Save the block and load it on the front-end and ensure the block is rendered as you expect based on the attributes you saved.\n4. Go back to the editor and select the Checkout block as a whole, set the \"Dark mode inputs\" option to true.\n5. Load the block in the front-end again and ensure the dark mode inputs are being used.\n\n### Checkout: Fix handling of orders without payments ([5720](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5720))\n\n1. Create a coupon for 100% of the order total.\n2. Add items to cart.\n3. Apply the coupon. The order total should be 0 and the payment section hidden during checkout.\n4. Place the order. Confirm it goes through without errors.\n\n### TS conversion of several blocks ([5668](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5668))\n\nThe following components have been converted to TypeScript, hence they benefit from a smoke test:\n\n-   `base/components/ProductList`\n-   `base/components/FilterElementLabel`\n-   `base/components/FilterSubmitButton`\n-   `base/components/Form`\n-   `base/components/LoadMoreButton`\n-   `base/components/LoadingMask`\n-   `base/components/Pagination`\n-   `base/components/SortSelect`\n\n### FSE: Add a “Remove Image” option to the Featured Category Block ([5719](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5719))\n\n1. Go to post or page\n2. Add Featured Category block and add an image to it\n3. Check the \"Remove\" button that appears in the toolbar\n4. Click the \"Remove\" button and check it removes the image, save block and check frontend.\n\n### TT2: Fix Twenty Twenty-Two Products by Category Block item tile styling issues ([5684](https://github.com/woocommerce/woocommerce-gutenberg-products-block/pull/5684))\n\n1. Get the [Twenty Twenty Two](https://wordpress.org/themes/twentytwentytwo/) theme\n2. Create a page with Products by category block with products on sale available\n3. Visit the page\n4. Confirm sale price on products on sale **is not** underlined\n5. Add product to cart\n6. Confirm `View cart` action is centred under the `Add to cart` button and not broken into two lines\n\n```\n\n----------------------------------------\n\nTITLE: Syncing Multiple Properties with `wc hpos backfill` (Plaintext)\nDESCRIPTION: Shows how to sync multiple order properties ('total', 'date_modified', 'billing_first_name') for order ID 100126 from the HPOS datastore to the posts datastore using a comma-separated list in the `--props` parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_17\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos backfill 100126 --from=hpos --to=posts --props=total,date_modified,billing_first_name\nSuccess: Order 100126 backfilled from hpos to posts.\n```\n\n----------------------------------------\n\nTITLE: CSS Styling Example for Checkout Block\nDESCRIPTION: Example showing how to properly format CSS code blocks in documentation with explicit language definition.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/documentation-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* This will apply to prices in the checkout block */\n.wc-block-checkout .wc-block-components-formatted-money-amount {\n\tfont-style: italic;\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Unit Test Class with Function and Static Method Mocking\nDESCRIPTION: Test class showing how to use FunctionsMockerHack and StaticMockerHack to mock WordPress functions and static methods for testing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/Tools/CodeHacking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Automattic\\WooCommerce\\Testing\\Tools\\CodeHacking\\Hacks\\FunctionsMockerHack;\nuse Automattic\\WooCommerce\\Testing\\Tools\\CodeHacking\\Hacks\\StaticMockerHack;\n\nclass WC_Tests_Admin_Foobar extends WC_Unit_Test_Case {\n\tpublic function test_functions_mocking() {\n\t\t$tested = new WC_Admin_Foobar();\n\n\t\tFunctionsMockerHack::add_function_mocks([\n\t\t\t'get_option' => function( $name, $default = false ) {\n\t\t\t\treturn \"Mocked get_option invoked for '$name'\";\n\t\t\t}\n\t\t]);\n\n\t\t$expected = \"The option returns: Mocked get_option invoked for 'some_option'\";\n\t\t$actual = $tested->do_something_that_depends_on_an_option();\n\t\t$this->assertEquals( $expected, $actual );\n\t}\n\n\tpublic function test_static_method_mocking() {\n\t\t$tested = new WC_Admin_Foobar();\n\n\t\tStaticMockerHack::add_method_mocks([\n\t\t\t'WC_Some_Legacy_Service' => [\n\t\t\t\t'do_something' => function( $what ) {\n\t\t\t\t\treturn \"MOCKED do_something invoked for '$what'\";\n\t\t\t\t}\n\t\t\t]\n\t\t]);\n\n\t\t$expected = \"The legacy service returns: MOCKED do_something invoked for 'foobar'\";\n\t\t$actual = $tested->do_something_that_depends_on_the_legacy_service( 'foobar' );\n\t\t$this->assertEquals( $expected, $actual );\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up WooCommerce Admin Development Environment\nDESCRIPTION: Commands to clone the WooCommerce Admin repository, build it, and set up a new extension using create-wc-extension.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd wp-content/plugins\ngit clone git@github.com:woocommerce/woocommerce-admin.git\ncd woocommerce-admin\nnpm run build\n\nnpm run create-wc-extension\n\ncd ../<my-plugin-name>\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Generating Contributors List\nDESCRIPTION: Command to generate an HTML contributors list between two version numbers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/release-posts/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npnpm release-post contributors \"<currentVersion>\" \"<previousVersion>\"\n```\n\n----------------------------------------\n\nTITLE: Rendering EmptyContent Component in React (JSX)\nDESCRIPTION: This snippet demonstrates how to instantiate the EmptyContent component using JSX, passing various props to customize its title, descriptive text, action button label, and action URL. The component is intended for scenarios where there is no data to display and can be enhanced with additional props as documented. To use this component, ensure React is available and EmptyContent is imported or accessible in scope. Inputs include title, message, action-related props, and illustration settings; output is a rendered UI element providing guidance to the user. The component is constrained to the documented props and should be used within a React render tree.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/empty-content/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<EmptyContent\n\ttitle=\"Nothing here\"\n\tmessage=\"Some descriptive text\"\n\tactionLabel=\"Reload page\"\n\tactionURL=\"#\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Logical AND Operator\nDESCRIPTION: Example of the logical AND (&&) operator, which returns true if both operands are true.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\ntrue && true\n```\n\n----------------------------------------\n\nTITLE: Running All E2E Tests for WooCommerce Blocks\nDESCRIPTION: Command to execute all end-to-end tests for the WooCommerce Blocks library.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/block-library test:e2e\n```\n\n----------------------------------------\n\nTITLE: Installing @wordpress/notices package using pnpm\nDESCRIPTION: This code snippet demonstrates how to install the @wordpress/notices package using the pnpm package manager. It's a prerequisite step for using the notices state management in a project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/notices/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @wordpress/notices\n```\n\n----------------------------------------\n\nTITLE: Shipping API Routes and Test Paths\nDESCRIPTION: Table showing shipping-related API endpoints and their test file locations. Covers shipping zones, methods, and classes management.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/api-critical-flows.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Route            | Flow name                                     | Endpoints                                    | Test File                                                    |\n|------------------|-----------------------------------------------|----------------------------------------------|--------------------------------------------------------------|\n| Shipping zones   | Can create shipping zones                     | `/wp-json/wc/v3/shipping/zones`              | `tests/api-core-tests/tests/shipping/shipping-zones.test.js` |\n| Shipping methods | Can create shipping method to a shipping zone | `/wp-json/wc/v3/shipping/zones/{id}/methods` | n/a                                                          |\n| Shipping classes | Can create a product shipping class           | `/wp-json/wc/v3/products/shipping_classes`   | `tests/api-core-tests/tests/products/products-crud.test.js`  |\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Block Configuration - Markdown Format\nDESCRIPTION: Block configuration documentation showing hierarchical structure, dependencies, and configuration options for various WooCommerce blocks. Includes details about block names, categories, ancestors, parents, supported features, and attributes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/block-references.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Accordion Panel - woocommerce/accordion-panel\n\nAccordion Panel\n\n- **Name:** woocommerce/accordion-panel\n- **Category:** woocommerce\n- **Ancestor:** \n- **Parent:** woocommerce/accordion-item\n- **Supports:** border, color (background, gradient, text), interactivity, layout, shadow, spacing (blockGap, margin, padding), typography (fontSize, lineHeight)\n- **Attributes:** allowedBlocks, isSelected, openByDefault, templateLock\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Order Notes via WC-CLI in Bash\nDESCRIPTION: Lists notes associated with a specific WooCommerce order, identified by `<order_id>`. Allows filtering by note type (`--type`, customer or internal), specifying request context (`--context`), selecting specific fields (`--fields`, `--field`), and controlling the output format (`--format`, default: table).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Implicit command structure:\nwp wc order_note list <order_id> [options]\n```\n\n----------------------------------------\n\nTITLE: Product Delete Command\nDESCRIPTION: CLI command to delete a WooCommerce product using its ID. Supports force deletion and porcelain output options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_53\n\nLANGUAGE: cli\nCODE:\n```\nwc product delete [id]\n```\n\n----------------------------------------\n\nTITLE: Implementing List Indentation in Markdown\nDESCRIPTION: Example demonstrating the proper 4-space indentation for list items in WooCommerce documentation as specified by custom linting rule MD007.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/style-guide.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  - Item 1\n      - Subitem 1.1\n```\n\n----------------------------------------\n\nTITLE: Implementing Integration Registry Registration Hook in PHP\nDESCRIPTION: This hook fires when the IntegrationRegistry is initialized. It provides access to the registry instance, allowing developers to register custom integrations with the blocks system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_15\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_{$this->registry_identifier}_registration', \\Automattic\\WooCommerce\\Blocks\\Integrations\\IntegrationRegistry $this )\n```\n\n----------------------------------------\n\nTITLE: Bumping Stats with TypeScript\nDESCRIPTION: Examples of bumping single and multiple stats using the bumpStat function from @woocommerce/tracks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { bumpStat } from '@woocommerce/tracks';\n\n// Bump a single stat\nbumpStat( 'stat_name', 'stat_value' );\n\n// Bump multiple stats\nbumpStat( {\n  stat1: 'value1',\n  stat2: 'value2'\n} );\n```\n\n----------------------------------------\n\nTITLE: Running All API Tests via npm (Shell)\nDESCRIPTION: The standard npm command used to execute the entire suite of WooCommerce API tests defined in the project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm run e2e:api\n```\n\n----------------------------------------\n\nTITLE: Enabling Live Reload for Woo AI Plugin Development\nDESCRIPTION: Commands to install dependencies and start the development server with live reload functionality. This allows for real-time updates as code changes are made.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woo-ai/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npnpm install\npnpm start\n```\n\n----------------------------------------\n\nTITLE: Including WooCommerce Core Files in PHP\nDESCRIPTION: This method includes various core files and classes required for WooCommerce functionality, such as abstracts, interfaces, and core classes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/PREVIOUS_CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\npublic function includes() {\n\t/**\n\t * Core classes.\n\t */\n\tinclude_once WC_ABSPATH . 'includes/class-wc-autoloader.php';\n\tinclude_once WC_ABSPATH . 'includes/wc-core-functions.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-register-post-types.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-install.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-geolocation.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-download-handler.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-comments.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-post-data.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-ajax.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-emails.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-data-exception.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-query.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-meta-data.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-order-factory.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-order-query.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-product-factory.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-product-query.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-payment-tokens.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-shipping-zone.php';\n\tinclude_once WC_ABSPATH . 'includes/gateways/class-wc-payment-gateway-cc.php';\n\tinclude_once WC_ABSPATH . 'includes/gateways/class-wc-payment-gateway-echeck.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-countries.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-integrations.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-cache-helper.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-https.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-deprecated-action-hooks.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-deprecated-filter-hooks.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-background-emailer.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-discounts.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-cart-totals.php';\n\tinclude_once WC_ABSPATH . 'includes/customizer/class-wc-shop-customizer.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-regenerate-images.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-privacy.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-structured-data.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-shortcodes.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-logger.php';\n\tinclude_once WC_ABSPATH . 'includes/queue/class-wc-action-queue.php';\n\tinclude_once WC_ABSPATH . 'includes/queue/class-wc-queue.php';\n\tinclude_once WC_ABSPATH . 'includes/admin/marketplace-suggestions/class-wc-marketplace-updater.php';\n\tinclude_once WC_ABSPATH . 'includes/tracks/class-wc-tracks.php';\n\tinclude_once WC_ABSPATH . 'includes/tracks/class-wc-tracks-client.php';\n\tinclude_once WC_ABSPATH . 'includes/tracks/class-wc-tracks-footer-pixel.php';\n\tinclude_once WC_ABSPATH . 'includes/tracks/class-wc-site-tracking.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-calculator.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-product-item-lookup.php';\n\n\t/**\n\t * Data stores - used to store and retrieve CRUD object data from the database.\n\t */\n\tinclude_once WC_ABSPATH . 'includes/class-wc-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-data-store-wp.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-coupon-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-product-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-product-grouped-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-product-variable-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-product-variation-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/abstract-wc-order-item-type-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-product-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-product-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-coupon-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-fee-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-shipping-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-item-tax-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-payment-token-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-customer-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-customer-data-store-session.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-customer-download-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-customer-download-log-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-shipping-zone-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/abstract-wc-order-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-order-refund-data-store-cpt.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-webhook-data-store.php';\n\tinclude_once WC_ABSPATH . 'includes/data-stores/class-wc-plugin-updates-data-store.php';\n\n\t/**\n\t * REST API.\n\t */\n\tinclude_once WC_ABSPATH . 'includes/legacy/class-wc-legacy-api.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-api.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-order-item-store.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-auth.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-register-wp-admin-settings.php';\n\tinclude_once WC_ABSPATH . 'includes/class-wc-product-variation-store.php';\n\n\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\tinclude_once WC_ABSPATH . 'includes/class-wc-cli.php';\n\t}\n\n\tif ( $this->is_request( 'admin' ) ) {\n\t\tinclude_once WC_ABSPATH . 'includes/admin/class-wc-admin.php';\n\t}\n\n\tif ( $this->is_request( 'frontend' ) ) {\n\t\t$this->frontend_includes();\n\t}\n\n\tif ( $this->is_request( 'cron' ) && 'yes' === get_option( 'woocommerce_allow_tracking', 'no' ) ) {\n\t\tinclude_once WC_ABSPATH . 'includes/class-wc-tracker.php';\n\t}\n\n\t$this->theme_support_includes();\n\t$this->query = new WC_Query();\n\t$this->api   = new WC_API();\n\t$this->api->init();\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecated Checkout Processing Event Handler\nDESCRIPTION: Implementation of deprecated onCheckoutBeforeProcessing event handler for WooCommerce checkout process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst unsubscribeOnCheckoutBeforeProcessing =\n\teventRegistration.onCheckoutBeforeProcessing( ( a ) => {\n\t\t// Expect a deprecated message here.\n\t\tconsole.log( 'onCheckoutBeforeProcessing', a );\n\t} );\n```\n\n----------------------------------------\n\nTITLE: Payment Processing Function Declaration\nDESCRIPTION: Extended function declaration for usePaymentProcessing with all required parameters including event registration functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport const usePaymentProcessing = (\n  onStripeError,\n  error,\n  stripe,\n  billing,\n  emitResponse,\n  sourceId,\n  setSourceId,\n  onPaymentSetup,\n  eventRegistration\n) => {\n...\n```\n\n----------------------------------------\n\nTITLE: Using null Literal in Expressions\nDESCRIPTION: Example of using the null literal in an expression. The null value represents the intentional absence of any object value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nnull\n```\n\n----------------------------------------\n\nTITLE: Event Unsubscribe Implementation\nDESCRIPTION: Code for unsubscribing from all checkout event handlers to prevent memory leaks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/data-stores.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nunsubscribeOnCheckoutValidation();\nunsubscribeOnCheckoutSuccess();\nunsubscribeOnCheckoutFail();\nunsubscribeOnCheckoutBeforeProcessing();\n```\n\n----------------------------------------\n\nTITLE: Executing WooCommerce Changelog Generation\nDESCRIPTION: Command to run the changelog utility via pnpm to generate a changelog entry for a specific pull request number\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/changefile/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm utils changefile <pr-number>\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Beta Tester Dependencies\nDESCRIPTION: Commands to install and start the WooCommerce Beta Tester plugin using pnpm package manager. These commands install dependencies and start the development environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/README.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce-beta-tester install\npnpm --filter=@woocommerce/plugin-woocommerce-beta-tester start\n```\n\n----------------------------------------\n\nTITLE: Naming Fix Branches with Descriptive Names in WooCommerce\nDESCRIPTION: Alternative example of naming a fix branch in WooCommerce using the 'fix/' prefix followed by a descriptive name that summarizes the change being made. This convention helps identify the purpose of the branch without requiring knowledge of issue numbers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/woocommerce-git-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nfix/shipping-tax-rate-saving\n```\n\n----------------------------------------\n\nTITLE: Using PhoneNumberInput Component in React (JSX)\nDESCRIPTION: This snippet showcases how to incorporate the PhoneNumberInput UI component in a React application, linking its value to component state and handling updates using the provided onChange callback. Dependencies include React and the PhoneNumberInput component itself. The core parameters include value (the controlled value for the phone input) and onChange (callback receiving the changed value, E.164 formatted number, and alpha2 country code). Input is the current phone number value; output is an updated value propagated via setState. This demonstrates the pattern for controlled input fields in React, supporting spaces and hyphens in numbers, and enabling internationalization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/phone-number-input/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<PhoneNumberInput\n\tvalue={ phoneNumber }\n\tonChange={ ( value, e164, country ) => setState( value ) }\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Provider in PHP\nDESCRIPTION: Implementation of a service provider class that registers a class with its dependencies in the WooCommerce container system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nnamespace Automattic\\WooCommerce\\Internal\\DependencyManagement\\ServiceProviders;\n\nuse Automattic\\WooCommerce\\Internal\\DependencyManagement\\AbstractServiceProvider;\nuse Automattic\\WooCommerce\\TheClassNamespace\\TheClass;\nuse Automattic\\WooCommerce\\TheDependencyNamespace\\TheDependencyClass;\n\nclass TheClassServiceProvider extends AbstractServiceProvider {\n\n    protected $provides = array(\n        TheClass::class\n    );\n\n    public function register() {\n        $this->add( TheClass::class )->addArgument( TheDependencyClass::class );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a Postman Collection via npm (Shell)\nDESCRIPTION: Provides the npm command to generate a Postman v2 collection file (`collection.json`) based on the test data defined within the API test suite package. This allows importing the API requests into Postman or compatible clients.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/api-core-tests/README.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nnpm run make:collection\n```\n\n----------------------------------------\n\nTITLE: Running Slack Utilities CLI Command\nDESCRIPTION: Command to access available Slack utility commands from the WooCommerce project root directory using pnpm.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/slack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils slack --help\n```\n\n----------------------------------------\n\nTITLE: Checking if Coupon is Being Removed in WooCommerce (JavaScript)\nDESCRIPTION: Example of how to determine if a coupon is currently being removed from the cart. Returns a boolean value indicating whether a coupon removal is in progress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_33\n\nLANGUAGE: js\nCODE:\n```\nconst store = select( cartStore );\nconst isRemovingCoupon = store.isRemovingCoupon();\n```\n\n----------------------------------------\n\nTITLE: Adding Data to Asset Registry in PHP\nDESCRIPTION: Shows how to add data to the AssetDataRegistry using the Package container. This is the recommended approach instead of using the deprecated woocommerce_shared_settings filter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/block-assets.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nAutomattic\\WooCommerce\\Blocks\\Package::container()\n\t->get( Automattic\\WooCommerce\\Blocks\\Assets\\AssetDataRegistry::class )\n\t->add( $key, $value );\n```\n\n----------------------------------------\n\nTITLE: Lazy Resolving Dependencies via Container Injection (PHP)\nDESCRIPTION: Illustrates a 'lazy' dependency resolution approach. Instead of injecting specific services, the PSR-11 `ContainerInterface` itself is injected via the `init` method. Dependencies (`Service1` in this case) are then resolved explicitly using the container's `get` method only when needed within other methods. This is generally discouraged in favor of direct method injection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nuse TheService1Namespace\\Service1;\n\nclass TheClassWithDependencies {\n    private $container;\n\n    public function init( \\Psr\\Container\\ContainerInterface $container ) {\n        $this->$container = $container;\n    }\n\n    public function method_that_needs_service_1() {\n        $this->container->get( Service1::class )->do_something();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logical OR Operator\nDESCRIPTION: Example of the logical OR (||) operator, which returns true if either operand is true.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ntrue || false\n```\n\n----------------------------------------\n\nTITLE: Starting WooCommerce Development Environment\nDESCRIPTION: Commands to watch for changes in WooCommerce and its dependencies, and optionally start a wp-env based development environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n## Watch for changes in WooCommerce and all of its dependencies.\npnpm --filter='@woocommerce/plugin-woocommerce' watch:build\n\n# Start a wp-env based development environment, which will be accessible via http://localhost:8888/.\n# This step is optional and you can skip it if you are running WooCommerce on a custom setup.\npnpm --filter='@woocommerce/plugin-woocommerce' env:dev\n```\n\n----------------------------------------\n\nTITLE: Semantic Versioning Link in Markdown\nDESCRIPTION: This snippet provides a link to the Semantic Versioning specification using Markdown syntax.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[Semantic Versioning](https://semver.org/spec/v2.0.0.html)\n```\n\n----------------------------------------\n\nTITLE: Declaring Block Dependencies in PHP\nDESCRIPTION: PHP configuration file that specifies JavaScript dependencies required for the block to function properly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php return array('dependencies' => array('react', 'wc-product-editor', 'wp-blocks' ) );\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Sending with WordPress Filter in JavaScript\nDESCRIPTION: Example of using the 'woocommerce_remote_logging_should_send_error' WordPress filter to customize whether an error should be sent to the remote API. This filter allows for conditional error reporting based on custom logic.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n  'woocommerce_remote_logging_should_send_error',\n  'my-plugin',\n  (shouldSend, error, stackFrames) => {\n    const containsPluginFrame = stackFrames.some(\n      (frame) => frame.url && frame.url.includes( /YOUR_PLUGIN_ASSET_PATH/ )\n    );\n    // Only send errors that originate from our plugin\n    return shouldSend && containsPluginFrame;\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling Shipping Rate Selection in WooCommerce Blocks Checkout (JavaScript)\nDESCRIPTION: This snippet demonstrates how to use the 'experimental__woocommerce_blocks-checkout-set-selected-shipping-rate' action hook to log when a shipping rate is selected on the checkout page. It receives the selected shipping rate ID as an argument.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-set-selected-shipping-rate',\n\t'plugin/namespace',\n\t( { shippingRateId } ) => {\n\t\tconsole.log( `Selected shipping rate was changed to ${ shippingRateId }` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Post Permissions for REST API in PHP\nDESCRIPTION: Verifies permissions for post operations in the REST API. Supports various contexts including read, create, edit, delete, and batch operations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_32\n\nLANGUAGE: php\nCODE:\n```\nwc_rest_check_post_permissions( $post_type, $context = 'read', $object_id = 0 )\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Shipping Test Setup and Requirements Markdown\nDESCRIPTION: Markdown documentation outlining test scenarios and requirements for WooCommerce shipping functionality, including setup instructions and test cases for shipping zones, rates, and different shipping configurations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/shipping.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Shipping <!-- omit in toc -->\n\n## Setup\n\n-   You will need to setup shipping zones for a couple of countries.\n-   You will need to have a free shipping method that is enabled with a coupon or a threshold.\n\n## What to test\n\n### With shipping zones available\n\n-   [ ] You should be able to see preview rates (that are not your actual rates) in the editor.\n-   [ ] You should be able to see your actual rates on the frontend.\n-   [ ] Selecting a shipping rate should update the totals.\n-   [ ] Changing the address in Cart block should update the rates.\n-   [ ] Try entering an address that does not have rates for, you should:\n    -   [ ] See an error saying \"No options were found\".\n    -   [ ] See the default shipping option if you have it setup.\n-   [ ] The countries in the shipping rates form should reflect the countries you have in WooCommerce -> Settings -> General -> Shipping location(s).\n-   [ ] If your cart has only digital products, the Cart and Checkout blocks should act like shipping is disabled.\n-   [ ] Your free shipping method should show up when you increase the cart quantity to above that limit.\n    -   [ ] Once you decrease it, the shipping rate will disappear, the next rate will be selected.\n-   [ ] The rate you select in Cart should still be selected in Checkout.\n-   [ ] Updating your shipping address in Checkout should give you live updates about rates in your cart.\n\n### If you don't have any shipping zones set up, and shipping is disabled\n\n-   [ ] You should only see the billing form in both editor and frontend for the Checkout Block.\n-   [ ] The shipping options step should not be visible.\n-   [ ] The shipping cost should not be visible in the sidebar.\n\n### If you don't have any shipping zones set up, and shipping is enabled\n\n-   [ ] In the editor, Checkout Block will show you a placeholder promoting you to set up shipping zones.\n```\n\n----------------------------------------\n\nTITLE: VVV HostsUpdater Vagrant Plugin Error\nDESCRIPTION: Error message from the vagrant-hostsupdater plugin, caused by running an unsupported version of Vagrant. The solution is to check VVV's requirements for compatible Vagrant versions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n...vagrant-hostsupdater/HostsUpdater.rb:126:in ``digest': no implicit conversion of nil into String (TypeError)\n```\n\n----------------------------------------\n\nTITLE: Listing Available WooCommerce Enumerators in PHP\nDESCRIPTION: This code snippet lists the available enumerator classes in the WooCommerce plugin, including their file names and brief descriptions of their purposes. Each enumerator represents a specific set of possible values for different aspects of WooCommerce functionality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Enums/README.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n- [CatalogVisibility](./CatalogVisibility.php) - Enumerates the possible catalog visibility options for a product.\n- [OrderInternalStatus](./OrderInternalStatus.php) - Enumerates the possible internal statuses of an order (when stored in the database).\n- [OrderStatus](./OrderStatus.php) - Enumerates the possible statuses of an order.\n- [ProductStatus](./ProductStatus.php) - Enumerates the possible statuses of a product.\n- [ProductStockStatus](./ProductStockStatus.php) - Enumerates the possible stock statuses of a product.\n- [ProductType](./ProductType.php) - Enumerates the possible types of a product.\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Reference Link\nDESCRIPTION: A markdown link pointing to the full Checkout Store documentation location within the WooCommerce project structure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/data/checkout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Checkout Store\n\nThe docs for the Checkout Store can be found in [docs/third-party-developers/extensibility/data-store/checkout.md](../../../../docs/third-party-developers/extensibility/data-store/checkout.md).\n```\n\n----------------------------------------\n\nTITLE: Implementing ActivityHeader Component in React JSX\nDESCRIPTION: This snippet demonstrates how to import and use the ActivityHeader component in a React component. It shows the basic usage with a required 'title' prop.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/activity-panel/activity-header/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport ActivityHeader from 'layout/activity-panel/activity-header';\n\nrender: function() {\n  return (\n    <ActivityHeader\n      title=\"Reviews\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Product Notice Field in WooCommerce\nDESCRIPTION: Example of adding a notice field to a section in the WooCommerce product editor. This code adds a block with a product notice field displaying a message that Back In Stock Notifications are disabled and guidance to enable them in settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/notice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$section->add_block(\n  array(\n    'id'             => 'wc-bis-notices',\n    'blockName'      => 'woocommerce/product-notice-field',\n    'attributes'     => array(\n      'message' => __(\n        'Back In Stock Notifications are disabled. Enable them in the settings.',\n        'woocommerce-back-in-stock-notifications'\n      ),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Tracks Package\nDESCRIPTION: Command to install the @woocommerce/tracks package using pnpm package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/tracks --save\n```\n\n----------------------------------------\n\nTITLE: Listing Product Shipping Classes in WooCommerce CLI\nDESCRIPTION: Command for retrieving product shipping classes with extensive filtering options including pagination, search, ordering, and product relationships.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_46\n\nLANGUAGE: bash\nCODE:\n```\nwc product_shipping_class list\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for WooCommerce Admin Extensions\nDESCRIPTION: Command to install the necessary dependencies for working with WooCommerce Admin extension examples using pnpm package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using __() Function for Basic Text Translation in PHP\nDESCRIPTION: The __() function retrieves the translation of a text string using the specified domain. It returns the translated string without displaying it.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = __( string $text, string $domain = 'default' );\n\n// Example\n$translation = __( 'Place Order', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Verifying Order Data Consistency with No Issues\nDESCRIPTION: Checks that order data in both the legacy posts datastore and HPOS are in sync, showing a success message when all orders match between storage systems.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos verify_data\nOrder Data Verification  100% [====================================================================================] 0:00 / 0:00\nVerification completed.\nSuccess: 999 orders were verified in 0 seconds.\n```\n\n----------------------------------------\n\nTITLE: Example Jest Error: Cannot Find Module @woocommerce/settings (Bash)\nDESCRIPTION: Shows a typical error message encountered when running Jest tests in a project using `@woocommerce/components`. This error occurs because Jest cannot resolve the `@woocommerce/settings` alias, which relies on a global `window.wcSettings` object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nCannot find module '@woocommerce/settings' from 'node_modules/@woocommerce/experimental/node_modules/@woocommerce/navigation/build/index.js'\n```\n\n----------------------------------------\n\nTITLE: Starting WooCommerce Storybook Local Development - Bash\nDESCRIPTION: Command to run Storybook in local development environment using pnpm package manager with specific filter for WooCommerce storybook component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/storybook/stories/docs/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=@woocommerce/storybook watch:build\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Product Editor with pnpm - Bash\nDESCRIPTION: This snippet demonstrates how to install the @woocommerce/product-editor package as a dependency using the pnpm package manager. It requires pnpm to be installed on the system and network access to fetch the package from the registry. The main parameter is the package name, while the --save flag ensures the dependency is added to package.json. The command is executed in a terminal and outputs installation progress and status. No major limitations except that pnpm must be present and network connectivity is required.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/admin-layout/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/product-editor --save\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Checkout Filters Reference Table\nDESCRIPTION: Markdown table documenting the support status of various WooCommerce checkout filters in the blocks implementation, including filter names, compatibility status, and implementation notes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Old hook                                        | Works in blocks? | Notes                                                                                                                                                                                                                                        |\n|-------------------------------------------------|------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Using the `experimental__woocommerce_blocks-cart-add-item` JavaScript Hook\nDESCRIPTION: Describes an experimental JavaScript action hook fired via `@wordpress/hooks` when an item is added to the cart in WooCommerce Blocks. It passes the added product object to callback functions. This allows developers to react to cart addition events.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-cart-add-item',\n\t'plugin/namespace',\n\t( { product } ) => {\n\t\tconsole.log( `${ product.name } was added to the cart` );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Using Concrete Dependencies in PHP Container\nDESCRIPTION: Examples of registering classes with concrete implementations, including interface bindings, object instances, and factory closures.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n$this->add( TheInterface::class, TheClassImplementingTheInterface::class );\n```\n\nLANGUAGE: php\nCODE:\n```\n$instance = new TheClass();\n$this->add( TheClass::class, $instance );\n```\n\nLANGUAGE: php\nCODE:\n```\n$factory = function( TheDependencyClass $dependency ) {\n    return new TheClass( $dependency );\n};\n\n$this->add( TheClass::class, $factory );\n```\n\n----------------------------------------\n\nTITLE: Fixing MiniCart.php for PHP 8 Compatibility\nDESCRIPTION: This snippet indicates a change needed in the MiniCart.php file to prevent fatal errors in the Customizer when using PHP 8. The fix should be applied to this specific file path in the WooCommerce plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/750.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwp-content/plugins/woocommerce/packages/woocommerce-blocks/src/BlockTypes/MiniCart.php\n```\n\n----------------------------------------\n\nTITLE: WordPress Configuration Constants\nDESCRIPTION: Required PHP constants to be added to wp-config.php for development environment setup. Enables Jetpack autoloader development mode and debug settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'JETPACK_AUTOLOAD_DEV', true );\n```\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WP_DEBUG', true );\ndefine( 'SCRIPT_DEBUG', true );\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_blocks_enqueue_cart_block_scripts_before Hook in PHP\nDESCRIPTION: Fires before cart block scripts are enqueued. This hook allows developers to perform actions or enqueue additional scripts before the cart block scripts are loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_enqueue_cart_block_scripts_before' )\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Report\nDESCRIPTION: Command to run unit tests with text coverage summary output.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce test:unit:env -- --coverage-text\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_loaded Hook in PHP\nDESCRIPTION: Implementation using the woocommerce_loaded action hook to ensure WooCommerce is active before executing custom code. This hook fires around the same time as plugins_loaded but before user initialization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/check-if-woo-is-active.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_loaded', 'prefix_woocommerce_loaded' );\n\nfunction prefix_woocommerce_loaded() {\n\t// Custom code here. WooCommerce is active and all plugins have been loaded...\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Addition Expression in JavaScript\nDESCRIPTION: A simple arithmetic expression that adds two numbers together.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Code Freeze CLI Header\nDESCRIPTION: Markdown header and description for the Code Freeze CLI utility, indicating its purpose for performing monorepo utilities related to code freeze processes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/code-freeze/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Code Freeze CLI Utility\n\nCLI for performing Monorepo utilities relating to Code Freeze\n```\n\n----------------------------------------\n\nTITLE: Import Statement Best Practice Example\nDESCRIPTION: Diff example showing the preferred way to import from global window object instead of using aliases in WooCommerce documentation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/documentation-guidelines.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-import { registerCheckoutFilters } from '@woocommerce/blocks-checkout';\n+const { registerCheckoutFilters } = window.wc.blocksCheckout;\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Tests for WooCommerce Block Library\nDESCRIPTION: This command executes all integration tests within the JavaScript test suite for the @woocommerce/block-library workspace. It uses pnpm to run the test:js script specifically for this package.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/integration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter=\"@woocommerce/block-library\" test:js\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce ESLint Plugin with PNPM\nDESCRIPTION: Command to install the WooCommerce ESLint plugin as a development dependency using PNPM package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/eslint-plugin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/eslint-plugin --save-dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Field Group Constants in PHP\nDESCRIPTION: Shows how to access and use the CheckoutFields class constants for field prefixes and group operations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/additional-checkout-fields.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\necho ( CheckoutFields::BILLING_FIELDS_PREFIX ); // _wc_billing/\necho ( CheckoutFields::SHIPPING_FIELDS_PREFIX ); // _wc_shipping/\necho ( CheckoutFields::OTHER_FIELDS_PREFIX ); // _wc_other/\n\nCheckoutFields::get_group_name( \"_wc_billing\" ); // \"billing\"\nCheckoutFields::get_group_name( \"_wc_billing/\" ); // \"billing\"\n\nCheckoutFields::get_group_key( \"shipping\" ); // \"_wc_shipping/\"\n```\n\n----------------------------------------\n\nTITLE: Creating WooCommerce Product Attribute Term via CLI\nDESCRIPTION: Creates a new term for a specific WooCommerce product attribute identified by `attribute_id`. Requires the term `name`. Optional parameters include `slug`, `description`, and `menu_order`. Use `--porcelain` to output only the new term ID on success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nwc product_attribute_term create <attribute_id>\n```\n\n----------------------------------------\n\nTITLE: Docker Container Build Failure for E2E Tests\nDESCRIPTION: Error showing Docker container build failure when attempting to run E2E tests. The issue is typically caused by Docker not running, with the solution being to start Docker with 'npm run docker:up'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nThu Dec  3 11:55:56 +08 2020 - Docker container is still being built\nThu Dec  3 11:56:06 +08 2020 - Docker container is still being built\nThu Dec  3 11:56:16 +08 2020 - Docker container is still being built\nThu Dec  3 11:56:26 +08 2020 - Docker container couldn't be built\nnpm ERR! code ELIFECYCLE\nnpm ERR! errno 1\nnpm ERR! @woocommerce/e2e-environment@0.1.6 test:e2e: `bash ./bin/wait-for-build.sh && ./bin/e2e-test-integration.js`\nnpm ERR! Exit status 1\n```\n\n----------------------------------------\n\nTITLE: Resolving `src` Services from Legacy `includes` Code (PHP)\nDESCRIPTION: Shows how code located in the legacy `includes` directory can access services managed by the dependency injection container. It uses the `wc_get_container()` function to retrieve the container instance and then calls the `get` method with the fully qualified class name (`Service1::class`) to resolve the required service.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nuse TheService1Namespace\\Service1;\n\nfunction wc_function_that_needs_service_1() {\n    $service = wc_get_container()->get( Service1::class );\n    $service->do_something();\n}\n```\n\n----------------------------------------\n\nTITLE: WordPress Test Installation Script\nDESCRIPTION: Command to install WordPress and WP Unit Test library using the install script.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntests/bin/install.sh woocommerce_tests root root\n```\n\n----------------------------------------\n\nTITLE: VS Code Prettier Configuration\nDESCRIPTION: JavaScript configuration for VS Code settings to enable Prettier code formatting for JavaScript files with auto-format on save\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n\"[javascript]\": {\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.formatOnSave\": true\n},\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with PNPM\nDESCRIPTION: Command to install project dependencies in the monorepo using PNPM package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/release-posts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Internal Checkout Validation Implementation\nDESCRIPTION: Example of implementing checkout validation event subscription within internal development.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onCheckoutValidation } = useCheckoutContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Editing Cart Item - HTTP PUT Request\nDESCRIPTION: API endpoint for modifying an existing cart item. Requires the cart item key and new quantity value.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_7\n\nLANGUAGE: http\nCODE:\n```\nPUT /cart/items/:key\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl --request PUT https://example-store.com/wp-json/wc/store/v1/cart/items/e369853df766fa44e1ed0ff613f563bd?quantity=10\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Documentation Manifest using CLI\nDESCRIPTION: Command to generate a JSON manifest from markdown files in a specified directory. Requires pnpm package manager and accepts a directory path and project name as arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/md-docs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm utils md-docs create <path-to-directory> <projectName>\n```\n\n----------------------------------------\n\nTITLE: Changelog and Build Commands for WooCommerce Core\nDESCRIPTION: Examples of PNPM commands for adding changelog entries and creating distribution ZIP files for WooCommerce Core. These commands specifically target the WooCommerce Core plugin.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/DEVELOPMENT.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Add a changelog entry for WooCommerce Core\npnpm --filter='@woocommerce/plugin-woocommerce' changelog add\n\n# Create the woocommerce.zip file\npnpm --filter='@woocommerce/plugin-woocommerce' build:zip\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Previous Changelogs\nDESCRIPTION: Markdown link syntax pointing to the historical changelog content in the beta tester plugin's readme file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woo-ai/NEXT_CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[See changelogs for previous versions](https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/plugins/woocommerce-beta-tester/readme.txt)\n```\n\n----------------------------------------\n\nTITLE: Escaping Quotes in String Literals\nDESCRIPTION: Examples of escaping quotes within string literals using backslashes, allowing quotes to appear within strings of the same quote type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n'foo \\'bar\\''\n\"foo \\\"bar\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Task Content Component\nDESCRIPTION: Demonstrates how to register a custom task content component using WordPress plugin system and WooCommerce onboarding components. Used when no action_url is provided for the task.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/onboarding-tasks.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerPlugin } from '@wordpress/plugins';\nimport { WooOnboardingTask } from '@woocommerce/onboarding';\n\nregisterPlugin( 'my-task-plugin', {\n  scope: 'woocommerce-tasks',\n  render: () => (\n    <WooOnboardingTask id=\"my-task\">\n      { ( { onComplete, query, task } ) => (\n        <MyTask onComplete={ onComplete } query={ query } task={ task } />\n      ) }\n    </WooOnboardingTask>\n  ),\n} );\n```\n\n----------------------------------------\n\nTITLE: Checking for New Payment Method on Checkout in PHP\nDESCRIPTION: Shows how to check if a new payment method should be saved during checkout process.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/payments/payment-token-api.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ( isset( $_POST['wc-simplify_commerce-payment-token'] ) && 'new' !== $_POST['wc-simplify_commerce-payment-token'] ) {\n```\n\n----------------------------------------\n\nTITLE: Enabling Script Debugging in WordPress\nDESCRIPTION: PHP configuration snippet to enable WordPress script debugging by adding to wp-config.php. This setting ensures that WordPress loads the unminified versions of scripts for testing during development.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/minification-of-SCSS-and-JS.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'SCRIPT_DEBUG', true );\n```\n\n----------------------------------------\n\nTITLE: Setting Up WooCommerce Test Environment with wp-env\nDESCRIPTION: Command to set up the WooCommerce test environment using wp-env. This command runs the test setup script defined in the project's composer configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/development.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run test:setup\n```\n\n----------------------------------------\n\nTITLE: Output CSS Files Structure\nDESCRIPTION: The build system generates three main CSS files: style.css for frontend and editor basic styles, editor.css for editor-specific styles, and vendors-style.css for external dependencies. Each file is also generated in an RTL version with .rtl.css suffix.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/css-build-system.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstyle.css         // Frontend and editor basic styles\neditor.css        // Editor-specific styles\nvendors-style.css // External dependencies\n\n// RTL versions\nstyle.rtl.css\neditor.rtl.css\nvendors-style.rtl.css\n```\n\n----------------------------------------\n\nTITLE: Using _n() Function for Plural Form Translation in PHP\nDESCRIPTION: The _n() function translates and retrieves the singular or plural form based on the supplied number. This allows for grammatically correct translations for quantities.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Schema\n$translation = _n( string $single, string $plural, int $number, string $domain = 'default' );\n\n// Example\n$translation = sprintf(\n    /* translators: %s number of products in cart. */\n    _n(\n        '%d product',\n        '%d products',\n        absint( $category->count ),\n        'woo-gutenberg-products-block'\n    ),\n    absint( $category->count )\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Fees to WooCommerce Cart Using PHP Actions\nDESCRIPTION: This snippet demonstrates how to programmatically add multiple fees to the WooCommerce cart by hooking into the “woocommerce_cart_calculate_fees” action. Written in PHP for inclusion in your theme's functions.php file or a custom plugin, it adds three named fees with differing amounts that are taxable (the third parameter is set to true for each call). No external dependencies are needed beyond WooCommerce itself. The function expects the $cart object and appends new fee lines; it will run automatically on each cart calculation, and fees appear on the cart and checkout pages. Be aware that this affects all users, so consider adding further conditions if needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1130.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_cart_calculate_fees', function( $cart ) {\n\t$cart->add_fee( 'Fee 0', 5, true );\n\t$cart->add_fee( 'Fee 2', 10, true );\n\t$cart->add_fee( 'Fee 3', 50, true );\n});\n```\n\n----------------------------------------\n\nTITLE: Updating WooCommerce Shop Order via CLI\nDESCRIPTION: Updates an existing WooCommerce shop order identified by its `id`. Allows modifying various order details like `parent_id`, `status`, `currency`, `customer_id`, `customer_note`, `billing`/`shipping` addresses, `payment_method` details, `transaction_id`, `meta_data`, `line_items`, `shipping_lines`, `fee_lines`, and `coupon_lines`. The `--set_paid` flag can mark the order as paid, update status, and adjust stock. Use `--porcelain` to output only the order ID on success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order update [id]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating ATX-style Headers in Markdown\nDESCRIPTION: Example showing the correct ATX-style (#) usage for headers in WooCommerce documentation according to the custom linting rule MD003.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/style-guide.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n  # This is an H1\n  ## This is an H2\n```\n\n----------------------------------------\n\nTITLE: WooCommerce CLI Sync Command\nDESCRIPTION: Command to initiate the migration of WooCommerce data to HPOS tables via WP-CLI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/guide-large-store.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nwp wc cot sync\n```\n\n----------------------------------------\n\nTITLE: Setting Category Metadata with Front Matter in YAML\nDESCRIPTION: Demonstrates how to configure category metadata for a README.md file. Includes category_title, category_slug that should match the folder name, and menu_title for sidebar display.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing-docs/contributing-docs.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\ncategory_title: Your Category Name\ncategory_slug: this-should-match-your-folders-name\nmenu_title: This should match your category_title\n---\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Literals in Expressions\nDESCRIPTION: Examples of using boolean literals in expressions. Boolean values represent one of two states: true or false.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntrue\nfalse\n```\n\n----------------------------------------\n\nTITLE: Naming Fix Branches with Issue Number in WooCommerce\nDESCRIPTION: Example of naming a fix branch in WooCommerce using the 'fix/' prefix followed by the issue number. This is the preferred convention for creating branches that address specific issues tracked in the issue management system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/woocommerce-git-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfix/12345\n```\n\n----------------------------------------\n\nTITLE: Using ProductIcon Component in React JSX\nDESCRIPTION: Example of how to implement the ProductIcon component in a React application. The component takes a src prop that specifies the URL of the icon image.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketing/components/product-icon/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductIcon src={ icon } />\n```\n\n----------------------------------------\n\nTITLE: Configuring Storybook Meta for TotalsWrapper Documentation\nDESCRIPTION: This JSX code sets up the Storybook Meta component to configure the documentation for the TotalsWrapper component. It links the documentation to the TotalsWrapper stories.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/components/totals-wrapper/docs/docs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<Meta name=\"Docs\" of={ TotalsWrapperStories } />\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Timeout in JavaScript\nDESCRIPTION: This function creates a timeout for a specified number of milliseconds. It's useful for introducing delays in test scripts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nutils.waitForTimeout(timeout)\n```\n\n----------------------------------------\n\nTITLE: Notice Component with Sale Promotion and Buttons\nDESCRIPTION: An example of a time-sensitive sale notice with a 'percent' icon and additional button components. This snippet demonstrates the inclusion of strong text formatting and multiple action buttons with different variants.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/components/notice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Notice\n\tid=\"marketplace-sale-march-2024\"\n\tvariant=\"info\"\n\tdescription={ __(\n\t\t'<strong>Limited time sale</strong> Tup to 40% off on extensions and themes. Sale ends March 29 at 2pm UTC.',\n\t\t'woocommerce'\n\t) }\n\ticon=\"percent\"\n\tisDismissible\n>\n\t<Button\n\t\tvariant=\"secondary\"\n\t\tonClick={ () => {\n\t\t\tconsole.log( 'Primary button clicked' );\n\t\t} }\n\t\ttext=\"Label\"\n\t/>\n\t<Button\n\t\tvariant=\"tertiary\"\n\t\tonClick={ () => {\n\t\t\tconsole.log( 'Secondary button clicked' );\n\t\t} }\n\t\ttext=\"Label\"\n\t/>\n</Notice>\n```\n\n----------------------------------------\n\nTITLE: Version 1.3.0 Changelog Entry in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 1.3.0, including the release date and a single change.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.3.0](https://www.npmjs.com/package/@woocommerce/tracks/v/1.3.0) - 2022-07-08 \n\n-   Minor - Remove PHP and Composer dependencies for packaged JS packages\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Admin Script Registration\nDESCRIPTION: Example of registering a WooCommerce admin script using WCAdminAssets::register_script() method. Shows how to register the payment-method-promotions script in the wp-admin-scripts context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/wp-admin-scripts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nWCAdminAssets::register_script( 'wp-admin-scripts', 'payment-method-promotions', true );\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Shop Loop Hook\nDESCRIPTION: Action hook that fires during the shop loop when displaying products.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_shop_loop' )\n```\n\n----------------------------------------\n\nTITLE: Template Interactive Startup Notice (GPLv3)\nDESCRIPTION: This template provides a short notice recommended by the GNU GPLv3 for programs that have terminal interaction. It should be displayed when the program starts in interactive mode. The notice includes placeholders for the program name, copyright year, and author. It explicitly states that the program comes with absolutely no warranty and informs the user how to view warranty details (e.g., `show w`) and redistribution conditions (e.g., `show c`), linking these commands conceptually to the relevant sections of the GPL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/license.txt#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    <program>  Copyright © <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n```\n\n----------------------------------------\n\nTITLE: Sending Pull Request Failure Report in Bash\nDESCRIPTION: Example command for sending a test failure report for a pull request, including E2E test results with PR details.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/slack-test-report/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils slack-test-report \\\n  -c failure \\\n  -r \"E2E Tests\" \\\n  -n \"1234\" \\\n  -t \"Add new feature\" \\\n  -m \"Fix e2e tests\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Currency Control for Storybook in TypeScript\nDESCRIPTION: This snippet defines a set of currencies and a custom Storybook control configuration object for currency selection. It exports both the currencies (as a const record) and the currencyControl object, which maps string keys to currency values and specifies how these should be represented in a select control in Storybook. Dependencies include Storybook and the presence of a Currency type. Inputs are string keys ('EUR', 'USD'); outputs are corresponding Currency objects via the Storybook UI. The option mapping limits the selectable currencies to those defined in the object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/storybook/README.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const currencies: Record< string, Currency > = {\n\tEUR: {\n\t\t// ...\n\t},\n\tUSD: {\n\t\t// ...\n\t},\n} as const;\n\nexport const currencyControl = {\n\tcontrol: 'select',\n\tdefaultValue: currencies.USD,\n\t// This maps string keys to their values\n\tmapping: currencies,\n\t// These are the options which will appear in the <select> control\n\toptions: Object.keys( currencies ),\n};\n```\n\n----------------------------------------\n\nTITLE: Using Greater Than or Equal Comparison Operator\nDESCRIPTION: Example of the greater than or equal (>=) operator, which returns true if the left operand is greater than or equal to the right operand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n2 >= 2\n```\n\n----------------------------------------\n\nTITLE: Generating Release Post\nDESCRIPTION: Command to generate a release post for version 6.8.0 with output-only mode.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/release-posts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm release-post release \"6.8.0\" --outputOnly\n```\n\n----------------------------------------\n\nTITLE: Setting Transparent Body Background with CSS\nDESCRIPTION: This CSS code snippet sets the body background to transparent with high importance, which is useful for testing frontend components like the Mini-Cart badge in themes that lack a default <body> background. The only dependency is a webpage that applies the CSS, such as through the WordPress Appearance > Editor > Additional CSS section. The '.important' flag ensures this background setting overrides other styles. No parameters are required. The expected result is a transparent body background, used to verify element visibility against different backgrounds.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1040.md#2025-04-23_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n  background: transparent !important;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Tour with WooCommerce Tour Kit in JSX\nDESCRIPTION: This React functional component demonstrates the typical usage of the TourKit component from '@woocommerce/components'. It sets up state to control the tour's visibility, defines a configuration object with steps and a close handler, and conditionally renders the TourKit component based on the state. The configuration specifies a single step with content and a primary button.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/tour-kit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TourKit } from '@woocommerce/components';\n\nfunction Tour() {\n\t// 1. Define the criteria for showing a tour:\n\tconst [ showTour, setShowTour ] = useState( true );\n\n\t// 2. Define a configuration for the tour, passing along a handler for closing.\n\tconst config = {\n\t\tsteps: [\n\t\t\t{\n\t\t\t\treferenceElements: {\n\t\t\t\t\tdesktop: '.render-step-near-me',\n\t\t\t\t},\n\t\t\t\tmeta: {\n\t\t\t\t\theading: 'Lorem ipsum dolor sit amet.',\n\t\t\t\t\tdescriptions: {\n\t\t\t\t\t\tdesktop: 'Lorem ipsum dolor sit amet.',\n\t\t\t\t\t},\n\t\t\t\t\tprimaryButton: {\n\t\t\t\t\t\ttext: 'Done',\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t\tcloseHandler: () => setShowTour( false ),\n\t\toptions: {},\n\t};\n\n\t// 3. Render it (or not):\n\n\tif ( ! showTour ) {\n\t\treturn null;\n\t}\n\n\treturn <TourKit config={ config } />;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transient File via WP-CLI using TransientFilesEngine\nDESCRIPTION: This command uses WP-CLI's `wp eval` to interact with the WooCommerce `TransientFilesEngine`. It calls the `create_transient_file` method, passing 'foobar' as the file content and '2023-12-31' as the expiration date (in Y-m-d format). The command outputs the generated transient file name, which includes a hexadecimal representation of the expiration date prepended to a random file name. Requires WP-CLI and WooCommerce active.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Internal/TransientFiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp eval \"echo wc_get_container()->get(\\Automattic\\WooCommerce\\Internal\\TransientFiles\\TransientFilesEngine::class)->create_transient_file('foobar', '2023-12-31');\"\n```\n\n----------------------------------------\n\nTITLE: Implementing NOT Operation for Rules in JSON\nDESCRIPTION: This rule negates the result of the rules provided in the 'operand' array. All rules in the operand are ANDed together before negation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"not\",\n\t\"operand\": [\n\t\t<Rule>,\n\t\t...\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Option Transformers in WooCommerce Rules (JavaScript)\nDESCRIPTION: Demonstrates how to define option transformers within a WooCommerce rule. This example uses dot_notation and array_column transformers to process the woocommerce_onboarding_profile option.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  {\n    \"slug\": \"test-note\",\n     ...\n    ],\n    \"rules\": [\n      {\n        \"type\": \"option\",\n        \"transformers\": [\n            {\n                \"use\": \"dot_notation\",\n                \"arguments\": {\n                    \"path\": \"industry\"\n                }\n            },\n            {\n                \"use\": \"array_column\",\n                \"arguments\": {\n                    \"key\": \"slug\"\n                }\n            }\n        ],\n        \"option_name\": \"woocommerce_onboarding_profile\",\n        \"operation\": \"!=\",\n        \"value\": \"fashion-apparel-accessories\",\n        \"default\": []\n      }\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Scaffolding with a Local Template Path for Advanced Development - Bash\nDESCRIPTION: This snippet shows how to use npx to create a new WooCommerce Product Editor Block extension using a local template directory, rather than the default published npm package. This allows developers to iterate on the scaffolding tool itself. The template argument is replaced by a filesystem path, so the directory must resolve to a template-compliant project. Prerequisites are local filesystem access, correct path specification, and having Node.js/npx available. Outputs a new project folder using custom scaffolding logic.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-product-editor-block/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @wordpress/create-block --template ./path/to/woocommerce/packages/js/create-product-editor-block my-extension-name\n```\n\n----------------------------------------\n\nTITLE: Registering Lazy-Loaded Translations for Checkout Block in PHP\nDESCRIPTION: This function registers translations for the inner blocks of the Checkout block. It merges chunks from the checkout blocks folder, vendor chunks, and shared chunks, then calls the register_chunk_translations function.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-for-lazy-loaded-components.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprotected function register_block_type_assets() {\n  parent::register_block_type_assets();\n  $chunks        = $this->get_chunks_paths( $this->chunks_folder );\n  $vendor_chunks = $this->get_chunks_paths( 'vendors--cart-blocks' );\n  $shared_chunks = [ 'cart-blocks/order-summary-shipping--checkout-blocks/order-summary-shipping-frontend' ];\n  $this->register_chunk_translations( array_merge( $chunks, $vendor_chunks, $shared_chunks ) );\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up All Orders with `wc hpos cleanup` (Plaintext)\nDESCRIPTION: Illustrates how to use `wp wc hpos cleanup all` to remove legacy data for all orders in the system when HPOS is enabled and compatibility mode is off. The command indicates the total number of orders and displays a progress bar during the operation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_23\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos cleanup all\nStarting cleanup for 999 orders...\nHPOS cleanup  100% [=====================================================================================================================] 0:01 / 0:05\nSuccess: Cleanup completed for 999 orders.\n```\n\n----------------------------------------\n\nTITLE: Refund API Routes and Test Paths\nDESCRIPTION: Table showing refund-related API endpoint and its test file location.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/api-critical-flows.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Route   | Flow name           | Endpoints                            | Test File                                           |\n|---------|---------------------|--------------------------------------|-----------------------------------------------------|\n| Refunds | Can refund an order | `/wp-json/wc/v3/orders/{id}/refunds` | `tests/api-core-tests/tests/refunds/refund.test.js` |\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Admin E2E Tests via pnpm (Bash)\nDESCRIPTION: This command uses the pnpm package manager to install the `@woocommerce/admin-e2e-tests` module and adds it as a project dependency. This package is required to run the end-to-end tests for WooCommerce admin features.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/admin-e2e-tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/admin-e2e-tests --save\n```\n\n----------------------------------------\n\nTITLE: Preventing Display of PHP Errors in WordPress\nDESCRIPTION: A PHP configuration setting that forces PHP to not display errors regardless of WordPress settings. This is useful on some hosts where errors may still be visible despite WordPress configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/deprecation-in-core.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n@ini_set( 'display_errors', 0 );\n```\n\n----------------------------------------\n\nTITLE: Configuring Slack Test Report Routing in JSON\nDESCRIPTION: JSON configuration file structure for defining custom routing rules for test reports. Allows specifying different channels for various test types and Git reference patterns.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/slack-test-report/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultChannel\": \"DEFAULT_CHANNEL_ENV_VAR\",\n  \"routes\": [\n    {\n      \"checkType\": \"release-checks\",\n      \"channels\": [\"CHANNEL_ENV_VAR_1\"],\n      \"excludeDefaultChannel\": false\n    },\n    {\n      \"refName\": \"release/**\",\n      \"channels\": [\"CHANNEL_ENV_VAR_2\"],\n      \"excludeDefaultChannel\": true\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker User Permissions\nDESCRIPTION: Adds the current user to the Docker group to enable running Docker commands without sudo, and switches to the updated user context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/WSL_SETUP_INSTRUCTIONS.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo usermod -aG docker ${YOUR_USERNAME}\n\nsu - ${YOUR_USERNAME}\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Remote Logging Package via npm\nDESCRIPTION: Command to install the WooCommerce Remote Logging package using npm. This adds the package as a dependency to your project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @woocommerce/remote-logging --save\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Handling in Slot and Fill Components\nDESCRIPTION: Shows how to customize error handling for Fill components by passing an onError function to createSlotFill.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/checkout/slot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n// Aliased import\nimport { createSlotFill } from '@woocommerce/blocks-checkout';\n\n// Global import\n// const { createSlotFill } = wc.blocksCheckout;\n\nconst slotName = '__experimentalSlotName';\n\nconst onError = ( errorMessage ) => {\n\treturn (\n\t\t<div className=\"my-custom-error\">\n\t\t\tYou got an error! <br />\n\t\t\t{ errorMessage }\n\t\t\tContact support at{ ' ' }\n\t\t\t<a href=\"mailto:help@example.com\">help@example.com</a>\n\t\t</div>\n\t);\n};\n\nconst { Fill, Slot } = createSlotFill( slotName, onError );\n```\n\n----------------------------------------\n\nTITLE: Registering Block Configuration in WooCommerce\nDESCRIPTION: Block configuration file (block.json) that defines the structure and properties of a custom product form field. Sets up basic block metadata with support for the WooCommerce product editor.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"$schema\": \"https://schemas.wp.org/trunk/block.json\",\n\t\"apiVersion\": 3,\n\t\"name\": \"tutorial/new-product-form-field\",\n\t\"title\": \"Product form field\",\n\t\"category\": \"woocommerce\",\n\t\"description\": \"A sample field for the product form\",\n\t\"keywords\": [ \"products\" ],\n\t\"attributes\": {},\n\t\"supports\": {\n\t\t\"html\": false,\n\t\t\"multiple\": true,\n\t\t\"inserter\": false\n\t},\n\t\"textdomain\": \"woocommerce\",\n\t\"editorScript\": \"file:./index.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Custom Product Field Data\nDESCRIPTION: PHP function to save the custom field data to the product metadata.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function save_field( $post_id, $post ) {\n\tif ( isset( $_POST['_new_stock_information'] ) ) {\n\t\t$product = wc_get_product( intval( $post_id ) );\n\t\t$product->update_meta_data( '_new_stock_information', sanitize_text_field( $_POST['_new_stock_information'] ) );\n\t\t$product->save_meta_data();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Order Page Changes in JavaScript\nDESCRIPTION: This function saves the current order page. It's used after making changes to an order in the admin panel.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_23\n\nLANGUAGE: JavaScript\nCODE:\n```\norderPageSaveChanges()\n```\n\n----------------------------------------\n\nTITLE: Inserting Product Blocks in Template Editor (HTML)\nDESCRIPTION: HTML code snippet for inserting product-related blocks (breadcrumbs, catalog sorting, and result count) into the Product Catalog template using the Site Editor. This snippet is used to test CSS spacing and alignment fixes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/970.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- wp:group {\"layout\":{\"type\":\"flex\",\"flexWrap\":\"nowrap\"}} -->\n<div class=\"wp-block-group\">\n\t<!-- wp:woocommerce/breadcrumbs {\"textColor\":\"pale-pink\",\"style\":{\"elements\":{\"link\":{\"color\":{\"text\":\"var:preset|color|light-green-cyan\"}}}}} /-->\n\n\t<!-- wp:woocommerce/catalog-sorting /-->\n\n\t<!-- wp:woocommerce/product-results-count {\"textColor\":\"vivid-green-cyan\"} /-->\n</div>\n<!-- /wp:group -->\n```\n\n----------------------------------------\n\nTITLE: Importing Express Payment Method Registration Function\nDESCRIPTION: Shows two ways to import the registerExpressPaymentMethod function - either from the global wc object or via an aliased import.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerExpressPaymentMethod } = window.wc.wcBlocksRegistry;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport { registerExpressPaymentMethod } from '@woocommerce/blocks-registry';\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_init Hook in PHP\nDESCRIPTION: Implementation using the woocommerce_init action hook which executes after WooCommerce is active and initialized, including user data initialization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/check-if-woo-is-active.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_init', 'prefix_woocommerce_init' );\n\nfunction prefix_woocommerce_init() {\n\t// Custom code here. WooCommerce is active and initialized...\n}\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Classic Assets with PNPM\nDESCRIPTION: Command to build and minify CSS files from SCSS source files using the classic-assets package. This should be run from the repository root directory to generate production-ready assets.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/minification-of-SCSS-and-JS.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm --filter='@woocommerce/classic-assets' build\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut for Opening Browser DevTools\nDESCRIPTION: This snippet shows the keyboard shortcut to open the browser's developer tools console for debugging purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/985.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<kbd>F12</kbd>\n```\n\n----------------------------------------\n\nTITLE: Fetching a Single Product Attribute via Curl - Shell\nDESCRIPTION: Illustrates using curl to fetch details for one product attribute from the WooCommerce Store API by its ID. The command makes a GET request to the specific endpoint with the attribute ID. The response is expected to be a JSON object containing all relevant attribute fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/attributes/1\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Exporting a Custom E2E Test Function - JavaScript\nDESCRIPTION: This snippet provides a pattern for wrapping a custom test in a callable function and exporting it. It structures a test with describe, beforeAll, and it blocks, using asynchronous setup and action handling. Place this code in a new file under the specs directory, then add it to your test suite. It depends on jest as the test runner, with no required input parameters, and is intended for creating shareable and well-scoped tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-core-tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst runExampleTestName = () => {\\n\\tdescribe('Example test', () => {\\n\\t\\tbeforeAll(async () => {\\n\\t\\t\\t// ...\\n\\t\\t});\\n\\n\\t\\tit('do some example action', async () => {\\n            // ...\\n\\t\\t});\\n        // ...\\n    });\\n});\\n\\nmodule.exports = runExampleTestName;\n```\n\n----------------------------------------\n\nTITLE: Tree Select Option Structure Example in React JSX\nDESCRIPTION: This snippet provides a full example of the expected nested option structure for the Tree Select Control, suitable for documentation or further illustration purposes. The structure consists of labeled objects each with a value and optional children. This structure must be respected for the component\\'s filtering, selection, and onChange handling to function correctly. No external dependencies aside from a React-compatible context.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/tree-select-control/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst options = [\n       {\n\t\tvalue: 'EU',\n\t\tlabel: 'Europe',\n\t\tchildren: [\n\t\t\t{ value: 'ES', label: 'Spain' },\n\t\t\t{ value: 'FR', label: 'France', children: [] }, \n\t\t],\n\t},\n\t{\n\t\tvalue: 'NA',\n\t\tlabel: 'North America',\n\t\tchildren: [\n\t\t\t{ value: 'US', label: 'United States', children: [\n\t\t\t\t{ value: 'TX', label: 'Texas' },\n\t\t\t\t{ value: 'NY', label: 'New York' },\n\t\t\t] },\n\t\t\t{ value: 'CA', label: 'Canada' },\n\t\t],\n\t}\n     ];\n```\n\n----------------------------------------\n\nTITLE: Example of Conditional Function Mocking in WooCommerce Tests\nDESCRIPTION: Example showing how to conditionally mock the get_option function based on the option name parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/Tools/CodeHacking/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nFunctionsMockerHack::add_function_mocks([\n    'get_option' => function($name, $default = false) {\n        return 'foo' === $name ? 'mocked value for option foo' : get_option( $name, $default );\n    }\n]);\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_applied_coupon Action Hook in PHP\nDESCRIPTION: Fires after a coupon has been applied to the cart. This hook matches the action name in WooCommerce core and provides the coupon code that was applied.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_applied_coupon', string $coupon_code )\n```\n\n----------------------------------------\n\nTITLE: Validate Cart Item Action Hook\nDESCRIPTION: Action hook for validating cart items. Handlers can throw exceptions to prevent cart addition. Takes product object and cart item array as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_25\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_store_api_validate_cart_item', \\WC_Product $product, array $cart_item )\n```\n\n----------------------------------------\n\nTITLE: Product Price Controls Feature Flag (TypeScript)\nDESCRIPTION: Feature flag implementation for new product price controls in the atomic blocks system. Controls visibility and functionality of advanced price display options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsupports.ts#L14-L37\n```\n\n----------------------------------------\n\nTITLE: Sample PO File Structure for German Translation\nDESCRIPTION: Example of a PO (Portable Object) file for German translation of WooCommerce Blocks. This file contains both the original English strings and their German translations, and is automatically generated from the POT file by WordPress.org's translation system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translation-loading.md#2025-04-23_snippet_1\n\nLANGUAGE: po\nCODE:\n```\n# Translation of Plugins - WooCommerce Blocks - Stable (latest release) in German\n# This file is distributed under the same license as the Plugins - WooCommerce Blocks - Stable (latest release) package.\nmsgid \"\"\nmsgstr \"\"\n\"PO-Revision-Date: 2022-05-22 10:58:25+0000\\n\"\n\"MIME-Version: 1.0\\n\"\n\"Content-Type: text/plain; charset=UTF-8\\n\"\n\"Content-Transfer-Encoding: 8bit\\n\"\n\"Plural-Forms: nplurals=2; plural=n != 1;\\n\"\n\"X-Generator: GlotPress/4.0.0-alpha.1\\n\"\n\"Language: de\\n\"\n\"Project-Id-Version: Plugins - WooCommerce Blocks - Stable (latest release)\\n\"\n\n\"#: assets/js/blocks/featured-product/block.json\"\n\"#: build/featured-product/block.json\"\n\"msgctxt \"block description\"\"\n\"msgid \"Highlight a product or variation.\"\"\n\"msgstr \"Ein Produkt oder eine Variante visuell hervorheben und zum sofortigen Handeln auffordern.\"\"\n\n\"#: assets/js/blocks/featured-product/block.json\"\n\"#: build/featured-product/block.json\"\n\"msgctxt \"block title\"\"\n\"msgid \"Featured Product\"\"\n\"msgstr \"Hervorgehobenes Produkt\"\"\n\n\"[...]\"\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Quantity Status for Cart Item in JavaScript\nDESCRIPTION: This code shows how to use the isItemPendingQuantity selector to check if a cart item's quantity is pending update.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst isItemPendingQuantity = store.isItemPendingQuantity( cartItemKey );\n```\n\n----------------------------------------\n\nTITLE: Setting WordPress Version for Docker Environment\nDESCRIPTION: Shows how to specify a previous WordPress version for the Docker testing environment using the `LATEST_WP_VERSION_MINUS` environment variable when starting the Docker container with `npx wc-e2e docker:up`. This example sets it to use the WordPress version two releases prior to the current latest stable version.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nLATEST_WP_VERSION_MINUS=2 npx wc-e2e docker:up\n```\n\n----------------------------------------\n\nTITLE: Sample WooCommerce Test Plugin\nDESCRIPTION: Example PHP plugin file showing how to create a custom plugin for E2E testing\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n/**\n * Plugin Name: WooCommerce Blocks Test My Fancy Plugin\n * Plugin URI: https://github.com/woocommerce/woocommerce\n * Author: WooCommerce\n *\n * @package woocommerce-blocks-test-my-fancy-plugin\n */\n\nfunction my_fancy_plugin() {\n  echo 'Howdy!';\n}\n\nadd_action('wp_footer', 'my_fancy_plugin');\n```\n\n----------------------------------------\n\nTITLE: Waiting for UI Unblock in JavaScript\nDESCRIPTION: This function waits until the page is unblocked. It's useful when waiting for AJAX operations to complete.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_30\n\nLANGUAGE: JavaScript\nCODE:\n```\nuiUnblocked()\n```\n\n----------------------------------------\n\nTITLE: Providing Quality and Design Assurance Text in WooCommerce Pattern (TXT)\nDESCRIPTION: This TXT snippet contains marketing copy used in the 'Hero Product Chessboard' pattern for WooCommerce, detailing product quality and unique design attributes. It's intended as static text within a pattern or block and should be placed in the designated area of the block editor or template. The content is not programmatic and does not require dependencies. It serves to inform customers about product qualities and will be shown as plain text in the UI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_1\n\nLANGUAGE: TXT\nCODE:\n```\nQuality Materials\nWe use only the highest-quality materials in our products, ensuring that they look great and last for years to come.\n\nUnique Design\nFrom bold prints and colors to intricate details and textures, our products are a perfect combination of style and function.\n```\n\n----------------------------------------\n\nTITLE: Enabling Screenshots on Test Failure via Environment Variable\nDESCRIPTION: Demonstrates how to enable the automatic capture of screenshots upon test failure by setting the `WC_E2E_SCREENSHOTS` environment variable to `1` when executing tests using `npx wc-e2e test:e2e`. Screenshots are saved to the `tests/e2e/screenshots` directory, which is cleared at the start of each run.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nWC_E2E_SCREENSHOTS=1 npx wc-e2e test:e2e\n```\n\n----------------------------------------\n\nTITLE: Running CI Jobs Generation Command in WooCommerce\nDESCRIPTION: CLI commands for generating CI jobs. Can be run either to generate all jobs or to generate jobs only for changes between HEAD and a specified base reference.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/ci-jobs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils ci-jobs\n```\n\nLANGUAGE: bash\nCODE:\n```\npnpm utils ci-jobs --base-ref <base-ref>\n```\n\n----------------------------------------\n\nTITLE: Installing wp-env for WooCommerce Testing\nDESCRIPTION: Command to install the wp-env package globally using npm. This package is required to setup the test environment in Docker.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/development.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @wordpress/env\n```\n\n----------------------------------------\n\nTITLE: Using the __experimental_woocommerce_blocks_add_data_attributes_to_namespace Filter in PHP\nDESCRIPTION: This filter defines which block namespaces should have block name and attribute data- attributes appended on render. It filters the list of allowed block namespaces.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\napply_filters( '__experimental_woocommerce_blocks_add_data_attributes_to_namespace', array $allowed_namespaces )\n```\n\n----------------------------------------\n\nTITLE: Testing Steps for Customer Address Update in WooCommerce 9.4.4\nDESCRIPTION: These steps outline the process to test the fix for checking if a session is set before returning an updated customer address. It involves using AvaTax for tax calculations and WooCommerce Subscriptions for recurring payments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/944.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Install [AvaTax](https://woocommerce.com/products/woocommerce-avatax/) (credentials in secret 7715) and set it up so taxes are applied to your orders. I used a store in the USA and used USA addresses.\n2. Install WooCommerce Subscriptions\n3. Create a Subscription product and add it to your cart. Then check out.\n4. Open the **subscription** in the WP dashboard and from the subscription actions box choose \"Process renewal\"\n5. <img width=\"319\" alt=\"image\" src=\"https://user-images.githubusercontent.com/5656702/219742801-c2d87718-ddad-4622-a2b2-b9f7eb3befdf.png\">\n6. There is no error and the sum is correct.\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_blocks_checkout_enqueue_data Hook in PHP\nDESCRIPTION: Fires after checkout block data is registered. This hook allows developers to perform actions after checkout data has been enqueued for the Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_checkout_enqueue_data' )\n```\n\n----------------------------------------\n\nTITLE: Using Numbered Arguments in Dynamic Strings for WooCommerce PHP\nDESCRIPTION: When using dynamic strings with multiple replacements in printf or sprintf, use numbered arguments to ensure correct ordering of replacements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/string-localisation-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nTest %1$s string %2$s.\n```\n\n----------------------------------------\n\nTITLE: Configuring Travis CI for WooCommerce E2E Testing\nDESCRIPTION: YAML configuration snippet for the `.travis.yml` file to enable E2E testing within a Travis CI environment. It defines a build job, specifies PHP version and environment variables (WP_VERSION, RUN_E2E), installs Jest, and includes script steps to set up the Docker container (`docker:up`), run tests (`test:e2e`), and tear down the container (`docker:down`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: ~> 1.0\n\n  include:\n    - name: \"Core E2E Tests\"\n    php: 7.4\n    env: WP_VERSION=latest WP_MULTISITE=0 RUN_E2E=1\n\n....\n\nscript:\n  - npm install jest --global\n  - npx wc-e2e docker:up\n  - npx wc-e2e test:e2e\n\n....\n\nafter_script:\n  - npx wc-e2e docker:down\n```\n\n----------------------------------------\n\nTITLE: Enhanced Content Component with Payment Setup Handler\nDESCRIPTION: Advanced implementation of the Content component that includes payment setup event handling and custom data validation. Uses the usePaymentMethodInterface hook to handle payment processing events and emit responses.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-api.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst Content = ( props ) => {\n\tconst { eventRegistration, emitResponse } = props;\n\tconst { onPaymentSetup } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( async () => {\n\t\t\t// Here we can do any processing we need, and then emit a response.\n\t\t\t// For example, we might validate a custom field, or perform an AJAX request, and then emit a response indicating it is valid or not.\n\t\t\tconst myGatewayCustomData = '12345';\n\t\t\tconst customDataIsValid = !! myGatewayCustomData.length;\n\n\t\t\tif ( customDataIsValid ) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: emitResponse.responseTypes.SUCCESS,\n\t\t\t\t\tmeta: {\n\t\t\t\t\t\tpaymentMethodData: {\n\t\t\t\t\t\t\tmyGatewayCustomData,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttype: emitResponse.responseTypes.ERROR,\n\t\t\t\tmessage: 'There was an error',\n\t\t\t};\n\t\t} );\n\t\t// Unsubscribes when this component is unmounted.\n\t\treturn () => {\n\t\t\tunsubscribe();\n\t\t};\n\t}, [\n\t\temitResponse.responseTypes.ERROR,\n\t\temitResponse.responseTypes.SUCCESS,\n\t\tonPaymentSetup,\n\t] );\n\treturn decodeEntities( settings.description || '' );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Unique Constant Name for an Admin Note in PHP\nDESCRIPTION: This PHP code snippet defines a class constant `NOTE_NAME` within the `ExampleNote` class. This constant holds a unique string identifier ('my-prefix-example-note') for the admin note. The `NoteTraits` class utilizes this constant for various operations, such as checking if the note already exists or deleting it.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nconst NOTE_NAME = 'my-prefix-example-note';\n```\n\n----------------------------------------\n\nTITLE: Defining `wc hpos backfill` Syntax (Plaintext)\nDESCRIPTION: Displays the command-line syntax for the `wp wc hpos backfill` command. It requires an `<order_id>`, source (`--from`) and destination (`--to`) datastores ('posts' or 'hpos'), and optionally accepts comma-separated lists for specific metadata (`--meta_keys`) or order properties (`--props`) to migrate selectively.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nwp wc hpos backfill <order_id> --from=<datastore> --to=<datastore> [--meta_keys=<meta_keys>] [--props=<props>]\n```\n\n----------------------------------------\n\nTITLE: Registering Product Collection with Advanced Preview in WooCommerce (TSX)\nDESCRIPTION: This example shows advanced usage of preview functionality, including accessing current attributes and location, using async operations, and implementing a cleanup function. It demonstrates how to dynamically change the preview state after a delay.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-collection-block/register-product-collection.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n__experimentalRegisterProductCollection({\n  name: \"your-plugin-name/product-collection/my-custom-collection-with-advanced-preview\",\n  title: \"My Custom Collection with Advanced Preview\",\n  icon: \"games\",\n  description: \"This is a custom collection with advanced preview.\",\n  keywords: [\n    \"My Custom Collection with Advanced Preview\",\n    \"product collection\",\n  ],\n  preview: {\n    setPreviewState: ({\n      setState,\n      attributes: currentAttributes,\n      location,\n    }) => {\n      // setPreviewState has access to the current attributes and location.\n      // console.log( currentAttributes, location );\n\n      const timeoutID = setTimeout(() => {\n        setState({\n          isPreview: false,\n          previewMessage: \"\",\n        });\n      }, 5000);\n\n      return () => clearTimeout(timeoutID);\n    },\n    initialPreviewState: {\n      isPreview: true,\n      previewMessage:\n        \"This is a preview message for my custom collection with advanced preview.\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Packages in WooCommerce PHP Files\nDESCRIPTION: These snippets demonstrate how to use classes from external packages in WooCommerce PHP files. It shows both direct usage and usage with aliasing to avoid naming conflicts.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/packages/README.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\ExamplePackage\\ExampleClass;\n\n// other code...\n\n$class = new ExampleClass();\n```\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\ExamplePackage\\ExampleClass as Example_Class_Alias;\n\n// other code...\n\n$class = new Example_Class_Alias();\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Unit Tests\nDESCRIPTION: Examples of running specific test classes using the --filter option with pnpm test commands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce test:unit:env -- --filter=TestClassName\n```\n\n----------------------------------------\n\nTITLE: Connecting WooCommerce Payments and Orders Pages in PHP\nDESCRIPTION: Examples showing how to connect the Payments settings page and Orders listing page using wc_admin_connect_page() with different configuration options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nwc_admin_connect_page(\n\tarray(\n\t\t'id'        => 'woocommerce-settings-payments',\n\t\t'parent'    => 'woocommerce-settings',\n\t\t'screen_id' => 'woocommerce_page_wc-settings-checkout',\n\t\t'title'     => __( 'Payments', 'woocommerce' ),\n\t\t'path'      => add_query_arg(\n\t\t\tarray(\n\t\t\t\t'page' => 'wc-settings',\n\t\t\t\t'tab'  => 'checkout',\n\t\t\t),\n\t\t\t'admin.php'\n\t\t),\n\t)\n);\n\nwc_admin_connect_page(\n\tarray(\n\t\t'id'        => 'woocommerce-orders',\n\t\t'screen_id' => 'edit-shop_order',\n\t\t'title'     => __( 'Orders', 'woocommerce' ),\n\t\t'path'      => add_query_arg( 'post_type', 'shop_order', 'edit.php' ),\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing woocommerce_before_shop_loop Hook in PHP\nDESCRIPTION: This hook fires before the shop loop begins. It's commonly used with functions like woocommerce_output_all_notices(), woocommerce_result_count(), and woocommerce_catalog_ordering().\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_before_shop_loop' )\n```\n\n----------------------------------------\n\nTITLE: Ternary Conditional Expression in JavaScript\nDESCRIPTION: A conditional expression that returns 'bar' if foo is truthy, otherwise returns 'baz'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfoo ? 'bar' : 'baz'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Field to Product Template\nDESCRIPTION: PHP code that hooks into WooCommerce's template system to add the custom field to the product editor's general tab.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_action(\n    'woocommerce_layout_template_after_instantiation',\n    function( $layout_template_id, $layout_template_area, $layout_template ) {\n        $general = $layout_template->get_group_by_id( 'general' );\n\n        if ( $general ) {\n            $tutorial_section = $general->add_section(\n\t\t\t\tarray(\n\t\t\t\t\t'id'         => 'tutorial-section',\n\t\t\t\t\t'order'      => 15,\n\t\t\t\t\t'attributes' => array(\n\t\t\t\t\t\t'title'       => __( 'Tutorial Section', 'woocommerce' ),\n\t\t\t\t\t\t'description' => __( 'Fields related to the tutorial', 'woocommerce' ),\n\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t);\n            $tutorial_section->add_block(\n                [\n                    'id' \t     => 'example-new-product-form-field',\n                    'blockName'  => 'tutorial/new-product-form-field',\n                    'attributes' => [],\n                ]\n            );\n        }\n    },\n    10,\n    3\n);\n```\n\n----------------------------------------\n\nTITLE: Registering OnPaymentSetup via eventRegistration Prop (Extensible Payment Method Component, JSX)\nDESCRIPTION: This example demonstrates how registered WooCommerce payment method components can access the onPaymentSetup event through the eventRegistration prop. It utilizes the useEffect hook from the global WordPress element object to register and unsubscribe an observer for payment setup events. The pattern is intended for third-party or extensible integrations and assumes the existence of eventRegistration as a prop on the payment method component.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst { useEffect } = window.wp.element;\n\nconst PaymentMethodComponent = ( { eventRegistration } ) => {\n\tconst { onPaymentSetup } = eventRegistration;\n\tuseEffect( () => {\n\t\tconst unsubscribe = onPaymentSetup( () => true );\n\t\treturn unsubscribe;\n\t}, [ onPaymentSetup ] );\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Order Data with Inconsistencies\nDESCRIPTION: Shows errors when verification finds differences between orders in the legacy and HPOS datastores. The output details specific differences including field names and values.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos verify_data\nOrder Data Verification  100% [====================================================================================] 0:00 / 0:00\nVerification completed.\nError: 999 orders were verified in 0 seconds. 1 error found: {\n    \"100126\": [\n        {\n            \"column\": \"post_modified_gmt\",\n            \"original_value\": \"2024-04-04 15:32:27\",\n            \"new_value\": \"2024-04-05 15:19:56\"\n        },\n        {\n            \"column\": \"_order_tax\",\n            \"original_value\": \"74\",\n            \"new_value\": \"0\"\n        },\n        {\n            \"column\": \"_order_total\",\n            \"original_value\": \"567.25\",\n            \"new_value\": \"0\"\n        },\n        {\n            \"order_id\": 100126,\n            \"meta_key\": \"_billing_address_index\",\n            \"orig_meta_values\": [\n                \"Hans Howell Moore Ltd 325 Ross Drive  Wilfridhaven WA 23322 NF heidi.koch@example.net +17269674166\"\n            ],\n            \"new_meta_values\": [\n                \"Hans X Howell Moore Ltd 325 Ross Drive  Wilfridhaven WA 23322 NF heidi.koch@example.net +17269674166\"\n            ]\n        }\n    ]\n}. Please review the error above.\n```\n\n----------------------------------------\n\nTITLE: Querying Single Cart Item via cURL - WooCommerce Store API - Shell\nDESCRIPTION: Uses cURL to request details for a specific cart item in WooCommerce by sending an HTTP GET request to the cart item detail endpoint, substituting the item key in the URL. This command returns the JSON representation of the requested cart item, including all metadata and details. Intended for users who need to programmatically retrieve item-level cart details from the API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/cart/items/c74d97b01eae257e44aa9d5bade97baf\"\n```\n\n----------------------------------------\n\nTITLE: Product Type Specific Add to Cart Action\nDESCRIPTION: Dynamic action hook that triggers for specific product types when adding to cart. The hook name is generated based on the product type.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_26\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_{$product->get_type()}_add_to_cart' )\n```\n\n----------------------------------------\n\nTITLE: Handling `wc hpos cleanup` Error (Plaintext)\nDESCRIPTION: Illustrates a scenario where `wp wc hpos cleanup` for order ID 100126 is prevented by default because the data in the legacy posts table appears more recent than the HPOS data. A warning message indicates the potential issue and prevents destructive action without user confirmation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos cleanup 100126\nStarting cleanup for 1 order...\nWarning: An error occurred while cleaning up order 100126: Data in posts table appears to be more recent than in HPOS tables.\n```\n\n----------------------------------------\n\nTITLE: Investigating Cleanup Differences with `wc hpos diff` (Plaintext)\nDESCRIPTION: Shows using `wp wc hpos diff` for order ID 100126 to investigate why the `cleanup` command failed (as shown in the previous example). The output reveals that the `date_modified` timestamp is later in the post datastore, confirming the reason for the warning.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos diff 100126\nWarning: Differences found for order 100126:\n+---------------+---------------------------+---------------------------+\n| property      | hpos                      | post                      |\n+---------------+---------------------------+---------------------------+\n| date_modified | 2024-04-05T15:19:56+00:00 | 2024-04-05T16:39:26+00:00 |\n+---------------+---------------------------+---------------------------+\n```\n\n----------------------------------------\n\nTITLE: Updating Packages in WooCommerce Lib Directory\nDESCRIPTION: Instructions for updating an existing package in the WooCommerce lib directory. This involves changing the version in composer.json and running the build script.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/lib/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nUpdating a package is as easy as changing the version in `composer.json` and then running `composer run-script build-lib` from the root directory.\n```\n\n----------------------------------------\n\nTITLE: Using Logical NOT Operator\nDESCRIPTION: Example of the logical NOT (!) operator, which returns true if the operand is false.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n!false\n```\n\n----------------------------------------\n\nTITLE: Using woocommerce_blocks_enqueue_cart_block_scripts_after Hook in PHP\nDESCRIPTION: Fires after cart block scripts are enqueued. This hook allows developers to perform actions or enqueue additional scripts after the cart block scripts have been loaded.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndo_action( 'woocommerce_blocks_enqueue_cart_block_scripts_after' )\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Description in JavaScript\nDESCRIPTION: This function returns the 'describe' or 'describe.skip' function based on a condition. It's useful for conditionally running test suites.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nutils.describeIf(condition)\n```\n\n----------------------------------------\n\nTITLE: Using the __experimental_woocommerce_blocks_add_data_attributes_to_block Filter in PHP\nDESCRIPTION: This filter defines which block names should have block name and attribute data- attributes appended on render. It filters the list of allowed Block Names.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\napply_filters( '__experimental_woocommerce_blocks_add_data_attributes_to_block', array $allowed_namespaces )\n```\n\n----------------------------------------\n\nTITLE: Template License Notice for Source Files (GPLv3)\nDESCRIPTION: This is a template notice recommended by the GNU GPLv3 for inclusion at the beginning of each source file. It includes placeholders for the program's name, a brief description, copyright year, and author's name. The notice declares the program as free software under GPLv3 (or later versions), explicitly disclaims warranties (including merchantability and fitness for a particular purpose), and directs users to the full GNU General Public License text, suggesting where to find it if not included.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/license.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright © <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Task UI in JavaScript for WooCommerce Admin\nDESCRIPTION: Creates a custom task UI component using React and registers it as a plugin for WooCommerce tasks. It also customizes the task list item appearance.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/handling-merchant-onboarding.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createElement } from '@wordpress/element';\nimport {\n\tWooOnboardingTask,\n\tWooOnboardingTaskListItem,\n} from '@woocommerce/onboarding';\nimport { registerPlugin } from '@wordpress/plugins';\n\nconst Task = ( { onComplete, task, query } ) => {\n\t// Implement your task UI/feature here.\n\treturn <div></div>;\n};\n\nregisterPlugin( 'add-task-content', {\n\trender: () => (\n\t\t<WooOnboardingTask id=\"my-task\">\n\t\t\t{ ( { onComplete, query, task } ) => (\n\t\t\t\t<Task onComplete={ onComplete } task={ task } query={ query } />\n\t\t\t) }\n\t\t</WooOnboardingTask>\n\t),\n} );\n\nregisterPlugin( 'add-task-list-item', {\n\tscope: 'woocommerce-tasks',\n\trender: () => (\n\t\t<WooOnboardingTaskListItem id=\"my-task\">\n\t\t\t{ ( { defaultTaskItem: DefaultTaskItem } ) => (\n\t\t\t\t// Add a custom wrapper around the default task item.\n\t\t\t\t<div\n\t\t\t\t\tclassName=\"woocommerce-custom-tasklist-item\"\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\tborder: '1px solid red',\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t<DefaultTaskItem />\n\t\t\t\t</div>\n\t\t\t) }\n\t\t</WooOnboardingTaskListItem>\n\t),\n} );\n```\n\n----------------------------------------\n\nTITLE: Getting Customer Total Spent in PHP\nDESCRIPTION: Retrieves the total amount spent by a customer. Takes a single parameter $user_id to identify the customer.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nwc_get_customer_total_spent( $user_id )\n```\n\n----------------------------------------\n\nTITLE: Shipping Zone Management Commands\nDESCRIPTION: CLI commands for managing shipping zones including creation, listing, updating, and deletion of zones.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_57\n\nLANGUAGE: cli\nCODE:\n```\nwc shipping_zone list\nwc shipping_zone create\nwc shipping_zone get [id]\nwc shipping_zone update [id]\nwc shipping_zone delete [id]\n```\n\n----------------------------------------\n\nTITLE: Publishing Packages to NPM\nDESCRIPTION: Command to publish prepared packages to NPM from the monorepo root. Uses the -a flag to publish all prepared packages.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/package-release/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./tools/package-release/bin/dev publish -a\n```\n\n----------------------------------------\n\nTITLE: Equality Comparison Expression in JavaScript\nDESCRIPTION: A simple comparison expression that checks if a variable equals a specific string value using strict equality.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfoo === 'bar'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Products List via Store API\nDESCRIPTION: Example request to get a list of products from the WooCommerce Store API, returning detailed product information including prices, images, and stock status.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/products.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products\"\n```\n\n----------------------------------------\n\nTITLE: Running WooCommerce Unit Tests with Composer\nDESCRIPTION: Composer command to execute unit tests for the WooCommerce project. This runs after the test environment has been started.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/development.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run test:unit\n```\n\n----------------------------------------\n\nTITLE: Site Branding Color Customization\nDESCRIPTION: CSS example showing how to modify the site title color in a child theme.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/set-up-a-child-theme.md#2025-04-23_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.site-branding h1 a {\n    color: red;\n}\n```\n\n----------------------------------------\n\nTITLE: Version 1.4.0 Changelog Entry in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 1.4.0, including the release date and a list of changes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.4.0](https://www.npmjs.com/package/@woocommerce/tracks/v/1.4.0) - 2024-06-11 \n\n-   Minor - Add recordEvent validation to Tracks package #34005 [#34005]\n-   Minor - Bump node version. [#45148]\n-   Patch - bump php version in packages/js/*/composer.json [#42020]\n-   Minor - Adjust build/test scripts to remove -- -- that was required for pnpm 6. [#34661]\n-   Minor - Fix node and pnpm versions via engines [#34773]\n-   Patch - Make eslint emit JSON report for annotating PRs. [#39704]\n-   Minor - Match TypeScript version with syncpack [#34787]\n-   Patch - Update eslint to 8.32.0 across the monorepo. [#36700]\n-   Minor - Update pnpm monorepo-wide to 8.6.5 [#38990]\n-   Minor - Update pnpm to 8.6.7 [#39245]\n-   Patch - Update pnpm to 9.1.0 [#47385]\n-   Minor - Update pnpm to version 8. [#37915]\n-   Minor - Update pnpm version constraint to 7.13.3 to avoid auto-install-peers issues [#35007]\n-   Minor - Upgrade TypeScript to 5.1.6 [#39531]\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Store API Checkout Example Payload in JSON\nDESCRIPTION: This JSON object shows the checkout payload sent to the WooCommerce Store API, containing user-provided addresses, payment method, and payment_data with custom gateway data. The payment_data field is an array of key/value pairs to be processed server-side by registered hooks. This format is expected by WooCommerce's checkout endpoints.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\\n\\t\"shipping_address\": {},\\n\\t\"billing_address\": {},\\n\\t\"customer_note\": \"\",\\n\\t\"create_account\": false,\\n\\t\"payment_method\": \"bacs\",\\n\\t\"payment_data\": [\\n\\t\\t{\\n\\t\\t\\t\"key\": \"myGatewayCustomData\",\\n\\t\\t\\t\"value\": \"12345\"\\n\\t\\t}\\n\\t],\\n\\t\"extensions\": {}\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: CSS Fix - Cursor for Disabled Quick Updates Button\nDESCRIPTION: Adds a not-allowed cursor style to disabled Quick Updates button for better UX indication\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/changelog.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\ncursor: not-allowed;\n```\n\n----------------------------------------\n\nTITLE: Accessing WooCommerce Product Shipping Classes Store in JavaScript\nDESCRIPTION: This snippet shows how to import and access the experimental WooCommerce product shipping class data store using JavaScript (React). It uses the useDispatch hook from @wordpress/data to create a dispatcher for the product shipping classes store. The dispatcher is then used to call createProductShippingClass to create a new shipping class named 'test'. Requires @woocommerce/data and @wordpress/data dependencies, and expects to run in a React/WordPress/Gutenberg environment. Input is the shipping class data object, and no value is returned directly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/data/src/product-shipping-classes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { EXPERIMENTAL_PRODUCT_SHIPPING_CLASSES_STORE_NAME } from '@woocommerce/data';\nimport { useDispatch } from '@wordpress/data';\n\nfunction Component() {\n\tconst actions = useDispatch(\n\t\tEXPERIMENTAL_PRODUCT_SHIPPING_CLASSES_STORE_NAME\n\t);\n\tactions.createProductShippingClass( { name: 'test' } );\n}\n```\n\n----------------------------------------\n\nTITLE: Executing General WC-CLI Commands in Bash\nDESCRIPTION: This snippet shows the basic syntax structure for executing WooCommerce CLI commands using the WordPress CLI (`wp`). Replace `[command]` with a specific WC-CLI command (e.g., `shop_coupon list`) and `[options]` with any relevant flags or parameters for that command.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp wc [command] [options]\n```\n\n----------------------------------------\n\nTITLE: Generating WooCommerce Hook Reference in Bash\nDESCRIPTION: Command to create a new hook reference JSON file. The output is stored in 'bin/hook-reference/data.json'.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/bin/hook-reference/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm create-hook-reference\n```\n\n----------------------------------------\n\nTITLE: Validating Coupon Usage Against Customer ID and Email - WooCommerce Blocks - Markdown\nDESCRIPTION: This snippet provides multiple scenarios for verifying that coupon usage restrictions apply both to customer IDs and email addresses in WooCommerce Blocks. It covers logging in and out, using different email combinations, verifying correct error messages, and regression checks for various coupon use limits. The tests require admin access to create coupons and cover both logged-in and guest checkout flows with requisite error display as outputs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n### Validate coupon usage against customer id AND emails [#11860](https://github.com/woocommerce/woocommerce-blocks/pull/11860)\n\n#### From logged in to logged out\n\n1. Create a new coupon and limit its usage to 1 per customer.\n2. Logged in, with an email you remember, place an order using that coupon, it should pass.\n3. Logged out, using the same email, try placing an order with that coupon, you should get a top level error \"coupon_name\" was removed from the cart. Coupon usage limit has been reached.\".\n\n#### User email vs billing email\n\n1. Create a new coupon and limit its usage to 1 per customer.\n2. Logged in, with an user email you remember, place an order using that coupon, and a different billing email. It should pass.\n3. Logged out, using the same user email (not the billing email), try placing an order with that coupon, you should get a top level error \"coupon_name\" was removed from the cart. Coupon usage limit has been reached.\".\n\n#### From logged out to logged in\n\n1. Create a new coupon and limit its usage to 1 per customer.\n4. Logged out, use the coupon with an email you remember, that email should belong to an existing user.\n5. You should be able to place the order fine.\n6. Logged in with the user that own that email.\n7. Go to checkout, add the coupon, using the same email, try to place the order.\n8. You should get a top level error.\n9. Change your billing email to something else, add the coupon again.\n10. Try to place the order, you should get an error.\n\n#### General regression testing\n\n1. Create a new coupon and limit its usage to 1 per customer.\n2. Logged in, with an email you remember, place an order using that coupon, it should pass.\n3. Logged in again, back to checkout, change your email, and try adding the coupon, you should get an inline error that you can't use the coupon.\n```\n\n----------------------------------------\n\nTITLE: Listing Product Attributes via Curl - Shell\nDESCRIPTION: Shows how to use curl to request all product attributes from the WooCommerce Store API. The shell command sends a GET request to the REST endpoint and expects a JSON array in response. No authentication, headers, or query parameters are illustrated, assuming public or authorized access.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attributes.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/attributes\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Local Test Environment Configuration (.wp-env.json) (diff)\nDESCRIPTION: Illustrates how to modify the `.wp-env.json` configuration file to customize the local testing environment. This example shows changing the WordPress core version and adding the Gutenberg plugin. After changes, the environment must be stopped (`npm run wp-env stop`), potentially cleaned (`npm run wp-env clean all`), and restarted (`npm run wp-env start`).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/javascript-testing.md#2025-04-23_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n{\n-\t\"core\": \"WordPress/WordPress#5.7-branch\",\n+\t\"core\": \"WordPress/WordPress#5.6-branch\",\n\t\"plugins\": [\n\t\t\"https://downloads.wordpress.org/plugin/woocommerce.latest-stable.zip\",\n\t\t\"https://github.com/WP-API/Basic-Auth/archive/master.zip\",\n+\t\t\"https://downloads.wordpress.org/plugin/gutenberg.latest-stable.zip\",\n\t\t\".\"\n\t],\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Incompatible Plugin Warning in WooCommerce HPOS Settings\nDESCRIPTION: This snippet shows the warning displayed when an incompatible plugin is detected, disabling the HPOS option in WooCommerce settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n![Incompatible plugin](https://woocommerce.com/wp-content/uploads/2023/10/image-21.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimental_woocommerce_blocks_hidden` PHP Property\nDESCRIPTION: An experimental property within the `CartItemSchema` (PHP) that allows overriding the default `hidden` status of cart item data. This provides fine-grained control over data visibility, particularly useful for distinguishing between the Cart Block and the traditional Cart Shortcode display contexts. It may become obsolete if blocks fully replace shortcodes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n// Property Name (within CartItemSchema):\n__experimental_woocommerce_blocks_hidden\n```\n\n----------------------------------------\n\nTITLE: Listing WooCommerce Order Refunds via CLI\nDESCRIPTION: Lists WooCommerce order refunds associated with a specific `order_id`. Provides extensive filtering and pagination options including `--context`, `--page`, `--per_page`, `--search`, date ranges (`--after`, `--before`), exclusion/inclusion (`--exclude`, `--include`), sorting (`--order`, `--orderby`), and field limiting (`--fields`, `--field`). Output format can be specified using `--format`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nwc shop_order_refund list <order_id>\n```\n\n----------------------------------------\n\nTITLE: Adding Toggle Field to WooCommerce Product Editor in PHP\nDESCRIPTION: This snippet demonstrates how to add a toggle field to the WooCommerce product editor. It creates a new block with specific attributes for a virtual product toggle, including labels and help text.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/toggle/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$section->add_block(\n  array(\n    'id'         => 'example-toggle-meta',\n    'blockName'  => 'woocommerce/product-toggle-field',\n    'order'      => 15,\n    'attributes' => array(\n      'property'       => 'virtual',\n      'checkedValue'   => false,\n      'uncheckedValue' => true,\n      'label'          => __( 'This variation requires shipping or pickup', 'woocommerce' ),\n      'uncheckedHelp'  => __( 'This variation will not trigger your customer\\'s shipping calculator in cart or at checkout. This product also won\\'t require your customers to enter their shipping details at checkout. <a href=\"https://woocommerce.com/document/managing-products/#adding-a-virtual-product\" target=\"_blank\" rel=\"noreferrer\">Read more about virtual products</a>.', 'woocommerce' ),\n    ),\n  )\n);\n```\n\n----------------------------------------\n\nTITLE: Using PNPM Filtering for Build and Test Commands in WooCommerce Monorepo\nDESCRIPTION: Examples of PNPM commands using the --filter flag to target specific plugins, packages, or tools within the WooCommerce monorepo. These commands demonstrate how to build, lint, and test specific components or groups of components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/DEVELOPMENT.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Lint and build all plugins, packages, and tools.\npnpm lint && pnpm build\n\n# Build WooCommerce Core and all of its dependencies\npnpm --filter='@woocommerce/plugin-woocommerce' build\n\n# Lint the @woocommerce/components package\npnpm --filter='@woocommerce/components' lint\n\n# Test all of the @woocommerce scoped packages\npnpm --filter='@woocommerce/*' test\n\n# Build all of the JavaScript packages\npnpm --filter='./packages/js/*' build\n\n# Build everything except WooCommerce Core\npnpm --filter='!@woocommerce/plugin-woocommerce' build\n\n# Build everything that has changed since the last commit\npnpm --filter='[HEAD^1]' build\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Cart Filters Reference Table\nDESCRIPTION: Markdown table documenting cart filters, their compatibility status with blocks, and implementation notes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Old hook                                           | Works in blocks? | Notes                                                                                                                                                                             |\n|----------------------------------------------------|------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Running Workflow Commands with PNPM for Email Editor Development\nDESCRIPTION: A set of commands for building, running, linting, and formatting the WooCommerce Email Editor package. These commands facilitate the development workflow using pnpm package manager and help maintain code quality through various linting and formatting operations.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/email-editor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm run build                              # runs the build command\npnpm run start                              # starts the webpack development server\npnpm run lint:css                           # runs stylelint on all .scss files\npnpm run lint:css-fix                       # fixes errors reported by `pnpm run lint:css`\npnpm run lint:js                            # runs eslint on all js and ts files (including the .jsx and .tsx versions)\npnpm run lint:js-fix                        # fixes errors reported by `pnpm run lint:js`\npnpm run check-types                        # runs type check on all typescript files\npnpm run format                             # runs prettier on files. This uses WordPress coding standards.\n```\n\n----------------------------------------\n\nTITLE: Modifying Request URI Whitelist with WordPress Filter\nDESCRIPTION: Demonstrates the use of the 'woocommerce_remote_logging_request_uri_whitelist' WordPress filter to modify the list of whitelisted query parameters that won't be masked in the logged request URI.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n  'woocommerce_remote_logging_request_uri_whitelist',\n  'my-plugin',\n  ( whitelist ) => {\n    return [ ...whitelist, 'exampleParam' ]\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing Ancestor Definition in Atomic Blocks for WooCommerce\nDESCRIPTION: This fix corrects the ancestor definition in Atomic Blocks, ensuring that it's possible to add atomic blocks within the 'Edit the layout of each product' mode of the All Products block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/911.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// No code snippet provided, but changes affect Atomic Blocks functionality\n```\n\n----------------------------------------\n\nTITLE: Querying Product Attribute Terms via WooCommerce REST API (curl, Shell)\nDESCRIPTION: This code snippet shows how to perform a GET request to the WooCommerce Store API endpoint for attribute terms using the curl command in a shell environment. Replace the attribute ID as needed; authentication may be required depending on store settings. The response will be a JSON array of objects containing term data. This example assumes that the endpoint is publicly accessible or appropriate authentication headers are provided.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-attribute-terms.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/attributes/1/terms\"\n```\n\n----------------------------------------\n\nTITLE: Using WC() Helper Method for Legacy Function Calls in PHP\nDESCRIPTION: Shows the recommended approach for calling legacy functions using the WC() helper method when no other dependencies are needed.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\nclass TheClass {\n    public function do_something_using_some_function() {\n        WC()->call_function( 'the_function_name', 'param1', 'param2' );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Status in WooCommerce Checkout\nDESCRIPTION: Shows how to access payment status information from the payment data store using WordPress data selectors. Demonstrates checking various payment states like idle, processing, and error conditions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst { select } = window.wp.data;\nconst { paymentStore } = window.wc.wcBlocksData;\n\nconst MyComponent = ( props ) => {\n\tconst isPaymentIdle = select( paymentStore ).isPaymentIdle();\n\tconst isExpressPaymentStarted =\n\t\tselect( paymentStore ).isExpressPaymentStarted();\n\tconst isPaymentProcessing =\n\t\tselect( paymentStore ).isPaymentProcessing();\n\tconst isPaymentReady = select( paymentStore ).isPaymentReady();\n\tconst hasPaymentError = select( paymentStore ).hasPaymentError();\n\n\t// do something with the boolean values\n};\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Product Collection Data Endpoint Examples\nDESCRIPTION: Example HTTP GET requests showing different parameter combinations for the product collection data endpoint.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-collection-data.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/collection-data\nGET /products/collection-data?calculate_price_range=true\nGET /products/collection-data?calculate_attribute_counts[0][query_type]=or&calculate_attribute_counts[0][taxonomy]=pa_color\nGET /products/collection-data?calculate_rating_counts=true\n```\n\n----------------------------------------\n\nTITLE: Custom Exclusions for Coming Soon Mode in PHP\nDESCRIPTION: Demonstrates how to implement custom exclusions for WooCommerce coming soon mode using WordPress filters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/integrating-coming-soon-mode.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nadd_filter( 'woocommerce_coming_soon_exclude', function() {\n    return true;\n}, 10 );\n```\n\n----------------------------------------\n\nTITLE: Filtering Debug Logs with Tail Command\nDESCRIPTION: Unix command to monitor specific notification rule evaluations in real-time by filtering log output with grep\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ntail -f remote-inbox-notifications-2021-06-15-128.log | grep 'wcpay-promo-2021-6-incentive-2'\n```\n\n----------------------------------------\n\nTITLE: Adding 'Sorted by title' Preset to Product Query in WooCommerce Blocks\nDESCRIPTION: This feature adds a new 'Sorted by title' preset to the Product Query block. It allows products to be ordered by title by default in the Products (Beta) block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/911.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// No code snippet provided, but changes affect Product Query functionality\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response for List Cart Coupons\nDESCRIPTION: Shows an example JSON response returned by the `GET /cart/coupons` endpoint. It contains an array of coupon objects, each detailing the coupon code, type, totals (discount amount, tax, currency info), and API links.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-coupons.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"code\": \"20off\",\n\t\t\"type\": \"fixed_cart\",\n\t\t\"totals\": {\n\t\t\t\"currency_code\": \"GBP\",\n\t\t\t\"currency_symbol\": \"£\",\n\t\t\t\"currency_minor_unit\": 2,\n\t\t\t\"currency_decimal_separator\": \".\",\n\t\t\t\"currency_thousand_separator\": \",\",\n\t\t\t\"currency_prefix\": \"£\",\n\t\t\t\"currency_suffix\": \"\",\n\t\t\t\"total_discount\": \"1667\",\n\t\t\t\"total_discount_tax\": \"333\"\n\t\t},\n\t\t\"_links\": {\n\t\t\t\"self\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"http://local.wordpress.test/wp-json/wc/store/v1/cart/coupons/20off\"\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"collection\": [\n\t\t\t\t{\n\t\t\t\t\t\"href\": \"http://local.wordpress.test/wp-json/wc/store/v1/cart/coupons\"\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Registering Chunk Translations for Lazy-Loaded Components in PHP\nDESCRIPTION: This function registers translation chunks for lazy-loaded components. It iterates through an array of chunk names, registers a script for each chunk, adds inline translations, and then deregisters the script.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-for-lazy-loaded-components.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprotected function register_chunk_translations( $chunks ) {\n  foreach ( $chunks as $chunk ) {\n    $handle = 'wc-blocks-' . $chunk . '-chunk';\n    $this->asset_api->register_script( $handle, $this->asset_api->get_block_asset_build_path( $chunk ), [], true );\n    wp_add_inline_script(\n      $this->get_block_type_script( 'handle' ),\n      wp_scripts()->print_translations( $handle, false ),\n      'before'\n    );\n    wp_deregister_script( $handle );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product Brand by ID with curl (Shell)\nDESCRIPTION: This curl command fetches a single product brand by its numeric ID from the WooCommerce API. Replace '1' with the desired brand ID. The command returns a single JSON object if a matching brand is found.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/brands/1\"\n```\n\n----------------------------------------\n\nTITLE: Installing ExPlat Package with PNPM\nDESCRIPTION: Command to install the ExPlat package as a dependency using PNPM package manager. This is required before using any ExPlat functionality in a WooCommerce project.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/explat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install @woocommerce/explat --save\n```\n\n----------------------------------------\n\nTITLE: Warning and Error Notice Variants with Non-Dismissible Options\nDESCRIPTION: Examples of warning and error notices with the isDismissible prop set to false. The error notice demonstrates HTML formatting capabilities including italics, bold text, and hyperlinks within the description.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketplace/components/notice/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Notice\n\tid=\"warning-notice\"\n\tvariant=\"warning\"\n\tdescription={ __(\n\t\t'This is a warning and I cannot be dismissed. Nope.',\n\t\t'woocommerce'\n\t) }\n\ticon=\"info\"\n\tisDismissible={ false }\n/>\n\n<Notice\n\tid=\"error-notice\"\n\tvariant=\"error\"\n\tdescription={ __(\n\t\t'I am red and I cannot be dismissed. Nope. But I support <i>HTML</i> <strong>tags</strong>. So <a href=\"#\">I can have links</a>.',\n\t\t'woocommerce'\n\t) }\n\ticon=\"info\"\n\tisDismissible={ false }\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Jest Puppeteer Configuration in JavaScript\nDESCRIPTION: Shows how to customize the Puppeteer launch configuration in the project's `config/jest-puppeteer.config.js` file by using the `useE2EJestPuppeteerConfig` function from `@woocommerce/e2e-environment`. This example demonstrates overriding the default configuration to set `headless` mode to `false`.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/README.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { useE2EJestPuppeteerConfig } = require( '@woocommerce/e2e-environment' );\n\nconst puppeteerConfig = useE2EJestPuppeteerConfig( {\n\tlaunch: {\n\t\theadless: false,\n\t}\n} );\n\nmodule.exports = puppeteerConfig;\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Checkout Store State in JavaScript\nDESCRIPTION: Initial state configuration for the WooCommerce checkout store. Defines the default values for redirect URL, status, error state, order/customer IDs, calculation tracking, order notes, address handling, account creation, and extension data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/data-store/checkout.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n\tredirectUrl: '',\n\tstatus: STATUS.PRISTINE,\n\thasError: false,\n\torderId: checkoutData.order_id,\n\tcustomerId: checkoutData.customer_id,\n\tcalculatingCount: 0,\n\torderNotes: '',\n\tuseShippingAsBilling: isSameAddress(\n\tcheckoutData.billing_address,\n\tcheckoutData.shipping_address\n\t),\n\tshouldCreateAccount: false,\n\textensionData: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Cart Validation Filter Hook\nDESCRIPTION: Legacy hook for validating items being added to cart. Marked as deprecated since it uses wc_add_notice which needs to be converted to exceptions for API use.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_add_to_cart_validation', boolean $passed_validation, integer $product_id, integer $quantity, integer $variation_id, array $variation )\n```\n\n----------------------------------------\n\nTITLE: Testing Product Collection Block Inspector Controls - WooCommerce Blocks - Markdown\nDESCRIPTION: This markdown snippet details manual test steps for validating the reorganization of 'Columns' and 'Responsive' controls in the Product Collection block's Inspector panel, ensuring the undefined problem is fixed. UI differences are documented using screenshot references with before-and-after states for visual comparison. Prerequisites are access to a site running WooCommerce Blocks and the ability to use the editor and Inspector Controls; inputs include block addition and UI inspection, with outputs observed visually.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1170.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Reorganise Columns controls and fix undefined problem in Product Collection settings [#11937](https://github.com/woocommerce/woocommerce-blocks/pull/11937)\n\n1. Go to Editor\n2. Add Product Collection block\n3. Check Inspector Controls\n4. \"Columns\" and \"Responsive\" look like in the AFTER image:\n\n| Before                                                                                                                                     | After                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| <img width=\"286\" alt=\"image\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/20098064/decb0d07-f6d6-4881-aa21-602d120c3865\"> | <img width=\"288\" alt=\"image\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/20098064/f3a166f5-4c1b-42d2-b2c4-4627f759c7aa\"> |\n\n6. Click three dots next to \"Settings\"\n7. There's no `undefined` entry, but \"Columns\" and \"Responsive\" like in the AFTER image:\n\n| Before                                                                                                                                     | After                                                                                                                                      |\n|--------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------|\n| <img width=\"289\" alt=\"image\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/20098064/80c33902-f2da-4474-8658-50fc39dd43fd\"> | <img width=\"285\" alt=\"image\" src=\"https://github.com/woocommerce/woocommerce-blocks/assets/20098064/06608aa3-a85d-43ec-b662-4ce6da634905\"> |\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for Product Tags\nDESCRIPTION: HTTP GET endpoint specification for retrieving product tags from the WooCommerce store API.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-tags.md#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /products/tags\n```\n\n----------------------------------------\n\nTITLE: HTML Block Test Content for Single Product Template\nDESCRIPTION: HTML code snippet to test custom HTML block support in the Single Product Compatibility Layer feature. This snippet should be added outside the Group block in the template.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1001.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<h2>HTML Block here</h2>\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Advanced Features for HPOS\nDESCRIPTION: This snippet shows the WooCommerce Advanced Features settings page, where users can enable compatibility mode and switch between different order storage options.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n![WooCommerce ▸ Settings ▸ Advanced ▸ Features Screen](https://woocommerce.com/wp-content/uploads/2023/10/hpos-feature-settings.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Attribute Details in WooCommerce CLI\nDESCRIPTION: Command for getting details of a specific product attribute by its ID, with options for formatting and field selection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_33\n\nLANGUAGE: bash\nCODE:\n```\nwc product_attribute get [id]\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for WooCommerce Package Styles\nDESCRIPTION: Example webpack.config.js configuration file for a WooCommerce package that imports rules and plugins from @woocommerce/internal-style-build. The entry should be named 'build-style' to ensure the CSS gets picked up by the main client application's CopyWebpackPlugin configuration.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/internal-style-build/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// packages/<package-name>/webpack.config.js\n\nimport { webpackConfig } from '@woocommerce/internal-style-build';\n\nmodule.exports = {\n\tmode: process.env.NODE_ENV || 'development',\n\tentry: {\n\t\t'build-style': __dirname + '/src/style.scss',\n\t},\n\toutput: {\n\t\tpath: __dirname,\n\t},\n\tmodule: {\n\t\trules: webpackConfig.rules,\n\t},\n\tplugins: webpackConfig.plugins,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing TextToolbarButton in WooCommerce Cart Block - JSX\nDESCRIPTION: Example showing implementation of TextToolbarButton component within BlockControls for toggling between full and empty cart modes. The component accepts onClick handlers and isToggled props to manage button state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/editor-components/text-toolbar-button/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<BlockControls>\n\t<Toolbar>\n\t\t<TextToolbarButton\n\t\t\tonClick={ toggleFullCartMode }\n\t\t\tisToggled={ isFullCartMode }\n\t\t>\n\t\t\t{ __( 'Full Cart', 'woocommerce' ) }\n\t\t</TextToolbarButton>\n\t\t<TextToolbarButton\n\t\t\tonClick={ toggleFullCartMode }\n\t\t\tisToggled={ ! isFullCartMode }\n\t\t>\n\t\t\t{ __( 'Empty Cart', 'woocommerce' ) }\n\t\t</TextToolbarButton>\n\t</Toolbar>\n</BlockControls>\n```\n\n----------------------------------------\n\nTITLE: Cart Utilities Page Object Model\nDESCRIPTION: Example implementation of a Page Object Model pattern for cart-related test utilities\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test as base, expect, Editor } from '@woocommerce/e2e-utils';\n\nclass CartUtils {\n\teditor: Editor;\n\n\tconstructor( { editor }: { editor: Editor } ) {\n\t\tthis.editor = editor;\n\t}\n\n\tasync addClothes( list ) {\n\t\t// Add clothes from the list.\n\t}\n\n\tasync addBooks( list ) {\n\t\t// Add books from the list.\n\t}\n}\n\nconst test = base.extend< { cartUtils: CartUtils } >( {\n\tcartUtils: async ( { editor }, use ) => {\n\t\tawait use( new CartUtils( { editor } ) );\n\t},\n} );\n\ntest( 'Add products', async ( { admin, cartUtils } ) => {\n\tawait admin.createNewPost();\n\tawait cartUtils.addClotes( [ 'Shirt', 'Cap', 'Pants' ] );\n\tawait cartUtils.addBooks( [ 'Cooking with Woo' ] );\n\n\tawait page.goto( '/cart' );\n\n\tawait expect( this.page.getByLabel( 'Shirt' ) ).toBeVisible();\n\t// etc.\n} );\n```\n\n----------------------------------------\n\nTITLE: Basic Cart Item Price Formatting\nDESCRIPTION: Simple implementation of cartItemPrice filter to modify the price display format. Adds 'for all items' text after the price placeholder.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/cart-line-items.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyCartItemPrice = ( defaultValue, extensions, args, validation ) => {\n\tconst isCartContext = args?.context === 'cart';\n\n\tif ( ! isCartContext ) {\n\t\treturn defaultValue;\n\t}\n\n\treturn '&lt;price/&gt; for all items';\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tcartItemPrice: modifyCartItemPrice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Initializing WooCommerce Core E2E Test Environment via Shell Script\nDESCRIPTION: Bash script located at `pluigns/woocommerce/tests/e2e/docker/initialize.sh` for project-specific initialization in WooCommerce Core E2E tests. It utilizes WP-CLI to activate WooCommerce, install/activate a theme, create a customer user, and install necessary plugins (Basic Auth for API testing, WP Mail Logging for email testing).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\necho \"Initializing WooCommerce E2E\"\n\nwp plugin activate woocommerce\nwp theme install twentynineteen --activate\nwp user create customer customer@woocommercecoree2etestsuite.com \\\n\t--user_pass=password \\\n\t--role=subscriber \\\n\t--first_name='Jane' \\\n\t--last_name='Smith' \\\n\t--path=/var/www/html\n\n# we cannot create API keys for the API, so we using basic auth, this plugin allows that.\nwp plugin install https://github.com/WP-API/Basic-Auth/archive/master.zip --activate\n\n# install the WP Mail Logging plugin to test emails\nwp plugin install wp-mail-logging --activate\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Admin Extension Examples\nDESCRIPTION: Command to build a specific WooCommerce Admin extension example using pnpm. The example name is passed through the WC_EXT environment variable.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/examples/extensions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nWC_EXT=<example> pnpm --filter=@woocommerce/admin-library example\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Requirement - WooCommerce 7.8\nDESCRIPTION: Specifies the WooCommerce version requirement for testing filter blocks markup\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1024.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nImportant: test needs to be conducted using WooCommerce 7.8\n```\n\n----------------------------------------\n\nTITLE: Configuring WordPress Post Tables with Compatibility Mode in WooCommerce\nDESCRIPTION: This snippet shows the configuration for using WordPress Post Tables with Compatibility Mode enabled in WooCommerce. This setting syncs order data between posts/postmeta and WooCommerce order tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n![Select WordPress Post Tables and Enable compatibility mode](https://woocommerce.com/wp-content/uploads/2023/10/image-20.png?w=650)\n```\n\n----------------------------------------\n\nTITLE: Enabling XState Visualizer in Browser Console (JavaScript)\nDESCRIPTION: This code snippet enables the XState visualizer by setting a local storage item. After running this command, a new tab with the XState visualizer should appear for pages that have state machines.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/xstate.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlocalStorage.setItem('xstate_inspect', 'true');\n```\n\n----------------------------------------\n\nTITLE: Clicking Tab in JavaScript\nDESCRIPTION: This function clicks on a tab in the WooCommerce Settings page. It takes the tab name as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nclickTab(tabName)\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product Brand by Slug with curl (Shell)\nDESCRIPTION: This curl command retrieves a single product brand using its slug (e.g., 'adidas') via the WooCommerce API. It returns a JSON object with detailed information about the specified brand. Ensure the slug is valid and corresponds to an existing brand.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/products/brands/adidas\"\n```\n\n----------------------------------------\n\nTITLE: Cache Purging on Template Changes in PHP\nDESCRIPTION: Shows how to implement cache purging when coming soon templates are modified using WordPress post hooks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/integrating-coming-soon-mode.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'save_post_wp_template', 'purge_cache_on_template_change', 10, 3 );\nadd_action( 'save_post_wp_template_part', 'purge_cache_on_template_change', 10, 3 );\nadd_action( 'save_post_wp_global_styles', 'purge_cache_on_template_change', 10, 3 );\n\nfunction purge_cache_on_template_change( $post_id, $post, $update ) {\n    // Check if the template is associated with the coming soon mode.\n    if ( 'coming-soon' === $post->post_name ) {\n        // Implement your logic to clear the server cache.\n        if ( function_exists( 'your_cache_clear_function' ) ) {\n            your_cache_clear_function();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Product Brand by Slug (HTTP)\nDESCRIPTION: This HTTP request provides access to a specific product brand using its slug instead of ID, enabling flexible reference by human-readable brand identifiers. The endpoint responds with brand details as JSON. The WooCommerce API must be configured to accept slugs as valid identifiers.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-brands.md#2025-04-23_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /products/brands/:slug\n```\n\n----------------------------------------\n\nTITLE: Defining WooCommerce Account Endpoints\nDESCRIPTION: Lists the URL endpoints used for account-related functionality in WooCommerce, including order management, downloads, account editing, and authentication. These endpoints are appended to the base my-account page URL.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/getting-started/woocommerce-endpoints.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   Orders - `/orders/`\n-   View order - `/view-order/{ORDER_ID}`\n-   Downloads - `/downloads/`\n-   Edit account (and change password) - `/edit-account/`\n-   Addresses - `/edit-address/`\n-   Payment methods - `/payment-methods/`\n-   Lost password - `/lost-password/`\n-   Logout - `/customer-logout/`\n```\n\n----------------------------------------\n\nTITLE: Using _x() Translation Function with Context\nDESCRIPTION: Shows how to use the _x() function to retrieve translated strings with gettext context. Context helps translators understand how the string is used, particularly important for words with multiple meanings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-JS-TS-files.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Schema\nconst translation = _x( string text, string context, string domain = 'default' );\n\n// Example\nconst { _x } = window.wp.i18n;\n\nconst translation = _x( 'Draft', 'Order status', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Product Tags Response Format\nDESCRIPTION: Example JSON response showing the structure of product tags data. Each tag contains an ID, name, slug, description, parent ID, and count of products using the tag.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/product-tags.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n\t{\n\t\t\"id\": 1,\n\t\t\"name\": \"Test Tag\",\n\t\t\"slug\": \"test-tag\",\n\t\t\"description\": \"\",\n\t\t\"parent\": 0,\n\t\t\"count\": 1\n\t},\n\t{\n\t\t\"id\": 2,\n\t\t\"name\": \"Another Tag\",\n\t\t\"slug\": \"another-tag\",\n\t\t\"description\": \"\",\n\t\t\"parent\": 0,\n\t\t\"count\": 1\n\t}\n]\n```\n\n----------------------------------------\n\nTITLE: Installing WordPress Core via WP-CLI for E2E Tests\nDESCRIPTION: Example WP-CLI command demonstrating the core WordPress installation process used during the built-in initialization for WooCommerce Core E2E testing. It configures the WordPress site with a specific URL, admin user credentials, and email address, establishing the base environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-environment/builtin.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nwp core install --url=http://localhost:8084 --admin_user=admin --admin_password=password --admin_email=wooadmin@example.org\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Accordion Header Block Configuration\nDESCRIPTION: Block configuration for the Accordion Header component that displays the clickable header of each accordion item. Supports typography, color, and spacing customization.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/accordion/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n-   **Name:** woocommerce/accordion-header\n-   **Experimental:** true\n-   **Category:** design\n-   **Parent:** woocommerce/accordion-item\n-   **Supports:** anchor, border, color (background, gradient, text), interactivity, layout, shadow, spacing (margin, padding), typography (fontSize, textAlign)\n-   **Attributes:** icon, iconPosition, level, levelOptions, openByDefault, textAlignment, title\n```\n\n----------------------------------------\n\nTITLE: Custom Cart Item Callback for WooCommerce Store API (PHP)\nDESCRIPTION: This snippet shows an example of a custom cart item callback function that can be used with the WooCommerce Store API. It checks if the product is a custom type and returns custom data accordingly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-data.md#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction my_cart_item_callback( $cart_item ) {\n$product = $cart_item['data'];\n\tif ( is_my_custom_product_type( $product ) ) {\n\t\t$custom_value = get_custom_value( $product );\n\t\treturn [\n\t\t\t'custom-key' => $custom_value;\n\t\t]\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Pending Delete Status for Cart Item in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isItemPendingDelete selector to check if a cart item is pending deletion.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst isItemPendingDelete = store.isItemPendingDelete( cartItemKey );\n```\n\n----------------------------------------\n\nTITLE: Counting Orders Pending Synchronization\nDESCRIPTION: Displays the number of orders that need to be synchronized between the traditional posts table and HPOS tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos count_unmigrated\nThere are 651 orders to be synced.\n```\n\n----------------------------------------\n\nTITLE: Getting Selector Attribute in JavaScript\nDESCRIPTION: This function retrieves the desired HTML attribute from a selector. It takes the selector and attribute name as parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetSelectorAttribute(selector, attribute)\n```\n\n----------------------------------------\n\nTITLE: Applying Coupon in JavaScript\nDESCRIPTION: This helper method applies a coupon in the cart or checkout. It takes the coupon name as a parameter.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\napplyCoupon(couponName)\n```\n\n----------------------------------------\n\nTITLE: Using the Deprecated `__experimental_woocommerce_blocks_checkout_update_order_from_request` PHP Hook\nDESCRIPTION: A deprecated PHP action hook (Deprecated in PR 5015) prefixed with `__experimental`. It provided a way for extensions to update the order object based on data present in the incoming request during checkout.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Deprecated Hook name:\n__experimental_woocommerce_blocks_checkout_update_order_from_request\n```\n\n----------------------------------------\n\nTITLE: Playwright Test Plugin Activation\nDESCRIPTION: TypeScript example showing how to activate a custom plugin in E2E tests\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test, expect } from '@woocommerce/e2e-utils';\n\ntest( 'My fancy plugin', async ( { page, requestUtils } ) => {\n\tawait requestUtils.activatePlugin(\n\t\t'woocommerce-blocks-test-my-fancy-plugin'\n\t);\n\n\tawait page.goto( '/shop' );\n\n\tawait expect( page.getByText( 'Howdy!' ) ).toBeVisible();\n} );\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Legacy Assets\nDESCRIPTION: Commands to build and lint the classic CSS and jQuery code for WooCommerce located in the plugins/woocommerce/client/legacy directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Build the assets.\npnpm --filter='@woocommerce/plugin-woocommerce' build:classic-assets\n# Lint the assets.\npnpm --filter='@woocommerce/classic-assets' lint\n```\n\n----------------------------------------\n\nTITLE: Adding Endpoint Identifier in ExtendSchema Class\nDESCRIPTION: Shows how to register a new endpoint identifier in the ExtendSchema class by adding it to the $endpoints array. This is required to explicitly enable endpoint exposure.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/rest-api/extend-rest-api-new-endpoint.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\StoreApi\\Schemas\\BillingAddressSchema;\n\nprivate $endpoints = [ /* other identifiers */, BillingAddressSchema::IDENTIFIER ];\n```\n\n----------------------------------------\n\nTITLE: Implementing WooCommerce Product Collapsible Block in PHP\nDESCRIPTION: This code snippet demonstrates how to add a WooCommerce product collapsible block to a product inventory section. It sets the toggle text, initial collapsed state, and persist render option. The block is then ready to have child blocks added to it.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/blocks/generic/collapsible/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$product_inventory_advanced = $product_inventory_section->add_block(\n  [\n    'id'         => 'product-inventory-advanced',\n    'blockName'  => 'woocommerce/product-collapsible',\n    'attributes' => [\n      'toggleText'       => __( 'Advanced', 'woocommerce' ),\n      'initialCollapsed' => true,\n      'persistRender'    => true,\n    ],\n  ]\n);\n$product_inventory_advanced->add_block(\n  [\n    // add block information here\n  ]\n)\n```\n\n----------------------------------------\n\nTITLE: Event Utility Imports\nDESCRIPTION: Shows how to import various utility functions for working with the event system.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/block-client-apis/checkout/checkout-flow-and-events.md#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n\tisSuccessResponse,\n\tisErrorResponse,\n\tisFailResponse,\n\tnoticeContexts,\n\tresponseTypes,\n\tshouldRetry,\n} from '@woocommerce/base-context';\n};\n```\n\n----------------------------------------\n\nTITLE: Using esc_attr_e() Function to Display Attribute-Safe Translation in PHP\nDESCRIPTION: The esc_attr_e() function displays the translated text that has been escaped for safe use in HTML attributes. This combines translation, attribute escaping, and direct output.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// Schema\nesc_attr_e( string $text, string $domain = 'default' );\n\n// Example\nesc_attr_e( 'Search', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopper Email Flow Table in Markdown\nDESCRIPTION: This code snippet shows a markdown table listing critical flows for shoppers related to email communications, including account and order detail emails.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/core-critical-flows.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| User Type | Flow Area | Flow Name                             | Test File                               |\n| --------- | --------- | ------------------------------------- | --------------------------------------- |\n| Shopper   | Email     | Customer Account Emails Received      | shopper/account-email-receiving.spec.js |\n| Shopper   | Email     | Customer Order Detail Emails Received | shopper/order-email-receiving.spec.js   |\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Dependencies on Ubuntu for WordPress Development\nDESCRIPTION: Commands for installing the required PHP extensions on Ubuntu systems to properly run WordPress and WooCommerce development environments. This includes extensions like bcmath, curl, imagick, and others required by WordPress.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/DEVELOPMENT.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\nsudo apt install php-bcmath \\\n                 php-curl \\\n                 php-imagick \\\n                 php-intl \\\n                 php-json \\\n                 php-mbstring \\\n                 php-mysql \\\n                 php-xml \\\n                 php-zip\n```\n\n----------------------------------------\n\nTITLE: Import Path Alias Example in JavaScript\nDESCRIPTION: Demonstrates the use of WooCommerce's import aliases to simplify import paths and make them more maintainable. Shows the difference between using a relative path versus an aliased import.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/javascript-build-system.md#2025-04-23_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n-import { useStoreCartCoupons } from '../../../../base/hooks';\n+import { useStoreCartCoupons } from '@woocommerce/base-context/hooks';\n```\n\n----------------------------------------\n\nTITLE: Using esc_html_e() Function to Display HTML-Safe Translation in PHP\nDESCRIPTION: The esc_html_e() function displays the translated text that has been escaped for safe use in HTML output. This function combines translation with HTML escaping and direct output.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/translations/translations-in-PHP-files.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Schema\nesc_html_e( string $text, string $domain = 'default' );\n\n// Example\nesc_html_e( 'Select a category', 'woo-gutenberg-products-block' );\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Place Order Button Label in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the __experimentalRegisterCheckoutFilters function to customize the 'Place Order' button label in the WooCommerce Checkout block.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/920.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst label = () => 'Pay now';\nconst { __experimentalRegisterCheckoutFilters } = window.wc.blocksCheckout;\n__experimentalRegisterCheckoutFilters( 'custom-place-order-button-label', {\n\tplaceOrderButtonLabel: label,\n} );\n```\n\n----------------------------------------\n\nTITLE: Rendering a Card Component in WooCommerce with JSX\nDESCRIPTION: This snippet demonstrates how to use the Card component in WooCommerce. It shows how to set the title, description, and className props, as well as how to include content within the Card.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/client/marketing/coupons/card/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Card\n  title=\"Title\"\n  description=\"Description goes here.\"\n  className=\"className\"\n>\n  <div>\n    Any card content goes here.\n  </div>\n</Card>\n```\n\n----------------------------------------\n\nTITLE: Generic Hook Content Render Action\nDESCRIPTION: Generic action hook for rendering template content. Used in AbstractTemplateCompatibility for dynamic hook rendering.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/actions.md#2025-04-23_snippet_27\n\nLANGUAGE: php\nCODE:\n```\ndo_action( '{$hook}' )\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Naming Example in WooCommerce\nDESCRIPTION: Example of WooCommerce JavaScript function following the wc prefix convention using camelCase.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/naming-conventions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nwcSettings()\n```\n\n----------------------------------------\n\nTITLE: Loading Packages in WooCommerce Core (PHP)\nDESCRIPTION: This code snippet shows how to add a new package to the list of packages in the src/Packages.php file. It demonstrates the proper way to include the package's namespace and class.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/packages/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nprotected static $packages = [\n\t\t'woocommerce-blocks'          => '\\\\Automattic\\\\WooCommerce\\\\Blocks\\\\Package',\n    'woocommerce-rest-api'        => '\\\\Automattic\\\\WooCommerce\\\\RestApi\\\\Package',\n    'woocommerce-example-package' => '\\\\Automattic\\\\WooCommerce\\\\ExamplePackage\\\\Package',\n];\n```\n\n----------------------------------------\n\nTITLE: Importing Store Notices Store from WooCommerce Block Data\nDESCRIPTION: Shows how to import the storeNoticesStore StoreDescriptor to use the store notices functionality. Two methods are provided based on how @woocommerce/block-data is registered.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/store-notices.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storeNoticesStore } from '@woocommerce/block-data';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { storeNoticesStore } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Checking Payment Method Status and Results in WooCommerce\nDESCRIPTION: Collection of selectors for checking payment method initialization status, payment results, and deprecated status checks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\n\tmessage: string;\n\tpaymentStatus: 'success' | 'failure' | 'pending' | 'error' | 'not set';\n\tpaymentDetails: Record< string, string > | Record< string, never >;\n\tredirectUrl: string;\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst paymentResult = store.getPaymentResult();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst currentStatus = store.getCurrentStatus();\n```\n\n----------------------------------------\n\nTITLE: Adding Packages to WooCommerce Lib Directory\nDESCRIPTION: Steps to add a new package to the WooCommerce lib directory for conflict avoidance. This process involves modifying the composer.json file and running a build script.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/lib/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1. Add package to `require-dev` section of `composer.json`\n2. Add package slug to `extra/mozart/packages` section of `composer.json`\n3. Run `composer run-script build-lib` from the root directory (You should now see the package in `packages/VendorName/PackageName` or `classes`)\n```\n\n----------------------------------------\n\nTITLE: Handling Email Address Change in WooCommerce Blocks Checkout (JavaScript)\nDESCRIPTION: This snippet shows how to use the 'experimental__woocommerce_blocks-checkout-set-email-address' action hook to log when the email address is changed on the checkout page. This hook does not receive any arguments.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nwp.hooks.addAction(\n\t'experimental__woocommerce_blocks-checkout-set-email-address',\n\t'plugin/namespace',\n\t() => {\n\t\tconsole.log( 'The email address was changed.' );\n\t}\n);\n```\n\n----------------------------------------\n\nTITLE: Using the `__experimentalDiscountsMeta` SlotFill Slot (JavaScript/React)\nDESCRIPTION: An experimental SlotFill slot named `__experimentalDiscountsMeta`. This allows extensions to inject React components or other content related to discounts within the Cart and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Slot Name:\n__experimentalDiscountsMeta\n```\n\n----------------------------------------\n\nTITLE: Defining dot_notation Transformer (PHP)\nDESCRIPTION: Shows how to define the dot_notation transformer in PHP. This transformer uses dot notation to select a value in an array, allowing access to nested array elements.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"dot_notation\",\n        \"arguments\": {\n            \"path\": \"name\"\n        }\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for E2E Tests\nDESCRIPTION: Sample environment configuration file (.env) showing required variables for running tests against a custom environment. Includes base URL and credential settings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBASE_URL='https://www.example.com'\nADMIN_USER='admin.username'\nADMIN_PASSWORD='admin.password'\nCUSTOMER_USER='customer.username'\nCUSTOMER_PASSWORD='customer.password'\n```\n\n----------------------------------------\n\nTITLE: Customizing JavaScript Error Endpoint with WordPress Filter\nDESCRIPTION: Shows how to use the 'woocommerce_remote_logging_js_error_endpoint' WordPress filter to modify the URL of the remote logging API endpoint specifically for JavaScript errors.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/remote-logging/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { addFilter } from '@wordpress/hooks';\n\naddFilter(\n  'woocommerce_remote_logging_js_error_endpoint',\n  'my-plugin',\n  (endpoint) => 'https://my-custom-endpoint.com/js-error-log'\n);\n```\n\n----------------------------------------\n\nTITLE: Moving and Symlinking WooCommerce Plugin Directory in Shell\nDESCRIPTION: These shell commands first move the WooCommerce plugin directory from `wp-content/plugins` to the user's Desktop and then create a symbolic link from the original location pointing to the new location on the Desktop. This setup is part of the testing steps to reproduce and verify a fix for a page load problem (PR #6260) occurring when WooCommerce is installed via a symlink, ensuring assets are loaded correctly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/750.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmv wp-content/plugins/woocommerce ~/Desktop/woocommerce\nln -s ~/Desktop/woocommerce wp-content/plugins/woocommerce\n```\n\n----------------------------------------\n\nTITLE: Legacy Changelog Link in Markdown\nDESCRIPTION: This snippet provides a link to legacy changelogs for previous versions using Markdown syntax.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n[See legacy changelogs for previous versions](https://github.com/woocommerce/woocommerce/blob/68581955106947918d2b17607a01bdfdf22288a9/packages/js/tracks/CHANGELOG.md)\n```\n\n----------------------------------------\n\nTITLE: Feature Flag CSS Class Example\nDESCRIPTION: Demonstrates how feature flags are reflected in body classes for CSS targeting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/feature-flags.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body class=\"wp-admin woocommerce-admin-page woocommerce-feature-enabled-activity-panels  ....\">\n```\n\n----------------------------------------\n\nTITLE: Local Pickup Tax Filter\nDESCRIPTION: Filter for applying base tax rates for local pickup shipping method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/filters.md#2025-04-23_snippet_13\n\nLANGUAGE: php\nCODE:\n```\napply_filters( 'woocommerce_apply_base_tax_for_local_pickup' )\n```\n\n----------------------------------------\n\nTITLE: Importing Jest Globals for WooCommerce E2E Tests - JavaScript\nDESCRIPTION: This snippet shows how to import jest globals like it, describe, and beforeAll explicitly from the @jest/globals package for compatibility outside the native jest environment. This is required for running or packaging WooCommerce E2E tests in external contexts where jest globals are not automatically available. Ensure @jest/globals is installed as a project dependency before use.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-core-tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst {\\n\\tit,\\n\\tdescribe,\\n\\tbeforeAll,\\n} = require( '@jest/globals' );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Method Data in WooCommerce\nDESCRIPTION: Shows how to get current payment method data from the payment store. The data structure varies based on the active payment method.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/payment.md#2025-04-23_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( paymentStore );\nconst paymentMethodData = store.getPaymentMethodData();\n```\n\n----------------------------------------\n\nTITLE: Executing the `npm run build:deploy` Command with Feature Flag (Shell)\nDESCRIPTION: Describes the usage of the `npm run build:deploy` command which incorporates a feature plugin flag. This flag is likely controlled via an environment variable as indicated by the linked `package.json` snippet.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/feature-flags-and-experimental-interfaces.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring Block JSON for Checkout Field Integration\nDESCRIPTION: JSON configuration for adding a custom field block to the WooCommerce Checkout Block. The configuration specifies the parent block and lock attributes to control block behavior.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/rest-api/extend-rest-api-add-custom-fields.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"parent\": [ \"woocommerce/checkout-shipping-methods-block\" ],\n\"attributes\": {\n\t\"lock\": {\n\t\t\"type\": \"object\",\n\t\t\"default\": {\n\t\t\t\"remove\": true,\n\t\t\t\"move\": true\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Block Editor Field in React\nDESCRIPTION: React implementation of the same product form field using JSX syntax and WordPress block editor components.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/product-editor-development/how-to-guides/custom-field-tutorial.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { registerBlockType } from '@wordpress/blocks';\n\nfunction Edit() {\n\treturn <p>Hello World (from the editor).</p>;\n}\n\nregisterBlockType( 'tutorial/new-product-form-field', {\n\ttitle: 'Product form field',\n\tattributes: {},\n\tedit: Edit,\n} );\n```\n\n----------------------------------------\n\nTITLE: Importing registerPaymentMethodExtensionCallbacks using wc global in JavaScript\nDESCRIPTION: Shows how to import the registerPaymentMethodExtensionCallbacks function from the global wc object when aliased imports are not available.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/filtering-payment-methods.md#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst { registerPaymentMethodExtensionCallbacks } = window.wc.wcBlocksRegistry;\n```\n\n----------------------------------------\n\nTITLE: Retrieving WooCommerce Admin Install Timestamp with SQL\nDESCRIPTION: SQL query to retrieve the WooCommerce Admin installation timestamp from the WordPress options table, which is used in various WooCommerce Admin functions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM wp_options WHERE option_name = 'woocommerce_admin_install_timestamp'\n```\n\n----------------------------------------\n\nTITLE: Importing QUERY_STATE_STORE_KEY in JavaScript\nDESCRIPTION: This snippet demonstrates how to import the QUERY_STATE_STORE_KEY from the @woocommerce/block-data module. It assumes that the module is registered as an external pointing to wc.wcBlocksData.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/query-state.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { QUERY_STATE_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce Extension Template with NPX\nDESCRIPTION: Command to create a new WooCommerce extension skeleton using the WordPress create-block tool.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx @wordpress/create-block -t @woocommerce/create-woo-extension woo-product-fields\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Header and Link\nDESCRIPTION: Basic markdown structure showing the changelog title and a link to historical changelog entries in the readme.txt file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce-beta-tester/NEXT_CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n---\n\n[See changelogs for previous versions](https://raw.githubusercontent.com/woocommerce/woocommerce/trunk/plugins/woocommerce-beta-tester/readme.txt)\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Order Range with `wc hpos cleanup` (Plaintext)\nDESCRIPTION: Example of using `wp wc hpos cleanup` to remove legacy data for a specific range of order IDs (90000 to 100000). The command outputs the number of orders being processed and shows a progress bar.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/high-performance-order-storage/cli-tools.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n$ wp wc hpos cleanup 90000-100000\nStarting cleanup for 865 orders...\nHPOS cleanup  100% [=====================================================================================================================] 0:01 / 0:12\nSuccess: Cleanup completed for 865 orders.\n```\n\n----------------------------------------\n\nTITLE: Using is_shop Conditional Function in PHP\nDESCRIPTION: Returns true when viewing the product type archive (shop page).\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/useful-functions.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nis_shop()\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Input and Output in PHP for WooCommerce\nDESCRIPTION: Demonstrates how to add filters for both the function arguments and return value in a WooCommerce global rendering function. This allows for extensive customization but should be used sparingly.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/adding-actions-and-filters.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction woocommerce_format_sale_price( ...$args ): string {\n    /* Prep to fill in any missing $args values... */\n    $args = (array) apply_filters( 'woocommerce_format_sale_price_args', $args );\n    /* ...Actual work to determine the $price string... */\n    return (string) apply_filters( 'woocommerce_format_sale_price', $price, $args );\n}\n```\n\n----------------------------------------\n\nTITLE: Installing wp-env for WooCommerce Test Environment Setup\nDESCRIPTION: Command to install wp-env globally using npm. wp-env is used to set up the test environment in Docker for WooCommerce development.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/blueprint/development.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @wordpress/env\n```\n\n----------------------------------------\n\nTITLE: Registering an Observer with a Basic Event Emitter in React\nDESCRIPTION: Demonstrates how to register an observer function with a generic event emitter and obtain the unsubscribe function for cleanup.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst unsubscribe = emitter( myCallback );\n```\n\n----------------------------------------\n\nTITLE: Saving Product Page Changes in JavaScript\nDESCRIPTION: This function saves the current product page. It's used after making changes to a product in the admin panel.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-utils/README.md#2025-04-23_snippet_45\n\nLANGUAGE: JavaScript\nCODE:\n```\nproductPageSaveChanges()\n```\n\n----------------------------------------\n\nTITLE: Importing Collections Store Key in JavaScript\nDESCRIPTION: Demonstrates how to import the COLLECTIONS_STORE_KEY from the @woocommerce/block-data package for use in modules referencing the Collections Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/collections.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { COLLECTIONS_STORE_KEY } = window.wc.wcBlocksData;\n```\n\n----------------------------------------\n\nTITLE: Saving Settings for Payment Gateways in WooCommerce\nDESCRIPTION: Hook implementation for saving payment gateway settings. This connects the process_admin_options method to the appropriate WooCommerce update hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/extension-development/settings-api.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_action( 'woocommerce_update_options_payment_gateways', array( $this, 'process_admin_options' ) );\n```\n\n----------------------------------------\n\nTITLE: Importing Payment Method Registry from Window Object\nDESCRIPTION: Shows how to import the registerPaymentMethod function from the global WooCommerce blocks registry object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/payment-method-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerPaymentMethod } = window.wc.wcBlocksRegistry;\n```\n\n----------------------------------------\n\nTITLE: Displaying Chart Interval Options Table\nDESCRIPTION: Markdown table showing the available chart interval options based on selected date ranges in the WooCommerce Dashboard.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/woocommerce.com/analytics-dashboard.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Length of Date Range  | Interval Options  |\n|---|---|\n| One year or more | 'day', 'week', 'month', 'quarter', 'year' |\n| 90 days to 1 year | 'day', 'week', 'month', 'quarter' |\n| 1 month - 89 days | 'day', 'week', 'month' |\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Tax Rate Management\nDESCRIPTION: Commands for managing tax rates, including listing, creating, updating, and deleting tax rates with various parameters.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_60\n\nLANGUAGE: cli\nCODE:\n```\nwc tax list\nwc tax create --country=<value> --rate=<value>\nwc tax update [id] --rate=<value>\nwc tax delete [id]\n```\n\n----------------------------------------\n\nTITLE: Rendering Primary TotalsWrapper Example in Storybook\nDESCRIPTION: This JSX code renders the primary example of the TotalsWrapper component using Storybook's Primary component. It displays the main usage example of TotalsWrapper.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/packages/components/totals-wrapper/docs/docs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Primary />\n```\n\n----------------------------------------\n\nTITLE: Using Addition Arithmetic Operator\nDESCRIPTION: Example of the addition (+) operator, which returns the sum of two operands.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n1 + 2\n```\n\n----------------------------------------\n\nTITLE: Retrieving Registered Containers Using the getRegisteredContainers Selector\nDESCRIPTION: Example of using the getRegisteredContainers selector to retrieve an array of registered container contexts from the store state.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/store-notices.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { storeNoticesStore } from '@woocommerce/block-data';\n\nconst store = select( storeNoticesStore );\nconst registeredContainers = store.getRegisteredContainers();\n```\n\n----------------------------------------\n\nTITLE: Configuring WooCommerce Payments Dev Mode in PHP\nDESCRIPTION: Code snippet showing how to enable WooCommerce Payments dev mode by adding a constant definition to wp-config.php.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/contributing/common-issues.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ndefine( 'WCPAY_DEV_MODE', true );\n```\n\n----------------------------------------\n\nTITLE: Checkout API Hooks\nDESCRIPTION: Store API hooks available during checkout process for order processing and customer data management\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/hooks/hook-alternatives.md#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nwoocommerce_store_api_checkout_order_processed\nwoocommerce_store_api_checkout_update_customer_from_request\nwoocommerce_store_api_checkout_update_order_meta\n```\n\n----------------------------------------\n\nTITLE: Retrieving Product Review Details in WooCommerce CLI\nDESCRIPTION: Command for getting details of a specific product review by its ID and product_id, with options for formatting and field selection.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-commands.md#2025-04-23_snippet_43\n\nLANGUAGE: bash\nCODE:\n```\nwc product_review get <product_id> [id]\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Plugin for E2E Testing\nDESCRIPTION: Command to build the WooCommerce plugin for end-to-end testing. This step is necessary before running the tests.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/tests/e2e/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter='@woocommerce/plugin-woocommerce' watch:build\n```\n\n----------------------------------------\n\nTITLE: Running Basic WooCommerce Unit Tests\nDESCRIPTION: Commands for running WooCommerce unit tests, with options for using wp-env or direct execution.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce test:unit:env\n\n# or \n\npnpm --filter=@woocommerce/plugin-woocommerce test:unit  # if you are not using wp-env\n```\n\n----------------------------------------\n\nTITLE: Starting WooCommerce Test Environment with Composer\nDESCRIPTION: Composer command to start the wp-env test environment in Docker. This sets up WordPress with WooCommerce for testing.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/development.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run env:start\n```\n\n----------------------------------------\n\nTITLE: PHP Return Type Fix for Image Attachment Schema\nDESCRIPTION: Bug fix to ensure ImageAttachmentSchema response returns either null or an object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/readme.txt#2025-04-23_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nReturn null or object for ImageAttachmentSchema response\n```\n\n----------------------------------------\n\nTITLE: Making an Address Field Optional\nDESCRIPTION: Example of making the address_1 field optional by using the woocommerce_default_address_fields filter instead of woocommerce_checkout_fields.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/code-snippets/customising-checkout-fields.md#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Hook in\nadd_filter( 'woocommerce_default_address_fields' , 'custom_override_default_address_fields' );\n\n// Our hooked in function - $address_fields is passed via the filter!\nfunction custom_override_default_address_fields( $address_fields ) {\n    $address_fields['address_1']['required'] = false;\n\n    return $address_fields;\n}\n```\n\n----------------------------------------\n\nTITLE: WooCommerce Setup and Testing Checklist\nDESCRIPTION: A markdown checklist detailing the steps to test WooCommerce cart and checkout functionality, including setup instructions and validation steps for the complete purchase flow.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/cart-checkout/general-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-   [ ] Create pages with Cart and Checkout blocks.\n-   [ ] Set the continue to checkout link your Cart settings to the Checkout page you created.\n-   [ ] In Woocommerce -> Settings -> Advanced, set the new pages to your default Cart and Checkout.\n-   [ ] Add some products to your cart.\n-   [ ] Mix in a limited stock product or a coupon.\n-   [ ] Continue to checkout.\n-   [ ] You should be able to fix your info, if you have them saved, they will show up.\n-   [ ] Depending on what payment method you enabled (Credit Card, Check, Express payment), you can place the order.\n-   [ ] You should see an order received page.\n```\n\n----------------------------------------\n\nTITLE: Querying Order Currencies in MySQL\nDESCRIPTION: SQL query to retrieve order IDs, names, types, and currencies from WordPress database tables.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n    ID,\n    post_name,\n    post_type,\n    currency_postmeta.meta_value AS currency\nFROM `wp_posts`\nJOIN wp_postmeta currency_postmeta ON wp_posts.ID = currency_postmeta.post_id\nWHERE currency_postmeta.meta_key = '_order_currency'\nORDER BY wp_posts.post_date DESC\nLIMIT 3\n```\n\n----------------------------------------\n\nTITLE: Hiding Remove Coupon Notice in WooCommerce Checkout (TypeScript)\nDESCRIPTION: This basic example illustrates how to use the 'showRemoveCouponNotice' filter to hide the remove coupon notice in the WooCommerce checkout process. It always returns false, effectively disabling the notice.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/available-filters/coupons.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst { registerCheckoutFilters } = window.wc.blocksCheckout;\n\nconst modifyShowRemoveCouponNotice = ( defaultValue, extensions, args ) => {\n\treturn false;\n};\n\nregisterCheckoutFilters( 'example-extension', {\n\tshowRemoveCouponNotice: modifyShowRemoveCouponNotice,\n} );\n```\n\n----------------------------------------\n\nTITLE: Running Pull Request Utility Commands\nDESCRIPTION: Command to view all available pull request utility options and commands using pnpm package manager from the project root directory.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/tools/monorepo-utils/src/pull-requests/REAMDE.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm utils pull-request --help\n```\n\n----------------------------------------\n\nTITLE: Checking Shipping Rate Selection Status in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the isShippingRateBeingSelected selector to check if a shipping rate is currently being selected.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/cart.md#2025-04-23_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( cartStore );\nconst isShippingRateBeingSelected = store.isShippingRateBeingSelected();\n```\n\n----------------------------------------\n\nTITLE: Defining Global JavaScript Class\nDESCRIPTION: Example of defining a global JavaScript class. The class name is prefixed with WC and uses UpperCamelCase convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/naming-conventions.md#2025-04-23_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass WCOrdersTable {\n    // Class implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Plugin with PNPM\nDESCRIPTION: Command to build the WooCommerce plugin from repository root using PNPM\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/e2e-guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npnpm --filter='@woocommerce/plugin-woocommerce' watch:build\n```\n\n----------------------------------------\n\nTITLE: JavaScript Registration Example\nDESCRIPTION: Example demonstrating how to properly format JavaScript code blocks in documentation with explicit language definition.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/documentation-guidelines.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { registerExpressPaymentMethod } = window.wc.blocksRegistry;\n```\n\n----------------------------------------\n\nTITLE: Implementing Plugin Version Check Rule in JSON\nDESCRIPTION: This rule compares the installed version of a specified plugin to a required version using a comparison operator. It returns false if the plugin is not activated.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"plugin_version\",\n\t\"plugin\": \"jetpack\",\n\t\"version\": \"8.4.1\",\n\t\"operator\": \"=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Storybook Commands\nDESCRIPTION: Command for starting the Storybook development server locally on port 6006\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/components.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run storybook\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier with WordPress Config in JavaScript\nDESCRIPTION: Example configuration for setting up Prettier in a project using WordPress's preset configuration in a .prettierrc.js file.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/eslint-plugin/README.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = require(\"@wordpress/prettier-config\");\n```\n\n----------------------------------------\n\nTITLE: Stopping WooCommerce Test Environment with Composer\nDESCRIPTION: Composer command to stop the wp-env test environment in Docker after testing is complete.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/php/email-editor/development.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncomposer run env:stop\n```\n\n----------------------------------------\n\nTITLE: Setting WooCommerce Debug Constant in PHP\nDESCRIPTION: Defines a constant in wp-config.php to enable the rule evaluator debugging feature\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\ndefine('WC_ADMIN_DEBUG_RULE_EVALUATOR', true);\n```\n\n----------------------------------------\n\nTITLE: Defining prepare_url Transformer (PHP)\nDESCRIPTION: Shows how to define the prepare_url transformer in PHP. This transformer prepares a site URL by removing the protocol and the last slash.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/Transformers/README.md#2025-04-23_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n\"transformers\": [\n    {\n        \"use\": \"prepare_url\"\n    }\n],\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Requirement - WooCommerce 7.7\nDESCRIPTION: Specifies the WooCommerce version requirement for testing filter blocks translations\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1024.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nImportant: test needs to be conducted using WooCommerce 7.7\n```\n\n----------------------------------------\n\nTITLE: Cloning WooCommerce Blocks Repository\nDESCRIPTION: Git command to clone the WooCommerce Blocks repository to local environment\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/contributors/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/woocommerce/woocommerce-blocks.git\n```\n\n----------------------------------------\n\nTITLE: Importing BlockInterface in PHP\nDESCRIPTION: Demonstrates how to import the BlockInterface type definition for use in PHP code.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/BlockTemplates/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Automattic\\WooCommerce\\Admin\\BlockTemplates\\BlockInterface;\n```\n\n----------------------------------------\n\nTITLE: Order Note Output Table from WP-CLI in Bash\nDESCRIPTION: This is the tabular Bash-formatted output of the order_note get command, listing note ID, creation date, note content, and customer visibility status. Output is formatted for quick at-a-glance confirmation or can be parsed by CLI tools.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n+---------------+-----------------------+\\n| Field         | Value                 |\\n+---------------+-----------------------+\\n| id            | 286                   |\\n| date_created  | 2016-12-09T20:27:26   |\\n| note          | Great repeat customer |\\n| customer_note | true                  |\\n+---------------+-----------------------+\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon as Block Attribute in JSON\nDESCRIPTION: Defines the icon attribute in the block.json configuration file, specifying it as an object type that will store icon information.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-icon/README.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"attributes\": {\n\t\"icon\": {\n\t\t\"type\": \"object\"\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering onCheckoutValidation Observer via useCheckoutContext\nDESCRIPTION: Example of using the useCheckoutContext hook to register an observer for the onCheckoutValidation event in internal development.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/cart-and-checkout-blocks/checkout-payment-methods/checkout-flow-and-events.md#2025-04-23_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCheckoutContext } from '@woocommerce/base-contexts';\nimport { useEffect } from '@wordpress/element';\n\nconst Component = () => {\n\tconst { onCheckoutValidation } = useCheckoutContext();\n\tuseEffect( () => {\n\t\tconst unsubscribe = onCheckoutValidation( () => true );\n\t\treturn unsubscribe;\n\t}, [ onCheckoutValidation ] );\n\treturn null;\n};\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode\nDESCRIPTION: Commands for running tests in watch mode, which automatically re-runs tests when files change.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce test:unit:env:watch\n```\n\n----------------------------------------\n\nTITLE: Enabling WooCommerce Product Gallery Features\nDESCRIPTION: Code to enable zoom, lightbox, and slider features for the WooCommerce product gallery.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/classic-theme-developer-handbook.md#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nadd_theme_support( 'wc-product-gallery-zoom' );\nadd_theme_support( 'wc-product-gallery-lightbox' );\nadd_theme_support( 'wc-product-gallery-slider' );\n```\n\n----------------------------------------\n\nTITLE: Connecting WooCommerce Settings Page in PHP\nDESCRIPTION: Example of connecting the WooCommerce Settings General page using wc_admin_connect_page(). Shows how to set up multiple breadcrumb pieces and page navigation.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/page-controller.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nwc_admin_connect_page(\n\tarray(\n\t\t'id'        => 'woocommerce-settings',\n\t\t'screen_id' => 'woocommerce_page_wc-settings-general',\n\t\t'title'     => array(\n\t\t\t__( 'Settings', 'woocommerce' ),\n\t\t\t__( 'General', 'woocommerce' ),\n\t\t),\n\t\t'path'      => add_query_arg( 'page', 'wc-settings', 'admin.php' ),\n\t)\n);\n```\n\n----------------------------------------\n\nTITLE: Server-Side Feature Flag Check in PHP\nDESCRIPTION: Shows how to check feature flag status in PHP using the Features class and conditionally add WordPress actions.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/admin/docs/features/feature-flags.md#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ( \\Automattic\\WooCommerce\\Admin\\Features\\Features::is_enabled( 'activity-panels' ) ) {\n\tadd_action( 'admin_header', 'wc_admin_activity_panel' );\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up WordPress/WooCommerce Environment using WP-CLI in Bash\nDESCRIPTION: This Bash script uses WP-CLI commands to automate the setup of a WordPress instance for testing WooCommerce Blocks. It configures the database connection, installs WordPress core, activates the WooCommerce Blocks plugin, installs and activates a specific version of WooCommerce, installs the WordPress Importer, imports sample product data, and finally updates WooCommerce to the latest version. This sequence prepares a consistent environment for testing template behavior.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1066.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwp config create --dbname=wordpress --dbuser=wordpress --dbpass=wordpress --dbhost=db  --force\nwp core install --url=http://localhost --title='WP Staging' --admin_user=admin --admin_password=pass --admin_email=admin@wp.loc\nwp option set blog_public 0\nwp plugin activate woocommerce-blocks\nwp plugin install woocommerce --version=6.0.0\nwp plugin activate woocommerce\nwp plugin install wordpress-importer --activate\nwp import ./wp-content/plugins/woocommerce/sample-data/sample_products.xml --authors=skip\nwp plugin update woocommerce\n```\n\n----------------------------------------\n\nTITLE: Database Setup Docker Command\nDESCRIPTION: Docker command to create a temporary MySQL database for testing purposes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --rm --name woocommerce_test_db -p 3306:3306 -e MYSQL_ROOT_PASSWORD=woocommerce_test_password -d mysql:8.0.32\n```\n\n----------------------------------------\n\nTITLE: CSS Deprecated Classes Example\nDESCRIPTION: Example of deprecated class names and their new replacements. These classes will be supported until the next major version but should be updated to the new format.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/designers/theming/class-names-update-280.md#2025-04-23_snippet_1\n\nLANGUAGE: CSS\nCODE:\n```\n/* Deprecated classes */\nwc-block-error__company\nwc-block-error__address_1\n\n/* New classes */\nwc-block-components-error__content\nwc-block-components-error__image\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Function in /includes Directory\nDESCRIPTION: Example of defining a PHP function in the /includes directory. The function name is prefixed with wc_ and uses snake_case convention.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/quality-and-best-practices/naming-conventions.md#2025-04-23_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction wc_get_product() {\n    // Function implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Old DI Container via Constant (PHP)\nDESCRIPTION: Defines the `WOOCOMMERCE_USE_OLD_DI_CONTAINER` constant as `true`. This forces WooCommerce (versions 9.5 to < 10.0) to use the legacy dependency injection container based on PHP League's Container package, instead of the default custom container. This is intended as a temporary fallback for troubleshooting.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/README.md#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\ndefine('WOOCOMMERCE_USE_OLD_DI_CONTAINER', true);\n```\n\n----------------------------------------\n\nTITLE: Implementing Inspector Settings in WooCommerce Gutenberg Block\nDESCRIPTION: This code snippet demonstrates how to include settings in the sidebar (Inspector) of a Gutenberg block. It's taken from the Newest Products block example.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/assets/js/blocks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<InspectorControls key=\"inspector\">\n\t<PanelBody\n\t\ttitle={ __( 'Layout', 'woo-gutenberg-products-block' ) }\n\t\tinitialOpen={ true }\n\t>\n\t\t<GridLayoutControl\n\t\t\tcolumns={ columns }\n\t\t\trows={ rows }\n\t\t\tsetAttributes={ setAttributes }\n\t\t/>\n\t</PanelBody>\n</InspectorControls>\n```\n\n----------------------------------------\n\nTITLE: Getting an Order Note via WP-CLI in Bash\nDESCRIPTION: Query details about a specific order note attached to an order using WP-CLI and WooCommerce by providing both order and note IDs. Returns tabular output of key fields such as note content, date, and visibility to the customer. Useful for auditing or customer service logs.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc order_note get 355 286 --user=1\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Child Theme CSS Structure\nDESCRIPTION: Initial CSS configuration for setting up a WooCommerce child theme with basic theme metadata and parent theme reference.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/theme-development/set-up-a-child-theme.md#2025-04-23_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/*\nTheme Name: Child Theme\nVersion: 1.0\nDescription: Child theme for Woo.\nAuthor: Woo\nAuthor URI: https://woocommerce.com\nTemplate: themedir\n*/\n```\n\n----------------------------------------\n\nTITLE: Setting up wp-env for WordPress Development Environment\nDESCRIPTION: Command to install and configure wp-env for local WordPress development. This sets up the WordPress environment for building and testing the extension, using the correct Node version and adding a script to package.json.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/extend-cart-checkout-block/README.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnvm use && npm i -D @wordpress/env && npm set-script wp-env \"wp-env\"\n```\n\n----------------------------------------\n\nTITLE: Querying Cart Items via cURL - WooCommerce Store API - Shell\nDESCRIPTION: Demonstrates how to retrieve all cart items from a WooCommerce store using the cURL command line tool. This command sends a GET request to the /wp-json/wc/store/v1/cart/items endpoint on the example store. Requires access to the store's public API endpoint; authentication may be required for private store data.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/StoreApi/docs/cart-items.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"https://example-store.com/wp-json/wc/store/v1/cart/items\"\n```\n\n----------------------------------------\n\nTITLE: WSL Allure Server Output Example\nDESCRIPTION: Example console output when running the allure open command in Windows Subsystem for Linux (WSL), showing the server startup information and port number for manual access.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/e2e-pw/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nStarting web server...\n2022-12-09 18:52:01.323:INFO::main: Logging initialized @286ms to org.eclipse.jetty.util.log.StdErrLog\nCan not open browser because this capability is not supported on your platform. You can use the link below to open the report manually.\nServer started at <http://127.0.1.1:38917/>. Press <Ctrl+C> to exit\n```\n\n----------------------------------------\n\nTITLE: Using String Literals in Expressions\nDESCRIPTION: Examples of string literals using single and double quotes, demonstrating how to include quoted text within strings.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/expression-evaluation/README.md#2025-04-23_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n'foo'\n\"foo\"\n'foo \"bar\"'\n\"foo 'bar'\"\n```\n\n----------------------------------------\n\nTITLE: Setting up WooCommerce Test Environment with pnpm\nDESCRIPTION: Command to set up the WooCommerce test environment using wp-env through pnpm package manager.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/tests/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm --filter=@woocommerce/plugin-woocommerce env:dev\n```\n\n----------------------------------------\n\nTITLE: Building WooCommerce Blocks Production Build using npm\nDESCRIPTION: This command uses npm to execute the `build:deploy` script defined in the project's `package.json`. It's used here to create a production-ready build of the WooCommerce blocks, which is necessary for testing the fix in PR #10701 as the issue was reproducible in the production environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1100.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run build:deploy\n```\n\n----------------------------------------\n\nTITLE: CSS Fix - Attribute Selection\nDESCRIPTION: Removes potentially unsupported CSS :has() selector for Firefox compatibility\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/changelog.md#2025-04-23_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n:has()\n```\n\n----------------------------------------\n\nTITLE: Clearing Transients Cache with WP-CLI in Bash\nDESCRIPTION: This bash command clears the WooCommerce product/shop transients cache by executing a predefined WooCommerce tool via WP-CLI. Requires WordPress with WooCommerce installed and access to WP-CLI. Parameters: --user=ID (the numeric user ID to run the command as, usually an admin). The command outputs a confirmation message upon success.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/wc-cli/wc-cli-examples.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wp wc tool run clear_transients --user=1\n```\n\n----------------------------------------\n\nTITLE: Running Composer Autoload Update\nDESCRIPTION: Command to regenerate the composer autoload classmap after adding new files.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/building-a-woo-store/adding-a-custom-field-to-variable-products.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncomposer dump-autoload -o\n```\n\n----------------------------------------\n\nTITLE: Verifying Shipping as Billing Address in Checkout Store using JavaScript\nDESCRIPTION: Illustrates how to check if the shopper wants to use their shipping address as the billing address using the getUseShippingAsBilling selector from the Checkout Store.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/third-party-developers/extensibility/data-store/checkout.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst store = select( checkoutStore );\nconst useShippingAsBilling = store.getUseShippingAsBilling();\n```\n\n----------------------------------------\n\nTITLE: Filter Hook Example for Add to Cart Redirect\nDESCRIPTION: Bug fix for adding missing parameters to the woocommerce_add_to_cart_redirect filter hook.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nwoocommerce_add_to_cart_redirect\n```\n\n----------------------------------------\n\nTITLE: Missing Direct Code Examples\nDESCRIPTION: This document contains testing instructions and visual examples but no direct code snippets to analyze. The content focuses on UI/UX testing procedures, pattern implementations, and feature validation steps.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/1020.md#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Configuring Stored State Check Rule in JSON\nDESCRIPTION: This rule allows access to stored state values for comparison. It's useful for checking calculated values that can't be reproduced using other rules.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/src/Admin/RemoteSpecs/RuleProcessors/README.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"stored_state\",\n\t\"index\": \"there_were_no_products\",\n\t\"operation\": \"=\",\n\t\"value\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Building the WooCommerce Block Extension - Bash\nDESCRIPTION: This snippet illustrates how to install the necessary npm dependencies and build the JavaScript code for the block project. 'npm install' retrieves all required Node modules specified in package.json, and 'npm run build' creates production-ready assets. Both commands should be run from the generated project directory. Inputs include the presence of package.json with defined scripts and dependencies. Outputs are installed node_modules and built/distributable JavaScript files. Prerequisites are Node.js and npm.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/create-product-editor-block/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd my-extension-name\nnpm install # Install dependencies\nnpm run build # Build the javascript\n```\n\n----------------------------------------\n\nTITLE: Rendering TableSummaryPlaceholder for Placeholder Summary Bar in React (JSX)\nDESCRIPTION: This snippet initializes TableSummaryPlaceholder, a component providing a visual placeholder where a summary row would appear while loading or when data is not yet available. No props are required. Dependencies: TableSummaryPlaceholder and React. Outputs a summary placeholder box for UI consistency.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/components/src/table/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<TableSummaryPlaceholder />\n```\n\n----------------------------------------\n\nTITLE: Installing WooCommerce E2E Core Tests via NPX (Shell)\nDESCRIPTION: This shell command uses `npx` (Node Package Execute) to run the `wc-e2e` command-line tool without needing a global installation. It executes the `install` command to add the `@woocommerce/e2e-core-tests` package, likely setting up the necessary files and configurations for running the core E2E tests within a WooCommerce development environment.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/e2e-core-tests/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx wc-e2e install @woocommerce/e2e-core-tests\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon in PHP Server Template\nDESCRIPTION: Shows how to configure an icon in PHP during template configuration for a product section block. Demonstrates three ways to define the icon source: as HTML SVG, as an absolute URL, or as a Dashicon icon-key.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/product-editor/src/components/block-icon/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\narray(\n\t'woocommerce/product-section', // Block name\n\tarray(\n\t\t// Block attributes\n\t\t'icon'\t=> array(\n\t\t\t// It's possible to pass a valid html string\n\t\t\t'src'\t=> '<svg ... />',\n\n\t\t\t// Or an absolute url\n\t\t\t'src'\t=> 'https://...',\n\t\t\t'alt'\t=> 'The alt name for the icon',\n\n\t\t\t// Or a Dashicon icon-key\n\t\t\t'src'\t=> 'default-block',\n\t\t),\n\t),\n\tarray(\n\t\t// Inner blocks\n\t),\n),\n```\n\n----------------------------------------\n\nTITLE: Querying Reserved Stock for a Product Excluding an Order (SQL)\nDESCRIPTION: This SQL query calculates the total reserved, non-expired stock for a specified product ID, excluding a particular order ID. The query joins the wc_reserved_stock table with WordPress posts to filter by draft or pending orders and non-expired reservations, then sums the reserved stock for the given product, omitting the specified order. No special dependencies are needed apart from a MySQL-compatible environment and the required tables. Input parameters include product ID (e.g., 99) and the order ID to exclude (e.g., 100). The output is a single integer (or decimal) value representing current reserved stock for that product.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/blocks/stock-reservation.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nSELECT COALESCE( SUM( stock_table.`stock_quantity` ), 0 )\\nFROM wp_wc_reserved_stock stock_table\\nLEFT JOIN wp_posts posts ON stock_table.`order_id` = posts.ID\\nWHERE posts.post_status IN ( 'wc-checkout-draft', 'wc-pending' )\\nAND stock_table.`expires` > NOW()\\nAND stock_table.`product_id` = 99\\nAND stock_table.`order_id` != 100\\n\n```\n\n----------------------------------------\n\nTITLE: Updating WooCommerce Report Currency Format via JS Filter and Query Parameter\nDESCRIPTION: This JavaScript function `updateReportCurrencies`, attached to the `woocommerce_admin_report_currency` filter, dynamically changes the currency formatting configuration used in reports. It checks if a `currency` query parameter is present in the report context and if a corresponding configuration exists in the predefined `currencies` object. If found, it returns the custom configuration; otherwise, it returns the original default `config`. It requires the `addFilter` function and the `currencies` object.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/docs/reporting/extending-woocommerce-admin-reports.md#2025-04-23_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nconst updateReportCurrencies = (config, { currency }) => {\n  if (currency && currencies[currency]) {\n    return currencies[currency];\n  }\n  return config;\n};\n\naddFilter(\n  \"woocommerce_admin_report_currency\",\n  \"dev-blog-example\",\n  updateReportCurrencies\n);\n```\n\n----------------------------------------\n\nTITLE: Dispatching Error Notice in WooCommerce Cart Context using WordPress Data API\nDESCRIPTION: This code snippet demonstrates how to create an error notice in the WooCommerce cart context using the WordPress Data API. It's used to test the persistence of notices in the Cart and Checkout blocks.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/plugins/woocommerce/client/blocks/docs/internal-developers/testing/releases/941.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nwp.data.dispatch( 'core/notices' ).createNotice( 'error', 'error from console', { context: 'wc/cart', } );\n```\n\n----------------------------------------\n\nTITLE: Version 1.2.0 Changelog Entry in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 1.2.0, including the release date and a list of changes.\nSOURCE: https://github.com/woocommerce/woocommerce/blob/trunk/packages/js/tracks/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## [1.2.0](https://www.npmjs.com/package/@woocommerce/tracks/v/1.2.0) - 2022-06-15 \n\n-   Minor - Add Jetpack Changelogger\n-   Minor - Convert package to Typescript.\n-   Patch - Standardize lint scripts: add lint:fix\n```"
  }
]