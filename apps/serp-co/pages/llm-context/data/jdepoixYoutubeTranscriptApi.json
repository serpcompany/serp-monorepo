[
  {
    "owner": "jdepoix",
    "repo": "youtube-transcript-api",
    "content": "TITLE: Fetching YouTube video transcript using Python\nDESCRIPTION: Basic example of how to use the YouTubeTranscriptApi class to fetch a transcript for a given video ID. This returns a FetchedTranscript object containing transcript snippets.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\nytt_api = YouTubeTranscriptApi()\nytt_api.fetch(video_id)\n```\n\n----------------------------------------\n\nTITLE: Comprehensive example of YouTube Transcript API usage\nDESCRIPTION: A detailed example showcasing various features of the YouTube Transcript API, including listing transcripts, accessing metadata, fetching transcript data, and translating transcripts.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom youtube_transcript_api import YouTubeTranscriptApi\n\nytt_api = YouTubeTranscriptApi()\n\n# retrieve the available transcripts\ntranscript_list = ytt_api.list('video_id')\n\n# iterate over all available transcripts\nfor transcript in transcript_list:\n\n    # the Transcript object provides metadata properties\n    print(\n        transcript.video_id,\n        transcript.language,\n        transcript.language_code,\n        # whether it has been manually created or generated by YouTube\n        transcript.is_generated,\n        # whether this transcript can be translated or not\n        transcript.is_translatable,\n        # a list of languages the transcript can be translated to\n        transcript.translation_languages,\n    )\n\n    # fetch the actual transcript data\n    print(transcript.fetch())\n\n    # translating the transcript will return another transcript object\n    print(transcript.translate('en').fetch())\n\n# you can also directly filter for the language you are looking for, using the transcript list\ntranscript = transcript_list.find_transcript(['de', 'en'])  \n\n# or just filter for manually created transcripts  \ntranscript = transcript_list.find_manually_created_transcript(['de', 'en'])\n```\n\n----------------------------------------\n\nTITLE: Fetching transcript in specific languages\nDESCRIPTION: Example of how to fetch a transcript in specific languages. The 'languages' parameter accepts a list of language codes in descending priority.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nYouTubeTranscriptApi().fetch(video_id, languages=['de', 'en'])\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of YouTube Transcript API CLI\nDESCRIPTION: Demonstrates the basic command to retrieve transcripts from YouTube videos by providing video IDs as parameters. The results are printed to the command line.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> ...\n```\n\n----------------------------------------\n\nTITLE: Listing available transcripts for a video\nDESCRIPTION: Example of how to list all available transcripts for a given video ID using the 'list' method of YouTubeTranscriptApi.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nytt_api = YouTubeTranscriptApi()\ntranscript_list = ytt_api.list(video_id)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Transcripts for YouTube Videos\nDESCRIPTION: Shows how to list all available transcript languages for a specific video using the --list-transcripts flag, which is useful to identify what languages are available before retrieval.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api --list-transcripts <first_video_id>\n```\n\n----------------------------------------\n\nTITLE: Specifying Preferred Languages for YouTube Transcripts\nDESCRIPTION: Shows how to specify preferred languages for transcript retrieval using the --languages flag, allowing users to prioritize which language transcripts to retrieve.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en\n```\n\n----------------------------------------\n\nTITLE: Translating a transcript\nDESCRIPTION: Example of how to translate a transcript to a different language using the 'translate' method of a Transcript object.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntranscript = transcript_list.find_transcript(['en'])\ntranslated_transcript = transcript.translate('de')\nprint(translated_transcript.fetch())\n```\n\n----------------------------------------\n\nTITLE: Translating YouTube Transcripts via CLI\nDESCRIPTION: Demonstrates how to translate transcripts from one language to another using the --translate flag, retrieving English transcripts and translating them to German in this example.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages en --translate de\n```\n\n----------------------------------------\n\nTITLE: Using JSONFormatter to Save Transcript as JSON File\nDESCRIPTION: This code demonstrates how to retrieve a YouTube transcript and save it as a JSON file. It fetches the transcript using YouTubeTranscriptApi, formats it using JSONFormatter, and writes the formatted string to a file.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# your_custom_script.py\n\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.formatters import JSONFormatter\n\nytt_api = YouTubeTranscriptApi()\ntranscript = ytt_api.fetch(video_id)\n\nformatter = JSONFormatter()\n\n# .format_transcript(transcript) turns the transcript into a JSON string.\njson_formatted = formatter.format_transcript(transcript)\n\n# Now we can write it out to a file.\nwith open('your_filename.json', 'w', encoding='utf-8') as json_file:\n    json_file.write(json_formatted)\n\n# Now should have a new JSON file that you can easily read back into Python.\n```\n\n----------------------------------------\n\nTITLE: Outputting YouTube Transcripts as JSON\nDESCRIPTION: Shows how to output the transcript results in JSON format, which is useful for writing to files or piping to other applications for further processing.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --format json > transcripts.json\n```\n\n----------------------------------------\n\nTITLE: Customizing HTTP Requests with YouTube Transcript API\nDESCRIPTION: This code shows how to overwrite request defaults by passing a custom requests.Session object to the YouTubeTranscriptApi constructor. It demonstrates setting custom headers, specifying SSL certificates, and sharing sessions between API instances.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom requests import Session\n\nhttp_client = Session()\n\n# set custom header\nhttp_client.headers.update({\"Accept-Encoding\": \"gzip, deflate\"})\n\n# set path to CA_BUNDLE file\nhttp_client.verify = \"/path/to/certfile\"\n\nytt_api = YouTubeTranscriptApi(http_client=http_client)\nytt_api.fetch(video_id)\n\n# share same Session between two instances of YouTubeTranscriptApi\nytt_api_2 = YouTubeTranscriptApi(http_client=http_client)\n# now shares cookies with ytt_api\nytt_api_2.fetch(video_id)\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Authentication for Age-Restricted Videos\nDESCRIPTION: This code demonstrates how to access age-restricted videos by providing cookies from a browser session. It initializes the YouTubeTranscriptApi with a path to a cookies.txt file, allowing authentication for accessing restricted content.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nytt_api = YouTubeTranscriptApi(cookie_path='/path/to/your/cookies.txt')\nytt_api.fetch(video_id)\n```\n\n----------------------------------------\n\nTITLE: Finding Generated Transcripts in Specific Languages with YouTube Transcript API\nDESCRIPTION: This code demonstrates how to retrieve automatically generated transcripts in specific languages. It uses the transcript_list.find_generated_transcript method with language code array to search for transcripts in German ('de') and English ('en') languages.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntranscript = transcript_list.find_generated_transcript(['de', 'en'])\n```\n\n----------------------------------------\n\nTITLE: Excluding Generated or Manual Subtitles in YouTube Transcripts\nDESCRIPTION: Demonstrates how to exclude automatically generated or manually created subtitles from the transcript results using the --exclude-generated or --exclude-manually-created flags.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --exclude-generated\nyoutube_transcript_api <first_video_id> <second_video_id> ... --languages de en --exclude-manually-created\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Formatter for YouTube Transcripts\nDESCRIPTION: This code example shows how to implement a custom formatter by inheriting from the Formatter base class. It demonstrates the required methods to format both single transcripts and lists of transcripts, returning strings in a custom format.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass MyCustomFormatter(Formatter):\n    def format_transcript(self, transcript: FetchedTranscript, **kwargs) -> str:\n        # Do your custom work in here, but return a string.\n        return 'your processed output data as a string.'\n\n    def format_transcripts(self, transcripts: List[FetchedTranscript], **kwargs) -> str:\n        # Do your custom work in here to format a list of transcripts, but return a string.\n        return 'your processed output data as a string.'\n```\n\n----------------------------------------\n\nTITLE: Preserving transcript formatting\nDESCRIPTION: Example of how to preserve HTML formatting elements in the transcript by setting the 'preserve_formatting' parameter to True.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nYouTubeTranscriptApi().fetch(video_ids, languages=['de', 'en'], preserve_formatting=True)\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Output with Indentation in YouTube Transcript API\nDESCRIPTION: This code shows how to pass extra keyword arguments to the JSONFormatter to control the output format. It demonstrates passing the indent parameter to make the JSON output more readable with proper indentation.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_15\n\nLANGUAGE: python\nCODE:\n```\njson_formatted = JSONFormatter().format_transcript(transcript, indent=2)\n```\n\n----------------------------------------\n\nTITLE: Importing Formatters from YouTube Transcript API\nDESCRIPTION: This code shows how to import various formatter classes from the youtube_transcript_api.formatters module. It includes the base Formatter class and specialized formatters for different output formats like JSON, text, WebVTT, and SRT.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# the base class to inherit from when creating your own formatter.\nfrom youtube_transcript_api.formatters import Formatter\n\n# some provided subclasses, each outputs a different string format.\nfrom youtube_transcript_api.formatters import JSONFormatter\nfrom youtube_transcript_api.formatters import TextFormatter\nfrom youtube_transcript_api.formatters import WebVTTFormatter\nfrom youtube_transcript_api.formatters import SRTFormatter\n```\n\n----------------------------------------\n\nTITLE: Using Cookie Authentication with YouTube Transcript API\nDESCRIPTION: Shows how to authenticate with YouTube using cookies from a text file, which can be useful for accessing restricted content or improving request success rates.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> --cookies /path/to/your/cookies.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Generic Proxy with YouTube Transcript API\nDESCRIPTION: This code demonstrates how to set up a generic HTTP/HTTPS proxy with the YouTube Transcript API. It uses the GenericProxyConfig class to define proxy URLs for both HTTP and HTTPS protocols, providing an alternative to Webshare proxies.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.proxies import GenericProxyConfig\n\nytt_api = YouTubeTranscriptApi(\n    proxy_config=GenericProxyConfig(\n        http_url=\"http://user:pass@my-custom-proxy.org:port\",\n        https_url=\"https://user:pass@my-custom-proxy.org:port\",\n    )\n)\n\n# all requests done by ytt_api will now be proxied using the defined proxy URLs\nytt_api.fetch(video_id)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Generic HTTP/HTTPS Proxies for YouTube Transcript API\nDESCRIPTION: Demonstrates how to configure generic HTTP and HTTPS proxies for the YouTube Transcript API to bypass IP restrictions using custom proxy solutions.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> --http-proxy http://user:pass@domain:port --https-proxy https://user:pass@domain:port\n```\n\n----------------------------------------\n\nTITLE: Setting Up Webshare Proxy with YouTube Transcript API\nDESCRIPTION: This code shows how to work around IP bans by configuring YouTube Transcript API to use Webshare's rotating residential proxies. It initializes the API with proxy credentials, allowing requests to be proxied through Webshare to avoid IP blocking.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom youtube_transcript_api import YouTubeTranscriptApi\nfrom youtube_transcript_api.proxies import WebshareProxyConfig\n\nytt_api = YouTubeTranscriptApi(\n    proxy_config=WebshareProxyConfig(\n        proxy_username=\"<proxy-username>\",\n        proxy_password=\"<proxy-password>\",\n    )\n)\n\n# all requests done by ytt_api will now be proxied through Webshare\nytt_api.fetch(video_id)\n```\n\n----------------------------------------\n\nTITLE: Using Webshare Residential Proxies with YouTube Transcript API\nDESCRIPTION: Shows how to use Webshare residential proxies to work around IP bans from YouTube by specifying proxy credentials via the CLI arguments.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api <first_video_id> <second_video_id> --webshare-proxy-username \"username\" --webshare-proxy-password \"password\"\n```\n\n----------------------------------------\n\nTITLE: Installing YouTube Transcript API using pip\nDESCRIPTION: Command to install the YouTube Transcript API package using pip package manager.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install youtube-transcript-api\n```\n\n----------------------------------------\n\nTITLE: Handling YouTube Video IDs with Leading Hyphens\nDESCRIPTION: Demonstrates how to properly escape video IDs that start with hyphens to prevent the CLI from interpreting them as command-line options.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nyoutube_transcript_api \"\\-abc123\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up the YouTube Transcript API Project for Development\nDESCRIPTION: Shows how to install the project dependencies for local development using Poetry, which is required for contributing to the project.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\npoetry install --with test,dev\n```\n\n----------------------------------------\n\nTITLE: Running Development Tasks for YouTube Transcript API\nDESCRIPTION: Lists the available Poetry commands for running tests, coverage, formatting, and linting during development to ensure code quality.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\npoe test\npoe coverage\npoe format\npoe lint\n```\n\n----------------------------------------\n\nTITLE: Running Pre-commit Checks for YouTube Transcript API\nDESCRIPTION: Shows how to run all necessary checks to ensure code passes build requirements before committing changes to the project.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\npoe precommit\n```\n\n----------------------------------------\n\nTITLE: Command Line Tools Usage with Cookie File\nDESCRIPTION: Example commands showing how to use a cookies.txt file with common command line tools wget, curl, and aria2c for making authenticated requests.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/youtube_transcript_api/test/assets/example_cookies.txt#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -x --load-cookies cookies.txt \"https://www.youtube.com/\"\ncurl --cookie cookies.txt \"https://www.youtube.com/\"\naria2c --load-cookies cookies.txt \"https://www.youtube.com/\"\n```\n\n----------------------------------------\n\nTITLE: Cookie File Format Structure\nDESCRIPTION: Example cookie entries showing the standard Netscape/Mozilla cookie file format with fields for domain, path, secure flag, expiration, name, and value.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/youtube_transcript_api/test/assets/example_cookies.txt#2025-04-11_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\n.example.com\tTRUE\t/\tTRUE\t3594431874\tTEST_FIELD\tTEST_VALUE\n.example.com\tTRUE\t/\tTRUE\t31874\tBAD_TEST_FIELD\tBAD_TEST_VALUE\n```\n\n----------------------------------------\n\nTITLE: Downloading YouTube Cookies with Command Line Tools\nDESCRIPTION: Example commands for using the cookies.txt file with different HTTP client tools including wget, curl, and aria2c to access YouTube.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/youtube_transcript_api/test/assets/expired_example_cookies.txt#2025-04-11_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -x --load-cookies cookies.txt \"https://www.youtube.com/\"\ncurl --cookie cookies.txt \"https://www.youtube.com/\"\naria2c --load-cookies cookies.txt \"https://www.youtube.com/\"\n```\n\n----------------------------------------\n\nTITLE: Sample Cookie Entry Format for HTTP Cookie File\nDESCRIPTION: A sample cookie entry showing the format used in the cookies.txt file. This example demonstrates the structure of a cookie with domain, path, expiration time, and value fields.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/youtube_transcript_api/test/assets/expired_example_cookies.txt#2025-04-11_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n.example.com\tTRUE\t/\tTRUE\t31874\tBAD_TEST_FIELD\tBAD_TEST_VALUE\n```\n\n----------------------------------------\n\nTITLE: Finding transcript in specific languages\nDESCRIPTION: Example of how to find a transcript in specific languages from a TranscriptList object.\nSOURCE: https://github.com/jdepoix/youtube-transcript-api/blob/master/README.md#2025-04-11_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ntranscript = transcript_list.find_transcript(['de', 'en'])\n```"
  }
]