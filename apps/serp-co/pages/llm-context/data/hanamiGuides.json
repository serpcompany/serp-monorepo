[
  {
    "owner": "hanami",
    "repo": "guides",
    "content": "TITLE: Markdown Front Matter Configuration\nDESCRIPTION: YAML front matter block defining the title and order of the documentation page within the Hanami guides.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Actions\norder: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Refactored Hanami Action Handling 404 via ROM Exception - Ruby\nDESCRIPTION: Improves Hanami action by using rom-rb's .one! method and handling missing records with custom exception logic via config.handle_exception. 'handle_not_found' renders 404 JSON error. Inputs: Valid integer ID. Outputs: JSON book data or JSON error with status 404. Dependencies: Hanami, rom-rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nrequire \"rom\"\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        config.handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one!\n\n          response.format = :json\n          response.body = book.to_json\n        end\n\n        private\n\n        def handle_not_found(_request, response, _exception)\n          response.status = 404\n          response.format = :json\n          response.body = {error: \"not_found\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Code for Redirects in Hanami\nDESCRIPTION: Demonstrates how to set a custom HTTP status code for a redirect route.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nredirect \"/old\", to: \"/temporary-new\", code: 302\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Action Options\nDESCRIPTION: This snippet demonstrates how to configure various options for a Hanami action, such as setting the HTTP method, specifying accepted formats, and defining a custom name for the action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Books\n  class Index < Action\n    config.method = :get\n    config.formats = [:html, :json]\n    config.name = :books\n\n    def handle(request, response)\n      # Action logic...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index Template in ERB\nDESCRIPTION: Template for rendering the books index page with a list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n<h1>Books</h1>\n\n<ul>\n  <% books.each do |book| %>\n    <li><%= book[:title] %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining a Hanami App in Ruby\nDESCRIPTION: This code snippet demonstrates how to define a basic Hanami App class. It inherits from Hanami::App and includes a configuration block where various settings can be specified.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nrequire \"hanami\"\n\nmodule MyApp\n  class App < Hanami::App\n    config do\n      # Add your app-wide configuration settings here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Action Class with Authentication in Hanami\nDESCRIPTION: Creates a base action class that includes dependencies, sets JSON formatting, and implements authentication via a before callback. All actions inheriting from this class will receive these behaviors.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"authenticator\"]\n\n    format :json\n\n    before :authenticate_user!\n\n    private\n\n    def authenticate_user!(request, response)\n      halt 401 unless authenticator.valid_api_token?(request.headers[\"X-API-Token\"])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Associations in a Relation Schema\nDESCRIPTION: This snippet demonstrates how to define associations within a relation schema. It shows how to set up 'has_many' relationships, including a through association.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users < Hanami::DB::Relation\n  schema(infer: true) do\n    associations do\n      has_many :users_tasks\n      has_many :tasks, through: :users_tasks\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Separate Class for Parameter Validation in Hanami\nDESCRIPTION: Shows how to use a separate class for parameter validation in a Hanami action, improving reusability and testability.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/users/params/create.rb\n\nmodule Bookshelf\n  module Actions\n    module Users\n      module Params\n        class Create < Hanami::Action::Params\n          params do\n            required(:email).filled(:string)\n            required(:password).filled(:string)\n\n            required(:address).hash do\n              required(:street).filled(:string)\n              required(:country).filled(:string)\n            end\n          end\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/users/create.rb\n\nmodule Bookshelf\n  module Actions\n    module Users\n      class Create < Bookshelf::Action\n        params Params::Create\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Validation and Coercion in Hanami Action\nDESCRIPTION: This snippet illustrates advanced parameter validation and coercion techniques in a Hanami action, including type checking, format validation, and size constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/signup/create.rb\nmodule Web\n  module Controllers\n    module Signup\n      class Create\n        include Web::Action\n        MEGABYTE = 1024 ** 2\n\n        params do\n          required(:name).filled(:str?)\n          required(:email).filled(:str?, format?: /@/).confirmation\n          required(:password).filled(:str?).confirmation\n          required(:terms_of_service).filled(:bool?)\n          required(:age).filled(:int?, included_in?: 18..99)\n          optional(:avatar).filled(size?: 1..(MEGABYTE * 3))\n        end\n\n        def call(params)\n          if params.valid?\n            # ...\n          else\n            # ...\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Pagination in ROM Relation for Books - Ruby\nDESCRIPTION: Defines a ROM relation class for 'books' with support for schema inference and pagination using the pagination plugin. Sets a default of 5 books per page. This is used to enable paginated queries via ROM, serving as a backend for paginated API endpoints. Requires the ROM gem and its SQL adapter.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Persistence\n    module Relations\n      class Books < ROM::Relation[:sql]\n        schema(:books, infer: true)\n\n        use :pagination\n        per_page 5\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Method Handlers for Exception Handling in Hanami\nDESCRIPTION: Shows how to use both status codes and custom methods for exception handling in a Hanami action. RecordNotFound exceptions return a 404 status, while StandardError is handled by a custom method that returns a JSON response with a custom error message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/exception-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception RecordNotFound => 404\n        handle_exception StandardError => :handle_standard_error\n\n        def handle(*, response)\n          raise \"error\"\n        end\n\n        private\n\n        def handle_standard_error(request, response, exception)\n          response.status = 500\n          response.format = :json\n          response.body = {error: \"Sorry, something went wrong handling your request\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Books Index Action with Repo Dependency in Ruby\nDESCRIPTION: This Ruby code modifies the `Bookshelf::Actions::Books::Index` action. It includes the `Deps[\"repos.book_repo\"]` mixin to inject the book repository dependency, making it available via the `book_repo` method. The `handle` method now calls `book_repo.all_by_title` to fetch books, sets the response format to JSON, and serializes the book data into the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        def handle(request, response)\n          books = book_repo.all_by_title\n\n          response.format = :json\n          response.body = books.map(&:to_h).to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Action Class with Authentication in Hanami\nDESCRIPTION: Defines a base action class with authentication dependency, JSON formatting, and API token validation. This class serves as a foundation for other actions requiring these common behaviors.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"authenticator\"]\n\n    format :json\n\n    before :authenticate_user!\n\n    private\n\n    def authenticate_user!(request, response)\n      halt 401 unless authenticator.valid_api_token?(request.headers[\"X-API-Token\"])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Relation via CLI (Shell)\nDESCRIPTION: This shell command uses the Hanami CLI generator to create a database relation class named `books`. Relations provide an interface for interacting with database tables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate relation books\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Class in Ruby for Hanami Application\nDESCRIPTION: Demonstrates how to create a Settings class in config/settings.rb to define custom application settings with types and defaults.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Specific Database Gateway in Hanami Operation\nDESCRIPTION: Demonstrates how to specify a particular database gateway when using a transaction in a Hanami operation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ntransaction(gateway: :other) do\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index Action in Hanami with ROM\nDESCRIPTION: This Hanami action class implements the books index endpoint. It uses ROM to query the books relation, orders the results, and returns them as JSON.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        def handle(*, response)\n          books = rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .to_a\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action in Ruby\nDESCRIPTION: Ruby code for a Hanami action class, defining the handling of a request and setting the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(*, response)\n          response.body = \"Welcome to Bookshelf\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Various Route Types in Hanami (Ruby)\nDESCRIPTION: Demonstrates different ways to add routes in Hanami, including routes to actions, Rack applications, and lambda functions. It shows how to handle different HTTP methods and endpoint types.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\"  # Invokes the Bookshelf::Actions:Books::Index action\npost \"/books\", to: \"books.create\" # Invokes the Bookshelf::Actions:Books::Create action\nget \"/rack-app\", to: RackApp.new\nget \"/my-lambda\", to: ->(env) { [200, {}, [\"A Rack compatible response\"]] }\n```\n\n----------------------------------------\n\nTITLE: Adding RSpec Request Spec for Books Index Pagination in Ruby\nDESCRIPTION: This RSpec test, located in `spec/requests/books/index/pagination_spec.rb`, specifically verifies the pagination functionality of the `GET /books` endpoint. It inserts 10 books in a `before` block. The test case checks that requesting page 1 with 3 items per page (`/books?page=1&per_page=3`) returns a successful response with the correct first three books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/index/pagination_spec.rb\n\nRSpec.describe \"GET /books pagination\", type: [:request, :db] do\n  let(:books) { Hanami.app[\"relations.books\"] }\n\n  before do\n    10.times do |n|\n      books.insert(title: \"Book #{n}\", author: \"Author #{n}\")\n    end\n  end\n\n  context \"given valid page and per_page params\" do\n    it \"returns the correct page of books\" do\n      get \"/books?page=1&per_page=3\"\n\n      expect(last_response).to be_successful\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq [\n        {\"title\" => \"Book 0\", \"author\" => \"Author 0\"},\n        {\"title\" => \"Book 1\", \"author\" => \"Author 1\"},\n        {\"title\" => \"Book 2\", \"author\" => \"Author 2\"}\n      ]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Autoloaded Entity Class in Ruby\nDESCRIPTION: Example of defining a Book entity class following Hanami's autoloading conventions with proper namespace structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/entities/book.rb\n\nmodule Bookshelf\n  module Entities\n    class Book\n      attr_reader :title, :author\n\n      def initialize(title:, author:)\n        @title = title\n        @author = author\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initial Routes Configuration in Ruby\nDESCRIPTION: Basic Hanami routes configuration file setup.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    # Add your routes here. See https://guides.hanamirb.org/routing/overview/ for details.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Create Action for Books in Hanami\nDESCRIPTION: This snippet defines a Create action within the Bookshelf::Actions::Books module. It includes parameter validation, book creation using the repo, and appropriate response handling based on the validity of the request.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        params do\n          required(:book).hash do\n            required(:title).filled(:string)\n            required(:author).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          if request.params.valid?\n            book = book_repo.create(request.params[:book])\n\n            response.status = 201\n            response.body = book.to_json\n          else\n            response.status = 422\n            response.format = :json\n            response.body = request.params.errors.to_json\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hanami Action in Ruby\nDESCRIPTION: Demonstrates a basic Hanami action class implementation that handles HTTP requests. The action takes a name parameter from the request and returns a welcome message in the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          name = request.params[:name]\n\n          response.body = \"Welcome to Bookshelf #{name}!\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Validating and Rendering Book Resource in Hanami Action - Ruby\nDESCRIPTION: Implements a Hanami action for rendering a book resource using param validation and conditional rendering. Depends on rom-rb for data access. It checks for presence of a book, responds with JSON or 404 as needed. Inputs: HTTP request with integer book ID. Outputs: JSON body representing book or error message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one\n\n          response.format = :json\n\n          if book\n            response.body = book.to_json\n          else\n            response.status = 404\n            response.body = {error: \"not_found\"}.to_json\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Show Action with Parameter Validation and 404 Handling - Ruby\nDESCRIPTION: Implements the GET /books/:id action for showing book details. Validates that 'id' is present and an integer, uses ROM's by_pk to find the matching book, and serializes it to JSON. If not found, returns a 404 status and appropriate error message. Requires Hanami, ROM, injected 'persistence.rom', and JSON support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one\n\n          response.format = :json\n\n          if book\n            response.body = book.to_json\n          else\n            response.status = 404\n            response.body = {error: \"not_found\"}.to_json\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Books Relation (Ruby)\nDESCRIPTION: This code shows the generated Hanami relation class `Bookshelf::Relations::Books` located in `app/relations/books.rb`. It inherits from `Bookshelf::DB::Relation` and defines the schema mapping to the `books` database table, using `infer: true` to automatically detect columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\n# app/relations/books.rb\n\nmodule Bookshelf\n  module Relations\n    class Books < Bookshelf::DB::Relation\n      schema :books, infer: true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters from Different Sources in Hanami\nDESCRIPTION: Shows how to access parameters from path variables, query string, and request body in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(request, response)\n  # GET /books/1\n  request.params[:id] # => \"1\"\n\n  # GET /books?category=history&page=2\n  request.params[:category] # => \"history\"\n  request.params[:page] # => \"2\"\n\n  # POST /books '{\"title\": \"request body\", \"author\":\"json\"}', Content-Type application/json\n  request.params[:title] # => \"request body\"\n  request.params[:author] #=> \"json\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Repository Class in Hanami (Ruby)\nDESCRIPTION: This snippet demonstrates how to define a repository class in a Hanami application. The BookRepository class provides methods for interacting with the 'books' table in the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/repositories/book_repository.rb\nclass BookRepository < ROM::Repository[:books]\n  commands :create, update: :by_pk, delete: :by_pk\n\n  def all\n    books.to_a\n  end\n\n  def by_id(id)\n    books.by_pk(id).one\n  end\n\n  def create(data)\n    books.changeset(:create, data).commit\n  end\n\n  def update(id, data)\n    books.by_pk(id).changeset(:update, data).commit\n  end\n\n  def delete(id)\n    books.by_pk(id).delete\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Method Route Examples\nDESCRIPTION: Shows different ways to define routes with various HTTP methods and endpoints including actions, Rack apps, and lambdas.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\"  # Invokes the Bookshelf::Actions:Books::Index action\npost \"/books\", to: \"books.create\" # Invokes the Bookshelf::Actions:Books::Create action\nget \"/rack-app\", to: RackApp.new\nget \"/my-lambda\", to: ->(env) { [200, {}, [\"A Rack compatible response\"]] }\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Creation Action in Ruby with Hanami\nDESCRIPTION: This snippet defines a Hanami action for creating a new book, including parameter validation and database insertion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:book).hash do\n            required(:title).filled(:string)\n            required(:author).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          if request.params.valid?\n            book = rom.relations[:books].changeset(:create, request.params[:book]).commit\n\n            response.status = 201\n            response.body = book.to_json\n          else\n            response.status = 422\n            response.format = :json\n            response.body = request.params.errors.to_json\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in Hanami Action\nDESCRIPTION: This example demonstrates how to access request parameters within a Hanami action. It shows both query string and body parameters being retrieved and used.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Books\n  class Create < Action\n    def handle(request, response)\n      title = request.params[:title]\n      author = request.params[:author]\n\n      # Create a new book...\n\n      response.body = \"Created book #{title} by #{author}\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Cookies in Hanami\nDESCRIPTION: Demonstrates how to remove a cookie by setting its value to nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.cookies[\"tasty_cookie\"] = nil\n```\n\n----------------------------------------\n\nTITLE: Action with Parameter Validation for Books Index - Ruby\nDESCRIPTION: Enhances the books index action with strong parameter validation for 'page' and 'per_page' using Hanami's params schema. Ensures both are positive integers and per_page does not exceed 100. If params are invalid, returns HTTP 422 status and can provide error details. Builds upon the same dependencies and default pagination logic. Requires Hanami's param validation DSL.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          optional(:page).value(:integer, gt?: 0)\n          optional(:per_page).value(:integer, gt?: 0, lteq?: 100)\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          books = rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .page(request.params[:page] || 1)\n            .per_page(request.params[:per_page] || 5)\n            .to_a\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New Hanami Project using CLI\nDESCRIPTION: Example of how to create a new Hanami project called 'bookshelf' using the hanami new command. This is the basic command to initialize a new Hanami application with default settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/project.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf\n```\n\n----------------------------------------\n\nTITLE: Installing and Creating a New Hanami Project with Shell Commands\nDESCRIPTION: Commands to install the Hanami gem and create a new project called 'bookshelf'. This initializes a new Hanami application with the default SQLite database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ gem install hanami\n$ hanami new bookshelf\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Settings in Hanami App (Ruby)\nDESCRIPTION: This code snippet shows how to configure environment-specific settings for a Hanami application. It demonstrates adding a custom middleware for the production environment using the environment method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/app-config.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      require \"my_custom_middleware\"\n      config.middleware.use MyCustomMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Hanami Application Routes (Ruby)\nDESCRIPTION: This code shows the initial structure of the Hanami routes file (`config/routes.rb`). It defines a `Bookshelf::Routes` class inheriting from `Hanami::Routes`, which is the central place for defining application URL mappings. Initially, no routes are defined.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    # Add your routes here. See https://guides.hanamirb.org/routing/overview/ for details.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Cleaning Databases Between RSpec Tests Using DatabaseCleaner - Ruby\nDESCRIPTION: Provides detailed setup for spec/support/db/cleaning.rb to clean all configured app and slice databases between tests using DatabaseCleaner. Initializes a proc to extract all relevant db connections, and configures before/after suite and each test for truncation or transaction cleaning strategies depending on metadata (e.g., :js). Requires database_cleaner-sequel, sequel, and RSpec gems, and expects Hanami.app to be available with properly registered db.rom keys.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"database_cleaner/sequel\\\"\\n\\n# Clean the databases between tests tagged as `:db`\\nRSpec.configure do |config|\\n  # Returns all the configured databases across the app and its slices.\\n  #\\n  # Used in the before/after hooks below to ensure each database is cleaned between examples.\\n  #\\n  # Modify this proc (or any code below) if you only need specific databases cleaned.\\n  all_databases = -> {\\n    slices = [Hanami.app] + Hanami.app.slices.with_nested\\n\\n    slices.each_with_object([]) { |slice, dbs|\\n      next unless slice.key?(\\\"db.rom\\\")\\n\\n      dbs.concat slice[\\\"db.rom\\\"].gateways.values.map(&:connection)\\n    }.uniq\\n  }\\n\\n  config.before :suite do\\n    all_databases.call.each do |db|\\n      DatabaseCleaner[:sequel, db: db].clean_with :truncation, except: [\\\"schema_migrations\\\"]\\n    end\\n  end\\n\\n  config.before :each, :db do |example|\\n    strategy = example.metadata[:js] ? :truncation : :transaction\\n\\n    all_databases.call.each do |db|\\n      DatabaseCleaner[:sequel, db: db].strategy = strategy\\n      DatabaseCleaner[:sequel, db: db].start\\n    end\\n  end\\n\\n  config.after :each, :db do\\n    all_databases.call.each do |db|\\n      DatabaseCleaner[:sequel, db: db].clean\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in Hanami\nDESCRIPTION: This snippet demonstrates how to define basic routes in a Hanami application using the 'config/routes.rb' file. It shows examples of routing to different controllers and actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami!\" }\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Interactive Boot Process Example\nDESCRIPTION: Series of IRB commands demonstrating the step-by-step process of preparing and booting a Hanami application, showing component registration and lazy loading behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/booting.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec irb\n\nirb(main)> Hanami\n(irb):1:in `<main>': uninitialized constant Hanami (NameError)\n```\n\n----------------------------------------\n\nTITLE: Complex Parameter Validation in Hanami User Creation Action\nDESCRIPTION: Illustrates a more complex parameter validation schema for a user creation action, including nested parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Create < Bookshelf::Action\n        params do\n          required(:email).filled(:string)\n          required(:password).filled(:string)\n\n          required(:address).hash do\n            required(:street).filled(:string)\n            required(:country).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          request.params[:email]             # => \"alice@example.org\"\n          request.params[:password]          # => \"secret\"\n          request.params[:address][:country] # => \"Italy\"\n\n          request.params[:admin]             # => nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Show Action Implementation\nDESCRIPTION: Hanami action for handling GET requests to /books/:id endpoint with error handling\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = book_repo.get(request.params[:id])\n\n          response.format = :json\n          response.body = book.to_h.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Available Hanami Generate Commands\nDESCRIPTION: This command displays all available code generation options in Hanami 2.2. It includes options for creating actions, components, migrations, operations, parts, relations, repos, slices, structs, and views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate --help\nCommands:\n  hanami generate action NAME\n  hanami generate component NAME\n  hanami generate migration NAME\n  hanami generate operation NAME\n  hanami generate part NAME\n  hanami generate relation NAME\n  hanami generate repo NAME\n  hanami generate slice NAME\n  hanami generate struct NAME\n  hanami generate view NAME\n```\n\n----------------------------------------\n\nTITLE: RSpec Feature Test for Creating Books in Ruby\nDESCRIPTION: This RSpec feature test demonstrates the expected behavior when creating books, including successful creation and handling of invalid attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/features/books/create_spec.rb\n\nRSpec.feature \"Creating books\" do\n  it \"creates a book when given valid attributes\" do\n    visit \"/books/new\"\n\n    fill_in \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    fill_in \"Author\", with: \"Sandi Metz\"\n    click_on \"Create\"\n\n    expect(page).to have_content \"Book created\"\n    expect(page).to have_selector \"h1\", text: \"Practical Object-Oriented Design in Ruby\"\n    expect(page).to have_selector \"p\", text: \"Sandi Metz\"\n  end\n\n  it \"shows errors and does not create the book when given invalid attributes\" do\n    visit \"/books/new\"\n\n    fill_in \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    click_on \"Create\"\n\n    expect(page).to have_content \"Could not create book\"\n    expect(page).to have_field \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    expect(page).to have_field \"Author\", with: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Session Methods in Hanami Controller\nDESCRIPTION: This snippet shows basic session operations in a Hanami controller action. It demonstrates how to read values, assign new values, and remove values from the session using hash-like syntax.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          session[:b]         # read\n          session[:a] = 'foo' # assign\n          session[:c] = nil   # remove\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami Base Action Handling ROM TupleCountMismatchError - Ruby\nDESCRIPTION: Defines a base Hanami Action class that centrally handles ROM::TupleCountMismatchError, sending standardized 404 JSON error responses. Intended for inheritance by actual actions. Inputs: any request triggering the exception; outputs: 404 JSON error. Dependencies: hanami/action, rom-rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\n# auto_register: false\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    config.handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n    private\n\n    def handle_not_found(_request, response, _exception)\n      response.status = 404\n      response.format = :json\n      response.body = {error: \"not_found\"}.to_json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful Routes for Books Resource (Ruby)\nDESCRIPTION: Illustrates how to define a complete set of RESTful routes for a books resource in Hanami's Routes class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n    get \"/books/new\", to: \"books.new\"\n    post \"/books\", to: \"books.create\"\n    patch \"/books/:id\", to: \"books.update\"\n    delete \"/books/:id\", to: \"books.destroy\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Settings in Ruby for Hanami Application\nDESCRIPTION: This snippet shows how to define settings with specific types (boolean and integer) in a Hanami application's Settings class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, constructor: Types::Params::Bool\n    setting :max_cart_items, constructor: Types::Params::Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handler Methods in Hanami Action\nDESCRIPTION: Demonstrates using custom methods to handle exceptions with more complex logic, including formatting JSON responses and handling multiple exception types with different strategies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/exception-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception RecordNotFound => 404\n        handle_exception StandardError => :handle_standard_error\n\n        def handle(*, response)\n          raise \"error\"\n        end\n\n        private\n\n        def handle_standard_error(request, response, exception)\n          response.status = 500\n          response.format = :json\n          response.body = {error: \"Sorry, something went wrong handling your request\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes in Hanami Application\nDESCRIPTION: This snippet shows how to configure routes in a Hanami application, including root, index, show, new, and create actions for books with named routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\", as: :show_book\n    get \"/books/new\", to: \"books.new\"\n    post \"/books\", to: \"books.create\", as: :create_book\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Validation in Hanami Action\nDESCRIPTION: Shows parameter validation using a schema with optional integer parameters and type coercion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        params do\n          optional(:page).value(:integer)\n          optional(:per_page).value(:integer)\n        end\n\n        def handle(request, response)\n          request.params[:page]\n          request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SendWelcomeEmail Operation in Ruby\nDESCRIPTION: Defines a basic structure for a SendWelcomeEmail operation component in a Hanami application, which will be used to send welcome emails to new users.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      def call(name:, email_address:)\n        # Send a welcome email to the user here...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Validating Parameters in Hanami Action\nDESCRIPTION: Shows how to define a parameter validation schema in a Hanami action using the params block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        params do\n          optional(:page).value(:integer)\n          optional(:per_page).value(:integer)\n        end\n\n        def handle(request, response)\n          request.params[:page]\n          request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace-Specific Base Action Class in Hanami\nDESCRIPTION: Demonstrates creating a specialized base class for a group of related actions within a specific namespace, sharing authentication behavior across that group.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/user_profile/base.rb\n\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Base < Bookshelf::Action\n        before :authenticate_user!\n\n        private\n\n        def authenticate_user!(request, response)\n          # halt 401 unless ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Halting with Detailed Error Response on Parameter Validation Failure - Ruby\nDESCRIPTION: Shows how to return a detailed JSON error message when parameter validation fails in a Hanami action. The error response includes all validation error messages under an 'errors' key and returns HTTP status 422. Intended to be used at the top of the action's handler for robust API error handling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 422, {errors: request.params.errors}.to_json unless request.params.valid?\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Show Action in Ruby\nDESCRIPTION: This snippet shows the implementation of the Show action for displaying a single book. It handles exceptions for when a book is not found and renders the view with the book's ID.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nrequire \"rom\"\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n        def handle(request, response)\n          response.render(view, id: request.params[:id])\n        end\n\n        private\n\n        def handle_not_found(request, response, exception)\n          response.status = 404\n          response.format = :html\n          response.body = \"Not found\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Hanami Dependencies via Command Line\nDESCRIPTION: This command installs third-party dependencies (Ruby gems, NPM packages) and sets up additional Hanami gems for code reloading, RSpec, and integrations. It's typically run automatically by 'hanami new', but can be executed manually if needed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami install\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in Hanami Components (Ruby)\nDESCRIPTION: Shows how to implement dependency injection in a Hanami component using the Deps mixin.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Middleware in Hanami\nDESCRIPTION: Demonstrates how to configure body parser middleware in a Hanami application to handle JSON request bodies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nclass App < Hanami::App\n  config.middleware.use :body_parser, :json\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Hanami (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure the database connection in a Hanami application using the config/settings.rb file. It shows how to set up different database configurations for development and test environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\nmodule MyApp\n  class Settings < Hanami::Settings\n    # Define settings\n    setting :database_url, constructor: Types::String\n\n    # Environment specific configuration\n    environment(:development) do\n      setting :database_url, default: \"postgres://localhost/my_app_development\"\n    end\n\n    environment(:test) do\n      setting :database_url, default: \"postgres://localhost/my_app_test\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Action Structure\nDESCRIPTION: Shows the basic structure of a Hanami action class with the handle method that receives request and response objects.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/request-and-response.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Settings in Hanami Ruby Application\nDESCRIPTION: This snippet shows how to configure environment-specific settings in a Hanami app. It demonstrates adding a custom middleware for the production environment using the environment method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/app-config.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      require \"my_custom_middleware\"\n      config.middleware.use MyCustomMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in Hanami Ruby Application\nDESCRIPTION: This snippet demonstrates how to define basic routes in a Hanami application's config/routes.rb file. It shows examples of GET, POST, and resource routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule MyApp\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami!\" }\n    get \"/books\", to: \"books.index\"\n    post \"/books\", to: \"books.create\"\n    resource :books\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sessions in Hanami Actions (Ruby)\nDESCRIPTION: This example shows how to interact with sessions in a Hanami action. It demonstrates setting a value in the session, reading a value from the session, and removing a value from the session using the response and request objects.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Setting a value in the session\n          response.session[:user_id] = 1\n\n          # Reading a value from the session\n          request.session[:user_id] # => 1\n\n          # Removing a value from the session\n          request.session[:user_id] = nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Registration in Provider\nDESCRIPTION: Shows how to register multiple components within a single provider using different registration keys.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/providers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/my_provider.rb\n\nHanami.app.register_provider(:my_provider) do\n  start do\n    register \"my_thing\", MyThing.new\n    register \"another.thing\", AnotherThing.new\n    register \"thing\", Thing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing BookRepo for Creating Books in Ruby\nDESCRIPTION: This snippet defines a BookRepo class within the Bookshelf::Repos module. It includes a create method that uses a changeset to commit new book attributes to the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def create(attributes)\n        books.changeset(:create, attributes).commit\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Routes in Hanami\nDESCRIPTION: This snippet demonstrates how to define basic routes in a Hanami application. It shows different HTTP methods and how to map them to specific actions in controllers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami!\" }\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n    post \"/books\", to: \"books.create\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handler Method in Hanami Action\nDESCRIPTION: Shows how to implement custom exception handling methods in a Hanami action. Handles both RecordNotFound with a 404 status and StandardError with a custom JSON response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/exception-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception RecordNotFound => 404\n        handle_exception StandardError => :handle_standard_error\n\n        def handle(*, response)\n          raise \"error\"\n        end\n\n        private\n\n        def handle_standard_error(request, response, exception)\n          response.status = 500\n          response.format = :json\n          response.body = {error: \"Sorry, something went wrong handling your request\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hanami Operation with Steps\nDESCRIPTION: Illustrates how to implement a Hanami operation with multiple steps using the `step` method. This example includes validation, creation, and updating feeds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nmodule Bookshelf\n  module Books\n    class Create < Bookshelf::Operation\n      def call(attrs)\n        attrs = step validate(attrs)\n        book = step create(attrs)\n        step update_feeds(book)\n\n        book\n      end\n\n      private\n\n      def validate(attrs)\n        # Return Success(attrs) or Failure(some_error)\n      end\n\n      def create(attrs)\n        # Return Success(book) or Failure(some_error)\n      end\n\n      def update_feeds(book)\n        # Return Success or Failure\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining CRUD Routes for Books Resource in Hanami\nDESCRIPTION: Complete example of defining all RESTful routes for a books resource in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n    get \"/books/new\", to: \"books.new\"\n    post \"/books\", to: \"books.create\"\n    patch \"/books/:id\", to: \"books.update\"\n    delete \"/books/:id\", to: \"books.destroy\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hanami Action Handler in Ruby\nDESCRIPTION: Demonstrates a basic Hanami action class that handles HTTP requests and generates responses. The action accepts a name parameter from the request and returns a welcome message in the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          name = request.params[:name]\n\n          response.body = \"Welcome to Bookshelf #{name}!\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Integrating Hanami Operation in an Action\nDESCRIPTION: Illustrates how to use a Hanami operation within an action, including dependency injection and pattern matching on the operation result.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    class Create < Bookshelf::Action\n      include Deps[\"books.create\"]\n\n      def handle(request, response)\n        case create.call(request.params[:book])\n        in Success(book)\n          response.redirect_to routes.path(:book, book.id)\n        in Failure[:invalid, validation]\n          response.render view, validation:\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: New Book Form Template in ERB\nDESCRIPTION: This ERB template creates a form for adding a new book, including fields for title and author, and a submit button.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_44\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/templates/books/new.html.erb -->\n\n<h1>New book</h1>\n\n<%= form_for :book, routes.path(:create_book) do |f| %>\n  <p>\n    <%= f.label \"Title\", for: :title %>\n    <%= f.text_field :title %>\n  </p>\n  <p>\n    <%= f.label \"Author\", for: :author %>\n    <%= f.text_field :author %>\n  </p>\n  <p>\n    <%= f.submit \"Create\" %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Validation with Error Handling\nDESCRIPTION: Shows comprehensive parameter validation with required fields, nested parameters, and error handling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Create < Bookshelf::Action\n        params do\n          required(:email).filled(:string)\n          required(:password).filled(:string)\n\n          required(:address).hash do\n            required(:street).filled(:string)\n            required(:country).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          request.params[:email]             # => \"alice@example.org\"\n          request.params[:password]          # => \"secret\"\n          request.params[:address][:country] # => \"Italy\"\n\n          request.params[:admin]             # => nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Relation Schema in Ruby\nDESCRIPTION: This snippet shows how to define a basic relation schema for a 'users' table using Hanami::DB::Relation. It demonstrates schema inference from the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users < Hanami::DB::Relation\n  schema :users, infer: true\nend\n```\n\n----------------------------------------\n\nTITLE: Base Action Exception Handling with Error Reporting\nDESCRIPTION: Shows how to implement exception handling in a base action class with integration to error reporting services like Sentry, providing centralized error handling for all derived actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/exception-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"sentry\"]\n\n    handle_exception StandardError => :handle_standard_error\n\n    private\n\n    def handle_standard_error(request, response, exception)\n      sentry.capture_exception(exception)\n\n      response.status = 500\n      response.body = \"Sorry, something went wrong handling your request\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action with Dependency Injection\nDESCRIPTION: Example of testing a Hanami action using dependency injection and test doubles to mock repository interactions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Create do\n  subject(:action) do\n    Bookshelf::Actions::Books::Create.new(user_repo: user_repo)\n  end\n\n  let(:user_repo) do\n    instance_double(Bookshelf::UserRepo)\n  end\n\n  let(:book_params) do\n    {title: \"Hanami Guides\"}\n  end\n\n  it \"returns a successful response when valid book params are provided\" do\n    expect(user_repo).to receive(:create).with(book_params).and_return(book_params)\n\n    response = action.call(book: book_params)\n\n    expect(response).to be_successful\n    expect(response.body[0]).to eq(book_params.to_json)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping Exception to Custom HTTP Status in Hanami Action\nDESCRIPTION: This code shows how to use the handle_exception DSL to map a specific exception to a custom HTTP status code. In this case, ArgumentError is mapped to a 400 Bad Request status.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/exception-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        handle_exception ArgumentError => 400\n\n        def call(params)\n          raise ArgumentError\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Create Action in Ruby\nDESCRIPTION: This snippet shows the implementation of the Create action for books, including parameter validation, book creation, and handling of success and failure cases.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_49\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/create.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        params do\n          required(:book).hash do\n            required(:title).filled(:string)\n            required(:author).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          if request.params.valid?\n            book = book_repo.create(request.params[:book])\n\n            response.flash[:notice] = \"Book created\"\n            response.redirect_to routes.path(:show_book, id: book[:id])\n          else\n            response.flash.now[:alert] = \"Could not create book\"\n            # Implicitly re-renders the \"new\" view\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami View Output with RSpec (Ruby)\nDESCRIPTION: Demonstrates how to write RSpec tests for a Hanami view that renders profile pages, including setup of test doubles and dependency injection for the user repository. The tests verify both the case where a user views their own profile and another user's profile, asserting the rendered HTML output contains expected content. Requires RSpec, Hanami views setup, valid user_repo and users_repo mocks, and appropriate method stubbing. Tests view.call with various arguments and checks HTML output as a string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/unit/views/profile/show_spec.rb\n\nRSpec.describe Views::Profile::Show do\n  subject(:view) { described_class.new(users_repo:) }\n\n  let(:user_repo) { double(:user_repo) }\n  let(:current_user) { double(:user, name: \"Amy\", id: 1) }\n\n  context \"user inspects their profile\" do\n    it \"renders their profile\" do\n      allow(user_repo).to receive(:by_id).with(1).and_return(current_user)\n\n      output = view.call(current_user:, id: 1).to_s\n\n      expect(output).to include(\"This is your profile. You can edit your data.\")\n    end\n  end\n\n  context \"user inspects someone else's profile\" do\n    let(:other_user) { double(:user, name: \"Lena\", id: 2)}\n\n    it \"renders the other user's profile\" do\n      allow(users_repo).to receive(:by_id).with(2).and_return(other_user)\n\n      output = view.call(current_user:, id: 2).to_s\n\n      expect(output).to include(\"This is the profile of Lena. You can admire it.\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Action Structure\nDESCRIPTION: Shows the basic structure of a Hanami action class with the handle method accepting request and response parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/request-and-response.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider Lifecycle Methods in Ruby\nDESCRIPTION: This code demonstrates the implementation of all three lifecycle methods (prepare, start, and stop) in a Hanami provider. It shows how to set up, start, and stop a database connection.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/providers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/database.rb\n\nHanami.app.register_provider(:database) do\n  prepare do\n    require \"acme/db\"\n\n    register \"database\", Acme::DB.configure(target[\"settings\"].database_url)\n  end\n\n  start do\n    target[\"database\"].establish_connection\n  end\n\n  stop do\n    target[\"database\"].close_connection\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Book Repository Implementation\nDESCRIPTION: Repository class implementing methods for book retrieval using ROM\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def get(id)\n        books.by_pk(id).one\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Non-Registered Classes in Hanami (Ruby)\nDESCRIPTION: Demonstrates how to create a class that is not registered in the container by placing it in the 'lib' directory. This example shows a SlackNotifier class that can be used anywhere in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Creation Controller with Validations in Ruby\nDESCRIPTION: This Ruby code defines a controller action for creating books in a Hanami application. It includes parameter validation, book creation, and redirection logic. The action checks for valid parameters before creating a new book and redirects to the book listing page on success.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_29\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Books\n      class Create\n        include Web::Action\n\n        expose :book\n\n        params do\n          required(:book).schema do\n            required(:title).filled(:str?)\n            required(:author).filled(:str?)\n          end\n        end\n\n        def call(params)\n          if params.valid?\n            @book = BookRepository.new.create(params[:book])\n\n            redirect_to '/books'\n          else\n            self.status = 422\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Exploring Hanami Web Application Structure\nDESCRIPTION: Displays the directory structure of a default Hanami web application, showing the organization of assets, controllers, views, and configuration files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tree apps/web\napps/web\n├── application.rb\n├── assets\n│   ├── favicon.ico\n│   ├── images\n│   ├── javascripts\n│   └── stylesheets\n├── config\n│   └── routes.rb\n├── controllers\n├── templates\n│   └── application.html.erb\n└── views\n    └── application_layout.rb\n\n8 directories, 5 files\n```\n\n----------------------------------------\n\nTITLE: Creating Components in Hanami (Ruby)\nDESCRIPTION: Example of creating two components in a Hanami application: a send welcome email operation and a welcome email renderer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      def call(name:, email_address:)\n        # Send a welcome email to the user here...\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/renderers/welcome_email.rb\n\nmodule Bookshelf\n  module Renderers\n    class WelcomeEmail\n      def render_html(name:)\n        \"<p>Welcome to Bookshelf #{name}!</p>\"\n      end\n\n      def render_text(name:)\n        \"Welcome to Bookshelf #{name}!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Variable Path Routes in Hanami\nDESCRIPTION: Demonstrates how to define routes with dynamic path variables and how to access those variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:id\", to: \"books.show\"\n\n# GET /books/1\n# request.params[:id] # => 1\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Action Structure\nDESCRIPTION: Example of a generated Hanami action file structure. Shows the module hierarchy, class definition, and minimal implementation with the Web::Action mixin and empty call method that accepts params.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ROM persistence provider in Hanami\nDESCRIPTION: Provider configuration for ROM SQL integration in a Hanami application. This sets up the database connection and auto-registration of persistence components.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider :persistence, namespace: true do\n  prepare do\n    require \"rom\"\n\n    config = ROM::Configuration.new(:sql, target[\"settings\"].database_url)\n\n    register \"config\", config\n    register \"db\", config.gateways[:default].connection\n  end\n\n  start do\n    config = target[\"persistence.config\"]\n\n    config.auto_registration(\n      target.root.join(\"lib/bookshelf/persistence\"),\n      namespace: \"Bookshelf::Persistence\"\n    )\n\n    register \"rom\", ROM.container(config)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Redirects in Hanami Routes (Ruby)\nDESCRIPTION: Demonstrates how to define redirects in Hanami routes, including custom status codes and external URLs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nredirect \"/old\", to: \"/new\"\nredirect \"/old\", to: \"/temporary-new\", code: 302\nredirect \"/external\", to: \"http:/hanamirb.org\"\nredirect \"/custom\", to: URI(\"xmpp://myapp.net\")\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Validation in Hanami Action\nDESCRIPTION: Demonstrates more complex parameter validation rules and error handling in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        params do\n          optional(:page).value(:integer, gteq?: 1)\n          optional(:per_page).value(:integer, gteq?: 1, lteq?: 100)\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          # At this point, we know the params are valid\n          request.params[:page]\n          request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing the books API endpoint with RSpec\nDESCRIPTION: RSpec test for the GET /books endpoint that verifies the API returns books data from the database in JSON format.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  before do\n    books.insert(title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\")\n    books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n  end\n\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"app/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq([\n      { \"title\" => \"Practical Object-Oriented Design in Ruby\", \"author\" => \"Sandi Metz\" },\n      { \"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\" }\n    ])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Database Provider with Lifecycle Methods\nDESCRIPTION: Example of a database provider implementing all three lifecycle stages: prepare, start, and stop.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/providers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/database.rb\n\nHanami.app.register_provider(:database) do\n  prepare do\n    require \"acme/db\"\n\n    register \"database\", Acme::DB.configure(target[\"settings\"].database_url)\n  end\n\n  start do\n    target[\"database\"].establish_connection\n  end\n\n  stop do\n    target[\"database\"].close_connection\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Ordering (`order`) by Multiple Columns with Directions using Expression Syntax in ROM (Ruby)\nDESCRIPTION: Illustrates how to specify complex ordering using the expression syntax within the `order` method. This example orders the `books` relation first by `publication_date` descending (`desc`) and then by `title` ascending (`asc`). Each call to `order` replaces any previous ordering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.order { [publication_date.desc, title.asc] }\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action with Params and Headers in Ruby\nDESCRIPTION: This snippet shows how to test a Hanami action by providing both parameters and headers. It simulates a JSON request and asserts on the response's success, content type, and body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Show do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful JSON response with book id\" do\n    response = subject.call(id: \"23\", \"HTTP_ACCEPT\" => \"application/json\")\n\n    expect(response).to be_successful\n    expect(response.headers[\"Content-Type\"]).to eq(\"application/json; charset=utf-8\")\n    expect(JSON.parse(response.body[0])).to eq(\"id\" => \"23\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Different Views in a Hanami Action in Ruby\nDESCRIPTION: This snippet illustrates conditional view rendering in a Hanami action `Bookshelf::Actions::Home::Show`. It uses the `Deps` mixin to inject two different view dependencies (`view` and `alternative_view`). Based on `some_condition` within the `handle` method, it explicitly calls `response.render` with either `alternative_view` or `view`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-from-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        include Deps[\n          view: \"views.pages.contact\",\n          alternative_view: \"views.pages.alternative_contact\",\n        ]\n\n        def handle(request, response)\n          if some_condition\n            response.render(alternative_view)\n          else\n            response.render(view)\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a View Class in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a basic view class in a Hanami application. It shows the structure of a view class and how to set up a template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\nmodule Books\n  class Index < View\n    expose :books\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Validation to Books Index Action in Ruby\nDESCRIPTION: This Ruby code enhances `Bookshelf::Actions::Books::Index` by adding parameter validation using Hanami's built-in features. A `params` block defines rules for the optional `page` and `per_page` parameters: they must be integers greater than 0, and `per_page` must also be less than or equal to 100. The `handle` method now includes `halt 422 unless request.params.valid?` to stop execution and return a 422 Unprocessable status if validation fails.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        params do\n          optional(:page).value(:integer, gt?: 0)\n          optional(:per_page).value(:integer, gt?: 0, lteq?: 100)\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          books = book_repo.all_by_title(\n            page: request.params[:page] || 1,\n            per_page: request.params[:per_page] || 5\n          )\n\n          response.format = :json\n          response.body = books.map(&:to_h).to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Request Spec for Paginated Books Index Endpoint - Ruby\nDESCRIPTION: Provides a request spec using RSpec to verify pagination in the /books API endpoint. It inserts 10 test books, then requests page 1 with per_page=3, asserting a successful JSON response that returns the first three books. Requires RSpec, the Hanami app, and an appropriate test database setup.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books pagination\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  before do\n    10.times do |n|\n      books.insert(title: \"Book #{n}\", author: \"Author #{n}\")\n    end\n  end\n\n  context \"given valid page and per_page params\" do\n    it \"returns the correct page of books\" do\n      get \"/books?page=1&per_page=3\"\n\n      expect(last_response).to be_successful\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq([\n        { \"title\" => \"Book 0\", \"author\" => \"Author 0\" },\n        { \"title\" => \"Book 1\", \"author\" => \"Author 1\" },\n        { \"title\" => \"Book 2\", \"author\" => \"Author 2\" }\n      ])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Asset Helpers in Hanami Views (Ruby)\nDESCRIPTION: This code snippet shows how to use asset helpers in Hanami views to include JavaScript and CSS files. It demonstrates the usage of javascript and stylesheet tags with specific file names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web::Views::Application\n  module Layout\n    def javascript\n      javascript \"application\"\n    end\n\n    def stylesheet\n      stylesheet \"application\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using SQL Functions in Hanami Repository (Ruby)\nDESCRIPTION: Shows how to use various SQL functions like ILIKE, IN, NOT, LENGTH as Ruby methods inside the where block in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  def by_name(name)\n    users.where { name.ilike(\"%?%\", name) }\n  end\n\n  def by_id_in(input)\n    users.where { id.in(input) }\n  end\n\n  def by_id_in_range(range)\n    users.where { id.in(range) }\n  end\n\n  def by_id_min_max(min, max)\n    users.where { id > min || id < max }\n  end\n\n  def by_not_id(input)\n    users.where { id.not(input) }\n  end\n\n  def by_id_not_in_range(range)\n    users.where { id.not(1..100) }\n  end\n\n  def by_name_length(input)\n    users.where { length(:name) > input }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Show Action with Delegated Exception Handling - Ruby\nDESCRIPTION: Demonstrates a Hanami action for showing a book, now simplified to rely on the base Action's exception handling. Queries by primary key, returns JSON output, assumes centralized error handling for 404. Inputs: HTTP request with integer :id; outputs: JSON book or error. Prerequisite: Bookshelf::Action configured as shown in previous snippet.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one!\n\n          response.format = :json\n          response.body = book.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Halt in Before Callback for Authentication\nDESCRIPTION: Demonstrates using halt within a before callback to implement authentication. Checks for user_id in session and halts with 401 status if not present.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          halt 401 unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-Many Association in Hanami Relation\nDESCRIPTION: This code snippet illustrates how to define a many-to-many association between books and authors through an authorships table in Hanami relations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true do\n        associations do\n          has_many :authors, through: :authorships\n        end\n      end\n    end\n\n    class Authorships < Hanami::DB::Relation\n      schema :authorships do\n        primary_key :id\n\n        # These may also be inferred from the db if\n        # they are actual foreign keys, but this is\n        # how you would do it manually.\n        attribute :book_id, Types.ForeignKey(:books)\n        attribute :author_id, Types.ForeignKey(:authors)\n        attribute :order, Types::Integer\n\n        associations do\n          belongs_to :book\n          belongs_to :author\n        end\n      end\n    end\n\n    class Authors < Hanami::DB::Relation\n      schema :authors, infer: true do\n        has_many :books, through: :authorships\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CRUD Methods for Has One Association in Hanami\nDESCRIPTION: Extended UserRepository implementation with methods to add, remove, update, and replace the associated avatar.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/user_repository.rb\nclass UserRepository < Hanami::Repository\n  # ...\n\n  def add_avatar(user, data)\n    assoc(:avatar, user).add(data)\n  end\n\n  def remove_avatar(user)\n    assoc(:avatar, user).delete\n  end\n\n  def update_avatar(user, data)\n    assoc(:avatar, user).update(data)\n  end\n\n  def replace_avatar(user, data)\n    assoc(:avatar, user).replace(data)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Book Endpoint Responses with RSpec - Ruby\nDESCRIPTION: This RSpec file tests the GET /books/:id endpoint for both successful and unsuccessful book lookups. It sets up database state using rom-rb, checks for proper JSON responses and error statuses, and expects matching output. Dependencies include Hanami, RSpec, and rom-rb. It requires properly configured test DB and routing. Inputs are HTTP requests; outputs are response objects validated by assertions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/show_spec.rb\n\nRSpec.describe \"GET /books/:id\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  context \"when a book matches the given id\" do\n    let!(:book_id) do\n      books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n    end\n\n    it \"renders the book\" do\n      get \"/books/#{book_id}\"\n\n      expect(last_response).to be_successful\n      expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"id\" => book_id, \"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\"\n      )\n    end\n  end\n\n  context \"when no book matches the given id\" do\n    it \"returns not found\" do\n      get \"/books/#{books.max(:id).to_i + 1}\"\n\n      expect(last_response).to be_not_found\n      expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"error\" => \"not_found\"\n      )\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Error Handling Methods in Hanami Interactor\nDESCRIPTION: Demonstrates the error handling methods available in Hanami Interactors. The error method adds an error message and marks the result as failed, while error! additionally stops execution.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nerror\nerror!\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Hanami Action Handler in Ruby\nDESCRIPTION: Demonstrates how to create a basic Hanami action class that handles HTTP requests. The action accepts a name parameter from the request and returns a welcome message in the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          name = request.params[:name]\n\n          response.body = \"Welcome to Bookshelf #{name}!\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Non-HTML-Safe String Without Escaping in ERB - ERB\nDESCRIPTION: This ERB snippet shows the use of '<%==' to render a string literally, bypassing automatic HTML escaping. This approach should be used sparingly and only with trusted content, as it can introduce XSS risks if used on user input. This requires no additional dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n<%== \"<p>Non-safe strings will not be auto-escaped</p>\" %>\n```\n\n----------------------------------------\n\nTITLE: Using Typed Functions, Aliasing, and Aggregate Filters in ROM `select` (Ruby)\nDESCRIPTION: Showcases advanced features within ROM's `select` expression syntax. It uses typed SQL functions (`integer::count`), aliases results using `as(:alias_name)`, applies aggregate filters (`filter(...)`), removes default ordering with `unordered`, and fetches a single result row using `one`. Requires types defined in `ROM::SQL::Types` (e.g., `integer`, `string`) for type prefixes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.select {[ \n  integer::count(:id).as(:total),\n  integer::count(:id).filter(pages < 300).as(:short),\n  integer::count(:id).filter(pages > 300).as(:long)\n]}.unordered.one\n{total: 2, short: 1, long: 1}\n```\n\n----------------------------------------\n\nTITLE: Book Creation Action Implementation\nDESCRIPTION: Action class for handling book creation with validation and persistence\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:book).hash do\n            required(:title).filled(:string)\n            required(:author).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          if request.params.valid?\n            book = rom.relations[:books].changeset(:create, request.params[:book]).commit\n\n            response.flash[:notice] = \"Book created\"\n            response.redirect_to routes.path(:show_book, id: book[:id])\n          else\n            response.flash.now[:alert] = \"Could not create book\"\n            # Implicitly re-renders the \"new\" view\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Different Types of Routes in Hanami\nDESCRIPTION: Demonstrates different ways to define routes in Hanami, including routes to actions, Rack applications, and lambda functions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\"  # Invokes the Bookshelf::Actions:Books::Index action\npost \"/books\", to: \"books.create\" # Invokes the Bookshelf::Actions:Books::Create action\nget \"/rack-app\", to: RackApp.new\nget \"/my-lambda\", to: ->(env) { [200, {}, [\"A Rack compatible response\"]] }\n```\n\n----------------------------------------\n\nTITLE: Registering multiple MIME types for a format in Hanami\nDESCRIPTION: Maps multiple MIME types to a single format name (:json) in a Hanami application. This allows accepting requests with different but related content types as the same format.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :json, [\"application/json+scim\", \"application/json\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Path Generation in Hanami Routes with RSpec\nDESCRIPTION: This snippet demonstrates how to test path generation for Hanami routes using RSpec. It includes examples for testing root path and a path with parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/routes_spec.rb\n\nRSpec.describe Web.routes do\n  it 'generates \"/\"' do\n    actual = described_class.path(:root)\n    expect(actual).to eq('/')\n  end\n\n  it 'generates \"/books/23\"' do\n    actual = described_class.path(:book, id: 23)\n    expect(actual).to eq('/books/23')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Hanami (Ruby)\nDESCRIPTION: This snippet demonstrates how to run database migrations in a Hanami application using the hanami db migrate command. It also shows how to rollback migrations and check their status.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Run migrations\n$ hanami db migrate\n\n# Rollback last migration\n$ hanami db rollback\n\n# Check migration status\n$ hanami db version\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Response in Hanami Action\nDESCRIPTION: Shows how to implement a custom 404 response with a specific message using halt.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 404, \"These aren't the droids you're looking for\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in Hanami (Ruby)\nDESCRIPTION: Shows how to define a basic route in a Hanami application's Routes class. This example sets up a root route that returns a simple string response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Exception Handling in Base Action with Error Reporting\nDESCRIPTION: Demonstrates how to configure exception handling in a base action class with integration to an error reporting service. This approach allows for centralized error handling across all application actions without repeating the configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/exception-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"sentry\"]\n\n    handle_exception StandardError => :handle_standard_error\n\n    private\n\n    def handle_standard_error(request, response, exception)\n      sentry.capture_exception(exception)\n\n      response.status = 500\n      response.body = \"Sorry, something went wrong handling your request\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Dependent Exposures in Hanami View (Ruby)\nDESCRIPTION: This `Bookshelf::Views::Books::Show` view illustrates how one exposure can depend on another. The `expose :author` block takes the result of the `expose :book` block as a positional argument (`|book|`). It then uses the `book` object (specifically `book.author_id`) to fetch the associated author via the `author_repo`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\n          \"repos.book_repo\",\n          \"repos.author_repo\"\n        ]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n\n        expose :author do |book|\n          author_repo.get!(book.author_id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action with Params and Headers in Ruby\nDESCRIPTION: This example demonstrates testing a Hanami action by providing both parameters and headers in the request. It checks for a successful JSON response and verifies the response body content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Show do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful JSON response with book id\" do\n    response = subject.call(id: \"23\", \"HTTP_ACCEPT\" => \"application/json\")\n\n    expect(response).to be_successful\n    expect(response.headers[\"Content-Type\"]).to eq(\"application/json; charset=utf-8\")\n    expect(JSON.parse(response.body[0])).to eq(\"id\" => \"23\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared App Components for Slices\nDESCRIPTION: Demonstrates how to configure additional shared app components to be available in all slices.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.shared_app_component_keys += [\"my_app_component\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON format for all Hanami actions\nDESCRIPTION: Sets JSON as the default format for all actions in a Hanami application by configuring it in the app class. This ensures proper handling of JSON requests and responses.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing GET /books Endpoint in Ruby with RSpec\nDESCRIPTION: This RSpec test checks the GET /books endpoint for returning a list of books. It sets up test data, makes a request, and verifies the response format and content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  before do\n    books.insert(title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\")\n    books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n  end\n\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq([\n      { \"title\" => \"Practical Object-Oriented Design in Ruby\", \"author\" => \"Sandi Metz\" },\n      { \"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\" }\n    ])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sanitizing URLs with sanitize_url in Ruby\nDESCRIPTION: Shows how to use the `sanitize_url` helper in Hanami to validate URLs based on their scheme. It checks if the URL's scheme is present in a list of permitted schemes (defaulting to 'http', 'https', 'mailto'). If the scheme is allowed, the original URL string is returned; otherwise, an empty string is returned. This is important for preventing malicious URLs (e.g., 'javascript:') when handling user-provided links. The allowed schemes can be customized via an optional second argument.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/string-escaping.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nsanitize_url(\"https://hanamirb.org\")\n# => \"http://hanamirb.org\"\n\nsantize_url(\"javascript:alert('xss')\")\n# => \"\"\n\nsantize_url(\"gemini://gemini.circumlunar.space/\", %w[http https gemini])\n# => \"gemini://gemini.circumlunar.space/\"\n```\n\n----------------------------------------\n\nTITLE: Authentication with Redirect in Hanami Action\nDESCRIPTION: Demonstrates implementing authentication using redirect in a before callback to send unauthenticated users to the sign-in page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          response.redirect_to(\"/sign-in\") unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated App-Level Base Action Class in Hanami\nDESCRIPTION: Shows the standard base action class that Hanami generates for an application, which all app actions can inherit from to share common functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Dataset (Select/Order) within a Hanami/ROM Relation (Ruby)\nDESCRIPTION: Shows how to define a default `dataset` within a Hanami::DB::Relation class (`Bookshelf::Relations::Books`) using a block. This example configures the relation to select only `id`, `title`, and `publication_date` by default, and also sets a default ordering by `publication_date`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true\n\n      dataset do\n        select(:id, :title, :publication_date).order(:publication_date)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index Action with JSON Response\nDESCRIPTION: This snippet shows the Books Index action, returning a JSON-formatted response with a static list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          books = [\n            {title: \"Test Driven Development\"},\n            {title: \"Practical Object-Oriented Design in Ruby\"}\n          ]\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Non-Registered lib Classes with Container Dependencies in Hanami (Ruby)\nDESCRIPTION: This example updates the `SendWelcomeEmail` operation to demonstrate using a class (`SlackNotifier`) defined in the `lib` directory alongside dependencies injected from the Hanami container (`email_client`, `renderers.welcome_email`). It calls the class method `SlackNotifier.notify` directly after successfully sending an email using the injected dependencies. Note that in this version, the renderer dependency is included without renaming.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n\n        SlackNotifier.notify(\"Welcome email sent to #{email_address}\")\n      end\n    end\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Operation in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a simple operation class in Hanami. It includes a call method that takes a name parameter and returns a greeting string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/greet.rb\nmodule App\n  module Operations\n    class Greet\n      def call(name:)\n        \"Hello, #{name}!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Hanami Action for Automatic View Rendering in Ruby\nDESCRIPTION: This snippet shows a basic Hanami action `Bookshelf::Actions::Pages::Contact`. By convention, if a corresponding view `Bookshelf::Views::Pages::Contact` exists, Hanami will automatically render it when this action is invoked, passing the request parameters as input to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-from-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using an Operation in a Hanami Action\nDESCRIPTION: This example shows how to use an operation within a Hanami action. It injects the Greet operation and calls it with the name parameter from the request params.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/greet.rb\nmodule App\n  module Actions\n    class Greet < Action\n      include Deps[greet: \"operations.greet\"]\n\n      def handle(request, response)\n        result = greet.call(name: request.params[:name])\n        response.body = result\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Absolute URLs in Hanami Ruby Controller\nDESCRIPTION: This Ruby code demonstrates how to use the routes helper to generate an absolute URL within a Hanami controller action. It shows redirecting to a book's URL using the book_url method and passing parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/routing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Books\n      class Create\n        include Web::Action\n\n        def call(params)\n          # ...\n          redirect_to routes.book_url(id: book.id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information in Hanami\nDESCRIPTION: Demonstrates various methods available on the request object to access information about the incoming HTTP request, including path, method, headers, and client information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/request-and-response.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.path_info                        # => \"/books\"\n          request.request_method                   # => \"GET\"\n          request.get?                             # => true\n          request.post?                            # => false\n          request.xhr?                             # => false\n          request.referer                          # => \"http://example.com/\"\n          request.user_agent                       # => \"Mozilla/5.0 Macintosh; ...\"\n          request.ip                               # => \"127.0.0.1\"\n          request.get_header(\"HTTP_AUTHORIZATION\") # => \"Basic abc123\"\n          request.env[\"HTTP_AUTHORIZATION\"]        # => \"Basic abc123\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Provider Dependencies in Operations\nDESCRIPTION: Shows how to use registered provider dependencies in application components using the Deps module inclusion pattern.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/providers.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Module in Hanami\nDESCRIPTION: Creates an authentication module that can be included in Hanami actions to handle user authentication. It sets up a before callback to check authentication and exposes the current user to views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/share-code.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/authentication.rb\nmodule Web\n  module Authentication\n    def self.included(action)\n      action.class_eval do\n        before :authenticate!\n        expose :current_user\n      end\n    end\n\n    private\n\n    def authenticate!\n      halt 401 unless authenticated?\n    end\n\n    def authenticated?\n      !!current_user\n    end\n\n    def current_user\n      @current_user ||= UserRepository.new.find(session[:user_id])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Basic Hanami Action Response in Ruby\nDESCRIPTION: Example of testing a basic Hanami action's response using RSpec. Shows how to instantiate an action and verify its successful response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Index do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful response with empty params\" do\n    response = action.call({})\n    expect(response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Last-Modified Conditional Requests in Hanami\nDESCRIPTION: This snippet demonstrates implementing conditional requests using the Last-Modified header in a Hanami action. It shows how to use the response.fresh method with last_modified parameter to validate requests based on resource modification time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/http-caching.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Show\n      class Index < Bookshelf::Action\n        include Deps[\"repos.user_repo\"]\n\n        def handle(request, response)\n          user = user_repo.find(request.params[:id])\n\n          response.fresh last_modified: user.updated_at\n\n          # <request processing logic here>\n        end\n      end\n    end\n  end\nend\n\n# Case 1 (missing or non-matching Last-Modified)\n# GET /users/23\n#  => 200, Last-Modified: Tue, 22 Nov 2022 10:04:30 GMT\n\n# Case 2 (matching Last-Modified)\n# GET /users/23, If-Modified-Since: Tue, 22 Nov 2022 10:04:30 GMT\n#  => 304\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action Response in Ruby\nDESCRIPTION: This snippet demonstrates how to test a Hanami action's response using RSpec. It instantiates the action and calls it with empty parameters, asserting that the response is successful.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Index do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful response with empty params\" do\n    response = action.call({})\n    expect(response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hanami Action Class in Ruby\nDESCRIPTION: This snippet shows how to define a simple Hanami action class. It includes the necessary module inclusion and defines a handle method to process the request.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/index.rb\nmodule Home\n  class Index < Action\n    def handle(request, response)\n      response.body = \"Hello from Hanami\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Books Table Schema in Migration (Ruby)\nDESCRIPTION: This Ruby code, located in a migration file (e.g., `config/db/migrate/YYYYMMDDHHMMSS_create_books.rb`), uses the `ROM::SQL.migration` DSL to define the schema for the `books` table. It creates the table with an auto-incrementing primary key (`id`), and non-nullable text columns for `title` and `author`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\n# config/db/migrate/20221113050928_create_books.rb\n\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :text, null: false\n      column :author, :text, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action with Dependency Injection in Ruby\nDESCRIPTION: This snippet shows how to test a Hanami action using dependency injection to mock a repository. It demonstrates setting up a test double and providing it to the action constructor.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Create do\n  subject(:action) do\n    Bookshelf::Actions::Books::Create.new(user_repo: user_repo)\n  end\n\n  let(:user_repo) do\n    instance_double(Bookshelf::UserRepo)\n  end\n\n  let(:book_params) do\n    {title: \"Hanami Guides\"}\n  end\n\n  it \"returns a successful response when valid book params are provided\" do\n    expect(user_repo).to receive(:create).with(book_params).and_return(book_params)\n\n    response = action.call(book: book_params)\n\n    expect(response).to be_successful\n    expect(response.body[0]).to eq(book_params.to_json)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple formats for Hanami actions\nDESCRIPTION: Configures Hanami actions to accept and respond with multiple formats (JSON and HTML). This allows the application to handle different content types based on request headers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.actions.format :json, :html\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cookie Settings in Hanami\nDESCRIPTION: Example of setting global cookie configuration options in a Hanami application including domain, security, and expiration settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = {\n      domain: \"hanami.example.com\",\n      secure: true,\n      httponly: true,\n      path: \"/foo\",\n      max_age: 300\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Actions with CLI\nDESCRIPTION: Shows how to use Hanami's action generator to create actions and associated routes for a books resource.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index\n$ bundle exec hanami generate action books.show\n$ bundle exec hanami generate action books.new\n$ bundle exec hanami generate action books.create\n$ bundle exec hanami generate action books.update\n$ bundle exec hanami generate action books.destroy\n```\n\n----------------------------------------\n\nTITLE: Enabling Sessions in Hanami Application\nDESCRIPTION: This snippet shows how to enable sessions in a Hanami application by adding configuration to the app.rb file. It sets up cookie-based sessions with custom key, secret, and expiration time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Base Action Configuration\nDESCRIPTION: Base Hanami action class with common exception handling and response formatting\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Dry::Monads[:result]\n\n    config.handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n    private\n\n    def handle_not_found(_request, response, _exception)\n      response.status = 404\n      response.format = :json\n      response.body = {error: \"not_found\"}.to_json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action and View using Shell\nDESCRIPTION: This shell command uses the Hanami CLI (`bundle exec hanami`) to generate the necessary files for a 'home.show' action. It creates the action class, the corresponding view class, and an HTML ERB template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action home.show\n\nCreated app/actions/home/show.rb\nCreated app/views/home/show.rb              <- view\nCreated app/templates/home/show.html.erb    <- template\n```\n\n----------------------------------------\n\nTITLE: Implementing WelcomeEmail Renderer in Ruby\nDESCRIPTION: Defines a WelcomeEmail renderer component in a Hanami application, responsible for rendering welcome emails in both HTML and plain text formats.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/renderers/welcome_email.rb\n\nmodule Bookshelf\n  module Renderers\n    class WelcomeEmail\n      def render_html(name:)\n        \"<p>Welcome to Bookshelf #{name}!</p>\"\n      end\n\n      def render_text(name:)\n        \"Welcome to Bookshelf #{name}!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Configuration in Hanami\nDESCRIPTION: Demonstrates how to add environment-specific configuration like middleware for production environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/app-config.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      require \"my_custom_middleware\"\n      config.middleware.use MyCustomMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Source Examples in Hanami\nDESCRIPTION: Shows how to access parameters from different sources including path variables, query strings, and JSON request bodies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(request, response)\n  # GET /books/1\n  request.params[:id] # => \"1\"\n\n  # GET /books?category=history&page=2\n  request.params[:category] # => \"history\"\n  request.params[:page] # => \"2\"\n\n  # POST /books '{\"title\": \"request body\", \"author\":\"json\"}', Content-Type application/json\n  request.params[:title] # => \"request body\"\n  request.params[:author] #=> \"json\"\nend\n```\n\n----------------------------------------\n\nTITLE: Assigning Hanami Relation to a Specific Gateway (Hanami/Ruby)\nDESCRIPTION: This code block shows how to define a Hanami::DB::Relation class and assign it to a specific gateway (such as one named :legacy). The schema is inferred automatically. Use this in app/relations when handling models tied to alternate/legacy databases. Inputs: gateway symbol and schema instruction. Output: Relation class registered to a particular gateway. Dependencies: Hanami, ROM.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users < Hanami::DB::Relation\n  gateway :legacy\n  schema infer: true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Creation Action with Validation\nDESCRIPTION: Hanami action implementation for creating books with parameter validation, database insertion, and appropriate response handling for both success and error cases\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_43\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:book).hash do\n            required(:title).filled(:string)\n            required(:author).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          if request.params.valid?\n            book = rom.relations[:books].changeset(:create, request.params[:book]).commit\n\n            response.status = 201\n            response.body = book.to_json\n          else\n            response.status = 422\n            response.format = :json\n            response.body = request.params.errors.to_json\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Complete CRUD Routes Configuration\nDESCRIPTION: Full example of RESTful routing configuration for a books resource including all CRUD operations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n    get \"/books/new\", to: \"books.new\"\n    post \"/books\", to: \"books.create\"\n    patch \"/books/:id\", to: \"books.update\"\n    delete \"/books/:id\", to: \"books.destroy\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Email Client Provider in Ruby\nDESCRIPTION: This snippet demonstrates how to create a provider for registering an email client in a Hanami application. It shows the use of prepare and start lifecycle methods, and how to register a component with the container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/providers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/email_client.rb\n\nHanami.app.register_provider(:email_client) do\n  prepare do\n    require \"acme_email/client\"\n  end\n\n  start do\n    client = AcmeEmail::Client.new(\n      api_key: target[\"settings\"].acme_api_key,\n      default_from: \"no-reply@bookshelf.example.com\"\n    )\n\n    register \"email_client\", client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom View Helper in Hanami Ruby\nDESCRIPTION: This snippet demonstrates how to define a custom view helper in a Hanami application. It creates a helper method 'format_date' that formats a given date using Ruby's strftime method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/helpers/date_formatter.rb\nmodule DateFormatter\n  def format_date(date)\n    date.strftime(\"%Y-%m-%d\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a View Template in ERB for Hanami\nDESCRIPTION: This example shows how to create a view template using ERB (Embedded Ruby) in a Hanami application. It demonstrates how to iterate over a collection and display data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/templates/books/index.html.erb\n<h1>Books</h1>\n\n<% books.each do |book| %>\n  <div>\n    <h2><%= book.title %></h2>\n    <p>Author: <%= book.author %></p>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflections in Hanami App (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure inflections for a Hanami application. It shows how to set up an acronym 'WNBA' using the config.inflections method in the app class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/app-config.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Halting Execution in Hanami Action\nDESCRIPTION: This snippet demonstrates how to use the halt method to interrupt the flow of an action. It checks for authentication and halts the action with a 401 status if the user is not authenticated.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshellf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 401 unless authenticated?(request)\n          # ...\n        end\n\n        private\n\n        def authenticated?(request)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Method Callbacks Implementation in Hanami Action\nDESCRIPTION: Demonstrates implementing a before callback using a method to validate parameters before handling the request. The callback checks if the id parameter is a valid integer and halts with a 422 status if validation fails.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before :validate_params\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def validate_params(request, response)\n          params = request.params\n          halt 422, request.params.errors.to_h unless request.params.valid?\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON body parsing in Hanami application\nDESCRIPTION: Configures a Hanami application to automatically parse JSON request bodies with the Content-Type: application/json header and make them available as request params.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Migrating Database to Specific Version in Hanami\nDESCRIPTION: Demonstrates how to migrate a database to a specific version by providing the --target option with a timestamp. This allows forward or backward migrations to a particular point in the migration history.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/db.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate --target=20241009134756\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table with Timestamp Columns in Ruby\nDESCRIPTION: This migration snippet shows how to create a database table with timestamp columns for created_at and updated_at, which Hanami repositories will automatically manage.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  up do\n    create_table :books do\n      # ...\n      column :created_at, DateTime\n      column :updated_at, DateTime\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action for JSON Response in Ruby\nDESCRIPTION: This snippet demonstrates the implementation of a Hanami action that responds with JSON. It sets the format to JSON and returns the book ID in the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Show < Action\n        format :json\n\n        def handle(request, response)\n          response.body = {id: request.params[:id]}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Migration File Structure (Plaintext)\nDESCRIPTION: Shows the typical directory structure and naming convention for Hanami migration files located in `config/db/migrate`. Filenames include a timestamp prefix for sequential ordering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n$ tree config/db/migrate\nconfig/db/migrate\n├── 20240717170227_create_posts.rb\n└── 20240717170318_add_published_at_to_posts.rb\n```\n\n----------------------------------------\n\nTITLE: Defining Settings Class in Ruby for Hanami Application\nDESCRIPTION: This snippet shows how to define a Settings class in a Hanami application. It demonstrates setting up custom settings with types and defaults.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Required and Optional Fields in Hanami Validations\nDESCRIPTION: Demonstrates how to define required and optional fields in a Hanami validation class using the required and optional methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\n\nclass Signup\n  include Hanami::Validations\n\n  validations do\n    required(:email)    { ... }\n    optional(:referral) { ... }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Reusable Authentication Module for Hanami Actions\nDESCRIPTION: Defines a module that can be included in any action requiring authentication, providing an alternative to inheritance for sharing behavior across disparate actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/authenticated_action.rb\n\nmodule Bookshelf\n  module Actions\n    module AuthenticatedAction\n      def self.included(action_class)\n        action_class.before :authenticate_user!\n      end\n\n      private\n\n      def authenticate_user!(request, response)\n        # halt 401 unless ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Controller Create Action Integration\nDESCRIPTION: Implementation of the create action in books controller using the AddBook interactor with dependency injection.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\ndef initialize(interactor: AddBook.new)\n  @interactor = interactor\nend\n\ndef call(params)\n  if params.valid?\n    @book = @interactor.call(params[:book])\n\n    redirect_to routes.books_path\n  else\n    self.status = 422\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies into Custom Context with Deps Mixin (Ruby)\nDESCRIPTION: Shows how to use the `Deps` mixin within a custom `Bookshelf::Views::Context` class to inject application dependencies (e.g., `repos.user_repo`). A custom method (`current_user`) utilizes the injected dependency and session data to fetch the current user.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      include Deps[\"repos.user_repo\"]\n\n      def current_user\n        return nil unless session[\"user_id\"]\n\n        @current_user ||= user_repo.get(session[\"user_id\"])\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Hanami Action with Request and Response Parameters\nDESCRIPTION: This snippet shows the basic structure of a Hanami action class with the handle method accepting request and response objects. It demonstrates the fundamental setup for processing HTTP requests in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/request-and-response.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining and Exposing Dependencies in a Hanami View (Ruby)\nDESCRIPTION: Defines a Hanami view for displaying a profile, leveraging the dependency injection pattern via the Deps mixin to introduce a user repository. The view exposes the current_user and also a user object resolved from the repository based on a passed id. Requires Hanami framework, a properly configured \"Main::View\" class, and a users_repo dependency provided at initialization. Inputs include current user and a user id; outputs are exposed objects to be used in template rendering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/profile/show.rb\n\nmodule Profile\n  class Show < Main::View\n    include Deps[users_repo: \"repos.user_repo\"]\n\n    expose :current_user\n\n    expose :user do |id:|\n      user_repo.by_id(id)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Querying Request Information in a Hanami Action\nDESCRIPTION: This code demonstrates how to use various methods of the request object to retrieve information about the incoming HTTP request. It shows how to access path, method, headers, and other request properties in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/request-and-response.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.path_info                        # => \"/books\"\n          request.request_method                   # => \"GET\"\n          request.get?                             # => true\n          request.post?                            # => false\n          request.xhr?                             # => false\n          request.referer                          # => \"http://example.com/\"\n          request.user_agent                       # => \"Mozilla/5.0 Macintosh; ...\"\n          request.ip                               # => \"127.0.0.1\"\n          request.get_header(\"HTTP_AUTHORIZATION\") # => \"Basic abc123\"\n          request.env[\"HTTP_AUTHORIZATION\"]        # => \"Basic abc123\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Request with RSpec\nDESCRIPTION: Example of an end-to-end request test using rack-test to verify route behavior in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    # Find me in `config/routes.rb`\n    get \"/\"\n\n    expect(last_response).to be_successful\n    expect(last_response.body).to eq(\"Hello from Hanami\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Last-Modified Conditional Requests in Hanami\nDESCRIPTION: Example of implementing Last-Modified based conditional requests in a Hanami action. Uses the fresh method with last_modified option to handle caching based on resource update time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/http-caching.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Show\n      class Index < Bookshelf::Action\n        include Deps['repositories.users']\n\n        def handle(request, response)\n          user = users.find(params[:id])\n\n          response.fresh last_modified: user.updated_at\n\n          # <request processing logic here>\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Log Filters in Hanami Ruby\nDESCRIPTION: This code demonstrates how to add custom keys to Hanami's log filtering mechanism to prevent sensitive information leakage. It appends a new key (`\"token\"`) to the existing list of filters (`config.logger.filters`) within the `Hanami::App` class configuration in `config/app.rb`. Hanami already filters `_csrf`, `password`, and `password_confirmation` by default.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.logger.filters = config.logger.filters + [\"token\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Create Action Setup\nDESCRIPTION: Initial setup of Hanami action for handling POST requests to create new books\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Named Routes in Hanami (Ruby)\nDESCRIPTION: Shows how to create named routes and use the generated path and URL helpers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\", as: :books\nget \"/books/:id\", to: \"books.show\", as: :book\n\nHanami.app[\"routes\"].path(:books)\n=> \"/books\"\n\nHanami.app[\"routes\"].url(:books)\n=> #<URI::HTTP http://0.0.0.0:2300/books>\n\nHanami.app[\"routes\"].path(:book, id: 1)\n=> \"/books/1\"\n```\n\n----------------------------------------\n\nTITLE: Adding Root Route in Hanami (Ruby)\nDESCRIPTION: This snippet updates the `config/routes.rb` file to define the application's root route. It maps the root path ('/') to the `home.index` action using the `root` helper.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Middleware at Specific Position\nDESCRIPTION: Demonstrates how to insert middleware at a specific position in the stack using the 'before:' option. This allows for fine-grained control over middleware order.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n    config.middleware.use Rack::ShowStatus, before: Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Query Scope Method within a Hanami/ROM Relation (Ruby)\nDESCRIPTION: Shows how to define a custom scope named `recent` as a simple method within the `Bookshelf::Relations::Books` class. This scope encapsulates a specific query condition (`where { publication_date > Date.new(2020, 1, 1) }`) for easy reuse. Scope methods must return a new relation object, allowing them to be chained.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true\n\n      def recent = where { publication_date > Date.new(2020, 1, 1) }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Database Migration via CLI (Shell)\nDESCRIPTION: This shell command uses the Hanami CLI to generate a new database migration file named `create_books`. Migration files are used to define and manage database schema changes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate migration create_books\n```\n\n----------------------------------------\n\nTITLE: Defining an Autoloadable SlackNotifier in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a SlackNotifier class in the lib/bookshelf directory, which can be autoloaded by Hanami without requiring explicit require statements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Settings with Default Values in Ruby\nDESCRIPTION: Demonstrates how to set default values for settings in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :redis_url, default: \"redis://localhost:6379\", constructor: Types::String\n    setting :analytics_enabled, default: false, constructor: Types::Params::Bool\n    setting :max_cart_items, default: 100, constructor: Types::Params::Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Base Action Exception Handling with Sentry Integration\nDESCRIPTION: Implements exception handling in a base Hanami action class with Sentry error reporting integration. All actions inheriting from this base class will have consistent error handling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/exception-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"sentry\"]\n\n    handle_exception StandardError => :handle_standard_error\n\n    private\n\n    def handle_standard_error(request, response, exception)\n      sentry.capture_exception(exception)\n\n      response.status = 500\n      response.body = \"Sorry, something went wrong handling your request\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Control Headers in Hanami Action\nDESCRIPTION: Demonstrates how to set Cache-Control response headers in a Hanami action. Uses the cache_control method to set public caching with a max age of 600 seconds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/http-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Cache-Control: public, max-age: 600`\n          response.cache_control :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for UUID as Primary Key in PostgreSQL with Hanami\nDESCRIPTION: This migration creates a 'project_files' table with a UUID as the primary key, using the uuid-ossp extension to generate UUIDs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  up do\n    execute 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"'\n\n    create_table :project_files do\n      primary_key :id, 'uuid', null: false, default: Hanami::Model::Sql.function(:uuid_generate_v4)\n      column :name, String\n    end\n  end\n\n  down do\n    drop_table :project_files\n    execute 'DROP EXTENSION IF EXISTS \"uuid-ossp\"'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Information in Hanami\nDESCRIPTION: Demonstrates various methods available on the request object to access information about the incoming HTTP request, including path, method, headers, and client information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/request-and-response.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.path_info                        # => \"/books\"\n          request.request_method                   # => \"GET\"\n          request.get?                             # => true\n          request.post?                            # => false\n          request.xhr?                             # => false\n          request.referer                          # => \"http://example.com/\"\n          request.user_agent                       # => \"Mozilla/5.0 Macintosh; ...\"\n          request.ip                               # => \"127.0.0.1\"\n          request.get_header(\"HTTP_AUTHORIZATION\") # => \"Basic abc123\"\n          request.env[\"HTTP_AUTHORIZATION\"]        # => \"Basic abc123\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Repository in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a basic repository class in a Hanami application. It inherits from ROM::Repository and includes the default struct namespaces.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Repository < Hanami::Repository\n  end\n end\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameters in Hanami Action\nDESCRIPTION: This snippet demonstrates how to access parameters in a Hanami action using the subscriber operator #[].\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          self.body = \"Query string: #{ params[:q] }\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cookie Settings in Hanami\nDESCRIPTION: This snippet shows how to configure default cookie settings application-wide in a Hanami app. Options include domain, path, max_age, secure, and httponly flags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = {\n      domain: \"hanami.example.com\",\n      secure: true,\n      httponly: true,\n      path: \"/foo\",\n      max_age: 300\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing a Relation Schema in Ruby\nDESCRIPTION: This example illustrates how to customize a relation schema by explicitly declaring attributes and using custom types. It shows how to override the inferred email attribute with a custom Email type.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users < Hanami::DB::Relation\n  schema :users, infer: true do\n    attribute :email, Types::Email\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Parameters for GET /books Endpoint in Ruby with RSpec\nDESCRIPTION: This RSpec test checks the behavior of the GET /books endpoint when provided with invalid pagination parameters. It verifies that a 422 Unprocessable response is returned with appropriate error messages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\ncontext \"given invalid page and per_page params\" do\n  it \"returns a 422 unprocessable response\" do\n    get \"/books?page=-1&per_page=3000\"\n\n    expect(last_response).to be_unprocessable\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq(\n      \"errors\" => {\n        \"page\" => [\"must be greater than 0\"],\n        \"per_page\" => [\"must be less than or equal to 100\"]\n      }\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Action-Specific Validations in Hanami\nDESCRIPTION: This example illustrates how to define action-specific parameter validations in Hanami. It uses the params do block to specify required parameters and their types.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Books\n  class Create < Action\n    params do\n      required(:title).filled(:string)\n      required(:author).filled(:string)\n    end\n\n    def handle(request, response)\n      if request.params.valid?\n        # Create book...\n      else\n        # Handle validation errors...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action with Dependency Injection in Ruby\nDESCRIPTION: This snippet shows the implementation of a Hanami action that uses dependency injection for a user repository. It includes parameter validation and calls the injected repository to create a book.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Action\n        include Deps[\"user_repo\"]\n\n        params do\n          required(:book).hash do\n            required(:title).value(:string)\n          end\n        end\n\n        def handle(request, response)\n          book = user_repo.create(request.params[:book])\n\n          response.body = book.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Non-Registered Classes in Hanami Operations (Ruby)\nDESCRIPTION: Shows how to use a non-registered class (SlackNotifier) within a Hanami operation. This example demonstrates the usage of both container-registered dependencies and the non-registered SlackNotifier.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n\n        SlackNotifier.notify(\"Welcome email sent to #{email_address}\")\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami App with JSON Body Parser\nDESCRIPTION: Basic Hanami application configuration that enables JSON body parsing middleware for handling request payloads\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Default Filtering Condition (`where`) in a Hanami/ROM Relation Dataset (Ruby)\nDESCRIPTION: Illustrates defining a default `dataset` within a Hanami::DB::Relation class (`Bookshelf::Relations::Books`) to apply an automatic filter. This example uses `dataset { where(archived_at: nil) }` to exclude records that have a non-NULL `archived_at` timestamp by default, simulating soft deletion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true\n\n      dataset { where(archived_at: nil) }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Connection in Hanami (Ruby)\nDESCRIPTION: This code snippet shows how to initialize the database connection in a Hanami application. It uses the ROM configuration to set up the connection and register it with the container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nrequire \"hanami/config/app\"\n\nmodule MyApp\n  class App < Hanami::Config::App\n    config.environment = :development\n\n    config.settings do\n      Settings\n    end\n\n    config.container do |container|\n      container.auto_register = %w[app lib]\n\n      container.register(\"database\") do\n        db_config = ROM::Configuration.new(:sql, container[\"settings\"].database_url)\n        ROM.container(db_config)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Email Client Provider in Hanami\nDESCRIPTION: Example of creating a provider to register an email client service. Shows configuration using API keys and registering the client in the container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/providers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/email_client.rb\n\nHanami.app.register_provider(:email_client) do\n  prepare do\n    require \"acme_email/client\"\n  end\n\n  start do\n    client = AcmeEmail::Client.new(\n      api_key: target[\"settings\"].acme_api_key,\n      default_from: \"no-reply@bookshelf.example.com\"\n    )\n\n    register \"email_client\", client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing a Dataset in a Relation\nDESCRIPTION: This example shows how to customize the default dataset for a relation. It demonstrates selecting specific columns and ordering the results.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Users < Hanami::DB::Relation\n  schema(:users, infer: true)\n\n  dataset do\n    select(:id, :name).order(:name)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Hanami Actions\nDESCRIPTION: This snippet demonstrates how to set cookies on outgoing HTTP responses in a Hanami action. The response object provides a cookies hash where you can assign values to set cookies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Base Action Class in Ruby\nDESCRIPTION: This snippet shows the implementation of the base Action class for the Bookshelf application. It includes exception handling for ROM::TupleCountMismatchError and sets up a common not found response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nrequire \"rom\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    # Provide `Success` and `Failure` for pattern matching on operation results\n    include Dry::Monads[:result]\n\n    handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n    private\n\n    def handle_not_found(request, response, exception)\n      response.status = 404\n      response.format = :html\n      response.body = \"Not found\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Route Names in Hanami Ruby Application\nDESCRIPTION: This snippet illustrates how to customize route names in Hanami. It shows examples of using the 'as:' option to provide custom names for routes and resources.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule MyApp\n  class Routes < Hanami::Routes\n    get \"/books\", to: \"books.index\", as: :all_books\n    resource :authors, as: :writers\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Exposures from Hanami Views with RSpec (Ruby)\nDESCRIPTION: Shows how to test direct access to exposures returned by Hanami views using RSpec. After invoking the view with test data, specific keys (such as current_user and user) are checked on the rendered object to confirm correct exposure. Requires RSpec, Hanami view configured to expose those properties, and suitable test doubles with stubbing. Verifies the Hanami::View::Rendered object values, not the textual output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe \"exposures\" do\n  subject(:rendered) { view.call(current_user: current_user, id: 1) }\n\n  let(:user) { double(:user, name: \"Amy\", id: 1) }\n\n  before do\n    allow(users_repo).to receive(:by_id).with(1).and_return(user)\n  end\n\n  it \"exposes current_user\" do\n    expect(rendered[:current_user].name).to eq(current_user.name)\n  end\n\n  it \"exposes user\" do\n    expect(rendered[:user].id).to eq(user.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Action with Automatic View Rendering\nDESCRIPTION: Demonstrates the basic structure of a Hanami action that automatically renders its corresponding view. The action will automatically find and render the Pages::Contact view without explicit configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-from-actions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index RSpec Feature Test\nDESCRIPTION: RSpec feature test for verifying the books index page displays a list of books correctly\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.feature \"Books index\" do\n  let(:books) { Hanami.app[\"relations.books\"] }\n\n  before do\n    books.insert(title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\")\n    books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n  end\n\n  it \"shows a list of books\" do\n    visit \"/books\"\n\n    expect(page).to have_selector \"li\", text: \"Test Driven Development, by Kent Beck\"\n    expect(page).to have_selector \"li\", text: \"Practical Object-Oriented Design in Ruby, by Sandi Metz\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistence Provider in Hanami\nDESCRIPTION: This Ruby code configures a persistence provider for a Hanami application using rom-rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider :persistence, namespace: true do\n  prepare do\n    require \"rom\"\n\n    config = ROM::Configuration.new(:sql, target[\"settings\"].database_url)\n\n    register \"config\", config\n    register \"db\", config.gateways[:default].connection\n  end\n\n  start do\n    config = target[\"persistence.config\"]\n\n    config.auto_registration(\n      target.root.join(\"lib/bookshelf/persistence\"),\n      namespace: \"Bookshelf::Persistence\"\n    )\n\n    register \"rom\", ROM.container(config)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Repository in Ruby\nDESCRIPTION: This snippet shows the implementation of a BookRepo class with a create method for adding new books to the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_48\n\nLANGUAGE: ruby\nCODE:\n```\n# app/repos/book_repo.rb\n\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def create(attributes)\n        books.changeset(:create, attributes).commit\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing books index action with ROM integration\nDESCRIPTION: Hanami action for the books index endpoint that retrieves books from the database using ROM and returns them as JSON. Uses dependency injection to access the ROM container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        def handle(*, response)\n          books = rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .to_a\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action\nDESCRIPTION: This command generates an action in Hanami 2.2. The example creates a 'show' action for the 'books' resource. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.show\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action --help\n```\n\n----------------------------------------\n\nTITLE: Aliasing Relations in Hanami\nDESCRIPTION: This snippet shows how to alias a relation and its associations in Hanami, which is useful when the table name differs from the desired relation name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Authorships < Hanami::DB::Relation\n      schema :books_authors, infer: true, as: :authorships\n    end\n\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true do\n        associations do\n          has_many :books_authors, as: :authorships, relation: :authorships\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Migration in Hanami (Ruby)\nDESCRIPTION: This code snippet shows how to define a database migration in a Hanami application. It creates a new table called 'books' with specific columns and constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20230601_create_books.rb\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :string, null: false\n      column :author, :string, null: false\n      column :published_date, :date\n      column :created_at, :datetime, null: false, default: Sequel::CURRENT_TIMESTAMP\n      column :updated_at, :datetime, null: false, default: Sequel::CURRENT_TIMESTAMP\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Sessions in Hanami Actions\nDESCRIPTION: This code snippet illustrates how to use sessions within a Hanami action. It shows setting a value in the session, reading a value from the session, and removing a value from the session using the response and request objects.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Setting a value in the session\n          response.session[:user_id] = 1\n\n          # Reading a value from the session\n          request.session[:user_id] # => 1\n\n          # Removing a value from the session\n          request.session[:user_id] = nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Injecting an Explicit View Dependency into a Hanami Action in Ruby\nDESCRIPTION: This snippet shows how to explicitly declare a view dependency in a Hanami action `Bookshelf::Actions::Pages::Contact` using the `Deps` mixin. It injects the view registered under the key `\"views.pages.contact\"` as the `view` dependency, making the connection between the action and view explicit rather than relying on convention.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-from-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        include Deps[view: \"views.pages.contact\"]\n\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Hanami Settings Class\nDESCRIPTION: This snippet demonstrates how to add custom methods to the Settings class in a Hanami application to encapsulate settings-related logic.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, default: false, constructor: Types::Params::Bool\n    setting :analytics_api_key, constructor: Types::String.optional\n\n    def send_analytics?\n      analytics_enabled && !analytics_api_key.nil?\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Launching Hanami Development Server\nDESCRIPTION: Demonstrates how to start the Hanami development server using the 'hanami server' command. The server runs on port 2300 in development mode with code reloading enabled.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/server.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server\n\n12:30:50 - INFO - Using Guardfile at bookshelf/Guardfile.\n12:30:50 - INFO - Puma starting on port 2300 in development environment.\n12:30:50 - INFO - Guard is now watching at 'bookshelf'\nPuma starting in single mode...\n* Puma version: 6.4.0 (ruby 3.2.2-p53) (\"The Eagle of Durango\")\n*  Min threads: 5\n*  Max threads: 5\n*  Environment: development\n*          PID: 93401\n* Listening on http://0.0.0.0:2300\n* Starting control server on http://127.0.0.1:9293\n* Starting control server on http://[::1]:9293\nUse Ctrl-C to stop\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL Queries in Hanami Repository (Ruby)\nDESCRIPTION: Shows how to perform queries with raw SQL using the read method in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  def all_by_sql\n    users.read(\"SELECT * FROM users\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Different HTTP Verbs in Hanami\nDESCRIPTION: This snippet illustrates how to define routes for different HTTP verbs (GET, POST, PATCH, DELETE) in a Hanami application. It shows routing for CRUD operations on a 'books' resource.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    get \"/books\", to: \"books.index\"\n    post \"/books\", to: \"books.create\"\n    get \"/books/:id\", to: \"books.show\"\n    patch \"/books/:id\", to: \"books.update\"\n    delete \"/books/:id\", to: \"books.destroy\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing a Hanami View using RSpec (Ruby)\nDESCRIPTION: This Ruby code shows an RSpec test (`spec/views/home/show_spec.rb`) for the `Bookshelf::Views::Home::Show` view. It instantiates the view, calls its `call` method to get the rendered output, and then uses RSpec's `expect` and `match` assertions to verify that the output string contains the expected HTML heading.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/views/home/show_spec.rb\n\nRSpec.describe Bookshelf::Views::Home::Show do\n  subject(:view) { described_class.new }\n\n  describe \"#call\" do\n    subject(:output) { view.call }\n\n    it \"renders a welcome heading\" do\n      expect(output.to_s).to match \"<h1>Welcome to Bookshelf</h1>\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Session Handling in Hanami Actions\nDESCRIPTION: Example showing how to set, read, and remove session values within a Hanami action using request and response objects.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Setting a value in the session\n          response.session[:user_id] = 1\n\n          # Reading a value from the session\n          request.session[:user_id] # => 1\n\n          # Removing a value from the session\n          request.session[:user_id] = nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Input to Hanami View via Response Object Properties (Ruby)\nDESCRIPTION: This alternative implementation of the `Bookshelf::Actions::Books::Index` action shows another way to provide input to the view. It assigns the `page` and `per_page` values from request parameters directly to the `response` object using hash-like assignment (`response[:page] = ...`). These values are implicitly available as input when the view is rendered.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response[:page] = request.params[:page]\n          response[:per_page] = request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Named Route Redirect in Hanami Action\nDESCRIPTION: Example of using a named route helper for redirection in an action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.redirect_to routes.path(:sign_in)\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Bucket Provider with Dependencies\nDESCRIPTION: Demonstrates creating a provider that depends on other providers and container components for AWS S3 bucket configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/providers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider(:uploads_bucket) do\n  prepare do\n    require \"aws-sdk-s3\"\n  end\n\n  start do\n    target.start(:metrics)\n\n    uploads_bucket_name = target[\"settings\"].uploads_bucket_name\n\n    credentials = Aws::Credentials.new(\n      target[\"settings\"].aws_access_key_id,\n      target[\"settings\"].aws_secret_access_key,\n    )\n\n    uploads_bucket = Aws::S3::Resource.new(credentials: credentials).bucket(uploads_bucket_name)\n\n    register \"uploads_bucket\", uploads_bucket\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Database Constraints with Sequel Syntax (Ruby)\nDESCRIPTION: Shows how to define database constraints using Sequel's Ruby DSL within a `create_table` block. This example adds a check constraint to ensure the `name` column's length is greater than 2 characters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :users do\n  primary_key :id\n  column :name, String, null: false\n  constraint(:name_min_length) { char_length(name) > 2 }\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Book Creation Endpoint with RSpec - Ruby\nDESCRIPTION: This RSpec spec verifies POST /books for both valid and invalid parameters. Expects creation of books and 422 errors for unprocessable entities. Assumes app parses JSON and DB is accessible. Tests for correct HTTP status based on inputs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/create_spec.rb\n\nRSpec.describe \"POST /books\", type: [:request, :database] do\n  let(:request_headers) do\n    {\"HTTP_ACCEPT\" => \"application/json\", \"CONTENT_TYPE\" => \"application/json\"}\n  end\n\n  context \"given valid params\" do\n    let(:params) do\n      {book: {title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\"}}\n    end\n\n    it \"creates a book\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_created\n    end\n  end\n\n  context \"given invalid params\" do\n    let(:params) do\n      {book: {title: nil}}\n    end\n\n    it \"returns 422 unprocessable\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_unprocessable\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Action Class in Ruby for Hanami\nDESCRIPTION: This snippet defines a base action class for Hanami applications. It includes authentication, JSON formatting, and a before callback for user authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    include Deps[\"authenticator\"]\n\n    format :json\n\n    before :authenticate_user!\n\n    private\n\n    def authenticate_user!(request, response)\n      halt 401 unless authenticator.valid_api_token?(request.headers[\"X-API-Token\"])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Settings in Ruby for Hanami Application\nDESCRIPTION: This snippet demonstrates how to define optional settings in a Hanami application's Settings class using the 'optional' method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, constructor: Types::Params::Bool.optional\n    setting :max_cart_items, constructor: Types::Params::Integer.optional\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Parameters in Hanami\nDESCRIPTION: Demonstrates how to safely access nested parameters using the #dig method in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.params.dig(:book, :title)             # => \"Hanami\"\nrequest.params.dig(:deeply, :nested, :param)  # => nil instead of NoMethodError\n```\n\n----------------------------------------\n\nTITLE: Hanami Routes Configuration\nDESCRIPTION: Route configuration for the book management API defining endpoints for listing, showing and creating books\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_31\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL in Migrations (Ruby with SQL)\nDESCRIPTION: Demonstrates using the `execute` method to run raw SQL statements within a migration. This is useful for complex operations not easily expressible in Sequel's DSL, such as creating database triggers. Requires explicit `up` and `down` blocks as reversal cannot be inferred.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nROM::SQL.migration do\n  up do\n    execute <<~SQL\n        CREATE TRIGGER posts_tsvector_update()\n        BEFORE INSERT OR UPDATE ON public.posts\n        FOR EACH ROW\n        WHEN (\n          OLD.title IS DISTINCT FROM NEW.title OR\n          OLD.content IS DISTINCT FROM NEW.content\n        )\n        EXECUTE PROCEDURE tsvector_update_trigger(search_tsvector, 'public.english', title, content)\n    SQL\n  end\n\n  down do\n    execute \"DROP TRIGGER posts_tsvector_update() ON public.posts\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Middleware at Specific Position in Hanami Ruby Application\nDESCRIPTION: This snippet shows how to insert middleware at a specific position in the middleware stack of a Hanami application. It uses the 'before:' option to place the new middleware before an existing one.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/app-config.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, before: AlreadyAddedMiddleware\n```\n\n----------------------------------------\n\nTITLE: Separate Parameter Validation Class\nDESCRIPTION: Shows how to extract parameter validation logic into a separate reusable class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      module Params\n        class Create < Hanami::Action::Params\n          params do\n            required(:email).filled(:string)\n            required(:password).filled(:string)\n\n            required(:address).hash do\n              required(:street).filled(:string)\n              required(:country).filled(:string)\n            end\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hanami Entity Class\nDESCRIPTION: Creating a Book entity class that inherits from Hanami::Entity. The schema will be automatically derived from the database table definition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/entities/book.rb\nclass Book < Hanami::Entity\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Exposures in Hanami Controller Actions\nDESCRIPTION: This example demonstrates how to expose specific variables from a controller action to a view in Hanami. The controller exposes the 'greeting' variable while keeping 'foo' private, illustrating Hanami's explicit data sharing approach.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/exposures.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        expose :greeting\n\n        def call(params)\n          @greeting = \"Hello\"\n          @foo      = 23\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom RESTful Routes in Hanami\nDESCRIPTION: This example illustrates how to customize RESTful routes in Hanami. It shows how to add additional routes to a resource and exclude standard routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nHanami.app do\n  slice :main, at: '/' do\n    resources :books, only: [:index, :show] do\n      collection do\n        get 'recent'\n      end\n      member do\n        get 'reviews'\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SendWelcomeEmail Operation with Hanami Deps Mixin\nDESCRIPTION: Demonstrates the use of Hanami's Deps mixin for automatic dependency injection in the SendWelcomeEmail operation, simplifying the component's structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv for Environment Variables in Hanami\nDESCRIPTION: This code demonstrates how to use dotenv to manage environment variables for different environments in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# .env.development\n$ DATABASE_URL=postgres://localhost:5432/bookshelf_development\nANALYTICS_ENABLED=true\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=development bundle exec hanami console\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].database_url\n=> \"postgres://localhost:5432/bookshelf_development\"\n\nbookshelf[development]> Hanami.app[\"settings\"].analytics_enabled\n=> true\n```\n\n----------------------------------------\n\nTITLE: Inheriting from a Base Action Class in Hanami\nDESCRIPTION: Demonstrates how to create an action that inherits from a base class, automatically gaining all the functionality defined in the parent class including dependencies, formatting and authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding RSpec Test for Invalid Pagination Parameters in Ruby\nDESCRIPTION: This RSpec test case is added to `spec/requests/books/index/pagination_spec.rb`. It verifies the behavior when invalid pagination parameters are provided (`page=-1`, `per_page=3000`). It asserts that the response status is 422 Unprocessable and that the JSON response body contains specific error messages for both the `page` and `per_page` parameters, indicating the validation failures.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/index/pagination_spec.rb\n\ncontext \"given invalid page and per_page params\" do\n  it \"returns a 422 unprocessable response\" do\n    get \"/books?page=-1&per_page=3000\"\n\n    expect(last_response).to be_unprocessable\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq(\n      \"errors\" => {\n        \"page\" => [\"must be greater than 0\"],\n        \"per_page\" => [\"must be less than or equal to 100\"]\n      }\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Response Hanami Action\nDESCRIPTION: Example of a Hanami action implementation that returns JSON response with an ID parameter.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Show < Action\n        format :json\n\n        def handle(request, response)\n          response.body = {id: request.params[:id]}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building HTML Tags with Tag Builder in Ruby\nDESCRIPTION: Demonstrates using the 'tag' helper to create various HTML tags with content and attributes. The method supports nested tags, custom tags, and automatic HTML escaping.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/html.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div # => <div></div>\ntag.img # => <img>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(\"hello\")            # => <div>hello</div>\ntag.div { \"hello\" }         # => <div>hello</div>\ntag.div(tag.p(\"hello\"))     # => <div><p>hello</p></div>\ntag.div { tag.p(\"hello\") }  # => <div><p>hello</p></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(class: \"a\") # => <div class=\"a\"></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(class: [\"a\", \"b\"])              # => <div class=\"a b\"></div>\ntag.div(class: {\"a\": true, \"b\": false}) # => <div class=\"a\"></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.custom_tag(\"hello\") # => <custom-tag>hello</custom-tag>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.p(\"<script>alert()</script>\")\n# => <p>&lt;script&gt;alert()&lt;/script&gt;</p>\n\ntag.p(class: \"<script>alert()</script>\")\n# => <p class=\"&lt;script&gt;alert()&lt;/script&gt;\"></p>\n\ntag.p(\"<em>safe content</em>\".html_safe)\n# => <p><em>safe content</em></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Formatter for Hanami Logger in Ruby\nDESCRIPTION: This snippet demonstrates how to set the JSON formatter for the Hanami logger across all environments by modifying the App configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    # This would change formatter for all environments to `:json`\n    config.logger.formatter = :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Complex Parameter Validation Example\nDESCRIPTION: Demonstrates validation of nested parameters with required fields and type constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Create < Bookshelf::Action\n        params do\n          required(:email).filled(:string)\n          required(:password).filled(:string)\n\n          required(:address).hash do\n            required(:street).filled(:string)\n            required(:country).filled(:string)\n          end\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          request.params[:email]             # => \"alice@example.org\"\n          request.params[:password]          # => \"secret\"\n          request.params[:address][:country] # => \"Italy\"\n\n          request.params[:admin]             # => nil\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTful Resource Routes in Hanami\nDESCRIPTION: This snippet illustrates how to set up RESTful resource routes in Hanami. It shows the use of the 'resource' and 'resources' helpers to generate standard CRUD routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    resource :account\n    resources :books\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Repository Method Using Email\nDESCRIPTION: This snippet shows a repository method for finding a user by email. It demonstrates the use of the 'where' clause and the 'one' method to retrieve a single record.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepo < Hanami::DB::Repo\n  def find(email) = users.where(email:).one\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Reversible Migration using `change` (Ruby)\nDESCRIPTION: Demonstrates creating a database table using the `change` method within a `ROM::SQL.migration` block. Sequel automatically infers the reverse (`down`) migration for simple operations like `create_table`. This example creates a `users` table with several columns and a foreign key.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nROM::SQL.migration do\n  change do\n    create_table :users do\n      primary_key :id\n      foreign_key :account_id, :accounts, on_delete: :cascade, null: false\n\n      column :given_name, String, null: false\n      column :family_name, String, null: false\n      column :email, \"citext\", null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Cookie Settings Per Cookie in Hanami\nDESCRIPTION: This snippet demonstrates how to set custom properties for individual cookies that override the global cookie settings. A hash is used with a 'value' key for the cookie value and additional property overrides.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n\n          response.cookies[\"longer_lived_cookie\"] = {\n            value: \"anzac_biscuit\",\n            max_age: 604800\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for CDN in Hanami Ruby\nDESCRIPTION: This code snippet illustrates how to modify the Content Security Policy to allow JavaScript execution from a CDN. It adds the CDN URL to the script_src policy and sets the assets base URL.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/using-a-cdn.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.actions.content_security_policy[:script_src] += \" https://some-cdn.net\"\n      config.assets.base_url = \"https://some-cdn.net/my-site\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Relation in Ruby for Hanami\nDESCRIPTION: This snippet shows how to define a basic relation for a 'Books' table in a Hanami application. It demonstrates the basic structure of a relation class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Located in app/relations/books.rb\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Secret in Hanami Settings\nDESCRIPTION: This snippet demonstrates how to add a session_secret setting to the Hanami application's settings file. It uses Types::String as the constructor for the setting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :session_secret, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Illustrating Sequel Column Definition Syntax Variations (Ruby)\nDESCRIPTION: Demonstrates various ways to define table columns within a Sequel migration's `create_table` block, including using the `column` method with explicit or inferred SQL types, helper methods like `text`, and Ruby type methods like `String`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :users do\n  # column method, explicit SQL type\n  column :email, \"varchar(255)\", null: false\n\n  # column method, inferred SQL type: varchar(255)\n  column :email, String, null: false\n\n  # helper method, no inference, SQL type: text\n  text :email, null: false\n\n  # Ruby type method, inferred SQL type: varchar(255)\n  String :email, null: false\nend\n```\n\n----------------------------------------\n\nTITLE: Exception Logging with Additional Context\nDESCRIPTION: Shows how to log exceptions with additional contextual information in the payload.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e, component: \"admin\")\nend\n```\n\n----------------------------------------\n\nTITLE: Equivalent `fetch` Method for Primary Key Lookup in ROM (Ruby)\nDESCRIPTION: Presents the `fetch` method as another concise alternative for looking up a record by its primary key, often considered shorthand for `by_pk(...).one` or `where(pk: ...).one`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.fetch(1)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Parameters in Hanami Action\nDESCRIPTION: Demonstrates how to access request parameters in a Hanami action using the #params method on the request object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Session-based Authentication in Hanami Action\nDESCRIPTION: Demonstrates a Hanami action implementation with session-based authentication using current_account. The action includes a before filter for authentication and redirects unauthorized users to the login page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        expose :current_account\n\n        before :authenticate!\n\n        def call(params)\n          redirect\n        end\n\n        private\n\n        def authenticate!\n          redirect_to('/login') unless current_account\n        end\n\n        def current_account\n          @current_account ||= AccountRepository.new.find(session[:account_id])\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Base Hanami Action with Exception Handling\nDESCRIPTION: This snippet shows how to create a base Hanami action class with common exception handling logic for ROM::TupleCountMismatchError.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_39\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\n# auto_register: false\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    config.handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n    private\n\n    def handle_not_found(_request, response, _exception)\n      response.status = 404\n      response.format = :json\n      response.body = {error: \"not_found\"}.to_json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Context and Delegating Methods in a Hanami Scope Class - Ruby\nDESCRIPTION: This example shows how a scope class method can access the rendering context (such as `routes`) via `context`, and build URLs or invoke context-specific methods. The method `item_url` constructs a path using data from the local `item` and the context's routing object. Requires properly set up context delegation and routing configuration within the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\\n  def item_url\\n    # `item` is a local, and `routes` is a method on the context\\n    routes.path(:item, item.id)\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Method Utilizing Request Data in Context (Ruby)\nDESCRIPTION: Demonstrates adding a custom method (`current_path?`) to the `Bookshelf::Views::Context` class. This method leverages the standard context's `#request` method to compare the given path with the current request's full path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      def current_path?(path)\n        request.fullpath == path\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a ROM Relation for Books\nDESCRIPTION: This snippet defines a ROM relation for the books table, including pagination support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/persistence/relations/books.rb\n\nmodule Bookshelf\n  module Persistence\n    module Relations\n      class Books < ROM::Relation[:sql]\n        schema(:books, infer: true)\n\n        use :pagination\n        per_page 5\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Proc Callbacks in Hanami Action\nDESCRIPTION: Shows how to implement a before callback using a proc instead of a method. The proc validates parameters and halts execution with a 422 status if validation fails.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before { |request, response| halt 422, request.params.errors.to_h unless request.params.valid? }\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Explicitly Rendering a Hanami View with Custom Input in Ruby\nDESCRIPTION: This snippet demonstrates explicit view rendering within a Hanami action `Bookshelf::Actions::Pages::Contact`. Instead of relying on automatic rendering, it calls `response.render`, passing the `view` dependency and a custom input hash (`page: params[:page]`) which overrides the default behavior of passing all request parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-from-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        def handle(request, response)\n          response.render(view, page: params[:page])\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Default Cookie Options in Hanami Application\nDESCRIPTION: Shows how to configure global cookie settings in the Hanami application configuration. In this example, the max_age is set to 300 seconds (5 minutes) for all cookies unless overridden.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      cookies max_age: 300 # 5 minutes\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining BookRepo with Query Method in Ruby\nDESCRIPTION: This Ruby code defines the `Bookshelf::Repos::BookRepo` class, inheriting from `Bookshelf::DB::Repo`. It implements an `all_by_title` method that retrieves all books from the database, specifically selecting the `title` and `author` columns, orders them by title ascending, and returns the result as an array.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# app/repos/book_repo.rb\n\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def all_by_title\n        books\n          .select(:title, :author)\n          .order(books[:title].asc)\n          .to_a\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in Hanami\nDESCRIPTION: This code snippet shows how to create named routes in Hanami. Named routes allow for easier reference and generate path helpers for use in views and controllers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire 'hanami/router'\n\napp = Hanami::Router.new do\n  get '/', to: ->(env) { [200, {}, ['Home']] }, as: :home\n  get '/dashboard', to: ->(env) { [200, {}, ['Dashboard']] }, as: :dashboard\nend\n\nrun app\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Level Middleware in Hanami\nDESCRIPTION: Illustrates how to add middleware at the application level using the config.middleware.use method in the Hanami app configuration file. This allows for global middleware configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers in Hanami Actions\nDESCRIPTION: This snippet demonstrates how to set Cache-Control HTTP headers in a Hanami action response. It shows setting public caching with a max-age of 600 seconds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/http-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Cache-Control: public, max-age: 600`\n          response.cache_control :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Route Scopes in Hanami (Ruby)\nDESCRIPTION: Shows how to use route scopes to group related routes under a common namespace.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    scope \"about\" do\n      get \"/contact-us\", to: \"content.contact_us\" # => /about/contact-us\n      get \"/faq\", to: \"content.faq\" # => /about/faq\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Halt Implementation in Hanami\nDESCRIPTION: Simple example of halting action execution with an unauthorized status code and custom message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 401, \"You are not authorized\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Persistence in Interactor\nDESCRIPTION: Final implementation of the call method in the AddBook interactor that uses BookRepository to create and persist a book record.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndef call(book_attributes)\n  @book = BookRepository.new.create(book_attributes)\nend\n```\n\n----------------------------------------\n\nTITLE: Using Halt for Flow Control in Hanami Action\nDESCRIPTION: This snippet demonstrates the use of the halt method to interrupt the execution flow in a Hanami action. It's used to return a 401 status code if the user is not authenticated.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/control-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          halt 401 unless authenticated?\n          # ...\n        end\n\n        private\n        def authenticated?\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fixed Path Matching in Hanami Routes\nDESCRIPTION: Demonstrates basic fixed path routing to map a URL to a controller action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nget '/dashboard', to: \"dashboard#index\"\n```\n\n----------------------------------------\n\nTITLE: Unit Testing Hanami View Parts (Ruby)\nDESCRIPTION: Defines a view part class in Hanami with a custom display_name method combining user name and email, and provides an RSpec test that ensures this formatting. Includes use of test doubles and part initialization with value. Requires Hanami part base class and RSpec. Main focus is confirming string formatting by the part when given a user mock.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Parts\n      class User < MyApp::Views::Part\n        def display_name\n          \"#{name} (#{email})\"\n        end\n      end\n    end\n  end\nend\n\nRSpec.describe(MyApp::Views::Parts::User) do\n  subject(:part) { described_class.new(value: user) }\n  let(:user) { double(:user, name: \"Amy\", email: \"amy@example.com\"}\n\n  describe \"#display_name\" do\n    it \"includes the name and email\" do\n      expect(part.display_name).to eq \"Amy (amy@example.com)\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Non-Registered Class in Hanami Operations (Ruby)\nDESCRIPTION: Demonstrates how to use a non-registered class (SlackNotifier) within a Hanami operation. This example shows the SendWelcomeEmail operation using both container-registered and non-registered dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n\n        SlackNotifier.notify(\"Welcome email sent to #{email_address}\")\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating User with Avatar in Hanami\nDESCRIPTION: Example code showing how to create a user with associated avatar using the repository methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrepository = UserRepository.new\n\nuser = repository.create_with_avatar(name: \"Luca\", avatar: { url: \"https://avatars.test/luca.png\" })\n  # => #<User:0x00007fa166ac8550 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC, :avatar=>#<Avatar:0x00007fa166ac35c8 @attributes={:id=>1, :user_id=>1, :url=>\"https://avatars.test/luca.png\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC}>}>\n\nuser.id\n  # => 1\n\nuser.name\n  # => \"Luca\"\n\nuser.avatar\n  # => #<Avatar:0x00007fa166ac35c8 @attributes={:id=>1, :user_id=>1, :url=>\"https://avatars.test/luca.png\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Testing Exposures in Hanami Actions\nDESCRIPTION: This test example demonstrates how to verify the exposed values in a Hanami action. It checks both individual exposures and the complete exposures hash.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/controllers/users/show_spec.rb\nrequire_relative '../../../../apps/web/controllers/users/show'\n\nRSpec.describe Web::Controllers::Users::Show do\n  let(:user) { UserRepository.new.create(name: 'Luca') }\n  let(:action)  { Web::Controllers::Users::Show.new }\n\n  it \"is successful\" do\n    response = action.call(id: user.id)\n\n    expect(response[0]).to be(200)\n\n    action.user.must_equal user\n    action.exposures.must_equal({user: user, foo: 'bar'})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Current Environment with Hanami.env\nDESCRIPTION: Demonstrates how to use Hanami.env to get the current environment as a symbol. The method returns the value of HANAMI_ENV as a symbol.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env\n=> :development\n```\n\n----------------------------------------\n\nTITLE: Integrating Dependencies in Hanami View Class using Deps Mixin\nDESCRIPTION: Demonstrates how to include dependencies in a Hanami view class using the Deps mixin. The example shows a Books::Show view that depends on a book repository and exposes a book object based on an ID parameter.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/working-with-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\"repositories.book_repo\"]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Request Spec for Book Show Endpoint - Ruby\nDESCRIPTION: Defines an RSpec request spec for the GET /books/:id endpoint. Tests both the case where a matching book is found (returns 200 and book details as JSON) and where no matching book is found (returns 404 and an error JSON). Requires RSpec, JSON support, and a prepopulated test database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books/:id\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  context \"when a book matches the given id\" do\n    let!(:book_id) do\n      books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n    end\n\n    it \"renders the book\" do\n      get \"/books/#{book_id}\"\n\n      expect(last_response).to be_successful\n      expect(last_response.content_type).to eq(\"app/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"id\" => book_id, \"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\"\n      )\n    end\n  end\n\n  context \"when no book matches the given id\" do\n    it \"returns not found\" do\n      get \"/books/#{books.max(:id).to_i + 1}\"\n\n      expect(last_response).to be_not_found\n      expect(last_response.content_type).to eq(\"app/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"error\" => \"not_found\"\n      )\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Email Client Provider Implementation in Ruby\nDESCRIPTION: Demonstrates creating a provider for registering an email client service. Shows how to prepare dependencies and configure the client with settings from the application container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/providers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/email_client.rb\n\nHanami.app.register_provider(:email_client) do\n  prepare do\n    require \"acme_email/client\"\n  end\n\n  start do\n    client = AcmeEmail::Client.new(\n      api_key: target[\"settings\"].acme_api_key,\n      default_from: \"no-reply@bookshelf.example.com\"\n    )\n\n    register \"email_client\", client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Dependencies with Deps Mixin in Hanami (Ruby)\nDESCRIPTION: This snippet demonstrates using the `Deps` mixin in a Hanami operation (`SendWelcomeEmail`) to inject dependencies. It shows how to inject a dependency with its standard key (`\"email_client\"`) and how to rename another dependency (`\"renderers.welcome_email\"`) to a more convenient local alias (`email_renderer`). The aliased dependency is then used within the `call` method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby title=\"app/operations/send_welcome_email.rb\"\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        email_renderer: \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Test Environment Settings in Hanami Console (Ruby)\nDESCRIPTION: Ruby code demonstrating how to access environment variables loaded from `.env` files within the Hanami console running in the test environment. It retrieves `database_url` and `analytics_enabled` settings using `Hanami.app[\"settings\"]`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[test]> Hanami.app[\"settings\"].database_url\n=> \"postgres://localhost:5432/bookshelf_test\"\n\nbookshelf[test]> Hanami.app[\"settings\"].analytics_enabled\n=> false\n```\n\n----------------------------------------\n\nTITLE: Accessing Request from View Context in a Helper - Ruby\nDESCRIPTION: Defines a helper method that consults the Hanami view context’s request object to check if a path matches the current request path. Requires that _context.request is available in contexts where views are rendered within an action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\ndef current_path?(path)\n  path == _context.request.fullpath\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Query Method in a Hanami Repository\nDESCRIPTION: This example demonstrates how to create a custom query method in a Hanami repository to fetch the most recent books by an author, improving code organization and abstraction.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/book_repository.rb\nclass BookRepository < Hanami::Repository\n  def most_recent_by_author(author, limit: 8)\n    books\n      .where(author_id: author.id)\n      .order(:published_at)\n      .limit(limit)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami App Session Configuration\nDESCRIPTION: Configuration for enabling cookie-based sessions in Hanami application\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Many-to-One Association in Hanami Relation\nDESCRIPTION: This example demonstrates how to define a many-to-one association between books and languages in Hanami relations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true do\n        associations do\n          belongs_to :language\n        end\n      end\n    end\n\n    class Languages < Hanami::DB::Relation\n      schema :languages, infer: true do\n        associations do\n          has_many :books\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Dependencies via Deps in Hanami View (Ruby)\nDESCRIPTION: This snippet demonstrates how to declare a Hanami view class (Show) that uses the Deps mixin to inject the book_repo dependency. The class exposes a :book method, which retrieves a book by ID using the injected repository. Dependencies required are Hanami (minimum v2.2), with book_repo defined in the container. The 'id' parameter is expected as input, and the output is the retrieved book object; this relies on the consistent interface of the repo. The code must be placed under app/views/books/show.rb, following Hanami conventions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/working-with-dependencies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec spec_helper for Hanami Application - Ruby\nDESCRIPTION: Demonstrates setting up the spec_helper.rb file to initialize the SPEC_ROOT constant using Pathname and autoload all support files recursively. No external dependencies except Ruby stdlib Pathname are required. The SPEC_ROOT.glob line ensures test helper files in support/ are loaded, enabling modularized rspec configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"pathname\\\"\\nSPEC_ROOT = Pathname(__dir__).realpath.freeze\\n\\n# <leave main file contents here>\\n\\nSPEC_ROOT.glob(\\\"support/**/*.rb\\\").each { |f| require f }\n```\n\n----------------------------------------\n\nTITLE: Authentication Module for Hanami Actions\nDESCRIPTION: Defines a reusable authentication module that can be included in any action requiring authentication functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module AuthenticatedAction\n      def self.included(action_class)\n        action_class.before :authenticate_user!\n      end\n\n      private\n\n      def authenticate_user!(request, response)\n        # halt 401 unless ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining One-to-Many Association in Hanami Relation\nDESCRIPTION: This snippet shows how to define a one-to-many association between publishers and books in a Hanami relation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Publishers < Hanami::DB::Relation\n      schema :publishers, infer: true do\n        associations do\n          has_many :books\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Router-Level Middleware in Hanami\nDESCRIPTION: This Ruby code snippet demonstrates how to add middleware at the router level in a Hanami application. It shows adding Rack::Runtime to all routes and Rack::Auth::Basic to specific scoped routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    use Rack::Runtime\n\n    root { \"Hello from Hanami\" }\n\n    scope \"restricted\" do\n      use Rack::Auth::Basic\n\n      get \"/page\" do\n        \"Some restricted content\"\n      end\n    end\n\n    slice :admin, at: \"/admin\" do\n      use Rack::Auth::Basic\n\n      get \"/books\", to: \"books.index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Application-Level Middleware in Hanami\nDESCRIPTION: This Ruby code snippet demonstrates how to add middleware at the application level in a Hanami app. It uses the config.middleware.use method to add Rack::Auth::Basic to the middleware stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Ordering (`order`) by Column Name in ROM (Ruby)\nDESCRIPTION: Demonstrates how to order the results from the `books` relation based on the `title` column using the `order` method. By default, using a plain symbol argument sorts in ascending order.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.order(:title)\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Container Registration in Hanami (Ruby)\nDESCRIPTION: Illustrates how to exclude a class from container registration using a magic comment. This is useful for classes that won't be used as dependencies, such as a base action class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Parameter Validation Schema in Hanami\nDESCRIPTION: Demonstrates parameter validation using a schema with optional integer parameters and value constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        params do\n          optional(:page).value(:integer)\n          optional(:per_page).value(:integer)\n        end\n\n        def handle(request, response)\n          request.params[:page]\n          request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping HTTP Status Codes to Ruby Symbols in Hanami\nDESCRIPTION: A complete mapping of HTTP status codes to their symbolic representations in Ruby. These symbols are used in Hanami framework to represent HTTP status codes in a more readable and maintainable way. The symbols are defined in the Hanami::Http::Status::SYMBOLS module.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/status-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: Ruby\nCODE:\n```\n:continue                           # 100\n:switching_protocols              # 101\n:processing                        # 102\n:early_hints                       # 103\n:ok                               # 200\n:created                          # 201\n:accepted                         # 202\n:non_authoritative_information    # 203\n:no_content                       # 204\n:reset_content                    # 205\n:partial_content                  # 206\n:multi_status                     # 207\n:already_reported                 # 208\n:im_used                          # 226\n:multiple_choices                 # 300\n:moved_permanently                # 301\n:found                           # 302\n:see_other                        # 303\n:not_modified                     # 304\n:use_proxy                        # 305\n:temporary_redirect               # 307\n:permanent_redirect               # 308\n:bad_request                      # 400\n:unauthorized                     # 401\n:payment_required                 # 402\n:forbidden                        # 403\n:not_found                        # 404\n:method_not_allowed               # 405\n:not_acceptable                   # 406\n:proxy_authentication_required    # 407\n:request_timeout                  # 408\n:conflict                         # 409\n:gone                            # 410\n:length_required                  # 411\n:precondition_failed              # 412\n:payload_too_large                # 413\n:uri_too_long                     # 414\n:unsupported_media_type          # 415\n:range_not_satisfiable           # 416\n:expectation_failed              # 417\n:misdirected_request             # 421\n:unprocessable_entity            # 422\n:locked                          # 423\n:failed_dependency               # 424\n:too_early                       # 425\n:upgrade_required                # 426\n:precondition_required           # 428\n:too_many_requests               # 429\n:request_header_fields_too_large # 431\n:unavailable_for_legal_reasons   # 451\n:internal_server_error           # 500\n:not_implemented                 # 501\n:bad_gateway                     # 502\n:service_unavailable             # 503\n:gateway_timeout                 # 504\n:http_version_not_supported      # 505\n:variant_also_negotiates         # 506\n:insufficient_storage            # 507\n:loop_detected                   # 508\n:bandwidth_limit_exceeded        # 509\n:not_extended                    # 510\n:network_authentication_required # 511\n```\n\n----------------------------------------\n\nTITLE: Validation Macros in Hanami\nDESCRIPTION: Examples of using Hanami validation macros for filled values with various type checks and conditions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age).filled\n\nrequired(:age).filled(:int?)\n\nrequired(:age).filled(:int?, gt?: 18)\n```\n\n----------------------------------------\n\nTITLE: Registering Slim Template Engine in Hanami Views - Ruby\nDESCRIPTION: This snippet shows how to require and initialize the Slim template engine for rendering '.html.slim' templates in Hanami. It must be included in the base view class, ensuring Slim is available for templates. The 'slim' gem must be installed and required prior to this, and this takes effect system-wide for all matching templates under 'app/templates/'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/view.rb\n\n# Use Slim for \".html.slim\" templates\nrequire \"slim\"\n\nmodule Bookshelf\n  class View < Hanami::View\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag Conditional Requests in Hanami\nDESCRIPTION: Shows how to implement ETag based conditional requests in a Hanami action. Uses the fresh method with etag option to handle caching based on a unique resource identifier.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/http-caching.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"user_repo\"]\n\n        def handle(request, response)\n          user = user_repo.find(params[:id])\n\n          response.fresh etag: \"#{user.id}-#{user.updated_at}\"\n\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Constraints in Hanami Routes\nDESCRIPTION: Demonstrates how to add regex constraints to route variables for input validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nget '/authors/:id', id: /\\d+/, to: 'authors#show'\n```\n\n----------------------------------------\n\nTITLE: Updating a Repository Method to Use Username\nDESCRIPTION: This example illustrates how to update a repository method to find a user by username instead of email. It shows the flexibility of the repository pattern in adapting to changing requirements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepo < Hanami::DB::Repo\n  def find(username) = users.where(username:).one\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Custom Predicate with I18n Support\nDESCRIPTION: Demonstrates creating a custom UUID validation predicate with regex pattern matching and internationalization support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\n\nmodule MyPredicates\n  include Hanami::Validations::Predicates\n\n  self.messages_path = 'config/errors.yml'\n\n  predicate(:uuid?) do |input|\n    !/[0-9a-f]{8}-\n    [0-9a-f]{4}-\n    [0-9a-f]{4}-\n    [0-9a-f]{4}-\n    [0-9a-f]{12}/x.match(input).nil?\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Attribute Types in Hanami Relation Schema\nDESCRIPTION: This snippet shows how to customize attribute types in a relation schema, including setting a primary key and specifying different read/write types for an attribute.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true do\n        primary_key :id\n        attribute :status, Types::String, read: Types::Coercible::Symbol\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Route Constraints in Hanami (Ruby)\nDESCRIPTION: Shows how to add constraints to route variables using regular expressions to ensure specific formats are matched.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:id\", id: /\\d+/, to: \"books.show\"\n\nget \"/books/award-winners/:year\", year: /\\d{4}/, to: \"books.award_winners.index\"\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Actions with Parameters and Headers\nDESCRIPTION: This example shows how to test a Hanami action with both route parameters and HTTP headers. The test verifies response status, content type, and body content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/controllers/users/show_spec.rb\nrequire_relative '../../../../apps/web/controllers/users/show'\n\nRSpec.describe Web::Controllers::Users::Show do\n  let(:action)  { Web::Controllers::Users::Show.new }\n  let(:format)  { 'application/json' }\n  let(:user_id) { '23' }\n\n  it \"is successful\" do\n    response = action.call(id: user_id, 'HTTP_ACCEPT' => format)\n\n    expect(response[0]).to                 eq(200)\n    expect(response[1]['Content-Type']).to eq(\"#{ format }; charset=utf-8\")\n    expect(response[2]).to                 eq([\"ID: #{ user_id }\"])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating ROM books relation\nDESCRIPTION: ROM relation class for the books table that enables database interactions. Uses schema inference to automatically map columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/persistence/relations/books.rb\n\nmodule Bookshelf\n  module Persistence\n    module Relations\n      class Books < ROM::Relation[:sql]\n        schema(:books, infer: true)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Books Index with Parameter Validation in Hanami\nDESCRIPTION: This Hanami action implements a paginated books index with parameter validation. It uses ROM for pagination and Hanami's built-in parameter validation to ensure valid page and per_page parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          optional(:page).value(:integer, gt?: 0)\n          optional(:per_page).value(:integer, gt?: 0, lteq?: 100)\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          books = rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .page(request.params[:page] || 1)\n            .per_page(request.params[:per_page] || 5)\n            .to_a\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Feature Testing Book Creation Form with RSpec\nDESCRIPTION: This RSpec feature test simulates user interaction with the book creation form. It verifies that validation errors are displayed when submitting an empty form.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_32\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec.describe 'Add a book' do\n  it 'displays list of errors when params contains errors' do\n    visit '/books/new'\n\n    within 'form#book-form' do\n      click_button 'Create'\n    end\n\n    expect(current_path).to eq('/books')\n\n    expect(page).to have_content('There was a problem with your submission')\n    expect(page).to have_content('Title must be filled')\n    expect(page).to have_content('Author must be filled')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Development Environment Exception Handling\nDESCRIPTION: Shows how to implement environment-specific exception handling in Hanami, raising exceptions in development for debugging while providing user-friendly responses in production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/exception-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle_standard_error(request, response, exception)\n  if Hanami.env?(:development)\n    raise exception\n  else\n    response.status = 500\n    response.body = \"Sorry, something went wrong handling your request\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Named Routes in Hanami\nDESCRIPTION: Shows how to define named routes that can be referenced programmatically.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nroot              to: 'home#index'\nget '/hello',     to: 'greet#index', as: :greeting\nget '/books/:id', to: 'books#show',  as: :book\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Scope Class in Hanami Views - Ruby\nDESCRIPTION: Shows how to create a base `Scope` class from which all custom scopes in the app or slice can inherit. This promotes shared functionality or behavior among scopes. The base class should inherit from `Hanami::View::Scope` and be placed under the `Bookshelf::Views` namespace. This setup requires Hanami's view architecture and is a standard Ruby inheritance-based pattern.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/scope.rb\\n\\n# auto_register: false\\n\\nmodule Bookshelf\\n  module Views\\n    class Scope < Hanami::View::Scope\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Response Format in Hanami Action\nDESCRIPTION: This snippet illustrates how to set a specific response format (JSON) directly within a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.format = :json # or response.format = \"application/json\"\n          response.body = {result: \"OK\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Book Repository Implementation\nDESCRIPTION: Implementation of the BookRepo class with methods to retrieve books ordered by title\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def all_by_title\n        books.order(books[:title].asc).to_a\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Route Definition in Hanami\nDESCRIPTION: Demonstrates the basic structure of defining routes in a Hanami application's config/routes.rb file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Helpers Module in Hanami App - Ruby\nDESCRIPTION: Displays the default structure for a helpers module in a generated Hanami app at app/views/helpers.rb. Developers can add their custom helper methods here, making them available to templates, parts, and scopes. No dependencies beyond Hanami’s view system are needed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Rack Environment in Hanami Action\nDESCRIPTION: This snippet demonstrates how to access the raw Rack environment data within a Hanami action using the request.env method. It shows how to retrieve specific environment variables like REQUEST_METHOD and PATH_INFO.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.env\n\n          request.env[\"REQUEST_METHOD\"] #=> GET\n          request.env[\"PATH_INFO\"] #=> /books/1\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Show Action in Ruby with Hanami\nDESCRIPTION: This snippet defines a Hanami action for showing a single book. It includes exception handling for not found errors and parameter validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_38\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nrequire \"rom\"\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        config.handle_exception ROM::TupleCountMismatchError => :handle_not_found\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one!\n\n          response.format = :json\n          response.body = book.to_json\n        end\n\n        private\n\n        def handle_not_found(_request, response, _exception)\n          response.status = 404\n          response.format = :json\n          response.body = {error: \"not_found\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Launches Hanami's development server with Puma for local development.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server\n\n14:33:28 - INFO - Using Guardfile at bookshelf/Guardfile.\n14:33:28 - INFO - Puma starting on port 2300 in development environment.\n14:33:28 - INFO - Guard is now watching at 'bookshelf'\n[43884] Puma starting in cluster mode...\n[43884] * Puma version: 6.0.0 (ruby 3.1.0-p0) (\"Sunflower\")\n[43884] *  Min threads: 5\n[43884] *  Max threads: 5\n[43884] *  Environment: development\n[43884] *   Master PID: 43884\n[43884] *      Workers: 2\n[43884] *     Restarts: (✔) hot (✖) phased\n[43884] * Preloading application\n[43884] * Listening on http://0.0.0.0:2300\n[43884] Use Ctrl-C to stop\n```\n\n----------------------------------------\n\nTITLE: Customizing Response in Hanami Action\nDESCRIPTION: This example demonstrates how to explicitly set the status, body, and headers of the response in a Hanami action. It shows how to use the private accessors to customize the response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/request-and-response.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          self.status = 201\n          self.body   = 'Your resource has been created'\n          self.headers.merge!({ 'X-Custom' => 'OK' })\n        end\n      end\n    end\n  end\nend\n\n# It will return [201, { \"X-Custom\" => \"OK\" }, [\"Your resource has been created\"]]\n```\n\n----------------------------------------\n\nTITLE: Setting Response Properties in Hanami\nDESCRIPTION: Shows how to set various response properties including status code, body content, headers, and response format in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/request-and-response.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        def handle(request, response)\n          response.status = 201\n          response.body = \"Your resource has been created\"\n          response.headers[\"My-Header\"] = \"value\"\n          response.format = :json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Book Show Action in Ruby\nDESCRIPTION: This snippet shows a simplified version of the Show action for books after moving exception handling to the base Action class. It only renders the view with the book's ID.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          response.render(view, id: request.params[:id])\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial Directly from Template - Hanami View - SQL/ERB\nDESCRIPTION: Displays how to invoke the render method on a part object within the template itself. Facilitates partial rendering with part context available as a local in the partial template. Requires a properly configured Hanami part and partial template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n<%= book.render(\"books/info_box\") %>\n```\n\n----------------------------------------\n\nTITLE: Inserting Middleware at Specific Position in Hanami App (Ruby)\nDESCRIPTION: This code snippet shows how to insert middleware at a specific position in the Hanami app's middleware stack. It demonstrates the use of the 'before:' option to place a middleware before an already added middleware.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/app-config.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, before: AlreadyAddedMiddleware\n```\n\n----------------------------------------\n\nTITLE: Configuring Guard for Hanami Code Reloading\nDESCRIPTION: Configuration for the Guardfile that specifies which directories should be watched for code changes in development. Watches config, lib, app, and slices directories and restarts the Puma server when changes are detected.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/code-reloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Guardfile\n\ngroup :server do\n  guard \"puma\", port: ENV[\"HANAMI_PORT\"] || 2300 do\n    watch(%r{config/*})\n    watch(%r{lib/*})\n    watch(%r{app/*})\n    watch(%r{slices/*})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Unit Testing a Hanami Action with RSpec\nDESCRIPTION: A basic example of unit testing a Hanami controller action using RSpec. This demonstrates how to instantiate an action, call it with parameters, and assert on the response status code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/controllers/dashboard/index_spec.rb\nrequire_relative '../../../../apps/web/controllers/dashboard/index'\n\nRSpec.describe Web::Controllers::Dashboard::Index do\n  let(:action) { Web::Controllers::Dashboard::Index.new }\n  let(:params) { Hash[] }\n\n  it \"is successful\" do\n    response = action.call(params)\n    expect(response[0]).to be(200)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Application Directory Structure\nDESCRIPTION: Shows the file system structure for adding new components to a Hanami application, including operations and renderers directories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napp\n├── operations\n│   └── send_welcome_email.rb\n└── renderers\n    └── welcome_email.rb\n```\n\n----------------------------------------\n\nTITLE: Using Private Exposures in Hanami View (Ruby)\nDESCRIPTION: The `Bookshelf::Views::Authors::Show` view demonstrates private exposures. `private_expose :author` defines an exposure that fetches an author based on the `author_id` input but does *not* pass the author object to the template. Instead, this private `:author` exposure is used as input (`|author|`) for the public `expose :author_name` block, which extracts and exposes only the author's name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/authors/show.rb\n\nmodule Bookshelf\n  module Views\n    module Authors\n      class Show < Bookshelf::View\n        include Deps[\"repos.author_repo\"]\n\n        private_expose :author do |author_id:|\n          author_repo.get!(author_id)\n        end\n\n        expose :author_name do |author|\n          author.name\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Check Conditions to Hanami Tables\nDESCRIPTION: Shows how to create check conditions on tables using the check method. The example includes both a Ruby block syntax for an age check and a raw SQL string for checking enumerated values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/create-table.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :users do\n  # ...\n  column :age, Integer\n  column :role, String\n\n  check { age > 18 }\n  check %(role IN('contributor', 'manager', 'owner'))\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Verb Route Declarations in Hanami\nDESCRIPTION: Shows how to declare routes for different HTTP verbs (GET, POST, PUT, PATCH, DELETE, TRACE, OPTIONS) using the same endpoint.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nendpoint = ->(env) { [200, {}, ['Hello from Hanami!']] }\n\nget     '/hello', to: endpoint\npost    '/hello', to: endpoint\nput     '/hello', to: endpoint\npatch   '/hello', to: endpoint\ndelete  '/hello', to: endpoint\ntrace   '/hello', to: endpoint\noptions '/hello', to: endpoint\n```\n\n----------------------------------------\n\nTITLE: Advanced Parameter Validation with Constraints\nDESCRIPTION: Implements parameter validation with additional constraints like minimum and maximum values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        params do\n          optional(:page).value(:integer, gteq?: 1)\n          optional(:per_page).value(:integer, gteq?: 1, lteq?: 100)\n        end\n\n        def handle(request, response)\n          halt 422 unless request.params.valid?\n\n          # At this point, we know the params are valid\n          request.params[:page]\n          request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial with Custom Local Name - Hanami View - Ruby\nDESCRIPTION: Shows passing an as: option to the render method to customize the local variable name for the part within the partial scope. Useful when partials require a specific variable context. Depends on the presence of the partial and correctly defined part object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrender(\"books/info_box\", as: :item)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Attributes in Hanami\nDESCRIPTION: Shows how to set various response attributes including status code, body content, headers, and response format in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/request-and-response.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        def handle(request, response)\n          response.status = 201\n          response.body = \"Your resource has been created\"\n          response.headers[\"My-Header\"] = \"value\"\n          response.format = :json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Access in Hanami Action\nDESCRIPTION: Demonstrates how to access request parameters in a basic Hanami action using the #params method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Pagination in Books Relation in Ruby\nDESCRIPTION: This Ruby code updates the `Bookshelf::Relations::Books` relation definition located in `app/relations/books.rb`. It adds `use :pagination` to enable pagination features provided by the underlying persistence library (rom-sql) and sets a default items-per-page limit to 5 using `per_page 5`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# app/relations/books.rb\n\nmodule Bookshelf\n  module Relations\n    class Books < Bookshelf::DB::Relation\n      schema :books, infer: true\n\n      use :pagination\n      per_page 5\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Colorized Log Template in Hanami Ruby\nDESCRIPTION: This example shows how to define a custom log output template with specific colors for different log components (program name, severity, time) in the `:development` environment. It requires enabling colorization (`config.logger.options[:colorize] = true`) and then assigning a custom template string (using a heredoc) to `config.logger.template`. Color tags like `<blue>` and `<green>` are used within the template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n\n      config.logger.template = <<~TMPL\n        [<blue>%<progname>s</blue>] [%<severity>s] [<green>%<time>s</green>] %<message>s %<payload>s\n      TMPL\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Cookie Settings in Hanami Controllers\nDESCRIPTION: Demonstrates how to set cookies in a controller with both default and custom settings. The first cookie inherits the application's max_age setting while the second overrides it with a custom value.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          # Set-Cookie:a=foo; max-age=300; HttpOnly\n          cookies[:a] = 'foo'\n\n          # Set-Cookie:b=bar; max-age=100; HttpOnly\n          cookies[:b] = { value: 'bar', max_age: 100 }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Providers in Ruby\nDESCRIPTION: Shows how to access settings when registering a provider in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/redis.rb\n\nHanami.app.register_provider :redis do\n  start do\n    require \"redis\"\n\n    redis = Redis.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sorting Records in Hanami Repository (Ruby)\nDESCRIPTION: Illustrates various ways to sort records using the order method in a Hanami repository, including ascending, descending, and sorting via other relations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  def from_first_to_last\n    users.order { created_at.asc }\n  end\n\n  def from_last_to_first\n    users.order { created_at.desc }\n  end\n\n  def alphabetical\n    users.order { name.asc }\n  end\n\n  def alphabetical_reverse\n    users.order { name.desc }\n  end\n\n  def sort_via_other_relation\n    users.order(books[:title].qualified.asc)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions in Ruby using Hanami Logger\nDESCRIPTION: Shows how to log exceptions using the Hanami logger. This method automatically formats the exception details for easy debugging.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Exposing Multiple Data Sets using Hanami View Exposures (Ruby)\nDESCRIPTION: This enhanced Hanami view class (`Bookshelf::Views::Books::Index`) demonstrates exposing multiple data sets. In addition to the `:books` exposure, it adds an `expose :best_sellers do ... end` block. This fetches best-selling books from the injected `book_repo` and makes them available as the `best_sellers` variable in the template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :books do\n          book_repo.listing\n        end\n\n        expose :best_sellers do\n          book_repo.best_sellers\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Book Entity in Ruby for Hanami Autoloading\nDESCRIPTION: This snippet demonstrates how to define a Book entity class in the Bookshelf::Entities namespace, which can be autoloaded by Hanami using Zeitwerk without requiring explicit require statements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/entities/book.rb\n\nmodule Bookshelf\n  module Entities\n    class Book\n      attr_reader :title, :author\n\n      def initialize(title:, author:)\n        @title = title\n        @author = author\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Container and Starting Dependencies in Ruby Provider\nDESCRIPTION: This snippet shows how to access the application container using 'target' within a provider, and how to ensure another provider has started before starting the current one. It also demonstrates using settings from the container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/providers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider(:uploads_bucket) do\n  prepare do\n    require \"aws-sdk-s3\"\n  end\n\n  start do\n    target.start(:metrics)\n\n    uploads_bucket_name = target[\"settings\"].uploads_bucket_name\n\n    credentials = Aws::Credentials.new(\n      target[\"settings\"].aws_access_key_id,\n      target[\"settings\"].aws_secret_access_key,\n    )\n\n    uploads_bucket = Aws::S3::Resource.new(credentials: credentials).bucket(uploads_bucket_name)\n\n    register \"uploads_bucket\", uploads_bucket\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mapping HTTP Status Codes to Symbols in Hanami\nDESCRIPTION: This snippet shows the complete mapping of HTTP status codes to their symbolic representations in Hanami. These symbols are derived from Hanami::Http::Status::SYMBOLS and can be used instead of integer status codes for better code readability.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/status-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n:continue # 100\n:switching_protocols # 101\n:processing # 102\n:early_hints # 103\n:ok # 200\n:created # 201\n:accepted # 202\n:non_authoritative_information # 203\n:no_content # 204\n:reset_content # 205\n:partial_content # 206\n:multi_status # 207\n:already_reported # 208\n:im_used # 226\n:multiple_choices # 300\n:moved_permanently # 301\n:found # 302\n:see_other # 303\n:not_modified # 304\n:use_proxy # 305\n:temporary_redirect # 307\n:permanent_redirect # 308\n:bad_request # 400\n:unauthorized # 401\n:payment_required # 402\n:forbidden # 403\n:not_found # 404\n:method_not_allowed # 405\n:not_acceptable # 406\n:proxy_authentication_required # 407\n:request_timeout # 408\n:conflict # 409\n:gone # 410\n:length_required # 411\n:precondition_failed # 412\n:payload_too_large # 413\n:uri_too_long # 414\n:unsupported_media_type # 415\n:range_not_satisfiable # 416\n:expectation_failed # 417\n:misdirected_request # 421\n:unprocessable_entity # 422\n:locked # 423\n:failed_dependency # 424\n:too_early # 425\n:upgrade_required # 426\n:precondition_required # 428\n:too_many_requests # 429\n:request_header_fields_too_large # 431\n:unavailable_for_legal_reasons # 451\n:internal_server_error # 500\n:not_implemented # 501\n:bad_gateway # 502\n:service_unavailable # 503\n:gateway_timeout # 504\n:http_version_not_supported # 505\n:variant_also_negotiates # 506\n:insufficient_storage # 507\n:loop_detected # 508\n:bandwidth_limit_exceeded # 509\n:not_extended # 510\n:network_authentication_required # 511\n```\n\n----------------------------------------\n\nTITLE: Books Index Action Implementation\nDESCRIPTION: Implementation of the books index action that returns a JSON formatted list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(*, response)\n          books = [\n            {title: \"Test Driven Development\"},\n            {title: \"Practical Object-Oriented Design in Ruby\"}\n          ]\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enhanced AddBook Interactor with Email Notification\nDESCRIPTION: Updated implementation of AddBook interactor that includes both repository and mailer dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/interactor'\n\nclass AddBook\n  include Hanami::Interactor\n\n  expose :book\n\n  def initialize(repository: BookRepository.new, mailer: Mailers::BookAddedNotification.new)\n    @repository = repository\n    @mailer = mailer\n  end\n\n  def call(book_attributes)\n    @book = @repository.create(book_attributes)\n    @mailer.deliver\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Context Attributes as View Parts (Ruby)\nDESCRIPTION: Illustrates how to automatically decorate the return value of a context method (e.g., `current_user`) as a specific view part (`Bookshelf::Views::Parts::User`). This is achieved using the `decorate` class method within the custom context definition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      # Return the current_user as a Bookshelf::Views::Parts::User\n      decorate :current_user, as: :user\n\n      def current_user\n        # ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Format in Hanami App (Ruby)\nDESCRIPTION: This snippet shows how to configure the default format for all actions in a Hanami application. It sets the format to JSON using the config.actions.format method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/app-config.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.actions.format :json\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials from Ruby Part Classes in Hanami Views\nDESCRIPTION: These snippets demonstrate how to render partials from within part methods and templates, including passing additional locals and using the 'as:' option.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  def info_box\n    render(\"books/info_box\")\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender(\"books/info_box\", as: :item)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrender(\"books/info_box\", title_label: \"Book info\")\n```\n\n----------------------------------------\n\nTITLE: Using Before Callback with Proc in Hanami Action\nDESCRIPTION: This example shows how to use a before callback implemented as an anonymous proc in a Hanami action. The proc is bound to the instance context of the action and can access instance variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/control-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        before { @remote_ip = request.ip }\n\n        def call(params)\n          # @remote_ip is available here\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Locals in a Hanami Scope Class - Ruby\nDESCRIPTION: Demonstrates how a scope class method (`display_title`) can directly access locals passed to the scope, showcasing interpolation and composition using those locals. The method builds a formatted string using properties of the local (`item`) and is intended for use in rendering logic. The class must inherit from the application or slice-specific base scope.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\\n  def display_title\\n    # `item` is a local\\n    \"#{item.title} (#{item.duration})\"\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a View Component in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a basic view component in a Hanami application. It shows the structure of a view class with a template method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/views/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\nmodule Books\n  class Index < View::Base\n    def template\n      \"books/index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Hanami\nDESCRIPTION: This Ruby code defines the routes for a Hanami application, including a root route and a route for the books index.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Named Routes in Hanami Views and Controllers\nDESCRIPTION: These code snippets show how to use named routes in Hanami views and controllers. They demonstrate the use of the `routes` helper to generate paths for forms and redirects.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_35\n\nLANGUAGE: ERB\nCODE:\n```\n<%=\n  form_for :book, routes.books_path do\n    # ...\n  end\n%>\n```\n\nLANGUAGE: Ruby\nCODE:\n```\nredirect_to routes.books_path\n```\n\nLANGUAGE: ERB\nCODE:\n```\n<a href=\"<%= routes.new_book_path %>\">New book</a>\n```\n\n----------------------------------------\n\nTITLE: Before Callback with Halt in Hanami Action\nDESCRIPTION: Demonstrates using halt within a before callback to handle authentication. The action is halted before handle is called if the user is not authenticated.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          halt 401 unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Inflector in Ruby App Class\nDESCRIPTION: Shows how to customize inflector behavior by configuring acronyms and uncountable words in the Hanami app configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/inflector.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"XML\", \"NBA\", \"WNBA\"\n      inflections.uncountable(\"hanami\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Component\nDESCRIPTION: This command generates a component in Hanami 2.2. The example creates an 'isbn_decode' component. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate component isbn_decode\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate component --help\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Scope in Hanami Views - Ruby\nDESCRIPTION: Illustrates how to render a partial template via a scope instance using the `render` method. The example renders the `media/audio_player` partial with all methods and locals from the scope available to the partial, promoting separation of view logic. This assumes the referenced partial exists and that rendering takes place in the context of a Hanami view or scope.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nscope(:media_player, item: audio_file).render(\"media/audio_player\")\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Context Class in Hanami\nDESCRIPTION: Demonstrates how to create a custom context class for a Hanami application, extending the standard Hanami::View::Context.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining RESTful Resources in Hanami Routes\nDESCRIPTION: This snippet demonstrates how to define RESTful resources in a Hanami application's routes file. It generates default routes for a 'books' resource.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nresources :books\n```\n\n----------------------------------------\n\nTITLE: Updating RSpec Request Spec for Books Index in Ruby\nDESCRIPTION: This RSpec test verifies the `GET /books` endpoint. It uses `let` to access the books relation and a `before` block to insert sample book data into the database. The test asserts that the response is successful, has the correct JSON content type, and the response body contains an array of book objects including both 'title' and 'author' keys.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books\", type: [:request, :db] do\n  let(:books) { Hanami.app[\"relations.books\"] }\n\n  before do\n    books.insert(title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\")\n    books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n  end\n\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq [\n      {\"title\" => \"Practical Object-Oriented Design in Ruby\", \"author\" => \"Sandi Metz\"},\n      {\"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\"}\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Hanami Actions\nDESCRIPTION: Demonstrates how to set a cookie value in a Hanami action using the response object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Project with UUID Token in Hanami Repository\nDESCRIPTION: This snippet demonstrates how to create a project with a UUID token using SecureRandom in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"securerandom\"\n\nProjectRepository.new.create(name: \"Hanami\", token: SecureRandom.uuid)\n  # => #<Project:0x007fbbc78f0a40 @attributes={:id=>1, :name=>\"Hanami\", :token=>\"0aa7ecff-15e4-4aa4-8c00-0e699e2c66f0\"}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Query Methods in Ruby for Hanami Repository\nDESCRIPTION: This snippet illustrates how to implement custom query methods in a Hanami repository. It includes examples of filtering, ordering, and combining multiple conditions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class BookRepository < Repository[:books]\n    def expensive\n      books.where { price > 100 }.to_a\n    end\n\n    def by_author(name)\n      books.where(author: name).to_a\n    end\n\n    def expensive_by_author(name)\n      books.where { (price > 100) & (author =~ name) }.to_a\n    end\n\n    def sorted_by_price\n      books.order(:price).to_a\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a View Template in ERB for Hanami\nDESCRIPTION: This snippet shows how to create a view template using ERB (Embedded Ruby) in a Hanami application. It demonstrates basic HTML structure and Ruby interpolation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/views/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/templates/books/index.html.erb\n<h1>Books</h1>\n\n<ul>\n  <% books.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Using Provider Dependencies in Operations\nDESCRIPTION: Demonstrates how to use registered provider dependencies in an operation class using the Deps module.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/providers.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Input Parameter in Hanami View Exposure (Ruby)\nDESCRIPTION: This `Bookshelf::Views::Books::Show` view class demonstrates consuming input provided by an action. It includes a dependency (`book_repo`) and defines an `expose :book` block that accepts an `id` keyword argument. This `id` (passed from the action) is used to fetch the specific book data using `book_repo.get!(id)`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Helpers in a Hanami Slice - Ruby\nDESCRIPTION: Defines a helpers module for a Hanami slice (generated at app/slices/my_slice/views/helpers.rb). Functions added here are usable as helpers within that slice’s views. No additional dependencies required.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MySlice\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Exception with Status Code in Hanami Action\nDESCRIPTION: Demonstrates how to handle StandardError exceptions by returning a 500 Internal Server Error status code. When an error occurs in the handle method, the application will respond with a basic error page instead of crashing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/exception-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception StandardError => 500\n\n        def handle(request, response)\n          raise \"error\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Layout and Undecorated Exposures in Hanami View (Ruby)\nDESCRIPTION: This code shows how to create an exposure available to the layout and an undecorated exposure in a Hanami view. The 'recommended_books' exposure is made available to the layout, while 'page_number' is exposed without decoration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nexpose :recommended_books, layout: true do\n  book_repo.recommended_listing\nend\n\nexpose :page_number, decorate: false\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Base URL in Hanami App (Ruby)\nDESCRIPTION: Sets up the base URL for a CDN in the Hanami app configuration for the production environment. This allows assets to be served from the specified CDN.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/using-a-cdn.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.assets.base_url = \"https://some-cdn.net/my-site\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Compilation in Hanami (Ruby)\nDESCRIPTION: This snippet demonstrates how to configure asset compilation in a Hanami application. It sets up JavaScript and CSS compilation using specific preprocessors and defines output paths.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/assets.rb\nmodule Bookshelf\n  class Assets < Hanami::Assets::Configuration\n    compile true\n\n    sources << [\n      \"assets\"\n    ]\n\n    javascript_compressor :uglify\n    stylesheet_compressor :scss\n\n    define :javascript do\n      sources << [\n        \"node_modules/jquery/dist/jquery.js\"\n      ]\n\n      group :all do\n        files << [\n          \"assets/javascripts/application.js\"\n        ]\n      end\n    end\n\n    define :stylesheet do\n      sources << [\n        \"vendor/assets/stylesheets\"\n      ]\n\n      group :all do\n        files << [\n          \"assets/stylesheets/application.css\"\n        ]\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML String Escaping in Ruby with Hanami\nDESCRIPTION: Demonstrates the use of escape_html helper to safely escape HTML content. The helper ensures strings are safe for HTML templates and handles already escaped content appropriately.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/string-escaping.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nescape_html(\"Safe content\")\n# => \"Safe content\"\n\nescape_html(\"<script>alert('xss')</script>\")\n# => \"&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;\"\n\nescape_html(raw(\"<p>Not escaped</p>\"))\n# => \"<p>Not escaped</p>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflections in Hanami App (Ruby)\nDESCRIPTION: This snippet demonstrates how to customize inflections in a Hanami application. It shows how to configure acronyms and uncountable words using the config.inflections block in the app configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/inflector.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"XML\", \"NBA\", \"WNBA\"\n      inflections.uncountable(\"hanami\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Parameters in Hanami Action\nDESCRIPTION: This code snippet shows how to whitelist and validate parameters in a Hanami action using the params DSL.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/signup/create.rb\nmodule Web::Controllers::Signup\n  class Create\n    include Web::Action\n\n    params do\n      required(:email).filled\n      required(:password).filled\n\n      required(:address).schema do\n        required(:country).filled\n      end\n    end\n\n    def call(params)\n      puts params[:email]             # => \"alice@example.org\"\n      puts params[:password]          # => \"secret\"\n      puts params[:address][:country] # => \"Italy\"\n\n      puts params[:admin]             # => nil\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Asset URL Helper with CDN (Ruby)\nDESCRIPTION: Demonstrates how the asset_url helper generates a full URL for an asset, including the CDN base URL when configured.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/using-a-cdn.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nasset_url(\"app.js\")\n# => \"https://some-cdn.net/my-site/assets/app-LSLFPUMX.js\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Country Show Action in API Slice\nDESCRIPTION: Shows how to create an action in the API slice to handle country information requests, including parameter validation and query execution.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/api/actions/countries/show.rb\n\nrequire \"countries\"\n\nmodule API\n  module Actions\n    module Countries\n      class Show < API::Action\n        include Deps[\n          query: \"queries.countries.show\"\n        ]\n\n        params do\n          required(:country_code).value(included_in?: ISO3166::Country.codes)\n        end\n\n        def handle(request, response)\n          response.format = :json\n\n          halt 422, {error: \"Unprocessable country code\"}.to_json unless request.params.valid?\n\n          result = query.call(\n            request.params[:country_code]\n          )\n\n          response.body = result.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hanami View Class in Ruby\nDESCRIPTION: This Ruby code shows the structure of a basic Hanami view class generated for the 'home.show' action within the 'Bookshelf' application. It inherits from `Bookshelf::View` and is namespaced under `Bookshelf::Views::Home`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/home/show.rb\n\nmodule Bookshelf\n  module Views\n    module Home\n      class Show < Bookshelf::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami View Parts with Helpers and Partial Rendering (Ruby)\nDESCRIPTION: Extends part testing for Hanami by adding methods that use helpers (e.g., tag.h1) and render partial templates, with accompanying RSpec tests. Demonstrates validating both HTML generation with helpers and verifying partial rendering returns correctly structured output. Requires Hanami view part system, helpers mechanism, RSpec, and a partial template at templates/users/_info_card.html. Tests both helper integration and render call output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Parts\n      class User < MyApp::Views::Part\n        def display_name\n          \"#{name} (#{email})\"\n        end\n\n        # Using a helper\n        def title_tag\n          helpers.tag.h1(display_name)\n        end\n\n        # Rendering a partial at templates/users/_info_card.html\n        def info_card\n          render(\"users/info_card\")\n        end\n      end\n    end\n  end\nend\n\nRSpec.describe(MyApp::Views::Parts::User) do\n  subject(:part) { described_class.new(value: user) }\n  let(:user) { double(:user, name: \"Amy\", email: \"amy@example.com\"}\n\n  describe \"#title_tag\" do\n    it \"includes the name and email in a h1 tag\" do\n      expect(part.title_tag).to eq \"<h1>Amy (amy@example.com)</h1>\"\n    end\n  end\n\n  describe \"#info_card\" do\n    it \"renders the info card\" do\n      expect(part.info_card).to start_with %(\\u003cdiv class=\"user-info-card\"\\u003e)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Decoration for Hanami View Exposure (Ruby)\nDESCRIPTION: This Ruby code demonstrates how to prevent an exposed value from being automatically wrapped by a Hanami Part decorator. Using the `decorate: false` option with `expose :page_number` ensures that the raw `page_number` value (likely a primitive type like an integer) is passed to the template without decoration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nexpose :page_number, decorate: false\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic View Rendering in a Hanami Action in Ruby\nDESCRIPTION: This snippet shows how to disable Hanami's automatic view rendering feature for a specific action. By defining an instance method `auto_render?(response)` that returns `false`, the action signals that it will handle rendering manually or not render a view at all.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-from-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef auto_render?(response)\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami View with Conditional Rendering\nDESCRIPTION: This snippet shows the implementation of a Hanami view that formats a book's price and conditionally renders an edit link based on user permissions. It includes methods for formatting the price and generating the edit link, as well as a private method to check user permissions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/books/show.rb\nmodule Web\n  module Views\n    module Books\n      class Show\n        include Web::View\n\n        def formatted_price\n          \"$#{ format_number book.price }\"\n        end\n\n        def edit_link\n          if can_edit_book?\n            link_to \"Edit\", routes.edit_book_path(id: book.id)\n          end\n        end\n\n        private\n\n        def can_edit_book?\n          current_user.admin?\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Form with Hanami Form Helpers\nDESCRIPTION: ERB template showing how to create a nested form using Hanami's form helpers with fields_for for nested objects and initial values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_7\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  form_for :delivery, routes.delivery_path(id: delivery.id), method: :patch, values: {delivery: delivery, customer: customer} do\n    text_field :code\n\n    fields_for :customer do\n      text_field :name\n\n      fields_for :address do\n        text_field :city\n      end\n    end\n\n    submit 'Update'\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Error Responses in Hanami App\nDESCRIPTION: This snippet demonstrates how to customize error responses in a Hanami application by mapping specific exception classes to HTTP error codes. It modifies the config.render_error_responses hash to associate a ROM::TupleCountMismatchError with a 'not found' response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-errors.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.render_error_responses.merge!(\n      \"ROM::TupleCountMismatchError\" => :not_found\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami View Components via CLI\nDESCRIPTION: Commands to generate view-related files using Hanami's CLI tool, creating both action-associated and standalone views\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action home.show\n\nCreated app/actions/home/show.rb\nCreated app/views/home/show.rb              <- view\nCreated app/templates/home/show.html.erb    <- template\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view emails.welcome\n\nCreated app/views/emails/welcome.rb\nCreated app/templates/emails/welcome.html.erb\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Request with RSpec and Rack::Test\nDESCRIPTION: This example demonstrates how to write a request spec for a Hanami application using RSpec and Rack::Test. It tests the root route of the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    # Find me in `config/routes.rb`\n    get \"/\"\n\n    expect(last_response).to be_successful\n    expect(last_response.body).to eq(\"Hello from Hanami\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Exceptions with Additional Data in Ruby using Hanami Logger\nDESCRIPTION: Illustrates logging exceptions with additional contextual information. This approach provides more details about the context in which the exception occurred.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e, component: \"admin\")\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Attributes in a Part - Hanami View - Ruby\nDESCRIPTION: Shows how to decorate an attribute (author) in a Book part to return a nested part (Views::Parts::Author) for composed objects. Implements attribute-level decoration, allowing nested objects to gain view logic. Requires the decorate method and that author exists on the value.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  # Returns the author as a Views::Parts::Author\\n  decorate :author\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GET Route in Hanami\nDESCRIPTION: Demonstrates how to create a simple GET route that returns a hello message using a lambda function as the endpoint.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nget '/hello', to: ->(env) { [200, {}, ['Hello from Hanami!']] }\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Settings in Hanami Application\nDESCRIPTION: Configuration for setting up a Content Delivery Network in a Hanami application's production environment. Includes host, scheme, and port settings along with asset fingerprinting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    # ...\n    configure :production do\n      scheme 'https'\n      host   'bookshelf.org'\n      port   443\n\n      assets do\n        # ...\n        fingerprint true\n\n        # CDN settings\n        scheme 'https'\n        host   '123.cloudfront.net'\n        port   443\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Settings in Hanami Application\nDESCRIPTION: This snippet shows how to configure cookie sessions in a Hanami application, including setting the session key, secret, and expiration time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_45\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action Response in Ruby with RSpec\nDESCRIPTION: This snippet demonstrates how to test a Hanami action's response using RSpec. It instantiates the action and calls it with an empty parameters hash, then asserts that the response is successful.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Index do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful response with empty params\" do\n    response = action.call({})\n    expect(response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Exposing Data to a Template using Hanami View Exposures (Ruby)\nDESCRIPTION: This Ruby code defines a Hanami view class (`Bookshelf::Views::Books::Index`) that fetches data and makes it available to its template. It uses `include Deps[\"repos.book_repo\"]` for dependency injection to get a book repository. The `expose :books do ... end` block fetches a book listing from the repository and makes the result accessible as the `books` variable within the corresponding template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :books do\n          book_repo.listing\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index Template\nDESCRIPTION: ERB template for rendering the books index page with title and author information\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\n<h1>Books</h1>\n\n<ul>\n  <% books.each do |book| %>\n    <li><%= book[:title] %>, by <%= book[:author] %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Adding Rack Middleware in Hanami Configuration (Ruby)\nDESCRIPTION: This code snippet shows how to add a Rack middleware to a Hanami project using the middleware.use method within the Hanami.configure block in the config/environment.rb file. It allows for easy integration of custom or third-party Rack middleware into the Hanami application stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rack-middleware.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nHanami.configure do\n  middleware.use MyRackMiddleware\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Operation\nDESCRIPTION: Demonstrates how to generate a new operation using the Hanami CLI. This command creates a basic operation structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate operation books.create\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Methods Implicitly in Templates (ERB/SQL)\nDESCRIPTION: Demonstrates how to call methods from the Hanami view context (like `inflector`) directly within a template file (e.g., ERB). The context methods are available implicitly without needing an explicit receiver object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n<%= inflector.pluralize(\"koala\") %>\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Command for Bulk Creation in a Hanami Repository\nDESCRIPTION: This snippet demonstrates how to define a custom command in a Hanami repository to create multiple records at once.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass TaskRepository < Hanami::Repository\n  def create_many(data)\n    command(create: :tasks, result: :many).call(data)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Authentication Using Halt in Hanami Action\nDESCRIPTION: Example of using halt to implement authentication checking in an action. Returns 401 status if authentication fails.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshellf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 401 unless authenticated?(request)\n          # ...\n        end\n\n        private\n\n        def authenticated?(request)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Variables in Hanami Action (Ruby)\nDESCRIPTION: Demonstrates how to access path variables within a Hanami action using the request.params hash.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# Request: GET /books/17/reviews/6\n\nmodule Bookshelf\n  module Actions\n    module BookReviews\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:book_id] # 17\n          request.params[:id] # 6\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Cookies in Hanami\nDESCRIPTION: This snippet shows how to remove a cookie by setting its value to nil. This instructs the browser to delete the cookie.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.cookies[\"tasty_cookie\"] = nil\n```\n\n----------------------------------------\n\nTITLE: Example HTML Output from Hanami View Rendering (Shell)\nDESCRIPTION: This shell output shows the result of a `curl` request to a Hanami application endpoint (`/books/1`). The rendered HTML includes the book title and description provided by the view's exposure, demonstrating how exposed data is integrated into the final response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl http://localhost:2300/books/1\n\n<html>\n  <body>\n    <h1>Pride and Prejudice</h1>\n    <p>The 1813 Jane Austen classic.</p>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Defining Explicit `up` and `down` Migrations (Ruby)\nDESCRIPTION: Illustrates a scenario where Sequel cannot automatically infer the reverse migration, requiring explicit `up` and `down` blocks. This example adds a unique constraint in the `up` block and explicitly drops it in the `down` block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nROM::SQL.migration do\n  up do\n    alter_table :users do\n      add_unique_constraint [:email], name: :users_email_uniq\n    end\n  end\n\n  down do\n    alter_table :users do\n      drop_constraint :users_email_uniq\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Book View Part Class in Hanami (Ruby)\nDESCRIPTION: This Ruby class extends Hanami's Part functionality to display a book's cover image URL within a Hanami web application. It overrides the cover_image_url method to return either the book's own cover_image_url or, if absent, a fallback default image from the asset pipeline. Dependencies include the Hanami framework (specifically the Views::Part infrastructure) and a properly configured assets context. Input is provided as the value and context of the view part, and the output is a string URL for the cover image. The approach assumes that value contains a cover_image_url method and that context exposes the available assets by filename.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    module Parts\n      class Book < Bookshelf::Views::Part\n        def cover_image_url\n          value.cover_image_url || context.assets[\"default-cover-image.jpg\"]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Body Parser Implementation in Hanami\nDESCRIPTION: This example illustrates how to implement and register a custom body parser for a specific MIME type in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/foo_parser.rb\nclass FooParser\n  def mime_types\n    ['application/foo']\n  end\n\n  def parse(body)\n    # manually parse body\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nrequire \"hanami/middleware/body_parser\"\n\nHanami.configure do\n  # ...\n  middleware.use Hanami::Middleware::BodyParser, FooParser.new\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Access in Hanami Action\nDESCRIPTION: Demonstrates how to access request parameters in a basic Hanami action using the request.params method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Catch-All Routes in Hanami (Ruby)\nDESCRIPTION: Demonstrates how to define catch-all routes using globbing to handle requests that don't match other routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/pages/*path\", to: \"page_catch_all\"\n\nget \"/*path\", to: \"unmatched\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Records using Database Functions (`date_part`) in ROM Expression Syntax (Ruby)\nDESCRIPTION: Demonstrates using the expression syntax with the `where` method to filter records based on a database function call. This example filters `books` where the year extracted from `publication_date` is greater than 2020. This relies on ROM's expression syntax, often powered by Sequel VirtualRows.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.where { date_part('year', publication_date) > 2020 }\n```\n\n----------------------------------------\n\nTITLE: Configuring Template and Layout in a Hanami View (Ruby)\nDESCRIPTION: This Ruby code demonstrates configuring the template and layout used by a Hanami view (`Bookshelf::Views::Books::Index`). `config.template = \"books/index\"` explicitly sets the template file to be used (relative to the templates directory). `config.layout = \"app\"` specifies the layout file to wrap the template content. Setting `layout` to `false` or `nil` disables layout rendering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        config.template = \"books/index\" # configure which template to render\n        config.layout = \"app\" # configure which layout to use. Set to false or nil to use no layout\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Hanami Action Class in Ruby\nDESCRIPTION: This Ruby code shows the structure of the 'home.show' action class (`app/actions/home/show.rb`) within the 'Bookshelf' application. It inherits from `Bookshelf::Action` and contains an empty `handle` method, which is the entry point for request handling. The view associated with this action will be rendered automatically.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(*, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Route Variables in Hanami\nDESCRIPTION: Demonstrates how to add regular expression constraints to path variables to restrict matching.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:id\", id: /\\d+/, to: \"books.show\"\n\n# GET /books/2 # matches\n# GET /books/two # does not match\n\nget \"/books/award-winners/:year\", year: /\\d{4}/, to: \"books.award_winners.index\"\n\n# GET /books/award-winners/2022 # matches\n# GET /books/award-winners/2 # does not match\n# GET /books/award-winners/two-thousand # does not match\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple Components in Ruby Provider\nDESCRIPTION: This snippet illustrates how to register multiple components within a single provider in a Hanami application. It shows registering both instances and classes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/providers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/my_provider.rb\n\nHanami.app.register_provider(:my_provider) do\n  start do\n    register \"my_thing\", MyThing.new\n    register \"another.thing\", AnotherThing.new\n    register \"thing\", Thing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building and Rendering a Scope from Part - Hanami View - Ruby\nDESCRIPTION: Shows using the scope method from a part object to build a custom view scope and render it, passing additional options. This pattern allows for custom sub-view contexts and rendering, often for complex or block content. Requires scope to be available in Hanami part, and a corresponding scope defined for info_box.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  def info_box\\n    scope(:info_box, size: :large).render\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes to RESTful Resources in Hanami\nDESCRIPTION: This snippet demonstrates how to add custom routes for single (member) and multiple (collection) resources in addition to the default RESTful routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books do\n  member do\n    # Generates /books/1/toggle, maps to Books::Toggle, named :toggle_book\n    get 'toggle'\n  end\n\n  collection do\n    # Generates /books/search, maps to Books::Search, named :search_books\n    get 'search'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami Operation with Dependencies\nDESCRIPTION: Demonstrates how to include dependencies in a Hanami operation using the Deps mixin. This example shows how to inject a repository dependency.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nmodule Bookshelf\n  module Books\n    class Create < Bookshelf::Operation\n      include Deps[\"repos.book_repo\"]\n\n      # ...\n\n      private\n\n      def create(attrs)\n        Success(book_repo.create(attrs))\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in Hanami Ruby Application\nDESCRIPTION: Shows the basic structure of a Hanami Routes class with a simple root route that returns a string response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in a Part - Hanami View - Ruby\nDESCRIPTION: Demonstrates accessing the view context from within a part by using the context method for route helpers or contextual data. Enables parts to remain aware of the broader view context. Requires context.routes.path to be set up in the current Hanami app.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  def path\\n    context.routes.path(:book, id)\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in config.ru for Hanami\nDESCRIPTION: This Ruby code snippet shows how to add middleware in the config.ru file for a Hanami application. It demonstrates adding Rack::Static middleware outside of the Hanami application's middleware stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\n\nrequire \"hanami/boot\"\n\nuse Rack::Static, :urls => [\"/public\"]\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Dynamic Path Parameters Example\nDESCRIPTION: Demonstrates accessing dynamic path parameters in a Hanami action class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module BookReviews\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:book_id] # 17\n          request.params[:id] # 6\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Route Helpers in Hanami Views\nDESCRIPTION: This example demonstrates how to use route helpers in Hanami views. It shows how to generate URLs for defined routes using the helpers provided by Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < View\n        def book_link(book)\n          link_to book.title, routes.book_path(id: book.id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Manually enabling JSON body parser middleware in Hanami\nDESCRIPTION: Explicitly configures the body parser middleware for JSON requests without setting the default format. This provides more granular control over request parsing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Part Attributes and Memoizing Methods in Ruby for Hanami Views\nDESCRIPTION: These snippets demonstrate how to decorate part attributes and memoize methods in part classes for Hanami views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  # Returns the author as a Views::Parts::Author\n  decorate :author\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Returns the author as a Views::Parts::Person\ndecorate :author, as: :person\n```\n\n----------------------------------------\n\nTITLE: Setting up DatabaseCleaner for testing\nDESCRIPTION: Configuration for database_cleaner to ensure clean database state between tests using the transaction strategy. This helps maintain test isolation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/support/database_cleaner.rb\n\nrequire \"database_cleaner-sequel\"\n\nHanami.app.prepare(:persistence)\nDatabaseCleaner[:sequel, db: Hanami.app[\"persistence.db\"]]\n\nRSpec.configure do |config|\n  config.before(:suite) do\n    DatabaseCleaner.strategy = :transaction\n    DatabaseCleaner.clean_with(:truncation)\n  end\n\n  config.around(:each, type: :database) do |example|\n    DatabaseCleaner.cleaning do\n      example.run\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Render Method within a Hanami Scope Class - Ruby\nDESCRIPTION: Defines a method (`render_player`) inside a `MediaPlayer` scope class to encapsulate rendering a partial. The method calls `render` with the partial's name, allowing consistent rendering and easy reuse. Requires the corresponding partial and assumes the class inherits from the app's base scope implementation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\\n  def render_player\\n    render(\"media/audio_player\")\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Migration\nDESCRIPTION: This command generates a migration in Hanami 2.2. The example creates a migration to create a 'posts' table. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate migration create_posts\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate migration --help\n```\n\n----------------------------------------\n\nTITLE: Manually Enabling JSON Body Parsing in Hanami App\nDESCRIPTION: This example shows how to manually enable JSON body parsing using middleware in a Hanami application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirect in Hanami Action\nDESCRIPTION: This snippet demonstrates how to perform a redirect in a Hanami action using the redirect_to method. It redirects to the root path and stops further execution of the action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/control-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          redirect_to routes.root_path\n          foo('bar') # This line will never be executed\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Operation Structure\nDESCRIPTION: Shows the initial structure of a generated Hanami operation. This provides a starting point for implementing business logic.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/books/create.rb\n\nmodule Bookshelf\n  module Books\n    class Create < Bookshelf::Operation\n      def call\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware in config.ru for Hanami\nDESCRIPTION: Shows how to add middleware in the config.ru file for a Hanami application. This middleware is not part of the Hanami app's stack but is applied before the app is run.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\n\nrequire \"hanami/boot\"\n\nuse Rack::Static, :urls => [\"/public\"]\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Customizing Slice DB Configuration Inheritance (Hanami/Ruby)\nDESCRIPTION: This code illustrates how to disable inheritance of database configuration from a parent for a specific Hanami slice. By setting config.db.configure_from_parent = false, the slice will not inherit parent DB settings. Place within a slice class definition. Input: Boolean assignment. Output: Customized inheritance behavior for slice configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Main\n  class Slice < Hanami::Slice\n    config.db.configure_from_parent = false   # default: true\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inferring Schema from Database in Hanami Relation\nDESCRIPTION: This code snippet demonstrates how to define a schema for a relation by inferring it directly from the database. This is typically the starting point for most relations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Hanami::DB::Relation\n      schema :books, infer: true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Entry Point with Stylesheet and Function Import\nDESCRIPTION: Demonstrates creating a custom entry point for a 'sign in' page that imports a specific stylesheet and a JavaScript function. This shows how to create dedicated asset bundles for different sections of an application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nimport \"../../css/signin/app.css\";\nimport { resetPassword } from \"./resetPassword\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Last-Modified Conditional Requests\nDESCRIPTION: Shows how to implement conditional requests using Last-Modified headers in a Hanami action. Uses the fresh method to set Last-Modified header and handle If-Modified-Since validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/http-caching.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Show\n      class Index < Bookshelf::Action\n        include Deps['repositories.users']\n\n        def handle(request, response)\n          user = users.find(params[:id])\n\n          response.fresh last_modified: user.updated_at\n\n          # <request processing logic here>\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Selective App Booting in Hanami (Ruby)\nDESCRIPTION: This code snippet demonstrates how to configure selective booting of Hanami applications in the environment.rb file. It checks for the presence of each app using Hanami.app? and mounts the application if it's present.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/selectively-boot-apps.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n# ...\nHanami.configure do\n  if Hanami.app?(:web)\n    require_relative '../apps/web/application'\n    mount Web::Application, at: '/'\n  end\n\n  if Hanami.app?(:api)\n    require_relative '../apps/api/application'\n    mount Api::Application, at: '/api'\n  end\n\n  if Hanami.app?(:admin)\n    require_relative '../apps/admin/application'\n    mount Admin::Application, at: '/admin'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Multiple Middleware with Arguments in Actions\nDESCRIPTION: Demonstrates how to mount multiple middleware components with different initialization patterns in a single action, including middleware that require arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/rack-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        use XMiddleware.new('x', 123)\n        use YMiddleware.new\n        use ZMiddleware\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Decorating Attributes with as: Option - Hanami View - Ruby\nDESCRIPTION: Demonstrates using the as: option in the decorate method to force attribute decoration with a different part class (Views::Parts::Person). Useful for flexible or polymorphic part assignment. Requires decorate to accept as:, and that Person part class exists.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# Returns the author as a Views::Parts::Person\\ndecorate :author, as: :person\n```\n\n----------------------------------------\n\nTITLE: Using Halt in Before Callback in Hanami Action\nDESCRIPTION: This example shows how to use the halt method within a before callback. It demonstrates authentication checking before the main handle method is executed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          halt 401 unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Hanami Ruby Application\nDESCRIPTION: This code snippet demonstrates how to add middleware to a Hanami application's router. It shows the use of the config.middleware.use method to add a custom middleware with arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/app-config.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, \"middleware\", \"args\", \"here\"\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status and Headers in Hanami Action\nDESCRIPTION: This snippet shows how to set custom response status codes and headers in a Hanami action. It demonstrates setting a 201 status code and a Location header for a resource creation action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Books\n  class Create < Action\n    def handle(request, response)\n      # Create a new book...\n\n      response.status = 201\n      response.headers[\"Location\"] = \"/books/#{book.id}\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes in Hanami\nDESCRIPTION: This example shows how to create nested routes in Hanami. It demonstrates grouping related routes under a common path prefix.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    slice :admin, at: \"/admin\" do\n      get \"/books\", to: \"books.index\"\n      get \"/users\", to: \"users.index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Base Action Class for User Profile Actions\nDESCRIPTION: Creates a specialized base class for user profile-related actions with authentication behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Base < Bookshelf::Action\n        before :authenticate_user!\n\n        private\n\n        def authenticate_user!(request, response)\n          # halt 401 unless ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building a Scope Instance in a Hanami Template - Ruby\nDESCRIPTION: Demonstrates the usage of the `scope` method within a Hanami template, part, or another scope object to instantiate a custom scope. The method receives the scope's name as a symbol and optionally, a hash of locals. This mechanism relies on automatic class lookup for matching scope names, and requires appropriate scope classes to have been defined in the namespace.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nscope(:media_player)\n```\n\n----------------------------------------\n\nTITLE: Method Callback Implementation in Hanami Action\nDESCRIPTION: Shows how to implement a before callback using a method to validate parameters before handling the request. The callback halts execution with a 422 status if parameters are invalid.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before :validate_params\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def validate_params(request, response)\n          params = request.params\n          halt 422, request.params.errors.to_h unless request.params.valid?\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Formatter in Hanami Logger Configuration\nDESCRIPTION: Demonstrates how to configure the Hanami logger to use JSON formatter across all environments by modifying the App class configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    # This would change formatter for all environments to `:json`\n    config.logger.formatter = :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining ROM-RB Relation for Books in Ruby\nDESCRIPTION: This Ruby code defines a ROM-RB relation for the books table, allowing the application to interact with the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/persistence/relations/books.rb\n\nmodule Bookshelf\n  module Persistence\n    module Relations\n      class Books < ROM::Relation[:sql]\n        schema(:books, infer: true)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Content-Type in Hanami Action\nDESCRIPTION: Demonstrates how to force a specific Content-Type for a response by using the format= method in a Hanami action, regardless of what the client requested.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          puts self.format # => :html\n\n          # force a different value\n          self.format        =  :json\n          puts self.format # => :json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Routes with Multiple Path Variables in Hanami\nDESCRIPTION: Shows how to define and access routes with multiple dynamic path variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books/:book_id/reviews/:id\", to: \"book_reviews.show\"\n\n# GET /books/17/reviews/6\n# request.params[:book_id] # => 17\n# request.params[:id] # => 6\n```\n\n----------------------------------------\n\nTITLE: Extending a Struct with Custom Methods\nDESCRIPTION: This snippet demonstrates how to extend a Hanami::DB::Struct with custom methods. It shows the addition of presentation logic for formatting a user's name and email.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Main\n  module Structs\n    class User < Hanami::DB::Struct\n      def full_name\n        \"#{given_name} #{family_name}\"\n      end\n\n      def mailbox\n        \"#{full_name} <#{email}>\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Inline Custom Predicates in Hanami\nDESCRIPTION: Shows how to define an inline custom predicate for unique validation cases that don't need reuse. The example implements a URL validator with a custom error message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\n\nclass Signup\n  include Hanami::Validations\n\n  predicate :url?, message: 'must be an URL' do |current|\n    # ...\n  end\n\n  validations do\n    required(:website) { url? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Ruby Module Implementation Example\nDESCRIPTION: Demonstrates the basic principle of Ruby modules and inclusion, showing how Hanami helpers work at a fundamental level.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Printable\n  def print\n    puts \"...\"\n  end\nend\n\nclass Person\n  include Printable\nend\n\nPerson.new.print\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Components with Dependency Injection (Ruby)\nDESCRIPTION: Demonstrates how to write a unit test for a Hanami component using dependency injection to substitute dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/unit/operations/send_welcome_email_spec.rb\n\nRSpec.describe Bookshelf::Operations::SendWelcomeEmail, \"#call\" do\n  subject(:send_welcome_email) {\n    described_class.new(email_client: email_client, welcome_email: welcome_email)\n  }\n\n  let(:email_client) { double(:email_client) }\n  let(:welcome_email) { double(:welcome_email) }\n\n  before do\n    allow(welcome_email).to receive(:render_text).and_return(\"Welcome to Bookshelf Ada!\")\n    allow(welcome_email).to receive(:render_html).and_return(\"<p>Welcome to Bookshelf Ada!</p>\")\n  end\n\n  it \"sends a welcome email\" do\n    expect(email_client).to receive(:deliver).with(\n      to: \"ada@example.com\",\n      subject: \"Welcome!\",\n      text_body: \"Welcome to Bookshelf Ada!\",\n      html_body: \"<p>Welcome to Bookshelf Ada!</p>\"\n    )\n\n    send_welcome_email.call(name: \"Ada!\", email_address: \"ada@example.com\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial Template in ERB - ERB\nDESCRIPTION: This snippet demonstrates how to include a partial template within an ERB file using Hanami's 'render' method. The string parameter specifies the partial's path relative to the templates directory, with the actual filename beginning with an underscore and matching extension. This enables reusing template fragments across views; no additional dependencies besides Hanami and ERB are required.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n<%= render \"path/to/my_partial\" %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index Action with Pagination\nDESCRIPTION: This action handles the request parameters for pagination and passes them to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.render(\n            view,\n            page: request.params[:page] || 1,\n            per_page: request.params[:per_page] || 5\n          )\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Middleware in Hanami\nDESCRIPTION: This Ruby code snippet shows how to add multiple middleware to a Hanami application. It demonstrates adding both Rack::Auth::Basic and Rack::MethodOverride to the middleware stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Author Repository with Has Many Association\nDESCRIPTION: Ruby code implementing AuthorRepository with has_many association to books, including methods for creating, finding, adding and removing books\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/author_repository.rb\nclass AuthorRepository < Hanami::Repository\n  associations do\n    has_many :books\n  end\n\n  def create_with_books(data)\n    assoc(:books).create(data)\n  end\n\n  def find_with_books(id)\n    aggregate(:books).where(id: id).as(Author).one\n  end\n\n  def add_book(author, data)\n    assoc(:books, author).add(data)\n  end\n\n  def remove_book(author, id)\n    assoc(:books, author).remove(id)\n  end\n\n  def books_count(author)\n    assoc(:books, author).count\n  end\n\n  def on_sales_books_count(author)\n    assoc(:books, author).where(on_sale: true).count\n  end\n\n  def book_exists?(author, id)\n    book_for(author, id).exists?\n  end\n\n  def delete_on_sales_books(author)\n    assoc(:books, author).where(on_sale: true).delete\n  end\n\n  private\n\n  def book_for(author, id)\n    assoc(:books, author).where(id: id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting response format directly in a Hanami action\nDESCRIPTION: Demonstrates how to manually set the response format inside an action method. This allows dynamic control of the response Content-Type header based on runtime conditions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.format = :json # or response.format = \"application/json\"\n          response.body = {result: \"OK\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inline Predicates for Parameter Validation in Hanami\nDESCRIPTION: This snippet demonstrates how to define and use inline predicates for parameter validation in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/books/create.rb\n\nmodule Web\n  module Controllers\n    module Books\n      class Create\n        include Web::Action\n\n        params Class.new(Hanami::Action::Params) {\n          predicate(:cool?, message: \"is not cool\") do |current|\n            current.match(/cool/)\n          end\n\n          validations do\n            required(:book).schema do\n              required(:title) { filled? & str? & cool? }\n            end\n          end\n        }\n\n        def call(params)\n          if params.valid?\n            self.body = 'OK'\n          else\n            self.body = params.error_messages.join(\"\\n\")\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Tag Builder in View Templates in Ruby\nDESCRIPTION: Shows how to use the tag builder within Hanami view templates, allowing for mixed content and nested tag builders.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/html.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n<%= tag.div(id: \"el\") do %>\n  <p>Template content can be mixed in.</p>\n  <%= tag.p(\"Also nested tag builders.\") %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Operation With Hanami Deps\nDESCRIPTION: Final implementation using Hanami's Deps mixin for clean dependency injection\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Hanami Component Using Deps Mixin\nDESCRIPTION: This code shows how to access settings within a Hanami application component using the Deps mixin.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/analytics/send_event.rb\n\nmodule Bookshelf\n  module Analytics\n    class SendEvent\n      include Deps[\"settings\"]\n\n      def call(event_type, payload)\n        return unless settings.analytics_enabled\n\n        # ...send event to analytics service here ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Job Board Form Validation Rules\nDESCRIPTION: Complex example showing form validation with multiple fields and conditional validation rules for a job board application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass CreateJob\n  include Hanami::Validations::Form\n\n  validations do\n    required(:type).filled(:int?, included_in?: [1, 2, 3])\n\n    optional(:location).maybe(:str?)\n    optional(:remote).maybe(:bool?)\n\n    required(:title).filled(:str?)\n    required(:description).filled(:str?)\n    required(:company).filled(:str?)\n\n    optional(:website).filled(:str?, format?: URI.regexp(%w(http https)))\n\n    rule(location_presence: [:location, :remote]) do |location, remote|\n      (remote.none? | remote.false?).then(location.filled?) &\n        remote.true?.then(location.none?)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Layout with Contained Content via Yield - ERB\nDESCRIPTION: This ERB layout snippet demonstrates a standard layout where the template allows slotting in dynamic page content using 'yield'. It goes in 'app/templates/layouts/app.html.erb', and is used by default for all views. The usage of <%= yield %> ensures the layout wraps around rendered templates. No dependencies beyond standard ERB are required.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n# app/templates/layouts/app.html.erb\n\n<html>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Setting Test Environment Variables\nDESCRIPTION: Example of environment variable configuration in .env.test file for a Hanami application, setting database URL and analytics flag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=postgres://localhost:5432/bookshelf_test\nANALYTICS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial from a Part Method - Hanami View - Ruby\nDESCRIPTION: Shows how to render a partial template from within a part method using the render helper. Ensures the part is passed as a local to the partial. Requires Hanami::View::Part base class, and that the corresponding partial exists in the template path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  def info_box\\n    render(\"books/info_box\")\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Dependent Exposures in Hanami View (Ruby)\nDESCRIPTION: This code shows how to create dependencies between exposures in a Hanami view. The 'author' exposure depends on the 'book' exposure to fetch the author based on the book's author_id.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\n          \"repositories.book_repo\",\n          \"repositories.author_repo\"\n        ]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n\n        expose :author do |book|\n          author_repo.get!(book.author_id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Symbolic Status Code with Halt\nDESCRIPTION: Example of using a symbolic status name instead of numeric code with halt.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nhalt :not_found\n```\n\n----------------------------------------\n\nTITLE: Setting Cache-Control Headers in Hanami Action\nDESCRIPTION: Example showing how to set Cache-Control response headers in a Hanami action to control caching behavior. Sets public cache with max age of 600 seconds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/http-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Cache-Control: public, max-age: 600`\n          response.cache_control :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Route Configuration for Books Index and Show in Hanami - Ruby\nDESCRIPTION: Shows module-based route definitions for a Hanami application, specifying root, index, and show routes for books. This makes both /books and /books/:id available to HTTP GET requests, mapping them to their respective actions. This file is auto-modified by the Hanami generator.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Assets via Console\nDESCRIPTION: Shows how to access asset references through the Hanami console using the 'assets' component. This demonstrates how to programmatically obtain asset URLs for use in your application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n$ bundle exec hanami console\n\nbookshelf[development]> Hanami.app[\"assets\"][\"app.js\"]\n# => #<Hanami::Assets::Asset:0x0000000121882918\n#  @base_url=#<Hanami::Assets::BaseUrl:0x00000001215b5de8 @url=\"\">,\n#  @path=\"/assets/app.js\",\n#  @sri=nil>\n\nbookshelf[development]> app[\"assets\"][\"app.js\"].url\n# => \"/assets/app.js\"\n```\n\n----------------------------------------\n\nTITLE: Explicit View Rendering with Custom Input\nDESCRIPTION: Shows how to explicitly render a view with custom input parameters. The action passes specific params to the view using response.render.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-from-actions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        def handle(request, response)\n          response.render(view, page: params[:page])\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Settings with Constraints in Ruby for Hanami Application\nDESCRIPTION: This snippet demonstrates how to add constraints to settings in a Hanami application's Settings class using dry-types constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    EMAIL_FORMAT = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z]+)*\\.[a-z]+\\z/i\n\n    setting :session_secret, constructor: Types::String.constrained(min_size: 32)\n    setting :from_email, constructor: Types::String.constrained(format: EMAIL_FORMAT)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action with Dependency Injection in Ruby\nDESCRIPTION: This snippet shows the implementation of a Hanami action that corresponds to the previous test. It includes dependency injection for a user repository and handles creating a book.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Action\n        include Deps[\"user_repo\"]\n\n        params do\n          required(:book).hash do\n            required(:title).value(:string)\n          end\n        end\n\n        def handle(request, response)\n          book = user_repo.create(request.params[:book])\n\n          response.body = book.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Welcome Email Operation in Ruby\nDESCRIPTION: Basic implementation of a SendWelcomeEmail operation component with a simple call method signature\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      def call(name:, email_address:)\n        # Send a welcome email to the user here...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag-based Conditional GET in Hanami\nDESCRIPTION: This snippet demonstrates how to implement Conditional GET using ETags in a Hanami action. It uses the fresh method with an etag option to set the ETag header and handle conditional requests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/http-caching.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/users/show.rb\nrequire 'hanami/action/cache'\n\nmodule Web\n  module Controllers\n    module Users\n      class Show\n        include Web::Action\n        include Hanami::Action::Cache\n\n        def call(params)\n          @user = UserRepository.new.find(params[:id])\n          fresh etag: etag\n\n          # ...\n        end\n\n        private\n\n        def etag\n          \"#{ @user.id }-#{ @user.updated_at }\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Count Methods in a Hanami Repository\nDESCRIPTION: These examples show different ways to implement count methods in a Hanami repository, including a basic count, a conditional count, and a count using raw SQL.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass BookRepository < Hanami::Repository\n  def count\n    books.count\n  end\n\n  def on_sale_count\n    books.where(on_sale: true).count\n  end\n\n  def old_books_count\n    books.read(\"SELECT id FROM books WHERE created_at < (NOW() - 1 * interval '1 year')\").count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami View with RSpec\nDESCRIPTION: This snippet shows how to test a Hanami view using RSpec. It covers testing presentational logic for price formatting and conditional rendering of an edit link based on user permissions. The test uses doubles for dependencies and asserts both method return values and rendered output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/views/books/show_spec.rb\nrequire_relative '../../../../apps/web/views/books/show'\n\nRSpec.describe Web::Views::Books::Show do\n  let(:exposures) { Hash[book: double('book', price: 1.00), current_user: user, params: {}] }\n  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/show.html.erb') }\n  let(:view)      { Web::Views::Home::Another.new(template, exposures) }\n  let(:rendered)  { view.render }\n  let(:user)      { double('user', admin?: false) }\n\n  context \"price\" do\n    it \"returns formatted price\" do\n      expect(view.formatted_price).to eq(\"$1.00\")\n    end\n  end\n\n  context \"edit link\" do\n    it \"doesn't show it by default\" do\n      expect(rendered).to_not match(%(<a href=\"\">edit</a>))\n    end\n\n    context \"when admin\" do\n      let(:user) { double('user', admin?: true) }\n\n      it \"shows it\" do\n        expect(rendered).to match(%(<a href=\"\">edit</a>))\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Secret in Hanami Settings (Ruby)\nDESCRIPTION: This code snippet demonstrates how to add a session_secret setting to the Hanami application's settings file. It uses the Types::String constructor to ensure the setting is a string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :session_secret, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Status Shortcut in Hanami Action\nDESCRIPTION: This snippet shows how to use the `status` shortcut method to set both the status code and body of the response in a more concise way within a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/request-and-response.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          status 201, \"Your resource has been created\"\n        end\n      end\n    end\n  end\nend\n\n# It will return [201, {}, [\"Your resource has been created\"]]\n```\n\n----------------------------------------\n\nTITLE: Authentication Halt Example in Hanami Action\nDESCRIPTION: Shows how to implement authentication using halt to stop execution when a user is not authenticated. Returns a 401 status code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshellf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 401 unless authenticated?(request)\n          # ...\n        end\n\n        private\n\n        def authenticated?(request)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Overriding Methods and Accessing Value Directly - Hanami View - Ruby\nDESCRIPTION: Shows how to override methods in a Book part class and use the 'value' (or '_value') method to prevent naming collisions. Enables customizing part method outputs while still accessing original object data. Requires that the underlying value responds to the method being called.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  def title\\n    value.title.upcase\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami View\nDESCRIPTION: This command generates a view in Hanami 2.2. The example creates a 'create' view for the 'books' resource. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view books.create\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view --help\n```\n\n----------------------------------------\n\nTITLE: Setting Response Properties in a Hanami Action\nDESCRIPTION: This snippet illustrates how to set various properties of the response object in a Hanami action. It shows how to set the status code, body content, custom headers, and response format, demonstrating control over the HTTP response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/request-and-response.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        def handle(request, response)\n          response.status = 201\n          response.body = \"Your resource has been created\"\n          response.headers[\"My-Header\"] = \"value\"\n          response.format = :json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Migrations in Hanami (Shell)\nDESCRIPTION: Commands to rollback migrations in Hanami, including rolling back the last migration and rolling back a specific number of migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db rollback # Migrates (down) to 20171024085712\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db rollback 3 # Migrates (down) to 20171024081617\n```\n\n----------------------------------------\n\nTITLE: Reading Shared Session Values in Second Hanami Application\nDESCRIPTION: This snippet demonstrates how to read a session value in a second Hanami application that was set in the first application. This works because both applications use the same session secret.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/sessions.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/admin/controllers/dashboard/index.rb\nmodule Admin\n  module Controllers\n    module Dashboard\n      class Index\n        include Admin::Action\n\n        def call(params)\n          session[:a]         # read => 'foo'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Non-Registered Class in Hanami's lib Directory (Ruby)\nDESCRIPTION: Shows how to create a class in the lib directory that is not registered in the container but can be used throughout the application. This example creates a SlackNotifier class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Home Show Action Implementation\nDESCRIPTION: Implementation of the home show action that returns a welcome message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(*, response)\n          response.body = \"Welcome to Bookshelf\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Halting Action with Validation Errors in Ruby\nDESCRIPTION: This Ruby code snippet demonstrates how to return specific validation error messages when halting an action due to invalid parameters. By passing a second argument (a JSON string containing the errors from `request.params.errors`) to the `halt` method, the client receives details about why the request was considered unprocessable (422).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nhalt 422, {errors: request.params.errors}.to_json unless request.params.valid?\n```\n\n----------------------------------------\n\nTITLE: Structured Logging with Payload\nDESCRIPTION: Demonstrates logging with both message and structured data payload.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Hanami App\nDESCRIPTION: Shows how to add middleware to the Rack middleware stack with optional arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/app-config.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, \"middleware\", \"args\", \"here\"\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countries Show Action in API Slice\nDESCRIPTION: Demonstrates an example of a countries show action in the API slice, including parameter validation and query execution.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/api/actions/countries/show.rb\n\nrequire \"countries\"\n\nmodule API\n  module Actions\n    module Countries\n      class Show < API::Action\n        include Deps[\n          query: \"queries.countries.show\"\n        ]\n\n        params do\n          required(:country_code).value(included_in?: ISO3166::Country.codes)\n        end\n\n        def handle(request, response)\n          response.format = :json\n\n          halt 422, {error: \"Unprocessable country code\"}.to_json unless request.params.valid?\n\n          result = query.call(\n            request.params[:country_code]\n          )\n\n          response.body = result.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Request Parameter as Input to Hanami View (Ruby)\nDESCRIPTION: This `Bookshelf::Actions::Books::Show` action class demonstrates how to pass data to a view. It retrieves the book `id` from the request parameters (`request.params[:id]`) and passes it as a keyword argument (`id:`) to the `response.render` method, making it available as input to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          response.render view, id: request.params[:id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Application on Subdomain\nDESCRIPTION: Shows how to mount an application on a specific subdomain.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmount Blog.new, host: 'blog'\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Hanami Action\nDESCRIPTION: Shows how to read a previously set cookie value from the request object in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.cookies[\"tasty_cookie\"] # => \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns (`select`) using Symbol and Expression Syntax in ROM (Ruby)\nDESCRIPTION: Illustrates how to specify which columns (projection) to retrieve from the `books` relation using the `select` method. Both symbol-based arguments and the expression syntax (returning an array of column names) are shown. The `.first` method executes the query and returns the first result as a Hash.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.select(:id, :title).first\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.select { [id, title] }.first\n# => { id: 1, title: \"To Kill a Mockingbird\" }\n```\n\n----------------------------------------\n\nTITLE: Separate Parameter Validation Class\nDESCRIPTION: Example of moving parameter validation logic to a separate class for better organization and reusability.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      module Params\n        class Create < Hanami::Action::Params\n          params do\n            required(:email).filled(:string)\n            required(:password).filled(:string)\n\n            required(:address).hash do\n              required(:street).filled(:string)\n              required(:country).filled(:string)\n            end\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami App for JSON Body Parsing\nDESCRIPTION: This snippet shows how to configure a Hanami app to use the body parser middleware for JSON request bodies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_44\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Database Migrations (Shell)\nDESCRIPTION: This shell command executes the Hanami database migration task. It applies any pending migrations, updating the database schema (in both development and test environments by default) according to the definitions in the migration files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Renderer in Ruby\nDESCRIPTION: WelcomeEmail renderer component that provides both HTML and plain text email formatting\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/renderers/welcome_email.rb\n\nmodule Bookshelf\n  module Renderers\n    class WelcomeEmail\n      def render_html(name:)\n        \"<p>Welcome to Bookshelf #{name}!</p>\"\n      end\n\n      def render_text(name:)\n        \"Welcome to Bookshelf #{name}!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing View Input from Hanami Action (Ruby)\nDESCRIPTION: This code shows how to pass input from a Hanami action to a view. It extracts the 'id' parameter from the request and passes it to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          response.render view, id: request.params[:id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Inline Predicates with Error Messages in Ruby\nDESCRIPTION: This snippet demonstrates how to create a custom inline predicate with a custom error message in a Hanami::Validations class. It also shows how to access and use the validation results.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupValidator\n  include Hanami::Validations\n\n  predicate :email?, message: 'must be an email' do |current|\n    # ...\n  end\n\n  validations do\n    required(:email).filled(:str?, :email?)\n    required(:age).filled(:int?, gt?: 18)\n  end\nend\n\nresult = SignupValidator.new(email: 'foo', age: 1).validate\n\nresult.success?               # => false\nresult.messages.fetch(:email) # => ['must be an email']\nresult.messages.fetch(:age)   # => ['must be greater than 18']\n```\n\n----------------------------------------\n\nTITLE: Custom 404 Response Using Halt\nDESCRIPTION: Shows how to implement a custom 404 response with a specific message using halt.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 404, \"These aren't the droids you're looking for\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Formats in Hanami\nDESCRIPTION: Shows how to configure the default format for all actions in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/app-config.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.actions.format :json\n```\n\n----------------------------------------\n\nTITLE: Filtering Records with `where` using Hash and Expression Syntax in ROM (Ruby)\nDESCRIPTION: Demonstrates two equivalent ways to filter records in a ROM relation (`books`) where the `publication_date` matches a specific date. It presents both the simple Hash-based syntax and the more powerful block-based expression syntax using Sequel VirtualRows. Assumes `books` is a ROM relation object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.where(publication_date: Date.new(2024, 11, 5))\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.where { publication_date.is(Date.new(2024, 11, 5)) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Paginated Books Index Action - Ruby\nDESCRIPTION: Defines the Hanami action used for handling GET /books requests. Extracts 'page' and 'per_page' params from the request and applies them to the ROM books relation, serializing the result as JSON. Defaults to page 1 and 5 per page if not specified. Requires dependency injection of 'persistence.rom' and the Hanami action base class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        def handle(request, response)\n          books = rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .page(request.params[:page] || 1)\n            .per_page(request.params[:per_page] || 5)\n            .to_a\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Relation in Ruby\nDESCRIPTION: This snippet shows the generated Books relation class for interacting with the books table in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# app/relations/books.rb\n\nmodule Bookshelf\n  module Relations\n    class Books < Bookshelf::DB::Relation\n      schema :books, infer: true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Value and Defining Methods in Ruby Part Classes for Hanami Views\nDESCRIPTION: These snippets show how to access the decorated value and define methods in part classes, including handling naming collisions and overriding methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  # `title` and `publication_date` are methods on the decorated book\n  def display_name\n    \"#{title} (#{publication_date})\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  def title\n    value.title.upcase\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Body Parser Implementation\nDESCRIPTION: Shows how to implement a custom body parser for handling specific MIME types in request processing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass FooParser\n  def mime_types\n    ['application/foo']\n  end\n\n  def parse(body)\n    # manually parse body\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Safe Parameter Access with #dig Method\nDESCRIPTION: Demonstrates safe access to nested parameters using the #dig method to avoid NoMethodError exceptions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequest.params.dig(:book, :title)             # => \"Hanami\"\nrequest.params.dig(:deeply, :nested, :param)  # => nil instead of NoMethodError\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Structure with Tree Command\nDESCRIPTION: Shell command to list the top-level directories and files in the newly created Hanami project, showing the basic structure of a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cd bookshelf\n$ tree -L 1\n.\n├── Gemfile\n├── README.md\n├── Rakefile\n├── apps\n├── config\n├── config.ru\n├── db\n├── lib\n├── public\n└── spec\n\n6 directories, 4 files\n```\n\n----------------------------------------\n\nTITLE: Using Directly Exposed Input in ERB Template\nDESCRIPTION: This ERB snippet shows how to use a value that was directly exposed by the view. The `<%= query %>` tag accesses the `query` variable, which was passed through from the view's input without modification by an exposure block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n<p>You are searching for <%= query %></p>\n```\n\n----------------------------------------\n\nTITLE: Using the Default `by_pk` Scope for Primary Key Lookup in ROM (Ruby)\nDESCRIPTION: Illustrates the usage of the built-in `by_pk` scope, automatically available on ROM relations with a defined primary key (in the schema). It provides a convenient way to fetch a single record by its primary key value. The `.one` method executes the query and returns the single result.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.by_pk(1).one\n# => { id: 1, title: \"To Kill a Mockingbird\", publication_date: #<Date 1960-07-11> }\n```\n\n----------------------------------------\n\nTITLE: Defining Named Routes in Hanami\nDESCRIPTION: Shows how to name routes using the 'as' option and how to generate paths and URLs using these names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\", as: :books\nget \"/books/:id\", to: \"books.show\", as: :book\n```\n\n----------------------------------------\n\nTITLE: Application Layout with Flash Messages\nDESCRIPTION: ERB layout template including flash message display functionality\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bookshelf</title>\n    <%= favicon_tag %>\n    <%= stylesheet_tag \"app\" %>\n  </head>\n  <body>\n    <% if flash[:alert] %>\n      <p><%= flash[:alert] %></p>\n    <% end %>\n    <% if flash[:notice] %>\n      <p><%= flash[:notice] %></p>\n    <% end %>\n\n    <%= yield %>\n    <%= javascript_tag \"app\" %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Exception Logging in Hanami\nDESCRIPTION: Demonstrates how to log caught exceptions with built-in formatting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Using External Gem in Ruby for Hanami\nDESCRIPTION: This snippet shows how to use an external gem (Kramdown) in a Hanami application, demonstrating that gems still need to be explicitly required before use, even with autoloading enabled.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"kramdown\"\n\nmodule Bookshelf\n  class Markdown\n    def to_html(markdown)\n      Kramdown::Document.new(markdown).to_html\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Mutable Variables in Hanami Context\nDESCRIPTION: Shows how to properly handle mutable variables in a custom Hanami context class by implementing initialize_copy.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      include Deps[\"repositories.user_repo\"]\n\n      def initialize(*)\n        super\n        # Imagine your context exposes methods that modify this hash\n        @my_hash = []\n      end\n\n      def initialize_copy(source)\n        super\n        @my_hash = source.instance_variable_get(:@my_hash).dup\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rack in config.ru\nDESCRIPTION: Demonstrates how to add middleware outside the Hanami application stack using config.ru\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\n\nrequire \"hanami/boot\"\n\nuse Rack::Static, :urls => [\"/public\"]\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Updated Hanami Routes with Books Index Route\nDESCRIPTION: This snippet shows the updated routes configuration, adding a route for the books index action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initial Settings class in Hanami\nDESCRIPTION: Default settings class provided by Hanami for application configuration. Settings are sourced from environment variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Component Registration in Provider\nDESCRIPTION: Demonstrates registering multiple components within a single provider using different registration keys.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/providers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/my_provider.rb\n\nHanami.app.register_provider(:my_provider) do\n  start do\n    register \"my_thing\", MyThing.new\n    register \"another.thing\", AnotherThing.new\n    register \"thing\", Thing\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Log Template with Colors in Hanami\nDESCRIPTION: Demonstrates how to customize the log template with colored output using custom formatting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n\n      config.logger.template = <<~TMPL\n        [<blue>%<progname>s</blue>] [%<severity>s] [<green>%<time>s</green>] %<message>s %<payload>s\n      TMPL\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Hanami Dependencies with CLI\nDESCRIPTION: Command to install third-party dependencies including Ruby gems, NPM packages, and setup additional Hanami gems for development features like code reloading and RSpec testing. This command is typically run automatically by 'hanami new' but can be executed manually if dependency issues arise.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/install.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami install\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Book Creation Action via CLI - Shell\nDESCRIPTION: This CLI command uses Hanami's generator to scaffold the endpoint and handler for creating new books. Assumes Hanami app context and correct installation. Updates routing and creates boilerplate action code for POST /books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.create\n```\n\n----------------------------------------\n\nTITLE: Hanami Generated Books Create Action Boilerplate - Ruby\nDESCRIPTION: Default implementation of a Hanami action generated for creating books. The handle method currently returns the class name in response. To be customized to actually create and persist book records using validated params. Dependencies: Hanami. Inputs: HTTP POST requests; outputs: placeholder string until further implementation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/create.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Bookshelf::Action\n        def handle(*, response)\n          response.body = self.class.name\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Profile View with RSpec\nDESCRIPTION: RSpec test cases for profile view showing different scenarios using test doubles and expectations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/unit/views/profile/show_spec.rb\n\nRSpec.describe Views::Profile::Show do\n  subject(:view) { described_class.new(users_repo:) }\n\n  let(:user_repo) { double(:user_repo) }\n  let(:current_user) { double(:user, name: \"Amy\", id: 1) }\n\n  context \"user inspects their profile\" do\n    it \"renders their profile\" do\n      allow(user_repo).to receive(:by_id).with(1).and_return(current_user)\n\n      output = view.call(current_user:, id: 1).to_s\n\n      expect(output).to include(\"This is your profile. You can edit your data.\")\n    end\n  end\n\n  context \"user inspects someone else's profile\" do\n    let(:other_user) { double(:user, name: \"Lena\", id: 2)}\n\n    it \"renders the other user's profile\" do\n      allow(users_repo).to receive(:by_id).with(2).and_return(other_user)\n\n      output = view.call(current_user:, id: 2).to_s\n\n      expect(output).to include(\"This is the profile of Lena. You can admire it.\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: ERB Template Displaying Multiple Data Lists\nDESCRIPTION: This ERB template snippet shows how to display multiple lists of data exposed by the view. It iterates over both the `books` variable and the `best_sellers` variable, displaying the title of each book in separate unordered lists under different headings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n<h1>What's on the Bookshelf</h1>\n<ul>\n  <% books.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n\n<h2>Don't miss these best selling titles</h2>\n<ul>\n  <% best_sellers.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Delivering a Mailer with Local Variables in Hanami\nDESCRIPTION: This code demonstrates how to deliver a mailer by passing local variables that can be accessed in the mailer class and templates. The example shows passing a user object to the mailer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/basic-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nu = User.new(name: 'Luca', email: 'luca@example.com')\nMailers::Welcome.deliver(user: u)\n```\n\n----------------------------------------\n\nTITLE: Mapping Specific Exceptions to HTTP Errors in Hanami (Ruby)\nDESCRIPTION: This Ruby snippet shows how to configure a Hanami application (`Bookshelf::App`) to render a specific error response for a given exception. It uses `config.render_error_responses.merge!` within `config/app.rb` to map the `ROM::TupleCountMismatchError` exception class (as a string) to the `:not_found` symbol, which corresponds to the standard 404 Not Found HTTP status. This results in `public/404.html` being rendered when this specific ROM error occurs in production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/rendering-errors.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.render_error_responses.merge!(\n      \"ROM::TupleCountMismatchError\" => :not_found\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Before Callback with Method in Hanami Action\nDESCRIPTION: This snippet demonstrates how to use a before callback in a Hanami action to track the remote IP address. The callback is implemented as a method that is called before the main action logic.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/control-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        before :track_remote_ip\n\n        def call(params)\n          # ...\n        end\n\n        private\n        def track_remote_ip\n          @remote_ip = request.ip\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a Countries Show Query in API Slice\nDESCRIPTION: Shows an example of a countries show query class in the API slice, which retrieves country information based on a country code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/api/queries/countries/show.rb\n\nrequire \"countries\"\n\nmodule API\n  module Queries\n    module Countries\n      class Show\n        def call(country_code)\n          country = ISO3166::Country[country_code]\n\n          {\n            name: country.iso_short_name,\n            flag: country.emoji_flag,\n            currency: country.currency_code\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTTP Status Code Symbols in Hanami\nDESCRIPTION: A complete mapping of HTTP status codes to their symbolic representations in Hanami. These symbols can be used instead of integer status codes for improved code readability.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/status-codes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n:continue                            # 100\n:switching_protocols               # 101\n:processing                         # 102\n:early_hints                        # 103\n:ok                                 # 200\n:created                            # 201\n:accepted                           # 202\n:non_authoritative_information      # 203\n:no_content                         # 204\n:reset_content                      # 205\n:partial_content                    # 206\n:multi_status                       # 207\n:already_reported                   # 208\n:im_used                            # 226\n:multiple_choices                   # 300\n:moved_permanently                  # 301\n:found                              # 302\n:see_other                          # 303\n:not_modified                       # 304\n:use_proxy                          # 305\n:temporary_redirect                 # 307\n:permanent_redirect                 # 308\n:bad_request                        # 400\n:unauthorized                       # 401\n:payment_required                   # 402\n:forbidden                          # 403\n:not_found                          # 404\n:method_not_allowed                 # 405\n:not_acceptable                     # 406\n:proxy_authentication_required      # 407\n:request_timeout                    # 408\n:conflict                           # 409\n:gone                               # 410\n:length_required                    # 411\n:precondition_failed                # 412\n:payload_too_large                  # 413\n:uri_too_long                       # 414\n:unsupported_media_type            # 415\n:range_not_satisfiable              # 416\n:expectation_failed                 # 417\n:misdirected_request                # 421\n:unprocessable_entity               # 422\n:locked                             # 423\n:failed_dependency                  # 424\n:too_early                          # 425\n:upgrade_required                   # 426\n:precondition_required              # 428\n:too_many_requests                  # 429\n:request_header_fields_too_large    # 431\n:unavailable_for_legal_reasons      # 451\n:internal_server_error              # 500\n:not_implemented                    # 501\n:bad_gateway                        # 502\n:service_unavailable                # 503\n:gateway_timeout                    # 504\n:http_version_not_supported         # 505\n:variant_also_negotiates            # 506\n:insufficient_storage               # 507\n:loop_detected                      # 508\n:bandwidth_limit_exceeded           # 509\n:not_extended                       # 510\n:network_authentication_required    # 511\n```\n\n----------------------------------------\n\nTITLE: Adding ROM Rake Tasks for Database Migrations\nDESCRIPTION: This snippet adds ROM's rake tasks for database migrations to the Rakefile.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\n\nrequire \"rom/sql/rake_task\"\n\ntask :environment do\n  require_relative \"config/app\"\n  require \"hanami/prepare\"\nend\n\nnamespace :db do\n  task setup: :environment do\n    Hanami.app.prepare(:persistence)\n    ROM::SQL::RakeSupport.env = Hanami.app[\"persistence.config\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Rack Environment in Hanami Action\nDESCRIPTION: Demonstrates how to access raw Rack environment data within a Hanami action using request.env\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.env\n\n          request.env[\"REQUEST_METHOD\"] #=> GET\n          request.env[\"PATH_INFO\"] #=> /books/1\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Private Exposures in Hanami View (Ruby)\nDESCRIPTION: This snippet demonstrates how to use private exposures in a Hanami view. It creates a private 'author' exposure and a public 'author_name' exposure that depends on it.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Authors\n      class Show < Bookshelf::View\n        include Deps[\"repositories.author_repo\"]\n\n        private_expose :author do |author_id:|\n          author_repo.get!(author_id)\n        end\n\n        expose :author_name do |author|\n          author.name\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Memoizing Methods in a Part - Hanami View - Ruby\nDESCRIPTION: Illustrates memoizing methods within a part object to cache expensive operations during a single view render. Uses decorate to return an attribute as a part. Suitable for data that's static during rendering. Uses standard Ruby memoization patterns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  # Returns the author as a Views::Parts::Author\\n  decorate :author\\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project-Level Middleware in Hanami\nDESCRIPTION: Shows the recommended approach for configuring Rack middleware at the project level using the Hanami configuration block in environment.rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/rack-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n\nHanami.configure do\n  # ...\n  middleware.use Rack::Auth::Basic\nend\n```\n\n----------------------------------------\n\nTITLE: Directly Exposing Input to Template in Hanami View (Ruby)\nDESCRIPTION: This `Bookshelf::Views::Books::Search` view demonstrates a shorthand for exposing input directly. By calling `expose :query` without a block, the `query` input received from the action is automatically made available to the template under the same name (`query`).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/search.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Search < Bookshelf::View\n        expose :query\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing BookRepository with Belongs To Association in Hanami\nDESCRIPTION: Ruby code for BookRepository class, defining a belongs_to association and a method to find a book with its associated author.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/belongs-to.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/book_repository.rb\nclass BookRepository < Hanami::Repository\n  associations do\n    belongs_to :author\n  end\n\n  def find_with_author(id)\n    aggregate(:author).where(id: id).map_to(Book).one\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Route Helpers in Hanami Views\nDESCRIPTION: This snippet shows how to use route helpers in Hanami views to generate URLs. It demonstrates the use of the 'routes' object to create links to different routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < View\n        def link_to_book(book)\n          link_to book.title, routes.book_path(book.id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Books Index Feature Spec (Ruby)\nDESCRIPTION: This RSpec feature spec tests the functionality for listing books. Located in `spec/features/books/index_spec.rb`, it simulates visiting the `/books` path and asserts that the page displays list items (`<li>`) containing specific book titles.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/features/books/index_spec.rb\n\nRSpec.feature \"Books index\" do\n  it \"shows a list of books\" do\n    visit \"/books\"\n\n    expect(page).to have_selector \"li\", text: \"Test Driven Development\"\n    expect(page).to have_selector \"li\", text: \"Practical Object-Oriented Design in Ruby\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTful Routes in Hanami\nDESCRIPTION: This snippet shows how to set up RESTful routes for a resource in Hanami. It demonstrates the use of the 'resources' method to generate standard CRUD routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nHanami.app do\n  slice :main, at: '/' do\n    root to: 'home.index'\n    resources :books\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including an Authentication Module in a Hanami Action\nDESCRIPTION: Shows how to include an authentication module in a specific action to apply shared authentication behavior without using inheritance.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Update < Bookshelf::Action\n        include AuthenticatedAction\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Views with RSpec\nDESCRIPTION: Example of how to test Hanami views using RSpec, showing basic view rendering assertions\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/views/home/show_spec.rb\n\nRSpec.describe Bookshelf::Views::Home::Show do\n  subject(:view) { described_class.new }\n\n  describe \"#call\" do\n    subject(:output) { view.call }\n\n    it \"renders a welcome heading\" do\n      expect(output.to_s).to match \"<h1>Welcome to Bookshelf</h1>\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration with Required Library\nDESCRIPTION: Example of configuring a provider that requires an explicit library import.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/redis.rb\n\nHanami.app.register_provider :redis do\n  start do\n    require \"custom_redis/client\"\n\n    redis = CustomRedis::Client.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Body Parser Implementation\nDESCRIPTION: Shows how to implement a custom request body parser for handling specific MIME types.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass FooParser\n  def mime_types\n    ['application/foo']\n  end\n\n  def parse(body)\n    # manually parse body\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Test for Books Index Endpoint\nDESCRIPTION: This snippet shows an RSpec test for the books index endpoint, expecting a JSON response with a list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/index_spec.rb\n\nRSpec.describe \"GET /books\", type: :request do\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq [\n      {\"title\" => \"Test Driven Development\"},\n      {\"title\" => \"Practical Object-Oriented Design in Ruby\"}\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Input Defaults in Hanami View (Ruby)\nDESCRIPTION: This code shows how to specify default values for optional input in a Hanami view. It sets default values for 'page' and 'per_page' parameters in a book listing exposure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repositories.book_repo\"]\n\n        expose :books do |page: 1, per_page: 20|\n          book_repo.listing(page: page, per_page: per_page)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Base View Class for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of a base View class for Hanami 2.1. It inherits from Hanami::View and serves as a base for all views in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n# frozen_string_literal: true\n\nrequire \"hanami/view\"\n\nmodule Bookshelf\n  class View < Hanami::View\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Foreign Keys in Hanami Tables\nDESCRIPTION: Demonstrates how to define a foreign key relationship between tables using the foreign_key method. This example creates an author_id column in the books table that references the authors table with cascade deletion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/create-table.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :books do\n  # ...\n  foreign_key :author_id, :authors, on_delete: :cascade, null: false\nend\n```\n\n----------------------------------------\n\nTITLE: Altering Table Structure in Hanami Migration\nDESCRIPTION: This snippet demonstrates how to use the alter_table method in a Hanami migration to add a new column and set a default value for an existing column. It shows the syntax for defining migrations and modifying table structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/alter-table.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    alter_table :users do\n      # `users` table is implicit within this block, so it can be omitted.\n      add_column :email, String,  null: false, unique: true\n      set_column_default :visits_counts, 0\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Multiple MIME Types for a Format in Hanami\nDESCRIPTION: This snippet demonstrates how to register multiple MIME types for a single format (JSON) in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :json, [\"application/json+scim\", \"application/json\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Named Constraints to Hanami Tables\nDESCRIPTION: Demonstrates how to define named constraints on database columns using the constraint method. The example shows an age validation constraint and a password length constraint using database functions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/create-table.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :users do\n  # ...\n  column :age, Integer\n  constraint(:adult_constraint) { age > 18 }\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :users do\n  # ...\n  column :password, String\n  constraint(:password_length_constraint) { char_length(password) >= 8 }\nend\n```\n\n----------------------------------------\n\nTITLE: ERB Template Displaying a List of Books\nDESCRIPTION: This ERB template snippet demonstrates iterating over a `books` variable (expected to be an enumerable collection) and displaying the `title` attribute of each book within an unordered list.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n<h1>What's on the Bookshelf</h1>\n<ul>\n  <% books.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Base URL for Hanami Assets in Ruby\nDESCRIPTION: This snippet shows how to set up a CDN base URL for serving assets in a Hanami application's production environment. It demonstrates the use of config.assets.base_url in the app configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/using-a-cdn.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.assets.base_url = \"https://some-cdn.net/my-site\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Hanami Settings in Ruby Console\nDESCRIPTION: This code demonstrates how to access Hanami application settings in a console session after setting environment variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ANALYTICS_ENABLED=true MAX_CART_ITEMS=100 bundle exec hanami console\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].analytics_enabled\n=> true\n\nbookshelf[development]> Hanami.app[\"settings\"].max_cart_items\n=> 100\n```\n\n----------------------------------------\n\nTITLE: Using Asset View Helpers\nDESCRIPTION: Demonstrates the use of Hanami view helpers for generating asset URLs and HTML tags. These helpers make it easy to reference compiled assets in your views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nasset_url(\"app.js\")\n# => \"/assets/app-LSLFPUMX.js\"\n\njavascript_tag(\"app\")\n# => '<script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>'\n```\n\n----------------------------------------\n\nTITLE: Creating Database in Hanami (Shell)\nDESCRIPTION: Commands to create databases for different environments in Hanami. It shows how to create databases for both development and test environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db create\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami db create\n```\n\n----------------------------------------\n\nTITLE: Standalone Rendering of a Hanami View via Console (Ruby)\nDESCRIPTION: This snippet demonstrates how to render a Hanami view outside the standard HTTP request cycle using the Hanami console (`bundle exec hanami console`). It retrieves the `views.home.show` view instance from the application container (`Hanami.app`), calls its `call` method to render it, and converts the result to a string (`to_s`) to get the final HTML output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> Hanami.app[\"views.home.show\"].call.to_s\n=> \"<html><body><h1>Welcome to Bookshelf</h1></body></html>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Hanami Repository for a Legacy Database Table\nDESCRIPTION: This example demonstrates how to configure a Hanami repository to work with a legacy database table that has non-standard column names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/operator_repository.rb\nclass OperatorRepository < Hanami::Repository\n  self.relation = :t_operator\n\n  mapping do\n    attribute :id,   from: :operator_id\n    attribute :name, from: :s_name\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Paths and URLs from Named Routes in Hanami\nDESCRIPTION: Demonstrates how to use named routes to generate paths and full URLs in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app[\"routes\"].path(:books)\n=> \"/books\"\n\nHanami.app[\"routes\"].url(:books)\n=> #<URI::HTTP http://0.0.0.0:2300/books>\n```\n\n----------------------------------------\n\nTITLE: Enforcing Data Constraints in Strict Mode Hanami Entities\nDESCRIPTION: This example demonstrates how constraints like minimum age and email format are enforced in strict mode. Values that don't meet these constraints will raise a TypeError.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new(id: 1, name: \"Luca\", age: 1, email: \"luca@hanami.test\")\n  # => TypeError: 1 (Integer) has invalid type for :age violates constraints (gt?(18, 1) failed)\n\nUser.new(id: 1, name: \"Luca\", age: 35, email: \"foo\")\n  # => TypeError: \"foo\" (String) has invalid type for :email violates constraints (format?(/\\@/, \"foo\") failed)\n```\n\n----------------------------------------\n\nTITLE: Redirect Implementation in Hanami Action\nDESCRIPTION: Demonstrates how to implement authentication with redirection to a sign-in page when a user is not authenticated.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          response.redirect_to(\"/sign-in\") unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Books Index Action for Pagination Parameters in Ruby\nDESCRIPTION: This Ruby code modifies the `handle` method in `Bookshelf::Actions::Books::Index` (located in `app/actions/books/index.rb`). It retrieves the `page` and `per_page` values from the incoming request's parameters (`request.params`), providing default values (1 for page, 5 for per_page) if they are not present. These values are then passed to the `book_repo.all_by_title` method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        include Deps[\"repos.book_repo\"]\n\n        def handle(request, response)\n          books = book_repo.all_by_title(\n            page: request.params[:page] || 1,\n            per_page: request.params[:per_page] || 5\n          )\n\n          response.format = :json\n          response.body = books.map(&:to_h).to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Custom View Context Class (Ruby)\nDESCRIPTION: Illustrates the basic structure for defining a custom view context by inheriting from `Hanami::View::Context`. This class, typically placed at `app/views/context.rb`, serves as a foundation for adding custom helper methods and dependencies available to all views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Count in Hanami View Scope - Ruby\nDESCRIPTION: Defines a scope-level method using the format_number helper to output the formatted word count of a post’s body_text. Assumes a local variable post responds to body_text. This code should be inside a Hanami view scope definition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef post_word_count\n  # Presuming a `post` local\n  format_number(post.body_text.split)\nend\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Asset Configuration in Hanami\nDESCRIPTION: Example showing how to apply different asset compilation settings for development (watch mode) and production (compile mode) environments using the args.watch condition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait assets.run({\n  esbuildOptionsFn: (args, esbuildOptions) => {\n    if (args.watch) {\n      // watch mode (development) options here\n    } else {\n      // compile mode (production) options here\n    }\n\n    return esbuildOptions;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Including Authentication Module in Action Class\nDESCRIPTION: Shows how to include the authentication module in a specific action class to add authentication behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Update < Bookshelf::Action\n        include AuthenticatedAction\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console in Test Environment\nDESCRIPTION: Command to launch Hanami console in test environment using bundler.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Environment in Hanami (Ruby)\nDESCRIPTION: Demonstrates the use of Hanami.env to retrieve the current environment as a symbol. This method returns the value of HANAMI_ENV or falls back to RACK_ENV.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env\n=> :development\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=test\n\nHanami.env\n=> :test\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=production\n\nHanami.env\n=> :production\n```\n\n----------------------------------------\n\nTITLE: Using Custom Predicates in Hanami Action Params\nDESCRIPTION: Shows integration of custom predicates within a Hanami action's params validation class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\nrequire_relative 'my_predicates'\n\nmodule Web\n  module Controllers\n    module Signup\n      class Params < Hanami::Action::Params\n        predicates MyPredicates\n\n        validations do\n          required(:id).filled(:uuid?)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Slice-Specific Settings\nDESCRIPTION: Demonstrates how to define slice-specific settings using a custom Settings class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/config/settings.rb\n\nmodule CDN\n  class Settings < Hanami::Settings\n    setting :cdn_api_key, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Multipart Email Delivery in Hanami\nDESCRIPTION: Demonstrates the basic usage of Hanami mailers to deliver a multipart email (HTML and text parts) using the default configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/delivery.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nMailers::Welcome.deliver\n```\n\n----------------------------------------\n\nTITLE: Configuring .env with DATABASE_URL for Multiple Databases - Shell\nDESCRIPTION: Presents example .env file lines to define the DATABASE_URL for SQLite, Postgres, or MySQL databases. The code includes a comment to specify that secrets should go in .env.local, and gives template URLs for each supported adapter. To be placed in a checked-in .env file at the application's root.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# This is checked into source control, so put sensitive values into `.env.local`\\n\\n# For a SQLite database\\nDATABASE_URL=sqlite://db/bookshelf.sqlite\\n\\n# For a Postgres database\\nDATABASE_URL=postgres://localhost/bookshelf\\n\\n# For a MySQL database\\nDATABASE_URL=mysql2://root@localhost/bookshelf\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Database Gateways in Hanami (Hanami/Ruby)\nDESCRIPTION: Provides sample Ruby code for advanced DB provider configuration, creating multiple gateways under Hanami’s config.providers system. This is intended when connecting to more than one datastore (e.g., for migrations or legacy DBs). Demonstrates setting connection_options, enabling SQL extensions per gateway, and defining multiple adapters. Must be placed in config/providers/db.rb. Dependencies: Hanami, ROM, Sequel. Input: Named gateways and options. Output: Hanami configured with multiple isolated DB connections.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.configure_provider :db do\n  config.gateway :default do |gw|\n    gw.connection_options search_path: ['public', 'alt']\n\n    gw.adapter :sql do |sql|\n      sql.extension :my_custom_ext\n    end\n  end\n\n  config.gateway :legacy do |gw|\n    gw.connection_options max_connections: 4\n    gw.adapter :sql\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Layout Template in ERB\nDESCRIPTION: This snippet shows a basic HTML layout template using ERB. It demonstrates the use of the yield statement to include content from individual view templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/templates-and-partials.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n# app/templates/layouts/app.html.erb\n\n<html>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Excluding Records with `exclude` using Range and Expression Syntax in ROM (Ruby)\nDESCRIPTION: Provides two ways to exclude records from a ROM relation (`books`). The first uses a Range (`...1000` representing less than 1000) with Hash-like syntax, and the second uses the expression syntax with a less-than operator to achieve the same result: excluding books with fewer than 1000 pages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# No short reads allowed, hefty tomes only!\nbooks.exclude(pages: ...1000)\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.exclude { pages < 1000 }\n```\n\n----------------------------------------\n\nTITLE: Route Inspection Command\nDESCRIPTION: Shows the output of the hanami routes command for inspecting application routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home                          as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nGET     /books/new                    books.new\nPOST    /books                        books.create\nPATCH   /books/:id                    books.update\nDELETE  /books/:id                    books.destroy\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Hanami Provider\nDESCRIPTION: This snippet demonstrates how to access settings when registering a provider in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/redis.rb\n\nHanami.app.register_provider :redis do\n  start do\n    require \"redis\"\n\n    redis = Redis.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logging Backend for Exceptions in Hanami\nDESCRIPTION: This code demonstrates how to add a dedicated logging backend to handle exceptions separately, logging them to a specific file during test runs in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/spec_helper.rb\n\nHanami.logger.add_backend(\n  stream: Hanami.app.root.join(\"log\").join(\"exceptions.log\"), log_if: :exception?\n)\n\nbegin\n  raise \"Oh noez\"\nrescue => e\n  Hanami.logger.error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic View Rendering\nDESCRIPTION: Demonstrates how to disable the automatic view rendering feature by implementing the auto_render? method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-from-actions.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef auto_render?(response)\n  false\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Specific Middleware in Hanami\nDESCRIPTION: Demonstrates how to add Rack middleware to a specific Hanami application by configuring it in the application's configuration block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/rack-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nrequire 'rack/auth/basic'\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      middleware.use Rack::Auth::Basic\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inserting Middleware at Specific Position\nDESCRIPTION: This Ruby code snippet demonstrates how to insert middleware at a specific position in the stack using the 'before:' option. It shows adding Rack::ShowStatus before Rack::Auth::Basic.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n    config.middleware.use Rack::ShowStatus, before: Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Views with Data Exposures\nDESCRIPTION: Examples of Hanami views with data exposures and repository dependencies\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repositories.book_repo\"]\n\n        expose :books do\n          book_repo.listing\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repositories.book_repo\"]\n\n        expose :books do\n          book_repo.listing\n        end\n\n        expose :best_sellers do\n          book_repo.best_sellers\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        config.template = \"books/index\" # configure which template to render\n        config.layout = \"app\" # configure which layout to use. Set to false or nil to use no layout\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating New Hanami Application in Shell\nDESCRIPTION: Command to create a new Hanami application named 'bookshelf' using the Hanami CLI.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf\n```\n\n----------------------------------------\n\nTITLE: Creating a Specialized Base Action Class in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates creating a specialized base action class for a specific group of actions, including authentication behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/user_profile/base.rb\n\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Base < Bookshelf::Action\n        before :authenticate_user!\n\n        private\n\n        def authenticate_user!(request, response)\n          # halt 401 unless ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Types for JSONB Data in Hanami Relation\nDESCRIPTION: This example demonstrates how to define a complex type for handling JSONB data in a relation, including input and output transformations for a JWT::JWK::Set object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Credentials < Hanami::DB::Relation\n      JWKS = Types.define(JWT::JWK::Set) do\n        input { |jwks| Types::PG::JSONB[jwks.export] }\n        output { |jsonb| JWT::JWK::Set.new(jsonb.to_h) }\n      end\n\n      schema infer: true do\n        attribute :jwks, JWKS\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Nesting Plural RESTful Resources in Hanami\nDESCRIPTION: This snippet demonstrates how to nest plural RESTful resources, creating a hierarchy of routes for related resources like books and reviews.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books do\n  resources :reviews\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Expires Headers in Hanami Action\nDESCRIPTION: Demonstrates setting both Expires and Cache-Control headers in a Hanami action response. The expires method sets the expiration time and includes matching Cache-Control directives.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/http-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Expires: Sun, 20 Nov 2022 17:47:02 GMT, Cache-Control: public, max-age=600`\n          response.expires 60, :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reloading Code in Hanami Console\nDESCRIPTION: Example of using the reload helper in the Hanami console to refresh code after making changes without needing to restart the console session.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/code-reloading.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> reload\nReloading...\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile for Hanami 2.1.0\nDESCRIPTION: Updates the Gemfile to include new dependencies required for Hanami 2.1.0, including hanami-assets, hanami-view, hanami-webconsole, and capybara for testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"hanami-assets\", \"~> 2.1\"\ngem \"hanami-view\", \"~> 2.1\"\n\ngroup :development do\n  gem \"hanami-webconsole\", \"~> 2.1\"\nend\n\ngroup :test do\n  gem \"capybara\"\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Middleware Stack with Arguments in Hanami\nDESCRIPTION: Demonstrates how to view the Rack middleware stack including initialization arguments using the --with-arguments flag, showing detailed configuration for each middleware component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/middleware.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware --with-arguments\n\n/    Dry::Monitor::Rack::Middleware (instance) args: []\n/    Rack::Session::Cookie args: [{:key=>\"my_app.session\", :secret=>\"secret\", :expire_after=>31536000}]\n/    Hanami::Middleware::BodyParser args: [:json]\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Inflector\nDESCRIPTION: Shows how to replace the default inflector with a custom implementation that provides the same interface as Dry::Inflector.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/inflector.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\nrequire \"my_inflector\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflector = MyInflector.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Server in Shell\nDESCRIPTION: Command to start the Hanami server for the new application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami server\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Routes with Books Index (Ruby)\nDESCRIPTION: This snippet shows the `config/routes.rb` file after the `books.index` action was generated. It includes the previously defined root route and the newly added route, mapping GET requests to `/books` to the `books.index` action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Data Integrity Enforcement in Hanami Entities\nDESCRIPTION: Example showing how Hanami entities enforce data integrity by raising exceptions when attribute values cannot be properly coerced to their defined types.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nBook.new(created_at: \"foo\") # => ArgumentError\n```\n\n----------------------------------------\n\nTITLE: Using Hanami Inflector Component in Ruby\nDESCRIPTION: Demonstrates various inflector methods including pluralization, singularization, camelize, classify, tableize, and other string transformations using the inflector component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/inflector.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/my_component.rb\n\nmodule Bookshelf\n  class MyComponent\n    include Deps[\"inflector\"]\n\n    def call\n      inflector.pluralize(\"book\")    # => \"books\"\n      inflector.singularize(\"books\") # => \"book\"\n\n      inflector.camelize(\"dry/inflector\") # => \"Dry::Inflector\"\n      inflector.classify(\"books\")         # => \"Book\"\n      inflector.tableize(\"Book\")          # => \"books\"\n\n      inflector.dasherize(\"best_selling_books\")  # => \"best-selling-books\"\n      inflector.underscore(\"best-selling-books\") # => \"best_selling_books\"\n\n      inflector.demodulize(\"Bookshelf::MyComponent\") # => \"MyComponent\"\n\n      inflector.humanize(\"hanami_inflector\") # => \"Hanami inflector\"\n      inflector.humanize(\"author_id\")        # => \"Author\"\n\n      inflector.ordinalize(1)  # => \"1st\"\n      inflector.ordinalize(2)  # => \"2nd\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Text Entry with INFO Level in Ruby using Hanami Logger\nDESCRIPTION: Demonstrates how to log a simple text entry with INFO level using the Hanami logger. This is the basic usage of the logger for informational messages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookies in Hanami\nDESCRIPTION: This snippet demonstrates how to completely disable cookies for a Hanami application by setting the cookies configuration to nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Hanami App Router (Ruby)\nDESCRIPTION: This snippet demonstrates how to add middleware to the Hanami app's router. It shows the use of config.middleware.use to add a custom middleware with arguments to the middleware stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/app-config.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, \"middleware\", \"args\", \"here\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Method to Hanami Context\nDESCRIPTION: Shows how to add a custom method to the Hanami context class to check if a given path matches the current request.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      def current_path?(path)\n        request.fullpath == path\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Sessions in Hanami Application Configuration\nDESCRIPTION: This snippet demonstrates how to enable sessions in a Hanami application by configuring the session adapter and secret in the application.rb file. The default adapter is :cookie which uses Rack::Session::Cookie for storage.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      sessions :cookie, secret: ENV['WEB_SESSIONS_SECRET']\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Settings with Coercion in Ruby\nDESCRIPTION: Illustrates how to define settings with specific types and coercion for analytics_enabled and max_cart_items in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, constructor: Types::Params::Bool\n    setting :max_cart_items, constructor: Types::Params::Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing with Dependency Injection in Hanami\nDESCRIPTION: This example shows how to use dependency injection to mock repository collaborators in Hanami action tests, avoiding database access during testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/controllers/users/show_spec.rb\nrequire_relative '../../../../apps/web/controllers/users/show'\n\nRSpec.describe Web::Controllers::Users::Show do\n  let(:action)     { Web::Controllers::Users::Show.new(repository: repository) }\n  let(:user)       { User.new(id: 23, name: 'Luca') }\n  let(:repository) { double('repository', find: user) }\n\n  it \"is successful\" do\n    response = action.call(id: user.id)\n\n    expect(response[0]).to      eq(200)\n    expect(action.user).to      eq(user)\n    expect(action.exposures).to eq({user: user})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring No Auto-Register Paths in Hanami App (Ruby)\nDESCRIPTION: Demonstrates how to configure a Hanami application to exclude an entire directory from auto-registration. This example excludes the 'app/structs' directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.no_auto_register_paths << \"structs\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Cookie Operations in Hanami Controllers\nDESCRIPTION: Demonstrates basic cookie operations in a Hanami controller including reading, assigning, removing values, and setting cookies with options. Cookies behave like a Hash with additional functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          cookies[:b]         # read\n          cookies[:a] = 'foo' # assign\n          cookies[:c] = nil   # remove\n          cookies[:d] = { value: 'foo', path: '/bar' } # assign with options\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring format for a specific Hanami action\nDESCRIPTION: Sets the JSON format for a specific action class. This allows individual actions to have different format requirements from the application default.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        format :json # or `config.format :json`\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Comment in Hanami\nDESCRIPTION: Ruby code demonstrating how to create a comment that links a user to a story, implementing the many-to-many relationship.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ncomments = CommentRepository.new\n\ncomment = comments.create(user_id: commenter.id, story_id: story.id, text: \"Hi and welcome!\")\n  # => #<Comment:0x00007ffe71af9598 @attributes={:id=>1, :user_id=>2, :story_id=>1, :text=>\"Hi and welcome!\", :created_at=>2017-10-24 09:12:30 UTC, :updated_at=>2017-10-24 09:12:30 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Mandrill Delivery Method for Hanami Mailers\nDESCRIPTION: Provides an example implementation of a custom delivery method class that uses the Mandrill API to deliver emails. The class must implement the initialize and deliver! methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/delivery.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MandrillDeliveryMethod\n  def initialize(options)\n    @api_key = options.fetch(:api_key)\n  end\n\n  def deliver!(mail)\n    send convert(mail)\n  end\n\n  private\n\n  def send(message)\n    gateway.messages.send message\n  end\n\n  def convert(mail)\n    # Convert a Mail::Message instance into a Hash structure\n    # See https://mandrillapp.com/api/docs/messages.ruby.html\n  end\n\n  def gateway\n    Mandrill::API.new(@api_key)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in App Class in Ruby\nDESCRIPTION: Demonstrates how to use settings to inform application configuration in the App class of a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Formats for Actions in Hanami App\nDESCRIPTION: This example demonstrates how to configure multiple formats (JSON and HTML) for actions in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.actions.format :json, :html\n```\n\n----------------------------------------\n\nTITLE: Settings with Type Coercion - Ruby\nDESCRIPTION: Demonstrates type coercion for boolean and integer settings\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, constructor: Types::Params::Bool\n    setting :max_cart_items, constructor: Types::Params::Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Making Hanami View Exposure Available to Layout (Ruby)\nDESCRIPTION: This Ruby snippet shows how to make an exposure's value available to the application layout in addition to the view's specific template. By adding the `layout: true` option to the `expose` call for `:recommended_books`, the resulting data can be accessed in both contexts.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nexpose :recommended_books, layout: true do\n  book_repo.recommended_listing\nend\n```\n\n----------------------------------------\n\nTITLE: Bypassing HTML Escaping with raw in Ruby\nDESCRIPTION: Illustrates the use of the `raw` helper in Hanami. This helper explicitly marks a given string as HTML safe, ensuring it will not be automatically escaped when rendered in an HTML view. This is useful for intentionally including pre-formatted HTML, but poses a significant security risk if used with untrusted user input.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/string-escaping.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nraw(user.name)\n# => \"Little Bobby <alert>Tables</alert>\"\n\nraw(user.name).html_safe?\n# => true\n```\n\n----------------------------------------\n\nTITLE: Using Registered Email Client in Ruby Operation\nDESCRIPTION: This code shows how to use a registered email client dependency in a Hanami operation. It demonstrates including dependencies and using them within the operation's call method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/providers.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: welcome_email.render_text(name: name),\n          html_body: welcome_email.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Commit with JSONB Column in Hanami Repository\nDESCRIPTION: This snippet shows how to create a commit with a JSONB metadata column using a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nCommitRepository.new.create(metadata: { sha: \"8775b81\" })\n  # => #<Commit:0x007f8573dcbbf8 @attributes={:id=>1, :metadata=>{:sha=>\"8775b81\"}}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application-Level Middleware\nDESCRIPTION: Shows how to add basic authentication middleware at the application level\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to a Part - Hanami View - Ruby\nDESCRIPTION: Defines a custom display_name method in a Book part class that composes decorated value methods for display. Demonstrates extending Hanami part classes with object-oriented logic. Requires Bookshelf::Views::Part and that the decorated object responds to title and publication_date.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  # `title` and `publication_date` are methods on the decorated book\\n  def display_name\\n    \"#{title} (#{publication_date})\"\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action in Shell\nDESCRIPTION: Command to generate a new Hanami action using the Hanami CLI.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action home.show\n```\n\n----------------------------------------\n\nTITLE: Excluding a Directory from Hanami Auto-Registration via Configuration (Ruby)\nDESCRIPTION: This configuration snippet demonstrates how to prevent all classes within a specific directory (`app/structs`) from being auto-registered in the Hanami container. It modifies the application configuration in `config/app.rb` by adding the directory name (\"structs\") to the `config.no_auto_register_paths` array.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.no_auto_register_paths << \"structs\"\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Exceptions with Status Codes in Hanami Action\nDESCRIPTION: Shows how to handle StandardError by returning a 500 status code in a Hanami action. This is the basic form of exception handling where exceptions are mapped directly to HTTP status codes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/exception-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception StandardError => 500\n\n        def handle(request, response)\n          raise \"error\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mounting Applications in Hanami\nDESCRIPTION: Shows how to mount different applications within the Hanami environment configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  mount Web::Application, at: '/'\n  mount OtherApplication.new, at: '/other'\n\n  ...\nend\n```\n\n----------------------------------------\n\nTITLE: Unit Testing SendWelcomeEmail Operation with RSpec\nDESCRIPTION: Provides an example of how to unit test the SendWelcomeEmail operation using RSpec, demonstrating the substitution of dependencies for testing purposes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/unit/operations/send_welcome_email_spec.rb\n\nRSpec.describe Bookshelf::Operations::SendWelcomeEmail, \"#call\" do\n  subject(:send_welcome_email) {\n    described_class.new(email_client: email_client, welcome_email: welcome_email)\n  }\n\n  let(:email_client) { double(:email_client) }\n  let(:welcome_email) { double(:welcome_email) }\n\n  before do\n    allow(welcome_email).to receive(:render_text).and_return(\"Welcome to Bookshelf Ada!\")\n    allow(welcome_email).to receive(:render_html).and_return(\"<p>Welcome to Bookshelf Ada!</p>\")\n  end\n\n  it \"sends a welcome email\" do\n    expect(email_client).to receive(:deliver).with(\n      to: \"ada@example.com\",\n      subject: \"Welcome!\",\n      text_body: \"Welcome to Bookshelf Ada!\",\n      html_body: \"<p>Welcome to Bookshelf Ada!</p>\"\n    )\n\n    send_welcome_email.call(name: \"Ada!\", email_address: \"ada@example.com\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Removing Cookies in Hanami\nDESCRIPTION: Shows how to remove a cookie by setting its value to nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.cookies[\"tasty_cookie\"] = nil\n```\n\n----------------------------------------\n\nTITLE: Updating RSpec Configuration for Hanami 2.1\nDESCRIPTION: This snippet shows additional RSpec configurations for Hanami 2.1. It sets up example status persistence and optionally enables warnings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.example_status_persistence_file_path = \"spec/examples.txt\"\n\n# Uncomment this to enable warnings. This is recommended, but in some cases\n# may be too noisy due to issues in dependencies.\n# config.warnings = true\n```\n\n----------------------------------------\n\nTITLE: Inspecting Multiple Middleware Stack\nDESCRIPTION: This shell command displays the updated middleware stack after adding multiple middleware. It shows the order in which the middleware is mounted in the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$  bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Auth::Basic\n/    Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Raising an Exception in a Hanami Action\nDESCRIPTION: This snippet demonstrates the basic structure of a Hanami action that raises an exception. It shows how exceptions are handled differently in production and development environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/exception-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          raise 'boom'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering a Redis Provider in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to register a Redis provider in Hanami, including the explicit require statement needed for the custom Redis client defined in the lib directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/redis.rb\n\nHanami.app.register_provider :redis do\n  start do\n    require \"custom_redis/client\"\n\n    redis = CustomRedis::Client.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Stories Migration in Hanami\nDESCRIPTION: Database migration for the stories table with a foreign key to users, text content, and timestamp fields.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024085712_create_stories.rb\nHanami::Model.migration do\n  change do\n    create_table :stories do\n      primary_key :id\n\n      foreign_key :user_id, :users, null: false, on_delete: :cascade\n\n      column :text, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami Action Implementation for User Show\nDESCRIPTION: Implementation of a Hanami action that handles a user show request. It demonstrates parameter handling and setting the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/users/show.rb\nmodule Web\n  module Controllers\n    module Users\n      class Show\n        include Web::Action\n\n        def call(params)\n          puts params.class # => Web::Controllers::Users::Show::Params\n          self.body = \"ID: #{ params[:id] }\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Routes with Books Endpoint\nDESCRIPTION: Route configuration including both root and books index endpoints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Scope Class in Hanami Views - Ruby\nDESCRIPTION: Demonstrates how to define a custom scope class (`MediaPlayer`) within the `Views::Scopes` namespace for a Hanami application or slice. The class inherits from `Bookshelf::Views::Scope` to provide scope-specific behavior and view logic encapsulation. No additional methods or properties are defined in this example; it's a scaffold for further customization. Assumes Hanami and related application structure are already set up.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/scopes/media_player.rb\\n\\n# auto_register: false\\n\\nmodule Bookshelf\\n  module Views\\n    module Scopes\\n      class MediaPlayer < Bookshelf::Views::Scope\\n      end\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Components Using Deps Mixin in Ruby\nDESCRIPTION: Demonstrates how to access settings within a component using the Deps mixin in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/analytics/send_event.rb\n\nmodule Bookshelf\n  module Analytics\n    class SendEvent\n      include Deps[\"settings\"]\n\n      def call(event_type, payload)\n        return unless settings.analytics_enabled\n\n        # ...send event to analytics service here ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Story with Comments and Users in Hanami\nDESCRIPTION: Ruby code demonstrating explicit loading of associated comments and users using a custom repository method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nstory = stories.find_with_comments(story.id)\n  # => #<Story:0x00007fd45e327e60 @attributes={:id=>2, :user_id=>1, :text=>\"Hello folks\", :created_at=>2017-10-24 09:09:59 UTC, :updated_at=>2017-10-24 09:09:59 UTC, :user=>#<User:0x00007fd45e326bc8 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 09:06:57 UTC, :updated_at=>2017-10-24 09:06:57 UTC}>, :comments=>[#<Comment:0x00007fd45e325930 @attributes={:id=>1, :user_id=>2, :story_id=>2, :text=>\"Hi and welcome!\", :created_at=>2017-10-24 09:12:30 UTC, :updated_at=>2017-10-24 09:12:30 UTC, :user=>#<User:0x00007fd45e324490 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>}>]}>\n\nstory.comments\n  # => [#<Comment:0x00007fd45e325930 @attributes={:id=>1, :user_id=>2, :story_id=>2, :text=>\"Hi and welcome!\", :created_at=>2017-10-24 09:12:30 UTC, :updated_at=>2017-10-24 09:12:30 UTC, :user=>#<User:0x00007fd45e324490 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>}>]\n\nstory.comments.map(&:user)\n  # => [#<User:0x00007fd45e324490 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Updated Middleware Stack\nDESCRIPTION: Demonstrates the result of inspecting the middleware stack after adding application-level middleware. This shows how the new middleware appears in the stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Auth::Basic\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Middleware in Hanami App\nDESCRIPTION: Shows how to add multiple middleware to a Hanami application. The order of addition determines the order in the middleware stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New Hanami Application via hanami new (Shell)\nDESCRIPTION: This snippet demonstrates generating a new Hanami application by running the 'hanami new' command in the shell, specifying the project name 'bookshelf'. The command scaffolds a complete project directory with necessary files and folders, establishing the foundation for a Hanami-based Ruby web app. All project files will be placed in the new 'bookshelf' directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ hanami new bookshelf\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Secrets for Sharing Between Applications\nDESCRIPTION: This snippet demonstrates how to configure environment variables with identical session secrets for multiple Hanami applications. This allows session values to be shared between applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/sessions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Define ENV variables for development environment\nWEB_SESSIONS_SECRET=\"123456789\"\nADMIN_SESSIONS_SECRET=\"123456789\"\n```\n\n----------------------------------------\n\nTITLE: Bypassing HTML Escaping in Ruby with Hanami\nDESCRIPTION: Shows how to use the raw helper to mark strings as HTML safe, bypassing the escaping mechanism. This method should be used with caution and not with untrusted user input.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/string-escaping.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nraw(user.name)\n# => \"Little Bobby <alert>Tables</alert>\"\n\nraw(user.name).html_safe?\n# => true\n```\n\n----------------------------------------\n\nTITLE: Defining Settings with Default Values in Ruby for Hanami Application\nDESCRIPTION: This code snippet shows how to define settings with default values in a Hanami application's Settings class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :redis_url, default: \"redis://localhost:6379\", constructor: Types::String\n    setting :analytics_enabled, default: false, constructor: Types::Params::Bool\n    setting :max_cart_items, default: 100, constructor: Types::Params::Integer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global View Preparation in Hanami Application\nDESCRIPTION: Demonstrates how to load and include the AcceptJson module globally for all views in a Hanami application using the view.prepare configuration block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/share-code.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nrequire_relative './views/accept_json'\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      view.prepare do\n        include Web::Views::AcceptJson\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Component Settings Integration - Ruby\nDESCRIPTION: Shows how to access settings within application components\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Analytics\n    class SendEvent\n      include Deps[\"settings\"]\n\n      def call(event_type, payload)\n        return unless settings.analytics_enabled\n\n        # ...send event to analytics service here ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Format for a Specific Action in Hanami\nDESCRIPTION: This snippet illustrates how to configure the JSON format for a specific action class in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        format :json # or `config.format :json`\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Logger Formatter in Hanami Ruby\nDESCRIPTION: This snippet demonstrates how to set the logger formatter to `:json` for all environments within the `config/app.rb` file. This is achieved by assigning `:json` to the `config.logger.formatter` attribute inside the `Bookshelf::App` class definition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    # This would change formatter for all environments to `:json`\n    config.logger.formatter = :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action with Repository Dependency\nDESCRIPTION: Implementation of a Hanami action that uses dependency injection for repository access and includes parameter validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Create < Action\n        include Deps[\"user_repo\"]\n\n        params do\n          required(:book).hash do\n            required(:title).value(:string)\n          end\n        end\n\n        def handle(request, response)\n          book = user_repo.create(request.params[:book])\n\n          response.body = book.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Book Creation Controller in Ruby with RSpec\nDESCRIPTION: This RSpec test suite checks the functionality of the book creation controller, including successful creation and validation error handling. It verifies the creation of new books, proper redirection, and error reporting for invalid parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_28\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec.describe Web::Controllers::Books::Create, type: :action do\n  let(:action) { described_class.new }\n  let(:repository) { BookRepository.new }\n\n  before do\n    repository.clear\n  end\n\n  context 'with valid params' do\n    let(:params) { Hash[book: { title: 'Confident Ruby', author: 'Avdi Grimm' }] }\n\n    it 'creates a new book' do\n      action.call(params)\n      book = repository.last\n\n      expect(book.id).to_not be_nil\n      expect(book.title).to eq(params.dig(:book, :title))\n    end\n\n    it 'redirects the user to the books listing' do\n      response = action.call(params)\n\n      expect(response[0]).to eq(302)\n      expect(response[1]['Location']).to eq('/books')\n    end\n  end\n\n  context 'with invalid params' do\n    let(:params) { Hash[book: {}] }\n\n    it 'returns HTTP client error' do\n      response = action.call(params)\n      expect(response[0]).to eq(422)\n    end\n\n    it 'dumps errors in params' do\n      action.call(params)\n      errors = action.params.errors\n\n      expect(errors.dig(:book, :title)).to eq(['is missing'])\n      expect(errors.dig(:book, :author)).to eq(['is missing'])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Action with Params and Headers\nDESCRIPTION: RSpec test demonstrating how to test a Hanami action with both request parameters and HTTP headers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Show do\n  subject(:action) do\n    Bookshelf::Actions::Books::Index.new\n  end\n\n  it \"returns a successful JSON response with book id\" do\n    response = subject.call(id: \"23\", \"HTTP_ACCEPT\" => \"application/json\")\n\n    expect(response).to be_successful\n    expect(response.headers[\"Content-Type\"]).to eq(\"application/json; charset=utf-8\")\n    expect(JSON.parse(response.body[0])).to eq(\"id\" => \"23\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Shared Book Module in Update Action\nDESCRIPTION: Shows how to include the shared book loading module in a specific action that needs book loading functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/share-code.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/books/update.rb\nrequire_relative './set_book'\n\nmodule Web\n  module Controllers\n    module Books\n      class Update\n        include Web::Action\n        include SetBook\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Database Provider with Lifecycle Methods\nDESCRIPTION: Shows implementation of a database provider utilizing all lifecycle stages - prepare, start, and stop - for proper connection management.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/providers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/database.rb\n\nHanami.app.register_provider(:database) do\n  prepare do\n    require \"acme/db\"\n\n    register \"database\", Acme::DB.configure(target[\"settings\"].database_url)\n  end\n\n  start do\n    target[\"database\"].establish_connection\n  end\n\n  stop do\n    target[\"database\"].close_connection\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including App-Level Helpers in a Slice - Ruby\nDESCRIPTION: Demonstrates how to make app-wide helpers available inside a slice’s helpers module by including MyApp::Views::Helpers. This allows the sharing of helper methods between app and slices, provided MyApp::Views::Helpers is defined and loaded.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MySlice\n  module Views\n    module Helpers\n      include MyApp::Views::Helpers\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Part Class - Hanami View - Ruby\nDESCRIPTION: Shows how to define a base Part class for the application. All other parts can inherit from this base class to reuse common functionality. Depends on Hanami::View::Part and is intended to reside in app/views/part.rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/part.rb\\n\\n# auto_register: false\\n\\nmodule Bookshelf\\n  module Views\\n    class Part < Hanami::View::Part\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Hanami Middleware Stack\nDESCRIPTION: Shows how to use the 'hanami middleware' command to inspect the current Rack middleware stack in a Hanami application. This is useful for understanding the middleware configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Methods to Settings Class in Ruby\nDESCRIPTION: Shows how to add custom methods to the Settings class to encapsulate settings-related logic in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, default: false, constructor: Types::Params::Bool\n    setting :analytics_api_key, constructor: Types::String.optional\n\n    def send_analytics?\n      analytics_enabled && !analytics_api_key.nil?\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Cookies in Hanami Application Configuration\nDESCRIPTION: Shows how to enable cookies in a Hanami application by uncommenting the cookies configuration line in the application.rb file. This is necessary due to Hanami's \"batteries included, but not installed\" philosophy.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      cookies true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Route Redirects in Hanami\nDESCRIPTION: Shows how to configure HTTP redirects at the routing level.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nredirect '/old', to: '/new'\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Format for Base Action Class in Hanami\nDESCRIPTION: This example shows how to configure the JSON format for a base action class, which will be inherited by all its subclasses in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    config.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice Loading in Hanami App Class\nDESCRIPTION: Shows how to configure specific slices to load using the config.slices setting in the main application class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.slices = [\"cdn\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an HTML Safe Helper Method - Ruby\nDESCRIPTION: This Ruby helper method illustrates how to return a string marked as HTML safe so Hanami templates include it without additional escaping. The returned string ('<p>This is safe</p>') will bypass auto-escaping mechanisms. The '.html_safe' method is required for this, and should only be used for fully trusted strings to prevent XSS vulnerabilities.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef my_helper\n  \"<p>This is safe</p>\".html_safe\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Books Index Template (ERB)\nDESCRIPTION: This snippet shows the ERB template file `app/templates/books/index.html.erb`. It iterates over the `books` array (provided by the view's exposure) and renders each book's title within an unordered list (`<ul>`).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_24\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/templates/books/index.html.erb -->\n\n<h1>Books</h1>\n\n<ul>\n  <% books.each do |book| %>\n    <li><%= book[:title] %></li>\n  <% end %>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Route to an Action in Hanami\nDESCRIPTION: Shows how to configure the root route to invoke a specific action instead of using a block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Additional MIME Type in Hanami App\nDESCRIPTION: This example illustrates how to register an additional MIME type for use in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :custom, \"application/custom\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index View Implementation\nDESCRIPTION: Implementation of the books index view with dependency injection for the book repository\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :books do\n          book_repo.all_by_title\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Test for Book Creation Action\nDESCRIPTION: This snippet defines RSpec tests for the Book Creation action, covering both valid and invalid parameter scenarios.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_42\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/create_spec.rb\n\nRSpec.describe \"POST /books\", type: [:request, :database] do\n  let(:request_headers) do\n    {\"HTTP_ACCEPT\" => \"app/json\", \"CONTENT_TYPE\" => \"app/json\"}\n  end\n\n  context \"given valid params\" do\n    let(:params) do\n      {book: {title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\"}}\n    end\n\n    it \"creates a book\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_created\n    end\n  end\n\n  context \"given invalid params\" do\n    let(:params) do\n      {book: {title: nil}}\n    end\n\n    it \"returns 422 unprocessable\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_unprocessable\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Application with HEAD Version for Debugging\nDESCRIPTION: Shows how to create a new Hanami application using the HEAD version from the main branches of GitHub repositories. This is useful for debugging Hanami issues or testing the latest unreleased features.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/new.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf --head\n```\n\n----------------------------------------\n\nTITLE: Configuring default charset for a specific Hanami action\nDESCRIPTION: Sets a custom character set (koi8-r) for a specific action. This overrides the application-wide default charset for this particular action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        config.default_charset \"koi8-r\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entity Schema with Default Mode in Hanami\nDESCRIPTION: This code demonstrates how to define a custom schema for a Hanami entity using the default mode. It shows various attribute types including simple values, nested entities, collections, and constraints like format validation and numerical constraints.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/entities/user.rb\nclass User < Hanami::Entity\n  EMAIL_FORMAT = /\\@/\n\n  attributes do\n    attribute :id,         Types::Int\n    attribute :name,       Types::String\n    attribute :email,      Types::String.constrained(format: EMAIL_FORMAT)\n    attribute :age,        Types::Int.constrained(gt: 18)\n    attribute :profile,    Types::Entity(Profile)\n    attribute :codes,      Types::Collection(Types::Coercible::Int)\n    attribute :comments,   Types::Collection(Comment)\n    attribute :created_at, Types::Time\n    attribute :updated_at, Types::Time\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MIME Types\nDESCRIPTION: Examples of registering additional MIME types and configuring multiple MIME types for a format.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :custom, \"application/custom\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :json, [\"application/json+scim\", \"application/json\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Slice\nDESCRIPTION: This command generates a slice in Hanami 2.2. The example creates an 'admin' slice. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice admin\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice --help\n```\n\n----------------------------------------\n\nTITLE: Payload-Only Structured Logging\nDESCRIPTION: Shows how to log structured data without a separate message parameter.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info text: \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Format Module for Hanami Views\nDESCRIPTION: Creates a module that sets JSON as the default format for views. When included in a view, this module automatically configures the view to handle JSON format using Ruby's included hook.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/share-code.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/accept_json.rb\nmodule Web\n  module Views\n    module AcceptJson\n      def self.included(view)\n        view.class_eval do\n          format :json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Provider Settings Integration - Ruby\nDESCRIPTION: Demonstrates how to access settings when registering providers\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider :redis do\n  start do\n    require \"redis\"\n\n    redis = Redis.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice Imports in Admin Slice\nDESCRIPTION: Demonstrates how to configure the Admin slice to import components from the CDN slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/admin.rb\n\nmodule Admin\n  class Slice < Hanami::Slice\n    import from: :cdn\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Model\nDESCRIPTION: Creates an entity with corresponding repository, migration, and tests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model book\n      create  lib/bookshelf/entities/book.rb\n      create  lib/bookshelf/repositories/book_repository.rb\n      create  db/migrations/20170213123250_create_books.rb\n      create  spec/bookshelf/entities/book_spec.rb\n      create  spec/bookshelf/repositories/book_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Metadata in Hanami Action\nDESCRIPTION: This snippet demonstrates how to access various request metadata properties within a Hanami action. It shows how to retrieve information such as path, request method, referrer, user agent, and IP address.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/request-and-response.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          puts request.path_info                 # => \"/dashboard\"\n          puts request.request_method            # => \"GET\"\n          puts request.get?                      # => true\n          puts request.post?                     # => false\n          puts request.xhr?                      # => false\n          puts request.referer                   # => \"http://example.com/\"\n          puts request.user_agent                # => \"Mozilla/5.0 Macintosh; ...\"\n          puts request.ip                        # => \"127.0.0.1\"\n          puts request.env['HTTP_AUTHORIZATION'] # => \"Basic abc123\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logging Backend for Exceptions in Hanami Ruby\nDESCRIPTION: This snippet demonstrates adding a dedicated logging backend to handle specific types of log entries, such as exceptions during testing. Placed typically in `spec/spec_helper.rb`, it uses `Hanami.logger.add_backend` to send log entries matching the condition `log_if: :exception?` to a separate file (`log/exceptions.log`). The example also shows how to manually log an exception using `Hanami.logger.error(e)`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/spec_helper.rb\n\nHanami.logger.add_backend(\n  stream: Hanami.app.root.join(\"log\").join(\"exceptions.log\"), log_if: :exception?\n)\n\nbegin\n  raise \"Oh noez\"\nrescue => e\n  Hanami.logger.error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Nested Template Partial in ERB\nDESCRIPTION: Demonstrates how to render a partial template within another template using the render method with partial option in ERB.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/templates.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n# Given a partial under:\\n#   templates/shared/_sidebar.html.erb\\n#\\n# In the layout template:\\n#   templates/application.html.erb\\n#\\n<%= render partial: 'shared/sidebar' %>\n```\n\n----------------------------------------\n\nTITLE: Creating Idempotent Seed Logic for Database - Ruby\nDESCRIPTION: Outlines a template for the config/db/seeds.rb file which seeds the database with sample data. The snippet includes commented examples for seeding via both repository and relation patterns. It emphasizes idempotence so that the file may be run multiple times without adverse effects. No additional dependencies required except Hanami and its repositories/relations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# This seeds file should create the database records required to run the app.\\n#\\n# The code should be idempotent so that it can be executed at any time.\\n#\\n# To load the seeds, run `hanami db seed`. Seeds are also loaded as part of `hanami db prepare`.\\n\\n# For example, if you have appropriate repos available:\\n#\\n#   category_repo = Hanami.app[\\\"repos.category_repo\\\"]\\n#   category_repo.create(title: \\\"General\\\")\\n#\\n# Alternatively, you can use relations directly:\\n#\\n#   categories = Hanami.app[\\\"relations.categories\\\"]\\n#   categories.insert(title: \\\"General\\\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom String Shuffler Helper in Hanami\nDESCRIPTION: This code defines a custom helper module 'Web::Helpers::Shuffler' that provides a 'shuffle' method to randomize characters in a string. It handles UTF-8 encoding and provides a reusable function that can be included in Hanami views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/custom-helpers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/web/helpers/shuffler.rb\nmodule Web\n  module Helpers\n    module Shuffler\n      private\n      SEPARATOR = ''.freeze\n\n      def shuffle(string)\n        string\n          .encode(Encoding::UTF_8, invalid: :replace)\n          .split(SEPARATOR).shuffle.join\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Slice using Hanami CLI\nDESCRIPTION: Demonstrates how to generate a new slice using the Hanami CLI, which creates a directory structure for the slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice api\n\nslices\n└── api\n    ├── action.rb\n    └── actions\n```\n\n----------------------------------------\n\nTITLE: Defining Book Exposure in Hanami View (Ruby)\nDESCRIPTION: This snippet demonstrates how to define an exposure in a Hanami view class. It creates a 'book' exposure using a Struct with title and description attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        Book = Struct.new(:title, :description, keyword_init: true)\n\n        expose :book do\n          Book.new(title: \"Pride and Prejudice\", description: \"The 1813 Jane Austen classic.\")\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Format for Individual Action Class\nDESCRIPTION: Shows how to configure format for a specific action class in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        format :json # or `config.format :json`\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Format in Hanami App\nDESCRIPTION: Shows how to set the default format for all actions in a Hanami application using config.actions.format.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Operation\nDESCRIPTION: This command generates an operation in Hanami 2.2. The example creates an 'add' operation for the 'books' resource. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate operation books.add\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate operation --help\n```\n\n----------------------------------------\n\nTITLE: Defining Slice-specific Helpers in Hanami\nDESCRIPTION: Structure for defining helpers specific to a Hanami slice\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MySlice\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining an Authentication Module in Ruby for Hanami Actions\nDESCRIPTION: This snippet creates a module for authentication that can be included in various actions across the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/authenticated_action.rb\n\nmodule Bookshelf\n  module Actions\n    module AuthenticatedAction\n      def self.included(action_class)\n        action_class.before :authenticate_user!\n      end\n\n      private\n\n      def authenticate_user!(request, response)\n        # halt 401 unless ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Redirects in Hanami Routes\nDESCRIPTION: Shows how to define redirects in the routes configuration, with options for custom status codes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nredirect \"/old\", to: \"/new\"\n```\n\n----------------------------------------\n\nTITLE: Using format_number Helper in a Hanami Template - SQL/ERB\nDESCRIPTION: Illustrates calling the format_number helper directly in a Hanami template (using ERB syntax) to format and display numbers. The helper must be accessible in the template’s context. The input is 1234, and the formatted output is shown inside a paragraph HTML tag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<p><%= format_number(1234) %></p>\n```\n\n----------------------------------------\n\nTITLE: Updating Root Request Spec for Success (Ruby)\nDESCRIPTION: This updated RSpec request spec modifies the test for the root path ('/'). It now expects a successful response (HTTP status 2xx) and asserts that the response body includes the text \"Welcome to Bookshelf\".\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/root_spec.rb\n\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    get \"/\"\n\n    expect(last_response.body).to include \"Welcome to Bookshelf\"\n    expect(last_response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami View Class Implementation\nDESCRIPTION: Example of a basic Hanami view class structure generated by the CLI\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/home/show.rb\n\nmodule Bookshelf\n  module Views\n    module Home\n      class Show < Bookshelf::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Route-Specific Middleware in Hanami\nDESCRIPTION: Shows how to add middleware to specific routes or scopes within the Hanami routes configuration. This enables fine-grained control over middleware application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    use Rack::Runtime\n\n    root { \"Hello from Hanami\" }\n\n    scope \"restricted\" do\n      use Rack::Auth::Basic\n\n      get \"/page\" do\n        \"Some restricted content\"\n      end\n    end\n\n    slice :admin, at: \"/admin\" do\n      use Rack::Auth::Basic\n\n      get \"/books\", to: \"books.index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Skipping Authentication in Specific Hanami Action\nDESCRIPTION: Demonstrates how to override the authentication callback in specific actions where authentication should be skipped, such as the login page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/share-code.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/sessions/new.rb\nmodule Web\n  module Controllers\n    module Sessions\n      class New\n        include Web::Action\n\n        def call(params)\n          # ...\n        end\n\n        private\n        def authenticate!\n          # no-op\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a View-Specific Helper in Hanami\nDESCRIPTION: This snippet demonstrates how to define a helper method specific to a view in Hanami. The method 'emphasis' wraps text in HTML emphasis tags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\nmodule Books\n  class Index < View\n    def emphasis(text)\n      \"<em>#{ text }</em>\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Format for All Actions in Hanami App\nDESCRIPTION: This snippet shows how to configure the JSON format for all actions in a Hanami application using the app configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Payload-Only Structured Logging in Hanami\nDESCRIPTION: Shows how to log structured data without a separate message argument.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info text: \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Book Part Class - Hanami View - Ruby\nDESCRIPTION: Defines a specific part class for books under the Views::Parts namespace. Inherits from a base Book Part class, allowing for custom view-specific behavior and method decoration on book-related objects. No external dependencies beyond Hanami's part base classes and the app's Bookshelf module structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/book.rb\\n\\n# auto_register: false\\n\\nmodule Bookshelf\\n  module Views\\n    module Parts\\n      class Book < Bookshelf::Views::Part\\n      end\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Book Show Route in Hanami Routing - Ruby\nDESCRIPTION: This Ruby snippet demonstrates how to define RESTful routes using Hanami's Routes class. It creates a route to handle GET /books/:id requests by mapping them to an action. Depends on Hanami web routing conventions. The snippet is placed in config/routes.rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Hanami Request with RSpec in Ruby\nDESCRIPTION: This snippet demonstrates how to write a request spec for a Hanami application using RSpec and rack-test. It makes a GET request to the root path and asserts on the response status and body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    # Find me in `config/routes.rb`\n    get \"/\"\n\n    expect(last_response).to be_successful\n    expect(last_response.body).to eq(\"Hello from Hanami\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Providing an Alternative Context Object When Rendering from an Action (Ruby)\nDESCRIPTION: Demonstrates how to pass an alternative context object (`my_alternative_context`) when rendering a view from within a Hanami action's `handle` method. The context is passed to the responder's `render` method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(request, response)\n  # ...\n  responder.render(view, context: my_alternative_context)\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Locals in Templates\nDESCRIPTION: Example of accessing scope locals directly within a template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\n<!-- Given an `item:` local passed to the scope -->\n<%= item.title %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for CDN in Hanami (Ruby)\nDESCRIPTION: Adjusts the Content Security Policy to allow script execution from the configured CDN, while also setting up the CDN base URL for assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/using-a-cdn.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.actions.content_security_policy[:script_src] += \" https://some-cdn.net\"\n      config.assets.base_url = \"https://some-cdn.net/my-site\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Table with Hanami Migration\nDESCRIPTION: Demonstrates how to create a books table with primary key, foreign key, columns with constraints, and a check constraint using Hanami::Model migration API.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      foreign_key :author_id, :authors, on_delete: :cascade, null: false\n\n      column :code,  String,  null: false, unique: true, size: 128\n      column :title, String,  null: false\n      column :price, Integer, null: false, default: 100 # cents\n\n      check { price > 0 }\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Hanami Slice Using Generator\nDESCRIPTION: Demonstrates how to create an API slice using the Hanami slice generator command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice api\n\nslices\n└── api\n    ├── action.rb\n    └── actions\n```\n\n----------------------------------------\n\nTITLE: Handling MIME Types with Request Introspection in Hanami Actions\nDESCRIPTION: Demonstrates how to use #format to get the symbol representation of the requested MIME type and #accept? to check if specific MIME types are accepted by the browser.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          puts format                     # => :html\n\n          puts accept?('text/html')       # => true\n          puts accept?('application/png') # => false\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Mailer Delivery Options in Hanami Environment\nDESCRIPTION: Shows how to configure mailer delivery settings in a Hanami application environment file, including test and production environments with custom SMTP settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/delivery.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n# ...\nHanami.configure do\n  # ...\n\n  mailer do\n    root Hanami.root.join(\"lib\", \"bookshelf\", \"mailers\")\n\n    # See https://guides.hanamirb.org/mailers/delivery\n    delivery :test\n  end\n\n  # ...\n\n  environment :production do\n    # ...\n\n    mailer do\n      delivery :smtp, address: ENV['SMTP_HOST'], port: ENV['SMTP_PORT']\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Variable Path Parameters in Hanami Routes\nDESCRIPTION: Shows how to define dynamic path segments using variables that can be accessed via params in the action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nget '/books/:id', to: 'books#show'\n```\n\n----------------------------------------\n\nTITLE: Using Global Custom Predicates in Validator\nDESCRIPTION: Shows how to incorporate custom predicates from a module into a validator class using the predicates method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\nrequire_relative 'my_predicates'\n\nclass Signup\n  include Hanami::Validations\n  predicates MyPredicates\n\n  validations do\n    required(:email) { email? }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Redis URL and Sentry DSN Settings in Ruby\nDESCRIPTION: Shows how to define settings for Redis URL and Sentry DSN using environment variables in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :redis_url, constructor: Types::String\n    setting :sentry_dsn, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Mailer Properties in Ruby with Hanami\nDESCRIPTION: This snippet demonstrates how to define a basic Hanami mailer class with sender, recipient, and subject configurations. It shows the essential properties required for a functional mailer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/basic-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Mailers\n  class Welcome\n    include Hanami::Mailer\n\n    from    'noreply@bookshelf.org'\n    to      'user@example.com'\n    subject 'Welcome to Bookshelf'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflections in Hanami App\nDESCRIPTION: Example showing how to configure string inflections in a Hanami application by adding acronym definitions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/app-config.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Body Parser Middleware\nDESCRIPTION: Shows how to manually enable JSON body parsing middleware in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Redis URL and Sentry DSN Settings in Ruby\nDESCRIPTION: This code snippet demonstrates how to define settings for Redis URL and Sentry DSN in a Hanami application's Settings class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :redis_url, constructor: Types::String\n    setting :sentry_dsn, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Multiple Middleware Configuration\nDESCRIPTION: Demonstrates adding multiple middleware components to the application stack\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice-Specific Routes in Separate File\nDESCRIPTION: Demonstrates how to configure routes specific to a slice in a separate routes file within the slice directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \"omniauth/builder\"\nrequire \"omniauth-google-oauth2\"\n\nmodule Admin\n  class Routes < Hanami::Routes\n    use OmniAuth::Builder do\n      provider :google_oauth2 # ...\n    end\n\n    get \"/users\", to: \"users.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Inflector Component in Custom Class\nDESCRIPTION: Demonstrates various inflector methods usage in a custom component including pluralization, singularization, camelize, classify, and other text transformations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/inflector.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/my_component.rb\n\nmodule Bookshelf\n  class MyComponent\n    include Deps[\"inflector\"]\n\n    def call\n      inflector.pluralize(\"book\")    # => \"books\"\n      inflector.singularize(\"books\") # => \"book\"\n\n      inflector.camelize(\"dry/inflector\") # => \"Dry::Inflector\"\n      inflector.classify(\"books\")         # => \"Book\"\n      inflector.tableize(\"Book\")          # => \"books\"\n\n      inflector.dasherize(\"best_selling_books\")  # => \"best-selling-books\"\n      inflector.underscore(\"best-selling-books\") # => \"best_selling_books\"\n\n      inflector.demodulize(\"Bookshelf::MyComponent\") # => \"MyComponent\"\n\n      inflector.humanize(\"hanami_inflector\") # => \"Hanami inflector\"\n      inflector.humanize(\"author_id\")        # => \"Author\"\n\n      inflector.ordinalize(1)  # => \"1st\"\n      inflector.ordinalize(2)  # => \"2nd\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Global Custom Predicates Module in Hanami\nDESCRIPTION: Demonstrates how to create reusable custom predicates by defining them in a module. Includes configuration for custom error messages path and an email validation example.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/validations'\n\nmodule MyPredicates\n  include Hanami::Validations::Predicates\n\n  self.messages_path = 'config/errors.yml'\n\n  predicate(:email?) do |current|\n    current.match(/.../)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Settings in Ruby\nDESCRIPTION: Shows how to make settings optional by allowing nil values in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :analytics_enabled, constructor: Types::Params::Bool.optional\n    setting :max_cart_items, constructor: Types::Params::Integer.optional\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building Scopes from Ruby Part Classes in Hanami Views\nDESCRIPTION: This snippet shows how to build custom scopes from within a part class using the #scope method in Hanami views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  def info_box\n    scope(:info_box, size: :large).render\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring format in a base Hanami action class\nDESCRIPTION: Sets JSON as the default format in a base action class, which will be inherited by all subclasses. This provides consistent format handling across related actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    config.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Hanami Routes via CLI\nDESCRIPTION: Shows how to use the 'hanami routes' command to inspect all defined routes in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home                          as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nGET     /books/new                    books.new\nPOST    /books                        books.create\nPATCH   /books/:id                    books.update\nDELETE  /books/:id                    books.destroy\n```\n\n----------------------------------------\n\nTITLE: Books Index Pagination Spec\nDESCRIPTION: RSpec feature test for verifying pagination functionality in the books index\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.feature \"Books index pagination\" do\n  let(:books) { Hanami.app[\"relations.books\"] }\n\n  before do\n    10.times do |n|\n      books.insert(title: \"Book #{n}\", author: \"Author #{n}\")\n    end\n  end\n\n  it \"returns the correct page of books\" do\n    visit \"/books?page=1&per_page=3\"\n\n    expect(page).to have_selector \"li\", count: 3\n    expect(page.find(\"li:nth-child(1)\")).to have_content \"Book 0, by Author 0\"\n    expect(page.find(\"li:nth-child(2)\")).to have_content \"Book 1, by Author 1\"\n    expect(page.find(\"li:nth-child(3)\")).to have_content \"Book 2, by Author 2\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Expires Headers in Hanami Actions\nDESCRIPTION: This snippet shows how to set the Expires HTTP header along with a matching Cache-Control header in a Hanami action response. It demonstrates setting an expiry time and cache control directives simultaneously.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/http-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Expires: Sun, 20 Nov 2022 17:47:02 GMT, Cache-Control: public, max-age=600`\n          response.expires 60, :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Authentication Module in Ruby for Hanami Action\nDESCRIPTION: This snippet shows how to include the authentication module in a specific action that requires authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module UserProfile\n      class Update < Bookshelf::Action\n        include AuthenticatedAction\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Inheriting Action Class in Hanami\nDESCRIPTION: Shows how to create an action class that inherits from the base Action class, automatically gaining its authentication and JSON formatting capabilities.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Scopes\nDESCRIPTION: Example of accessing the view context and using context methods within a scope class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\n  def item_url\n    # `item` is a local, and `routes` is a method on the context\n    routes.path(:item, item.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Modified ERB Template for Home Show View\nDESCRIPTION: This snippet shows the modified content for the `app/templates/home/show.html.erb` template. It replaces the default class name display with a user-friendly welcome message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n<h1>Welcome to Bookshelf</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating Global Catch-all Route in Hanami\nDESCRIPTION: Demonstrates how to define a global catch-all route to handle any unmatched GET requests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/*path\", to: \"unmatched\"\n```\n\n----------------------------------------\n\nTITLE: Injecting Mocks for Renamed Dependencies in Hanami Tests (Ruby)\nDESCRIPTION: This code illustrates how to instantiate a class for testing purposes when its dependencies have been renamed using the `Deps` mixin. It shows passing mock objects (`mock_email_client`, `mock_email_renderer`) to the constructor using the respective keys, including the renamed key (`email_renderer`). This is typically used within a test setup (e.g., RSpec).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\nsubject(:send_welcome_email) {\n  described_class.new(email_client: mock_email_client, email_renderer: mock_email_renderer)\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Explicitly in View Parts (Ruby)\nDESCRIPTION: Shows how to access the Hanami view context object explicitly using `context` (or its alias `_context`) within a view Part class (`Bookshelf::Views::Part`). Methods on the context, like `inflector`, are called directly on the `context` object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/post.rb\n\nclass Post < Bookshelf::Views::Part\n  def koalas\n    context.inflector.pluralize(\"koala\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books View Class in Ruby\nDESCRIPTION: View class for the books index page with exposed books data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        expose :books do\n          [\n            {title: \"Test Driven Development\"},\n            {title: \"Practical Object-Oriented Design in Ruby\"}\n          ]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Asset Compilation Configuration in Hanami\nDESCRIPTION: Basic setup for customizing asset compilation using hanami-assets package. Shows how to modify esbuild options through a configuration function.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as assets from \"hanami-assets\";\n\nawait assets.run({\n  esbuildOptionsFn: (args, esbuildOptions) => {\n    // Add to esbuildOptions here. Use `args.watch` as a condition for different options for\n    // compile vs watch.\n\n    return esbuildOptions;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Guard for Hanami Code Reloading\nDESCRIPTION: Configuration for Guard to watch specific directories for code changes and restart the Hanami server automatically. Watches config, lib, app, and slices directories using regular expressions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/code-reloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Guardfile\n\ngroup :server do\n  guard \"puma\", port: ENV[\"HANAMI_PORT\"] || 2300 do\n    watch(%r{config/*})\n    watch(%r{lib/*})\n    watch(%r{app/*})\n    watch(%r{slices/*})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Part Decoration for Exposure - Hanami View - Ruby\nDESCRIPTION: Demonstrates specifying a part name for exposure decoration using the as: option in Hanami views. Ensures the current_user exposure is decorated with Views::Parts::User. Requires a Hanami view context with an expose method and the relevant part classes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Will decorate the current_user with `Views::Parts::User`\\nexpose :current_user, as: :user do\\n  # ...\\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cookie Options in Hanami Actions\nDESCRIPTION: Shows how to set cookies with custom options that override global settings in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n\n          response.cookies[\"longer_lived_cookie\"] = {\n            value: \"anzac_biscuit\",\n            max_age: 604800\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Authentication States in Hanami Action\nDESCRIPTION: Shows how to test both authenticated and unauthenticated states using RSpec. Demonstrates setting up session data through the rack.session parameter and testing redirect behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Web::Controllers::Dashboard::Index, type: :action do\n  let(:params) { { 'rack.session' => session } }\n\n  subject { action.call(params) }\n\n  context 'when user is logged in' do\n    let(:session) { { account_id: 1 } }\n\n    it { expect(subject[0]).to eq 200 }\n  end\n\n  context 'when user is not logged in' do\n    let(:session) { {} }\n\n    it { expect(subject).to redirect_to('/login') }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring No Auto-Register Paths in Hanami (Ruby)\nDESCRIPTION: Shows how to configure a Hanami application to exclude an entire directory from auto-registration. This example excludes the 'app/structs' directory from being registered with the container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.no_auto_register_paths << \"structs\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Proc Callback Implementation in Hanami Action\nDESCRIPTION: Demonstrates how to implement a before callback using a proc instead of a method. The proc validates parameters and halts execution if invalid.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/control-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before { |request, response| halt 422, request.params.errors.to_h unless request.params.valid? }\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Development Environment Exception Handling\nDESCRIPTION: Demonstrates how to modify exception handling behavior in development environment to show stack traces for debugging purposes while maintaining production error messages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/exception-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle_standard_error(request, response, exception)\n  if Hanami.env?(:development)\n    raise exception\n  else\n    response.status = 500\n    response.body = \"Sorry, something went wrong handling your request\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Initial Root Request Spec in RSpec (Ruby)\nDESCRIPTION: This RSpec request spec defines a test for the application's root path ('/'). It initially asserts that accessing the root path results in a 404 Not Found status, confirming that no root route is defined yet. This test is located in `spec/requests/root_spec.rb`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/root_spec.rb\n\nRSpec.describe \"Root\", type: :request do\n  it \"is not found\" do\n    get \"/\"\n\n    # Generate new action via:\n    #   `bundle exec hanami generate action home.index --url=/`\n    expect(last_response.status).to be(404)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console in Shell\nDESCRIPTION: Demonstrates how to start the Hanami console using the bundle exec command. This opens a REPL (Read-Eval-Print Loop) for interacting with a Hanami application in the development environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/console.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console\n\nbookshelf[development]>\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Methods for Mailer Properties in Hanami\nDESCRIPTION: This snippet shows how to make mailer properties dynamic by using symbols that reference private methods. This approach allows generating recipient addresses and subject lines based on user data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/basic-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Mailers\n  class Welcome\n    include Hanami::Mailer\n\n    from    'noreply@bookshelf.org'\n    to      :recipient\n    subject :subject\n\n    private\n\n    def recipient\n      user.email\n    end\n\n    def subject\n      \"Welcome #{ user.name }!\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Model Components\nDESCRIPTION: Command to generate a new model in Hanami, which creates entity, repository, migration, and test files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model book\n      create  lib/bookshelf/entities/book.rb\n      create  lib/bookshelf/repositories/book_repository.rb\n      create  db/migrations/20170406230335_create_books.rb\n      create  spec/bookshelf/entities/book_spec.rb\n      create  spec/bookshelf/repositories/book_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Setting Response Format in Action\nDESCRIPTION: Demonstrates how to set the response format directly within an action handler.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.format = :json # or response.format = \"application/json\"\n          response.body = {result: \"OK\"}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Reload Helper in Hanami Console\nDESCRIPTION: Example showing how to use the reload helper in the Hanami console to refresh code changes during an active console session.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/code-reloading.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> reload\nReloading...\n```\n\n----------------------------------------\n\nTITLE: Starting Puma Server for Production\nDESCRIPTION: Shows the command to start the Puma server in production mode using a configuration file. This is the recommended approach for serving web requests in a production environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/server.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec puma -C config/puma.rb\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Has One Association in UserRepository\nDESCRIPTION: Repository class with has_one association and methods to create and find users with their avatars.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/user_repository.rb\nclass UserRepository < Hanami::Repository\n  associations do\n    has_one :avatar\n  end\n\n  def create_with_avatar(data)\n    assoc(:avatar).create(data)\n  end\n\n  def find_with_avatar(id)\n    aggregate(:avatar).where(id: id).map_to(User).one\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inflection Configuration for Acronyms\nDESCRIPTION: Example of configuring inflections for proper handling of acronyms in constant names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Action Structure\nDESCRIPTION: This snippet shows the basic structure of a Hanami action. It includes the necessary module and class definitions, and an empty call method that implicitly returns a default Rack response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/request-and-response.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n        end\n      end\n    end\n  end\nend\n\n# It will return [200, {}, [\"\"]]\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets with Hanami CLI\nDESCRIPTION: Demonstrates how to use the 'hanami assets compile' command to compile application assets into production-ready bundles. The command outputs information about the compiled assets, including file names, sizes, and compilation time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets compile\n[bookshelf]\n[bookshelf]   public/assets/app-SQ36TYM4.js       53b\n[bookshelf]   public/assets/app-KUHJPSX7.css      45b\n[bookshelf]   public/assets/app-KUHJPSX7.css.map  93b\n[bookshelf]   public/assets/app-SQ36TYM4.js.map   93b\n[bookshelf]\n[bookshelf] ⚡ Done in 3ms\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Links with Ruby in Hanami\nDESCRIPTION: Explains the usage of the 'link_to' helper for creating HTML anchor tags. It shows various ways to provide content and attributes, and demonstrates automatic HTML escaping.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/html.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to(\"Home\", \"/\")\n# => <a href=\"/\">Home</a>\n\nlink_to(\"/\") { \"Home\" }\n# => <a href=\"/\">Home</a>\n\nlink_to(\"Home\", \"/\", class: \"button\")\n# => <a href=\"/\" class=\"button\">Home</a>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to(\"<script>alert('xss')</script>\", \"/\")\n# => <a href=\"/\">&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</a>\n\nlink_to(\"/\") { \"<script>alert('xss')</script>\" }\n# => <a href=\"/\">&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Compressors in Hanami Application\nDESCRIPTION: This code demonstrates how to configure JavaScript and stylesheet compressors in a Hanami application by modifying the application.rb file. It uses the builtin compressor which is written in pure Ruby and doesn't require external dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/compressors.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      assets do\n        javascript_compressor :builtin\n        stylesheet_compressor :builtin\n\n        # ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Imported CDN Components in Admin Slice\nDESCRIPTION: Shows how to use the imported CDN purge operation within an Admin slice component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/admin/books/operations/update.rb\n\nmodule Admin\n  module Books\n    module Operations\n      class Update\n        include Deps[\n          \"repositories.book_repo\",\n          \"cdn.book_covers.purge\"\n        ]\n\n        def call(id, params)\n          # ... update the book using the book repository ...\n\n          # If the update is successful, purge the book cover from the CDN\n          purge.call(book.cover_path)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Repository\nDESCRIPTION: This command generates a repository in Hanami 2.2. The example creates a 'books' repository. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate repo books\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate repo --help\n```\n\n----------------------------------------\n\nTITLE: Defining Singular RESTful Resource in Hanami\nDESCRIPTION: This snippet demonstrates how to define a singular RESTful resource in Hanami routes, which generates a set of routes for a single resource like 'account'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Character Set\nDESCRIPTION: Shows how to configure the default character set at both app and action levels.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.default_charset = \"koi8-r\"\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        config.default_charset \"koi8-r\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Directly Loading Story with Commenters in Hanami\nDESCRIPTION: Ruby code showing how to directly load users associated with a story through the comments table using a has-many-through association.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nstory = stories.find_with_commenters(story.id)\n  # => #<Story:0x00007f8e28b79d88 @attributes={:id=>2, :user_id=>1, :text=>\"Hello folks\", :created_at=>2017-10-24 09:09:59 UTC, :updated_at=>2017-10-24 09:09:59 UTC, :users=>[#<User:0x00007f8e28b78b40 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>]}>\n\nstory.users\n  # => [#<User:0x00007f8e28b78b40 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>]\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Book Repo using Shell\nDESCRIPTION: This shell command uses the Hanami command-line interface (`bundle exec hanami generate`) to create a new repository component named `book` within the application. Repositories act as an interface to persisted data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate repo book\n```\n\n----------------------------------------\n\nTITLE: Accessing Path Variables in Hanami Actions\nDESCRIPTION: Shows how to access the path variables from within a Hanami action class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# Request: GET /books/17/reviews/6\n\nmodule Bookshelf\n  module Actions\n    module BookReviews\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.params[:book_id] # 17\n          request.params[:id] # 6\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Routes\nDESCRIPTION: Route configuration for the Bookshelf application including named routes\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\", as: :show_book\n    get \"/books/new\", to: \"books.new\"\n    post \"/books\", to: \"books.create\", as: :create_book\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Formatting Word Count in Hanami View Part - Ruby\nDESCRIPTION: Shows how to use a helper via the helpers object within a Hanami part to format the word count of a text field. Presumes the part wraps a value exposing a body_text method that returns a string, which is split to count words and then passed to format_number for pretty formatting. This code must be inside a Hanami View Part context.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef word_count\n  # Presuming a `body_text` method on the value wrapped by the part\n  helpers.format_number(body_text.split)\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Assets in Hanami (Ruby)\nDESCRIPTION: This snippet illustrates how to configure third-party assets in a Hanami application. It shows the setup for including jQuery and setting up a custom JavaScript group for admin-specific scripts.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_compressor :uglify\njavascript_compressor :yui\njavascript_compressor :closure\njavascript_compressor :uglifier\n\ndefine :javascript do\n  sources << [\n    'node_modules/jquery/dist/jquery.js'\n  ]\n\n  group :all do\n    files << [\n      'assets/javascripts/application.js'\n    ]\n  end\n\n  group :admin do\n    files << [\n      'assets/javascripts/admin.js'\n    ]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional View Rendering with Multiple Views\nDESCRIPTION: Shows how to conditionally render different views based on runtime conditions by declaring multiple view dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-from-actions.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        include Deps[\n          view: \"views.pages.contact\",\n          alternative_view: \"views.pages.alternative_contact\",\n        ]\n\n        def handle(request, response)\n          if some_condition\n            response.render(alternative_view)\n          else\n            response.render(view)\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Skipping Auto-escaping in ERB Template\nDESCRIPTION: This snippet shows how to skip auto-escaping of non-HTML safe strings in an ERB template using the <%== %> tags. This should be used with caution, especially with untrusted user input.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/templates-and-partials.md#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\n<%== \"<p>Non-safe strings will not be auto-escaped</p>\" %>\n```\n\n----------------------------------------\n\nTITLE: Separating Slice Registration in Routes - Hanami - Ruby\nDESCRIPTION: Shows how to register a new slice in Hanami's main route configuration, without including child routes, for clearer separation. This minimal Ruby snippet should live in config/routes.rb and references the :admin slice at /admin. Intended for use with separate per-slice route files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nmodule MyApp\n  class Routes < Hanami::Routes\n    root { \\\"Hello from Hanami\\\" }\n\n    slice :admin, at: \\\"/admin\\\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Settings Class Definition - Ruby\nDESCRIPTION: Shows the basic structure of a Hanami Settings class defined in config/settings.rb\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflections in Hanami Ruby Application\nDESCRIPTION: This code snippet demonstrates how to configure inflections in a Hanami application. It shows how to set up an acronym 'WNBA' using the config.inflections method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/app-config.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values for Input Parameters in Hanami View Exposure (Ruby)\nDESCRIPTION: The `Bookshelf::Views::Books::Index` view demonstrates handling optional input parameters. The `expose :books` block defines `page` and `per_page` as keyword arguments with default values (1 and 20, respectively). These defaults are used if the corresponding input is not provided by the action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"repos.book_repo\"]\n\n        expose :books do |page: 1, per_page: 20|\n          book_repo.listing(page: page, per_page: per_page)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Book Part Class with Cover Image URL Method in Ruby\nDESCRIPTION: This code defines a Book class within the Bookshelf::Views::Parts module. It inherits from Bookshelf::Views::Part and provides a method to retrieve the cover image URL for a book, falling back to a default image if necessary.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: Ruby\nCODE:\n```\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    module Parts\n      class Book < Bookshelf::Views::Part\n        def cover_image_url\n          value.cover_image_url || context.assets[\"default-cover-image.jpg\"]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing a Hanami Entity with Attributes\nDESCRIPTION: Example of instantiating a Book entity with a title attribute and accessing its properties. Demonstrates that uninitialized attributes return nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.new(title: \"Hanami\")\n\nbook.title      # => \"Hanami\"\nbook.created_at # => nil\n```\n\n----------------------------------------\n\nTITLE: Creating Environment-Dependent Rake Task in Hanami\nDESCRIPTION: Demonstrates how to create a Rake task that depends on the environment prerequisite to access project code like repositories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\n\ntask clear_users: :environment do\n  UserRepository.new.clear\nend\n```\n\n----------------------------------------\n\nTITLE: Testing View Parts in Ruby\nDESCRIPTION: Examples of testing view parts including helper methods, partial rendering, and context access.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Parts\n      class User < MyApp::Views::Part\n        def display_name\n          \"#{name} (#{email})\"\n        end\n\n        # Using a helper\n        def title_tag\n          helpers.tag.h1(display_name)\n        end\n\n        # Rendering a partial at templates/users/_info_card.html\n        def info_card\n          render(\"users/info_card\")\n        end\n      end\n    end\n  end\nend\n\nRSpec.describe(MyApp::Views::Parts::User) do\n  subject(:part) { described_class.new(value: user) }\n  let(:user) { double(:user, name: \"Amy\", email: \"amy@example.com\"}\n\n  describe \"#title_tag\" do\n    it \"includes the name and email in a h1 tag\" do\n      expect(part.title_tag).to eq \"<h1>Amy (amy@example.com)</h1>\"\n    end\n  end\n\n  describe \"#info_card\" do\n    it \"renders the info card\" do\n      expect(part.info_card).to start_with %(<div class=\"user-info-card\">)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Hanami Slice (Hanami/Ruby)\nDESCRIPTION: Shows the minimal code required to define a Hanami slice module and class, enabling modular boundaries in the application. This enables further per-slice configuration, such as setting up independent databases. Input: Naming a module and creating a subclass of Hanami::Slice. Output: New slice with isolated configuration scope. Dependencies: Hanami framework.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Main\n  class Slice < Hanami::Slice\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating HTML Links with link_to Helper in Ruby\nDESCRIPTION: Shows usage of the 'link_to' helper for creating HTML anchor tags with various options and content. Demonstrates automatic content escaping.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/html.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to(\"Home\", \"/\")\n# => <a href=\"/\">Home</a>\n\nlink_to(\"/\") { \"Home\" }\n# => <a href=\"/\">Home</a>\n\nlink_to(\"Home\", \"/\", class: \"button\")\n# => <a href=\"/\" class=\"button\">Home</a>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nlink_to(\"<script>alert('xss')</script>\", \"/\")\n# => <a href=\"/\">&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</a>\n\nlink_to(\"/\") { \"<script>alert('xss')</script>\" }\n# => <a href=\"/\">&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Messages with YAML in Hanami::Validations\nDESCRIPTION: This example shows how to use an external YAML file to configure error messages for Hanami::Validations. It demonstrates the structure of the YAML file and how to reference it in the validator class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/messages.yml\nen:\n  errors:\n    email?: \"must be an email\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupValidator\n  include Hanami::Validations\n  messages_path 'config/messages.yml'\n\n  predicate :email? do |current|\n    # ...\n  end\n\n  validations do\n    required(:email).filled(:str?, :email?)\n    required(:age).filled(:int?, gt?: 18)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Helpers and Context in Ruby Part Classes for Hanami Views\nDESCRIPTION: These snippets show how to access helpers and the view context from within part classes in Hanami views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  def cover_url\n    value.cover_url || helpers.asset_url(\"book-cover-default.png\")\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\n  def path\n    context.routes.path(:book, id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Hanami App-Specific Commands\nDESCRIPTION: Demonstrates how to display available commands when inside a Hanami application directory. These commands include various development and management tasks specific to Hanami apps.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami --help\nCommands:\n  hanami assets [SUBCOMMAND]\n  hanami console                              # Start app console (REPL)\n  hanami dev                                  # Start the application in development mode\n  hanami generate [SUBCOMMAND]\n  hanami install                              # Install Hanami third-party plugins\n  hanami middleware                           # Print app Rack middleware stack\n  hanami routes                               # Print app routes\n  hanami server                               # Start Hanami app server\n  hanami version                              # Print Hanami app version\n```\n\n----------------------------------------\n\nTITLE: Configuring Format in Base Action Class\nDESCRIPTION: Example of setting a format in a base action class that will be inherited by all subclasses.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n    config.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a New Hanami Action\nDESCRIPTION: Illustrates how to generate a new action in a Hanami application. This command creates the necessary files for a new action within the specified slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action main.books.index\n```\n\n----------------------------------------\n\nTITLE: Updating Gemfile for Hanami 2.1 Upgrade\nDESCRIPTION: This snippet shows the new gems to be added to the Gemfile when upgrading to Hanami 2.1. It includes hanami-assets, hanami-view, hanami-webconsole for development, and capybara for testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"hanami-assets\", \"~> 2.1\"\ngem \"hanami-view\", \"~> 2.1\"\n\ngroup :development do\n  gem \"hanami-webconsole\", \"~> 2.1\"\nend\n\ngroup :test do\n  gem \"capybara\"\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing Middleware Stack\nDESCRIPTION: Displays the configured Rack middleware stack in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Session::Cookie\n/    Hanami::Middleware::BodyParser\n```\n\n----------------------------------------\n\nTITLE: Complex Form with Nested Fields\nDESCRIPTION: Example of using nested fields in a Hanami form.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  form_for :delivery, routes.deliveries_path do\n    text_field :customer_name\n\n    fields_for :address do\n      text_field :city\n    end\n\n    submit 'Create'\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Equivalent `where` Query for the `by_pk` Scope in ROM (Ruby)\nDESCRIPTION: Demonstrates the underlying query structure equivalent to using the `by_pk(1)` scope. It uses the `where` method to filter by the primary key (`id`) and fetches the single result using `.one`. This highlights that scopes are often convenient wrappers around standard query methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.where(id: 1).one\n```\n\n----------------------------------------\n\nTITLE: Default Procfile.dev Configuration for Hanami 2.1+\nDESCRIPTION: This snippet shows the default contents of the Procfile.dev file used by 'hanami dev' to manage processes in development mode. It includes web server and asset watching processes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/dev.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nweb: bundle exec hanami server\nassets: bundle exec hanami assets watch\n```\n\n----------------------------------------\n\nTITLE: Optional Tokens in Hanami Routes\nDESCRIPTION: Shows how to define optional path segments using parentheses notation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nget '/books(.:format)', to: 'books#show'\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Book Action via CLI - Shell\nDESCRIPTION: This shell command uses Hanami's CLI to generate a new action (and associated routing/boilerplate) for showing a book. Requires Hanami and project setup; updates files to add the 'books.show' action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.show\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Logger Settings in Hanami\nDESCRIPTION: This code shows how to set environment-specific logger configurations in Hanami, such as changing the log file for the development environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.stream = root.join(\"log\").join(\"development.log\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Current Environment in Hanami (Ruby)\nDESCRIPTION: Demonstrates how to use Hanami.env to check the current environment. This method returns a symbol representing the active environment based on the HANAMI_ENV setting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/environments.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env\n=> :development\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=test\n\nHanami.env\n=> :test\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=production\n\nHanami.env\n=> :production\n```\n\n----------------------------------------\n\nTITLE: Displaying Middleware Stack with Initialization Arguments in Hanami\nDESCRIPTION: This command displays the Rack middleware stack including the initialization arguments for each middleware. It uses the '--with-arguments' option to show additional details.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/middleware.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware --with-arguments\n\n/    Dry::Monitor::Rack::Middleware (instance) args: []\n/    Rack::Session::Cookie args: [{:key=>\"my_app.session\", :secret=>\"secret\", :expire_after=>31536000}]\n/    Hanami::Middleware::BodyParser args: [:json]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Middleware Stack with Inserted Middleware\nDESCRIPTION: This shell command shows the middleware stack after inserting Rack::ShowStatus before Rack::Auth::Basic. It verifies the correct order of middleware in the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$  bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::ShowStatus\n/    Rack::Auth::Basic\n/    Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Creating Image Tags in Ruby\nDESCRIPTION: Demonstrates the use of image_tag helper to generate <img> tags for image assets or absolute URLs. It automatically sets the alt attribute and allows adding HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"logo.png\")\n# => <img src=\"/assets/logo-DJHI6WQI.png\" alt=\"Logo\">\n\nimage_tag(\"https://example.com/logo.png\")\n# => <img src=\"https://example.com/logo.png\" alt=\"Logo\">\n\nimage_tag(\"logo.png\", alt: \"App logo\", class: \"image\")\n# => <img src=\"/assets/logo-DJHI6WQI.png\" alt=\"App logo\" class=\"image\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Request Format in Hanami Application\nDESCRIPTION: Shows how to configure the default request format for a Hanami application, which is used when a client makes a generic request with Accept: */*. The default value is :html.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      default_request_format :json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Default Procfile.dev Configuration\nDESCRIPTION: Shows the default contents of Procfile.dev, which manages processes for 'hanami dev'. It includes web server and asset watching processes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/dev.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nweb: bundle exec hanami server\nassets: bundle exec hanami assets watch\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Asset Directory Structure\nDESCRIPTION: Shows the default directory structure for assets in a Hanami application, including the app assets folder, configuration, and compiled public assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── app\n│   ├── assets\n│   │   ├── css\n│   │   │   └── app.css\n│   │   ├── images\n│   │   │   └── favicon.ico\n│   │   └── js\n│   │       └── app.js\n├── config\n│   └── assets.js\n├── node_modules\n├── package-lock.json\n├── package.json\n└── public\n    └── assets\n        ├── assets.json\n        ├── app-HYVEQYF6.css\n        ├── app-6PW7FGD5.js\n        └── favicon-5VHYTKP2.ico\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared App Components for Slices\nDESCRIPTION: Shows how to configure additional shared components to be available in all slices of a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.shared_app_component_keys += [\"my_app_component\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Book Repository Command\nDESCRIPTION: Shell command to generate a new repository for books using Hanami CLI\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate repo book\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Fingerprinting in Hanami\nDESCRIPTION: Shows how to set up asset fingerprinting for cache management. Fingerprinting is disabled by default except in production environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      assets do\n        # fingerprint false, disabled by default\n      end\n    end\n\n    configure :production do\n      assets do\n        fingerprint true\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Routes in CSV Format\nDESCRIPTION: This command uses the '--format=csv' option to display the routes in CSV format. It includes additional information such as constraints and presents the data in a more structured way suitable for parsing or importing into spreadsheets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/routes.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes --format=csv\n\nMETHOD,PATH,TO,AS,CONSTRAINTS\nGET,/,home.index,:root,\"\"\nGET,/books,books.index,\"\",\"\"\nGET,/books/:id,books.show,\"\",\"\"\nPOST,/books,books.create,\"\",\"\"\n```\n\n----------------------------------------\n\nTITLE: Importing Default Stylesheet in Entry Point\nDESCRIPTION: Shows the default app.js entry point that imports the application's stylesheet to include it in the bundle. This is the starting point for JavaScript in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport \"../css/app.css\";\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in Hanami View Part\nDESCRIPTION: Shows how to access the context object explicitly in a Hanami view part to use the inflector method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/post.rb\n\nclass Post < Bookshelf::Views::Part\n  def koalas\n    context.inflector.pluralize(\"koala\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Appending Columns to Selection (`select_append`) vs Replacing (`select`) in ROM (Ruby)\nDESCRIPTION: Compares the behavior of `select` and `select_append`. Multiple calls to `select` overwrite previous selections, while `select_append` adds columns to the existing projection. The examples show fetching the first record after applying these methods to the `books` relation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.select(:id, :title).select(:pages).first\n# => { pages: 336 }\n```\n\nLANGUAGE: ruby\nCODE:\n```\n\nbooks.select(:id, :title).select_append(:pages).first\n# => { id: 1, title: \"To Kill a Mockingbird\", pages: 336 }\n```\n\n----------------------------------------\n\nTITLE: Exclusion Validation in Hanami\nDESCRIPTION: Shows how to validate that a value is not included in a given collection.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:genre) { excluded_from?(%w(pop dance)) }\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Script Tags in Ruby\nDESCRIPTION: Uses the javascript_tag helper to generate <script> tags for JavaScript assets or absolute URLs. It supports multiple asset paths and HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"app.js\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n\njavascript_tag(\"https://example.com/example.js\")\n# => <script src=\"https://example.com/example.js\" type=\"text/javascript\"></script>\n```\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"app\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n```\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"app\", \"dashboard/app\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n#    <script src=\"/assets/dashboard/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n```\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"app\", async: true)\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\" async=\"async\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for a Slice in a Dedicated File - Hanami - Ruby\nDESCRIPTION: Illustrates isolated route and middleware setup for a Hanami slice (here: Admin) in its own file (e.g., slices/admin/config/routes.rb). Uses OmniAuth middleware within the slice and defines a route for GET /users to users.index. Dependencies: hanami, omniauth, omniauth-google-oauth2 gems.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \\\"omniauth/builder\\\"\nrequire \\\"omniauth-google-oauth2\\\"\n\nmodule Admin\n  class Routes < Hanami::Routes\n    use OmniAuth::Builder do\n      provider :google_oauth2 # ...\n    end\n\n    get \\\"/users\\\", to: \\\"users.index\\\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Dependencies in Hanami Operations (Ruby)\nDESCRIPTION: Demonstrates how to use the Deps mixin to rename dependencies in a Hanami operation. This example renames the 'renderers.welcome_email' dependency to 'email_renderer' for clarity.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        email_renderer: \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying a Concrete Part Class for Exposure - Hanami View - Ruby\nDESCRIPTION: Illustrates providing a concrete part class to the as: option for the exposure in Hanami views, ensuring full control over decoration. Requires the existence of a Parts::User class and Hanami context with the expose method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nexpose :current_user, as: Parts::User\n```\n\n----------------------------------------\n\nTITLE: Hanami View Class Definition\nDESCRIPTION: Shows how to define a basic Hanami view class with a title method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n\n        def title\n          'Dashboard'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Inflector Component in Hanami (Ruby)\nDESCRIPTION: This code snippet illustrates how to use the inflector component in a Hanami application. It shows various inflection methods like pluralize, singularize, camelize, and more, demonstrating the versatility of the inflector.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/inflector.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/my_component.rb\n\nmodule Bookshelf\n  class MyComponent\n    include Deps[\"inflector\"]\n\n    def call\n      inflector.pluralize(\"book\")    # => \"books\"\n      inflector.singularize(\"books\") # => \"book\"\n\n      inflector.camelize(\"dry/inflector\") # => \"Dry::Inflector\"\n      inflector.classify(\"books\")         # => \"Book\"\n      inflector.tableize(\"Book\")          # => \"books\"\n\n      inflector.dasherize(\"best_selling_books\")  # => \"best-selling-books\"\n      inflector.underscore(\"best-selling-books\") # => \"best_selling_books\"\n\n      inflector.demodulize(\"Bookshelf::MyComponent\") # => \"MyComponent\"\n\n      inflector.humanize(\"hanami_inflector\") # => \"Hanami inflector\"\n      inflector.humanize(\"author_id\")        # => \"Author\"\n\n      inflector.ordinalize(1)  # => \"1st\"\n      inflector.ordinalize(2)  # => \"2nd\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a New Hanami Project\nDESCRIPTION: Demonstrates how to create a new Hanami project using the command line. This command initializes a new Hanami application with the specified name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf\n```\n\n----------------------------------------\n\nTITLE: Configuring X-XSS-Protection in Hanami\nDESCRIPTION: Various configurations for X-XSS-Protection header to handle XSS attack detection and prevention.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/security.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Filter enabled. Rather than sanitize the page, when a XSS attack is detected,\n# the browser will prevent rendering of the page (default)\nsecurity.x_xss_protection '1; mode=block'\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Filter disabled\nsecurity.x_xss_protection '0'\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Filter enabled. If a cross-site scripting attack is detected, in order to stop the attack,\n# the browser will sanitize the page\nsecurity.x_xss_protection '1'\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# The browser will sanitize the page and report the violation.\n# This is a Chromium function utilizing CSP violation reports to send details to a URI of your choice\nsecurity.x_xss_protection '1; report=http://[YOURDOMAIN]/your_report_URI'\n```\n\n----------------------------------------\n\nTITLE: Using Dotenv for Environment Variables in Hanami\nDESCRIPTION: Demonstrates how to use dotenv to manage environment variables for different environments in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n# .env.development\n$ DATABASE_URL=postgres://localhost:5432/bookshelf_development\nANALYTICS_ENABLED=true\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=development bundle exec hanami console\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].database_url\n=> \"postgres://localhost:5432/bookshelf_development\"\n\nbookshelf[development]> Hanami.app[\"settings\"].analytics_enabled\n=> true\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Hanami Context\nDESCRIPTION: Demonstrates how to include dependencies in a custom Hanami context class using the Deps mixin.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      include Deps[\"repositories.user_repo\"]\n\n      def current_user\n        return nil unless session[\"user_id\"]\n\n        @current_user ||= user_repo.get(session[\"user_id\"])\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Migration for Books Table\nDESCRIPTION: This Ruby code creates a database migration to establish a books table with title and author columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20221113050928_create_books.rb\n\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :text, null: false\n      column :author, :text, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Book Show Endpoint with RSpec\nDESCRIPTION: RSpec test suite for GET /books/:id endpoint testing successful book retrieval and not found scenarios\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books/:id\", type: [:request, :db] do\n  let(:books) { Hanami.app[\"relations.books\"] }\n\n  context \"when a book matches the given ID\" do\n    let!(:book_id) do\n      books.insert(title: \"Test Driven Development\", author: \"Kent Beck\")\n    end\n\n    it \"renders the book\" do\n      get \"/books/#{book_id}\"\n\n      expect(last_response).to be_successful\n      expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"id\" => book_id, \"title\" => \"Test Driven Development\", \"author\" => \"Kent Beck\"\n      )\n    end\n  end\n\n  context \"when no book matches the given ID\" do\n    it \"returns not found\" do\n      get \"/books/#{books.max(:id).to_i + 1}\"\n\n      expect(last_response).to be_not_found\n      expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq(\n        \"error\" => \"not_found\"\n      )\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Hanami Console Engine in Shell\nDESCRIPTION: Shows how to start the Hanami console with a specific engine (IRB or Pry) using the --engine argument. IRB is the default engine, while Pry can be specified as an alternative.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/console.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console --engine=irb # (the default)\n$ bundle exec hanami console --engine=pry\n```\n\n----------------------------------------\n\nTITLE: Setting Expires Headers in Hanami Action\nDESCRIPTION: Shows how to set Expires and Cache-Control headers simultaneously in a Hanami action using the expires method. Sets expiration time and public caching with max age.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/http-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          # Sets `Expires: Sun, 20 Nov 2022 17:47:02 GMT, Cache-Control: public, max-age=600`\n          response.expires 60, :public, max_age: 600\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Hanami Entity in Strict Mode\nDESCRIPTION: This example shows how to correctly instantiate a User entity with all required values in strict mode. Each attribute must be provided with a value of the correct type.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.new(id: 1, name: \"Luca\", age: 35, email: \"luca@hanami.test\")\n\nuser.id    # => 1\nuser.name  # => \"Luca\"\nuser.age   # => 35\nuser.email # => \"luca@hanami.test\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Mailer with Hanami CLI\nDESCRIPTION: Demonstrates using the Hanami generator command to scaffold a new mailer named 'welcome'. The command creates the mailer class file, two template files (HTML and text formats), and a test specification file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami generate mailer welcome\n    create  spec/bookshelf/mailers/welcome_spec.rb\n    create  lib/bookshelf/mailers/welcome.rb\n    create  lib/bookshelf/mailers/templates/welcome.html.erb\n    create  lib/bookshelf/mailers/templates/welcome.txt.erb\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Routes (Default Format) (Shell)\nDESCRIPTION: Executes the `hanami routes` command via Bundler to display all configured routes in the Hanami application. The output is presented in a human-friendly format, showing the HTTP method, URL path, target controller action (e.g., `home.index`), and the named route helper alias (e.g., `:root`). This command must be run within the context of a Hanami project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/routes.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home.index                    as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nPOST    /books                        books.create\n```\n\n----------------------------------------\n\nTITLE: Custom Template Directory Configuration in Ruby\nDESCRIPTION: Shows how to configure a custom template directory location in the Hanami application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/templates.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\\nmodule Web\\n  class Application < Hanami::Application\\n    configure do\\n      # ...\\n      templates 'path/to/templates'\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Error Logging in Hanami\nDESCRIPTION: Shows how to log an error message using Hanami logger.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].error \"Something's wrong\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Colorized Logger Output in Hanami\nDESCRIPTION: This code shows how to enable colorized log levels in the output for the development environment in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests in Shell\nDESCRIPTION: Commands for running RSpec tests in a Hanami application, showing both single file and full suite execution.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/actions/books/index_spec.rb\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: Profile View Template in ERB\nDESCRIPTION: ERB template for displaying user profile information with conditional rendering based on user authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<%# app/templates/views/profile/show.html.erb %>\n\n<% if current_user.id == user.id %>\n  <p class=\"text-base\">This is your profile. You can edit your data.</p>\n<% else %>\n  <p class=\"text-base\">This is the profile of <%= user.name %>. You can admire it.</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: View Class Implementation\nDESCRIPTION: Example of implementing a form method in a Hanami view class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class New\n        include Web::View\n\n        def form\n          form_for :book, routes.books_path do\n            text_field :title\n\n            submit 'Create'\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Book Added Notification Mailer Implementation\nDESCRIPTION: Implementation of a Hanami mailer class for book addition notifications with from, to, and subject configurations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass Mailers::BookAddedNotification\n  include Hanami::Mailer\n\n  from    'no-reply@example.com'\n  to      'admin@example.com'\n  subject 'Book added!'\nend\n```\n\n----------------------------------------\n\nTITLE: Complex HTML Markup Construction with Hanami\nDESCRIPTION: Creates complex HTML structures without needing to concatenate tags, showing how to build nested elements with attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.section(id: 'container') do\n  div(id: 'main') do\n    p 'Main content'\n  end\n  \n  div do\n    ul(id: 'languages') do\n      li 'Italian'\n      li 'English'\n    end\n  end\nend\n\n# =>\n#  <section id=\"container\">\n#    <div id=\"main\">\n#      <p>Main Content</p>\n#    </div>\n#\n#    <div>\n#      <ul id=\"languages\">\n#        <li>Italian</li>\n#        <li>English</li>\n#      </ul>\n#    </div>\n#  </section>\n```\n\n----------------------------------------\n\nTITLE: Configuring default charset for all Hanami actions\nDESCRIPTION: Sets a custom default character set (koi8-r) for all actions in a Hanami application. This affects the charset portion of the Content-Type header in responses.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.default_charset = \"koi8-r\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Development Server\nDESCRIPTION: Launches the Hanami development server with Guard and Puma on port 2300. Shows startup logs including thread configuration and listening addresses.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/server.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server\n\n12:30:50 - INFO - Using Guardfile at bookshelf/Guardfile.\n12:30:50 - INFO - Puma starting on port 2300 in development environment.\n12:30:50 - INFO - Guard is now watching at 'bookshelf'\nPuma starting in single mode...\n* Puma version: 6.4.0 (ruby 3.2.2-p53) (\"The Eagle of Durango\")\n*  Min threads: 5\n*  Max threads: 5\n*  Environment: development\n*          PID: 93401\n* Listening on http://0.0.0.0:2300\n* Starting control server on http://127.0.0.1:9293\n* Starting control server on http://[::1]:9293\nUse Ctrl-C to stop\n```\n\n----------------------------------------\n\nTITLE: Executing RSpec Test for Books Index using Shell\nDESCRIPTION: This shell command runs the specific RSpec test file for the books index request (`spec/requests/books/index_spec.rb`) using `bundle exec rspec`. The output shows the test description and indicates that the single example passed successfully.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/index_spec.rb\n\nGET /books\n  returns a list of books\n\nFinished in 0.05765 seconds (files took 1.36 seconds to load)\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Component Imports in Publisher Slice\nDESCRIPTION: Demonstrates how to import specific components from another slice with custom naming.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/publisher.rb\n\nmodule Publisher\n  class Slice < Hanami::Slice\n    import keys: [\"book_covers.purge\"], from: :cdn, as: :content_network\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Structured Data with Message in Ruby using Hanami Logger\nDESCRIPTION: Illustrates logging structured data along with a text message. This approach allows for more detailed and easily parseable log entries.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Tags with Ruby in Hanami\nDESCRIPTION: Demonstrates how to use the 'tag' helper to create various HTML tags with content and attributes. It also shows how to handle HTML escaping and custom tags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/html.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div # => <div></div>\ntag.img # => <img>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(\"hello\")            # => <div>hello</div>\ntag.div { \"hello\" }         # => <div>hello</div>\ntag.div(tag.p(\"hello\"))     # => <div><p>hello</p></div>\ntag.div { tag.p(\"hello\") }  # => <div><p>hello</p></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(class: \"a\") # => <div class=\"a\"></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.div(class: [\"a\", \"b\"])              # => <div class=\"a b\"></div>\ntag.div(class: {\"a\": true, \"b\": false}) # => <div class=\"a\"></div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.custom_tag(\"hello\") # => <custom-tag>hello</custom-tag>\n```\n\nLANGUAGE: ruby\nCODE:\n```\ntag.p(\"<script>alert()</script>\")\n# => <p>&lt;script&gt;alert()&lt;/script&gt;</p>\n\ntag.p(class: \"<script>alert()</script>\")\n# => <p class=\"&lt;script&gt;alert()&lt;/script&gt;\"></p>\n\ntag.p(\"<em>safe content</em>\".html_safe)\n# => <p><em>safe content</em></p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Content Security Policy for External CDNs\nDESCRIPTION: Configuration for allowing external CDN scripts in Hanami's Content Security Policy header. Required for using external libraries like Bootstrap.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n      security.content_security_policy %{\n        …\n        script-src 'self' \\\n                   https://code.jquery.com \\\n                   https://cdnjs.cloudflare.com \\\n                   https://maxcdn.bootstrapcdn.com;\n        …\n      }\n```\n\n----------------------------------------\n\nTITLE: Rendering Part Directly in Template - Hanami View - SQL/ERB\nDESCRIPTION: Demonstrates rendering a part object directly in a template, triggering the decorated value's to_s conversion or an overridden to_s. Uses ERB syntax in a Hanami view. The part must implement or delegate a to_s method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\n<p><%= book %></p>\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami Asset Compilation Configuration\nDESCRIPTION: Basic setup for customizing esbuild options in Hanami asset compilation. Shows how to modify the esbuildOptions object through a callback function.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/customization.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as assets from \"hanami-assets\";\n\nawait assets.run({\n  esbuildOptionsFn: (args, esbuildOptions) => {\n    // Add to esbuildOptions here. Use `args.watch` as a condition for different options for\n    // compile vs watch.\n\n    return esbuildOptions;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Profile View Class in Ruby\nDESCRIPTION: Example view class implementing user profile display functionality with dependency injection and exposures.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/profile/show.rb\n\nmodule Profile\n  class Show < Main::View\n    include Deps[users_repo: \"repos.user_repo\"]\n\n    expose :current_user\n\n    expose :user do |id:|\n      user_repo.by_id(id)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Less Than Validation in Hanami\nDESCRIPTION: Demonstrates validation for numbers less than a threshold.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { lt?(7) }\n```\n\n----------------------------------------\n\nTITLE: Using Path Helpers in Hanami Views\nDESCRIPTION: This example demonstrates how to use path helpers generated from named routes in Hanami views. It shows how to create links using these helpers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web::Views::Home\n  class Index\n    include Web::View\n\n    def links\n      html.ul do\n        li { link_to 'Home', routes.home_path }\n        li { link_to 'Dashboard', routes.dashboard_path }\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Base Scope Class\nDESCRIPTION: Example of defining a base scope class for inheritance by other scopes in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/scope.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Scope < Hanami::View::Scope\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Exception Handling with Status Code in Hanami Action\nDESCRIPTION: Demonstrates how to handle StandardError with a 500 status code response in a Hanami action. When an error occurs, it returns a basic 500 Internal Server Error response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/exception-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        handle_exception StandardError => 500\n\n        def handle(request, response)\n          raise \"error\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami App Configuration\nDESCRIPTION: Application configuration enabling JSON body parsing middleware\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_37\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use :body_parser, :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ERB Template Definition\nDESCRIPTION: Shows how to define a basic ERB template file for a dashboard view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n# apps/web/templates/dashboard/index.html.erb\n<h1>Dashboard</h1>\n```\n\n----------------------------------------\n\nTITLE: Bypassing Default Dataset Filters using `unfiltered` in ROM (Ruby)\nDESCRIPTION: Demonstrates the use of the `unfiltered` method on a ROM relation (`books`) to ignore any default filters or selections defined in the relation's `dataset` block. This allows querying the underlying table without the default constraints, as shown by subsequently applying a different filter (`exclude`).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.unfiltered.exclude(archived_at: nil)\n```\n\n----------------------------------------\n\nTITLE: Generating Token Lists for HTML Attributes in Ruby\nDESCRIPTION: Demonstrates the use of the 'token_list' helper (also aliased as 'class_names') to generate space-separated tokens for HTML attributes, particularly useful for class names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/html.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ntoken_list(\"foo\", \"bar\")\n# => \"foo bar\"\n\ntoken_list(\"foo\", \"foo bar\")\n# => \"foo bar\"\n\ntoken_list({ foo: true, bar: false })\n# => \"foo\"\n\ntoken_list(nil, false, 123, \"\", \"foo\", { bar: true })\n# => \"123 foo bar\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Middleware with Arguments\nDESCRIPTION: Shows middleware stack with initialization arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware --with-arguments\n\n/    Dry::Monitor::Rack::Middleware (instance) args: []\n/    Rack::Session::Cookie args: [{:key=>\"my_app.session\", :secret=>\"secret\", :expire_after=>31536000}]\n/    Hanami::Middleware::BodyParser args: [:json]\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Bucket Provider with Dependencies\nDESCRIPTION: Implementation of a provider that depends on other container components and demonstrates using the target accessor.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/providers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider(:uploads_bucket) do\n  prepare do\n    require \"aws-sdk-s3\"\n  end\n\n  start do\n    target.start(:metrics)\n\n    uploads_bucket_name = target[\"settings\"].uploads_bucket_name\n\n    credentials = Aws::Credentials.new(\n      target[\"settings\"].aws_access_key_id,\n      target[\"settings\"].aws_secret_access_key,\n    )\n\n    uploads_bucket = Aws::S3::Resource.new(credentials: credentials).bucket(uploads_bucket_name)\n\n    register \"uploads_bucket\", uploads_bucket\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Locals in a Hanami Template - SQL/Embedded Ruby\nDESCRIPTION: Shows how to access a local variable (`item`) directly within a template, where a local was passed when instantiating the scope. This example prints the item's title using ERB. It presupposes that `item` is part of the locals context for the rendering template, highlighting the tight integration between scope locals and template rendering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n<!-- Given an `item:` local passed to the scope -->\\n<%= item.title %>\n```\n\n----------------------------------------\n\nTITLE: Integrating i18n for Internationalization in Hanami::Validations\nDESCRIPTION: This snippet demonstrates how to integrate i18n gem for internationalization in Hanami::Validations. It shows how to configure the validator to use i18n messages and the structure of the locale file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupValidator\n  include Hanami::Validations\n\n  messages :i18n\n\n  # ...\nend\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config/locales/en.yml\nen:\n  errors:\n    signup:\n      # ...\n```\n\n----------------------------------------\n\nTITLE: Creating Video Tags in Ruby\nDESCRIPTION: Uses the video_tag helper to generate <video> tags for video assets or absolute URLs. It supports HTML attributes and allows for custom content within the tag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"movie.mp4\")\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\"></video>\n\nvideo_tag(\"https://example.com/movie.mp4\")\n# => <video src=\"https://example.com/movie.mp4\"></video>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"movie.mp4\", autoplay: true, controls: true)\n# => <video autoplay=\"autoplay\" controls=\"controls\" src=\"/assets/movie-DJHI6WQI.mp4\"></video>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"movie.mp4\") do\n  \"Your browser does not support the video tag.\"\nend\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\">\n#      Your browser does not support the video tag.\n#    </video>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"movie.mp4\") do\n  tag.track(kind: \"captions\", src: asset_url(\"movie.en.vtt\"), srclang: \"en\", label: \"English\")\nend\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\">\n#      <track kind=\"captions\" src=\"/assets/movie.en-98EA6E4F.vtt\" srclang=\"en\" label=\"English\">\n#    </video>\n```\n\n----------------------------------------\n\nTITLE: Testing Root Endpoint with RSpec\nDESCRIPTION: RSpec test for the root endpoint that verifies the response is successful and returns the expected welcome message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/root_spec.rb\n\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    get \"/\"\n\n    # Find me in `config/routes.rb`\n    expect(last_response).to be_successful\n    expect(last_response.body).to eq(\"Welcome to Bookshelf\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Hanami Generate Commands\nDESCRIPTION: Shows the available generate commands in Hanami 2.1, including actions, parts, slices, and views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate --help\nCommands:\n  hanami generate action NAME\n  hanami generate part NAME\n  hanami generate slice NAME\n  hanami generate view NAME\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Hanami App Class\nDESCRIPTION: This code shows how to access settings within the Hanami App class to configure application behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Stack with Inserted Middleware\nDESCRIPTION: Shows the result of inspecting the middleware stack after inserting middleware at a specific position. This confirms the new order of middleware in the stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$  bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::ShowStatus\n/    Rack::Auth::Basic\n/    Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Listing Definition Data Types in Hanami\nDESCRIPTION: Enumerates the basic data type definitions available in Hanami's Types module. These types serve as the foundation for more specific type categories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/data-types.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nTypes::Nil\nTypes::String\nTypes::Symbol\nTypes::Int\nTypes::Float\nTypes::Decimal\nTypes::Class\nTypes::Bool\nTypes::True\nTypes::False\nTypes::Date\nTypes::DateTime\nTypes::Time\nTypes::Array\nTypes::Hash\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form with Params Values\nDESCRIPTION: Example of form re-render after failed submission showing how params values take precedence over initial values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/deliveries/1\" id=\"delivery-form\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"PATCH\">\n  <input type=\"hidden\" name=\"_csrf_token\" value=\"4800d585b3a802682ae92cb72eed1cdd2894da106fb4e9e25f8a262b862c52ce\">\n\n  <input type=\"text\" name=\"delivery[code]\" id=\"delivery-code\" value=\"foo\">\n\n  <input type=\"text\" name=\"delivery[customer][name]\" id=\"delivery-customer-name\" value=\"Luca\">\n  <input type=\"text\" name=\"delivery[customer][address][city]\" id=\"delivery-customer-address-city\" value=\"Rome\">\n\n  <button type=\"submit\">Update</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Listing Hanami Gem Commands via CLI - Shell\nDESCRIPTION: This shell snippet demonstrates how to invoke help documentation for Hanami's top-level CLI after installation via RubyGems. It shows the usage of 'hanami --help' to list global commands such as generating a new app and displaying the Hanami version. Prerequisite: Hanami installed via 'gem install hanami'. Input: 'hanami --help' command. Output: List of available top-level Hanami commands. The output may change with newer versions of Hanami or different gem installations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami --help\\n\\nCommands:\\n  hanami new APP         # Generate a new Hanami app\\n  hanami version         # Hanami version\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookies in Hanami Application\nDESCRIPTION: Configuration example showing how to disable cookies completely for all actions in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Logging Backend for Exceptions\nDESCRIPTION: Shows how to add a dedicated logging backend for exceptions during test execution with a specific log file destination.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/spec_helper.rb\n\nHanami.logger.add_backend(\n  stream: Hanami.app.root.join(\"log\").join(\"exceptions.log\"), log_if: :exception?\n)\n\nbegin\n  raise \"Oh noez\"\nrescue => e\n  Hanami.logger.error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Root Route Configuration\nDESCRIPTION: Shows how to configure the root route to invoke a specific action instead of using a block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Displaying Book Details in an ERB Template\nDESCRIPTION: This ERB template demonstrates basic rendering of book information. It requires a `book` object with `title` and `description` attributes to be available in its context to display the content within HTML tags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n<h1><%= book.title %></h1>\n<p><%= book.description %></p>\n```\n\n----------------------------------------\n\nTITLE: Structured Data Logging with Message in Hanami\nDESCRIPTION: Demonstrates logging with both a text message and structured data payload.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Adding Constraints to Settings in Ruby\nDESCRIPTION: Shows how to add constraints to settings using dry-types in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    EMAIL_FORMAT = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z]+)*\\.[a-z]+\\z/i\n\n    setting :session_secret, constructor: Types::String.constrained(min_size: 32)\n    setting :from_email, constructor: Types::String.constrained(format: EMAIL_FORMAT)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action via CLI (Shell)\nDESCRIPTION: This shell command uses the Hanami CLI generator to create a new action named `home.index`. The flags `--skip-route` and `--skip-tests` prevent the generator from automatically adding a route (as it was added manually) and generating corresponding test files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action home.index --skip-route --skip-tests\n```\n\n----------------------------------------\n\nTITLE: Maximum Size Validation in Hanami\nDESCRIPTION: Demonstrates maximum size validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:name) { max_size?(128) }\n```\n\n----------------------------------------\n\nTITLE: Custom Error Message with Halt in Hanami Action\nDESCRIPTION: This snippet shows how to use the halt method with a custom error message. It sets both the status code and the response body.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        def handle(request, response)\n          halt 404, \"These aren't the droids you're looking for\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Current Environment in Hanami (Ruby)\nDESCRIPTION: Shows how to use Hanami.env? to check if the current environment matches one or more given environments. This method returns a boolean value.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development)\n=> true\n\nHanami.env?(:test)\n=> false\n\nHanami.env?(:production)\n=> false\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development, :test)\n=> true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=test\n\nHanami.env?(:development, :test)\n=> true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=production\n\nHanami.env?(:development, :test)\n=> false\n```\n\n----------------------------------------\n\nTITLE: Environment Check with Hanami.env? Single Environment\nDESCRIPTION: Shows how to use Hanami.env? to check if the current environment matches a specific environment name. Returns true if the environment matches, false otherwise.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development)\n=> true\n\nHanami.env?(:test)\n=> false\n\nHanami.env?(:production)\n=> false\n```\n\n----------------------------------------\n\nTITLE: Creating a Hanami App Without a Database (Console)\nDESCRIPTION: This snippet shows how to generate a Hanami app without a database layer by supplying the --skip-db flag. This is useful when data persistence is not required or an alternative storage mechanism is planned. Requires Hanami CLI. Input is the application name; output is a project without DB config or persistence scaffolds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nhanami new bookshelf --skip-db\n```\n\n----------------------------------------\n\nTITLE: Setting Hanami Slice Loading with Environment Variables - Shell\nDESCRIPTION: Demonstrates how to selectively load specific Hanami slices in your application process by setting the HANAMI_SLICES environment variable. This approach requires no code changes and should be used when only certain slices are needed for a given workload, offering faster boot times and lower memory usage. The value should be a comma-separated list of slice names; run this before your Hanami command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_SLICES=cdn,other_slice_here bundle exec your_hanami_command\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Errors in Book Creation Form with ERB\nDESCRIPTION: This ERB template snippet shows how to display validation errors in the book creation form. It loops through error messages and renders them as a list when the form submission is invalid.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_33\n\nLANGUAGE: ERB\nCODE:\n```\n<h2>Add book</h2>\n\n<% unless params.valid? %>\n  <div class=\"errors\">\n    <h3>There was a problem with your submission</h3>\n    <ul>\n      <% params.error_messages.each do |message| %>\n        <li><%= message %></li>\n      <% end %>\n    </ul>\n  </div>\n<% end %>\n\n<%#\n  form_for :book, '/books' do\n    ...\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Using Local Assets with Automatic Subresource Integrity\nDESCRIPTION: Example showing how Hanami automatically adds integrity attributes to local asset tags in production for security against compromised files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript 'application' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/assets/application-92cab02f6d2d51253880cd98d91f1d0e.js\" type=\"text/javascript\" integrity=\"sha256-WB2pRuy8LdgAZ0aiFxLN8DdfRjKJTc4P4xuEw31iilM=\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Application-Wide Helper in Hanami View\nDESCRIPTION: This example shows how to include an application-wide helper module in a Hanami view. The Helpers module is included, making its methods available in the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\nmodule Books\n  class Index < View\n    include Helpers\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Coercible Data Types in Hanami\nDESCRIPTION: Enumerates the coercible data types in Hanami's Types module. These types include constructors that apply coercion to the given input.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/data-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nTypes::Coercible::String\nTypes::Coercible::Int\nTypes::Coercible::Float\nTypes::Coercible::Decimal\nTypes::Coercible::Array\nTypes::Coercible::Hash\n```\n\n----------------------------------------\n\nTITLE: Router-Level Middleware Configuration\nDESCRIPTION: Shows how to add middleware at the router level and for specific routes\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    use Rack::Runtime\n\n    root { \"Hello from Hanami\" }\n\n    scope \"restricted\" do\n      use Rack::Auth::Basic\n\n      get \"/page\" do\n        \"Some restricted content\"\n      end\n    end\n\n    slice :admin, at: \"/admin\" do\n      use Rack::Auth::Basic\n\n      get \"/books\", to: \"books.index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Autoloaded Entity Class in Ruby\nDESCRIPTION: Example of defining a Book entity class following Hanami's autoloading conventions within the app/entities directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/entities/book.rb\n\nmodule Bookshelf\n  module Entities\n    class Book\n      attr_reader :title, :author\n\n      def initialize(title:, author:)\n        @title = title\n        @author = author\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Settings in Hanami (Ruby)\nDESCRIPTION: Illustrates how to set environment-specific configurations in a Hanami application. This example shows setting up a production-only middleware.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      # Production specific config or initialization\n      config.middleware.use ProductionOnlyMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Routes in Ruby\nDESCRIPTION: Ruby code defining the routes for the Hanami application, including the root route.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Home Show View Class in Ruby\nDESCRIPTION: Generated view class for rendering home show page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Home\n      class Show < Bookshelf::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Sessions in Hanami App Configuration (Ruby)\nDESCRIPTION: This snippet shows how to enable sessions in a Hanami application by adding configuration to the app.rb file. It sets up cookie-based sessions with a custom key, secret, and expiration time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: JSON-Specific View Class in Hanami\nDESCRIPTION: Ruby class implementing a format-specific view handler for JSON responses, inheriting from the base Index view and using custom rendering logic.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/mime-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/json_index.rb\nrequire_relative './index'\n\nmodule Web\n  module Views\n    module Dashboard\n      class JsonIndex < Index\n        format :json\n\n        def render\n          raw JSON.generate({foo: 'bar'})\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Base URL for URL Generation in Hanami\nDESCRIPTION: Shows how URL generation uses the configured base URL when generating full URLs for named routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app[\"routes\"].url(:book, id: 1)\n=> #<URI::HTTP https://bookshelf.example.com/books/1>\n```\n\n----------------------------------------\n\nTITLE: Filled Validation in Hanami\nDESCRIPTION: Demonstrates validation ensuring values are not nil or empty.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:name) { filled? }      # string\nrequired(:languages) { filled? } # collection\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL databases with createdb command\nDESCRIPTION: Shell commands to create development and test databases for a Hanami application using PostgreSQL's createdb utility.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ createdb bookshelf_development\n$ createdb bookshelf_test\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Repository for Books in Ruby\nDESCRIPTION: This example shows how to create a repository specifically for handling book-related operations. It inherits from the base Repository class and includes methods for common database operations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class BookRepository < Repository[:books]\n    def create(data)\n      books.create(data)\n    end\n\n    def update(id, data)\n      books.by_pk(id).update(data)\n    end\n\n    def delete(id)\n      books.by_pk(id).delete\n    end\n\n    def find(id)\n      books.by_pk(id).one\n    end\n\n    def all\n      books.to_a\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Favicon Links in Ruby\nDESCRIPTION: Shows how to use the favicon_tag helper to create <link> tags for favicon assets. It has a default asset and allows specifying custom favicons and HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfavicon_tag\n# => <link href=\"/assets/favicon-RTK3P5FP.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n\nfavicon_tag(\"fav.ico\")\n# => <link href=\"/assets/fav-EOLTKYGO.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n\nfavicon_tag(\"fav.ico\", id: \"fav\")\n# => <link id=\"fav\" href=\"/assets/fav-EOLTKYGO.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n```\n\n----------------------------------------\n\nTITLE: Using Slice-Specific Settings in Components\nDESCRIPTION: Shows how to include and use slice-specific settings within a slice component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/book_covers/purge.rb\n\nmodule CDN\n  module BookCovers\n    class Purge\n      include Deps[\"settings\"]\n\n      def call(book_cover_path)\n        # use settings.cdn_api_key here\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Requiring Slim Template Engine in Ruby\nDESCRIPTION: This snippet shows how to require the Slim template engine in a Hanami view base class. It demonstrates the setup needed to use Slim for '.html.slim' templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/templates-and-partials.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/view.rb\n\n# Use Slim for \".html.slim\" templates\nrequire \"slim\"\n\nmodule Bookshelf\n  class View < Hanami::View\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating New Hanami Application\nDESCRIPTION: Examples of using the 'hanami new' command to generate new Hanami applications. The command creates a new directory with the given application name and sets up all necessary files, including gem bundling and NPM bundling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/new.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf # generates a new Bookshelf application in ./bookshelf\n$ hanami new my_app # generates a new MyApp application in ./my_app\n```\n\n----------------------------------------\n\nTITLE: Updated Hanami Routes with Action\nDESCRIPTION: Updated route configuration that maps the root endpoint to a home show action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Layout Template with Optional Content\nDESCRIPTION: ERB template demonstrating how to include optional page-specific content like JavaScript.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n  <!-- ... -->\n  <body>\n    <!-- ... -->\n    <footer>\n      <%= local :javascript %>\n    </footer>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Adding dry-operation Gem to Gemfile - Ruby\nDESCRIPTION: Shows the line to add the dry-operation gem dependency for command-based operations in Hanami apps. To be placed in the Gemfile for installation. No parameters, just dependency declaration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ngem \\\"dry-operation\\\"\n```\n\n----------------------------------------\n\nTITLE: Updating Puma Configuration for Hanami 2.1.0\nDESCRIPTION: Updates the Puma server configuration to support concurrency and cluster mode, with hooks for proper shutdown in cluster mode.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\n#\n# Environment and port\n#\nport ENV.fetch(\"HANAMI_PORT\", 2300)\nenvironment ENV.fetch(\"HANAMI_ENV\", \"development\")\n\n#\n# Threads within each Puma/Ruby process (aka worker)\n#\n\n# Configure the minimum and maximum number of threads to use to answer requests.\nmax_threads_count = ENV.fetch(\"HANAMI_MAX_THREADS\", 5)\nmin_threads_count = ENV.fetch(\"HANAMI_MIN_THREADS\") { max_threads_count }\n\nthreads min_threads_count, max_threads_count\n\n#\n# Workers (aka Puma/Ruby processes)\n#\n\npuma_concurrency = Integer(ENV.fetch(\"HANAMI_WEB_CONCURRENCY\", 0))\npuma_cluster_mode = puma_concurrency > 1\n\n# How many worker (Puma/Ruby) processes to run.\n# Typically this is set to the number of available cores.\nworkers puma_concurrency\n\n#\n# Cluster mode (aka multiple workers)\n#\n\nif puma_cluster_mode\n  # Preload the application before starting the workers. Only in cluster mode.\n  preload_app!\n\n  # Code to run immediately before master process forks workers (once on boot).\n  #\n  # These hooks can block if necessary to wait for background operations unknown\n  # to puma to finish before the process terminates. This can be used to close\n  # any connections to remote servers (database, redis, …) that were opened when\n  # preloading the code.\n  before_fork do\n    Hanami.shutdown\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Base URL Configuration\nDESCRIPTION: Shows how to configure the base URL for the application in config/app.rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.base_url = \"https://bookshelf.example.com\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Form Data Types in Hanami\nDESCRIPTION: Lists the form-specific data types in Hanami's Types module. These types apply non-strict coercion, specifically designed for handling HTTP parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/data-types.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nTypes::Form::Nil\nTypes::Form::Int\nTypes::Form::Float\nTypes::Form::Decimal\nTypes::Form::Bool\nTypes::Form::True\nTypes::Form::False\nTypes::Form::Date\nTypes::Form::DateTime\nTypes::Form::Time\nTypes::Form::Array\nTypes::Form::Hash\n```\n\n----------------------------------------\n\nTITLE: Passing Variables to Named Routes in Hanami\nDESCRIPTION: Shows how to pass required variables when generating paths from named routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app[\"routes\"].path(:book, id: 1)\n=> \"/books/1\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection in AddBook Interactor\nDESCRIPTION: Basic implementation of a Hanami interactor with dependency injection for book repository. Shows how to expose the book object and initialize with a repository dependency.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/interactor'\n\nclass AddBook\n  include Hanami::Interactor\n\n  expose :book\n\n  def initialize(repository: BookRepository.new)\n    @repository = repository\n  end\n\n  def call(book_attributes)\n    @book = @repository.create(book_attributes)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Slice\nDESCRIPTION: Shows how to generate a slice in Hanami using the 'generate slice' command. This example creates an 'admin' slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice admin\n```\n\n----------------------------------------\n\nTITLE: Creating 404 Error Page for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of a 404 error page for Hanami 2.1. It includes HTML and CSS for a simple, responsive error page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>The page you were looking for doesn't exist (404)</title>\n  <style>\n    :root {\n      --foreground-rgb: 0, 0, 0;\n      --background-rgb: 255, 255, 255;\n      --font-sans: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --foreground-rgb: 255, 255, 255;\n        --background-rgb: 0, 0, 0;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    body,\n    html {\n      max-width: 100vw;\n      overflow-x: hidden;\n      font-size: 100%;\n    }\n\n    body {\n      color: rgb(var(--foreground-rgb));\n      background: rgb(var(--background-rgb));\n      font-family: var(--font-sans);\n      font-style: normal;\n    }\n\n    main {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      padding: 0 4vw;\n    }\n\n    .message {\n      display: flex;\n      gap: 1rem;\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .message h1 {\n      font-size: 2rem;\n      font-weight: 500;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      html {\n        color-scheme: dark;\n      }\n    }\n  </style>\n  </head>\n  <body>\n    <!-- This file lives in public/404.html -->\n    <main>\n      <div class=\"message\">\n        <h1>404</h1>\n        <p>The page you were looking for doesn't exist.</p>\n      </div>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Bypassing View Rendering in Hanami Action (Ruby)\nDESCRIPTION: This code shows how to bypass the view rendering process in a Hanami action by directly setting the response body. It demonstrates the implementation of the Dashboard::Index action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/basic-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          self.body = 'OK'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Test Environment Variables in .env.test\nDESCRIPTION: Example content for a `.env.test` file, setting the `DATABASE_URL` and `ANALYTICS_ENABLED` variables specifically for the test environment in a Hanami application. This file is loaded when `HANAMI_ENV` is set to 'test'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n$ DATABASE_URL=postgres://localhost:5432/bookshelf_test\nANALYTICS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Using Helpers in Hanami Parts\nDESCRIPTION: Example of accessing helpers through the helpers object within a part class\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef word_count\n  # Presuming a `body_text` method on the value wrapped by the part\n  helpers.format_number(body_text.split)\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Colorized Logging in Hanami\nDESCRIPTION: Shows how to enable colorized log levels in the development environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Missing Action Error (Shell)\nDESCRIPTION: This output displays the error encountered when running the RSpec tests after defining the root route but before creating the corresponding action. It shows a `Hanami::Routes::MissingActionError`, indicating that the `Bookshelf::Actions::Home::Index` class specified in the route could not be found.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nFailures:\n\n  1) Root is successful\n     Failure/Error: get \"/\"\n\n     Hanami::Routes::MissingActionError:\n       Could not find action with key \"actions.home.index\" in Bookshelf::App\n\n       To fix this, define the action class Bookshelf::Actions::Home::Index in /Users/jane/bookshelf/actions/home/index.rb\n\n1 example, 1 failure\n```\n\n----------------------------------------\n\nTITLE: Configuring Guard for Hanami Code Reloading\nDESCRIPTION: Configuration for Guard to watch specific directories for code changes and restart the Hanami server automatically. Watches config, lib, app, and slices directories using regular expressions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/code-reloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Guardfile\n\ngroup :server do\n  guard \"puma\", port: ENV[\"HANAMI_PORT\"] || 2300 do\n    watch(%r{config/*})\n    watch(%r{lib/*})\n    watch(%r{app/*})\n    watch(%r{slices/*})\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Base Part Class in Ruby for Hanami Views\nDESCRIPTION: This snippet shows how to create a base part class for an app or slice, which other part classes can inherit from. It inherits from Hanami::View::Part.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/part.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Part < Hanami::View::Part\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Books Table\nDESCRIPTION: Migration file defining the books table schema with title and author fields.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n\n      column :title,  String, null: false\n      column :author, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Settings in Hanami Console\nDESCRIPTION: Demonstrates how to access and use the defined settings in a Hanami console session.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ANALYTICS_ENABLED=true MAX_CART_ITEMS=100 bundle exec hanami console\n```\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].analytics_enabled\n=> true\n\nbookshelf[development]> Hanami.app[\"settings\"].max_cart_items\n=> 100\n```\n\n----------------------------------------\n\nTITLE: Defining Book Creation Route in Hanami Routing - Ruby\nDESCRIPTION: Adds a POST route for creating books to the Hanami application's routing. Demonstrates explicit route definition linking POST /books to books.create action. Used in RESTful resource setup.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n    get \"/books\", to: \"books.index\"\n    get \"/books/:id\", to: \"books.show\"\n    post \"/books\", to: \"books.create\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Router-Level Middleware in Hanami\nDESCRIPTION: Illustrates how to add middleware at the router level using the 'use' method in the routes configuration. This allows for more specific middleware application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    use Rack::Runtime\n\n    root { \"Hello from Hanami\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Asset URLs in Ruby\nDESCRIPTION: Uses the asset_url helper to generate a URL for a given asset source. This method looks up the relevant asset based on the app or slice in which it's called.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nasset_url(\"app.js\") # => \"/assets/app-LSLFPUMX.js\"\n```\n\n----------------------------------------\n\nTITLE: Exception Logging with Additional Context in Hanami\nDESCRIPTION: Shows exception logging with additional contextual information in the payload.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e, component: \"admin\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Operation Without DI\nDESCRIPTION: Example of SendWelcomeEmail operation with hard-coded dependencies, showing anti-pattern\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nrequire \"acme_email/client\"\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      def call(name:, email_address:)\n        email_client = AcmeEmail::Client.new\n\n        email_renderer = Renderers::WelcomeEmail.new\n\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Tags in Ruby\nDESCRIPTION: Demonstrates the use of javascript_tag helper to generate <script> tags for JavaScript assets or absolute URLs. It also shows how to handle multiple assets and add HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\njavascript_tag(\"app.js\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n\njavascript_tag(\"https://example.com/example.js\")\n# => <script src=\"https://example.com/example.js\" type=\"text/javascript\"></script>\n\njavascript_tag(\"app\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n\njavascript_tag(\"app\", \"dashboard/app\")\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n#    <script src=\"/assets/dashboard/app-LSLFPUMX.js\" type=\"text/javascript\"></script>\n\njavascript_tag(\"app\", async: true)\n# => <script src=\"/assets/app-LSLFPUMX.js\" type=\"text/javascript\" async=\"async\"></script>\n```\n\n----------------------------------------\n\nTITLE: Defining Primary Keys in Hanami Migrations\nDESCRIPTION: Shows two equivalent ways to define a primary key in a Hanami database migration: using the column method with primary_key option or using the primary_key shortcut method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/create-table.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ncolumn :id, Integer, null: false, primary_key: true\n\n# or just use this shortcut\n\nprimary_key :id\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Log Filters in Hanami\nDESCRIPTION: This snippet demonstrates how to add custom log filters to prevent sensitive information from being logged in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.logger.filters = config.logger.filters + [\"token\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Subresource Integrity in Hanami App (Ruby)\nDESCRIPTION: Configures Subresource Integrity for assets in the Hanami app, specifying SHA256 and SHA512 as the checksum algorithms to use for integrity verification.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/using-a-cdn.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.assets.subresource_integrity = [:sha256, :sha512]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Size Validation in Hanami\nDESCRIPTION: Demonstrates size validation for exact values and ranges.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:two_factor_auth_code) { size?(6) }     # exact\nrequired(:password)             { size?(8..32) } # range\n```\n\n----------------------------------------\n\nTITLE: Accessing Rack Environment in Hanami Action\nDESCRIPTION: Demonstrates how to access the raw Rack environment data within a Hanami action using the request.env method. This allows developers to retrieve low-level request information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        def handle(request, response)\n          request.env\n\n          request.env[\"REQUEST_METHOD\"] #=> GET\n          request.env[\"PATH_INFO\"] #=> /books/1\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Selecting Specific Columns in Hanami Repository (Ruby)\nDESCRIPTION: Demonstrates how to select a subset of columns from the database using the select method in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  def all_with_name\n    users.select(:id, :name)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Hanami App Container in Console\nDESCRIPTION: Demonstrates how to boot the Hanami application and inspect the registered component keys in the app container using the Hanami console.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> Hanami.app.boot\n=> Bookshelf::App\n\nbookshelf[development]> Hanami.app.keys\n=> [\"notifications\",\n \"settings\",\n \"routes\",\n \"inflector\",\n \"logger\",\n \"rack.monitor\",\n \"operations.send_welcome_email\",\n \"renderers.welcome_email\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Mailer Structure in Hanami\nDESCRIPTION: Shows the standard structure of a Hanami mailer class. The mailer is defined as a Ruby class under the Mailers namespace and includes the Hanami::Mailer module to provide email delivery functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/mailers/welcome.rb\nmodule Mailers\n  class Welcome\n    include Hanami::Mailer\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Hanami Console\nDESCRIPTION: This Ruby code snippet shows how to access environment variables set in .env files within the Hanami console, demonstrating the retrieval of database URL and analytics settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[test]> Hanami.app[\"settings\"].database_url\n=> \"postgres://localhost:5432/bookshelf_test\"\n\nbookshelf[test]> Hanami.app[\"settings\"].analytics_enabled\n=> false\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Reloading in Hanami Server\nDESCRIPTION: Command to start the Hanami server with code reloading disabled, which is necessary when using debugging tools like byebug, debug, or pry.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/server.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server --no-code-reloading\n```\n\n----------------------------------------\n\nTITLE: Hanami Template Examples\nDESCRIPTION: Examples of ERB templates used in Hanami views, showing basic HTML structure and data rendering\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n<h1>Bookshelf::Views::Home::Show</h1>\n```\n\nLANGUAGE: text\nCODE:\n```\n<h1>Welcome to Bookshelf</h1>\n```\n\nLANGUAGE: text\nCODE:\n```\n<h1>What's on the Bookshelf</h1>\n<ul>\n  <% books.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n```\n\nLANGUAGE: text\nCODE:\n```\n<h1>What's on the Bookshelf</h1>\n<ul>\n  <% books.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n\n<h2>Don't miss these best selling titles</h2>\n<ul>\n  <% best_sellers.each do |book| %>\n    <li><%= book.title %></li>\n  <% end %>\n</ul>\n\n```\n\n----------------------------------------\n\nTITLE: Testing Book Persistence in Interactor\nDESCRIPTION: Extended RSpec test that verifies the AddBook interactor not only creates a Book entity but also persists it to the database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/bookshelf/interactors/add_book_spec.rb\n\nRSpec.describe AddBook do\n  let(:interactor) { AddBook.new }\n  let(:attributes) { Hash[author: \"James Baldwin\", title: \"The Fire Next Time\"] }\n\n  context \"good input\" do\n    let(:result) { interactor.call(attributes) }\n\n    it \"succeeds\" do\n      expect(result.successful?).to be(true)\n    end\n\n    it \"creates a Book with correct title and author\" do\n      expect(result.book.title).to eq(\"The Fire Next Time\")\n      expect(result.book.author).to eq(\"James Baldwin\")\n    end\n\n    it \"persists the Book\" do\n      expect(result.book.id).to_not be_nil\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Mailer\nDESCRIPTION: Creates a mailer with HTML and text templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate mailer welcome\n```\n\n----------------------------------------\n\nTITLE: Using Format Number Helper in Ruby\nDESCRIPTION: Example of using the built-in format_number helper to format numbers into human-readable strings\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1234) # => \"1,234\"\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Test for Root Endpoint\nDESCRIPTION: This shell command runs the RSpec test for the root endpoint of the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/root_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Defining Root Route to an Action (Ruby)\nDESCRIPTION: Shows how to define a root route that invokes a specific action instead of returning a static string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Character Set in Hanami App\nDESCRIPTION: This example demonstrates how to configure a default character set for all actions in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.default_charset = \"koi8-r\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Route Generation in Hanami\nDESCRIPTION: Demonstrates how to configure a base URL for the application to use when generating full URLs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.base_url = \"https://bookshelf.example.com\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Entity Creation in Interactor\nDESCRIPTION: Updated AddBook interactor that exposes the book instance variable and initializes a new Book entity in the call method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/interactor'\n\nclass AddBook\n  include Hanami::Interactor\n\n  expose :book\n\n  def initialize\n    # set up the object\n  end\n\n  def call(book_attributes)\n    @book = Book.new(book_attributes)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Exposing Hardcoded Data in a Hanami View (Ruby)\nDESCRIPTION: Defines a `Bookshelf::Views::Books::Show` view class in Ruby. It utilizes the `expose` method with a block to define an exposure named `:book`. This exposure provides a hardcoded `Book` struct instance (containing a title and description) to its corresponding template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        Book = Struct.new(:title, :description, keyword_init: true)\n\n        expose :book do\n          Book.new(title: \"Pride and Prejudice\", description: \"The 1813 Jane Austen classic.\")\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: JavaScript Asset Helper Example in Hanami\nDESCRIPTION: Demonstrates how to use the javascript helper to generate script tags for both external and local JavaScript files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript 'https://code.jquery.com/jquery-2.1.1.min.js', 'application' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://code.jquery.com/jquery-2.1.1.min.js\" type=\"text/javascript\"></script>\n<script src=\"/assets/application.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Implementing SendWelcomeEmail Operation without Dependency Injection\nDESCRIPTION: Demonstrates an implementation of the SendWelcomeEmail operation without using dependency injection, showing hard-coded dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nrequire \"acme_email/client\"\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      def call(name:, email_address:)\n        email_client = AcmeEmail::Client.new\n\n        email_renderer = Renderers::WelcomeEmail.new\n\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Log Filters in Hanami\nDESCRIPTION: Demonstrates how to add additional keys to the logger's filter list to prevent sensitive information from being logged.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.logger.filters = config.logger.filters + [\"token\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running database migrations\nDESCRIPTION: Shell commands to run the migrations on both development and test databases.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake db:migrate\n$ HANAMI_ENV=test bundle exec rake db:migrate\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Development Server with bundle exec (Shell)\nDESCRIPTION: This snippet launches the development environment for the newly generated Hanami app using 'bundle exec hanami dev', which starts both the web server and assets watcher via Foreman. It requires that dependencies be installed (via Bundler). The snippet is followed by sample output showing server and assets watcher startup, logs, and network addresses for local access.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ bundle exec hanami dev\\n```\n```\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n08:14:33 web.1    | started with pid 56242\\n08:14:33 assets.1 | started with pid 56243\\n08:14:34 assets.1 | [gsg_app] [watch] build finished, watching for changes...\\n08:14:34 web.1    | 08:14:34 - INFO - Using Guardfile at /Users/tim/Source/scratch/gsg_app/Guardfile.\\n08:14:34 web.1    | 08:14:34 - INFO - Puma starting on port 2300 in development environment.\\n08:14:34 web.1    | 08:14:34 - INFO - Guard is now watching at '/Users/tim/Source/scratch/gsg_app'\\n08:14:35 web.1    | Puma starting in single mode...\\n08:14:35 web.1    | * Puma version: 6.4.2 (ruby 3.3.0-p0) (\"The Eagle of Durango\")\\n08:14:35 web.1    | *  Min threads: 5\\n08:14:35 web.1    | *  Max threads: 5\\n08:14:35 web.1    | *  Environment: development\\n08:14:35 web.1    | *          PID: 56250\\n08:14:35 web.1    | * Listening on http://0.0.0.0:2300\\n08:14:35 web.1    | * Starting control server on http://127.0.0.1:9293\\n08:14:35 web.1    | * Starting control server on http://[::1]:9293\\n08:14:35 web.1    | Use Ctrl-C to stop\\n```\n```\n\n----------------------------------------\n\nTITLE: Building a Scope Instance with Locals in a Hanami Template - Ruby\nDESCRIPTION: Shows how to supply additional local variables to a scope instance by passing a hash of locals as the second argument to the `scope` method. This enables passing contextual data (e.g., objects like `audio_file`) for use within the scope or its templates. Proper matching of names and existence of required scope classes are assumed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nscope(:media_player, item: audio_file)\n```\n\n----------------------------------------\n\nTITLE: Creating HTML-safe String in Ruby\nDESCRIPTION: This snippet demonstrates how to create an HTML-safe string in Ruby using the html_safe method. This is useful when writing helpers or other code that provides strings to templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/templates-and-partials.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ndef my_helper\n  \"<p>This is safe</p>\".html_safe\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing View Context (Inflector) in a Helper - Ruby\nDESCRIPTION: Shows a custom helper method accessing the Hanami view context using _context. Specifically, it demonstrates using the inflector to pluralize a string. Requires that the helper method executes in an environment where _context provides access to Hanami context features.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef my_helper\n  _context.inflector.pluralize(\"greeting\")\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Action Generation\nDESCRIPTION: Shows how to access additional help and options for the 'generate action' command in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action --help\n```\n\n----------------------------------------\n\nTITLE: Using View Input in Hanami View Exposure (Ruby)\nDESCRIPTION: This snippet demonstrates how to use input passed to a Hanami view within an exposure. It uses a 'book_repo' dependency to fetch a book by its id.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Show < Bookshelf::View\n        include Deps[\"repositories.book_repo\"]\n\n        expose :book do |id:|\n          book_repo.get!(id)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Home Controller with Index Action\nDESCRIPTION: Home controller implementation with an index action that handles requests to the root path. This is a basic controller with an empty call method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/home/index.rb\nmodule Web\n  module Controllers\n    module Home\n      class Index\n        include Web::Action\n\n        def call(params)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Helper Methods in Hanami Action Ruby\nDESCRIPTION: This snippet illustrates how to access helper methods from a Hanami action. It uses the 'format_date' helper to format a date before passing it to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/articles/create.rb\nmodule Articles\n  class Create < Action\n    def handle(request, response)\n      # ...\n      response[:formatted_date] = format_date(Date.today)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Exception Logging in Hanami\nDESCRIPTION: Demonstrates how to log exceptions with error handling in Hanami logger.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbegin\n  raise \"OH NOEZ!\"\nrescue => e\n  app[\"logger\"].error(e)\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Development Server\nDESCRIPTION: Command to start the Hanami development server using bundler.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami dev\n```\n\n----------------------------------------\n\nTITLE: Basic Info Logging in Ruby with Hanami Logger\nDESCRIPTION: Demonstrates basic INFO level logging with a simple text message using Hanami logger.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Implementing books table migration\nDESCRIPTION: ROM SQL migration to create a books table with id, title, and author columns. The primary key is automatically managed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20221113050928_create_books.rb\n\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :text, null: false\n      column :author, :text, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Strict Data Types in Hanami\nDESCRIPTION: Provides a list of strict data types in Hanami's Types module. These types perform primitive type checks to ensure data integrity.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/data-types.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nTypes::Strict::Nil\nTypes::Strict::String\nTypes::Strict::Symbol\nTypes::Strict::Int\nTypes::Strict::Float\nTypes::Strict::Decimal\nTypes::Strict::Class\nTypes::Strict::Bool\nTypes::Strict::True\nTypes::Strict::False\nTypes::Strict::Date\nTypes::Strict::DateTime\nTypes::Strict::Time\nTypes::Strict::Array\nTypes::Strict::Hash\n```\n\n----------------------------------------\n\nTITLE: Route Helper Usage in Views\nDESCRIPTION: Examples of using routing helpers in view templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n<%= routes.path(:greeting) %>\n<%= routes.url(:greeting) %>\n```\n\n----------------------------------------\n\nTITLE: Nesting Singular RESTful Resource within Plural Resource in Hanami\nDESCRIPTION: This example shows how to nest a singular RESTful resource within a plural resource, such as a book cover within books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books do\n  resource :cover\nend\n```\n\n----------------------------------------\n\nTITLE: Formatted Count Output\nDESCRIPTION: Shows the HTML output of the formatted count.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span>1,000,000</span>\n```\n\n----------------------------------------\n\nTITLE: Using a View-Specific Helper in Hanami Template\nDESCRIPTION: This example shows how to use a view-specific helper method in a Hanami template. The 'emphasis' method is called to wrap text in HTML emphasis tags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/templates/books/index.html.erb\n<%= emphasis(\"Hello World\") %>\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in Hanami Repository (Ruby)\nDESCRIPTION: Demonstrates how to limit the number of records fetched from the database using the limit method in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  def last_created(number)\n    users.order { created_at.desc }.limit(number)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Project-Level Hanami Commands\nDESCRIPTION: Lists available commands when executed within a Hanami project, including console, generate, middleware, routes, and server commands.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami --help\n\nCommands:\n  hanami console                              # Start app console (REPL)\n  hanami generate [SUBCOMMAND]\n  hanami middleware                           # Print app Rack middleware stack\n  hanami routes                               # Print app routes\n  hanami server                               # Start Hanami app server\n  hanami version                              # Print Hanami app version\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Settings for Bookshelf App\nDESCRIPTION: This snippet shows how to define settings for a Hanami application, including a required database_url setting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n\n    setting :database_url, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Stylesheet Links in Ruby\nDESCRIPTION: Shows how to use the stylesheet_tag helper to create <link> tags for CSS stylesheets. It covers handling of asset paths, absolute URLs, multiple stylesheets, and adding HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_tag(\"app.css\")\n# => <link href=\"/assets/app-GVDAEYEC.css\" type=\"text/css\" rel=\"stylesheet\">\n\nstylesheet_tag(\"https://example.com/stylesheet.css\")\n# => <link href=\"https://example.com/stylesheet.css\" type=\"text/css\" rel=\"stylesheet\">\n\nstylesheet_tag(\"app\")\n# => <link href=\"/assets/app-GVDAEYEC.css\" type=\"text/css\" rel=\"stylesheet\">\n\nstylesheet_tag(\"app\", \"dashboard/app\")\n#   # <link href=\"/assets/application.css\" type=\"text/css\" rel=\"stylesheet\">\n#   # <link href=\"/assets/dashboard.css\" type=\"text/css\" rel=\"stylesheet\">\n\nstylesheet_tag(\"https://example.com/print.css\", media: \"print\")\n# => <link href=\"https://example.com/stylesheet.css\" type=\"text/css\" rel=\"stylesheet\" media=\"print\">\n```\n\n----------------------------------------\n\nTITLE: Books Relation with Pagination\nDESCRIPTION: Configuration of the books relation to support pagination with a default page size\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_36\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Books < Bookshelf::DB::Relation\n      schema :books, infer: true\n\n      use :pagination\n      per_page 5\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Subresource Integrity for Hanami Assets in Ruby\nDESCRIPTION: This snippet shows how to enable Subresource Integrity for assets in a Hanami application. It configures the app to use SHA-256 and SHA-512 checksums for integrity verification of assets served from a CDN.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/using-a-cdn.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment :production do\n      config.assets.subresource_integrity = [:sha256, :sha512]\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Improved Template Usage\nDESCRIPTION: Shows the cleaner template implementation using the explicit helper method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= downloads_count %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Sequel Extensions in Hanami\nDESCRIPTION: Shows how to configure Sequel plugins in the Hanami environment configuration using ROM gateway.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n\nHanami.configure do\n  model do\n    gateway do |g|\n      g.connection.extension(:connection_validator)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Printing Hanami Version using CLI Command\nDESCRIPTION: This command prints the version of Hanami framework used by the application. It is executed using the bundle exec command to ensure the correct version is reported from the project's dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/version.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami version\nv2.1.0\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hanami CLI Command Plugin\nDESCRIPTION: Shows how to implement a custom CLI command in a fictional 'hanami-webpack' gem. The example creates a 'webpack setup' command by defining a command class and registering it with Hanami::CLI.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/plugins.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/hanami/webpack.rb\nmodule Hanami\n  module Webpack\n    module CLI\n      class Setup < Hanami::CLI::Command\n        def call(*)\n          # setup code goes here...\n        end\n      end\n    end\n  end\nend\n\nHanami::CLI.register \"webpack setup\", Hanami::Webpack::CLI::Setup\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Hanami Interactor Class\nDESCRIPTION: Initial implementation of the AddBook interactor class that includes Hanami::Interactor with empty initialize and call methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'hanami/interactor'\n\nclass AddBook\n  include Hanami::Interactor\n\n  def initialize\n    # set up the object\n  end\n\n  def call(book_attributes)\n    # get it done\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index API Test\nDESCRIPTION: RSpec test for the books index endpoint that verifies JSON response format and content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/index_spec.rb\n\nRSpec.describe \"GET /books\", type: :request do\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"app/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq([\n      { \"title\" => \"Test Driven Development\" },\n      { \"title\" => \"Practical Object-Oriented Design in Ruby\" }\n    ])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing New Book Form Template in Hanami\nDESCRIPTION: ERB template for the form to add a new book. It uses Hanami's form helpers to create the HTML form.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_25\n\nLANGUAGE: erb\nCODE:\n```\n<h2>Add book</h2>\n\n<%=\n  form_for :book, '/books' do\n    div class: 'input' do\n      label      :title\n      text_field :title\n    end\n\n    div class: 'input' do\n      label      :author\n      text_field :author\n    end\n\n    div class: 'controls' do\n      submit 'Create Book'\n    end\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Exploring Hanami Core Library Structure\nDESCRIPTION: Shows the directory structure of the lib/ folder in a new Hanami project named 'bookshelf', demonstrating the organization of entities, mailers, and repositories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ tree lib\nlib\n├── bookshelf\n│   ├── entities\n│   ├── mailers\n│   │   └── templates\n│   └── repositories\n└── bookshelf.rb\n\n5 directories, 1 file\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Action Handle Method Signature (Ruby)\nDESCRIPTION: This snippet illustrates the standard signature for the `handle` method within a Hanami action class. This method receives `request` (representing the incoming HTTP request) and `response` (representing the outgoing HTTP response) objects as arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(request, response)\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Base View Class for Hanami 2.1.0\nDESCRIPTION: Defines a base View class for Hanami 2.1.0 applications, extending Hanami::View.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n# frozen_string_literal: true\n\nrequire \"hanami/view\"\n\nmodule Bookshelf\n  class View < Hanami::View\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Video Tags in Ruby\nDESCRIPTION: Demonstrates the use of video_tag helper to generate <video> tags for video assets or absolute URLs. It supports adding HTML attributes and nested content like tracks or fallback messages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nvideo_tag(\"movie.mp4\")\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\"></video>\n\nvideo_tag(\"https://example.com/movie.mp4\")\n# => <video src=\"https://example.com/movie.mp4\"></video>\n\nvideo_tag(\"movie.mp4\", autoplay: true, controls: true)\n# => <video autoplay=\"autoplay\" controls=\"controls\" src=\"/assets/movie-DJHI6WQI.mp4\"></video>\n\nvideo_tag(\"movie.mp4\") do\n  \"Your browser does not support the video tag.\"\nend\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\">\n#      Your browser does not support the video tag.\n#    </video>\n\nvideo_tag(\"movie.mp4\") do\n  tag.track(kind: \"captions\", src: asset_url(\"movie.en.vtt\"), srclang: \"en\", label: \"English\")\nend\n# => <video src=\"/assets/movie-DJHI6WQI.mp4\">\n#      <track kind=\"captions\" src=\"/assets/movie.en-98EA6E4F.vtt\" srclang=\"en\" label=\"English\">\n#    </video>\n```\n\n----------------------------------------\n\nTITLE: Running the books index spec\nDESCRIPTION: Shell command to run the test for the books index endpoint, showing successful test execution.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/index_spec.rb\n\nGET /books\n  returns a list of books\n\nFinished in 0.05765 seconds (files took 1.36 seconds to load)\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Accessing Exposed Variables in Hanami Views\nDESCRIPTION: This snippet shows how to access exposed variables in a Hanami view. The view can directly use the 'greeting' variable that was exposed by the controller action, but cannot access the unexposed 'foo' variable.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/exposures.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module View\n    module Dashboard\n      class Index\n        include Web::View\n\n        def welcome_message\n          greeting + \" and welcome\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Including Nested Helper Modules in Hanami\nDESCRIPTION: Example of organizing helpers into nested modules and including them in the main helpers module\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Helpers\n      # Defined in app/views/helpers/formatting_helper.rb\n      include FormattingHelper\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Exposures in Hanami Actions\nDESCRIPTION: An example of a Hanami action that uses exposures to make instance variables available outside the action. This allows testing the internal state of the action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/users/show.rb\nmodule Web\n  module Controllers\n    module Users\n      class Show\n        include Web::Action\n        expose :user, :foo\n\n        def call(params)\n          @user = UserRepository.new.find(params[:id])\n          @foo  = 'bar'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index Action in Ruby\nDESCRIPTION: This code implements the books index action, returning a JSON response with a static list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(*, response)\n          books = [\n            {title: \"Test Driven Development\"},\n            {title: \"Practical Object-Oriented Design in Ruby\"}\n          ]\n\n          response.format = :json\n          response.body = books.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Hanami Actions\nDESCRIPTION: This snippet shows how to read cookies sent by the browser in a Hanami action. The request object provides access to the cookies hash where cookie values can be retrieved.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.cookies[\"tasty_cookie\"] # => \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Route Scopes in Hanami\nDESCRIPTION: Demonstrates how to use scopes to group routes under a common path prefix.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    scope \"about\" do\n      get \"/contact-us\", to: \"content.contact_us\" # => /about/contact-us\n      get \"/faq\", to: \"content.faq\" # => /about/faq\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Helpers in Hanami Scopes\nDESCRIPTION: Example of using helpers directly as methods within a scope\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef post_word_count\n  # Presuming a `post` local\n  format_number(post.body_text.split)\nend\n```\n\n----------------------------------------\n\nTITLE: Logging Structured Data without Message in Ruby using Hanami Logger\nDESCRIPTION: Demonstrates logging structured data without a text message. This is useful when all relevant information can be captured in the data payload.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info text: \"Hello World\", component: \"admin\"\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for Hanami 2.1.0 Assets\nDESCRIPTION: Defines a package.json file for managing frontend dependencies in Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"rc3fresh\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"hanami-assets\": \"^2.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Base URL for Hanami Application (Ruby)\nDESCRIPTION: Demonstrates how to set a base URL for the application in the configuration file, which affects the generated URLs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.base_url = \"https://bookshelf.example.com\"\n  end\nend\n\nHanami.app[\"routes\"].url(:book, id: 1)\n=> #<URI::HTTP https://bookshelf.example.com/books/1>\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Repository Class\nDESCRIPTION: Basic repository class definition inheriting from Hanami::Repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass BookRepository < Hanami::Repository\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Entity Instances to Hanami Entity Constructor\nDESCRIPTION: This example shows how to pass concrete instances of related entities when instantiating a Hanami entity. The comments attribute accepts a collection of Comment entities.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.new(comments: [Comment.new(text: \"cool\")])\nuser.comments\n  # => [#<Comment:0x007f966be20c58 @attributes={:text=>\"cool\"}>]\n```\n\n----------------------------------------\n\nTITLE: Assets Component Usage in Ruby Console\nDESCRIPTION: Shows how to access and use the assets component in a Hanami application through the Ruby console.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n$ bundle exec hanami console\n\nbookshelf[development]> Hanami.app[\"assets\"][\"app.js\"]\n# => #<Hanami::Assets::Asset:0x0000000121882918\n#  @base_url=#<Hanami::Assets::BaseUrl:0x00000001215b5de8 @url=\"\">,\n#  @path=\"/assets/app.js\",\n#  @sri=nil>\n\nbookshelf[development]> app[\"assets\"][\"app.js\"].url\n# => \"/assets/app.js\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Operation With Manual DI\nDESCRIPTION: Example of SendWelcomeEmail operation using manual dependency injection through constructor\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nrequire \"acme_email/client\"\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      attr_reader :email_client\n      attr_reader :email_renderer\n\n      def initialize(email_client:, email_renderer:)\n        @email_client = email_client\n        @email_renderer = email_renderer\n      end\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Alternative Route Helper Syntax\nDESCRIPTION: Shows alternative method-style syntax for route helpers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n<%= routes.greeting_path %>\n<%= routes.greeting_url %>\n```\n\n----------------------------------------\n\nTITLE: Including Nested Helper Modules in Hanami App - Ruby\nDESCRIPTION: Shows how to organize helpers with nested modules. An additional module (e.g., FormattingHelper) is defined elsewhere (such as app/views/helpers/formatting_helper.rb) and is included in the main Helpers module. This makes all included helper methods available throughout views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Helpers\n      # Defined in app/views/helpers/formatting_helper.rb\n      include FormattingHelper\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing Hanami Middleware Stack\nDESCRIPTION: Shows the command to inspect the current Rack middleware stack in a Hanami application\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami CLI Help Commands\nDESCRIPTION: Shows the basic Hanami CLI commands available after initial gem installation, including new app generation and version checking.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami --help\n\nCommands:\n  hanami new APP         # Generate a new Hanami app\n  hanami version         # Hanami version\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database URL\nDESCRIPTION: Sets up the database connection URL for the test environment using environment variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\n# .env.test\nDATABASE_URL=\"database_type://username:password@localhost/bookshelf_test\"\n```\n\n----------------------------------------\n\nTITLE: Basic Validation Rule in Ruby using Hanami\nDESCRIPTION: Demonstrates a basic validation rule that checks if a name field is filled, is a string, and has a length between 3-64 characters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:name) { filled? & str? & size? (3..64) }\n```\n\n----------------------------------------\n\nTITLE: Template Usage of Formatted Count\nDESCRIPTION: Shows how to use the formatted count in an ERB template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n# app/templates/books/index.html.erb\n\n<%= books.formatted_count %>\n```\n\n----------------------------------------\n\nTITLE: Hanami Form Helper Implementation\nDESCRIPTION: Proper implementation of a form in Hanami using a single output block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  form_for :book, routes.books_path do\n    text_field :title\n\n    submit 'Create'\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Using View Context in Custom Helpers\nDESCRIPTION: Examples of accessing the view context within custom helpers for inflection and request information\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\ndef my_helper\n  _context.inflector.pluralize(\"greeting\")\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\ndef current_path?(path)\n  path == _context.request.fullpath\nend\n```\n\n----------------------------------------\n\nTITLE: Third-Party Asset Integration Example\nDESCRIPTION: Demonstrates how to integrate third-party assets through a Ruby gem into Hanami applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/hanami/emberjs.rb\nrequire 'hanami/assets'\n\nmodule Hanami\n  module Emberjs\n    require 'hanami/emberjs/version'\n  end\nend\n\nHanami::Assets.sources << __dir__ + '/emberjs/source'\n```\n\n----------------------------------------\n\nTITLE: Creating Home Index Template\nDESCRIPTION: ERB template for the home index view that displays a heading with 'Bookshelf' text, which will satisfy the requirements of the feature test.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_9\n\nLANGUAGE: erb\nCODE:\n```\n# apps/web/templates/home/index.html.erb\n<h1>Bookshelf</h1>\n```\n\n----------------------------------------\n\nTITLE: Disabling Hanami Helpers Configuration\nDESCRIPTION: Shows how to disable Hanami helpers by removing the required lines from the application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nrequire 'hanami/helpers' # REMOVE THIS LINE\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n\n      view.prepare do\n        include Hanami::Helpers # AND THIS ONE\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Proc Callbacks in Hanami Action\nDESCRIPTION: This example shows how to implement a callback using a proc instead of a method. The proc is used to validate parameters before the main handle method is executed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before { |request, response| halt 422, request.params.errors.to_h unless request.params.valid? }\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Container Keys in Hanami Console\nDESCRIPTION: Console commands demonstrating how to inspect registered container keys and access components\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> Hanami.app.boot\n=> Bookshelf::App\n\nbookshelf[development]> Hanami.app.keys\n=> [\"notifications\",\n \"settings\",\n \"routes\",\n \"inflector\",\n \"logger\",\n \"rack.monitor\",\n \"operations.send_welcome_email\",\n \"renderers.welcome_email\"]\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Hanami CLI Command\nDESCRIPTION: Demonstrates how to execute a custom Hanami CLI command that has been added through a plugin. The example shows the command for the previously defined 'webpack setup' functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/plugins.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami webpack setup\n```\n\n----------------------------------------\n\nTITLE: Nesting Singular RESTful Resources in Hanami\nDESCRIPTION: This example shows how to nest singular RESTful resources, creating a hierarchy of routes for related singular resources like account and avatar.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account do\n  resource :avatar\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing a CDN Purge Operation in CDN Slice\nDESCRIPTION: Shows an example of a CDN purge operation in a dedicated CDN slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/book_covers/purge.rb\n\nmodule CDN\n  module BookCovers\n    class Purge\n      def call(book_cover_path)\n        # \"Purging logic here!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Inflector in Hanami View Template\nDESCRIPTION: Demonstrates how to use the inflector method from the context object implicitly in a Hanami view template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n<%= inflector.pluralize(\"koala\") %>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Basic Story Data in Hanami\nDESCRIPTION: Ruby code showing how non-aggregated queries do not load associated comments data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nstory = stories.find(story.id)\n  # => #<Story:0x00007ffe71ae2cd0 @attributes={:id=>1, :user_id=>1, :text=>\"Hello folks\", :created_at=>2017-10-24 09:09:59 UTC, :updated_at=>2017-10-24 09:09:59 UTC}>\n\nstory.comments\n  # => nil\n```\n\n----------------------------------------\n\nTITLE: HTML Script Tag with Subresource Integrity Attributes\nDESCRIPTION: This HTML snippet demonstrates the output of the javascript_tag helper when Subresource Integrity is enabled. It includes integrity and crossorigin attributes for secure asset loading from a CDN.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/using-a-cdn.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"/assets/app-LSLFPUMX.js\"\n  type=\"text/javascript\"\n  integrity=\"sha256-WB2pRuy8LdgAZ0aiFxLN8DdfRjKJTc4P4xuEw31iilM= sha512-4gegSER1uqxBvmlb/O9CJypUpRWR49SniwUjOcK2jifCRjFptwGKplFWGlGJ1yms+nSlkjpNCS/Lk9GoKI1Kew==\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Models for Many-to-Many Association\nDESCRIPTION: Shell commands to generate the User, Story and Comment models necessary for implementing a has-many-through association in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model user\n      create  lib/bookshelf/entities/user.rb\n      create  lib/bookshelf/repositories/user_repository.rb\n      create  db/migrations/20171024083639_create_users.rb\n      create  spec/bookshelf/entities/user_spec.rb\n      create  spec/bookshelf/repositories/user_repository_spec.rb\n\n$ bundle exec hanami generate model story\n      create  lib/bookshelf/entities/story.rb\n      create  lib/bookshelf/repositories/story_repository.rb\n      create  db/migrations/20171024085712_create_stories.rb\n      create  spec/bookshelf/entities/story_spec.rb\n      create  spec/bookshelf/repositories/story_repository_spec.rb\n\n$ bundle exec hanami generate model comment\n      create  lib/bookshelf/entities/comment.rb\n      create  lib/bookshelf/repositories/comment_repository.rb\n      create  db/migrations/20171024085858_create_comments.rb\n      create  spec/bookshelf/entities/comment_spec.rb\n      create  spec/bookshelf/repositories/comment_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Testing View Exposures with RSpec\nDESCRIPTION: Example showing how to test view exposures directly using the Hanami::View::Rendered object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndescribe \"exposures\" do\n  subject(:rendered) { view.call(current_user: current_user, id: 1) }\n\n  let(:user) { double(:user, name: \"Amy\", id: 1) }\n\n  before do\n    allow(users_repo).to receive(:by_id).with(1).and_return(user)\n  end\n\n  it \"exposes current_user\" do\n    expect(rendered[:current_user].name).to eq(current_user.name)\n  end\n\n  it \"exposes user\" do\n    expect(rendered[:user].id).to eq(user.id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: URL Sanitization in Ruby with Hanami\nDESCRIPTION: Demonstrates the sanitize_url helper which validates and filters URLs based on permitted schemes. By default supports http, https, and mailto schemes, with the ability to specify custom allowed schemes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/string-escaping.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nsanitize_url(\"https://hanamirb.org\")\n# => \"http://hanamirb.org\"\n\nsanitize_url(\"javascript:alert('xss')\")\n# => \"\"\n\nsanitize_url(\"gemini://gemini.circumlunar.space/\", %w[http https gemini])\n# => \"gemini://gemini.circumlunar.space/\"\n```\n\n----------------------------------------\n\nTITLE: Initial ERB Template for Home Show View\nDESCRIPTION: This is the default content of the ERB template (`app/templates/home/show.html.erb`) generated for the `Bookshelf::Views::Home::Show` view. It displays the fully qualified name of the view class within an `<h1>` tag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n<h1>Bookshelf::Views::Home::Show</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating a Request Spec for Books Index in Ruby\nDESCRIPTION: This code snippet creates a request spec for the books index endpoint, expecting a successful JSON response with a list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/books/index_spec.rb\n\nRSpec.describe \"GET /books\", type: :request do\n  it \"returns a list of books\" do\n    get \"/books\"\n\n    expect(last_response).to be_successful\n    expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq([\n      { \"title\" => \"Test Driven Development\" },\n      { \"title\" => \"Practical Object-Oriented Design in Ruby\" }\n    ])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Zeitwerk NameError Example in Shell for Hanami Autoloading\nDESCRIPTION: This shell snippet shows the error message that Zeitwerk would raise if there's a mismatch between the file name and the defined constant, emphasizing the importance of following Zeitwerk's file structure conventions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nZeitwerk::NameError: expected file bookshelf/app/entities/book.rb to define constant Bookshelf::Entities::Book, but didn't\n```\n\n----------------------------------------\n\nTITLE: Defining Session Secret Settings\nDESCRIPTION: Setting up the session secret configuration in Hanami settings file using Types::String constructor.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/sessions.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :session_secret, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hello World Component Definition\nDESCRIPTION: Example component definition showing a basic Hanami component structure with a simple method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/booting.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/hello_world.rb\n\nmodule Bookshelf\n  class HelloWorld\n    def say_hello\n      \"Hello world!\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating an ERB Template for Hanami View\nDESCRIPTION: This snippet shows how to create an ERB template file for a Hanami view. It includes basic HTML structure and ERB tags for dynamic content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n# app/templates/books/index.html.erb\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Books</title>\n  </head>\n  <body>\n    <h1>Books</h1>\n    <!-- Add more content here -->\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Log Stream in Hanami Ruby\nDESCRIPTION: This snippet shows how to customize logger settings for a specific environment, in this case, `:development`. Using the `environment` block within the `Hanami::App` class in `config/app.rb`, it sets the log output stream (`config.logger.stream`) to a file named `development.log` located in the application's `log` directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.stream = root.join(\"log\").join(\"development.log\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic Number Formatting in Hanami Templates\nDESCRIPTION: Shows basic usage of format_number helper in templates to format integers and floats with default settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n<span><%= format_number(1_000_000) %></span>\n<span><%= format_number(1_000_000.10) %></span>\n```\n\n----------------------------------------\n\nTITLE: Creating New Hanami Applications with Shell Commands\nDESCRIPTION: Demonstrates how to use the 'hanami new' command to generate new Hanami applications. The command creates a new directory with the application name and sets up the project structure, including gem bundling and NPM bundling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/new.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf # generates a new Bookshelf application in ./bookshelf\n$ hanami new my_app # generates a new MyApp application in ./my_app\n```\n\n----------------------------------------\n\nTITLE: Running Failing RSpec Spec for Unmatched Hanami Route - Shell\nDESCRIPTION: This shell snippet shows the invocation of RSpec to run the failing request spec because Hanami does not yet have the necessary route or action defined. It demonstrates expected error messages, and is intended to establish the failing state before implementing the endpoint.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/show_spec.rb\n\nGET /books/:id\n  when a book matches the given id\n    renders the book (FAILED - 1)\n  when no book matches the given id\n    returns not found (FAILED - 2)\n\nFailures:\n\n  1) GET /books/:id when a book matches the given id renders the book\n     Failure/Error: expect(last_response).to be_successful\n       expected `#<Rack::MockResponse:0x000000010c9f5788 @original_headers={\"Content-Length\"=>\"9\"}, @errors=\"\", @cooki...ms/rack-2.2.4/lib/rack/response.rb:287>, @block=nil, @body=[\"Not Found\"], @buffered=true, @length=9>.successful?` to be truthy, got false\n     # ./spec/requests/books/show_spec.rb:14:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:15:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:14:in `block (2 levels) in <top (required)>'\n\n  2) GET /books/:id when no book matches the given id returns not found\n     Failure/Error: expect(last_response.content_type).to eq(\"application/json; charset=utf-8\")\n\n       expected: \"application/json; charset=utf-8\"\n            got: nil\n\n       (compared using ==)\n     # ./spec/requests/books/show_spec.rb:30:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:15:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:14:in `block (2 levels) in <top (required)>'\n\nFinished in 0.05427 seconds (files took 0.88631 seconds to load)\n2 examples, 2 failures\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Books Table with Foreign Key in Hanami\nDESCRIPTION: Ruby migration to create the books table with a foreign key reference to authors and additional columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/belongs-to.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024081617_create_books.rb\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n\n      foreign_key :author_id, :authors, on_delete: :cascade, null: false\n\n      column :title,      String,   null: false\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for UUID Column in PostgreSQL with Hanami\nDESCRIPTION: This migration creates a 'projects' table with a UUID column. It also adds and removes the 'uuid-ossp' extension for UUID support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20161113184557_create_projects.rb\nHanami::Model.migration do\n  up do\n    execute 'CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"'\n\n    create_table :projects do\n      primary_key :id\n      column :name,  String\n      column :token, 'uuid'\n    end\n  end\n\n  down do\n    drop_table :projects\n    execute 'DROP EXTENSION IF EXISTS \"uuid-ossp\"'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Conditional Profile Rendering in ERB Template (SQL/ERB)\nDESCRIPTION: A template snippet using ERB syntax for rendering profile pages. Shows different messages depending on whether the current_user and user are the same. Inputs are current_user and user objects, both expected to respond to id (and user to name). Outputs are HTML paragraphs with personalized content. Requires ERB-capable view rendering (such as Hanami), and that both variables are made available to the template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<%# app/templates/views/profile/show.html.erb %>\n\n<% if current_user.id == user.id %>\n  <p class=\"text-base\">This is your profile. You can edit your data.</p>\n<% else %>\n  <p class=\"text-base\">This is the profile of <%= user.name %>. You can admire it.</p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Using Tag Builders in Hanami View Templates\nDESCRIPTION: Shows how to use tag builders within Hanami view templates, demonstrating the ability to mix template content with nested tag builders.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/html.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<%= tag.div(id: \"el\") do %>\n  <p>Template content can be mixed in.</p>\n  <%= tag.p(\"Also nested tag builders.\") %>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: View With Optional JavaScript Content\nDESCRIPTION: View implementation that includes optional JavaScript content through a custom method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Show\n        include Web::View\n\n        def javascript\n          raw %(<script src=\"/path/to/script.js\"></script>)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Hanami (Ruby)\nDESCRIPTION: This snippet shows how to define a route in Hanami's routes configuration file. It maps a GET request to '/dashboard' to the 'dashboard#index' action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/basic-usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nget '/dashboard', to: 'dashboard#index'\n```\n\n----------------------------------------\n\nTITLE: Type Safety Validation in Hanami\nDESCRIPTION: Shows how to implement type safety checks using the type? predicate for ensuring input types before validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { type?(Integer) & gteq?(18) }\n```\n\n----------------------------------------\n\nTITLE: Error Logging in Ruby with Hanami Logger\nDESCRIPTION: Shows how to log an error message using Hanami logger's error level.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].error \"Something's wrong\"\n```\n\n----------------------------------------\n\nTITLE: Default JavaScript Entry Point\nDESCRIPTION: Shows the default JavaScript entry point file that imports the main CSS stylesheet in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../css/app.css\";\n```\n\n----------------------------------------\n\nTITLE: Customizing Logger Template with Colors in Hanami\nDESCRIPTION: This snippet demonstrates how to customize the text log template with custom colors for different parts of the log entry in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/logger/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n\n      config.logger.template = <<~TMPL\n        [<blue>%<progname>s</blue>] [%<severity>s] [<green>%<time>s</green>] %<message>s %<payload>s\n      TMPL\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output for Number Formatting\nDESCRIPTION: Shows the HTML output after number formatting is applied to both integer and float values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n  <span>1,000,000</span>\n  <span>1,000,000.00</span>\n```\n\n----------------------------------------\n\nTITLE: Preparing Hanami Database\nDESCRIPTION: Shell command to prepare the database after creating migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/belongs-to.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Disabling Cookies in Hanami Application\nDESCRIPTION: Shows how to disable cookies globally in a Hanami application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = nil\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Output\nDESCRIPTION: HTML output generated by the Hanami form helper.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/books\" id=\"book-form\" method=\"POST\">\n  <input type=\"hidden\" name=\"_csrf_token\" value=\"0a800d6a8fc3c24e7eca319186beb287689a91c2a719f1cbb411f721cacd79d4\">\n  <input type=\"text\" name=\"book[title]\" id=\"book-id\" value=\"\">\n  <button type=\"submit\">Create</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action with Custom URL\nDESCRIPTION: Creates an action with a custom route URL using the --url flag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action web books#show --url=/books/:id\n```\n\n----------------------------------------\n\nTITLE: Different Endpoint Types in Hanami Routes\nDESCRIPTION: Illustrates various types of valid endpoints that can be used in Hanami routes, including Procs, actions, middleware, and Rack applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget '/proc',       to: ->(env) { [200, {}, ['Hello from Hanami!']] }\nget '/action',     to: \"home#index\"\nget '/middleware', to: Middleware\nget '/rack-app',   to: RackApp.new\nget '/rails',      to: ActionControllerSubclass.action(:new)\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Cleaner for RSpec in Ruby\nDESCRIPTION: This Ruby code configures DatabaseCleaner for use with RSpec in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/support/database_cleaner.rb\n\nrequire \"database_cleaner-sequel\"\n\nHanami.app.prepare(:persistence)\nDatabaseCleaner[:sequel, db: Hanami.app[\"persistence.db\"]]\n\nRSpec.configure do |config|\n  config.before(:suite) do\n    DatabaseCleaner.strategy = :transaction\n    DatabaseCleaner.clean_with(:truncation)\n  end\n\n  config.around(:each, type: :database) do |example|\n    DatabaseCleaner.cleaning do\n      example.run\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Automatic Content Escaping for Security\nDESCRIPTION: Explains how the HTML generator automatically escapes content for security, protecting against XSS attacks in different usage patterns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.div('hello')         # => <div>hello</div>\nhtml.div { 'hello' }      # => <div>hello</div>\nhtml.div(html.p('hello')) # => <div><p>hello</p></div>\nhtml.div do\n  p 'hello'\nend # => <div><p>hello</p></div>\n\n\n\nhtml.div(\"<script>alert('xss')</script>\")\n  # =>  \"<div>&lt;script&gt;alert(&apos;xss&apos;)&lt;&#x2F;script&gt;</div>\"\n\nhtml.div { \"<script>alert('xss')</script>\" }\n  # =>  \"<div>&lt;script&gt;alert(&apos;xss&apos;)&lt;&#x2F;script&gt;</div>\"\n\nhtml.div(html.p(\"<script>alert('xss')</script>\"))\n  # => \"<div><p>&lt;script&gt;alert(&apos;xss&apos;)&lt;&#x2F;script&gt;</p></div>\"\n\nhtml.div do\n  p \"<script>alert('xss')</script>\"\nend\n  # => \"<div><p>&lt;script&gt;alert(&apos;xss&apos;)&lt;&#x2F;script&gt;</p></div>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RESTful Routes for Books in Hanami\nDESCRIPTION: This Ruby code demonstrates how to set up RESTful routes for a books resource in a Hanami application. It uses the `resources` helper to define routes for index, new, and create actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_34\n\nLANGUAGE: Ruby\nCODE:\n```\nroot to: 'home#index'\nresources :books, only: [:index, :new, :create]\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Hanami Actions\nDESCRIPTION: This snippet shows how to run RSpec tests for a specific Hanami action file using the command line. It also demonstrates how to run the entire test suite.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/actions/books/index_spec.rb\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Models for Association\nDESCRIPTION: Shell commands to generate Author and Book models including entities, repositories, migrations and specs\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model author\n      create  lib/bookshelf/entities/author.rb\n      create  lib/bookshelf/repositories/author_repository.rb\n      create  db/migrations/20171024081558_create_authors.rb\n      create  spec/bookshelf/entities/author_spec.rb\n      create  spec/bookshelf/repositories/author_repository_spec.rb\n\n$ bundle exec hanami generate model book\n      create  lib/bookshelf/entities/book.rb\n      create  lib/bookshelf/repositories/book_repository.rb\n      create  db/migrations/20171024081617_create_books.rb\n      create  spec/bookshelf/entities/book_spec.rb\n      create  spec/bookshelf/repositories/book_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Custom Entry Point Example\nDESCRIPTION: Demonstrates creating a custom entry point for a sign-in page that imports specific CSS and JavaScript functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"../../css/signin/app.css\";\nimport { resetPassword } from \"./resetPassword\";\n```\n\n----------------------------------------\n\nTITLE: Dynamic Book Listing Test\nDESCRIPTION: Updated feature test for displaying dynamically loaded books from repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'features_helper'\n\nRSpec.describe 'List books' do\n  let(:repository) { BookRepository.new }\n  before do\n    repository.clear\n\n    repository.create(title: 'Practical Object-Oriented Design in Ruby', author: 'Sandi Metz')\n  end\n\n  it 'displays each book on the page' do\n    visit '/books'\n\n    within '#books' do\n      expect(page).to have_selector('.book', count: 1), 'Expected to find 1 book'\n      expect(page).to have_content('Practical Object-Oriented Design in Ruby')\n      expect(page).to have_content('Sandi Metz')\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing In-Project Hanami App Commands - Shell\nDESCRIPTION: This shell snippet details how to access the set of Hanami commands available inside an existing Hanami app. Executing 'bundle exec hanami --help' lists both standard and project-specific commands such as managing assets, starting consoles, database migrations, development servers, installing plugins, inspecting middleware, and viewing app info. Required: Must be executed within a Hanami application directory with appropriate dependencies installed via Bundler. Input: 'bundle exec hanami --help' command. Output: Expanded list of subcommands tailored to the Hanami app environment. The commands may differ based on the project's configuration and Hanami version.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami --help\\nCommands:\\n  hanami assets [SUBCOMMAND]\\n  hanami console                              # Start app console (REPL)\\n    hanami db [SUBCOMMAND]\\n  hanami dev                                  # Start the application in development mode\\n  hanami generate [SUBCOMMAND]\\n  hanami install                              # Install Hanami third-party plugins\\n  hanami middleware                           # Print app Rack middleware stack\\n  hanami routes                               # Print app routes\\n  hanami server                               # Start Hanami app server\\n  hanami version                              # Print Hanami app version\n```\n\n----------------------------------------\n\nTITLE: Configuring Action Format in Hanami Ruby Application\nDESCRIPTION: This code snippet demonstrates how to set the default format for all actions in a Hanami application. It uses the config.actions.format method to set the format to JSON.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/app-config.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.actions.format :json\n```\n\n----------------------------------------\n\nTITLE: Registering a custom MIME type in Hanami\nDESCRIPTION: Registers a custom MIME type ('application/custom') with a format name (:custom) in a Hanami application. This allows actions to work with additional content types.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/formats-and-mime-types.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.formats.add :custom, \"application/custom\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Calling Value Methods from Template - Hanami View - SQL/ERB\nDESCRIPTION: Shows accessing decorated object methods directly from a template, relying on method delegation from the part. Illustrates ERB syntax for rendering a property from a part object in the view. The part object must wrap an object responding to the specified method (e.g., title).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n<p><%= book.title %></p>\n```\n\n----------------------------------------\n\nTITLE: Implementing Book Creation Controller in Hanami\nDESCRIPTION: Ruby code for the Book Creation controller. It creates a new book using the provided parameters and redirects to the book listing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Books\n      class Create\n        include Web::Action\n\n        def call(params)\n          BookRepository.new.create(params[:book])\n\n          redirect_to '/books'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Hello World Component in Hanami\nDESCRIPTION: This code defines a simple HelloWorld component in a Hanami application. It creates a class with a method that returns a greeting string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/booting.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/hello_world.rb\n\nmodule Bookshelf\n  class HelloWorld\n    def say_hello\n      \"Hello world!\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Nested Hanami Action\nDESCRIPTION: Creates a nested action with controller modules separated by slashes. Works with nested resourceful routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action web books/editions#show\n```\n\n----------------------------------------\n\nTITLE: Updating Layout Template with Flash Messages in ERB\nDESCRIPTION: This ERB template updates the application layout to include flash messages for alerts and notices.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_47\n\nLANGUAGE: erb\nCODE:\n```\n<!-- app/templates/layouts/app.html.erb -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bookshelf</title>\n    <%= favicon_tag %>\n    <%= stylesheet_tag \"app\" %>\n  </head>\n  <body>\n    <% if flash[:alert] %>\n      <p><%= flash[:alert] %></p>\n    <% end %>\n    <% if flash[:notice] %>\n      <p><%= flash[:notice] %></p>\n    <% end %>\n\n    <%= yield %>\n    <%= javascript_tag \"app\" %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Enabling Colorized Log Output in Hanami Ruby\nDESCRIPTION: This snippet illustrates how to enable colorized log level output specifically for the `:development` environment. Within the `environment(:development)` block in `config/app.rb`, the `config.logger.options[:colorize]` setting is set to `true`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.options[:colorize] = true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Hanami Actions via Shell Command\nDESCRIPTION: This snippet shows how to run RSpec tests for a specific Hanami action file using the bundle exec command in the shell.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/actions/books/index_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring a Root Route in Hanami (Ruby)\nDESCRIPTION: This Ruby code defines the routes for the 'Bookshelf' application within `config/routes.rb`. It configures the root path (`/`) to map to the `home.show` action using `root to: \"home.show\"`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Bugsnag in Hanami Initializer\nDESCRIPTION: Example of setting up Bugsnag error tracking in a Hanami project using an initializer file. The initializer configures Bugsnag with an API key from environment variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/initializers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/bugsnag.rb\nrequire 'bugsnag'\n\nBugsnag.configure do |config|\n  config.api_key = ENV['BUGSNAG_API_KEY']\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing SQL CASE Expressions in ROM `select` using Expression Syntax (Ruby)\nDESCRIPTION: Demonstrates constructing a SQL CASE expression within a ROM `select` block using expression syntax. It uses `string::case` (or other types like `integer::case`) with Hash key-value pairs defining the conditions (`WHEN ... THEN ...`) and an `else:` key for the `ELSE` part. The result is aliased using `as(:status)`.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.select {[\n  id,\n  title,\n  string::case(\n    quantity.is(0) => \"out-of-stock\",\n    (quantity < 100) => \"low-stock\",\n    else: \"in-stock\"\n  ).as(:status)\n]}.to_a\n```\n\n----------------------------------------\n\nTITLE: Inspecting Hanami Routes (Shell)\nDESCRIPTION: Shows how to use the Hanami CLI command to inspect and list all defined routes in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home                          as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nGET     /books/new                    books.new\nPOST    /books                        books.create\nPATCH   /books/:id                    books.update\nDELETE  /books/:id                    books.destroy\n```\n\n----------------------------------------\n\nTITLE: Hanami Controller with Exposures\nDESCRIPTION: Demonstrates how to expose variables from a controller action to the view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        expose :title\n\n        def call(params)\n          @title = 'Dashboard'\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Logger Configuration in Hanami\nDESCRIPTION: Shows how to configure logger settings for specific environments using the environment method to set custom log file locations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/configuration.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:development) do\n      config.logger.stream = root.join(\"log\").join(\"development.log\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Layout for Specific View\nDESCRIPTION: Example of how to disable layout rendering for a specific dashboard view in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n        layout false\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Actions\nDESCRIPTION: Basic implementation of a Hanami action class that handles requests\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(*, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Struct\nDESCRIPTION: This command generates a struct in Hanami 2.2. The example creates a 'book' struct. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate struct book\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate struct --help\n```\n\n----------------------------------------\n\nTITLE: Testing Welcome Email Operation With RSpec\nDESCRIPTION: Unit test demonstrating how to test the SendWelcomeEmail operation with dependency substitution\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/unit/operations/send_welcome_email_spec.rb\n\nRSpec.describe Bookshelf::Operations::SendWelcomeEmail, \"#call\" do\n  subject(:send_welcome_email) {\n    described_class.new(email_client: email_client, welcome_email: welcome_email)\n  }\n\n  let(:email_client) { double(:email_client) }\n  let(:welcome_email) { double(:welcome_email) }\n\n  before do\n    allow(welcome_email).to receive(:render_text).and_return(\"Welcome to Bookshelf Ada!\")\n    allow(welcome_email).to receive(:render_html).and_return(\"<p>Welcome to Bookshelf Ada!</p>\")\n  end\n\n  it \"sends a welcome email\" do\n    expect(email_client).to receive(:deliver).with(\n      to: \"ada@example.com\",\n      subject: \"Welcome!\",\n      text_body: \"Welcome to Bookshelf Ada!\",\n      html_body: \"<p>Welcome to Bookshelf Ada!</p>\"\n    )\n\n    send_welcome_email.call(name: \"Ada!\", email_address: \"ada@example.com\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Guardfile for Hanami 2.1.0\nDESCRIPTION: Modifies the Guardfile to watch for changes in app, config, lib, and slices directories, reloading the server as needed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :server do\n  guard \"puma\", port: ENV.fetch(\"HANAMI_PORT\", 2300) do\n    # Edit the following regular expression for your needs.\n    # See: https://guides.hanamirb.org/app/code-reloading/\n    watch(%r{^(app|config|lib|slices)([/][^/]+)*.(rb|erb|haml|slim)$}i)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Count in Hanami Template\nDESCRIPTION: Demonstrates how to use the formatted count part in a Hanami template to display the formatted number of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n# app/templates/books/index.html.erb\n\n<%= books.formatted_count %>\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Content with escape_html in Ruby\nDESCRIPTION: Demonstrates the `escape_html` helper (aliased as `h`) in Hanami for safely including strings in HTML templates. It converts special HTML characters (like '<', '>', \"&\") into their corresponding entities to prevent Cross-Site Scripting (XSS) attacks. The method marks the resulting string as HTML safe, preventing further escaping, and returns already safe strings unmodified.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/string-escaping.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nescape_html(\"Safe content\")\n# => \"Safe content\"\n\nescape_html(\"<script>alert('xss')</script>\")\n# => \"&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;\"\n\nescape_html(raw(\"<p>Not escaped</p>\"))\n# => \"<p>Not escaped</p>\"\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Content in Hanami Controller\nDESCRIPTION: Shows how to set up a controller action that exposes unescaped HTML content to be used in a view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Snippets\n      class Show\n        include Web::Action\n\n        expose :snippet\n\n        def call(params)\n          @snippet = \"<h1>Hello World</h1>\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Books Index Template with Static Data\nDESCRIPTION: HTML template for displaying a list of books with hardcoded data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n<h1>Bookshelf</h1>\n<h2>All books</h2>\n\n<div id=\"books\">\n  <div class=\"book\">\n    <h3>Patterns of Enterprise Application Architecture</h3>\n    <p>by <strong>Martin Fowler</strong></p>\n  </div>\n\n  <div class=\"book\">\n    <h3>Test Driven Development</h3>\n    <p>by <strong>Kent Beck</strong></p>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Including Dry::Monads Result Types in RSpec for Operation Specs - Ruby\nDESCRIPTION: Configures RSpec to include Dry::Monads[:result] so that Success and Failure result helpers are available in operation spec examples. The snippet is meant for spec/support/operations.rb. It depends on dry-monads and RSpec.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"dry/monads\\\"\\n\\nRSpec.configure do |config|\\n  # Provide `Success` and `Failure` for testing operation results\\n  config.include Dry::Monads[:result]\\nend\n```\n\n----------------------------------------\n\nTITLE: Greater Than or Equal Validation in Hanami\nDESCRIPTION: Demonstrates validation for numbers greater than or equal to a value.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { gteq?(19) }\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Application\nDESCRIPTION: This command removes an application named 'Admin' from the 'apps/admin' directory in a Hanami project using the Container architecture.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy app admin\n```\n\n----------------------------------------\n\nTITLE: Testing Book Creation Feature in Hanami\nDESCRIPTION: RSpec feature test for adding a new book. It simulates filling out a form and submitting it to create a new book.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe 'Add a book' do\n  before do\n    BookRepository.new.clear\n  end\n\n  it 'can create a new book' do\n    visit '/books/new'\n\n    within 'form#book-form' do\n      fill_in 'Title',  with: 'Example book'\n      fill_in 'Author', with: 'Some author'\n\n      click_button 'Create'\n    end\n\n    expect(page).to have_current_path('/books')\n    expect(page).to have_content('Example book')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Base CSS for Hanami 2.1 Application\nDESCRIPTION: This snippet shows the creation of a base CSS file for Hanami 2.1 application. It sets basic styles for the body element.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_16\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #fff;\n  color: #000;\n  font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Raw Content in Hanami ERB Template\nDESCRIPTION: Shows how to render raw, unescaped content in a Hanami ERB template using a view method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%= snippet %>\n```\n\n----------------------------------------\n\nTITLE: Including database cleaner in RSpec configuration\nDESCRIPTION: Adding the database cleaner support file to the main spec_helper.rb to enable database cleaning for tests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"support/database_cleaner\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Partial with Additional Locals - Hanami View - Ruby\nDESCRIPTION: Demonstrates passing additional locals to a partial when using the render method from a part. Useful for providing extra display context in the partial. Works with any Hanami part and partial expecting the provided locals.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nrender(\"books/info_box\", title_label: \"Book info\")\n```\n\n----------------------------------------\n\nTITLE: Testing Root Endpoint in Ruby with RSpec\nDESCRIPTION: This snippet shows an RSpec test for the root endpoint of a Hanami application. It expects a 404 response for the initial empty app.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/root_spec.rb\n\nRSpec.describe \"Root\", type: :request do\n  it \"is not found\" do\n    get \"/\"\n\n    # Generate new action via:\n    #   `bundle exec hanami generate action home.index --url=/`\n    expect(last_response.status).to be(404)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Layout to User Sessions View\nDESCRIPTION: Configuration of a custom login layout for the user sessions new view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module UserSessions\n      class New\n        include Web::View\n        layout :login\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller for Singular RESTful Resource in Hanami\nDESCRIPTION: This example shows how to configure a different controller for a singular RESTful resource using the :controller option.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account, controller: 'customer'\n```\n\n----------------------------------------\n\nTITLE: Testing Book Creation Controller in Hanami\nDESCRIPTION: RSpec tests for the Book Creation controller. It checks if a new book is created and if the user is redirected after submission.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Web::Controllers::Books::Create, type: :action do\n  let(:action) { described_class.new }\n  let(:params) { Hash[book: { title: 'Confident Ruby', author: 'Avdi Grimm' }] }\n  let(:repository) { BookRepository.new }\n\n  before do\n    repository.clear\n  end\n\n  it 'creates a new book' do\n    action.call(params)\n    book = repository.last\n\n    expect(book.id).to_not be_nil\n  end\n\n  it 'redirects the user to the books listing' do\n    response = action.call(params)\n\n    expect(response[0]).to eq(302)\n    expect(response[1]['Location']).to eq('/books')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Passing Home Feature Spec (Shell)\nDESCRIPTION: This output confirms that the Capybara-driven feature spec for the home page passed successfully. It indicates that visiting the root path correctly displays the \"Welcome to Bookshelf\" message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nHome\n  visiting the home page shows a welcome message\n\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Exports in CDN Slice\nDESCRIPTION: Demonstrates how to limit the components that a slice makes available for export to other slices.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/cdn.rb\nmodule CDN\n  class Slice < Hanami::Slice\n    export [\"book_covers.purge\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Renamed Dependencies in Hanami (Ruby)\nDESCRIPTION: Shows how to substitute renamed dependencies when testing a Hanami operation. This example demonstrates providing mock objects for both the email client and the renamed email renderer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nsubject(:send_welcome_email) {\n  described_class.new(email_client: mock_email_client, email_renderer: mock_email_renderer)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Repository with Associations in Hanami\nDESCRIPTION: User repository implementation with has_many associations to stories and comments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/user_repository.rb\nclass UserRepository < Hanami::Repository\n  associations do\n    has_many :stories\n    has_many :comments\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hanami Logger Settings\nDESCRIPTION: Basic configuration for Hanami logger in different environments with log level settings and JSON formatting for production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  environment :development do\n    logger level: :info\n  end\n\n  environment :production do\n    logger level: :info, formatter: :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Method Callbacks in Hanami Action\nDESCRIPTION: This snippet demonstrates how to use a before callback in a Hanami action to validate parameters. It defines a Show action for books with a validate_params method that is called before the main handle method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        before :validate_params\n\n        params do\n          required(:id).filled(:integer)\n        end\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def validate_params(request, response)\n          params = request.params\n          halt 422, request.params.errors.to_h unless request.params.valid?\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Hanami Database and Related Gems - Ruby\nDESCRIPTION: Lists the essential gems to add in the Gemfile for database support in a Hanami application upgrade. Includes hanami-db, and adapters for SQLite, PostgreSQL, and MySQL, as well as database_cleaner-sequel for test environments. This is dependency setup only and should be placed directly in the Gemfile. The group :test block scopes database_cleaner-sequel to testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem \\\"hanami-db\\\", \\\"~> 2.2\\\"\\n\\n# If you want a SQLite database\\ngem \\\"sqlite3\\\"\\n# If you want a Postgres database\\ngem \\\"pg\\\"\\n# If you want a MySQL database\\ngem \\\"mysql2\\\"\\n\\ngroup :test do\\n  gem \\\"database_cleaner-sequel\\\"\\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Database URL Setting in Hanami\nDESCRIPTION: This Ruby code defines a required database_url setting for a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n\n    setting :database_url, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding ROM and PostgreSQL dependencies in Gemfile\nDESCRIPTION: Required gem dependencies for setting up ROM with PostgreSQL in a Hanami application, including database cleaner for testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\ngem \"rom\", \"~> 5.3\"\ngem \"rom-sql\", \"~> 3.6\"\ngem \"pg\"\n\ngroup :test do\n  gem \"database_cleaner-sequel\"\nend\n```\n\n----------------------------------------\n\nTITLE: Reloading Code in Hanami Console\nDESCRIPTION: Example of using the reload helper in the Hanami console to refresh code changes during an active console session.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/code-reloading.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> reload\nReloading...\n```\n\n----------------------------------------\n\nTITLE: Minimal Hanami View Definition\nDESCRIPTION: Shows a minimal view class that relies on exposed variables from the controller.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice-Specific Middleware in Hanami Routes\nDESCRIPTION: Example of adding Rack middleware (OmniAuth) specifically for a slice within the routes configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \"omniauth/builder\"\nrequire \"omniauth-google-oauth2\"\n\nmodule MyApp\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n\n    slice :admin, at: \"/admin\" do\n      use OmniAuth::Builder do\n        provider :google_oauth2 # ...\n      end\n\n      get \"/users\", to: \"users.index\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic HTML Layout Template in ERB\nDESCRIPTION: Default HTML5 layout template that serves as the base structure for Hanami views, featuring yield statement for content injection.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<!DOCTYPE HTML>\n<html>\n  <head>\n    <title>Web</title>\n  </head>\n  <body>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Routes\nDESCRIPTION: Route configuration for the Hanami application defining the root endpoint.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Pagination for GET /books Endpoint in Ruby with RSpec\nDESCRIPTION: This RSpec test verifies the pagination functionality of the GET /books endpoint. It sets up test data and checks if the correct page of books is returned based on the provided parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"GET /books pagination\", type: [:request, :database] do\n  let(:books) { app[\"persistence.rom\"].relations[:books] }\n\n  before do\n    10.times do |n|\n      books.insert(title: \"Book #{n}\", author: \"Author #{n}\")\n    end\n  end\n\n  context \"given valid page and per_page params\" do\n    it \"returns the correct page of books\" do\n      get \"/books?page=1&per_page=3\"\n\n      expect(last_response).to be_successful\n\n      response_body = JSON.parse(last_response.body)\n\n      expect(response_body).to eq([\n        { \"title\" => \"Book 0\", \"author\" => \"Author 0\" },\n        { \"title\" => \"Book 1\", \"author\" => \"Author 1\" },\n        { \"title\" => \"Book 2\", \"author\" => \"Author 2\" }\n      ])\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Procfile.dev for Hanami 2.1.0\nDESCRIPTION: Creates a Procfile.dev file to define processes for running the Hanami server and watching assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nweb: bundle exec hanami server\nassets: bundle exec hanami assets watch\n```\n\n----------------------------------------\n\nTITLE: Custom Login Layout Class Definition\nDESCRIPTION: Implementation of a custom login layout class for alternative template usage.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    class LoginLayout\n      include Web::Layout\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Error Display in Book Creation Form with RSpec\nDESCRIPTION: This RSpec test checks the rendering of validation errors in the book creation form. It verifies that error messages are displayed when the form submission contains invalid parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_31\n\nLANGUAGE: Ruby\nCODE:\n```\nRSpec.describe Web::Views::Books::New, type: :view do\n  let(:params)    { OpenStruct.new(valid?: false, error_messages: ['Title must be filled', 'Author must be filled']) }\n  let(:exposures) { Hash[params: params] }\n  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/new.html.erb') }\n  let(:view)      { described_class.new(template, exposures) }\n  let(:rendered)  { view.render }\n\n  it 'displays list of errors when params contains errors' do\n    expect(rendered).to include('There was a problem with your submission')\n    expect(rendered).to include('Title must be filled')\n    expect(rendered).to include('Author must be filled')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Struct Base Class for Hanami DB - Ruby\nDESCRIPTION: Establishes a base Hanami::DB::Struct inheriting class for db/struct.rb. Forms the class for representing db entities as simple immutable Ruby objects. The Bookshelf module placeholder is to be customized. Depends on hanami-db.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"hanami/db/struct\\\"\\n\\nmodule Bookshelf\\n  module DB\\n    class Struct < Hanami::DB::Struct\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Rake\nDESCRIPTION: Command to run the test suite using Rake, showing a failing test that expects 'Bookshelf' content but finds a 404 page instead.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake\nF.\n\nFailures:\n\n  1) Visit home is successful\n     Failure/Error: expect(page).to have_content('Bookshelf')\n       expected to find text \"Bookshelf\" in \"404 - Not Found\"\n     # ./spec/web/features/visit_home_spec.rb:7:in `block (2 levels) in <top (required)>'\n\nFinished in 0.02604 seconds (files took 1.14 seconds to load)\n2 examples, 1 failure\n\nFailed examples:\n\nrspec ./spec/web/features/visit_home_spec.rb:4 # Visit home is successful\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Template Path in Hanami Mailer\nDESCRIPTION: Demonstrates how to set up a custom mailer template with a different name than the default convention. Shows how to associate a template named 'send_password' with the ForgotPassword mailer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/templates.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/mailers/forgot_password.rb\nmodule Mailers\n  class ForgotPassword\n    include Hanami::Mailer\n    template 'send_password'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami Layout Template\nDESCRIPTION: Layout template providing common structure across pages including header and yield statement.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Web</title>\n    <%= favicon %>\n  </head>\n  <body>\n    <h1>Bookshelf</h1>\n    <%= yield %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Hanami Database Commands\nDESCRIPTION: Shows how to view all available database management commands using the --help flag with the hanami db command. This displays the full list of subcommands for database operations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/db.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db --help\n\nCommands:\n  hanami db create                                  # Create databases\n  hanami db drop                                    # Delete databases\n  hanami db migrate                                 # Migrates database\n  hanami db prepare                                 # Prepare databases\n  hanami db seed                                    # Load seed data\n  hanami db structure [SUBCOMMAND]\n  hanami db version                                 # Print schema version\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for Hanami Upgrade Documentation\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Hanami framework upgrades. Specifies the page title and ordering position (170) in the documentation hierarchy.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Upgrade notes\norder: 170\n---\n```\n\n----------------------------------------\n\nTITLE: Database Migration for Creating Books Table\nDESCRIPTION: This snippet shows a database migration for creating a books table with title and author columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/db/migrate/20221113050928_create_books.rb\n\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :text, null: false\n      column :author, :text, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Book Creation View in Ruby for Hanami\nDESCRIPTION: This Ruby code defines a view for the book creation action in a Hanami application. It specifies the template to be used when rendering the view, which is particularly useful for re-rendering the form with validation errors.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_30\n\nLANGUAGE: Ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Create\n        include Web::View\n        template 'books/new'\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a database migration\nDESCRIPTION: Shell command to create a new ROM SQL migration for creating a books table.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake db:create_migration[create_books]\n```\n\n----------------------------------------\n\nTITLE: Exposing Input Directly to Template in Hanami View (Ruby)\nDESCRIPTION: This snippet demonstrates how to expose input directly to a template in a Hanami view. It exposes a 'query' parameter without any processing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/input-and-exposures.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Search < Bookshelf::View\n        expose :query\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Assets Configuration for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of an assets configuration file for Hanami 2.1. It sets up the asset pipeline using hanami-assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_15\n\nLANGUAGE: js\nCODE:\n```\nimport * as assets from \"hanami-assets\";\n\nawait assets.run();\n\n// To provide additional esbuild (https://esbuild.github.io) options, use the following:\n//\n// Read more at: https://guides.hanamirb.org/assets/overview/\n//\n// await assets.run({\n//   esbuildOptionsFn: (args, esbuildOptions) => {\n//     // Add to esbuildOptions here. Use `args.watch` as a condition for different options for\n//     // compile vs watch.\n//\n//     return esbuildOptions;\n//   }\n// });\n```\n\n----------------------------------------\n\nTITLE: Updating BookRepo Method for Pagination Parameters in Ruby\nDESCRIPTION: This Ruby code updates the `all_by_title` method within `Bookshelf::Repos::BookRepo` (located in `app/repos/book_repo.rb`). The method now accepts `page` and `per_page` keyword arguments. It uses these arguments to apply pagination to the database query using the `.page(page)` and `.per_page(per_page)` methods provided by the relation's pagination feature.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# app/repos/book_repo.rb\n\nmodule Bookshelf\n  module Repos\n    class BookRepo < Bookshelf::DB::Repo\n      def all_by_title(page:, per_page:)\n        books\n          .select(:title, :author)\n          .order(books[:title].asc)\n          .page(page)\n          .per_page(per_page)\n          .to_a\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Hanami Scope Class\nDESCRIPTION: Example of defining a basic scope class in the Views::Scopes namespace within a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/scopes/media_player.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    module Scopes\n      class MediaPlayer < Bookshelf::Views::Scope\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: MIME Type Request Examples\nDESCRIPTION: Shell commands demonstrating how to make HTTP requests with different Accept headers to test MIME type handling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/mime-types.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n% curl -H \"Accept: application/json\" http://localhost:2300/dashboard\n{\"foo\":\"bar\"}\n```\n\nLANGUAGE: shell\nCODE:\n```\n% curl -H \"Accept: text/html\" http://localhost:2300/dashboard\n<h1>Dashboard</h1>\n```\n\nLANGUAGE: shell\nCODE:\n```\n% curl -H \"Accept: application/xml\" http://localhost:2300/dashboard\nHanami::View::MissingTemplateError: Can't find template \"dashboard/index\" for \"xml\" format.\n```\n\n----------------------------------------\n\nTITLE: Testing Book Index View in Hanami\nDESCRIPTION: RSpec tests for the Books Index view. It checks if books are exposed correctly and if the view handles cases with and without books appropriately.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Web::Views::Books::Index, type: :view do\n  let(:exposures) { Hash[books: []] }\n  let(:template)  { Hanami::View::Template.new('apps/web/templates/books/index.html.erb') }\n  let(:view)      { described_class.new(template, exposures) }\n  let(:rendered)  { view.render }\n\n  it 'exposes #books' do\n    expect(view.books).to eq(exposures.fetch(:books))\n  end\n\n  context 'when there are no books' do\n    it 'shows a placeholder message' do\n      expect(rendered).to include('<p class=\"placeholder\">There are no books yet.</p>')\n    end\n  end\n\n  context 'when there are books' do\n    let(:book1)     { Book.new(title: 'Refactoring', author: 'Martin Fowler') }\n    let(:book2)     { Book.new(title: 'Domain Driven Design', author: 'Eric Evans') }\n    let(:exposures) { Hash[books: [book1, book2]] }\n\n    it 'lists them all' do\n      expect(rendered.scan(/class=\"book\"/).length).to eq(2)\n      expect(rendered).to include('Refactoring')\n      expect(rendered).to include('Domain Driven Design')\n    end\n\n    it 'hides the placeholder message' do\n      expect(rendered).to_not include('<p class=\"placeholder\">There are no books yet.</p>')\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Array Size and Type Validation in Hanami\nDESCRIPTION: Demonstrates array validation with minimum size requirement and element type checking.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:codes) { array? { min_size?(2) & each { str? } } }\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific App Configuration\nDESCRIPTION: Shows how to configure environment-specific settings in a Hanami application using the environment method. Example demonstrates setting up production-specific middleware.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/environments.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      # Production specific config or initialization\n      config.middleware.use ProductionOnlyMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Aliased Associations in Hanami\nDESCRIPTION: Ruby code demonstrating how aliased associations are used when loading stories with comments, providing more meaningful names for the relationships.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nstory = stories.find_with_comments(2)\n  # => #<Story:0x00007fe289f2f800 @attributes={:id=>2, :user_id=>1, :text=>\"Hello folks\", :created_at=>2017-10-24 09:09:59 UTC, :updated_at=>2017-10-24 09:09:59 UTC, :user=>#<User:0x00007fe289f2e810 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 09:06:57 UTC, :updated_at=>2017-10-24 09:06:57 UTC}>, :comments=>[#<Comment:0x00007fe289f2d618 @attributes={:id=>1, :user_id=>2, :story_id=>2, :text=>\"Hi and welcome!\", :created_at=>2017-10-24 09:12:30 UTC, :updated_at=>2017-10-24 09:12:30 UTC, :commenter=>#<User:0x00007fe289f2c420 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>}>]}>\n\nstory.comments\n  # => [#<Comment:0x00007fe289f2d618 @attributes={:id=>1, :user_id=>2, :story_id=>2, :text=>\"Hi and welcome!\", :created_at=>2017-10-24 09:12:30 UTC, :updated_at=>2017-10-24 09:12:30 UTC, :commenter=>#<User:0x00007fe289f2c420 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>}>]\n\nstory.comments.map(&:commenter)\n  # => [#<User:0x00007fe289f2c420 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>]\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Colorizer Implementation\nDESCRIPTION: Implementation of a custom colorization strategy for log output using the Paint gem.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass LoggerColorizer < Hanami::Logger::Colorizer\n  def initialize(colors: { app: [:red, :bright], severity: [:red, :blue], datetime: [:italic, :yellow] })\n    super\n  end\n\n  private\n\n  def colorize(message, color:)\n    Paint[message, *color]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Components in Hanami Console (Ruby)\nDESCRIPTION: Demonstrates how to access registered components in the Hanami console using the app container.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nbundle exec hanami console\n\nbookshelf[development]> Hanami.app.boot\n=> Bookshelf::App\n\nbookshelf[development]> Hanami.app.keys\n=> [\"notifications\",\n \"settings\",\n \"routes\",\n \"inflector\",\n \"logger\",\n \"rack.monitor\",\n \"operations.send_welcome_email\",\n \"renderers.welcome_email\"]\n\nbookshelf[development]> Hanami.app[\"operations.send_welcome_email\"]\n=> #<Bookshelf::Operations::SendWelcomeEmail:0x00000001055dadd0>\n\nbookshelf[development]> Hanami.app[\"renderers.welcome_email\"]\n=> #<Bookshelf::Renderers::WelcomeEmail:0x000000010577afc8>\n\nbookshelf[development]> Hanami.app[\"renderers.welcome_email\"].render_html(name: \"Ada\")\n=> \"<p>Welcome to Bookshelf Ada!</p>\"\n```\n\n----------------------------------------\n\nTITLE: Using Up/Down Blocks in Hanami Migrations\nDESCRIPTION: Shows how to explicitly define both up (migration) and down (rollback) actions in a Hanami migration instead of using the default change block with automatic rollback inference.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  up do\n    create_table :books do\n      # ...\n    end\n  end\n\n  down do\n    drop_table :books\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action for Home Index\nDESCRIPTION: This shell command generates a new Hanami action for the home index, skipping view, route, and test generation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action home.index --skip-view --skip-route --skip-tests\n```\n\n----------------------------------------\n\nTITLE: Displaying Basic Middleware Stack in Hanami\nDESCRIPTION: Shows how to use the hanami middleware command to display the basic Rack middleware stack configuration without initialization arguments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/middleware.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Session::Cookie\n/    Hanami::Middleware::BodyParser\n```\n\n----------------------------------------\n\nTITLE: Testing Session Modifications in Hanami\nDESCRIPTION: Illustrates how to test session modifications by checking the exposed session copy instead of the original session object. Shows verification of user ID storage in session after authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Web::Controllers::Sessions::Create, type: :action do\n  let(:session) { {} }\n  let(:params)  { Hash['rack.session' => session] }\n\n  context 'given valid authentication credentials' do\n    it 'records the user ID in the session' do\n      action.call(params)\n\n      # Hanami makes a copy of the session upon entry into the action\n      # Afterwards, it uses the copy and not the original one\n      # Fortunately, the copy is exposed and we can access it like any other exposure\n      expect(action.exposures[:session][:user_id]).to eq(444)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Slice-Specific Settings\nDESCRIPTION: Shows how to create slice-specific settings for the CDN slice, allowing for more granular configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/config/settings.rb\n\nmodule CDN\n  class Settings < Hanami::Settings\n    setting :cdn_api_key, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Formats in Hanami\nDESCRIPTION: Demonstrates how to configure multiple accepted formats for actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/formats-and-mime-types.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.actions.format :json, :html\n```\n\n----------------------------------------\n\nTITLE: Setting up ROM SQL rake tasks\nDESCRIPTION: Rakefile configuration to enable ROM SQL migration tasks. This adds db namespace tasks for database operations like migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\n\nrequire \"rom/sql/rake_task\"\n\ntask :environment do\n  require_relative \"config/app\"\n  require \"hanami/prepare\"\nend\n\nnamespace :db do\n  task setup: :environment do\n    Hanami.app.prepare(:persistence)\n    ROM::SQL::RakeSupport.env = Hanami.app[\"persistence.config\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling Early Hints in Hanami Configuration\nDESCRIPTION: This code snippet demonstrates how to enable Early Hints in the Hanami project configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/http2-early-hints.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nHanami.configure do\n  # ...\n  early_hints true\nend\n```\n\n----------------------------------------\n\nTITLE: Writing Root Request Spec in Ruby\nDESCRIPTION: RSpec test for the root path of the Hanami application, checking for a successful response and specific body content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    get \"/\"\n\n    # Find me in `config/routes.rb`\n    expect(last_response).to be_successful\n    expect(last_response.body).to eq(\"Welcome to Bookshelf\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Capybara Support for Hanami 2.1.0\nDESCRIPTION: Sets up Capybara for feature testing in Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \"capybara/rspec\"\n\nCapybara.app = Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Using Asset Helpers with Early Hints in ERB Templates\nDESCRIPTION: These examples show how to use various asset helpers with Early Hints options in ERB templates, including JavaScript, stylesheets, favicon, images, audio, and video.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/http2-early-hints.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript \"application\" %>\n<%= javascript \"https://somecdn.test/framework.js\", \"dashboard\" %>\n\n<%= javascript \"application\", push: false %>\n<%= javascript \"https://somecdn.test/framework.css\", \"dashboard\", push: false %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet \"application\" %>\n<%= stylesheet \"https://somecdn.test/framework.css\", \"dashboard\" %>\n\n<%= stylesheet \"application\", push: false %>\n<%= stylesheet \"https://somecdn.test/framework.css\", \"dashboard\", push: false %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= favicon \"favicon.ico\", push: :image %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= image \"avatar.png\", push: :image %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= audio \"song.ogg\", push: true %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  audio do\n    text \"Your browser does not support the audio tag\"\n    source src: asset_path(\"song.ogg\", push: :audio), type: \"audio/ogg\"\n    source src: asset_path(\"song.wav\"), type: \"audio/wav\"\n  end\n%>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= video \"movie.mp4\", push: true %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  video do\n    text \"Your browser does not support the video tag\"\n    source src: asset_path(\"movie.mp4\", push: :video), type: \"video/mp4\"\n    source src: asset_path(\"movie.ogg\"), type: \"video/ogg\"\n  end\n%>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= asset_path \"application.js\", push: :script %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= asset_url \"https://somecdn.test/framework.js\", push: :script %>\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Form with Initial Values\nDESCRIPTION: The resulting HTML output from the Hanami form helpers showing the structured form with nested fields and populated values.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<form action=\"/deliveries/1\" id=\"delivery-form\" method=\"POST\">\n  <input type=\"hidden\" name=\"_method\" value=\"PATCH\">\n  <input type=\"hidden\" name=\"_csrf_token\" value=\"4800d585b3a802682ae92cb72eed1cdd2894da106fb4e9e25f8a262b862c52ce\">\n\n  <input type=\"text\" name=\"delivery[code]\" id=\"delivery-code\" value=\"123\">\n\n  <input type=\"text\" name=\"delivery[customer][name]\" id=\"delivery-customer-name\" value=\"Luca\">\n  <input type=\"text\" name=\"delivery[customer][address][city]\" id=\"delivery-customer-address-city\" value=\"Rome\">\n\n  <button type=\"submit\">Update</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using the Locals Hash in a Hanami Scope Class for Default Values - Ruby\nDESCRIPTION: Defines a method (`show_artwork?`) in a scope class that uses the `locals` hash to fetch a value with a fallback default. This pattern ensures safe handling of potentially absent locals when scopes are instantiated. The approach supports flexible configuration of rendered partials/components in Hanami views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/scopes.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\\n  def show_artwork?\\n    locals.fetch(:show_artwork, true)\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Using Shortcut Methods for Table Alterations in Hanami\nDESCRIPTION: This example shows how to use shortcut methods for table alterations without the alter_table block. It demonstrates adding an index to a table column using a more concise syntax.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/alter-table.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nadd_index :users, :email\n\n#instead of\n\nalter_table(:users) do\n  add_index :email\nend\n```\n\n----------------------------------------\n\nTITLE: Creating HAML Template for Hanami Mailer\nDESCRIPTION: Shows how to create a simple welcome email template using HAML templating engine. Demonstrates the usage of alternative template engines in Hanami mailers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/templates.md#2025-04-23_snippet_1\n\nLANGUAGE: haml\nCODE:\n```\n# lib/bookshelf/mailers/templates/welcome.html.haml\n%h1 Welcome\n```\n\n----------------------------------------\n\nTITLE: Poor Template Implementation Example\nDESCRIPTION: Shows an example of poor template implementation that should be avoided due to testing difficulties.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= format_number book.downloads_count %>\n```\n\n----------------------------------------\n\nTITLE: Updated Hanami Routes Configuration with Root Route\nDESCRIPTION: This snippet shows the updated routes configuration for a Hanami application, adding a root route to the 'home.index' action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.index\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Writing Initial Interactor Test in RSpec\nDESCRIPTION: Basic RSpec test for an AddBook interactor that verifies a successful result is returned when called with attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/bookshelf/interactors/add_book_spec.rb\n\nRSpec.describe AddBook do\n  let(:interactor) { AddBook.new }\n  let(:attributes) { Hash.new }\n\n  it \"succeeds\" do\n    result = interactor.call(attributes)\n    expect(result.successful?).to be(true)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Secret in Hanami Settings\nDESCRIPTION: This snippet demonstrates how to add a session_secret setting to the Hanami application's settings file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_46\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :session_secret, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Scope Methods\nDESCRIPTION: Example of implementing methods in a scope class to access locals and provide additional functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\n  def display_title\n    # `item` is a local\n    \"#{item.title} (#{item.duration})\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating package.json for Hanami 2.1 Assets\nDESCRIPTION: This snippet shows the creation of a package.json file for Hanami 2.1 assets. It defines the project name and dependency on hanami-assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"rc3fresh\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"dependencies\": {\n    \"hanami-assets\": \"^2.1.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Slice-Level Base Action Class in Hanami\nDESCRIPTION: Shows the standard base action class that Hanami generates for a slice, which all slice actions can inherit from to share common functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/inheritance.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/admin/action.rb\n\nmodule Admin\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Hanami Slice Manually\nDESCRIPTION: Shows how to create a slice by manually creating a directory in the slices folder.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir -p slices/admin\n\nslices\n└── admin\n```\n\n----------------------------------------\n\nTITLE: API Action Implementation in Hanami\nDESCRIPTION: Implementation of a JSON API endpoint in Hanami that accepts only JSON format requests and returns a JSON response with user data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/api_v1/controllers/users/show.rb\nmodule ApiV1\n  module Controllers\n    module Users\n      class Show\n        include ApiV1::Action\n        accept :json\n\n        def call(params)\n          user = UserRepository.new.find(params[:id])\n          self.body = JSON.generate(user.to_h)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Format Validation with Regular Expression in Hanami\nDESCRIPTION: Demonstrates format validation using regular expressions for URL validation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'uri'\nHTTP_FORMAT = URI.regexp(%w(http https))\n\nrequired(:url) { format?(HTTP_FORMAT) }\n```\n\n----------------------------------------\n\nTITLE: Inspecting Stack with Multiple Middleware\nDESCRIPTION: Displays the result of inspecting the middleware stack after adding multiple middleware. This illustrates the order of middleware in the stack.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$  bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Auth::Basic\n/    Rack::MethodOverride\n```\n\n----------------------------------------\n\nTITLE: Importing Relations from Parent App/Slice (Hanami/Ruby)\nDESCRIPTION: Shows how to enable centralized relation definition for all slices in a Hanami app by setting config.db.import_from_parent = true. This directs the slice to import DB relations from the parent scope, simplifying relation management across modules. To be placed inside a slice class definition. Input: Boolean assignment. Output: Unified relation configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Main\n  class Slice < Hanami::Slice\n    config.db.import_from_parent = true   # default: false\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Size-based Log Rotation Setup\nDESCRIPTION: Configuration for log rotation based on file size and number of files to maintain.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  environment :production do\n    logger 10, 1_024_000, level: :info, formatter: :json, stream: 'log/production.log'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: External Gem Usage Example\nDESCRIPTION: Example showing how to require and use external gems in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"kramdown\"\n\nmodule Bookshelf\n  class Markdown\n    def to_html(markdown)\n      Kramdown::Document.new(markdown).to_html\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating View Helpers Module for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of a View Helpers module for Hanami 2.1. It provides a place to define common helper methods for views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n# frozen_string_literal: true\n\nmodule Bookshelf\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Hello World Component in Hanami\nDESCRIPTION: This code defines a simple HelloWorld component in a Hanami application. It creates a class with a method that returns a greeting string.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/booting.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/hello_world.rb\n\nmodule Bookshelf\n  class HelloWorld\n    def say_hello\n      \"Hello world!\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Executing RSpec Pagination Test using Shell\nDESCRIPTION: This shell command runs the RSpec test file specifically for books index pagination (`spec/requests/books/index/pagination_spec.rb`). The output confirms that the test concerning valid pagination parameters passed successfully.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/index/pagination_spec.rb\n\nGET /books pagination\n  given valid page and per_page params\n    returns the correct page of books\n\nFinished in 0.0807 seconds (files took 0.60344 seconds to load)\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Compiling Assets with Hanami CLI\nDESCRIPTION: Demonstrates the use of 'hanami assets compile' command to bundle assets for production. The command compiles JavaScript and CSS files, generating minified versions along with source maps.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets compile\n[bookshelf]\n[bookshelf]   public/assets/app-SQ36TYM4.js       53b\n[bookshelf]   public/assets/app-KUHJPSX7.css      45b\n[bookshelf]   public/assets/app-KUHJPSX7.css.map  93b\n[bookshelf]   public/assets/app-SQ36TYM4.js.map   93b\n[bookshelf]\n[bookshelf] ⚡ Done in 3ms\n```\n\n----------------------------------------\n\nTITLE: Explicit View Dependencies with Deps Mixin\nDESCRIPTION: Demonstrates how to explicitly define view dependencies using the Deps mixin, allowing for more control over which view is rendered.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/rendering-from-actions.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/pages/contact.rb\n\nmodule Bookshelf\n  module Actions\n    module Pages\n      class Contact < Bookshelf::Action\n        include Deps[view: \"views.pages.contact\"]\n\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Disabling Transactions in Migrations (Ruby)\nDESCRIPTION: Shows how to disable the default transaction behavior for a migration using `no_transaction`. This is necessary for certain database operations (like adding indexes concurrently in PostgreSQL) that cannot run within a transaction.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/migrations.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nROM::SQL.migration do\n  no_transaction\n\n  up do\n    alter_table :users do\n      add_index :email, concurrently: true\n    end\n  end\n\n  down do \n    alter_table :users do\n      drop_index :email, concurrently: true\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Rake Tasks\nDESCRIPTION: Shows how to view all available Rake tasks including custom tasks after creation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake -T\nrake export:books  # Export books to algolia service\nrake environment   # Load the full project\nrake spec          # Run RSpec code examples\n```\n\n----------------------------------------\n\nTITLE: Redis Provider Configuration\nDESCRIPTION: Example of registering a Redis provider that requires manual loading of the custom Redis client.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/providers/redis.rb\n\nHanami.app.register_provider :redis do\n  start do\n    require \"custom_redis/client\"\n\n    redis = CustomRedis::Client.new(url: target[\"settings\"].redis_url)\n\n    register \"redis\", redis\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Autoloaded Struct Class with Container Opt-out\nDESCRIPTION: Example of defining a Book struct that opts out of container registration while maintaining autoloading support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n\nrequire \"dry-struct\"\n\nmodule Bookshelf\n  module Structs\n    class Book < Dry::Struct\n      attribute :title, Types::String\n      attribute :author, Types::String\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Cookie Settings in Hanami\nDESCRIPTION: Configuration example showing how to set global cookie options including domain, security settings, path, and expiration time.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.cookies = {\n      domain: \"hanami.example.com\",\n      secure: true,\n      httponly: true,\n      path: \"/foo\",\n      max_age: 300\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Routes\nDESCRIPTION: Example of routing configuration in Hanami, showing how to set up the root route\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: JSON Template Rendering in Hanami\nDESCRIPTION: ERB template for rendering JSON response in a Hanami dashboard view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/mime-types.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n{\"foo\":\"bar\"}\n```\n\n----------------------------------------\n\nTITLE: Creating a Books Migration\nDESCRIPTION: This migration creates a books table with title and author columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrate/20221113050928_create_books.rb\n\nROM::SQL.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, :text, null: false\n      column :author, :text, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Templates Directory in Hanami\nDESCRIPTION: Shows how to configure a custom root directory for mailer templates in Hanami application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/templates.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf.rb\n# ...\n\nHanami::Mailer.configure do\n  # ...\n  root 'path/to/templates'\nend.load!\n```\n\n----------------------------------------\n\nTITLE: Content Security Policy Configuration in Hanami\nDESCRIPTION: Shows how to configure Content Security Policy settings for asset loading from CDN or external sources.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/assets.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n\n      # If we're using our own CDN\n      security.content_security_policy \"default-src https://123.cloudfront.net;\"\n\n      # Or if we're just using jQuery public CDN\n      # security.content_security_policy \"default-src none; script-src 'self' https://code.jquery.com;\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflections in Ruby for Hanami Autoloading\nDESCRIPTION: This code snippet demonstrates how to configure inflections for acronyms in a Hanami application, ensuring proper constant resolution for autoloading.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index Template in Hanami\nDESCRIPTION: ERB template for displaying the list of books. It shows a placeholder message when there are no books, and lists all books when present.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_21\n\nLANGUAGE: erb\nCODE:\n```\n<h2>All books</h2>\n\n<% if books.any? %>\n  <div id=\"books\">\n    <% books.each do |book| %>\n      <div class=\"book\">\n        <h2><%= book.title %></h2>\n        <p><%= book.author %></p>\n      </div>\n    <% end %>\n  </div>\n<% else %>\n  <p class=\"placeholder\">There are no books yet.</p>\n<% end %>\n<a href=\"/books/new\">New book</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Home Index Template (ERB)\nDESCRIPTION: This snippet shows the content of the ERB template file `app/templates/home/index.html.erb`. It defines the basic HTML structure for the home page, including an `<h1>` tag with the text \"Welcome to Bookshelf\", which satisfies the requirement of the updated RSpec test.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_12\n\nLANGUAGE: erb\nCODE:\n```\n# app/templates/home/index.html.erb\n\n<h1>Welcome to Bookshelf</h1>\n```\n\n----------------------------------------\n\nTITLE: Less Than or Equal Validation in Hanami\nDESCRIPTION: Shows validation for numbers less than or equal to a value.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { lteq?(6) }\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Passing Root Spec (Shell)\nDESCRIPTION: This output shows the result of running the RSpec root spec after implementing the route, action, view, and template. It indicates that the 'is successful' test now passes, confirming the root path returns a successful response with the expected content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nRoot\n  is successful\n\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index View with Pagination\nDESCRIPTION: This view uses the ROM relation to fetch and paginate books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        include Deps[\"persistence.rom\"]\n\n        expose :books do |page:, per_page:|\n          rom.relations[:books]\n            .select(:title, :author)\n            .order(:title)\n            .page(page)\n            .per_page(per_page)\n            .to_a\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice Imports in Admin Slice\nDESCRIPTION: Shows how to configure the Admin slice to import components from the CDN slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/admin.rb\n\nmodule Admin\n  class Slice < Hanami::Slice\n    import from: :cdn\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: RSpec Feature Test for Book Creation\nDESCRIPTION: Feature spec testing the book creation functionality including validation and error handling\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.feature \"Creating books\" do\n  it \"creates a book when given valid attributes\" do\n    visit \"/books/new\"\n\n    fill_in \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    fill_in \"Author\", with: \"Sandi Metz\"\n    click_on \"Create\"\n\n    expect(page).to have_content \"Book created\"\n    expect(page).to have_selector \"h1\", text: \"Practical Object-Oriented Design in Ruby\"\n    expect(page).to have_selector \"p\", text: \"Sandi Metz\"\n  end\n\n  it \"shows errors and does not create the book when given invalid attributes\" do\n    visit \"/books/new\"\n\n    fill_in \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    click_on \"Create\"\n\n    expect(page).to have_content \"Could not create book\"\n    expect(page).to have_field \"Title\", with: \"Practical Object-Oriented Design in Ruby\"\n    expect(page).to have_field \"Author\", with: \"\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Value Coercion in Hanami Entities\nDESCRIPTION: Demonstration of how Hanami entities automatically coerce values according to the internal schema, converting a string timestamp to a Time object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.new(created_at: \"Sun, 13 Nov 2016 09:41:09 GMT\")\n\nbook.created_at       # => 2016-11-13 09:41:09 UTC\nbook.created_at.class # => Time\n```\n\n----------------------------------------\n\nTITLE: Providing an Alternative Context Object During Direct View Rendering (Ruby)\nDESCRIPTION: Shows how to supply a custom or alternative context object (`my_alternative_context`) when rendering a view directly using its `call` method. This overrides the default context for that specific rendering.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmy_view.call(context: my_alternative_context)\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL in Environment (.env) Files (Shell/Env File)\nDESCRIPTION: These lines illustrate how to configure the database connection by specifying the DATABASE_URL environment variable in a .env file, commonly loaded via the dotenv gem. The variable may reference SQLite, PostgreSQL, or MySQL URLs. This determines the default connection for development, with test URLs auto-derived. Inputs: appropriate URLs per target DBMS. Outputs: Environment-available connection strings for usage by Hanami and underlying ORM layers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nDATABASE_URL=sqlite://config/db/development.sqlite\nDATABASE_URL=postgres://localhost/bookshelf_development\nDATABASE_URL=mysql2://user:password@localhost/bookshelf_dev\n```\n\n----------------------------------------\n\nTITLE: Booting Hanami Application in config.ru\nDESCRIPTION: This snippet shows how to boot a Hanami application in the config.ru file. It requires the Hanami boot file and runs the Hanami app.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/booting.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami/boot\"\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Hanami Generate Commands\nDESCRIPTION: Shows available generators for actions and slices in Hanami 2.0.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate --help\n\nCommands:\n  hanami generate action NAME\n  hanami generate slice NAME\n```\n\n----------------------------------------\n\nTITLE: Defining Slice-specific Base Action Class in Ruby for Hanami\nDESCRIPTION: This snippet shows the base action class generated by Hanami for each slice in an application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/admin/action.rb\n\nmodule Admin\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Routes in Hanami\nDESCRIPTION: This snippet demonstrates how to define basic routes in a Hanami application using the config.ru file. It shows how to map URLs to specific actions in controllers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire 'hanami/router'\n\napp = Hanami::Router.new do\n  get '/', to: ->(env) { [200, {}, ['Welcome']] }\n  get '/greet/:name', to: ->(env) { [200, {}, [\"Hello #{env['router.params'][:name]}!\"]] }\nend\n\nrun app\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Book Show Action\nDESCRIPTION: This shell command runs RSpec tests for the Book Show action, verifying both successful and not found scenarios.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/show_spec.rb\n\nGET /books/:id\n  when a book matches the given id\n    renders the book\n  when no book matches the given id\n    returns not found\n\nFinished in 0.07726 seconds (files took 1.29 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Default Hanami Base Action Class\nDESCRIPTION: Shows the standard base action class generated by Hanami for new applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Relation\nDESCRIPTION: This command generates a relation in Hanami 2.2. The example creates a 'books' relation. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate relation books\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate relation --help\n```\n\n----------------------------------------\n\nTITLE: Basic Migration File Structure in Hanami\nDESCRIPTION: Shows the typical structure of a migration file in Hanami including the up and down methods for creating and dropping a table.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title, String, null: false\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\n end\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Rake Task in Hanami\nDESCRIPTION: Example of creating a custom Rake task for exporting books to an external service.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# rakelib/export.rake\n\nnamespace :export do\n  desc 'Export books to algolia service'\n  task :books do\n    ExportInteractor.new.call\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in .env.test for Hanami\nDESCRIPTION: This snippet shows the content of a .env.test file, which sets database URL and disables analytics for the test environment in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nDATABASE_URL=postgres://localhost:5432/bookshelf_test\nANALYTICS_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Displaying Routes in Hanami\nDESCRIPTION: This command displays the application's routes in a human-friendly format. It shows the HTTP method, path, action, and named route (if any) for each defined route.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/routes.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home.index                    as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nPOST    /books                        books.create\n```\n\n----------------------------------------\n\nTITLE: Basic HTML5 Helper Usage in Layouts\nDESCRIPTION: Shows how to use the HTML5 helper in a Hanami layout to generate an HTML aside element with nested content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    class ApplicationLayout\n      include Web::Layout\n\n      def sidebar\n        html.aside(id: 'sidebar') do\n          div 'hello'\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= sidebar %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<aside id=\"sidebar\">\n  <div>hello</div>\n</aside>\n```\n\n----------------------------------------\n\nTITLE: Ordering Middleware with Before/After\nDESCRIPTION: Shows how to control middleware ordering using before/after options\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/rack-integration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.middleware.use Rack::Auth::Basic\n    config.middleware.use Rack::MethodOverride\n    config.middleware.use Rack::ShowStatus, before: Rack::Auth::Basic\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Delimiter Examples in Number Formatting\nDESCRIPTION: Shows how to customize the thousands delimiter when formatting numbers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1_000_000)                 # => \"1,000,000\"\nformat_number(1_000_000, delimiter: '.') # => \"1.000.000\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Hanami Interactor Results in Ruby\nDESCRIPTION: Shows the key method calls and properties available on Hanami::Interactor::Result objects. The result object provides access to exposed instance variables and error tracking functionality through the errors accessor.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Interactor#call\nHanami::Interactor::Result\n.errors\n```\n\n----------------------------------------\n\nTITLE: Filtering Sensitive Information in Logs\nDESCRIPTION: Configuration to filter sensitive parameters like passwords from being logged in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  environment :development do\n    logger level: :debug, filter: %w[password password_confirmation]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Puma Server in Production\nDESCRIPTION: Command to start the Puma server in production mode using a configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/server.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec puma -C config/puma.rb\n```\n\n----------------------------------------\n\nTITLE: Handling Unknown Attributes in Hanami Entities\nDESCRIPTION: Example showing how Hanami entities ignore unknown attributes during initialization and raise NoMethodError when attempting to access undefined attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nbook = Book.new(unknown: \"value\")\n\nbook.unknown # => NoMethodError\nbook.foo     # => NoMethodError\n```\n\n----------------------------------------\n\nTITLE: Video Asset Helper with Multiple Sources in Hanami\nDESCRIPTION: Demonstrates using the video helper with multiple source files and fallback content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/assets.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  video do\n    text \"Your browser does not support the video tag\"\n    source src: asset_path('movie.mp4'), type: 'video/mp4'\n    source src: asset_path('movie.ogg'), type: 'video/ogg'\n  end\n%>\n```\n\nLANGUAGE: html\nCODE:\n```\n<video>\n  Your browser does not support the video tag\n  <source src=\"/assets/movie.mp4\" type=\"video/mp4\">\n  <source src=\"/assets/movie.ogg\" type=\"video/ogg\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Decorating Context Attributes in Hanami\nDESCRIPTION: Demonstrates how to decorate context attributes as parts in a custom Hanami context class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/context.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      # Return the current_user as a Bookshelf::Views::Parts::User\n      decorate :current_user, as: :user\n\n      def current_user\n        # ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Home View for Index Action\nDESCRIPTION: View implementation for the home index action. This view is responsible for rendering the corresponding template when the action is called.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/home/index.rb\nmodule Web\n  module Views\n    module Home\n      class Index\n        include Web::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Home Show Action Class in Ruby\nDESCRIPTION: Generated action class for handling home show requests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Home\n      class Show < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Maybe Validation Macro in Hanami\nDESCRIPTION: Shows how to use the maybe macro for optional values that must conform to specific types when present.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age).maybe(:int?)\n```\n\n----------------------------------------\n\nTITLE: Using Concrete Classes for Parameter Validation in Hanami\nDESCRIPTION: This example shows how to extract parameter validation logic into a separate class and use it in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/signup/my_params.rb\nmodule Web\n  module Controllers\n    module Signup\n      class MyParams < Web::Action::Params\n        MEGABYTE = 1024 ** 2\n\n        params do\n          required(:name).filled(:str?)\n          required(:email).filled(:str?, format?: /@/).confirmation\n          required(:password).filled(:str?).confirmation\n          required(:terms_of_service).filled(:bool?)\n          required(:age).filled(:int?, included_in?: 18..99)\n          optional(:avatar).filled(size?: 1..(MEGABYTE * 3)\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/signup/create.rb\nrequire_relative './my_params'\n\nmodule Web\n  module Controllers\n    module Signup\n      class Create\n        include Web::Action\n        params MyParams\n\n        def call(params)\n          if params.valid?\n            # ...\n          else\n            # ...\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Models for Has One Association in Hanami\nDESCRIPTION: Shell commands to generate the User and Avatar models for a one-to-one relationship using Hanami's model generator.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model user\n      create  lib/bookshelf/entities/user.rb\n      create  lib/bookshelf/repositories/user_repository.rb\n      create  db/migrations/20171024083639_create_users.rb\n      create  spec/bookshelf/entities/user_spec.rb\n      create  spec/bookshelf/repositories/user_repository_spec.rb\n\n$ bundle exec hanami generate model avatar\n      create  lib/bookshelf/entities/avatar.rb\n      create  lib/bookshelf/repositories/avatar_repository.rb\n      create  db/migrations/20171024083725_create_avatars.rb\n      create  spec/bookshelf/entities/avatar_spec.rb\n      create  spec/bookshelf/repositories/avatar_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Home Show Template in ERB\nDESCRIPTION: Template file for rendering the welcome message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\n<h1>Welcome to Bookshelf</h1>\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec Feature Tag for Database Examples - Ruby\nDESCRIPTION: Sets up RSpec for feature specs to tag them automatically with :db, allowing later hooks/cleaners to isolate database-related tests. This snippet belongs in spec/support/db.rb and depends on RSpec as the testing framework. No extra parameters besides type: :feature are required.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\n# Tag feature spec examples as `:db`\\n#\\n# See support/db/cleaning.rb for how the database is cleaned around these `:db` examples.\\nRSpec.configure do |config|\\n  config.define_derived_metadata(type: :feature) do |metadata|\\n    metadata[:db] = true\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Part with format_number Helper in Hanami\nDESCRIPTION: Shows how to create a part in Hanami that uses the format_number helper to format the count of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/books.rb\n\nmodule Bookshelf\n  module Views\n    module Parts\n      module Books\n        def formatted_count\n          helpers.format_number(value.count)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Slice-Specific Base Action Class in Hanami\nDESCRIPTION: Demonstrates the base action class generated for individual slices in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/inheritance.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Admin\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Data Structure from a ROM Relation (`books.to_a`) in Ruby\nDESCRIPTION: Displays the example output of calling `to_a` on the `books` relation, showing an array of hashes representing the records with their attributes and data types (like `<Date>`). This serves as input context for dynamic column examples.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.to_a\n[{:id=>1,\n  :language_id=>1,\n  :publisher_id=>1,\n  :title=>\"To Kill a Mockingbird\",\n  :isbn13=>\"9780060935467\",\n  :pages=>336,\n  :publication_date=><Date: 1960-07-11>},\n {:id=>2,\n  :language_id=>1,\n  :publisher_id=>2,\n  :title=>\"Go Set a Watchman\",\n  :isbn13=>\"9780062409867\",\n  :pages=>288,\n  :publication_date=><Date: 2016-05-03>}]\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Database URL\nDESCRIPTION: Sets up the database connection URL for the development environment using environment variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: env\nCODE:\n```\n# .env.development\nDATABASE_URL=\"database_type://username:password@localhost/bookshelf_development\"\n```\n\n----------------------------------------\n\nTITLE: Using Hanami Generators\nDESCRIPTION: Examples of generating actions and slices using Hanami generators.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami generate action books.show\n$ hanami generate slice api\n```\n\n----------------------------------------\n\nTITLE: RSpec Test Results for Book Creation\nDESCRIPTION: Shell output showing successful test results for the book creation endpoint, including both valid and invalid parameter scenarios\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/create_spec.rb\n\nPOST /books\n  given valid params\n    creates a book\n  given invalid params\n    returns 422 unprocessable\n\nFinished in 0.07143 seconds (files took 1.32 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced DB Provider with Plugins and Extensions (Hanami/Ruby)\nDESCRIPTION: This code block shows how to customize the DB provider for a Hanami application in config/providers/db.rb. It demonstrates setting a direct database URL, activating a PostgreSQL adapter, registering ROM plugins (like instrumentation and auto_restrictions), and enabling multiple Sequel extensions. Dependencies include Hanami framework, ROM plugins, and Sequel extensions. Inputs: custom configuration inside a Ruby block. Output: Extended provider setup for use application-wide. Constraints: Should be placed within the config/providers directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.configure_provider :db do\n  config.gateway :default do |gw|\n    # In addition to putting it in the DATABASE_URL env\n    # variable, it can also be set in code here\n    gw.database_url = \"postgres://localhost:5432/mydb\"\n\n    # The default PostgreSQL configuration would look like this\n    gw.adapter :sql do |sql|\n      # ROM plugins are organized under the applicable component type\n      # this plugin is named 'instrumentation' and applies to ROM::Relation\n      sql.plugin relations: :instrumentation do |plugin|\n        # If the plugin defines a config object with more options\n        # you can yield it here and set the values\n        plugin.notifications = slice[\"notifications\"]\n      end\n\n      # Not every plugin requires extra configuration\n      sql.plugin relations: :auto_restrictions\n\n      # Sequel extensions are registered with a single symbolic name\n      # sql.extension supports multiple arguments, and you can call it\n      # multiple times. We split these up into two simply for readability.\n      sql.extension :caller_logging, :error_sql, :sql_comments\n      sql.extension :pg_array, :pg_enum, :pg_json, :pg_range\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Controller with Custom Validation\nDESCRIPTION: Demonstrates how to use custom validation params in a Hanami controller action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/custom-predicates.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Signup\n      class Create\n        include Web::Action\n        params Params\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Template Association in Ruby\nDESCRIPTION: Demonstrates how to associate a custom template file with a view class using the template method in Ruby.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/templates.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\\nmodule Web::Views::Dashboard\\n  class Index\\n    include Web::View\\n    template 'home/index'\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in Hanami (Shell)\nDESCRIPTION: Commands to run migrations in Hanami, including migrating to the latest version and migrating to a specific version.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate # Migrates to max migration (20171024085858)\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate 20171024083639 # Migrates (down) to 20171024083639\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in Hanami Actions\nDESCRIPTION: Shows how to read cookie values from the request object in a Hanami action.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/cookies.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          request.cookies[\"tasty_cookie\"] # => \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Home Index Action (Ruby)\nDESCRIPTION: This code shows the generated Hanami action class `Bookshelf::Actions::Home::Index` located in `app/actions/home/index.rb`. It inherits from `Bookshelf::Action` and defines an empty `handle` method, which will be executed when the corresponding route is accessed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Index < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating New Hanami Application\nDESCRIPTION: Shows the command to generate a new Hanami application named 'admin' within an existing project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate app admin\n```\n\n----------------------------------------\n\nTITLE: Basic Number Formatting in Hanami Views\nDESCRIPTION: Demonstrates how to use the format_number helper method within a Hanami view class to format a download count value for display.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Show\n        include Web::View\n\n        def download_count\n          format_number book.download_count\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing CDN Purge Operation in CDN Slice\nDESCRIPTION: Defines a CDN purge operation in a dedicated CDN slice, which can be used by other slices.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/book_covers/purge.rb\n\nmodule CDN\n  module BookCovers\n    class Purge\n      def call(book_cover_path)\n        # \"Purging logic here!\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Available Hanami Commands\nDESCRIPTION: Shows how to list all available Hanami commands using the CLI. This command provides an overview of the actions that can be performed with Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami\n```\n\n----------------------------------------\n\nTITLE: Console Environment Variable Demo - Shell\nDESCRIPTION: Shows how to set environment variables when launching the Hanami console\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ANALYTICS_ENABLED=true MAX_CART_ITEMS=100 bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Creating Project File with UUID Primary Key in Hanami Repository\nDESCRIPTION: This snippet shows how to create a project file with a UUID primary key in a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nProjectFileRepository.new.create(name: \"source.rb\")\n  # => #<ProjectFile:0x007ff29c4b9740 @attributes={:id=>\"239f8e0f-d764-4a76-aaa7-7b59b5301c72\", :name=>\"source.rb\"}>\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Attributes in Strict Mode Hanami Entities\nDESCRIPTION: This example shows that omitting any required attribute when instantiating a Hanami entity in strict mode results in an ArgumentError. Even when some attributes are provided, all are required.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new(id: 1, name: \"Luca\", age: 35)\n  # => ArgumentError: :email is missing in Hash input\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Keys in Strict Mode Hanami Entities\nDESCRIPTION: This example demonstrates how instantiating a Hanami entity in strict mode with missing keys results in an ArgumentError. In strict mode, all attributes defined in the schema must be provided.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new\n  # => ArgumentError: :id is missing in Hash input\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console in Test Environment\nDESCRIPTION: This command demonstrates how to start the Hanami console in the test environment using the HANAMI_ENV environment variable.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in Hanami Ruby Application\nDESCRIPTION: This snippet shows how to define routes in a Hanami application's routes.rb file. It includes a root route, a basic GET route, and resource routes for books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/routing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nroot        to: 'home#index'\nget '/foo', to: 'foo#index'\n\nresources :books\n```\n\n----------------------------------------\n\nTITLE: Running a Hanami Command with Plugin Hooks\nDESCRIPTION: Shows the output of running a Hanami command that has been extended with before and after hooks. The example demonstrates the 'db migrate' command with the previously defined hooks.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/plugins.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate\nI am about to migrate database..\n# ...\nThe database has 23 tables\n```\n\n----------------------------------------\n\nTITLE: Running Hanami App with Puma\nDESCRIPTION: Example of booting a Hanami application in a Puma web server configuration file (config.ru).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/booting.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami/boot\"\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for JSONB Column in PostgreSQL with Hanami\nDESCRIPTION: This migration creates a 'commits' table with a JSONB column for metadata using PostgreSQL's jsonb data type.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :commits do\n      primary_key       :id\n      column :metadata, \"jsonb\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Expanded Interactor Test with Book Creation\nDESCRIPTION: Enhanced RSpec test that verifies the AddBook interactor creates a Book entity with the correct attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/bookshelf/interactors/add_book_spec.rb\n\nRSpec.describe AddBook do\n  let(:interactor) { AddBook.new }\n  let(:attributes) { Hash[author: \"James Baldwin\", title: \"The Fire Next Time\"] }\n\n  context \"good input\" do\n    let(:result) { interactor.call(attributes) }\n\n    it \"succeeds\" do\n      expect(result.successful?).to be(true)\n    end\n\n    it \"creates a Book with correct title and author\" do\n      expect(result.book.title).to eq(\"The Fire Next Time\")\n      expect(result.book.author).to eq(\"James Baldwin\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Action-Specific OmniAuth Middleware\nDESCRIPTION: Shows how to mount OmniAuth middleware for specific actions using the Action module, which provides better performance than global middleware for targeted functionality.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/rack-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/sessions/create.rb\nrequire 'omniauth'\n\nmodule Web\n  module Controllers\n    module Sessions\n      class Create\n        include Web::Action\n\n        use OmniAuth::Builder {\n          # ...\n        }\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Root Route Configuration with Action\nDESCRIPTION: Demonstrates how to configure the root route using the controller#action naming convention.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nroot to: \"home#index\" # => will route to Web::Controllers::Home::Index\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Hanami Inflector in Ruby\nDESCRIPTION: Shows how to replace the default inflector with a custom implementation that provides the same interface as Dry::Inflector.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/inflector.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\nrequire \"my_inflector\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflector = MyInflector.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Home Feature Spec using Capybara (Ruby)\nDESCRIPTION: This RSpec feature spec utilizes Capybara to test the home page from a user's perspective. It simulates visiting the root path ('/') and asserts that the page content includes \"Welcome to Bookshelf\". This replaces the previous request spec for testing HTML pages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.feature \"Home\" do\n  scenario \"visiting the home page shows a welcome message\" do\n    visit \"/\"\n\n    expect(page).to have_content \"Welcome to Bookshelf\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Tags in Ruby\nDESCRIPTION: Uses the audio_tag helper to generate <audio> tags for audio assets or absolute URLs. It supports HTML attributes and allows for custom content within the tag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"song.ogg\")\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\"></audio>\n\naudio_tag(\"https://example.com/song.ogg\")\n# => <audio src=\"https://example.com/song.ogg\"></audio>\n```\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"song.ogg\", autoplay: true, controls: true)\n# => <audio autoplay=\"autoplay\" controls=\"controls\" src=\"/assets/song-DJHI6WQI.ogg\"></audio>\n```\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"song.ogg\") do\n  \"Your browser does not support the audio tag.\"\nend\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\">\n#      Your browser does not support the audio tag.\n#    </audio>\n```\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"song.ogg\") do\n  tag.track(kind: \"captions\", src: asset_url(\"movie.en.vtt\"), srclang: \"en\", label: \"English\")\nend\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\">\n#      <track kind=\"captions\" src=\"/assets/movie.en-98EA6E4F.vtt\" srclang=\"en\" label=\"English\">\n#    </audio>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Partial with Explicit Locals in ERB - ERB\nDESCRIPTION: This code illustrates rendering a partial template in ERB while supplying specific local variables via keyword arguments. In this case, 'my_locals' is passed to the partial template for use within that scope, replacing the calling template's locals. This mechanism provides precise control over the data visible within partials.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/templates-and-partials.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n<%= render \"path/to/my_partial\", my_locals: \"go here\" %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami App Settings in Ruby\nDESCRIPTION: This snippet shows how to configure various settings within a Hanami App. It includes examples of setting the environment, enabling or disabling features, and configuring middleware.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  class App < Hanami::App\n    config do\n      environment :production\n\n      base_url \"https://example.com\"\n\n      magic_comments \"typed: true\"\n\n      middleware.use MyCustomMiddleware\n\n      assets do\n        fingerprint true\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring JDBC Database URL\nDESCRIPTION: Demonstrates how to configure a JDBC database connection URL with username and password as query parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nDATABASE_URL=\"jdbc-database_type://localhost/bookshelf_test?user=username&password=password\"\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Routes to Singular RESTful Resource in Hanami\nDESCRIPTION: This snippet demonstrates how to add custom routes for a singular resource, including member and collection routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account do\n  member do\n    # Generates /account/avatar, maps to Account::Avatar, named :avatar_account\n    get 'avatar'\n  end\n\n  collection do\n    # Generates /account/authorizations, maps to Account::Authorizations, named :authorizations_account\n    get 'authorizations'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Flash Messages in Hanami Actions\nDESCRIPTION: An example showing how to test flash messages in Hanami actions using the exposures hash to access flash data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/controllers/users/create_spec.rb\nrequire_relative '../../../../apps/web/controllers/users/create'\n\nRSpec.describe Web::Controllers::Users::Create do\n  let(:action)  { Web::Controllers::Users::Create.new }\n  let(:user_params) { name: 'Luca' }\n\n  it \"is successful\" do\n    response = action.call(id: user_params)\n    flash = action.exposures[:flash]\n\n    expect(flash[:info]).to eq('User was successfully created')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Route Namespacing in Hanami\nDESCRIPTION: Demonstrates how to group routes under a common namespace prefix.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nnamespace 'docs' do\n  get '/installation', to: 'docs#installation'\n  get '/usage',        to: 'docs#usage'\nend\n\n# This will generate:\n#\n#   /docs/installation\n#   /docs/usage\n```\n\n----------------------------------------\n\nTITLE: Testing AddBook Interactor with RSpec\nDESCRIPTION: RSpec test suite for the AddBook interactor showing both success cases and persistence testing using doubles.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe AddBook do\n  let(:interactor) { AddBook.new }\n  let(:attributes) { Hash[author: \"James Baldwin\", title: \"The Fire Next Time\"] }\n\n  context \"good input\" do\n    let(:result) { interactor.call(attributes) }\n\n    it \"succeeds\" do\n      expect(result.successful?).to be(true)\n    end\n\n    it \"creates a Book with correct title and author\" do\n      expect(result.book.title).to eq(\"The Fire Next Time\")\n      expect(result.book.author).to eq(\"James Baldwin\")\n    end\n  end\n\n  context \"persistence\" do\n    let(:repository) { instance_double(\"BookRepository\") }\n\n    it \"persists the Book\" do\n      expect(repository).to receive(:create)\n      AddBook.new(repository: repository).call(attributes)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing Hanami Application Structure in Shell\nDESCRIPTION: Commands to navigate to the new application directory and view its file structure using the tree command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd bookshelf\n$ tree .\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action for Books Index\nDESCRIPTION: This shell command generates a new Hanami action for the books index, skipping view and test generation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index --skip-view --skip-tests\n```\n\n----------------------------------------\n\nTITLE: Inheriting from Base Action Class in Ruby for Hanami\nDESCRIPTION: This snippet shows how to inherit from the base action class, automatically gaining its behavior without additional code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Home Index Action with Welcome Message\nDESCRIPTION: This snippet shows the updated Home Index action, setting the response body to \"Welcome to Bookshelf\".\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.body = \"Welcome to Bookshelf\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Aliasing with Story Repository in Hanami\nDESCRIPTION: Enhanced Story repository implementation that uses aliasing to rename associations with more meaningful names like 'commenters' instead of 'users'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/story_repository.rb\nclass StoryRepository < Hanami::Repository\n  associations do\n    belongs_to :user\n    has_many :comments\n    has_many :users, through: :comments, as: :commenters\n  end\n\n  def find_with_comments(id)\n    aggregate(:user, comments: :commenter).where(id: id).map_to(Story).one\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration in Hanami via Command Line\nDESCRIPTION: Example of running a Hanami command to create a database migration for creating a books table.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ hanami db create_migration create_books\n```\n\n----------------------------------------\n\nTITLE: Precision Examples in Number Formatting\nDESCRIPTION: Demonstrates how to use the precision option when formatting numbers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(Math::PI)               # => \"3.14\"\nformat_number(Math::PI, precision: 6) # => \"3.141592\"\n```\n\n----------------------------------------\n\nTITLE: Preparing Database in Hanami (Shell)\nDESCRIPTION: Command to prepare the database for the current environment in Hanami. This creates the database, loads SQL dump if any, and runs pending migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Test in Shell\nDESCRIPTION: Command to run a specific RSpec test file for the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/root_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Route\nDESCRIPTION: Route configuration for the books index action in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nget '/books', to: 'books#index'\n```\n\n----------------------------------------\n\nTITLE: Home Feature Spec in Ruby\nDESCRIPTION: Capybara feature spec for testing the home page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.feature \"Home\" do\n  scenario \"visiting the home page shows a welcome message\" do\n    visit \"/\"\n\n    expect(page).to have_content \"Welcome to Bookshelf\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using format_number in Hanami Templates\nDESCRIPTION: Demonstrates how to use the format_number helper method in Hanami templates to format integer and float numbers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n<span><%= format_number(1_000_000) %></span>\n<span><%= format_number(1_000_000.10) %></span>\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Database Commands\nDESCRIPTION: Shows various database-related commands in Hanami. These commands help manage database migrations and schema updates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db create\n$ bundle exec hanami db migrate\n$ bundle exec hanami db rollback\n$ bundle exec hanami db version\n```\n\n----------------------------------------\n\nTITLE: Implementing Hanami Action for JSON Response in Ruby\nDESCRIPTION: This snippet shows the implementation of a Hanami action that corresponds to the previous test. It handles a request by returning a JSON response with the provided book ID.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Users\n      class Show < Action\n        format :json\n\n        def handle(request, response)\n          response.body = {id: request.params[:id]}.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Precision in format_number Helper\nDESCRIPTION: Illustrates how to customize the precision of the formatted number using the format_number helper in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(Math::PI)               # => \"3.14\"\nformat_number(Math::PI, precision: 6) # => \"3.141592\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Middleware in Hanami\nDESCRIPTION: This code shows how to configure the body parser middleware in Hanami to handle JSON payloads.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/parameters.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nrequire \"hanami/middleware/body_parser\"\n\nHanami.configure do\n  # ...\n  middleware.use Hanami::Middleware::BodyParser, :json\nend\n```\n\n----------------------------------------\n\nTITLE: Running Database Migration\nDESCRIPTION: This shell command runs the database migration to create the books table in development and test environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db migrate\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Exception Handler in Hanami Action\nDESCRIPTION: This snippet demonstrates how to create a custom exception and handle it with a custom method. It includes defining a PermissionDenied exception, raising it conditionally, and handling it with a custom method that sets the status and message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/exception-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class PermissionDenied < StandardError\n        def initialize(role)\n          super \"You must be admin, but you are: #{ role }\"\n        end\n      end\n\n      class Index\n        include Web::Action\n        handle_exception PermissionDenied => :handle_permission_error\n\n        def call(params)\n          unless current_user.admin?\n            raise PermissionDenied.new(current_user.role)\n          end\n\n          # ...\n        end\n\n        private\n        def handle_permission_error(exception)\n          status 403, exception.message\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami View Helper Implementation\nDESCRIPTION: Shows how to implement a custom helper method in a Hanami view for books, demonstrating the link_to helper usage.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/books/show.rb\nmodule Web::Views::Books\n  include Web::View\n\n  def home_page_link\n    link_to \"Home\", \"/\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Authentication in Hanami Application\nDESCRIPTION: Sets up global authentication by including the authentication module in all controllers using the prepare block in the application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/share-code.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nrequire_relative './controllers/authentication'\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      controller.prepare do\n        include Web::Authentication\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring DatabaseCleaner for RSpec\nDESCRIPTION: This snippet sets up DatabaseCleaner to ensure a clean database state between tests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/support/database_cleaner.rb\n\nrequire \"database_cleaner-sequel\"\n\nHanami.app.prepare(:persistence)\nDatabaseCleaner[:sequel, db: Hanami.app[\"persistence.db\"]]\n\nRSpec.configure do |config|\n  config.before(:suite) do\n    DatabaseCleaner.strategy = :transaction\n    DatabaseCleaner.clean_with(:truncation)\n  end\n\n  config.around(:each, type: :database) do |example|\n    DatabaseCleaner.cleaning do\n      example.run\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Link Helpers with HTML Generator\nDESCRIPTION: Demonstrates how to combine link_to helpers with the HTML generator, handling different scenarios for rendering link elements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.div do\n  link_to('hello', routes.root_path, class: 'btn')\nend\n# => <div>\n# =>   <a href=\"/\" class=\"btn\">hello</a>\n# => </div>\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.div do\n  link_to('Users', routes.users_path, class: 'btn') +\n    link_to('Books', routes.books_path, class: 'btn')\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.div do\n  text link_to('Users', routes.users_path, class: 'btn')\n  hr\n  text link_to('Books', routes.books_path, class: 'btn')\nend\n\n# => <div>\n# =>   <a href=\"/users\" class=\"btn\">Users</a>\n# =>   <hr>\n# =>   <a href=\"/posts\" class=\"btn\">Books</a>\n# => </div>\n```\n\n----------------------------------------\n\nTITLE: Improved View Helper Implementation\nDESCRIPTION: Shows the proper way to implement a number formatting helper in a Hanami view with explicit interface.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/books/show.rb\nmodule Web::Views::Books\n  include Web::View\n\n  def downloads_count\n    format_number book.downloads_count\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console in Shell\nDESCRIPTION: This command starts the Hanami console (REPL) in the development environment. It provides an interactive prompt for executing Ruby code within the context of your Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/console.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console\n\nbookshelf[development]>\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Books\nDESCRIPTION: Database migration to create the books table with id, title, and timestamp columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n      column :title,      String\n      column :created_at, DateTime\n      column :updated_at, DateTime\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Status in Hanami Action\nDESCRIPTION: This example shows how to set a custom HTTP status code in a Hanami action using the status= method. It's used in a form submission scenario to return a 422 status for invalid params.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/control-flow.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/books/create.rb\nmodule Web\n  module Controllers\n    module Books\n      class Create\n        include Web::Action\n\n        params do\n          required(:title).filled(:str?)\n        end\n\n        def call(params)\n          if params.valid?\n            # persist\n          else\n            self.status = 422\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Greater Than Validation in Hanami\nDESCRIPTION: Shows how to validate numbers greater than a threshold.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { gt?(18) }\n```\n\n----------------------------------------\n\nTITLE: Multiple Variable Parameters in Hanami Routes\nDESCRIPTION: Example of using multiple dynamic segments in a single route path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nget '/books/:book_id/reviews/:id', to: 'reviews#show'\n```\n\n----------------------------------------\n\nTITLE: Implementing Globbing and Catch-all Routes in Hanami\nDESCRIPTION: Shows how to create catch-all routes using globbing for handling any unmatched paths.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/pages/*path\", to: \"page_catch_all\"\n\n# GET /pages/2022/my-page will invoke the Bookshelf::Actions::PageCatchAll action\n# request.params[:path] # # => 2022/my-page\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Entity Class\nDESCRIPTION: Basic entity class definition inheriting from Hanami::Entity.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Hanami::Entity\nend\n```\n\n----------------------------------------\n\nTITLE: Using Slice-Specific Settings in CDN Purge Operation\nDESCRIPTION: Demonstrates how to include and use slice-specific settings within a slice component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/cdn/book_covers/purge.rb\n\nmodule CDN\n  module BookCovers\n    class Purge\n      include Deps[\"settings\"]\n\n      def call(book_cover_path)\n        # use settings.cdn_api_key here\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Booting Hanami Application in config.ru\nDESCRIPTION: This snippet shows how to boot a Hanami application in the config.ru file. It requires the Hanami boot file and runs the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/booting.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"hanami/boot\"\n\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Implementing Redirects in Hanami Action\nDESCRIPTION: This example demonstrates how to use the redirect_to method to redirect unauthenticated users to a sign-in page. It uses a before callback to check for authentication.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/control-flow.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Action\n        before :authenticate_user!\n\n        def handle(request, response)\n          # ...\n        end\n\n        private\n\n        def authenticate_user!(request, response)\n          response.redirect_to(\"/sign-in\") unless request.session[:user_id]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Story in Hanami\nDESCRIPTION: Ruby code showing how to create a story record associated with a user in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nstories = StoryRepository.new\n\nstory = stories.create(user_id: author.id, text: \"Hello, folks\")\n  # => #<Story:0x00007ffe71b4ace0 @attributes={:id=>1, :user_id=>1, :text=>\"Hello folks\", :created_at=>2017-10-24 09:09:59 UTC, :updated_at=>2017-10-24 09:09:59 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Defining an Application-Wide Helper in Hanami\nDESCRIPTION: This snippet illustrates how to create an application-wide helper in Hanami. The 'emphasis' method is defined in a module that can be included in multiple views.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/helpers.rb\nmodule Helpers\n  def emphasis(text)\n    \"<em>#{ text }</em>\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Extending Existing Hanami Commands with Hooks\nDESCRIPTION: Illustrates how to enhance existing Hanami commands by adding before and after hooks. The example creates a fictional database analyzer that executes code before and after the 'db migrate' command runs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/plugins.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/hanami/database/analizer.rb\nmodule Hanami\n  module Database\n    module Analyzer\n      class Stats\n        def call(*)\n          puts \"The database has 23 tables\"\n        end\n      end\n    end\n  end\nend\n\nHanami::CLI::Commands.before(\"db migrate\") { puts \"I am about to migrate database..\" }\nHanami::CLI::Commands.after \"db migrate\", Hanami::Database::Analyzer::Stats.new\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Action in Container Architecture\nDESCRIPTION: This command removes an action named 'show' from the 'books' controller in the 'web' application, along with associated view, template, route, and test code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy action web books#show\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Exports in CDN Slice\nDESCRIPTION: Shows how to configure a slice to export only specific components for use by other slices.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/cdn.rb\nmodule CDN\n  class Slice < Hanami::Slice\n    export [\"book_covers.purge\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Inflector in Hanami App\nDESCRIPTION: Shows how to configure custom inflections in a Hanami application class by defining acronyms and uncountable words using config.inflections.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/inflector.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"XML\", \"NBA\", \"WNBA\"\n      inflections.uncountable(\"hanami\")\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Database Migration for Books Table\nDESCRIPTION: This shell command generates a new database migration for creating a books table.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami generate migration create_books\n```\n\n----------------------------------------\n\nTITLE: Hanami Action with Dependency Injection\nDESCRIPTION: Implementation of a Hanami action that supports dependency injection. The action accepts a repository in the constructor with a default implementation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/users/show.rb\nmodule Web\n  module Controllers\n    module Users\n      class Show\n        include Web::Action\n        expose :user\n\n        def initialize(repository: UserRepository.new)\n          @repository = repository\n        end\n\n        def call(params)\n          @user = @repository.find(params[:id])\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding database_url setting to Hanami Settings\nDESCRIPTION: Configuration for database connection string in Hanami settings. This makes database_url a required setting for the application to boot.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# config/settings.rb\n\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    # Define your app settings here, for example:\n    #\n    # setting :my_flag, default: false, constructor: Types::Params::Bool\n\n    setting :database_url, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Home Index View (Ruby)\nDESCRIPTION: This code displays the generated Hanami view class `Bookshelf::Views::Home::Index` located in `app/views/home/index.rb`. It inherits from `Bookshelf::View` and is responsible for preparing data (exposures) for and rendering the corresponding template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/home/index.rb\n\nmodule Bookshelf\n  module Views\n    module Home\n      class Index < Bookshelf::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Router-Level Middleware Stack\nDESCRIPTION: This shell command displays the middleware stack after adding router-level middleware. It shows how different middleware is applied to specific routes and scopes in the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/              Dry::Monitor::Rack::Middleware (instance)\n/              Rack::Runtime\n/restricted    Rack::Auth::Basic\n/admin         Rack::Auth::Basic\n```\n\n----------------------------------------\n\nTITLE: File Size Validation in Hanami\nDESCRIPTION: Demonstrates file size validation in bytes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nMEGABYTE = 1024 ** 2\n\nrequired(:avatar) { size?(1..(5 * MEGABYTE)) }\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action for Book Creation\nDESCRIPTION: This shell command uses Hanami's action generator to create a new action for book creation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_43\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.create --skip-view\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Control in Hanami Action\nDESCRIPTION: This snippet demonstrates how to set Cache-Control headers in a Hanami action. It uses the cache_control method to set the header with public access and a max age of 600 seconds.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/http-caching.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nrequire 'hanami/action/cache'\n\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        include Hanami::Action::Cache\n\n        cache_control :public, max_age: 600\n          # => Cache-Control: public, max-age: 600\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Invoking Part Method Rendering Inline - Hanami View - SQL/ERB\nDESCRIPTION: Illustrates calling a part method that renders a partial, directly within a template using ERB. Ensures dynamic rendering functionality via the part's custom methods. Assumes part and partial are properly defined in the Hanami app.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n<%= book.info_box %>\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Rack Middleware in Hanami\nDESCRIPTION: Demonstrates how to mount Rack middleware globally for all applications by modifying the config.ru file at the project root. This example shows basic authentication middleware implementation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/rack-integration.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config.ru\nrequire './config/environment'\nrequire 'rack/auth/basic'\n\nuse Rack::Auth::Basic\nrun Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Positioning Middleware in Hanami Stack\nDESCRIPTION: Example of adding middleware at specific positions in the middleware stack using before/after options.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/app-config.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\nconfig.middleware.use MyMiddleware, before: AlreadyAddedMiddleware\n```\n\n----------------------------------------\n\nTITLE: Generated Route in Hanami Application\nDESCRIPTION: Shows the default route generated for a books#show action in the routes.rb file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nget '/books', to: 'books#show'\n```\n\n----------------------------------------\n\nTITLE: Custom HTML Tags with Hanami Helper\nDESCRIPTION: Shows how to create custom HTML tags using the tag and empty_tag methods for self-closing and non-self-closing elements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nhtml.tag(:custom, 'Foo', id: 'next') # => <custom id=\"next\">Foo</custom>\nhtml.empty_tag(:xr, id: 'next')      # => <xr id=\"next\">\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Routes\nDESCRIPTION: Shows the configured routes in human-friendly format.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\nGET     /                             home.index                    as :root\nGET     /books                        books.index\nGET     /books/:id                    books.show\nPOST    /books                        books.create\n```\n\n----------------------------------------\n\nTITLE: Launching Hanami Console in Test Environment\nDESCRIPTION: Shell command to start the Hanami console, explicitly setting the environment to 'test' using the `HANAMI_ENV` environment variable. This ensures test-specific settings from `.env.test` and other relevant .env files are loaded.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/settings.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Grouping Results in Hanami Repository (Ruby)\nDESCRIPTION: Shows how to use the group method to group results in a Hanami repository, including a left join operation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nclass UserRepository < Hanami::Repository\n  associations do\n    has_many :books\n  end\n\n  def users_group_by_id\n    users.\n      left_join(:books).\n      group(:id)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Shared Book Loading Module in Hanami\nDESCRIPTION: Implements a shared module for loading book records that can be included in multiple actions handling book resources.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/share-code.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/books/set_book.rb\nmodule Web\n  module Controllers\n    module Books\n      module SetBook\n        def self.included(action)\n          action.class_eval do\n            before :set_book\n          end\n        end\n\n        private\n\n        def set_book\n          @book = BookRepository.new.find(params[:id])\n          halt 404 if @book.nil?\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Body Parser Middleware in Hanami 1.3.0\nDESCRIPTION: This code shows how to set up the new Hanami::Middleware::BodyParser for JSON parsing. It replaces the deprecated 'body_parsers' configuration in individual application files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v130.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nrequire \"hanami/middleware/body_parser\"\n\nHanami.configure do\n  # ...\n  middleware.use Hanami::Middleware::BodyParser, :json\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Hanami App with Specified Database (Console)\nDESCRIPTION: These shell commands demonstrate initializing a new Hanami project with a given database backend using the --database option (sqlite, postgres, or mysql). They require Hanami CLI to be installed globally. The default is SQLite, but developers can choose PostgreSQL or MySQL as alternatives. Each command will generate a new Hanami application scaffold set up with the chosen database configuration.\nInputs: Application name and database option.\nOutputs: Generated project folder with appropriate configuration files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhanami new bookshelf --database=sqlite # default\nhanami new bookshelf --database=postgres\nhanami new bookshelf --database=mysql\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Asset Compilation Configuration\nDESCRIPTION: Configuration example showing how to set different esbuild options for development (watch mode) and production (compile mode) environments using the args.watch condition.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/customization.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nawait assets.run({\n  esbuildOptionsFn: (args, esbuildOptions) => {\n    if (args.watch) {\n      // watch mode (development) options here\n    } else {\n      // compile mode (production) options here\n    }\n\n    return esbuildOptions;\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Lib Directory Autoloading Example\nDESCRIPTION: Example of a class in lib/bookshelf that can be autoloaded without requiring it explicitly.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Compilation in Hanami Application\nDESCRIPTION: Demonstrates how to configure asset compilation settings for different environments in a Hanami application. Compilation is enabled by default in development/test but disabled in production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      assets do\n        # compile true, enabled by default\n      end\n    end\n\n    configure :production do\n      assets do\n        compile false\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Haml Template Example\nDESCRIPTION: Shows how to write a simple template using the Haml template engine.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/templates.md#2025-04-23_snippet_3\n\nLANGUAGE: haml\nCODE:\n```\n# app/web/templates/dashboard/index.html.haml\\n%h1 Dashboard\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Actions\nDESCRIPTION: Command line instructions for generating Hanami actions for a complete CRUD interface.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/routing/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index\n$ bundle exec hanami generate action books.show\n$ bundle exec hanami generate action books.new\n$ bundle exec hanami generate action books.create\n$ bundle exec hanami generate action books.update\n$ bundle exec hanami generate action books.destroy\n```\n\n----------------------------------------\n\nTITLE: Empty Check Validation in Hanami\nDESCRIPTION: Shows how to check if a value is empty, working with strings and collections.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:tags) { empty? }\n```\n\n----------------------------------------\n\nTITLE: Collection Size Validation in Hanami\nDESCRIPTION: Shows size validation for collections.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:answers) { size?(2) } # only 2 answers are allowed\n```\n\n----------------------------------------\n\nTITLE: Configuring Controller for RESTful Resources in Hanami\nDESCRIPTION: This example shows how to configure a different controller for RESTful resources using the :controller option, allowing for flexibility in naming conventions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books, controller: 'manuscripts'\n\n# GET /books/1 will route to Manuscripts::Show, etc.\n```\n\n----------------------------------------\n\nTITLE: Printing Hanami Routes using Command Line\nDESCRIPTION: This command prints all the routes defined by Hanami applications. It shows the HTTP methods, paths, and corresponding controller actions for each route.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/routes.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes\n\n                     GET, HEAD  /               Web::Controllers::Home::Index\n               books GET, HEAD  /books          Web::Controllers::Books::Index\n           new_books GET, HEAD  /books/new      Web::Controllers::Books::New\n               books POST       /books          Web::Controllers::Books::Create\n               books GET, HEAD  /books/:id      Web::Controllers::Books::Show\n          edit_books GET, HEAD  /books/:id/edit Web::Controllers::Books::Edit\n               books PATCH      /books/:id      Web::Controllers::Books::Update\n               books DELETE     /books/:id      Web::Controllers::Books::Destroy\n         new_account GET, HEAD  /account/new    Web::Controllers::Account::New\n             account POST       /account        Web::Controllers::Account::Create\n             account GET, HEAD  /account        Web::Controllers::Account::Show\n        edit_account GET, HEAD  /account/edit   Web::Controllers::Account::Edit\n             account PATCH      /account        Web::Controllers::Account::Update\n             account DELETE     /account        Web::Controllers::Account::Destroy\n```\n\n----------------------------------------\n\nTITLE: Generating a Secret for Hanami Application\nDESCRIPTION: Generates a secure HTTP sessions secret for a specified application and provides the environment variable to set.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate secret web\nSet the following environment variable to provide the secret token:\nWEB_SESSIONS_SECRET=\"a6aa65a71538a56faffe1b1c9e96c0dc600de5dd14172f03c35cc48c3b27affe\"\n```\n\n----------------------------------------\n\nTITLE: Alternative migration command for zsh shell\nDESCRIPTION: Escaping square brackets in the migration command for zsh shell users to create a books migration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec rake db:create_migration\\[create_books\\]\n```\n\n----------------------------------------\n\nTITLE: Equality Validation in Hanami\nDESCRIPTION: Demonstrates equality validation checking for an exact value match.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:magic_number) { eql?(23) }\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action with Command Line\nDESCRIPTION: Command for generating a new action in a Hanami application using the built-in generator. This creates an action named 'index' in the 'dashboard' controller for the 'web' application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami generate action web dashboard#index\n```\n\n----------------------------------------\n\nTITLE: Testing Route Recognition in Hanami Routes with RSpec\nDESCRIPTION: This snippet shows how to test route recognition in Hanami using RSpec. It includes examples for recognizing GET and PATCH requests, as well as handling unknown routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/testing.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/routes_spec.rb\n\nRSpec.describe Web.routes do\n\n  # ...\n\n  it 'recognizes \"GET /\"' do\n    env   = Rack::MockRequest.env_for('/')\n    route = described_class.recognize(env)\n\n    expect(route.routable?).to be(true)\n\n    expect(route.path).to   eq('/')\n    expect(route.verb).to   eq('GET')\n    expect(route.params).to eq({})\n  end\n\n  it 'recognizes \"PATCH /books/23\"' do\n    env   = Rack::MockRequest.env_for('/books/23', method: 'PATCH')\n    route = described_class.recognize(env)\n\n    expect(route.routable?).to be(true)\n\n    expect(route.path).to   eq('/books/23')\n    expect(route.verb).to   eq('PATCH')\n    expect(route.params).to eq(id: '23')\n  end\n\n  it 'does not recognize unknown route' do\n    env   = Rack::MockRequest.env_for('/foo')\n    route = subject.recognize(env)\n\n    expect(route.routable?).to be(false)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Container Registration in Hanami (Ruby)\nDESCRIPTION: Shows how to exclude a class from Hanami's container registration using the 'auto_register: false' magic comment. This is useful for classes that won't be used as dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Library Class Definition\nDESCRIPTION: Example of a custom library class that requires explicit requiring when used.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/custom_redis/client.rb\n\nmodule CustomRedis\n  class Client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Book Creation Action\nDESCRIPTION: This shell command runs RSpec tests for the Book Creation action, verifying both successful creation and invalid parameter handling.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/create_spec.rb\n\nPOST /books\n  given valid params\n    creates a book\n  given invalid params\n    returns 422 unprocessable\n\nFinished in 0.07143 seconds (files took 1.32 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Setting Expires and Cache-Control Headers in Hanami\nDESCRIPTION: This code shows how to set both Expires and Cache-Control headers in a Hanami action for better browser compatibility. It uses the expires method to set both headers simultaneously.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/http-caching.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nrequire 'hanami/action/cache'\n\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        include Hanami::Action::Cache\n\n        expires 60, :public, max_age: 300\n          # => Expires: Mon, 18 May 2015 09:19:18 GMT\n          #    Cache-Control: public, max-age: 300\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Relation Base Class for Hanami DB - Ruby\nDESCRIPTION: Implements a base relation class using Hanami::DB::Relation, suitable for use as db/relation.rb. Required for custom relations in the Hanami repository pattern. The Bookshelf module name should be altered to match the app or slice being upgraded. Depends on hanami-db gem.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"hanami/db/relation\\\"\\n\\nmodule Bookshelf\\n  module DB\\n    class Relation < Hanami::DB::Relation\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Sources in Hanami Application\nDESCRIPTION: Ruby code showing how to configure asset sources in a Hanami application, including requiring Sass preprocessor and adding vendor assets directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/preprocessors.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nrequire 'sass'\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n\n      assets do\n        sources << [\n          # apps/web/assets is added by default\n          'vendor/assets' # app/web/vendor/assets\n        ]\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action\nDESCRIPTION: Creates an action with corresponding view, template, route, and test code. This example generates a Show action for Books controller.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action web books#show\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Application to Use Custom Helpers\nDESCRIPTION: This snippet shows how to modify the application.rb file to include a custom helper in all views. It adds the helpers directory to the load paths and includes the Web::Helpers::Shuffler module in the view preparation block.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/custom-helpers.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n\n      load_paths << [\n        'helpers',\n        'controllers',\n        'views'\n      ]\n\n      # ...\n\n      view.prepare do\n        include Hanami::Helpers\n        include Web::Helpers::Shuffler\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Helpers in a Part - Hanami View - Ruby\nDESCRIPTION: Shows using the helpers object from within a part method to access registered view helpers, avoiding naming collisions with underlying values. Demonstrates fallback logic for a cover_url using a default asset. Requires helpers to be configured in Hanami, and value to have a cover_url method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/parts.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Bookshelf::Views::Part\\n  def cover_url\\n    value.cover_url || helpers.asset_url(\"book-cover-default.png\")\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Character Set in Hanami Application\nDESCRIPTION: Shows how to change the default character set for responses in a Hanami application. The standard value is utf-8.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      default_charset 'koi8-r'\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Joining Relations in Hanami Repository (Ruby)\nDESCRIPTION: Demonstrates how to join multiple relations in a Hanami repository, including specifying custom foreign keys when needed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/sql-queries.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nclass BookRepository < Hanami::Repository\n  associations do\n    has_many :comments\n  end\n\n  def commented_within(date_range)\n    books\n      .join(comments)\n      .where(comments[:created_at].qualified => date_range)\n      .as(Book)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Books Index Controller in Hanami\nDESCRIPTION: Ruby code for the Books Index controller. It exposes all books from the repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Controllers\n    module Books\n      class Index\n        include Web::Action\n\n        expose :books\n\n        def call(params)\n          @books = BookRepository.new.all\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Puma Configuration for Hanami 2.1\nDESCRIPTION: This snippet shows the updated Puma configuration for Hanami 2.1. It includes new variables for concurrency and cluster mode, and sets up preloading and hooks for cluster mode.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\n#\n# Environment and port\n#\nport ENV.fetch(\"HANAMI_PORT\", 2300)\nenvironment ENV.fetch(\"HANAMI_ENV\", \"development\")\n\n#\n# Threads within each Puma/Ruby process (aka worker)\n#\n\n# Configure the minimum and maximum number of threads to use to answer requests.\nmax_threads_count = ENV.fetch(\"HANAMI_MAX_THREADS\", 5)\nmin_threads_count = ENV.fetch(\"HANAMI_MIN_THREADS\") { max_threads_count }\n\nthreads min_threads_count, max_threads_count\n\n#\n# Workers (aka Puma/Ruby processes)\n#\n\npuma_concurrency = Integer(ENV.fetch(\"HANAMI_WEB_CONCURRENCY\", 0))\npuma_cluster_mode = puma_concurrency > 1\n\n# How many worker (Puma/Ruby) processes to run.\n# Typically this is set to the number of available cores.\nworkers puma_concurrency\n\n#\n# Cluster mode (aka multiple workers)\n#\n\nif puma_cluster_mode\n  # Preload the application before starting the workers. Only in cluster mode.\n  preload_app!\n\n  # Code to run immediately before master process forks workers (once on boot).\n  #\n  # These hooks can block if necessary to wait for background operations unknown\n  # to puma to finish before the process terminates. This can be used to close\n  # any connections to remote servers (database, redis, …) that were opened when\n  # preloading the code.\n  before_fork do\n    Hanami.shutdown\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Asset Helper with CDN in Hanami Templates\nDESCRIPTION: Example of using the stylesheet helper in an ERB template that generates an absolute URL to a CDN when CDN mode is enabled in production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet 'application' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"https://123.cloudfront.net/assets/application-9ab4d1f57027f0d40738ab8ab70aba86.css\" type=\"text/css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Auto-registration Opt-out Example\nDESCRIPTION: Example showing how to opt out of container registration while maintaining autoloading using a magic comment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n\nrequire \"dry-struct\"\n\nmodule Bookshelf\n  module Structs\n    class Book < Dry::Struct\n      attribute :title, Types::String\n      attribute :author, Types::String\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Compiling Hanami Frontend Assets (Shell)\nDESCRIPTION: This shell command executes the Hanami assets compilation task. It processes and prepares frontend assets (like CSS and JavaScript) defined in the application, making them available for use in layouts and templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets compile\n```\n\n----------------------------------------\n\nTITLE: Setting Content-Security-Policy in Hanami\nDESCRIPTION: Default Content-Security-Policy configuration that defines trusted sources for various web resources.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/security.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nsecurity.content_security_policy %{\n  form-action 'self';\n  frame-ancestors 'self';\n  base-uri 'self';\n  default-src 'none';\n  script-src 'self';\n  connect-src 'self';\n  img-src 'self' https: data:;\n  style-src 'self' 'unsafe-inline' https:;\n  font-src 'self';\n  object-src 'none';\n  plugin-types application/pdf;\n  child-src 'self';\n  frame-src 'self';\n  media-src 'self'\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Namespace for Error Messages in Hanami::Validations\nDESCRIPTION: This example shows how to customize the namespace for error messages in Hanami::Validations. It demonstrates how to set a custom namespace in the validator class and how to structure the YAML file accordingly.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nclass SignupValidator\n  include Hanami::Validations\n\n  messages_path 'config/messages.yml'\n  namespace     :my_signup\n\n  # ...\nend\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# config/messages.yml\nen:\n  # ...\n    rules:\n      my_signup:\n        age:\n          gt?: \"must be an adult\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic View Template in Hanami (ERB)\nDESCRIPTION: This snippet demonstrates how to create a simple ERB template for the dashboard index view in Hanami. It includes a header tag with the text 'Dashboard'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/basic-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n# apps/web/templates/dashboard/index.html.erb\n<h1>Dashboard</h1>\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Entry Point for Hanami 2.1 Assets\nDESCRIPTION: This snippet shows the creation of a JavaScript entry point for Hanami 2.1 assets. It imports the base CSS file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_17\n\nLANGUAGE: js\nCODE:\n```\nimport \"../css/app.css\";\n```\n\n----------------------------------------\n\nTITLE: Nesting Plural RESTful Resources within Singular Resource in Hanami\nDESCRIPTION: This snippet demonstrates how to nest plural RESTful resources within a singular resource, such as API keys within an account.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account do\n  resources :api_keys\nend\n```\n\n----------------------------------------\n\nTITLE: Coercing Values in Hanami Entity\nDESCRIPTION: This example demonstrates how Hanami entities can coerce values from one type to another. Here, string values are coerced to integers for the codes attribute which is defined as a collection of coercible integers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.new(codes: [\"123\", \"456\"])\nuser.codes # => [123, 456]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Updated Middleware Stack\nDESCRIPTION: This shell command shows the updated middleware stack after adding Rack::Auth::Basic at the application level. It demonstrates how to verify that the new middleware has been successfully added.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Auth::Basic\n```\n\n----------------------------------------\n\nTITLE: Settings with Constraints - Ruby\nDESCRIPTION: Example of adding constraints to settings using dry-types\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    EMAIL_FORMAT = /\\A[\\w+\\-.]+@[a-z\\d\\-]+(\\.[a-z]+)*\\.[a-z]+\\z/i\n\n    setting :session_secret, constructor: Types::String.constrained(min_size: 32)\n    setting :from_email, constructor: Types::String.constrained(format: EMAIL_FORMAT)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Nil Check Validation in Hanami\nDESCRIPTION: Shows how to validate if a value is nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:location) { none? }\n```\n\n----------------------------------------\n\nTITLE: Defining Operation Base Class Using Dry::Operation - Ruby\nDESCRIPTION: Defines a base Operation class inheriting from Dry::Operation with auto_register: false, suitable for implementing domain operations. Located in operation.rb for the app or slice. Depends on dry-operation gem and expects the Bookshelf namespace to match the app. No direct parameters; provides a base for further operation classes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\\n# frozen_string_literal: true\\n\\nrequire \\\"dry/operation\\\"\\n\\nmodule Bookshelf\\n  class Operation < Dry::Operation\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Listing JSON Data Types in Hanami\nDESCRIPTION: Provides a list of JSON-specific data types in Hanami's Types module. These types apply non-strict coercion, tailored for handling JSON data.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/data-types.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nTypes::Json::Nil\nTypes::Json::Decimal\nTypes::Json::Date\nTypes::Json::DateTime\nTypes::Json::Time\nTypes::Json::Array\nTypes::Json::Hash\n```\n\n----------------------------------------\n\nTITLE: Handling Type Errors in Hanami Entities\nDESCRIPTION: This example shows how Hanami entities enforce data integrity by raising exceptions when attribute values don't match the defined constraints. The email format and comment type constraints are validated.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new(email: \"foo\")     # => TypeError: \"foo\" (String) has invalid type for :email\nUser.new(comments: [:foo]) # => TypeError: :foo must be coercible into Comment\n```\n\n----------------------------------------\n\nTITLE: Checking database_url setting in test console\nDESCRIPTION: Example of accessing the database_url setting in a Hanami console session in test environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[test]> Hanami.app[\"settings\"].database_url\n=> \"postgres://postgres:postgres@localhost:5432/bookshelf_test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Environment in Ruby\nDESCRIPTION: This code configures the Hanami environment, including mounting applications, setting up the model, configuring the mailer, and defining environment-specific settings for development and production.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v100.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'bundler/setup'\nrequire 'hanami/setup'\nrequire 'hanami/model'\nrequire_relative '../lib/bookshelf'\nrequire_relative '../apps/web/application'\n\nHanami.configure do\n  mount Web::Application, at: '/'\n\n  model do\n    adapter :sql, ENV['DATABASE_URL']\n\n    migrations 'db/migrations'\n    schema     'db/schema.sql'\n  end\n\n  mailer do\n    # Make sure this folder exists, or delete this row.\n    root Hanami.root.join(\"lib\", \"bookshelf\", \"mailers\")\n\n    # This has changed. It used to be a block, now it's a setting\n    delivery :test\n  end\n\n  # These two blocks are new.\n  # They MUST be after the general settings like `mount`, `model`, `mailer`.\n  environment :development do\n    # See: http://guides.hanamirb.org/projects/logging/\n    logger level: :info\n  end\n\n  environment :production do\n    logger level: :info, formatter: :json\n\n    mailer do\n      delivery :smtp, address: ENV['SMTP_HOST'], port: ENV['SMTP_PORT']\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Root Request Spec via RSpec (Shell)\nDESCRIPTION: This shell command executes the RSpec test suite, specifically targeting the `root_spec.rb` file. It's used to verify the behavior defined in the request spec for the root path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/root_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Customizing Singular RESTful Resource Routes in Hanami\nDESCRIPTION: This example shows how to customize singular RESTful resource routes by limiting them to specific actions or excluding certain actions.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nresource :account, only: [:show, :edit, :update, :destroy]\n\n# equivalent to\n\nresource :account, except: [:new, :create]\n```\n\n----------------------------------------\n\nTITLE: Custom Redis Client with Manual Require\nDESCRIPTION: Example of a custom Redis client that requires explicit requiring when used.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/custom_redis/client.rb\n\nmodule CustomRedis\n  class Client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating RSpec Configuration for Hanami 2.1.0\nDESCRIPTION: Updates the RSpec configuration to include Capybara support for feature tests and optional configurations for example persistence and warnings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"support/features\"\n\n# In spec/support/rspec.rb\nconfig.example_status_persistence_file_path = \"spec/examples.txt\"\n\n# Uncomment this to enable warnings. This is recommended, but in some cases\n# may be too noisy due to issues in dependencies.\n# config.warnings = true\n```\n\n----------------------------------------\n\nTITLE: Generated Custom Route in Hanami Application\nDESCRIPTION: Shows the custom route generated when using the --url flag with the action generator.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nget '/books/:id', to: 'books#show'\n```\n\n----------------------------------------\n\nTITLE: Customizing RESTful Resource Routes in Hanami\nDESCRIPTION: This example shows how to customize RESTful resource routes by limiting them to specific actions using the :only option or excluding certain actions with :except.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/restful-resources.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nresources :books, only: [:new, :create, :show]\n\n# equivalent to\n\nresources :books, except: [:index, :edit, :update, :destroy]\n```\n\n----------------------------------------\n\nTITLE: Environment Check with Hanami.env? Multiple Environments\nDESCRIPTION: Demonstrates checking multiple environments using Hanami.env?. Returns true if the current environment matches any of the specified environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development, :test)\n=> true\n```\n\n----------------------------------------\n\nTITLE: Creating 404 Error Page for Hanami 2.1.0\nDESCRIPTION: Defines a custom 404 error page with responsive styling for Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>The page you were looking for doesn't exist (404)</title>\n  <style>\n    :root {\n      --foreground-rgb: 0, 0, 0;\n      --background-rgb: 255, 255, 255;\n      --font-sans: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --foreground-rgb: 255, 255, 255;\n        --background-rgb: 0, 0, 0;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    body,\n    html {\n      max-width: 100vw;\n      overflow-x: hidden;\n      font-size: 100%;\n    }\n\n    body {\n      color: rgb(var(--foreground-rgb));\n      background: rgb(var(--background-rgb));\n      font-family: var(--font-sans);\n      font-style: normal;\n    }\n\n    main {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      padding: 0 4vw;\n    }\n\n    .message {\n      display: flex;\n      gap: 1rem;\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .message h1 {\n      font-size: 2rem;\n      font-weight: 500;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      html {\n        color-scheme: dark;\n      }\n    }\n  </style>\n  </head>\n  <body>\n    <!-- This file lives in public/404.html -->\n    <main>\n      <div class=\"message\">\n        <h1>404</h1>\n        <p>The page you were looking for doesn't exist.</p>\n      </div>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hanami Assets\nDESCRIPTION: Shows the standard directory structure for assets in a Hanami application, including source files, configuration, and compiled output locations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── app\n│   ├── assets\n│   │   ├── css\n│   │   │   └── app.css\n│   │   ├── images\n│   │   │   └── favicon.ico\n│   │   └── js\n│   │       └── app.js\n├── config\n│   └── assets.js\n├── node_modules\n├── package-lock.json\n├── package.json\n└── public\n    └── assets\n        ├── assets.json\n        ├── app-HYVEQYF6.css\n        ├── app-6PW7FGD5.js\n        └── favicon-5VHYTKP2.ico\n```\n\n----------------------------------------\n\nTITLE: Creating Article with Array Column in Hanami Repository\nDESCRIPTION: This snippet demonstrates how to create an article with an array of tags using a Hanami repository.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nArticleRepository.new.create(title: \"Announcing Hanami 1.0\", tags: [\"announcements\"])\n  # => #<Article:0x007ffe1a5d9da8 @attributes={:id=>1, :title=>\"Announcing Hanami 1.0\", :tags=>[\"announcements\"]}>\n```\n\n----------------------------------------\n\nTITLE: Using Aliasing with Comment Repository in Hanami\nDESCRIPTION: Comment repository implementation that uses aliasing to rename the user association as 'commenter' for more semantic meaning.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/comment_repository.rb\nclass CommentRepository < Hanami::Repository\n  associations do\n    belongs_to :story\n    belongs_to :user, as: :commenter\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Content in Hanami ERB Template\nDESCRIPTION: Demonstrates the use of the #escape_html (aliased as #h) helper to escape HTML content in a Hanami ERB template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<p><%= h \"<script>alert('xss')</script>\" %></p>\n```\n\n----------------------------------------\n\nTITLE: Separator Examples in Number Formatting\nDESCRIPTION: Demonstrates how to customize the decimal separator when formatting numbers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1.23)                 # => \"1.23\"\nformat_number(1.23, separator: ',') # => \"1,23\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Subresource Integrity for External CDN Resources\nDESCRIPTION: Example of including JavaScript from an external CDN with Subresource Integrity verification to protect against compromised CDN attacks.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript 'https://code.jquery.com/jquery-3.1.0.min.js', integrity: 'sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script integrity=\"sha256-cCueBR6CsyA4/9szpPfrX3s49M9vUU5BgtiJj06wt/s=\" src=\"https://code.jquery.com/jquery-3.1.0.min.js\" type=\"text/javascript\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Running Default Test Task in Hanami\nDESCRIPTION: Shows different ways to run the default test suite using Rake commands.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake test\n```\n\n----------------------------------------\n\nTITLE: Customizing Error Messages with YAML in Hanami::Validations\nDESCRIPTION: This snippet demonstrates how to customize error messages for specific rules using a YAML configuration file in Hanami::Validations. It shows the YAML structure and how to access the custom messages in the validator.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/messages.yml\nen:\n  errors:\n    email?: \"must be an email\"\n\n    rules:\n      signup:\n        age:\n          gt?: \"must be an adult\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\nresult = SignupValidator.new(email: 'foo', age: 1).validate\n\nresult.success?             # => false\nresult.messages.fetch(:age) # => ['must be an adult']\n```\n\n----------------------------------------\n\nTITLE: Type Predicate Aliases in Hanami\nDESCRIPTION: Demonstrates the usage of type predicate aliases as alternatives to the type? syntax.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:age) { type?(Integer) }\nrequired(:age) { int? }\n```\n\n----------------------------------------\n\nTITLE: Separating Main Application Routes in Hanami\nDESCRIPTION: Shows the main application routes configuration when separating slice-specific routes into their own files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nmodule MyApp\n  class Routes < Hanami::Routes\n    root { \"Hello from Hanami\" }\n\n    slice :admin, at: \"/admin\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Version in Gemfile\nDESCRIPTION: This snippet shows how to update the Hanami gem version in the project's Gemfile.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v080.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'hanami', '~> 0.8'\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Table Schema for Books\nDESCRIPTION: SQL statement for creating a 'books' table with id, title, and timestamp fields that will be used to automatically derive a Hanami entity schema.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE books (\n    id integer NOT NULL,\n    title text,\n    created_at timestamp without time zone,\n    updated_at timestamp without time zone\n);\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Attributes in Hanami ERB Template\nDESCRIPTION: Shows how to use the #escape_html_attribute (aliased as #ha) helper to safely escape user input in HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<img src=\"/path/to/avatar.png\" title=\"<%= ha(user.name) %>'s Avatar\">\n```\n\n----------------------------------------\n\nTITLE: Custom Log Formatter Implementation\nDESCRIPTION: Implementation of a custom formatter to remove params from log output completely.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nclass NoParamsFormatter < ::Hanami::Logger::Formatter\n  def _format(hash)\n    hash.delete :params\n    super hash\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Book Part Class in Ruby for Hanami Views\nDESCRIPTION: This snippet demonstrates how to define a part class for a Book object in the Bookshelf module. It inherits from the base Bookshelf::Views::Part class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/book.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    module Parts\n      class Book < Bookshelf::Views::Part\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Imported CDN Component in Admin Slice\nDESCRIPTION: Demonstrates how to use the imported CDN purge operation within an Admin slice component.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/admin/books/operations/update.rb\n\nmodule Admin\n  module Books\n    module Operations\n      class Update\n        include Deps[\n          \"repositories.book_repo\",\n          \"cdn.book_covers.purge\"\n        ]\n\n        def call(id, params)\n          # ... update the book using the book repository ...\n\n          # If the update is successful, purge the book cover from the CDN\n          purge.call(book.cover_path)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Testing Book Creation Endpoint\nDESCRIPTION: RSpec tests for POST /books endpoint testing successful creation and validation scenarios\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"POST /books\", type: [:request, :db] do\n  let(:request_headers) do\n    {\"HTTP_ACCEPT\" => \"application/json\", \"CONTENT_TYPE\" => \"application/json\"}\n  end\n\n  context \"given valid params\" do\n    let(:params) do\n      {book: {title: \"Practical Object-Oriented Design in Ruby\", author: \"Sandi Metz\"}}\n    end\n\n    it \"creates a book\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_created\n    end\n  end\n\n  context \"given invalid params\" do\n    let(:params) do\n      {book: {title: nil}}\n    end\n\n    it \"returns 422 unprocessable\" do\n      post \"/books\", params.to_json, request_headers\n\n      expect(last_response).to be_unprocessable\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Passing Entity Data to Hanami Entity Constructor\nDESCRIPTION: This example demonstrates how to pass raw data instead of entity instances when instantiating a Hanami entity. The data is automatically converted to the appropriate entity type defined in the schema.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.new(comments: [{text: \"cool\"}])\nuser.comments\n  # => [#<Comment:0x007f966b689e40 @attributes={:text=>\"cool\"}>]\n```\n\n----------------------------------------\n\nTITLE: Mounting Application to Path\nDESCRIPTION: Example of mounting an application to a specific path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmount SinatraApp.new, at: '/sinatra'\n```\n\n----------------------------------------\n\nTITLE: Displaying Routes in CSV Format\nDESCRIPTION: Shows the application routes in CSV format for machine processing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes --format=csv\n\nMETHOD,PATH,TO,AS,CONSTRAINTS\nGET,/,home.index,:root,\"\"\nGET,/books,books.index,\"\",\"\"\nGET,/books/:id,books.show,\"\",\"\"\nPOST,/books,books.create,\"\",\"\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Part Generation\nDESCRIPTION: Demonstrates how to access additional help and options for the 'generate part' command in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate part --help\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Layout in Hanami Application\nDESCRIPTION: Ruby configuration code for setting the default layout in a Hanami web application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      layout :application\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: String to Class Mapping in Routes\nDESCRIPTION: Shows how string routing endpoints are mapped to class instances.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nget '/rack-app', to: 'rack_app' # it will map to RackApp.new\n```\n\n----------------------------------------\n\nTITLE: Implementing Comment Repository with Associations in Hanami\nDESCRIPTION: Comment repository with belongs_to associations to both story and user, forming the bridge between stories and users.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/comment_repository.rb\nclass CommentRepository < Hanami::Repository\n  associations do\n    belongs_to :story\n    belongs_to :user\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Array Validation in Hanami\nDESCRIPTION: Shows how to validate arrays and their elements, ensuring all elements are integers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:codes) { array? { each { int? } } }\n```\n\n----------------------------------------\n\nTITLE: Customizing Process Manager in bin/dev\nDESCRIPTION: Example of modifying bin/dev to use shoreman instead of foreman as the process manager for running Procfile.dev.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/dev.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\nshoreman Procfile.dev\n```\n\n----------------------------------------\n\nTITLE: Using HTML Helper in View Context\nDESCRIPTION: Demonstrates how to create a view helper method that uses the HTML builder and accesses local view variables.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Show\n        include Web::View\n\n        def title_widget\n          html.div do\n            h1 book.title\n          end\n        end\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: erb\nCODE:\n```\n<div id=\"content\">\n  <%= title_widget %>\n</div>\n```\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"content\">\n  <div>\n    <h1>The Work of Art in the Age of Mechanical Reproduction</h1>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Asset Directory Structure Example\nDESCRIPTION: Shows the default directory structure for assets in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tree apps/web/assets\napps/web/assets\n├── favicon.ico\n├── images\n├── javascripts\n└── stylesheets\n\n3 directories, 1 file\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Query Scope (`recent`) on a ROM Relation (Ruby)\nDESCRIPTION: Demonstrates calling the custom `recent` scope defined in the `Books` relation. Calling `books.recent` applies the encapsulated query logic (filtering by publication date > 2020-01-01) and returns a new relation object representing the filtered dataset. The comment shows the resulting SQL query.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\nbooks.recent\n# => SELECT id, title, publication_date FROM books WHERE publication_date > '2020-01-01'\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action without View\nDESCRIPTION: Creates only an action without the view and template by using the --skip-view flag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action web books#show --skip-view\n```\n\n----------------------------------------\n\nTITLE: Hanami Project Root Structure\nDESCRIPTION: Displays the top-level directory structure of a Hanami project, showing main configuration files and directories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tree -L 1\n.\n├── Gemfile\n├── Gemfile.lock\n├── README.md\n├── Rakefile\n├── apps\n├── config\n├── config.ru\n├── db\n├── lib\n└── spec\n```\n\n----------------------------------------\n\nTITLE: Preparing Development Database\nDESCRIPTION: Command to create and prepare the development database with migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Configuring Slice Loading via Application Config - Hanami - Ruby\nDESCRIPTION: Sets slice loading at the application configuration level by assigning the desired slices to config.slices in your Hanami app class. This Ruby configuration loads only the specified slices for all processes using this config. Requires the hanami gem and should be placed typically in config/app.rb.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \\\"hanami\\\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.slices = [\\\"cdn\\\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console\nDESCRIPTION: Commands for starting the Hanami console with different REPL engines (IRB or Pry).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console\n\nbookshelf[development]>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Character Set for Specific Action in Hanami\nDESCRIPTION: This snippet shows how to configure a default character set for a specific action in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        config.default_charset \"koi8-r\"\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Databases for Hanami Application\nDESCRIPTION: These shell commands create PostgreSQL databases for development and test environments of a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ createdb bookshelf_development\n$ createdb bookshelf_test\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Spec to Verify Book Show API Success - Shell\nDESCRIPTION: Shell output from executing the RSpec request spec after implementation. Verifies that the /books/:id endpoint functions as expected and all tests pass, confirming correctness of API code. This output is used to confirm test-driven development loop completion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/show_spec.rb\n\nGET /books/:id\n  when a book matches the given id\n    renders the book\n  when no book matches the given id\n    returns not found\n\nFinished in 0.07726 seconds (files took 1.29 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Using Asset Helpers in Hanami Templates\nDESCRIPTION: ERB template code demonstrating how to include multiple stylesheets using Hanami's stylesheet helper.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/preprocessors.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet 'reset', 'application' %>\n```\n\n----------------------------------------\n\nTITLE: Creating Base CSS for Hanami 2.1.0\nDESCRIPTION: Defines a basic CSS file for styling Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_15\n\nLANGUAGE: css\nCODE:\n```\nbody {\n  background-color: #fff;\n  color: #000;\n  font-family: sans-serif;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authors Migration in Hanami\nDESCRIPTION: Database migration for creating the authors table with primary key, name and timestamp columns\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024081558_create_authors.rb\nHanami::Model.migration do\n  change do\n    create_table :authors do\n      primary_key :id\n\n      column :name,       String,   null: false\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Whitelisted URL Schemes in Hanami ERB Template\nDESCRIPTION: Demonstrates the use of #escape_url (aliased as #hu) helper to whitelist URL schemes and prevent XSS attacks in user-provided URLs.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"Website\", hu(user.website_url) %>\n```\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to \"Website\", hu(user.website_url, ['https']) %>\n```\n\n----------------------------------------\n\nTITLE: Using Hanami Repository in Console\nDESCRIPTION: Example of creating a new book record using the repository in Hanami console.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n% bundle exec hanami console\nirb(main):001:0> book = BookRepository.new.create(title: \"Hanami\")\n=> #<Book:0x007f95ccefb320 @attributes={:id=>1, :title=>\"Hanami\", :created_at=>2016-11-13 15:49:14 UTC, :updated_at=>2016-11-13 15:49:14 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Request Parameters to Hanami View via Render (Ruby)\nDESCRIPTION: The `Bookshelf::Actions::Books::Index` action demonstrates passing multiple input values to the view. It retrieves `page` and `per_page` from request parameters and passes them as keyword arguments directly within the `response.render` call.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/input-and-exposures.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/index.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(*, response)\n          response.render view, page: request.params[:page], per_page: request.params[:per_page]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Array Column in PostgreSQL with Hanami\nDESCRIPTION: This migration creates an 'articles' table with an array column for tags using PostgreSQL's text[] data type.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/postgresql.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nHanami::Model.migration do\n  change do\n    create_table :articles do\n      primary_key :id\n      column :title, String\n      column :tags, \"text[]\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Failing Books Index Spec (Shell)\nDESCRIPTION: This output shows the result of running the books index feature spec before implementation. It indicates failure because the expected list items (`<li>`) containing book titles were not found on the page (likely due to a 404 error or missing content).\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nBooks index\n  shows a list of books (FAILED - 1)\n\nFailures:\n\n  1) Books index shows a list of books\n     Failure/Error: expect(page).to have_selector \"li\", text: \"Test Driven Development\"\n       expected to find css \"li\" but there were no matches\n     # ./spec/features/books/index_spec.rb:5:in `block (2 levels) in <top (required)>'\n\nFinished in 0.09789 seconds (files took 0.57724 seconds to load)\n1 example, 1 failure\n```\n\n----------------------------------------\n\nTITLE: Precompiling Assets in Hanami\nDESCRIPTION: Command to precompile assets for deployment, which processes and copies assets from all applications and third-party gems to the public/assets directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets precompile\n```\n\n----------------------------------------\n\nTITLE: Testing Books Index Controller in Hanami\nDESCRIPTION: RSpec tests for the Books Index controller. It checks if the action is successful and if it exposes the books correctly.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Web::Controllers::Books::Index, type: :action do\n  let(:action) { described_class.new }\n  let(:params) { Hash[] }\n  let(:repository) { BookRepository.new }\n\n  before do\n    repository.clear\n\n    @book = repository.create(title: 'TDD', author: 'Kent Beck')\n  end\n\n  it 'is successful' do\n    response = action.call(params)\n    expect(response[0]).to eq(200)\n  end\n\n  it 'exposes all books' do\n    action.call(params)\n    expect(action.exposures[:books]).to eq([@book])\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Application-Wide Helper in Hanami Template\nDESCRIPTION: This snippet demonstrates how to use an application-wide helper method in a Hanami template. The 'emphasis' method from the Helpers module is called to wrap text in HTML emphasis tags.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# app/templates/books/index.html.erb\n<%= emphasis(\"Hello World\") %>\n```\n\n----------------------------------------\n\nTITLE: Creating New Hanami Applications\nDESCRIPTION: Examples of generating new Hanami applications using the 'new' command with different app names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf # generates a new Bookshelf application in ./bookshelf\n$ hanami new my_app # generates a new MyApp application in ./my_app\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for Slice Generation\nDESCRIPTION: Illustrates how to access additional help and options for the 'generate slice' command in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate slice --help\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action and View Components with CLI\nDESCRIPTION: Shell command demonstrating how to generate a new action in Hanami, which creates associated view and template files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami generate action web dashboard#index\n    insert  apps/web/config/routes.rb\n    create  spec/web/controllers/dashboard/index_spec.rb\n    create  apps/web/controllers/dashboard/index.rb\n    create  apps/web/views/dashboard/index.rb\n    create  apps/web/templates/dashboard/index.html.erb\n    create  spec/web/views/dashboard/index_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Creating Token Lists for HTML Attributes in Ruby\nDESCRIPTION: Demonstrates the 'token_list' helper (aliased as 'class_names') for creating space-separated token strings, useful for HTML class attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/html.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ntoken_list(\"foo\", \"bar\")\n# => \"foo bar\"\n\ntoken_list(\"foo\", \"foo bar\")\n# => \"foo bar\"\n\ntoken_list({ foo: true, bar: false })\n# => \"foo\"\n\ntoken_list(nil, false, 123, \"\", \"foo\", { bar: true })\n# => \"123 foo bar\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Registered Struct in Ruby for Hanami\nDESCRIPTION: This code snippet shows how to define a Book struct using dry-struct that is not registered in the Hanami container. It uses the 'auto_register: false' magic comment to opt out of registration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n\nrequire \"dry-struct\"\n\nmodule Bookshelf\n  module Structs\n    class Book < Dry::Struct\n      attribute :title, Types::String\n      attribute :author, Types::String\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets for Hanami 2.1.0\nDESCRIPTION: Sets up asset compilation configuration for Hanami 2.1.0 using esbuild.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nimport * as assets from \"hanami-assets\";\n\nawait assets.run();\n\n// To provide additional esbuild (https://esbuild.github.io) options, use the following:\n//\n// Read more at: https://guides.hanamirb.org/assets/overview/\n//\n// await assets.run({\n//   esbuildOptionsFn: (args, esbuildOptions) => {\n//     // Add to esbuildOptions here. Use `args.watch` as a condition for different options for\n//     // compile vs watch.\n//\n//     return esbuildOptions;\n//   }\n// });\n```\n\n----------------------------------------\n\nTITLE: Using find_with_avatar Method in Hanami\nDESCRIPTION: Example of using the explicit find_with_avatar method to load a user with its associated avatar.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nuser = repository.find_with_avatar(user.id)\n  # => #<User:0x00007fa166a71048 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC, :avatar=>#<Avatar:0x00007fa166a70328 @attributes={:id=>1, :user_id=>1, :url=>\"https://avatars.test/luca.png\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC}>}>\n\nuser.avatar\n  # => #<Avatar:0x00007fa166a70328 @attributes={:id=>1, :user_id=>1, :url=>\"https://avatars.test/luca.png\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Disabling Code Reloading in Hanami Server\nDESCRIPTION: Illustrates how to start the Hanami server with code reloading disabled using the '--no-code-reloading' option. This is useful for debugging with tools like byebug, debug, or pry.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/server.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server --no-code-reloading\n```\n\n----------------------------------------\n\nTITLE: Console Engine Selection\nDESCRIPTION: Examples of starting the Hanami console with specific REPL engines.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console --engine=irb # (the default)\n$ bundle exec hanami console --engine=pry\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Asset Sources\nDESCRIPTION: Example of adding additional asset source directories to a Hanami application configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      assets do\n        # apps/web/assets is added by default\n        sources << [\n          'vendor/assets'\n        ]\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Dropping Tables in Hanami Migrations\nDESCRIPTION: This example demonstrates how to drop a table using the drop_table method in a Hanami migration. It shows the simple syntax for removing a table from the database schema.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/alter-table.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndrop_table :users\n```\n\n----------------------------------------\n\nTITLE: Initializing Hanami Action with Dependencies (Ruby)\nDESCRIPTION: This snippet illustrates how to initialize a Hanami action with dependencies using dependency injection. It shows the Dashboard::Index action with a custom initializer that accepts a greeting object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/basic-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def initialize(greeting: Greeting.new)\n          @greeting = greeting\n        end\n\n        def call(params)\n          self.body = @greeting.message\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Application\nDESCRIPTION: Creates a new Hanami application under the apps/ directory. This example generates an Admin application at apps/admin.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate app admin\n```\n\n----------------------------------------\n\nTITLE: Updating Environment Configuration\nDESCRIPTION: Steps for modifying the environment.rb file to remove Hanami model configuration and dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/use-your-own-orm.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Remove these lines\n# require 'hanami/model'\n# require_relative '../lib/projectname'\n\n# Remove the model block\n# Hanami.configure do\n#   model do\n#     # ... model configuration ...\n#   end\n# end\n```\n\n----------------------------------------\n\nTITLE: Defining Slice-Specific Routes and Middleware - Hanami - Ruby\nDESCRIPTION: Defines custom routes and attaches per-slice Rack middleware in a Hanami application. This snippet shows how to use OmniAuth for Google OAuth2 only within the :admin slice while adding a /users route mapped to users.index. Place this in config/routes.rb, ensuring omniauth and omniauth-google-oauth2 are installed.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/slices.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \\\"omniauth/builder\\\"\nrequire \\\"omniauth-google-oauth2\\\"\n\nmodule MyApp\n  class Routes < Hanami::Routes\n    root { \\\"Hello from Hanami\\\" }\n\n    slice :admin, at: \\\"/admin\\\" do\n      use OmniAuth::Builder do\n        provider :google_oauth2 # ...\n      end\n\n      get \\\"/users\\\", to: \\\"users.index\\\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Database\nDESCRIPTION: Command to create and prepare the test database with migrations using the test environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/database-configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Project Directory Structure\nDESCRIPTION: Shows the file system organization for welcome email components in a Hanami application\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/container-and-components.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\napp\n├── operations\n│   └── send_welcome_email.rb\n└── renderers\n    └── welcome_email.rb\n```\n\n----------------------------------------\n\nTITLE: Test environment database configuration\nDESCRIPTION: Environment variable configuration for test database connection in .env.test file. Uses PostgreSQL with the bookshelf_test database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n# .env.test\nDATABASE_URL=postgres://postgres:postgres@localhost:5432/bookshelf_test\n```\n\n----------------------------------------\n\nTITLE: Variable Route Path Generation in Hanami\nDESCRIPTION: Demonstrates generating paths with variable parameters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nWeb.routes.path(:book, id: 1) # => \"/books/1\"\nWeb.routes.url(:book, id: 1)  # => \"http://localhost:2300/books/1\"\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Books Index Action via CLI (Shell)\nDESCRIPTION: This shell command uses the Hanami CLI generator to create the `books.index` action, along with its corresponding view and template. The `--skip-tests` flag prevents the generation of default test files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index --skip-tests\n```\n\n----------------------------------------\n\nTITLE: Running Bundle Update Command\nDESCRIPTION: Terminal command to update Hanami dependencies to their latest compatible versions\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v110.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbundle update hanami hanami-model\n```\n\n----------------------------------------\n\nTITLE: Adding Persistence Gems to Gemfile\nDESCRIPTION: This Ruby code adds the necessary gems for persistence to the Gemfile, including rom, rom-sql, pg, and database_cleaner-sequel.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_15\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngem \"rom\", \"~> 5.3\"\ngem \"rom-sql\", \"~> 3.6\"\ngem \"pg\"\n\ngroup :test do\n  gem \"database_cleaner-sequel\"\nend\n```\n\n----------------------------------------\n\nTITLE: Basic ERB Form Template (Invalid Example)\nDESCRIPTION: Example showing an invalid ERB template syntax that works in other frameworks but not in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= form_for :book do |f| %>\n  <div>\n    <%= f.text_field :title %>\n  </div>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Implementing Story Repository with Has-Many-Through Association in Hanami\nDESCRIPTION: Story repository with both direct associations and a has-many-through association to users via comments, with custom finder methods to load associated records.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/repositories/story_repository.rb\nclass StoryRepository < Hanami::Repository\n  associations do\n    belongs_to :user\n    has_many :comments\n    has_many :users, through: :comments\n  end\n\n  def find_with_comments(id)\n    aggregate(:user, comments: :user).where(id: id).map_to(Story).one\n  end\n\n  def find_with_commenters(id)\n    aggregate(:users).where(id: id).map_to(Story).one\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated Migration for Hanami Model\nDESCRIPTION: Shows the content of a migration file generated for a book model, including table creation, primary key, and timestamps.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20170213123250_create_books.rb\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Assets Precompile Task in Hanami\nDESCRIPTION: Example showing the location of the assets:precompile Rake task that needs to be overridden when using custom asset management tools. The task is automatically run by SaaS vendors for deployment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/use-your-own-assets-management-tool.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\n```\n\n----------------------------------------\n\nTITLE: Creating Image Tags in Ruby\nDESCRIPTION: Uses the image_tag helper to generate <img> tags for image assets or absolute URLs. It automatically sets the alt attribute and supports additional HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"logo.png\")\n# => <img src=\"/assets/logo-DJHI6WQI.png\" alt=\"Logo\">\n\nimage_tag(\"https://example.com/logo.png\")\n# => <img src=\"https://example.com/logo.png\" alt=\"Logo\">\n```\n\nLANGUAGE: ruby\nCODE:\n```\nimage_tag(\"logo.png\", alt: \"App logo\", class: \"image\")\n# => <img src=\"/assets/logo-DJHI6WQI.png\" alt=\"App logo\" class=\"image\">\n```\n\n----------------------------------------\n\nTITLE: Creating Favicon Link Tags in Ruby\nDESCRIPTION: Uses the favicon_tag helper to generate <link> tags for favicon assets. It defaults to 'favicon.ico' if no source is provided and supports additional HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nfavicon_tag\n# => <link href=\"/assets/favicon-RTK3P5FP.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n\nfavicon_tag(\"fav.ico\")\n# => <link href=\"/assets/fav-EOLTKYGO.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n```\n\nLANGUAGE: ruby\nCODE:\n```\nfavicon_tag(\"fav.ico\", id: \"fav\")\n# => <link id=\"fav\" href=\"/assets/fav-EOLTKYGO.ico\" rel=\"shortcut icon\" type=\"image/x-icon\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Thousands Delimiter in Hanami\nDESCRIPTION: Shows how to change the thousands delimiter character when formatting large numbers using the delimiter option.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1_000_000)                 # => \"1,000,000\"\nformat_number(1_000_000, delimiter: '.') # => \"1.000.000\"\n```\n\n----------------------------------------\n\nTITLE: Checking Hanami Version\nDESCRIPTION: Displays the version of the currently installed Hanami gem.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami version\nv2.0.0\n```\n\n----------------------------------------\n\nTITLE: Creating Development Script for Hanami 2.1.0\nDESCRIPTION: Creates a shell script to install and run foreman for managing development processes defined in Procfile.dev.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\n\nif ! gem list foreman -i --silent; then\n  echo \"Installing foreman...\"\n  gem install foreman\nfi\n\nexec foreman start -f Procfile.dev \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Entity Schema with Strict Mode in Hanami\nDESCRIPTION: This code demonstrates how to define a custom schema for a Hanami entity using strict mode. In strict mode, all attributes must be present and match their type constraints exactly, without any automatic coercion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/entities/user.rb\nclass User < Hanami::Entity\n  EMAIL_FORMAT = /\\@/\n\n  attributes :strict do\n    attribute :id,    Types::Strict::Int\n    attribute :name,  Types::Strict::String\n    attribute :email, Types::Strict::String.constrained(format: EMAIL_FORMAT)\n    attribute :age,   Types::Strict::Int.constrained(gt: 18)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Nil Values in Strict Mode Hanami Entities\nDESCRIPTION: This example demonstrates that nil values are not allowed for attributes in strict mode. Each attribute must have a value that matches its type specification.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new(id: 1, name: nil, age: 35, email: \"luca@hanami.test\")\n  # => TypeError: nil (NilClass) has invalid type for :name violates constraints (type?(String, nil) failed)\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Initial Root Spec (Shell)\nDESCRIPTION: This is the expected output when running the initial root request spec. It indicates that the single test ('is not found') passed successfully, confirming the 404 status for the root path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nRoot\n  is not found\n\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Hanami View with Exposure Access\nDESCRIPTION: Shows how to access and modify exposed variables within a view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n\n        def full_title\n          \"The title: \" + title\n         end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Console with Specific Engine in Shell\nDESCRIPTION: These commands demonstrate how to start the Hanami console using different Ruby REPL engines. The default engine is IRB, but Pry can also be specified as an alternative.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/console.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console --engine=irb # (the default)\n$ bundle exec hanami console --engine=pry\n```\n\n----------------------------------------\n\nTITLE: Using link_to Helper in Ruby View Classes\nDESCRIPTION: Example of how to implement a method in a Hanami view class that uses the link_to helper with a block to create a complex link containing an image.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/links.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Show\n        include Web::View\n\n        def look_inside_link\n          url = routes.look_inside_book_path(id: book.id)\n\n          link_to url, class: 'book-cover' do\n            html.img(src: book.cover_url)\n          end\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration for Static Assets\nDESCRIPTION: Environment variable configuration for serving static assets in development mode.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\n# .env.development\n# ...\nSERVE_STATIC_ASSETS=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Default Sender Module in Ruby for Hanami Mailers\nDESCRIPTION: Defines a module that sets a default sender email address for all mailers. Uses Ruby's included hook to inject the configuration into any mailer that includes this module.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/share-code.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/mailers/default_sender.rb\nmodule Mailers\n  module  DefaultSender\n    def self.included(mailer)\n      mailer.class_eval do\n        from 'sender@bookshelf.org'\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Listing Migration Files in Hanami (Shell)\nDESCRIPTION: Shows the directory structure of migration files in a Hanami project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tree db/migrations\ndb/migrations\n├── 20171024081558_create_authors.rb\n├── 20171024081617_create_books.rb\n├── 20171024083639_create_users.rb\n├── 20171024083725_create_avatars.rb\n├── 20171024085712_create_stories.rb\n└── 20171024085858_create_comments.rb\n\n0 directories, 6 files\n```\n\n----------------------------------------\n\nTITLE: Implementing Last-Modified Conditional GET in Hanami\nDESCRIPTION: This code shows how to implement Conditional GET using Last-Modified timestamps in a Hanami action. It uses the fresh method with a last_modified option to set the Last-Modified header and handle conditional requests.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/http-caching.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/users/show.rb\nrequire 'hanami/action/cache'\n\nmodule Web\n  module Controllers\n    module Users\n      class Show\n        include Web::Action\n        include Hanami::Action::Cache\n\n        def call(params)\n          @user = UserRepository.new.find(params[:id])\n          fresh last_modified: @user.updated_at\n\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Root Request Spec in Ruby\nDESCRIPTION: Initial request spec to test the root path response, expecting a 404 status.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is not found\" do\n    get \"/\"\n\n    # Generate new action via:\n    #   `bundle exec hanami generate action home.index --url=/`\n    expect(last_response.status).to be(404)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Loading Specific Hanami Slices via Environment Variable\nDESCRIPTION: Demonstrates how to load specific slices using the HANAMI_SLICES environment variable with a comma-separated list of slice names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_SLICES=cdn,other_slice_here bundle exec your_hanami_command\n```\n\n----------------------------------------\n\nTITLE: Defining View Exposure in Hanami\nDESCRIPTION: Illustrates how to define a view exposure in a Hanami application, which can be used with the format_number helper.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        expose :books do\n          [\n            Book.new(title: \"Hanami\")\n            Book.new(title: \"Hanami 2\")\n          ]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Using Deps Mixin in Hanami Console\nDESCRIPTION: Illustrates how the Deps mixin works by instantiating the SendWelcomeEmail operation in the Hanami console and showing its injected dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Bookshelf::Operations::SendWelcomeEmail.new\n=> #<Bookshelf::Operations::SendWelcomeEmail:0x0000000112a93090\n @email_client=#<AcmeEmail::Client:0x0000000112aa82d8>,\n @welcome_email=#<Bookshelf::Renderers::WelcomeEmail:0x0000000112a931d0>>\n\nbookshelf[development]> Bookshelf::Operations::SendWelcomeEmail.new(email_client: \"another client\")\n=> #<Bookshelf::Operations::SendWelcomeEmail:0x0000000112aba8c0\n @email_client=\"another client\",\n @welcome_email=#<Bookshelf::Renderers::WelcomeEmail:0x0000000112aba9b0>>\n```\n\n----------------------------------------\n\nTITLE: Development environment database configuration\nDESCRIPTION: Environment variable configuration for development database connection in .env file. Uses PostgreSQL with the bookshelf_development database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# .env\nDATABASE_URL=postgres://postgres:postgres@localhost:5432/bookshelf_development\n```\n\n----------------------------------------\n\nTITLE: Route Path Generation in Hanami\nDESCRIPTION: Examples of generating relative and absolute paths using the routes module.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nWeb.routes.path(:root)     # => \"/\"\nWeb.routes.url(:root)      # => \"http://localhost:2300/\"\n\nWeb.routes.path(:greeting) # => \"/hello\"\nWeb.routes.url(:greeting)  # => \"http://localhost:2300/hello\"\n```\n\n----------------------------------------\n\nTITLE: Book Index View Class Definition\nDESCRIPTION: Example of a Hanami view class that exposes a collection of books for use with number formatting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/show.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        expose :books do\n          [\n            Book.new(title: \"Hanami\")\n            Book.new(title: \"Hanami 2\")\n          ]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Mutable State in Custom Context with initialize_copy (Ruby)\nDESCRIPTION: Explains how to manage mutable instance variables (like `@my_hash`) within a custom context. Since the context object is `#dup`-ed for each rendering, implementing `#initialize_copy` is necessary to ensure that mutable variables are also duplicated, preventing state leakage between renderings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/context.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/context.rb\n\n# auto_register: false\n\nmodule Bookshelf\n  module Views\n    class Context < Hanami::View::Context\n      include Deps[\"repos.user_repo\"]\n\n      def initialize(*)\n        super\n        # Imagine your context exposes methods that modify this hash\n        @my_hash = []\n      end\n\n      def initialize_copy(source)\n        super\n        @my_hash = source.instance_variable_get(:@my_hash).dup\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Object Properties in Ruby\nDESCRIPTION: Example showing the structure of delivery and customer objects with their accessible properties including nested address object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\ndelivery.id   # => 1\ndelivery.code # => 123\n\ncustomer.name # => \"Luca\"\n\ncustomer.address.class # => Address\ncustomer.address.city  # => \"Rome\"\n```\n\n----------------------------------------\n\nTITLE: Adding ROM-RB Rake Tasks to Hanami Application\nDESCRIPTION: This Ruby code adds ROM-RB's rake tasks for database migrations to a Hanami application's Rakefile.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\n# Rakefile\n\nrequire \"rom/sql/rake_task\"\n\ntask :environment do\n  require_relative \"config/app\"\n  require \"hanami/prepare\"\nend\n\nnamespace :db do\n  task setup: :environment do\n    Hanami.app.prepare(:persistence)\n    ROM::SQL::RakeSupport.env = Hanami.app[\"persistence.config\"]\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Book Entity Class Definition\nDESCRIPTION: Basic entity class for Book model inheriting from Hanami::Entity.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nclass Book < Hanami::Entity\nend\n```\n\n----------------------------------------\n\nTITLE: Creating 500 Error Page for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of a 500 error page for Hanami 2.1. It includes HTML and CSS for a simple, responsive error page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>We're sorry, but something went wrong (500)</title>\n  <style>\n    :root {\n      --foreground-rgb: 0, 0, 0;\n      --background-rgb: 255, 255, 255;\n      --font-sans: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --foreground-rgb: 255, 255, 255;\n        --background-rgb: 0, 0, 0;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    body,\n    html {\n      max-width: 100vw;\n      overflow-x: hidden;\n      font-size: 100%;\n    }\n\n    body {\n      color: rgb(var(--foreground-rgb));\n      background: rgb(var(--background-rgb));\n      font-family: var(--font-sans);\n      font-style: normal;\n    }\n\n    main {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      padding: 0 4vw;\n    }\n\n    .message {\n      display: flex;\n      gap: 1rem;\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .message h1 {\n      font-size: 2rem;\n      font-weight: 500;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      html {\n        color-scheme: dark;\n      }\n    }\n  </style>\n  </head>\n  <body>\n    <!-- This file lives in public/500.html -->\n    <main>\n      <div class=\"message\">\n        <h1>500</h1>\n        <p>We're sorry, but something went wrong.</p>\n      </div>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Core Dependency\nDESCRIPTION: Updates the Hanami core gem version constraint in the Gemfile to version 1.1\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v110.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'hanami', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami View Part\nDESCRIPTION: This command generates a view part in Hanami 2.2. The example creates a 'book' part. Use the --help option to see all available options for this command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/generate.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate part book\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate part --help\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JavaScript Compressor in Hanami\nDESCRIPTION: This snippet shows how to create a custom JavaScript compressor class. The class must implement a compress method that takes a filename parameter and returns a string with the minified output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/compressors.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyCustomJavascriptCompressor\n  def compress(filename)\n    # ...\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML5 Helper Basic Features\nDESCRIPTION: Demonstrates the basic features of the HTML5 helper including tag handling, content placement, nesting, and attribute assignment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/html5.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# 1\nhtml.div # => <div></div>\nhtml.img # => <img>\n\n# 2\nhtml.div('hello') # => <div>hello</div>\n\n# 3\nhtml.div(html.p('hello')) # => <div><p>hello</p></div>\n\n# 4\nhtml.div { 'hello' }\n# =>\n#<div>\n#  hello\n#</div>\n\n# 5\nhtml.div do\n  p 'hello'\nend\n# =>\n#<div>\n#  <p>hello</p>\n#</div>\n\n# 6\nhtml.div('hello', id: 'el', 'data-x': 'y') # => <div id=\"el\" data-x=\"y\">hello</div>\n\n# 7\nhtml.div(id: 'yay') { 'hello' }\n# =>\n#<div id=\"yay\">\n#  hello\n#</div>\n```\n\n----------------------------------------\n\nTITLE: Importing CSS in JavaScript for Hanami 2.1.0\nDESCRIPTION: Demonstrates how to import CSS files in JavaScript for Hanami 2.1.0 asset compilation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_16\n\nLANGUAGE: js\nCODE:\n```\nimport \"../css/app.css\";\n```\n\n----------------------------------------\n\nTITLE: Adding Preprocessor Dependencies to Gemfile\nDESCRIPTION: Ruby code showing how to include preprocessor dependencies in the project's Gemfile.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/preprocessors.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\n# ...\ngem 'sassc'\n```\n\n----------------------------------------\n\nTITLE: Creating Features Support File for Hanami 2.1\nDESCRIPTION: This snippet shows the contents of the new features support file for Hanami 2.1. It sets up Capybara for feature testing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\n\nrequire \"capybara/rspec\"\n\nCapybara.app = Hanami.app\n```\n\n----------------------------------------\n\nTITLE: Using Methods from Mailer Class in ERB Templates\nDESCRIPTION: This snippet demonstrates how to use methods defined in the mailer class within an ERB template. The greeting method is accessed in the template to display a welcome message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/basic-usage.md#2025-04-23_snippet_4\n\nLANGUAGE: erb\nCODE:\n```\n# lib/bookshelf/mailers/templates/welcome.html.erb\n<h2><%= greeting %></h2>\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Base Action Class in Ruby for Hanami\nDESCRIPTION: This snippet shows the standard base action class generated by Hanami for new applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/inheritance.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/action.rb\n\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Interactors in Hanami\nDESCRIPTION: Shell commands to create the necessary directories for interactors and their specs in a Hanami application structure.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mkdir lib/bookshelf/interactors\n$ mkdir spec/bookshelf/interactors\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration block defining the title and order for a Hanami framework assets guide page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Assets\norder: 150\n---\n```\n\n----------------------------------------\n\nTITLE: Checking database_url setting in development console\nDESCRIPTION: Example of accessing the database_url setting in a Hanami console session in development environment.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].database_url\n=> \"postgres://postgres:postgres@localhost:5432/bookshelf_development\"\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Part\nDESCRIPTION: Illustrates the generation of a view part in Hanami using the 'generate part' command. This example creates a 'book' part.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate part book\n```\n\n----------------------------------------\n\nTITLE: Basic Info Logging in Hanami\nDESCRIPTION: Demonstrates how to log a basic info message using Hanami logger.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/logger/usage.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].info \"Hello World\"\n```\n\n----------------------------------------\n\nTITLE: Asset Fingerprint Manifest Example\nDESCRIPTION: JSON manifest file that maps original asset paths to their fingerprinted versions with checksums for browser caching.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cat public/assets.json\n{\n  # ...\n  \"/assets/application.css\":\"/assets/application-9ab4d1f57027f0d40738ab8ab70aba86.css\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Email Delivery with RSpec in Hanami Applications\nDESCRIPTION: This example demonstrates how to test a welcome email mailer in Hanami using RSpec. It shows how to clear the deliveries array before each test, send a test email, and verify the recipient and content of the delivered message.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/testing.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/bookshelf/mailers/welcome_spec.rb\nRSpec.describe Mailers::Welcome do\n  before { Hanami::Mailer.deliveries.clear }\n\n  let(:user) { ... }\n\n  it \"delivers welcome email\" do\n    Mailers::Welcome.deliver(user: user)\n    mail = Hanami::Mailer.deliveries.last\n\n    expect(mail.to).to           eq([user.email])\n    expect(mail.body.encoded).to eq(\"Hello, #{ user.name }\")\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inclusion Validation in Hanami\nDESCRIPTION: Shows how to validate that a value is included in a given collection.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:genre) { included_in?(%w(rock folk)) }\n```\n\n----------------------------------------\n\nTITLE: Book Entity Test Specification\nDESCRIPTION: RSpec test verifying Book entity initialization with attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Book, type: :entity do\n  it 'can be initialized with attributes' do\n    book = Book.new(title: 'Refactoring', author: 'Martin Fowler')\n    expect(book.title).to eq('Refactoring')\n    expect(book.author).to eq('Martin Fowler')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Preparing Hanami Database\nDESCRIPTION: Command to prepare and setup the database for use.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Customizing Delimiter in format_number Helper\nDESCRIPTION: Shows how to customize the thousands delimiter when using the format_number helper in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1_000_000)                 # => \"1,000,000\"\nformat_number(1_000_000, delimiter: '.') # => \"1.000.000\"\n```\n\n----------------------------------------\n\nTITLE: Starting Specific Hanami Apps Using Environment Variables (Shell)\nDESCRIPTION: This command demonstrates how to start specific Hanami applications using the HANAMI_APPS environment variable. In this example, it starts the 'web' and 'api' applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/selectively-boot-apps.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_APPS=web,api bundle exec hanami server\n```\n\n----------------------------------------\n\nTITLE: Autoloaded SlackNotifier Class Definition\nDESCRIPTION: Example of defining a SlackNotifier class in lib/bookshelf that supports autoloading.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Process Manager Configuration for Hanami Development\nDESCRIPTION: This example demonstrates how to modify the bin/dev file to use a different process manager (shoreman) instead of the default foreman for running the Procfile.dev.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/dev.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\nshoreman Procfile.dev\n```\n\n----------------------------------------\n\nTITLE: Using Asset URL Helper with CDN in Ruby\nDESCRIPTION: This example demonstrates how the asset_url helper generates a full URL for an asset when a CDN base URL is configured. It shows the resulting absolute URL with the CDN prefix.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/using-a-cdn.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nasset_url(\"app.js\")\n# => \"https://some-cdn.net/my-site/assets/app-LSLFPUMX.js\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Assets in Hanami Application (Ruby)\nDESCRIPTION: Adds production-specific asset configuration to the Hanami application. It disables asset compilation, enables digest, and provides commented options for CDN configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v060.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nassets do\n  compile false\n  digest  true\n\n  # CDN Mode (optional)\n  # scheme 'https'\n  # host   '123.cloudfront.net'\n  # port   443\nend\n```\n\n----------------------------------------\n\nTITLE: Using a Custom JavaScript Compressor in Hanami Configuration\nDESCRIPTION: This code demonstrates how to configure a Hanami application to use a custom JavaScript compressor while using the built-in stylesheet compressor. This approach allows for flexible asset compression strategies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/compressors.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      assets do\n        javascript_compressor MyCustomJavascriptCompressor.new\n        stylesheet_compressor :builtin\n\n        # ...\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Output from link_to Helper\nDESCRIPTION: The HTML output generated by the link_to helper examples, showing the resulting anchor tags with appropriate attributes and content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/links.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/\">Home</a>\n<a href=\"/profile\" class=\"btn\" title=\"Your profile\">Profile</a>\n<a href=\"/profile\" class=\"avatar\" title=\"Your profile\">\n  <img src=\"/images/avatars/23.png\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Renaming Tables in Hanami Migrations\nDESCRIPTION: This snippet illustrates how to rename a table using the rename_table method in a Hanami migration. It shows the syntax for specifying the old and new table names.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/alter-table.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrename_table :users, :people\n```\n\n----------------------------------------\n\nTITLE: HTML Output of Formatted Numbers\nDESCRIPTION: Shows the resulting HTML output after the format_number helper has processed a large number with commas as delimiters.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<span>1,000,000</span>\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Model Dependency\nDESCRIPTION: Updates the Hanami model gem version constraint in the Gemfile to version 1.1\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v110.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'hanami-model', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: Named Route Configuration in Hanami\nDESCRIPTION: Shows how to configure a named route in Hanami's routing configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/sign-in\", to: \"sign_in\", as: :sign_in\n```\n\n----------------------------------------\n\nTITLE: Preparing Hanami Database\nDESCRIPTION: Shell command to prepare the database by running migrations\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action with Specific HTTP Method\nDESCRIPTION: Creates an action with a specific HTTP method using the --method flag.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action web books#create --method=post\n```\n\n----------------------------------------\n\nTITLE: Starting the Hanami Server\nDESCRIPTION: Shows the command to start the Hanami server. This allows developers to run and test their Hanami application locally.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami server\n```\n\n----------------------------------------\n\nTITLE: Adding Shotgun Gem for Code Reloading in Hanami (Ruby)\nDESCRIPTION: This code snippet shows how to add the 'shotgun' gem to the Gemfile for enabling code reloading in the development environment of a Hanami project. It's placed in the development group to ensure it's only used during development.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/code-reloading.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :development do\n  # Code reloading\n  # See: https://guides.hanamirb.org/projects/code-reloading\n  gem 'shotgun'\nend\n```\n\n----------------------------------------\n\nTITLE: Handling Raw Content in Hanami View\nDESCRIPTION: Demonstrates how to use the #raw helper in a Hanami view to output unescaped content from a local variable.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Snippets\n      class Show\n        include Web::View\n\n        def snippet\n          raw locals[:snippet]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Replacing Default Inflector in Hanami App (Ruby)\nDESCRIPTION: This snippet shows how to replace the default inflector in a Hanami application with a custom one. The custom inflector should be an instance of Dry::Inflector or provide the same interface.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/inflector.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\nrequire \"my_inflector\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflector = MyInflector.new\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Basic View Without Optional Content\nDESCRIPTION: Simple view implementation without optional content methods.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/layouts.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  module Views\n    module Books\n      class Index\n        include Web::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Hanami Server\nDESCRIPTION: Commands to install project dependencies with Bundler and launch the Hanami development server, which will make the application available at http://localhost:2300.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle install\n$ bundle exec hanami server\n```\n\n----------------------------------------\n\nTITLE: Checking Hanami Version with Aliases\nDESCRIPTION: These commands show how to display the Hanami version using the '--version' and '-v' aliases, which are alternative ways to retrieve the same version information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/version.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami --version\nv1.3.0\n\n$ bundle exec hanami -v\nv1.3.0\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Redis Client in Ruby for Hanami\nDESCRIPTION: This code snippet shows how to define a custom Redis client in the lib directory that requires an explicit require statement when used in Hanami components.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/autoloading.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/custom_redis/client.rb\n\nmodule CustomRedis\n  class Client\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initial Hanami Routes Configuration in Ruby\nDESCRIPTION: This snippet shows the initial routes configuration for a Hanami application, with an empty Routes class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\n\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    # Add your routes here. See https://guides.hanamirb.org/routing/overview/ for details.\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Executing Environment-Dependent Rake Task\nDESCRIPTION: Shows how to execute a Rake task that requires the environment to be loaded.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake clear_users\n```\n\n----------------------------------------\n\nTITLE: Request Testing for Hanami API with Rack::Test\nDESCRIPTION: An integration test for a Hanami API endpoint using Rack::Test. This demonstrates how to test the entire request/response cycle without mocking.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/testing.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/api_v1/requests/users_spec.rb\nRSpec.describe \"API V1 users\" do\n  include Rack::Test::Methods\n\n  # app is required by Rack::Test\n  let(:app) { Hanami.app }\n  let(:user) { UserRepository.new.create(name: 'Luca') }\n\n  it \"is successful\" do\n    get \"/api/v1/users/#{ user.id }\"\n\n    expect(last_response.status).to be(200)\n    expect(last_response.body).to eq(JSON.generate(user.to_h))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Signup Validation with Hanami::Validations in Ruby\nDESCRIPTION: This code snippet demonstrates how to use Hanami::Validations to validate a 'name' field in a signup form. It ensures the name is required, filled, a string, and between 3 and 64 characters long.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nclass Signup\n  include Hanami::Validations\n\n  validations do\n    required(:name) { filled? & str? & size?(3..64) }\n  end\n end\n\nresult = Signup.new(name: \"Luca\").validate\nresult.success? # => true\n```\n\n----------------------------------------\n\nTITLE: Gem Usage Example\nDESCRIPTION: Example showing how to require and use an external gem in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"kramdown\"\n\nmodule Bookshelf\n  class Markdown\n    def to_html(markdown)\n      Kramdown::Document.new(markdown).to_html\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Separator in format_number Helper\nDESCRIPTION: Demonstrates how to customize the decimal separator when using the format_number helper in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1.23)                 # => \"1.23\"\nformat_number(1.23, separator: ',') # => \"1,23\"\n```\n\n----------------------------------------\n\nTITLE: Running Books Index Feature Spec via RSpec (Shell)\nDESCRIPTION: This shell command executes the RSpec test suite, targeting the `books/index_spec.rb` feature spec file. It's used to test the initial (expected to fail) state of the books index page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/features/books/index_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Using Custom View Method in ERB Template\nDESCRIPTION: Example of how to use a custom view method that contains a link_to helper in an ERB template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/links.md#2025-04-23_snippet_3\n\nLANGUAGE: erb\nCODE:\n```\n<%= look_inside_link %>\n```\n\n----------------------------------------\n\nTITLE: Listing Available Rake Tasks in Hanami\nDESCRIPTION: Shows how to list all available Rake tasks in a Hanami project using the rake -T command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/rake.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake -T\nrake environment # Load the full project\nrake test        # Run tests (for Minitest)\nrake spec        # Run tests (for RSpec)\n```\n\n----------------------------------------\n\nTITLE: Using Custom Helper in Hanami View Ruby\nDESCRIPTION: This example shows how to use a custom helper method in a Hanami view. It calls the 'format_date' helper method to format the 'published_on' attribute of an article.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/articles/show.rb\nmodule Articles\n  class Show < View\n    def formatted_date\n      format_date(article.published_on)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Rake Test Task for Minitest\nDESCRIPTION: This snippet shows how to disable Rake 11 warnings for Minitest users by modifying the Rake::TestTask configuration in the Rakefile.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v080.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nRake::TestTask.new do |t|\n  t.warning = false\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Book Show Feature\nDESCRIPTION: This shell command runs the RSpec tests for the book show feature, demonstrating how to verify the functionality of showing a book and handling not found cases.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/features/books/show_spec.rb\n\nShowing a book\n  when no book matches the given ID\n    returns not found\n  when a book matches the given ID\n    shows the book\n\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Defining Indexes in Hanami Table Migrations\nDESCRIPTION: Shows how to create indexes on table columns using the index method. The example includes both a simple unique index on a single column and a composite index on multiple columns with a custom name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/create-table.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncreate_table :stores do\n  # ...\n  column :code, Integer, null: false\n  column :lat, Float\n  column :lng, Float\n\n  index :code, unique: true\n  index [:lat, :lng], name: :stores_coords_index\nend\n```\n\n----------------------------------------\n\nTITLE: HTML Template Rendering in Hanami\nDESCRIPTION: ERB template for rendering HTML response in a Hanami dashboard view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/mime-types.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<h1>Dashboard</h1>\n```\n\n----------------------------------------\n\nTITLE: Displaying Formatted Numbers in ERB Templates\nDESCRIPTION: Shows how to display a formatted number in an ERB template by calling the helper method defined in the view class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<span><%= download_count %></span>\n```\n\n----------------------------------------\n\nTITLE: Initializing Bookshelf Application in Ruby\nDESCRIPTION: This snippet shows how to initialize the Bookshelf application in the lib/bookshelf.rb file. It uses Hanami::Utils.require! to load all files in the lib/bookshelf directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v090.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# This line is enough ;)\nHanami::Utils.require!(\"lib/bookshelf\")\n```\n\n----------------------------------------\n\nTITLE: Creating View Helpers Module for Hanami 2.1.0\nDESCRIPTION: Sets up a module for view helpers in Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\n# auto_register: false\n# frozen_string_literal: true\n\nmodule Bookshelf\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Mailer Files\nDESCRIPTION: Shell command to generate mailer-related files for book addition notification.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/interactors.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate mailer book_added_notification\n```\n\n----------------------------------------\n\nTITLE: Basic Hanami View Class Implementation\nDESCRIPTION: Example of a basic Hanami view class showing the standard module structure and inclusion of the View mixin.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Action via CLI\nDESCRIPTION: Shell command to generate a new Hanami action including controller, view, and template files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nbundle exec hanami generate action web books#index\n```\n\n----------------------------------------\n\nTITLE: Opening Application in Browser\nDESCRIPTION: Command to open the Hanami application in the default web browser at localhost:2300.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ open http://localhost:2300\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Action in Application Architecture\nDESCRIPTION: This command removes an action named 'show' from the 'books' controller in an Application architecture project, along with associated view, template, route, and test code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy action books#show\n```\n\n----------------------------------------\n\nTITLE: Asset Helper Usage with Fingerprinting\nDESCRIPTION: Example of using asset helpers with fingerprinting enabled, showing both the ERB template and resulting HTML output.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= javascript 'application' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/assets/application-d1829dc353b734e3adc24855693b70f9.js\" type=\"text/javascript\"></script>\n```\n\n----------------------------------------\n\nTITLE: Handling Optional Locals\nDESCRIPTION: Example of providing default values for optional locals in a scope class using the locals hash.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/scopes.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nclass MediaPlayer < Bookshelf::Views::Scope\n  def show_artwork?\n    locals.fetch(:show_artwork, true)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Hanami Application Using HEAD Version\nDESCRIPTION: Command to generate a new Hanami application using the latest development version (HEAD) from the main branches of GitHub repositories. Useful for debugging Hanami issues.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/new.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf --head\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Mailer\nDESCRIPTION: This command removes a mailer named 'welcome' along with its associated templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy mailer welcome\n```\n\n----------------------------------------\n\nTITLE: Updated Root Endpoint Test in Ruby with RSpec\nDESCRIPTION: This snippet shows an updated RSpec test for the root endpoint, expecting a \"Welcome to Bookshelf\" message and a successful response.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/requests/root_spec.rb\n\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    get \"/\"\n\n    expect(last_response.body).to eq(\"Welcome to Bookshelf\")\n    expect(last_response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Wildcard Matching in Hanami Routes\nDESCRIPTION: Demonstrates wildcard path matching for handling unknown path segments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/routing/basic-usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nget '/files/*', to: 'files#show'\n```\n\n----------------------------------------\n\nTITLE: Generating Asset URL in Ruby\nDESCRIPTION: Uses the asset_url helper to generate a URL for a given asset source.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nasset_url(\"app.js\") # => \"/assets/app-LSLFPUMX.js\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Routes (CSV Format) (Shell)\nDESCRIPTION: Executes the `hanami routes` command via Bundler with the `--format=csv` option to display all configured routes in Comma-Separated Values (CSV) format. This format is useful for machine parsing or importing into spreadsheets. The output includes columns for METHOD, PATH, TO (controller action), AS (named route alias), and CONSTRAINTS. This command must be run within the context of a Hanami project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/routes.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami routes --format=csv\n\nMETHOD,PATH,TO,AS,CONSTRAINTS\nGET,/,home.index,:root,\"\"\nGET,/books,books.index,\"\",\"\"\nGET,/books/:id,books.show,\"\",\"\"\nPOST,/books,books.create,\"\",\"\"\n```\n\n----------------------------------------\n\nTITLE: Inflection Configuration Example\nDESCRIPTION: Example of configuring acronym inflections in the Hanami application class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nrequire \"hanami\"\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.inflections do |inflections|\n      inflections.acronym \"DB\", \"WNBA\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Rendering Template within Template in ERB\nDESCRIPTION: Shows how to render one template inside another template using the render method with template option in ERB.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/templates.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n# Given a template under:\\n#   templates/articles/index.html.erb\\n#\\n# In the layout template:\\n#   templates/application.html.erb\\n#\\n<%= render template: 'articles/index' %>\n```\n\n----------------------------------------\n\nTITLE: Using link_to Helper in ERB Templates\nDESCRIPTION: Examples showing how to use the link_to helper with text content and HTML attributes in ERB templates. The first example creates a simple link to the home page, while the second adds CSS classes and a title attribute.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/links.md#2025-04-23_snippet_0\n\nLANGUAGE: erb\nCODE:\n```\n<%= link_to 'Home', '/' %>\n<%= link_to 'Profile', routes.profile_path, class: 'btn', title: 'Your profile' %>\n<%=\n  link_to(routes.profile_path, class: 'avatar', title: 'Your profile') do\n    img(src: user.avatar.url)\n  end\n%>\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Assets Guide Metadata\nDESCRIPTION: YAML frontmatter defining the title and order for a Hanami framework documentation page about assets\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Assets\norder: 140\n---\n```\n\n----------------------------------------\n\nTITLE: Dropping Database in Hanami (Shell)\nDESCRIPTION: Command to drop the existing database for the current environment in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db drop\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Mandrill Delivery Method in Hanami Environment\nDESCRIPTION: Demonstrates how to configure a custom delivery method using Mandrill API in a Hanami application environment file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/delivery.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n# ...\nrequire 'lib/mailers/mandrill_delivery_method'\n\nHanami.configure do\n  # ...\n\n  environment :production do\n    # ...\n\n    mailer do\n      delivery MandrillDeliveryMethod, api_key: ENV['MANDRILL_API_KEY']\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Rakefile Configuration\nDESCRIPTION: Instructions for modifying the Rakefile to remove Hanami rake tasks.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/use-your-own-orm.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Remove this line\n# require 'hanami/rake_tasks'\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Foreign Keys in Hanami Relation\nDESCRIPTION: This example demonstrates how to define a custom foreign key using a UUID type in a Hanami relation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/relations.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Relations\n    class Credentials < Hanami::DB::Relation\n      schema :credentials, infer: true do\n        attribute :user_id, Types.ForeignKey(:users, Types::PG::UUID)\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Hanami 2.1.0\nDESCRIPTION: Adds new entries to .gitignore to exclude generated assets, node modules, and test examples.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npublic/\nnode_modules/\nspec/examples.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Rack Middleware Stack in Hanami\nDESCRIPTION: This command shows the current Rack middleware stack configuration in a Hanami application. It lists the middleware in the order they are applied.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/middleware.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n/    Rack::Session::Cookie\n/    Hanami::Middleware::BodyParser\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame-Options in Hanami\nDESCRIPTION: Examples of setting X-Frame-Options header to prevent Clickjacking attacks. Shows both DENY and ALLOW-FROM configurations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/security.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Denies all untrusted domains (default)\nsecurity.x_frame_options 'DENY'\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Allows iframes on example.com\nsecurity.x_frame_options 'ALLOW-FROM https://example.com/'\n```\n\n----------------------------------------\n\nTITLE: Generated HTML Script Tag with Subresource Integrity (HTML)\nDESCRIPTION: Example of an HTML script tag generated by Hanami's javascript_tag helper when Subresource Integrity is enabled, including integrity and crossorigin attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/using-a-cdn.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script\n  src=\"/assets/app-LSLFPUMX.js\"\n  type=\"text/javascript\"\n  integrity=\"sha256-WB2pRuy8LdgAZ0aiFxLN8DdfRjKJTc4P4xuEw31iilM= sha512-4gegSER1uqxBvmlb/O9CJypUpRWR49SniwUjOcK2jifCRjFptwGKplFWGlGJ1yms+nSlkjpNCS/Lk9GoKI1Kew==\"\n  crossorigin=\"anonymous\"\n></script>\n```\n\n----------------------------------------\n\nTITLE: Generating Unescaped JSON Output in Hanami View\nDESCRIPTION: Demonstrates how to generate and return unescaped JSON output for an entire Hanami view using the #raw helper.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/escape.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'json'\n\nmodule Web\n  module Views\n    module Books\n      class JsonShow < Show\n        format :json\n\n        def render\n          raw JSON.generate(book.to_h)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Project Key to .hanamirc\nDESCRIPTION: This snippet demonstrates how to add the 'project' key to the .hanamirc file, using the snake_case name of the project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v080.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nproject=active_citizens\n```\n\n----------------------------------------\n\nTITLE: New Book Form Template\nDESCRIPTION: ERB template for the book creation form using Hanami form helpers\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\n<!-- app/templates/books/new.html.erb -->\n\n<h1>New book</h1>\n\n<%= form_for :book, routes.path(:create_book) do |f| %>\n  <p>\n    <%= f.label \"Title\", for: :title %>\n    <%= f.text_field :title %>\n  </p>\n  <p>\n    <%= f.label \"Author\", for: :author %>\n    <%= f.text_field :author %>\n  </p>\n  <p>\n    <%= f.submit \"Create\" %>\n  </p>\n<% end %>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Database Connection\nDESCRIPTION: These snippets show how to set database connection strings in .env files for development and test environments.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n# .env\nDATABASE_URL=postgres://postgres:postgres@localhost:5432/bookshelf_development\n```\n\nLANGUAGE: shell\nCODE:\n```\n# .env.test\nDATABASE_URL=postgres://postgres:postgres@localhost:5432/bookshelf_test\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Relation for Books\nDESCRIPTION: This shell command generates a new Hanami relation for interacting with the books table.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate relation books\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version in Shell\nDESCRIPTION: Command to check the installed Ruby version, which should be 3.0 or greater for Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ruby --version\n```\n\n----------------------------------------\n\nTITLE: Defining Bookshelf Module in Ruby\nDESCRIPTION: This snippet shows the content of the 'lib/bookshelf.rb' file, which defines an empty Bookshelf module. This module serves as the namespace for the Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v100.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\nend\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Model\nDESCRIPTION: This command removes a model named 'book', including its entity, repository, and associated test code.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy model book\n```\n\n----------------------------------------\n\nTITLE: Opening the Hanami Application in Browser (Shell)\nDESCRIPTION: This snippet demonstrates how to launch the default web browser pointing to the local Hanami app's development server by using the 'open' shell command. This command opens 'http://localhost:2300', making it easy for users to quickly view the running application. It is platform-dependent and typically available on macOS.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ open http://localhost:2300\\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Hanami Version with the 'version' Command\nDESCRIPTION: This command displays the current version of the Hanami framework. It uses the explicit 'version' subcommand to retrieve the version information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/version.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami version\nv1.3.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Sources in Hanami Application (Ruby)\nDESCRIPTION: Updates the asset configuration in the Hanami application to use the new assets block syntax. It defines JavaScript and stylesheet compressors and specifies the sources for assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v060.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nassets do\n  javascript_compressor :builtin\n  stylesheet_compressor :builtin\n\n  sources << [\n    'assets',\n    # 'vendor/assets'\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Running RSpec Tests for Book Creation in Hanami\nDESCRIPTION: This snippet shows the output of running RSpec tests for the book creation functionality. It demonstrates successful tests for both valid and invalid parameter scenarios.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/create_spec.rb\n\nPOST /books\n  given valid params\n    creates a book\n  given invalid params\n    returns 422 unprocessable\n\nFinished in 0.07143 seconds (files took 1.32 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Creating bin/dev Script for Hanami 2.1\nDESCRIPTION: This snippet shows the contents of the new bin/dev script for Hanami 2.1. It installs foreman if not present and starts the application using Procfile.dev.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n#!/usr/bin/env sh\n\nif ! gem list foreman -i --silent; then\n  echo \"Installing foreman...\"\n  gem install foreman\nfi\n\nexec foreman start -f Procfile.dev \"$@\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Hanami Middleware Stack\nDESCRIPTION: This shell command shows how to use the 'hanami middleware' command to inspect the Rack middleware stack in a Hanami application. It displays the currently mounted middleware.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/rack-integration.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/    Dry::Monitor::Rack::Middleware (instance)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subresource Integrity Algorithms in Hanami\nDESCRIPTION: Configuration for customizing or disabling Subresource Integrity in production environment. Shows how to specify different checksum algorithms.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/content-delivery-network.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Web\n  class Application < Hanami::Application\n    configure :production do\n      assets do\n        # ...\n        subresource_integrity :sha256\n      end\n    end\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nsubresource_integrity :sha256, :sha512\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"/assets/application-92cab02f6d2d51253880cd98d91f1d0e.js\" type=\"text/javascript\" integrity=\"sha256-WB2pRuy8LdgAZ0aiFxLN8DdfRjKJTc4P4xuEw31iilM= sha512-4gegSER1uqxBvmlb/O9CJypUpRWR49SniwUjOcK2jifCRjFptwGKplFWGlGJ1yms+nSlkjpNCS/Lk9GoKI1Kew==\" crossorigin=\"anonymous\"></script>\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Formatted Count\nDESCRIPTION: Shows the HTML output of the formatted count using the format_number helper method in a Hanami template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<span>1,000,000</span>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration for Hanami Guide\nDESCRIPTION: YAML frontmatter defining the title and order of the associations guide page in the Hanami documentation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Associations\norder: 100\n---\n```\n\n----------------------------------------\n\nTITLE: Daily Log Rotation Configuration\nDESCRIPTION: Setting up daily log rotation with specific file path and JSON formatting.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  environment :production do\n    logger 'daily', level: :info, formatter: :json, stream: 'log/production.log'\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami in Development Mode\nDESCRIPTION: Demonstrates how to start a Hanami application in development mode using the 'hanami dev' command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/dev.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami dev\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for Architecture Guide\nDESCRIPTION: The front matter section of a markdown document defining metadata for the Architecture guide page. It specifies the title as 'Architecture' and sets the display order to 20 in the documentation hierarchy.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/architecture/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Architecture\norder: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Hanami Application in Development Mode\nDESCRIPTION: This command starts a Hanami application in development mode using the 'hanami dev' command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/dev.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami dev\n```\n\n----------------------------------------\n\nTITLE: Setting X-Content-Type-Options in Hanami\nDESCRIPTION: Configuration for X-Content-Type-Options header to prevent MIME-type sniffing.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/security.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# Will prevent the browser from MIME-sniffing a response away from the declared content-type (default)\nsecurity.x_content_type_options 'nosniff'\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Model Dependency\nDESCRIPTION: Updates the Hanami Model dependency in Gemfile to version 1.2\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v120.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'hanami-model', '~> 1.2'\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Hanami Guide\nDESCRIPTION: YAML frontmatter metadata for a documentation page about validations in Hanami, specifying the title and display order of the guide.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Validations\norder: 120\n---\n```\n\n----------------------------------------\n\nTITLE: Sample Test Output from RSpec for Show Endpoint Failures - Shell\nDESCRIPTION: Shows typical output from running RSpec when the GET /books/:id route and action do not exist or are misconfigured. Lists two failed specs: one for a found book and one for not found, with details about missing successful response and content type. Useful for troubleshooting test failures during endpoint development.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/requests/books/show_spec.rb\n\nGET /books/:id\n  when a book matches the given id\n    renders the book (FAILED - 1)\n  when no book matches the given id\n    returns not found (FAILED - 2)\n\nFailures:\n\n  1) GET /books/:id when a book matches the given id renders the book\n     Failure/Error: expect(last_response).to be_successful\n       expected `#<Rack::MockResponse:0x000000010c9f5788 @original_headers={\"Content-Length\"=>\"9\"}, @errors=\"\", @cooki...ms/rack-2.2.4/lib/rack/response.rb:287>, @block=nil, @body=[\"Not Found\"], @buffered=true, @length=9>.successful?` to be truthy, got false\n     # ./spec/requests/books/show_spec.rb:14:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:15:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:14:in `block (2 levels) in <top (required)>'\n\n  2) GET /books/:id when no book matches the given id returns not found\n     Failure/Error: expect(last_response.content_type).to eq(\"app/json; charset=utf-8\")\n\n       expected: \"app/json; charset=utf-8\"\n            got: nil\n\n       (compared using ==)\n     # ./spec/requests/books/show_spec.rb:30:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:15:in `block (3 levels) in <top (required)>'\n     # ./spec/support/database_cleaner.rb:14:in `block (2 levels) in <top (required)>'\n\nFinished in 0.05427 seconds (files took 0.88631 seconds to load)\n2 examples, 2 failures\n```\n\n----------------------------------------\n\nTITLE: Books Part with Number Formatting\nDESCRIPTION: Implementation of a Hanami part that uses the format_number helper to format book counts.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/number-formatting.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/parts/books.rb\n\nmodule Bookshelf\n  module Views\n    module Parts\n      module Books\n        def formatted_count\n          helpers.format_number(value.count)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Customizing Number Precision in Hanami\nDESCRIPTION: Demonstrates how to control the decimal precision when formatting numbers in Hanami views using the precision option.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(Math::PI)               # => \"3.14\"\nformat_number(Math::PI, precision: 6) # => \"3.141592\"\n```\n\n----------------------------------------\n\nTITLE: Defining Fixed Path Route in Hanami\nDESCRIPTION: Example of a route with a fixed path that exactly matches '/books'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/routing/overview.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nget \"/books\", to: \"books.index\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ROM Relation for Books with Pagination\nDESCRIPTION: This code configures the ROM relation for books, enabling pagination support with a default page size of 5.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Persistence\n    module Relations\n      class Books < ROM::Relation[:sql]\n        schema(:books, infer: true)\n\n        use :pagination\n        per_page 5\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Guide YAML Frontmatter\nDESCRIPTION: YAML frontmatter configuration for a Hanami documentation page about Actions, specifying the title and ordering position in the guides.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Actions\norder: 50\n---\n```\n\n----------------------------------------\n\nTITLE: Specifying Hanami Documentation Version in YAML\nDESCRIPTION: This YAML snippet defines the version of Hanami documentation being used. It sets the version to 2.2, which is likely used for configuration or build processes related to the Hanami documentation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nversion: v2.2\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Users Migration in Hanami\nDESCRIPTION: Database migration for the users table defining the schema with name, created_at and updated_at fields.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024083639_create_users.rb\nHanami::Model.migration do\n  change do\n    create_table :users do\n      primary_key :id\n\n      column :name, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Watching Assets with Hanami CLI\nDESCRIPTION: Shows the usage of 'hanami assets watch' command for monitoring asset changes during development. This command automatically recompiles assets when changes are detected in the source files.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets watch\n[bookshelf] [watch] build finished, watching for changes...\n[bookshelf] [watch] build started (change: \"app/assets/js/app.js\")\n[bookshelf] [watch] build finished\n[bookshelf] [watch] build started (change: \"app/assets/css/app.css\")\n[bookshelf] [watch] build finished\n```\n\n----------------------------------------\n\nTITLE: Updating spec_helper.rb for Hanami 2.1\nDESCRIPTION: This snippet shows the line to be added to spec_helper.rb for Hanami 2.1. It requires the new features support file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"support/features\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Hanami Application in Ruby\nDESCRIPTION: This snippet shows the contents of the new 'config/boot.rb' file, which is used to boot the Hanami project from external commands, such as Sidekiq.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v100.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative './environment'\nHanami.boot\n```\n\n----------------------------------------\n\nTITLE: Registering Custom MIME Types in Hanami Application\nDESCRIPTION: Demonstrates how to register custom MIME types in a Hanami application to use them with format= or accept methods. The configuration uses a hash mapping format symbols to MIME type strings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      controller.format custom: 'application/custom'\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Home Feature Spec via RSpec (Shell)\nDESCRIPTION: This shell command executes the RSpec test suite, specifically targeting the newly created feature spec file `spec/features/home_spec.rb`. It verifies the home page behavior using Capybara.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rspec spec/features/home_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Setting Session Values in First Hanami Application\nDESCRIPTION: This snippet shows how to set a session value in one Hanami application. The value can then be accessed from another application if both share the same session secret.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/sessions.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n\n        def call(params)\n          session[:a] = 'foo' # assign\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Viewing Project Structure\nDESCRIPTION: Command to display the directory structure of the newly created Hanami application using the tree command.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cd bookshelf\n$ tree --gitignore .\n```\n\n----------------------------------------\n\nTITLE: Asset Directory Structure Example\nDESCRIPTION: Shell command output showing the compiled assets directory structure in the public folder.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/assets/preprocessors.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ tree public\npublic/\n└── assets\n    ├── application.css\n    └── reset.css\n```\n\n----------------------------------------\n\nTITLE: Exploring Project Directory Structure with cd and tree (Shell)\nDESCRIPTION: This snippet uses the 'cd' command to navigate into the application's project directory, followed by the 'tree --gitignore .' command to visually explore the directory structure, including hidden files and directories listed in .gitignore. The resulting output provides a hierarchical view of the newly generated Hanami project's files and folders, aiding in understanding the scaffolded application organization.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ cd bookshelf\\n$ tree --gitignore .\\n.\\n├── Gemfile\\n├── Gemfile.lock\\n├── Guardfile\\n├── Procfile.dev\\n├── README.md\\n├── Rakefile\\n├── app\\n│   ├── action.rb\\n│   ├── actions\\n│   ├── assets\\n│   │   ├── css\\n│   │   │   └── app.css\\n│   │   ├── images\\n│   │   │   └── favicon.ico\\n│   │   └── js\\n│   │       └── app.js\\n│   ├── db\\n│   │   ├── relation.rb\\n│   │   ├── repo.rb\\n│   │   └── struct.rb\\n│   ├── operation.rb\\n│   ├── relations\\n│   ├── repos\\n│   ├── structs\\n│   ├── templates\\n│   │   └── layouts\\n│   │       └── app.html.erb\\n│   ├── view.rb\\n│   └── views\\n│       └── helpers.rb\\n├── bin\\n│   └── dev\\n├── config\\n│   ├── app.rb\\n│   ├── assets.js\\n│   ├── db\\n│   │   ├── migrate\\n│   │   └── seeds.rb\\n│   ├── puma.rb\\n│   ├── routes.rb\\n│   └── settings.rb\\n├── config.ru\\n├── lib\\n│   ├── bookshelf\\n│   │   └── types.rb\\n│   └── tasks\\n├── package-lock.json\\n├── package.json\\n└── spec\\n    ├── requests\\n    │   └── root_spec.rb\\n    ├── spec_helper.rb\\n    └── support\\n        ├── db\\n        │   └── cleaning.rb\\n        ├── db.rb\\n        ├── features.rb\\n        ├── operations.rb\\n        ├── requests.rb\\n        └── rspec.rb\\n\\n26 directories, 36 files\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Mailer with Shared Code\nDESCRIPTION: Demonstrates how to configure Hanami mailers with shared code using the prepare block. This configuration includes the DefaultSender module for all mailers in the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/share-code.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf.rb\n# ...\n\nHanami.configure do\n  # ...\n  mailer do\n    root 'lib/bookshelf/mailers'\n\n    # See https://guides.hanamirb.org/mailers/delivery\n    delivery :test\n\n    prepare do\n      include Mailers::DefaultSender\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Migrations in Specific Environment\nDESCRIPTION: Terminal command showing how to run migrations in a specific environment like production using the HANAMI_ENV environment variable.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ HANAMI_ENV=production bundle exec hanami db migrate\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Hanami Guide\nDESCRIPTION: YAML frontmatter metadata defining the title and order of the introduction guide page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Introduction\norder: 10\n---\n```\n\n----------------------------------------\n\nTITLE: Querying Hanami Version via CLI - Shell\nDESCRIPTION: Shows how to execute the Hanami CLI command to print the current framework version in use by the application. Requires Hanami to be installed as part of the application's bundle, and Bundler must be available in the environment. The key parameter is 'version', which outputs the current version number to standard output. The snippet expects the working directory to be a Hanami application and outputs the version number, such as 'v2.2.0'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/version.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ bundle exec hanami version\\nv2.2.0\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Enforcement in Hanami 1.3.0\nDESCRIPTION: This snippet demonstrates how to use the rack-ssl-enforcer middleware to enforce SSL in a Hanami 1.3.0 application. It replaces the deprecated 'force_ssl' option in individual application configurations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v130.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\nrequire \"rack/ssl-enforcer\"\n\nHanami.configure do\n  # ...\n  middleware.use Rack::SslEnforcer\nend\n```\n\n----------------------------------------\n\nTITLE: Destroying a Hanami Migration\nDESCRIPTION: This command removes a migration file named 'create_books' from the db/migrations directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/destroy.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami destroy migration create_books\n```\n\n----------------------------------------\n\nTITLE: Rendered HTML Output of Formatted Numbers\nDESCRIPTION: Shows the HTML output of the formatted numbers using the format_number helper method in Hanami templates.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/number-formatting.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span>1,000,000</span>\n<span>1,000,000.00</span>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter defining the title and order for a documentation page about Hanami applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: App\norder: 20\n---\n```\n\n----------------------------------------\n\nTITLE: Settings Value Access - Ruby\nDESCRIPTION: Demonstrates how to access setting values in the Hanami console\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"settings\"].analytics_enabled\n=> true\n\nbookshelf[development]> Hanami.app[\"settings\"].max_cart_items\n=> 100\n```\n\n----------------------------------------\n\nTITLE: HTML Output from Custom View Method\nDESCRIPTION: The HTML output generated by the custom look_inside_link view method, showing the resulting anchor tag with an image inside.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/links.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"/books/1/look_inside\" class=\"book-cover\">\n  <img src=\"https://cdn.bookshelf.org/books/1/full.png\">\n</a>\n```\n\n----------------------------------------\n\nTITLE: Preparing the Database in Hanami\nDESCRIPTION: Shell command to apply the migrations and prepare the database schema.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Models for Author and Book\nDESCRIPTION: Shell commands to generate Hanami models for Author and Book entities, creating necessary files and migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/belongs-to.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate model author\n      create  lib/bookshelf/entities/author.rb\n      create  lib/bookshelf/repositories/author_repository.rb\n      create  db/migrations/20171024081558_create_authors.rb\n      create  spec/bookshelf/entities/author_spec.rb\n      create  spec/bookshelf/repositories/author_repository_spec.rb\n\n$ bundle exec hanami generate model book\n      create  lib/bookshelf/entities/book.rb\n      create  lib/bookshelf/repositories/book_repository.rb\n      create  db/migrations/20171024081617_create_books.rb\n      create  spec/bookshelf/entities/book_spec.rb\n      create  spec/bookshelf/repositories/book_repository_spec.rb\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Documentation Frontmatter in YAML\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about entities in the Hanami framework. Specifies the title and ordering position of the page.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Entities\norder: 90\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Users in Hanami\nDESCRIPTION: Ruby code demonstrating how to create user records using the UserRepository in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nusers = UserRepository.new\nauthor = users.create(name: \"Luca\")\n  # => #<User:0x00007ffe71bc3b18 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 09:06:57 UTC, :updated_at=>2017-10-24 09:06:57 UTC}>\n\ncommenter = users.create(name: \"Maria G\")\n  # => #<User:0x00007ffe71bb3010 @attributes={:id=>2, :name=>\"Maria G\", :created_at=>2017-10-24 09:07:16 UTC, :updated_at=>2017-10-24 09:07:16 UTC}>\n```\n\n----------------------------------------\n\nTITLE: Asset Directory Structure\nDESCRIPTION: Shell output showing the directory structure of assets across multiple Hanami applications before precompilation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/assets.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ tree .\n├── apps\n│   ├── admin\n│   │   ├── assets\n│   │   │   └── js\n│   │   │       ├── application.js\n│   │   │       └── zepto.js\n# ...\n│   ├── metrics\n│   │   ├── assets\n│   │   │   └── javascripts\n│   │   │       └── dashboard.js.es6\n# ...\n│   └── web\n│       ├── assets\n│       │   ├── images\n│       │   │   └── bookshelf.jpg\n│       │   └── javascripts\n│       │       └── application.js\n# ...\n│       └── vendor\n│           └── assets\n│               └── javascripts\n│                   └── jquery.js\n# ...\n```\n\n----------------------------------------\n\nTITLE: Updating Hanami Core Dependency\nDESCRIPTION: Updates the Hanami core framework dependency in Gemfile to version 1.2\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v120.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\ngem 'hanami', '~> 1.2'\n```\n\n----------------------------------------\n\nTITLE: Hanami Operation with Database Transaction\nDESCRIPTION: Shows how to use a database transaction within a Hanami operation. The `transaction` block ensures that all steps are executed within a single transaction.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/operations/overview.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ndef call(attrs)\n  transaction do\n    attrs = step validate(attrs)\n    book = step create(attrs)\n    step update_feeds(book)\n\n    book\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Persistence Provider Configuration in Ruby\nDESCRIPTION: ROM database configuration setup for the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.app.register_provider :persistence, namespace: true do\n  prepare do\n    require \"rom\"\n\n    config = ROM::Configuration.new(:sql, target[\"settings\"].database_url)\n\n    register \"config\", config\n    register \"db\", config.gateways[:default].connection\n  end\n\n  start do\n    config = target[\"persistence.config\"]\n\n    config.auto_registration(\n      target.root.join(\"lib/bookshelf/persistence\"),\n      namespace: \"Bookshelf::Persistence\"\n    )\n\n    register \"rom\", ROM.container(config)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Hanami Entity with Default Values\nDESCRIPTION: This example shows how to instantiate a User entity with proper values in default mode. It demonstrates that attributes are properly assigned and attributes not specified in the constructor default to nil.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nuser = User.new(name: \"Luca\", age: 35, email: \"luca@hanami.test\")\n\nuser.name     # => \"Luca\"\nuser.age      # => 35\nuser.email    # => \"luca@hanami.test\"\nuser.codes    # => nil\nuser.comments # => nil\n```\n\n----------------------------------------\n\nTITLE: Zeitwerk Autoloading Error Example\nDESCRIPTION: Example of an error message shown when file naming doesn't match the expected constant name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/autoloading.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nZeitwerk::NameError: expected file bookshelf/app/entities/book.rb to define constant Bookshelf::Entities::Book, but didn't\n```\n\n----------------------------------------\n\nTITLE: Adding a Plugin to Gemfile in Hanami\nDESCRIPTION: Demonstrates how to add a Hanami-compatible gem in the :plugins group of your project's Gemfile. This is required for Hanami to load commands from third-party gems.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/plugins.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngroup :plugins do\n  gem \"hanami-reloader\"\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Hanami Documentation Version in YAML\nDESCRIPTION: This YAML snippet defines the version of Hanami documentation guides. It sets the version to v2.0, indicating that these guides are for Hanami version 2.0.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nversion: v2.0\n---\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Database Migrations\nDESCRIPTION: Terminal command to execute pending database migrations in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/migrations/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ bundle exec hanami db migrate\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Migration\nDESCRIPTION: Creates an empty database migration with a timestamp and specified name.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/generators.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate migration create_books\n      create  db/migrations/20161112113203_create_books.rb\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Console\nDESCRIPTION: Demonstrates how to start the Hanami console. This interactive environment allows developers to interact with their application and test code snippets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami console\n```\n\n----------------------------------------\n\nTITLE: Defining a View Object in Ruby for Hanami\nDESCRIPTION: This snippet demonstrates how to define a view object in Hanami. It includes a class that inherits from Hanami::View and specifies the template to be used.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\nmodule Books\n  class Index < Hanami::View\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Hanami Guide Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter metadata defining the title and order for a Hanami framework documentation page about helpers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Helpers\norder: 130\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Production Server\nDESCRIPTION: Command for starting the Hanami application in production using Puma.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/cli-commands/commands.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec puma -C config/puma.rb\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag Conditional Requests in Hanami\nDESCRIPTION: This snippet shows how to implement conditional requests using ETags in a Hanami action. It demonstrates using the response.fresh method with an etag parameter to validate requests based on resource version identifiers.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/http-caching.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"user_repo\"]\n\n        def handle(request, response)\n          user = user_repo.find(request.params[:id])\n\n          response.fresh etag: \"#{user.id}-#{user.updated_at}\"\n\n          # ...\n        end\n      end\n    end\n  end\nend\n\n# Case 1 (missing or non-matching If-None-Match)\n# GET /users/23\n#  => 200, ETag: 84e037c89f8d55442366c4492baddeae\n\n# Case 2 (matching If-None-Match)\n# GET /users/23, If-None-Match: 84e037c89f8d55442366c4492baddeae\n#  => 304\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action for Books Index\nDESCRIPTION: This shell command generates a new Hanami action for the books index endpoint.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index\n```\n\n----------------------------------------\n\nTITLE: Installing Hanami Gem\nDESCRIPTION: Command to install the Hanami gem using RubyGems package manager.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gem install hanami\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Documentation Server\nDESCRIPTION: Command to start the local development server for Hanami documentation. Runs the server at http://localhost:1313.\nSOURCE: https://github.com/hanami/guides/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbin/server\n```\n\n----------------------------------------\n\nTITLE: Preparing the Database in Hanami\nDESCRIPTION: Shell command to apply migrations and prepare the database for Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Defining Base Helpers Module in Hanami\nDESCRIPTION: Basic structure for defining custom helpers in a Hanami application\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MyApp\n  module Views\n    module Helpers\n      # Add your view helpers here\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Template for Hanami 2.1.0\nDESCRIPTION: Defines a basic HTML layout template for Hanami 2.1.0 applications, including meta tags and asset inclusion.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bookshelf</title>\n    <%= favicon_tag %>\n    <%= stylesheet_tag \"app\" %>\n  </head>\n  <body>\n    <%= yield %>\n    <%= javascript_tag \"app\" %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-Specific Settings in Hanami (Ruby)\nDESCRIPTION: Illustrates how to set environment-specific configurations in a Hanami application. This example shows setting up a production-only middleware in the app configuration.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/environments.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    environment(:production) do\n      # Production specific config or initialization\n      config.middleware.use ProductionOnlyMiddleware\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Modifying Gemfile for Custom ORM\nDESCRIPTION: Instructions for editing the Gemfile to remove hanami-model and add custom ORM gems.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/use-your-own-orm.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Remove this line\n# gem 'hanami-model'\n\n# Add your preferred ORM gem(s)\n\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Failing Updated Root Spec (Shell)\nDESCRIPTION: This output shows the result of running the updated root request spec before implementing the corresponding route and action. It indicates that the test failed because the actual response body (\"Not Found\") did not contain the expected text \"Welcome to Bookshelf\".\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nRoot\n  is successful (FAILED - 1)\n\nFailures:\n\n  1) Root is successful\n     Failure/Error: expect(last_response.body).to include \"Welcome to Bookshelf\"\n       expected \"Not Found\" to include \"Welcome to Bookshelf\"\n\n1 example, 1 failure\n```\n\n----------------------------------------\n\nTITLE: Creating 500 Error Page for Hanami 2.1.0\nDESCRIPTION: Defines a custom 500 error page with responsive styling for Hanami 2.1.0 applications.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/upgrade-notes/v2.1.0.md#2025-04-23_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>We're sorry, but something went wrong (500)</title>\n  <style>\n    :root {\n      --foreground-rgb: 0, 0, 0;\n      --background-rgb: 255, 255, 255;\n      --font-sans: ui-sans-serif,system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Arial,Noto Sans,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      :root {\n        --foreground-rgb: 255, 255, 255;\n        --background-rgb: 0, 0, 0;\n      }\n    }\n\n    * {\n      box-sizing: border-box;\n      margin: 0;\n      padding: 0;\n    }\n\n    body,\n    html {\n      max-width: 100vw;\n      overflow-x: hidden;\n      font-size: 100%;\n    }\n\n    body {\n      color: rgb(var(--foreground-rgb));\n      background: rgb(var(--background-rgb));\n      font-family: var(--font-sans);\n      font-style: normal;\n    }\n\n    main {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      height: 100vh;\n      padding: 0 4vw;\n    }\n\n    .message {\n      display: flex;\n      gap: 1rem;\n      flex-direction: column;\n      text-align: center;\n    }\n\n    .message h1 {\n      font-size: 2rem;\n      font-weight: 500;\n    }\n\n    p {\n      line-height: 1.6;\n    }\n\n    @media (prefers-color-scheme: dark) {\n      html {\n        color-scheme: dark;\n      }\n    }\n  </style>\n  </head>\n  <body>\n    <!-- This file lives in public/500.html -->\n    <main>\n      <div class=\"message\">\n        <h1>500</h1>\n        <p>We're sorry, but something went wrong.</p>\n      </div>\n    </main>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Exception Handling in Hanami\nDESCRIPTION: Shows how to implement environment-specific exception handling by re-raising exceptions in development for debugging purposes while providing friendly error messages in production. This enhances developer experience without compromising user experience.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/exception-handling.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle_standard_error(request, response, exception)\n  if Hanami.env?(:development)\n    raise exception\n  else\n    response.status = 500\n    response.body = \"Sorry, something went wrong handling your request\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Custom Options in Hanami\nDESCRIPTION: Demonstrates how to set cookies with custom options that override global settings, including setting different expiration times for specific cookies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n\n          response.cookies[\"longer_lived_cookie\"] = {\n            value: \"anzac_biscuit\",\n            max_age: 604800\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Renaming Dependencies in Hanami Operations (Ruby)\nDESCRIPTION: Demonstrates how to rename dependencies using the Deps mixin in a Hanami operation. This allows for clearer naming and easier testing by providing renamed dependencies to the constructor.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/container-and-components.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      include Deps[\n        \"email_client\",\n        email_renderer: \"renderers.welcome_email\"\n      ]\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Applying Database Changes in Hanami (Shell)\nDESCRIPTION: Command to apply database changes in Hanami. This runs pending migrations, dumps a fresh schema, and deletes all migrations from the migrations directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db apply\n```\n\n----------------------------------------\n\nTITLE: Form with Nested Collections\nDESCRIPTION: Example showing how to handle nested collections in Hanami forms.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/forms.md#2025-04-23_snippet_5\n\nLANGUAGE: erb\nCODE:\n```\n<%=\n  form_for :delivery, routes.deliveries_path do\n    text_field :customer_name\n\n    fields_for_collection :addresses do\n      text_field :street\n    end\n\n  submit 'Create'\nend\n%>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Country Show Query in API Slice\nDESCRIPTION: Defines a query class in the API slice to fetch country information using the countries gem.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# slices/api/queries/countries/show.rb\n\nrequire \"countries\"\n\nmodule API\n  module Queries\n    module Countries\n      class Show\n        def call(country_code)\n          country = ISO3166::Country[country_code]\n\n          {\n            name: country.iso_short_name,\n            flag: country.emoji_flag,\n            currency: country.currency_code\n          }\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Bundler Update\nDESCRIPTION: Updates both Hanami and Hanami Model gems using Bundler\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v120.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbundle update hanami hanami-model\n```\n\n----------------------------------------\n\nTITLE: Specifying Hanami Guides Version in YAML\nDESCRIPTION: This YAML snippet defines the version of the Hanami Guides documentation. It sets the version to v2.1, which is likely used for versioning and organizing the documentation content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nversion: v2.1\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Comments Migration in Hanami\nDESCRIPTION: Database migration for the comments table with foreign keys to both users and stories, implementing the join table needed for many-to-many relationships.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many-through.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024085858_create_comments.rb\nHanami::Model.migration do\n  change do\n    create_table :comments do\n      primary_key :id\n\n      foreign_key :user_id,  :users,   null: false, on_delete: :cascade\n      foreign_key :story_id, :stories, null: false, on_delete: :cascade\n\n      column :text, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Custom Logger Integration\nDESCRIPTION: Example of integrating a third-party logger (Timber) with Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/logging.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nHanami.configure do\n  environment :production do\n    logger Timber::Logger.new(STDOUT)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Fetching Components from Hanami App Container\nDESCRIPTION: Shows how to retrieve and use components from the Hanami app container using their registered keys in the console.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[development]> Hanami.app[\"operations.send_welcome_email\"]\n=> #<Bookshelf::Operations::SendWelcomeEmail:0x00000001055dadd0>\n\nbookshelf[development]> Hanami.app[\"renderers.welcome_email\"]\n=> #<Bookshelf::Renderers::WelcomeEmail:0x000000010577afc8>\n\nbookshelf[development]> Hanami.app[\"renderers.welcome_email\"].render_html(name: \"Ada\")\n=> \"<p>Welcome to Bookshelf Ada!</p>\"\n```\n\n----------------------------------------\n\nTITLE: Checking Database Version in Hanami (Shell)\nDESCRIPTION: Command to print the current database version in Hanami after running migrations.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/database.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami db version\n20171024085858\n```\n\n----------------------------------------\n\nTITLE: Generating Relative URLs in Hanami ERB Template\nDESCRIPTION: This ERB template demonstrates how to use the routes helper to generate relative URLs for named routes in a Hanami application. It creates links for the root path and books path.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/routing.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<ul>\n  <li><a href=\"<%= routes.root_path %>\">Home</a></li>\n  <li><a href=\"<%= routes.books_path %>\">Books</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Creating Layout Template for Hanami 2.1\nDESCRIPTION: This snippet shows the creation of a layout template for Hanami 2.1. It defines the basic HTML structure and includes asset tags for stylesheets and JavaScript.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bookshelf</title>\n    <%= favicon_tag %>\n    <%= stylesheet_tag \"app\" %>\n  </head>\n  <body>\n    <%= yield %>\n    <%= javascript_tag \"app\" %>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Explicit Loading in Hanami Associations\nDESCRIPTION: Example showing the difference between regular find and find_with_avatar methods for loading associated records.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\nuser = repository.find(user.id)\n  # => #<User:0x00007fa166aa3a70 @attributes={:id=>1, :name=>\"Luca\", :created_at=>2017-10-24 08:44:27 UTC, :updated_at=>2017-10-24 08:44:27 UTC}>\nuser.avatar\n  # => nil\n```\n\n----------------------------------------\n\nTITLE: Testing Book Listing Feature in RSpec\nDESCRIPTION: RSpec feature test for verifying books display on the page. Checks for presence of HTML elements with specific classes and counts.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'features_helper'\n\nRSpec.describe 'List books' do\n  it 'displays each book on the page' do\n    visit '/books'\n\n    within '#books' do\n      expect(page).to have_css('.book', count: 2)\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Users Migration in Hanami\nDESCRIPTION: Migration file to create the users table with name, created_at, and updated_at columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024083639_create_users.rb\nHanami::Model.migration do\n  change do\n    create_table :users do\n      primary_key :id\n\n      column :name, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Hanami Gem via Shell\nDESCRIPTION: Command to install the Hanami gem using RubyGems.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gem install hanami\n```\n\n----------------------------------------\n\nTITLE: Using Helpers in Hanami Templates\nDESCRIPTION: Example showing how to call helpers directly in Hanami view templates\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n<p><%= format_number(1234) %></p>\n```\n\n----------------------------------------\n\nTITLE: Expected Output for Passing Books Index Spec (Shell)\nDESCRIPTION: This output confirms that the books index feature spec passes after implementing the route, action, view (with static data), and template. It indicates the page correctly displays the list of books.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nBooks index\n  shows a list of books\n\n1 example, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Configuring RSpec for Rake 11 Warnings\nDESCRIPTION: This code demonstrates how to disable Rake 11 warnings for RSpec users by adding a configuration option in the spec_helper.rb file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v080.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.configure |config|\n  config.warnings = false\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Root Request Spec in Ruby\nDESCRIPTION: Modified request spec expecting a successful response with specific content.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe \"Root\", type: :request do\n  it \"is successful\" do\n    get \"/\"\n\n    expect(last_response.body).to include \"Welcome to Bookshelf\"\n    expect(last_response).to be_successful\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Hanami Projects Guide\nDESCRIPTION: YAML frontmatter block defining metadata for a documentation page about Hanami projects. Specifies the title and ordering position of the page within the documentation.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Projects\norder: 30\n---\n```\n\n----------------------------------------\n\nTITLE: Formatting Numbers Using format_number - Ruby\nDESCRIPTION: Demonstrates the use of Hanami's standard format_number helper to convert a raw integer into a human-friendly string with thousands separator. The function accepts a number as input and returns its formatted string representation. This requires Hanami's built-in helpers to be available in the calling context, and the output will be a string such as \"1,234\".\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/helpers.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1234) # => \"1,234\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Hanami Gem Commands\nDESCRIPTION: Shows how to list available commands after installing Hanami gem. This includes commands for generating a new Hanami app and checking the Hanami version.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/commands.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami --help\n\nCommands:\n  hanami new APP         # Generate a new Hanami app\n  hanami version         # Hanami version\n```\n\n----------------------------------------\n\nTITLE: Defining Frontmatter for Hanami Guide Pages in Markdown\nDESCRIPTION: This snippet defines the frontmatter for a Hanami guide page. It includes a dynamically generated title that replaces hyphens with spaces and capitalizes words, the current date, and sets the draft status to true.\nSOURCE: https://github.com/hanami/guides/blob/main/archetypes/default.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: \"{{ replace .Name \"-\" \" \" | title }}\"\ndate: {{ .Date }}\ndraft: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Environment in Ruby\nDESCRIPTION: This snippet shows how to configure the Hanami environment in the config/environment.rb file. It includes setup for the application, model, and mailer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v090.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'bundler/setup'\nrequire 'hanami/setup'\nrequire 'hanami/model' # Add this line\nrequire_relative '../lib/bookshelf'\nrequire_relative '../apps/web/application'\n\n# This used to be `Hanami::Container.configure`, now it must be `Hanami.configure`\nHanami.configure do\n  mount Web::Application, at: '/'\n\n  # This is a new block\n  #\n  # Cut and paste the contents of `Hanami::Model.configure` from lib/bookshelf.rb\n  model do\n\n    # This used to be:\n    #\n    #   adapter type: :sql, url: ENV['DATABASE_URL']\n    adapter :sql, ENV['DATABASE_URL']\n\n    migrations 'db/migrations'\n    schema     'db/schema.sql'\n\n    #\n    # Mapping block isn't supported anymore\n    #\n  end\n\n  # This is a new block\n  #\n  # Cut and paste the contents of `Hanami::Mailer.configure` from lib/bookshelf.rb\n  mailer do\n\n    # Adjust the new layer `root` location\n    root Hanami.root.join(\"lib\", \"bookshelf\", \"mailers\")\n\n    delivery do\n      development :test\n      test        :test\n      # production :smtp, address: ENV['SMTP_PORT'], port: 1025\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Parts for Exposures in Ruby for Hanami Views\nDESCRIPTION: These snippets demonstrate different ways to specify parts for exposures in Hanami views, including using the 'as:' option with symbols or concrete part classes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/parts.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Will decorate the current_user with `Views::Parts::User`\nexpose :current_user, as: :user do\n  # ...\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\nexpose :current_user, as: Parts::User\n```\n\n----------------------------------------\n\nTITLE: Minimum Size Validation in Hanami\nDESCRIPTION: Shows how to validate minimum size requirements.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/boolean-logic.md#2025-04-23_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:password) { min_size?(12) }\n```\n\n----------------------------------------\n\nTITLE: RSpec Request Spec for Invalid Pagination Params - Ruby\nDESCRIPTION: Provides an RSpec example for testing invalid pagination parameter handling in the /books API endpoint. Asserts that a request with invalid 'page' and 'per_page' parameters returns HTTP 422 with a JSON object detailing validation errors for each parameter. Requires RSpec and JSON support.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_32\n\nLANGUAGE: ruby\nCODE:\n```\ncontext \"given invalid page and per_page params\" do\n  it \"returns a 422 unprocessable response\" do\n    get \"/books?page=-1&per_page=3000\"\n\n    expect(last_response).to be_unprocessable\n\n    response_body = JSON.parse(last_response.body)\n\n    expect(response_body).to eq(\n      \"errors\" => {\n        \"page\" => [\"must be greater than 0\"],\n        \"per_page\" => [\"must be less than or equal to 100\"]\n      }\n    )\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Repository Operations in Ruby\nDESCRIPTION: This snippet shows how to use the basic CRUD operations provided by Hanami repositories, including create, find, update, and delete.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nrepository = BookRepository.new\n\nbook = repository.create(title: \"Hanami\")\n  # => #<Book:0x007f95cbd8b7c0 @attributes={:id=>1, :title=>\"Hanami\", :created_at=>2016-11-13 16:02:37 UTC, :updated_at=>2016-11-13 16:02:37 UTC}>\n\nbook = repository.find(book.id)\n  # => #<Book:0x007f95cbd5a030 @attributes={:id=>1, :title=>\"Hanami\", :created_at=>2016-11-13 16:02:37 UTC, :updated_at=>2016-11-13 16:02:37 UTC}>\n\nbook = repository.update(book.id, title: \"Hanami Book\")\n  # => #<Book:0x007f95cb243408 @attributes={:id=>1, :title=>\"Hanami Book\", :created_at=>2016-11-13 16:02:37 UTC, :updated_at=>2016-11-13 16:03:34 UTC}>\n\nrepository.delete(book.id)\n\nrepository.find(book.id)\n  # => nil\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Route in Hanami\nDESCRIPTION: Route configuration that maps the root URL to the 'home#index' action, which will handle requests to the homepage of the application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/config/routes.rb\nroot to: 'home#index'\n```\n\n----------------------------------------\n\nTITLE: Custom Rendering in Hanami View\nDESCRIPTION: Demonstrates how to override the default rendering behavior in a Hanami view.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/views/dashboard/index.rb\nmodule Web\n  module Views\n    module Dashboard\n      class Index\n        include Web::View\n\n        def render\n          raw %(<h1>Dashboard</h1>)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Excluding a Class from Hanami Auto-Registration via Magic Comment (Ruby)\nDESCRIPTION: This snippet shows how to prevent a specific Ruby class (`Bookshelf::Action`) from being automatically registered in the Hanami dependency injection container. This is achieved by placing the magic comment `# auto_register: false` at the top of the file. This is useful for base classes or other components that are not intended to be injected as dependencies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\n# auto_register: false\nrequire \"hanami/action\"\n\nmodule Bookshelf\n  class Action < Hanami::Action\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Environments in Hanami (Ruby)\nDESCRIPTION: Shows how to use Hanami.env? to check if the current environment matches one or more specified environments. This method returns a boolean value based on the comparison.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/environments.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development)\n=> true\n\nHanami.env?(:test)\n=> false\n\nHanami.env?(:production)\n=> false\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=development\n\nHanami.env?(:development, :test)\n=> true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=test\n\nHanami.env?(:development, :test)\n=> true\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# HANAMI_ENV=production\n\nHanami.env?(:development, :test)\n=> false\n```\n\n----------------------------------------\n\nTITLE: Whitelisting Accepted MIME Types in Hanami Actions\nDESCRIPTION: Shows how to restrict the accepted MIME types for an action using the accept class method. If the incoming request doesn't match, a 406 Not Acceptable status is returned.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/controllers/dashboard/index.rb\nmodule Web\n  module Controllers\n    module Dashboard\n      class Index\n        include Web::Action\n        accept :html, :json\n\n        def call(params)\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Defining a Repository Base Class for Hanami DB - Ruby\nDESCRIPTION: Shows how to implement a base repository using Hanami::DB::Repo, suitable for db/repo.rb. Provides inheritability for repositories that interact with the database. Like the previous snippet, the Bookshelf namespace should be app- or slice-specific. Requires hanami-db.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# frozen_string_literal: true\\n\\nrequire \\\"hanami/db/repo\\\"\\n\\nmodule Bookshelf\\n  module DB\\n    class Repo < Hanami::DB::Repo\\n    end\\n  end\\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Migration for Authors Table in Hanami\nDESCRIPTION: Ruby migration to create the authors table with id, name, and timestamp columns.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/belongs-to.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024081558_create_authors.rb\nHanami::Model.migration do\n  change do\n    create_table :authors do\n      primary_key :id\n\n      column :name,       String,   null: false\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Slice Assets Directory Structure\nDESCRIPTION: Demonstrates the directory structure for assets within a Hanami slice, showing how slice-specific assets are organized and compiled.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/assets/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── slices/admin\n│   └── assets\n│       ├── css\n│       │   └── app.css\n│       └── js\n│           └── app.js\n└── public/assets/_admin\n    ├── assets.json\n    ├── app-HYVEQYF6.css\n    └── app-6PW7FGD5.js\n```\n\n----------------------------------------\n\nTITLE: Updating Books Index View with Data Exposure (Ruby)\nDESCRIPTION: This code modifies the `Bookshelf::Views::Books::Index` view class (`app/views/books/index.rb`). It uses the `expose` macro to define a `:books` exposure, which makes a static array of book hashes available to the corresponding template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-a-web-app.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\n# app/views/books/index.rb\n\nmodule Bookshelf\n  module Views\n    module Books\n      class Index < Bookshelf::View\n        expose :books do\n          [\n            {title: \"Test Driven Development\"},\n            {title: \"Practical Object-Oriented Design in Ruby\"}\n          ]\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Mocking Dependencies in Hanami Action Test with RSpec\nDESCRIPTION: This example demonstrates how to mock dependencies in a Hanami action test using RSpec. It injects a test double for a user repository and sets expectations on its behavior.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/testing.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRSpec.describe Bookshelf::Actions::Books::Create do\n  subject(:action) do\n    Bookshelf::Actions::Books::Create.new(user_repo: user_repo)\n  end\n\n  let(:user_repo) do\n    instance_double(Bookshelf::UserRepo)\n  end\n\n  let(:book_params) do\n    {title: \"Hanami Guides\"}\n  end\n\n  it \"returns a successful response when valid book params are provided\" do\n    expect(user_repo).to receive(:create).with(book_params).and_return(book_params)\n\n    response = action.call(book: book_params)\n\n    expect(response).to be_successful\n    expect(response.body[0]).to eq(book_params.to_json)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Actions with Hanami CLI (Shell)\nDESCRIPTION: Shows how to use Hanami's action generator to create actions and corresponding routes for a RESTful books resource.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.index\n$ bundle exec hanami generate action books.show\n$ bundle exec hanami generate action books.new\n$ bundle exec hanami generate action books.create\n$ bundle exec hanami generate action books.update\n$ bundle exec hanami generate action books.destroy\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in Hanami Action\nDESCRIPTION: Demonstrates how to set a cookie value in a Hanami action response. Sets a cookie named 'tasty_cookie' with the value 'strawberry'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/cookies.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Index < Bookshelf::Action\n        def handle(request, response)\n          response.cookies[\"tasty_cookie\"] = \"strawberry\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Guardfile for Hanami 2.1\nDESCRIPTION: This snippet shows the updated Guardfile configuration for Hanami 2.1. It sets up Guard to watch for changes in app, config, lib, and slices directories and reload the Puma server.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ngroup :server do\n  guard \"puma\", port: ENV.fetch(\"HANAMI_PORT\", 2300) do\n    # Edit the following regular expression for your needs.\n    # See: https://guides.hanamirb.org/app/code-reloading/\n    watch(%r{^(app|config|lib|slices)([/][^/]+)*.(rb|erb|haml|slim)$}i)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generated HTML from Relative URL Helpers in Hanami\nDESCRIPTION: This HTML snippet shows the result of rendering the ERB template that uses relative URL helpers. It displays the generated links with their respective paths.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/routing.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n  <li><a href=\"/\">Home</a></li>\n  <li><a href=\"/books\">Books</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Defining Public Methods for Templates in Hanami Mailers\nDESCRIPTION: This example shows how to define public methods in a mailer that can be accessed from the templates. The greeting method is defined in the mailer class and used in the HTML template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/basic-usage.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/bookshelf/mailers/welcome.rb\nmodule Mailers\n  class Welcome\n    include Hanami::Mailer\n\n    # ...\n\n    def greeting\n      \"Ahoy\"\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Specifying Database Files to Ignore - Text\nDESCRIPTION: Provides a .gitignore file configuration to exclude all SQLite database files under the db directory. This is not code, but text to be included in the .gitignore root file to avoid committing local databases to version control.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.2.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ndb/*.sqlite\n```\n\n----------------------------------------\n\nTITLE: Strict Type Checking Without Coercion in Hanami Entities\nDESCRIPTION: This example shows that in strict mode, type coercion is not attempted. A string value for an integer attribute will raise a TypeError rather than being converted to an integer.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/entities/custom-schema.md#2025-04-23_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nUser.new(id: \"1\", name: \"Luca\", age: 35, email: \"luca@hanami.test\")\n  # => TypeError: \"1\" (String) has invalid type for :id violates constraints (type?(Integer, \"1\") failed)\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version for Hanami Prerequisites\nDESCRIPTION: Command to verify the installed Ruby version before creating a Hanami application. Requires Ruby 3.0 or greater.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ ruby --version\n```\n\n----------------------------------------\n\nTITLE: Updating .gitignore for Hanami 2.1\nDESCRIPTION: This snippet shows the new entries to be added to .gitignore file when upgrading to Hanami 2.1. It includes directories and files that should not be tracked by git.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\npublic/\nnode_modules/\nspec/examples.txt\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Books Show Action and Route - Shell\nDESCRIPTION: Provides the shell command to generate a new Hanami action for showing book details using the Hanami code generator. Running this will scaffold both the route in config/routes.rb and the corresponding action handler. Requires a correctly initialized Hanami project.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.show --skip-view\n```\n\n----------------------------------------\n\nTITLE: Implementing SendWelcomeEmail Operation with Manual Dependency Injection\nDESCRIPTION: Shows how to implement the SendWelcomeEmail operation using manual dependency injection, improving flexibility and testability.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/operations/send_welcome_email.rb\n\nrequire \"acme_email/client\"\n\nmodule Bookshelf\n  module Operations\n    class SendWelcomeEmail\n      attr_reader :email_client\n      attr_reader :email_renderer\n\n      def initialize(email_client:, email_renderer:)\n        @email_client = email_client\n        @email_renderer = email_renderer\n      end\n\n      def call(name:, email_address:)\n        email_client.deliver(\n          to: email_address,\n          subject: \"Welcome!\",\n          text_body: email_renderer.render_text(name: name),\n          html_body: email_renderer.render_html(name: name)\n        )\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating a Standalone Hanami View using Shell\nDESCRIPTION: This shell command demonstrates generating a Hanami view (`emails.welcome`) independently of an action. This is useful for rendering content like emails or messages in background jobs. It creates the view class and its associated template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/views/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view emails.welcome\n\nCreated app/views/emails/welcome.rb\nCreated app/templates/emails/welcome.html.erb\n```\n\n----------------------------------------\n\nTITLE: Parameter Source Examples in Hanami\nDESCRIPTION: Shows how to access parameters from different sources including path variables, query strings, and JSON request bodies.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/parameters.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\ndef handle(request, response)\n  # GET /books/1\n  request.params[:id] # => \"1\"\n\n  # GET /books?category=history&page=2\n  request.params[:category] # => \"history\"\n  request.params[:page] # => \"2\"\n\n  # POST /books '{\"title\": \"request body\", \"author\":\"json\"}', Content-Type application/json\n  request.params[:title] # => \"request body\"\n  request.params[:author] #=> \"json\"\nend\n```\n\n----------------------------------------\n\nTITLE: Simplified Book Show Action with Inherited Exception Handling\nDESCRIPTION: This snippet demonstrates a simplified version of the Book Show action after moving exception handling to the base Action class.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-an-api.md#2025-04-23_snippet_40\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/books/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"persistence.rom\"]\n\n        params do\n          required(:id).value(:integer)\n        end\n\n        def handle(request, response)\n          book = rom.relations[:books].by_pk(\n            request.params[:id]\n          ).one!\n\n          response.format = :json\n          response.body = book.to_json\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Inspecting Route-Specific Middleware Stack\nDESCRIPTION: Demonstrates the result of inspecting the middleware stack after adding route-specific middleware. This shows how middleware is applied to different routes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/rack-integration.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami middleware\n\n/              Dry::Monitor::Rack::Middleware (instance)\n/              Rack::Runtime\n/restricted    Rack::Auth::Basic\n/admin         Rack::Auth::Basic\n```\n\n----------------------------------------\n\nTITLE: Skipping Default ROM Plugins or Extensions (Hanami/Ruby)\nDESCRIPTION: This code demonstrates optional methods to skip default ROM plugins or Sequel extensions during DB provider configuration in Hanami. By calling sql.skip_defaults or sql.skip_defaults with arguments, developers can selectively disable defaults for plugins, extensions, or both. Place inside a gw.adapter :sql block when fine-tuning connection setup. Inputs: target type to skip (overall, plugins, or extensions). Outputs: Minimized Hanami/ROM/Sequel configuration as desired.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/database/configuration.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\ngw.adapter :sql do |sql|\n  # skip everything\n  sql.skip_defaults\n\n  # skip ROM plugins\n  sql.skip_defaults :plugins\n\n  # skip Sequel extensions\n  sql.skip_defaults :extensions\nend\n```\n\n----------------------------------------\n\nTITLE: Writing a Feature Test for Homepage\nDESCRIPTION: RSpec test that visits the root path and expects to find 'Bookshelf' content on the page. This is a basic feature test to verify the homepage is working correctly.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# spec/web/features/visit_home_spec.rb\nrequire 'features_helper'\n\nRSpec.describe 'Visit home' do\n  it 'is successful' do\n    visit '/'\n\n    expect(page).to have_content('Bookshelf')\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing ETag Conditional Requests\nDESCRIPTION: Demonstrates implementing conditional requests using ETags in a Hanami action. Sets ETag headers and handles If-None-Match validation for efficient caching.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/http-caching.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  module Actions\n    module Books\n      class Show < Bookshelf::Action\n        include Deps[\"user_repo\"]\n\n        def handle(request, response)\n          user = user_repo.find(params[:id])\n\n          response.fresh etag: \"#{user.id}-#{user.updated_at}\"\n\n          # ...\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Generating Audio Tags in Ruby\nDESCRIPTION: Shows how to use the audio_tag helper to create <audio> tags for audio assets or absolute URLs. It supports adding HTML attributes and nested content like tracks or fallback messages.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/helpers/assets.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\naudio_tag(\"song.ogg\")\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\"></audio>\n\naudio_tag(\"https://example.com/song.ogg\")\n# => <audio src=\"https://example.com/song.ogg\"></audio>\n\naudio_tag(\"song.ogg\", autoplay: true, controls: true)\n# => <audio autoplay=\"autoplay\" controls=\"controls\" src=\"/assets/song-DJHI6WQI.ogg\"></audio>\n\naudio_tag(\"song.ogg\") do\n  \"Your browser does not support the audio tag.\"\nend\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\">\n#      Your browser does not support the audio tag.\n#    </audio>\n\naudio_tag(\"song.ogg\") do\n  tag.track(kind: \"captions\", src: asset_url(\"movie.en.vtt\"), srclang: \"en\", label: \"English\")\nend\n# => <audio src=\"/assets/song-DJHI6WQI.ogg\">\n#      <track kind=\"captions\" src=\"/assets/movie.en-98EA6E4F.vtt\" srclang=\"en\" label=\"English\">\n#    </audio>\n```\n\n----------------------------------------\n\nTITLE: Session Secret Settings Configuration\nDESCRIPTION: Settings configuration for session secret handling\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :database_url, constructor: Types::String\n    setting :session_secret, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Stylesheet Link Tags in Ruby\nDESCRIPTION: Uses the stylesheet_tag helper to generate <link> tags for CSS stylesheets. It supports multiple asset paths and HTML attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/helpers/assets.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_tag(\"app.css\")\n# => <link href=\"/assets/app-GVDAEYEC.css\" type=\"text/css\" rel=\"stylesheet\">\n\nstylesheet_tag(\"https://example.com/stylesheet.css\")\n# => <link href=\"https://example.com/stylesheet.css\" type=\"text/css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_tag(\"app\")\n# => <link href=\"/assets/app-GVDAEYEC.css\" type=\"text/css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_tag(\"app\", \"dashboard/app\")\n#   # <link href=\"/assets/application.css\" type=\"text/css\" rel=\"stylesheet\">\n#   # <link href=\"/assets/dashboard.css\" type=\"text/css\" rel=\"stylesheet\">\n```\n\nLANGUAGE: ruby\nCODE:\n```\nstylesheet_tag(\"https://example.com/print.css\", media: \"print\")\n# => <link href=\"https://example.com/stylesheet.css\" type=\"text/css\" rel=\"stylesheet\" media=\"print\">\n```\n\n----------------------------------------\n\nTITLE: Hanami Route Helper Usage\nDESCRIPTION: Demonstrates the usage of route helpers in Hanami templates using the routes proxy object.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/overview.md#2025-04-23_snippet_2\n\nLANGUAGE: erb\nCODE:\n```\n<%= routes.home_path %>\n```\n\n----------------------------------------\n\nTITLE: Installing Hanami Gem with gem Command (Shell)\nDESCRIPTION: This snippet instructs the user to install the Hanami framework by running a RubyGems command in the shell. 'gem install hanami' downloads and installs the 'hanami' gem and its dependencies to the system. The operation requires a working Ruby environment and network access to RubyGems.org.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ gem install hanami\\n```\n```\n\n----------------------------------------\n\nTITLE: Rendering Partials in Hanami Templates\nDESCRIPTION: These snippets demonstrate how to render partials in Hanami templates. The first example shows basic partial rendering, while the second shows how to pass local variables to a partial.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/templates-and-partials.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\n<%= render \"path/to/my_partial\" %>\n```\n\nLANGUAGE: sql\nCODE:\n```\n<%= render \"path/to/my_partial\", my_locals: \"go here\" %>\n```\n\n----------------------------------------\n\nTITLE: Creating Procfile.dev for Hanami 2.1\nDESCRIPTION: This snippet shows the contents of the new Procfile.dev file for Hanami 2.1. It defines commands for running the Hanami server and watching assets.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/upgrade-notes/v2.1.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nweb: bundle exec hanami server\nassets: bundle exec hanami assets watch\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Routes in Hanami Ruby Application\nDESCRIPTION: This example shows how to create nested routes in a Hanami application. It demonstrates nesting resources and defining custom routes within nested scopes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/routing/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/routes.rb\nmodule MyApp\n  class Routes < Hanami::Routes\n    resource :authors do\n      resource :books do\n        member do\n          patch \"publish\"\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Body Parsing in Hanami App Configuration\nDESCRIPTION: This snippet demonstrates how to enable JSON body parsing for all actions in a Hanami application using the app configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/actions/formats-and-mime-types.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.format :json\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific Component Imports in Publisher Slice\nDESCRIPTION: Shows how to import specific components from another slice with custom naming in the Publisher slice.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/slices.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/slices/publisher.rb\n\nmodule Publisher\n  class Slice < Hanami::Slice\n    import keys: [\"book_covers.purge\"], from: :cdn, as: :content_network\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Checking Ruby Version with Shell Command (Shell)\nDESCRIPTION: This snippet demonstrates how to verify the currently installed Ruby version using a shell command. 'ruby --version' returns the Ruby interpreter version, which should be 3.1 or greater as required by Hanami 2.2. The output confirms environment readiness before installing the Hanami framework.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/getting-started.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n```shell\\n$ ruby --version\\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Sessions in Hanami Application\nDESCRIPTION: Configuration code to enable cookie-based sessions in a Hanami application with custom key, secret, and expiration settings.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/actions/sessions.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nmodule Bookshelf\n  class App < Hanami::App\n    config.actions.sessions = :cookie, {\n      key: \"bookshelf.session\",\n      secret: settings.session_secret,\n      expire_after: 60*60*24*365\n    }\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Hanami Container Configuration\nDESCRIPTION: Ruby configuration showing how to mount multiple Hanami applications at different URL paths.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/assets.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# config/environment.rb\n# ...\nHanami::Container.configure do\n  mount Metrics::Application, at: '/metrics'\n  mount Admin::Application,   at: '/admin'\n  mount Web::Application,     at: '/'\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a Legacy Database Table in SQL\nDESCRIPTION: This SQL snippet shows the creation of a legacy database table with non-standard column names, which is later used in the Hanami repository configuration example.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/repositories/overview.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE t_operator (\n    operator_id integer NOT NULL,\n    s_name text\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Body Parser in Hanami\nDESCRIPTION: Shows how to implement and configure a custom body parser for handling specific MIME types in a Hanami application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/parameters.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# lib/foo_parser.rb\nclass FooParser\n  def mime_types\n    ['application/foo']\n  end\n\n  def parse(body)\n    # manually parse body\n  end\nend\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/app.rb\n\nclass App < Hanami::App\n  config.middleware.use :body_parser, FooParser.new\nend\n```\n\n----------------------------------------\n\nTITLE: Initial Home Index Action in Ruby\nDESCRIPTION: This snippet shows the initial structure of the Home Index action in a Hanami application, with an empty handle method.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/introduction/building-an-api.md#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# app/actions/home/show.rb\n\nmodule Bookshelf\n  module Actions\n    module Home\n      class Index < Bookshelf::Action\n        def handle(request, response)\n        end\n      end\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Settings in Hanami Console\nDESCRIPTION: Ruby code demonstrating how to access environment settings through the Hanami.app[\"settings\"] interface in the console.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/settings.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nbookshelf[test]> Hanami.app[\"settings\"].database_url\n=> \"postgres://localhost:5432/bookshelf_test\"\n\nbookshelf[test]> Hanami.app[\"settings\"].analytics_enabled\n=> false\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Error Template in Hanami\nDESCRIPTION: Example path for a custom 500 error template in Hanami. The template must be placed in the application's templates directory and named after the HTTP status code it handles.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/custom-error-pages.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\napps/web/templates/500.html.erb\n```\n\n----------------------------------------\n\nTITLE: Redirect Implementation Examples\nDESCRIPTION: Shows different ways to implement redirects including basic redirects and redirects with custom status codes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/actions/control-flow.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nresponse.redirect_to(\"/sign-in\")\nresponse.redirect_to(\"https://hanamirb.org\", status: 301)\n```\n\n----------------------------------------\n\nTITLE: Logging Error Message in Ruby using Hanami Logger\nDESCRIPTION: Shows how to log an error message using the Hanami logger. This is useful for recording error conditions in your application.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/logger/usage.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\napp[\"logger\"].error \"Something's wrong\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Puma for Early Hints in Ruby\nDESCRIPTION: This snippet shows how to add Puma to the Gemfile and enable Early Hints in the Puma configuration file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/projects/http2-early-hints.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\n# Gemfile\ngem \"puma\"\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# config/puma.rb\nearly_hints true\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami View\nDESCRIPTION: Demonstrates the generation of a view in Hanami using the 'generate view' command. This example creates a 'create' view for 'books'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view books.create\n```\n\n----------------------------------------\n\nTITLE: Accessing Help for View Generation\nDESCRIPTION: Shows how to access additional help and options for the 'generate view' command in Hanami.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate view --help\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Registered Utility Class in Hanami's lib Directory (Ruby)\nDESCRIPTION: This snippet shows the definition of a utility class (`Bookshelf::SlackNotifier`) within the `lib/bookshelf` directory. Classes placed in the `lib` directory, especially under `lib/<app_name>`, are typically autoloaded by Zeitwerk but are not automatically registered in the Hanami dependency injection container. They can be used directly via their constants.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/app/container-and-components.md#2025-04-23_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\n```ruby\n# lib/bookshelf/slack_notifier.rb\n\nmodule Bookshelf\n  class SlackNotifier\n    def self.notify(message)\n      # ...\n    end\n  end\nend\n```\n```\n\n----------------------------------------\n\nTITLE: Single Part Email Delivery in Hanami\nDESCRIPTION: Shows how to deliver emails in a specific format (HTML or text) based on user preferences by specifying the format parameter.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/mailers/delivery.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nMailers::Welcome.deliver(format: :html)\n# or\nMailers::Welcome.deliver(format: :txt)\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Hanami Models Guide\nDESCRIPTION: YAML frontmatter block defining metadata for the Hanami models documentation page, including title and ordering information.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/models/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Models\norder: 70\n---\n```\n\n----------------------------------------\n\nTITLE: Including App Helpers in Slice Helpers\nDESCRIPTION: Example of making app-level helpers available within a slice by including the app's helpers module\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/views/helpers.md#2025-04-23_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nmodule MySlice\n  module Views\n    module Helpers\n      include MyApp::Views::Helpers\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updating Database URL Environment Variable\nDESCRIPTION: This code shows how to update the database URL environment variable in the project's Ruby file.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/upgrade-notes/v080.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nENV['DATABASE_URL']\n```\n\n----------------------------------------\n\nTITLE: Generating New Hanami Application\nDESCRIPTION: Command to create a new Hanami application named 'bookshelf' using the Hanami CLI.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/getting-started.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ hanami new bookshelf\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Database with Hanami Command\nDESCRIPTION: Command to prepare the test database by setting the HANAMI_ENV environment variable to 'test'. This ensures the migrations run against the test database.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ HANAMI_ENV=test bundle exec hanami db prepare\n```\n\n----------------------------------------\n\nTITLE: Setting Default Response Format in Hanami Application\nDESCRIPTION: Demonstrates how to configure the default response format for a Hanami application, which is particularly useful for JSON API applications. The default value is :html.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/actions/mime-types.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# apps/web/application.rb\n\nmodule Web\n  class Application < Hanami::Application\n    configure do\n      # ...\n      default_response_format :json\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Settings with Required Fields - Ruby\nDESCRIPTION: Example of defining required settings with string constructors\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/app/settings.md#2025-04-23_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Settings < Hanami::Settings\n    setting :redis_url, constructor: Types::String\n    setting :sentry_dsn, constructor: Types::String\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Updated Routes with Root Path in Ruby\nDESCRIPTION: Routes configuration with added root path mapping.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nmodule Bookshelf\n  class Routes < Hanami::Routes\n    root to: \"home.show\"\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Hanami Documentation Version in YAML\nDESCRIPTION: YAML configuration that sets the version number for Hanami framework documentation to v1.3.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nversion: v1.3\n```\n\n----------------------------------------\n\nTITLE: ERB Template with Variable Interpolation\nDESCRIPTION: Demonstrates how to use variable interpolation in an ERB template.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/views/basic-usage.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n# apps/web/templates/dashboard/index.html.erb\n<h1><%= title %></h1>\n```\n\n----------------------------------------\n\nTITLE: Zeitwerk Error Message Example\nDESCRIPTION: Example shell output showing Zeitwerk's error message when file naming doesn't match constant naming.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/app/autoloading.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nZeitwerk::NameError: expected file bookshelf/app/entities/book.rb to define constant Bookshelf::Entities::Book, but didn't\n```\n\n----------------------------------------\n\nTITLE: Precompiled Assets Structure\nDESCRIPTION: Shell output showing the final structure of precompiled and fingerprinted assets in the public directory.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/command-line/assets.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ tree public\npublic\n├── assets\n│   ├── admin\n│   │   ├── application-28a6b886de2372ee3922fcaf3f78f2d8.js\n│   │   ├── application.js\n│   │   ├── ember-b2d6de1e99c79a0e52cf5c205aa2e07a.js\n│   │   ├── ember-source-e74117fc6ba74418b2601ffff9eb1568.js\n│   │   ├── ember-source.js\n│   │   ├── ember.js\n│   │   ├── zepto-ca736a378613d484138dec4e69be99b6.js\n│   │   └── zepto.js\n│   ├── application-d1829dc353b734e3adc24855693b70f9.js\n│   ├── application.js\n│   ├── bookshelf-237ecbedf745af5a477e380f0232039a.jpg\n│   ├── bookshelf.jpg\n│   ├── ember-b2d6de1e99c79a0e52cf5c205aa2e07a.js\n│   ├── ember-source-e74117fc6ba74418b2601ffff9eb1568.js\n│   ├── ember-source.js\n│   ├── ember.js\n│   ├── jquery-05277a4edea56b7f82a4c1442159e183.js\n│   ├── jquery.js\n│   └── metrics\n│       ├── dashboard-7766a63ececc63a7a629bfb0666e9c62.js\n│       ├── dashboard.js\n│       ├── ember-b2d6de1e99c79a0e52cf5c205aa2e07a.js\n│       ├── ember-source-e74117fc6ba74418b2601ffff9eb1568.js\n│       ├── ember-source.js\n│       └── ember.js\n└── assets.json\n```\n\n----------------------------------------\n\nTITLE: Displaying Slice Asset Directory Structure\nDESCRIPTION: Shows the directory structure for assets within a Hanami slice, demonstrating how slices can have their own independent assets with dedicated compilation directories.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/assets/overview.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n.\n├── slices/admin\n│   └── assets\n│       ├── css\n│       │   └── app.css\n│       └── js\n│           └── app.js\n└── public/assets/_admin\n    ├── assets.json\n    ├── app-HYVEQYF6.css\n    └── app-6PW7FGD5.js\n```\n\n----------------------------------------\n\nTITLE: Generating Hanami Actions via CLI\nDESCRIPTION: Shell commands to generate new and create actions for books\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/introduction/building-a-web-app.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.new\n$ bundle exec hanami generate action books.create\n```\n\n----------------------------------------\n\nTITLE: Creating Books Migration in Hanami\nDESCRIPTION: Database migration for creating the books table with foreign key relationship to authors\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-many.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024081617_create_books.rb\nHanami::Model.migration do\n  change do\n    create_table :books do\n      primary_key :id\n\n      foreign_key :author_id, :authors, on_delete: :cascade\n\n      column :title,      String,   null: false\n      column :on_sale,    TrueClass, null: false, default: false\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Opening Hanami Application in Browser via Shell\nDESCRIPTION: Command to open the Hanami application in the default web browser.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.0/introduction/getting-started.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ open http://localhost:2300\n```\n\n----------------------------------------\n\nTITLE: Array Element Validation in Hanami\nDESCRIPTION: Demonstrates how to validate array elements using the each macro.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/validations/advanced-usage.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequired(:tags).each(:str?)\n```\n\n----------------------------------------\n\nTITLE: Customizing Decimal Separator in Hanami\nDESCRIPTION: Demonstrates how to change the decimal separator character when formatting numbers with the separator option.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/numbers.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nformat_number(1.23)                 # => \"1.23\"\nformat_number(1.23, separator: ',') # => \"1,23\"\n```\n\n----------------------------------------\n\nTITLE: Watching Assets with Hanami CLI\nDESCRIPTION: Shows how to use the 'hanami assets watch' command to continuously monitor and compile assets as changes are made. This command is typically run automatically by 'hanami dev' during development.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.2/cli-commands/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami assets watch\n[bookshelf] [watch] build finished, watching for changes...\n[bookshelf] [watch] build started (change: \"app/assets/js/app.js\")\n[bookshelf] [watch] build finished\n[bookshelf] [watch] build started (change: \"app/assets/css/app.css\")\n[bookshelf] [watch] build finished\n```\n\n----------------------------------------\n\nTITLE: Stylesheet Asset Helper Example in Hanami\nDESCRIPTION: Shows usage of the stylesheet helper to generate link tags for CSS files with optional attributes.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/helpers/assets.md#2025-04-23_snippet_1\n\nLANGUAGE: erb\nCODE:\n```\n<%= stylesheet 'reset', 'grid', 'main' %>\n```\n\nLANGUAGE: html\nCODE:\n```\n<link href=\"/assets/reset.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/assets/grid.css\" type=\"text/css\" rel=\"stylesheet\">\n<link href=\"/assets/main.css\" type=\"text/css\" rel=\"stylesheet\">\n```\n\n----------------------------------------\n\nTITLE: Creating Avatars Migration with Foreign Key in Hanami\nDESCRIPTION: Migration file to create the avatars table with a foreign key to users, url column, and timestamps.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/associations/has-one.md#2025-04-23_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# db/migrations/20171024083725_create_avatars.rb\nHanami::Model.migration do\n  change do\n    create_table :avatars do\n      primary_key :id\n\n      foreign_key :user_id, :users, null: false, on_delete: :cascade\n\n      column :url, String, null: false\n\n      column :created_at, DateTime, null: false\n      column :updated_at, DateTime, null: false\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Running Tests After Implementation\nDESCRIPTION: Command showing successful test results after implementing the required components (route, controller, view, and template) to make the homepage display properly.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v1.3/introduction/getting-started.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec rake\n\nFinished in 0.01394 seconds (files took 1.03 seconds to load)\n2 examples, 0 failures\n```\n\n----------------------------------------\n\nTITLE: Generating a Hanami Action\nDESCRIPTION: Demonstrates how to generate an action in Hanami using the 'generate action' command. This example creates a 'show' action for 'books'.\nSOURCE: https://github.com/hanami/guides/blob/main/content/v2.1/cli-commands/generate.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ bundle exec hanami generate action books.show\n```"
  }
]