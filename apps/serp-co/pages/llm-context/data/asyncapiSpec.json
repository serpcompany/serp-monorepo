[
  {
    "owner": "asyncapi",
    "repo": "spec",
    "content": "TITLE: Basic AsyncAPI Channel and Operation Definition\nDESCRIPTION: Demonstrates the basic structure for defining a channel and operation in AsyncAPI, showing how to specify a receive operation on a channel.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nchannels:\n  userSignedUp:\n    # ...(redacted for brevity)\noperations:\n  onUserSignedUp:\n    action: receive\n    channel:\n      $ref: '#/channels/userSignedUp'\n```\n\n----------------------------------------\n\nTITLE: Defining Operations in AsyncAPI\nDESCRIPTION: Demonstrates how to define operations in an AsyncAPI document. Operations represent actions that an application must implement, such as sending or receiving messages on specific channels.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"onUserSignUp\": {\n    \"title\": \"User sign up\",\n    \"summary\": \"Action to sign a user up.\",\n    \"description\": \"A longer description\",\n    \"channel\": {\n      \"$ref\": \"#/channels/userSignup\"\n    },\n    \"action\": \"send\",\n    \"tags\": [\n      { \"name\": \"user\" },\n      { \"name\": \"signup\" },\n      { \"name\": \"register\" }\n    ],\n    \"bindings\": {\n      \"amqp\": {\n        \"ack\": false\n      }\n    },\n    \"traits\": [\n      { \"$ref\": \"#/components/operationTraits/kafka\" }\n    ]\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nonUserSignUp:\n  title: User sign up\n  summary: Action to sign a user up.\n  description: A longer description\n  channel:\n    $ref: '#/channels/userSignup'\n  action: send\n  tags:\n    - name: user\n    - name: signup\n    - name: register\n  bindings:\n    amqp:\n      ack: false\n  traits:\n    - $ref: '#/components/operationTraits/kafka'\n```\n\n----------------------------------------\n\nTITLE: Defining Components Object in AsyncAPI Using JSON\nDESCRIPTION: Example of a Components Object in JSON format, defining schemas, servers, channels, messages, parameters, correlation IDs, and message traits. This demonstrates how to organize reusable components in an AsyncAPI specification.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"components\": {\n    \"schemas\": {\n      \"Category\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"Tag\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int64\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          }\n        }\n      },\n      \"AvroExample\": {\n        \"schemaFormat\": \"application/vnd.apache.avro+json;version=1.9.0\",\n        \"schema\": {\n          \"$ref\": \"./user-create.avsc\"\n        }\n      }\n    },\n    \"servers\": {\n      \"development\": {\n        \"host\": \"{stage}.in.mycompany.com:{port}\",\n        \"description\": \"RabbitMQ broker\",\n        \"protocol\": \"amqp\",\n        \"protocolVersion\": \"0-9-1\",\n        \"variables\": {\n          \"stage\": {\n            \"$ref\": \"#/components/serverVariables/stage\"\n          },\n          \"port\": {\n            \"$ref\": \"#/components/serverVariables/port\"\n          }\n        }\n      }\n    },\n    \"serverVariables\": {\n      \"stage\": {\n        \"default\": \"demo\",\n        \"description\": \"This value is assigned by the service provider, in this example `mycompany.com`\"\n      },\n      \"port\": {\n        \"enum\": [\"5671\", \"5672\"],\n        \"default\": \"5672\"\n      }\n    },\n    \"channels\": {\n      \"user/signedup\": {\n        \"subscribe\": {\n          \"message\": {\n            \"$ref\": \"#/components/messages/userSignUp\"\n          }\n        }\n      }\n    },\n    \"messages\": {\n      \"userSignUp\": {\n        \"summary\": \"Action to sign a user up.\",\n        \"description\": \"Multiline description of what this action does.\\nHere you have another line.\\n\",\n        \"tags\": [\n          {\n            \"name\": \"user\"\n          },\n          {\n            \"name\": \"signup\"\n          }\n        ],\n        \"headers\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"applicationInstanceId\": {\n              \"description\": \"Unique identifier for a given instance of the publishing application\",\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"payload\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"user\": {\n              \"$ref\": \"#/components/schemas/userCreate\"\n            },\n            \"signup\": {\n              \"$ref\": \"#/components/schemas/signup\"\n            }\n          }\n        }\n      }\n    },\n    \"parameters\": {\n      \"userId\": {\n        \"description\": \"Id of the user.\"\n      }\n    },\n    \"correlationIds\": {\n      \"default\": {\n        \"description\": \"Default Correlation ID\",\n        \"location\": \"$message.header#/correlationId\"\n      }\n    },\n    \"messageTraits\": {\n      \"commonHeaders\": {\n        \"headers\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"my-app-header\": {\n              \"type\": \"integer\",\n              \"minimum\": 0,\n              \"maximum\": 100\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Channel Object in AsyncAPI\nDESCRIPTION: Illustrates the structure of a Channel Object in AsyncAPI. It includes properties such as address, title, description, messages, parameters, servers, bindings, tags, and external documentation.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"users.{userId}\",\n  \"title\": \"Users channel\",\n  \"description\": \"This channel is used to exchange messages about user events.\",\n  \"messages\": {\n    \"userSignedUp\": {\n      \"$ref\": \"#/components/messages/userSignedUp\"\n    },\n    \"userCompletedOrder\": {\n      \"$ref\": \"#/components/messages/userCompletedOrder\"\n    }\n  },\n  \"parameters\": {\n    \"userId\": {\n      \"$ref\": \"#/components/parameters/userId\"\n    }\n  },\n  \"servers\": [\n    { \"$ref\": \"#/servers/rabbitmqInProd\" },\n    { \"$ref\": \"#/servers/rabbitmqInStaging\" }\n  ],\n  \"bindings\": {\n    \"amqp\": {\n      \"is\": \"queue\",\n      \"queue\": {\n        \"exclusive\": true\n      }\n    }\n  },\n  \"tags\": [{\n    \"name\": \"user\",\n    \"description\": \"User-related messages\"\n  }],\n  \"externalDocs\": {\n    \"description\": \"Find more info here\",\n    \"url\": \"https://example.com\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\naddress: 'users.{userId}'\ntitle: Users channel\ndescription: This channel is used to exchange messages about user events.\nmessages:\n  userSignedUp:\n    $ref: '#/components/messages/userSignedUp'\n  userCompletedOrder:\n    $ref: '#/components/messages/userCompletedOrder'\nparameters:\n  userId:\n    $ref: '#/components/parameters/userId'\nservers:\n  - $ref: '#/servers/rabbitmqInProd'\n  - $ref: '#/servers/rabbitmqInStaging'\nbindings:\n  amqp:\n    is: queue\n    queue:\n      exclusive: true\ntags:\n  - name: user\n    description: User-related messages\nexternalDocs:\n  description: 'Find more info here'\n  url: 'https://example.com'\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example in JSON\nDESCRIPTION: Example showing the structure of an Operation Object for a user signup action with security, tags, bindings, traits, messages and reply configuration.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"User sign up\",\n  \"summary\": \"Action to sign a user up.\",\n  \"description\": \"A longer description\",\n  \"channel\": {\n    \"$ref\": \"#/channels/userSignup\"\n  },\n  \"action\": \"send\",\n  \"security\": [\n    {\n      \"type\": \"oauth2\",\n      \"description\": \"The oauth security descriptions\",\n      \"flows\": {\n        \"clientCredentials\": {\n          \"tokenUrl\": \"https://example.com/api/oauth/dialog\",\n          \"availableScopes\": {\n            \"subscribe:auth_revocations\": \"Scope required for authorization revocation topic\"\n          }\n        }\n      },\n      \"scopes\": [\n        \"subscribe:auth_revocations\"\n      ],\n     \"petstore_auth\": [\n       \"write:pets\",\n       \"read:pets\"\n     ]\n    }\n  ],\n  \"tags\": [\n    { \"name\": \"user\" },\n    { \"name\": \"signup\" },\n    { \"name\": \"register\" }\n  ],\n  \"bindings\": {\n    \"amqp\": {\n      \"ack\": false\n    }\n  },\n  \"traits\": [\n    { \"$ref\": \"#/components/operationTraits/kafka\" }\n  ],\n  \"messages\": [\n    { \"$ref\": \"#/channels/userSignup/messages/userSignedUp\" }\n  ],\n  \"reply\": {\n    \"address\": {\n      \"location\": \"$message.header#/replyTo\"\n    },\n    \"channel\": {\n      \"$ref\": \"#/channels/userSignupReply\"\n    },\n    \"messages\": [\n      { \"$ref\": \"#/channels/userSignupReply/messages/userSignedUpReply\" }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Object Example in YAML\nDESCRIPTION: YAML representation of the Operation Object example showing user signup configuration with all available fields.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: User sign up\nsummary: Action to sign a user up.\ndescription: A longer description\nchannel:\n  $ref: '#/channels/userSignup'\naction: send\nsecurity:\n  - type: oauth2\n    description: The oauth security descriptions\n    flows:\n      clientCredentials:\n        tokenUrl: 'https://example.com/api/oauth/dialog'\n        availableScopes:\n          'subscribe:auth_revocations': Scope required for authorization revocation topic\n    scopes:\n      - 'subscribe:auth_revocations'\n    petstore_auth:\n      - 'write:pets'\n      - 'read:pets'\ntags:\n  - name: user\n  - name: signup\n  - name: register\nbindings:\n  amqp:\n    ack: false\ntraits:\n  - $ref: '#/components/operationTraits/kafka'\nmessages:\n  - $ref: '#/channels/userSignup/messages/userSignedUp'\nreply:\n  address:\n    location: '$message.header#/replyTo'\n  channel:\n    $ref: '#/channels/userSignupReply'\n  messages:\n    - $ref: '#/channels/userSignupReply/messages/userSignedUpReply'\n```\n\n----------------------------------------\n\nTITLE: Defining Components Object in AsyncAPI Using YAML\nDESCRIPTION: Example of a Components Object in YAML format, showing the same structures as the JSON example but with YAML syntax. Includes definitions for schemas, servers, channels, messages, and other reusable components.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  schemas:\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n    AvroExample:\n      schemaFormat: 'application/vnd.apache.avro+json;version=1.9.0'\n      schema:\n        $ref: './user-create.avsc'\n  servers:\n    development:\n      host: '{stage}.in.mycompany.com:{port}'\n      description: RabbitMQ broker\n      protocol: amqp\n      protocolVersion: 0-9-1\n      variables:\n        stage:\n          $ref: '#/components/serverVariables/stage'\n        port:\n          $ref: '#/components/serverVariables/port'\n  serverVariables:\n    stage:\n      default: demo\n      description: |\n        This value is assigned by the service provider, in this example\n        `mycompany.com`\n    port:\n      enum:\n        - '5671'\n        - '5672'\n      default: '5672'\n  channels:\n    user/signedup:\n      subscribe:\n        message:\n          $ref: '#/components/messages/userSignUp'\n  messages:\n    userSignUp:\n      summary: Action to sign a user up.\n      description: |\n        Multiline description of what this action does.\n        Here you have another line.\n      tags:\n        - name: user\n        - name: signup\n      headers:\n        type: object\n        properties:\n          applicationInstanceId:\n            description: |\n              Unique identifier for a given instance of the publishing\n              application\n            type: string\n      payload:\n        type: object\n        properties:\n          user:\n            $ref: '#/components/schemas/userCreate'\n          signup:\n            $ref: '#/components/schemas/signup'\n  parameters:\n    userId:\n      description: Id of the user.\n  correlationIds:\n    default:\n      description: Default Correlation ID\n      location: '$message.header#/correlationId'\n  messageTraits:\n    commonHeaders:\n      headers:\n        type: object\n        properties:\n          my-app-header:\n            type: integer\n            minimum: 0\n            maximum: 100\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Info Object Example in JSON\nDESCRIPTION: Complete example of the Info Object in JSON format, demonstrating all available fields including title, version, description, contact information, license, external documentation, and tags.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"AsyncAPI Sample App\",\n  \"version\": \"1.0.1\",\n  \"description\": \"This is a sample app.\",\n  \"termsOfService\": \"https://asyncapi.org/terms/\",\n  \"contact\": {\n    \"name\": \"API Support\",\n    \"url\": \"https://www.asyncapi.org/support\",\n    \"email\": \"support@asyncapi.org\"\n  },\n  \"license\": {\n    \"name\": \"Apache 2.0\",\n    \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n  },\n  \"externalDocs\": {\n    \"description\": \"Find more info here\",\n    \"url\": \"https://www.asyncapi.org\"\n  },\n  \"tags\": [\n    {\n      \"name\": \"e-commerce\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Message Object Example in YAML format\nDESCRIPTION: A complete example of a UserSignup message object in YAML format, showing all available fields including headers, payload, correlation ID, traits, and examples.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\nname: UserSignup\ntitle: User signup\nsummary: Action to sign a user up.\ndescription: A longer description\ncontentType: application/json\ntags:\n  - name: user\n  - name: signup\n  - name: register\nheaders:\n  type: object\n  properties:\n    correlationId:\n      description: Correlation ID set by application\n      type: string\n    applicationInstanceId:\n      description: Unique identifier for a given instance of the publishing application\n      type: string\npayload:\n  type: object\n  properties:\n    user:\n      $ref: '#/components/schemas/userCreate'\n    signup:\n      $ref: '#/components/schemas/signup'\ncorrelationId:\n  description: Default Correlation ID\n  location: $message.header#/correlationId\ntraits:\n  - $ref: '#/components/messageTraits/commonHeaders'\nexamples:\n  - name: SimpleSignup\n    summary: A simple UserSignup example message\n    headers:\n      correlationId: my-correlation-id\n      applicationInstanceId: myInstanceId\n    payload:\n      user:\n        someUserKey: someUserValue\n      signup:\n        someSignupKey: someSignupValue\n```\n\n----------------------------------------\n\nTITLE: Message Object Example in JSON format\nDESCRIPTION: A complete example of a UserSignup message object in JSON format, showing all available fields including headers, payload, correlation ID, traits, and examples.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"UserSignup\",\n  \"title\": \"User signup\",\n  \"summary\": \"Action to sign a user up.\",\n  \"description\": \"A longer description\",\n  \"contentType\": \"application/json\",\n  \"tags\": [\n    { \"name\": \"user\" },\n    { \"name\": \"signup\" },\n    { \"name\": \"register\" }\n  ],\n  \"headers\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"correlationId\": {\n        \"description\": \"Correlation ID set by application\",\n        \"type\": \"string\"\n      },\n      \"applicationInstanceId\": {\n        \"description\": \"Unique identifier for a given instance of the publishing application\",\n        \"type\": \"string\"\n      }\n    }\n  },\n  \"payload\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"user\": {\n        \"$ref\": \"#/components/schemas/userCreate\"\n      },\n      \"signup\": {\n        \"$ref\": \"#/components/schemas/signup\"\n      }\n    }\n  },\n  \"correlationId\": {\n    \"description\": \"Default Correlation ID\",\n    \"location\": \"$message.header#/correlationId\"\n  },\n  \"traits\": [\n    { \"$ref\": \"#/components/messageTraits/commonHeaders\" }\n  ],\n  \"examples\": [\n    {\n      \"name\": \"SimpleSignup\",\n      \"summary\": \"A simple UserSignup example message\",\n      \"headers\": {\n        \"correlationId\": \"my-correlation-id\",\n        \"applicationInstanceId\": \"myInstanceId\"\n      },\n      \"payload\": {\n        \"user\": {\n          \"someUserKey\": \"someUserValue\"\n        },\n        \"signup\": {\n          \"someSignupKey\": \"someSignupValue\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Servers Object in AsyncAPI Specification (YAML)\nDESCRIPTION: YAML representation of a Servers Object that defines multiple server environments (development, staging, production) for an application. Each server includes host information, protocol details, and environment-specific tags.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndevelopment:\n  host: localhost:5672\n  description: Development AMQP broker.\n  protocol: amqp\n  protocolVersion: 0-9-1\n  tags:\n    - name: 'env:development'\n      description: 'This environment is meant for developers to run their own tests.'\nstaging:\n  host: rabbitmq-staging.in.mycompany.com:5672\n  description: RabbitMQ broker for the staging environment.\n  protocol: amqp\n  protocolVersion: 0-9-1\n  tags:\n    - name: 'env:staging'\n      description: 'This environment is a replica of the production environment.'\nproduction:\n  host: rabbitmq.in.mycompany.com:5672\n  description: RabbitMQ broker for the production environment.\n  protocol: amqp\n  protocolVersion: 0-9-1\n  tags:\n    - name: 'env:production'\n      description: 'This environment is the live environment available for final users.'\n```\n\n----------------------------------------\n\nTITLE: Defining Servers Object in AsyncAPI Specification (JSON)\nDESCRIPTION: Example of a Servers Object that defines multiple server environments (development, staging, production) for an application. Each server includes host information, protocol details, and environment-specific tags.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"development\": {\n    \"host\": \"localhost:5672\",\n    \"description\": \"Development AMQP broker.\",\n    \"protocol\": \"amqp\",\n    \"protocolVersion\": \"0-9-1\",\n    \"tags\": [\n      { \n        \"name\": \"env:development\",\n        \"description\": \"This environment is meant for developers to run their own tests.\"\n      }\n    ]\n  },\n  \"staging\": {\n    \"host\": \"rabbitmq-staging.in.mycompany.com:5672\",\n    \"description\": \"RabbitMQ broker for the staging environment.\",\n    \"protocol\": \"amqp\",\n    \"protocolVersion\": \"0-9-1\",\n    \"tags\": [\n      { \n        \"name\": \"env:staging\",\n        \"description\": \"This environment is a replica of the production environment.\"\n      }\n    ]\n  },\n  \"production\": {\n    \"host\": \"rabbitmq.in.mycompany.com:5672\",\n    \"description\": \"RabbitMQ broker for the production environment.\",\n    \"protocol\": \"amqp\",\n    \"protocolVersion\": \"0-9-1\",\n    \"tags\": [\n      { \n        \"name\": \"env:production\",\n        \"description\": \"This environment is the live environment available for final users.\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object in AsyncAPI Specification (JSON)\nDESCRIPTION: Example of a Server Object that represents a Kafka message broker. It includes required fields like host and protocol, along with the protocol version.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"kafka.in.mycompany.com:9092\",\n  \"description\": \"Production Kafka broker.\",\n  \"protocol\": \"kafka\",\n  \"protocolVersion\": \"3.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object in AsyncAPI Specification (YAML)\nDESCRIPTION: YAML representation of a Server Object that represents a Kafka message broker. It includes required fields like host and protocol, along with the protocol version.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nhost: kafka.in.mycompany.com:9092\ndescription: Production Kafka broker.\nprotocol: kafka\nprotocolVersion: '3.2'\n```\n\n----------------------------------------\n\nTITLE: Message Object with Avro Schema in YAML format\nDESCRIPTION: An example of a UserSignup message object using Avro schema for the payload definition in YAML format. This shows how to reference an external Avro schema file.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nname: UserSignup\ntitle: User signup\nsummary: Action to sign a user up.\ndescription: A longer description\ntags:\n  - name: user\n  - name: signup\n  - name: register\npayload:\n  schemaFormat: 'application/vnd.apache.avro+yaml;version=1.9.0'\n  schema:\n    $ref: './user-create.avsc'\n```\n\n----------------------------------------\n\nTITLE: Defining Channels in AsyncAPI\nDESCRIPTION: Shows how to define channels in an AsyncAPI document. Channels represent shared communication paths and can include messages and references to message definitions.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userSignedUp\": {\n    \"address\": \"user.signedup\",\n    \"messages\": {\n      \"userSignedUp\": {\n        \"$ref\": \"#/components/messages/userSignedUp\"\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuserSignedUp:\n  address: 'user.signedup'\n  messages:\n    userSignedUp:\n      $ref: '#/components/messages/userSignedUp'\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Pathname in AsyncAPI Specification (JSON)\nDESCRIPTION: Example of a Server Object that includes a pathname property for the RabbitMQ broker. This demonstrates how to specify a path to a specific resource on the server.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"rabbitmq.in.mycompany.com:5672\",\n  \"pathname\": \"/production\",\n  \"protocol\": \"amqp\",\n  \"description\": \"Production RabbitMQ broker (uses the `production` vhost).\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Pathname in AsyncAPI Specification (YAML)\nDESCRIPTION: YAML representation of a Server Object that includes a pathname property for the RabbitMQ broker. This demonstrates how to specify a path to a specific resource on the server.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nhost: rabbitmq.in.mycompany.com:5672\npathname: /production\nprotocol: amqp\ndescription: Production RabbitMQ broker (uses the `production` vhost).\n```\n\n----------------------------------------\n\nTITLE: Defining Messages in AsyncAPI\nDESCRIPTION: Shows how to define messages within a channel in AsyncAPI. Messages are typically referenced from a components section.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"userSignedUp\": {\n    \"$ref\": \"#/components/messages/userSignedUp\"\n  },\n  \"userCompletedOrder\": {\n    \"$ref\": \"#/components/messages/userCompletedOrder\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nuserSignedUp:\n  $ref: '#/components/messages/userSignedUp'\nuserCompletedOrder:\n  $ref: '#/components/messages/userCompletedOrder'\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Security Scheme Examples\nDESCRIPTION: Collection of security scheme examples including user/password, API key, X.509, encryption, HTTP basic auth, and JWT bearer authentication implementations.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"userPassword\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"apiKey\",\n  \"in\": \"user\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"X509\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"symmetricEncryption\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"basic\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"httpApiKey\",\n  \"name\": \"api_key\",\n  \"in\": \"header\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"http\",\n  \"scheme\": \"bearer\",\n  \"bearerFormat\": \"JWT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi Format Schema Object with Avro in AsyncAPI\nDESCRIPTION: Example of using the Multi Format Schema Object with Apache Avro schema format in an AsyncAPI specification. Shows how to define a message payload using Avro schema format within a channel definition.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nchannels:\n  example:\n    messages:\n      myMessage:\n        payload:\n          schemaFormat: 'application/vnd.apache.avro;version=1.9.0'\n          schema:\n            type: record\n            name: User\n            namespace: com.company\n            doc: User information\n            fields:\n              - name: displayName\n                type: string\n              - name: age\n                type: int\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Variable Object in AsyncAPI Specification (YAML)\nDESCRIPTION: YAML representation of a Server Object that includes variable substitution. It defines an 'env' variable that can be used in the pathname to dynamically select between production and staging environments.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nhost: 'rabbitmq.in.mycompany.com:5672'\npathname: '/{env}'\nprotocol: amqp\ndescription: RabbitMQ broker. Use the `env` variable to point to either `production` or `staging`.\nvariables:\n  env:\n    description: Environment to connect to. It can be either `production` or `staging`.\n    enum:\n      - production\n      - staging\n```\n\n----------------------------------------\n\nTITLE: Defining Server Object with Variable Object in AsyncAPI Specification (JSON)\nDESCRIPTION: Example of a Server Object that includes variable substitution. It defines an 'env' variable that can be used in the pathname to dynamically select between production and staging environments.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"rabbitmq.in.mycompany.com:5672\",\n  \"pathname\": \"/{env}\",\n  \"protocol\": \"amqp\",\n  \"description\": \"RabbitMQ broker. Use the `env` variable to point to either `production` or `staging`.\",\n  \"variables\": {\n    \"env\": {\n      \"description\": \"Environment to connect to. It can be either `production` or `staging`.\",\n      \"enum\": [\n        \"production\",\n        \"staging\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Polymorphic Schema Models in AsyncAPI\nDESCRIPTION: Demonstrates how to define polymorphic models using discriminator pattern with a base Pet class and derived Cat, Dog, and StickInsect classes. Shows implementation in both JSON and YAML formats.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": {\n    \"Pet\": {\n      \"type\": \"object\",\n      \"discriminator\": \"petType\",\n      \"properties\": {\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"petType\": {\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"petType\"\n      ]\n    },\n    \"Cat\": {\n      \"description\": \"A representation of a cat. Note that `Cat` will be used as the discriminator value.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Pet\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"huntingSkill\": {\n              \"type\": \"string\",\n              \"description\": \"The measured skill for hunting\",\n              \"enum\": [\n                \"clueless\",\n                \"lazy\",\n                \"adventurous\",\n                \"aggressive\"\n              ]\n            }\n          },\n          \"required\": [\n            \"huntingSkill\"\n          ]\n        }\n      ]\n    },\n    \"Dog\": {\n      \"description\": \"A representation of a dog. Note that `Dog` will be used as the discriminator value.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Pet\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"packSize\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\",\n              \"description\": \"the size of the pack the dog is from\",\n              \"minimum\": 0\n            }\n          },\n          \"required\": [\n            \"packSize\"\n          ]\n        }\n      ]\n    },\n    \"StickInsect\": {\n      \"description\": \"A representation of an Australian walking stick. Note that `StickBug` will be used as the discriminator value.\",\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/Pet\"\n        },\n        {\n          \"type\": \"object\",\n          \"properties\": {\n            \"petType\": {\n              \"const\": \"StickBug\"\n            },\n            \"color\": {\n              \"type\": \"string\"\n            }\n          },\n          \"required\": [\n            \"color\"\n          ]\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nschemas:\n  Pet:\n    type: object\n    discriminator: petType\n    properties:\n      name:\n        type: string\n      petType:\n        type: string\n    required:\n    - name\n    - petType\n  Cat:\n    description: A representation of a cat\n    allOf:\n    - $ref: '#/components/schemas/Pet'\n    - type: object\n      properties:\n        huntingSkill:\n          type: string\n          description: The measured skill for hunting\n          enum:\n          - clueless\n          - lazy\n          - adventurous\n          - aggressive\n      required:\n      - huntingSkill\n  Dog:\n    description: A representation of a dog\n    allOf:\n    - $ref: '#/components/schemas/Pet'\n    - type: object\n      properties:\n        packSize:\n          type: integer\n          format: int32\n          description: the size of the pack the dog is from\n          minimum: 0\n      required:\n      - packSize\n  StickInsect:\n    description: A representation of an Australian walking stick\n    allOf:\n    - $ref: '#/components/schemas/Pet'\n    - type: object\n      properties:\n        petType:\n          const: StickBug\n        color:\n          type: string\n      required:\n      - color\n```\n\n----------------------------------------\n\nTITLE: Operation Trait Object Example in JSON\nDESCRIPTION: Example of an Operation Trait Object showing AMQP binding configuration.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bindings\": {\n    \"amqp\": {\n      \"ack\": false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Operation Trait Object Example in YAML\nDESCRIPTION: YAML representation of the Operation Trait Object example with AMQP binding settings.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nbindings:\n  amqp:\n    ack: false\n```\n\n----------------------------------------\n\nTITLE: Defining Default Content Type in AsyncAPI\nDESCRIPTION: Demonstrates how to specify the default content type for an AsyncAPI document at the root level. This sets the default content type for all messages in the API.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"defaultContentType\": \"application/json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaultContentType: application/json\n```\n\n----------------------------------------\n\nTITLE: Message Example Object Example\nDESCRIPTION: Demonstrates a complete Message Example Object with headers and payload for a user signup scenario.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"SimpleSignup\",\n  \"summary\": \"A simple UserSignup example message\",\n  \"headers\": {\n    \"correlationId\": \"my-correlation-id\",\n    \"applicationInstanceId\": \"myInstanceId\"\n  },\n  \"payload\": {\n    \"user\": {\n      \"someUserKey\": \"someUserValue\"\n    },\n    \"signup\": {\n      \"someSignupKey\": \"someSignupValue\"\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: SimpleSignup\nsummary: A simple UserSignup example message\nheaders:\n  correlationId: my-correlation-id\n  applicationInstanceId: myInstanceId\npayload:\n  user:\n    someUserKey: someUserValue\n  signup:\n    someSignupKey: someSignupValue\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Info Object Example in YAML\nDESCRIPTION: Complete example of the Info Object in YAML format, demonstrating all available fields including title, version, description, contact information, license, external documentation, and tags.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: AsyncAPI Sample App\nversion: 1.0.1\ndescription: This is a sample app.\ntermsOfService: https://asyncapi.org/terms/\ncontact:\n  name: API Support\n  url: https://www.asyncapi.org/support\n  email: support@asyncapi.org\nlicense:\n  name: Apache 2.0\n  url: https://www.apache.org/licenses/LICENSE-2.0.html\nexternalDocs:\n  description: Find more info here\n  url: https://www.asyncapi.org\ntags:\n  - name: e-commerce\n```\n\n----------------------------------------\n\nTITLE: Message Object with Avro Schema in JSON format\nDESCRIPTION: An example of a UserSignup message object using Avro schema for the payload definition in JSON format. This shows how to reference an external Avro schema file.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"UserSignup\",\n  \"title\": \"User signup\",\n  \"summary\": \"Action to sign a user up.\",\n  \"description\": \"A longer description\",\n  \"tags\": [\n    { \"name\": \"user\" },\n    { \"name\": \"signup\" },\n    { \"name\": \"register\" }\n  ],\n  \"payload\": {\n    \"schemaFormat\": \"application/vnd.apache.avro+json;version=1.9.0\",\n    \"schema\": {\n      \"$ref\": \"./user-create.avsc\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Correlation ID Object in YAML\nDESCRIPTION: This snippet shows how to define a correlation ID object in YAML format. It includes a description and location using a runtime expression.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_68\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Default Correlation ID\nlocation: $message.header#/correlationId\n```\n\n----------------------------------------\n\nTITLE: Defining Correlation ID Object in JSON\nDESCRIPTION: This snippet demonstrates how to define a correlation ID object in JSON format. It includes a description and location using a runtime expression.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Default Correlation ID\",\n  \"location\": \"$message.header#/correlationId\"\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Parameters Object Example in JSON\nDESCRIPTION: Shows how to define channel parameters with a user ID parameter including its description and address pattern.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"user/{userId}/signedup\",\n  \"parameters\": {\n    \"userId\": {\n      \"description\": \"Id of the user.\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Operation Reply Address Object in JSON\nDESCRIPTION: Demonstrates how to specify a reply address for an operation using a runtime expression that points to a header field. Includes an optional description field and required location field.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Consumer inbox\",\n  \"location\": \"$message.header#/replyTo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Operation Reply Address Object in YAML\nDESCRIPTION: YAML representation of an operation reply address specification with description and location fields.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Consumer Inbox\nlocation: $message.header#/replyTo\n```\n\n----------------------------------------\n\nTITLE: Channel Bindings Object Field Definitions in AsyncAPI\nDESCRIPTION: Table defining the protocol-specific bindings available for channel objects in AsyncAPI, including supported messaging protocols and links to their detailed specifications.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_38\n\nLANGUAGE: markdown\nCODE:\n```\nField Name | Type | Description\n---|:---:|---\n`http` | [HTTP Channel Binding](https://github.com/asyncapi/bindings/blob/master/http/README.md#channel) | Protocol-specific information for an HTTP channel.\n`ws` | [WebSockets Channel Binding](https://github.com/asyncapi/bindings/blob/master/websockets/README.md#channel) | Protocol-specific information for a WebSockets channel.\n`kafka` | [Kafka Channel Binding](https://github.com/asyncapi/bindings/blob/master/kafka/README.md#channel) | Protocol-specific information for a Kafka channel.\n```\n\n----------------------------------------\n\nTITLE: Defining Person Object Schema\nDESCRIPTION: Shows a simple model schema with required fields, properties including a reference to another schema, and validation constraints.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"name\"\n  ],\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\"\n    },\n    \"address\": {\n      \"$ref\": \"#/components/schemas/Address\"\n    },\n    \"age\": {\n      \"type\": \"integer\",\n      \"format\": \"int32\",\n      \"minimum\": 0\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- name\nproperties:\n  name:\n    type: string\n  address:\n    $ref: '#/components/schemas/Address'\n  age:\n    type: integer\n    format: int32\n    minimum: 0\n```\n\n----------------------------------------\n\nTITLE: Channel Parameters Object Example in YAML\nDESCRIPTION: YAML version of channel parameters definition showing user ID parameter structure.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\naddress: user/{userId}/signedup\nparameters:\n  userId:\n    description: Id of the user.\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Operation Definition with Metadata\nDESCRIPTION: Shows a more detailed operation definition including summary, description, and channel reference for receiving messages.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\noperations:\n  onUserSignedUp:\n    summary: On user signed up.\n    description: Event received when a user signed up on the product.\n    action: receive\n    channel:\n      $ref: '#/channels/userSignedUp'\n```\n\n----------------------------------------\n\nTITLE: Channel Parameter Object with Location Example in JSON\nDESCRIPTION: Demonstrates a channel parameter definition that includes both description and location fields using runtime expressions.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"user/{userId}/signedup\",\n  \"parameters\": {\n    \"userId\": {\n      \"description\": \"Id of the user.\",\n      \"location\": \"$message.payload#/user/id\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Channel Parameter Object with Location Example in YAML\nDESCRIPTION: YAML representation of a channel parameter with description and location specifications using runtime expressions.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\naddress: user/{userId}/signedup\nparameters:\n  userId:\n    description: Id of the user.\n    location: $message.payload#/user/id\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit OAuth2 Security Scheme in YAML\nDESCRIPTION: This snippet shows how to define an implicit OAuth2 security scheme in YAML format. It includes the authorization URL and available scopes.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_62\n\nLANGUAGE: yaml\nCODE:\n```\ntype: oauth2\nflows:\n  implicit:\n    authorizationUrl: https://example.com/api/oauth/dialog\n    availableScopes:\n      write:pets: modify pets in your account\n      read:pets: read your pets\nscopes:\n  - 'write:pets'\n```\n\n----------------------------------------\n\nTITLE: Defining SASL Security Scheme in JSON\nDESCRIPTION: This snippet demonstrates how to define a SASL security scheme using SCRAM-SHA-512 in JSON format.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"scramSha512\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SASL Security Scheme in YAML\nDESCRIPTION: This snippet shows how to define a SASL security scheme using SCRAM-SHA-512 in YAML format.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_64\n\nLANGUAGE: yaml\nCODE:\n```\ntype: scramSha512\n```\n\n----------------------------------------\n\nTITLE: Defining Client Credentials OAuth Flow in YAML\nDESCRIPTION: This snippet shows how to define a client credentials OAuth flow object in YAML format. It includes the token URL and available scopes.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_66\n\nLANGUAGE: yaml\nCODE:\n```\ntokenUrl: https://example.com/api/oauth/token\navailableScopes:\n  write:pets: modify pets in your account\n  read:pets: read your pets\n```\n\n----------------------------------------\n\nTITLE: Defining Client Credentials OAuth Flow in JSON\nDESCRIPTION: This snippet demonstrates how to define a client credentials OAuth flow object in JSON format. It includes the token URL and available scopes.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tokenUrl\": \"https://example.com/api/oauth/token\",\n  \"availableScopes\": {\n    \"write:pets\": \"modify pets in your account\",\n    \"read:pets\": \"read your pets\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Implicit OAuth2 Security Scheme in JSON\nDESCRIPTION: This snippet demonstrates how to define an implicit OAuth2 security scheme in JSON format. It includes the authorization URL and available scopes.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"oauth2\",\n  \"flows\": {\n    \"implicit\": {\n      \"authorizationUrl\": \"https://example.com/api/oauth/dialog\",\n      \"availableScopes\": {\n        \"write:pets\": \"modify pets in your account\",\n        \"read:pets\": \"read your pets\"\n      }\n    }\n  },\n  \"scopes\": [\n    \"write:pets\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in AsyncAPI Specification (JSON)\nDESCRIPTION: Example of a License Object that provides licensing information for an API. It includes the required name property and an optional URL pointing to the license.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Apache 2.0\",\n  \"url\": \"https://www.apache.org/licenses/LICENSE-2.0.html\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining License Object in AsyncAPI Specification (YAML)\nDESCRIPTION: YAML representation of a License Object that provides licensing information for an API. It includes the required name property and an optional URL pointing to the license.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nname: Apache 2.0\nurl: https://www.apache.org/licenses/LICENSE-2.0.html\n```\n\n----------------------------------------\n\nTITLE: Defining Map/Dictionary Schema\nDESCRIPTION: Examples of schemas with additional properties for string-to-string and string-to-model mappings.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"type\": \"string\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  type: string\n```\n\n----------------------------------------\n\nTITLE: Message Trait Object Example\nDESCRIPTION: Example of a Message Trait Object showing content type specification.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contentType\": \"application/json\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ncontentType: application/json\n```\n\n----------------------------------------\n\nTITLE: Complex Model Mapping Schema\nDESCRIPTION: Schema definition for object with complex model references as additional properties.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"additionalProperties\": {\n    \"$ref\": \"#/components/schemas/ComplexModel\"\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nadditionalProperties:\n  $ref: '#/components/schemas/ComplexModel'\n```\n\n----------------------------------------\n\nTITLE: Schema with Examples\nDESCRIPTION: Demonstrates schema definition with example values and required fields.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\",\n      \"format\": \"int64\"\n    },\n    \"name\": {\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"examples\": [\n    {\n      \"name\": \"Puma\",\n      \"id\": 1\n    }\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nproperties:\n  id:\n    type: integer\n    format: int64\n  name:\n    type: string\nrequired:\n- name\nexamples:\n- name: Puma\n  id: 1\n```\n\n----------------------------------------\n\nTITLE: Schema with Composition\nDESCRIPTION: Demonstrates schema composition using allOf to extend base models with additional properties.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemas\": {\n    \"ErrorModel\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"message\",\n        \"code\"\n      ],\n      \"properties\": {\n        \"message\": {\n          \"type\": \"string\"\n        },\n        \"code\": {\n          \"type\": \"integer\",\n          \"minimum\": 100,\n          \"maximum\": 600\n        }\n      }\n    },\n    \"ExtendedErrorModel\": {\n      \"allOf\": [\n        {\n          \"$ref\": \"#/components/schemas/ErrorModel\"\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\n            \"rootCause\"\n          ],\n          \"properties\": {\n            \"rootCause\": {\n              \"type\": \"string\"\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nschemas:\n  ErrorModel:\n    type: object\n    required:\n    - message\n    - code\n    properties:\n      message:\n        type: string\n      code:\n        type: integer\n        minimum: 100\n        maximum: 600\n  ExtendedErrorModel:\n    allOf:\n    - $ref: '#/components/schemas/ErrorModel'\n    - type: object\n      required:\n      - rootCause\n      properties:\n        rootCause:\n          type: string\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Contact Object Example in JSON\nDESCRIPTION: Example of the Contact Object in JSON format, showing the name, URL, and email fields for API support contact information.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"API Support\",\n  \"url\": \"https://www.example.com/support\",\n  \"email\": \"support@example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Schema with Boolean Values\nDESCRIPTION: Shows schema using boolean values to define validation patterns.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"required\": [\n    \"anySchema\"\n  ],\n  \"properties\": {\n    \"anySchema\": true,\n    \"cannotBeDefined\": false\n  }\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: object\nrequired:\n- anySchema\nproperties:\n  anySchema: true\n  cannotBeDefined: false\n```\n\n----------------------------------------\n\nTITLE: Server Bindings Object Field Definitions in AsyncAPI\nDESCRIPTION: Table defining the protocol-specific bindings available for server objects in AsyncAPI, including supported messaging protocols and links to their detailed specifications.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_37\n\nLANGUAGE: markdown\nCODE:\n```\nField Name | Type | Description\n---|:---:|---\n`http` | [HTTP Server Binding](https://github.com/asyncapi/bindings/blob/master/http#server) | Protocol-specific information for an HTTP server.\n`ws` | [WebSockets Server Binding](https://github.com/asyncapi/bindings/blob/master/websockets#server) | Protocol-specific information for a WebSockets server.\n`kafka` | [Kafka Server Binding](https://github.com/asyncapi/bindings/blob/master/kafka#server) | Protocol-specific information for a Kafka server.\n```\n\n----------------------------------------\n\nTITLE: External Documentation Object Example\nDESCRIPTION: Example of an External Documentation Object for referencing additional documentation.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"Find more info here\",\n  \"url\": \"https://example.com\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndescription: Find more info here\nurl: https://example.com\n```\n\n----------------------------------------\n\nTITLE: Reference Object Example\nDESCRIPTION: Example of a Reference Object using JSON Reference to point to a Pet schema component.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$ref\": \"#/components/schemas/Pet\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ref: '#/components/schemas/Pet'\n```\n\n----------------------------------------\n\nTITLE: Defining Email Schema with JSON and YAML\nDESCRIPTION: Demonstrates a primitive schema definition for an email format string type.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"string\",\n  \"format\": \"email\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nformat: email\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Contact Object Example in YAML\nDESCRIPTION: Example of the Contact Object in YAML format, showing the name, URL, and email fields for API support contact information.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nname: API Support\nurl: https://www.example.com/support\nemail: support@example.com\n```\n\n----------------------------------------\n\nTITLE: Tag Object Example\nDESCRIPTION: Example of a Tag Object used for categorizing and describing message types.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n \"name\": \"user\",\n \"description\": \"User-related messages\"\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: user\ndescription: User-related messages\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Identifier Example in YAML\nDESCRIPTION: Example of a valid identifier for an AsyncAPI application in YAML format using URN notation.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nid: 'urn:example:com:smartylighting:streetlights:server'\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI HTTP Identifier Example in YAML\nDESCRIPTION: Example of using an HTTP URL as an identifier for an AsyncAPI application in YAML format.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nid: 'https://github.com/smartylighting/streetlights-server'\n```\n\n----------------------------------------\n\nTITLE: Invalid Operation Conversion Example\nDESCRIPTION: Demonstrates an incorrect conversion of a receive operation to a send operation, highlighting why direct conversion between sender and receiver specifications is not recommended.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noperations:\n  onUserSignedUp: # <-- This doesn't make sense now. Should be something like sendUserSignedUp.\n    summary: On user signed up. # <-- This doesn't make sense now. Should say something like \"Sends a user signed up event\".\n    description: Event received when a user signed up on the product. # <-- This doesn't make sense now. Should speak about sending an event, not receiving it.\n    action: send\n    channel:\n      $ref: '#/channels/userSignedUp'\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI Identifier Example in JSON\nDESCRIPTION: Examples of valid identifiers for AsyncAPI applications using URN format to globally and uniquely identify applications.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"urn:example:com:smartylighting:streetlights:server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Field Name Examples in AsyncAPI Components\nDESCRIPTION: Examples of valid field names that match the required regular expression pattern ^[a-zA-Z0-9\\.\\-_]+$ for Components Object keys.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_48\n\nLANGUAGE: text\nCODE:\n```\nUser\nUser_1\nUser_Name\nuser-name\nmy.org.User\n```\n\n----------------------------------------\n\nTITLE: AsyncAPI HTTP Identifier Example in JSON\nDESCRIPTION: Example of using an HTTP URL as an identifier for an AsyncAPI application in JSON format.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"https://github.com/smartylighting/streetlights-server\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Field Representation in AsyncAPI\nDESCRIPTION: Demonstrates how fields with array values are represented in YAML format within AsyncAPI Specification files.\nSOURCE: https://github.com/asyncapi/spec/blob/master/spec/asyncapi.md#2025-04-22_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n{\n   \"field\" : [...]\n}\n```\n\n----------------------------------------\n\nTITLE: Linting AsyncAPI Specification Markdown with Docker\nDESCRIPTION: This command uses a Docker container to run markdownlint-cli and check the AsyncAPI specification markdown file for errors. It mounts the current directory to the container and targets the specific markdown file.\nSOURCE: https://github.com/asyncapi/spec/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -v $PWD:/workdir ghcr.io/igorshubovych/markdownlint-cli:v0.35.0 \"spec/asyncapi.md\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Contributor Table in Markdown\nDESCRIPTION: This code snippet demonstrates how to create a table in Markdown to display contributor information, including avatars, names, and contribution types using emojis.\nSOURCE: https://github.com/asyncapi/spec/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"top\" width=\"11.11%\"><a href=\"http://www.fmvilas.com\"><img src=\"https://avatars3.githubusercontent.com/u/242119?v=4?s=100\" width=\"100px;\" alt=\"Fran Méndez\"/><br /><sub><b>Fran Méndez</b></sub></a><br /><a href=\"#question-fmvilas\" title=\"Answering Questions\">💬</a> <a href=\"https://github.com/asyncapi/spec/issues?q=author%3Afmvilas\" title=\"Bug reports\">🐛</a> <a href=\"#blog-fmvilas\" title=\"Blogposts\">📝</a> <a href=\"https://github.com/asyncapi/spec/commits?author=fmvilas\" title=\"Documentation\">📖</a> <a href=\"#ideas-fmvilas\" title=\"Ideas, Planning, & Feedback\">🤔</a> <a href=\"#infra-fmvilas\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">🚇</a> <a href=\"#maintenance-fmvilas\" title=\"Maintenance\">🚧</a> <a href=\"https://github.com/asyncapi/spec/pulls?q=is%3Apr+reviewed-by%3Afmvilas\" title=\"Reviewed Pull Requests\">👀</a> <a href=\"#tutorial-fmvilas\" title=\"Tutorials\">✅</a> <a href=\"#talk-fmvilas\" title=\"Talks\">📢</a></td>\n      <!-- Additional contributor entries omitted for brevity -->\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Update AsyncAPI Schema MIME Types Example\nDESCRIPTION: Code location in parser-js repository showing where version updates are needed in the getMimeTypes function of asyncapiSchemaFormatParser.js\nSOURCE: https://github.com/asyncapi/spec/blob/master/RELEASE_PROCESS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nlib/asyncapiSchemaFormatParser.js\n```"
  }
]