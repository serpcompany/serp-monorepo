[
  {
    "owner": "aboutcircles",
    "repo": "circles-docs",
    "content": "TITLE: Finding Groups with Pagination\nDESCRIPTION: Fetches a list of groups from the Circles system using the `findGroups` method, with options for pagination and filtering. The code sets a `pageSize` to limit the number of groups returned, and uses a `try...catch` block to handle potential errors during the data retrieval process. The result is logged to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/find-groups-and-memberships.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst groupsPageSize = 10; // Define the maximum number of groups to return\nconst queryParams = { /* Example filter parameters */ };\n\ntry {\n    const groupsQueryResult = await circles.data.findGroups(groupsPageSize, queryParams);\n    console.log('Retrieved groups:', groupsQueryResult);\n} catch (error) {\n    console.error('Error fetching groups:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Basic Avatar Information with getAvatarInfo\nDESCRIPTION: Retrieves descriptive information about an avatar, returning an AvatarRow object or undefined if not found. Facilitates fetching user profile details.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAvatarInfo(avatar: string): Promise<AvatarRow | undefined>\n```\n\n----------------------------------------\n\nTITLE: Fetching Detailed Token Balances with getTokenBalances\nDESCRIPTION: Obtains a list of token balances for a specific avatar address, returning an array of TokenBalanceRow objects. This method helps in understanding the token holdings of an avatar.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenBalances(avatar: string): Promise<TokenBalanceRow[]>\n```\n\n----------------------------------------\n\nTITLE: Initializing Circles SDK with Ethers Adapter - TypeScript\nDESCRIPTION: This snippet imports necessary modules from the @circles-sdk/sdk library, specifically the Sdk and circlesConfig. It also imports BrowserProviderContractRunner from @circles-sdk/adapter-ethers. It initializes the adapter, sets up the Circles SDK, and takes the adapter and circlesConfig as parameters. This is a core setup step to enable interacting with the Circles protocol. Dependencies include @circles-sdk/sdk and @circles-sdk/adapter-ethers.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { circlesConfig, Sdk } from '@circles-sdk/sdk';\n// or use the type import and then set up Circles contracts in configurations\n// import type {CirclesConfig} from \"@circles-sdk/sdk\";\nimport {BrowserProviderContractRunner} from \"@circles-sdk/adapter-ethers\"\n\nconst adapter = new BrowserProviderContractRunner();\nawait adapter.init();\n\nconst sdk = new Sdk (adapter,circlesConfig); \n// or GnosisChainConfig as named in config\n```\n\n----------------------------------------\n\nTITLE: Accepting Circles Invitation with Profile CID (TypeScript)\nDESCRIPTION: Shows how to accept a Circles network invitation using the SDK when you already have a profile CID (Content Identifier). You must provide the inviter's blockchain address and your profile's CID. The function returns an object representing the newly accepted avatar.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/inviting-and-accepting-human-avatars.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = await sdk.acceptInvitation(inviterAddress,\"Qm.....\");\nconsole.log(avatar.avatarInfo);\n```\n\n----------------------------------------\n\nTITLE: Setting up Production Circles Configuration - TypeScript\nDESCRIPTION: This code defines the configuration for the production environment of the Circles Protocol. It imports the CirclesConfig type from the @circles-sdk/sdk library. The GnosisChainConfig object contains the RPC URL, Pathfinder URL, and addresses for various Circle contracts and services. It needs the @circles-sdk/sdk as a prerequisite and provides the necessary network settings to use the Circles protocol on the Gnosis Chain. The output is a CirclesConfig object that is used to configure the SDK to interact with the Circles Protocol.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {CirclesConfig} from \"@circles-sdk/sdk\";\n\nexport const GnosisChainConfig: CirclesConfig = {\ncirclesRpcUrl: \"https://rpc.aboutcircles.com/\",\npathfinderUrl: \"https://pathfinder.aboutcircles.com\",\nv1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\nv2HubAddress: \"0xc12C1E50ABB450d6205Ea2C3Fa861b3B834d13e8\",\nnameRegistryAddress: \"0xA27566fD89162cC3D40Cb59c87AAaA49B85F3474\",\nmigrationAddress: \"0xD44B8dcFBaDfC78EA64c55B705BFc68199B56376\",\nprofileServiceUrl: \"https://rpc.aboutcircles.com/profiles/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Retrieving Events for an Avatar with getEvents\nDESCRIPTION: Fetches events related to an avatar within a specified block range, with optional filtering by event types, custom filters, and sorting. Returns a promise resolving to an array of CirclesEvent objects.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetEvents(avatar?: string, fromBlock?: number, toBlock?: number, eventTypes?: string[], filters?: FilterPredicate[], sortAscending?: boolean): Promise<CirclesEvent[]>\n```\n\n----------------------------------------\n\nTITLE: Migrating Avatar and Holdings from Circles V1 to V2 using TypeScript\nDESCRIPTION: Migrates a V1 avatar along with its Circles holdings to the V2 protocol version. Requires the avatar's address, a Profile object with avatar data, and optionally an array of trust relations to migrate. Returns a Promise resolving to void. This method facilitates seamless upgrades between Circle versions.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nmigrateAvatar: (avatar: string, profile: Profile, trustRelations?: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining Circles SDK configuration for Gnosis Chain mainnet\nDESCRIPTION: This snippet shows the configuration object containing contract addresses and service URLs for deploying Circles SDK on Gnosis Chain mainnet, suitable for production use, adhering to the 'CirclesConfig' structure.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const GnosisChainConfig: CirclesConfig = {\n    circlesRpcUrl: \"https://rpc.aboutcircles.com/\",\n    pathfinderUrl: \"https://pathfinder.aboutcircles.com\",\n    profileServiceUrl: \"https://rpc.aboutcircles.com/profiles/\",\n    v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n    v2HubAddress: \"0xc12C1E50ABB450d6205Ea2C3Fa861b3B834d13e8\",\n    nameRegistryAddress: \"0xA27566fD89162cC3D40Cb59c87AAaA49B85F3474\",\n    migrationAddress: \"0xD44B8dcFBaDfC78EA64c55B705BFc68199B56376\",\n    standardTreasury: \"0x08F90aB73A515308f03A718257ff9887ED330C6e\",\n    baseGroupMintPolicy: \"0xcCa27c26CF7BAC2a9928f42201d48220F0e3a549\",\n    coreMembersGroupDeployer: \"0xFEca40Eb02FB1f4F5F795fC7a03c1A27819B1Ded\"\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a V2 Organization in Circles (TypeScript)\nDESCRIPTION: This asynchronous TypeScript function demonstrates how to register an organization in Circles v2.0 using the `registerOrganizationV2` method from the provided SDK. It takes the SDK instance and a `profile` object as arguments, logs the resulting avatar upon success, and includes basic error handling to log any issues encountered during the registration process.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/organization-avatars/creation-of-organizations.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst registerV2Organization = async (sdk, profile) => {\n    try {\n        const avatar = await sdk.registerOrganizationV2(profile); // Call the V2 method\n        console.log('V2 Organization Avatar:', avatar);\n    } catch (error) {\n        console.error('Error registering organization V2:', error);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Importing necessary modules from Circles SDK and Ethers.js\nDESCRIPTION: This snippet imports the core configuration object and SDK class from the Circles SDK, as well as the Ethereum provider adapter, enabling smart contract interactions through a browser wallet like MetaMask.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { circlesConfig, Sdk } from '@circles-sdk/sdk';\nimport { BrowserProviderContractRunner } from '@circles-sdk/adapter-ethers';\n```\n\n----------------------------------------\n\nTITLE: Setting up Sandbox Circles Configuration - TypeScript\nDESCRIPTION: This snippet demonstrates how to configure the Circles SDK for a sandbox (testing) environment. It imports the CirclesConfig type from the @circles-sdk/sdk library. It defines a circlesConfig object containing different RPC URLs, and contract addresses. These configurations enable a developer to interact with a sandbox version of the Circles Protocol. This setup allows developers to test their implementation without affecting the production environment.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// For sandbox version\nimport type {CirclesConfig} from \"@circles-sdk/sdk\";\n\nexport const circlesConfig: CirclesConfig = {\n    circlesRpcUrl: \"https://static.94.138.251.148.clients.your-server.de/rpc/\",\n    v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n    v2HubAddress: \"0x3D61f0A272eC69d65F5CFF097212079aaFDe8267\",\n    migrationAddress: \"0x28141b6743c8569Ad8B20Ac09046Ba26F9Fb1c90\",\n    nameRegistryAddress: \"0x8D1BEBbf5b8DFCef0F7E2039e4106A76Cb66f968\",\n    baseGroupMintPolicy: \"0x79Cbc9C7077dF161b92a745345A6Ade3fC626A60\",\n    profileServiceUrl: \"https://static.94.138.251.148.clients.your-server.de/profiles/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Query with PagedQueryParams in TypeScript\nDESCRIPTION: This code defines a query using the `PagedQueryParams` interface to retrieve avatars of type 'group' from the 'Avatars' table in the 'V_Crc' namespace. It specifies the columns to select, a filter condition, the sort order, and the maximum number of rows to return. The query retrieves specific columns from the 'Avatars' table where the 'type' column equals 'group'. It also sets the sort order to ascending and limits the number of returned rows to 100. To use pagination, `blockNumber`, `transactionIndex`, and `logIndex` must be included.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst queryDefinition: PagedQueryParams = {\n  namespace: 'V_Crc',\n  table: 'Avatars',\n  columns: [\n    'blockNumber',\n    'transactionIndex',\n    'logIndex',\n    'avatar',\n    'name',\n    'cidV0Digest'\n  ],\n  filter: [\n    {\n      Type: 'FilterPredicate',\n      FilterType: 'Equals',\n      Column: 'type',\n      Value: 'group'\n    }\n  ],\n  sortOrder: 'ASC',\n  limit: 100\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a CirclesQuery instance in TypeScript\nDESCRIPTION: This code creates an instance of the `CirclesQuery` class, passing the `CirclesRpc` instance and the query definition as arguments. This allows to execute the previously defined query using the Circles RPC. The `MyGroupType` type is used to strongly type the results.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = new CirclesQuery<MyGroupType>(circlesRpc, queryDefinition);\n```\n\n----------------------------------------\n\nTITLE: Summary of Circles SDK setup workflow\nDESCRIPTION: A concluding code block summarizing the entire setup process: installation, import, configuration, adapter initialization, and SDK instantiation, forming the basis to integrate Circles SDK into your dApp.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @circles-sdk/sdk @circles-sdk/data @circles-sdk/utils @circles-sdk/profiles @circles-sdk/adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Getting Existing Avatar Instance using Circles SDK (TypeScript)\nDESCRIPTION: Describes how to retrieve an instance of an already existing avatar using its blockchain address via the Circles SDK. This is useful for interacting with avatars you haven't just created or accepted. It returns an `AvatarInterface` instance or throws an error if the avatar cannot be found. The example includes logging its information.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/inviting-and-accepting-human-avatars.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = await sdk.getAvatar(avatarAddress);\nconsole.log(avatar.avatarInfo);\n```\n\n----------------------------------------\n\nTITLE: Registering Connected Wallet as Human Avatar in Circles SDK with TypeScript\nDESCRIPTION: Registers the currently connected wallet as a human avatar in Circles V1. No parameters are required. Returns a Promise that resolves to an AvatarInterface representing the registered human avatar. This method is useful for initial user setup within Circles.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterHuman: () => Promise<AvatarInterface>\n```\n\n----------------------------------------\n\nTITLE: Getting Demurrage Wrapper for Token Management in Circles SDK using TypeScript\nDESCRIPTION: Retrieves a demurrage wrapper instance that manages tokens subject to value decay over time. The wrapper contract address is required. Returns a Promise resolving to a DemurrageCircles instance. This allows handling of tokens with time-based depreciation within the Circles protocol.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetDemurragedWrapper: (wrapperAddress: string) => Promise<DemurrageCircles>\n```\n\n----------------------------------------\n\nTITLE: Accepting Invitations by CID or Profile in Circles SDK with TypeScript\nDESCRIPTION: Accepts an invitation to join Circles using either a CIDv0 string pointing to avatar metadata or a Profile object. The inviter parameter is the wallet address of the inviting avatar. Returns a Promise resolving to an AvatarInterface instance representing the accepted avatar. This method enables onboarding avatars via external invitations.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nacceptInvitation: (inviter: string, cidV0: string) => Promise<AvatarInterface>;\n//or\nacceptInvitation: (inviter: string, profile: Profile) => Promise<AvatarInterface>;\n```\n\n----------------------------------------\n\nTITLE: Querying Detailed Token Balances with getTokenBalances and getTokenBalancesV2 in TypeScript\nDESCRIPTION: Retrieves detailed balance information for an avatar's tokens in both Circles protocol versions. Each result includes token, balance, and tokenOwner. Requires CirclesData instance, avatar address, and optional asTimeCircles parameter. Returns arrays of TokenBalanceRow objects as strings.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst detailedCirclesBalancesV1 = await data.getTokenBalances(\"0x...\");\nconst detailedCirclesBalancesV2 = await data.getTokenBalancesV2(\"0x...\");\n```\n\n----------------------------------------\n\nTITLE: Initializing CirclesData with CirclesRpc (RINGS) in TypeScript\nDESCRIPTION: Creates a CirclesRpc object for the RINGS network and uses it to instantiate CirclesData. Dependencies: CirclesRpc class, CirclesData class. Required parameters: RINGS RPC server URL. Output: CirclesData instance for RINGS.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc(\"https://static.94.138.251.148.clients.your-server.de/rpc/\");\nconst data = new CirclesData(circlesRpc);\n```\n\n----------------------------------------\n\nTITLE: Registering Organization Avatar with Profile Data in Circles SDK v2 using TypeScript\nDESCRIPTION: Registers the connected wallet as an organization avatar in Circles V2, requiring a Profile object describing the organization's profile. Returns a Promise resolving to an AvatarInterface. This method supports extended metadata for organizational identities.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterOrganizationV2: (profile: Profile) => Promise<AvatarInterface>\n```\n\n----------------------------------------\n\nTITLE: Creating Group Avatar using Circles SDK in TypeScript\nDESCRIPTION: Demonstrates how to register a new group avatar using the `circlesSDK?.registerGroupV2` function. It requires the address of the mint policy contract and a `profile` object as inputs. The function attempts to create the group and returns the new group avatar details, which are then logged. This snippet utilizes types from `@circles-sdk/profiles` and assumes `circlesSDK` is an initialized instance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/creation-of-groups.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { GroupProfile, Profile, Profiles } from '@circles-sdk/profiles';\n\n// When on Gnosis Chain use this ..\n// const standardMintPolicy = \"0x5Ea08c967C69255d82a4d26e36823a720E7D0317\";\n\n// When on Chiado use that ..\n// const standardMintPolicy = \"0xaD49f877021c73d00bE142b135c9AA67f0D8e9c6\";\n\nconst mintPolicy = '0xYourMintPolicyContractAddress';\nconst groupProfile: GroupProfile = {\n    name: 'Group Namw',\n    symbol: 'Group Token Symbol',\n    description: '',\n    previewImageUrl: '',\n    imageUrl: '',\n    \n    \n};\nconst GroupAvatar = await circlesSDK?.registerGroupV2(mintPolicy, profile);\n\n// Log the newly created group avatar details\nconsole.log('New Group Avatar:', GroupAvatar);\n```\n\n----------------------------------------\n\nTITLE: Inviting Human Avatar using Circles SDK (TypeScript)\nDESCRIPTION: Demonstrates how to invite another human user to the Circles network using an existing avatar instance from the Circles SDK. This action initiates the invitation process for the specified invitee address.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/inviting-and-accepting-human-avatars.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nawait avatar.inviteHuman(inviteeAddress);\n```\n\n----------------------------------------\n\nTITLE: Migrating V1 Tokens of an Avatar to Circles V2 using TypeScript\nDESCRIPTION: Migrates all token holdings associated with a V1 avatar to the V2 protocol. Takes the avatar address and optionally an array of specific token addresses to migrate. Returns a Promise resolving to void. This method is essential for token migration and maintaining token portfolio consistency.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nmigrateV1Tokens: (avatar: string, tokens?: string[]) => Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Registering Group Avatar with Mint and Profile in Circles SDK v2 using TypeScript\nDESCRIPTION: Registers the connected wallet as a group avatar in Circles V2. It requires the mint address of the minting policy contract and a GroupProfile object that contains group-specific metadata. Returns a Promise resolving to an AvatarInterface representing the group avatar.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>\n```\n\n----------------------------------------\n\nTITLE: Transferring CRC Tokens Between Avatars\nDESCRIPTION: Shows how to execute a transfer of CRC tokens to another avatar with a valid trust path. The function returns a transaction receipt confirming the successful transfer.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/transfer-personal-circles-tokens-to-different-avatar.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst transferReceipt = await avatar.transfer(recipientAddress, amountToTransfer);\nconsole.log(`Transfer successful! Transaction receipt: ${transferReceipt}`);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Maximum Transferable Amount in Circles\nDESCRIPTION: Demonstrates how to use the pathfinder to find the maximum amount of Circles tokens that can be transferred from one avatar to another. This amount may be less than the total balance due to trust path limitations.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/transfer-personal-circles-tokens-to-different-avatar.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst maxTransferable = await avatar.getMaxTransferableAmount(toAvatarAddress)\nconsole.log(`Maximum transferable amount: ${maxTransferable}`);\n```\n\n----------------------------------------\n\nTITLE: Setting up Circles SDK React Context Provider\nDESCRIPTION: This React component creates a context and provider for the Circles SDK. It initializes the BrowserProviderContractRunner adapter and the Sdk instance upon mounting using React hooks. It manages the adapter, provider, user address, SDK instance, and connection status, making them available to child components via the context.\n\nDependencies:\n- `react`\n- `@circles-sdk/adapter-ethers`\n- `@circles-sdk/sdk`\n\nInputs:\n- `children`: React nodes to be rendered within the provider.\n\nOutputs:\n- Provides an object via context containing `sdk`, `setIsConnected`, `isConnected`, `adapter`, `circlesProvider`, `circlesAddress`, and `initSdk`.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/tutorials-and-examples/setting-up-circles-sdk-with-react-and-javascript.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { createContext, useState, useEffect, useCallback } from \"react\";\nimport { BrowserProviderContractRunner } from \"@circles-sdk/adapter-ethers\";\nimport { Sdk } from \"@circles-sdk/sdk\";\n\n// Create a context for the Circles SDK\nconst CirclesSDKContext = createContext(null);\n\n// Provider component to wrap around your application\nexport const CirclesSDK = ({ children }) => {\n    const [sdk, setSdk] = useState(null);\n    const [isConnected, setIsConnected] = useState(false);\n    const [adapter, setAdapter] = useState(null);\n    const [circlesProvider, setCirclesProvider] = useState(null);\n    const [circlesAddress, setCirclesAddress] = useState(null);\n\n    // Configuration for the Circles SDK on Gnosis Chain or use the sandbox version\n    const gnosisChainConfig = {\n        circlesRpcUrl: \"https://rpc.aboutcircles.com/\",\n        pathfinderUrl: \"https://pathfinder.aboutcircles.com\",\n        v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n        v2HubAddress: \"0xc12C1E50ABB450d6205Ea2C3Fa861b3B834d13e8\",\n        nameRegistryAddress: \"0xA27566fD89162cC3D40Cb59c87AAaA49B85F3474\",\n        migrationAddress: \"0xD44B8dcFBaDfC78EA64c55B705BFc68199B56376\",\n        profileServiceUrl: \"https://rpc.aboutcircles.com/profiles/\",\n        };\n\n    // Function to initialize the SDK\n    const initSdk = useCallback(async () => {\n        try {\n            const adapter = new BrowserProviderContractRunner();\n            await adapter.init(); // Initialize the adapter before using it\n            \n            setAdapter(adapter); // Set the adapter in the state\n\n            const circlesProvider = adapter.provider;\n            setCirclesProvider(circlesProvider); // Store the provider\n            \n            const circlesAddress = await adapter.address;\n            setCirclesAddress(circlesAddress); // Set the address\n            \n            const sdk = new Sdk(chainConfig, adapter); // Pass the initialized adapter to the SDK\n            setSdk(sdk); // Set the SDK in the state\n            setIsConnected(true); // Update connection status\n        } catch (error) {\n            console.error(\"Error initializing SDK:\", error);\n        }\n    }, []);\n\n    useEffect(() => {\n        initSdk(); // Call initSdk when the component mounts\n    }, [initSdk]);\n\n    // Provide the SDK context to child components\n    return (\n        <CirclesSDKContext.Provider value={{\n            sdk,\n            setIsConnected,\n            isConnected,\n            adapter,\n            circlesProvider,\n            circlesAddress,\n            initSdk,\n        }}>\n            {children}\n        </CirclesSDKContext.Provider>\n    );\n};\n\nexport default CirclesSDKContext;\n```\n\n----------------------------------------\n\nTITLE: Querying Trust Relations with getTrustRelations in TypeScript\nDESCRIPTION: Fetches all current (not expired or removed) trust relations associated with an avatar, paginated using CirclesQuery. Requires CirclesData instance, avatar address, and page size. Each row represents a single event. Results output to console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst trustsQuery = data.getTrustRelations(\"0x...\", 25);\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n   console.log(\"No trust events yet\");\n   return;\n}\n\nconst rows = query.currentPage.results;\nrows.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Initializing Circles Constructor - TypeScript\nDESCRIPTION: This TypeScript code defines the constructor function for a class, likely within the Circles SDK. The constructor takes a `SdkContractRunner` instance and an optional `CirclesConfig` object. The `SdkContractRunner` is responsible for signing and submitting transactions, while the `CirclesConfig` stores chain-specific configurations like contract addresses and RPC endpoints.  The constructor is essential for setting up the internal state of the object when it is instantiated. It takes two parameters: contractRunner and config.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-sdk-interface.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(contractRunner: SdkContractRunner, config?: CirclesConfig)\n```\n\n----------------------------------------\n\nTITLE: Searching Circles Profiles with Multiple Criteria via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet demonstrates how to perform a multi-criteria search on the Circles user profiles API by combining several parameters (name, description, address, CID) in a single GET request. The response includes all profiles matching the intersecting filters specified in the query string, returned as JSON. Requires providing any combination of supported parameters; null values are ignored.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/search?name=John&description=blockchain&address=0x1234567890abcdef&CID=Qm12345abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Querying Aggregated Trust Relations with getAggregatedTrustRelations in TypeScript\nDESCRIPTION: Retrieves a consolidated list of mutual trust relationships for a specified avatar, grouping events into single rows. Requires CirclesData instance and avatar address. Returns an array of TrustRelationRow objects. Iterates and logs each relation.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst trustRelations = await data.getAggregatedTrustRelations(\"0x..\");\ntrustRelations.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for Sdk Class\nDESCRIPTION: This code block imports various modules and interfaces required for the `Sdk` class, including the `Avatar`, `CirclesConfig`, pathfinding and ABI wrappers and data structures used by the Circles SDK.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-sdk-interface.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Avatar } from './avatar';\nimport { CirclesConfig } from './circlesConfig';\nimport { Pathfinder } from './v1/pathfinder';\nimport { AvatarInterface } from './AvatarInterface';\nimport { Hub as HubV1 } from '@circles-sdk/abi-v1';\nimport { DemurrageCircles, Hub as HubV2, InflationaryCircles, NameRegistry } from '@circles-sdk/abi-v2';\nimport { CirclesData, CirclesRpc } from '@circles-sdk/data';\nimport { GroupProfile, Profile, Profiles } from '@circles-sdk/profiles';\nimport { ContractTransactionReceipt } from \"ethers\";\nimport { SdkContractRunner } from \"@circles-sdk/adapter\";\nimport { V2Pathfinder } from \"./v2/pathfinderV2\";\n```\n\n----------------------------------------\n\nTITLE: Updating Avatar Profile and Returning IPFS CID in TypeScript\nDESCRIPTION: This code updates an avatar's profile with new details including name, description, and image URI, then retrieves the IPFS CID of the updated profile from the async updateProfile(newProfile) function. The newProfile object must conform to the Profile interface. Errors in updating are caught and logged. This allows tracking of the updated profile's location in IPFS.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/handle-profile-of-an-avatar.md#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst newProfile: Profile = {\n  name: \"Avatar Name\",\n  description: \"Updated description for the avatar.\",\n  image: \"ipfs://QmYourImageCIDHere\" // Example IPFS image CID\n};\n\ntry {\n  const newCid = await avatar.updateProfile(newProfile);\n  console.log(\"Profile updated successfully. New CID:\", newCid);\n} catch (error) {\n  console.error(\"Error updating profile:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CirclesData with CirclesRpc (Gnosis Chain) in TypeScript\nDESCRIPTION: Creates a CirclesRpc object for the Gnosis Chain and uses it to instantiate CirclesData. Dependencies: CirclesRpc class, CirclesData class. Required parameters: the Gnosis Chain RPC URL. Output: CirclesData instance for Gnosis Chain.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc(\"https://rpc.aboutcircles.com/\");\nconst data = new CirclesData(circlesRpc);\n```\n\n----------------------------------------\n\nTITLE: Querying Groups with findGroups in TypeScript\nDESCRIPTION: Finds Circles groups by name or symbol using a GroupQueryParams object for filters, supporting pagination with CirclesQuery. Requires CirclesData instance, page size, and optional query params specifying filters such as nameStartsWith or symbolStartsWith. Logs each resulting group row.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = data.findGroups(25, {\n  nameStartsWith: \"Test\",\n});\n\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n   console.log(\"No trust events yet\");\n   return;\n}\n\nconst rows = query.currentPage.results;\nrows.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Querying Avatar Information with getAvatarInfo in TypeScript\nDESCRIPTION: Calls getAvatarInfo to fetch basic information about an avatar including signup time, version, type, token address/ID, and profile CID. Requires a CirclesData instance and an avatar address string. Returns an AvatarRow object or undefined. Outputs signup status to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarInfo = await data.getAvatarInfo(\"0x...\");\nif (avatarInfo) {\n   console.log(\"Avatar is signed up at Circles\");\n} else {\n   console.log(\"Avatar is not signed up at Circles\");\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Invitations Sent with getInvitations in TypeScript\nDESCRIPTION: Lists invitations sent by a given avatar, supporting pagination. Requires CirclesData instance, avatar address, and page size. Each row contains timestamp, transactionHash, inviter, and invited fields. Iterates and logs each invitation.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = data.getInvitations(\"0x...\", 25);\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n   console.log(\"No trust events yet\");\n   return;\n}\n\nconst rows = query.currentPage.results;\nrows.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Querying Group Memberships with getGroupMemberships in TypeScript\nDESCRIPTION: Fetches a paginated list of groups an avatar is a member of, returning group, member, and expiryTime fields per row. Requires CirclesData instance, avatar address, and page size. Outputs memberships to the console. Takes advantage of CirclesQuery for pagination.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = data.getGroupMemberships(\"0x...\", 25);\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n   console.log(\"No trust events yet\");\n   return;\n}\n\nconst rows = query.currentPage.results;\nrows.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Getting All Mutual Trust Relations with getAggregatedTrustRelations\nDESCRIPTION: Returns all trust relations of an avatar, grouping mutual trust relations together for easier analysis. It returns a promise resolving to an array of TrustRelationRow objects.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAggregatedTrustRelations(avatarAddress: string): Promise<TrustRelationRow[]>\n```\n\n----------------------------------------\n\nTITLE: Defining Sdk Class\nDESCRIPTION: This code defines the `Sdk` class which implements the `SdkInterface`. The `Sdk` class is the main entry point for interacting with the Circles protocol. The constructor takes a `SdkContractRunner` and an optional `CirclesConfig` as parameters, initializing various internal properties such as contract wrappers, data clients, and configuration settings. It encapsulates core functions like avatar retrieval and profile management.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-sdk-interface.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Wraps a contract runner with its address.\n */\n/**\n * The SDK provides a high-level interface to interact with the Circles protocol.\n */\nexport declare class Sdk implements SdkInterface {\n    /**\n     * The signer used to sign transactions.\n     */\n    readonly contractRunner: SdkContractRunner;\n    /**\n     * The chain specific Circles configuration.\n     */\n    readonly circlesConfig: CirclesConfig;\n    /**\n     * The Circles RPC client.\n     */\n    readonly circlesRpc: CirclesRpc;\n    /**\n     * The Circles data client.\n     */\n    readonly data: CirclesData;\n    /**\n     * The typechain generated V1 hub contract wrapper.\n     */\n    readonly v1Hub: HubV1;\n    /**\n     * The typechain generated V2 hub contract wrapper.\n     */\n    readonly v2Hub?: HubV2;\n    /**\n     * The typechain generated NameRegistry contract wrapper.\n     */\n    readonly nameRegistry?: NameRegistry;\n    /**\n     * The pathfinder client (v1).\n     */\n    readonly v1Pathfinder?: Pathfinder;\n    /**\n     * The pathfinder client (v2).\n     */\n    readonly v2Pathfinder: V2Pathfinder;\n    /**\n     * The profiles service client.\n     */\n    readonly profiles?: Profiles;\n    /**\n     * Creates a new SDK instance.\n     * @param contractRunner A contract runner instance and its address.\n     * @param config The optional chain specific Circles configuration.\n     */\n    constructor(contractRunner: SdkContractRunner, config?: CirclesConfig);\n    /**\n     * Gets an avatar by its address.\n     * @param avatarAddress The avatar's address.\n     * @param subscribe Whether to subscribe to avatar events.\n     * @returns The avatar instance.\n     * @throws If the given avatar address is not signed up at Circles.\n     */\n    getAvatar: (avatarAddress: string, subscribe?: boolean) => Promise<Avatar>;\n    /**\n     * Creates or updates a profile and registers its CID in the NameRegistry.\n     *\n     * @param {Profile | string} profile - The profile information or profile ID to be created or updated.\n     * @returns {Promise<ContractTransactionReceipt>} - A promise that resolves to the transaction receipt.\n     * @throws {Error} - Throws an error if the Profiles service or NameRegistry is not configured,\n     *                   or if the transaction fails.\n     */\n    createOrUpdateProfile: (profile: Profile | string) => Promise<ContractTransactionReceipt>;\n    /**\n     * Registers the connected wallet as a human avatar.\n     * @returns The avatar instance.\n     */\n    registerHuman: () => Promise<AvatarInterface>;\n    /**\n     * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n     * Specify who invited you and supply the profile you want to use with your new account.\n     * @param inviter The address of the avatar that invited you.\n     * @param cidV0 The CIDv0 of the avatar's ERC1155 token metadata.\n     */\n    acceptInvitation(inviter: string, cidV0: string): Promise<AvatarInterface>;\n    /**\n     * If you have been invited to Circles, you can accept the invitation and join the Circles network.\n     * @param inviter The address of the avatar that invited you.\n     * @param profile The profile data of the avatar.\n     */\n    acceptInvitation(inviter: string, profile: Profile): Promise<AvatarInterface>;\n    private _registerHuman;\n    /**\n     * Checks if the profile argument is a string or a Profile object and creates the profile if necessary.\n     * If the profile is a string, it must be a CIDv0 string (Qm...).\n     * @param profile The profile data or CIDv0 of the avatar.\n     * @private\n     */\n    private createProfileIfNecessary;\n    /**\n     * Registers the connected wallet as an organization avatar.\n     * @returns The avatar instance.\n     */\n    registerOrganization: () => Promise<AvatarInterface>;\n    /**\n     * Registers the connected wallet as an organization avatar in Circles v2.\n     * @param profile The profile data of the organization.\n     */\n    registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;\n    /**\n     * Registers the connected wallet as a group avatar in Circles v2.\n     * @param mint The address of the minting policy contract to use.\n     * @param profile The profile data of the group.\n     */\n    registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;\n    private waitForAvatarInfo;\n    /**\n     * Migrates a v1 avatar and all its Circles holdings to v2.\n     * @param avatar The avatar's address.\n     * @param profile The profile data of the avatar.\n     */\n    /**\n     * Migrates a v1 avatar and all its Circles holdings to v2.\n     * @param avatar The avatar's address.\n     * @param profile The profile data of the avatar.\n     * @param trustRelations An optional list of trust relations to migrate.\n     */\n    migrateAvatar: (avatar: string, profile: Profile, trustRelations?: string[]) => Promise<void>;\n    /**\n     * Migrates all V1 token holdings of an avatar to V2 using batch transactions.\n     * @param avatar The avatar whose tokens to migrate.\n     * @param tokens An optional list of token addresses to migrate. If not provided, all tokens will be migrated.\n     * @param batch An optional batch transaction to add transactions to.\n     */\n    migrateV1TokensBatch: (avatar: string, tokens?: string[], batch?: any) => Promise<void>;\n    /**\n     * Migrates all V1 token holdings of an avatar to V2.\n     * @param avatar The avatar whose tokens to migrate.\n     * @param tokens An optional list of token addresses to migrate. If not provided, all tokens will be migrated.\n     */\n    migrateV1Tokens: (avatar: string, tokens?: string[]) => Promise<void>;\n    getInflationaryWrapper: (wrapperAddress: string) => Promise<InflationaryCircles>;\n    getDemurragedWrapper: (wrapperAddress: string) => Promise<DemurrageCircles>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Inviter with getInvitedBy in TypeScript\nDESCRIPTION: Retrieves the address of the inviter for a specified avatar, or undefined if not invited. Requires CirclesData instance and avatar address. Returns string or undefined. Outputs only the result of getInvitedBy.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst invitedBy = await data.getInvitedBy(\"0x...\");\n```\n\n----------------------------------------\n\nTITLE: Getting Group Memberships of an Avatar with getGroupMemberships\nDESCRIPTION: Fetches groups that an avatar belongs to, with pagination support. Returns a CirclesQuery of GroupMembershipRow objects for group membership management.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetGroupMemberships(avatar: string, pageSize: number): CirclesQuery<GroupMembershipRow>\n```\n\n----------------------------------------\n\nTITLE: Trusting Group Member - TypeScript\nDESCRIPTION: This snippet demonstrates how to invite a new member to a group by trusting their 'AvatarAddress'. The `groupAvatar.trust()` function is called with the user's avatar address as a parameter. The function is asynchronous, and the returned receipt will contain details of the transaction. The user's token is used as collateral. The only dependency is the 'groupAvatar' object, which must be initialized with the group's avatar address.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/managing-group-invites.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst trustReceipt = await groupAvatar.trust(\"AvatarAddress\");\nconsole.log(receipt);\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Member from Group - TypeScript\nDESCRIPTION: This snippet demonstrates the removal of a member from a group by 'untrusting' their 'AvatarAddress'.  The `groupAvatar.untrust()` function is called with the user's avatar address. The function is asynchronous, and the returned `receipt` will contain transaction details. The primary dependency is the initialized 'groupAvatar' object, linked to the group's avatar address.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/managing-group-invites.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```typescript\nconst trustReceipt = await groupAvatar.untrust(\"AvatarAddress\");\nconsole.log(receipt);\n```\n```\n\n----------------------------------------\n\nTITLE: Querying Mintable Amount with Avatar - TypeScript\nDESCRIPTION: This snippet demonstrates how to asynchronously query the maximum amount of CRC tokens that an avatar can mint at a given time using the getMintableamount method. Requires an instantiated avatar object with the appropriate user context, and all necessary libraries for blockchain interaction. No input parameters are required. The output is a numeric value indicating the amount of tokens available to mint, constrained to a maximum of 24 tokens per day for human avatars.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/mint-personal-tokens.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst mintableToken = await avatar.getMintableamount();\n```\n\n----------------------------------------\n\nTITLE: Batch Fetching Multiple Avatars Info with getAvatarInfos\nDESCRIPTION: Retrieves information for multiple avatars by their addresses, returning an array of AvatarRow objects. Useful for bulk profile data retrieval.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAvatarInfos(avatars: string[]): Promise<AvatarRow[]>\n```\n\n----------------------------------------\n\nTITLE: Declaring SdkInterface\nDESCRIPTION: This code block declares an interface, `SdkInterface`, that defines the public methods available in the Circles SDK. It includes methods for getting avatars, registering avatars (human, organization, group), profile management, and migrating avatars and tokens, and accessing various contract and data service instances.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-sdk-interface.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * The SDK interface.\n */\ninterface SdkInterface {\n    /**\n     * The signer used to sign transactions (connected wallet e.g. MetaMask).\n     */\n    contractRunner: SdkContractRunner;\n    /**\n     * The chain specific Circles configuration (contract addresses and rpc endpoints).\n     */\n    circlesConfig: CirclesConfig;\n    /**\n     * A configured instance of the CirclesData class, an easy-to-use wrapper around\n     * the Circles RPC Query API.\n     */\n    data: CirclesData;\n    /**\n     * An instance of the typechain generated Circles V1 Hub contract wrapper.\n     */\n    v1Hub: HubV1;\n    /**\n     * An instance of the typechain generated Circles V2 Hub contract wrapper.\n     */\n    v2Hub?: HubV2;\n    /**\n     * An instance of the v1 Pathfinder client (necessary for transfers; only available on gnosis chain with v1 Circles at the moment).\n     */\n    v1Pathfinder?: Pathfinder;\n    /**\n     * An instance of the v2 Pathfinder client.\n     */\n    v2Pathfinder?: V2Pathfinder;\n    /**\n     * Stores and retrieves profiles from the Circles profile service.\n     */\n    profiles?: Profiles;\n    /**\n     * Gets an Avatar instance by its address. Fails if the avatar is not signed up at Circles.\n     * @param avatarAddress The avatar's address.\n     * @returns The Avatar instance.\n     */\n    getAvatar: (avatarAddress: string) => Promise<Avatar>;\n    /**\n     * Registers the connected wallet as a human avatar in Circles v1.\n     * @returns The Avatar instance.\n     */\n    registerHuman: () => Promise<AvatarInterface>;\n    /**\n     * Registers the connected wallet as an organization avatar in Circles v1.\n     */\n    registerOrganization: () => Promise<AvatarInterface>;\n    /**\n     * Registers the connected wallet as an organization avatar in Circles v2.\n     * @param profile The profile data of the organization.\n     */\n    registerOrganizationV2: (profile: Profile) => Promise<AvatarInterface>;\n    /**\n     * Registers the connected wallet as a group avatar in Circles v2.\n     * @param mint The address of the minting policy contract to use.\n     * @param profile The profile data of the group.\n     */\n    registerGroupV2: (mint: string, profile: GroupProfile) => Promise<AvatarInterface>;\n    /**\n     * Migrates a v1 avatar and all its Circles holdings to v2.\n     * [[ Currently only works for human avatars. ]]\n     * @param avatar The avatar's address.\n     * @param profile The profile data of the avatar.\n     * @trustRelations An optional list of trust relations to migrate.\n     */\n    migrateAvatar: (avatar: string, profile: Profile, trustRelations?: string[]) => Promise<void>;\n    /**\n     * Creates or updates a user profile.\n     *\n     * @param {Profile | string} profile - Profile object containing user information or a CID pointing to an existing profile.\n     * @returns {Promise<ContractTransactionReceipt>} - A promise that resolves to the transaction receipt of the operation.\n     */\n    createOrUpdateProfile: (profile: Profile | string) => Promise<ContractTransactionReceipt>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Token Information with getTokenInfo in TypeScript\nDESCRIPTION: Calls getTokenInfo to fetch metadata about a given Circles token, including creation time, version, type, and creator address. Requires a CirclesData instance and token ID string. Returns a TokenInfoRow object or undefined. Outputs token verification status to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokenInfo = await data.getTokenInfo(\"0x...\");\nif (tokenInfo) {\n   console.log(\"Token is a Circles token\");\n} else {\n   console.log(\"Token is not a Circles token\");\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Connected Wallet as Organization Avatar in Circles SDK with TypeScript\nDESCRIPTION: Registers the connected wallet as an organization avatar in Circles V1. This asynchronous method returns a Promise resolving to an AvatarInterface representing the organization avatar. It requires no parameters and provides organization-level identity within Circles.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nregisterOrganization: () => Promise<AvatarInterface>\n```\n\n----------------------------------------\n\nTITLE: Getting Trust Relations with getTrustRelations\nDESCRIPTION: Retrieves current incoming and outgoing trust relationships for a given avatar, limited by page size. It returns a CirclesQuery of TrustListRow objects representing trust connections.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTrustRelations(avatar: string, pageSize: number): CirclesQuery<TrustListRow>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Circles Profile by CID via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet retrieves a user profile from the Circles platform using the profile's Content Identifier (CID) via a GET request. The request is sent to the appropriate endpoint with the CID as a URL parameter. It returns the user profile JSON if found, otherwise, an error. Only a valid CID is required as input.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/get?cid=Qm12345abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Searching Circles Profiles by CID via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet illustrates searching for user profiles using the Content Identifier (CID) as a query parameter with a GET request. The endpoint returns JSON results consisting of all profiles matching the given CID. Requires a CID as input.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/search?CID=Qm12345abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Searching Circles Profiles by Description via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet shows how to find user profiles containing a specific description using a GET request. The 'description' parameter is used to filter profiles, and matching entries are returned as JSON. Requires a description query string as input; the endpoint may match partial descriptions.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/search?description=Circles\"\n```\n\n----------------------------------------\n\nTITLE: Searching Circles Profiles by Wallet Address via Nethermind Plugin (Bash)\nDESCRIPTION: This example demonstrates how to search for user profiles associated with a specific wallet address by making a GET request to the appropriate endpoint. The profile results are filtered by the 'address' parameter, and the response contains those matching the provided Ethereum address in JSON format.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/search?address=0x1234567890abcdef\"\n```\n\n----------------------------------------\n\nTITLE: Defining CirclesEvent types in TypeScript\nDESCRIPTION: Lists the possible TypeScript types for `CirclesEvent` objects emitted or returned by the Circles SDK methods like `subscribeToEvents` and `getEvents`. Events are categorized by CrcV1 and CrcV2 protocol versions and include base properties common to all events (`$event`, `blockNumber`, `timestamp`, `transactionIndex`, `logIndex`, `transactionHash`).\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type CirclesEvent =\n\n// CrcV1 Events\n\n| CrcV1_HubTransfer\n| CrcV1_Signup\n| CrcV1_OrganizationSignup\n| CrcV1_Trust\n| CrcV1_Transfer\n\n// CrcV2 Events\n\n | CrcV2_InviteHuman\n | CrcV2_PersonalMint\n | CrcV2_RegisterGroup\n | CrcV2_RegisterHuman\n | CrcV2_RegisterOrganization\n | CrcV2_Stopped\n | CrcV2_Trust\n | CrcV2_TransferSingle\n | CrcV2_Erc20WrapperTransfer\n | CrcV2_Erc20WrapperDeployed\n | CrcV2_URI\n | CrcV2_ApprovalForAll\n | CrcV2_TransferBatch\n | CrcV2_RegisterShortName\n | CrcV2_UpdateMetadataDigest\n | CrcV2_CidV0\n | CrcV2_StreamCompleted\n | CrcV2_CreateVault\n | CrcV2_GroupMintSingle\n | CrcV2_GroupMintBatch\n | CrcV2_GroupRedeem\n | CrcV2_GroupRedeemCollateralReturn\n | CrcV2_GroupRedeemCollateralBurn\n | CrcV2_DepositDemurraged\n | CrcV2_DepositInflationary\n | CrcV2_WithdrawDemurraged\n | CrcV2_WithdrawInflationary\n```\n\n----------------------------------------\n\nTITLE: Preparing Profile Picture with Canvas Resizing and Compression in TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to load an image from a FileReader result, resize and crop it to 256x256 pixels using an offscreen canvas, and compress it to JPEG format with a quality factor of 0.5. It then checks if the resulting base64-encoded data URL exceeds the 150 KB size limit, issuing a warning if so. This process ensures the profile picture meets Circles' server requirements for format, dimensions, encoding, and size.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-profiles.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n  const img = new Image();\n        img.src = reader.result as string;\n        img.onload = () => {\n          const canvas = document.createElement('canvas');\n          const ctx = canvas.getContext('2d');\n          const cropWidth = 256;\n          const cropHeight = 256;\n\n          if (ctx) {\n            canvas.width = cropWidth;\n            canvas.height = cropHeight;\n\n            ctx.drawImage(img, 0, 0, cropWidth, cropHeight);\n\n            const imageDataUrl = canvas.toDataURL('image/jpeg', 0.5);\n\n            if (imageDataUrl.length > 150 * 1024) {\n              console.warn('Image size exceeds 150 KB after compression');\n            }\n\n```\n\n----------------------------------------\n\nTITLE: Using predefined CirclesConfig object for production\nDESCRIPTION: This snippet demonstrates importing the hardcoded production configuration from the Circles SDK, simplifying the process of connecting your dApp to Circles on Gnosis Chain mainnet by using the built-in configuration object.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { circlesConfig } from '@circles-sdk/sdk';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Circles Profiles by CIDs via Nethermind Plugin (Bash)\nDESCRIPTION: This example shows how to fetch multiple user profiles from Circles using their CIDs in a single batch GET request. The endpoint expects a comma-separated list of CIDs as a query parameter. It returns an array of user profiles in JSON format corresponding to the provided CIDs. Requires a valid list of CIDs.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/getBatch?cids=Qm12345abcdef,Qm678bbdj\n```\n\n----------------------------------------\n\nTITLE: Defining Profile Schema for Circles Metadata Using JSON\nDESCRIPTION: This JSON schema defines the structure and validation rules for Circles user profiles stored in token metadata. It requires a \"name\" string (max length 36) and optionally includes \"description\", \"previewImageUrl\", and \"imageUrl\" fields with constraints on length and format. The \"previewImageUrl\" must be a base64-encoded data URL for an image in PNG, JPEG, or GIF format. The schema prohibits additional properties to enforce strict data conformity.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-profiles.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"type\": \"string\",\n      \"maxLength\": 36,\n      \"description\": \"The name of the profile owner\"\n    },\n    \"description\": {\n      \"type\": \"string\",\n      \"maxLength\": 500,\n      \"description\": \"A description of the profile\"\n    },\n    \"previewImageUrl\": {\n      \"type\": \"string\",\n      \"format\": \"data-url\",\n      \"pattern\": \"^data:image\\\\/(png|jpeg|jpg|gif);base64,\",\n      \"description\": \"A base64-encoded image data URL for the profile preview\"\n    },\n    \"imageUrl\": {\n      \"type\": \"string\",\n      \"maxLength\": 2000,\n      \"description\": \"A URL pointing to the profile image\"\n    }\n  },\n  \"required\": [\"name\"],\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example configuration object for production Circles SDK deployment\nDESCRIPTION: An explicit example of the configuration object adhering to the CirclesConfig type, listing essential URLs and contract addresses for connecting to the Circles protocol on Gnosis Chain mainnet.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const GnosisChainConfig: CirclesConfig = {\n    circlesRpcUrl: \"https://rpc.aboutcircles.com/\",\n    pathfinderUrl: \"https://pathfinder.aboutcircles.com\",\n    v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n    v2HubAddress: \"0xc12C1E50ABB450d6205Ea2C3Fa861b3B834d13e8\",\n    nameRegistryAddress: \"0xA27566fD89162cC3D40Cb59c87AAaA49B85F3474\",\n    migrationAddress: \"0xD44B8dcFBaDfC78EA64c55B705BFc68199B56376\",\n    profileServiceUrl: \"https://rpc.aboutcircles.com/profiles/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Query with Computed Columns in TypeScript\nDESCRIPTION: This code creates a `CirclesQuery` instance with the calculated columns and then executes the query. The `calculatedColumns` array is passed as the third argument to the CirclesQuery constructor. This ensures that the computed column function is executed for each row in a page.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = new CirclesQuery<MyGroupType>(circlesRpc, queryDefinition, calculatedColumns);\n\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n  console.log(\"The query yielded no results.\");\n} else {\n  const rows = query.currentPage.results;\n  rows.forEach(row => console.log(row));\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Circles Profiles by Name via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet demonstrates how to search user profiles where the name matches a specific query using a GET request and a 'name' URL parameter. The endpoint filters profiles by name and returns matching results in JSON format. Requires a non-empty 'name' string; pagination or result limits are not shown.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \"https://rpc.aboutcircles.com/profiles/search?name=John\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to events for a specific Avatar in TypeScript\nDESCRIPTION: Explains how to subscribe to real-time Circles protocol events filtered for a specific avatar address using the `subscribeToEvents` method of an initialized `CirclesData` instance. The provided callback function receives `CirclesEvent` objects as they occur.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarEvents = await data.subscribeToEvents(\"0x...\");\navatarEvents.subscribe(event => {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing to all Circles events in TypeScript\nDESCRIPTION: Demonstrates subscribing to all Circles protocol events without filtering by avatar. The accompanying text suggests calling `subscribeToEvents` without an address argument for this functionality, although the provided code snippet includes an address parameter. A callback logs each received `CirclesEvent`.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarEvents = await data.subscribeToEvents(\"0x...\");\navatarEvents.subscribe(event => {\n    console.log(event);\n});\n```\n\n----------------------------------------\n\nTITLE: Querying past Avatar events from a specific block to latest in TypeScript\nDESCRIPTION: Shows how to query historical events for an avatar starting from a specific `fromBlock` up to the latest available block. This is achieved by calling the `getEvents` method and omitting the optional `toBlock` parameter. Requires an initialized `CirclesData` instance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarEvents = await data.getEvents(\"0x..\", 10000000);\n```\n\n----------------------------------------\n\nTITLE: Querying past Avatar events within a block range in TypeScript\nDESCRIPTION: Demonstrates querying historical events for a specific avatar address within a defined block range (from `fromBlock` to `toBlock`) using the asynchronous `getEvents` method. Requires an initialized `CirclesData` instance and the avatar address.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarEvents = await data.getEvents(\"0x..\", 9000000, 10000000);\n```\n\n----------------------------------------\n\nTITLE: Initializing CirclesData via SDK Instance in TypeScript\nDESCRIPTION: Instantiates the CirclesData class using a configured Sdk instance by accessing the sdk.data property. Requires a previously configured Sdk object. Returns a CirclesData instance for querying Circles blockchain data. Input: Sdk instance. Output: CirclesData instance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = sdk.data;\n```\n\n----------------------------------------\n\nTITLE: Initializing CirclesData with an alternative RPC endpoint in TypeScript\nDESCRIPTION: Shows initializing `CirclesData` using a different, potentially custom or self-hosted, Circles RPC endpoint. This allows connecting to alternative network infrastructure. Requires the `CirclesRpc` and `CirclesData` classes.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc(\"https://static.94.138.251.148.clients.your-server.de/rpc/\");\nconst data = new CirclesData(circlesRpc);\n```\n\n----------------------------------------\n\nTITLE: Querying Total Balance with getTotalBalance and getTotalBalanceV2 in TypeScript\nDESCRIPTION: Calls getTotalBalance methods to fetch the total Circles balance (personal and group tokens) for a given avatar in both v1 and v2 protocol versions. Requires a CirclesData instance and avatar address string. Returns stringified floating-point or bigint (optional parameter asTimeCircles) values representing balances.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst totalBalanceV1 = await data.getTotalBalance(\"0x...\");\nconst totalBalanceV2 = await data.getTotalBalanceV2(\"0x...\");\n```\n\n----------------------------------------\n\nTITLE: Getting Total CRC V1 Balance of an Address with getTotalBalance\nDESCRIPTION: Fetches the total CRC V1 balance for a specific avatar address. This method requires the avatar address and optionally allows the balance to be returned as TimeCircles. It returns a promise resolving to a string representing the balance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTotalBalance(avatar: string, asTimeCircles?: boolean): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining GroupQueryParams Interface in TypeScript\nDESCRIPTION: Defines the structure for parameters that can be passed into the findGroups method. Allows optional filtering and sorting by group name, symbol, specified addresses, and ordering. No dependencies required beyond TypeScript. Used as an argument to the findGroups method.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface GroupQueryParams {\n  nameStartsWith?: string;\n  symbolStartsWith?: string;\n  groupAddressIn?: string[];\n  sortBy?: 'age_asc' | 'age_desc' | 'name_asc' | 'name_desc' | 'symbol_asc' | 'symbol_desc';\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Transaction History with getTransactionHistory in TypeScript\nDESCRIPTION: Executes a paginated query for all incoming and outgoing Circles transactions related to a given avatar (inclusive of minting, transfers, and both protocol versions). Requires CirclesData instance, avatar address, and page size. Uses CirclesQuery to fetch and iterate results. Outputs each transaction row to console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-data.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst query = data.getTransactionHistory(\"0x...\", 25);\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n   console.log(\"No transactions yet\");\n   return;\n}\n\nconst rows = query.currentPage.results;\nrows.forEach(row => console.log(row));\n```\n\n----------------------------------------\n\nTITLE: Fetching Invitations with getInvitations\nDESCRIPTION: Retrieves invitations sent by a specific avatar, limited by page size. Returns a CirclesQuery of InvitationRow objects, useful for managing received invites.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInvitations(avatar: string, pageSize: number): CirclesQuery<InvitationRow>\n```\n\n----------------------------------------\n\nTITLE: Accepting Circles Invitation with Implicit Profile Creation (TypeScript)\nDESCRIPTION: Explains an alternative way to accept a Circles invitation when you don't have a pre-existing CID. You provide profile details (like a name) directly to the SDK, which then implicitly creates and pins the profile using the Circles pinning service. Requires the inviter's address and profile data. Returns the new avatar object.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/inviting-and-accepting-human-avatars.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = await sdk.acceptInvitation(inviterAddress, {\n    name: \"My profile name\"\n});\nconsole.log(avatar.avatarInfo);\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Metadata with getTokenInfo\nDESCRIPTION: Provides detailed information about a token identified by its address, returning a TokenInfoRow or undefined if missing. Useful for token validation and data display.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTokenInfo(address: string): Promise<TokenInfoRow | undefined>\n```\n\n----------------------------------------\n\nTITLE: Getting Total CRC V2 Balance with getTotalBalanceV2\nDESCRIPTION: Retrieves the total CRC V2 balance for a specified avatar address. Similar to getTotalBalance, it accepts an optional parameter to return the balance as TimeCircles and yields a promise with a string balance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTotalBalanceV2(avatar: string, asTimeCircles?: boolean): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Extending Row Type with Computed Column in TypeScript\nDESCRIPTION: This code extends the previously defined `MyGroupType` with an optional `cidV0` property to store the computed CID value.  The new column must be added to the custom type to be accessible. The `cidV0` property represents the computed CID value in `Qm..` format.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyGroupType extends EventRow {\n  avatar: string;\n  name: string;\n  cidV0Digest?: string;\n  cidV0?: string\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Avatar Profile in TypeScript\nDESCRIPTION: This snippet asynchronously fetches the current profile associated with an avatar instance, returning the profile object if it exists, or undefined otherwise. It includes error handling to catch and log issues during the retrieval process. Requires an avatar object with a getProfile() method that returns a Promise resolving to a profile or undefined.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/handle-profile-of-an-avatar.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntry {\n  const profile = await avatar.getProfile();\n  if (profile) {\n    console.log(\"Avatar Profile:\", profile);\n  } else {\n    console.log(\"No profile associated with this avatar.\");\n  }\n} catch (error) {\n  console.error(\"Error retrieving profile:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Using sandbox environment configuration for local development\nDESCRIPTION: This snippet changes the configuration addresses to sandbox contracts, enabling developers to test the SDK mechanic without deploying to mainnet. Only the addresses need updating in your codebase.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const circlesConfig: CirclesConfig = {\n    circlesRpcUrl: \"https://static.94.138.251.148.clients.your-server.de/rpc/\",\n    v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n    v2HubAddress: \"0x3D61f0A272eC69d65F5CFF097212079aaFDe8267\",\n    migrationAddress: \"0x28141b6743c8569Ad8B20Ac09046Ba26F9Fb1c90\",\n    nameRegistryAddress: \"0x8D1BEBbf5b8DFCef0F7E2039e4106A76Cb66f968\",\n    baseGroupMintPolicy: \"0x79Cbc9C7077dF161b92a745345A6Ade3fC626A60\",\n    profileServiceUrl: \"https://static.94.138.251.148.clients.your-server.de/profiles/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Updating Avatar Metadata with IPFS CID in TypeScript\nDESCRIPTION: This snippet updates an avatar's metadata by uploading a new IPFS content identifier (CID). It calls the asynchronous updateMetadata(cid) method on the avatar object and logs the transaction receipt upon success. The snippet handles errors by logging them. The CID parameter should be a valid IPFS hash string representing the new metadata content.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/handle-profile-of-an-avatar.md#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// IPFS CID for the new metadata\nconst cid = \"QmYourIPFSCIDHere\";\n\ntry {\n  const receipt = await avatar.updateMetadata(cid);\n  console.log(\"Metadata updated successfully:\", receipt);\n} catch (error) {\n  console.error(\"Error updating metadata:\", error);\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Personal CRC Tokens with Avatar - TypeScript\nDESCRIPTION: This snippet shows how to mint personal CRC tokens using an avatar object by invoking the personalMint method, capturing the mint transaction receipt for confirmation. Requires a prepared avatar instance with sufficient permissions and context; relevant blockchain and Circles dependencies must be installed. No external input parameters are provided, and the output is a transaction receipt logged to the console once minting is successful. Execution is subject to user quota and token constraints.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/mint-personal-tokens.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst mintTransaction = await avatar.personalMint();\nconsole.log('Transaction successful, receipt:', mintTransaction);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Balances from Avatar - Circles API - Typescript\nDESCRIPTION: This snippet shows how to fetch a detailed list of all token balances associated with an avatar within the current context using the `getBalances()` method. It assumes the system has been initialized before this call. The method returns a promise that resolves to an array of `TokenBalanceRow` objects, which are then iterated through to print each token's symbol and balance to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/get-token-balances-of-an-avatar.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst tokenBalances = await avatar.getBalances();\ntokenBalances.forEach((balance) => {\n  console.log(`Token: ${balance.token}, Balance: ${balance.amount}`);\n});\n\n```\n\n----------------------------------------\n\nTITLE: Registering a Legacy Organization in Circles (TypeScript)\nDESCRIPTION: This asynchronous TypeScript function shows how to register an organization in Legacy Circles using the `registerOrganization` method from the SDK. It requires the SDK instance as an argument, attempts the registration, logs the resulting avatar on success, and logs any errors that occur during the process.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/organization-avatars/creation-of-organizations.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst registerLegacyOrganization = async (sdk) => {\n    try {\n        const avatar = await sdk.registerOrganization(); // Call the legacy method\n        console.log('Legacy Organization Avatar:', avatar);\n    } catch (error) {\n        console.error('Error registering legacy organization:', error);\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Computed Columns for CirclesQuery in TypeScript\nDESCRIPTION: This code defines computed columns for the `CirclesQuery`.  A computed column is created that transforms a hex-string `cidV0Digest` to a CID in `Qm..` format if `cidV0Digest` exists for each row. The `hexStringToUint8Array` and `uint8ArrayToCidV0` functions are assumed to be defined elsewhere.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst calculatedColumns = [{\n  name: 'cidV0',\n  generator: async (row: MyGroupType) => {\n    if (!row.cidV0Digest) {\n      return undefined;\n    }\n\n    const dataFromHexString = hexStringToUint8Array(row.cidV0Digest.substring(2));\n    return uint8ArrayToCidV0(dataFromHexString);\n  }\n}];\n```\n\n----------------------------------------\n\nTITLE: Defining Circles SDK configuration for RINGS sandbox environment\nDESCRIPTION: This snippet provides the configuration to connect to the sandbox version of Circles protocol, useful for testing and development purposes with dummy or testnet contract addresses.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport const circlesConfig: CirclesConfig = {\n    circlesRpcUrl: \"https://static.94.138.251.148.clients.your-server.de/rpc/\",\n    v1HubAddress: \"0x29b9a7fbb8995b2423a71cc17cf9810798f6c543\",\n    v2HubAddress: \"0x3D61f0A272eC69d65F5CFF097212079aaFDe8267\",\n    migrationAddress: \"0x28141b6743c8569Ad8B20Ac09046Ba26F9Fb1c90\",\n    nameRegistryAddress: \"0x8D1BEBbf5b8DFCef0F7E2039e4106A76Cb66f968\",\n    baseGroupMintPolicy: \"0x79Cbc9C7077dF161b92a745345A6Ade3fC626A60\",\n    profileServiceUrl: \"https://static.94.138.251.148.clients.your-server.de/profiles/\",\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CirclesData Instance\nDESCRIPTION: Creates a new instance of `CirclesData` using a `CirclesRpc` instance. This alternative initialization allows for more explicit control over the RPC endpoint used by the Circles data layer. The `CirclesRpc` instance needs to be created beforehand.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/find-groups-and-memberships.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc(\"https://chiado-rpc.aboutcircles.com\");\nconst data = new CirclesData(circlesRpc);\n```\n\n----------------------------------------\n\nTITLE: Initializing Circles Data\nDESCRIPTION: Initializes the Circles data property from the SDK. This provides access to the various data-related methods of the Circles system. `sdk` is assumed to be an initialized Circles SDK instance.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/find-groups-and-memberships.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst data = sdk.data\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Row Type extending EventRow in TypeScript\nDESCRIPTION: This code defines a custom row type `MyGroupType` that extends the `EventRow` type. It includes properties for `avatar`, `name`, and an optional `cidV0Digest`. The `EventRow` type contains required fields for pagination such as `blockNumber`, `transactionIndex`, and `logIndex`. This type is used to strongly type the results of the query. It must extend `EventRow` to support pagination.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface MyGroupType extends EventRow {\n  avatar: string;\n  name: string;\n  cidV0Digest?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Minting Group Circles Tokens Using groupMint Function - TypeScript\nDESCRIPTION: Defines and demonstrates usage of the groupMint asynchronous function, which enables a group to mint new Circles tokens by providing an array of collateral token addresses and corresponding BigInt amounts. Requires a group address, arrays of collateral addresses and their amounts, and optionally a Uint8Array data payload; returns a ContractTransactionReceipt promise upon successful transaction. Assumes availability of a circles contract instance, proper Ethereum access, and that the calling account has necessary permissions; input arrays must match in length, and token contracts must support the provided amounts.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/mint-group-tokens.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngroupMint: (\n    group: string, \n    collateral: string[], \n    amounts: bigint[], \n    // data: Uint8Array                                         optional\n) => Promise<ContractTransactionReceipt>;\n\n\nconst groupAddress = '0xYourGroupAddress'; // The address of the group\nconst collateralTokens = ['0xToken1', '0xToken2']; \n// Addresses of the collateral tokens\nconst collateralAmounts = [BigInt(1000), BigInt(2000)]; \n// Corresponding amounts for each token\n\ntry {\n    const receipt = await circles.groupMint(groupAddress, collateralTokens, collateralAmounts);\n\n    console.log('Minting successful:', receipt);\n} catch (error) {\n    console.error('Minting failed:', error);\n```\n\n----------------------------------------\n\nTITLE: Getting Group Memberships by Avatar\nDESCRIPTION: Retrieves all group memberships associated with a specific avatar address using the `getGroupMemberships` method. A `try...catch` block is used to handle potential errors during the data retrieval process. The avatar address and page size are defined before the call. The results are logged to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/find-groups-and-memberships.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatarAddress = '0xYourAvatarAddress'; \n// The address of the avatar\nconst membershipsPageSize = 5; \n// Define the maximum number of memberships to return\n\ntry {\n    const membershipsQueryResult = await circles.getGroupMemberships(avatarAddress, membershipsPageSize);\n    console.log('Retrieved group memberships:', membershipsQueryResult);\n} catch (error) {\n    console.error('Error fetching group memberships:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Circles User Profile via Nethermind Plugin (Bash)\nDESCRIPTION: This snippet demonstrates how to create a new user profile on the Circles platform using a POST request with cURL. The payload includes required fields such as name, description, and image URLs, as well as optional extensions for social networks. Requires a valid endpoint (https://rpc.aboutcircles.com/profiles/pin) and proper JSON formatting. Inputs are user profile fields, and it returns a JSON response with the profile's details or an error.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/query-circles-profiles.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://rpc.aboutcircles.com/profiles/pin\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n           \"name\": \"John Doe\",\n           \"description\": \"A blockchain developer\",\n           \"previewImageUrl\": \"https://example.com/preview.jpg\",\n           \"imageUrl\": \"https://example.com/image.jpg\",\n           \"extensions\": {\n             \"twitter\": \"@johndoe\",\n             \"github\": \"johndoe\"\n           }\n         }'\n```\n\n----------------------------------------\n\nTITLE: Fetching Total Circles Supply in TypeScript\nDESCRIPTION: Defines the TypeScript signature for the `getTotalSupply` method, which returns a Promise resolving to a bigint representing the total supply of Circles for the context avatar. An example demonstrates calling this asynchronous method within a try-catch block to handle potential errors and log the result.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/group-avatars/getting-total-supply-of-group-tokens-available.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetTotalSupply: () => Promise<bigint>;\n\n// Example of calling the getTotalSupply method\ntry {\n    const totalSupply = await circles.getTotalSupply();\n    console.log('Total Circles Supply:', totalSupply.toString());\n} catch (error) {\n    console.error('Error fetching total supply:', error);\n}\n```\n\n----------------------------------------\n\nTITLE: Executing a Query and Accessing Results in TypeScript\nDESCRIPTION: This code executes the query using `queryNextPage()` and accesses the results through the `currentPage.results` property. It checks if the query yielded any results and logs them to the console. The code fetches the results and prints them. The `hasResults` variable indicates whether the query returned any data.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst hasResults = await query.queryNextPage();\nif (!hasResults) {\n  console.log(\"The query yielded no results.\");\n} else {\n  const rows = query.currentPage.results;\n  rows.forEach(row => console.log(row));\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Total Balance from Avatar - Circles API - Typescript\nDESCRIPTION: This snippet demonstrates how to retrieve the total Circles balance for an avatar by calling the `getTotalBalance()` method on the `avatar` object. This method automatically checks and returns the balance from either the v1 or v2 Circles version depending on the avatar's configuration. The fetched balance is then printed to the console.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/get-token-balances-of-an-avatar.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst totalBalance = await avatar.getTotalBalance();\nconsole.log(`Total Circles balance: ${totalBalance}`);\n```\n\n----------------------------------------\n\nTITLE: Getting an Avatar Instance using Circles SDK in TypeScript\nDESCRIPTION: Retrieves an Avatar instance by its wallet address asynchronously. It returns a Promise resolving to an Avatar object. An optional subscribe parameter allows subscribing to avatar events. The method requires a valid avatarAddress string representing the wallet address. Useful for accessing avatar-related data or actions.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAvatar: (avatarAddress: string, subscribe?: boolean) => Promise<Avatar>\n```\n\n----------------------------------------\n\nTITLE: Getting Inflationary Wrapper for Token Management in Circles SDK using TypeScript\nDESCRIPTION: Retrieves an inflationary wrapper instance used to manage tokens that may increase in supply or value. Requires the wrapper contract address. Returns a Promise resolving to an InflationaryCircles instance. This facilitates advanced token management features.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInflationaryWrapper: (wrapperAddress: string) => Promise<InflationaryCircles>\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a User Profile in Circles SDK using TypeScript\nDESCRIPTION: Creates or updates a user profile which can be either a Profile object or a CID string referencing stored profile data. Returns a Promise resolving to a ContractTransactionReceipt, indicating blockchain transaction confirmation. This method underlies profile management within Circles.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/sdk-methods.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nUpdateProfile: (profile: Profile | string) => Promise<ContractTransactionReceipt>\n```\n\n----------------------------------------\n\nTITLE: Initializing CirclesData for Gnosis Chain in TypeScript\nDESCRIPTION: Demonstrates how to initialize the `CirclesData` class using the official Circles RPC endpoint for the Gnosis Chain. This requires importing and instantiating `CirclesRpc` and `CirclesData` from the Circles SDK.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/subscribing-to-avatar-events.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc(\"https://rpc.aboutcircles.com/\");\nconst data = new CirclesData(circlesRpc);\n```\n\n----------------------------------------\n\nTITLE: Installing Circles SDK and ethers.js via npm\nDESCRIPTION: This snippet provides the command to install the required Circles SDK packages along with ethers v6, necessary for interacting with Ethereum-based smart contracts in a web project.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @circles-sdk/sdk @circles-sdk/data @circles-sdk/utils @circles-sdk/profiles @circles-sdk/adapter-ethers ethers\n```\n\n----------------------------------------\n\nTITLE: Creating a Human Avatar in Circles v2.0 with TypeScript\nDESCRIPTION: Code for inviting a human to the Circles network and accepting an invitation. This requires interaction with the V2 Hub contract and providing either a CID for the profile or profile information to be pinned to the Circles service.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/README.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = await avatar.inviteHuman(inviteeAddress,\"Hk.....\");        //CID required\n\nconst avatar = await sdk.acceptInvitation(inviterAddress,\"Qm.....\");\nconsole.log(avatar.avatarInfo);\n```\n\n----------------------------------------\n\nTITLE: Creating a CirclesRpc instance in TypeScript\nDESCRIPTION: This code creates an instance of the `CirclesRpc` class, providing the Circles RPC URL as a constructor argument.  The `CirclesRpc` instance is used to communicate with the Circles RPC API. The provided URL is the endpoint for accessing the Circles RPC service.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/querying-circles-profiles-and-data/utilising-circlesquery-class.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circlesRpc = new CirclesRpc('https://chiado-rpc.aboutcircles.com');\n```\n\n----------------------------------------\n\nTITLE: Setting up the Adapter for MetaMask and Provider initialization\nDESCRIPTION: This snippet shows initializing the `BrowserProviderContractRunner` adapter, which manages the connection between the Circles SDK and the user's MetaMask wallet, enabling contract interactions through ethers.js.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst adapter = new BrowserProviderContractRunner();\nawait adapter.init();\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Trust Relationships in Circles Protocol with TypeScript\nDESCRIPTION: This function retrieves all trust relationships for the current avatar. It returns an array of trust relations showing which avatars are trusted, which avatars trust the current avatar, and which relationships are mutual.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/manage-trust-connections.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst trustRelations = await avatar.getTrustRelations();\ntrustRelations.forEach\n    (relation => { \n        console.log(${relation.avatar1} ${relation.relation} ${relation.avatar2}); });\n```\n\n----------------------------------------\n\nTITLE: Revoking Trust from an Avatar in Circles Protocol with TypeScript\nDESCRIPTION: This function revokes trust from another avatar, preventing the current avatar from accepting any new Circles tokens issued by the untrusted avatar. Previously received tokens are not affected by this operation.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/manage-trust-connections.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst untrustReceipt = await avatar.untrust(\"AvatarAddress\");\nconsole.log(receipt);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Transaction History via getTransactionHistory\nDESCRIPTION: Fetches the transaction history for an avatar, including incoming, outgoing transactions, and CRC minting activities, limited by specified page size. Returns a CirclesQuery of TransactionHistoryRow objects.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTransactionHistory(avatar: string, pageSize: number): CirclesQuery<TransactionHistoryRow>\n```\n\n----------------------------------------\n\nTITLE: Accepting Invitation with Profile Object in Circles v2.0\nDESCRIPTION: Code showing how to accept an invitation without providing a CID by using a Profile object. This approach implicitly uses the Circles pinning service to pin the profile data.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/README.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = await sdk.acceptInvitation(inviterAddress, {\n    name: \"My profile name\"\n});\nconsole.log(avatar.avatarInfo);\n```\n\n----------------------------------------\n\nTITLE: Initializing the Circles SDK with Adapter and Configuration\nDESCRIPTION: Shows how to create a new instance of the Circles SDK by passing the adapter and the configuration object, enabling interaction with Circles protocol features in your dApp.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/getting-started-with-the-sdk.md#_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sdk = new Sdk(adapter, circlesConfig); \n// or for mainnet: new Sdk(adapter, GnosisChainConfig);\n```\n\n----------------------------------------\n\nTITLE: Checking Trust Status in Circles Protocol with TypeScript\nDESCRIPTION: This function verifies whether the current avatar is trusted by another avatar. It returns a boolean value indicating if the specified avatar is willing to accept Circles tokens issued by the current avatar.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/manage-trust-connections.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst isTrusted = await avatar.isTrustedBy(\"AvatarAddress\");\nconsole.log(isTrusted); // true or false\n```\n\n----------------------------------------\n\nTITLE: Installing the Circles SDK using npm\nDESCRIPTION: This command uses the Node Package Manager (npm) to install the core Circles SDK package (@circles-sdk/sdk). This package is essential for integrating Circles protocol features into a TypeScript-based dApp.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-sdk-overview.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @circles-sdk/sdk\n```\n\n----------------------------------------\n\nTITLE: Checking Mintable CRC Token Amount in Circles v2.0\nDESCRIPTION: Function to query the maximum amount of CRC tokens available for minting at the current time. Human avatars are limited to minting 24 personal Circles tokens per day.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/README.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst mintableToken = await avatar.getMintableamount ()\n```\n\n----------------------------------------\n\nTITLE: Trusting an Avatar in Circles Protocol with TypeScript\nDESCRIPTION: This function establishes a trust relationship with another avatar, allowing the current avatar to accept Circles tokens issued by the trusted avatar. The function returns a receipt of the trust transaction.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/manage-trust-connections.md#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst trustReceipt = await avatar.trust(\"AvatarAddress\");\nconsole.log(receipt);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Circles Events with subscribeToEvents\nDESCRIPTION: Establishes a subscription to Circles events, optionally filtered by a specific avatar, returning an observable stream of CirclesEvent objects. Enables real-time event monitoring.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nsubscribeToEvents(avatar?: string): Promise<Observable<CirclesEvent>>\n```\n\n----------------------------------------\n\nTITLE: Searching for Groups with findGroups\nDESCRIPTION: Retrieves a list of groups matching query parameters, limited by page size. Returns a CirclesQuery of GroupRow objects for group discovery.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nfindGroups(pageSize: number, params?: GroupQueryParams): CirclesQuery<GroupRow>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata CID for an Address with getMetadataCidForAddress\nDESCRIPTION: Gets the metadata CID associated with an address, optionally returning undefined if no CID exists. Useful for retrieving stored off-chain metadata.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetMetadataCidForAddress(address: string): Promise<string | undefined>\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Inviter for an Avatar with getInvitedBy\nDESCRIPTION: Returns the address of the avatar that invited the specified avatar, or undefined if not available, facilitating relationship tracing.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/circles-sdk-reference/circles-data-methods.md#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetInvitedBy(avatar: string): Promise<string | undefined>\n```\n\n----------------------------------------\n\nTITLE: Minting Personal CRC Tokens in Circles v2.0\nDESCRIPTION: Function to mint personal CRC tokens on the Circles network. The function returns a transaction receipt upon successful execution.\nSOURCE: https://github.com/aboutcircles/circles-docs/blob/gitbook/docs/developer-docs/circles-avatars/personal-human-avatars/README.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst mintTransaction = await sdk.personalMint();\nconsole.log('Transaction successful, receipt:', mintTransaction);\n```"
  }
]