[
  {
    "owner": "facebookresearch",
    "repo": "hydra",
    "content": "TITLE: Initializing Basic Hydra Application in Python\nDESCRIPTION: A basic Hydra application setup that prints configuration values. Uses the @hydra.main decorator to inject configuration and OmegaConf for YAML serialization.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/1_simple_cli.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main()\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Configuration in YAML\nDESCRIPTION: Example of a basic Hydra configuration file in YAML format, defining database connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/intro.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n  user: omry\n  pass: secret\n```\n\n----------------------------------------\n\nTITLE: Loading Hydra Configuration in Python\nDESCRIPTION: Python application that loads and prints a Hydra configuration using the @hydra.main decorator with config_path and config_name parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None, config_path=\".\", config_name=\"config\")\ndef my_app(cfg):\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Loading Hydra Configuration in Python\nDESCRIPTION: Python application that loads and prints a Hydra configuration using the @hydra.main decorator with config_path and config_name parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None, config_path=\".\", config_name=\"config\")\ndef my_app(cfg):\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Implementing a Hydra Application with Config Groups\nDESCRIPTION: A Python application that uses Hydra's config groups functionality. The hydra.main decorator specifies the config_path pointing to the conf directory, which contains the config groups.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None, config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Overriding Hydra Configuration Values\nDESCRIPTION: Example showing how to override configuration values via command line arguments.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db.user=root db.password=1234\ndb:\n  driver: mysql\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: Adding and Overriding Configuration with ++\nDESCRIPTION: Shell commands demonstrating how to use the ++ prefix to override existing values or add new configuration items.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Override an existing item\n$ python my_app.py ++db.password=1234\n\n# Add a new item\n$ python my_app.py ++db.timeout=5\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Compose API in Python\nDESCRIPTION: Demonstrates how to initialize Hydra and use the compose API both as a context manager and globally. It shows how to compose a configuration with overrides and print the result.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/compose_api.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra import compose, initialize\nfrom omegaconf import OmegaConf\n\nif __name__ == \"__main__\":\n    # context initialization\n    with initialize(config_path=\"conf\", job_name=\"test_app\"):\n        cfg = compose(config_name=\"config\", overrides=[\"db=mysql\", \"db.user=me\"])\n        print(OmegaConf.to_yaml(cfg))\n\n    # global initialization\n    initialize(config_path=\"conf\", job_name=\"test_app\")\n    cfg = compose(config_name=\"config\", overrides=[\"db=mysql\", \"db.user=me\"])\n    print(OmegaConf.to_yaml(cfg))\n```\n\n----------------------------------------\n\nTITLE: Multiple Default Configs in YAML\nDESCRIPTION: This YAML snippet shows how to specify multiple default configurations in the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/5_defaults.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - db: mysql\n - db/mysql/engine: innodb\n```\n\n----------------------------------------\n\nTITLE: Hydra Main Configuration with Defaults\nDESCRIPTION: Main configuration file that specifies default values for each configuration dimension including database, UI, and schema.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n  - ui: full\n  - schema: school\n```\n\n----------------------------------------\n\nTITLE: Defining PostgreSQL Configuration in YAML for Hydra\nDESCRIPTION: This YAML configuration file specifies the settings for a PostgreSQL database connection, including the driver, user, password, and timeout.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: postgresql\nuser: postgres_user\npassword: drowssap\ntimeout: 10\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration in YAML\nDESCRIPTION: YAML configuration file for PostgreSQL connection that specifies the target class and connection parameters including an additional database parameter. The _target_ key identifies the Python class to instantiate.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.PostgreSQLConnection\nhost: localhost\nuser: root\npassword: 1234\ndatabase: tutorial\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to Use Joblib Launcher\nDESCRIPTION: YAML configuration to override the default Hydra launcher with the Joblib launcher. This can be added to the Hydra configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/joblib_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: joblib\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to Use Joblib Launcher with YAML\nDESCRIPTION: YAML configuration to set Joblib as the default launcher for Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/joblib_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - hydra/launcher: joblib\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration File for Hydra\nDESCRIPTION: YAML configuration file for PostgreSQL database connection settings. It specifies the driver type, username, password, and connection timeout.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: postgresql\nuser: postgres_user\npassword: drowssap\ntimeout: 10\n\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Configuration File for Hydra\nDESCRIPTION: YAML configuration file for PostgreSQL database connection settings. It specifies the driver type, username, password, and connection timeout.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: postgresql\nuser: postgres_user\npassword: drowssap\ntimeout: 10\n\n```\n\n----------------------------------------\n\nTITLE: Specialized Configuration for Cifar10 with Alexnet\nDESCRIPTION: Specialized configuration file that modifies the global configuration when the cifar10 dataset is used with the alexnet model, changing the number of layers to 5.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/specializing_config.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _global_\n\nmodel:\n  num_layers: 5\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Extension with Defaults List in Hydra\nDESCRIPTION: A simple configuration file that includes a MySQL database configuration using the defaults list. This demonstrates the starting point for configuration extension.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/patterns/extending_configs.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql \n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Extending a Base MySQL Configuration in Hydra\nDESCRIPTION: A MySQL configuration file that extends a base MySQL configuration and overrides/adds specific values. This demonstrates extending a config from the same config group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/patterns/extending_configs.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - base_mysql\n\nuser: omry\npassword: secret\nport: 3307\nencoding: utf8\n```\n\n----------------------------------------\n\nTITLE: Implementing Defaults List in Structured Config in Python\nDESCRIPTION: This code demonstrates how to define a defaults list in a Structured Config class that will load 'db=mysql' by default. It shows the configuration of database options and how Hydra populates fields based on the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import MISSING, OmegaConf  # Do not confuse with dataclass.MISSING\n\n@dataclass\nclass MySQLConfig:\n    ...\n\n@dataclass\nclass PostGreSQLConfig:\n    ...\n\ndefaults = [\n    # Load the config \"mysql\" from the config group \"db\"\n    {\"db\": \"mysql\"}\n]\n\n@dataclass\nclass Config:\n    # this is unfortunately verbose due to @dataclass limitations\n    defaults: List[Any] = field(default_factory=lambda: defaults)\n\n    # Hydra will populate this field based on the defaults list\n    db: Any = MISSING\n\ncs = ConfigStore.instance()\ncs.store(group=\"db\", name=\"mysql\", node=MySQLConfig)\ncs.store(group=\"db\", name=\"postgresql\", node=PostGreSQLConfig)\ncs.store(name=\"config\", node=Config)\n\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Running Hydra App with Default and Override Options (YAML)\nDESCRIPTION: This snippet shows the YAML output when running the Hydra app with default MySQL configuration and when overriding it with PostgreSQL via command line.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\ndb:\n  driver: mysql\n  ...\n\n$ python my_app.py db=postgresql\ndb:\n  driver: postgresql\n  ...\n```\n\n----------------------------------------\n\nTITLE: Requiring User-Specified Default List Value in Hydra (Python and YAML)\nDESCRIPTION: This snippet demonstrates how to require users to specify a value for the 'db' option in the defaults list by setting it to MISSING. It also shows the output when running the app without specifying the required value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefaults = [\n    {\"db\": MISSING}\n]\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\nYou must specify 'db', e.g, db=<OPTION>\nAvailable options:\n        mysql\n        postgresql\n```\n\n----------------------------------------\n\nTITLE: Defining Static Schema with Python Dataclasses\nDESCRIPTION: Defines a static configuration schema using Python dataclasses for database configuration. Uses ConfigStore to register the schema and Hydra main decorator to load and validate configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = MISSING\n    user: str = MISSING\n    password: str = MISSING\n\n@dataclass\nclass Config:\n    db: DBConfig = MISSING\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=Config)\n\n@hydra.main(config_path=\"conf\", \n            config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Command Output Example\nDESCRIPTION: Example output when running the application with production database configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db=prod\ndb:\n  driver: mysql\n  host: mysql001.prod\n  user: root\n  password: '1234'\n```\n\n----------------------------------------\n\nTITLE: Creating a Defaults List in Hydra YAML Configuration\nDESCRIPTION: Example of a defaults list in a config.yaml file that specifies which config group options to include. This example includes the 'mysql' option from the 'db' config group and the 'school' option from the 'schema' config group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/terminology.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n  - schema: school\n```\n\n----------------------------------------\n\nTITLE: Main Configuration with Defaults List\nDESCRIPTION: Example of a main configuration file that includes a defaults list referencing a specific agent configuration from the mi6 group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - mi6/agent: james_bond\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration with Package Directive\nDESCRIPTION: Example of a configuration file with a package directive that overrides the default package path for the configuration, specifying 'bond.james' as the package root.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# @package bond.james\ncodename: '007'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Job Logging Override\nDESCRIPTION: Basic configuration file that overrides the default Hydra job logging with a custom configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/logging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/job_logging: custom\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Hydra Logging in YAML\nDESCRIPTION: Basic logging configuration in Hydra showing how to set log levels for different loggers. This example demonstrates setting different verbosity levels for the Hydra logger and the root logger.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.job_logging\nversion: 1\nformatters:\n  simple:\n    format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\nroot:\n  level: INFO\n  handlers: [console]\n\nloggers:\n  hydra:\n    level: DEBUG\n```\n\n----------------------------------------\n\nTITLE: Customizing Hydra Application Logging Format in YAML\nDESCRIPTION: Example of customizing the format of log messages in Hydra. This configuration changes the date format and adds milliseconds to the timestamp in logs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.job_logging\nversion: 1\nformatters:\n  simple:\n    format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'\n    datefmt: '%Y-%m-%d %H:%M:%S.%f'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\nroot:\n  level: INFO\n  handlers: [console]\n```\n\n----------------------------------------\n\nTITLE: Configuring File Logging in Hydra YAML\nDESCRIPTION: Example configuration for logging to a file in Hydra. This setup demonstrates how to direct logs to both console and file outputs with different formatting for each.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.job_logging\nversion: 1\nformatters:\n  simple:\n    format: '[%(asctime)s][%(name)s][%(levelname)s] - %(message)s'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\n  file:\n    class: logging.FileHandler\n    formatter: simple\n    filename: ${hydra.job.name}.log\nroot:\n  level: INFO\n  handlers: [console, file]\n```\n\n----------------------------------------\n\nTITLE: Default Logging Output Example\nDESCRIPTION: Example output showing the default Hydra logging format with timestamp and module name.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/logging.md#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py hydra/job_logging=default\n[2020-08-24 13:43:26,761][__main__][INFO] - Info level message\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with Date Grouping\nDESCRIPTION: YAML configuration for organizing run output directories by date and time.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: ./outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with User Variables\nDESCRIPTION: YAML configuration showing how to include user configuration variables in the output directory path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: outputs/${now:%Y-%m-%d_%H-%M-%S}/opt:${optimizer.type}\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with User Variables\nDESCRIPTION: YAML configuration showing how to include user configuration variables in the output directory path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: outputs/${now:%Y-%m-%d_%H-%M-%S}/opt:${optimizer.type}\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to configure Hydra to copy specific environment variables from the local environment to the running job environment, which is particularly useful for remote runs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/configure_hydra/job.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_copy:\n      - AWS_KEY\n```\n\n----------------------------------------\n\nTITLE: Interpolating Environment Variables in Hydra Configuration (YAML)\nDESCRIPTION: Demonstrates how to access environment variables in Hydra configuration files using the ${oc.env:VARIABLE_NAME} syntax. This approach enables configuration to be customized based on environment variables without modifying the config files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/a/b/junk.txt#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: ${oc.env:SERVER_ADDRESS,localhost}\n  port: ${oc.env:SERVER_PORT,8080}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Environment Variables in Hydra Config (YAML)\nDESCRIPTION: Example of using multiple environment variables in a Hydra configuration file with different default values. This pattern allows for flexible configuration that can be overridden by environment variables at runtime.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/a/b/junk.txt#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  address: ${oc.env:SERVER_ADDRESS,localhost}\n  port: ${oc.env:SERVER_PORT,8080}\n  user: ${oc.env:USERNAME,${oc.env:USER,anonymous}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Working Directory in Python with Hydra\nDESCRIPTION: Shows how to access both the current and original working directories, and demonstrates path conversion utilities provided by Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom omegaconf import DictConfig\nimport hydra\n\n@hydra.main()\ndef my_app(_cfg: DictConfig) -> None:\n    print(f\"Current working directory : {os.getcwd()}\")\n    print(f\"Orig working directory    : {hydra.utils.get_original_cwd()}\")\n    print(f\"to_absolute_path('foo')   : {hydra.utils.to_absolute_path('foo')}\")\n    print(f\"to_absolute_path('/foo')  : {hydra.utils.to_absolute_path('/foo')}\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Printing Modified Configuration in Hydra\nDESCRIPTION: This snippet demonstrates how printing the configuration includes any command line modifications made to the configuration values. It shows how the host parameter is changed via the command line.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db.host=10.0.0.1 --cfg job\ndb:\n  host: 10.0.0.1\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Package Directive Examples in Hydra\nDESCRIPTION: Shows various examples of package directives used in Hydra configuration files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/overriding_packages.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n# @package foo.bar\n# @package _global_\n# @package _group_\n# @package _group_._name_\n# @package foo._group_._name_\n```\n\n----------------------------------------\n\nTITLE: Hydra Output with Default Packages\nDESCRIPTION: The resulting output configuration when using only default packages, showing how config contents are structured in the final output according to their package paths.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  db:\n    name: mysql\n  name: apache\ndebug: false\n```\n\n----------------------------------------\n\nTITLE: Double Quote String Examples in Python\nDESCRIPTION: Examples of double-quoted string usage in Hydra configuration, showing escape sequences and various string formats.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/basic.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"hello there\"\n\"escaped \\\"double quote\\\"\"\n\"the path is C:\\\\\\\"some folder\\\"\\\\\"\n\"1,2,3\"\n\"{a:10} ${xyz}\"\n\"'single quoted string'\"\n```\n\n----------------------------------------\n\nTITLE: Single Quote String Examples in Python\nDESCRIPTION: Examples of single-quoted string usage in Hydra configuration, showing escape sequences and various string formats.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/basic.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n'hello there'\n'escaped \\'single quote\\''\n'the path is C:\\\\\\'some folder\\'\\\\'\n'1,2,3'\n'{a:10} ${xyz}'\n'\"double quoted string\"'\n```\n\n----------------------------------------\n\nTITLE: Shell Command Examples for Config Override\nDESCRIPTION: Examples of using Hydra's override syntax in shell commands, demonstrating proper quoting and value assignment.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/basic.md#2025-04-07_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py '+foo=\"{a: 10}\"'\nfoo: '{a: 10}'\n\n$ python my_app.py '+foo={a: 10}'\nfoo:\n  a: 10\n```\n\n----------------------------------------\n\nTITLE: Choice Sweep Function Signature\nDESCRIPTION: Defines the signature of the choice sweep function, which allows selection from multiple values. It accepts any number of arguments of various types and returns a ChoiceSweep object.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef choice(\n    *args: Union[str, int, float, bool, Dict[Any, Any], List[Any], ChoiceSweep]\n) -> ChoiceSweep:\n    \"\"\"\n    A choice sweep over the specified values\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Glob Choice Sweep Function Signature\nDESCRIPTION: Defines the signature of the glob function which selects from all options in a config group using glob patterns. It accepts include patterns and optional exclude patterns.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef glob(\n    include: Union[List[str], str], exclude: Optional[Union[List[str], str]] = None\n) -> Glob:\n    \"\"\"\n    A glob selects from all options in the config group.\n    inputs are in glob format. e.g: *, foo*, *foo.\n    :param include: a string or a list of strings to use as include globs\n    :param exclude: a string or a list of strings to use as exclude globs\n    :return: A Glob object\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Shuffle Function Signature\nDESCRIPTION: Defines the signature of the shuffle function for randomizing the order of elements in lists and sweeps. It does not support interval sweeps.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef shuffle(\n    *args: Union[ElementType, ChoiceSweep, RangeSweep],\n    sweep: Optional[Union[ChoiceSweep, RangeSweep]] = None,\n    list: Optional[List[Any]] = None,\n) -> Union[List[Any], ChoiceSweep, RangeSweep]:\n    \"\"\"\n    Shuffle input list or sweep (does not support interval)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining and Calling Functions in Hydra\nDESCRIPTION: Examples of defining a function and calling it with different parameter styles in Hydra's override syntax.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef func(a:int, b:str) -> bool:\n    ...\n```\n\nLANGUAGE: python\nCODE:\n```\nfunc(10,foo)     # Positional only\nfunc(a=10,b=foo) # Named only\nfunc(10,b=foo)   # Mixed\nfunc(a=10,foo)   # Error\n```\n\n----------------------------------------\n\nTITLE: Implementing Interval Sweep in Hydra\nDESCRIPTION: Definition and examples of interval sweep in Hydra, representing continuous intervals between two values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef interval(start: Union[int, float], end: Union[int, float]) -> IntervalSweep:\n    \"\"\"\n    A continuous interval between two floating point values.\n    value=interval(x,y) is interpreted as x <= value < y\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\ninterval(1.0,5.0)  # 1.0 <= x < 5.0\ninterval(1,5)      # 1.0 <= x < 5.0, auto-cast to floats\n```\n\n----------------------------------------\n\nTITLE: Shuffling Lists and Sweeps in Hydra\nDESCRIPTION: Definition and examples of shuffling lists and sweeps in Hydra using the shuffle function.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef shuffle(\n    *args: Union[ElementType, ChoiceSweep, RangeSweep],\n    sweep: Optional[Union[ChoiceSweep, RangeSweep]] = None,\n    list: Optional[List[Any]] = None,\n) -> Union[List[Any], ChoiceSweep, RangeSweep]:\n    \"\"\"\n    Shuffle input list or sweep (does not support interval)\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nshuffle(a,b,c)                                       # shuffled a,b,c\nshuffle(choice(a,b,c)), shuffle(sweep=choice(a,b,c)) # shuffled choice(a,b,c)\nshuffle(range(1,10))                                 # shuffled range(1,10)\nshuffle([a,b,c]), shuffle(list=[a,b,c])              # shuffled list [a,b,c]\n```\n\n----------------------------------------\n\nTITLE: Type Casting in Hydra\nDESCRIPTION: Examples of type casting in Hydra, including casting to int, float, bool, str, and json_str.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nint(3.14)                  # 3 (int)\nint(value=3.14)            # 3 (int)\nfloat(10)                  # 10.0 (float)\nstr(10)                    # \"10\" (str)\nbool(1)                    # true (bool)\nfloat(range(1,10))         # range(1.0,10.0)\nstr([1,2,3])               # ['1','2','3']\nstr({a:10})                # {a:'10'}\njson_str({a:10})           # '{\"a\":10}'\n```\n\n----------------------------------------\n\nTITLE: Casting Lists in Python vs Hydra\nDESCRIPTION: Comparison of list casting behavior in Python and Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, list):\n        raise TypeError()\n    else:\n        return int(v)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(v, list):\n        return list(map(cast_int, v))\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Command Line Search Path Override\nDESCRIPTION: Examples of overriding dataset configuration and search path via command line arguments.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/search_path.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython my_app.py dataset=imagenet\n```\n\nLANGUAGE: bash\nCODE:\n```\npython my_app.py 'hydra.searchpath=[pkg://additional_conf]'\n```\n\n----------------------------------------\n\nTITLE: Output of Hydra Sweeper Job Generation\nDESCRIPTION: Shows the four separate job configurations that would be generated by the built-in sweeper from the input parameters. Each job receives a specific combination of the parameter values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/plugins.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbatch_size=128 optimizer=nesterov learning_rate=0.01\nbatch_size=128 optimizer=nesterov learning_rate=0.1\nbatch_size=128 optimizer=adam learning_rate=0.01\nbatch_size=128 optimizer=adam learning_rate=0.1\n```\n\n----------------------------------------\n\nTITLE: Resulting Jobs from Hydra Sweeper Parameter Expansion\nDESCRIPTION: Shows the four individual job configurations that result from expanding the parameter sweep in the previous example. Each job represents a unique combination of optimizer and learning rate values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/plugins/intro.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbatch_size=128 optimizer=nesterov learning_rate=0.01\nbatch_size=128 optimizer=nesterov learning_rate=0.1\nbatch_size=128 optimizer=adam learning_rate=0.01\nbatch_size=128 optimizer=adam learning_rate=0.1\n```\n\n----------------------------------------\n\nTITLE: Multi-File Config Example - Output\nDESCRIPTION: Shows the final merged configuration output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbond:\n  james:\n    codename: '007'\n```\n\n----------------------------------------\n\nTITLE: Command-Line Configuration Example in YAML\nDESCRIPTION: Example showing how to add configuration values via command line arguments using the + prefix to indicate new fields. Demonstrates creating database connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/1_simple_cli.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py +db.driver=mysql +db.user=omry +db.password=secret\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Command-Line Configuration Example in YAML\nDESCRIPTION: Example showing how to add configuration values via command line arguments using the + prefix to indicate new fields. Demonstrates creating database connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/1_simple_cli.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py +db.driver=mysql +db.user=omry +db.password=secret\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Config Output Comparison - Hydra 1.0 vs 1.1\nDESCRIPTION: Shows the different output configurations between Hydra 1.0 and 1.1 for the same input.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\\n  x: 20\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\\n  x: 10\n```\n\n----------------------------------------\n\nTITLE: Structured Config Example - Python\nDESCRIPTION: Shows how to implement _self_ in a Structured Config using Python dataclasses.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefaults = [\\n    \"_self_\",\\n    {\"db\": \"mysql\"}\\n]\\n\\n@dataclass\\nclass Config:\\n    # this is unfortunately verbose due to @dataclass limitations\\n    defaults: List[Any] = field(default_factory=lambda: defaults)\\n\\n    # Hydra will populate this field based on the defaults list\\n    db: Any = MISSING\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 1.0 Composition Order with YAML\nDESCRIPTION: Examples of config.yaml and foo/bar.yaml files demonstrating how in Hydra 1.0, configs from the Defaults List override the main config file values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - foo: bar\n\nfoo:\n  x: 10\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\nx: 20\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Hydra Config Groups (Pre-1.1)\nDESCRIPTION: This YAML snippet demonstrates how to override Hydra config groups via the Defaults List in versions prior to Hydra 1.1. It shows the implicit override syntax.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Removing Package Header Migration Example in YAML\nDESCRIPTION: Shows how to migrate a basic MySQL database configuration from Hydra 1.0 to 1.1 by removing the _group_ package header while maintaining the same functionality.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Field Existence Checking in Python\nDESCRIPTION: Shows the deprecated method of checking field existence using None comparison and the recommended alternatives using 'in' operator or hasattr() function.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/0.11_to_1.0/strict_mode_flag_deprecated.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif cfg.host is None:\n    # host is not in the config\n```\n\nLANGUAGE: python\nCODE:\n```\nif \"host\" not in cfg:\n    # host is not in the config\n\nif not hasattr(cfg, \"host\"):\n    # host is not in the config\n```\n\n----------------------------------------\n\nTITLE: Accessing Hydra Config via Interpolation in Python\nDESCRIPTION: Shows how to access Hydra configuration values using string interpolation in Python code. This allows referencing Hydra config values dynamically.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/NEWS.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n${hydra:job.name}\n```\n\n----------------------------------------\n\nTITLE: Importing Hydra Launcher Plugin in Python\nDESCRIPTION: Demonstrates the new explicit import syntax required for Hydra plugins. This ensures plugins do not use internal APIs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/NEWS.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.plugins.launcher import Launcher\n```\n\n----------------------------------------\n\nTITLE: Defining Example Optimizer Class in Python\nDESCRIPTION: This snippet defines a simple Optimizer class with 'algo' and 'lr' attributes, which will be used in subsequent examples to demonstrate Hydra's instantiation capabilities.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass Optimizer:\n    algo: str\n    lr: float\n\n    def __init__(self, algo: str, lr: float) -> None:\n        self.algo = algo\n        self.lr = lr\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Conversion Strategies in Hydra\nDESCRIPTION: This snippet demonstrates the four parameter conversion strategies in Hydra's instantiate utility: 'none', 'partial', 'object', and 'all'. It shows how each strategy affects the conversion of OmegaConf containers to Python primitives.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom omegaconf import DictConfig, OmegaConf\nfrom hydra.utils import instantiate\n\n@dataclass\nclass Foo:\n    a: int = 123\n\nclass MyTarget:\n    def __init__(self, foo, bar):\n        self.foo = foo\n        self.bar = bar\n\ncfg = OmegaConf.create(\n    {\n        \"_target_\": \"__main__.MyTarget\",\n        \"foo\": Foo(),\n        \"bar\": {\"b\": 456},\n    }\n)\n\nobj_none = instantiate(cfg, _convert_=\"none\")\nassert isinstance(obj_none, MyTarget)\nassert isinstance(obj_none.foo, DictConfig)\nassert isinstance(obj_none.bar, DictConfig)\n\nobj_partial = instantiate(cfg, _convert_=\"partial\")\nassert isinstance(obj_partial, MyTarget)\nassert isinstance(obj_partial.foo, DictConfig)\nassert isinstance(obj_partial.bar, dict)\n\nobj_object = instantiate(cfg, _convert_=\"object\")\nassert isinstance(obj_object, MyTarget)\nassert isinstance(obj_object.foo, Foo)\nassert isinstance(obj_object.bar, dict)\n\nobj_all = instantiate(cfg, _convert_=\"all\")\nassert isinstance(obj_none, MyTarget)\nassert isinstance(obj_all.foo, dict)\nassert isinstance(obj_all.bar, dict)\n```\n\n----------------------------------------\n\nTITLE: Partial Instantiation Configuration in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up a model with a partially instantiated optimizer using the _partial_ flag.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmodel:\n  _target_: my_app.Model\n  optim_partial:\n    _partial_: true\n    _target_: my_app.Optimizer\n    algo: SGD\n  lr: 0.01\n```\n\n----------------------------------------\n\nTITLE: Instantiating the Model with Partial Optimizer\nDESCRIPTION: This snippet shows how to instantiate a model that uses a partially instantiated optimizer, completing the initialization in the application code.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nmodel = instantiate(cfg.model)\nprint(model)\n# \"Model(Optimizer=Optimizer(algo=SGD,lr=0.01),lr=0.01)\n```\n\n----------------------------------------\n\nTITLE: ConfigStore Class Definition in Python\nDESCRIPTION: The core ConfigStore class definition showing the store method which is used to register config nodes in the repository. ConfigStore is a singleton that stores configs in memory.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ConfigStore(metaclass=Singleton):\n    def store(\n        self,\n        name: str,\n        node: Any,\n        group: Optional[str] = None,\n        package: Optional[str] = \"_group_\",\n        provider: Optional[str] = None,\n    ) -> None:\n        \"\"\"\n        Stores a config node into the repository\n        :param name: config name\n        :param node: config node, can be DictConfig, ListConfig,\n            Structured configs and even dict and list\n        :param group: config group, subgroup separator is '/',\n            for example hydra/launcher\n        :param package: Config node parent hierarchy.\n            Child separator is '.', for example foo.bar.baz\n        :param provider: the name of the module/app providing this config.\n            Helps debugging.\n        \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: ConfigStore Class Definition in Python\nDESCRIPTION: The core ConfigStore class definition showing the store method which is used to register config nodes in the repository. ConfigStore is a singleton that stores configs in memory.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ConfigStore(metaclass=Singleton):\n    def store(\n        self,\n        name: str,\n        node: Any,\n        group: Optional[str] = None,\n        package: Optional[str] = \"_group_\",\n        provider: Optional[str] = None,\n    ) -> None:\n        \"\"\"\n        Stores a config node into the repository\n        :param name: config name\n        :param node: config node, can be DictConfig, ListConfig,\n            Structured configs and even dict and list\n        :param group: config group, subgroup separator is '/',\n            for example hydra/launcher\n        :param package: Config node parent hierarchy.\n            Child separator is '.', for example foo.bar.baz\n        :param provider: the name of the module/app providing this config.\n            Helps debugging.\n        \"\"\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Hydra Application Using YAML Config\nDESCRIPTION: Example of a simple Hydra application that uses YAML configuration files from a conf directory. This shows the traditional file-based approach before using ConfigStore.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(version_base=None, config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Directory Layout for Hydra Configuration\nDESCRIPTION: The directory structure showing the placement of configuration files for a Hydra application, with a db group containing a mysql.yaml option.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n├─ conf\n│  └─ db\n│      └─ mysql.yaml\n└── my_app.py\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Various Ways to Register Configs with ConfigStore\nDESCRIPTION: Examples of different methods to register configurations with ConfigStore: using a type, an instance with overridden values, or a dictionary. Each approach has different implications for type safety.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = \"localhost\"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n\n# Using the type\ncs.store(name=\"config1\", node=MySQLConfig)\n# Using an instance, overriding some default values\ncs.store(name=\"config2\", node=MySQLConfig(host=\"test.db\", port=3307))\n# Using a dictionary, forfeiting runtime type safety\ncs.store(name=\"config3\", node={\"host\": \"localhost\", \"port\": 3308})\n```\n\n----------------------------------------\n\nTITLE: Installing Joblib Launcher Plugin\nDESCRIPTION: Command to install the Hydra Joblib Launcher plugin via pip package manager.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/joblib_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-joblib-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing Colorlog Plugin for Hydra\nDESCRIPTION: Command to install the Colorlog plugin for Hydra using pip. This will install or upgrade the hydra_colorlog package.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/colorlog.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra_colorlog --upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Command Line Scalar Parameters for Nevergrad\nDESCRIPTION: Examples of syntax for defining scalar parameters with intervals through command line overrides. Includes float intervals, integer intervals, and logarithmic scale intervals.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\n`key=interval(1,12)`             # Interval are float by default\n`key=int(interval(1,8))`         # Scalar bounds cast to a int\n`key=tag(log, interval(1,12))`   # call ng.p.Log if tagged with log \n```\n\n----------------------------------------\n\nTITLE: Displaying Optuna Sweeper Parameters\nDESCRIPTION: Command to show the default Optuna sweeper configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.sweeper\nsampler:\n  _target_: optuna.samplers.TPESampler\n  seed: 123\n  consider_prior: true\n  prior_weight: 1.0\n  consider_magic_clip: true\n  consider_endpoints: false\n  n_startup_trials: 10\n  n_ei_candidates: 24\n  multivariate: false\n  warn_independent_sampling: true\n_target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper\ndirection: minimize\nstorage: null\nstudy_name: sphere\nn_trials: 20\nn_jobs: 1\nsearch_space:\n  x:\n    type: float\n    low: -5.5\n    high: 5.5\n    step: 0.5\n  'y':\n    type: categorical\n    choices:\n    - -5\n    - 0\n    - 5\n```\n\n----------------------------------------\n\nTITLE: Running Optuna Optimization\nDESCRIPTION: Command to run the optimization process using the Optuna sweeper.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\npython example/sphere.py --multirun\n```\n\n----------------------------------------\n\nTITLE: Parameter Configuration in YAML\nDESCRIPTION: YAML configuration showing how to define parameter ranges for optimization\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ax_sweeper.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbanana.x:\n type: range\n bounds: [-5, 5]\n\nbanana.y:\n type: range\n bounds: [-5, 10.1]\n```\n\n----------------------------------------\n\nTITLE: Viewing Submitit Local Launcher Configuration Options\nDESCRIPTION: Command output showing the available configuration parameters for the local Submitit launcher with default values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.LocalLauncher\nsubmitit_folder: ${hydra.sweep.dir}/.submitit/%j\ntimeout_min: 60\ncpus_per_task: 1\ngpus_per_node: 0\ntasks_per_node: 1\nmem_gb: 4\nnodes: 1\nname: ${hydra.job.name}\n```\n\n----------------------------------------\n\nTITLE: Configuring Submitit Launcher in YAML\nDESCRIPTION: YAML configuration to set Submitit SLURM launcher as the default launcher\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/submitit_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: submitit_slurm\n```\n\n----------------------------------------\n\nTITLE: Running a Simple Application with Ray Launcher\nDESCRIPTION: Command line example showing how to run a multi-run task with Ray Launcher. This launches multiple jobs with different task parameters (1, 2, and 3) on Ray.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3\n[HYDRA] Ray Launcher is launching 3 jobs, \n[HYDRA]        #0 : task=1\n[HYDRA]        #1 : task=2\n[HYDRA]        #2 : task=3\n[HYDRA] Pickle for jobs: /var/folders/n_/9qzct77j68j6n9lh0lw3vjqcn96zxl/T/tmpqqg4v4i7/job_spec.pkl\nCluster: default\n...\nINFO services.py:1172 -- View the Ray dashboard at http://localhost:8265\n(pid=3374) [__main__][INFO] - Executing task 1\n(pid=3374) [__main__][INFO] - Executing task 2\n(pid=3374) [__main__][INFO] - Executing task 3\n...\n[HYDRA] Stopping cluster now. (stop_cluster=true)\n[HYDRA] Deleted the cluster (provider.cache_stopped_nodes=false)\nDestroying cluster. Confirm [y/N]: y [automatic, due to --yes]\n...\nNo nodes remaining.\n```\n\n----------------------------------------\n\nTITLE: Uploading and Downloading from Remote Ray Cluster\nDESCRIPTION: Example showing how to use Ray Launcher with syncing functionality to upload dependencies to the remote cluster and download results. This uses the sync_up and sync_down configuration options built on rsync.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\n$  python train.py --multirun random_seed=1,2,3\n[HYDRA] Ray Launcher is launching 3 jobs, \n[HYDRA]        #0 : random_seed=1\n[HYDRA]        #1 : random_seed=2\n[HYDRA]        #2 : random_seed=3\n[HYDRA] Pickle for jobs: /var/folders/n_/9qzct77j68j6n9lh0lw3vjqcn96zxl/T/tmptdkye9of/job_spec.pkl\nCluster: default\n...\nINFO services.py:1172 -- View the Ray dashboard at http://localhost:8265\n(pid=1772) [__main__][INFO] - Start training...\n(pid=1772) [INFO] - Init my model\n(pid=1772) [INFO] - Created dir for checkpoints. dir=checkpoint\n(pid=1772) [__main__][INFO] - Start training...\n(pid=1772) [INFO] - Init my model\n(pid=1772) [INFO] - Created dir for checkpoints. dir=checkpoint\n(pid=1772) [__main__][INFO] - Start training...\n(pid=1772) [INFO] - Init my model\n(pid=1772) [INFO] - Created dir for checkpoints. dir=checkpoint\nLoaded cached provider configuration\n...\n[HYDRA] Output: receiving file list ... done\n16-32-25/\n16-32-25/0/\n16-32-25/0/checkpoint/\n16-32-25/0/checkpoint/checkpoint_1.pt\n16-32-25/1/\n16-32-25/1/checkpoint/\n16-32-25/1/checkpoint/checkpoint_2.pt\n16-32-25/2/\n16-32-25/2/checkpoint/\n16-32-25/2/checkpoint/checkpoint_3.pt\n...\n[HYDRA] Stopping cluster now. (stop_cluster=true)\n[HYDRA] Deleted the cluster (provider.cache_stopped_nodes=false)\nDestroying cluster. Confirm [y/N]: y [automatic, due to --yes]\n...\nNo nodes remaining.\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Ray Logging Settings\nDESCRIPTION: Default configuration for Ray logging that sets minimal verbosity and automatic detection for pretty-print and color mode settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.log_style=\"auto\"\nhydra.launcher.logging.color_mode=\"auto\"\nhydra.launcher.logging.verbosity=0\n```\n\n----------------------------------------\n\nTITLE: Disabling Ray Logger Pretty Print\nDESCRIPTION: Configuration to disable pretty-print formatting in Ray logging output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.log_style=\"record\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Ray Cluster\nDESCRIPTION: Example of connecting to an existing Ray cluster by specifying the cluster address in the launcher configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_10\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray hydra.launcher.ray.init.address=localhost:6379'\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-13-32\n[HYDRA] Initializing ray with config: {'num_cpus': None, 'num_gpus': None, 'address': 'localhost:6379'}\nINFO worker.py:633 -- Connecting to existing Ray cluster at address: 10.30.99.17:6379\n[HYDRA]        #0 : \n(pid=93358) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Ray Cluster in Hydra\nDESCRIPTION: Command to connect to an existing Ray cluster by overriding the Ray initialization address parameter. This example demonstrates how to specify a custom Ray cluster address instead of starting a new cluster.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray hydra.launcher.ray.init.address=localhost:6379'\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-13-32\n[HYDRA] Initializing ray with config: {'num_cpus': None, 'num_gpus': None, 'address': 'localhost:6379'}\nINFO worker.py:633 -- Connecting to existing Ray cluster at address: 10.30.99.17:6379\n[HYDRA]        #0 : \n(pid=93358) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Discovering Ray AWS Launcher Config\nDESCRIPTION: Command to view the full configuration schema for the ray_aws launcher including cluster settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/ray_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py hydra/launcher=ray_aws --cfg hydra -p hydra.launcher\n```\n\n----------------------------------------\n\nTITLE: Running Simple Multi-task Example\nDESCRIPTION: Example showing how to run multiple tasks using Ray launcher with different task configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/ray_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Environment Variables for RQ Launcher\nDESCRIPTION: Bash commands to set environment variables for Redis connection details used by the RQ Launcher. These variables configure the host, port, database, and password for Redis.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/rq_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nexport REDIS_HOST=\"localhost\"\nexport REDIS_PORT=\"6379\"\nexport REDIS_DB=\"0\"\nexport REDIS_PASSWORD=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis SSL\nDESCRIPTION: Commands to enable SSL connection for Redis by setting environment variables.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\nexport REDIS_SSL=true\nexport REDIS_SSL_CA_CERTS=/etc/ssl/certs/ca-certificates.crt\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Hydra Website\nDESCRIPTION: Command to start a local development server for the Hydra documentation website. This launches a browser window with hot reloading for most changes.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/documentation.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Tab Completion Command\nDESCRIPTION: Shows how to get the tab completion installation command for Hydra. The command needs to be executed from within a Hydra application context.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/6_tab_completion.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython <your-hydra-app> --hydra-help\n```\n\n----------------------------------------\n\nTITLE: Nested Interpolations in YAML Configuration\nDESCRIPTION: This YAML example demonstrates the new nested interpolation grammar in OmegaConf 2.1, allowing for more sophisticated usage of interpolations with fallback values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/blog/2021-06-13-Hydra_1.1.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefault_user: root\ndb_user: ${oc.env:DB_USER,${default_user}}\n```\n\n----------------------------------------\n\nTITLE: Example Application with Dynamic Configuration Resolution\nDESCRIPTION: Demonstrates an application that accesses a dynamically resolved configuration value. This example illustrates a limitation of the re-run feature, as the value will be different on each run despite using the same configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(version_base=None, config_path=\".\", config_name=\"config\")\ndef my_app(cfg: DictConfig) -> None:\n    val = cfg.time_now\n    # the rest of the application\n```\n\n----------------------------------------\n\nTITLE: Launching Multi-GPU PyTorch Training with Hydra torchrun Launcher\nDESCRIPTION: A command example for launching a PyTorch application using the Hydra torchrun launcher. This command specifies that 8 processes should be created per node for distributed training.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/contrib/hydra_torchrun_launcher/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython my_app.py -m hydra/launcher=torchrun hydra.launcher.nproc_per_node=8\n```\n\n----------------------------------------\n\nTITLE: Directory-Based Initialization for Hydra Configuration\nDESCRIPTION: API documentation for the initialize_config_dir function that sets up Hydra with a configuration from an absolute directory path. The function requires an absolute path and will error on relative paths.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/advanced/compose_api.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef initialize_config_dir(\n    config_dir: str,\n    version_base: Optional[str],\n    job_name: str = \"app\"\n) -> None:\n    \"\"\"\n    Initializes Hydra and add an absolute config dir to the to the config search path.\n    The config_dir is always a path on the file system and is must be an absolute path.\n    Relative paths will result in an error.\n    :param config_dir: absolute file system path\n    :param version_base: compatibility level to use.\n    :param job_name: the value for hydra.job.name (default is 'app')\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Torch Distributed Rank Using Job Number\nDESCRIPTION: Demonstrates how to use job number interpolation to automatically set the RANK environment variable for Torch Distributed runs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/job.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      RANK: ${hydra:job.num}\n```\n\n----------------------------------------\n\nTITLE: Specialized Configuration for CIFAR10 Alexnet\nDESCRIPTION: Specific configuration override for Alexnet model when used with CIFAR10 dataset, reducing the number of layers to 5\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/patterns/specializing_config.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _global_\n\nmodel:\n  num_layers: 5\n```\n\n----------------------------------------\n\nTITLE: Configuring Optimizer in YAML\nDESCRIPTION: This YAML configuration snippet defines the structure for instantiating an Optimizer object, specifying the target class and its parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\noptimizer:\n  _target_: my_app.Optimizer\n  algo: SGD\n  lr: 0.01\n```\n\n----------------------------------------\n\nTITLE: Resulting Output Configuration After Composition\nDESCRIPTION: Example showing the final output configuration after Hydra has processed the input configs and applied the package directive, resulting in a nested structure.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbond:\n  james:\n    codename: '007'\n```\n\n----------------------------------------\n\nTITLE: Runtime Error Detection with Hydra in Python\nDESCRIPTION: This snippet demonstrates Hydra's ability to catch type errors at runtime. It shows the error message when running the Python script with the 'pork' typo.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app_type_error.py\nTraceback (most recent call last):\n  File \"my_app_type_error.py\", line 22, in my_app\n    if cfg.pork == 80:\nomegaconf.errors.ConfigAttributeError: Key 'pork' not in 'MySQLConfig'\n        full_key: pork\n        object_type=MySQLConfig\n\nSet the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.\n```\n\n----------------------------------------\n\nTITLE: Main Configuration File in YAML\nDESCRIPTION: Default configuration file that specifies MySQL as the default database connection to use.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n```\n\n----------------------------------------\n\nTITLE: Running Installed Hydra Application\nDESCRIPTION: Command to run the Hydra application after installation as a package, showing that it uses the packaged configuration files to produce the same output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/packaging.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ hydra_app\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\n```\n\n----------------------------------------\n\nTITLE: Defining Development Dependencies for Hydra Project\nDESCRIPTION: This requirements file specifies all development dependencies needed for contributing to the Hydra project. It references another requirements file and then lists additional tools for testing, linting, formatting, building, and publishing the package.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/requirements/dev.txt#2025-04-07_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-r requirements.txt\nbandit\nblack==24.3.0\nbuild\ncoverage\nflake8==6.0.0\nflake8-copyright\nisort==5.13.2\nmypy==1.8.0\nnox\npackaging\npre-commit\npytest\npytest-benchmark\npytest-snail\nread-version\nsetuptools\ntowncrier\ntwine\ntypes-setuptools\nyamllint\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Composition Example in Temporary Directory\nDESCRIPTION: Creates a temporary directory and runs a Hydra composition example from the tutorials. The command configures Hydra to use the temporary directory as the run directory and to change to that directory during execution.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/tests/jupyter/%run_test.ipynb#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport tempfile\ntmpdir = tempfile.mkdtemp()\n%run ../../examples/tutorials/basic/your_first_hydra_app/6_composition/my_app.py hydra.run.dir='\"$tmpdir\"' hydra.job.chdir=True\n```\n\n----------------------------------------\n\nTITLE: Default RQ Launcher Configuration\nDESCRIPTION: Complete default configuration for RQ launcher showing all available options including Redis connection settings and job queue parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_rq_launcher.rq_launcher.RQLauncher\nenqueue:\n  job_timeout: null\n  ttl: null\n  result_ttl: null\n  failure_ttl: null\n  at_front: false\n  job_id: null\n  description: null\nqueue: default \nredis:\n  host: ${oc.env:REDIS_HOST,localhost}\n  port: ${oc.env:REDIS_PORT,6379}\n  db: ${oc.env:REDIS_DB,0}\n  password: ${oc.env:REDIS_PASSWORD,null}\n  ssl: ${oc.env:REDIS_SSL,False}\n  ssl_ca_certs: ${oc.env:REDIS_SSL_CA_CERTS,null}\n  mock: ${oc.env:REDIS_MOCK,False}\nstop_after_enqueue: false\nwait_polling: 1.0\n```\n\n----------------------------------------\n\nTITLE: Config File with Package Directive\nDESCRIPTION: Shows a config file with a package directive that overrides the default package name for the configuration node, placing it under 'bond.james' instead.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# @package bond.james\ncodename: '007'\n```\n\n----------------------------------------\n\nTITLE: Disabling Recursive Instantiation in Python\nDESCRIPTION: This snippet demonstrates how to disable recursive instantiation by setting the '_recursive_' parameter to False, resulting in nested objects remaining as OmegaConf DictConfig instances.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\noptimizer = instantiate(cfg.trainer, _recursive_=False)\nprint(optimizer)\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Output Example\nDESCRIPTION: Example output showing the simplified custom logging format with only log level and message.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/logging.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py \n[INFO] - Info level message\n```\n\n----------------------------------------\n\nTITLE: Using Interpolation for Environment Variables in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet shows how to use interpolation to set the RANK environment variable for Torch Distributed runs, matching it to the job number in a sweep.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/configure_hydra/job.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      RANK: ${hydra:job.num}\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Core Package\nDESCRIPTION: Command to install the Hydra core package using pip. This is the basic installation needed to use Hydra in your Python applications.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/intro.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-core --upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Hydra Application in Python\nDESCRIPTION: Example Python application using Hydra for configuration management. The hydra.main decorator specifies the configuration path and name, and the function receives the loaded configuration as a parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/intro.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\n\n@hydra.main(version_base=None, config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg : DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Passing Double Quotes to Hydra in Shell\nDESCRIPTION: This example demonstrates how to pass double quotes to Hydra within a shell-quoted string. It uses single quotes to encapsulate the double-quoted content, ensuring proper interpretation by Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/override_grammar/basic.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo '\"hello world\"'\n\"hello world\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 1.0 with Config Name Parameter\nDESCRIPTION: Example of the new way to configure Hydra 1.0 using config_name parameter without file extension.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_name=\"config\")\n```\n\n----------------------------------------\n\nTITLE: Package Overriding in Defaults List\nDESCRIPTION: Example showing how to override packages in the Defaults List using the '@' notation, which relocates config content to different locations in the output configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - server/apache@admin\n\ndebug: false\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - db@backup: mysql\n\nname: apache\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nadmin:\n  backup:\n    name: mysql\n  name: apache\ndebug: false\n```\n\n----------------------------------------\n\nTITLE: Structured Config Schema Definition\nDESCRIPTION: Shows how to define a typed configuration schema using Python dataclasses.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n  name: str\n  age: int\n```\n\n----------------------------------------\n\nTITLE: Printing Basic Configuration in Hydra\nDESCRIPTION: Demonstrates how to print the basic configuration output using the --cfg flag without executing the application function. Shows the difference between normal execution and configuration display.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# A normal run:\n$ python my_app.py\nMySQL connecting to localhost with user=root and password=1234\n\n# just show the config without running your function:\n$ python my_app.py --cfg job\ndb:\n  host: localhost\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: Resulting Output Config Structure\nDESCRIPTION: Displays the structure of the final output configuration after Hydra has processed the defaults list and applied package directives.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbond:\n  james:\n    codename: '007'\n```\n\n----------------------------------------\n\nTITLE: Main Configuration File\nDESCRIPTION: Main configuration file that sets defaults to use staging database configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: staging\n```\n\n----------------------------------------\n\nTITLE: Using ++ Prefix for Overriding or Adding Config Values in Hydra\nDESCRIPTION: Shell commands demonstrating how to use the ++ prefix in Hydra to either override existing configuration values or add new configuration items at runtime.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n# Override an existing item\n$ python my_app.py ++db.password=1234\n\n# Add a new item\n$ python my_app.py ++db.timeout=5\n```\n\n----------------------------------------\n\nTITLE: Casting Dicts in Python vs Hydra\nDESCRIPTION: Comparison of dict casting behavior in Python and Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, dict):\n        raise TypeError()\n    else:\n        return int(v)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, dict):\n        return apply_to_values(\n            value, cast_int\n        )\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Application With Config File Output\nDESCRIPTION: Command line example showing how to run a Hydra application that automatically loads a config file, displaying the loaded configuration in YAML format.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Installing Website Dependencies with Yarn\nDESCRIPTION: This command installs the necessary dependencies for the Hydra project website using Yarn package manager. It should be run from the 'website' directory.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/development/documentation.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Sweep in Hydra\nDESCRIPTION: Definition and examples of range sweep in Hydra, supporting both integer and floating-point numbers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef range(\n    start: Union[int, float], stop: Optional[Union[int, float]] = None, step: Union[int, float] = 1\n) -> RangeSweep:\n    \"\"\"\n    Range is defines a sweeep over a range of integer or floating-point values.\n    For a positive step, the contents of a range r are determined by the formula\n     r[i] = start + step*i where i >= 0 and r[i] < stop.\n    For a negative step, the contents of the range are still determined by the formula\n     r[i] = start + step*i, but the constraints are i >= 0 and r[i] > stop.\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nnum=range(5)                          # 0,1,2,3,4\nnum=range(0,5)                        # 0,1,2,3,4\nnum=range(0,5,2)                      # 0,2,4\nnum=range(0,10,3.3)                   # 0.0,3.3,6.6,9.9\nnum=range(-5,step=-1)                 # 0,-1,-2,-3,-4\n```\n\n----------------------------------------\n\nTITLE: Multi-dimensional Parameter Sweep in Hydra\nDESCRIPTION: Example demonstrating a multi-dimensional parameter sweep across both database types and schemas, showing the output format and job distribution\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/2_multirun.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n $ python my_app.py schema=warehouse,support,school db=mysql,postgresql -m\n[2019-10-01 14:44:16,254] - Launching 6 jobs locally\n[2019-10-01 14:44:16,254] - Sweep output dir : multirun/2019-10-01/14-44-16\n[2019-10-01 14:44:16,254] -     #0 : schema=warehouse db=mysql\n[2019-10-01 14:44:16,321] -     #1 : schema=warehouse db=postgresql\n[2019-10-01 14:44:16,390] -     #2 : schema=support db=mysql\n[2019-10-01 14:44:16,458] -     #3 : schema=support db=postgresql\n[2019-10-01 14:44:16,527] -     #4 : schema=school db=mysql\n[2019-10-01 14:44:16,602] -     #5 : schema=school db=postgresql\n```\n\n----------------------------------------\n\nTITLE: Hydra Configuration Output Example\nDESCRIPTION: Command line output showing the loaded YAML configuration structure.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Implementing Package Directive with Literal in YAML\nDESCRIPTION: Demonstrates how to use a package directive with a literal value in a YAML configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/overriding_packages.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package foo.bar\n\ndb:\n  host: localhost\n  port: 3306\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in YAML\nDESCRIPTION: Shows how to configure environment variables for Intel IPP and MKL multithreading control using Hydra's job configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/job.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      OMP_NUM_THREADS: 1\n```\n\n----------------------------------------\n\nTITLE: Python vs Hydra: Casting String to Bool\nDESCRIPTION: Compares string to boolean casting in Python versus Hydra. Python treats any non-empty string as True, while Hydra only accepts 'true' or 'false' (case insensitive) for string to boolean conversion.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef bool(value: Any) -> bool:\n    if isinstance(value, str):\n        return len(value) > 0\n    else:\n        return bool(value)\n\n\n\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndef bool(s: str) -> bool:\n    if isinstance(value, str):\n        if value.lower() == \"false\":\n            return False\n        elif value.lower() == \"true\":\n            return True\n        else:\n            raise ValueError()\n    return bool(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 0.11 with Nested Config Path\nDESCRIPTION: Demonstrates the old style of configuring Hydra 0.11 using config_path for nested directory structure.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf/config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Different Ways to Store Config Nodes\nDESCRIPTION: Examples demonstrating various ways to register configurations in ConfigStore: using a type, an instance with overridden defaults, or a dictionary. This shows the flexibility of the ConfigStore API.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = \"localhost\"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n\n# Using the type\ncs.store(name=\"config1\", node=MySQLConfig)\n# Using an instance, overriding some default values\ncs.store(name=\"config2\", node=MySQLConfig(host=\"test.db\", port=3307))\n# Using a dictionary, forfeiting runtime type safety\ncs.store(name=\"config3\", node={\"host\": \"localhost\", \"port\": 3308})\n```\n\n----------------------------------------\n\nTITLE: Initial Hydra Configuration Structure\nDESCRIPTION: Basic Hydra configuration file showing defaults for dataset and model selection.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/specializing_config.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n```\n\n----------------------------------------\n\nTITLE: Database Staging Configuration\nDESCRIPTION: Example staging database configuration file showing the structure matching the DBConfig dataclass.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\ndriver: mysql\nhost: mysql001.staging\nuser: root\npassword: root\n```\n\n----------------------------------------\n\nTITLE: Referencing Ax Sweeper in Markdown\nDESCRIPTION: This snippet provides a Markdown link to the Ax Sweeper documentation, highlighting its integration with Hydra for parallel execution support.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_ax_sweeper/README.md#2025-04-07_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[`Ax Sweeper`](https://ax.dev/)\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logging in a Hydra Application (Python)\nDESCRIPTION: This snippet demonstrates how to set up and use logging in a Hydra application. It shows the basic structure of a Hydra app with logging configured, including how to create a logger and use different log levels.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/running_your_app/4_logging.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nfrom omegaconf import DictConfig\nimport hydra\n\n# A logger for this file\nlog = logging.getLogger(__name__)\n\n@hydra.main()\ndef my_app(_cfg: DictConfig) -> None:\n    log.info(\"Info level message\")\n    log.debug(\"Debug level message\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Running Nox Plugin Tests with Environment Variables\nDESCRIPTION: Example showing how to run tests for a specific Hydra plugin (hydra_colorlog) using nox automation tool on Python 3.8. The command demonstrates setting environment variables to control test execution parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/testing.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ PLUGINS=hydra_colorlog nox -s test_plugins-3.8\nOperating system        :       Linux\nNOX_PYTHON_VERSIONS     :       ['3.6', '3.7', '3.8', '3.9']\nPLUGINS                 :       ['hydra_colorlog']\nSKIP_CORE_TESTS         :       False\nFIX                     :       False\nVERBOSE                 :       0\nINSTALL_EDITABLE_MODE   :       0\nnox > Running session test_plugins-3.8\n...\n```\n\n----------------------------------------\n\nTITLE: Field Existence Check in Python - Legacy Method\nDESCRIPTION: Demonstrates the deprecated method of checking field existence by comparing with None, which will no longer work with strict mode enabled.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/upgrades/0.11_to_1.0/strict_mode_flag_deprecated.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nif cfg.host is None:\n    # host is not in the config\n```\n\n----------------------------------------\n\nTITLE: MySQL YAML Config File\nDESCRIPTION: Simple YAML configuration file for MySQL database connection settings, specifying driver, user, and password.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: mysql\nuser: omry\npassword: secret\n```\n\n----------------------------------------\n\nTITLE: Displaying Type Conversion Matrix in Markdown\nDESCRIPTION: A markdown table showing the conversion results for various input types to int, float, str, and bool in Hydra. It includes numeric, string, boolean, list, dictionary, and special input types, demonstrating how they are handled in different conversion scenarios.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/override_grammar/extended.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|                    \t| int()       \t| float()           \t| str()             \t| bool()                \t|\n|--------------------\t|-------------\t|-------------------\t|-------------------\t|-----------------------\t|\n|         10         \t| 10          \t| 10.0              \t| \"10\"              \t| true                  \t|\n|          0         \t| 0           \t| 0.0               \t| \"0\"               \t| false                 \t|\n|        10.0        \t| 10          \t| 10.0              \t| \"10.0\"            \t| true                  \t|\n|         0.0        \t| 0           \t| 0.0               \t| \"0.0\"             \t| false                 \t|\n|         inf        \t| error       \t| inf               \t| 'inf'             \t| true                  \t|\n|         nan        \t| error       \t| nan               \t| 'nan'             \t| true                  \t|\n|         1e6        \t| 1,000,000   \t| 1e6               \t| '1000000.0'       \t| true                  \t|\n|         foo        \t| error       \t| error             \t| foo               \t| error                 \t|\n|  \"\" (empty string) \t| error       \t| error             \t| \"\"                \t| error                 \t|\n|        \"10\"        \t| 10          \t| 10.0              \t| \"10\"              \t| error                 \t|\n|       \"10.0\"       \t| error       \t| 10.0              \t| \"10.0\"            \t| error                 \t|\n|       \"true\"       \t| error       \t| error             \t| \"true\"            \t| true                  \t|\n|       \"false\"      \t| error       \t| error             \t| \"false\"           \t| false                 \t|\n|      \"[1,2,3]\"     \t| error       \t| error             \t| \"[1,2,3]\"         \t| error                 \t|\n|      \"{a:10}\"      \t| error       \t| error             \t| \"{a:10}\"          \t| error                 \t|\n|        true        \t| 1           \t| 1.0               \t| \"true\"            \t| true                  \t|\n|        false       \t| 0           \t| 0.0               \t| \"false\"           \t| false                 \t|\n|         []         \t| []          \t| []                \t| []                \t| []                    \t|\n|       [0,1,2]      \t| [0,1,2]     \t| [0.0,1.0,2.0]     \t| [\"0\",\"1\",\"2\"]     \t| [false,true,true]     \t|\n|       [1,[2]]      \t| [1,[2]]     \t| [1.0,[2.0]]       \t| [\"1\",[\"2\"]]       \t| [true,[true]]         \t|\n|        [a,1]       \t| error       \t| error             \t| [\"a\",\"1\"]         \t| error                 \t|\n|         {}         \t| {}          \t| {}                \t| {}                \t| {}                    \t|\n|       {a:10}       \t| {a:10}      \t| {a:10.0}          \t| {a:\"10\"}          \t| {a: true}               \t|\n|     {a:[0,1,2]}    \t| {a:[0,1,2]} \t| {a:[0.0,1.0,2.-]} \t| {a:[\"0\",\"1\",\"2\"]} \t| {a:[false,true,true]} \t|\n|    {a:10,b:xyz}    \t| error       \t| error             \t| {a:\"10\",b:\"xyz\"}  \t| error                 \t|\n|     choice(0,1)    \t| choice(0,1) \t| choice(0.0,1.0)   \t| choice(\"0\",\"1\")   \t| choice(false,true)    \t|\n|     choice(a,b)    \t| error       \t| error             \t| choice(\"a\",\"b\")   \t| error                 \t|\n|     choice(1,a)    \t| error       \t| error             \t| choice(\"1\",\"a\")   \t| error                 \t|\n| interval(1.0, 2.0) \t| interval(1, 2)| interval(1.0, 2.0)   \t| error             \t| error                 \t|\n| interval(1, 2)     \t| interval(1, 2)| interval(1.0, 2.0)   \t| error             \t| error                 \t|\n|     range(1,10)    \t| range(1,10) \t| range(1.0,10.0)   \t| error             \t| error                 \t|\n|  range(1.0, 10.0)  \t| range(1,10) \t| range(1.0,10.0)   \t| error             \t| error                 \t|\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to Use Nevergrad Sweeper in YAML\nDESCRIPTION: YAML configuration to set Nevergrad as the default sweeper in a Hydra application. This can be added to your configuration files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - hydra/sweeper: nevergrad\n```\n\n----------------------------------------\n\nTITLE: Initializing Hydra with Config Module in Python\nDESCRIPTION: API documentation for the initialize_config_module function, which initializes Hydra with a config module. It describes parameters including config_module and job_name.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/compose_api.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef initialize_config_module(config_module: str, job_name: str = \"app\") -> None:\n    \"\"\"\n    Initializes Hydra and add the config_module to the config search path.\n    The config module must be importable (an __init__.py must exist at its top level)\n    :param config_module: absolute module name, for example \"foo.bar.conf\".\n    :param job_name: the value for hydra.job.name (default is 'app')\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Jupyter Autoreload Extension in Python\nDESCRIPTION: Sets up the Jupyter notebook autoreload extension which automatically reloads imported modules before executing code. This helps during iterative development by ensuring the latest version of modules are used.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/tests/jupyter/%run_test.ipynb#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n%load_ext autoreload\n%autoreload 2\n```\n\n----------------------------------------\n\nTITLE: Range Sweep Function Signature\nDESCRIPTION: Defines the signature of the range function for sweeping over a sequence of values. Unlike Python's range, Hydra's range supports both integers and floating-point numbers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef range(\n    start: Union[int, float], stop: Union[int, float], step: Union[int, float] = 1\n) -> RangeSweep:\n    \"\"\"\n    Range is defines a sweeep over a range of integer or floating-point values.\n    For a positive step, the contents of a range r are determined by the formula\n     r[i] = start + step*i where i >= 0 and r[i] < stop.\n    For a negative step, the contents of the range are still determined by the formula\n     r[i] = start + step*i, but the constraints are i >= 0 and r[i] > stop.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Defaults List in Hydra Structured Config (Python)\nDESCRIPTION: This snippet demonstrates how to define a defaults list in a primary Structured Config, set up ConfigStore instances, and use the @hydra.main decorator. It includes dataclasses for MySQL and PostgreSQL configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\nfrom omegaconf import MISSING, OmegaConf\n\n@dataclass\nclass MySQLConfig:\n    ...\n\n@dataclass\nclass PostGreSQLConfig:\n    ...\n\ndefaults = [\n    # Load the config \"mysql\" from the config group \"db\"\n    {\"db\": \"mysql\"}\n]\n\n@dataclass\nclass Config:\n    # this is unfortunately verbose due to @dataclass limitations\n    defaults: List[Any] = field(default_factory=lambda: defaults)\n\n    # Hydra will populate this field based on the defaults list\n    db: Any = MISSING\n\ncs = ConfigStore.instance()\ncs.store(group=\"db\", name=\"mysql\", node=MySQLConfig)\ncs.store(group=\"db\", name=\"postgresql\", node=PostGreSQLConfig)\ncs.store(name=\"config\", node=Config)\n\n\n@hydra.main(config_path=None, config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Hydra Config Directory Structure\nDESCRIPTION: A text representation of the directory structure for the configuration files, showing the organization of config files in folders and subfolders.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── server\n│   ├── db\n│   │   ├── mysql.yaml\n│   │   └── sqlite.yaml\n│   └── apache.yaml\n└── config.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Hydra Main Function for Config Handling\nDESCRIPTION: Defines the main application function decorated with @hydra.main, which prints the configuration as YAML. This function is the entry point for the Hydra-managed application.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/7_dynamic_schema_many_configs.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Disabling Ray Logger Color Mode\nDESCRIPTION: Configuration to disable colored output in Ray logging.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.color_mode=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Running Hydra App with MySQL Config\nDESCRIPTION: Command line output showing the result of running the application with the MySQL database configuration option.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Using Hydra's Compose API with Context and Global Initialization\nDESCRIPTION: Example demonstrating how to use Hydra's Compose API with both context-based and global initialization approaches. The code initializes Hydra, composes a configuration with overrides, and prints the resulting configuration using OmegaConf.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/advanced/compose_api.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra import compose, initialize\nfrom omegaconf import OmegaConf\n\nif __name__ == \"__main__\":\n    # context initialization\n    with initialize(version_base=None, config_path=\"conf\", job_name=\"test_app\"):\n        cfg = compose(config_name=\"config\", overrides=[\"db=mysql\", \"db.user=me\"])\n        print(OmegaConf.to_yaml(cfg))\n\n    # global initialization\n    initialize(version_base=None, config_path=\"conf\", job_name=\"test_app\")\n    cfg = compose(config_name=\"config\", overrides=[\"db=mysql\", \"db.user=me\"])\n    print(OmegaConf.to_yaml(cfg))\n```\n\n----------------------------------------\n\nTITLE: Casting Ranges in Hydra (Extended Functionality)\nDESCRIPTION: A Hydra implementation of range casting that extends the standard Python behavior. This function casts RangeSweep objects by recursively casting their start, stop, and step attributes to integers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, RangeSweep):\n        return RangeSweep(\n            start=cast_int(value.start),\n            stop=cast_int(value.stop),\n            step=cast_int(value.step),\n        )\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Application Example using pip\nDESCRIPTION: This snippet illustrates the command to install the Hydra application example using pip. It shows the successful installation message.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/packaging.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ pip install examples/advanced/hydra_app_example\n...\nSuccessfully installed hydra-app-0.1\n```\n\n----------------------------------------\n\nTITLE: Disabling Ray Color Mode Logging\nDESCRIPTION: Configuration to disable colored output in Ray logs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.color_mode=\"false\"\n```\n\n----------------------------------------\n\nTITLE: Installing Ax Sweeper Plugin\nDESCRIPTION: Command to install the Hydra Ax Sweeper plugin via pip package manager\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ax_sweeper.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-ax-sweeper --upgrade\n```\n\n----------------------------------------\n\nTITLE: Overriding Configs with Non-Default Packages\nDESCRIPTION: Example showing how to override a config group that has a non-default package, requiring the package to be specified in the override command.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nsrc:\n  name: sqlite\ndst:\n  name: mysql\n```\n\n----------------------------------------\n\nTITLE: SLURM Launcher Configuration Parameters\nDESCRIPTION: Complete YAML configuration showing all available parameters for the SLURM launcher\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/submitit_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\nsubmitit_folder: ${hydra.sweep.dir}/.submitit/%j\ntimeout_min: 60\ncpus_per_task: null\ngpus_per_node: null\ntasks_per_node: 1\nmem_gb: null\nnodes: 1\nname: ${hydra.job.name}\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.SlurmLauncher\npartition: null\nqos: null\ncomment: null\nconstraint: null\nexclude: null\ngres: null\ncpus_per_gpu: null\ngpus_per_task: null\nmem_per_gpu: null\nmem_per_cpu: null\naccount: null\nsignal_delay_s: 120\nmax_num_timeout: 0\nadditional_parameters: {}\narray_parallelism: 256\nsetup: null\nsrun_args: null\n```\n\n----------------------------------------\n\nTITLE: Working Directory Structure Display\nDESCRIPTION: Shows the directory structure of a Hydra output directory including configuration files and logs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ tree outputs/2019-09-25/15-16-17\noutputs/2019-09-25/15-16-17\n├── .hydra\n│   ├── config.yaml\n│   ├── hydra.yaml\n│   └── overrides.yaml\n└── my_app.log\n```\n\n----------------------------------------\n\nTITLE: Loading Non-Config Group Defaults in YAML\nDESCRIPTION: This YAML snippet shows how to load a config file that doesn't belong to any config group by default.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/5_defaults.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - some_file\n```\n\n----------------------------------------\n\nTITLE: Disabling Ray Pretty-Print Logging\nDESCRIPTION: Configuration to disable pretty-print formatting in Ray logs by setting log style to record mode.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.log_style=\"record\"\n```\n\n----------------------------------------\n\nTITLE: Defining Database Config Classes in Python\nDESCRIPTION: Defines dataclasses for different database configurations including a base DBConfig, MySQLConfig, and PostGreSQLConfig. Also defines a top-level Config class containing a db field of type DBConfig.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/7_dynamic_schema_many_configs.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = MISSING\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = \"mysql\"\n    encoding: str = MISSING\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = \"postgresql\"\n    timeout: int = MISSING\n\n@dataclass\nclass Config:\n    db: DBConfig = MISSING\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration Files Structure in Hydra\nDESCRIPTION: A set of Hydra config files demonstrating a basic nested configuration structure with a main config, server config, and database configs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - server/apache\n\ndebug: false\n\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n\nname: apache\n\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: mysql\n```\n\nLANGUAGE: yaml\nCODE:\n```\nname: sqlite\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration for Hydra Config Group\nDESCRIPTION: A YAML configuration file for MySQL database connection settings. Defines basic properties like driver, user, and password that will be used when this config is selected.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: mysql\nuser: omry\npassword: secret\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining Package Specification in Hydra\nDESCRIPTION: Specifies the syntax for defining packages in Hydra, including global, group, and name components.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/overriding_packages.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPACKAGE      : _global_ | COMPONENT[.COMPONENT]*\nCOMPONENT    : _group_ | _name_ | \\w+\n\n_global_     : the top level package (equivalent to the empty string).\n_group_      : the config group in dot notation: foo/bar/zoo.yaml -> foo.bar\n_name_       : the config file name: foo/bar/zoo.yaml -> zoo\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Tasks in Parallel with Hydra and Joblib\nDESCRIPTION: Example console output showing how to launch multiple parallel tasks using the Joblib launcher with Hydra's multirun option.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/joblib_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3,4,5\n[HYDRA] Joblib.Parallel(n_jobs=-1,verbose=0,timeout=None,pre_dispatch=2*n_jobs,batch_size=auto,temp_folder=None,max_nbytes=None,mmap_mode=r,backend=loky) is launching 5 jobs\n[HYDRA] Launching jobs, sweep output dir : multirun/2020-02-18/10-00-00\n[__main__][INFO] - Process ID 14336 executing task 2 ...\n[__main__][INFO] - Process ID 14333 executing task 1 ...\n[__main__][INFO] - Process ID 14334 executing task 3 ...\n[__main__][INFO] - Process ID 14335 executing task 4 ...\n[__main__][INFO] - Process ID 14337 executing task 5 ...\n```\n\n----------------------------------------\n\nTITLE: Basic YAML Config File Example\nDESCRIPTION: Demonstrates the structure of a simple YAML configuration file defining user properties.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n  name: James Bond\n  age: 7\n```\n\n----------------------------------------\n\nTITLE: Current Hydra Config Group Override (1.1+)\nDESCRIPTION: Shows the current recommended way to override Hydra config groups using the explicit 'override' keyword, which became mandatory in version 1.1 and will be enforced in version 1.2.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - override hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Multirun Directory Configuration with Job Name\nDESCRIPTION: Configuration for organizing multirun output by job name with numbered subdirectories.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweep:\n    dir: ${hydra.job.name}\n    subdir: ${hydra.job.num}\n```\n\n----------------------------------------\n\nTITLE: Command Line Override Example\nDESCRIPTION: Demonstrates using overrides via command line to modify config values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py key=value\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database in Hydra (Before @package)\nDESCRIPTION: YAML configuration for a MySQL database before adding the @package directive. This example shows the old structure with a common parent path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/0.11_to_1.0/adding_a_package_directive.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n  host: localhost\n  port: 3306\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled Logging in Hydra YAML\nDESCRIPTION: Example showing how to disable logging by setting the level to CRITICAL. This configuration demonstrates how to minimize log output when it's not needed.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.job_logging\n# ...\nroot:\n  level: CRITICAL\n```\n\n----------------------------------------\n\nTITLE: Viewing Local Launcher Configuration Parameters\nDESCRIPTION: YAML output showing all available configuration parameters for the Submitit local launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.LocalLauncher\nsubmitit_folder: ${hydra.sweep.dir}/.submitit/%j\ntimeout_min: 60\ncpus_per_task: 1\ngpus_per_node: 0\ntasks_per_node: 1\nmem_gb: 4\nnodes: 1\nname: ${hydra.job.name}\n```\n\n----------------------------------------\n\nTITLE: Running a Multi-run Job with Submitit Launcher\nDESCRIPTION: Example of executing a Hydra application with multirun using the Submitit launcher to run three different tasks.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py task=1,2,3 --multirun\n[HYDRA] Sweep output dir : multirun/2020-05-28/15-05-22\n[HYDRA]        #0 : task=1\n[HYDRA]        #1 : task=2\n[HYDRA]        #2 : task=3\n```\n\n----------------------------------------\n\nTITLE: Hydra Sweeper Plugin Configuration\nDESCRIPTION: Example of how sweeper plugin configuration has changed between Hydra 0.11 and 1.0. The new version eliminates the params node from the command line override path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/0.11_to_1.0/object_instantiation_changes.md#2025-04-07_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\nhydra.sweeper.params.max_batch_size=10\n```\n\nLANGUAGE: shell script\nCODE:\n```\nhydra.sweeper.max_batch_size=10\n```\n\n----------------------------------------\n\nTITLE: Installing Nevergrad Sweeper Plugin for Hydra\nDESCRIPTION: Command to install the Hydra Nevergrad Sweeper plugin via pip. This is required before using the plugin in your Hydra applications.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-nevergrad-sweeper --upgrade\n```\n\n----------------------------------------\n\nTITLE: Defining Config Group for Database in Python\nDESCRIPTION: This snippet demonstrates how to define database config classes and create a config group using ConfigStore in Hydra. It includes MySQL and PostgreSQL configurations, and shows how to set up a main Config class with a database field.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/3_config_groups.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass MySQLConfig:\n    driver: str = \"mysql\"\n    host: str = \"localhost\"\n    port: int = 3306\n\n@dataclass\nclass PostGreSQLConfig:\n    driver: str = \"postgresql\"\n    host: str = \"localhost\"\n    port: int = 5432\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    # Keep db omegaconf.MISSING. We will populate it using composition.\n    db: Any = MISSING\n\n# Create config group `db` with options 'mysql' and 'postgreqsl'\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=Config)\ncs.store(group=\"db\", name=\"mysql\", node=MySQLConfig)\ncs.store(group=\"db\", name=\"postgresql\", node=PostGreSQLConfig)\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    print(OmegaConf.to_yaml(cfg))\n```\n\n----------------------------------------\n\nTITLE: Overriding Config Values in Hydra from Command Line\nDESCRIPTION: Example of overriding values in a loaded Hydra configuration using command line arguments without a prefix, showing both the command and resulting output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db.user=root db.password=1234\ndb:\n  driver: mysql\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: Creating a Structured Config Schema with Python Dataclass\nDESCRIPTION: Example of using Python dataclasses to define a schema for configuration validation in Hydra, specifying type information for a User class.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n  name: str\n  age: int\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multi-Run Logging in Hydra YAML\nDESCRIPTION: Configuration for Hydra's multi-run scenario logging. This shows how logging works when running multiple jobs and how to configure the hydra_logging component.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.hydra_logging\nversion: 1\nformatters:\n  simple:\n    format: '[%(asctime)s][HYDRA] %(message)s'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\nroot:\n  level: INFO\n  handlers: [console]\n\nloggers:\n  hydra:\n    level: INFO\n```\n\n----------------------------------------\n\nTITLE: Defining a Defaults List in YAML Config\nDESCRIPTION: Example of a defaults list in a YAML configuration that specifies both overridable and non-overridable configuration options to include in the composition.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql      # An overridable defaults list entry\n  - schema/school  # A non-overridable defaults list entry\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Development Dependencies and Package\nDESCRIPTION: Commands to install development dependencies from the requirements file and install Hydra in development (editable) mode for making changes to the source code.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/overview.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# install development dependencies\npip install -r requirements/dev.txt\n# install Hydra in development (editable) mode\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Main Function in Python\nDESCRIPTION: This Python code demonstrates how to set up the main function for a Hydra application, specifying the config path and name.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/5_defaults.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None, config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Linking to Hydra Documentation in Markdown\nDESCRIPTION: This snippet includes a Markdown link to the Hydra documentation website, specifically pointing to the Ax Sweeper plugin page for more detailed information.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_ax_sweeper/README.md#2025-04-07_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[website](https://hydra.cc/docs/plugins/ax_sweeper/)\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Application Example in Python\nDESCRIPTION: This snippet shows how to run the example Hydra application. It demonstrates the output of the application, which includes the dataset configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/packaging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ python examples/advanced/hydra_app_example/hydra_app/main.py\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\n```\n\n----------------------------------------\n\nTITLE: Viewing Output Directory Structure after Multi-run Execution\nDESCRIPTION: Terminal commands showing the directory structure created by a multi-run job and the content of a log file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\n$ tree\n.\n├── 0\n│   └── my_app.log\n├── 1\n│   └── my_app.log\n├── 2\n│   └── my_app.log\n└── multirun.yaml\n\n$ cat 0/my_app.log \n[2020-05-28 15:05:23,511][__main__][INFO] - Process ID 15887 executing task 1 ...\n[2020-05-28 15:05:24,514][submitit][INFO] - Job completed successfully\n```\n\n----------------------------------------\n\nTITLE: Installing Docusaurus Dependencies for Hydra Website\nDESCRIPTION: Command to install all required dependencies for the Hydra documentation website using Yarn. Must be run from the website directory of the project.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/documentation.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Integer Interval Search Space\nDESCRIPTION: Command to configure an integer interval search space for optimization.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\npython example/sphere.py --multirun 'x=int(interval(-5.0, 5.0))' 'y=tag(log, interval(1, 10))'\n```\n\n----------------------------------------\n\nTITLE: Building All Hydra Plugins\nDESCRIPTION: Demonstrates the command to build all Hydra plugins, showing the build process for multiple plugins in sequence.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/tools/release/README.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python tools/release/release.py  action=build set=plugins\n[2021-03-30 18:21:40,426][__main__][INFO] - Build outputs : /home/omry/dev/hydra/outputs/2021-03-30/18-21-40/build\n[2021-03-30 18:21:40,426][__main__][INFO] - Building unpublished packages\n[2021-03-30 18:21:41,280][__main__][INFO] - Building hydra-ax-sweeper\n[2021-03-30 18:21:47,237][__main__][INFO] - Building hydra-colorlog\n[2021-03-30 18:21:52,982][__main__][INFO] - Building hydra-joblib-launcher\n[2021-03-30 18:21:58,833][__main__][INFO] - Building hydra-nevergrad-sweeper\n[2021-03-30 18:22:04,618][__main__][INFO] - Building hydra-optuna-sweeper\n[2021-03-30 18:22:10,511][__main__][INFO] - Building hydra-ray-launcher\n[2021-03-30 18:22:16,487][__main__][INFO] - Building hydra-rq-launcher\n[2021-03-30 18:22:22,302][__main__][INFO] - Building hydra-submitit-launcher\n```\n\n----------------------------------------\n\nTITLE: Example YAML Config File Structure in Hydra\nDESCRIPTION: A basic example of a YAML configuration file used in Hydra that defines user properties including name and age.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n  name: James Bond\n  age: 7\n```\n\n----------------------------------------\n\nTITLE: Hydra Composed Configuration Output\nDESCRIPTION: Example of the final composed configuration output showing the merged result of mysql database, full UI, and school schema settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n  user: omry\n  pass: secret\nui:\n  windows:\n    create_db: true\n    view: true\nschema:\n  database: school\n  tables:\n  - name: students\n    fields:\n    - name: string\n    - class: int\n  - name: exams\n    fields:\n    - profession: string\n    - time: data\n    - class: int\n```\n\n----------------------------------------\n\nTITLE: Recursively Instantiating Trainer Object in Python\nDESCRIPTION: This code snippet shows how to use Hydra's instantiate() function to create a Trainer object with nested Optimizer and Dataset objects, including examples of overriding nested parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntrainer = instantiate(cfg.trainer)\nprint(trainer)\n# Trainer(\n#  optimizer=Optimizer(algo=SGD,lr=0.01),\n#  dataset=Dataset(name=Imagenet, path=/datasets/imagenet)\n# )\n\ntrainer = instantiate(\n    cfg.trainer,\n    optimizer={\"lr\": 0.3},\n    dataset={\"name\": \"cifar10\", \"path\": \"/datasets/cifar10\"},\n)\nprint(trainer)\n# Trainer(\n#   optimizer=Optimizer(algo=SGD,lr=0.3),\n#   dataset=Dataset(name=cifar10, path=/datasets/cifar10)\n# )\n\nobj = instantiate(\n    cfg.object,\n    # pass 1 and 2 as positional arguments to the target object\n    1, 2,  \n    # pass 3 and 4 as positional arguments to a nested child object\n    child={\"_args_\": [3, 4]},\n)\n```\n\n----------------------------------------\n\nTITLE: Running a Hydra Application from Command Line\nDESCRIPTION: Demonstrates running the example app from the command line. The output shows that the PickleJobInfoCallback is saving the job configuration to a pickle file in the .hydra subdirectory of the output directory.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py\n[2022-03-16 14:51:30,905][hydra.experimental.pickle_job_info_callback][INFO] - Saving job configs in /Users/jieru/workspace/hydra/examples/experimental/outputs/2022-03-16/14-51-30/.hydra/config.pickle\n[2022-03-16 14:51:30,906][__main__][INFO] - Output_dir=/Users/jieru/workspace/hydra/examples/experimental/outputs/2022-03-16/14-51-30\n[2022-03-16 14:51:30,906][__main__][INFO] - cfg.foo=bar\n[2022-03-16 14:51:30,906][hydra.experimental.pickle_job_info_callback][INFO] - Saving job_return in /Users/jieru/workspace/hydra/examples/experimental/outputs/2022-03-16/14-51-30/.hydra/job_return.pickle\n```\n\n----------------------------------------\n\nTITLE: Basic Hydra App Configuration\nDESCRIPTION: Example of a basic Hydra application setup using the @hydra.main decorator with config path specification.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/search_path.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Defining Override Parser Grammar in ANTLR4\nDESCRIPTION: Defines the grammar rules for Hydra's override syntax parser, including rules for keys, values, functions, data structures, and primitive types. This grammar forms the domain-specific language used for configuration overrides.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/override_grammar/basic.md#2025-04-07_snippet_0\n\nLANGUAGE: antlr4\nCODE:\n```\n// High-level command-line override.\n\noverride: (\n      key EQUAL value?                           // key=value, key= (for empty value)\n    | TILDE key (EQUAL value?)?                  // ~key | ~key=value\n    | PLUS PLUS? key EQUAL value?                // +key= | +key=value | ++key=value\n) EOF;\n\n// Key:\nkey : packageOrGroup (AT package)?;              // key | group@pkg\n\npackageOrGroup: package | ID (SLASH ID)+;        // db, hydra/launcher\npackage: ( | ID | KEY_SPECIAL | DOT_PATH);       // db, $db, hydra.launcher, or the empty (for _global_ package)\n\n// Elements (that may be swept over).\n\nvalue: element | simpleChoiceSweep;\n\nelement:\n      primitive\n    | listContainer\n    | dictContainer\n    | function\n;\n\nsimpleChoiceSweep:\n      element (COMMA element)+                   // value1,value2,value3\n;\n\n// Functions.\n\nargName: ID EQUAL;\nfunction: ID POPEN (argName? element (COMMA argName? element )* )? PCLOSE;\n\n// Data structures.\n\nlistContainer: BRACKET_OPEN                      // [], [1,2,3], [a,b,[1,2]]\n    (element(COMMA element)*)?\nBRACKET_CLOSE;\n\ndictContainer: BRACE_OPEN (dictKeyValuePair (COMMA dictKeyValuePair)*)? BRACE_CLOSE;  // {}, {a:10,b:20}\ndictKeyValuePair: dictKey COLON element;\n\n// Primitive types.\n\nprimitive:\n      QUOTED_VALUE                               // 'hello world', \"hello world\"\n    | (   ID                                     // foo-bar_10\n        | NULL                                   // null, NULL\n        | INT                                    // 0, 10, -20, 1_000_000\n        | FLOAT                                  // 3.14, -20.0, 1e-1, -10e3\n        | BOOL                                   // true, TrUe, false, False\n        | INTERPOLATION                          // ${foo.bar}, ${oc.env:USER,me}\n        | UNQUOTED_CHAR                          // /, -, \\, +, ., $, %, *, @, ?, |\n        | COLON                                  // :\n        | ESC                                    // \\\\, \\(, \\), \\[, \\], \\{, \\}, \\:, \\=, \\ , \\\\t, \\,\n        | WS                                     // whitespaces\n    )+;\n\n// Same as `primitive` except that `COLON` and `INTERPOLATION` are not allowed.\ndictKey:\n    (   ID                                     // foo-bar_10\n      | NULL                                   // null, NULL\n      | INT                                    // 0, 10, -20, 1_000_000\n      | FLOAT                                  // 3.14, -20.0, 1e-1, -10e3\n      | BOOL                                   // true, TrUe, false, False\n      | UNQUOTED_CHAR                          // /, -, \\, +, ., $, %, *, @, ?, |\n      | ESC                                    // \\\\, \\(, \\), \\[, \\], \\{, \\}, \\:, \\=, \\ , \\\\t, \\,\n      | WS                                     // whitespaces\n    )+;\n```\n\n----------------------------------------\n\nTITLE: Hydra Application with ConfigStore Integration\nDESCRIPTION: Enhanced version of the previous example that adds a PostgreSQL config option using ConfigStore. This demonstrates how ConfigStore can be used alongside YAML configs to register structured configuration classes.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass PostgresSQLConfig:\n    driver: str = \"postgresql\"\n    user: str = \"jieru\"\n    password: str = \"secret\"\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name `postgresql` with the config group `db`\ncs.store(name=\"postgresql\", group=\"db\", node=PostgresSQLConfig)\n\n@hydra.main(version_base=None, config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Initializing Hydra with Relative Path in Python\nDESCRIPTION: API documentation for the initialize function, which initializes Hydra with a config path relative to the caller. It describes parameters including config_path, job_name, and caller_stack_depth.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/compose_api.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef initialize(\n    config_path: Optional[str] = None,\n    job_name: Optional[str] = \"app\",\n    caller_stack_depth: int = 1,\n) -> None:\n    \"\"\"\n    Initializes Hydra and add the config_path to the config search path.\n    config_path is relative to the parent of the caller.\n    Hydra detects the caller type automatically at runtime.\n\n    Supported callers:\n    - Python scripts\n    - Python modules\n    - Unit tests\n    - Jupyter notebooks.\n    :param config_path: path relative to the parent of the caller\n    :param job_name: the value for hydra.job.name (By default it is automatically detected based on the caller)\n    :param caller_stack_depth: stack depth of the caller, defaults to 1 (direct caller).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuration Directory Structure\nDESCRIPTION: Shows the directory structure for configuration files including main config and environment-specific database configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/6_static_schema_many_configs.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n├── config.yaml\n└── db\n    ├── prod.yaml\n    ├── qa.yaml\n    └── staging.yaml\n```\n\n----------------------------------------\n\nTITLE: Literal Package Specification Migration Example\nDESCRIPTION: Shows how to migrate from using _group_._name_ package header to explicit package naming in Hydra 1.1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_._name_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package db.mysql\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Package Directive Example\nDESCRIPTION: Example of using a package directive at the top of a config file to specify an absolute package path, overriding the default derived from the config group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# @package foo.bar\nname: mysql\n```\n\n----------------------------------------\n\nTITLE: Discovering Ray AWS Launcher Configuration\nDESCRIPTION: Command to view the full configuration schema for the Ray AWS launcher plugin. This displays all available configuration options including cluster settings, environment setup, and synchronization options.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py hydra/launcher=ray_aws --cfg hydra -p hydra.launcher\n# @package hydra.launcher\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_ray_launcher.ray_aws_launcher.RayAWSLauncher\nenv_setup:\n  pip_packages:\n    omegaconf: ${ray_pkg_version:omegaconf}\n    hydra_core: ${ray_pkg_version:hydra}\n    ray: ${ray_pkg_version:ray}\n    cloudpickle: ${ray_pkg_version:cloudpickle}\n    pickle5: 0.0.11\n    hydra_ray_launcher: 1.2.0.dev1\n  commands:\n  - conda create -n hydra_${python_version:micro} python=${python_version:micro} -y\n  - echo 'export PATH=\"$HOME/anaconda3/envs/hydra_${python_version:micro}/bin:$PATH\"'\n    >> ~/.bashrc\nray:\n  init:\n    address: null\n  remote: {}\n  cluster:\n    cluster_name: default\n    min_workers: 0\n    upscaling_speed: 1.0\n    max_workers: 1\n    initial_workers: 0\n    autoscaling_mode: default\n    target_utilization_fraction: 0.8\n    idle_timeout_minutes: 5\n    docker:\n      image: ''\n      container_name: ''\n      pull_before_run: true\n      run_options: []\n    provider:\n      type: aws\n      region: us-west-2\n      availability_zone: us-west-2a,us-west-2b\n      cache_stopped_nodes: false\n      key_pair:\n        key_name: hydra-${oc.env:USER,user}\n    auth:\n      ssh_user: ubuntu\n    available_node_types:\n      ray.head.default:\n        resources: {}\n        node_config:\n          InstanceType: m5.large\n          ImageId: ami-0a2363a9cff180a64\n      ray.worker.default:\n        min_workers: 0\n        max_workers: 2\n        resources: {}\n        node_config:\n          InstanceType: m5.large\n          ImageId: ami-0a2363a9cff180a64\n          InstanceMarketOptions:\n            MarketType: spot\n    head_node_type: ray.head.default\n    file_mounts: {}\n    initialization_commands: []\n    cluster_synced_files: []\n    setup_commands: []\n    head_setup_commands: []\n    worker_setup_commands: []\n    head_start_ray_commands:\n    - ray stop\n    - ulimit -n 65536;ray start --head --port=6379 --object-manager-port=8076             --autoscaling-config=~/ray_bootstrap_config.yaml\n    worker_start_ray_commands:\n    - ray stop\n    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076\n  run_env: auto\nstop_cluster: true\nsync_up:\n  source_dir: null\n  target_dir: null\n  include: []\n  exclude: []\nsync_down:\n  source_dir: null\n  target_dir: null\n  include: []\n  exclude: []\nlogging:\n  log_style: auto\n  color_mode: auto\n  verbosity: 0\ncreate_update_cluster:\n  no_restart: false\n  restart_only: false\n  no_config_cache: false\nteardown_cluster:\n  workers_only: false\n  keep_min_workers: false\n```\n\n----------------------------------------\n\nTITLE: Using Overrides with Hydra Compose API\nDESCRIPTION: Shows how to use overrides programmatically with Hydra's Compose API to modify configuration values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncfg = compose(config_name, \n              overrides=[\"key=value\"])\n```\n\n----------------------------------------\n\nTITLE: Discovering Ray AWS Launcher Configuration\nDESCRIPTION: Command to display the full configuration of the Ray AWS launcher, including environment setup, Ray cluster settings, and sync options.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py hydra/launcher=ray_aws --cfg hydra -p hydra.launcher\n```\n\n----------------------------------------\n\nTITLE: Hydra Object Instantiation in Python\nDESCRIPTION: Python code showing how to use Hydra to instantiate database connection objects from configuration using the @hydra.main decorator.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg):\n    connection = hydra.utils.instantiate(cfg.db)\n    connection.connect()\n```\n\n----------------------------------------\n\nTITLE: BibTeX Citation for Hydra Framework\nDESCRIPTION: BibTeX entry for citing Hydra in research publications. This provides the proper attribution format for the Hydra framework.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/intro.md#2025-04-07_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n@Misc{Yadan2019Hydra,\n  author =       {Omry Yadan},\n  title =        {Hydra - A framework for elegantly configuring complex applications},\n  howpublished = {Github},\n  year =         {2019},\n  url =          {https://github.com/facebookresearch/hydra}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Launcher in YAML configuration\nDESCRIPTION: YAML configuration example showing how to set Ray AWS as the default launcher by overriding the hydra/launcher config. This is an alternative to specifying the launcher on the command line.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: ray_aws\n```\n\n----------------------------------------\n\nTITLE: Checking Specific Package Versions\nDESCRIPTION: Shows how to check specific Hydra packages (hydra-core and hydra-configen) against their published versions on PyPI.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/tools/release/README.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ python tools/release/release.py  action=check packages=[hydra,configen]\n[2021-03-30 18:21:25,423][__main__][INFO] - Build outputs : /home/omry/dev/hydra/outputs/2021-03-30/18-21-25/build\n[2021-03-30 18:21:25,423][__main__][INFO] - Checking for unpublished packages\n[2021-03-30 18:21:26,042][__main__][INFO] - ❋ : hydra-core : newer (local=1.1.0.dev6 > latest=1.1.0.dev5)\n[2021-03-30 18:21:26,497][__main__][INFO] - ❋ : hydra-configen : newer (local=0.9.0.dev8 > latest=0.9.0.dev7)\n```\n\n----------------------------------------\n\nTITLE: Implementing Object Instantiation with Hydra Structured Configs in Python\nDESCRIPTION: This example demonstrates creating database connection classes and corresponding configuration classes using Hydra's Structured Configs. It shows how to set up a ConfigStore to register configurations and use Hydra's instantiate function to create objects from config.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/structured_config.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DBConnection:\n    def __init__(self, driver: str, host: str, port: int) -> None:\n        self.driver = driver\n        self.host = host\n        self.port = port\n\n    def connect(self) -> None:\n        print(f\"{self.driver} connecting to {self.host}\")\n\nclass MySQLConnection(DBConnection):\n    def __init__(self, driver: str, host: str, port: int) -> None:\n        super().__init__(driver=driver, host=host, port=port)\n\nclass PostgreSQLConnection(DBConnection):\n    def __init__(self, driver: str, host: str, port: int, timeout: int) -> None:\n        super().__init__(driver=driver, host=host, port=port)\n        self.timeout = timeout\n\n@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = \"localhost\"\n    port: int = 80\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    _target_: str = \"my_app.MySQLConnection\"\n    driver: str = \"MySQL\"\n    port: int = 1234\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    _target_: str = \"my_app.PostgreSQLConnection\"\n    driver: str = \"PostgreSQL\"\n    port: int = 5678\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    defaults: List[Any] = field(default_factory=lambda: [{\"db\": \"mysql\"}])\n    db: DBConfig = MISSING\n\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=Config)\ncs.store(group=\"db\", name=\"mysql\", node=MySQLConfig)\ncs.store(group=\"db\", name=\"postgresql\", node=PostGreSQLConfig)\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    connection = instantiate(cfg.db)\n    connection.connect()\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Cross-Version Compatibility Example\nDESCRIPTION: Illustrates how to maintain compatibility between Hydra 1.0 and 1.1 using literal package headers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package db\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Activating the Conda Environment for Hydra\nDESCRIPTION: Command to activate the previously created conda environment for Hydra development.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/overview.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nconda activate hydra38\n```\n\n----------------------------------------\n\nTITLE: Displaying Multi-Objective Optimization Configuration\nDESCRIPTION: Command to show the configuration for multi-objective optimization using Optuna sweeper.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_8\n\nLANGUAGE: commandline\nCODE:\n```\npython example/multi-objective.py hydra/sweeper=optuna --cfg hydra -p hydra.sweeper\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Ray Launcher package with pip\nDESCRIPTION: Command for installing the Hydra Ray Launcher plugin via pip. This installs the necessary dependencies to use both ray_aws and ray launchers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\n$ pip install hydra-ray-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Installing RQ Launcher Plugin\nDESCRIPTION: Command to install the Hydra RQ Launcher plugin using pip package manager.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-rq-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Structured Config Schema Example\nDESCRIPTION: Demonstrates using Structured Config as a schema with proper _self_ placement in the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\\nclass Config:\\n  host: str = \"localhost\"\\n  port: int = 8080\\n\\ncs.store(name=\"base_config\", \\n         node=Config)\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\\n - base_config  # schema\\n - _self_       # after schema\\n\\nport: 3306\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhost: localhost # schema\\nport: 3306      # config.yaml\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Configuration in Hydra\nDESCRIPTION: Comparison of MySQL connection configuration between Hydra 0.11 and 1.0. Shows the simplified structure in 1.0 where the params node is removed and configuration parameters are moved to the root level.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/object_instantiation_changes.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: my_app.MySQLConnection\nparams:\n  host: localhost\n  user: root\n  password: 1234\n```\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.MySQLConnection\nhost: localhost\nuser: root\npassword: 1234\n```\n\n----------------------------------------\n\nTITLE: Supported Types in Structured Configs Documentation\nDESCRIPTION: List of primitive types and containers supported by Hydra's Structured Configs implementation, including basic Python types, containers, and nested configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/0_intro.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Primitive types (`int`, `bool`, `float`, `str`, `Enums`, `bytes`, `pathlib.Path`) \n- Nesting of Structured Configs\n- Containers (List and Dict) containing primitives, Structured Configs, or other lists/dicts\n- Optional fields\n```\n\n----------------------------------------\n\nTITLE: Installing Ray Launcher Plugin\nDESCRIPTION: Command to install the Hydra Ray Launcher plugin via pip package manager.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/ray_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\n$ pip install hydra-ray-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Double and Single Quoted Values in Python\nDESCRIPTION: Shows examples of how double and single quotes work in Hydra overrides, including escaping special characters in quoted strings. The examples illustrate how to handle quotes, backslashes, and other special characters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/override_grammar/basic.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n\"hello there\"\n\"escaped \\\"double quote\\\"\"\n\"the path is C:\\\\\\\"some folder\\\"\\\\\"\n\"1,2,3\"\n\"{a:10} ${xyz}\"\n\"'single quoted string'\"\n```\n\nLANGUAGE: python\nCODE:\n```\n'hello there'\n'escaped \\'single quote\\''\n'the path is C:\\\\\\'some folder\\'\\\\'\n'1,2,3'\n'{a:10} ${xyz}'\n'\"double quoted string\"'\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection Classes in Python\nDESCRIPTION: Defines base DBConnection class and two implementations for MySQL and PostgreSQL connections with connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DBConnection:\n    def connect(self):\n        ...\n\nclass MySQLConnection(DBConnection):\n    def __init__(self, host: str, user: str, password: str) -> None:\n        self.host = host\n        self.user = user\n        self.password = password\n\n    def connect(self) -> None:\n        print(f\"MySQL connecting to {self.host}\")\n\n\nclass PostgreSQLConnection(DBConnection):\n    def __init__(self, host: str, user: str, password: str, database: str) -> None:\n        self.host = host\n        self.user = user\n        self.password = password\n        self.database = database\n\n    def connect(self) -> None:\n        print(f\"PostgreSQL connecting to {self.host}\")\n```\n\n----------------------------------------\n\nTITLE: Running Training with File Sync on Ray AWS\nDESCRIPTION: Example command to run a training script with multiple random seeds, demonstrating file synchronization between local and remote clusters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\n$  python train.py --multirun random_seed=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set environment variables for a Hydra job. It shows an example of disabling multithreading in Intel IPP and MKL by setting OMP_NUM_THREADS to 1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/configure_hydra/job.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      OMP_NUM_THREADS: 1\n```\n\n----------------------------------------\n\nTITLE: Increasing Ray Logging Verbosity\nDESCRIPTION: Configuration to increase the verbosity level of Ray logs to level 3.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.verbosity=3\n```\n\n----------------------------------------\n\nTITLE: Python vs Hydra: Casting Lists\nDESCRIPTION: Compares list casting behavior between Python and Hydra. Python doesn't support casting a list directly to a primitive type, while Hydra recursively casts each element of the list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, list):\n        raise TypeError()\n    else:\n        return int(v)\n\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(v, list):\n        return list(map(cast_int, v))\n    else:\n        return int(v)\n\n\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Conversion Strategies in Python\nDESCRIPTION: This code snippet illustrates the different parameter conversion strategies ('none', 'partial', and 'all') available in Hydra's instantiate() function, showing how they affect the types of nested objects.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\nfrom omegaconf import DictConfig, OmegaConf\nfrom hydra.utils import instantiate\n\n@dataclass\nclass Foo:\n    a: int = 123\n\nclass MyTarget:\n    def __init__(self, foo, bar):\n        self.foo = foo\n        self.bar = bar\n\ncfg = OmegaConf.create(\n    {\n        \"_target_\": \"__main__.MyTarget\",\n        \"foo\": Foo(),\n        \"bar\": {\"b\": 456},\n    }\n)\n\nobj_none = instantiate(cfg, _convert_=\"none\")\nassert isinstance(obj_none, MyTarget)\nassert isinstance(obj_none.foo, DictConfig)\nassert isinstance(obj_none.bar, DictConfig)\n\nobj_partial = instantiate(cfg, _convert_=\"partial\")\nassert isinstance(obj_partial, MyTarget)\nassert isinstance(obj_partial.foo, DictConfig)\nassert isinstance(obj_partial.bar, dict)\n\nobj_all = instantiate(cfg, _convert_=\"all\")\nassert isinstance(obj_none, MyTarget)\nassert isinstance(obj_all.foo, dict)\nassert isinstance(obj_all.bar, dict)\n\ncfg_none = OmegaConf.create({..., \"_convert_\": \"none\"})\nobj_none = instantiate(cfg_none)\n\ncfg_partial = OmegaConf.create({..., \"_convert_\": \"partial\"})\nobj_partial = instantiate(cfg_partial)\n\ncfg_all = OmegaConf.create({..., \"_convert_\": \"all\"})\nobj_all = instantiate(cfg_all)\n```\n\n----------------------------------------\n\nTITLE: Comparing Hydra Sweeper Configuration in 1.1 vs 1.2\nDESCRIPTION: A side-by-side comparison of how to configure a search space in Hydra 1.1 (using 'hydra.sweeper.search_space' with type definitions) versus Hydra 1.2 (using 'hydra.sweeper.params' with function-like syntax that matches commandline override patterns).\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.1_to_1.2/changes_to_sweeper_config.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweeper:\n    search_space:\n      search_space:\n        x:\n          type: float\n          low: -5.5\n          high: 5.5\n          step: 0.5\n        'y':\n          type: categorical\n          choices:\n          - -5\n          - 0\n          - 5\n```\n\nLANGUAGE: bash\nCODE:\n```\nhydra:\n  sweeper:\n    params:\n      x: range(-5.5, 5.5, step=0.5)\n      y: choice(-5, 0, 5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Joblib Launcher in YAML\nDESCRIPTION: YAML configuration to override the default Hydra launcher with Joblib launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/joblib_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: joblib\n```\n\n----------------------------------------\n\nTITLE: Default Configuration for RQ Launcher in Hydra\nDESCRIPTION: YAML configuration showing the default settings for the RQ Launcher plugin in Hydra. It includes options for job timeout, queue settings, Redis connection details, and polling intervals.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/rq_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_rq_launcher.rq_launcher.RQLauncher\nenqueue:\n  job_timeout: null\n  ttl: null\n  result_ttl: null\n  failure_ttl: null\n  at_front: false\n  job_id: null\n  description: null\nqueue: default\nredis:\n  host: ${env:REDIS_HOST,localhost}\n  port: ${env:REDIS_PORT,6379}\n  db: ${env:REDIS_DB,0}\n  password: ${env:REDIS_PASSWORD,}\n  mock: ${env:REDIS_MOCK,False}\nstop_after_enqueue: false\nwait_polling: 1.0\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Database in Hydra (After @package)\nDESCRIPTION: YAML configuration for a MySQL database after adding the @package directive. The common parent path is removed, and the _group_ package is specified.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/0.11_to_1.0/adding_a_package_directive.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\ndriver: mysql\nhost: localhost\nport: 3306\n```\n\n----------------------------------------\n\nTITLE: Initial Hydra Configuration Structure\nDESCRIPTION: Basic configuration setup with dataset and model defaults\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/patterns/specializing_config.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n```\n\n----------------------------------------\n\nTITLE: Implementing Tag Function in Hydra\nDESCRIPTION: Definition and examples of tag function in Hydra, allowing addition of metadata to sweeps.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef tag(*args: Union[str, Union[Sweep]], sweep: Optional[Sweep] = None) -> Sweep:\n    \"\"\"\n    Tags the sweep with a list of string tags.\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\ntag(log,interval(0,1))          # 1.0 <= x < 1.0, tags=[log]\ntag(foo,bar,interval(0,1))      # 1.0 <= x < 1.0, tags=[foo,bar]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Launcher in YAML\nDESCRIPTION: YAML configuration to override the default Hydra launcher with the Ray AWS launcher. This can be added to a Hydra configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: ray_aws\n```\n\n----------------------------------------\n\nTITLE: Running mypy for Static Type Checking in Python\nDESCRIPTION: This snippet shows the output of running mypy on the previous code. It demonstrates how static type checking can catch the 'pork' typo before runtime.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ mypy my_app_type_error.py\nmy_app_type_error.py:22: error: \"MySQLConfig\" has no attribute \"pork\"\nFound 1 error in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Installing RQ Launcher Plugin for Hydra\nDESCRIPTION: Command to install the RQ Launcher plugin for Hydra using pip. This installs or upgrades the hydra-rq-launcher package.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/rq_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-rq-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Extending Lists in Hydra Configuration\nDESCRIPTION: Definition and example of extending lists in Hydra configuration using the extend_list function.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef extend_list(*args: Any) -> ListExtensionOverrideValue:\n    \"\"\"\n    Extends an existing list in the config with the given values.\n    \"\"\"\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- database\n- log\n```\n\nLANGUAGE: yaml\nCODE:\n```\ntags:\n- database\n- log\n- extended\n- experimental\n```\n\n----------------------------------------\n\nTITLE: Configuring Trainer with Nested Objects in YAML\nDESCRIPTION: This YAML configuration defines a Trainer object with nested Optimizer and Dataset objects, demonstrating the structure for recursive instantiation.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ntrainer:\n  _target_: my_app.Trainer\n  optimizer:\n    _target_: my_app.Optimizer\n    algo: SGD\n    lr: 0.01\n  dataset:\n    _target_: my_app.Dataset\n    name: Imagenet\n    path: /datasets/imagenet\n```\n\n----------------------------------------\n\nTITLE: Examples of Tag Usage\nDESCRIPTION: Demonstrates how to add tags to sweeps, which can add metadata that might be used by specialized sweepers to control their behavior or optimization strategies.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntag(log,interval(0,1))          # 1.0 <= x < 1.0, tags=[log]\ntag(foo,bar,interval(0,1))      # 1.0 <= x < 1.0, tags=[foo,bar]\n```\n\n----------------------------------------\n\nTITLE: Disabling Bash Expansions for Hydra Command-Line Usage\nDESCRIPTION: This snippet shows how to disable brace expansion, filename generation (globbing), and history expansion in Bash. It demonstrates the effect on command output and notes the limitation with parentheses.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/override_grammar/basic.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ set +o braceexpand -o noglob +o histexpand\n$ echo key1={a:10,b:20} key2=${HOME} key=[b]*\nkey1={a:10,b:20} key2=/home/omry key=[b]*\n# does not help with () though:\n$ echo key=choice(a,b,c)\nbash: syntax error near unexpected token '('\n$ echo 'key=choice(a,b,c)'\nkey=choice(a,b,c)\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Output Directory in YAML\nDESCRIPTION: This snippet shows how to customize the Hydra output directory path in the configuration file. It demonstrates setting the 'dir' parameter under the 'hydra.output' section to specify where outputs should be stored.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/junk.txt#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  output:\n    dir: /some/absolute/path\n```\n\n----------------------------------------\n\nTITLE: Hydra 1.0 Legacy Defaults List Interpolation\nDESCRIPTION: Example of the older style defaults list interpolation in Hydra 1.0, which requires explicit index references in the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/defaults_list_interpolation_changes.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n  - dataset_model: ${defaults.0.dataset}_${defaults.1.model}\n```\n\n----------------------------------------\n\nTITLE: Creating a Conda Environment for Hydra Development\nDESCRIPTION: Command to create a new conda environment with Python 3.8 for Hydra development. The -q flag runs in quiet mode and -y automatically confirms prompts.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/development/overview.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nconda create -n hydra38 python=3.8 -qy\n```\n\n----------------------------------------\n\nTITLE: Compose API Override Example\nDESCRIPTION: Shows how to use overrides programmatically with the Compose API.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncfg = compose(config_name, \n              overrides=[\"key=value\"])\n```\n\n----------------------------------------\n\nTITLE: Configuring RQ Launcher in YAML\nDESCRIPTION: YAML configuration override to enable RQ launcher in Hydra application config.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: rq\n```\n\n----------------------------------------\n\nTITLE: Defining Command Line Choice Parameters for Nevergrad\nDESCRIPTION: Examples of syntax for defining choice parameters through command line overrides. This includes basic choices, shuffled ranges, and ordered transition choices.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\n'key=1,5'\n'key=shuffle(range(1, 8))'      \n'key=range(1,5)'\n`key=tag(ordered, choice(1,2,3))`\n```\n\n----------------------------------------\n\nTITLE: Checking Installed Hydra Plugins via CLI\nDESCRIPTION: Shell command example demonstrating how to verify plugin installation and discovery by checking the plugins information using the --info plugins flag.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/plugins/develop.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python example/my_app.py --info plugins\nInstalled Hydra Plugins\n***********************\n        ...\n        Launcher:\n        ---------\n                MyLauncher\n        ...\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration in YAML\nDESCRIPTION: A YAML configuration file for MySQL database connection settings, containing driver, user, and password parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: mysql\nuser: omry\npassword: secret\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Running Training Example with Sync\nDESCRIPTION: Example demonstrating how to run training tasks with file synchronization between local and remote clusters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/ray_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\n$  python train.py --multirun random_seed=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with Job Name\nDESCRIPTION: YAML configuration for organizing run output directory by job name and timestamp.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Configuration Classes with Hydra\nDESCRIPTION: Demonstrates creating a hierarchical configuration structure using Python dataclasses and Hydra. The code defines configuration classes for MySQL database and user interface settings, combined under a root configuration class. Uses Hydra's ConfigStore for type-safe configuration management.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/2_hierarchical_static_config.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = \"localhost\"\n    port: int = 3306\n\n@dataclass\nclass UserInterface:\n    title: str = \"My app\"\n    width: int = 1024\n    height: int = 768\n\n@dataclass\nclass MyConfig:\n    db: MySQLConfig = field(default_factory=MySQLConfig)\n    ui: UserInterface = field(default_factory=UserInterface)\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=MyConfig)\n\n@hydra.main(version_base=None, config_name=\"config\")\ndef my_app(cfg: MyConfig) -> None:\n    print(f\"Title={cfg.ui.title}, size={cfg.ui.width}x{cfg.ui.height} pixels\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Classes for Recursive Instantiation in Python\nDESCRIPTION: This snippet defines Dataset and Trainer classes to demonstrate recursive instantiation capabilities of Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Dataset:\n    name: str\n    path: str\n\n    def __init__(self, name: str, path: str) -> None:\n        self.name = name\n        self.path = path\n\n\nclass Trainer:\n    def __init__(self, optimizer: Optimizer, dataset: Dataset) -> None:\n        self.optimizer = optimizer\n        self.dataset = dataset\n```\n\n----------------------------------------\n\nTITLE: Viewing Submitit SLURM Launcher Configuration Options\nDESCRIPTION: Command output showing the available configuration parameters for the SLURM launcher with default values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.SlurmLauncher\nsubmitit_folder: ${hydra.sweep.dir}/.submitit/%j\ntimeout_min: 60\ncpus_per_task: 1\ngpus_per_node: 0\ntasks_per_node: 1\nmem_gb: 4\nnodes: 1\nname: ${hydra.job.name}\npartition: null\ncomment: null\nconstraint: null\nexclude: null\nsignal_delay_s: 120\nmax_num_timeout: 0\nadditional_parameters: {}\narray_parallelism: 256\n```\n\n----------------------------------------\n\nTITLE: Extended Plugin Configuration in YAML\nDESCRIPTION: Examples of extending plugin default configurations for different launcher modes using separate configuration files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/configuring_plugins.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - falcon9\n\nton_fuel: 2\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - sim\n\nwindow_size:\n  width: 768\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  launcher:\n    ton_fuel: 2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  launcher:\n    ton_fuel: 10\n    window_size:\n      width: 768\n      height: 768\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to Use RQ Launcher\nDESCRIPTION: YAML configuration to set the default launcher for Hydra to RQ. This overrides the hydra/launcher config to use the RQ launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/rq_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - hydra/launcher: rq\n```\n\n----------------------------------------\n\nTITLE: Setting Conversion Strategy in Configuration\nDESCRIPTION: This snippet shows how to set the conversion strategy directly in the configuration object rather than passing it as a parameter to the instantiate function.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncfg_none = OmegaConf.create({..., \"_convert_\": \"none\"})\nobj_none = instantiate(cfg_none)\n\ncfg_partial = OmegaConf.create({..., \"_convert_\": \"partial\"})\nobj_partial = instantiate(cfg_partial)\n\ncfg_object = OmegaConf.create({..., \"_convert_\": \"object\"})\nobj_object = instantiate(cfg_object)\n\ncfg_all = OmegaConf.create({..., \"_convert_\": \"all\"})\nobj_all = instantiate(cfg_all)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hydra Sweeper Argument Syntax\nDESCRIPTION: Demonstrates the syntax for providing sweep parameters to Hydra's built-in sweeper on the command line. This shows how to specify multiple values for different parameters that will be expanded into separate jobs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/plugins.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbatch_size=128 optimizer=nesterov,adam learning_rate=0.01,0.1\n```\n\n----------------------------------------\n\nTITLE: Examples of Choice Sweep Usage\nDESCRIPTION: Demonstrates two equivalent ways to specify a choice sweep in Hydra: using comma separation or using the choice function. Both methods produce the same result.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndb=mysql,postgresql          # a comma separated list of two or more elements. \ndb=choice(mysql,postgresql)  # choice\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Hydra Configuration\nDESCRIPTION: Shows the file and directory layout for organizing modular configuration files including database configs, schemas, and UI options.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── conf\n│   ├── config.yaml\n│   ├── db\n│   │   ├── mysql.yaml\n│   │   └── postgresql.yaml\n│   ├── schema\n│   │   ├── school.yaml\n│   │   ├── support.yaml\n│   │   └── warehouse.yaml\n│   └── ui\n│       ├── full.yaml\n│       └── view.yaml\n└── my_app.py\n```\n\n----------------------------------------\n\nTITLE: Printing Hydra Configuration in YAML\nDESCRIPTION: Demonstrates how to print the configuration that would be used for a job without actually running it, using the '-c job' or '--cfg job' command-line option. It shows the default configuration and how it changes with additional parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-0.11/tutorial/10_debugging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# A normal run:\n$ python tutorial/objects_example/my_app.py\nMySQL connecting to localhost with user=root and password=1234\n\n# just show the config without running your function:\n$ python tutorial/objects_example/my_app.py -c job\n[2019-09-29 11:09:14,134] -\ndb:\n  class: tutorial.objects_example.my_app.MySQLConnection\n  params:\n    host: localhost\n    password: 1234\n    user: root\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ python tutorial/objects_example/my_app.py db=postgresql db.params.database=tutorial2 --cfg job\n[2019-09-29 11:14:55,977] -\ndb:\n  class: tutorial.objects_example.my_app.PostgreSQLConnection\n  params:\n    database: tutorial2\n    host: localhost\n    password: 1234\n    user: root\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Hydra Website\nDESCRIPTION: Command to install the required yarn dependencies for the Hydra documentation website.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/development/documentation.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 1.0 with Config Name\nDESCRIPTION: Shows the new style in Hydra 1.0 using config_name parameter, where the .yaml extension is automatically added.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_name=\"config\")\n```\n\n----------------------------------------\n\nTITLE: Defining Database Connection Classes in Python\nDESCRIPTION: Defines a base DBConnection class and two implementations (MySQL and PostgreSQL) with different initialization parameters. Each class has a connect method that prints connection information.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DBConnection:\n    def connect(self):\n        ...\n\nclass MySQLConnection(DBConnection):\n    def __init__(self, host: str, user: str, password: str) -> None:\n        self.host = host\n        self.user = user\n        self.password = password\n\n    def connect(self) -> None:\n        print(f\"MySQL connecting to {self.host}\")\n\n\nclass PostgreSQLConnection(DBConnection):\n    def __init__(self, host: str, user: str, password: str, database: str) -> None:\n        self.host = host\n        self.user = user\n        self.password = password\n        self.database = database\n\n    def connect(self) -> None:\n        print(f\"PostgreSQL connecting to {self.host}\")\n```\n\n----------------------------------------\n\nTITLE: Copying Local Environment Variables in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to copy local environment variables to the running job environment, which is particularly useful for remote runs. In this example, it copies the AWS_KEY variable.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/configure_hydra/job.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_copy:\n      - AWS_KEY\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Application Package\nDESCRIPTION: Command to install the Hydra application example as a Python package using pip, showing successful installation output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/packaging.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ pip install examples/advanced/hydra_app_example\n...\nSuccessfully installed hydra-app-0.1\n```\n\n----------------------------------------\n\nTITLE: Default MySQL Config Output in YAML\nDESCRIPTION: The YAML output from running the application without overrides, showing how the default MySQL configuration is loaded based on the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\ndb:\n  driver: mysql\n  ...\n```\n\n----------------------------------------\n\nTITLE: Running Multi-task Example\nDESCRIPTION: Example output of running multiple tasks using the Submitit launcher\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/submitit_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py task=1,2,3 --multirun\n[HYDRA] Sweep output dir : multirun/2020-05-28/15-05-22\n[HYDRA]        #0 : task=1\n[HYDRA]        #1 : task=2\n[HYDRA]        #2 : task=3\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Application with Ray Launcher\nDESCRIPTION: Command to launch a Hydra application using the Ray launcher, which starts a new Ray cluster. The example shows the basic command and its output, including the Ray dashboard URL.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-16-28\n[HYDRA] Initializing ray with config: {}\nINFO services.py:1164 -- View the Ray dashboard at http://127.0.0.1:8266\n[HYDRA]        #0 : \n(pid=97801) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Root Config File with Defaults List Example\nDESCRIPTION: An example of a main config file that includes a defaults list referencing a specific agent configuration from the mi6 config group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - mi6/agent: james_bond\n```\n\n----------------------------------------\n\nTITLE: Cross-Version Compatible Package Headers in YAML\nDESCRIPTION: Shows how to write package headers that are compatible with both Hydra 1.0 and 1.1 by using literal package names instead of special keywords.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package db\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Overriding Search Space Parameters\nDESCRIPTION: Command to override the search space configuration for the optimization process.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\npython example/sphere.py --multirun 'x=interval(-5.0, 5.0)' 'y=interval(0, 10)'\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Application from Source\nDESCRIPTION: Command to run the Hydra application example directly from the source code, showing the output that displays the default dataset configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/packaging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n$ python examples/advanced/hydra_app_example/hydra_app/main.py\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra with a dedicated config directory\nDESCRIPTION: Sets up Hydra to use a dedicated configuration directory named 'conf' relative to the application file. This is the recommended approach for applications with config files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.0_to_1.1/hydra_main_config_path.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\")\n# or:\nhydra.initialize(config_path=\"conf\")\n```\n\n----------------------------------------\n\nTITLE: Multi-File Config Example - Agent Config\nDESCRIPTION: Shows a sub-configuration file with package directive.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# @package bond.james\ncodename: '007'\n```\n\n----------------------------------------\n\nTITLE: Overriding Submitit Launcher Parameters via Command Line\nDESCRIPTION: Example command showing how to use the Submitit SLURM launcher with the multirun flag while overriding the timeout parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npython foo.py --multirun hydra/launcher=submitit_slurm hydra.launcher.timeout_min=3\n```\n\n----------------------------------------\n\nTITLE: Overriding Hydra Config Groups in YAML (Pre-Hydra 1.1)\nDESCRIPTION: This snippet demonstrates how to override Hydra config groups using the Defaults List in Hydra versions prior to 1.1. It shows the syntax for overriding the 'hydra/launcher' config group with 'submitit'.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Joblib Launcher Configuration Parameters\nDESCRIPTION: Complete YAML configuration showing all available parameters for the Joblib launcher with their default values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/joblib_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher\nn_jobs: 10\nbackend: null\nprefer: processes\nrequire: null\nverbose: 0\ntimeout: null\npre_dispatch: 2*n_jobs\nbatch_size: auto\ntemp_folder: null\nmax_nbytes: null\nmmap_mode: r\n```\n\n----------------------------------------\n\nTITLE: Object Reuse with Partial Instantiation\nDESCRIPTION: This example shows a caveat of partial instantiation where nested objects are reused between instantiations, which doesn't happen with regular instantiation.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass Foo:\n    ...\n\nclass Bar:\n    def __init__(self, foo):\n        self.foo = foo\n\nbar_conf = {\n    \"_target_\": \"__main__.Bar\",\n    \"foo\": {\"_target_\": \"__main__.Foo\"},\n}\n\nbar_factory = instantiate(bar_conf, _partial_=True)\nbar1 = bar_factory()\nbar2 = bar_factory()\n\nassert bar1 is not bar2\nassert bar1.foo is bar2.foo  # the `Foo` instance is re-used here\n```\n\n----------------------------------------\n\nTITLE: Running nox for Hydra plugin testing on Python 3.8\nDESCRIPTION: This command demonstrates how to use nox to test a specific Hydra plugin (hydra_colorlog) on Python 3.8. It shows the output of the command, including the detected operating system, Python versions, and other configuration details.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/development/testing.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ PLUGINS=hydra_colorlog nox -s test_plugins-3.8\nOperating system        :       Linux\nNOX_PYTHON_VERSIONS     :       ['3.8', '3.9', '3.10', '3.11']\nPLUGINS                 :       ['hydra_colorlog']\nSKIP_CORE_TESTS         :       False\nFIX                     :       False\nVERBOSE                 :       0\nINSTALL_EDITABLE_MODE   :       0\nnox > Running session test_plugins-3.8\n...\n```\n\n----------------------------------------\n\nTITLE: Casting String to Bool in Python vs Hydra\nDESCRIPTION: Comparison of string to bool casting behavior in Python and Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef bool(value: Any) -> bool:\n    if isinstance(value, str):\n        return len(value) > 0\n    else:\n        return bool(value)\n```\n\nLANGUAGE: python\nCODE:\n```\ndef bool(s: str) -> bool:\n    if isinstance(value, str):\n        if value.lower() == \"false\":\n            return False\n        elif value.lower() == \"true\":\n            return True\n        else:\n            raise ValueError()\n    return bool(value)\n```\n\n----------------------------------------\n\nTITLE: Configuring Defaults in Hydra Composition\nDESCRIPTION: Shows how to set up default configurations for each config group in the main config.yaml file using the defaults list.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n  - ui: full\n  - schema: school\n```\n\n----------------------------------------\n\nTITLE: Casting Ranges in Python (Standard Method)\nDESCRIPTION: A Python function that demonstrates standard range casting behavior. The function attempts to cast a value to an integer but raises a TypeError if the value is a RangeSweep object.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, RangeSweep):\n        raise TypeError()\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Sweeper Plugin Configuration in Hydra\nDESCRIPTION: Demonstrates the simplified command line override syntax for Hydra sweeper plugin configuration between versions 0.11 and 1.0, showing the removal of the params node from the configuration path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/object_instantiation_changes.md#2025-04-07_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\nhydra.sweeper.params.max_batch_size=10\n```\n\nLANGUAGE: shell script\nCODE:\n```\nhydra.sweeper.max_batch_size=10\n```\n\n----------------------------------------\n\nTITLE: Copying Environment Variables Configuration\nDESCRIPTION: Shows how to configure automatic copying of local environment variables to the running job environment, particularly useful for remote runs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/job.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_copy:\n      - AWS_KEY\n```\n\n----------------------------------------\n\nTITLE: Executing PostgreSQL Connection Example in Bash\nDESCRIPTION: Command-line execution of the application with PostgreSQL configuration specified as a command-line override.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/structured_config.md#2025-04-07_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ python my_app.py db=postgresql\nPostgreSQL connecting to localhost:5678\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Sweeper Default\nDESCRIPTION: YAML configuration to set Ax as the default sweeper in Hydra\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ax_sweeper.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/sweeper: ax\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Configuration in Hydra\nDESCRIPTION: Comparison of MySQL connection configuration syntax between Hydra 0.11 and 1.0. The new version removes the params node, flattening the configuration structure while maintaining the same connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/0.11_to_1.0/object_instantiation_changes.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nclass: my_app.MySQLConnection\nparams:\n  host: localhost\n  user: root\n  password: 1234\n```\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.MySQLConnection\nhost: localhost\nuser: root\npassword: 1234\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with Job Name\nDESCRIPTION: YAML configuration for organizing run output directories by job name and timestamp.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: outputs/${hydra.job.name}/${now:%Y-%m-%d_%H-%M-%S}\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Hydra 1.0 Output Configuration\nDESCRIPTION: Example output showing how in Hydra 1.0, the foo/bar.yaml value (x: 20) overrides the config.yaml value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\n  x: 20\n```\n\n----------------------------------------\n\nTITLE: Sample output from AMI creation process\nDESCRIPTION: Example command line output showing the ID of a newly created Amazon Machine Image in pending state. The AMI creation process may take hours to complete.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_ray_launcher/integration_test_tools/README.md#2025-04-07_snippet_1\n\nLANGUAGE: commandline\nCODE:\n```\nec2.Image(id='ami-0d65d5647e065a180') current state pending\n```\n\n----------------------------------------\n\nTITLE: Using Overrides in Hydra Command Line\nDESCRIPTION: Demonstrates how to use overrides to manipulate config values from the command line when running a Hydra application.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py key=value\n```\n\n----------------------------------------\n\nTITLE: Selecting Database Configuration from Command Line in YAML\nDESCRIPTION: This snippet shows how to select a specific database configuration (PostgreSQL in this case) from the command line using Hydra's syntax. It demonstrates the output of the configuration in YAML format.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/3_config_groups.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py +db=postgresql\ndb:\n  driver: postgresql\n  host: localhost\n  password: drowssap\n  port: 5432\n  timeout: 10\n  user: postgres_user\n```\n\n----------------------------------------\n\nTITLE: Configuring Colorlog Plugin in Hydra YAML\nDESCRIPTION: YAML configuration to override the default Hydra logging with Colorlog for both job and hydra logging. This should be added to the user's Hydra configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/colorlog.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/job_logging: colorlog\n  - override hydra/hydra_logging: colorlog\n```\n\n----------------------------------------\n\nTITLE: Instantiating Python Builtins\nDESCRIPTION: This snippet shows how to instantiate Python's built-in functions using the builtins module prefix in the _target_ path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.utils import instantiate\n# instantiate({\"_target_\": \"len\"}, [1,2,3])  # this gives an InstantiationException\ninstantiate({\"_target_\": \"builtins.len\"}, [1,2,3])  # this works, returns the number 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Callback for Job Info Saving in YAML\nDESCRIPTION: Configures Hydra to use the experimental PickleJobInfoCallback which saves job information for later re-running. This configuration enables Hydra to save the configuration in a pickle file for re-use.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  callbacks:\n    save_job_info:\n      _target_: hydra.experimental.callbacks.PickleJobInfoCallback\n```\n\n----------------------------------------\n\nTITLE: Printing Configuration with --cfg Flag in Hydra\nDESCRIPTION: This snippet shows how to print the configuration without running your application's function using the --cfg flag. It demonstrates printing the job configuration which shows database connection settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# A normal run:\n$ python my_app.py\nMySQL connecting to localhost with user=root and password=1234\n\n# just show the config without running your function:\n$ python my_app.py --cfg job\ndb:\n  host: localhost\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: Examples of Shuffle Function Usage\nDESCRIPTION: Demonstrates different ways to use the shuffle function with choice sweeps, ranges, and lists. Shows both positional and named parameter styles.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nshuffle(a,b,c)                                       # shuffled a,b,c\nshuffle(choice(a,b,c)), shuffle(sweep=choice(a,b,c)) # shuffled choice(a,b,c)\nshuffle(range(1,10))                                 # shuffled range(1,10)\nshuffle([a,b,c]), shuffle(list=[a,b,c])              # shuffled list [a,b,c]\n```\n\n----------------------------------------\n\nTITLE: Defining JobConf Dataclass Structure in Python\nDESCRIPTION: This snippet defines the JobConf dataclass structure used for configuring job-related settings in Hydra. It includes fields for job name, working directory behavior, override dirname, job ID, job number, config name, and environment variable settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/configure_hydra/job.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# job runtime information will be populated here\n@dataclass\nclass JobConf:\n    # Job name, populated automatically unless specified by the user (in config or cli)\n    name: str = MISSING\n\n    # Change current working dir to the output dir.\n    chdir: bool = True\n\n    # Concatenation of job overrides that can be used as a part\n    # of the directory name.\n    # This can be configured in hydra.job.config.override_dirname\n    override_dirname: str = MISSING\n\n    # Job ID in underlying scheduling system\n    id: str = MISSING\n\n    # Job number if job is a part of a sweep\n    num: int = MISSING\n\n    # The config name used by the job\n    config_name: Optional[str] = MISSING\n\n    # Environment variables to set remotely\n    env_set: Dict[str, str] = field(default_factory=dict)\n    # Environment variables to copy from the launching machine\n    env_copy: List[str] = field(default_factory=list)\n\n    # Job config\n    @dataclass\n    class JobConfig:\n        @dataclass\n        # configuration for the ${hydra.job.override_dirname} runtime variable\n        class OverrideDirname:\n            kv_sep: str = \"=\"\n            item_sep: str = \",\"\n            exclude_keys: List[str] = field(default_factory=list)\n\n        override_dirname: OverrideDirname = field(default_factory=OverrideDirname)\n\n    config: JobConfig = field(default_factory=JobConfig)\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Connections and Configurations with Hydra in Python\nDESCRIPTION: This code defines database connection classes, configuration classes using dataclasses, and a main application that uses Hydra to manage configurations. It demonstrates how to use Structured Configs to instantiate objects based on configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/structured_config.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DBConnection:\n    def __init__(self, driver: str, host: str, port: int) -> None:\n        self.driver = driver\n        self.host = host\n        self.port = port\n\n    def connect(self) -> None:\n        print(f\"{self.driver} connecting to {self.host}\")\n\nclass MySQLConnection(DBConnection):\n    def __init__(self, driver: str, host: str, port: int) -> None:\n        super().__init__(driver=driver, host=host, port=port)\n\nclass PostgreSQLConnection(DBConnection):\n    def __init__(self, driver: str, host: str, port: int, timeout: int) -> None:\n        super().__init__(driver=driver, host=host, port=port)\n        self.timeout = timeout\n\n@dataclass\nclass DBConfig:\n    driver: str = MISSING\n    host: str = \"localhost\"\n    port: int = 80\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    _target_: str = \"my_app.MySQLConnection\"\n    driver: str = \"MySQL\"\n    port: int = 1234\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    _target_: str = \"my_app.PostgreSQLConnection\"\n    driver: str = \"PostgreSQL\"\n    port: int = 5678\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    defaults: List[Any] = field(default_factory=lambda: [{\"db\": \"mysql\"}])\n    db: DBConfig = MISSING\n\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=Config)\ncs.store(group=\"db\", name=\"mysql\", node=MySQLConfig)\ncs.store(group=\"db\", name=\"postgresql\", node=PostGreSQLConfig)\n\n@hydra.main(version_base=None, config_name=\"config\")\ndef my_app(cfg: Config) -> None:\n    connection = instantiate(cfg.db)\n    connection.connect()\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Missing Environment Variables (YAML)\nDESCRIPTION: Shows how to provide default values when referencing environment variables that might not be defined. The syntax uses a comma followed by the default value that will be used if the environment variable is not set.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/a/b/junk.txt#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Default is localhost if SERVER_ADDRESS is not defined\nserver:\n  address: ${oc.env:SERVER_ADDRESS,localhost}\n```\n\n----------------------------------------\n\nTITLE: Custom S3 Upload Callback Implementation\nDESCRIPTION: Example implementation of a custom callback that uploads files to S3 after job completion, including the main application setup with Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/callbacks.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyCallback(Callback):\n   def __init__(self, bucket: str, file_path: str) -> None:\n        self.bucket = bucket\n        self.file_path = file_path\n\n   def on_job_end(self, config: DictConfig, **kwargs: Any) -> None:\n        print(f\"Job ended,uploading...\")\n        # uploading...\n\n@hydra.main(version_base=None, config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Defining Hydra Config Source Example\nDESCRIPTION: Markdown documentation explaining the purpose and usage of Hydra config source plugins, including testing requirements and reference to test data location.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/examples/plugins/example_configsource_plugin/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Hydra example config source\\nUse this as the template a Hydra config source plugin\\n\\nConfig source plugins are allowing Hydra to recognize other search path schemas in addition to the built in \\n`file://` (which provides access to configs in the file system) and \\n`pkg://` (which provides access to configs installed with a Python package) \\n\\nThis config source hard codes all the responses so it's not very useful.\\nPlease base your tests on the data in  hydra_root/tests/test_apps/config_source_test/dir.\\n\\nAll config sources need to pass the ConfigSourceTestSuite tests, which are expecting those specific responses.\\nWhen implementing a new config source, be sure to run it through the test suite to ensure it always behaves the same\\nas the other config sources.\n```\n\n----------------------------------------\n\nTITLE: Usage of @hydra.main() and hydra.initialize() in Hydra Configuration\nDESCRIPTION: This reference shows the APIs affected by the config path changes in Hydra. These are the decorator and initialization function whose default config path behavior changed in Hydra 1.2.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.1_to_1.2/hydra_main_config_path.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@hydra.main()\n```\n\nLANGUAGE: markdown\nCODE:\n```\nhydra.initialize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Choice Search Space\nDESCRIPTION: Command to configure a choice-based search space for optimization.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_7\n\nLANGUAGE: commandline\nCODE:\n```\npython example/sphere.py --multirun 'x=choice(-5.0, 0.0, 5.0)' 'y=choice(0, 1, 2, 3, 4, 5)'\n```\n\n----------------------------------------\n\nTITLE: Accessing Hydra Config in Python Using HydraConfig\nDESCRIPTION: Shows how to access Hydra configuration values in Python code using the HydraConfig singleton.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/Intro.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.core.hydra_config import HydraConfig\n\n@hydra.main()\ndef my_app(cfg: DictConfig) -> None:\n    print(HydraConfig.get().job.name)\n```\n\n----------------------------------------\n\nTITLE: Using Overrides with Hydra's Compose API\nDESCRIPTION: Example demonstrating how to use the Compose API with overrides to programmatically create configurations in Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncfg = compose(config_name, \n              overrides=[\"key=value\"])\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Config via Command Line\nDESCRIPTION: Demonstrates how to override the default database configuration by specifying a different option via the command line argument.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db=postgresql\ndb:\n  driver: postgresql\n  ...\n```\n\n----------------------------------------\n\nTITLE: Local Launcher Configuration Parameters\nDESCRIPTION: YAML configuration showing all available parameters for the local launcher implementation\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/submitit_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.LocalLauncher\nsubmitit_folder: ${hydra.sweep.dir}/.submitit/%j\ntimeout_min: 60\ncpus_per_task: 1\ngpus_per_node: 0\ntasks_per_node: 1\nmem_gb: 4\nnodes: 1\nname: ${hydra.job.name}\n```\n\n----------------------------------------\n\nTITLE: CIFAR10 Configuration Output\nDESCRIPTION: Example output showing the specialized configuration when using CIFAR10 dataset\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/patterns/specializing_config.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndataset:\n  name: cifar10\n  path: /datasets/cifar10\nmodel:\n  num_layers: 5\n  type: alexnet\n```\n\n----------------------------------------\n\nTITLE: Installing Submitit Launcher Plugin with pip\nDESCRIPTION: Command to install the Hydra Submitit Launcher plugin using pip package manager.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-submitit-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Testing Example with Hydra Initialize and Compose\nDESCRIPTION: Demonstrates how to use Hydra's initialize() and compose() functions in unit tests to load configuration files. The example shows initializing Hydra with a specific config path and then composing a configuration with overrides.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/unit_testing.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra import initialize, compose\n# 1. initialize will add config_path the config search path within the context\n# 2. The module with your configs should be importable. \n#    it needs to have a __init__.py (can be empty).\n# 3. THe config path is relative to the file calling initialize (this file)\ndef test_with_initialize() -> None:\n    with initialize(version_base=None, config_path=\"../hydra_app/conf\"):\n        # config is relative to a module\n        cfg = compose(config_name=\"config\", overrides=[\"app.user=test_user\"])\n        assert cfg == {\n            \"app\": {\"user\": \"test_user\", \"num1\": 10, \"num2\": 20},\n            \"db\": {\"host\": \"localhost\", \"port\": 3306},\n        }\n```\n\n----------------------------------------\n\nTITLE: Job Name Based Multirun Directory Configuration\nDESCRIPTION: YAML configuration for organizing multirun output by job name with numbered subdirectories.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweep:\n    dir: ${hydra.job.name}\n    subdir: ${hydra.job.num}\n```\n\n----------------------------------------\n\nTITLE: Accessing Hydra Plugins Instance in Python\nDESCRIPTION: Shows how to access the Hydra Plugins singleton instance using the new pattern introduced in this release.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/NEWS.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nPlugins.instance().foo()\n```\n\n----------------------------------------\n\nTITLE: Launching Ray Application Locally\nDESCRIPTION: Example of launching a Ray application using Hydra's multirun feature with the Ray launcher on a local machine.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-16-28\n[HYDRA] Initializing ray with config: {}\nINFO services.py:1164 -- View the Ray dashboard at http://127.0.0.1:8266\n[HYDRA]        #0 : \n(pid=97801) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Config with _self_ for Hydra 1.1\nDESCRIPTION: Python code example showing how to add _self_ to the defaults list in a Structured Config to control composition order in Hydra 1.1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndefaults = [\n    \"_self_\",\n    {\"db\": \"mysql\"}\n]\n\n@dataclass\nclass Config:\n    # this is unfortunately verbose due to @dataclass limitations\n    defaults: List[Any] = field(default_factory=lambda: defaults)\n\n    # Hydra will populate this field based on the defaults list\n    db: Any = MISSING\n```\n\n----------------------------------------\n\nTITLE: Manual Plugin Registration in Python\nDESCRIPTION: Example showing how to manually register a Hydra plugin by implementing a Plugin class and registering it through the Plugins singleton class. Users should call the registration function before using @hydra.main.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/plugins/develop.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.core.plugins import Plugins\nfrom hydra.plugins.plugin import Plugin\n\nclass MyPlugin(Plugin):\n  ...\n\ndef register_my_plugin() -> None:\n    \"\"\"Hydra users should call this function before invoking @hydra.main\"\"\"\n    Plugins.instance().register(MyPlugin)\n```\n\n----------------------------------------\n\nTITLE: Basic Working Directory Example in Python with Hydra\nDESCRIPTION: Demonstrates how Hydra creates unique working directories for each application run and prints the current working directory path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport hydra\nfrom omegaconf import DictConfig\n\n@hydra.main()\ndef my_app(cfg: DictConfig) -> None:\n    print(\"Working directory : {}\".format(os.getcwd()))\n```\n\n----------------------------------------\n\nTITLE: Launching RQ Worker\nDESCRIPTION: Command to start an RQ worker that connects to Redis server using environment variables.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\nrq worker --url redis://:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT/$REDIS_DB\n```\n\n----------------------------------------\n\nTITLE: Shell Examples for Using Quotes with Hydra Overrides\nDESCRIPTION: Demonstrates how to properly quote Hydra overrides in shell commands to handle dictionaries, spaces, and interpolation correctly. Shows the difference between quoted and unquoted values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/override_grammar/basic.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py '+foo=\"{a: 10}\"'\nfoo: '{a: 10}'\n\n$ python my_app.py '+foo={a: 10}'\nfoo:\n  a: 10\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'msg=hello world'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'msg=    hello world    '\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'dir=job\\{a\\=1\\,b\\=2\\,c\\=3\\}'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'dir=A[B'    # parser error\n$ python my_app.py 'dir=\"A[B\"'  # ok\n$ python my_app.py 'dir=A\\[B'   # ok\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'dir=/root/${name}'\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py 'dir=\"${get_dir: {root: /root, name: ${name}}}\"'\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Framework with pip\nDESCRIPTION: Command to install or upgrade the Hydra framework using pip package manager.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/intro.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-core --upgrade\n```\n\n----------------------------------------\n\nTITLE: Implementing Glob Choice Sweep in Hydra\nDESCRIPTION: Definition and examples of glob choice sweep in Hydra, allowing selection based on glob patterns.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef glob(\n    include: Union[List[str], str], exclude: Optional[Union[List[str], str]] = None\n) -> Glob:\n    \"\"\"\n    A glob selects from all options in the config group.\n    inputs are in glob format. e.g: *, foo*, *foo.\n    :param include: a string or a list of strings to use as include globs\n    :param exclude: a string or a list of strings to use as exclude globs\n    :return: A Glob object\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\nschema=glob(*)                                # school,support,warehouse\nschema=glob(*,exclude=support)                # school,warehouse\nschema=glob([s*,w*],exclude=school)           # support,warehouse\n```\n\n----------------------------------------\n\nTITLE: Defining MoonLauncher Configuration Classes in Python\nDESCRIPTION: Data class definitions for the MoonLauncher plugin's two modes: Falcon9 and Simulation. Each mode has different configuration parameters with default values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/configuring_plugins.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Falcon9Conf:\n  ton_fuel:  int = 10\n```\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Simulation:\n  ton_fuel:  int = 10\n  window_size:\n    width: 1024\n    height: 768\n```\n\n----------------------------------------\n\nTITLE: Creating a Structured Config with Python Dataclasses in Hydra\nDESCRIPTION: Example of defining a Structured Config using Python's @dataclass decorator. This creates a schema with required fields 'name' and 'age', both marked as MISSING to indicate they must be provided by the user.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/terminology.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n  name: str = MISSING\n  age: int = MISSING\n```\n\n----------------------------------------\n\nTITLE: Adding PostgreSQL Config Using ConfigStore\nDESCRIPTION: Extended version of the Hydra application that uses ConfigStore to register a PostgreSQL configuration option alongside the existing YAML-based MySQL option.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass PostgresSQLConfig:\n    driver: str = \"postgresql\"\n    user: str = \"jieru\"\n    password: str = \"secret\"\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name `postgresql` with the config group `db`\ncs.store(name=\"postgresql\", group=\"db\", node=PostgresSQLConfig)\n\n@hydra.main(version_base=None, config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Joblib Launcher with pip\nDESCRIPTION: Command to install or upgrade the Hydra Joblib Launcher plugin using pip.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/joblib_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-joblib-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Configuring Submitit Launcher in YAML Configuration\nDESCRIPTION: YAML configuration snippet showing how to set Submitit SLURM launcher as the default launcher in Hydra configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - hydra/launcher: submitit_slurm\n```\n\n----------------------------------------\n\nTITLE: Various Ways of Calling Functions in Hydra Overrides\nDESCRIPTION: Demonstrates different styles of calling functions in Hydra, including positional arguments, named parameters, and mixed approaches. Note that the final example shows an invalid call pattern.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfunc(10,foo)     # Positional only\nfunc(a=10,b=foo) # Named only\nfunc(10,b=foo)   # Mixed\nfunc(a=10,foo)   # Error\n```\n\n----------------------------------------\n\nTITLE: Launching RQ Worker for Hydra Jobs\nDESCRIPTION: Command to start an RQ worker that connects to the Redis server using environment variables. This worker processes jobs enqueued by the RQ Launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/rq_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: commandline\nCODE:\n```\nrq worker --url redis://:$REDIS_PASSWORD@$REDIS_HOST:$REDIS_PORT/$REDIS_DB\n```\n\n----------------------------------------\n\nTITLE: Examples of Glob Choice Sweep Usage\nDESCRIPTION: Shows different ways to use glob patterns to select config options, including selecting all options, excluding specific options, or using multiple glob patterns with exclusions.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nschema=glob(*)                                # school,support,warehouse\nschema=glob(*,exclude=support)                # school,warehouse\nschema=glob([s*,w*],exclude=school)           # support,warehouse\n```\n\n----------------------------------------\n\nTITLE: Creating a Frozen Config Node with Hydra Structured Configs in Python\nDESCRIPTION: Defines a SerialPort dataclass with the frozen=True attribute to prevent modifications. The example demonstrates how the frozen attribute makes all config fields read-only, preventing changes via code, command line overrides, or config composition.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/patterns/write_protect_config_node.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(frozen=True)\nclass SerialPort:\n    baud_rate: int = 19200\n    data_bits: int = 8\n    stop_bits: int = 1\n\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=SerialPort)\n\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: SerialPort) -> None:\n    print(cfg)\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Python vs Hydra: Casting Dicts\nDESCRIPTION: Compares dictionary casting behavior between Python and Hydra. Python doesn't support casting a dict directly to a primitive type, while Hydra recursively casts each value in the dict, leaving keys unchanged.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, dict):\n        raise TypeError()\n    else:\n        return int(v)\n\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, dict):\n        return apply_to_values(\n            value, cast_int\n        )\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Running Hyperparameter Search with Nevergrad in Hydra\nDESCRIPTION: Command to execute hyperparameter optimization using the Nevergrad sweeper. This runs the example application with multirun mode.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython example/my_app.py -m\n```\n\n----------------------------------------\n\nTITLE: Examples of Interval Sweep Usage\nDESCRIPTION: Shows how to use interval sweeps to define continuous ranges for optimization. Demonstrates that integers are automatically cast to floats in intervals.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ninterval(1.0,5.0)  # 1.0 <= x < 5.0\ninterval(1,5)      # 1.0 <= x < 5.0, auto-cast to floats\n```\n\n----------------------------------------\n\nTITLE: Interval Sweep Function Signature\nDESCRIPTION: Defines the signature of the interval function, which represents a continuous range of values. This is primarily used by optimizing sweepers and not supported by the basic sweeper.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef interval(start: Union[int, float], end: Union[int, float]) -> IntervalSweep:\n    \"\"\"\n    A continuous interval between two floating point values.\n    value=interval(x,y) is interpreted as x <= value < y\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Examples of Range Sweep Usage\nDESCRIPTION: Demonstrates different ways to use the range function for parameter sweeps, including integer ranges with different step sizes and floating-point ranges.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nnum=range(0,5)                        # 0,1,2,3,4\nnum=range(0,5,2)                      # 0,2,4\nnum=range(0,10,3.3)                   # 0.0,3.3,6.6,9.9\n```\n\n----------------------------------------\n\nTITLE: Examples of Sort Function Usage\nDESCRIPTION: Shows various ways to use the sort function with different input types including direct values, sweeps, and lists. Demonstrates both regular and reverse sorting.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# sweep\nsort(1,3,2)                         # ChoiceSweep(1,2,3)\nsort(1,3,2,reverse=true)            # ChoiceSweep(3,2,1)\nsort(choice(1,2,3))                 # ChoiceSweep(1,2,3)\nsort(sweep=choice(1,2,3))           # ChoiceSweep(1,2,3)\nsort(choice(1,2,3),reverse=true)    # ChoiceSweep(3,2,1)\nsort(range(10,1))                   # range in ascending order\nsort(range(1,10),reverse=true)      # range in descending order\n\n# lists\nsort([1,3,2])                       # [1,2,3]\nsort(list=[1,3,2])                  # [1,2,3]\nsort(list=[1,3,2], reverse=true)    # [3,2,1]\n\n# single value returned as is\nsort(1)                             # 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to Use Colorlog Plugin in YAML\nDESCRIPTION: YAML configuration to override Hydra's default logging with the Colorlog plugin. This configuration enables colored logging for both job logs and Hydra's internal logs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-0.11/plugins/colorlog.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - hydra/job_logging: colorlog\n  - hydra/hydra_logging: colorlog\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Hydra Website\nDESCRIPTION: This command starts a local development server for the Hydra project website and opens a browser window. It allows for live updates without restarting the server.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/development/documentation.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Viewing Joblib Launcher Parameters Configuration\nDESCRIPTION: Example showing how to display all available Joblib Launcher configuration parameters using Hydra's command line interface.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/joblib_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher\nn_jobs: 10\nbackend: null\nprefer: processes\nrequire: null\nverbose: 0\ntimeout: null\npre_dispatch: 2*n_jobs\nbatch_size: auto\ntemp_folder: null\nmax_nbytes: null\nmmap_mode: r\n```\n\n----------------------------------------\n\nTITLE: Hydra Command Line Type Error\nDESCRIPTION: Shows how Hydra catches type conversion errors from command line arguments.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app_type_error.py port=fail\nError merging override port=fail\nValue 'fail' could not be converted to Integer\n        full_key: port\n        object_type=MySQLConfig\n```\n\n----------------------------------------\n\nTITLE: Relative Initialization Function for Hydra\nDESCRIPTION: API documentation for the initialize function that sets up Hydra with a configuration path relative to the caller. It detects the caller type automatically and supports scripts, modules, unit tests, and Jupyter notebooks.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/advanced/compose_api.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef initialize(\n    version_base: Optional[str],\n    config_path: Optional[str] = None,\n    job_name: Optional[str] = \"app\",\n    caller_stack_depth: int = 1,\n) -> None:\n    \"\"\"\n    Initializes Hydra and add the config_path to the config search path.\n    config_path is relative to the parent of the caller.\n    Hydra detects the caller type automatically at runtime.\n\n    Supported callers:\n    - Python scripts\n    - Python modules\n    - Unit tests\n    - Jupyter notebooks.\n    :param version_base: compatibility level to use.\n    :param config_path: path relative to the parent of the caller\n    :param job_name: the value for hydra.job.name (By default it is automatically detected based on the caller)\n    :param caller_stack_depth: stack depth of the caller, defaults to 1 (direct caller).\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining Default Config Selection in YAML\nDESCRIPTION: Specifies the default configuration selection in a YAML file, choosing the MySQL schema and the MySQL staging configuration by default.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/7_dynamic_schema_many_configs.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - schema/db: mysql\n  - db: mysql_staging\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for Hydra Search Path\nDESCRIPTION: Command line example showing how to enable verbose logging in Hydra to inspect the search path and loaded configurations. This helps in debugging configuration loading issues.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/search_path.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py hydra.verbose=hydra\n```\n\n----------------------------------------\n\nTITLE: Simple Hydra Application with YAML Config\nDESCRIPTION: Example of a basic Hydra application that loads configuration from a YAML file. The application uses @hydra.main decorator to specify the config path and prints the loaded configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(version_base=None, config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Run Output Directory with Date Pattern\nDESCRIPTION: YAML configuration for organizing run output directory by date and time.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: ./outputs/${now:%Y-%m-%d}/${now:%H-%M-%S}\n```\n\n----------------------------------------\n\nTITLE: Overriding Hydra Config Groups (1.1 and later)\nDESCRIPTION: This YAML snippet illustrates the new syntax for overriding Hydra config groups introduced in Hydra 1.1. It uses the explicit 'override' keyword to mark config group overrides.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - override hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Module-Based Initialization for Hydra Configuration\nDESCRIPTION: API documentation for the initialize_config_module function that sets up Hydra with a configuration from an importable Python module. The module must have an __init__.py file at its top level.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/advanced/compose_api.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef initialize_config_module(\n    config_module: str,\n    version_base: Optional[str],\n    job_name: str = \"app\"\n) -> None:\n    \"\"\"\n    Initializes Hydra and add the config_module to the config search path.\n    The config module must be importable (an __init__.py must exist at its top level)\n    :param config_module: absolute module name, for example \"foo.bar.conf\".\n    :param version_base: compatibility level to use.\n    :param job_name: the value for hydra.job.name (default is 'app')\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sort Function Signature\nDESCRIPTION: Defines the signature of the sort function for reordering lists and sweeps. It accepts various input types and supports reverse sorting with an optional parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef sort(\n    *args: Union[ElementType, ChoiceSweep, RangeSweep],\n    sweep: Optional[Union[ChoiceSweep, RangeSweep]] = None,\n    list: Optional[List[Any]] = None,\n    reverse: bool = False,\n) -> Any:\n    \"\"\"\n    Sort an input list or sweep.\n    reverse=True reverses the order\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML File with _self_ for Hydra 1.1 Compatibility\nDESCRIPTION: Example showing how to add _self_ to the defaults list in a YAML config file to control composition order and ensure compatibility with Hydra 1.1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - _self_\n  - foo: bar\n\nfoo:\n  x: 10\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\n  x: 20\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tasks with Joblib Launcher\nDESCRIPTION: Example command to run multiple tasks in parallel using the Joblib Launcher. This command launches five parallel executions of the application with different task numbers.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/joblib_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3,4,5\n[HYDRA] Joblib.Parallel(n_jobs=-1,verbose=0,timeout=None,pre_dispatch=2*n_jobs,batch_size=auto,temp_folder=None,max_nbytes=None,mmap_mode=r,backend=loky) is launching 5 jobs\n[HYDRA] Launching jobs, sweep output dir : multirun/2020-02-18/10-00-00\n[__main__][INFO] - Process ID 14336 executing task 2 ...\n[__main__][INFO] - Process ID 14333 executing task 1 ...\n[__main__][INFO] - Process ID 14334 executing task 3 ...\n[__main__][INFO] - Process ID 14335 executing task 4 ...\n[__main__][INFO] - Process ID 14337 executing task 5 ...\n```\n\n----------------------------------------\n\nTITLE: Callback Configuration YAML Files\nDESCRIPTION: YAML configuration files for setting up the callback system, including main config and callback-specific settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/callbacks.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - /hydra/callbacks:\n    - my_callback\n\nfoo: bar\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _global_\nhydra:\n  callbacks:\n    my_callback:\n      _target_: my_app.MyCallback\n      bucket: my_s3_bucket\n      file_path: ./test.pt\n```\n\n----------------------------------------\n\nTITLE: Importing Hydra Callback Class\nDESCRIPTION: Shows how to import the base Callback class from Hydra's experimental package.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/callbacks.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.experimental.callback import Callback\n```\n\n----------------------------------------\n\nTITLE: Basic Config Files Example - YAML\nDESCRIPTION: Example showing the basic config.yaml and foo/bar.yaml files that demonstrate the composition behavior difference between Hydra versions.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\\n  - foo: bar\\n\\nfoo:\\n  x: 10\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\\nx: 20\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for Hydra Search Path Inspection\nDESCRIPTION: This command demonstrates how to run a Python application with Hydra's verbose logging enabled. It allows users to inspect the search path and configurations loaded by Hydra during the composition process.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-0.11/advanced/search_path.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py hydra.verbose=hydra\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Structure for Config Groups in Hydra\nDESCRIPTION: This snippet shows the directory layout for organizing config groups in Hydra. It includes a 'conf' directory with a 'db' subdirectory containing configuration files for different databases.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├─ conf\n│  └─ db\n│      ├─ mysql.yaml\n│      └─ postgresql.yaml\n└── my_app.py\n```\n\n----------------------------------------\n\nTITLE: Requiring User to Specify a Value with MISSING\nDESCRIPTION: Shows how to use MISSING in the defaults list to require the user to explicitly choose a database option. This forces the user to make a selection rather than providing a default.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndefaults = [\n    {\"db\": MISSING}\n]\n\n```\n\n----------------------------------------\n\nTITLE: Implementing MySQL Config with Hydra Structured Config\nDESCRIPTION: Demonstrates a minimal example of using Hydra's structured config with a MySQL configuration class. Shows how to define a dataclass, register it with ConfigStore, and use it in a main application function with type hints.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = \"localhost\"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name 'config'.\ncs.store(name=\"config\", node=MySQLConfig)\n\n@hydra.main(config_path=None, config_name=\"config\")\ndef my_app(cfg: MySQLConfig) -> None:\n    # pork should be port!\n    if cfg.pork == 80:\n        print(\"Is this a webserver?!\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Versions Against Published Versions\nDESCRIPTION: Demonstrates how to check all Hydra plugins against their published versions on PyPI. Shows version comparison output for multiple plugins including ax-sweeper, colorlog, joblib-launcher and others.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/tools/release/README.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ python tools/release/release.py  action=check set=plugins \n[2021-03-30 18:21:05,768][__main__][INFO] - Build outputs : /home/omry/dev/hydra/outputs/2021-03-30/18-21-05/build\n[2021-03-30 18:21:05,768][__main__][INFO] - Checking for unpublished packages\n[2021-03-30 18:21:06,258][__main__][INFO] - ❋ : hydra-ax-sweeper : newer (local=1.1.5.dev1 > latest=1.1.0rc2)\n[2021-03-30 18:21:06,746][__main__][INFO] - ❋ : hydra-colorlog : newer (local=1.1.0.dev1 > latest=1.0.1)\n[2021-03-30 18:21:07,232][__main__][INFO] - ❋ : hydra-joblib-launcher : newer (local=1.1.5.dev1 > latest=1.1.2)\n[2021-03-30 18:21:07,708][__main__][INFO] - ❋ : hydra-nevergrad-sweeper : newer (local=1.1.5.dev1 > latest=1.1.0rc2)\n[2021-03-30 18:21:08,161][__main__][INFO] - ❋ : hydra-optuna-sweeper : newer (local=1.1.0.dev1 > latest=0.9.0rc2)\n[2021-03-30 18:21:08,639][__main__][INFO] - ❋ : hydra-ray-launcher : newer (local=1.1.0.dev1 > latest=0.1.4)\n[2021-03-30 18:21:09,122][__main__][INFO] - ❋ : hydra-rq-launcher : newer (local=1.1.0.dev1 > latest=1.0.2)\n[2021-03-30 18:21:09,620][__main__][INFO] - ❋ : hydra-submitit-launcher : newer (local=1.1.5.dev1 > latest=1.1.1)\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration File for Hydra\nDESCRIPTION: YAML configuration file for MySQL database connection settings. It defines the driver type, username, and password.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: mysql\nuser: omry\npassword: secret\n\n\n```\n\n----------------------------------------\n\nTITLE: Extending a Configuration from Another Config Group in Hydra\nDESCRIPTION: A MySQL configuration that extends a base configuration from a different config group using an absolute path and the '_here_' package override. This demonstrates cross-group configuration extension.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/patterns/extending_configs.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - /db_schema/base_mysql@_here_\n```\n\n----------------------------------------\n\nTITLE: Implementing Hydra Config in Python Application\nDESCRIPTION: This Python script demonstrates how to use Hydra's @hydra.main decorator to specify the config path and print the resulting configuration. It uses OmegaConf to convert the config to YAML format.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(config_path=\"conf\")\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Resolver with Parent Access in Python\nDESCRIPTION: This Python code snippet shows how to implement a custom resolver in OmegaConf 2.1 that can access the parent config node, demonstrating a sum function with default values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/blog/2021-06-13-Hydra_1.1.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef sum(a, b, *, _parent_):\n  return _parent_.get(a, 0) + _parent_.get(b, 0)\n\nOmegaConf.register_new_resolver(\"sum\", sum)\ncfg = OmegaConf.create({\n  \"node\": {\n    \"a\": 1,\n    \"b\": 2,\n    \"a_plus_b\": \"${sum:a,b}\",\n    \"a_plus_z\": \"${sum:a,z}\",\n  },\n})\nprint(cfg.node.a_plus_b)  # 3\nprint(cfg.node.a_plus_z)  # 1\n```\n\n----------------------------------------\n\nTITLE: Defining Job Configuration Structure in Python\nDESCRIPTION: This snippet defines the structure of job configuration in Hydra using Python dataclasses. It includes settings for job name, working directory, override dirname, job ID, environment variables, and more.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/configure_hydra/job.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# job runtime information will be populated here\n@dataclass\nclass JobConf:\n    # Job name, populated automatically unless specified by the user (in config or cli)\n    name: str = MISSING\n\n    # Change current working dir to the output dir.\n    chdir: bool = True\n\n    # Concatenation of job overrides that can be used as a part\n    # of the directory name.\n    # This can be configured in hydra.job.config.override_dirname\n    override_dirname: str = MISSING\n\n    # Job ID in underlying scheduling system\n    id: str = MISSING\n\n    # Job number if job is a part of a sweep\n    num: int = MISSING\n\n    # The config name used by the job\n    config_name: Optional[str] = MISSING\n\n    # Environment variables to set remotely\n    env_set: Dict[str, str] = field(default_factory=dict)\n    # Environment variables to copy from the launching machine\n    env_copy: List[str] = field(default_factory=list)\n\n    # Job config\n    @dataclass\n    class JobConfig:\n        @dataclass\n        # configuration for the ${hydra.job.override_dirname} runtime variable\n        class OverrideDirname:\n            kv_sep: str = \"=\"\n            item_sep: str = \",\"\n            exclude_keys: List[str] = field(default_factory=list)\n\n        override_dirname: OverrideDirname = field(default_factory=OverrideDirname)\n\n    config: JobConfig = field(default_factory=JobConfig)\n```\n\n----------------------------------------\n\nTITLE: Original Working Directory Output Example\nDESCRIPTION: Shows the output of running the original working directory access script, demonstrating the difference between current and original working directories.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nCurrent working directory  : /Users/omry/dev/hydra/outputs/2019-10-23/10-53-03\nOriginal working directory : /Users/omry/dev/hydra\nto_absolute_path('foo')    : /Users/omry/dev/hydra/foo\nto_absolute_path('/foo')   : /foo\n```\n\n----------------------------------------\n\nTITLE: Accessing Original Working Directory in Hydra\nDESCRIPTION: Shows how to access the original working directory and convert relative paths to absolute paths using Hydra's utility functions get_original_cwd() and to_absolute_path().\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.utils import get_original_cwd, to_absolute_path\n\n@hydra.main()\ndef my_app(_cfg: DictConfig) -> None:\n    print(f\"Current working directory : {os.getcwd()}\")\n    print(f\"Orig working directory    : {get_original_cwd()}\")\n    print(f\"to_absolute_path('foo')   : {to_absolute_path('foo')}\")\n    print(f\"to_absolute_path('/foo')  : {to_absolute_path('/foo')}\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Implementing Choice Sweep in Hydra\nDESCRIPTION: Definition and examples of choice sweep in Hydra, allowing selection from multiple options.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef choice(\n    *args: Union[str, int, float, bool, Dict[Any, Any], List[Any], ChoiceSweep]\n) -> ChoiceSweep:\n    \"\"\"\n    A choice sweep over the specified values\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\ndb=mysql,postgresql          # a comma separated list of two or more elements.\ndb=choice(mysql,postgresql)  # choice\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Error When Attempting to Override Frozen Config Values\nDESCRIPTION: Shows the error message generated when attempting to modify a frozen config value via command line override. The error clearly indicates that the configuration is read-only and cannot be changed.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/patterns/write_protect_config_node.md#2025-04-07_snippet_1\n\nLANGUAGE: shell script\nCODE:\n```\n$ python frozen.py data_bits=10\nError merging override data_bits=10\nCannot change read-only config container\n    full_key: data_bits\n    reference_type=Optional[SerialPort]\n    object_type=SerialPort\n```\n\n----------------------------------------\n\nTITLE: Callback Interface Implementation\nDESCRIPTION: Defines the complete Callback class interface with all supported event methods including run, multirun, job, and compose events.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/callbacks.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom hydra.types import TaskFunction\n\nclass Callback:\n    def on_run_start(self, config: DictConfig, **kwargs: Any) -> None:\n        \"\"\"\n        Called in RUN mode before job/application code starts. `config` is composed with overrides.\n        Some `hydra.runtime` configs are not populated yet.\n        See hydra.core.utils.run_job for more info.\n        \"\"\"\n        ...\n\n    def on_run_end(self, config: DictConfig, **kwargs: Any) -> None:\n        \"\"\"\n        Called in RUN mode after job/application code returns.\n        \"\"\"\n        ...\n\n    def on_multirun_start(self, config: DictConfig, **kwargs: Any) -> None:\n        \"\"\"\n        Called in MULTIRUN mode before any job starts.\n        When using a launcher, this will be executed on local machine before any Sweeper/Launcher is initialized.\n        \"\"\"\n        ...\n\n    def on_multirun_end(self, config: DictConfig, **kwargs: Any) -> None:\n        \"\"\"\n        Called in MULTIRUN mode after all jobs returns.\n        When using a launcher, this will be executed on local machine.\n        \"\"\"\n        ...\n\n    def on_job_start(self, config: DictConfig, *, task_function: TaskFunction, **kwargs: Any) -> None:\n        \"\"\"\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (before running application code).\n        This is called from within `hydra.core.utils.run_job`. In the case of remote launching, this will be executed\n        on the remote server along with your application code. The `task_function` argument is the function\n        decorated with `@hydra.main`.\n        \"\"\"\n        ...\n\n    def on_job_end(\n        self, config: DictConfig, job_return: JobReturn, **kwargs: Any\n    ) -> None:\n        \"\"\"\n        Called in both RUN and MULTIRUN modes, once for each Hydra job (after running\n        application code).\n        This is called from within `hydra.core.utils.run_job`. In the case of remote launching, this will be executed\n        on the remote server after your application code.\n\n        `job_return` contains info that could be useful for logging or post-processing.\n        See hydra.core.utils.JobReturn for more.\n        \"\"\"\n        ...\n\n    def on_compose_config(\n        self,\n        config: DictConfig,\n        config_name: Optional[str],\n        overrides: List[str],\n    ) -> None:\n        \"\"\"\n        Called during the compose phase and before the config is returned to the user.\n        config is the composed config with overrides applied.\n        \"\"\"\n        ...\n```\n\n----------------------------------------\n\nTITLE: Tag Function Signature\nDESCRIPTION: Defines the signature of the tag function, which allows adding metadata to sweeps that can be utilized by advanced sweepers for specialized behavior.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef tag(*args: Union[str, Union[Sweep]], sweep: Optional[Sweep] = None) -> Sweep:\n    \"\"\"\n    Tags the sweep with a list of string tags.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Field Existence Check in Python - Recommended Methods\nDESCRIPTION: Shows the recommended approaches for checking field existence using 'in' operator or hasattr() function, which work correctly with strict mode enabled.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/upgrades/0.11_to_1.0/strict_mode_flag_deprecated.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nif \"host\" not in cfg:\n    # host is not in the config\n\nif not hasattr(cfg, \"host\"):\n    # host is not in the config\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to set environment variables for a Hydra job. It shows an example of disabling multithreading in Intel IPP and MKL by setting OMP_NUM_THREADS to 1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/configure_hydra/job.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      OMP_NUM_THREADS: 1\n```\n\n----------------------------------------\n\nTITLE: Working Directory Structure Example\nDESCRIPTION: Shows the tree structure of a Hydra working directory, including the .hydra subdirectory containing configuration files and the application log file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ tree outputs/2019-09-25/15-16-17\noutputs/2019-09-25/15-16-17\n├── .hydra\n│   ├── config.yaml\n│   ├── hydra.yaml\n│   └── overrides.yaml\n└── my_app.log\n```\n\n----------------------------------------\n\nTITLE: Default Multirun Directory Configuration\nDESCRIPTION: Basic configuration for multirun directory structure with timestamp-based parent directory and job number subdirectories.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweep:\n    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}\n    subdir: ${hydra.job.num}\n```\n\n----------------------------------------\n\nTITLE: Modified Hydra Configuration with Specialization Pattern\nDESCRIPTION: Enhanced Hydra configuration that uses variable interpolation to conditionally load specialized configuration files based on dataset and model combinations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/specializing_config.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n  - optional dataset_model: ${dataset}_${model}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Order in Hydra Structured Config (Python)\nDESCRIPTION: This snippet illustrates how to configure the composition order in a Structured Config to ensure that values from the defaults list override the primary config values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/4_defaults.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Config:\n    defaults: List[Any] = field(default_factory=lambda:  [\n        \"_self_\",\n        \"debug/activate\",\n    ])\n\n    debug: bool = False\n```\n\n----------------------------------------\n\nTITLE: Running Simple App with Ray AWS Launcher\nDESCRIPTION: Example command to run a simple application using the Ray AWS launcher with multiple tasks. This demonstrates how to launch multiple jobs on AWS.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3\n```\n\n----------------------------------------\n\nTITLE: Resulting Config Structure After Package Directive\nDESCRIPTION: Example showing the resulting configuration structure after applying the package directive. The simple codename value is placed within the hierarchical structure specified by the package directive.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/terminology.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmi6:\n    agent:\n        codename: '007'\n```\n\n----------------------------------------\n\nTITLE: Ax Sweeper Default Configuration\nDESCRIPTION: Complete YAML configuration showing all available Ax Sweeper parameters and their default values\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ax_sweeper.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.sweeper\n_target_: hydra_plugins.hydra_ax_sweeper.ax_sweeper.AxSweeper\nmax_batch_size: null\nax_config:\n  max_trials: 10\n  early_stop:\n    minimize: true\n    max_epochs_without_improvement: 10\n    epsilon: 1.0e-05\n  experiment:\n    name: null\n    objective_name: objective\n    minimize: true\n    parameter_constraints: null\n    outcome_constraints: null\n    status_quo: null\n  client:\n    verbose_logging: false\n    random_seed: null\n  is_noisy: true\n  params: {}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Configuration in YAML\nDESCRIPTION: YAML configuration file for MySQL connection parameters including target class and connection details.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.MySQLConnection\nhost: localhost\nuser: root\npassword: 1234\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Output Directory with Environment Variable in YAML\nDESCRIPTION: This configuration demonstrates how to use environment variables to define the Hydra output directory path dynamically. It leverages Hydra's interpolation feature to reference an environment variable for the directory location.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/junk.txt#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  output:\n    dir: ${oc.env:OUTPUT_DIR,${hydra.runtime.cwd}/outputs}/${hydra.job.name}\n```\n\n----------------------------------------\n\nTITLE: Displaying Joblib Launcher Configuration\nDESCRIPTION: Command to discover and display the Joblib Launcher parameters using Hydra's command-line interface. This shows the default configuration for the launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/joblib_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\n_target_: hydra_plugins.hydra_joblib_launcher.joblib_launcher.JoblibLauncher\nn_jobs: 10\nbackend: null\nprefer: processes\nrequire: null\nverbose: 0\ntimeout: null\npre_dispatch: 2*n_jobs\nbatch_size: auto\ntemp_folder: null\nmax_nbytes: null\nmmap_mode: r\n```\n\n----------------------------------------\n\nTITLE: Compose Function API Documentation in Python\nDESCRIPTION: API documentation for the compose function, which creates a composed configuration. It describes the parameters including config_name, overrides, and return_hydra_config, as well as the return value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/compose_api.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef compose(\n    config_name: Optional[str] = None,\n    overrides: List[str] = [],\n    return_hydra_config: bool = False,\n) -> DictConfig:\n    \"\"\"\n    :param config_name: the name of the config\n           (usually the file name without the .yaml extension)\n    :param overrides: list of overrides for config file\n    :param return_hydra_config: True to return the hydra config node in the result\n    :return: the composed config\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Migration Example with _self_ - YAML\nDESCRIPTION: Demonstrates how to use _self_ in the defaults list for migration between Hydra versions.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\\n  - _self_\\n  - foo: bar\\n\\nfoo:\\n  x: 10\n```\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\\n  x: 20\n```\n\n----------------------------------------\n\nTITLE: Connecting to Existing Ray Cluster\nDESCRIPTION: Example of connecting to an existing Ray cluster by specifying the cluster address in the launcher configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray hydra.launcher.ray.init.address=localhost:6379\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-13-32\n[HYDRA] Initializing ray with config: {'num_cpus': None, 'num_gpus': None, 'address': 'localhost:6379'}\nINFO worker.py:633 -- Connecting to existing Ray cluster at address: 10.30.99.17:6379\n[HYDRA]        #0 : \n(pid=93358) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Optuna Sweeper Plugin\nDESCRIPTION: Commands to install the Hydra core and Optuna Sweeper plugin using pip.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-core --upgrade\n```\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-optuna-sweeper --upgrade\n```\n\n----------------------------------------\n\nTITLE: Using _group_ and _name_ in Package Directive\nDESCRIPTION: Shows how to use _group_ and _name_ placeholders in a package directive within a YAML configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/overriding_packages.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_._name_\n\nhost: localhost\nport: 3306\n```\n\n----------------------------------------\n\nTITLE: Package Specification Migration Example in YAML\nDESCRIPTION: Demonstrates how to migrate from using _group_._name_ package header syntax in Hydra 1.0 to using literal package specification in Hydra 1.1.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_._name_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\n# @package db.mysql\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Hydra Application in Python\nDESCRIPTION: A basic Hydra application setup that prints configuration. Uses the @hydra.main decorator to initialize Hydra and receives a DictConfig object containing configuration values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/1_simple_cli.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom omegaconf import DictConfig, OmegaConf\nimport hydra\n\n@hydra.main(version_base=None)\ndef my_app(cfg: DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Configuring Optuna Sweeper in YAML\nDESCRIPTION: YAML configuration to set Optuna as the Hydra sweeper.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/sweeper: optuna\n```\n\n----------------------------------------\n\nTITLE: Running Hydra Plugin Information Command\nDESCRIPTION: This shell command demonstrates how to check if a Hydra plugin is properly discovered and installed. It runs the example application with the --info plugins flag to display information about installed Hydra plugins.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/plugins/develop.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ python example/my_app.py --info plugins\nInstalled Hydra Plugins\n***********************\n        ...\n        Launcher:\n        ---------\n                MyLauncher\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining Override Parser Grammar in ANTLR4\nDESCRIPTION: ANTLR4 grammar definition for Hydra's override syntax parser, specifying rules for parsing command-line overrides including key-value pairs, functions, data structures and primitive types.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/basic.md#2025-04-07_snippet_0\n\nLANGUAGE: antlr4\nCODE:\n```\noverride: (\n      key EQUAL value?                           // key=value, key= (for empty value)\n    | TILDE key (EQUAL value?)?                  // ~key | ~key=value\n    | PLUS PLUS? key EQUAL value?                // +key= | +key=value | ++key=value\n) EOF;\n\nkey : packageOrGroup (AT package)?;              // key | group@pkg\n\npackageOrGroup: package | ID (SLASH ID)+;        // db, hydra/launcher\npackage: ( | ID | KEY_SPECIAL | DOT_PATH);\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 0.11 with Nested Config File Path\nDESCRIPTION: Example of how to configure Hydra 0.11 using the old style where config_path includes both directory and file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf/config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Creating a YAML Configuration File for Hydra\nDESCRIPTION: A basic YAML configuration file for a Hydra application that defines database connection parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb: \n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Setting Distributed Rank in Hydra YAML Configuration\nDESCRIPTION: This YAML snippet shows how to use interpolation in Hydra to automatically set the rank for Torch Distributed runs to match the job number in a sweep.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/configure_hydra/job.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  job:\n    env_set:\n      RANK: ${hydra:job.num}\n```\n\n----------------------------------------\n\nTITLE: Starting Local Development Server for Hydra Website\nDESCRIPTION: Command to start a local development server for the Hydra documentation website, which opens a browser window with live updates.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/development/documentation.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ yarn start\n```\n\n----------------------------------------\n\nTITLE: Accessing Hydra Config in YAML Using Resolver\nDESCRIPTION: Demonstrates how to access Hydra configuration values within a YAML file using the 'hydra' resolver.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/Intro.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig_name: ${hydra:job.name}\n```\n\n----------------------------------------\n\nTITLE: Overriding Package via Defaults List in YAML\nDESCRIPTION: Illustrates how to override packages using the defaults list in a YAML configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/overriding_packages.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - db@db.src: mysql\n - db@db.dst: mysql\n```\n\n----------------------------------------\n\nTITLE: Reusing Config Groups with Different Packages\nDESCRIPTION: Example demonstrating how to use the same config group multiple times with different package names, allowing reuse of configuration blocks in different locations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/overriding_packages.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - server/db@src: mysql\n - server/db@dst: mysql\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nsrc:\n  name: mysql\ndst:\n  name: mysql\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Bash\nDESCRIPTION: Demonstrates how to set environment variables in a Bash shell before running a Hydra application. These environment variables will be picked up by the Hydra configuration system during runtime.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/a/b/junk.txt#2025-04-07_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ export SERVER_ADDRESS=10.0.0.1\n$ export SERVER_PORT=3306\n$ python my_app.py\n```\n\n----------------------------------------\n\nTITLE: Installing Ray Launcher Plugin for Hydra\nDESCRIPTION: Command to install the Hydra Ray Launcher plugin using pip. This installs the latest version of the plugin.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ray_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\n$ pip install hydra-ray-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Overriding Hydra Config Groups in YAML (Hydra 1.1+)\nDESCRIPTION: This snippet illustrates the new syntax for overriding Hydra config groups using the Defaults List in Hydra version 1.1 and later. It introduces the 'override' keyword for explicit overrides of the 'hydra/launcher' config group.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - override hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Defining Hydra Configuration Defaults in YAML\nDESCRIPTION: This YAML snippet shows the default configuration structure for Hydra, including job logging, launcher, sweeper, and output settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/Intro.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - job_logging : default     # Job's logging config\n  - launcher: basic           # Launcher config\n  - sweeper: basic            # Sweeper config\n  - output: default           # Output directory\n```\n\n----------------------------------------\n\nTITLE: Executing MySQL Connection Example in Bash\nDESCRIPTION: Command-line execution of the application with default configuration, which uses MySQL connection.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/structured_config.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python my_app.py\nMySQL connecting to localhost:1234\n```\n\n----------------------------------------\n\nTITLE: Creating YAML Configuration File for Hydra\nDESCRIPTION: Basic YAML configuration file defining database connection parameters including driver, user, and password.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/2_config_file.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb: \n  driver: mysql\n  user: omry\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Overriding Search Space Parametrization for Nevergrad\nDESCRIPTION: Command demonstrating how to customize the search space by overriding parameters. This includes specifying discrete choices and continuous intervals with logarithmic scales.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npython example/my_app.py --multirun db=mnist,cifar batch_size=4,8,16 \\\n'lr=tag(log, interval(0.001, 1))' 'dropout=interval(0,1)'\n```\n\n----------------------------------------\n\nTITLE: Displaying Composed Configuration Output\nDESCRIPTION: Shows the resulting composed configuration when running the application, combining mysql database, full UI, and school schema settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py\ndb:\n  driver: mysql\n  user: omry\n  pass: secret\nui:\n  windows:\n    create_db: true\n    view: true\nschema:\n  database: school\n  tables:\n  - name: students\n    fields:\n    - name: string\n    - class: int\n  - name: exams\n    fields:\n    - profession: string\n    - time: data\n    - class: int\n```\n\n----------------------------------------\n\nTITLE: Viewing SLURM Launcher Configuration Parameters\nDESCRIPTION: YAML output showing all available configuration parameters for the Submitit SLURM launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.launcher\nsubmitit_folder: $&#123;hydra.sweep.dir/.submitit/%j\ntimeout_min: 60\ncpus_per_task: null\ngpus_per_node: null\ntasks_per_node: 1\nmem_gb: null\nnodes: 1\nname: ${hydra.job.name}\n_target_: hydra_plugins.hydra_submitit_launcher.submitit_launcher.SlurmLauncher\npartition: null\ncomment: null\nconstraint: null\nexclude: null\ncpus_per_gpu: null\ngpus_per_task: null\nmem_per_gpu: null\nmem_per_cpu: null\nsignal_delay_s: 120\nmax_num_timeout: 0\nadditional_parameters: {}\narray_parallelism: 256\nsetup: null\n```\n\n----------------------------------------\n\nTITLE: Direct Configuration Override Examples in YAML\nDESCRIPTION: Examples showing how to override launcher configuration directly in the primary config file and through command-line overrides.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/configuring_plugins.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\na: 1\n\nhydra:\n  launcher:\n    ton_fuel: 2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  launcher:\n    ton_fuel: 2\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  launcher:\n    ton_fuel: 2\n    window_size:\n      width: 1024\n      height: 768\n```\n\n----------------------------------------\n\nTITLE: Example Configuration with Dynamically Resolved Values\nDESCRIPTION: Demonstrates a configuration file that uses a dynamic interpolation with the 'now' resolver, which returns the current time. This serves as an example of a configuration that will resolve to different values in different runs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntime_now: ${now:%H-%M-%S}\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Colorlog Plugin with pip\nDESCRIPTION: Command to install the Hydra Colorlog plugin using pip package manager. This must be executed before the plugin can be used in Hydra configurations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-0.11/plugins/colorlog.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install hydra_colorlog\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra to use the application directory\nDESCRIPTION: Sets Hydra to use the application's directory as the config path. This was the default behavior up to Hydra 1.0 but is not recommended due to potential issues with sibling directories and slow --help operations.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.0_to_1.1/hydra_main_config_path.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\".\")\n# or:\nhydra.initialize(config_path=\".\")\n```\n\n----------------------------------------\n\nTITLE: Directory Structure for Config Groups in Hydra\nDESCRIPTION: Example directory layout showing how to organize config groups. The layout includes a conf directory with a db subdirectory containing MySQL and PostgreSQL configuration files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├─ conf\n│  └─ db\n│      ├─ mysql.yaml\n│      └─ postgresql.yaml\n└── my_app.py\n```\n\n----------------------------------------\n\nTITLE: Configuring Sweeper Search Space in Hydra 1.1 using YAML\nDESCRIPTION: The legacy way to define search space in Hydra 1.1 using a nested structure under hydra.sweeper.search_space. This example shows configuration for both float and categorical parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.1_to_1.2/changes_to_sweeper_config.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweeper:\n    search_space:\n      search_space:\n        x:\n          type: float\n          low: -5.5\n          high: 5.5\n          step: 0.5\n        'y':\n          type: categorical\n          choices:\n          - -5\n          - 0\n          - 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Hydra configuration in Python\nDESCRIPTION: This Python code demonstrates how to access configuration values using both attribute and dictionary notation, shows interpolation behavior, and illustrates error handling for missing required values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/3_using_config.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: DictConfig):\n    assert cfg.node.loompa == 10          # attribute style access\n    assert cfg[\"node\"][\"loompa\"] == 10    # dictionary style access\n\n    assert cfg.node.zippity == 10         # Value interpolation\n    assert isinstance(cfg.node.zippity, int)  # Value interpolation type\n    assert cfg.node.do == \"oompa 10\"      # string interpolation\n\n    cfg.node.waldo                        # raises an exception\n```\n\n----------------------------------------\n\nTITLE: Partial Instantiation Example Classes\nDESCRIPTION: This snippet defines example classes for demonstrating partial instantiation in Hydra. It includes an Optimizer class and a Model class that uses a partially instantiated optimizer.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass Optimizer:\n    algo: str\n    lr: float\n\n    def __init__(self, algo: str, lr: float) -> None:\n        self.algo = algo\n        self.lr = lr\n\n    def __repr__(self) -> str:\n        return f\"Optimizer(algo={self.algo},lr={self.lr})\"\n\n\nclass Model:\n    def __init__(self, optim_partial: Any, lr: float):\n        super().__init__()\n        self.optim = optim_partial(lr=lr)\n        self.lr = lr\n\n    def __repr__(self) -> str:\n        return f\"Model(Optimizer={self.optim},lr={self.lr})\"\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Hydra 1.1 Output Configuration\nDESCRIPTION: Example output showing how in Hydra 1.1, the config.yaml value (x: 10) overrides the foo/bar.yaml value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nfoo:\n  x: 10\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Default Logging Settings\nDESCRIPTION: Default configuration for Ray logging showing minimal verbosity settings with automatic detection for pretty-print and color mode.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/plugins/ray_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.log_style=\"auto\"\nhydra.launcher.logging.color_mode=\"auto\"\nhydra.launcher.logging.verbosity=0\n```\n\n----------------------------------------\n\nTITLE: Default Multirun Directory Configuration\nDESCRIPTION: Default YAML configuration for multirun directory structure with sweep directory and subdirectories.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweep:\n    dir: multirun/${now:%Y-%m-%d}/${now:%H-%M-%S}\n    subdir: ${hydra.job.num}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sweeper Search Space in Hydra 1.2 using Bash\nDESCRIPTION: The new way to define search space in Hydra 1.2 using the simplified syntax under hydra.sweeper.params. This uses range() for numeric ranges and choice() for categorical variables, matching command line override patterns.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.1_to_1.2/changes_to_sweeper_config.md#2025-04-07_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhydra:\n  sweeper:\n    params:\n      x: range(-5.5, 5.5, step=0.5)\n      y: choice(-5, 0, 5)\n```\n\n----------------------------------------\n\nTITLE: Excluding Keys from Override Dirname\nDESCRIPTION: YAML configuration demonstrating how to exclude specific keys from the override dirname generation.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: output/${hydra.job.override_dirname}/seed=${seed}\n  job:\n    config:\n      override_dirname:\n        exclude_keys:\n          - seed\n```\n\n----------------------------------------\n\nTITLE: Linking to Hydra Joblib Launcher Documentation in Markdown\nDESCRIPTION: This code snippet creates a hyperlink in Markdown format, directing users to the official documentation for the Hydra Joblib Launcher plugin. It's used to provide more comprehensive information about the plugin's usage and configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_joblib_launcher/README.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[website](https://hydra.cc/docs/plugins/joblib_launcher)\n```\n\n----------------------------------------\n\nTITLE: Defining Instantiate API in Python\nDESCRIPTION: This snippet shows the API definition for Hydra's instantiate() function, which is used to create objects or call functions based on a configuration object.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef instantiate(config: Any, *args: Any, **kwargs: Any) -> Any:\n    \"\"\"\n    :param config: An config object describing what to call and what params to use.\n                   In addition to the parameters, the config must contain:\n                   _target_ : target class or callable name (str)\n                   And may contain:\n                   _args_: List-like of positional arguments to pass to the target\n                   _recursive_: Construct nested objects as well (bool).\n                                True by default.\n                                may be overridden via a _recursive_ key in\n                                the kwargs\n                   _convert_: Conversion strategy\n                        none    : Passed objects are DictConfig and ListConfig, default\n                        partial : Passed objects are converted to dict and list, with\n                                  the exception of Structured Configs (and their fields).\n                        all     : Passed objects are dicts, lists and primitives without\n                                  a trace of OmegaConf containers\n    :param args: Optional positional parameters pass-through\n    :param kwargs: Optional named parameters to override\n                   parameters in the config object. Parameters not present\n                   in the config objects are being passed as is to the target.\n                   IMPORTANT: dataclasses instances in kwargs are interpreted as config\n                              and cannot be used as passthrough\n    :return: if _target_ is a class name: the instantiated object\n             if _target_ is a callable: the return value of the call\n    \"\"\"\n\n# Alias for instantiate\ncall = instantiate\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution Output Example\nDESCRIPTION: Example output showing the execution of multiple parallel tasks using the Joblib launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/joblib_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3,4,5\n[HYDRA] Joblib.Parallel(n_jobs=-1,verbose=0,timeout=None,pre_dispatch=2*n_jobs,batch_size=auto,temp_folder=None,max_nbytes=None,mmap_mode=r,backend=loky) is launching 5 jobs\n[HYDRA] Launching jobs, sweep output dir : multirun/2020-02-18/10-00-00\n[__main__][INFO] - Process ID 14336 executing task 2 ...\n[__main__][INFO] - Process ID 14333 executing task 1 ...\n[__main__][INFO] - Process ID 14334 executing task 3 ...\n[__main__][INFO] - Process ID 14335 executing task 4 ...\n[__main__][INFO] - Process ID 14337 executing task 5 ...\n```\n\n----------------------------------------\n\nTITLE: Instantiating Objects with Hydra\nDESCRIPTION: Python code that uses Hydra to load the configuration and instantiate the appropriate database connection object. The hydra.utils.instantiate function creates objects based on the configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(version_base=None, config_path=\"conf\", config_name=\"config\")\ndef my_app(cfg):\n    connection = hydra.utils.instantiate(cfg.db)\n    connection.connect()\n```\n\n----------------------------------------\n\nTITLE: Creating Directory Layout for Config Groups in Hydra\nDESCRIPTION: Shows the recommended directory structure for organizing config groups in a Hydra application. The layout includes a conf directory containing a db subdirectory with configuration files for different database options.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├─ conf\n│  └─ db\n│      ├─ mysql.yaml\n│      └─ postgresql.yaml\n└── my_app.py\n```\n\n----------------------------------------\n\nTITLE: Displaying Directory Layout for Hydra Composition\nDESCRIPTION: Shows the directory structure for organizing configuration files into groups (db, schema, ui) to support composition.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/6_composition.md#2025-04-07_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n├── conf\n│   ├── config.yaml\n│   ├── db\n│   │   ├── mysql.yaml\n│   │   └── postgresql.yaml\n│   ├── schema\n│   │   ├── school.yaml\n   │   ├── support.yaml\n│   │   └── warehouse.yaml\n│   └── ui\n│       ├── full.yaml\n│       └── view.yaml\n└── my_app.py\n```\n\n----------------------------------------\n\nTITLE: Implementing Structured Config with Hydra in Python\nDESCRIPTION: This snippet demonstrates the implementation of a Structured Config using Hydra. It defines a MySQLConfig dataclass, registers it with ConfigStore, and uses it in a Hydra-decorated function. The code intentionally includes a typo ('pork' instead of 'port') to showcase error detection.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom dataclasses import dataclass\n\nimport hydra\nfrom hydra.core.config_store import ConfigStore\n\n@dataclass\nclass MySQLConfig:\n    host: str = \"localhost\"\n    port: int = 3306\n\ncs = ConfigStore.instance()\n# Registering the Config class with the name 'config'.\ncs.store(name=\"config\", node=MySQLConfig)\n\n@hydra.main(version_base=None, config_name=\"config\")\ndef my_app(cfg: MySQLConfig) -> None:\n    # pork should be port!\n    if cfg.pork == 80:\n        print(\"Is this a webserver?!\")\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Defining a Defaults List in YAML Config\nDESCRIPTION: Illustrates how to structure a defaults list in YAML that instructs Hydra how to compose a configuration with both overridable and non-overridable entries.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql      # An overridable defaults list entry\n  - schema/school  # A non-overridable defaults list entry\n```\n\n----------------------------------------\n\nTITLE: Defining Composition Configuration with Defaults\nDESCRIPTION: YAML configuration file using the 'defaults' directive to include a configuration from the db config group. This demonstrates Hydra's composition capabilities.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/intro.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n```\n\n----------------------------------------\n\nTITLE: Using @hydra.main() and hydra.initialize() in Python with Hydra\nDESCRIPTION: In Hydra versions prior to 1.2, @hydra.main() and hydra.initialize() used the directory containing the Python app as the default config path. Starting from Hydra 1.2 with version_base >= \"1.2\", the default config_path is set to None, indicating no directory should be added to the config search path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.1_to_1.2/hydra_main_config_path.md#2025-04-07_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n@hydra.main()\nhydra.initialize()\n```\n\n----------------------------------------\n\nTITLE: Launching Ray Application with Default Settings\nDESCRIPTION: Example of launching a Ray application using Hydra's Ray launcher with default configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_9\n\nLANGUAGE: commandline\nCODE:\n```\n$ python my_app.py  --multirun hydra/launcher=ray\n[HYDRA] Ray Launcher is launching 1 jobs, sweep output dir: multirun/2020-11-10/15-16-28\n[HYDRA] Initializing ray with config: {}\nINFO services.py:1164 -- View the Ray dashboard at http://127.0.0.1:8266\n[HYDRA]        #0 : \n(pid=97801) [__main__][INFO] - Executing task 1\n```\n\n----------------------------------------\n\nTITLE: Printing Package-Specific Configuration in Hydra\nDESCRIPTION: Demonstrates how to display configuration for a specific package using the --package or -p flag in combination with --cfg.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npython my_app.py --cfg hydra --package hydra.job\n# @package hydra.job\nname: my_app\nconfig_name: config\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Config Group with Inheritance in Python\nDESCRIPTION: This snippet demonstrates how to use Python inheritance to create a more type-safe and organized config group for databases. It defines a base DBConfig class and specific configurations for MySQL and PostgreSQL that inherit from it.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/3_config_groups.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass DBConfig:\n    host: str = \"localhost\"\n    port: int = MISSING\n    driver: str = MISSING\n\n@dataclass\nclass MySQLConfig(DBConfig):\n    driver: str = \"mysql\"\n    port: int = 3306\n\n@dataclass\nclass PostGreSQLConfig(DBConfig):\n    driver: str = \"postgresql\"\n    port: int = 5432\n    timeout: int = 10\n\n@dataclass\nclass Config:\n    # We can now annotate db as DBConfig which\n    # improves both static and dynamic type safety.\n    db: DBConfig = MISSING\n```\n\n----------------------------------------\n\nTITLE: Using Package Directive in Hydra Configuration Files\nDESCRIPTION: Example showing a YAML configuration file with a package directive that specifies the root package for the config. This example places the codename value in the mi6.agent package hierarchy in the final config object.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/terminology.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\ncodename: '007'\n```\n\n----------------------------------------\n\nTITLE: Running Hydra App with PostgreSQL Config\nDESCRIPTION: Command line output showing the result of running the application with the PostgreSQL database configuration option registered via ConfigStore.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\ndb:\n  driver: postgresql\n  user: jieru\n  password: secret\n```\n\n----------------------------------------\n\nTITLE: Multi-File Config Example - Primary Config\nDESCRIPTION: Shows the primary configuration file that references other configs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - mi6/agent: james_bond\n```\n\n----------------------------------------\n\nTITLE: Basic Parameter Sweep in Hydra\nDESCRIPTION: Example showing how to run a basic parameter sweep across different schemas using Hydra's --multirun flag\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/running_your_app/2_multirun.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python my_app.py -m schema=warehouse,support,school\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra with no config directory\nDESCRIPTION: Configures Hydra with no config directory by setting config_path to None. This is recommended for applications using only Structured Configs with no defined config files. This will become the default with version_base >= \"1.2\".\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/1.0_to_1.1/hydra_main_config_path.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=None)\n# or:\nhydra.initialize(config_path=None)\n```\n\n----------------------------------------\n\nTITLE: Configuring Submitit Launcher in YAML Configuration\nDESCRIPTION: YAML configuration to override the default launcher with the Submitit SLURM launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: submitit_slurm\n```\n\n----------------------------------------\n\nTITLE: Re-running a Hydra Application Using Saved Configuration\nDESCRIPTION: Shows how to re-run the application using the saved configuration pickle file with the --experimental-rerun flag. The output demonstrates that the application runs with the same configuration values but the callbacks are not called.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\n$ OUTPUT_DIR=/Users/jieru/workspace/hydra/examples/experimental/outputs/2022-03-16/14-51-30/.hydra/\n$ python my_app.py --experimental-rerun $OUTPUT_DIR/config.pickle\n/Users/jieru/workspace/hydra/hydra/main.py:23: UserWarning: Experimental rerun CLI option.\n  warnings.warn(msg, UserWarning)\n[2022-03-16 14:59:21,666][__main__][INFO] - Output_dir=/Users/jieru/workspace/hydra/examples/experimental/outputs/2022-03-16/14-51-30\n[2022-03-16 14:59:21,666][__main__][INFO] - cfg.foo=bar\n```\n\n----------------------------------------\n\nTITLE: Installing Submitit Launcher Plugin\nDESCRIPTION: Command to install the Hydra Submitit Launcher plugin using pip\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/submitit_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-submitit-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Creating Frozen Config Class with Hydra\nDESCRIPTION: Demonstrates implementation of a read-only configuration using Python dataclasses with frozen=True parameter. The example creates a SerialPort configuration class that cannot be modified after instantiation. Includes ConfigStore registration and Hydra main application setup.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/write_protect_config_node.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@dataclass(frozen=True)\nclass SerialPort:\n    baud_rate: int = 19200\n    data_bits: int = 8\n    stop_bits: int = 1\n\n\ncs = ConfigStore.instance()\ncs.store(name=\"config\", node=SerialPort)\n\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg: SerialPort) -> None:\n    print(cfg)\n\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Legacy Hydra Config Group Override (Pre-1.1)\nDESCRIPTION: Demonstrates how to override Hydra config groups in versions prior to 1.1, showing the direct override syntax without the 'override' keyword.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/defaults_list_override.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - model: resnet50\n - hydra/launcher: submitit\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Configuration for Hydra Application\nDESCRIPTION: Example YAML configuration file for a database connection. This config is stored in conf/config.yaml and will be loaded by Hydra when the application runs.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/intro.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n  user: omry\n  pass: secret\n```\n\n----------------------------------------\n\nTITLE: Creating a Hydra-enabled Python Application\nDESCRIPTION: Example of a Python script using Hydra to load and print configuration. It demonstrates the use of the @hydra.main decorator and OmegaConf for YAML output.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/intro.md#2025-04-07_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\n\n@hydra.main(config_name=\"config\")\ndef my_app(cfg : DictConfig) -> None:\n    print(OmegaConf.to_yaml(cfg))\n\nif __name__ == \"__main__\":\n    my_app()\n```\n\n----------------------------------------\n\nTITLE: Printing Modified Configuration in Hydra\nDESCRIPTION: Shows how command-line modifications to configuration are reflected in the printed output when using the --cfg flag.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py db.host=10.0.0.1 --cfg job\ndb:\n  host: 10.0.0.1\n  user: root\n  password: 1234\n```\n\n----------------------------------------\n\nTITLE: MySQL Configuration in YAML\nDESCRIPTION: YAML configuration file for MySQL connection that specifies the target class and connection parameters. The _target_ key identifies the Python class to instantiate.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.MySQLConnection\nhost: localhost\nuser: root\npassword: 1234\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Hydra Verbose Debugging Output\nDESCRIPTION: Shows how to enable verbose debugging in Hydra, which prints detailed information about installed plugins, config search paths, and composition traces. This is useful for understanding how the configuration is being composed and where different settings are coming from.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-0.11/tutorial/10_debugging.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py hydra.verbose=hydra --cfg job\n[2019-09-29 13:35:46,780] - Installed Hydra Plugins\n[2019-09-29 13:35:46,780] - ***********************\n[2019-09-29 13:35:46,780] -     SearchPathPlugin:\n[2019-09-29 13:35:46,780] -     -----------------\n[2019-09-29 13:35:46,781] -     Sweeper:\n[2019-09-29 13:35:46,781] -     --------\n[2019-09-29 13:35:46,782] -             BasicSweeper\n[2019-09-29 13:35:46,782] -     Launcher:\n[2019-09-29 13:35:46,782] -     ---------\n[2019-09-29 13:35:46,783] -             BasicLauncher\n[2019-09-29 13:35:46,783] -\n[2019-09-29 13:35:46,783] - Hydra config search path\n[2019-09-29 13:35:46,783] - ************************\n[2019-09-29 13:35:46,783] - | Provider | Search path                           |\n[2019-09-29 13:35:46,783] - ----------------------------------------------------\n[2019-09-29 13:35:46,783] - | hydra  | pkg://hydra.conf                        |\n[2019-09-29 13:35:46,783] - | main   | /Users/omry/dev/hydra/tutorial/logging  |\n[2019-09-29 13:35:46,783] -\n[2019-09-29 13:35:46,783] - Composition trace\n[2019-09-29 13:35:46,783] - *****************\n[2019-09-29 13:35:46,783] - | Provider | Search path     | File      |\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 0.11 with Direct Config Path\nDESCRIPTION: Shows the old style of configuring Hydra 0.11 using config_path parameter to specify both path and filename.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Setting Redis Environment Variables\nDESCRIPTION: Commands to set Redis connection environment variables in bash/zsh shell.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_3\n\nLANGUAGE: commandline\nCODE:\n```\nexport REDIS_HOST=\"localhost\"\nexport REDIS_PORT=\"6379\"\nexport REDIS_DB=\"0\"\nexport REDIS_PASSWORD=\"\"\n```\n\n----------------------------------------\n\nTITLE: Example Function Definition in Hydra Overrides\nDESCRIPTION: Shows the basic function definition syntax in Hydra with typed parameters. Note that despite similarities, this is not Python and has specific syntax rules.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef func(a:int, b:str) -> bool:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Python vs Hydra: Casting Ranges\nDESCRIPTION: Compares range casting behavior between Python and Hydra. Python doesn't support casting a range directly, while Hydra casts the start, stop, and step values of the range, creating a new range of the target type.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, RangeSweep):\n        raise TypeError()\n    else:\n        return int(v)\n\n\n\n\n```\n\nLANGUAGE: python\nCODE:\n```\ndef cast_int(value: Any):\n    if isinstance(value, RangeSweep):\n        return RangeSweep(\n            start=cast_int(value.start),\n            stop=cast_int(value.stop),\n            step=cast_int(value.step),\n        )\n    else:\n        return int(v)\n```\n\n----------------------------------------\n\nTITLE: Base MySQL Configuration Template in Hydra\nDESCRIPTION: A base MySQL configuration that defines default values and required parameters. This serves as the foundation for extended configurations with placeholders for required values.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/patterns/extending_configs.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhost: localhost\nport: 3306\nuser: ???\npassword: ???\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Settings with YAML\nDESCRIPTION: Example showing basic database configuration in YAML and how to add new fields using the + prefix in command line overrides.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/upgrades/0.11_to_1.0/strict_mode_flag_deprecated.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n```\n\n----------------------------------------\n\nTITLE: Instantiating Optimizer Object in Python\nDESCRIPTION: This code snippet demonstrates how to use Hydra's instantiate() function to create an Optimizer object from the configuration, including an example of overriding parameters.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/overview.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nopt = instantiate(cfg.optimizer)\nprint(opt)\n# Optimizer(algo=SGD,lr=0.01)\n\n# override parameters on the call-site\nopt = instantiate(cfg.optimizer, lr=0.2)\nprint(opt)\n# Optimizer(algo=SGD,lr=0.2)\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Configuration in YAML\nDESCRIPTION: YAML configuration file for PostgreSQL connection parameters including target class and connection details with additional database parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n_target_: my_app.PostgreSQLConnection\nhost: localhost\nuser: root\npassword: 1234\ndatabase: tutorial\n```\n\n----------------------------------------\n\nTITLE: Command Line Error Detection with Hydra in Python\nDESCRIPTION: This snippet shows how Hydra catches type errors in command line arguments. It demonstrates an error when trying to set the 'port' to a non-integer value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app_type_error.py port=fail\nError merging override port=fail\nValue 'fail' could not be converted to Integer\n        full_key: port\n        object_type=MySQLConfig\n```\n\n----------------------------------------\n\nTITLE: Adding Fields via Command Line in YAML Config\nDESCRIPTION: Demonstrates how to add new fields to a configuration using the + prefix in command line overrides, which is the recommended approach in Hydra 1.0.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/0.11_to_1.0/strict_mode_flag_deprecated.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  driver: mysql\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$ python my_app.py +db.host=localhost\ndb:\n  driver: mysql\n  host: localhost\n```\n\n----------------------------------------\n\nTITLE: Compose Function API for Hydra Configuration\nDESCRIPTION: API documentation for the compose function that creates a configuration object. It accepts a configuration name, overrides list, and a flag to include the Hydra config node in the result.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/advanced/compose_api.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef compose(\n    config_name: Optional[str] = None,\n    overrides: List[str] = [],\n    return_hydra_config: bool = False,\n) -> DictConfig:\n    \"\"\"\n    :param config_name: the name of the config\n           (usually the file name without the .yaml extension)\n    :param overrides: list of overrides for config file\n    :param return_hydra_config: True to return the hydra config node in the result\n    :return: the composed config\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Main Configuration in YAML\nDESCRIPTION: Main configuration file that sets MySQL as the default database connection type. Uses Hydra's defaults list to include the MySQL configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/instantiate_objects/config_files.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n```\n\n----------------------------------------\n\nTITLE: Running Nox Testing with Environment Variables for Hydra Plugins\nDESCRIPTION: Example of running nox test session for a specific plugin (hydra_colorlog) on Python 3.8. Shows the output including system information and configuration settings used for the test execution.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/development/testing.md#2025-04-07_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ PLUGINS=hydra_colorlog nox -s test_plugins-3.8\nOperating system        :       Linux\nNOX_PYTHON_VERSIONS     :       ['3.6', '3.7', '3.8', '3.9']\nPLUGINS                 :       ['hydra_colorlog']\nSKIP_CORE_TESTS         :       False\nFIX                     :       False\nVERBOSE                 :       0\nINSTALL_EDITABLE_MODE   :       0\nnox > Running session test_plugins-3.8\n...\n```\n\n----------------------------------------\n\nTITLE: Viewing Output Files from Submitit Launcher Jobs\nDESCRIPTION: Commands demonstrating how to view the directory structure and log files created by jobs run with the Submitit launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\n$ tree\n.\n├── 0\n│   └── my_app.log\n├── 1\n│   └── my_app.log\n├── 2\n│   └── my_app.log\n└── multirun.yaml\n\n$ cat 0/my_app.log \n[2020-05-28 15:05:23,511][__main__][INFO] - Process ID 15887 executing task 1 ...\n[2020-05-28 15:05:24,514][submitit][INFO] - Job completed successfully\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Hydra Output Directory in Shell\nDESCRIPTION: This shell command sets an environment variable that can be used by Hydra to determine the output directory. It demonstrates how to externally configure where Hydra will store outputs before running an application.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/junk.txt#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OUTPUT_DIR=/tmp\n```\n\n----------------------------------------\n\nTITLE: Examples of Type Casting in Hydra\nDESCRIPTION: Shows examples of casting values to different types in Hydra, including casting primitives, collections, and sweeps. Demonstrates int, float, bool, and str conversions.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/override_grammar/extended.md#2025-04-07_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nint(3.14)                  # 3 (int)\nint(value=3.14)            # 3 (int)\nfloat(10)                  # 10.0 (float)\nstr(10)                    # \"10\" (str)\nbool(1)                    # true (bool)\nfloat(range(1,10))         # range(1.0,10.0)\nstr([1,2,3])               # ['1','2','3']\nstr({a:10})                # {a:'10'}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Shell Expansion and Quoting in Bash\nDESCRIPTION: This snippet shows how Bash handles brace expansion, variable substitution, and globbing. It compares the output of unquoted and single-quoted arguments to illustrate the difference in shell interpretation.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/override_grammar/basic.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ echo foo_{a:10,b:20} ${HOME} [b,c]*\nfoo_a:10 foo_b:20 /home/omry build_helpers\n$ echo 'foo_{a:10,b:20}' '${HOME}' '[b,c]*'\nfoo_{a:10,b:20} ${HOME} [b,c]*\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Relative Interpolations in YAML Configuration\nDESCRIPTION: This YAML snippet showcases the new relative interpolation feature in OmegaConf 2.1, allowing access to config nodes relative to the current node.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/blog/2021-06-13-Hydra_1.1.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nx: 10\nb:\n  y: 20\n  a: {x}    # 10, absolute interpolation\n  b: ${.y}  # 20, relative interpolation\n  c: ${..x} # 10, relative interpolation\n```\n\n----------------------------------------\n\nTITLE: Override Dirname Configuration with Exclusions\nDESCRIPTION: Advanced configuration showing how to customize override dirname behavior by excluding specific keys and configuring separators.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/workdir.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  run:\n    dir: output/${hydra.job.override_dirname}/seed=${seed}\n  job:\n    config:\n      override_dirname:\n        exclude_keys:\n          - seed\n```\n\n----------------------------------------\n\nTITLE: Override Dirname Configuration\nDESCRIPTION: YAML configuration showing how to use override_dirname for customizing output directory structure.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/workdir.md#2025-04-07_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  sweep:\n    dir: multirun\n    subdir: ${hydra.job.override_dirname}\n```\n\n----------------------------------------\n\nTITLE: Overriding Submitit Launcher Parameters via Command Line\nDESCRIPTION: Example command showing how to use the Submitit SLURM launcher with multirun and override a parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_4\n\nLANGUAGE: text\nCODE:\n```\npython foo.py --multirun hydra/launcher=submitit_slurm hydra.launcher.timeout_min=3\n```\n\n----------------------------------------\n\nTITLE: Inspecting Search Path with Hydra CLI\nDESCRIPTION: Command to inspect the search path and configurations loaded by Hydra using the --info flag.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/search_path.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python my_app.py --info searchpath\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Frozen Config Protection\nDESCRIPTION: Shows the error message when attempting to modify a frozen config value through command line override. The example demonstrates how the protection prevents changing the data_bits parameter.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/patterns/write_protect_config_node.md#2025-04-07_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ python frozen.py data_bits=10\nError merging override data_bits=10\nCannot change read-only config container\n    full_key: data_bits\n    object_type=SerialPort\n```\n\n----------------------------------------\n\nTITLE: Default Configuration Output\nDESCRIPTION: Example output showing the default configuration with Imagenet dataset\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/patterns/specializing_config.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\nmodel:\n  num_layers: 7\n  type: alexnet\n```\n\n----------------------------------------\n\nTITLE: Installing Submitit Launcher Plugin for Hydra\nDESCRIPTION: Command to install the Submitit Launcher plugin for Hydra using pip.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/submitit_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-submitit-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Running the AMI creation tool with AWS profile in Python\nDESCRIPTION: Command to execute the AMI creation script using a specific AWS profile with admin access to the Hydra test AWS account.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_ray_launcher/integration_test_tools/README.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAWS_PROFILE=jieru python create_integration_test_ami.py\n```\n\n----------------------------------------\n\nTITLE: Custom Logging Configuration for Hydra Jobs\nDESCRIPTION: Detailed YAML configuration for customizing log formatting and handling. Configures a simple format pattern and directs output to stdout only.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/configure_hydra/logging.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 1\nformatters:\n  simple:\n    format: '[%(levelname)s] - %(message)s'\nhandlers:\n  console:\n    class: logging.StreamHandler\n    formatter: simple\n    stream: ext://sys.stdout\nroot:\n  handlers: [console]\n\ndisable_existing_loggers: false\n```\n\n----------------------------------------\n\nTITLE: Hydra Search Path Configuration\nDESCRIPTION: YAML configuration showing how to set up search paths in the primary config file, including package and file-based schemas.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/search_path.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: cifar10\n\nhydra:\n  searchpath:\n    - pkg://additional_conf\n    # You can also use file based schema:\n    # - file:///etc/my_app\n    # - file://${oc.env:HOME}/.my_app\n```\n\n----------------------------------------\n\nTITLE: Removing Package Header Migration Example\nDESCRIPTION: Demonstrates how to migrate a basic MySQL database configuration from Hydra 1.0 to 1.1 by removing the @package _group_ header.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/changes_to_package_header.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _group_\nhost: localhost\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhost: localhost\n```\n\n----------------------------------------\n\nTITLE: Example RQ Launcher Output\nDESCRIPTION: Sample output showing job enqueuing process when running multiple tasks with RQ launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/rq_launcher.md#2025-04-07_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py --multirun task=1,2,3,4,5\n\n[HYDRA] RQ Launcher is enqueuing 5 job(s) in queue : default\n[HYDRA] Sweep output dir : multirun/2020-06-15/18-00-00\n[HYDRA] Enqueued 13b3da4e-03f7-4d16-9ca8-cfb3c48afeae\n[HYDRA] \t#1 : task=1\n[HYDRA] Enqueued 00c6a32d-e5a4-432c-a0f3-b9d4ef0dd585\n[HYDRA] \t#2 : task=2\n[HYDRA] Enqueued 63b90f27-0711-4c95-8f63-70164fd850df\n[HYDRA] \t#3 : task=3\n[HYDRA] Enqueued b1d49825-8b28-4516-90ca-8106477e1eb1\n[HYDRA] \t#4 : task=4\n[HYDRA] Enqueued ed96bdaa-087d-4c7f-9ecb-56daf948d5e2\n[HYDRA] \t#5 : task=5\n[HYDRA] Finished enqueuing\n[HYDRA] Polling job statuses every 1.0 sec\n```\n\n----------------------------------------\n\nTITLE: Hydra Runtime Error Output\nDESCRIPTION: Demonstrates Hydra's runtime error detection when accessing a non-existent configuration attribute.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nTraceback (most recent call last):\n  File \"my_app_type_error.py\", line 22, in my_app\n    if cfg.pork == 80:\nomegaconf.errors.ConfigAttributeError: Key 'pork' not in 'MySQLConfig'\n        full_key: pork\n        object_type=MySQLConfig\n\nSet the environment variable HYDRA_FULL_ERROR=1 for a complete stack trace.\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 0.11 with Direct Config File Path\nDESCRIPTION: Example of how to configure Hydra 0.11 using the old style where config_path directly specifies the configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"config.yaml\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 1.0 with Separate Path and Name Parameters\nDESCRIPTION: Example of the new way to configure Hydra 1.0 using separate config_path for directory and config_name for the configuration file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\", config_name=\"config\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Hydra with Config Directory in Python\nDESCRIPTION: API documentation for the initialize_config_dir function, which initializes Hydra with an absolute config directory path. It describes parameters including config_dir and job_name.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/compose_api.md#2025-04-07_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef initialize_config_dir(config_dir: str, job_name: str = \"app\") -> None:\n    \"\"\"\n    Initializes Hydra and add an absolute config dir to the to the config search path.\n    The config_dir is always a path on the file system and is must be an absolute path.\n    Relative paths will result in an error.\n    :param config_dir: absolute file system path\n    :param job_name: the value for hydra.job.name (default is 'app')\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Command Line Overrides in Hydra Applications\nDESCRIPTION: Example showing how to override configuration values via command line when running a Hydra-powered application.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python my_app.py key=value\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Environment in Hydra\nDESCRIPTION: YAML configuration for a production environment using the _global_ package. This example shows how to handle configs without a common parent path.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/upgrades/0.11_to_1.0/adding_a_package_directive.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package _global_\ndb:\n  driver: mysql\n  host: 10.0.0.11\n  port: 3306\n\nwebserver:\n  host: 10.0.0.11\n  port: 443\n```\n\n----------------------------------------\n\nTITLE: Using Partial Instantiation for Performance Improvement\nDESCRIPTION: This snippet demonstrates how using partial instantiation can improve performance when repeatedly instantiating the same configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfactory = instantiate(config, _partial_=True)\nobj = factory()\n```\n\n----------------------------------------\n\nTITLE: MyPy Type Checking Error Output\nDESCRIPTION: Shows the static type checking error output from MyPy when it detects the 'pork' attribute typo in the MySQL configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/structured_config/1_minimal_example.md#2025-04-07_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nmy_app_type_error.py:22: error: \"MySQLConfig\" has no attribute \"pork\"\nFound 1 error in 1 file (checked 1 source file)\n```\n\n----------------------------------------\n\nTITLE: Modified Hydra Configuration with Dynamic Loading\nDESCRIPTION: Enhanced configuration that uses value interpolation to dynamically load dataset-specific model configurations\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/patterns/specializing_config.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n  - optional dataset_model: ${dataset}_${model}\n```\n\n----------------------------------------\n\nTITLE: Basic Working Directory Example in Python with Hydra\nDESCRIPTION: Demonstrates how Hydra creates a new working directory for each application run and prints its path. Uses the hydra.main decorator and DictConfig for configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/running_your_app/3_working_directory.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nimport hydra\nfrom omegaconf import DictConfig\n\n@hydra.main()\ndef my_app(cfg: DictConfig) -> None:\n    print(\"Working directory : {}\".format(os.getcwd()))\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Logger in Hydra YAML Configuration\nDESCRIPTION: Example of creating a custom logger in Hydra's configuration. This shows how to define a specific logger for your application that has different settings than the root logger.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/file1.txt#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.job_logging\n# ...\nloggers:\n  hydra:\n    level: INFO\n  custom_logger:\n    level: DEBUG\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic YAML Config File in Hydra\nDESCRIPTION: Example of a simple YAML configuration file format used in Hydra that defines user properties including name and age.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/terminology.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nuser:\n  name: James Bond\n  age: 7\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra 1.0 with Separated Path and Name\nDESCRIPTION: Shows the new style in Hydra 1.0 separating config_path and config_name parameters for better flexibility.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/0.11_to_1.0/config_path_changes.md#2025-04-07_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(config_path=\"conf\", config_name=\"config\")\n```\n\n----------------------------------------\n\nTITLE: Running Banana Function Optimization\nDESCRIPTION: Example command to run optimization on the Rosenbrock (Banana) function with specified parameter ranges\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/ax_sweeper.md#2025-04-07_snippet_2\n\nLANGUAGE: commandline\nCODE:\n```\npython example/banana.py -m 'banana.x=int(interval(-5, 5))' 'banana.y=interval(-5, 10.1)'\n```\n\n----------------------------------------\n\nTITLE: Structured Configs Limitations Documentation\nDESCRIPTION: Documentation of current limitations in Hydra's Structured Configs implementation, specifically regarding Union types and user methods.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/0_intro.md#2025-04-07_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `Union` types are only partially supported (see [OmegaConf docs on unions])\n- User methods are not supported\n```\n\n----------------------------------------\n\nTITLE: Defining Default Config Group in YAML\nDESCRIPTION: This snippet shows how to set a default database configuration using a defaults list in a YAML config file.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/5_defaults.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n```\n\n----------------------------------------\n\nTITLE: Defining Job Configuration Structure in Python\nDESCRIPTION: Defines the core job configuration structure using Python dataclasses, including settings for job naming, directory management, environment variables, and override settings.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/configure_hydra/job.md#2025-04-07_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# job runtime information will be populated here\n@dataclass\nclass JobConf:\n    # Job name, populated automatically unless specified by the user (in config or cli)\n    name: str = MISSING\n\n    # Change current working dir to the output dir.\n    chdir: bool = True\n\n    # Concatenation of job overrides that can be used as a part\n    # of the directory name.\n    # This can be configured in hydra.job.config.override_dirname\n    override_dirname: str = MISSING\n\n    # Job ID in underlying scheduling system\n    id: str = MISSING\n\n    # Job number if job is a part of a sweep\n    num: int = MISSING\n\n    # The config name used by the job\n    config_name: Optional[str] = MISSING\n\n    # Environment variables to set remotely\n    env_set: Dict[str, str] = field(default_factory=dict)\n    # Environment variables to copy from the launching machine\n    env_copy: List[str] = field(default_factory=list)\n\n    # Job config\n    @dataclass\n    class JobConfig:\n        @dataclass\n        # configuration for the ${hydra.job.override_dirname} runtime variable\n        class OverrideDirname:\n            kv_sep: str = \"=\"\n            item_sep: str = \",\"\n            exclude_keys: List[str] = field(default_factory=list)\n\n        override_dirname: OverrideDirname = field(default_factory=OverrideDirname)\n\n    config: JobConfig = field(default_factory=JobConfig)\n```\n\n----------------------------------------\n\nTITLE: Installing Hydra Joblib Launcher Plugin\nDESCRIPTION: Command to install the Hydra Joblib Launcher plugin using pip. This installs or upgrades the plugin to the latest version.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/joblib_launcher.md#2025-04-07_snippet_0\n\nLANGUAGE: commandline\nCODE:\n```\npip install hydra-joblib-launcher --upgrade\n```\n\n----------------------------------------\n\nTITLE: Hydra 1.1 Modern Defaults List Interpolation\nDESCRIPTION: Example of the newer style defaults list interpolation introduced in Hydra 1.1, featuring a more concise syntax that eliminates the need for explicit index references.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/upgrades/1.0_to_1.1/defaults_list_interpolation_changes.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - dataset: imagenet\n  - model: alexnet\n  - dataset_model: ${dataset}_${model}\n```\n\n----------------------------------------\n\nTITLE: Running a Multi-run Job with Submitit Launcher\nDESCRIPTION: Example command output when running a Hydra application with multiple tasks using the Submitit launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/submitit_launcher.md#2025-04-07_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ python my_app.py task=1,2,3 --multirun\n[HYDRA] Sweep output dir : multirun/2020-05-28/15-05-22\n[HYDRA]        #0 : task=1\n[HYDRA]        #1 : task=2\n[HYDRA]        #2 : task=3\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Hydra Application in Python\nDESCRIPTION: Defines a Python function decorated with hydra.main that loads configuration from a file named 'config.yaml' in the current directory. The function logs the output directory and a configuration value.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/experimental/rerun.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@hydra.main(version_base=None, config_path=\".\", config_name=\"config\")\ndef my_app(cfg: DictConfig) -> None:\n    log.info(f\"output_dir={HydraConfig.get().runtime.output_dir}\")\n    log.info(f\"cfg.foo={cfg.foo}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Composition Configuration in YAML\nDESCRIPTION: Example of a Hydra configuration file using the 'defaults' directive to compose configurations from multiple sources.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/intro.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n```\n\n----------------------------------------\n\nTITLE: Linking to Joblib.Parallel Documentation in Markdown\nDESCRIPTION: This code snippet creates a hyperlink in Markdown format, pointing to the documentation for Joblib.Parallel. It's used to provide users with a reference to the underlying technology used in the Hydra Joblib Launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/plugins/hydra_joblib_launcher/README.md#2025-04-07_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`Joblib.Parallel`](https://joblib.readthedocs.io/en/latest/parallel.html)\n```\n\n----------------------------------------\n\nTITLE: Creating a Structured Config Schema with Python Dataclass\nDESCRIPTION: Shows how to define a schema for configuration validation using Python's dataclass decorator, specifying types for each field.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/terminology.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass User:\n  name: str\n  age: int\n```\n\n----------------------------------------\n\nTITLE: Viewing Nevergrad Sweeper Configuration in Hydra\nDESCRIPTION: Example command to display the default configuration for the Nevergrad sweeper in Hydra. This shows all available parameters that can be customized.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# @package hydra.sweeper\n_target_: hydra_plugins.hydra_nevergrad_sweeper.core.NevergradSweeper\noptim:\n  optimizer: OnePlusOne\n  budget: 80\n  num_workers: 10\n  noisy: false\n  maximize: false\n  seed: null\nparametrization: {}\nversion: 1\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Hydra Sweeper Parameter Transformation Example\nDESCRIPTION: Shows how a basic Hydra sweeper converts a single command with multiple parameter options into multiple jobs with different parameter combinations. This example demonstrates how parameter sweeping works in Hydra for optimization experiments.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/advanced/plugins/intro.md#2025-04-07_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbatch_size=128 optimizer=nesterov,adam learning_rate=0.01,0.1 \n```\n\n----------------------------------------\n\nTITLE: Setting Ray Logger Verbosity\nDESCRIPTION: Configuration to increase Ray logging verbosity level to 3.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.2/plugins/ray_launcher.md#2025-04-07_snippet_8\n\nLANGUAGE: commandline\nCODE:\n```\nhydra.launcher.logging.verbosity=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Ray Launcher in YAML\nDESCRIPTION: YAML configuration to override the default Hydra launcher with ray_aws launcher.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/plugins/ray_launcher.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - override hydra/launcher: ray_aws\n```\n\n----------------------------------------\n\nTITLE: Hydra's Dotpath Lookup API Functions\nDESCRIPTION: This snippet shows the API functions Hydra provides for dotpath lookup, allowing direct access to classes and methods by their string-based dotpaths.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/advanced/instantiate_objects/overview.md#2025-04-07_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_class(path: str) -> type:\n    \"\"\"\n    Look up a class based on a dotpath.\n    Fails if the path does not point to a class.\n\n    >>> import my_module\n    >>> from hydra.utils import get_class\n    >>> assert get_class(\"my_module.MyClass\") is my_module.MyClass\n    \"\"\"\n    ...\n\ndef get_method(path: str) -> Callable[..., Any]:\n    \"\"\"\n    Look up a callable based on a dotpath.\n    Fails if the path does not point to a callable object.\n\n    >>> import my_module\n    >>> from hydra.utils import get_method\n    >>> assert get_method(\"my_module.my_function\") is my_module.my_function\n    \"\"\"\n    ...\n\n# Alias for get_method\nget_static_method = get_method\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra Runtime Directory in YAML\nDESCRIPTION: This snippet shows how to configure the runtime directory in Hydra. It sets the 'dir' parameter under 'hydra.runtime' to specify where runtime files should be stored, with a fallback to the current working directory.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/build_helpers/test_files/c/junk.txt#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nhydra:\n  runtime:\n    dir: ${oc.env:RUNTIME_DIR,${hydra.runtime.cwd}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Composition Order with _self_ in YAML\nDESCRIPTION: These YAML snippets demonstrate how to use the _self_ keyword to control the composition order of configs in Hydra.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/your_first_app/5_defaults.md#2025-04-07_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql\n  - _self_\n\ndb:\n  user: root\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - _self_\n  - db: mysql\n\ndb:\n  user: root\n```\n\n----------------------------------------\n\nTITLE: Configuring Structured Config Schema with _self_ for Hydra 1.1\nDESCRIPTION: Example showing how to use _self_ in a config file that uses a Structured Config as its schema, ensuring proper override order.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/upgrades/1.0_to_1.1/changes_to_default_composition_order.md#2025-04-07_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n@dataclass\nclass Config:\n  host: str = \"localhost\"\n  port: int = 8080\n\ncs.store(name=\"base_config\", \n         node=Config)\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n - base_config  # schema\n - _self_       # after schema\n\nport: 3306\n\n\n\n```\n\nLANGUAGE: yaml\nCODE:\n```\nhost: localhost # schema\nport: 3306      # config.yaml\n\n\n\n\n\n\n```\n\n----------------------------------------\n\nTITLE: Running Installed Hydra Application\nDESCRIPTION: This snippet demonstrates how to run the installed Hydra application. It shows the output of the application, which includes the dataset configuration from the packaged configuration files.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/advanced/packaging.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n$ hydra_app\ndataset:\n  name: imagenet\n  path: /datasets/imagenet\n```\n\n----------------------------------------\n\nTITLE: Output Comparison of MySQL and PostgreSQL Configs\nDESCRIPTION: Command line execution examples showing the output when using either the MySQL or PostgreSQL configuration options with the Hydra application.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/structured_config/10_config_store.md#2025-04-07_snippet_5\n\nLANGUAGE: commandline\nCODE:\n```\npython my_app.py +db=mysql\ndb:\n  driver: mysql\n  user: omry\n  password: secret\n\n```\n\nLANGUAGE: commandline\nCODE:\n```\npython my_app.py +db=postgresql\ndb:\n  driver: postgresql\n  user: jieru\n  password: secret\n\n```\n\n----------------------------------------\n\nTITLE: Defining MySQL Configuration in YAML for Hydra\nDESCRIPTION: This YAML configuration file defines the settings for a MySQL database connection, including the driver, user, and password.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/tutorials/basic/your_first_app/4_config_groups.md#2025-04-07_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndriver: mysql\nuser: omry\npassword: secret\n```\n\n----------------------------------------\n\nTITLE: Defining Choice Parameters in YAML Config for Nevergrad\nDESCRIPTION: YAML configuration showing how to define choice parameters (discrete options) in a configuration file for Nevergrad optimization.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/plugins/nevergrad_sweeper.md#2025-04-07_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndb:\n  - mnist\n  - cifar\n```\n\n----------------------------------------\n\nTITLE: Defining hierarchical configuration in Hydra\nDESCRIPTION: This YAML file defines a hierarchical configuration with value interpolation, string interpolation, and required fields marked with '???'.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/basic/your_first_app/3_using_config.md#2025-04-07_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nnode:                         # Config is hierarchical\n  loompa: 10                  # Simple value\n  zippity: ${node.loompa}     # Value interpolation\n  do: \"oompa ${node.loompa}\"  # String interpolation\n  waldo: ???                  # Missing value, must be populated prior to access\n```\n\n----------------------------------------\n\nTITLE: Defaults List Configuration\nDESCRIPTION: Example of defining a defaults list in YAML to control config composition.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/terminology.md#2025-04-07_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndefaults:\n  - db: mysql      # An overridable defaults list entry\n  - schema/school  # A non-overridable defaults list entry\n```\n\n----------------------------------------\n\nTITLE: Sorting Lists and Sweeps in Hydra\nDESCRIPTION: Definition and examples of sorting lists and sweeps in Hydra using the sort function.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/docs/advanced/override_grammar/extended.md#2025-04-07_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef sort(\n    *args: Union[ElementType, ChoiceSweep, RangeSweep],\n    sweep: Optional[Union[ChoiceSweep, RangeSweep]] = None,\n    list: Optional[List[Any]] = None,\n    reverse: bool = False,\n) -> Any:\n    \"\"\"\n    Sort an input list or sweep.\n    reverse=True reverses the order\n    \"\"\"\n```\n\nLANGUAGE: python\nCODE:\n```\n# sweep\nsort(1,3,2)                         # ChoiceSweep(1,2,3)\nsort(1,3,2,reverse=true)            # ChoiceSweep(3,2,1)\nsort(choice(1,2,3))                 # ChoiceSweep(1,2,3)\nsort(sweep=choice(1,2,3))           # ChoiceSweep(1,2,3)\nsort(choice(1,2,3),reverse=true)    # ChoiceSweep(3,2,1)\nsort(range(10,1))                   # range in ascending order\nsort(range(1,10),reverse=true)      # range in descending order\n\n# lists\nsort([1,3,2])                       # [1,2,3]\nsort(list=[1,3,2])                  # [1,2,3]\nsort(list=[1,3,2], reverse=true)    # [3,2,1]\n\n# single value returned as is\nsort(1)                             # 1\n```\n\n----------------------------------------\n\nTITLE: Displaying Configuration Subset with --package Flag in Hydra\nDESCRIPTION: This example shows how to use the --package or -p flag to display only a subset of the configuration. It displays the hydra.job package configuration.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.3/tutorials/basic/running_your_app/5_debugging.md#2025-04-07_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\npython my_app.py --cfg hydra --package hydra.job\n# @package hydra.job\nname: my_app\nconfig_name: config\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Range Search Space\nDESCRIPTION: Command to configure a range-based search space for optimization.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.1/plugins/optuna_sweeper.md#2025-04-07_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\npython example/sphere.py --multirun 'x=range(-5.0, 5.0)' 'y=shuffle(range(-5, 5))'\n```\n\n----------------------------------------\n\nTITLE: Configuring Hydra ConfigStore for Dynamic Schemas\nDESCRIPTION: Sets up the Hydra ConfigStore with different schema options for MySQL and PostgreSQL, as well as the main config. This allows for dynamic selection of database schema at runtime.\nSOURCE: https://github.com/facebookresearch/hydra/blob/main/website/versioned_docs/version-1.0/tutorials/structured_config/7_dynamic_schema_many_configs.md#2025-04-07_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ncs = ConfigStore.instance()\ncs.store(group=\"schema/db\", name=\"mysql\", node=MySQLConfig, package=\"db\")\ncs.store(group=\"schema/db\", name=\"postgresql\", node=PostGreSQLConfig, package=\"db\")\ncs.store(name=\"config\", node=Config)\n```"
  }
]