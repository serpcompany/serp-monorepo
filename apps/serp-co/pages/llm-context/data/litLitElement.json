[
  {
    "owner": "lit",
    "repo": "lit-element",
    "content": "TITLE: Data Binding in LitElement Templates (JavaScript)\nDESCRIPTION: Illustrates various types of data binding in LitElement templates, including text content, attributes, boolean attributes, properties, and event handlers.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      prop1: { type: String },\n      prop2: { type: String },\n      prop3: { type: Boolean },\n      prop4: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.prop1 = 'text binding';\n    this.prop2 = 'mydiv';\n    this.prop3 = true;\n    this.prop4 = 'pie';\n  }\n\n  render() {\n    return html`\n      <!-- text binding -->\n      <div>${this.prop1}</div>\n\n      <!-- attribute binding -->\n      <div id=\"${this.prop2}\">attribute binding</div>\n\n      <!-- boolean attribute binding -->\n      <div>\n        boolean attribute binding\n        <input type=\"text\" ?disabled=\"${this.prop3}\"/>\n      </div>\n\n      <!-- property binding -->\n      <div>\n        property binding\n        <input type=\"text\" .value=\"${this.prop4}\"/>\n      </div>\n\n      <!-- event handler binding -->\n      <div>event handler binding\n        <button @click=\"${this.clickHandler}\">click</button>\n      </div>\n    `;\n  }\n\n  clickHandler(e) {\n    console.log(e.target);\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Element with LitElement in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a web component using LitElement with TypeScript decorators. It shows how to define a custom element, create reactive properties, add CSS styles, and implement the render method that returns a lit-html template.\nSOURCE: https://github.com/lit/lit-element/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {LitElement, html, css, customElement, property} from 'lit-element';\n\n// This decorator defines the element.\n@customElement('my-element')\nexport class MyElement extends LitElement {\n\n  // This decorator creates a property accessor that triggers rendering and\n  // an observed attribute.\n  @property()\n  mood = 'great';\n\n  static styles = css`\n    span {\n      color: green;\n    }`;\n\n  // Render element DOM by returning a `lit-html` template.\n  render() {\n    return html`Web Components are <span>${this.mood}</span>!`;\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LitElement Component in JavaScript\nDESCRIPTION: JavaScript code snippet showing how to define a LitElement component class and register it as a custom element.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement { ... } \n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Implementing render Method in LitElement\nDESCRIPTION: Example of a render method in a LitElement component, showing template creation with data binding and event handling.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n  ...\n  render() {\n    return html`\n      <h1>Hello, ${this.name}!</h1>\n      <button @click=${this._onClick}>\n        Click Count: ${this.count}\n      </button>\n      <slot></slot>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LitElement Component in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a basic LitElement component. It shows the import statement, class definition with observed properties, constructor, and render method using lit-html templating.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_api/api-readme.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\n\nclass MyElement extends LitElement {\n\n  // Declare observed properties\n  static get properties() {\n    return {\n      adjective: {}\n    }\n  }\n \n  constructor() {\n    this.adjective = 'awesome';\n  }\n\n  // Define the element's template\n  render() {\n    return html`<p>your ${adjective} template here</p>`;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Dependencies\nDESCRIPTION: Imports the LitElement base class and html helper function required for creating web components.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/create.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Template in LitElement (JavaScript)\nDESCRIPTION: Demonstrates how to define a simple template for a LitElement component using the render method and html tag function.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`<p>template content</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic LitElement Component\nDESCRIPTION: JavaScript code showing how to create a simple LitElement component with a render method.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>Hello from MyElement!</div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to a LitElement Component with Static Styles Property\nDESCRIPTION: Demonstrates the recommended way to add styles to a LitElement component using the static styles property with the css tag function. The styles are automatically scoped to the component's shadow DOM.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, css, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      div { color: red; }\n    `;\n  }\n  render() { \n    return html`\n      <div>I'm styled!</div> \n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Properties, Loops, and Conditionals in LitElement Templates (JavaScript)\nDESCRIPTION: Demonstrates how to use properties, loops, and conditionals within a LitElement template. It shows a list of items and conditionally renders content based on a boolean property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      myString: { type: String },\n      myArray: { type: Array },\n      myBool: { type: Boolean }\n    };\n  }\n\n  constructor() {\n    super();\n    this.myString = 'Hello World';\n    this.myArray = ['an','array','of','test','data'];\n    this.myBool = true;\n  }\n\n  render() {\n    return html`\n      <p>${this.myString}</p>\n      <ul>\n        ${this.myArray.map(i => html`<li>${i}</li>`)}\n      </ul>\n      ${this.myBool?\n        html`<p>Render some HTML if myBool is true</p>`:\n        html`<p>Render some other HTML if myBool is false</p>`}\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener to Button in LitElement Template\nDESCRIPTION: Demonstrates how to add a click event listener to a button element in the LitElement template using the @click syntax.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/events.md#2025-04-16_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<button @click=${this.clickHandler}>Click</button>\n```\n\n----------------------------------------\n\nTITLE: Defining LitElement Component Class\nDESCRIPTION: Creates a component class that extends LitElement and implements the required render method to define the component's template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/create.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <p>Hello world! From my-element</p>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Element\nDESCRIPTION: Registers the custom element with the browser using customElements.define(), making it available for use in HTML.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/create.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties with Static Field in LitElement\nDESCRIPTION: Example showing how to declare and initialize properties using a static properties field with custom options.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() { \n  return { \n    greeting: {type: String},\n    data: {attribute: false},\n    items: {}\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LitElement Component in TypeScript\nDESCRIPTION: TypeScript code snippet demonstrating how to define a LitElement component class using a decorator.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@customElement('my-element')\nexport class MyElement extends LitElement { ... }\n```\n\n----------------------------------------\n\nTITLE: Using LitElement Component in HTML\nDESCRIPTION: HTML code demonstrating how to use a LitElement component in an HTML file.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Adding Declarative Event Listeners in LitElement Templates\nDESCRIPTION: Shows how to add event listeners using lit-html's @event binding syntax in a component's template. This is the recommended way to add listeners to elements in your component's DOM.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`<button @click=\"${this._handleClick}\">`;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete LitElement Component with Properties\nDESCRIPTION: The complete code for a LitElement component that defines, initializes, and uses a 'message' property. This shows the full implementation context for the property examples.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/properties.md#2025-04-16_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{% include projects/try/properties/after/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Composing LitElement Templates\nDESCRIPTION: Demonstrates how to compose a LitElement template from smaller template functions for header, article, and footer. This allows for modular template construction.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction headerTemplate(title) {\n  return html`<header>${title}</header>`;\n}\nfunction articleTemplate(text) {\n  return html`<article>${text}</article>`;\n}\nfunction footerTemplate() {\n  return html`<footer>Your footer here.</footer>`;\n}\n\nclass MyPage extends LitElement {\n  ...\n  render() {\n    return html`\n      ${headerTemplate(this.article.title)}\n      ${articleTemplate(this.article.text)}\n      ${footerTemplate()}\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the render method in LitElement\nDESCRIPTION: The render method uses lit-html to render the element template. This method must be implemented for any component extending the LitElement base class and must return a lit-html TemplateResult.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nrender() { ... }\n```\n\n----------------------------------------\n\nTITLE: Updating in response to non-property changes in LitElement\nDESCRIPTION: Shows how to call requestUpdate to update an element in response to something other than a property change, such as an event.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// Request an update in response to an event\nthis.addEventListener('load-complete', async (e) => {\n  console.log(e.detail.message);\n  console.log(await this.requestUpdate());\n});\n```\n\n----------------------------------------\n\nTITLE: Using LitElement's Default Converter for Properties\nDESCRIPTION: Demonstrates how to use LitElement's default converter for different property types including String, Number, Boolean, Array, and Object.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Use LitElement's default converter \nprop1: { type: String },\nprop2: { type: Number },\nprop3: { type: Boolean },\nprop4: { type: Array },\nprop5: { type: Object }\n```\n\n----------------------------------------\n\nTITLE: Defining a LitElement Component with Decorators\nDESCRIPTION: Demonstrates how to use @customElement and @property decorators to create a LitElement component with less boilerplate code. The example shows a basic element definition with a reactive property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, customElement, property} from 'lit-element';\n\n@customElement('my-element')\nclass MyElement extends LitElement {\n\n // Declare observed properties\n @property()\n adjective = 'awesome';\n\n // Define the element's template\n render() {\n   return html`<p>your ${this.adjective} template here</p>`;\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Styling the Host Element in LitElement\nDESCRIPTION: Demonstrates how to style the LitElement component itself using the :host and :host() CSS pseudo-classes. These styles can be overridden by styles applied from outside the component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic get styles() {\n  return css`\n    /* Selects the host element */\n    :host { \n      display: block; \n    }\n\n    /* Selects the host element if it is hidden */\n    :host([hidden]) { \n      display: none; \n    }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using a LitElement Custom Element in HTML\nDESCRIPTION: This HTML snippet shows how to use the custom element defined with LitElement in an HTML file. It demonstrates setting the 'mood' property through an HTML attribute.\nSOURCE: https://github.com/lit/lit-element/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<my-element mood=\"awesome\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Property Declaration with Decorators in LitElement\nDESCRIPTION: Example demonstrating property declaration using TypeScript decorators with property options.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n@property({type: String})\nmode = 'auto';\n\n@property()\ndata = {};\n```\n\n----------------------------------------\n\nTITLE: Inheriting Styles from a LitElement Superclass\nDESCRIPTION: Shows how a component can inherit styles from its parent class and add its own styles using an array of css tagged template literals in the static styles property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyElement extends SuperElement {\n  static get styles() {\n    return [\n      super.styles,\n      css`...`\n    ];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a LitElement Component with Properties (JavaScript)\nDESCRIPTION: Shows how to create a LitElement component with properties and use them in the template. The component displays a greeting message.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      name: { type: String }\n    };\n  }\n\n  constructor() {\n    super();\n    this.name = 'World';\n  }\n\n  render() {\n    return html`\n      <p>Hello, ${this.name}!</p>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using CSS Custom Properties for Configurable Styles\nDESCRIPTION: Shows how to create configurable styles in LitElement components using CSS variables and custom properties. This allows styles to be customized at runtime.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nstatic get styles() {\n  return css`\n    :host { color: var(--themeColor); }\n  `;\n}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<style>\n  html { \n    --themeColor: #123456;\n  }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Composing Templates with Imported Elements\nDESCRIPTION: Shows how to compose a template by importing other custom elements and using them in the template. This approach allows for component-based composition.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport './my-header.js';\nimport './my-article.js';\nimport './my-footer.js';\n\nclass MyPage extends LitElement {\n  render() {\n    return html`\n      <my-header></my-header>\n      <my-article></my-article>\n      <my-footer></my-footer>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Property in LitElement\nDESCRIPTION: Creates a static getter method that declares a string property called 'message'. This is how properties are defined in LitElement components.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/properties.md#2025-04-16_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nstatic get properties() {\n  return { message: { type: String } };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in JavaScript LitElement\nDESCRIPTION: JavaScript code showing how to define properties in a LitElement component using a static getter.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport class MyElement extends LitElement {\n\n  static get properties() {\n    return {\n      name: {type: String}\n    }\n  }\n\n  constructor() {\n    super();\n    this.name = 'World';\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Properties in LitElement Template\nDESCRIPTION: Demonstrates how to use a property value in a LitElement template using JavaScript expressions with the ${} syntax. The message property is rendered inside a paragraph element.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/properties.md#2025-04-16_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`\n    <p>${this.message}</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the updated lifecycle hook in LitElement\nDESCRIPTION: The updated method is called when the element's DOM has been updated and rendered. This can be implemented to perform tasks after each update cycle.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nupdated(changedProperties) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Observed Attributes in LitElement\nDESCRIPTION: Explains how to configure observed attributes in LitElement, including default behavior, custom attribute names, and disabling attribute observation.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// observed attribute name is \"myprop\"\nmyProp: { type: Number }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// Observed attribute will be called my-prop\nmyProp: { attribute: 'my-prop' }\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// No observed attribute for this property\nmyProp: { attribute: false }\n```\n\n----------------------------------------\n\nTITLE: Using Slots in LitElement Templates (JavaScript)\nDESCRIPTION: Shows how to use the slot element in a LitElement template to render child elements passed to the component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  render() {\n    return html`\n      <div>\n        <slot></slot>\n      </div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Managing Event Listeners with connectedCallback and disconnectedCallback\nDESCRIPTION: Shows how to properly add event listeners to external elements like Window or Document, using connectedCallback to add them and disconnectedCallback to remove them when the component is removed from the DOM.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback();\n  window.addEventListener('resize', this._handleResize);\n}\ndisconnectedCallback() {\n  window.removeEventListener('resize', this._handleResize);\n  super.disconnectedCallback();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a LitElement Component with Configurable CSS Properties\nDESCRIPTION: This snippet demonstrates how to create a LitElement component that uses CSS custom properties for styling. The component defines a CSS variable with a default value that can be overridden by users.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  static get styles() { \n    return css`\n      :host { \n        background-color: var(--my-background, yellow); \n      }\n    `;\n  }\n  render() {\n    return html`<p>Hello world</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the updateComplete Promise in LitElement\nDESCRIPTION: The updateComplete is a Promise property that resolves when the element has finished updating. It resolves with a Boolean indicating if there are no more pending updates.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Await Promise property.\nawait this.updateComplete;\n```\n\n----------------------------------------\n\nTITLE: Sharing Styles Between LitElement Components\nDESCRIPTION: Demonstrates how to create reusable styles by exporting css tagged template literals from a module, which can then be imported and used by different components.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { css } from 'lit-element';\n\nexport const buttonStyles = css`\n  .blue-button {\n    color: white;\n    background-color: blue;\n  }\n  .blue-button:disabled {\n    background-color: grey;\n  }`;\n```\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { buttonStyles } from './button-styles.js';\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return [\n      buttonStyles,\n      css`\n        :host { display: block;\n          border: 1px solid black;\n        }`\n    ]\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Slots in LitElement Render Method\nDESCRIPTION: Demonstrates how to define a named slot in the render method of a LitElement component. The slot is given a name attribute which can be referenced by child elements.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nrender(){\n  return html`\n    <div>\n      <slot name=\"one\"></slot>\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Events that Cross Shadow DOM Boundaries\nDESCRIPTION: Shows how to create custom events that can pass through shadow DOM boundaries by setting both the composed and bubbles flags to true.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfirstUpdated(changedProperties) {\n  let myEvent = new CustomEvent('my-event', { \n    detail: { message: 'my-event happened.' },\n    bubbles: true, \n    composed: true });\n  this.dispatchEvent(myEvent);\n}\n```\n\n----------------------------------------\n\nTITLE: Using lit-html Directives in LitElement\nDESCRIPTION: Shows how to import and use a lit-html directive (in this case, the 'until' directive) within a LitElement template. This allows for more advanced template rendering capabilities.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\nimport { until } from 'lit-html/directives/until.js';\n\nconst content = fetch('./content.txt').then(r => r.text());\n\nhtml`${until(content, html`<span>Loading...</span>`)}`\n```\n\n----------------------------------------\n\nTITLE: Customizing which property changes trigger updates in LitElement\nDESCRIPTION: Shows how to implement shouldUpdate to customize which property changes should cause an element to update, by checking if specific properties have changed.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nshouldUpdate(changedProps) {\n  return changedProps.has('prop1');\n}\n```\n\n----------------------------------------\n\nTITLE: Firing a Custom Event from a LitElement Component\nDESCRIPTION: Shows how to create and dispatch a custom event with additional data in the detail property from within a LitElement component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<div>Hello World</div>`;\n  }\n  firstUpdated(changedProperties) {\n    let event = new CustomEvent('my-event', {\n      detail: {\n        message: 'Something important happened'\n      }\n    });\n    this.dispatchEvent(event);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deferring Event Listener Addition Until After First Paint\nDESCRIPTION: Demonstrates a technique to defer adding event listeners until after the first paint for improved performance, using firstUpdated lifecycle callback with a Promise/setTimeout pattern.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync firstUpdated() {\n  // Give the browser a chance to paint\n  await new Promise((r) => setTimeout(r, 0));\n  this.addEventListener('click', this._handleClick);\n}\n```\n\n----------------------------------------\n\nTITLE: Firing a Standard Event from a LitElement Component\nDESCRIPTION: Demonstrates how to create and dispatch a standard DOM event (like click) from within a LitElement component using the Event constructor.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<div>Hello World</div>`;\n  }\n  updated(changedProperties) {\n    let click = new Event('click');\n    this.dispatchEvent(click);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Connected Callback in LitElement\nDESCRIPTION: Example showing how to implement the connectedCallback lifecycle method while ensuring the super method is called.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconnectedCallback() {\n  super.connectedCallback()\n\n  console.log('connected')\n}\n```\n\n----------------------------------------\n\nTITLE: Styling Slotted Content in LitElement\nDESCRIPTION: Demonstrates how to style elements that are slotted into a component using the ::slotted() CSS pseudo-element. Only direct slotted children can be styled with this selector.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { LitElement, html, css } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      ::slotted(*) { font-family: Roboto; margin: 4px; }\n      ::slotted(p) { color: blue; }\n      div ::slotted(*) { color: red; }\n    `;\n  }\n  render() {\n    return html`\n      <slot></slot>\n      <div><slot name=\"hi\"></slot></div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Using map() Method for Array Iteration in LitElement Templates\nDESCRIPTION: Demonstrates how to use JavaScript's map() method to iterate over an array property and render a list of items in a LitElement template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n${this.myArray.map(item => html`<li>${item}</li>`)}\n```\n\n----------------------------------------\n\nTITLE: Importing a LitElement Component in HTML with Inline Module Script\nDESCRIPTION: Example of importing a LitElement component in an HTML file using an inline module script.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\nimport './path-to/some-package-name/some-component.js';\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing the firstUpdated lifecycle hook in LitElement\nDESCRIPTION: The firstUpdated method is called after the element's DOM has been updated the first time, before updated is called. It is used to perform one-time work after the element's template has been created.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Implement to override default behavior.\n */\nfirstUpdated(changedProperties) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Reflected Attributes in LitElement\nDESCRIPTION: Demonstrates how to configure a property to reflect its value to an observed attribute in LitElement.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Value of property \"myProp\" will reflect to attribute \"myprop\"\nmyProp: {reflect: true}\n```\n\n----------------------------------------\n\nTITLE: Managing property changes for object subproperties in LitElement\nDESCRIPTION: Demonstrates two approaches to handle mutations of object subproperties: rewriting the whole object or calling requestUpdate after a mutation, since mutations are not observable.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// Option 1: Rewrite whole object, triggering an update\nthis.prop1 = Object.assign({}, this.prop1, { subProp: 'data' });\n\n// Option 2: Mutate a subproperty, then call requestUpdate\nthis.prop1.subProp = 'data';\nthis.requestUpdate();\n```\n\n----------------------------------------\n\nTITLE: Using classMap and styleMap in LitElement\nDESCRIPTION: Demonstrates how to use the classMap and styleMap directives from lit-html to apply dynamic classes and styles in LitElement templates.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconstructor() {\n  super();\n  this.classes = { mydiv: true, someclass: true };\n  this.styles = { color: 'green', fontFamily: 'Roboto' };\n}\nrender() {\n  return html`\n    <div class=${classMap(this.classes)} style=${styleMap(this.styles)}>\n      Some content\n    </div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using @query Decorator in LitElement\nDESCRIPTION: Demonstrates the use of the @query decorator to easily access a DOM node in the component's shadow root. This provides a convenient way to query elements without manual DOM traversal.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {LitElement, html} from 'lit-element';\nimport {query} from 'lit-element/lib/decorators.js';\n\nclass MyElement extends LitElement {\n  @query('#first')\n  _first;\n\n  render() {\n    return html`\n      <div id=\"first\"></div>\n      <div id=\"second\"></div>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing an element after update in LitElement\nDESCRIPTION: Example showing how to implement the updated method to focus an element after each update. This method receives a Map of changed properties and their previous values.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{% include projects/lifecycle/updated/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Iteration in LitElement Template\nDESCRIPTION: Example of implementing a loop in a LitElement template that generates an unordered list by mapping over an array property and rendering each item as a list item.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<ul>${this.myArray.map(item => html`<li>${item}</li>`)}</ul>\n```\n\n----------------------------------------\n\nTITLE: Styling LitElement Host from Internal Styles\nDESCRIPTION: Shows how to use the :host CSS pseudo-class to style a LitElement component from within its own template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nstatic get styles() {\n  return css`\n    :host {\n      font-family: Roboto;\n    }\n  `;\n}\nrender() {\n  return html`\n    <p>Uses Roboto</p>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Focusing an input element on first update in LitElement\nDESCRIPTION: Example showing how to implement the firstUpdated method to focus an input element after the initial render. The method is called after the element's DOM has been updated for the first time.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{% include projects/lifecycle/firstupdated/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Initializing Properties in LitElement Constructor\nDESCRIPTION: Shows how to initialize different types of properties in a LitElement component's constructor, including setting up a string message, a boolean flag, and an array of data.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.message = 'Hello world! From my-element';\n  this.myBool = true;\n  this.myArray = ['an','array','of','test','data'];\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events from a LitElement Component in Another LitElement\nDESCRIPTION: Shows how to listen for and handle events fired from one LitElement component within another LitElement or lit-html template using declarative event syntax.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<my-element @my-event=\"${(e) => { console.log(e.detail.message) }}\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Using Named Slots in HTML\nDESCRIPTION: Shows how to use a named slot in HTML by setting the slot attribute on a child element to match the slot name in the component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<my-element>\n  <p slot=\"one\">Include me in slot \"one\".</p>\n</my-element>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Themable LitElement Component\nDESCRIPTION: This JavaScript file defines a LitElement component that utilizes CSS custom properties for theming. It shows how to create components that can be styled through an external theming system.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n{% include projects/style/theming/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Children with Slots in LitElement\nDESCRIPTION: Shows how to render children passed to a LitElement component using the <slot> element. The slot acts as a placeholder where the host element's children are displayed.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<slot></slot>`;\n  }\n}\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<my-element><p>Slotted content</p></my-element>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Element in HTML\nDESCRIPTION: Shows how to use the registered custom element in HTML markup.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/create.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Using Nested CSS Expressions in LitElement Static Styles\nDESCRIPTION: Shows how to safely use nested expressions within the css tag function. Only expressions that are themselves css tagged templates or numbers are allowed for security reasons.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {LitElement, html, css} from 'lit-element';\n\nconst mainColor = css`red`;\nconst fontSize = 16;\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      div { color: ${mainColor} }\n      span { font-size: ${fontSize}px; }\n    `;\n  }\n  render() {\n    return html`\n      <div>Text</div>\n      <span>Small</span>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Converter for LitElement Properties\nDESCRIPTION: Shows how to specify a custom property converter in a LitElement property declaration using the converter option. Includes examples of object and function converters.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: { \n  converter: // Custom property converter\n} \n```\n\nLANGUAGE: javascript\nCODE:\n```\nprop1: { \n  converter: { \n    fromAttribute: (value, type) => { \n      // `value` is a string\n      // Convert it to a value of type `type` and return it\n    },\n    toAttribute: (value, type) => { \n      // `value` is of type `type` \n      // Convert it to a string and return it\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: { \n  converter: (value, type) => { \n    // `value` is a string\n    // Convert it to a value of type `type` and return it\n  }\n} \n```\n\n----------------------------------------\n\nTITLE: Requesting updates for specific properties in LitElement\nDESCRIPTION: Shows how to call requestUpdate with property name and old value to trigger an update for a specific property, which is useful when manually changing properties.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nlet oldValue = this.prop1;\nthis.prop1 = 'new value';\nthis.requestUpdate('prop1', oldValue);\n```\n\n----------------------------------------\n\nTITLE: Configuring Property Changes in LitElement (JavaScript)\nDESCRIPTION: This example shows a complete implementation of configuring property changes in a LitElement class. It includes a custom hasChanged function for the myProp property that checks if the new value is greater than the old value.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html } from 'lit-element';\n\nclass MyElement extends LitElement {\n  static get properties() {\n    return {\n      myProp: {\n        // Only consider myProp changed if the new value is greater than the old value\n        hasChanged(newVal, oldVal) {\n          return newVal > oldVal;\n        }\n      }\n    };\n  }\n  constructor() {\n    super();\n    this.myProp = 1;\n  }\n  render() {\n    return html`\n      <p>myProp: ${this.myProp}</p>\n      <button @click=\"${this.getNewVal}\">get new value</button>\n    `;\n  }\n  getNewVal() {\n    let newVal = Math.floor(Math.random()*10);\n    this.myProp = newVal;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Finding the Original Event Target with composedPath\nDESCRIPTION: Demonstrates how to use the composedPath() method to find the original source of an event that has been retargeted when crossing shadow DOM boundaries.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nhandleMyEvent(event) {\n  console.log('Origin: ', event.composedPath()[0]);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Events from a LitElement Component in Plain JavaScript\nDESCRIPTION: Demonstrates how to listen for events fired from a LitElement component in standard HTML and JavaScript using the addEventListener API.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst myElement = document.querySelector('my-element');\nmyElement.addEventListener('my-event', (e) => {console.log(e)});\n```\n\n----------------------------------------\n\nTITLE: Styling Elements in a LitElement Component's Shadow Tree\nDESCRIPTION: Shows how to use standard CSS selectors to style elements within a component's shadow DOM. These styles are scoped to the shadow tree and won't affect elements outside it.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass MyElement extends LitElement {\n  static get styles() {\n    // Write styles in standard CSS\n    return css`\n      * { color: red; }\n      p { font-family: sans-serif; }\n      .myclass { margin: 100px; }\n      #main { padding: 30px; }\n      h1 { font-size: 4em; }\n    `;\n  }\n  render() {\n    return html`\n      <p>Hello World</p>\n      <p class=\"myclass\">Hello World</p>\n      <p id=\"main\">Hello World</p>\n      <h1>Hello World</h1>\n    `;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing hasChanged Function for Property in LitElement (JavaScript)\nDESCRIPTION: This snippet demonstrates how to customize the hasChanged function for a property in LitElement. The function compares new and old values to determine if an update should proceed.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nmyProp: { hasChanged(newVal, oldVal) {\n  // compare newVal and oldVal\n  // return `true` if an update should proceed\n}}\n```\n\n----------------------------------------\n\nTITLE: Setting CSS Custom Properties for a LitElement Component\nDESCRIPTION: This HTML snippet shows how to set a CSS custom property value for a LitElement component using the component tag as a CSS selector. This allows styling the component from outside.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element {\n    --my-background: rgb(67, 156, 144);\n  }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Efficient Per-Instance Style Evaluation in LitElement\nDESCRIPTION: Demonstrates a recommended approach for evaluating per-instance styles efficiently by separating static and dynamic styles.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_12\n\nLANGUAGE: js\nCODE:\n```\n{% include projects/style/perinstanceexpressions/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Using styleMap in LitElement Templates\nDESCRIPTION: Demonstrates the syntax for using styleMap to apply a set of CSS rules to an HTML element in a LitElement template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n<button style=${styleMap({\n  backgroundColor: 'blue',\n  border: '1px solid black'\n})}>A button</button>\n\n<!-- Equivalent: \n  <button style=\"\n    background-color:blue;\n    border: 1px solid black;\n  \">A button</button>\n-->\n```\n\n----------------------------------------\n\nTITLE: Configuring CSS Custom Properties Per Instance\nDESCRIPTION: This example demonstrates how to configure different instances of the same LitElement component with different CSS custom property values using class selectors.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element {\n    --my-background: rgb(67, 156, 144);\n  }\n  my-element.stuff {\n    --my-background: #111111;\n  }\n</style>\n<my-element></my-element>\n<my-element class=\"stuff\"></my-element>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Property Accessors in LitElement\nDESCRIPTION: Demonstrates how to create custom getter/setter pairs for properties in LitElement, including manually calling requestUpdate.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() { return { myProp: { type: String } }; }\n\nset myProp(value) {\n  // Implement setter logic here... \n  // retrieve the old property value and store the new one\n  this.requestUpdate('myProp', oldValue);\n} \nget myProp() { ... }\n\n...\n\n// Later, set the property\nthis.myProp = 'hi'; // Invokes your setter\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Event Retargeting with Shadow DOM\nDESCRIPTION: Shows how event retargeting works in shadow DOM by logging the event target from both inside and outside the component, demonstrating how the target is changed for external listeners.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n<my-element onClick=\"(e) => console.log(e.target)\"></my-element>\n```\n\nLANGUAGE: javascript\nCODE:\n```\nrender() {\n  return html`\n    <button id=\"mybutton\" @click=\"${(e) => console.log(e.target)}\">\n      click me\n    </button>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement CSS Helper\nDESCRIPTION: Shows how to import the required dependencies including the css helper function from lit-element.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/style.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LitElement, html, css } from 'lit-element';\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Rendering in LitElement Template\nDESCRIPTION: Example of implementing conditional rendering in a LitElement template using a ternary operator to display different paragraphs based on a boolean property value.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n${this.myBool ?\n  html`<p>Render some HTML if myBool is true</p>` :\n  html`<p>Render some other HTML if myBool is false</p>`}\n```\n\n----------------------------------------\n\nTITLE: Using @queryAssignedNodes Decorator in LitElement\nDESCRIPTION: This snippet demonstrates the usage of the @queryAssignedNodes decorator to create properties that return assigned nodes for specific slots. It shows examples for both named and default slots.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// First argument is the slot name\n// Second argument is `true` to flatten the assigned nodes.\n@queryAssignedNodes('header', true)\n_headerNodes;\n\n// If the first argument is absent or an empty string, list nodes for the default slot.\n@queryAssignedNodes()\n_defaultSlotNodes;\n```\n\n----------------------------------------\n\nTITLE: CSS Inheritance in LitElement Components\nDESCRIPTION: Shows how to use CSS inheritance to propagate styles from parent elements to LitElement components and their rendered templates.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<style>\nhtml { \n  font-family: Roboto;\n}\n</style>\n<div>\n  <p>Uses Roboto</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing a Property in LitElement Constructor\nDESCRIPTION: Shows how to properly initialize a property in the constructor method. The constructor first calls the parent class constructor with super(), then sets the initial value for the message property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/properties.md#2025-04-16_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconstructor() {\n  super();\n  this.message = 'Hello world! From my-element';\n}\n```\n\n----------------------------------------\n\nTITLE: Custom PerformUpdate Implementation\nDESCRIPTION: Example of implementing a custom performUpdate method that awaits an animation frame before proceeding with the update.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync performUpdate() {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n  super.performUpdate();\n}\n```\n\n----------------------------------------\n\nTITLE: Async Function with UpdateComplete Promise\nDESCRIPTION: Demonstrates using async/await with LitElement's updateComplete Promise to handle property updates and subsequent operations.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nasync myFunc(data) {\n  this.myProp = data;\n\n  await this.updateComplete;\n  return 'done';\n}\n```\n\n----------------------------------------\n\nTITLE: Example of using updateComplete in LitElement\nDESCRIPTION: Demonstrates how to use the updateComplete Promise to wait for an element update to complete before performing additional actions.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{% include projects/lifecycle/updatecomplete/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Manually Binding 'this' in Imperative Event Listeners\nDESCRIPTION: Demonstrates how to bind 'this' when adding event listeners imperatively with addEventListener to maintain access to the component instance.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.boundResizeHandler = this.handleResize.bind(this);\nwindow.addEventListener('resize', this.boundResizeHandler);\n```\n\n----------------------------------------\n\nTITLE: Using Property Decorator with Custom Accessor in LitElement\nDESCRIPTION: Shows how to use the @property decorator with a custom property accessor in a TypeScript LitElement component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n   private _myProp: string = '';\n\n  @property({ type: String })\n  get myProp(): string {\n    return this._myProp;\n  }\n  set myProp(value: string) {\n    const oldValue = this._myProp;\n    this._myProp = value;\n    this.requestUpdate('myProp', oldValue);\n  }\n```\n\n----------------------------------------\n\nTITLE: Rendering Per-Instance Styles in LitElement\nDESCRIPTION: Demonstrates how to include a <style> element in a LitElement template for per-instance style updates. This approach should be used cautiously due to performance considerations.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_10\n\nLANGUAGE: js\nCODE:\n```\nrender() {\n  return html`\n    <style>\n      /* updated per instance */\n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Using classMap in LitElement Templates\nDESCRIPTION: Shows the syntax for using classMap to apply a set of classes to an HTML element in a LitElement template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n<div class=${classMap({alert:true,info:true})}>Content.</div>\n<!-- Equivalent: <div class=\"alert info\">Content.</div> -->\n```\n\n----------------------------------------\n\nTITLE: CSS Specificity in LitElement Styling\nDESCRIPTION: Illustrates how type selectors have higher specificity than the :host pseudo-class when styling LitElement components.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_20\n\nLANGUAGE: js\nCODE:\n```\nclass MyElement extends LitElement {\n  static get styles() { \n    return css`:host { font-family: Roboto; }`\n  }\n  render() {\n    return html`<p>Will use courier</p>`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using 'this' in Declarative Event Handlers\nDESCRIPTION: Shows how 'this' is automatically bound to the component instance when using declarative event handlers in the template, allowing direct access to component properties and methods.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  render() {\n    return html`<button @click=\"${this._handleClick}\">click</button>`;\n  }\n  _handleClick(e) {\n    console.log(this.prop);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Event Listener Options with the eventOptions Decorator\nDESCRIPTION: Demonstrates using the eventOptions decorator to add options like passive: true to event listeners that are added declaratively in templates.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport {LitElement, html, eventOptions} from 'lit-element';\n...\n\n@eventOptions({passive: true})\nprivate _handleTouchStart() { ... }\n\nrender() { \n  return html`\n    <div @touchstart=${this._handleTouchStart}><div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete LitElement Component with Event Handling\nDESCRIPTION: The final version of the MyElement component, incorporating the button with event listener and the clickHandler method.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/events.md#2025-04-16_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include projects/try/events/after/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Handling Slot Changes in LitElement\nDESCRIPTION: This example shows how to use the slotchange event to extract the text content of all slotted children when the assigned nodes change. It includes a handler method and the corresponding render method.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nhandleSlotchange(e) {\n  const childNodes = e.target.assignedNodes({flatten: true});\n  // ... do something with childNodes ...\n  this.allText = Array.prototype.map.call(childNodes, (node) => {\n    return node.textContent ? node.textContent : ''\n  }).join('');\n}\n\nrender() {\n  return html`<slot @slotchange=${this.handleSlotchange}></slot>`;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listeners in the Constructor\nDESCRIPTION: Demonstrates adding event listeners in the component constructor. This is appropriate for listening to events on the host element itself, especially for events that might occur before the component is connected to the DOM.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconstructor() {\n  super();\n  this.addEventListener('focus', this._handleFocus);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in TypeScript LitElement\nDESCRIPTION: TypeScript code demonstrating how to define properties in a LitElement component using a decorator.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  ...\n  @property({type: String})\n  name = 'World';\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Click Event Handler in LitElement\nDESCRIPTION: Adds a clickHandler method to the MyElement class. This method logs the event target and toggles the myBool property when called.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/events.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nclickHandler(event) {\n  console.log(event.target);\n  this.myBool = !this.myBool;\n}\n```\n\n----------------------------------------\n\nTITLE: Anti-Pattern: Using Expressions in Style Elements\nDESCRIPTION: Shows an anti-pattern for using expressions inside a <style> element. This approach has limitations with ShadyCSS and performance issues.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n// Anti-pattern!\nrender() {\n  return html`\n    <style>\n      :host {\n        /* Warning: this approach has limitations & performance issues! */\n        color: ${myColor}\n      } \n    </style>\n    <div>template content</div>\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Slotted Children with a Getter in LitElement\nDESCRIPTION: This snippet demonstrates how to create a getter to access assigned nodes for a particular slot in a LitElement component. It filters the assigned nodes to return only element nodes.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nget _slottedChildren() {\n  const slot = this.shadowRoot.querySelector('slot');\n  const childNodes = slot.assignedNodes({flatten: true});\n  return Array.prototype.filter.call(childNodes, (node) => node.nodeType == Node.ELEMENT_NODE);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Arrow Functions for Event Handlers in TypeScript\nDESCRIPTION: Shows how to use arrow functions as class fields in TypeScript to automatically bind 'this' for event handlers, which is useful for imperative event listeners.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyElement extends LitElement {\n  private _handleResize = () => { /* handle the event */ }\n\n  constructor() {\n    window.addEventListener('resize', this._handleResize);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Styles in LitElement\nDESCRIPTION: Demonstrates how to define component styles using the static styles getter and css template literal. Includes styling for paragraphs and color classes.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/style.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get styles() {\n  return css`\n    p {\n      font-family: Roboto;\n      font-size: 16px;\n      font-weight: 500;\n    }\n    .red {\n      color: red;\n    }\n    .blue {\n      color: blue;\n    }\n  `;\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling when updates are processed in LitElement\nDESCRIPTION: Example showing how to implement performUpdate to control when updates are processed, such as waiting for the next animation frame.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync performUpdate() {\n  await new Promise((resolve) => requestAnimationFrame(() => resolve());\n  super.performUpdate();\n}\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Decorators\nDESCRIPTION: Shows how to import decorators directly from the lit-element module. This is the recommended way to use LitElement decorators in your components.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {eventOptions} from 'lit-element';\n```\n\n----------------------------------------\n\nTITLE: Defining Properties with Types in LitElement\nDESCRIPTION: Code snippet showing how to define properties with their types in a LitElement component, including String, Boolean, and Array types.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() {\n  return {\n    message: { type: String },\n    myBool: { type: Boolean },\n    myArray: { type: Array }\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding _getUpdateComplete method in LitElement\nDESCRIPTION: Shows how to override the _getUpdateComplete method to await additional state before fulfilling the updateComplete promise, such as waiting for a child element to update.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nclass MyElement extends LitElement {\n  async _getUpdateComplete() {\n    await super._getUpdateComplete();\n    await this._myChild.updateComplete;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Render Root in LitElement\nDESCRIPTION: Demonstrates how to customize the render root of a LitElement component by implementing the createRenderRoot method. This example renders the template into the main DOM tree instead of a shadow root.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass LightDom extends LitElement {\n  render() {\n    return html`\n      <p>This template renders without shadow DOM.</p>\n    `;\n  }\n  createRenderRoot() {\n  /**\n   * Render template without shadow DOM. Note that shadow DOM features like\n   * encapsulated CSS and slots are unavailable.\n   */\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Equivalent Property Declaration without Decorators\nDESCRIPTION: Illustrates the equivalent code for declaring a reactive property without using the @property decorator. This shows how the decorator simplifies property declarations in LitElement.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() {\n  return {\n    adjective: {}\n  };\n}\n\nconstructor() {\n  this.adjective = 'awesome';\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Rollup Alias Plugin\nDESCRIPTION: Command to install the Rollup alias plugin for replacing shady-render module references.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @rollup/plugin-alias\n```\n\n----------------------------------------\n\nTITLE: Conditional Style Application in Template\nDESCRIPTION: Shows how to apply CSS classes conditionally in the component's template using a boolean property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/style.md#2025-04-16_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p class=\"${this.myBool ? 'red' : 'blue' }\">styled paragraph</p>\n```\n\n----------------------------------------\n\nTITLE: Installing LitElement via npm\nDESCRIPTION: This bash command shows how to install the LitElement package in a project using npm.\nSOURCE: https://github.com/lit/lit-element/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install lit-element\n```\n\n----------------------------------------\n\nTITLE: Equivalent Custom Element Definition without Decorators\nDESCRIPTION: Shows the equivalent code for defining a custom element without using the @customElement decorator. This snippet demonstrates what the decorator is doing behind the scenes.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Styling LitElement Host from External CSS\nDESCRIPTION: Demonstrates how to style a LitElement component using its type selector from an external stylesheet.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n<style>\n  my-element { font-family: Roboto; }\n</style>\n<my-element></my-element>\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for LitElement Project\nDESCRIPTION: Command to install dependencies for a LitElement project using npm.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd <project folder>\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Internal Property Declaration in LitElement\nDESCRIPTION: Example showing how to declare protected internal properties using the @internalProperty decorator.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@internalProperty()\nprotected active = false;\n```\n\n----------------------------------------\n\nTITLE: Importing a LitElement Component in HTML with External Module Script\nDESCRIPTION: Example of importing a LitElement component in an HTML file using an external module script source.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\" src=\"./path-to/some-package-name/some-component.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing a LitElement Component via npm\nDESCRIPTION: Command to install a LitElement component package from npm registry into your project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install some-package-name\n```\n\n----------------------------------------\n\nTITLE: Importing a LitElement Component in JavaScript Module\nDESCRIPTION: Example of importing a LitElement component in a JavaScript module using ES modules syntax.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'some-package-name';\n```\n\n----------------------------------------\n\nTITLE: Referencing StackOverflow Tags in Markdown\nDESCRIPTION: Shows how to create links to StackOverflow tags for Lit-related technologies in Markdown. This snippet demonstrates formatting for linking to the lit-element and lit-html tags on StackOverflow.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/community.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<code><a href=\"https://stackoverflow.com/tags/lit-element\">lit-element</a></code> or\n    <code><a href=\"https://stackoverflow.com/tags/lit-html\">lit-html</a></code>\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement Component\nDESCRIPTION: JavaScript code showing how to import a LitElement component in the main application file.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport './components/my-elements.js';\n```\n\n----------------------------------------\n\nTITLE: Using a LitElement Component in HTML\nDESCRIPTION: Example of adding a LitElement custom element to your HTML markup.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<some-component></some-component>\n```\n\n----------------------------------------\n\nTITLE: Installing LitElement in Existing Project\nDESCRIPTION: npm command to install LitElement in an existing project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm i lit-element\n```\n\n----------------------------------------\n\nTITLE: Setting LitElement Property Values from Attributes in Markup\nDESCRIPTION: Shows how to set property values from observed attributes in static markup for a LitElement component.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<my-element \n  mystring=\"hello world\"\n  mynumber=\"5\"\n  mybool\n  myobj='{\"stuff\":\"hi\"}'\n  myarray='[1,2,3,4]'></my-element>\n```\n\n----------------------------------------\n\nTITLE: Installing ES Dev Server for LitElement Development\nDESCRIPTION: This command installs es-dev-server as a development dependency for a LitElement project. ES dev server provides a simple, bundler-free workflow with useful transforms for module specifiers, ES5 transpilation, and polyfills.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D es-dev-server\n```\n\n----------------------------------------\n\nTITLE: Importing LitElement with Bare Module Specifiers\nDESCRIPTION: Example of using bare module specifiers to import lit-html library, which requires build system handling since browsers don't support bare module names directly.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {html} from 'lit-html';\n```\n\n----------------------------------------\n\nTITLE: Checking if an Event Bubbles\nDESCRIPTION: Shows how to determine if an event bubbles up through the DOM tree by checking its bubbles property, which is useful when working with event propagation.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/events.md#2025-04-16_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nhandleEvent(e){\n  console.log(e.bubbles);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Modern Browser Build in JavaScript\nDESCRIPTION: This Rollup configuration sets up a build for modern browsers supporting ES modules. It includes plugins for resolving modules, minifying code, and copying static assets.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport resolve from '@rollup/plugin-node-resolve';\nimport { terser } from 'rollup-plugin-terser';\nimport minifyHTML from 'rollup-plugin-minify-html-literals';\nimport copy from 'rollup-plugin-copy';\n\n// Static assets will vary depending on the application\nconst copyConfig = {\n  targets: [\n    { src: 'node_modules/@webcomponents', dest: 'build-modern/node_modules' },\n    { src: 'images', dest: 'build-modern' },\n    { src: 'data', dest: 'build-modern' },\n    { src: 'index.html', dest: 'build-modern' },\n  ],\n};\n\n// The main JavaScript bundle for modern browsers that support\n// JavaScript modules and other ES2015+ features.\nconst config = {\n  input: 'src/components/shop-app.js',\n  output: {\n    dir: 'build-modern/src/components',\n    format: 'es',\n  },\n  plugins: [\n    minifyHTML(),\n    copy(copyConfig),\n    resolve(),\n  ],\n  preserveEntrySignatures: false,\n};\n\nif (process.env.NODE_ENV !== 'development') {\n  config.plugins.push(terser());\n}\n\nexport default config;\n```\n\n----------------------------------------\n\nTITLE: Loading Universal Build Scripts in HTML\nDESCRIPTION: This HTML snippet shows how to load the various scripts required for the universal build, including polyfills, Web Components loader, SystemJS, and the main application bundle.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<!-- Babel polyfills--need to be loaded _before_ Web \n     Components polyfills -->\n<script src=\"nomodule/src/babel-polyfills-nomodule.js\"></script>\n\n<!-- Load Web Components polyfills, if needed. -->\n<script src=\"node_modules/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n\n<!-- SystemJS loader -->\n<script src=\"node_modules/systemjs/dist/s.min.js\"></script>\n\n<!-- Use SystemJS to load the application bundle -->\n<script>\n  System.import('./nomodule/src/components/shop-app.js');\n</script>\n```\n\n----------------------------------------\n\nTITLE: Preventing LitElement from Generating a Property Accessor\nDESCRIPTION: Demonstrates how to prevent LitElement from generating a property accessor by setting noAccessor to true in the property declaration.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/properties.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nstatic get properties() { \n  return { myProp: { type: Number, noAccessor: true } }; \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Universal Build Application Bundle in JavaScript\nDESCRIPTION: This Rollup configuration sets up the main application bundle for the universal build, targeting older browsers and using SystemJS as the module format.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst configs = [\n  // The main JavaScript bundle for older browsers that don't support\n  // JavaScript modules or ES2015+.\n  {\n    input: ['src/components/shop-app.js'],\n    output: {\n      dir: 'build-universal/nomodule/src/components',\n      format: 'systemjs',\n    },\n    plugins: [\n      minifyHTML(),\n      babel(babelConfig),\n      resolve(),\n      copy(copyConfig),\n    ],\n    preserveEntrySignatures: false,\n  },\n```\n\n----------------------------------------\n\nTITLE: Initial LitElement Component Setup\nDESCRIPTION: The starting code for a LitElement component named MyElement. It includes a basic template and a boolean property.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/events.md#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{% include projects/try/events/before/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Using Ternary Operator for Conditional Rendering in LitElement Templates\nDESCRIPTION: Shows how to use JavaScript's ternary operator to conditionally render different HTML based on a boolean property value in a LitElement template.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/logic.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n${this.myBool ? html`<p>something</p>` : html`<p>something else</p>`}\n```\n\n----------------------------------------\n\nTITLE: Rollup Configuration for Building LitElement Components\nDESCRIPTION: Example Rollup configuration file that resolves dependencies, converts bare module specifiers to paths, and bundles the output for production.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport resolve from 'rollup-plugin-node-resolve';\n\nexport default {\n  // If using any exports from a symlinked project, uncomment the following:\n  // preserveSymlinks: true,\n\tinput: ['src/index.js'],\n\toutput: {\n\t\tfile: 'build/index.js',\n\t\tformat: 'es',\n\t\tsourcemap: true\n\t},\n\tplugins: [\n    resolve()\n  ]\n};\n```\n\n----------------------------------------\n\nTITLE: Awaiting Async Function Result\nDESCRIPTION: Shows how to await the result of an async function that interacts with LitElement updates.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/lifecycle.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nlet result = await myFunc('stuff');\n// `result` is resolved! You can do something with it\n```\n\n----------------------------------------\n\nTITLE: Configuring ES Dev Server Command in package.json for LitElement\nDESCRIPTION: This JSON snippet adds a 'serve' script to the package.json file, configuring es-dev-server with options for index file, module resolution, file watching, and automatic browser opening. This setup provides a convenient command for starting the development server.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"serve\": \"es-dev-server --app-index index.html --node-resolve --watch --open\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Modern JavaScript Output\nDESCRIPTION: TypeScript compiler configuration to output modern JavaScript (ES2017) and ES modules.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"es2015\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Theming Example HTML File\nDESCRIPTION: The index.html file for a simple theming example with LitElement. This references external components and CSS files to demonstrate a complete theming implementation.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n{% include projects/style/theming/index.html %}\n```\n\n----------------------------------------\n\nTITLE: Running LitElement Dev Server\nDESCRIPTION: Command to start the development server for a LitElement project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript LitElement Project\nDESCRIPTION: Commands to build and watch for changes in a TypeScript LitElement project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:watch\n```\n\n----------------------------------------\n\nTITLE: Starting ES Dev Server for LitElement Development\nDESCRIPTION: This command runs the 'serve' script defined in package.json, which starts the ES dev server for LitElement development. It uses the configuration specified in the package.json to set up the development environment.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Importing External Stylesheet in LitElement\nDESCRIPTION: Shows how to include an external stylesheet in a LitElement template using a <link> tag. This approach has some limitations and is not recommended for reusable elements.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n{% include projects/style/where/my-element.js %}\n```\n\n----------------------------------------\n\nTITLE: Enabling Decorators in Babel Configuration\nDESCRIPTION: Demonstrates how to enable decorator support in Babel by adding the necessary plugins to the Babel configuration. This is required when using decorators in a JavaScript project compiled with Babel.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nplugins = [\n  '@babel/plugin-proposal-class-properties',\n  ['@babel/plugin-proposal-decorators', {decoratorsBeforeExport: true}],\n];\n```\n\n----------------------------------------\n\nTITLE: Importing UpdatingElement in JavaScript\nDESCRIPTION: This snippet shows how to import the UpdatingElement class from the lit-element library. UpdatingElement is a custom element base class that supports observable properties and core update lifecycle methods, but does not include lit-html templating.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_api/api-readme.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {UpdatingElement} from 'lit-element/lib/updating-element.js';\n```\n\n----------------------------------------\n\nTITLE: Using the unsafeCSS Function for Trusted Input in LitElement\nDESCRIPTION: Demonstrates how to use the unsafeCSS function to include expressions in CSS that are not css literals. Should only be used with trusted input as it poses a security risk with untrusted sources.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/styles.md#2025-04-16_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport {LitElement, html, css, unsafeCSS} from 'lit-element';\n\nconst mainColor = 'red';\n\nclass MyElement extends LitElement {\n  static get styles() {\n    return css`\n      div { color: ${unsafeCSS(mainColor)} }\n    `;\n  }\n  render() {\n    return html`\n      <div>Text</div>\n    `;\n  }\n}\n\ncustomElements.define('my-element', MyElement);\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for LitElement\nDESCRIPTION: Babel configuration for transpiling LitElement components with class properties and decorators support.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/publish.md#2025-04-16_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst plugins = [\n  '@babel/plugin-proposal-class-properties',\n  ['@babel/plugin-proposal-decorators', { decoratorsBeforeExport: true } ],\n];\n\nmodule.exports = { plugins };\n```\n\n----------------------------------------\n\nTITLE: Enabling Decorators in TypeScript Configuration\nDESCRIPTION: Shows the TypeScript compiler option required to enable decorators. This is necessary when using decorators in a TypeScript project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/decorators.md#2025-04-16_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"experimentalDecorators\": true,\n```\n\n----------------------------------------\n\nTITLE: Equivalent Code for @queryAssignedNodes in LitElement\nDESCRIPTION: This snippet shows the equivalent JavaScript code for the @queryAssignedNodes decorator, demonstrating how to manually implement the functionality it provides.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/templates.md#2025-04-16_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nget headerNodes() {\n  const slot = this.shadowRoot.querySelector('slot[name=header]');\n  return slot.assignedNodes({flatten: true});\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Babel for Universal Build in JavaScript\nDESCRIPTION: This Babel configuration is used in the universal build to compile code for older browsers, specifically targeting Internet Explorer 11.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport babel from 'rollup-plugin-babel';\n...\n\nconst babelConfig = {\n  babelrc: false,\n  ...{\n    presets: [\n      [\n        '@babel/preset-env',\n        {\n          targets: {\n            ie: '11',\n          },\n        },\n      ],\n    ],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for LitElement\nDESCRIPTION: TypeScript compiler configuration targeting ES2017 with Node.js module resolution and decorator support.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/publish.md#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n  \"compilerOptions\": {\n    \"target\": \"es2017\",\n    \"module\": \"es2015\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\"es2017\", \"dom\"],\n    \"experimentalDecorators\": true\n  }\n```\n\n----------------------------------------\n\nTITLE: HTML Template for Loading Web Components Polyfills\nDESCRIPTION: Complete HTML example showing how to properly load Web Components polyfills and ensure they're ready before loading the component, with handling for different browser execution orders.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<head>\n  <!-- \n    If you are loading es5 code you will need \n    custom-elements-es5-loader to make the element work in \n    es6-capable browsers. \n    \n    If you are not loading es5 code, you don't need \n    custom-elements-es5-loader. \n  --> \n  <!-- \n  <script src=\"./path-to/custom-elements-es5-loader.js\"></script>\n  -->\n\n  <!-- Load polyfills -->\n  <script \n    src=\"path-to/webcomponents-loader.js\"\n    defer>\n  </script> \n\n  <!-- Load component when polyfills are definitely ready -->\n  <script type=\"module\">\n    // Take care of cases in which the browser runs this\n    // script before it has finished running \n    // webcomponents-loader.js (e.g. Firefox script execution order)\n    window.WebComponents = window.WebComponents || { \n      waitFor(cb){ addEventListener('WebComponentsReady', cb) }\n    }\n\n    WebComponents.waitFor(async () => { \n      import('./path-to/some-element.js');\n    });\n  </script>\n</head>\n<body>\n  <!-- Add the element to the page -->\n  <some-element></some-element>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Installing Web Components Polyfills\nDESCRIPTION: Command to install the Web Components polyfills package for browser compatibility.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/use.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev @webcomponents/webcomponentsjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Babel Plugin - Exclude Pattern\nDESCRIPTION: Example of excluding node_modules from Babel transpilation in Rollup configuration.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexclude: [ 'node_modules/**' ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Package.json for npm Publication\nDESCRIPTION: Basic package.json configuration for publishing a LitElement component to npm, specifying main and module entry points.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/publish.md#2025-04-16_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"main\": \"my-element.js\",\n  \"module\": \"my-element.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Project Sample in Markdown Page\nDESCRIPTION: A liquid template include statement that embeds a live code project with specific folder path and file to open initially.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_try/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include project.html folder=\"try/create/after\" openFile=\"my-element.js\" %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Alias Plugin\nDESCRIPTION: Rollup configuration to replace shady-render module with lit-html module for modern browser builds.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nalias({\n  entries: [{\n    find: 'lit-html/lib/shady-render.js',\n    replacement: 'node_modules/lit-html/lit-html.js'\n  }]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup Babel Plugin - Include Pattern\nDESCRIPTION: Configuration for explicitly including LitElement and lit-html packages for transpilation along with source code.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ninclude: [ 'src/**', 'node_modules/lit-element/**', 'node_modules/lit-html/**']\n```\n\n----------------------------------------\n\nTITLE: Installing Web Components Polyfills for Older Browsers\nDESCRIPTION: This bash command demonstrates how to install the web components polyfills needed for supporting older browsers like IE11 and Edge.\nSOURCE: https://github.com/lit/lit-element/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @webcomponents/webcomponentsjs\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Alias\nDESCRIPTION: Webpack configuration to replace shady-render module with lit-html module for modern browser builds.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nresolve: {\n  alias: {\n    'lit-html/lib/shady-render.js': path.resolve(__dirname, './node_modules/lit-html/lit-html.js')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rollup for Universal Build Polyfill Bundle in JavaScript\nDESCRIPTION: This Rollup configuration sets up the polyfill bundle for the universal build, including Babel polyfills for older browsers.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/build.md#2025-04-16_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst configs = [\n\n   ... \n\n  // Babel polyfills for older browsers that don't support ES2015+.\n  {\n    input: 'src/babel-polyfills-nomodule.js',\n    output: {\n      file: 'build-universal/nomodule/src/babel-polyfills-nomodule.js',\n      format: 'iife',\n    },\n    plugins: [commonjs({ include: ['node_modules/**'] }), resolve()],\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Cleaning Generated Files in TypeScript Project\nDESCRIPTION: Command to remove generated files in a TypeScript LitElement project.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/start.md#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run clean\n```\n\n----------------------------------------\n\nTITLE: Referencing Slack Channels in Markdown\nDESCRIPTION: Demonstrates how to format Slack channel names in code format within Markdown. This snippet shows proper formatting for mentioning the general, beginners, and tools channels in the Lit & Friends Slack workspace.\nSOURCE: https://github.com/lit/lit-element/blob/master/docs/_guide/community.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<code>#general</code>, <code>#beginners</code>, or\n    <code>#tools</code>\n```"
  }
]