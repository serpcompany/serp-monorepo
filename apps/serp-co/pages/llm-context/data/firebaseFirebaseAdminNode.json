[
  {
    "owner": "firebase",
    "repo": "firebase-admin-node",
    "content": "TITLE: Firebase Admin Firestore API Type Definitions\nDESCRIPTION: Complete TypeScript declaration file for the firebase-admin.firestore module. It primarily re-exports types from @google-cloud/firestore while adding Firebase-specific classes and functions like FirebaseFirestoreError, getFirestore, and initializeFirestore.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.firestore.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AddPrefixToKeys } from '@google-cloud/firestore';\nimport { Agent } from 'http';\nimport { AggregateField } from '@google-cloud/firestore';\nimport { AggregateFieldType } from '@google-cloud/firestore';\nimport { AggregateQuery } from '@google-cloud/firestore';\nimport { AggregateQuerySnapshot } from '@google-cloud/firestore';\nimport { AggregateSpec } from '@google-cloud/firestore';\nimport { AggregateSpecData } from '@google-cloud/firestore';\nimport { AggregateType } from '@google-cloud/firestore';\nimport { BulkWriter } from '@google-cloud/firestore';\nimport { BulkWriterOptions } from '@google-cloud/firestore';\nimport { BundleBuilder } from '@google-cloud/firestore';\nimport { ChildUpdateFields } from '@google-cloud/firestore';\nimport { CollectionGroup } from '@google-cloud/firestore';\nimport { CollectionReference } from '@google-cloud/firestore';\nimport { DocumentChange } from '@google-cloud/firestore';\nimport { DocumentChangeType } from '@google-cloud/firestore';\nimport { DocumentData } from '@google-cloud/firestore';\nimport { DocumentReference } from '@google-cloud/firestore';\nimport { DocumentSnapshot } from '@google-cloud/firestore';\nimport { FieldPath } from '@google-cloud/firestore';\nimport { FieldValue } from '@google-cloud/firestore';\nimport { Filter } from '@google-cloud/firestore';\nimport { Firestore } from '@google-cloud/firestore';\nimport { FirestoreDataConverter } from '@google-cloud/firestore';\nimport { GeoPoint } from '@google-cloud/firestore';\nimport { GrpcStatus } from '@google-cloud/firestore';\nimport { NestedUpdateFields } from '@google-cloud/firestore';\nimport { OrderByDirection } from '@google-cloud/firestore';\nimport { PartialWithFieldValue } from '@google-cloud/firestore';\nimport { Precondition } from '@google-cloud/firestore';\nimport { Primitive } from '@google-cloud/firestore';\nimport { Query } from '@google-cloud/firestore';\nimport { QueryDocumentSnapshot } from '@google-cloud/firestore';\nimport { QueryPartition } from '@google-cloud/firestore';\nimport { QuerySnapshot } from '@google-cloud/firestore';\nimport { ReadOnlyTransactionOptions } from '@google-cloud/firestore';\nimport { ReadOptions } from '@google-cloud/firestore';\nimport { ReadWriteTransactionOptions } from '@google-cloud/firestore';\nimport { setLogFunction } from '@google-cloud/firestore';\nimport { SetOptions } from '@google-cloud/firestore';\nimport { Settings } from '@google-cloud/firestore';\nimport { Timestamp } from '@google-cloud/firestore';\nimport { Transaction } from '@google-cloud/firestore';\nimport { UnionToIntersection } from '@google-cloud/firestore';\nimport { UpdateData } from '@google-cloud/firestore';\nimport { v1 } from '@google-cloud/firestore';\nimport { WhereFilterOp } from '@google-cloud/firestore';\nimport { WithFieldValue } from '@google-cloud/firestore';\nimport { WriteBatch } from '@google-cloud/firestore';\nimport { WriteResult } from '@google-cloud/firestore';\n\nexport { AddPrefixToKeys }\n\nexport { AggregateField }\n\nexport { AggregateFieldType }\n\nexport { AggregateQuery }\n\nexport { AggregateQuerySnapshot }\n\nexport { AggregateSpec }\n\nexport { AggregateSpecData }\n\nexport { AggregateType }\n\nexport { BulkWriter }\n\nexport { BulkWriterOptions }\n\nexport { BundleBuilder }\n\nexport { ChildUpdateFields }\n\nexport { CollectionGroup }\n\nexport { CollectionReference }\n\nexport { DocumentChange }\n\nexport { DocumentChangeType }\n\nexport { DocumentData }\n\nexport { DocumentReference }\n\nexport { DocumentSnapshot }\n\nexport { FieldPath }\n\nexport { FieldValue }\n\nexport { Filter }\n\n// Warning: (ae-forgotten-export) The symbol \"FirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseFirestoreError extends FirebaseError {\n}\n\nexport { Firestore }\n\nexport { FirestoreDataConverter }\n\n// @public\nexport interface FirestoreSettings {\n    preferRest?: boolean;\n}\n\nexport { GeoPoint }\n\n// @public\nexport function getFirestore(): Firestore;\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getFirestore(app: App): Firestore;\n\n// @beta\nexport function getFirestore(databaseId: string): Firestore;\n\n// @beta\nexport function getFirestore(app: App, databaseId: string): Firestore;\n\nexport { GrpcStatus }\n\n// @public\nexport function initializeFirestore(app: App, settings?: FirestoreSettings): Firestore;\n\n// @beta\nexport function initializeFirestore(app: App, settings: FirestoreSettings, databaseId: string): Firestore;\n\nexport { NestedUpdateFields }\n\nexport { OrderByDirection }\n\nexport { PartialWithFieldValue }\n\nexport { Precondition }\n\nexport { Primitive }\n\nexport { Query }\n\nexport { QueryDocumentSnapshot }\n\nexport { QueryPartition }\n\nexport { QuerySnapshot }\n\nexport { ReadOnlyTransactionOptions }\n\nexport { ReadOptions }\n\nexport { ReadWriteTransactionOptions }\n\nexport { setLogFunction }\n\nexport { SetOptions }\n\nexport { Settings }\n\nexport { Timestamp }\n\nexport { Transaction }\n\nexport { UnionToIntersection }\n\nexport { UpdateData }\n\nexport { v1 }\n\nexport { WhereFilterOp }\n\nexport { WithFieldValue }\n\nexport { WriteBatch }\n\nexport { WriteResult }\n\n```\n\n----------------------------------------\n\nTITLE: BaseAuth Abstract Class in TypeScript\nDESCRIPTION: Abstract class defining core authentication functionalities for Firebase Admin SDK. It includes methods for user management, token verification, provider configuration, and session management.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport abstract class BaseAuth {\n    createCustomToken(uid: string, developerClaims?: object): Promise<string>;\n    createProviderConfig(config: AuthProviderConfig): Promise<AuthProviderConfig>;\n    createSessionCookie(idToken: string, sessionCookieOptions: SessionCookieOptions): Promise<string>;\n    createUser(properties: CreateRequest): Promise<UserRecord>;\n    deleteProviderConfig(providerId: string): Promise<void>;\n    deleteUser(uid: string): Promise<void>;\n    deleteUsers(uids: string[]): Promise<DeleteUsersResult>;\n    generateEmailVerificationLink(email: string, actionCodeSettings?: ActionCodeSettings): Promise<string>;\n    generatePasswordResetLink(email: string, actionCodeSettings?: ActionCodeSettings): Promise<string>;\n    generateSignInWithEmailLink(email: string, actionCodeSettings: ActionCodeSettings): Promise<string>;\n    generateVerifyAndChangeEmailLink(email: string, newEmail: string, actionCodeSettings?: ActionCodeSettings): Promise<string>;\n    getProviderConfig(providerId: string): Promise<AuthProviderConfig>;\n    getUser(uid: string): Promise<UserRecord>;\n    getUserByEmail(email: string): Promise<UserRecord>;\n    getUserByPhoneNumber(phoneNumber: string): Promise<UserRecord>;\n    getUserByProviderUid(providerId: string, uid: string): Promise<UserRecord>;\n    getUsers(identifiers: UserIdentifier[]): Promise<GetUsersResult>;\n    importUsers(users: UserImportRecord[], options?: UserImportOptions): Promise<UserImportResult>;\n    listProviderConfigs(options: AuthProviderConfigFilter): Promise<ListProviderConfigResults>;\n    listUsers(maxResults?: number, pageToken?: string): Promise<ListUsersResult>;\n    revokeRefreshTokens(uid: string): Promise<void>;\n    setCustomUserClaims(uid: string, customUserClaims: object | null): Promise<void>;\n    updateProviderConfig(providerId: string, updatedConfig: UpdateAuthProviderRequest): Promise<AuthProviderConfig>;\n    updateUser(uid: string, properties: UpdateRequest): Promise<UserRecord>;\n    // @alpha (undocumented)\n    _verifyAuthBlockingToken(token: string, audience?: string): Promise<DecodedAuthBlockingToken>;\n    verifyIdToken(idToken: string, checkRevoked?: boolean): Promise<DecodedIdToken>;\n    verifySessionCookie(sessionCookie: string, checkRevoked?: boolean): Promise<DecodedIdToken>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User Interface in TypeScript for Firebase Admin Node.js SDK\nDESCRIPTION: This TypeScript interface defines the structure of a User object in the Firebase Admin Node.js SDK. It includes properties for user data such as provider information, tenant ID, and UID, as well as a method for JSON serialization.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly providerData: UserInfo[];\nreadonly tenantId?: string | null;\ntoJSON(): object;\nreadonly tokensValidAfterTime?: string;\nreadonly uid: string;\n```\n\n----------------------------------------\n\nTITLE: User Record Class for Firebase Auth\nDESCRIPTION: Class definition for the UserRecord which represents a user account in Firebase Authentication. This class contains all user properties including profile information, authentication methods, and security settings.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class UserRecord {\n    readonly customClaims?: {\n        [key: string]: any;\n    };\n    readonly disabled: boolean;\n    readonly displayName?: string;\n    readonly email?: string;\n    readonly emailVerified: boolean;\n    readonly metadata: UserMetadata;\n    readonly multiFactor?: MultiFactorSettings;\n    readonly passwordHash?: string;\n    readonly passwordSalt?: string;\n    readonly phoneNumber?: string;\n    readonly photoURL?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript API Definitions for Firebase Admin Functions Module\nDESCRIPTION: This code defines the complete TypeScript API for the firebase-admin.functions module. It includes interfaces for different delivery methods (AbsoluteDelivery and DelayDelivery), the Functions class for interacting with Firebase Functions, and the TaskQueue class for managing function executions. It also includes utility functions like getFunctions() to obtain a Functions instance.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.functions.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport interface AbsoluteDelivery {\n    // @alpha (undocumented)\n    scheduleDelaySeconds?: never;\n    scheduleTime?: Date;\n}\n\n// @public\nexport interface DelayDelivery {\n    scheduleDelaySeconds?: number;\n    // @alpha (undocumented)\n    scheduleTime?: never;\n}\n\n// @public\nexport type DeliverySchedule = DelayDelivery | AbsoluteDelivery;\n\n// @public\nexport class Functions {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    readonly app: App;\n    taskQueue<Args = Record<string, any>>(functionName: string, extensionId?: string): TaskQueue<Args>;\n}\n\n// @public\nexport function getFunctions(app?: App): Functions;\n\n// @public\nexport type TaskOptions = DeliverySchedule & TaskOptionsExperimental & {\n    dispatchDeadlineSeconds?: number;\n    id?: string;\n    headers?: Record<string, string>;\n};\n\n// @public\nexport interface TaskOptionsExperimental {\n    // @beta\n    uri?: string;\n}\n\n// @public\nexport class TaskQueue<Args = Record<string, any>> {\n    delete(id: string): Promise<void>;\n    enqueue(data: Args, opts?: TaskOptions): Promise<void>;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Auth Class in TypeScript\nDESCRIPTION: Defines the Auth class that extends BaseAuth and includes methods for project config and tenant management.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Auth extends BaseAuth {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    get app(): App;\n    projectConfigManager(): ProjectConfigManager;\n    tenantManager(): TenantManager;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Types and Interfaces in TypeScript\nDESCRIPTION: TypeScript type definitions for Firebase Authentication, including AuthFactorType, AuthProviderConfig, and AuthProviderConfigFilter. These types define structures used for managing authentication providers and settings.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type AuthFactorType = 'phone';\n\n// @public\nexport type AuthProviderConfig = SAMLAuthProviderConfig | OIDCAuthProviderConfig;\n\n// @public\nexport interface AuthProviderConfigFilter {\n    maxResults?: number;\n    pageToken?: string;\n    type: 'saml' | 'oidc';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Admin App Module Types and Interfaces in TypeScript\nDESCRIPTION: Comprehensive type definitions for Firebase Admin Node.js SDK app module. Includes interfaces for App configuration, credentials, error handling, and authentication tokens. Contains class definitions for error codes and utility functions for app management.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.app.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport interface App {\n    name: string;\n    options: AppOptions;\n}\n\n// @public\nexport class AppErrorCodes {\n    // (undocumented)\n    static APP_DELETED: string;\n    // (undocumented)\n    static DUPLICATE_APP: string;\n    // (undocumented)\n    static INTERNAL_ERROR: string;\n    // (undocumented)\n    static INVALID_APP_NAME: string;\n    // (undocumented)\n    static INVALID_APP_OPTIONS: string;\n    // (undocumented)\n    static INVALID_ARGUMENT: string;\n    // (undocumented)\n    static INVALID_CREDENTIAL: string;\n    // (undocumented)\n    static NETWORK_ERROR: string;\n    // (undocumented)\n    static NETWORK_TIMEOUT: string;\n    // (undocumented)\n    static NO_APP: string;\n    // (undocumented)\n    static UNABLE_TO_PARSE_RESPONSE: string;\n}\n\n// @public\nexport function applicationDefault(httpAgent?: Agent): Credential;\n\n// @public\nexport interface AppOptions {\n    credential?: Credential;\n    databaseAuthVariableOverride?: object | null;\n    databaseURL?: string;\n    httpAgent?: Agent;\n    projectId?: string;\n    serviceAccountId?: string;\n    storageBucket?: string;\n}\n\n// @public\nexport function cert(serviceAccountPathOrObject: string | ServiceAccount, httpAgent?: Agent): Credential;\n\n// @public\nexport interface Credential {\n    getAccessToken(): Promise<GoogleOAuthAccessToken>;\n}\n\n// @public\nexport function deleteApp(app: App): Promise<void>;\n\n// Warning: (ae-forgotten-export) The symbol \"PrefixedFirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseAppError extends PrefixedFirebaseError {\n}\n\n// @public\nexport interface FirebaseArrayIndexError {\n    error: FirebaseError;\n    index: number;\n}\n\n// @public\nexport interface FirebaseError {\n    code: string;\n    message: string;\n    stack?: string;\n    toJSON(): object;\n}\n\n// @public (undocumented)\nexport function getApp(appName?: string): App;\n\n// @public (undocumented)\nexport function getApps(): App[];\n\n// @public\nexport interface GoogleOAuthAccessToken {\n    // (undocumented)\n    access_token: string;\n    // (undocumented)\n    expires_in: number;\n}\n\n// @public (undocumented)\nexport function initializeApp(options?: AppOptions, appName?: string): App;\n\n// @public\nexport function refreshToken(refreshTokenPathOrObject: string | object, httpAgent?: Agent): Credential;\n\n// @public (undocumented)\nexport const SDK_VERSION: string;\n\n// @public (undocumented)\nexport interface ServiceAccount {\n    // (undocumented)\n    clientEmail?: string;\n    // (undocumented)\n    privateKey?: string;\n    // (undocumented)\n    projectId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: User Identification and Update Types for Firebase Auth\nDESCRIPTION: Types for user identification and update operations. These include interfaces for different ways to identify users and for specifying changes to user accounts.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface UidIdentifier {\n    // (undocumented)\n    uid: string;\n}\n\n// @public (undocumented)\nexport type UpdateAuthProviderRequest = SAMLUpdateAuthProviderRequest | OIDCUpdateAuthProviderRequest;\n\n// @public\nexport type UpdateMultiFactorInfoRequest = UpdatePhoneMultiFactorInfoRequest;\n\n// @public\nexport interface UpdatePhoneMultiFactorInfoRequest extends BaseUpdateMultiFactorInfoRequest {\n    phoneNumber: string;\n}\n\n// @public\nexport interface UpdateProjectConfigRequest {\n    emailPrivacyConfig?: EmailPrivacyConfig;\n    mobileLinksConfig?: MobileLinksConfig;\n    multiFactorConfig?: MultiFactorConfig;\n    passwordPolicyConfig?: PasswordPolicyConfig;\n    recaptchaConfig?: RecaptchaConfig;\n    smsRegionConfig?: SmsRegionConfig;\n}\n\n// @public\nexport interface UpdateRequest {\n    disabled?: boolean;\n    displayName?: string | null;\n    email?: string;\n    emailVerified?: boolean;\n    multiFactor?: MultiFactorUpdateSettings;\n    password?: string;\n    phoneNumber?: string | null;\n    photoURL?: string | null;\n    providersToUnlink?: string[];\n    providerToLink?: UserProvider;\n}\n\n// @public\nexport interface UpdateTenantRequest {\n    anonymousSignInEnabled?: boolean;\n    displayName?: string;\n    emailPrivacyConfig?: EmailPrivacyConfig;\n    emailSignInConfig?: EmailSignInProviderConfig;\n    multiFactorConfig?: MultiFactorConfig;\n    passwordPolicyConfig?: PasswordPolicyConfig;\n    recaptchaConfig?: RecaptchaConfig;\n    smsRegionConfig?: SmsRegionConfig;\n    testPhoneNumbers?: {\n        [phoneNumber: string]: string;\n    } | null;\n}\n\n// @public\nexport type UserIdentifier = UidIdentifier | EmailIdentifier | PhoneIdentifier | ProviderIdentifier;\n```\n\n----------------------------------------\n\nTITLE: User Management Result Interfaces in TypeScript\nDESCRIPTION: Interfaces defining the structure of results returned by user management operations in Firebase Admin SDK. These include results for deleting users, retrieving users, and listing users.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface DeleteUsersResult {\n    // Warning: (ae-forgotten-export) The symbol \"FirebaseArrayIndexError\" needs to be exported by the entry point index.d.ts\n    errors: FirebaseArrayIndexError[];\n    failureCount: number;\n    successCount: number;\n}\n\n// @public\nexport interface EmailIdentifier {\n    // (undocumented)\n    email: string;\n}\n\n// @public\nexport interface EmailPrivacyConfig {\n    enableImprovedEmailPrivacy?: boolean;\n}\n\n// @public\nexport interface EmailSignInProviderConfig {\n    enabled: boolean;\n    passwordRequired?: boolean;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"PrefixedFirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseAuthError extends PrefixedFirebaseError {\n}\n\n// @public\nexport function getAuth(app?: App): Auth;\n\n// @public\nexport interface GetUsersResult {\n    notFound: UserIdentifier[];\n    users: UserRecord[];\n}\n```\n\n----------------------------------------\n\nTITLE: Project Configuration Classes for Firebase Auth\nDESCRIPTION: Classes for managing Firebase project-level configurations. ProjectConfig contains configuration settings for various project-wide auth features, while ProjectConfigManager provides methods to retrieve and update these settings.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class ProjectConfig {\n    readonly emailPrivacyConfig?: EmailPrivacyConfig;\n    readonly mobileLinksConfig?: MobileLinksConfig;\n    get multiFactorConfig(): MultiFactorConfig | undefined;\n    readonly passwordPolicyConfig?: PasswordPolicyConfig;\n    get recaptchaConfig(): RecaptchaConfig | undefined;\n    readonly smsRegionConfig?: SmsRegionConfig;\n    toJSON(): object;\n}\n\n// @public\nexport class ProjectConfigManager {\n    getProjectConfig(): Promise<ProjectConfig>;\n    updateProjectConfig(projectConfigOptions: UpdateProjectConfigRequest): Promise<ProjectConfig>;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Admin Storage Module API Interface\nDESCRIPTION: TypeScript definition file for the Firebase Admin Storage module. It includes imports from the http and @google-cloud/storage packages, and exports functions for getting download URLs and accessing Storage instances.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.storage.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\nimport { Bucket } from '@google-cloud/storage';\nimport { File as File_2 } from '@google-cloud/storage';\n\n// @public\nexport function getDownloadURL(file: File_2): Promise<string>;\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getStorage(app?: App): Storage_2;\n\n// @public\nclass Storage_2 {\n    get app(): App;\n    bucket(name?: string): Bucket;\n}\nexport { Storage_2 as Storage }\n```\n\n----------------------------------------\n\nTITLE: Tenant Management Classes for Firebase Auth\nDESCRIPTION: Classes for multi-tenancy support in Firebase Authentication. The Tenant class represents a tenant configuration, while TenantAwareAuth extends the base Auth class with tenant-specific functionality, and TenantManager provides methods to create and manage tenants.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class Tenant {\n    // (undocumented)\n    readonly anonymousSignInEnabled: boolean;\n    readonly displayName?: string;\n    readonly emailPrivacyConfig?: EmailPrivacyConfig;\n    get emailSignInConfig(): EmailSignInProviderConfig | undefined;\n    get multiFactorConfig(): MultiFactorConfig | undefined;\n    readonly passwordPolicyConfig?: PasswordPolicyConfig;\n    get recaptchaConfig(): RecaptchaConfig | undefined;\n    readonly smsRegionConfig?: SmsRegionConfig;\n    readonly tenantId: string;\n    readonly testPhoneNumbers?: {\n        [phoneNumber: string]: string;\n    };\n    toJSON(): object;\n}\n\n// @public\nexport class TenantAwareAuth extends BaseAuth {\n    createSessionCookie(idToken: string, sessionCookieOptions: SessionCookieOptions): Promise<string>;\n    readonly tenantId: string;\n    verifyIdToken(idToken: string, checkRevoked?: boolean): Promise<DecodedIdToken>;\n    verifySessionCookie(sessionCookie: string, checkRevoked?: boolean): Promise<DecodedIdToken>;\n}\n\n// @public\nexport class TenantManager {\n    authForTenant(tenantId: string): TenantAwareAuth;\n    createTenant(tenantOptions: CreateTenantRequest): Promise<Tenant>;\n    deleteTenant(tenantId: string): Promise<void>;\n    getTenant(tenantId: string): Promise<Tenant>;\n    listTenants(maxResults?: number, pageToken?: string): Promise<ListTenantsResult>;\n    updateTenant(tenantId: string, tenantOptions: UpdateTenantRequest): Promise<Tenant>;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Provider and Multi-Factor Interfaces in TypeScript\nDESCRIPTION: Interfaces for authentication provider configuration and multi-factor authentication in Firebase. These define the structure for creating and updating auth providers and multi-factor settings.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface BaseAuthProviderConfig {\n    displayName?: string;\n    enabled: boolean;\n    providerId: string;\n}\n\n// @public\nexport interface BaseCreateMultiFactorInfoRequest {\n    displayName?: string;\n    factorId: string;\n}\n\n// @public\nexport interface BaseUpdateMultiFactorInfoRequest {\n    displayName?: string;\n    enrollmentTime?: string;\n    factorId: string;\n    uid?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Admin Database Type Definitions in TypeScript\nDESCRIPTION: Defines the core types, interfaces and functions for Firebase Admin Database module. Includes extensions to base Firebase database types, error handling, and database initialization functions.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.database.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\nimport { DataSnapshot } from '@firebase/database-types';\nimport { EventType } from '@firebase/database-types';\nimport { FirebaseDatabase } from '@firebase/database-types';\nimport { OnDisconnect } from '@firebase/database-types';\nimport { Query } from '@firebase/database-types';\nimport { Reference } from '@firebase/database-types';\nimport * as rtdb from '@firebase/database-types';\nimport { ThenableReference } from '@firebase/database-types';\n\n// @public\nexport interface Database extends FirebaseDatabase {\n    getRules(): Promise<string>;\n    getRulesJSON(): Promise<object>;\n    setRules(source: string | Buffer | object): Promise<void>;\n}\n\nexport { DataSnapshot }\n\n// @public\nexport const enableLogging: typeof rtdb.enableLogging;\n\nexport { EventType }\n\n// Warning: (ae-forgotten-export) The symbol \"FirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseDatabaseError extends FirebaseError {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getDatabase(app?: App): Database;\n\n// @public\nexport function getDatabaseWithUrl(url: string, app?: App): Database;\n\nexport { OnDisconnect }\n\nexport { Query }\n\nexport { Reference }\n\n// @public\nexport const ServerValue: rtdb.ServerValue;\n\nexport { ThenableReference }\n```\n\n----------------------------------------\n\nTITLE: User Information and Metadata Classes for Firebase Auth\nDESCRIPTION: Classes for user information and metadata in Firebase Authentication. UserInfo contains basic user profile data, while UserMetadata provides information about user account creation and sign-in times.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport class UserInfo {\n    readonly displayName: string;\n    readonly email: string;\n    readonly phoneNumber: string;\n    readonly photoURL: string;\n    readonly providerId: string;\n    toJSON(): object;\n    readonly uid: string;\n}\n\n// @public\nexport class UserMetadata {\n    readonly creationTime: string;\n    readonly lastRefreshTime?: string | null;\n    readonly lastSignInTime: string;\n    toJSON(): object;\n}\n\n// @public\nexport interface UserMetadataRequest {\n    creationTime?: string;\n    lastSignInTime?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: User Provider Types for Firebase Auth\nDESCRIPTION: Interfaces for third-party authentication provider data associated with user accounts. These types define how linked provider information is structured for Firebase Authentication users.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface UserProvider {\n    displayName?: string;\n    email?: string;\n    phoneNumber?: string;\n    photoURL?: string;\n    providerId?: string;\n    uid?: string;\n}\n\n// @public\nexport interface UserProviderRequest {\n    displayName?: string;\n    email?: string;\n    phoneNumber?: string;\n    photoURL?: string;\n    providerId: string;\n    uid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Factor Authentication Types in TypeScript\nDESCRIPTION: Type definitions for multi-factor authentication including configuration state, settings classes, and provider configurations. These types support enabling and managing multi-factor authentication for Firebase users.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MultiFactorConfigState = 'ENABLED' | 'DISABLED';\n\n// @public\nexport interface MultiFactorCreateSettings {\n    enrolledFactors: CreateMultiFactorInfoRequest[];\n}\n\n// @public\nexport abstract class MultiFactorInfo {\n    readonly displayName?: string;\n    readonly enrollmentTime?: string;\n    readonly factorId: string;\n    toJSON(): object;\n    readonly uid: string;\n}\n\n// @public\nexport interface MultiFactorProviderConfig {\n    state: MultiFactorConfigState;\n    totpProviderConfig?: TotpMultiFactorProviderConfig;\n}\n\n// @public\nexport class MultiFactorSettings {\n    enrolledFactors: MultiFactorInfo[];\n    toJSON(): object;\n}\n\n// @public\nexport interface MultiFactorUpdateSettings {\n    enrolledFactors: UpdateMultiFactorInfoRequest[] | null;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Policy Configuration Types for Firebase Auth\nDESCRIPTION: Types and interfaces for configuring password strength policies in Firebase Authentication. These settings define how password requirements are enforced for user accounts.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface PasswordPolicyConfig {\n    constraints?: CustomStrengthOptionsConfig;\n    enforcementState?: PasswordPolicyEnforcementState;\n    forceUpgradeOnSignin?: boolean;\n}\n\n// @public\nexport type PasswordPolicyEnforcementState = 'ENFORCE' | 'OFF';\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Admin Messaging Interfaces and Classes in TypeScript\nDESCRIPTION: This code snippet defines various interfaces and classes for the Firebase Admin Node.js SDK messaging module. It includes configurations for different platforms, message types, and API methods for sending notifications and managing topic subscriptions.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.messaging.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport interface AndroidConfig {\n    collapseKey?: string;\n    data?: {\n        [key: string]: string;\n    };\n    directBootOk?: boolean;\n    fcmOptions?: AndroidFcmOptions;\n    notification?: AndroidNotification;\n    priority?: ('high' | 'normal');\n    restrictedPackageName?: string;\n    ttl?: number;\n}\n\n// @public\nexport interface AndroidFcmOptions {\n    analyticsLabel?: string;\n}\n\n// @public\nexport interface AndroidNotification {\n    body?: string;\n    bodyLocArgs?: string[];\n    bodyLocKey?: string;\n    channelId?: string;\n    clickAction?: string;\n    color?: string;\n    defaultLightSettings?: boolean;\n    defaultSound?: boolean;\n    defaultVibrateTimings?: boolean;\n    eventTimestamp?: Date;\n    icon?: string;\n    imageUrl?: string;\n    lightSettings?: LightSettings;\n    localOnly?: boolean;\n    notificationCount?: number;\n    priority?: ('min' | 'low' | 'default' | 'high' | 'max');\n    proxy?: ('allow' | 'deny' | 'if_priority_lowered');\n    sound?: string;\n    sticky?: boolean;\n    tag?: string;\n    ticker?: string;\n    title?: string;\n    titleLocArgs?: string[];\n    titleLocKey?: string;\n    vibrateTimingsMillis?: number[];\n    visibility?: ('private' | 'public' | 'secret');\n}\n\n// @public\nexport interface ApnsConfig {\n    fcmOptions?: ApnsFcmOptions;\n    headers?: {\n        [key: string]: string;\n    };\n    payload?: ApnsPayload;\n}\n\n// @public\nexport interface ApnsFcmOptions {\n    analyticsLabel?: string;\n    imageUrl?: string;\n}\n\n// @public\nexport interface ApnsPayload {\n    // (undocumented)\n    [customData: string]: any;\n    aps: Aps;\n}\n\n// @public\nexport interface Aps {\n    // (undocumented)\n    [customData: string]: any;\n    alert?: string | ApsAlert;\n    badge?: number;\n    category?: string;\n    contentAvailable?: boolean;\n    mutableContent?: boolean;\n    sound?: string | CriticalSound;\n    threadId?: string;\n}\n\n// @public (undocumented)\nexport interface ApsAlert {\n    // (undocumented)\n    actionLocKey?: string;\n    // (undocumented)\n    body?: string;\n    // (undocumented)\n    launchImage?: string;\n    // (undocumented)\n    locArgs?: string[];\n    // (undocumented)\n    locKey?: string;\n    // (undocumented)\n    subtitle?: string;\n    // (undocumented)\n    subtitleLocArgs?: string[];\n    // (undocumented)\n    subtitleLocKey?: string;\n    // (undocumented)\n    title?: string;\n    // (undocumented)\n    titleLocArgs?: string[];\n    // (undocumented)\n    titleLocKey?: string;\n}\n\n// @public (undocumented)\nexport interface BaseMessage {\n    // (undocumented)\n    android?: AndroidConfig;\n    // (undocumented)\n    apns?: ApnsConfig;\n    // (undocumented)\n    data?: {\n        [key: string]: string;\n    };\n    // (undocumented)\n    fcmOptions?: FcmOptions;\n    // (undocumented)\n    notification?: Notification;\n    // (undocumented)\n    webpush?: WebpushConfig;\n}\n\n// @public\nexport interface BatchResponse {\n    failureCount: number;\n    responses: SendResponse[];\n    successCount: number;\n}\n\n// @public (undocumented)\nexport interface ConditionMessage extends BaseMessage {\n    // (undocumented)\n    condition: string;\n}\n\n// @public\nexport interface CriticalSound {\n    critical?: boolean;\n    name: string;\n    volume?: number;\n}\n\n// @public\nexport interface DataMessagePayload {\n    // (undocumented)\n    [key: string]: string;\n}\n\n// @public\nexport interface FcmOptions {\n    analyticsLabel?: string;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"PrefixedFirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseMessagingError extends PrefixedFirebaseError {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getMessaging(app?: App): Messaging;\n\n// @public\nexport interface LightSettings {\n    color: string;\n    lightOffDurationMillis: number;\n    lightOnDurationMillis: number;\n}\n\n// @public\nexport type Message = TokenMessage | TopicMessage | ConditionMessage;\n\n// @public\nexport class Messaging {\n    get app(): App;\n    // @deprecated\n    enableLegacyHttpTransport(): void;\n    send(message: Message, dryRun?: boolean): Promise<string>;\n    sendEach(messages: Message[], dryRun?: boolean): Promise<BatchResponse>;\n    sendEachForMulticast(message: MulticastMessage, dryRun?: boolean): Promise<BatchResponse>;\n    subscribeToTopic(registrationTokenOrTokens: string | string[], topic: string): Promise<MessagingTopicManagementResponse>;\n    unsubscribeFromTopic(registrationTokenOrTokens: string | string[], topic: string): Promise<MessagingTopicManagementResponse>;\n}\n\n// @public\nexport class MessagingClientErrorCode {\n    // (undocumented)\n    static AUTHENTICATION_ERROR: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static DEVICE_MESSAGE_RATE_EXCEEDED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INTERNAL_ERROR: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_ARGUMENT: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_DATA_PAYLOAD_KEY: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_OPTIONS: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_PACKAGE_NAME: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_PAYLOAD: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_RECIPIENT: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_REGISTRATION_TOKEN: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static MESSAGE_RATE_EXCEEDED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static MISMATCHED_CREDENTIAL: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static PAYLOAD_SIZE_LIMIT_EXCEEDED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static REGISTRATION_TOKEN_NOT_REGISTERED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static SERVER_UNAVAILABLE: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static THIRD_PARTY_AUTH_ERROR: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static TOO_MANY_TOPICS: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static TOPICS_MESSAGE_RATE_EXCEEDED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static UNKNOWN_ERROR: {\n        code: string;\n        message: string;\n    };\n}\n\n// @public\nexport interface MessagingOptions {\n    // (undocumented)\n    [key: string]: any | undefined;\n    collapseKey?: string;\n    contentAvailable?: boolean;\n    dryRun?: boolean;\n    mutableContent?: boolean;\n    priority?: string;\n    restrictedPackageName?: string;\n    timeToLive?: number;\n}\n\n// @public\nexport interface MessagingPayload {\n    data?: DataMessagePayload;\n    notification?: NotificationMessagePayload;\n}\n\n// @public\nexport interface MessagingTopicManagementResponse {\n    // Warning: (ae-forgotten-export) The symbol \"FirebaseArrayIndexError\" needs to be exported by the entry point index.d.ts\n    errors: FirebaseArrayIndexError[];\n    failureCount: number;\n    successCount: number;\n}\n\n// @public\nexport interface MulticastMessage extends BaseMessage {\n    // (undocumented)\n    tokens: string[];\n}\n\n// @public\nexport interface Notification {\n    body?: string;\n    imageUrl?: string;\n    title?: string;\n}\n\n// @public\nexport interface NotificationMessagePayload {\n    // (undocumented)\n    [key: string]: string | undefined;\n    badge?: string;\n    body?: string;\n    bodyLocArgs?: string;\n    bodyLocKey?: string;\n    clickAction?: string;\n    color?: string;\n    icon?: string;\n    sound?: string;\n    tag?: string;\n    title?: string;\n    titleLocArgs?: string;\n    titleLocKey?: string;\n}\n\n// @public\nexport interface SendResponse {\n    // Warning: (ae-forgotten-export) The symbol \"FirebaseError\" needs to be exported by the entry point index.d.ts\n    error?: FirebaseError;\n    messageId?: string;\n    success: boolean;\n}\n\n// @public (undocumented)\nexport interface TokenMessage extends BaseMessage {\n    // (undocumented)\n    token: string;\n}\n\n// @public (undocumented)\nexport interface TopicMessage extends BaseMessage {\n    // (undocumented)\n    topic: string;\n}\n\n// @public\nexport interface WebpushConfig {\n    data?: {\n        [key: string]: string;\n    };\n    fcmOptions?: WebpushFcmOptions;\n    headers?: {\n        [key: string]: string;\n    };\n    notification?: WebpushNotification;\n}\n\n// @public\nexport interface WebpushFcmOptions {\n    link?: string;\n}\n\n// @public\nexport interface WebpushNotification {\n    // (undocumented)\n    [key: string]: any;\n    actions?: Array<{\n        action: string;\n        icon?: string;\n        title: string;\n    }>;\n    badge?: string;\n    body?: string;\n    data?: any;\n    dir?: 'auto' | 'ltr' | 'rtl';\n    icon?: string;\n    image?: string;\n    lang?: string;\n    renotify?: boolean;\n    requireInteraction?: boolean;\n    silent?: boolean;\n    tag?: string;\n    timestamp?: number;\n    title?: string;\n    vibrate?: number | number[];\n}\n```\n\n----------------------------------------\n\nTITLE: Token Decoding Interfaces in TypeScript\nDESCRIPTION: Interfaces that define the structure of decoded Firebase authentication tokens. These interfaces specify the expected properties in ID tokens and auth blocking tokens after verification.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// @alpha (undocumented)\nexport interface DecodedAuthBlockingToken {\n    // (undocumented)\n    [key: string]: any;\n    // (undocumented)\n    aud: string;\n    // (undocumented)\n    event_id: string;\n    // (undocumented)\n    event_type: string;\n    // (undocumented)\n    exp: number;\n    // (undocumented)\n    iat: number;\n    // (undocumented)\n    ip_address: string;\n    // (undocumented)\n    iss: string;\n    // (undocumented)\n    locale?: string;\n    // (undocumented)\n    oauth_access_token?: string;\n    // (undocumented)\n    oauth_expires_in?: number;\n    // (undocumented)\n    oauth_id_token?: string;\n    // (undocumented)\n    oauth_refresh_token?: string;\n    // (undocumented)\n    oauth_token_secret?: string;\n    // (undocumented)\n    raw_user_info?: string;\n    // (undocumented)\n    sign_in_attributes?: {\n        [key: string]: any;\n    };\n    // (undocumented)\n    sign_in_method?: string;\n    // (undocumented)\n    sub: string;\n    // (undocumented)\n    tenant_id?: string;\n    // (undocumented)\n    user_agent?: string;\n    // Warning: (ae-forgotten-export) The symbol \"DecodedAuthBlockingUserRecord\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    user_record?: DecodedAuthBlockingUserRecord;\n}\n\n// @public\nexport interface DecodedIdToken {\n    [key: string]: any;\n    aud: string;\n    auth_time: number;\n    email?: string;\n    email_verified?: boolean;\n    exp: number;\n    firebase: {\n        identities: {\n            [key: string]: any;\n        };\n        sign_in_provider: string;\n        sign_in_second_factor?: string;\n        second_factor_identifier?: string;\n        tenant?: string;\n        [key: string]: any;\n    };\n    iat: number;\n    iss: string;\n    phone_number?: string;\n    picture?: string;\n    sub: string;\n    uid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: User Import Types for Firebase Auth\nDESCRIPTION: Interfaces for bulk user import functionality in Firebase Authentication. These types define the format for user data during import operations and the response format for import results.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface UserImportOptions {\n    hash: {\n        algorithm: HashAlgorithmType;\n        key?: Buffer;\n        saltSeparator?: Buffer;\n        rounds?: number;\n        memoryCost?: number;\n        parallelization?: number;\n        blockSize?: number;\n        derivedKeyLength?: number;\n    };\n}\n\n// @public\nexport interface UserImportRecord {\n    customClaims?: {\n        [key: string]: any;\n    };\n    disabled?: boolean;\n    displayName?: string;\n    email?: string;\n    emailVerified?: boolean;\n    metadata?: UserMetadataRequest;\n    multiFactor?: MultiFactorUpdateSettings;\n    passwordHash?: Buffer;\n    passwordSalt?: Buffer;\n    phoneNumber?: string;\n    photoURL?: string;\n    providerData?: UserProviderRequest[];\n    tenantId?: string;\n    uid: string;\n}\n\n// @public\nexport interface UserImportResult {\n    errors: FirebaseArrayIndexError[];\n    failureCount: number;\n    successCount: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Phone Authentication Types for Firebase Auth\nDESCRIPTION: Type definitions for phone authentication and phone-based multi-factor authentication. Includes the PhoneMultiFactorInfo class which extends the base MultiFactorInfo class to provide phone-specific functionality.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface PhoneIdentifier {\n    // (undocumented)\n    phoneNumber: string;\n}\n\n// @public\nexport class PhoneMultiFactorInfo extends MultiFactorInfo {\n    readonly phoneNumber: string;\n    toJSON(): object;\n}\n```\n\n----------------------------------------\n\nTITLE: SAML Authentication Provider Types for Firebase Auth\nDESCRIPTION: Interface definitions for SAML-based authentication providers. These types define how SAML identity providers are configured and updated within Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface SAMLAuthProviderConfig extends BaseAuthProviderConfig {\n    callbackURL?: string;\n    idpEntityId: string;\n    rpEntityId: string;\n    ssoURL: string;\n    x509Certificates: string[];\n}\n\n// @public\nexport interface SAMLUpdateAuthProviderRequest {\n    callbackURL?: string;\n    displayName?: string;\n    enabled?: boolean;\n    idpEntityId?: string;\n    rpEntityId?: string;\n    ssoURL?: string;\n    x509Certificates?: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: OAuth and OIDC Provider Interfaces in Firebase Auth\nDESCRIPTION: Interface definitions for OAuth and OpenID Connect (OIDC) authentication providers. These interfaces define configuration properties for setting up third-party identity providers with Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface OAuthResponseType {\n    code?: boolean;\n    idToken?: boolean;\n}\n\n// @public\nexport interface OIDCAuthProviderConfig extends BaseAuthProviderConfig {\n    clientId: string;\n    clientSecret?: string;\n    issuer: string;\n    responseType?: OAuthResponseType;\n}\n\n// @public\nexport interface OIDCUpdateAuthProviderRequest {\n    clientId?: string;\n    clientSecret?: string;\n    displayName?: string;\n    enabled?: boolean;\n    issuer?: string;\n    responseType?: OAuthResponseType;\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-Factor Authentication Request Interfaces in TypeScript\nDESCRIPTION: TypeScript interfaces for creating and managing multi-factor authentication settings in Firebase. Includes phone multi-factor requests and general multi-factor settings structures.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type CreateMultiFactorInfoRequest = CreatePhoneMultiFactorInfoRequest;\n\n// @public\nexport interface CreatePhoneMultiFactorInfoRequest extends BaseCreateMultiFactorInfoRequest {\n    phoneNumber: string;\n}\n\n// @public\nexport interface CreateRequest extends UpdateRequest {\n    multiFactor?: MultiFactorCreateSettings;\n    uid?: string;\n}\n\n// @public\nexport type CreateTenantRequest = UpdateTenantRequest;\n```\n\n----------------------------------------\n\nTITLE: Provider Identifier Interface for Firebase Auth\nDESCRIPTION: Interface for identifying users by their provider information. This type is used when referencing users by their third-party authentication provider details.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface ProviderIdentifier {\n    // (undocumented)\n    providerId: string;\n    // (undocumented)\n    providerUid: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Hash Algorithms and Results Interfaces in TypeScript\nDESCRIPTION: Type definitions for hash algorithms used in user password management and interfaces for various list operation results in Firebase Authentication. These specify supported hash types and pagination structures.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n// @public (undocumented)\nexport type HashAlgorithmType = 'SCRYPT' | 'STANDARD_SCRYPT' | 'HMAC_SHA512' | 'HMAC_SHA256' | 'HMAC_SHA1' | 'HMAC_MD5' | 'MD5' | 'PBKDF_SHA1' | 'BCRYPT' | 'PBKDF2_SHA256' | 'SHA512' | 'SHA256' | 'SHA1';\n\n// @public\nexport interface ListProviderConfigResults {\n    pageToken?: string;\n    providerConfigs: AuthProviderConfig[];\n}\n\n// @public\nexport interface ListTenantsResult {\n    pageToken?: string;\n    tenants: Tenant[];\n}\n\n// @public\nexport interface ListUsersResult {\n    pageToken?: string;\n    users: UserRecord[];\n}\n```\n\n----------------------------------------\n\nTITLE: reCAPTCHA Configuration Types for Firebase Auth\nDESCRIPTION: Type definitions for reCAPTCHA configuration in Firebase Authentication. These types define how bot detection and protection mechanisms are set up for authentication operations.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport type RecaptchaAction = 'BLOCK';\n\n// @public\nexport interface RecaptchaConfig {\n    emailPasswordEnforcementState?: RecaptchaProviderEnforcementState;\n    managedRules?: RecaptchaManagedRule[];\n    phoneEnforcementState?: RecaptchaProviderEnforcementState;\n    recaptchaKeys?: RecaptchaKey[];\n    smsTollFraudManagedRules?: RecaptchaTollFraudManagedRule[];\n    useAccountDefender?: boolean;\n    useSmsBotScore?: boolean;\n    useSmsTollFraudProtection?: boolean;\n}\n\n// @public\nexport interface RecaptchaKey {\n    key: string;\n    type?: RecaptchaKeyClientType;\n}\n\n// @public\nexport type RecaptchaKeyClientType = 'WEB' | 'IOS' | 'ANDROID';\n\n// @public\nexport interface RecaptchaManagedRule {\n    action?: RecaptchaAction;\n    endScore: number;\n}\n\n// @public\nexport type RecaptchaProviderEnforcementState = 'OFF' | 'AUDIT' | 'ENFORCE';\n\n// @public\nexport interface RecaptchaTollFraudManagedRule {\n    action?: RecaptchaAction;\n    startScore: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TOTP Multi-Factor Provider Config Interface\nDESCRIPTION: Interface definition for Time-based One-Time Password (TOTP) multi-factor authentication provider configuration. This type defines parameters for configuring TOTP as a second factor in Firebase Authentication.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface TotpMultiFactorProviderConfig {\n    adjacentIntervals?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase ML API TypeScript Definitions\nDESCRIPTION: TypeScript interface and class definitions for Firebase Machine Learning API including model management, listing, and TFLite model handling. Contains interfaces for model options, list operations, and core ML functionality classes.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.machine-learning.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\nexport interface GcsTfliteModelOptions extends ModelOptionsBase {\n    tfliteModel: {\n        gcsTfliteUri: string;\n    };\n}\n\nexport function getMachineLearning(app?: App): MachineLearning;\n\nexport interface ListModelsOptions {\n    filter?: string;\n    pageSize?: number;\n    pageToken?: string;\n}\n\nexport interface ListModelsResult {\n    readonly models: Model[];\n    readonly pageToken?: string;\n}\n\nexport class MachineLearning {\n    get app(): App;\n    createModel(model: ModelOptions): Promise<Model>;\n    deleteModel(modelId: string): Promise<void>;\n    getModel(modelId: string): Promise<Model>;\n    listModels(options?: ListModelsOptions): Promise<ListModelsResult>;\n    publishModel(modelId: string): Promise<Model>;\n    unpublishModel(modelId: string): Promise<Model>;\n    updateModel(modelId: string, model: ModelOptions): Promise<Model>;\n}\n\nexport class Model {\n    get createTime(): string;\n    get displayName(): string;\n    get etag(): string;\n    get locked(): boolean;\n    get modelHash(): string | undefined;\n    get modelId(): string;\n    get published(): boolean;\n    get tags(): string[];\n    get tfliteModel(): TFLiteModel | undefined;\n    toJSON(): {\n        [key: string]: any;\n    };\n    get updateTime(): string;\n    get validationError(): string | undefined;\n    waitForUnlocked(maxTimeMillis?: number): Promise<void>;\n}\n\nexport type ModelOptions = ModelOptionsBase | GcsTfliteModelOptions;\n\nexport interface ModelOptionsBase {\n    displayName?: string;\n    tags?: string[];\n}\n\nexport interface TFLiteModel {\n    readonly gcsTfliteUri?: string;\n    readonly sizeBytes: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Password Strength Configuration in TypeScript\nDESCRIPTION: Interface defining custom password strength requirements for Firebase Authentication. This allows configuring minimum length, character type requirements, and other password complexity settings.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface CustomStrengthOptionsConfig {\n    maxLength?: number;\n    minLength?: number;\n    requireLowercase?: boolean;\n    requireNonAlphanumeric?: boolean;\n    requireNumeric?: boolean;\n    requireUppercase?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Mobile Links Configuration Interfaces in TypeScript\nDESCRIPTION: Interfaces for configuring mobile links in Firebase Authentication. These define settings for dynamic links domains used in various authentication flows like email verification and password reset.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface MobileLinksConfig {\n    domain?: MobileLinksDomain;\n}\n\n// @public\nexport type MobileLinksDomain = 'HOSTING_DOMAIN' | 'FIREBASE_DYNAMIC_LINK_DOMAIN';\n\n// @public\nexport interface MultiFactorConfig {\n    factorIds?: AuthFactorType[];\n    providerConfigs?: MultiFactorProviderConfig[];\n    state: MultiFactorConfigState;\n}\n```\n\n----------------------------------------\n\nTITLE: Session Management Types for Firebase Auth\nDESCRIPTION: Interface for Firebase Authentication session cookie options. This defines the parameters for creating session cookies for authenticated users.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// @public\nexport interface SessionCookieOptions {\n    expiresIn: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Error Constants in TypeScript\nDESCRIPTION: Static error constants for Firebase Authentication, each containing a code and message property. These represent various error conditions that can occur during authentication operations.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// (undocumented)\nstatic MISSING_UID: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic NOT_FOUND: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic OPERATION_NOT_ALLOWED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic PHONE_NUMBER_ALREADY_EXISTS: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic PROJECT_NOT_FOUND: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic QUOTA_EXCEEDED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic RECAPTCHA_NOT_ENABLED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic SECOND_FACTOR_LIMIT_EXCEEDED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic SECOND_FACTOR_UID_ALREADY_EXISTS: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic SESSION_COOKIE_EXPIRED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic SESSION_COOKIE_REVOKED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic TENANT_NOT_FOUND: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UID_ALREADY_EXISTS: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UNAUTHORIZED_DOMAIN: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UNSUPPORTED_FIRST_FACTOR: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UNSUPPORTED_SECOND_FACTOR: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UNSUPPORTED_TENANT_OPERATION: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic UNVERIFIED_EMAIL: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic USER_DISABLED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic USER_NOT_DISABLED: {\n    code: string;\n    message: string;\n};\n// (undocumented)\nstatic USER_NOT_FOUND: {\n    code: string;\n    message: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ActionCodeSettings Interface in TypeScript\nDESCRIPTION: Defines the ActionCodeSettings interface with properties for Android, iOS, and web settings for action code URLs.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface ActionCodeSettings {\n    android?: {\n        packageName: string;\n        installApp?: boolean;\n        minimumVersion?: string;\n    };\n    // @deprecated\n    dynamicLinkDomain?: string;\n    handleCodeInApp?: boolean;\n    iOS?: {\n        bundleId: string;\n    };\n    linkDomain?: string;\n    url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Firebase Project Management Types in TypeScript\nDESCRIPTION: TypeScript type definitions and class declarations for Firebase Admin project management functionality. Includes classes and interfaces for managing Android apps, iOS apps, SHA certificates, and project metadata.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.project-management.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport class AndroidApp {\n    addShaCertificate(certificateToAdd: ShaCertificate): Promise<void>;\n    // (undocumented)\n    readonly appId: string;\n    deleteShaCertificate(certificateToDelete: ShaCertificate): Promise<void>;\n    getConfig(): Promise<string>;\n    getMetadata(): Promise<AndroidAppMetadata>;\n    getShaCertificates(): Promise<ShaCertificate[]>;\n    setDisplayName(newDisplayName: string): Promise<void>;\n}\n\n// @public\nexport interface AndroidAppMetadata extends AppMetadata {\n    packageName: string;\n    // (undocumented)\n    platform: AppPlatform.ANDROID;\n}\n\n// @public\nexport interface AppMetadata {\n    appId: string;\n    displayName?: string;\n    platform: AppPlatform;\n    projectId: string;\n    resourceName: string;\n}\n\n// @public\nexport enum AppPlatform {\n    ANDROID = \"ANDROID\",\n    IOS = \"IOS\",\n    PLATFORM_UNKNOWN = \"PLATFORM_UNKNOWN\"\n}\n\n// Warning: (ae-forgotten-export) The symbol \"PrefixedFirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseProjectManagementError extends PrefixedFirebaseError {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getProjectManagement(app?: App): ProjectManagement;\n\n// @public\nexport class IosApp {\n    // (undocumented)\n    readonly appId: string;\n    getConfig(): Promise<string>;\n    getMetadata(): Promise<IosAppMetadata>;\n    setDisplayName(newDisplayName: string): Promise<void>;\n}\n\n// @public\nexport interface IosAppMetadata extends AppMetadata {\n    bundleId: string;\n    // (undocumented)\n    platform: AppPlatform.IOS;\n}\n\n// @public\nexport class ProjectManagement {\n    androidApp(appId: string): AndroidApp;\n    // (undocumented)\n    readonly app: App;\n    createAndroidApp(packageName: string, displayName?: string): Promise<AndroidApp>;\n    createIosApp(bundleId: string, displayName?: string): Promise<IosApp>;\n    iosApp(appId: string): IosApp;\n    listAndroidApps(): Promise<AndroidApp[]>;\n    listAppMetadata(): Promise<AppMetadata[]>;\n    listIosApps(): Promise<IosApp[]>;\n    setDisplayName(newDisplayName: string): Promise<void>;\n    shaCertificate(shaHash: string): ShaCertificate;\n}\n\n// @public (undocumented)\nexport type ProjectManagementErrorCode = 'already-exists' | 'authentication-error' | 'internal-error' | 'invalid-argument' | 'invalid-project-id' | 'invalid-server-response' | 'not-found' | 'service-unavailable' | 'unknown-error';\n\n// @public\nexport class ShaCertificate {\n    readonly certType: ('sha1' | 'sha256');\n    // (undocumented)\n    readonly resourceName?: string | undefined;\n    // (undocumented)\n    readonly shaHash: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AppCheck API Types and Classes in TypeScript\nDESCRIPTION: This code defines the Firebase Admin Node.js SDK's AppCheck module API. It includes the AppCheck class, token interfaces, and utility functions for creating and verifying App Check tokens in a Firebase application.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.app-check.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport class AppCheck {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    readonly app: App;\n    createToken(appId: string, options?: AppCheckTokenOptions): Promise<AppCheckToken>;\n    verifyToken(appCheckToken: string, options?: VerifyAppCheckTokenOptions): Promise<VerifyAppCheckTokenResponse>;\n}\n\n// @public\nexport interface AppCheckToken {\n    token: string;\n    ttlMillis: number;\n}\n\n// @public\nexport interface AppCheckTokenOptions {\n    ttlMillis?: number;\n}\n\n// @public\nexport interface DecodedAppCheckToken {\n    // (undocumented)\n    [key: string]: any;\n    app_id: string;\n    aud: string[];\n    exp: number;\n    iat: number;\n    iss: string;\n    sub: string;\n}\n\n// @public\nexport function getAppCheck(app?: App): AppCheck;\n\n// @public\nexport interface VerifyAppCheckTokenOptions {\n    consume?: boolean;\n}\n\n// @public\nexport interface VerifyAppCheckTokenResponse {\n    alreadyConsumed?: boolean;\n    appId: string;\n    token: DecodedAppCheckToken;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK using ES2015 import\nDESCRIPTION: Example showing how to import and initialize the Firebase Admin SDK using ES2015 import syntax. This approach can be used if you're working with ECMAScript modules.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/README.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { initializeApp } from \"firebase-admin/app\";\n\ninitializeApp();\n```\n\n----------------------------------------\n\nTITLE: Initializing Firebase Admin SDK using CommonJS require\nDESCRIPTION: Example showing how to import and initialize the Firebase Admin SDK using CommonJS require syntax. This code imports the initializeApp function from the app module.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/README.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { initializeApp } = require(\"firebase-admin/app\");\n\ninitializeApp();\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface and Enum Definitions for Firebase Remote Config\nDESCRIPTION: Comprehensive type definitions for Firebase Remote Config including conditions, parameters, templates, and evaluation contexts. These types define the structure and behavior of remote configuration in the Firebase Admin Node.js SDK.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.remote-config.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport interface AndCondition {\n    conditions?: Array<OneOfCondition>;\n}\n\n// @public\nexport interface CustomSignalCondition {\n    customSignalKey?: string;\n    customSignalOperator?: CustomSignalOperator;\n    targetCustomSignalValues?: string[];\n}\n\n// @public\nexport enum CustomSignalOperator {\n    NUMERIC_EQUAL = \"NUMERIC_EQUAL\",\n    NUMERIC_GREATER_EQUAL = \"NUMERIC_GREATER_EQUAL\",\n    NUMERIC_GREATER_THAN = \"NUMERIC_GREATER_THAN\",\n    NUMERIC_LESS_EQUAL = \"NUMERIC_LESS_EQUAL\",\n    NUMERIC_LESS_THAN = \"NUMERIC_LESS_THAN\",\n    NUMERIC_NOT_EQUAL = \"NUMERIC_NOT_EQUAL\",\n    SEMANTIC_VERSION_EQUAL = \"SEMANTIC_VERSION_EQUAL\",\n    SEMANTIC_VERSION_GREATER_EQUAL = \"SEMANTIC_VERSION_GREATER_EQUAL\",\n    SEMANTIC_VERSION_GREATER_THAN = \"SEMANTIC_VERSION_GREATER_THAN\",\n    SEMANTIC_VERSION_LESS_EQUAL = \"SEMANTIC_VERSION_LESS_EQUAL\",\n    SEMANTIC_VERSION_LESS_THAN = \"SEMANTIC_VERSION_LESS_THAN\",\n    SEMANTIC_VERSION_NOT_EQUAL = \"SEMANTIC_VERSION_NOT_EQUAL\",\n    STRING_CONTAINS = \"STRING_CONTAINS\",\n    STRING_CONTAINS_REGEX = \"STRING_CONTAINS_REGEX\",\n    STRING_DOES_NOT_CONTAIN = \"STRING_DOES_NOT_CONTAIN\",\n    STRING_EXACTLY_MATCHES = \"STRING_EXACTLY_MATCHES\",\n    UNKNOWN = \"UNKNOWN\"\n}\n\n// @public\nexport type DefaultConfig = {\n    [key: string]: string | number | boolean;\n};\n\n// @public\nexport type EvaluationContext = UserProvidedSignals & PredefinedSignals;\n\n// @public\nexport interface ExplicitParameterValue {\n    value: string;\n}\n\n// @public\nexport interface FetchResponseData {\n    config?: {\n        [key: string]: string;\n    };\n    eTag?: string;\n    status: number;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getRemoteConfig(app?: App): RemoteConfig;\n\n// @public\nexport interface GetServerTemplateOptions {\n    defaultConfig?: DefaultConfig;\n}\n\n// @public\nexport interface InAppDefaultValue {\n    useInAppDefault: boolean;\n}\n\n// @public\nexport interface InitServerTemplateOptions extends GetServerTemplateOptions {\n    template?: ServerTemplateDataType;\n}\n\n// @public\nexport interface ListVersionsOptions {\n    endTime?: Date | string;\n    endVersionNumber?: string | number;\n    pageSize?: number;\n    pageToken?: string;\n    startTime?: Date | string;\n}\n\n// @public\nexport interface ListVersionsResult {\n    nextPageToken?: string;\n    versions: Version[];\n}\n\n// @public\nexport interface MicroPercentRange {\n    microPercentLowerBound?: number;\n    microPercentUpperBound?: number;\n}\n\n// @public\nexport interface NamedCondition {\n    condition: OneOfCondition;\n    name: string;\n}\n\n// @public\nexport interface OneOfCondition {\n    andCondition?: AndCondition;\n    customSignal?: CustomSignalCondition;\n    false?: Record<string, never>;\n    orCondition?: OrCondition;\n    percent?: PercentCondition;\n    true?: Record<string, never>;\n}\n\n// @public\nexport interface OrCondition {\n    conditions?: Array<OneOfCondition>;\n}\n\n// @public\nexport type ParameterValueType = 'STRING' | 'BOOLEAN' | 'NUMBER' | 'JSON';\n\n// @public\nexport interface PercentCondition {\n    microPercent?: number;\n    microPercentRange?: MicroPercentRange;\n    percentOperator?: PercentConditionOperator;\n    seed?: string;\n}\n\n// @public\nexport enum PercentConditionOperator {\n    BETWEEN = \"BETWEEN\",\n    GREATER_THAN = \"GREATER_THAN\",\n    LESS_OR_EQUAL = \"LESS_OR_EQUAL\",\n    UNKNOWN = \"UNKNOWN\"\n}\n\n// @public\nexport type PredefinedSignals = {\n    randomizationId?: string;\n};\n\n// @public\nexport class RemoteConfig {\n    // (undocumented)\n    readonly app: App;\n    createTemplateFromJSON(json: string): RemoteConfigTemplate;\n    getServerTemplate(options?: GetServerTemplateOptions): Promise<ServerTemplate>;\n    getTemplate(): Promise<RemoteConfigTemplate>;\n    getTemplateAtVersion(versionNumber: number | string): Promise<RemoteConfigTemplate>;\n    initServerTemplate(options?: InitServerTemplateOptions): ServerTemplate;\n    listVersions(options?: ListVersionsOptions): Promise<ListVersionsResult>;\n    publishTemplate(template: RemoteConfigTemplate, options?: {\n        force: boolean;\n    }): Promise<RemoteConfigTemplate>;\n    rollback(versionNumber: number | string): Promise<RemoteConfigTemplate>;\n    validateTemplate(template: RemoteConfigTemplate): Promise<RemoteConfigTemplate>;\n}\n\n// @public\nexport interface RemoteConfigCondition {\n    expression: string;\n    name: string;\n    tagColor?: TagColor;\n}\n\n// @public\nexport class RemoteConfigFetchResponse {\n    constructor(app: App, serverConfig: ServerConfig, requestEtag?: string);\n    // (undocumented)\n    toJSON(): FetchResponseData;\n}\n\n// @public\nexport interface RemoteConfigParameter {\n    conditionalValues?: {\n        [key: string]: RemoteConfigParameterValue;\n    };\n    defaultValue?: RemoteConfigParameterValue;\n    description?: string;\n    valueType?: ParameterValueType;\n}\n\n// @public\nexport interface RemoteConfigParameterGroup {\n    description?: string;\n    parameters: {\n        [key: string]: RemoteConfigParameter;\n    };\n}\n\n// @public\nexport type RemoteConfigParameterValue = ExplicitParameterValue | InAppDefaultValue;\n\n// @public\nexport interface RemoteConfigTemplate {\n    conditions: RemoteConfigCondition[];\n    readonly etag: string;\n    parameterGroups: {\n        [key: string]: RemoteConfigParameterGroup;\n    };\n    parameters: {\n        [key: string]: RemoteConfigParameter;\n    };\n    version?: Version;\n}\n\n// @public\nexport interface RemoteConfigUser {\n    email: string;\n    imageUrl?: string;\n    name?: string;\n}\n\n// @public\nexport interface ServerConfig {\n    getAll(): {\n        [key: string]: Value;\n    };\n    getBoolean(key: string): boolean;\n    getNumber(key: string): number;\n    getString(key: string): string;\n    getValue(key: string): Value;\n}\n\n// @public\nexport interface ServerTemplate {\n    evaluate(context?: EvaluationContext): ServerConfig;\n    load(): Promise<void>;\n    set(template: ServerTemplateDataType): void;\n    toJSON(): ServerTemplateData;\n}\n\n// @public\nexport interface ServerTemplateData {\n    conditions: NamedCondition[];\n    readonly etag: string;\n    parameters: {\n        [key: string]: RemoteConfigParameter;\n    };\n    version?: Version;\n}\n\n// @public\nexport type ServerTemplateDataType = ServerTemplateData | string;\n\n// @public\nexport type TagColor = 'BLUE' | 'BROWN' | 'CYAN' | 'DEEP_ORANGE' | 'GREEN' | 'INDIGO' | 'LIME' | 'ORANGE' | 'PINK' | 'PURPLE' | 'TEAL';\n\n// @public\nexport type UserProvidedSignals = {\n    [key: string]: string | number;\n};\n\n// @public\nexport interface Value {\n    asBoolean(): boolean;\n    asNumber(): number;\n    asString(): string;\n    getSource(): ValueSource;\n}\n\n// @public\nexport type ValueSource = 'static' | 'default' | 'remote';\n\n// @public\nexport interface Version {\n    description?: string;\n    isLegacy?: boolean;\n    rollbackSource?: string;\n    updateOrigin?: ('REMOTE_CONFIG_UPDATE_ORIGIN_UNSPECIFIED' | 'CONSOLE' | 'REST_API' | 'ADMIN_SDK_NODE');\n    updateTime?: string;\n    updateType?: ('REMOTE_CONFIG_UPDATE_TYPE_UNSPECIFIED' | 'INCREMENTAL_UPDATE' | 'FORCED_UPDATE' | 'ROLLBACK');\n    updateUser?: RemoteConfigUser;\n    versionNumber?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Installations API Definitions in TypeScript\nDESCRIPTION: This TypeScript API extract defines the Firebase Admin Node.js Installations module interfaces. It provides classes and functions for working with Firebase installations, including the main Installations class, error handling with FirebaseInstallationsError, and utility functions like getInstallations().\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.installations.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// Warning: (ae-forgotten-export) The symbol \"FirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseInstallationsError extends FirebaseError {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getInstallations(app?: App): Installations;\n\n// @public\nexport class Installations {\n    get app(): App;\n    deleteInstallation(fid: string): Promise<void>;\n}\n\n// @public (undocumented)\nexport class InstallationsClientErrorCode {\n    // (undocumented)\n    static API_ERROR: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_ARGUMENT: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_INSTALLATION_ID: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static INVALID_PROJECT_ID: {\n        code: string;\n        message: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Security Rules API for Firebase Admin Node.js SDK\nDESCRIPTION: This TypeScript code defines the API for managing Security Rules in Firebase. It includes functions and classes for creating, retrieving, and managing rulesets for Firestore and Storage. The API allows for operations such as creating rulesets, listing ruleset metadata, and releasing rulesets for different Firebase services.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.security-rules.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport function getSecurityRules(app?: App): SecurityRules;\n\n// @public\nexport class Ruleset implements RulesetMetadata {\n    readonly createTime: string;\n    readonly name: string;\n    // (undocumented)\n    readonly source: RulesFile[];\n}\n\n// @public\nexport interface RulesetMetadata {\n    readonly createTime: string;\n    readonly name: string;\n}\n\n// @public\nexport class RulesetMetadataList {\n    readonly nextPageToken?: string;\n    readonly rulesets: RulesetMetadata[];\n}\n\n// @public\nexport interface RulesFile {\n    // (undocumented)\n    readonly content: string;\n    // (undocumented)\n    readonly name: string;\n}\n\n// @public\nexport class SecurityRules {\n    // (undocumented)\n    readonly app: App;\n    createRuleset(file: RulesFile): Promise<Ruleset>;\n    createRulesFileFromSource(name: string, source: string | Buffer): RulesFile;\n    deleteRuleset(name: string): Promise<void>;\n    getFirestoreRuleset(): Promise<Ruleset>;\n    getRuleset(name: string): Promise<Ruleset>;\n    getStorageRuleset(bucket?: string): Promise<Ruleset>;\n    listRulesetMetadata(pageSize?: number, nextPageToken?: string): Promise<RulesetMetadataList>;\n    releaseFirestoreRuleset(ruleset: string | RulesetMetadata): Promise<void>;\n    releaseFirestoreRulesetFromSource(source: string | Buffer): Promise<Ruleset>;\n    releaseStorageRuleset(ruleset: string | RulesetMetadata, bucket?: string): Promise<void>;\n    releaseStorageRulesetFromSource(source: string | Buffer, bucket?: string): Promise<Ruleset>;\n}\n```\n\n----------------------------------------\n\nTITLE: Firebase Admin Data Connect API Type Definitions in TypeScript\nDESCRIPTION: Comprehensive type definitions for the firebase-admin.data-connect module, including the DataConnect class, connector configuration interfaces, authentication types, and GraphQL execution methods. This defines the public API surface for interacting with Firebase Data Connect services.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.data-connect.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// Warning: (ae-forgotten-export) The symbol \"DecodedIdToken\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport type AuthClaims = Partial<DecodedIdToken>;\n\n// @public\nexport interface ConnectorConfig {\n    location: string;\n    serviceId: string;\n}\n\n// @public\nexport class DataConnect {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    readonly app: App;\n    // (undocumented)\n    readonly connectorConfig: ConnectorConfig;\n    // @beta\n    executeGraphql<GraphqlResponse, Variables>(query: string, options?: GraphqlOptions<Variables>): Promise<ExecuteGraphqlResponse<GraphqlResponse>>;\n    // @beta\n    executeGraphqlRead<GraphqlResponse, Variables>(query: string, options?: GraphqlOptions<Variables>): Promise<ExecuteGraphqlResponse<GraphqlResponse>>;\n}\n\n// @public\nexport interface ExecuteGraphqlResponse<GraphqlResponse> {\n    data: GraphqlResponse;\n}\n\n// @public\nexport function getDataConnect(connectorConfig: ConnectorConfig, app?: App): DataConnect;\n\n// @public\nexport interface GraphqlOptions<Variables> {\n    impersonate?: ImpersonateAuthenticated | ImpersonateUnauthenticated;\n    operationName?: string;\n    variables?: Variables;\n}\n\n// @public\nexport interface ImpersonateAuthenticated {\n    authClaims: AuthClaims;\n    unauthenticated?: never;\n}\n\n// @public\nexport interface ImpersonateUnauthenticated {\n    authClaims?: never;\n    unauthenticated: true;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthClientErrorCode Class in TypeScript\nDESCRIPTION: Defines the AuthClientErrorCode class with static properties for various authentication error codes and messages.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.auth.api.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class AuthClientErrorCode {\n    // (undocumented)\n    static AUTH_BLOCKING_TOKEN_EXPIRED: {\n        code: string;\n        message: string;\n    };\n    // (undocumented)\n    static BILLING_NOT_ENABLED: {\n        code: string;\n        message: string;\n    };\n    // ... (additional error codes omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Declarations for Firebase Extensions API\nDESCRIPTION: TypeScript declarations for the Firebase Extensions API, defining the Extensions class, Runtime class for managing extension states, and utility functions. The file imports the Agent type from 'http' and exports public classes and types for Firebase Extensions integration.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.extensions.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport class Extensions {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    //\n    // (undocumented)\n    readonly app: App;\n    runtime(): Runtime;\n}\n\n// @public\nexport function getExtensions(app?: App): Extensions;\n\n// @public\nexport class Runtime {\n    setFatalError(errorMessage: string): Promise<void>;\n    setProcessingState(state: SettableProcessingState, detailMessage: string): Promise<void>;\n}\n\n// @public\nexport type SettableProcessingState = 'NONE' | 'PROCESSING_COMPLETE' | 'PROCESSING_WARNING' | 'PROCESSING_FAILED';\n```\n\n----------------------------------------\n\nTITLE: Defining Eventarc API Types and Classes in TypeScript\nDESCRIPTION: This code defines the complete TypeScript interface for the firebase-admin.eventarc module, including Channel, ChannelOptions, CloudEvent, CloudEventVersion interfaces and classes, as well as the Eventarc class and getEventarc function. It enables working with Cloud Events and Eventarc channels in Firebase applications.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.eventarc.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// @public\nexport class Channel {\n    readonly allowedEventTypes?: string[];\n    get eventarc(): Eventarc;\n    get name(): string;\n    publish(events: CloudEvent | CloudEvent[]): Promise<void>;\n}\n\n// @public\nexport interface ChannelOptions {\n    allowedEventTypes?: string[] | string | undefined;\n}\n\n// @public\nexport interface CloudEvent {\n    [key: string]: any;\n    data?: object | string;\n    datacontenttype?: string;\n    id?: string;\n    source?: string;\n    specversion?: CloudEventVersion;\n    subject?: string;\n    time?: string;\n    type: string;\n}\n\n// @public\nexport type CloudEventVersion = '1.0';\n\n// @public\nexport class Eventarc {\n    // Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n    get app(): App;\n    channel(name: string, options?: ChannelOptions): Channel;\n    channel(options?: ChannelOptions): Channel;\n}\n\n// @public\nexport function getEventarc(app?: App): Eventarc;\n```\n\n----------------------------------------\n\nTITLE: Installing Firebase Admin SDK with npm\nDESCRIPTION: Command to install the Firebase Admin Node.js SDK via npm package manager. The package is available as 'firebase-admin'.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --save firebase-admin\n```\n\n----------------------------------------\n\nTITLE: Declaring Firebase Instance ID Types and Classes in TypeScript\nDESCRIPTION: Defines the core types and classes for Firebase Instance ID management including error handling, instance deletion, and client error codes. Most functionality is marked as deprecated as Instance ID has been replaced by the Installations API.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/etc/firebase-admin.instance-id.api.md#2025-04-20_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Agent } from 'http';\n\n// Warning: (ae-forgotten-export) The symbol \"FirebaseError\" needs to be exported by the entry point index.d.ts\n//\n// @public\nexport class FirebaseInstanceIdError extends FirebaseError {\n}\n\n// Warning: (ae-forgotten-export) The symbol \"App\" needs to be exported by the entry point index.d.ts\n//\n// @public @deprecated\nexport function getInstanceId(app?: App): InstanceId;\n\n// @public @deprecated\nexport class InstanceId {\n    get app(): App;\n    deleteInstanceId(instanceId: string): Promise<void>;\n}\n\n// Warning: (ae-forgotten-export) The symbol \"InstallationsClientErrorCode\" needs to be exported by the entry point index.d.ts\n//\n// @public (undocumented)\nexport class InstanceIdClientErrorCode extends InstallationsClientErrorCode {\n    // (undocumented)\n    static INVALID_INSTANCE_ID: {\n        code: string;\n        message: string;\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Firebase Admin Node.js SDK Development Environment\nDESCRIPTION: Commands for cloning the repository and installing dependencies for local development. Requires Node.js 16+ and npm 6+.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/firebase/firebase-admin-node.git\n$ cd firebase-admin-node    # go to the firebase-admin-node directory\n$ npm install               # install local npm build / test dependencies\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Admin Node SDK Integration Tests\nDESCRIPTION: Command to build and run the integration test suite for the Firebase Admin Node SDK. This executes tests against a real Firebase project configured according to the setup instructions.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run integration   # Build and run integration test suite\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Admin SDK Integration Tests with Emulator\nDESCRIPTION: Command for running integration tests using Firebase Emulator Suite for Auth, Database, and Firestore services.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nfirebase emulators:exec --project fake-project-id --only auth,database,firestore \\\n    'npx mocha \\\"test/integration/{auth,database,firestore}.spec.ts\\\" --slow 5000 --timeout 20000 --require ts-node/register'\n```\n\n----------------------------------------\n\nTITLE: Running Multi-Tenancy Authentication Tests\nDESCRIPTION: Command to run integration tests including multi-tenancy authentication tests, which requires an Identity Platform project with multi-tenancy enabled. These tests are skipped by default.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test:integration -- --testMultiTenancy\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Admin SDK Unit Tests\nDESCRIPTION: Commands for running the unit test suite with and without linting.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm test   # Lint and run unit test suite\n$ npm run test:unit\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests with Security Rules Update\nDESCRIPTION: Command to run integration tests with an option to force update the Firebase security rules for the Realtime Database, ensuring relevant database integration tests can pass successfully.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run test:integration -- --updateRules\n```\n\n----------------------------------------\n\nTITLE: Authenticating gcloud for Firebase Admin SDK Testing\nDESCRIPTION: Command to authenticate gcloud with Google application default credentials for running tests.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud beta auth application-default login\n```\n\n----------------------------------------\n\nTITLE: Running Firebase Admin SDK Linter\nDESCRIPTION: Commands for running the TSLint linter on TypeScript source files.\nSOURCE: https://github.com/firebase/firebase-admin-node/blob/master/CONTRIBUTING.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run lint\n```"
  }
]