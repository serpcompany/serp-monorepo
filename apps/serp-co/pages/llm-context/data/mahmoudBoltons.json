[
  {
    "owner": "mahmoud",
    "repo": "boltons",
    "content": "TITLE: Basic Usage of LRU Cache from Boltons\nDESCRIPTION: Shows how to import and use the LRU (Least Recently Used) cache implementation from Boltons' cacheutils module.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/index.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom boltons.cacheutils import LRU\nlru_cache = LRU()\nlru_cache['result'] = 'success'\n```\n\n----------------------------------------\n\nTITLE: Downloading and Processing ZIP Files with SpooledBytesIO\nDESCRIPTION: Example demonstrating how to use SpooledBytesIO with requests to download a ZIP file and process it with zipfile.ZipFile. This provides memory efficiency for large files while maintaining compatibility with the zipfile module.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/ioutils.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom zipfile import ZipFile\n\nimport requests\nfrom boltons import ioutils\n\n# Using a context manager with stream=True ensures the connection is closed. See:\n# http://docs.python-requests.org/en/master/user/advanced/#body-content-workflow\nwith requests.get(\"http://127.0.0.1/test_file.zip\", stream=True) as r:\n    if r.status_code == 200:\n        with ioutils.SpooledBytesIO() as flo:\n            for chunk in r.iter_content(chunk_size=64000):\n                flo.write(chunk)\n\n            flo.seek(0)\n\n            zip_doc = ZipFile(flo)\n\n            # Print all the files in the zip\n            print(zip_doc.namelist())\n```\n\n----------------------------------------\n\nTITLE: Working with URL query parameters\nDESCRIPTION: Example demonstrating how to access query parameters from a URL using the query_params attribute (or qp alias), which returns an OrderedMultiDict of the URL's query parameters.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/urlutils.rst#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL('http://boltons.readthedocs.io/en/latest/?utm_source=docs&sphinx=ok')\n>>> url.qp.keys()\n[u'utm_source', u'sphinx']\n```\n\n----------------------------------------\n\nTITLE: Accessing scheme information from SCHEME_PORT_MAP\nDESCRIPTION: Example showing how to use the SCHEME_PORT_MAP constant to get the default port for different URL schemes. The map contains lowercase scheme names as keys and port numbers (or None) as values.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/urlutils.rst#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> boltons.urlutils.SCHEME_PORT_MAP['http']\n80\n>>> boltons.urlutils.SCHEME_PORT_MAP['file']\nNone\n```\n\n----------------------------------------\n\nTITLE: Retrieving URL Components Example with host property\nDESCRIPTION: Example demonstrating how to access the host property of a URL object. The host property contains the domain name or IP address, which can be in various formats like domain names or IPv4/IPv6 addresses.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/urlutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n\"example.com\", \"127.0.0.1\", and \"::1\" are all good examples of host strings.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating URL port normalization with HTTPS\nDESCRIPTION: Example showing how URLs with default ports are normalized. When a URL's port matches the scheme's default port (443 for HTTPS), the port is omitted during URL rendering.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/urlutils.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> URL(u'https://github.com:443/mahmoud/boltons').to_text()\nu'https://github.com/mahmoud/boltons'\n```\n\n----------------------------------------\n\nTITLE: Using SpooledBytesIO as StringIO Replacement\nDESCRIPTION: Updated example using SpooledBytesIO from boltons.ioutils as a drop-in replacement for StringIO to reduce memory overhead for large strings.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/ioutils.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom boltons.ioutils import SpooledBytesIO\n\nflo = SpooledBytesIO()\nflo.write(gigantic_string)\n```\n\n----------------------------------------\n\nTITLE: Accessing URL path_parts as a tuple\nDESCRIPTION: Example showing how to use the path_parts attribute to get a tuple representation of the URL path, split by slashes with empty segments preserved.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/urlutils.rst#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> url = URL(u'http://example.com/a/b/c')\n>>> url.path_parts\n(u'', u'a', u'b', u'c')\n```\n\n----------------------------------------\n\nTITLE: Importing iterutils.split and split_iter\nDESCRIPTION: Code snippet showing how to use the split and split_iter functions from the iterutils module, which provide functionality to split iterables.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n[iterutils.split][iterutils.split] and [iterutils.split_iter][iterutils.split_iter]\n```\n\n----------------------------------------\n\nTITLE: Module Path References in Python\nDESCRIPTION: Code references to various Boltons utility modules showing the organization and structure of the library components. These references demonstrate the breadth of functionality from data structures to debugging tools.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/architecture.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nboltons.queueutils\nboltons.iterutils\nboltons.timeutils\nboltons.fileutils.copytree\nboltons.namedutils.namedtuple\nboltons.strutils.slugify\nboltons.strutils.bytes2human\nboltons.timeutils.relative_time\nboltons.dictutils.OrderedMultiDict\nboltons.setutils.IndexedSet\nboltons.listutils.BList\nboltons.namedutils.namedlist\nboltons.tableutils.Table\nboltons.debugutils\nboltons.gcutils\nboltons.tbutils\n```\n\n----------------------------------------\n\nTITLE: Using chunked_iter and chunked for Iterable Processing\nDESCRIPTION: Example of the chunked_iter and chunked functions from iterutils module which are used to process iterables in fixed-size chunks.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n[iterutils.chunked_iter][iterutils.chunked_iter] and [iterutils.chunked][iterutils.chunked]\n```\n\n----------------------------------------\n\nTITLE: Installing Boltons with pip\nDESCRIPTION: Shows how to install the Boltons library using pip package manager.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/index.rst#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install boltons\n```\n\n----------------------------------------\n\nTITLE: Creating Directories with mkdir_p\nDESCRIPTION: Reference to mkdir_p function in fileutils which provides functionality similar to 'mkdir -p' command.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n[fileutils.mkdir_p][fileutils.mkdir_p]\n```\n\n----------------------------------------\n\nTITLE: Using String Utilities for Text Processing\nDESCRIPTION: Reference to text manipulation functions in strutils module, specifically the a10n function which likely implements numeronym generation (abbreviation through number substitution).\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n[strutils.a10n][strutils.a10n]()\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation for dictutils Module in Boltons using reStructuredText\nDESCRIPTION: This reStructuredText directive automatically generates documentation for the boltons.dictutils module, including all its members and undocumented members. It specifically documents mapping types like OrderedMultiDict (OMD).\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/dictutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.dictutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Defining Test Dependencies with Python Version Constraints\nDESCRIPTION: A requirements file specifying test dependencies with version constraints. It uses conditional markers to install different pytest versions based on the Python version, ensuring compatibility across various Python environments.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/requirements-test.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncoverage==7.2.7\npytest==7.4.4; python_version < \"3.8\"\npytest==8.3.4; python_version >= \"3.8\"\npytest-cov==4.1.0\ntox==4.8.0\n```\n\n----------------------------------------\n\nTITLE: Accessing OrderedMultiDict Methods\nDESCRIPTION: Code references to the OrderedMultiDict in dictutils, particularly the pop method for dictionary manipulation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n[dictutils.OrderedMultiDict][dictutils.OrderedMultiDict]'s .add()\n```\n\n----------------------------------------\n\nTITLE: Using OrderedMultiDict's get_inverted Method\nDESCRIPTION: Reference to the get_inverted method of OrderedMultiDict which provides reverse lookup capabilities.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n[dictutils.OrderedMultiDict.get_inverted][dictutils.OrderedMultiDict.get_inverted]()\n```\n\n----------------------------------------\n\nTITLE: Configuring autodoc for boltons.strutils module in reStructuredText\nDESCRIPTION: This reStructuredText directive configures automatic documentation generation for the boltons.strutils module. It includes all members and undocumented members of the module.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/strutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: boltons.strutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Parsing Time Intervals\nDESCRIPTION: Reference to parse_timedelta function in timeutils for parsing time intervals from string representations.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n[timeutils.parse_timedelta][timeutils.parse_timedelta]\n```\n\n----------------------------------------\n\nTITLE: Using StringIO (Old Code Example)\nDESCRIPTION: Example of old code using StringIO to write a large string to an in-memory file-like object.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/ioutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nflo = StringIO()\nflo.write(gigantic_string)\n```\n\n----------------------------------------\n\nTITLE: Importing setutils Module from Boltons in Python\nDESCRIPTION: This snippet demonstrates how to import the setutils module from the Boltons library using Python's automodule directive. It includes all members of the module in the documentation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/setutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: boltons.setutils\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Removing ANSI Control Characters from Strings\nDESCRIPTION: Reference to the strip_ansi function in strutils which removes ANSI escape sequences from strings.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n[strutils.strip_ansi][strutils.strip_ansi]\n```\n\n----------------------------------------\n\nTITLE: Installing Boltons with MacPorts on macOS\nDESCRIPTION: Demonstrates how to install the Boltons library on macOS using the MacPorts package manager.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/index.rst#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo port install py-boltons\n```\n\n----------------------------------------\n\nTITLE: Using Debug Utilities with PDB\nDESCRIPTION: Reference to pdb_on_signal function in debugutils for enabling debugging on signal reception.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n[debugutils.pdb_on_signal][debugutils.pdb_on_signal]\n```\n\n----------------------------------------\n\nTITLE: Accessing Callpoint Class Methods\nDESCRIPTION: Reference to the Callpoint class in tbutils, particularly the from_current classmethod for stack inspection.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n[Callpoint][tbutils.Callpoint]\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Section - Decoration\nDESCRIPTION: Documentation section for function decorators with autofunction directive.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/funcutils.rst#2025-04-20_snippet_1\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. _Decorators: https://en.wikipedia.org/wiki/Python_syntax_and_semantics#Decorators\n\n.. autofunction:: wraps\n```\n\n----------------------------------------\n\nTITLE: Documenting tbutils Module with Sphinx in Python\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the boltons.tbutils module. It includes all members of the module in the documentation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/tbutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: boltons.tbutils\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Importing ecoutils Module from boltons Package in Python\nDESCRIPTION: This code snippet demonstrates how to import the ecoutils module from the boltons package using Python's automodule directive. It includes all members of the module for documentation purposes.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/ecoutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automodule:: boltons.ecoutils\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Using RST directives for queueutils module documentation\nDESCRIPTION: RST directives used to generate documentation for the queueutils module from the boltons library. The directive includes all members and undocumented members of the module.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/queueutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.queueutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Section - Function Builder\nDESCRIPTION: Documentation section for FunctionBuilder class with autoclass directive.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/funcutils.rst#2025-04-20_snippet_2\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: FunctionBuilder\n   :members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation\nDESCRIPTION: ReStructuredText directive for auto-generating documentation from the boltons.typeutils module.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/typeutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.typeutils\n   :members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Section - Metaprogramming Functions\nDESCRIPTION: Documentation section for various metaprogramming utility functions.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/funcutils.rst#2025-04-20_snippet_4\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autofunction:: copy_function\n.. autofunction:: dir_dict\n.. autofunction:: mro_items\n.. autofunction:: format_invocation\n.. autofunction:: format_exp_repr\n.. autofunction:: format_nonexp_repr\n```\n\n----------------------------------------\n\nTITLE: Logging Decorator Example with Error in Python\nDESCRIPTION: Example of a logging decorator usage that resulted in a TypeError due to duplicate keyword argument '_act'.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/TODO.rst#2025-04-20_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@tlog.wrap('critical', 'update campaign', verbose=True, inject_as='_act')\ndef update(self, _act, force=False):\n```\n\n----------------------------------------\n\nTITLE: Documenting the boltons.pathutils Module with Sphinx in reStructuredText\nDESCRIPTION: This snippet uses Sphinx's automodule directive to automatically generate documentation for the boltons.pathutils module, including all members and undocumented members. It's part of a documentation system that reads Python docstrings and converts them to formatted documentation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/pathutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. automodule:: boltons.pathutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for Debug Utils\nDESCRIPTION: ReStructuredText documentation configuration for the boltons.debugutils module that includes member documentation with undocumented members included.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/debugutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``debugutils`` - Debugging utilities\n====================================\n\n.. automodule:: boltons.debugutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Section - Partial Classes\nDESCRIPTION: Documentation section for partial function implementation classes.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/funcutils.rst#2025-04-20_snippet_3\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: partial\n.. autoclass:: InstancePartial\n.. autoclass:: CachedInstancePartial\n```\n\n----------------------------------------\n\nTITLE: Including statsutils Module Documentation with Sphinx\nDESCRIPTION: This RST (reStructuredText) code configures Sphinx to automatically generate documentation for the boltons.statsutils module. It uses the automodule directive with options to include all members and undocumented members.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/statsutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.statsutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx autodoc for the boltons.formatutils module\nDESCRIPTION: Sphinx documentation directives to automatically generate API documentation from the boltons.formatutils module. The directives specify to include all members and undocumented members in the generated documentation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/formatutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: boltons.formatutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Structure for namedutils Module\nDESCRIPTION: ReStructuredText documentation configuration that sets up autodoc generation for the boltons.namedutils module, including all members and undocumented members.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/namedutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n``namedutils`` - Lightweight containers\n=======================================\n\n.. automodule:: boltons.namedutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: ReStructuredText Module Documentation Directive\nDESCRIPTION: RST directive for auto-generating module documentation for the boltons.jsonutils module, including all members and undocumented members.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/jsonutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.jsonutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Automodule Documentation Directive for Listutils\nDESCRIPTION: ReStructuredText directive that automatically generates documentation for the boltons.listutils module, including all members and undocumented members.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/listutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.listutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: RST Documentation Headers\nDESCRIPTION: reStructuredText section headers and automodule directive for the funcutils module documentation.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/funcutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n``funcutils`` - ``functools`` fixes\n===================================\n\n.. automodule:: boltons.funcutils\n\n.. contents:: Sections\n   :depth: 3\n   :local:\n```\n\n----------------------------------------\n\nTITLE: Configuring RST documentation for boltons.mboxutils module\nDESCRIPTION: A reStructuredText directive for automatically generating module documentation from the boltons.mboxutils module. It includes all members and undocumented members.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/mboxutils.rst#2025-04-20_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: boltons.mboxutils\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Sequential JSON Objects\nDESCRIPTION: Demonstrates a sequence of JSON objects with incrementing numeric keys and matching values. Each object contains a single key-value pair where both the key (as a string) and value are numbers.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/tests/jsonl_test_data.txt#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"1\": 1}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"2\": 2}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"3\": 3}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"4\": 4}\n```\n\n----------------------------------------\n\nTITLE: Listing Sphinx Documentation Dependencies\nDESCRIPTION: Lists two key Sphinx documentation dependencies: sphinxcontrib-napoleon for Google-style docstring support and sphinx-rtd-theme for Read the Docs theme styling.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/docs/requirements-rtd.txt#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinxcontrib-napoleon\nsphinx-rtd-theme\n```\n\n----------------------------------------\n\nTITLE: Python Traceback Example\nDESCRIPTION: A traceback showing an error where a function received multiple values for the keyword argument '_act'.\nSOURCE: https://github.com/mahmoud/boltons/blob/master/TODO.rst#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nTraceback (most recent call last):\nFile \"/home/mahmoud/virtualenvs/pacetrack/bin/pt\", line 11, in <module>\nload_entry_point('pacetrack', 'console_scripts', 'pt')()\nFile \"/home/mahmoud/hatnote/pacetrack/pacetrack/cli.py\", line 131, in main\ncmd.run()\nFile \"/home/mahmoud/projects/face/face/command.py\", line 403, in run\nret = inject(wrapped, kwargs)\nFile \"/home/mahmoud/projects/face/face/sinter.py\", line 59, in inject\nreturn f(**kwargs)\nFile \"<sinter generated next_ d43eb353c6855dfc>\", line 6, in next_\nFile \"/home/mahmoud/hatnote/pacetrack/pacetrack/cli.py\", line 138, in mw_cli_log\nreturn next_()\nFile \"<sinter generated next_ d43eb353c6855dfc>\", line 4, in next_\nFile \"/home/mahmoud/hatnote/pacetrack/pacetrack/cli.py\", line 89, in update\nreturn update_all(campaign_ids=posargs_, force=force, jsub=jsub, args_=args_)\nFile \"/home/mahmoud/hatnote/pacetrack/pacetrack/cli.py\", line 73, in update_all\ncur_pt = load_and_update_campaign(campaign_dir, force=force)\nFile \"/home/mahmoud/hatnote/pacetrack/pacetrack/update.py\", line 622, in load_and_update_campaign\nptc.update(force=force)\nFile \"<boltons.funcutils.FunctionBuilder-4>\", line 2, in update\nFile \"/home/mahmoud/virtualenvs/pacetrack/local/lib/python2.7/site-packages/lithoxyl/logger.py\", line 298, in logged_func\nreturn func_to_log(*a, **kw)\nTypeError: update() got multiple values for keyword argument '_act'\n```"
  }
]