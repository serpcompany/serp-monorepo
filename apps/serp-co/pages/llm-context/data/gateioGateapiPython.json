[
  {
    "owner": "gateio",
    "repo": "gateapi-python",
    "content": "TITLE: Creating Orders with Gate.io Python API\nDESCRIPTION: Creates a new order with support for spot, margin, leverage, and full-position leverage orders. Demonstrates configuring auto_borrow and auto_repay settings, iceberg orders, and handling order status updates and potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder = gate_api.Order() # Order | \nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Create an order\n    api_response = api_instance.create_order(order, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->create_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Futures Order with Gate.io Python SDK\nDESCRIPTION: This code demonstrates how to create a new futures order. It initializes the API client with authentication and creates a futures order by passing the required parameters including settle currency and the futures order object. It also shows how to set an expiration time for the request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nfutures_order = gate_api.FuturesOrder() # FuturesOrder | \nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Create a futures order\n    api_response = api_instance.create_futures_order(settle, futures_order, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->create_futures_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Transferring Between Main and Sub Accounts using Gate.io API in Python\nDESCRIPTION: Creates a WalletApi instance and initiates a transfer between main and sub-accounts. Handles potential API exceptions with specific error handling for both Gate.io specific exceptions and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_account_transfer = gate_api.SubAccountTransfer() # SubAccountTransfer | \n\ntry:\n    # Transfer between main and sub accounts\n    api_response = api_instance.transfer_with_sub_account(sub_account_transfer)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->transfer_with_sub_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Batch Modifying Orders in Gate.io API with Python\nDESCRIPTION: This example demonstrates how to modify multiple orders in a single API call. Up to 5 orders can be modified simultaneously, with changes to either price or quantity. The request includes error handling and supports setting an expiration time for the request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\nbatch_amend_item = [gate_api.BatchAmendItem()] # list[BatchAmendItem] | \nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Batch modification of orders\n    api_response = api_instance.amend_batch_orders(batch_amend_item, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->amend_batch_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Installing Gate.io API Python Client\nDESCRIPTION: Instructions for installing the Gate.io API Python client using pip or setuptools. This snippet shows how to install the package and import it in your Python code.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install --user gate-api\n```\n\nLANGUAGE: python\nCODE:\n```\nimport gate_api\n```\n\nLANGUAGE: shell\nCODE:\n```\npython setup.py install --user\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deposit Records in Gate.io API using Python SDK\nDESCRIPTION: This example demonstrates how to retrieve deposit records using the Gate.io API Python SDK. The code initializes the API client with authentication credentials and makes a request to list deposits with optional filters for currency, time range, and pagination limits.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'BTC' # str | Filter by currency. Return all currency records if not specified (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | The maximum number of entries returned in the list is limited to 500 transactions. (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Retrieve deposit records\n    api_response = api_instance.list_deposits(currency=currency, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_deposits: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Orders with Gate.io Python API\nDESCRIPTION: Retrieves a list of orders with specified filters. This example demonstrates how to set up parameters for currency pair, status, pagination, account type, time range, and order side when querying orders through the Gate.io API.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Retrieve results with specified currency pair. It is required for open orders, but optional for finished ones.\nstatus = 'open' # str | List orders based on status  `open` - order is waiting to be filled `finished` - order has been filled or cancelled \npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned. If `status` is `open`, maximum of `limit` is 100 (optional) (default to 100)\naccount = 'spot' # str | Specify query account. (optional)\n_from = 1627706330 # int | Start timestamp of the query (optional)\nto = 1635329650 # int | Time range ending, default to current time (optional)\nside = 'sell' # str | All bids or asks. Both included if not specified (optional)\n\ntry:\n    # List orders\n    api_response = api_instance.list_orders(currency_pair, status, page=page, limit=limit, account=account, _from=_from, to=to, side=side)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Price-Triggered Futures Order in Python\nDESCRIPTION: Creates a new price-triggered futures order using the Gate.io API. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_52\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\nfutures_price_triggered_order = gate_api.FuturesPriceTriggeredOrder()\n\ntry:\n    api_response = api_instance.create_price_triggered_order(settle, futures_price_triggered_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->create_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Supported Currency Pairs with Gate.io Python API\nDESCRIPTION: This example illustrates how to retrieve all currency pairs supported on Gate.io using the Python SDK, with no parameters or authorization required. It calls list_currency_pairs on the SpotApi and handles possible exceptions. The output is a list of CurrencyPair objects containing trading pair information, used for understanding available trading pairs.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.SpotApi(api_client)\\n\\ntry:\\n    # List all currency pairs supported\\n    api_response = api_instance.list_currency_pairs()\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling SpotApi->list_currency_pairs: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ticker Information using Gate.io Spot API in Python\nDESCRIPTION: This snippet demonstrates how to retrieve ticker information using the `gate_api` Python library. It initializes the API client configuration, creates an instance of the `SpotApi`, and calls the `list_tickers` method. Optional parameters `currency_pair` and `timezone` can be provided to filter the results. The example includes error handling for potential `GateApiException` and generic `ApiException`.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\ntimezone = 'utc0' # str | Timezone (optional)\n\ntry:\n    # Retrieve ticker information\n    api_response = api_instance.list_tickers(currency_pair=currency_pair, timezone=timezone)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_tickers: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Currency Details with Gate.io Python API\nDESCRIPTION: This snippet shows how to request details for a single currency using Gate.io's Python SDK, specifying the currency name as a parameter. The code demonstrates robust exception handling and invokes the get_currency method. No authorization is needed; the input is a single currency string and the output is a Currency object describing that asset.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.SpotApi(api_client)\\ncurrency = 'GT' # str | Currency name\\n\\ntry:\\n    # Get details of a specific currency\\n    api_response = api_instance.get_currency(currency)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling SpotApi->get_currency: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Fetching Futures Contracts with Gate.io API in Python\nDESCRIPTION: This code demonstrates how to retrieve a list of all futures contracts from the Gate.io API. It initializes the API client, sets the settlement currency, and handles potential exceptions from the API call.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # List all futures contracts\n    api_response = api_instance.list_futures_contracts(settle, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_contracts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Lending Currency Details with Python Gate.io API\nDESCRIPTION: Example showing how to retrieve detailed information about a specific lending currency using the Gate.io API. The code includes error handling and API client setup.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnUniApi(api_client)\ncurrency = 'btc' # str | Currency\n\ntry:\n    # Get currency detail for lending\n    api_response = api_instance.get_uni_currency(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->get_uni_currency: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Withdrawal Records with Gate.io Wallet API in Python\nDESCRIPTION: Illustrates retrieving withdrawal records using the `list_withdrawals` method. It demonstrates configuring API key authentication (apiv4) and using optional parameters like `currency`, `_from` (start timestamp), `to` (end timestamp), `limit`, and `offset` to filter the results. The example retrieves records for 'BTC' within a specific time range and handles exceptions. API key authentication is necessary, and the specified time range cannot exceed 30 days.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'BTC' # str | Filter by currency. Return all currency records if not specified (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Retrieve withdrawal records\n    api_response = api_instance.list_withdrawals(currency=currency, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_withdrawals: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Sub-Accounts with Gate.io API using Python\nDESCRIPTION: This snippet demonstrates how to list Gate.io sub-accounts using the `list_sub_accounts` method of the `SubAccountApi` class in the `gate_api` Python library. It requires configuring API key authentication (key and secret). The optional `type` parameter filters results: '0' lists all types (sub-accounts and cross margin), while '1' or default lists only sub-accounts. Returns a list of `SubAccount` objects on success, otherwise raises `ApiException` or `GateApiException`.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\ntype = '0' # str | `0` to list all types of sub-accounts (currently supporting cross margin accounts and sub-accounts).  `1` to list sub-accounts only. If no parameter is passed, only sub-accounts will be listed by default. (optional)\n\ntry:\n    # List sub-accounts\n    api_response = api_instance.list_sub_accounts(type=type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->list_sub_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Futures Tickers using gateio Python SDK\nDESCRIPTION: Shows how to retrieve current ticker data for one or more futures contracts via the gateio Python SDK. Requires the 'gate_api' library, proper API configuration, and exception classes. Key parameters include 'settle' (settlement currency) and the optional 'contract' (futures symbol). The output is a list of FuturesTicker records for the given selection. No authentication is required and multiple contracts can be queried.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.FuturesApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\\n\\ntry:\\n    # List futures tickers\\n    api_response = api_instance.list_futures_tickers(settle, contract=contract)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling FuturesApi->list_futures_tickers: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Getting Futures Candlestick Data - Python\nDESCRIPTION: Retrieves candlestick/OHLCV data for futures contracts with support for mark and index prices. Allows specifying time range, limit and interval. Maximum 2000 data points per request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n_from = 1546905600 # int | Start time of candlesticks\nto = 1546935600 # int | End time of candlesticks\nlimit = 100 # int | Maximum data points to return\ninterval = '5m' # str | Interval between data points\n\ntry:\n    # Get futures candlesticks\n    api_response = api_instance.list_futures_candlesticks(settle, contract, _from=_from, to=to, limit=limit, interval=interval)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_candlesticks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying User Trading Fee Rates with Gate.io API in Python\nDESCRIPTION: This snippet shows how to retrieve a user's trading fee rates for a specific currency pair. It creates an authenticated API client instance and makes a request to get fee information, which is returned as a SpotFee object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Specify a currency pair to retrieve precise fee rate  This field is optional. In most cases, the fee rate is identical among all currency pairs (optional)\n\ntry:\n    # Query user trading fee rates\n    api_response = api_instance.get_fee(currency_pair=currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_fee: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Book Data using Gate.io Spot API in Python\nDESCRIPTION: This snippet shows how to fetch the order book for a specific currency pair using the `gate_api` Python library. It sets up the API client and `SpotApi` instance, then calls `list_order_book` with the required `currency_pair`. Optional parameters like `interval` (for aggregation), `limit` (number of depth levels), and `with_id` (to include order book ID) can be specified. Bids are sorted high-to-low, asks low-to-high. Error handling is included.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair\ninterval = '0' # str | Order depth. 0 means no aggregation is applied. default to 0 (optional) (default to '0')\nlimit = 10 # int | Maximum number of order depth data in asks or bids (optional) (default to 10)\nwith_id = False # bool | Return order book ID (optional) (default to False)\n\ntry:\n    # Retrieve order book\n    api_response = api_instance.list_order_book(currency_pair, interval=interval, limit=limit, with_id=with_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_order_book: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Cancelling All Open Orders in a Currency Pair with Gate.io API in Python\nDESCRIPTION: Example code demonstrating how to cancel all open orders for a specified currency pair using the Gate.io API. The method accepts optional parameters for currency pair, side, account type, action mode, and expiration time, allowing for flexible order cancellation strategies.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\nside = 'sell' # str | All bids or asks. Both included if not specified (optional)\naccount = 'spot' # str | Specify Account Type  - Classic Account: If not specified, all include  - Unified Account: Specify `unified` (optional)\naction_mode = 'ACK' # str | Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)\nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Cancel all `open` orders in specified currency pair\n    api_response = api_instance.cancel_orders(currency_pair=currency_pair, side=side, account=account, action_mode=action_mode, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->cancel_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Implementing Countdown Cancellation of Orders in Gate.io API with Python\nDESCRIPTION: This example shows how to set up a countdown timer to automatically cancel pending orders. The countdown can be updated or canceled by making additional API calls, providing a safety mechanism for trading operations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncountdown_cancel_all_spot_task = gate_api.CountdownCancelAllSpotTask() # CountdownCancelAllSpotTask | \n\ntry:\n    # Countdown cancel orders\n    api_response = api_instance.countdown_cancel_all_spot(countdown_cancel_all_spot_task)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->countdown_cancel_all_spot: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Funding Rate History using gateio Python SDK\nDESCRIPTION: Illustrates fetching the funding rate history for a specific futures contract through the gateio Python SDK. This requires the 'gate_api' library and its exceptions, with a configured API client. Main parameters are 'settle' (settlement coin), 'contract' (futures symbol), optional 'limit' (number of records), and optional '_from'/'to' for time ranges. The function returns a list of FundingRateRecord objects. Either a time range or limit can be specified; no authentication is requested.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.FuturesApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\ncontract = 'BTC_USDT' # str | Futures contract\\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\\n_from = 1547706332 # int | Start timestamp (optional)\\nto = 1547706332 # int | End timestamp (optional)\\n\\ntry:\\n    # Funding rate history\\n    api_response = api_instance.list_futures_funding_rate_history(settle, contract, limit=limit, _from=_from, to=to)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling FuturesApi->list_futures_funding_rate_history: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Accounts with Gate.io API in Python\nDESCRIPTION: Demonstrates how to retrieve unified account information using the `gate_api` Python library. It shows configuring API key authentication (APIv4), creating an API client and `UnifiedApi` instance, and calling `list_unified_accounts` with optional `currency` and `sub_uid` parameters. Includes basic error handling for `GateApiException` and general `ApiException`.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\nsub_uid = '10001' # str | Sub account user ID (optional)\n\ntry:\n    # Get unified account information\n    api_response = api_instance.list_unified_accounts(currency=currency, sub_uid=sub_uid)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_unified_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Using Gate.io API Python Client\nDESCRIPTION: Example of how to use the Gate.io API Python client. This snippet demonstrates importing necessary modules, configuring the API client, and making a request to list currencies for lending using the EarnUniApi.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\n\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnUniApi(api_client)\n\ntry:\n    # List currencies for lending\n    api_response = api_instance.list_uni_currencies()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->list_uni_currencies: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Transferring Between Sub-Accounts using Gate.io API in Python\nDESCRIPTION: Demonstrates how to transfer funds directly between two sub-accounts under the same main account. The transfer can be initiated using either the main account's API key or a sub-account's API key.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_account_to_sub_account = gate_api.SubAccountToSubAccount() # SubAccountToSubAccount | \n\ntry:\n    # Sub-account transfers to sub-account\n    api_response = api_instance.sub_account_to_sub_account(sub_account_to_sub_account)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->sub_account_to_sub_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Withdrawing Funds via Gate.io API in Python\nDESCRIPTION: This Python snippet demonstrates how to initiate a withdrawal request using the gate_api.WithdrawalApi from the Gate.io API v4 SDK. It configures API authentication, creates the required LedgerRecord request object, and handles possible exceptions during the API call. Requires the gate_api package, valid API credentials, and LedgerRecord parameters specifying the withdrawal details. Input is a LedgerRecord object with withdrawal information; output is an updated LedgerRecord object as confirmation. Authentication using API keys is mandatory.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WithdrawalApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\",\\n    key = \\\"YOU_API_KEY\\\",\\n    secret = \\\"YOUR_API_SECRET\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.WithdrawalApi(api_client)\\nledger_record = gate_api.LedgerRecord() # LedgerRecord | \\n\\ntry:\\n    # Withdraw\\n    api_response = api_instance.withdraw(ledger_record)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling WithdrawalApi->withdraw: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting User Leverage Currency in Gate.io API\nDESCRIPTION: Demonstrates how to configure the loan currency leverage for a unified account. This example sets up API authentication, creates a UnifiedApi instance, and handles both Gate-specific exceptions and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\nunified_leverage_setting = gate_api.UnifiedLeverageSetting() # UnifiedLeverageSetting | \n\ntry:\n    # Set the loan currency leverage\n    api_instance.set_user_leverage_currency_setting(unified_leverage_setting)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->set_user_leverage_currency_setting: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trading Fees in Gate.io Python SDK\nDESCRIPTION: Gets personal trading fee rates with optional currency pair and settlement currency parameters for more precise rates.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.WalletApi(api_client)\ncurrency_pair = 'BTC_USDT'\nsettle = 'BTC'\n\ntry:\n    api_response = api_instance.get_trade_fee(currency_pair=currency_pair, settle=settle)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->get_trade_fee: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Generating Deposit Address with Gate.io Wallet API in Python\nDESCRIPTION: Shows how to generate a deposit address for a specified currency (e.g., 'USDT') using the `get_deposit_address` method. This example configures the API client with API key and secret for authentication, specifies the currency, calls the method, and handles potential exceptions. API key authentication (apiv4) is required.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'USDT' # str | Currency name\n\ntry:\n    # Generate currency deposit address\n    api_response = api_instance.get_deposit_address(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->get_deposit_address: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Futures Orders with Gate.io Python SDK\nDESCRIPTION: This code shows how to retrieve a list of futures orders with specific filters. It initializes the API client with authentication and calls the list_futures_orders method with parameters for settle currency, status, contract, pagination, and optional starting point.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nstatus = 'open' # str | Only list the orders with this status\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nlast_id = '12345' # str | Specify list staring point using the `id` of last record in previous list-query results (optional)\n\ntry:\n    # List futures orders\n    api_response = api_instance.list_futures_orders(settle, status, contract=contract, limit=limit, offset=offset, last_id=last_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Transferable Balances with Gate.io UnifiedApi in Python\nDESCRIPTION: This snippet demonstrates how to authenticate with Gate.io's API using the Python SDK and query the maximum transferable balances for specified currencies from a unified account. Dependencies include the 'gate_api' package and the appropriate API keys. Inputs are a comma-separated list of currency codes and API credentials; expected output is a list of TransferablesResult objects. Ensure no more than 100 currencies are passed at once and handle all required exceptions as shown.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.UnifiedApi(api_client)\\ncurrencies = 'BTC,ETH' # str | Specify the currency name to query in batches, and support up to 100 pass parameters at a time.\\n\\ntry:\\n    # Batch query can be transferred out at most for unified accounts; each currency is the maximum value. After the user withdraws the currency, the amount of transferable currency will be changed.\\n    api_response = api_instance.get_unified_transferables(currencies)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling UnifiedApi->get_unified_transferables: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Client - Python\nDESCRIPTION: Sets up API client configuration for Gate.io API v4, including host endpoint, API key, and secret for authentication. This is a prerequisite for all subsequent API calls.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Getting Total Balance in Gate.io Python SDK\nDESCRIPTION: Retrieves total balances across all account types converted to a specified currency unit.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'USDT'\n\ntry:\n    api_response = api_instance.get_total_balance(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->get_total_balance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Order from Gate.io API in Python\nDESCRIPTION: Example code demonstrating how to retrieve information for a specific order using the Gate.io API. This method requires an order ID and currency pair, with an optional account parameter to specify which account type to query (spot, unified, etc.).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder_id = '12345' # str | The order ID returned when the order was successfully created or the custom ID specified by the user's creation (i.e. the `text` field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)\ncurrency_pair = 'BTC_USDT' # str | Specify the transaction pair to query. If you are querying pending order records, this field is required. If you are querying traded records, this field can be left blank.\naccount = 'spot' # str | Specify query account. (optional)\n\ntry:\n    # Get a single order\n    api_response = api_instance.get_order(order_id, currency_pair, account=account)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Candlesticks with Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to fetch market candlestick data for a specific currency pair. It initializes a spot API instance, sets required parameters like currency pair, time interval, and time range, then makes the API call to retrieve candlestick data.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair\nlimit = 100 # int | Maximum recent data points to return. `limit` is conflicted with `from` and `to`. If either `from` or `to` is specified, request will be rejected. (optional) (default to 100)\n_from = 1546905600 # int | Start time of candlesticks, formatted in Unix timestamp in seconds. Default to`to - 100 * interval` if not specified (optional)\nto = 1546935600 # int | End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)\ninterval = '30m' # str | Interval time between data points. Note that `30d` means 1 natual month, not 30 days (optional) (default to '30m')\n\ntry:\n    # Market candlesticks\n    api_response = api_instance.list_candlesticks(currency_pair, limit=limit, _from=_from, to=to, interval=interval)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_candlesticks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting a Specified Contract's Settlement with Gate API - Python\nDESCRIPTION: This example demonstrates how to use the get_options_settlement function of the gate_api Python client's OptionsApi to fetch the settlement record for a specific contract, underlying asset, and settlement timestamp. The snippet initializes the API client, assigns parameters such as contract, underlying, and at, then retrieves and prints an OptionsSettlement object. No authentication is required. All three input parameters are required. Handles both GateApiException and ApiException for robust error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20211130-65000-C' # str | \nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\nat = 56 # int | \n\ntry:\n    # Get specified contract's settlement\n    api_response = api_instance.get_options_settlement(contract, underlying, at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_options_settlement: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing My Options Settlements with Authentication using Gate API - Python\nDESCRIPTION: This snippet illustrates retrieving a user's options settlement history by calling list_my_options_settlements on a gate_api OptionsApi client instance. It demonstrates how to configure authentication using APIv4 keys, set custom parameters such as underlying, contract, limit, offset, _from, and to, and handle exceptions. The endpoint requires correctly set API key and secret for authorization. The function outputs a list of OptionsMySettlements objects listing the user's settlements.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\ncontract = 'BTC_USDT-20210916-5000-C' # str | Options contract name (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\n\ntry:\n    # List my options settlements\n    api_response = api_instance.list_my_options_settlements(underlying, contract=contract, limit=limit, offset=offset, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_my_options_settlements: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: APIv4 Authentication Example\nDESCRIPTION: Sample code demonstrating authentication using APIv4 key and secret for Gate.io API requests. Refers to the signed request requirements documented at gate.io.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_10\n\n\n\n----------------------------------------\n\nTITLE: Listing All Open Orders in Python using Gate.io API\nDESCRIPTION: Retrieves a list of all open orders across all trading pairs. The response is paginated, with the page size controlling the number of orders returned per trading pair.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.SpotApi(api_client)\npage = 1 \nlimit = 100 \naccount = 'spot' \n\ntry:\n    api_response = api_instance.list_all_open_orders(page=page, limit=limit, account=account)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_all_open_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Futures Account in Python using Gate.io API\nDESCRIPTION: Example of how to query a futures account using the Gate.io API with Python. Requires API key authentication. Returns account details for the specified settlement currency.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\n\ntry:\n    # Query futures account\n    api_response = api_instance.list_futures_accounts(settle)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Price-Triggered Spot Orders in Python\nDESCRIPTION: Example code for retrieving price-triggered spot orders. Requires API authentication and supports filtering by status, market, and account type with pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.SpotApi(api_client)\nstatus = 'status_example'\nmarket = 'BTC_USDT'\naccount = 'account_example'\nlimit = 100\noffset = 0\n\ntry:\n    api_response = api_instance.list_spot_price_triggered_orders(status, market=market, account=account, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_spot_price_triggered_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating an Options Order with Gate.io Python API\nDESCRIPTION: This code snippet shows how to create a new options order using the Gate.io API client. It demonstrates setting up API authentication and preparing to submit an order object, with proper exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Querying Supported Borrowing and Collateral Currencies with Gate.io API in Python\nDESCRIPTION: This Python snippet queries all currencies supported for both borrowing and collateral under Gate.io's Multi-Collateral Loan product using the official SDK. It demonstrates instantiating the SDK client and calling list_multi_collateral_currencies, which requires no parameters or authentication. Output is a MultiCollateralCurrency object containing supported currencies. Dependencies: gate_api Python SDK. Input requires only correct SDK installation; no authentication is necessary for this public endpoint.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\n\\ntry:\\n    # Query supported borrowing and collateral currencies in Multi-Collateral \\n    api_response = api_instance.list_multi_collateral_currencies()\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling MultiCollateralLoanApi->list_multi_collateral_currencies: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Futures Contract Statistics using Gate.io API (Python)\nDESCRIPTION: Illustrates how to fetch futures contract statistics from the Gate.io API. This sample configures the API client, sets contract and interval parameters, and queries historical stats for a given contract symbol. Requires the gate_api and its exception classes. Inputs are settle currency, contract name, optional time window, interval, and result limit. Returns a list of ContractStat objects in JSON; no authentication is needed.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n_from = 1604561000 # int | Start timestamp (optional)\ninterval = '5m' # str |  (optional) (default to '5m')\nlimit = 30 # int |  (optional) (default to 30)\n\ntry:\n    # Futures stats\n    api_response = api_instance.list_contract_stats(settle, contract, _from=_from, interval=interval, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_contract_stats: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Delivery Futures Position using Gate.io API in Python\nDESCRIPTION: Configures the Gate.io API client with host and credentials, creates an instance of `DeliveryApi`, and calls `get_delivery_position` to fetch information for a specific futures contract settled in a given currency. It requires the `gate_api` library and valid API key/secret. The `settle` parameter specifies the settlement currency (e.g., 'usdt'), and `contract` specifies the futures contract identifier (e.g., 'BTC_USDT_20200814'). The response, if successful, is a `Position` object; otherwise, exceptions are caught and printed.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\n\ntry:\n    # Get single position\n    api_response = api_instance.get_delivery_position(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->get_delivery_position: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Orders in Python using Gate.io API\nDESCRIPTION: Shows how to submit multiple orders in a single API call. This method allows creating up to 4 currency pairs with a maximum of 10 orders each. All orders must be of the same type (spot or margin).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.SpotApi(api_client)\norder = [gate_api.Order()] \nx_gate_exptime = '1689560679123' \n\ntry:\n    api_response = api_instance.create_batch_orders(order, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->create_batch_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Trades using Gate.io Spot API in Python\nDESCRIPTION: This snippet illustrates retrieving market trades for a currency pair using the `gate_api` Python library. It initializes the client and API instance, then calls `list_trades`. It requires `currency_pair` and accepts optional parameters like `limit`, `last_id`, `reverse`, `_from` (start timestamp), `to` (end timestamp), and `page` for pagination or time-range filtering. The example shows how to pass these parameters and handle exceptions. Note the limitations on `last_id` usage and page limits.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair\nlimit = 100 # int | Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional) (default to 100)\nlast_id = '12345' # str | Specify list staring point using the `id` of last record in previous list-query results (optional)\nreverse = False # bool | Whether the id of records to be retrieved should be less than the last_id specified. Default to false.  When `last_id` is specified. Set `reverse` to `true` to trace back trading history; `false` to retrieve latest tradings.  No effect if `last_id` is not specified. (optional) (default to False)\n_from = 1627706330 # int | Start timestamp of the query (optional)\nto = 1635329650 # int | Time range ending, default to current time (optional)\npage = 1 # int | Page number (optional) (default to 1)\n\ntry:\n    # Retrieve market trades\n    api_response = api_instance.list_trades(currency_pair, limit=limit, last_id=last_id, reverse=reverse, _from=_from, to=to, page=page)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_trades: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Withdrawal Status using Gate.io API in Python\nDESCRIPTION: Fetches a list of withdrawal status information, optionally filtered by cryptocurrency type. This helps track pending and completed withdrawals from the Gate.io platform.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\n\ntry:\n    # Retrieve withdrawal status\n    api_response = api_instance.list_withdraw_status(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_withdraw_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Price-Triggered Order\nDESCRIPTION: Demonstrates creating a new price-triggered order for futures trading. Includes error handling for both Gate API specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_54\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.create_price_triggered_order(settle, futures_price_triggered_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->create_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multi-Collateral LTV (Loan-to-Value) Ratio with Gate.io API in Python\nDESCRIPTION: This snippet retrieves the (fixed) loan-to-value (LTV) ratio for the Gate.io Multi-Collateral Loan feature using the Python SDK. No authentication or parameterization is required. It demonstrates constructing the client and calling get_multi_collateral_ltv, returning a CollateralLtv object. The ratio is constant irrespective of queried currency. Dependencies: gate_api Python package; this is a public API call.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\n\\ntry:\\n    # Get Multi-Collateral ratio\\n    api_response = api_instance.get_multi_collateral_ltv()\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling MultiCollateralLoanApi->get_multi_collateral_ltv: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Single Futures Order with Gate.io Delivery API in Python\nDESCRIPTION: This snippet demonstrates how to cancel a single futures order using the Gate.io Delivery API. It requires settle currency and order ID parameters, with proper exception handling for API errors.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n```\n\n----------------------------------------\n\nTITLE: Getting Index Constituents using Gate.io API (Python)\nDESCRIPTION: Shows how to retrieve the constituent assets for a given index via Gate.io's FuturesApi. The code outlines the initialization of the API client and the get_index_constituents method, passing the settle currency and index name. Uses gate_api, with exception handling. The main input is the index symbol; output is a FuturesIndexConstituents object in JSON. Does not require authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nindex = 'BTC_USDT' # str | Index name\n\ntry:\n    # Get index constituents\n    api_response = api_instance.get_index_constituents(settle, index)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_index_constituents: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Personal Trading History with Python Gate.io API\nDESCRIPTION: Shows how to retrieve personal trading history from the Gate.io API. Supports pagination and filtering by contract and order. Limited to past 6 months of data by default.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_39\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = None\norder = None\nlimit = None\noffset = None\nlast_id = None\n\ntry:\n    api_response = api_instance.get_my_trades(settle, contract=contract, order=order, limit=limit, offset=offset, last_id=last_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_my_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Single Options Order Details with Gate.io API Python SDK\nDESCRIPTION: Example demonstrating how to retrieve details for a single options order by its ID using the Gate.io API client.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.OptionsApi(api_client)\norder_id = 12345\n\ntry:\n    api_response = api_instance.get_options_order(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_options_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Options Order with Gate.io API Python SDK\nDESCRIPTION: Example code showing how to create a new options order using the Gate.io API client. Includes error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.OptionsApi(api_client)\noptions_order = gate_api.OptionsOrder()\n\ntry:\n    api_response = api_instance.create_options_order(options_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->create_options_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Multi-Collateral Loan Order with Python\nDESCRIPTION: Makes an API call to create a new multi-collateral loan order. Requires API key authentication and a CreateMultiCollateralOrder object with order details.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\ncreate_multi_collateral_order = gate_api.CreateMultiCollateralOrder()\n\ntry:\n    api_response = api_instance.create_multi_collateral(create_multi_collateral_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MultiCollateralLoanApi->create_multi_collateral: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Expirations using Gate API in Python\nDESCRIPTION: This snippet shows how to retrieve all expiration times (as Unix timestamps) for a specific options underlying using the `gate_api` Python library. It sets up the API client and `OptionsApi` instance, then calls the `list_options_expirations` method, passing the required `underlying` string parameter (e.g., 'BTC_USDT'). Error handling for API exceptions is included. The method returns a list of integers.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\n\ntry:\n    # List all expiration times\n    api_response = api_instance.list_options_expirations(underlying)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_expirations: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Position Margin in Dual Mode using GateAPI Python\nDESCRIPTION: Creates a FuturesApi instance and calls the update_dual_mode_position_margin method to update the margin for a position in dual mode. Requires settle currency, contract, margin change amount, and position side (long or short).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nchange = '0.01' # str | Margin change. Use positive number to increase margin, negative number otherwise.\ndual_side = 'dual_long' # str | Long or short position\n\ntry:\n    # Update position margin in dual mode\n    api_response = api_instance.update_dual_mode_position_margin(settle, contract, change, dual_side)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_dual_mode_position_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling a Specific Price-triggered Order with Gate.io Python SDK\nDESCRIPTION: Example of how to cancel a specific price-triggered order using its ID. This code shows the complete process including API client configuration with authentication credentials, making the cancellation request, and handling possible exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder_id = 'order_id_example' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # cancel a price-triggered order\n    api_response = api_instance.cancel_spot_price_triggered_order(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->cancel_spot_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing API Client for Market Candlesticks Retrieval in Python\nDESCRIPTION: This partial snippet shows the initial setup for retrieving market candlesticks using the `gate_api` Python library. It imports necessary modules, defines the API host configuration, and initializes the `ApiClient`. The subsequent steps would involve creating a `SpotApi` instance and calling `list_candlesticks` with parameters like `currency_pair`, `limit`, `_from`, `to`, and `interval` to fetch candlestick data, respecting the maximum limit of 1000 points per query.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n```\n\n----------------------------------------\n\nTITLE: Amending Futures Order with Python Gate.io API\nDESCRIPTION: Shows how to modify an existing futures order using the Gate.io API. Requires settle currency, order ID and amendment details. Can optionally specify an expiration time for the request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_37\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\norder_id = '12345'\nfutures_order_amendment = gate_api.FuturesOrderAmendment()\nx_gate_exptime = '1689560679123'\n\ntry:\n    api_response = api_instance.amend_futures_order(settle, order_id, futures_order_amendment, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->amend_futures_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Multiple Options Orders with Gate.io API Python SDK\nDESCRIPTION: Example showing how to cancel all open orders matching specified criteria like contract, underlying, and side using the Gate.io API client.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20210916-5000-C'\nunderlying = 'BTC_USDT'\nside = 'ask'\n\ntry:\n    api_response = api_instance.cancel_options_orders(contract=contract, underlying=underlying, side=side)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->cancel_options_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Unified Margin Lending Market Details in Python\nDESCRIPTION: Example of how to get details for a specific unified margin lending market using the Gate.io API client for Python. It creates an API client instance and calls the get_uni_currency_pair method with a currency pair parameter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\ncurrency_pair = 'AE_USDT' # str | Currency pair\n\ntry:\n    # Get detail of lending market\n    api_response = api_instance.get_uni_currency_pair(currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->get_uni_currency_pair: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Position Risk Limit in Python\nDESCRIPTION: Shows how to update the risk limit for a futures position. It requires the settle currency, contract name, and the new risk limit value as parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nrisk_limit = '1000000' # str | New Risk Limit Value\n\ntry:\n    # Update position risk limit\n    api_response = api_instance.update_position_risk_limit(settle, contract, risk_limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_position_risk_limit: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication in Python\nDESCRIPTION: Sets up the API configuration with host URL, API key and secret for authentication. Creates an API client instance for futures trading.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_53\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FuturesApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Canceling Price-Triggered Spot Orders in Python\nDESCRIPTION: Example code for canceling all price-triggered spot orders. Requires API authentication and supports filtering by market and account type.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Cancelling a Batch of Orders by ID with Gate.io API in Python\nDESCRIPTION: Example code showing how to cancel multiple orders by providing a list of order IDs using the Gate.io API. This method allows cancellation of up to 20 orders across multiple currency pairs in a single request, with an optional expiration time parameter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncancel_batch_order = [gate_api.CancelBatchOrder()] # list[CancelBatchOrder] | \nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Cancel a batch of orders with an ID list\n    api_response = api_instance.cancel_batch_orders(cancel_batch_order, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->cancel_batch_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Gate.io API in Python\nDESCRIPTION: Configures authentication parameters for the Gate.io API client using an API key and secret. This setup is required before making any authenticated API calls.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Previewing Flash Swap Order in Python\nDESCRIPTION: Shows how to initiate a preview of a flash swap order using the Gate.io API. This function takes a FlashSwapPreviewRequest object as input and returns a FlashSwapOrderPreview object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nflash_swap_preview_request = gate_api.FlashSwapPreviewRequest() # FlashSwapPreviewRequest\n\ntry:\n    # Initiate a flash swap order preview\n    api_response = api_instance.preview_flash_swap_order(flash_swap_preview_request)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FlashSwapApi->preview_flash_swap_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Dual Mode in Futures Trading using GateAPI Python\nDESCRIPTION: Creates a FuturesApi instance and calls the set_dual_mode method to enable or disable dual mode for futures trading. The settle parameter specifies the settlement currency, and dual_mode indicates whether to enable or disable dual mode.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ndual_mode = true # bool | Whether to enable dual mode\n\ntry:\n    # Enable or disable dual mode\n    api_response = api_instance.set_dual_mode(settle, dual_mode)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->set_dual_mode: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Position Margin in Python\nDESCRIPTION: Shows how to update the margin for a futures position. It requires the settle currency, contract name, and the margin change amount as parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nchange = '0.01' # str | Margin change. Use positive number to increase margin, negative number otherwise.\n\ntry:\n    # Update position margin\n    api_response = api_instance.update_position_margin(settle, contract, change)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_position_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Sub-Account with Gate.io API using Python\nDESCRIPTION: This snippet shows how to create a new Gate.io sub-account using the `create_sub_accounts` method from the `SubAccountApi`. It requires an authenticated API client configuration (key and secret). An instance of the `SubAccount` model, containing the details for the new sub-account, must be passed as an argument. The method returns the details of the newly created `SubAccount` object or raises `ApiException` or `GateApiException` if creation fails.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nsub_account = gate_api.SubAccount() # SubAccount | \n\ntry:\n    # Create a new sub-account\n    api_response = api_instance.create_sub_accounts(sub_account)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->create_sub_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Delivery Futures Order Book with Gate.io API in Python\nDESCRIPTION: This code retrieves the order book for a specific futures contract, showing bids and asks at different price levels. It supports parameters for aggregation interval, depth limit, and includes an option to return order book update IDs for tracking changes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\ninterval = '0' # str | Order depth. 0 means no aggregation is applied. default to 0 (optional) (default to '0')\nlimit = 10 # int | Maximum number of order depth data in asks or bids (optional) (default to 10)\nwith_id = False # bool | Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional) (default to False)\n\ntry:\n    # Futures order book\n    api_response = api_instance.list_delivery_order_book(settle, contract, interval=interval, limit=limit, with_id=with_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_order_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Single Futures Order with Python Gate.io API\nDESCRIPTION: Demonstrates how to retrieve details of a single futures order using the Gate.io API. Takes settle currency and order ID as parameters and returns order details.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_36\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\norder_id = '12345'\n\ntry:\n    api_response = api_instance.get_futures_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_futures_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Batch Future Orders in Python\nDESCRIPTION: Cancels multiple futures orders by ID using the Gate.io API. Requires API key authentication. Can cancel up to 20 orders per request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_49\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\nrequest_body = ['request_body_example']\nx_gate_exptime = '1689560679123'\n\ntry:\n    api_response = api_instance.cancel_batch_future_orders(settle, request_body, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->cancel_batch_future_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Client in Python\nDESCRIPTION: Sets up the Gate.io API client with the API key and secret for authentication. This configuration is required before making any authenticated API calls.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Calculating Portfolio Margin using Gate.io Python API\nDESCRIPTION: Creates an instance of the UnifiedApi class and calls the calculate_portfolio_margin method to calculate portfolio margin based on the provided input. The code includes error handling for both Gate API-specific exceptions and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\nunified_portfolio_input = gate_api.UnifiedPortfolioInput() # UnifiedPortfolioInput | \n\ntry:\n    # Portfolio margin calculator\n    api_response = api_instance.calculate_portfolio_margin(unified_portfolio_input)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->calculate_portfolio_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Amending an Order using Gate.io Python API Client\nDESCRIPTION: Example code showing how to modify an existing order on Gate.io using the Python API client. This allows updating price or quantity of an existing order, which may affect its matching priority in the order book.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder_id = '12345' # str | The order ID returned when the order was successfully created or the custom ID specified by the user's creation (i.e. the `text` field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)\norder_patch = gate_api.OrderPatch() # OrderPatch | \ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\naccount = 'spot' # str | Specify query account. (optional)\nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Amend an order\n    api_response = api_instance.amend_order(order_id, order_patch, currency_pair=currency_pair, account=account, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->amend_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing Gate.io API Client for Wallet Operations in Python\nDESCRIPTION: This snippet shows how to configure and initialize the Gate.io API client for wallet operations. It sets up the API key and secret for authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.WalletApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flash Swap Order Details in Python\nDESCRIPTION: Demonstrates how to retrieve details of a single flash swap order using the Gate.io API. It includes error handling for both Gate API-specific exceptions and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\norder_id = 1 # int | Flash swap order ID\n\ntry:\n    # Get a single flash swap order's detail\n    api_response = api_instance.get_flash_swap_order(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FlashSwapApi->get_flash_swap_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Futures Orders with Gate.io Python SDK\nDESCRIPTION: This code snippet shows how to cancel all open futures orders for a specific contract. It initializes the API client with authentication credentials and calls the cancel_futures_orders method with settle currency and contract parameters, with optional expiration time and side filter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Listing Delivery Futures Contracts with Gate.io API in Python\nDESCRIPTION: This code demonstrates how to list all available futures contracts for a specific settlement currency using the Gate.io API. It handles both typical API exceptions and Gate.io-specific exceptions, providing appropriate error messages.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\n\ntry:\n    # List all futures contracts\n    api_response = api_instance.list_delivery_contracts(settle)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_contracts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Multi-Collateral Loan Orders with Python\nDESCRIPTION: Makes an API call to list multi-collateral loan orders. Supports pagination, sorting, and filtering by order type. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\npage = 1\nlimit = 10\nsort = 'ltv_asc'\norder_type = 'current'\n\ntry:\n    api_response = api_instance.list_multi_collateral_orders(page=page, limit=limit, sort=sort, order_type=order_type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MultiCollateralLoanApi->list_multi_collateral_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Repaying Cross Margin Loan via Gate.io API\nDESCRIPTION: Example of repaying a cross margin loan using the Gate.io API. Handles API exceptions and returns loan repayment details. Requires an initialized API client and CrossMarginRepayRequest object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    # Cross margin repayments. (deprecated)\n    api_response = api_instance.repay_cross_margin_loan(cross_margin_repay_request)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->repay_cross_margin_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Contract Tickers with Gate.io API in Python\nDESCRIPTION: This code demonstrates how to list tickers for options contracts based on a specific underlying asset. It initializes the API client and makes a request to retrieve ticker information for all available options on the specified underlying.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\n\ntry:\n    # List tickers of options contracts\n    api_response = api_instance.list_options_tickers(underlying)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_tickers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Spot Accounts with Gate.io API in Python\nDESCRIPTION: This snippet shows how to retrieve a list of the user's spot accounts. It creates an authenticated API client instance and makes a request to retrieve spot account information, which can be filtered to a specific currency if needed.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\n\ntry:\n    # List spot accounts\n    api_response = api_instance.list_spot_accounts(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_spot_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: List Options Trades Using Gate.io Python API\nDESCRIPTION: Python code example demonstrating how to retrieve options trade history using the Gate.io API. Includes parameters for filtering by contract name, type, limits and timestamps.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20210916-5000-C'\ntype = '1546935600'\nlimit = 100\noffset = 0\n_from = 1547706332\nto = 1547706332\n\ntry:\n    api_response = api_instance.list_options_trades(contract=contract, type=type, limit=limit, offset=offset, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Flash Swap Orders in Python\nDESCRIPTION: Example of creating a new flash swap order. Requires a preview to be initiated first and uses API key authentication. The request must include details about the currencies and amounts to be swapped.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FlashSwapApi(api_client)\nflash_swap_order_request = gate_api.FlashSwapOrderRequest()\n\ntry:\n    api_response = api_instance.create_flash_swap_order(flash_swap_order_request)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FlashSwapApi->create_flash_swap_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Currencies with Gate.io Python API\nDESCRIPTION: This code snippet demonstrates how to use the Gate.io Python SDK to retrieve detailed information for all supported currencies via the SpotApi. It initializes the API client and calls the list_currencies method, handling both GateApi-specific and general API exceptions. No authorization or parameters are required; the expected output is a list of Currency objects with details such as multiple chain support and chain-specific info.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.SpotApi(api_client)\\n\\ntry:\\n    # List all currencies' details\\n    api_response = api_instance.list_currencies()\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling SpotApi->list_currencies: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agency Commission History using Gate API Python SDK\nDESCRIPTION: This Python code example shows how to fetch the commission history for users recommended by an agency via the `gate_api` library. It requires setting up API key authentication, initializing the `RebateApi` client, and then invoking the `agency_commissions_history` method. Optional filters like `currency`, `user_id`, time range (`_from`, `to`), `limit`, and `offset` can be provided. The example includes error handling for potential API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\ncurrency = 'BTC' # str | Filter by currency. Return all currency records if not specified (optional)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # The agency obtains the commission history of the recommended user\n    api_response = api_instance.agency_commissions_history(currency=currency, user_id=user_id, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->agency_commissions_history: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Position Risk Limit in Dual Mode with Gate.io Python SDK\nDESCRIPTION: This code demonstrates how to update the risk limit for a futures position in dual mode. It initializes a FuturesApi instance with proper authentication and makes a request to update the risk limit for a specific contract with error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nrisk_limit = '1000000' # str | New Risk Limit Value\n\ntry:\n    # Update position risk limit in dual mode\n    api_response = api_instance.update_dual_mode_position_risk_limit(settle, contract, risk_limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_dual_mode_position_risk_limit: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Underlying Mark Price Candlesticks with Gate.io API in Python\nDESCRIPTION: This code fetches mark price candlestick data for the underlying asset of options contracts. Parameters include the underlying name, limit on number of records, time range, and interval between data points. This helps track the price movement of the underlying asset.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\ninterval = '5m' # str | Interval time between data points (optional) (default to '5m')\n\ntry:\n    # Mark price candlesticks of an underlying\n    api_response = api_instance.list_options_underlying_candlesticks(underlying, limit=limit, _from=_from, to=to, interval=interval)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_underlying_candlesticks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Maximum Transferable Amount with Gate.io API in Python\nDESCRIPTION: Illustrates querying the maximum transferable amount for a given currency within a unified account via the `gate_api` library. The example covers authentication setup (APIv4), client initialization using `gate_api.ApiClient` and `gate_api.UnifiedApi`, and invoking `get_unified_transferable` with the necessary `currency` parameter. It also includes standard exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency\n\ntry:\n    # Query about the maximum transferable for the unified account\n    api_response = api_instance.get_unified_transferable(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_unified_transferable: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Price-Triggered Futures Orders in Python\nDESCRIPTION: Retrieves a list of price-triggered futures orders using the Gate.io API. Requires API key authentication. Can filter by contract and status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_51\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\nstatus = 'status_example'\ncontract = 'BTC_USDT'\nlimit = 100\noffset = 0\n\ntry:\n    api_response = api_instance.list_price_triggered_orders(settle, status, contract=contract, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_price_triggered_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Futures Order with Gate.io Delivery API in Python\nDESCRIPTION: This snippet shows how to retrieve details of a single futures order using the Gate.io Delivery API. It requires settle currency and order ID parameters, with proper exception handling for API errors.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\norder_id = '12345' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # Get a single order\n    api_response = api_instance.get_delivery_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->get_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Placing Dual Investment Order with Gate.io API in Python\nDESCRIPTION: This code demonstrates how to place a Dual Investment order using the Gate.io API. It requires API key authentication and sends a POST request to the /earn/dual/orders endpoint with a PlaceDualInvestmentOrder object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Futures Order with Gate.io API\nDESCRIPTION: Example of retrieving details for a single futures order by ID. Note that zero-fill orders have a 10 minute retrieval delay after cancellation.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_35\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\norder_id = ''\n```\n\n----------------------------------------\n\nTITLE: Canceling All Price-triggered Orders with Gate.io Python SDK\nDESCRIPTION: Example of how to cancel all price-triggered orders for a specific market in spot trading. It demonstrates creating an API instance, setting optional parameters, and handling exceptions when interacting with the Gate.io API.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\nmarket = 'BTC_USDT' # str | Currency pair (optional)\naccount = 'account_example' # str | Trading account type.  Portfolio margin account must set to `unified` (optional)\n\ntry:\n    # Cancel All Price-triggered Orders\n    api_response = api_instance.cancel_spot_price_triggered_order_list(market=market, account=account)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->cancel_spot_price_triggered_order_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Futures Contract from Gate.io API in Python\nDESCRIPTION: This code snippet shows how to fetch information about a specific futures contract. It initializes the API client and prepares to make the API call with the settlement currency and contract name as parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Cancelling Multiple Futures Orders with Gate.io Delivery API in Python\nDESCRIPTION: This snippet demonstrates how to cancel all open futures orders for a specific contract using the Gate.io Delivery API. It accepts parameters for settle currency, contract, and optional side (bid/ask) with proper exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\nside = 'ask' # str | All bids or asks. Both included if not specified (optional)\n\ntry:\n    # Cancel all `open` orders matched\n    api_response = api_instance.cancel_delivery_orders(settle, contract, side=side)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->cancel_delivery_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling All Price-Triggered Orders\nDESCRIPTION: Shows how to cancel all existing price-triggered orders for a specific settlement currency. Optionally filters by contract symbol.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_55\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.cancel_price_triggered_order_list(settle, contract=contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->cancel_price_triggered_order_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Repaying Multi-Collateral Loan via Gate API (Python)\nDESCRIPTION: This example shows how to perform a loan repayment action by calling 'repay_multi_collateral_loan' on the MultiCollateralLoanApi, using a RepayMultiLoan object as input. It details proper API authentication and error handling, returning a MultiRepayResp object as output. The required dependency is the gate_api package with configuration for a valid apiv4 key and secret.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\nrepay_multi_loan = gate_api.RepayMultiLoan() # RepayMultiLoan | \\n\\ntry:\\n    # Repay Multi-Collateral Loan\\n    api_response = api_instance.repay_multi_collateral_loan(repay_multi_loan)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MultiCollateralLoanApi->repay_multi_collateral_loan: %s\\\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: List Options Trading History in Python using Gate.io API\nDESCRIPTION: Example demonstrating how to retrieve personal options trading history with pagination support. Includes parameters for filtering by contract, date range and pagination limits.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT'\ncontract = 'BTC_USDT-20210916-5000-C'\nlimit = 100\noffset = 0\n_from = 1547706332\nto = 1547706332\n\ntry:\n    api_response = api_instance.list_my_options_trades(underlying, contract=contract, limit=limit, offset=offset, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_my_options_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication and Listing Trading History in Python\nDESCRIPTION: This example demonstrates how to configure API credentials and fetch a user's trading history. It shows setting up authentication parameters, creating API instances, and making requests with various filters such as currency pair, time range, and order ID.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Retrieve results with specified currency pair (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list.  Default: 100, Minimum: 1, Maximum: 1000 (optional) (default to 100)\npage = 1 # int | Page number (optional) (default to 1)\norder_id = '12345' # str | Filter trades with specified order ID. `currency_pair` is also required if this field is present (optional)\naccount = 'spot' # str | Specify query account. (optional)\n_from = 1627706330 # int | Start timestamp of the query (optional)\nto = 1635329650 # int | Time range ending, default to current time (optional)\n\ntry:\n    # List personal trading history\n    api_response = api_instance.list_my_trades(currency_pair=currency_pair, limit=limit, page=page, order_id=order_id, account=account, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_my_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Single Options Order with Gate.io API Python SDK\nDESCRIPTION: Example showing how to cancel a specific options order by its ID using the Gate.io API client.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.OptionsApi(api_client)\norder_id = 12345\n\ntry:\n    api_response = api_instance.cancel_options_order(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->cancel_options_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Position Leverage in Dual Mode using GateAPI Python\nDESCRIPTION: Creates a FuturesApi instance and calls the update_dual_mode_position_leverage method to update the leverage for a position in dual mode. Requires settle currency, contract, and new leverage value, with an optional cross leverage limit.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nleverage = '10' # str | New position leverage\ncross_leverage_limit = '10' # str | Cross margin leverage(valid only when `leverage` is 0) (optional)\n\ntry:\n    # Update position leverage in dual mode\n    api_response = api_instance.update_dual_mode_position_leverage(settle, contract, leverage, cross_leverage_limit=cross_leverage_limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_dual_mode_position_leverage: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Futures Orders with Gate.io API\nDESCRIPTION: Example of creating multiple futures orders in a single request. Supports up to 10 orders per request with expiration time parameter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\nfutures_order = [gate_api.FuturesOrder()]\nx_gate_exptime = '1689560679123'\n\ntry:\n    api_response = api_instance.create_batch_futures_order(settle, futures_order, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->create_batch_futures_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Delivery Position Close History - Gate.io API Python\nDESCRIPTION: Retrieves the history of closed delivery futures positions. Takes parameters for the settle currency and optionally filters by contract and limits the number of records returned. Returns a list of position close records.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # List position close history\n    api_response = api_instance.list_delivery_position_close(settle, contract=contract, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_position_close: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: List Options Account Using Gate.io Python API\nDESCRIPTION: Python code example showing how to retrieve options account information using authenticated API access with API key and secret.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.OptionsApi(api_client)\n\ntry:\n    api_response = api_instance.list_options_account()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Options Contract Position in Python\nDESCRIPTION: This code demonstrates how to get a specific options contract position using the Gate.io API client. It sets up authentication, specifies a contract identifier, and handles potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20211130-65000-C' # str | \n\ntry:\n    # Get specified contract position\n    api_response = api_instance.get_options_position(contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_options_position: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Delivery Settlements in Python\nDESCRIPTION: Example of how to list settlement history for delivery futures contracts using the Gate.io API. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT_20200814'\nlimit = 100\nat = 0\n\ntry:\n    api_response = api_instance.list_delivery_settlements(settle, contract=contract, limit=limit, at=at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_settlements: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account API Key Information with Gate.io Python SDK\nDESCRIPTION: This Python snippet illustrates how to retrieve specific API key details for a Gate.io sub-account using SubAccountApi.get_sub_account_key. It depends on the 'gate_api' package and requires prior setup of an APIv4 key and secret. Parameters include 'user_id' (the sub-account id) and 'key' (the API key string). A SubAccountKey object is returned if found; error handling is performed via exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\nkey = 'key_example' # str | The API Key of the sub-account\n\ntry:\n    # Get the API Key of the sub-account\n    api_response = api_instance.get_sub_account_key(user_id, key)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->get_sub_account_key: %s\\n\" % e)\n\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Futures Accounts with Authentication using gateapi-python (Python)\nDESCRIPTION: This code snippet demonstrates how to retrieve a futures account for a specified settlement currency using Gate.io's gateapi-python SDK. It requires configuration of API key and secret for authentication (apiv4) and sets up the API client targeting the DeliveryApi. The settle currency is defined by user input and the endpoint returns a FuturesAccount object with relevant details. Ensure API credentials are securely provided and the gate_api library is installed.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.DeliveryApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\n\\ntry:\\n    # Query futures account\\n    api_response = api_instance.list_delivery_accounts(settle)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling DeliveryApi->list_delivery_accounts: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Options Positions with Gate.io Python API\nDESCRIPTION: This code snippet initializes the Gate.io API client and lists user's options positions for a specific underlying asset. It handles potential API exceptions and displays the response.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (optional)\n\ntry:\n    # List user's positions of specified underlying\n    api_response = api_instance.list_options_positions(underlying=underlying)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_positions: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dual Investment Orders with Gate.io API in Python\nDESCRIPTION: This code retrieves the list of user's Dual Investment orders. It requires API key authentication and sends a GET request to the /earn/dual/orders endpoint with optional parameters for time range and pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\n_from = 1740727000 # int | Start checkout time (optional)\nto = 1740729000 # int | End settlement time (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # Dual Investment order list\n    api_response = api_instance.list_dual_orders(_from=_from, to=to, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->list_dual_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Agency Transaction History using Gate API Python SDK\nDESCRIPTION: This Python snippet demonstrates how to retrieve the transaction history for users recommended by an agency using the `gate_api` library. It involves configuring API key authentication, creating an `ApiClient` and `RebateApi` instance, and calling the `agency_transaction_history` method with optional parameters like `currency_pair`, `user_id`, time range (`_from`, `to`), `limit`, and `offset`. Basic exception handling for `GateApiException` and `ApiException` is included.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Specify the currency pair, if not specified, return all currency pairs (optional)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # The agency obtains the transaction history of the recommended user\n    api_response = api_instance.agency_transaction_history(currency_pair=currency_pair, user_id=user_id, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->agency_transaction_history: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a Futures Order with Gate.io Delivery API in Python\nDESCRIPTION: This snippet shows how to create a new futures order using the Gate.io Delivery API. It initializes the API client, sets the settle currency, creates a FuturesOrder object, and makes the API call with proper exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\nfutures_order = gate_api.FuturesOrder() # FuturesOrder | \n\ntry:\n    # Create a futures order\n    api_response = api_instance.create_delivery_order(settle, futures_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->create_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initiating UID Transfers with Gate.io API in Python\nDESCRIPTION: This snippet illustrates transferring assets between main spot accounts using Gate.io's Python SDK and the withdraw_push_order method. It requires specification of the UIDPushWithdrawal object, API authentication, and exception handling logic. Both sender and recipient must be main accounts, not sub-accounts. Input is a UidPushWithdrawal object containing transfer details; output is a UidPushWithdrawalResp with the transfer information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WithdrawalApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\",\\n    key = \\\"YOU_API_KEY\\\",\\n    secret = \\\"YOUR_API_SECRET\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.WithdrawalApi(api_client)\\nuid_push_withdrawal = gate_api.UidPushWithdrawal() # UidPushWithdrawal | \\n\\ntry:\\n    # UID transfer\\n    api_response = api_instance.withdraw_push_order(uid_push_withdrawal)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling WithdrawalApi->withdraw_push_order: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Specific Currency Pair Details with Gate.io Python API\nDESCRIPTION: This snippet details calling the get_currency_pair method on Gate.io's SpotApi using their Python SDK, requiring the currency_pair string (e.g., ETH_BTC) as input. Exception handling is included to manage API or SDK errors. No authorization is needed, and the response provides a CurrencyPair object with details about the specified trading pair.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.SpotApi(api_client)\\ncurrency_pair = 'ETH_BTC' # str | Currency pair\\n\\ntry:\\n    # Get details of a specifc currency pair\\n    api_response = api_instance.get_currency_pair(currency_pair)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling SpotApi->get_currency_pair: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Transferring Between Trading Accounts in Gate.io API using Python SDK\nDESCRIPTION: This example shows how to transfer funds between different Gate.io trading accounts (spot, margin, futures, delivery, options) using the Python SDK. The code initializes the API client with authentication credentials and makes a transfer request with a Transfer object containing the transfer details.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ntransfer = gate_api.Transfer() # Transfer | \n\ntry:\n    # Transfer between trading accounts\n    api_response = api_instance.transfer(transfer)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->transfer: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating or Repaying Loans with Gate.io UnifiedApi in Python\nDESCRIPTION: This snippet shows how to initiate a loan (borrow) or process a repayment using the Gate.io UnifiedApi in Python. It utilizes the 'gate_api' library and expects an appropriately constructed UnifiedLoan object as input. The response is a UnifiedLoanResult object. Constraints include minimum and maximum borrow limits; for full repayment, pass the repaid_all parameter as true. Handle potential errors using the modelled exception classes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.UnifiedApi(api_client)\\nunified_loan = gate_api.UnifiedLoan() # UnifiedLoan | \\n\\ntry:\\n    # Borrow or repay\\n    api_response = api_instance.create_unified_loan(unified_loan)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling UnifiedApi->create_unified_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling an Order using Gate.io Python API Client\nDESCRIPTION: Example code demonstrating how to cancel a single order on Gate.io using the Python API client. This snippet shows the authentication setup, client instantiation, and API call to cancel an order by its ID for a specific currency pair.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder_id = '12345' # str | The order ID returned when the order was successfully created or the custom ID specified by the user's creation (i.e. the `text` field). Operations based on custom IDs can only be checked in pending orders. Only order ID can be used after the order is finished (transaction/cancel)\ncurrency_pair = 'BTC_USDT' # str | Currency pair\naccount = 'spot' # str | Specify query account. (optional)\naction_mode = 'ACK' # str | Processing Mode  When placing an order, different fields are returned based on the action_mode  - ACK: Asynchronous mode, returns only key order fields - RESULT: No clearing information - FULL: Full mode (default) (optional)\nx_gate_exptime = '1689560679123' # str | Specify the expiration time (milliseconds); if the GATE receives the request time greater than the expiration time, the request will be rejected (optional)\n\ntry:\n    # Cancel a single order\n    api_response = api_instance.cancel_order(order_id, currency_pair, account=account, action_mode=action_mode, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->cancel_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position Details in Dual Mode using GateAPI Python\nDESCRIPTION: Creates a FuturesApi instance and calls the get_dual_mode_position method to retrieve position details for a specific futures contract in dual mode. Requires settle currency and contract name parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n\ntry:\n    # Retrieve position detail in dual mode\n    api_response = api_instance.get_dual_mode_position(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_dual_mode_position: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Sub-Account API Key with Gate.io Python SDK\nDESCRIPTION: This Python code provides an example for updating an existing API key of a Gate.io sub-account using SubAccountApi.update_sub_account_keys. It uses the 'gate_api' SDK and requires APIv4 authentication credentials. The function takes in 'user_id', 'key' (API key to update), and a 'sub_account_key' object for the new settings. On success, it returns no response body and exceptions are properly caught for diagnostics.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\nkey = 'key_example' # str | The API Key of the sub-account\nsub_account_key = gate_api.SubAccountKey() # SubAccountKey | \n\ntry:\n    # Update API key of the sub-account\n    api_instance.update_sub_account_keys(user_id, key, sub_account_key)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->update_sub_account_keys: %s\\n\" % e)\n\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Futures Position Leverage using Gate.io API in Python\nDESCRIPTION: Illustrates updating the leverage for a delivery futures position via the Gate.io Python SDK. After setting up the API client (`gate_api.Configuration`, `gate_api.ApiClient`) and the `DeliveryApi` instance, it calls `update_delivery_position_leverage`. This method requires the settlement currency (`settle`), contract identifier (`contract`), and the desired new leverage (`leverage`) as string parameters. The API returns the updated `Position` object upon success. Error handling for `GateApiException` and `ApiException` is included.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\nleverage = '10' # str | New position leverage\n\ntry:\n    # Update position leverage\n    api_response = api_instance.update_delivery_position_leverage(settle, contract, leverage)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->update_delivery_position_leverage: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Executing ETH2 Swap with Gate.io API in Python\nDESCRIPTION: This code demonstrates how to perform an ETH2 swap using the Gate.io API. It requires API key authentication and sends a POST request to the /earn/staking/eth2/swap endpoint with an Eth2Swap object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\neth2_swap = gate_api.Eth2Swap() # Eth2Swap | \n\ntry:\n    # ETH2 swap\n    api_instance.swap_eth2(eth2_swap)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->swap_eth2: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Futures Balances with Gate.io API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch futures account balances for sub-accounts using the Gate.io API's WalletApi. It takes optional sub_uid and settle parameters to filter results by specific sub-account IDs and settlement currencies, respectively.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_uid = '10003' # str | User ID of sub-account, you can query multiple records separated by `,`. If not specified, it will return the records of all sub accounts (optional)\nsettle = 'usdt' # str | Query only balances of specified settle currency (optional)\n\ntry:\n    # Query sub accounts' futures account balances\n    api_response = api_instance.list_sub_account_futures_balances(sub_uid=sub_uid, settle=settle)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_sub_account_futures_balances: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Price-Triggered Spot Orders in Python\nDESCRIPTION: Example code for creating a new price-triggered spot order. Requires API authentication and order details object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.SpotApi(api_client)\nspot_price_triggered_order = gate_api.SpotPriceTriggeredOrder()\n\ntry:\n    api_response = api_instance.create_spot_price_triggered_order(spot_price_triggered_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->create_spot_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Cross Margin Currencies with Gate.io API\nDESCRIPTION: Example showing how to retrieve supported currencies for cross margin trading. Note that this endpoint is deprecated but shows basic API usage without authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\n\ntry:\n    # Currencies supported by cross margin.(deprecated)\n    api_response = api_instance.list_cross_margin_currencies()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_cross_margin_currencies: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Collateral Loan Orders in Python\nDESCRIPTION: This snippet demonstrates how to list collateral loan orders using the gate_api library. It includes authentication setup and handling of API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.CollateralLoanApi(api_client)\npage = 1\nlimit = 100\ncollateral_currency = 'BTC'\nborrow_currency = 'USDT'\n\ntry:\n    api_response = api_instance.list_collateral_loan_orders(page=page, limit=limit, collateral_currency=collateral_currency, borrow_currency=borrow_currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->list_collateral_loan_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Details Using Gate.io API in Python\nDESCRIPTION: Example code showing how to retrieve account details using the Gate.io API with Python. This requires API key authentication and properly configured API client.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.AccountApi(api_client)\n\ntry:\n    # Get account detail\n    api_response = api_instance.get_account_detail()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_account_detail: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Client in Python\nDESCRIPTION: Sets up the Gate.io API client with authentication parameters. This configuration is required for making authenticated API calls to Gate.io's services.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FlashSwapApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Setting Auto Repayment Status with Gate.io API\nDESCRIPTION: Shows how to update a user's auto repayment settings using Gate.io's margin API. Configures API authentication and sends a request to enable or disable auto repayment.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\nstatus = 'on' # str | New auto repayment status. `on` - enabled, `off` - disabled\n\ntry:\n    # Update user's auto repayment setting\n    api_response = api_instance.set_auto_repay(status)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->set_auto_repay: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Saved Addresses in Gate.io Python SDK\nDESCRIPTION: Example of querying saved withdrawal addresses for a specific currency with optional chain, limit and pagination parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'USDT'\nchain = ''\nlimit = '50'\npage = 1\n\ntry:\n    api_response = api_instance.list_saved_address(currency, chain=chain, limit=limit, page=page)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_saved_address: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Batch Trading Fee Rates with Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to retrieve trading fee rates for multiple currency pairs in a single API call. It creates an authenticated API client and makes a request with a comma-separated list of currency pairs, returning fee information as a dictionary.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\ncurrency_pairs = 'BTC_USDT,ETH_USDT' # str | A request can only query up to 50 currency pairs\n\ntry:\n    # Query a batch of user trading fee rates\n    api_response = api_instance.get_batch_spot_fee(currency_pairs)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_batch_spot_fee: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Fixed Interest Rates for 7 and 30 Days with Gate.io API in Python\nDESCRIPTION: This Python snippet queries fixed interest rates offered for 7-day and 30-day terms under Gate.io's Multi-Collateral Loan system using the official SDK. No authentication or parameters are required. The snippet shows initialization and calling get_multi_collateral_fix_rate, which returns a list of CollateralFixRate objects. Dependencies include the gate_api package. Used for clients needing fixed-term rate information for loan operations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\n\\ntry:\\n    # Query fixed interest rates for the currency for 7 days and 30 days\\n    api_response = api_instance.get_multi_collateral_fix_rate()\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling MultiCollateralLoanApi->get_multi_collateral_fix_rate: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Position Liquidation History in Python\nDESCRIPTION: This code shows how to retrieve a user's liquidation history for options positions on a specific underlying asset. It allows filtering by contract name and handles API exceptions appropriately.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\ncontract = 'BTC_USDT-20210916-5000-C' # str | Options contract name (optional)\n\ntry:\n    # List user's liquidation history of specified underlying\n    api_response = api_instance.list_options_position_close(underlying, contract=contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_position_close: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Delivery Liquidation History - Gate.io API Python\nDESCRIPTION: Retrieves the history of liquidations for delivery futures positions. Parameters include settle currency and optional filters for contract, result limit, and specific timestamp. Returns a list of liquidation records.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\nat = 0 # int | Specify a liquidation timestamp (optional) (default to 0)\n\ntry:\n    # List liquidation history\n    api_response = api_instance.list_delivery_liquidates(settle, contract=contract, limit=limit, at=at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_liquidates: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Collateral Loan in Python\nDESCRIPTION: This snippet shows how to create a collateral loan order using the gate_api library. It includes setup for API authentication and error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.CollateralLoanApi(api_client)\ncreate_collateral_order = gate_api.CreateCollateralOrder()\n\ntry:\n    api_response = api_instance.create_collateral_loan(create_collateral_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->create_collateral_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Supported Currency Chains with Gate.io Wallet API in Python\nDESCRIPTION: Demonstrates how to list the supported blockchain networks (chains) for a specific currency (e.g., 'GT') using the `list_currency_chains` method of the `gate_api.WalletApi` class. It initializes the API client without authentication, specifies the currency, makes the API call, and prints the response or catches potential API exceptions. No API key is required for this endpoint.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\ncurrency = 'GT' # str | Currency name\n\ntry:\n    # List chains supported for specified currency\n    api_response = api_instance.list_currency_chains(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_currency_chains: %s\\n\" % e)\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Balances using Gate.io API in Python\nDESCRIPTION: Fetches balance information for sub-accounts associated with the main account. This can be filtered by a specific sub-account UID to get targeted information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Loans with Gate.io UnifiedApi in Python\nDESCRIPTION: This snippet details the process of listing unified loans via the Gate.io UnifiedApi using Python. It requires the 'gate_api' library and valid API credentials. Optional parameters include currency (for filtering), page, limit, and type (platform or margin). The API returns a list of UniLoan objects based on specified filters, with structured error handling provided.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.UnifiedApi(api_client)\\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\\npage = 1 # int | Page number (optional) (default to 1)\\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\\ntype = 'platform' # str | Loan type, platform - platform, margin - margin (optional)\\n\\ntry:\\n    # List loans\\n    api_response = api_instance.list_unified_loans(currency=currency, page=page, limit=limit, type=type)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling UnifiedApi->list_unified_loans: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Futures Order with Python Gate.io API\nDESCRIPTION: Demonstrates how to cancel a futures order using the Gate.io API. Takes settle currency and order ID as parameters, with optional expiration time for the request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_38\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\norder_id = '12345'\nx_gate_exptime = '1689560679123'\n\ntry:\n    api_response = api_instance.cancel_futures_order(settle, order_id, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->cancel_futures_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Personal Delivery Trading History - Gate.io API Python\nDESCRIPTION: Retrieves the user's personal trading history for delivery futures contracts. Includes optional parameters for filtering by contract, order ID, pagination controls, and total count. Returns a list of trade records.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract (optional)\norder = 12345 # int | Futures order ID, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nlast_id = '12345' # str | Specify list staring point using the `id` of last record in previous list-query results (optional)\ncount_total = 0 # int | Whether to return total number matched. Default to 0(no return) (optional) (default to 0)\n\ntry:\n    # List personal trading history\n    api_response = api_instance.get_my_delivery_trades(settle, contract=contract, order=order, limit=limit, offset=offset, last_id=last_id, count_total=count_total)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->get_my_delivery_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Uni Lend Records via Gate.io Python SDK\nDESCRIPTION: This snippet shows how to retrieve a paginated list of lending or redemption records for a specified currency using Gate.io's Python SDK. API Key authentication is required, and optional parameters such as currency, page, limit, _from, to, and type allow users to filter results. The returned response includes a list of UniLendRecord items matching the query. Users should handle GateApiException and ApiException for robust error processing.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.EarnUniApi(api_client)\\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\\npage = 1 # int | Page number (optional) (default to 1)\\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\\n_from = 1547706332 # int | Start timestamp (optional)\\nto = 1547706332 # int | End timestamp (optional)\\ntype = 'lend' # str | type: lend - lend, redeem - redeem (optional)\\n\\ntry:\\n    # List records of lending\\n    api_response = api_instance.list_uni_lend_records(currency=currency, page=page, limit=limit, _from=_from, to=to, type=type)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling EarnUniApi->list_uni_lend_records: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Querying User LTV Info\nDESCRIPTION: Demonstrates how to query a user's collateralization ratio by specifying collateral and borrowed currencies.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ncollateral_currency = 'BTC'\nborrow_currency = 'USDT'\n\ntry:\n    api_response = api_instance.get_user_ltv_info(collateral_currency, borrow_currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->get_user_ltv_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Adding Users to STP Group in Python\nDESCRIPTION: Implements functionality to add users to an STP group. Only master accounts can add users, and only sub-accounts under the main account can be added.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.add_stp_group_users(stp_id, request_body)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->add_stp_group_users: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Delivery Contract Information with Gate.io API in Python\nDESCRIPTION: This code shows how to fetch detailed information about a specific futures contract using its identifier and settlement currency. The API returns a DeliveryContract object containing contract specifications like price, volume, and expiry details.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\n\ntry:\n    # Get a single contract\n    api_response = api_instance.get_delivery_contract(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->get_delivery_contract: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Price-Triggered Delivery Orders in Python\nDESCRIPTION: Example of how to list all price-triggered orders for delivery futures using the Gate.io API. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt'\nstatus = 'status_example'\ncontract = 'BTC_USDT'\nlimit = 100\noffset = 0\n\ntry:\n    api_response = api_instance.list_price_triggered_delivery_orders(settle, status, contract=contract, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_price_triggered_delivery_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Sub-Account Margin Balances with Gate.io API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve margin balances for sub-accounts using the Gate.io API's WalletApi. It takes an optional sub_uid parameter to filter results by specific sub-account IDs, and handles both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_uid = '10003' # str | User ID of sub-account, you can query multiple records separated by `,`. If not specified, it will return the records of all sub accounts (optional)\n\ntry:\n    # Query sub accounts' margin balances\n    api_response = api_instance.list_sub_account_margin_balances(sub_uid=sub_uid)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_sub_account_margin_balances: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Transfer Status using Gate.io API in Python\nDESCRIPTION: Retrieves the status of a transfer operation using either a custom client order ID or a transaction ID. At least one of these identifiers must be provided to perform the query.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nclient_order_id = 'da3ce7a088c8b0372b741419c7829033' # str | The custom ID provided by the customer serves as a safeguard against duplicate transfers. It can be a combination of letters (case-sensitive), numbers, hyphens '-', and underscores '_', with a length ranging from 1 to 64 characters. (optional)\ntx_id = '59636381286' # str | The transfer operation number and client_order_id cannot be empty at the same time (optional)\n\ntry:\n    # Transfer status query\n    api_response = api_instance.get_transfer_order_status(client_order_id=client_order_id, tx_id=tx_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->get_transfer_order_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Loan Records with Gate.io API in Python\nDESCRIPTION: Implementation for retrieving loan records with optional filtering parameters including type, currency, and currency pair. Supports pagination and limit settings.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\n\ntry:\n    api_response = api_instance.list_uni_loan_records(type=type, currency=currency, currency_pair=currency_pair, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->list_uni_loan_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unified Estimate Rate using Gate.io API in Python\nDESCRIPTION: This code snippet shows how to get the unified estimate rate for specified currencies using the Gate.io API. It sets up the API client with authentication and calls the get_unified_estimate_rate method with a list of currency names.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.UnifiedApi(api_client)\ncurrencies = ['[\\\"BTC\\\",\\\"GT\\\"]']\n\ntry:\n    api_response = api_instance.get_unified_estimate_rate(currencies)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_unified_estimate_rate: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Flash Swap Orders in Python\nDESCRIPTION: Example of retrieving flash swap order history with filtering options for status and currencies. Requires API key authentication and supports pagination and sorting.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FlashSwapApi(api_client)\nstatus = 1 # int | Flash swap order status  `1` - success `2` - failure (optional)\nsell_currency = 'BTC' # str | Currency to sell (optional)\nbuy_currency = 'BTC' # str | Currency to buy (optional)\nreverse = true # bool | If results are sorted by id in reverse order. Default to `true` (optional)\nlimit = 100 # int | Maximum number of records (optional) (default to 100)\npage = 1 # int | Page number (optional) (default to 1)\n\ntry:\n    api_response = api_instance.list_flash_swap_orders(status=status, sell_currency=sell_currency, buy_currency=buy_currency, reverse=reverse, limit=limit, page=page)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FlashSwapApi->list_flash_swap_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Currency Discount Tiers using Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to retrieve a list of currency discount tiers using the Gate.io API. It initializes the API client without authentication and calls the list_currency_discount_tiers method.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.UnifiedApi(api_client)\n\ntry:\n    api_response = api_instance.list_currency_discount_tiers()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_currency_discount_tiers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Uni Lend Total Interest via Gate.io Python SDK\nDESCRIPTION: This snippet fetches a user's total interest income for a specified currency using Gate.io's Python SDK. Requires API Key and Secret for authentication and a currency string as input. The API returns a UniLendInterest object containing the accrued interest; errors are managed through exception handlers. Ensure permission scopes are set for reading user earnings.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.EarnUniApi(api_client)\\ncurrency = 'btc' # str | Currency\\n\\ntry:\\n    # Get the user's total interest income of specified currency\\n    api_response = api_instance.get_uni_interest(currency)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling EarnUniApi->get_uni_interest: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Querying Spot Insurance Fund History in Python\nDESCRIPTION: Example code for retrieving historical spot insurance fund data using the Gate.io API. Parameters include business type, currency, timestamp range, and pagination options.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.SpotApi(api_client)\nbusiness = 'margin'\ncurrency = 'BTC'\n_from = 1547706332\nto = 1547706332\npage = 1\nlimit = 30\n\ntry:\n    api_response = api_instance.get_spot_insurance_history(business, currency, _from, to, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_spot_insurance_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Transferring Between Main and Sub Accounts in Gate.io API using Python SDK\nDESCRIPTION: This example demonstrates how to transfer funds between main and sub accounts using the Gate.io API Python SDK. The code initializes the API client with authentication credentials and makes a transfer request using a SubAccountTransfer object. This function supports transferring with a sub user's spot or futures account.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Position Information in Python\nDESCRIPTION: Demonstrates how to retrieve information for a single futures position using the Gate.io API. It requires the settle currency and contract name as parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n\ntry:\n    # Get single position\n    api_response = api_instance.get_position(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_position: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Loan Margin Tiers using Gate.io API in Python\nDESCRIPTION: This code example shows how to fetch a list of loan margin tiers using the Gate.io API. It sets up the API client without authentication and invokes the list_loan_margin_tiers method.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.UnifiedApi(api_client)\n\ntry:\n    api_response = api_instance.list_loan_margin_tiers()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_loan_margin_tiers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Orders with Filters in Python\nDESCRIPTION: This code demonstrates how to retrieve a list of options orders with various filter parameters including status, contract, underlying asset, pagination options, and time range. It properly handles API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nstatus = 'open' # str | Only list the orders with this status\ncontract = 'BTC_USDT-20210916-5000-C' # str | Options contract name (optional)\nunderlying = 'BTC_USDT' # str | Underlying (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\n\ntry:\n    # List options orders\n    api_response = api_instance.list_options_orders(status, contract=contract, underlying=underlying, limit=limit, offset=offset, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Unified Account Mode with Python Gate.io API Client\nDESCRIPTION: Example code that demonstrates how to query the unified account mode using the Gate.io API. Modes include classic, multi-currency margin, portfolio margin, and single-currency margin.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\n\ntry:\n    # Query mode of the unified account\n    api_response = api_instance.get_unified_mode()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_unified_mode: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Operating Multi-Collateral Adjustments via Gate API (Python)\nDESCRIPTION: This snippet highlights how to operate on multi-collateral accounts by submitting a CollateralAdjust object to the 'operate_multi_collateral' method. The code sets up API client authentication and provides structured error handling. Input is a CollateralAdjust model instance; on success, the result is a CollateralAdjustRes object. Requires the gate_api package configured with valid credentials.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\ncollateral_adjust = gate_api.CollateralAdjust() # CollateralAdjust | \\n\\ntry:\\n    # Operate Multi-Collateral\\n    api_response = api_instance.operate_multi_collateral(collateral_adjust)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MultiCollateralLoanApi->operate_multi_collateral: %s\\\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Liquidation History for Futures Contracts\nDESCRIPTION: Demonstrates how to fetch liquidation history for futures contracts with optional filtering parameters. The request requires a settle currency and can be filtered by contract, result limit, and timestamp.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_45\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\nat = 0 # int | Specify a liquidation timestamp (optional) (default to 0)\n\ntry:\n    # List liquidation history\n    api_response = api_instance.list_liquidates(settle, contract=contract, limit=limit, at=at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_liquidates: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Personal Trading History in Gate.io Futures API\nDESCRIPTION: Python code for getting personal trading history from Gate.io Futures API. Takes parameters like settle currency, contract, order ID, pagination limits and returns a list of trades. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_40\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\norder = 12345\nlimit = 100\noffset = 0\nlast_id = '12345'\n\ntry:\n    api_response = api_instance.get_my_trades(settle, contract=contract, order=order, limit=limit, offset=offset, last_id=last_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_my_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Price-Triggered Delivery Order in Python\nDESCRIPTION: Example of how to create a price-triggered order for delivery futures using the Gate.io API. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt'\nfutures_price_triggered_order = gate_api.FuturesPriceTriggeredOrder() # FuturesPriceTriggeredOrder | \n\ntry:\n    api_response = api_instance.create_price_triggered_delivery_order(settle, futures_price_triggered_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->create_price_triggered_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Risk Limit Tiers using Gate.io API (Python)\nDESCRIPTION: Details usage of the list_futures_risk_limit_tiers method from the FuturesApi to fetch risk limit tiers for derivatives markets. Demonstrates how to specify optional contract, limit, and offset for pagination. Requires gate_api Python module and exception handling. Main parameters include settle currency, contract (optional), and pagination controls; output is a list of FuturesLimitRiskTiers in JSON. When contract is not set, limit/offset apply at the market level only for the first 100 results.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # List risk limit tiers\n    api_response = api_instance.list_futures_risk_limit_tiers(settle, contract=contract, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_risk_limit_tiers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Collateral Adjustment Records via Gate API (Python)\nDESCRIPTION: This Python code demonstrates usage of the 'list_multi_collateral_records' method, allowing users to retrieve collateral adjustment activity by supplying pagination, time, and collateral currency parameters. The output is a list of MultiCollateralRecord objects, and it requires proper authentication and the gate_api Python package. Exception handling is included to catch API and server errors.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\npage = 1 # int | Page number (optional) (default to 1)\\nlimit = 10 # int | Maximum number of records to be returned in a single list (optional) (default to 10)\\n_from = 1609459200 # int | Start timestamp of the query (optional)\\nto = 1609459200 # int | Time range ending, default to current time (optional)\\ncollateral_currency = 'BTC' # str | Collateral (optional)\\n\\ntry:\\n    # Query collateral adjustment records\\n    api_response = api_instance.list_multi_collateral_records(page=page, limit=limit, _from=_from, to=to, collateral_currency=collateral_currency)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MultiCollateralLoanApi->list_multi_collateral_records: %s\\\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Rebate Information with Gate.io API in Python\nDESCRIPTION: This example demonstrates how to retrieve a user's rebate information using the Gate.io API. It configures API authentication and properly handles both standard API exceptions and Gate-specific exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\n\ntry:\n    # User retrieves rebate information\n    api_response = api_instance.rebate_user_info()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->rebate_user_info: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying User Trading Fee Rates for Futures\nDESCRIPTION: Retrieves the current trading fee rates for a user in the futures market. The request requires a settle currency and can be filtered by a specific contract.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_48\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\n\ntry:\n    # Query user trading fee rates\n    api_response = api_instance.get_futures_fee(settle, contract=contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_futures_fee: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Locking a Sub-Account in Gate.io API with Python\nDESCRIPTION: Example of locking a sub-account using the SubAccountApi. This operation requires the user ID of the sub-account as a parameter and returns no response body on success (HTTP 204).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | The user id of the sub-account\n\ntry:\n    # Lock the sub-account\n    api_instance.lock_sub_account(user_id)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->lock_sub_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Initializing Gate.io API Client Configuration\nDESCRIPTION: Sets up the Gate.io API client configuration with authentication credentials and creates a CollateralLoanApi instance.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.CollateralLoanApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Transfer Records in Gate.io API using Python SDK\nDESCRIPTION: This example demonstrates how to retrieve transfer records between main and sub accounts using the Gate.io API Python SDK. The code initializes the API client with authentication credentials and makes a request with optional filters for sub-user ID, time range, and pagination settings.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_uid = '10003' # str | User ID of sub-account, you can query multiple records separated by `,`. If not specified, it will return the records of all sub accounts (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Retrieve transfer records between main and sub accounts\n    api_response = api_instance.list_sub_account_transfers(sub_uid=sub_uid, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_sub_account_transfers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Client Authentication in Python\nDESCRIPTION: Sets up API client configuration with host URL, API key and secret for authentication. Creates an instance of AccountApi for making authenticated requests.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.AccountApi(api_client)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Repayment History from Gate.io API\nDESCRIPTION: This snippet shows how to fetch repayment history records from the Gate.io API. It supports filtering by operation type, currency types, pagination, and time range. Returns a list of RepayRecord objects.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.CollateralLoanApi(api_client)\nsource = 'repay' # str | Operation type: repay - Regular repayment, liquidate - Liquidation\nborrow_currency = 'USDT' # str | Borrowed currency (optional)\ncollateral_currency = 'BTC' # str | Collateral (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n_from = 1609459200 # int | Start timestamp of the query (optional)\nto = 1609459200 # int | Time range ending, default to current time (optional)\n\ntry:\n    # Repayment history\n    api_response = api_instance.list_repay_records(source, borrow_currency=borrow_currency, collateral_currency=collateral_currency, page=page, limit=limit, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->list_repay_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Futures Orders with Gate.io Delivery API in Python\nDESCRIPTION: This snippet demonstrates how to list futures orders using the Gate.io Delivery API. It initializes the API client, sets up required parameters like settle currency, status, and pagination options, then makes the API call with proper exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\nstatus = 'open' # str | Only list the orders with this status\ncontract = 'BTC_USDT_20200814' # str | Futures contract (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nlast_id = '12345' # str | Specify list staring point using the `id` of last record in previous list-query results (optional)\ncount_total = 0 # int | Whether to return total number matched. Default to 0(no return) (optional) (default to 0)\n\ntry:\n    # List futures orders\n    api_response = api_instance.list_delivery_orders(settle, status, contract=contract, limit=limit, offset=offset, last_id=last_id, count_total=count_total)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Price-Triggered Order with Gate.io Delivery API in Python\nDESCRIPTION: This snippet demonstrates how to configure the Gate.io API client and create a price-triggered delivery order. It includes API key configuration, request parameter setup, and error handling for both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\nfutures_price_triggered_order = gate_api.FuturesPriceTriggeredOrder() # FuturesPriceTriggeredOrder | \n\ntry:\n    # Create a price-triggered order\n    api_response = api_instance.create_price_triggered_delivery_order(settle, futures_price_triggered_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->create_price_triggered_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Amending Batch Future Orders in Python\nDESCRIPTION: Modifies multiple existing futures orders by ID using the Gate.io API. Requires API key authentication. Can modify up to 10 orders per request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_50\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\nbatch_amend_order_req = [gate_api.BatchAmendOrderReq()]\nx_gate_exptime = '1689560679123'\n\ntry:\n    api_response = api_instance.amend_batch_future_orders(settle, batch_amend_order_req, x_gate_exptime=x_gate_exptime)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->amend_batch_future_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Uni Interest Records with Gate.io Python SDK\nDESCRIPTION: This snippet illustrates how to list interest accrual records for a specified currency through the Gate.io Python SDK, supporting pagination and optional date boundaries. The function uses APIv4 authentication and parameters like currency, page, limit, _from, and to for detailed filtering. Returns a list of UniInterestRecord items, handling authentication and API exceptions for robust integration.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.EarnUniApi(api_client)\\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\\npage = 1 # int | Page number (optional) (default to 1)\\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\\n_from = 1547706332 # int | Start timestamp (optional)\\nto = 1547706332 # int | End timestamp (optional)\\n\\ntry:\\n    # List interest records\\n    api_response = api_instance.list_uni_interest_records(currency=currency, page=page, limit=limit, _from=_from, to=to)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling EarnUniApi->list_uni_interest_records: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Canceling Withdrawal Requests via Gate.io API in Python\nDESCRIPTION: This example shows how to cancel a pending withdrawal request by withdrawal_id using the Gate.io API in Python. It initializes the WithdrawalApi client, prepares the required withdrawal_id parameter, and handles any exceptions from the SDK. Users must provide a valid withdrawal ID, and the request will be processed according to current API server status. The function returns a LedgerRecord reflecting the status of the cancellation.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WithdrawalApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\",\\n    key = \\\"YOU_API_KEY\\\",\\n    secret = \\\"YOUR_API_SECRET\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.WithdrawalApi(api_client)\\nwithdrawal_id = '210496' # str | \\n\\ntry:\\n    # Cancel withdrawal with specified ID\\n    api_response = api_instance.cancel_withdrawal(withdrawal_id)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling WithdrawalApi->cancel_withdrawal: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Maximum Borrowable Amount with Gate.io API in Python\nDESCRIPTION: Shows how to query the maximum borrowable amount for a specific currency in a unified account using the `gate_api` library. It includes API configuration (APIv4), client/API instance creation, and calling `get_unified_borrowable` with the required `currency` parameter. Includes error handling for `GateApiException` and `ApiException`.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency\n\ntry:\n    # Query about the maximum borrowing for the unified account\n    api_response = api_instance.get_unified_borrowable(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_unified_borrowable: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Rate Limits Using Gate.io API in Python\nDESCRIPTION: Example code showing how to get user transaction rate limit information using the Gate.io API with Python. This requires API key authentication and returns a list of account rate limits.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.AccountApi(api_client)\n\ntry:\n    # Get user transaction rate limit information\n    api_response = api_instance.get_account_rate_limit()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_account_rate_limit: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Account Book in Python using Gate.io API\nDESCRIPTION: Demonstrates how to retrieve account book entries using the Gate.io API. It includes optional parameters for filtering results by currency, date range, and transaction type.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.SpotApi(api_client)\ncurrency = 'BTC' \n_from = 1627706330 \nto = 1635329650 \npage = 1 \nlimit = 100 \ntype = 'lend' \ncode = 'code_example' \n\ntry:\n    api_response = api_instance.list_spot_account_book(currency=currency, _from=_from, to=to, page=page, limit=limit, type=type, code=code)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->list_spot_account_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Server Time from Gate.io API in Python\nDESCRIPTION: Example showing how to fetch the current server time from Gate.io API. This is a simple unauthenticated request that can be used for synchronization or timestamp validation purposes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\n\ntry:\n    # Get server current time\n    api_response = api_instance.get_system_time()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_system_time: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Futures Position Margin using Gate.io API in Python\nDESCRIPTION: Demonstrates how to update the margin for a specific delivery futures position using the Gate.io Python SDK. It first configures the API client and initializes the `DeliveryApi`. The `update_delivery_position_margin` method is then called with the settlement currency (`settle`), contract identifier (`contract`), and the margin change amount (`change`). A positive `change` increases margin, while a negative value decreases it. Requires `gate_api` library and API credentials. The successful response is a `Position` object reflecting the update.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\nchange = '0.01' # str | Margin change. Use positive number to increase margin, negative number otherwise.\n\ntry:\n    # Update position margin\n    api_response = api_instance.update_delivery_position_margin(settle, contract, change)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->update_delivery_position_margin: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Price-Triggered Order with Gate.io Delivery API in Python\nDESCRIPTION: This example demonstrates how to retrieve a specific price-triggered order using its ID. It includes the API client setup with authentication credentials, making the API request with the settle currency and order ID parameters, and handling any potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\norder_id = 'order_id_example' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # Get a price-triggered order\n    api_response = api_instance.get_price_triggered_delivery_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->get_price_triggered_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Options Contract Detail with Gate API - Python\nDESCRIPTION: This snippet demonstrates how to use the OptionsApi class from the gate_api Python package to query details of a specified options contract via the get_options_contract method. It initializes an API client, passes the contract name, and prints the resulting OptionsContract object. Dependencies include the gate_api library and its exceptions module, and the key input is the contract string. No authentication or special HTTP headers are required. Outputs the retrieved contract details or error messages for exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20211130-65000-C' # str | \n\ntry:\n    # Query specified contract detail\n    api_response = api_instance.get_options_contract(contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_options_contract: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Price-triggered Order with Gate.io Python SDK\nDESCRIPTION: Example of how to retrieve details of a specific price-triggered order by its ID. The code demonstrates initializing the API client, making the request, and implementing error handling for both Gate.io specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_34\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\norder_id = 'order_id_example' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # Get a price-triggered order\n    api_response = api_instance.get_spot_price_triggered_order(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->get_spot_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating Sub-Account API Keys with Gate.io Python SDK\nDESCRIPTION: This Python example demonstrates how to create API keys for a Gate.io sub-account by making a call to SubAccountApi.create_sub_account_keys. It requires the 'gate_api' Python SDK and proper APIv4 key and secret setup in the configuration. The key parameters are 'user_id' (sub-account user id) and 'sub_account_key' (key specification object); it returns a list of SubAccountKey objects upon success, or raises exceptions for error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\nsub_account_key = gate_api.SubAccountKey() # SubAccountKey | \n\ntry:\n    # Create API Key of the sub-account\n    api_response = api_instance.create_sub_account_keys(user_id, sub_account_key)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->create_sub_account_keys: %s\\n\" % e)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Cross Margin Loan Detail - Gate.io API - Python\nDESCRIPTION: This example retrieves detailed information for a specific cross margin loan using its loan ID via the Gate.io Python SDK. It assumes APIv4 key authentication is already configured, constructs a MarginApi client, and fetches loan data using the loan ID parameter. Required dependencies are gate_api and an appropriate API key/secret. The snippet covers error handling for both Gate API and generic API exceptions. Input required is a string loan_id and output is the CrossMarginLoan detail object, with a warning that the endpoint is deprecated.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MarginApi(api_client)\\nloan_id = '12345' # str | Borrow loan ID\\n\\ntry:\\n    # Retrieve single borrow loan detail. (deprecated)\\n    api_response = api_instance.get_cross_margin_loan(loan_id)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MarginApi->get_cross_margin_loan: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining OptionsUnderlying Data Model in Python\nDESCRIPTION: Data model class that represents an underlying asset for options trading. Contains two optional properties: name (string) representing the underlying asset name and index_price (string) representing the spot index price in quote currency.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsUnderlying.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OptionsUnderlying:\n    \"\"\"Properties\n    name: str # Underlying name\n    index_price: str # Spot index price (quote currency)\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Querying Account Book with Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to retrieve account book records. It initializes an authenticated API client, sets up parameters for time range and pagination, and makes the API call to retrieve account book entries. The time range cannot exceed 30 days.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n```\n\n----------------------------------------\n\nTITLE: Creating STP Group Using Gate.io API in Python\nDESCRIPTION: Example code showing how to create a new STP user group using the Gate.io API with Python. This operation is only allowed for the main account and requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.AccountApi(api_client)\nstp_group = gate_api.StpGroup() # StpGroup | \n\ntry:\n    # Create STP Group\n    api_response = api_instance.create_stp_group(stp_group)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->create_stp_group: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Settlement History with Gate API - Python\nDESCRIPTION: This snippet shows how to retrieve a listing of settlement records for a specified underlying asset using OptionsApi.list_options_settlements from the gate_api Python package. It configures the API client, sets the base parameters (underlying, limit, offset, start and end timestamps), and prints the result, which is a list of OptionsSettlement objects. No authentication is required. Inputs include underlying, limit, offset, _from, and to. Outputs a list of settlement records or exception details.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\n\ntry:\n    # List settlement history\n    api_response = api_instance.list_options_settlements(underlying, limit=limit, offset=offset, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_settlements: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Margin Accounts with Python Gate.io API\nDESCRIPTION: Example showing how to retrieve margin account list using Gate.io's API with Python. Demonstrates API key authentication and handling API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\n\ntry:\n    # Margin account list\n    api_response = api_instance.list_margin_accounts(currency_pair=currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_margin_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Futures Orders by Time Range with Gate.io API\nDESCRIPTION: Example of retrieving futures orders within a specified time range. Supports filtering by contract and pagination using limit and offset parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_33\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\n_from = 1547706332\nto = 1547706332\nlimit = 100\noffset = 0\n\ntry:\n    api_response = api_instance.get_orders_with_time_range(settle, contract=contract, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_orders_with_time_range: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Collateral Currencies\nDESCRIPTION: Shows how to query supported borrowing and collateral currencies, with optional loan currency parameter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nloan_currency = 'BTC'\n\ntry:\n    api_response = api_instance.list_collateral_currencies(loan_currency=loan_currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->list_collateral_currencies: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Contracts using Gate API in Python\nDESCRIPTION: This Python snippet demonstrates listing all options contracts for a specified underlying and an optional expiration time using the `gate_api` library. It configures the API client, instantiates `OptionsApi`, and calls `list_options_contracts` with the mandatory `underlying` parameter and an optional `expiration` Unix timestamp. The example includes standard exception handling and expects a list of `OptionsContract` objects as output.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying (Obtained by listing underlying endpoint)\nexpiration = 1636588800 # int | Unix timestamp of the expiration time (optional)\n\ntry:\n    # List all the contracts with specified underlying and expiration time\n    api_response = api_instance.list_options_contracts(underlying, expiration=expiration)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_contracts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Sub-Account API Keys with Gate.io API using Python\nDESCRIPTION: This snippet illustrates how to list all API keys associated with a specific Gate.io sub-account using the `list_sub_account_keys` method from the `SubAccountApi`. It requires API key authentication and the `user_id` (integer) of the sub-account whose keys are to be listed. The method returns a list of `SubAccountKey` objects or raises `ApiException` or `GateApiException` on error.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\n\ntry:\n    # List all API Key of the sub-account\n    api_response = api_instance.list_sub_account_keys(user_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->list_sub_account_keys: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Candlestick Data with Python\nDESCRIPTION: This snippet shows how to fetch candlestick data for a futures contract using the Gate.io API. It includes parameters for settle currency, contract, time range, limit, and interval.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\n_from = 1546905600 # int | Start time of candlesticks, formatted in Unix timestamp in seconds. Default to`to - 100 * interval` if not specified (optional)\nto = 1546935600 # int | End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)\nlimit = 100 # int | Maximum recent data points to return. `limit` is conflicted with `from` and `to`. If either `from` or `to` is specified, request will be rejected. (optional) (default to 100)\ninterval = '5m' # str | Interval time between data points. Note that `1w` means natual week(Mon-Sun), while `7d` means every 7d since unix 0 (optional) (default to '5m')\n\ntry:\n    # Get futures candlesticks\n    api_response = api_instance.list_delivery_candlesticks(settle, contract, _from=_from, to=to, limit=limit, interval=interval)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_candlesticks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Multi-Collateral Repay Records via Gate API (Python)\nDESCRIPTION: This Python snippet demonstrates how to authenticate via API key and call the 'list_multi_repay_records' method from gate_api.MultiCollateralLoanApi to retrieve a list of multi-collateral loan repayment records. Required dependencies include gate_api and appropriate API credentials. Parameters control filtering by operation type, currency, pagination, and time range; the output is a list of MultiRepayRecord objects. All authentication, configuration, and exception handling best practices are included.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\ntype = 'repay' # str | Operation type: repay - Regular repayment, liquidate - Liquidation\\nborrow_currency = 'USDT' # str | Borrowed currency (optional)\\npage = 1 # int | Page number (optional) (default to 1)\\nlimit = 10 # int | Maximum number of records to be returned in a single list (optional) (default to 10)\\n_from = 1609459200 # int | Start timestamp of the query (optional)\\nto = 1609459200 # int | Time range ending, default to current time (optional)\\n\\ntry:\\n    # List Multi-Collateral Repay Records\\n    api_response = api_instance.list_multi_repay_records(type, borrow_currency=borrow_currency, page=page, limit=limit, _from=_from, to=to)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MultiCollateralLoanApi->list_multi_repay_records: %s\\\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing User Lending Orders with Python Gate.io API\nDESCRIPTION: Example demonstrating how to list a user's lending orders with optional pagination and filtering. Requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.EarnUniApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency\npage = 1 # int | Page number\nlimit = 100 # int | Maximum response items\n\ntry:\n    api_response = api_instance.list_user_uni_lends(currency=currency, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->list_user_uni_lends: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Futures Position Risk Limit using Gate.io API in Python\nDESCRIPTION: Provides an example of updating the risk limit for a specific delivery futures position using the Gate.io API and Python SDK. It involves configuring the API client, instantiating `DeliveryApi`, and calling `update_delivery_position_risk_limit`. Key parameters include the settlement currency (`settle`), the futures contract (`contract`), and the new risk limit (`risk_limit`). Successful execution returns the updated `Position` object. The code includes standard error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\nrisk_limit = '10' # str | New position risk limit\n\ntry:\n    # Update position risk limit\n    api_response = api_instance.update_delivery_position_risk_limit(settle, contract, risk_limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->update_delivery_position_risk_limit: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying User's Total Borrowing and Collateral Amounts\nDESCRIPTION: This snippet demonstrates how to query the total borrowing and collateral amounts for the authenticated user using the Gate.io Python SDK.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n```\n\n----------------------------------------\n\nTITLE: Canceling Single Price-Triggered Order\nDESCRIPTION: Demonstrates how to cancel a specific price-triggered order using its order ID. Includes proper error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_57\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.cancel_price_triggered_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->cancel_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting Unified Account Mode using Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to set the mode of a unified account using the Gate.io API. It configures the API client with authentication details and calls the set_unified_mode method with the desired account mode settings.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.UnifiedApi(api_client)\nunified_mode_set = gate_api.UnifiedModeSet()\n\ntry:\n    api_instance.set_unified_mode(unified_mode_set)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->set_unified_mode: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Futures Positions in Python using Gate.io API\nDESCRIPTION: Example of how to list all futures positions for a user using the Gate.io API with Python. Requires API key authentication. Supports filtering for real positions and pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nholding = true # bool | Return only real positions - true, return all - false. (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # List all positions of a user\n    api_response = api_instance.list_positions(settle, holding=holding, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_positions: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trading History by Time Range in Gate.io Futures API\nDESCRIPTION: Python code for getting personal trading history within a specific time range from Gate.io Futures API. Supports filtering by contract, time range, and trading role (maker/taker).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_41\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\n_from = 1547706332\nto = 1547706332\nlimit = 100\noffset = 0\nrole = 'maker'\n\ntry:\n    api_response = api_instance.get_my_trades_with_time_range(settle, contract=contract, _from=_from, to=to, limit=limit, offset=offset, role=role)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_my_trades_with_time_range: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Broker Commission History with Gate.io API in Python\nDESCRIPTION: This example demonstrates how to use the Gate.io API to retrieve commission rebate records for a broker. It initializes the API client with authentication, sets optional parameters for filtering results, and handles API exceptions properly.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1711929600 # int | The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)\nto = 1714521600 # int | Time range ending, default to current time (optional)\n\ntry:\n    # The broker obtains the user's commission rebate records\n    api_response = api_instance.rebate_broker_commission_history(limit=limit, offset=offset, user_id=user_id, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->rebate_broker_commission_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Placing a Dual Investment Order using Gate.io Earn API in Python\nDESCRIPTION: This snippet shows how to configure the Gate.io API client with authentication details (API key and secret) and use the `EarnApi` to place a dual investment order. It initializes a `PlaceDualInvestmentOrder` object and calls the `place_dual_order` method, handling potential `GateApiException` and generic `ApiException` errors. Requires the `gate_api` Python library.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\nplace_dual_investment_order = gate_api.PlaceDualInvestmentOrder() # PlaceDualInvestmentOrder | \n\ntry:\n    # Place Dual Investment order\n    api_instance.place_dual_order(place_dual_investment_order)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->place_dual_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Cross Margin Repayments - Gate.io API - Python\nDESCRIPTION: This snippet shows how to list repayments for cross margin loans using the Gate.io API with Python. It configures the MarginApi client, optionally sets filtering parameters such as currency, loan_id, limit, offset, and reverse order, and makes the API call to list repayments. Input parameters allow control over pagination and sorting. The code requires the gate_api module and appropriate APIv4 credentials. Result is a list of CrossMarginRepayment objects, and error handling covers both API and Gate API-specific exceptions. This endpoint is deprecated.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MarginApi(api_client)\\ncurrency = 'BTC' # str |  (optional)\\nloan_id = '12345' # str |  (optional)\\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\\nreverse = True # bool | Whether to sort in descending order, which is the default. Set `reverse=false` to return ascending results (optional) (default to True)\\n\\ntry:\\n    # Retrieve cross margin repayments. (deprecated)\\n    api_response = api_instance.list_cross_margin_repayments(currency=currency, loan_id=loan_id, limit=limit, offset=offset, reverse=reverse)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MarginApi->list_cross_margin_repayments: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining MultiRepayRecord Properties Structure in Markdown\nDESCRIPTION: Markdown table documenting the properties of the MultiRepayRecord class, including property names, types, and descriptions. Properties cover loan details like order ID, LTV rates, timestamps, currencies, and interest calculations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiRepayRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norder_id | int | Order ID | [optional] \nrecord_id | int | Repayment record ID | [optional] \ninit_ltv | str | The initial collateralization rate | [optional] \nbefore_ltv | str | Ltv before the operation | [optional] \nafter_ltv | str | Ltv after the operation | [optional] \nborrow_time | int | Borrowing time, timestamp in seconds. | [optional] \nrepay_time | int | Repayment time, timestamp in seconds. | [optional] \nborrow_currencies | list[RepayRecordCurrency] | List of borrowing information | [optional] \ncollateral_currencies | list[RepayRecordCurrency] | List of collateral information | [optional] \nrepaid_currencies | list[RepayRecordRepaidCurrency] | Repay Currency List | [optional] \ntotal_interest_list | list[RepayRecordTotalInterest] | Total Interest List | [optional] \nleft_repay_interest_list | list[RepayRecordLeftInterest] | List of left repay interest | [optional]\n```\n\n----------------------------------------\n\nTITLE: Querying Futures Account Book in Python using Gate.io API\nDESCRIPTION: Example of how to query a futures account book using the Gate.io API with Python. Requires API key authentication. Supports filtering by contract, time range, and transaction type.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\ntype = 'dnw' # str | Changing Type：  - dnw: Deposit & Withdraw - pnl: Profit & Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit & Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate - bonus_offset: bouns deduction (optional)\n\ntry:\n    # Query account book\n    api_response = api_instance.list_futures_account_book(settle, contract=contract, limit=limit, offset=offset, _from=_from, to=to, type=type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_account_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Margin Loans in Python\nDESCRIPTION: Example of how to list unified margin loans using the Gate.io API client for Python. It creates an authenticated API client instance and calls the list_uni_loans method with optional parameters for filtering and pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\n\ntry:\n    # List loans\n    api_response = api_instance.list_uni_loans(currency_pair=currency_pair, currency=currency, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->list_uni_loans: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Options Underlyings using Gate API in Python\nDESCRIPTION: This snippet demonstrates how to list all available options underlyings using the `gate_api` Python library. It initializes the API configuration and client, creates an instance of `OptionsApi`, calls the `list_options_underlyings` method, and includes basic error handling for `GateApiException` and general `ApiException`. This endpoint requires no parameters and returns a list of `OptionsUnderlying` objects.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\n\ntry:\n    # List all underlyings\n    api_response = api_instance.list_options_underlyings()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_underlyings: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Order Book Data - Python\nDESCRIPTION: Fetches the order book for a futures contract. Includes options for specifying interval, limit and whether to include update IDs. Bids are sorted by price high to low, asks in reverse.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\ninterval = '0' # str | Order depth. 0 means no aggregation is applied. default to 0\nlimit = 10 # int | Maximum number of order depth data in asks or bids\nwith_id = False # bool | Whether the order book update ID will be returned\n\ntry:\n    # Futures order book\n    api_response = api_instance.list_futures_order_book(settle, contract, interval=interval, limit=limit, with_id=with_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_order_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Increasing or Redeeming Collateral with Gate.io API\nDESCRIPTION: This snippet shows how to increase or redeem collateral using the Gate.io Python SDK. It creates a CollateralAlign object to specify the adjustment details and handles potential API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.CollateralLoanApi(api_client)\ncollateral_align = gate_api.CollateralAlign() # CollateralAlign | \n\ntry:\n    # Increase or redeem collateral\n    api_instance.operate_collateral(collateral_align)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->operate_collateral: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Current Hourly Interest Rates for a List of Currencies with Gate.io API in Python\nDESCRIPTION: This Python code demonstrates querying the current hourly interest rate for one or more currencies using Gate.io's Multi-Collateral Loan API. It constructs the API client and calls get_multi_collateral_current_rate, specifying 'currencies' as a list of strings (currency codes, up to 100 items, required param) and optionally 'vip_level' (string, defaults to '0'). Outputs a list of CollateralCurrentRate objects for the last hour. Dependencies: gate_api Python SDK. This call works for both public and authenticated clients.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\ncurrencies = ['[\\\"BTC\\\",\\\"GT\\\"]'] # list[str] | Specify the currency name to query the array. The array is separated by commas and has a maximum of 100 items.\\nvip_level = '0' # str | VIP level, defaults to 0 if not transferred (optional) (default to '0')\\n\\ntry:\\n    # Query the current interest rate of the currency\\n    api_response = api_instance.get_multi_collateral_current_rate(currencies, vip_level=vip_level)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling MultiCollateralLoanApi->get_multi_collateral_current_rate: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling a Single Price-Triggered Order with Gate.io Delivery API in Python\nDESCRIPTION: This snippet shows how to cancel a specific price-triggered order using its ID. It configures the API client with authentication details, specifies the settlement currency and order ID parameters, and includes error handling for both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\norder_id = 'order_id_example' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # cancel a price-triggered order\n    api_response = api_instance.cancel_price_triggered_delivery_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->cancel_price_triggered_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing User Structured Product Orders using Gate.io Earn API in Python\nDESCRIPTION: This snippet illustrates configuring the Gate.io API client with authentication (API key and secret) and using the `EarnApi` to retrieve a list of the user's structured product orders. It calls the `list_structured_orders` method, potentially filtering by time range (`_from`, `to`) and using pagination (`page`, `limit`), printing the result and handling potential API exceptions. Requires the `gate_api` Python library and APIv4 credentials.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # Structured Product Order List\n    api_response = api_instance.list_structured_orders(_from=_from, to=to, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->list_structured_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting Countdown Timer for Futures Order Cancellation\nDESCRIPTION: Creates a countdown timer to automatically cancel pending orders when the timeout is reached. This can be used to implement risk management strategies by ensuring orders don't remain open indefinitely.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_47\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncountdown_cancel_all_futures_task = gate_api.CountdownCancelAllFuturesTask() # CountdownCancelAllFuturesTask | \n\ntry:\n    # Countdown cancel orders\n    api_response = api_instance.countdown_cancel_all_futures(settle, countdown_cancel_all_futures_task)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->countdown_cancel_all_futures: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Futures Account Book with Filtering using gateapi-python (Python)\nDESCRIPTION: This code fetches a record of account book changes including deposits, withdrawals, and position PNLs using the gateapi-python SDK for Gate.io. Requires APIv4 authentication (API key and secret), setup of API and DeliveryApi instances, and specification of settle currency and optional filters (limit, from timestamp, to timestamp, and type of change). Returns a list of FuturesAccountBook objects. Inputs must be validated, particularly for timestamps and change type. Install and configure the gate_api library for usage.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.DeliveryApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\\n_from = 1547706332 # int | Start timestamp (optional)\\nto = 1547706332 # int | End timestamp (optional)\\ntype = 'dnw' # str | Changing Type: - dnw: Deposit & Withdraw - pnl: Profit & Loss by reducing position - fee: Trading fee - refr: Referrer rebate - fund: Funding - point_dnw: POINT Deposit & Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate (optional)\\n\\ntry:\\n    # Query account book\\n    api_response = api_instance.list_delivery_account_book(settle, limit=limit, _from=_from, to=to, type=type)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling DeliveryApi->list_delivery_account_book: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Updating Position Leverage in Python\nDESCRIPTION: Demonstrates how to update the leverage for a futures position. It requires the settle currency, contract name, and the new leverage value as parameters. Optionally, a cross leverage limit can be specified.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nleverage = '10' # str | New position leverage\ncross_leverage_limit = '10' # str | Cross margin leverage(valid only when `leverage` is 0) (optional)\n\ntry:\n    # Update position leverage\n    api_response = api_instance.update_position_leverage(settle, contract, leverage, cross_leverage_limit=cross_leverage_limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->update_position_leverage: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing All Delivery Futures Positions using gateapi-python (Python)\nDESCRIPTION: This example lists all open positions for a user on Gate.io delivery futures by using the gateapi-python client. The code sets up APIv4 authentication, configures the DeliveryApi, and specifies the required settlement currency parameter. Returns a list of Position objects detailing user's current futures positions. Requires the gate_api package and valid API credentials for the authenticated account.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.DeliveryApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\n\\ntry:\\n    # List all positions of a user\\n    api_response = api_instance.list_delivery_positions(settle)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling DeliveryApi->list_delivery_positions: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Listing STP Groups Using Gate.io API in Python\nDESCRIPTION: Example code showing how to retrieve the list of STP groups created by the main account using the Gate.io API with Python. Supports optional fuzzy name search and requires API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.AccountApi(api_client)\nname = 'group' # str | Perform a fuzzy search based on the name (optional)\n\ntry:\n    # List STP Groups\n    api_response = api_instance.list_stp_groups(name=name)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->list_stp_groups: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Single Futures Contract Details - Python\nDESCRIPTION: Makes an API call to retrieve details for a specific futures contract. Requires settle currency and contract symbol as parameters. Handles both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n\ntry:\n    # Get a single contract\n    api_response = api_instance.get_futures_contract(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_futures_contract: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Currencies in Gate.io API\nDESCRIPTION: Shows how to retrieve a list of loan currencies supported by a unified account, with optional filtering by specific currency. This example creates a UnifiedApi instance without authentication and handles both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Currency (optional)\n\ntry:\n    # List of loan currencies supported by unified account\n    api_response = api_instance.list_unified_currencies(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_unified_currencies: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Liquidation History in Gate.io Futures API\nDESCRIPTION: Python code for retrieving liquidation history from Gate.io Futures API. Allows filtering by contract and includes pagination support.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_43\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\nlimit = 100\nat = 0\n\ntry:\n    api_response = api_instance.list_liquidates(settle, contract=contract, limit=limit, at=at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_liquidates: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deprecated Cross Margin Currency Details using Gate.io Python SDK\nDESCRIPTION: This Python snippet demonstrates how to retrieve details for a specific currency supported in the deprecated cross margin feature using the `gate_api` library. It initializes the `MarginApi` instance, calls the `get_cross_margin_currency` method with the currency symbol (e.g., 'BTC'), and includes error handling for `GateApiException` and `ApiException`. This function does not require API key authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'BTC' # str | Currency name\n\ntry:\n    # Retrieve detail of one single currency supported by cross margin. (deprecated)\n    api_response = api_instance.get_cross_margin_currency(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_cross_margin_currency: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Checking User Margin Tier for Currency Pair in Python\nDESCRIPTION: Demonstrates how to check a user's leverage lending gradient for a specific market pair. Requires API authentication and handles potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.MarginApi(api_client)\ncurrency_pair = 'BTC_USDT'\n\ntry:\n    api_response = api_instance.get_user_margin_tier(currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_user_margin_tier: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Converting Small Balance using Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to convert small balances using the Gate.io API. It creates a ConvertSmallBalance object and calls the convert_small_balance method, handling potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_23\n\nLANGUAGE: python\nCODE:\n```\nconvert_small_balance = gate_api.ConvertSmallBalance()\n\ntry:\n    api_instance.convert_small_balance(convert_small_balance)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->convert_small_balance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Spot Balances with Gate.io API in Python\nDESCRIPTION: This code snippet demonstrates how to fetch balances for sub-accounts using the Gate.io API's WalletApi. It takes an optional sub_uid parameter to filter by specific sub-account IDs, and handles both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_uid = '10003' # str | User ID of sub-account, you can query multiple records separated by `,`. If not specified, it will return the records of all sub accounts (optional)\n\ntry:\n    # Retrieve sub account balances\n    api_response = api_instance.list_sub_account_balances(sub_uid=sub_uid)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_sub_account_balances: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Checking Maximum Borrowable Amount with Gate.io API in Python\nDESCRIPTION: Example showing how to query the maximum borrowable amount for a specific currency and currency pair using the Gate.io margin API.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\n\ntry:\n    api_response = api_instance.get_uni_borrowable(currency, currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->get_uni_borrowable: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing User Currency Quota with Gate.io API in Python\nDESCRIPTION: This Python snippet shows how to list the user currency quota for the Multi-Collateral Loan product on Gate.io using the official Python SDK. It demonstrates initializing API authentication (APIv4 key and secret required), preparing client and API instances, and calling the list_user_currency_quota method with required parameters: 'type' (string, either 'collateral' or 'borrow') and 'currency' (comma-separated for collateral, single value for borrow). Expected input includes authentication credentials and valid parameters; output is a list of CurrencyQuota objects. Dependencies: gate_api Python package, valid Gate.io API key/secret. Possible exceptions are handled for both generic and Gate API-specific errors.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\",\\n    key = \\\"YOU_API_KEY\\\",\\n    secret = \\\"YOUR_API_SECRET\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\\ntype = 'collateral' # str | Currency types: collateral - collateral currency, borrow - borrowing currency.\\ncurrency = 'BTC' # str | When specifying collateral currencies, you can use commas to separate multiple currencies; for borrowing currencies, only one currency can be provided.\\n\\ntry:\\n    # List User Currency Quota\\n    api_response = api_instance.list_user_currency_quota(type, currency)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling MultiCollateralLoanApi->list_user_currency_quota: %s\\\\n\\\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Risk Limit Tiers for Delivery Futures in Python\nDESCRIPTION: Example of how to retrieve risk limit tiers for delivery futures contracts using the Gate.io API. Does not require authentication.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT_20200814'\nlimit = 100\noffset = 0\n\ntry:\n    api_response = api_instance.list_delivery_risk_limit_tiers(settle, contract=contract, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_risk_limit_tiers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Leverage Currency Configuration in Gate.io API\nDESCRIPTION: Demonstrates how to get the minimum currency leverage configuration for a specific currency using the UnifiedApi. The example configures authentication using API keys and handles both specific Gate API exceptions and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Currency\n\ntry:\n    # Minimum currency leverage that can be set\n    api_response = api_instance.get_user_leverage_currency_config(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_user_leverage_currency_config: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Liquidation History using Gate.io API (Python)\nDESCRIPTION: Explains how to fetch liquidation event history from Gate.io Futures REST API for a given settlement or contract within a specific time interval. The code demonstrates client configuration and the list_liquidated_orders method, accepting settlement, contract, time window, and limit. Relies on gate_api and exception handling. Returns a list of FuturesLiqOrder objects in JSON. Limitations include a maximum interval of 3600 between '_from' and 'to'.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # Retrieve liquidation history\n    api_response = api_instance.list_liquidated_orders(settle, contract=contract, _from=_from, to=to, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_liquidated_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Canceling Open Futures Orders with Gate.io API\nDESCRIPTION: Example of canceling all open futures orders for a given settlement currency and contract. Allows specifying expiration time and filtering by order side (buy/sell).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_32\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\nx_gate_exptime = '1689560679123'\nside = 'ask'\n\ntry:\n    api_response = api_instance.cancel_futures_orders(settle, contract, x_gate_exptime=x_gate_exptime, side=side)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->cancel_futures_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Underlying Ticker with Gate.io API in Python\nDESCRIPTION: This code retrieves ticker information for the underlying asset of options contracts. It initializes the API client and makes a request to fetch data for a specific underlying, such as BTC_USDT.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT' # str | Underlying\n\ntry:\n    # Get underlying ticker\n    api_response = api_instance.list_options_underlying_tickers(underlying)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_underlying_tickers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Tickers with Python\nDESCRIPTION: This snippet demonstrates how to fetch ticker data for futures contracts using the Gate.io API. It includes parameters for settle currency and optional contract specification.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract (optional)\n\ntry:\n    # List futures tickers\n    api_response = api_instance.list_delivery_tickers(settle, contract=contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_tickers: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Creating a Cross Margin Borrow Loan - Gate.io API - Python\nDESCRIPTION: This snippet demonstrates how to create a cross margin loan using the Gate.io API via its official Python SDK. It sets up APIv4 key authentication, constructs a CrossMarginLoan object, and submits a loan creation request. Required dependencies are the gate_api package, proper configuration with the API key and secret, and exception handling for API or Gate API specific errors. Inputs include a CrossMarginLoan data structure, and upon success, the created loan details are printed. The operation is marked deprecated and care should be taken with minimum borrow amount constraints.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.MarginApi(api_client)\\ncross_margin_loan = gate_api.CrossMarginLoan() # CrossMarginLoan | \\n\\ntry:\\n    # Create a cross margin borrow loan. (deprecated)\\n    api_response = api_instance.create_cross_margin_loan(cross_margin_loan)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling MarginApi->create_cross_margin_loan: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Structured Products using Gate.io Earn API in Python\nDESCRIPTION: This example demonstrates configuring the Gate.io API client (without authentication for this specific endpoint) and using the `EarnApi` to list structured products. It calls the `list_structured_products` method with filtering parameters (`status`, `type`) and pagination (`page`, `limit`), then prints the API response. Error handling for `GateApiException` and `ApiException` is included. Requires the `gate_api` Python library.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\nstatus = 'in_process' # str | Status (default: all)  `in_process`-processing  `will_begin`-unstarted  `wait_settlement`-unsettled  `done`-finish\ntype = 'BullishSharkFin' # str | Product Type (default all)  `SharkFin2.0`-SharkFin  `BullishSharkFin`-BullishSharkFin  `BearishSharkFin`-BearishSharkFin `DoubleNoTouch`-DoubleNoTouch `RangeAccrual`-RangeAccrual `SnowBall`-SnowBall (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # Structured Product List\n    api_response = api_instance.list_structured_products(status, type=type, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->list_structured_products: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Client for Listing Delivery Orders in Python\nDESCRIPTION: Shows the initial setup required to list delivery futures orders using the Gate.io Python SDK. This snippet focuses on configuring the API client with the host URL and API credentials (key and secret) using `gate_api.Configuration` and `gate_api.ApiClient`. It prepares for calling methods like `list_delivery_orders` on a `DeliveryApi` instance (though the call itself is not shown here). It imports necessary modules like `gate_api`, `ApiException`, and `GateApiException` for potential error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Repaying a Collateral Loan using Gate.io Python SDK\nDESCRIPTION: This snippet demonstrates how to repay a collateral loan using the Gate.io Python SDK. It creates an instance of the CollateralLoanApi class, initializes a RepayLoan object, and handles possible exceptions from the API.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.CollateralLoanApi(api_client)\nrepay_loan = gate_api.RepayLoan() # RepayLoan | \n\ntry:\n    # Repayment\n    api_response = api_instance.repay_collateral_loan(repay_loan)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->repay_collateral_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Documenting Repayment Record Model Properties Using Markdown Table - Markdown\nDESCRIPTION: This snippet provides a markdown-formatted table listing all the properties of the RepayRecord model, including property names, types, and detailed descriptions. Intended for documentation purposes, it outlines optional attributes related to a user's repayment record, such as order and record IDs, amounts, currencies, loan-to-value ratios, timestamps, total interest, principal, and collateral values. The documentation imposes no direct implementation constraints, but serves as a guide for usage and integration in Python-based GateIO API clients.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RepayRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\\n------------ | ------------- | ------------- | -------------\\n**order_id** | **int** | Order ID | [optional] \\n**record_id** | **int** | Repayment record ID | [optional] \\n**repaid_amount** | **str** | Repayment amount | [optional] \\n**borrow_currency** | **str** | Borrowed currency | [optional] \\n**collateral_currency** | **str** | Collateral | [optional] \\n**init_ltv** | **str** | The initial collateralization rate | [optional] \\n**borrow_time** | **int** | Borrowing time, timestamp | [optional] \\n**repay_time** | **int** | Repayment time, timestamp | [optional] \\n**total_interest** | **str** | Total interest | [optional] \\n**before_left_principal** | **str** | Principal to be repaid before repayment | [optional] \\n**after_left_principal** | **str** | Principal to be repaid after repayment | [optional] \\n**before_left_collateral** | **str** | Collateral quantity before repayment | [optional] \\n**after_left_collateral** | **str** | Collateral quantity after repayment | [optional] \n```\n\n----------------------------------------\n\nTITLE: Listing Flash Swap Currency Pairs in Python\nDESCRIPTION: Example of retrieving supported currency pairs for flash swaps using the Gate.io API. Allows filtering by currency and includes pagination support. Returns details about which currencies can be swapped instantly.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.FlashSwapApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 1000 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 1000 (optional) (default to 1000)\n\ntry:\n    # List All Supported Currency Pairs In Flash Swap\n    api_response = api_instance.list_flash_swap_currency_pair(currency=currency, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FlashSwapApi->list_flash_swap_currency_pair: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Order Book with Gate.io API in Python\nDESCRIPTION: This code initializes the Gate.io API client and retrieves the order book for a specified options contract. Parameters include the contract name, order depth interval, limit, and an option to return the order book update ID.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20210916-5000-C' # str | Options contract name\ninterval = '0' # str | Order depth. 0 means no aggregation is applied. default to 0 (optional) (default to '0')\nlimit = 10 # int | Maximum number of order depth data in asks or bids (optional) (default to 10)\nwith_id = False # bool | Whether the order book update ID will be returned. This ID increases by 1 on every order book update (optional) (default to False)\n\ntry:\n    # Options order book\n    api_response = api_instance.list_options_order_book(contract, interval=interval, limit=limit, with_id=with_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_order_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Margin Account Balance History with Python Gate.io API\nDESCRIPTION: Example demonstrating how to fetch margin account balance change history using Gate.io's API with Python. Shows parameter usage for filtering results by currency, date range and pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'currency_example'\ncurrency_pair = 'currency_pair_example'\ntype = 'lend'\n_from = 1627706330\nto = 1635329650\npage = 1\nlimit = 100\n\ntry:\n    # List margin account balance change history\n    api_response = api_instance.list_margin_account_book(currency=currency, currency_pair=currency_pair, type=type, _from=_from, to=to, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_margin_account_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Query Options MMP Settings in Python using Gate.io API\nDESCRIPTION: Example showing how to query Market Maker Protection (MMP) settings for options trading. Includes optional filtering by underlying asset.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.OptionsApi(api_client)\nunderlying = 'BTC_USDT'\n\ntry:\n    api_response = api_instance.get_options_mmp(underlying=underlying)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->get_options_mmp: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying GT Deduction Configuration in Python\nDESCRIPTION: Retrieves the current GT deduction configuration for the account with error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.get_debit_fee()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->get_debit_fee: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Partner Subordinate List using Gate.io RebateApi in Python\nDESCRIPTION: This code snippet shows how to retrieve the list of subordinates (sub-agents, direct and indirect customers) for a partner using Gate.io RebateApi's partner_sub_list method. It requires the gate_api Python library, APIv4 credentials, and an instantiated api_client. The only required parameter is the optional user_id, with pagination available through limit and offset. The result is a PartnerSubList object. Error handling for GateApiException and ApiException is included.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Partner subordinate list\n    api_response = api_instance.partner_sub_list(user_id=user_id, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->partner_sub_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Details with Gate.io API using Python\nDESCRIPTION: This code demonstrates retrieving details for a specific Gate.io sub-account using the `get_sub_account` method of the `SubAccountApi`. It requires API key authentication and the `user_id` (integer) of the target sub-account as input. The method returns a `SubAccount` object containing the details or raises `ApiException` or `GateApiException` if the sub-account is not found or an error occurs.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\n\ntry:\n    # Get the sub-account\n    api_response = api_instance.get_sub_account(user_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->get_sub_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Enabling or Disabling Dual Mode in Python\nDESCRIPTION: Demonstrates how to enable or disable dual mode for futures trading. It requires the settle currency and the dual mode setting as parameters. Note that all positions must be closed and no orders should be open before changing this setting.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_22\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ndual_mode = True # bool | Whether to enable dual mode\n\ntry:\n    # Enable or disable dual mode\n    api_response = api_instance.set_dual_mode(settle, dual_mode)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->set_dual_mode: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Futures Trading History - Python\nDESCRIPTION: Retrieves historical futures trades with support for pagination and time range filtering. Parameters include limit, offset, time range and last trade ID for pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\nlimit = 100 # int | Maximum number of records\noffset = 0 # int | List offset\nlast_id = '12345' # str | Starting point for list\n_from = 1546905600 # int | Starting time in Unix seconds\nto = 1546935600 # int | End time in Unix seconds\n\ntry:\n    # Futures trading history\n    api_response = api_instance.list_futures_trades(settle, contract, limit=limit, offset=offset, last_id=last_id, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying User-Subordinate Relationships with Gate.io API in Python\nDESCRIPTION: This example shows how to query whether specified users are in the Gate.io system using the user-subordinate relationship endpoint. It creates an authenticated API client, passes a comma-separated list of user IDs, and handles potential API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\nuser_id_list = '1, 2, 3' # str | Query the user's ID list, split by,, if there are more than 100, take 100\n\ntry:\n    # User-subordinate relationship\n    api_response = api_instance.user_sub_relation(user_id_list)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->user_sub_relation: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unified Loan Interest Records with Python Gate.io API Client\nDESCRIPTION: Example code that demonstrates how to retrieve unified loan interest records using the Gate.io API. It shows parameter setup for filtering by currency, pagination, time range, and loan type.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\n_from = 1627706330 # int | Start timestamp of the query (optional)\nto = 1635329650 # int | Time range ending, default to current time (optional)\ntype = 'platform' # str | Loan type, platform loan - platform, leverage loan - margin, if not passed, defaults to margin (optional)\n\ntry:\n    # List interest records\n    api_response = api_instance.list_unified_loan_interest_records(currency=currency, page=page, limit=limit, _from=_from, to=to, type=type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_unified_loan_interest_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Cross Margin Interest Records from Gate.io\nDESCRIPTION: Retrieves historical interest records for cross margin accounts with optional filtering by currency and date range. Supports pagination and allows limiting the number of returned records.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncurrency = 'BTC' # str | Retrieve data of the specified currency\npage = 1 # int | Page number\nlimit = 100 # int | Maximum response items\n_from = 1547706332 # int | Start timestamp\nto = 1547706332 # int | End timestamp\n\ntry:\n    api_response = api_instance.get_cross_margin_interest_records(currency=currency, page=page, limit=limit, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_cross_margin_interest_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Dual Investment Plans with Gate.io API in Python\nDESCRIPTION: This code retrieves the list of Dual Investment products available on Gate.io. No authentication is required, and it sends a GET request to the /earn/dual/investment_plan endpoint with an optional plan_id parameter.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\nplan_id = 1 # int | Financial project id (optional)\n\ntry:\n    # Dual Investment product list\n    api_response = api_instance.list_dual_investment_plans(plan_id=plan_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->list_dual_investment_plans: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Python Futures Contract Model Properties\nDESCRIPTION: Comprehensive property definitions for a futures contract object. Includes fields for contract identification, leverage settings, pricing details, fee structures, risk parameters, trading limits, and operational flags.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/Contract.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Contract:\n    name: str                  # Futures contract\n    type: str                  # Futures contract type\n    quanto_multiplier: str     # Multiplier used in converting from invoicing to settlement currency\n    leverage_min: str          # Minimum leverage\n    leverage_max: str          # Maximum leverage\n    maintenance_rate: str      # Maintenance rate of margin\n    mark_type: str            # Mark price type (internal/index)\n    mark_price: str           # Current mark price\n    index_price: str          # Current index price\n    last_price: str           # Last trading price\n    maker_fee_rate: str       # Maker fee rate\n    taker_fee_rate: str       # Taker fee rate\n    order_price_round: str    # Minimum order price increment\n    mark_price_round: str     # Minimum mark price increment\n    funding_rate: str         # Current funding rate\n    funding_interval: int     # Funding application interval in seconds\n    funding_next_apply: float # Next funding time\n    risk_limit_base: str      # Risk limit base (deprecated)\n    risk_limit_step: str      # Step of adjusting risk limit (deprecated)\n    risk_limit_max: str       # Maximum risk limit (deprecated)\n    order_size_min: int       # Minimum order size\n    order_size_max: int       # Maximum order size\n    order_price_deviate: str  # Maximum price deviation allowed\n    ref_discount_rate: str    # Referral fee rate discount\n    ref_rebate_rate: str      # Referrer commission rate\n    orderbook_id: int         # Current orderbook ID\n    trade_id: int             # Current trade ID\n    trade_size: int           # Historical accumulated trade size\n    position_size: int        # Current total long position size\n    config_change_time: float # Last configuration change time\n    in_delisting: bool        # Contract delisting status\n    orders_limit: int         # Maximum number of open orders\n    enable_bonus: bool        # Bonus enablement status\n    enable_credit: bool       # Portfolio margin account status\n    create_time: float        # Contract creation time\n    funding_cap_ratio: str    # Funding rate cap ratio factor\n```\n\n----------------------------------------\n\nTITLE: Canceling All Price-Triggered Orders with Gate.io Delivery API in Python\nDESCRIPTION: This code shows how to cancel all price-triggered orders for a specific contract. It configures the API client with authentication details, specifies the settlement currency and contract parameters, and handles potential exceptions when making the cancellation request.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract\n\ntry:\n    # Cancel All Price-triggered Orders\n    api_response = api_instance.cancel_price_triggered_delivery_order_list(settle, contract)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->cancel_price_triggered_delivery_order_list: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Sub-Account in Gate.io API with Python\nDESCRIPTION: Example of unlocking a sub-account using the SubAccountApi. This operation requires the user ID of the sub-account as a parameter and returns no response body on success (HTTP 204).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | The user id of the sub-account\n\ntry:\n    # Unlock the sub-account\n    api_instance.unlock_sub_account(user_id)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->unlock_sub_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Saved Addresses with Gate.io API in Python\nDESCRIPTION: This code snippet shows the initialization part of the API call to retrieve saved withdrawal addresses for a specific cryptocurrency. This endpoint requires authentication through the Gate.io API and accepts parameters for currency, chain, pagination, and limit filters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n```\n\n----------------------------------------\n\nTITLE: Querying Collateral Adjustment Records with Gate.io Python SDK\nDESCRIPTION: This snippet demonstrates how to query collateral adjustment records using the Gate.io Python SDK. It supports pagination, time filtering, and filtering by borrowed currency and collateral currency.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.CollateralLoanApi(api_client)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n_from = 1609459200 # int | Start timestamp of the query (optional)\nto = 1609459200 # int | Time range ending, default to current time (optional)\nborrow_currency = 'USDT' # str | Borrowed currency (optional)\ncollateral_currency = 'BTC' # str | Collateral (optional)\n\ntry:\n    # Query collateral adjustment records\n    api_response = api_instance.list_collateral_records(page=page, limit=limit, _from=_from, to=to, borrow_currency=borrow_currency, collateral_currency=collateral_currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->list_collateral_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Sub-Account Cross-Margin Balances with Gate.io API in Python\nDESCRIPTION: This code snippet demonstrates how to retrieve cross-margin account information for sub-accounts using the Gate.io API's WalletApi. It takes an optional sub_uid parameter to filter results by specific sub-account IDs, and handles both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.WalletApi(api_client)\nsub_uid = '10003' # str | User ID of sub-account, you can query multiple records separated by `,`. If not specified, it will return the records of all sub accounts (optional)\n\ntry:\n    # Query subaccount's cross_margin account info\n    api_response = api_instance.list_sub_account_cross_margin_balances(sub_uid=sub_uid)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_sub_account_cross_margin_balances: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Unified Margin Lending Markets in Python\nDESCRIPTION: Example of how to list all unified margin lending markets using the Gate.io API client for Python. It creates an API client instance and calls the list_uni_currency_pairs method.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\n\ntry:\n    # List lending markets\n    api_response = api_instance.list_uni_currency_pairs()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->list_uni_currency_pairs: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Lending Currencies with Python Gate.io API\nDESCRIPTION: Example code demonstrating how to list available currencies for lending using the Gate.io API. Shows initialization of the API client and error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnUniApi(api_client)\n\ntry:\n    # List currencies for lending\n    api_response = api_instance.list_uni_currencies()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->list_uni_currencies: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting Margin Transferable Amount with Gate.io API\nDESCRIPTION: Example of retrieving the maximum transferable amount for a margin currency using Gate.io's API. Includes optional currency pair parameter for specific trading pairs.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency\ncurrency_pair = 'BTC_USDT' # str | Currency pair (optional)\n\ntry:\n    # Get the max transferable amount for a specific margin currency\n    api_response = api_instance.get_margin_transferable(currency, currency_pair=currency_pair)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_margin_transferable: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MultiLoanRepayItem Model Properties in Python\nDESCRIPTION: Documents the properties of the MultiLoanRepayItem class used for loan repayment operations. Contains currency (str), amount (str), and repaid_all (bool) properties, all marked as optional.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiLoanRepayItem.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MultiLoanRepayItem:\n    currency: str  # Repayment currency\n    amount: str    # Size\n    repaid_all: bool  # Repayment method, set to true for full repayment, false for partial repayment\n```\n\n----------------------------------------\n\nTITLE: Repaying a Collateral Loan in Python\nDESCRIPTION: This snippet shows how to repay a collateral loan using the gate_api library. It includes setup for API authentication and handling of exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.CollateralLoanApi(api_client)\nrepay_loan = gate_api.RepayLoan()\n\ntry:\n    api_response = api_instance.repay_collateral_loan(repay_loan)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->repay_collateral_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Insurance Balance History using Gate.io API (Python)\nDESCRIPTION: Demonstrates how to instantiate the Gate.io FuturesApi client and call list_futures_insurance_ledger to obtain an account's insurance balance history for a specified settlement currency and record limit. Relies on the gate_api Python SDK and proper exception handling for API and HTTP errors. Inputs include the settle currency and an optional maximum record limit. Outputs a list of InsuranceRecord objects; no authentication required; HTTP response is expected in JSON format.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n\ntry:\n    # Futures insurance balance history\n    api_response = api_instance.list_futures_insurance_ledger(settle, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_futures_insurance_ledger: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Querying Premium Index K-Line using gateio Python SDK\nDESCRIPTION: Demonstrates how to fetch Premium Index K-Line (candlestick) data for a specified futures contract using the gateio Python SDK. Dependencies include the 'gate_api' package and its exceptions, and a properly configured API client. Key parameters are 'settle' (settlement currency), 'contract' (futures symbol), '_from' and 'to' (Unix timestamps for the range), 'limit' (data points, up to 1000), and 'interval' (candlestick interval). Input is user-set parameters; output is a list of FuturesPremiumIndex data. Either 'from/to' or 'limit' may be used, not both. No authentication is required for this endpoint.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \\\"https://api.gateio.ws/api/v4\\\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.FuturesApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\ncontract = 'BTC_USDT' # str | Futures contract\\n_from = 1546905600 # int | Start time of candlesticks, formatted in Unix timestamp in seconds. Default to`to - 100 * interval` if not specified (optional)\\nto = 1546935600 # int | End time of candlesticks, formatted in Unix timestamp in seconds. Default to current time (optional)\\nlimit = 100 # int | Maximum recent data points to return. `limit` is conflicted with `from` and `to`. If either `from` or `to` is specified, request will be rejected. (optional) (default to 100)\\ninterval = '5m' # str | Interval time between data points (optional) (default to '5m')\\n\\ntry:\\n    # Premium Index K-Line\\n    api_response = api_instance.list_futures_premium_index(settle, contract, _from=_from, to=to, limit=limit, interval=interval)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\\\"Gate api exception, label: %s, message: %s\\\\n\\\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\\\"Exception when calling FuturesApi->list_futures_premium_index: %s\\\\n\\\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Listing Auto-Deleveraging History for Futures\nDESCRIPTION: Retrieves auto-deleveraging history for futures contracts. Similar to liquidation history, this endpoint requires settle currency and accepts optional parameters for filtering by contract, limit, and timestamp.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_46\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT' # str | Futures contract, return related data only if specified (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\nat = 0 # int | Specify an auto-deleveraging timestamp (optional) (default to 0)\n\ntry:\n    # List Auto-Deleveraging History\n    api_response = api_instance.list_auto_deleverages(settle, contract=contract, limit=limit, at=at)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_auto_deleverages: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Deleting Sub-Account API Key with Gate.io Python SDK\nDESCRIPTION: This example shows how to delete an API key for a Gate.io sub-account using the SubAccountApi.delete_sub_account_keys function in Python. It leverages the 'gate_api' package and mandates APIv4 authentication. The required parameters are 'user_id' (sub-account's id) and 'key' (API key to be deleted). Success leads to an empty response; exceptions related to GateApiException or ApiException are handled.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\nuser_id = 56 # int | Sub-account user id\nkey = 'key_example' # str | The API Key of the sub-account\n\ntry:\n    # Delete API key of the sub-account\n    api_instance.delete_sub_account_keys(user_id, key)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->delete_sub_account_keys: %s\\n\" % e)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Futures Trading History with Python\nDESCRIPTION: This snippet demonstrates how to retrieve the futures trading history for a specific contract using the Gate.io API. It includes parameters for settle currency, contract, limit, time range, and pagination.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\ncontract = 'BTC_USDT_20200814' # str | Futures contract\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\nlast_id = '12345' # str | Specify the starting point for this list based on a previously retrieved id  This parameter is deprecated. Use `from` and `to` instead to limit time range (optional)\n_from = 1546905600 # int | Specify starting time in Unix seconds. If not specified, `to` and `limit` will be used to limit response items. If items between `from` and `to` are more than `limit`, only `limit` number will be returned.  (optional)\nto = 1546935600 # int | Specify end time in Unix seconds, default to current time (optional)\n\ntry:\n    # Futures trading history\n    api_response = api_instance.list_delivery_trades(settle, contract, limit=limit, last_id=last_id, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->list_delivery_trades: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Querying Historical Lending Rates with Gate.io API in Python\nDESCRIPTION: This snippet shows how to configure API authentication, create an API client, and make a call to retrieve historical lending rates. It includes error handling for both Gate.io specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'USDT' # str | Currency\ntier = '1' # str | The VIP level of the floating rate that needs to be queried (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\n\ntry:\n    # get historical lending rates\n    api_response = api_instance.get_history_loan_rate(currency, tier=tier, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_history_loan_rate: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Getting User Leverage Currency Settings in Gate.io API\nDESCRIPTION: Retrieves the user's currency leverage settings with optional filtering by specific currency. This code configures API authentication, creates a UnifiedApi instance, and demonstrates proper error handling for Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ncurrency = 'BTC' # str | Currency (optional)\n\ntry:\n    # Get the leverage multiple of the user currency\n    api_response = api_instance.get_user_leverage_currency_setting(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_user_leverage_currency_setting: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing STP Group Users Using Gate.io API in Python\nDESCRIPTION: Example code showing how to list users of an STP group using the Gate.io API with Python. This operation is only allowed for the main account that created the STP group.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication in Python\nDESCRIPTION: Sets up API authentication configuration using API key and secret for Gate.io API v4. Required before making any authenticated API calls.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n```\n\n----------------------------------------\n\nTITLE: Placing a Structured Product Order using Gate.io Earn API in Python\nDESCRIPTION: This code demonstrates configuring the Gate.io API client with APIv4 authentication and using the `EarnApi` to place an order for a structured product. It initializes a `StructuredBuy` object (details omitted in the example) and invokes the `place_structured_order` method, incorporating exception handling for `GateApiException` and `ApiException`. Requires the `gate_api` Python library and APIv4 credentials.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\nstructured_buy = gate_api.StructuredBuy() # StructuredBuy | \n\ntry:\n    # Place Structured Product Order\n    api_instance.place_structured_order(structured_buy)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->place_structured_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Trading History with Gate.io API in Python\nDESCRIPTION: This example shows how to use the Gate.io API to fetch a user's trading history as a broker. It configures API authentication, sets optional parameters for filtering results by user ID and time range, and handles potential exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1711929600 # int | The start time of the query record. If not specified, the default is to push forward 30 days from the current time. (optional)\nto = 1714521600 # int | Time range ending, default to current time (optional)\n\ntry:\n    # The broker obtains the user's trading history\n    api_response = api_instance.rebate_broker_transaction_history(limit=limit, offset=offset, user_id=user_id, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->rebate_broker_transaction_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Funding Accounts with Python Gate.io API\nDESCRIPTION: Example of retrieving funding account information using Gate.io's API. Configures API authentication and makes a request to list funding accounts with optional currency filtering.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\n\ntry:\n    # Funding account list\n    api_response = api_instance.list_funding_accounts(currency=currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_funding_accounts: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Flash Swap Order Model Properties Definition\nDESCRIPTION: Markdown documentation defining the properties of a flash swap order model. Includes fields for order identification, timing, currency pairs, amounts, pricing and status tracking. All fields are marked as optional and read-only.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FlashSwapOrder\n\nFlash swap order\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Flash swap order ID | [optional] [readonly] \n**create_time** | **int** | Creation time of order (in milliseconds) | [optional] [readonly] \n**user_id** | **int** | User ID | [optional] [readonly] \n**sell_currency** | **str** | Currency to sell | [optional] [readonly] \n**sell_amount** | **str** | Amount to sell | [optional] [readonly] \n**buy_currency** | **str** | Currency to buy | [optional] [readonly] \n**buy_amount** | **str** | Amount to buy | [optional] [readonly] \n**price** | **str** | Price | [optional] [readonly] \n**status** | **int** | Flash swap order status  `1` - success `2` - failure | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Collateral Loan Order Details in Python\nDESCRIPTION: This snippet demonstrates how to retrieve details of a specific collateral loan order using the gate_api library. It includes API authentication setup and exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.CollateralLoanApi(api_client)\norder_id = 100001\n\ntry:\n    api_response = api_instance.get_collateral_loan_order_detail(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->get_collateral_loan_order_detail: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining CrossMarginLoan Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the CrossMarginLoan model, including their types, descriptions, and additional notes. It covers fields such as loan ID, timestamps, currency, amounts, status, and repayment information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginLoan.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CrossMarginLoan\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Loan record ID | [optional] [readonly] \n**create_time** | **int** | Creation timestamp, in milliseconds | [optional] [readonly] \n**update_time** | **int** | Update timestamp, in milliseconds | [optional] [readonly] \n**currency** | **str** | Currency name | \n**amount** | **str** | Borrowed amount | \n**text** | **str** | User defined custom ID | [optional] \n**status** | **int** | Deprecated. Currently, all statuses have been set to 2.  Borrow loan status, which includes:  - 1: failed to borrow - 2: borrowed but not repaid - 3: repayment complete | [optional] [readonly] \n**repaid** | **str** | Repaid amount | [optional] [readonly] \n**repaid_interest** | **str** | Repaid interest | [optional] [readonly] \n**unpaid_interest** | **str** | Outstanding interest yet to be paid | [optional] [readonly] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Interest Records with Gate.io API in Python\nDESCRIPTION: Code for fetching interest records with support for filtering by currency pair and date range. Includes pagination and response limit configuration.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\n\ntry:\n    api_response = api_instance.list_uni_loan_interest_records(currency_pair=currency_pair, currency=currency, page=page, limit=limit, _from=_from, to=to)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->list_uni_loan_interest_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Fetching Options Candlestick Data with Gate.io API in Python\nDESCRIPTION: This code retrieves candlestick (OHLC) data for a specific options contract. Parameters include the contract name, limit on number of records, time range, and interval between data points. The default interval is 5 minutes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.OptionsApi(api_client)\ncontract = 'BTC_USDT-20210916-5000-C' # str | Options contract name\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\n_from = 1547706332 # int | Start timestamp (optional)\nto = 1547706332 # int | End timestamp (optional)\ninterval = '5m' # str | Interval time between data points (optional) (default to '5m')\n\ntry:\n    # Get options candlesticks\n    api_response = api_instance.list_options_candlesticks(contract, limit=limit, _from=_from, to=to, interval=interval)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_candlesticks: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Options Position Model Property Definitions\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the OptionsPosition model. Includes fields for position details, pricing information, PnL tracking, and options Greeks (delta, gamma, vega, theta).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsPosition.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nuser | int | User ID | [optional] [readonly] \nunderlying | str | Underlying | [optional] [readonly] \nunderlying_price | str | Underlying price (quote currency) | [optional] [readonly] \ncontract | str | Options contract name | [optional] [readonly] \nsize | int | Position size (contract size) | [optional] [readonly] \nentry_price | str | Entry size (quote currency) | [optional] [readonly] \nmark_price | str | Current mark price (quote currency) | [optional] [readonly] \nmark_iv | str | Implied volatility | [optional] [readonly] \nrealised_pnl | str | Realized PNL | [optional] [readonly] \nunrealised_pnl | str | Unrealized PNL | [optional] [readonly] \npending_orders | int | Current open orders | [optional] [readonly] \nclose_order | OptionsPositionCloseOrder |  | [optional] \ndelta | str | Delta | [optional] [readonly] \ngamma | str | Gamma | [optional] [readonly] \nvega | str | Vega | [optional] [readonly] \ntheta | str | Theta | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: Creating Cross Liquidate Order with Gate.io Python API\nDESCRIPTION: Creates a cross liquidate order when cross-currency functionality is disabled. The code initializes a SpotApi instance, prepares the liquidate order, and handles potential exceptions by printing appropriate error messages.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SpotApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.SpotApi(api_client)\nliquidate_order = gate_api.LiquidateOrder() # LiquidateOrder | \n\ntry:\n    # close position when cross-currency is disabled\n    api_response = api_instance.create_cross_liquidate_order(liquidate_order)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SpotApi->create_cross_liquidate_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Python DeliveryContract Class Properties Definition\nDESCRIPTION: Property definitions for the DeliveryContract class that represents futures contract details. Includes fields for contract specifications, pricing details, trading parameters, risk management settings, and operational metrics.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryContract.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass DeliveryContract:\n    name: str               # Futures contract\n    underlying: str         # Underlying\n    cycle: str             # Cycle type, e.g. WEEKLY, QUARTERLY\n    type: str              # Futures contract type\n    quanto_multiplier: str  # Multiplier used in converting from invoicing to settlement currency\n    leverage_min: str      # Minimum leverage\n    leverage_max: str      # Maximum leverage\n    maintenance_rate: str  # Maintenance rate of margin\n    mark_type: str        # Mark price type, internal/index based\n    mark_price: str       # Current mark price\n    index_price: str      # Current index price\n    last_price: str       # Last trading price\n    maker_fee_rate: str   # Maker fee rate\n    taker_fee_rate: str   # Taker fee rate\n    order_price_round: str # Minimum order price increment\n    mark_price_round: str # Minimum mark price increment\n    basis_rate: str       # Fair basis rate\n    basis_value: str      # Fair basis value\n    basis_impact_value: str # Funding for impact bid/ask price\n    settle_price: str     # Settle price\n    settle_price_interval: int # Settle price update interval\n    settle_price_duration: int # Settle price update duration\n    expire_time: int      # Contract expiry timestamp\n    risk_limit_base: str  # Risk limit base\n    risk_limit_step: str  # Step of adjusting risk limit\n    risk_limit_max: str   # Maximum risk limit allowed\n    order_size_min: int   # Minimum order size allowed\n    order_size_max: int   # Maximum order size allowed\n    order_price_deviate: str # Max price deviation allowed\n    ref_discount_rate: str # Referral fee rate discount\n    ref_rebate_rate: str  # Referrer commission rate\n    orderbook_id: int     # Current orderbook ID\n    trade_id: int         # Current trade ID\n    trade_size: int       # Historical accumulated trade size\n    position_size: int    # Current total long position size\n    config_change_time: float # Last config change time\n    in_delisting: bool    # Contract is delisting\n    orders_limit: int     # Maximum number of open orders\n```\n\n----------------------------------------\n\nTITLE: Gate.io API Endpoint Definitions - Options Trading Operations\nDESCRIPTION: API endpoint definitions for options trading including listing underlyings, contracts, settlements, order management, and position tracking\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: plaintext\nCODE:\n```\n*OptionsApi* | **GET** /options/underlyings | List all underlyings\n*OptionsApi* | **GET** /options/contracts | List all the contracts\n```\n\n----------------------------------------\n\nTITLE: Canceling a Delivery Order - Gate.io API Python\nDESCRIPTION: Demonstrates how to cancel a single delivery futures order by its ID. This example initializes the DeliveryApi instance, defines the settle currency and order ID parameters, then makes the API call with error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.DeliveryApi(api_client)\nsettle = 'usdt' # str | Settle currency\norder_id = '12345' # str | Retrieve the data of the order with the specified ID\n\ntry:\n    # Cancel a single order\n    api_response = api_instance.cancel_delivery_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling DeliveryApi->cancel_delivery_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Cross Margin Loan History using Gate.io Python SDK\nDESCRIPTION: This Python code demonstrates fetching the deprecated cross margin loan history using the `gate_api` library and requires API key authentication. It calls the `list_cross_margin_loans` method, providing the required `status` parameter (deprecated filtering by status 2 or 3) and optional filters like currency, pagination (`limit`, `offset`), and sorting order (`reverse`). The example includes standard error handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.MarginApi(api_client)\nstatus = 56 # int | Filter by status. Supported values are 2 and 3. (deprecated.)\ncurrency = 'currency_example' # str | Filter by currency (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\nreverse = True # bool | Whether to sort in descending order, which is the default. Set `reverse=false` to return ascending results (optional) (default to True)\n\ntry:\n    # List cross margin borrow history. (deprecated)\n    api_response = api_instance.list_cross_margin_loans(status, currency=currency, limit=limit, offset=offset, reverse=reverse)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_cross_margin_loans: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: FuturesOrderAmendment Properties Table\nDESCRIPTION: Markdown table defining the properties, types, and descriptions for the FuturesOrderAmendment model. Contains fields for size, price, amend_text, biz_info, and bbo with their respective descriptions and optional status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesOrderAmendment.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nsize | int | New order size, including filled part.  - If new size is less than or equal to filled size, the order will be cancelled. - Order side must be identical to the original one. - Close order size cannot be changed. - For reduce only orders, increasing size may leads to other reduce only orders being cancelled. - If price is not changed, decreasing size will not change its precedence in order book, while increasing will move it to the last at current price. | [optional] \nprice | str | New order price. | [optional] \namend_text | str | Custom info during amending order | [optional] \nbiz_info | str | Users can annotate this modification with information. | [optional] \nbbo | str | Users are able to modify the offer price manually. | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Auto Repayment Settings with Gate.io API\nDESCRIPTION: Demonstrates how to get a user's auto repayment settings from Gate.io's margin API. Sets up API authentication and makes a request to retrieve the current auto repayment configuration.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginApi(api_client)\n\ntry:\n    # Retrieve user auto repayment setting\n    api_response = api_instance.get_auto_repay_status()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_auto_repay_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: FuturesLimitRiskTiers Model Properties Definition\nDESCRIPTION: Defines the properties of the FuturesLimitRiskTiers model including tier level, risk limits, margin rates, leverage limits and contract information. Used for retrieving and representing risk limit configurations for different tiers under specified futures contracts.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesLimitRiskTiers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntier | int | Tier | [optional] \nrisk_limit | str | Position risk limit | [optional] \ninitial_rate | str | Initial margin rate | [optional] \nmaintenance_rate | str | Maintenance margin rate | [optional] \nleverage_max | str | Maximum leverage | [optional] \ncontract | str | Markets, visible only during market pagination requests | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unified Risk Units with Python Gate.io API Client\nDESCRIPTION: Example code that demonstrates how to retrieve unified risk unit details using the Gate.io API. This functionality is only available for accounts in portfolio margin mode.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\n\ntry:\n    # Get user risk unit details\n    api_response = api_instance.get_unified_risk_units()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->get_unified_risk_units: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price-Triggered Order Details\nDESCRIPTION: Retrieves details of a specific price-triggered order using its order ID. Includes error handling for failed requests.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_56\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.get_price_triggered_order(settle, order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->get_price_triggered_order: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Model Properties Definition - AccountBalance Class\nDESCRIPTION: Defines the properties of the AccountBalance model including amount, currency, unrealized PnL for futures/options, and borrowed amounts for margin accounts. Each property is documented with its type and optional status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountBalance.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**amount** | **str** | Account total balance amount | [optional] \n**currency** | **str** | Currency | [optional] \n**unrealised_pnl** | **str** | Unrealised_pnl, this field will only appear in futures, options, delivery, and total accounts | [optional] \n**borrowed** | **str** | Borrowed，this field will only appear in margin and cross_margin accounts | [optional]\n```\n\n----------------------------------------\n\nTITLE: FuturesTicker Properties Documentation\nDESCRIPTION: Property definitions for the FuturesTicker class specifying fields for futures contract market data. Includes trading prices, volumes, funding rates, basis rates, order book data and other key market indicators.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesTicker.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**contract** | **str** | Futures contract | [optional] \n**last** | **str** | Last trading price | [optional] \n**change_percentage** | **str** | Change percentage. | [optional] \n**total_size** | **str** | Contract total size | [optional] \n**low_24h** | **str** | Lowest trading price in recent 24h | [optional] \n**high_24h** | **str** | Highest trading price in recent 24h | [optional] \n**volume_24h** | **str** | Trade size in recent 24h | [optional] \n**volume_24h_btc** | **str** | Trade volumes in recent 24h in BTC(deprecated, use `volume_24h_base`, `volume_24h_quote`, `volume_24h_settle` instead) | [optional] \n**volume_24h_usd** | **str** | Trade volumes in recent 24h in USD(deprecated, use `volume_24h_base`, `volume_24h_quote`, `volume_24h_settle` instead) | [optional] \n**volume_24h_base** | **str** | Trade volume in recent 24h, in base currency | [optional] \n**volume_24h_quote** | **str** | Trade volume in recent 24h, in quote currency | [optional] \n**volume_24h_settle** | **str** | Trade volume in recent 24h, in settle currency | [optional] \n**mark_price** | **str** | Recent mark price | [optional] \n**funding_rate** | **str** | Funding rate | [optional] \n**funding_rate_indicative** | **str** | Indicative Funding rate in next period. (deprecated. use `funding_rate`) | [optional] \n**index_price** | **str** | Index price | [optional] \n**quanto_base_rate** | **str** | Exchange rate of base currency and settlement currency in Quanto contract. Does not exists in contracts of other types | [optional] \n**basis_rate** | **str** | Basis rate | [optional] \n**basis_value** | **str** | Basis value | [optional] \n**lowest_ask** | **str** | Recent lowest ask | [optional] \n**lowest_size** | **str** | The latest seller's lowest price order quantity | [optional] \n**highest_bid** | **str** | Recent highest bid | [optional] \n**highest_size** | **str** | The latest buyer's highest price order volume | [optional]\n```\n\n----------------------------------------\n\nTITLE: Initializing Gate.io API Client with Authentication in Python\nDESCRIPTION: Sets up API key authentication for Gate.io APIv4 and creates an API client. This configuration is required for all authenticated API requests, specifying the API endpoint, key, and secret.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Setting up Gate API Client for Options Contract Query in Python\nDESCRIPTION: This snippet shows the initial setup required to query details for a specific options contract using the `gate_api` Python library. It demonstrates configuring the API host, initializing the `ApiClient`, and creating an instance of the `OptionsApi`. Although the code doesn't show the actual method call, the surrounding context indicates this setup is for calling `get_options_contract(contract)`, which takes a contract identifier string and returns an `OptionsContract` object.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralAlign Properties in Gate.io Python API\nDESCRIPTION: Model class properties definition for CollateralAlign, specifying fields for order ID, collateral currency, amount, and operation type. Used for managing collateral operations in trading.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralAlign.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norder_id | int | Order ID | \ncollateral_currency | str | Collateral | \ncollateral_amount | str | Collateral amount | \ntype | str | Operation types: append - for adding collateral, redeem - for withdrawing collateral |\n```\n\n----------------------------------------\n\nTITLE: Updating Position Risk Limit in Dual Mode using GateAPI Python\nDESCRIPTION: Creates a FuturesApi instance and calls the update_dual_mode_position_risk_limit method to update the risk limit for a position in dual mode. Requires settle currency, contract, and the new risk limit value.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_27\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multi-Collateral Loan Order Details with Python\nDESCRIPTION: Makes an API call to get details of a specific multi-collateral loan order. Requires API key authentication and the order ID.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralLoanApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MultiCollateralLoanApi(api_client)\norder_id = '12345'\n\ntry:\n    api_response = api_instance.get_multi_collateral_order_detail(order_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MultiCollateralLoanApi->get_multi_collateral_order_detail: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Describing CreateCollateralOrder Model Properties in Markdown\nDESCRIPTION: A table documenting the properties of the CreateCollateralOrder model used in the Gate.io API Python SDK. It describes four required properties: collateral_amount, collateral_currency, borrow_amount, and borrow_currency.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CreateCollateralOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CreateCollateralOrder\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**collateral_amount** | **str** | Collateral amount | \n**collateral_currency** | **str** | Collateral | \n**borrow_amount** | **str** | Borrowing amount | \n**borrow_currency** | **str** | Borrowed currency | \n```\n\n----------------------------------------\n\nTITLE: Defining BatchOrder Model Properties for Gate.io Python API\nDESCRIPTION: Property definitions for BatchOrder class model including order details, status flags, trading parameters, amounts, prices, fees and timestamps. Each property is defined with its type, description and optional constraints.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BatchOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\norder_id = str  # Order ID (optional)\namend_text = str  # Custom data from order amendment (optional)\ntext = str  # User defined information with t- prefix, max 28 bytes (optional)\nsucceeded = bool  # Whether batch orders succeeded (optional)\nlabel = str  # Error label if any (optional)\nmessage = str  # Detailed error message if any (optional)\nid = str  # Order ID (optional, readonly)\ncreate_time = str  # Creation time (optional, readonly)\nupdate_time = str  # Last modification time (optional, readonly)\ncreate_time_ms = int  # Creation time in milliseconds (optional, readonly)\nupdate_time_ms = int  # Last modification time in milliseconds (optional, readonly)\nstatus = str  # Order status: open/closed/cancelled (optional, readonly)\ncurrency_pair = str  # Currency pair (optional)\ntype = str  # Order type: limit/market (optional, default='limit')\naccount = str  # Account type: spot/margin/unified (optional, default='spot')\nside = str  # Order side (optional)\namount = str  # Trade amount (optional)\nprice = str  # Order price (optional)\ntime_in_force = str  # Time in force: gtc/ioc/poc/fok (optional, default='gtc')\niceberg = str  # Displayed amount for iceberg orders (optional)\nauto_borrow = bool  # Allow automatic margin loan (optional)\nauto_repay = bool  # Enable automatic loan repayment (optional)\nleft = str  # Amount left to fill (optional, readonly)\nfilled_amount = str  # Amount traded (optional, readonly)\nfill_price = str  # Total filled in quote currency (deprecated) (optional, readonly)\nfilled_total = str  # Total filled in quote currency (optional, readonly)\navg_deal_price = str  # Average fill price (optional, readonly)\nfee = str  # Fee deducted (optional, readonly)\nfee_currency = str  # Fee currency unit (optional, readonly)\npoint_fee = str  # Points used as fee (optional, readonly)\ngt_fee = str  # GT used as fee (optional, readonly)\ngt_discount = bool  # GT fee discount used (optional, readonly)\nrebated_fee = str  # Rebated fee (optional, readonly)\nrebated_fee_currency = str  # Rebated fee currency (optional, readonly)\nstp_id = int  # Self-trade prevention group ID (optional, readonly)\nstp_act = str  # Self-trade prevention action: cn/co/cb (optional)\nfinish_as = str  # Order finish status (optional, readonly)\n```\n\n----------------------------------------\n\nTITLE: Defining MarginTiers Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the MarginTiers model using a markdown table. It includes the property names, types, descriptions, and additional notes for each attribute of the margin tier structure.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginTiers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**tier** | **str** | Tier | [optional] \n**margin_rate** | **str** | Discount | [optional] \n**lower_limit** | **str** | Lower limit | [optional] \n**upper_limit** | **str** | Upper limit, \\\"\\\" indicates greater than (the last tier) | [optional] \n**leverage** | **str** | Position leverage | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining OptionsOrder Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the OptionsOrder class, including their types, descriptions, and optional attributes. It covers various aspects of an options order such as order ID, user information, timing, status, contract details, and order parameters.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OptionsOrder:\n    \"\"\"\n    Options order detail\n    \"\"\"\n    id = None  # int\n    user = None  # int\n    create_time = None  # float\n    finish_time = None  # float\n    finish_as = None  # str\n    status = None  # str\n    contract = None  # str\n    size = None  # int\n    iceberg = None  # int\n    price = None  # str\n    close = False  # bool\n    is_close = None  # bool\n    reduce_only = False  # bool\n    is_reduce_only = None  # bool\n    is_liq = None  # bool\n    mmp = False  # bool\n    is_mmp = None  # bool\n    tif = 'gtc'  # str\n    left = None  # int\n    fill_price = None  # str\n    text = None  # str\n    tkfr = None  # str\n    mkfr = None  # str\n    refu = None  # int\n    refr = None  # str\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Futures Insurance Ledger with gateapi-python (Python)\nDESCRIPTION: This code retrieves the futures insurance balance history using the Gate.io gateapi-python SDK. It initializes the DeliveryApi client without authentication, specifies the settle currency (e.g., 'usdt'), configures an optional record limit, and fetches the insurance ledger. No authentication is required. Expects inputs for the settlement currency and a limit for the number of results; returns a list of InsuranceRecord objects. Requires the gate_api package and appropriate installation of the SDK.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliveryApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.DeliveryApi(api_client)\\nsettle = 'usdt' # str | Settle currency\\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\\n\\ntry:\\n    # Futures insurance balance history\\n    api_response = api_instance.list_delivery_insurance_ledger(settle, limit=limit)\\n    print(api_response)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling DeliveryApi->list_delivery_insurance_ledger: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: Defining ContractStat Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the ContractStat model, including their types and descriptions. It covers various statistical metrics related to cryptocurrency contracts.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/ContractStat.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ContractStat\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**time** | **int** | Stat timestamp | [optional] \n**lsr_taker** | **float** | Long/short account number ratio | [optional] \n**lsr_account** | **float** | Long/short taker size ratio | [optional] \n**long_liq_size** | **int** | Long liquidation size | [optional] \n**long_liq_amount** | **float** | Long liquidation amount(base currency) | [optional] \n**long_liq_usd** | **float** | Long liquidation volume(quote currency) | [optional] \n**short_liq_size** | **int** | Short liquidation size | [optional] \n**short_liq_amount** | **float** | Short liquidation amount(base currency) | [optional] \n**short_liq_usd** | **float** | Short liquidation volume(quote currency) | [optional] \n**open_interest** | **int** | Open interest size | [optional] \n**open_interest_usd** | **float** | Open interest volume(quote currency) | [optional] \n**top_lsr_account** | **float** | Top trader long/short account ratio | [optional] \n**top_lsr_size** | **float** | Top trader long/short position ratio | [optional] \n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication in Python\nDESCRIPTION: Initialize Gate.io API client configuration with API key and secret for authentication. Sets up the base API endpoint URL and credentials needed for making authenticated requests.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Retrieving UID Transfer History using Gate.io API in Python\nDESCRIPTION: This snippet demonstrates how to fetch the UID transfer history using the Gate.io API. It supports various parameters for filtering and pagination of the results.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.list_push_orders(id=id, _from=_from, to=to, limit=limit, offset=offset, transaction_type=transaction_type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_push_orders: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining DepositAddress Model Properties in Markdown\nDESCRIPTION: Describes the properties of the DepositAddress model including currency, address, and multichain_addresses. It specifies the data types and provides brief descriptions for each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DepositAddress.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DepositAddress\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency** | **str** | Currency detail | \n**address** | **str** | Deposit address | \n**multichain_addresses** | [**list[MultiChainAddressItem]**](MultiChainAddressItem.md) |  | [optional] \n```\n\n----------------------------------------\n\nTITLE: CreateUniLend Model Properties for Gate.io Python API\nDESCRIPTION: Defines the properties required for lending or redeeming cryptocurrency. Required fields include currency name, amount, and operation type (lend/redeem). Optional field min_rate specifies minimum interest rate for lending operations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CreateUniLend.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CreateUniLend:\n    currency: str  # Currency name\n    amount: str    # The amount of currency could be lent\n    type: str      # type: lend - lend, redeem - redeem\n    min_rate: str  # The minimum interest rate (optional)\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralOrder Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CollateralOrder class, including their types and descriptions. It covers various aspects of a collateral order such as order ID, collateral details, borrowing information, repayment status, and LTV (Loan-to-Value) ratios.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CollateralOrder:\n    \"\"\"\n    Collateral Order\n    \"\"\"\n    order_id: int  # Order ID\n    collateral_currency: str  # Collateral\n    collateral_amount: str  # Collateral amount\n    borrow_currency: str  # Borrowed currency\n    borrow_amount: str  # Borrowing amount\n    repaid_amount: str  # Repaid amount\n    repaid_principal: str  # Repaid principal\n    repaid_interest: str  # Repaid interest\n    init_ltv: str  # The initial collateralization rate\n    current_ltv: str  # The current collateralization rate\n    liquidate_ltv: str  # The liquidation collateralization rate\n    status: str  # Order status: - initial: Initial state after placing the order - collateral_deducted: Collateral deduction successful - collateral_returning: Loan failed - Collateral return pending - lent: Loan successful - repaying: Repayment in progress - liquidating: Liquidation in progress - finished: Order completed - closed_liquidated: Liquidation and repayment completed\n    borrow_time: int  # Borrowing time, timestamp in seconds\n    left_repay_total: str  # Outstanding principal and interest (outstanding principal + outstanding interest)\n    left_repay_principal: str  # outstanding principal\n    left_repay_interest: str  # outstanding interest\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication in Python\nDESCRIPTION: Sets up the API client configuration with key and secret for authentication. This is the initial setup required for all authenticated API requests to Gate.io.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_44\n\nLANGUAGE: python\nCODE:\n```\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: Listing Deprecated Cross Margin Account History using Gate.io Python SDK\nDESCRIPTION: This Python example illustrates how to retrieve the change history for a deprecated cross margin account via the `gate_api` library, requiring API key authentication. It demonstrates calling `list_cross_margin_account_book` with various optional parameters like currency, time range (`_from`, `to`), pagination (`page`, `limit`), and change type. Exception handling for API errors is included. Note the constraints on query range (max 30 days) and pagination (max 100,000 pages).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'currency_example' # str | Filter by currency (optional)\n_from = 1627706330 # int | Start timestamp of the query (optional)\nto = 1635329650 # int | Time range ending, default to current time (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\ntype = 'borrow' # str | Only retrieve changes of the specified type. All types will be returned if not specified. (optional)\n\ntry:\n    # Retrieve cross margin account change history. (deprecated)\n    api_response = api_instance.list_cross_margin_account_book(currency=currency, _from=_from, to=to, page=page, limit=limit, type=type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->list_cross_margin_account_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: MarginTransferable Class Properties\nDESCRIPTION: Defines the properties of MarginTransferable model including currency details, currency pair, and maximum transferable amount. All properties are optional string values used in margin trading operations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginTransferable.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MarginTransferable:\n    currency: str      # Currency detail\n    currency_pair: str # Currency pair\n    amount: str       # Max transferable amount\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate.io API Authentication in Python\nDESCRIPTION: Demonstrates how to configure API key authentication and create API client instance for Gate.io's API v4. Sets up the base configuration with API key and secret.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n\n----------------------------------------\n\nTITLE: List Options Account Book Using Gate.io Python API\nDESCRIPTION: Python code example demonstrating how to retrieve the options account history including deposits, withdrawals, trading fees and settlements using authenticated API access.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.OptionsApi(api_client)\nlimit = 100\noffset = 0\n_from = 1547706332\nto = 1547706332\ntype = 'dnw'\n\ntry:\n    api_response = api_instance.list_options_account_book(limit=limit, offset=offset, _from=_from, to=to, type=type)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->list_options_account_book: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralRecord Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CollateralRecord model. It includes fields such as order_id, record_id, borrow_currency, borrow_amount, collateral_currency, and various before/after values for collateral and LTV (Loan-to-Value) ratios.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CollateralRecord:\n    \"\"\"\n    Collateral record\n    \"\"\"\n    def __init__(self):\n        self.order_id = None  # int\n        self.record_id = None  # int\n        self.borrow_currency = None  # str\n        self.borrow_amount = None  # str\n        self.collateral_currency = None  # str\n        self.before_collateral = None  # str\n        self.after_collateral = None  # str\n        self.before_ltv = None  # str\n        self.after_ltv = None  # str\n        self.operate_time = None  # int\n```\n\n----------------------------------------\n\nTITLE: Python Options Settlement Model Properties\nDESCRIPTION: Property definitions for the OptionsMySettlements model class, including settlement time, underlying asset, contract details, pricing information, size, profits and fees. Each property is documented with its data type and purpose.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsMySettlements.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OptionsMySettlements:\n    time: float            # Settlement time\n    underlying: str        # Underlying asset\n    contract: str         # Options contract name\n    strike_price: str     # Strike price (quote currency)\n    settle_price: str     # Settlement price (quote currency)\n    size: int             # Size\n    settle_profit: str    # Settlement profit (quote currency)\n    fee: str              # Fee (quote currency)\n    realised_pnl: str     # Accumulated profit/loss including premium, fee, settlement profit\n```\n\n----------------------------------------\n\nTITLE: Defining CrossMarginBalance Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the CrossMarginBalance model using a markdown table. It includes property names, types, descriptions, and optional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginBalance.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**available** | **str** | Available amount | [optional] \n**freeze** | **str** | Locked amount | [optional] \n**borrowed** | **str** | Borrowed amount | [optional] \n**interest** | **str** | Unpaid interests | [optional] \n**negative_liab** | **str** | Negative Liabilities. Formula:Min[available+total+unrealized_pnl,0] | [optional] \n**futures_pos_liab** | **str** | Borrowing to Open Positions in Futures | [optional] \n**equity** | **str** | Equity. Formula: available + freeze - borrowed + futures account's total + unrealized_pnl | [optional] \n**total_freeze** | **str** | Total freeze. Formula: freeze + position_initial_margin + order_margin | [optional] \n**total_liab** | **str** | Total liabilities. Formula: Max[Abs[Min[quity - total_freeze,0], borrowed]] - futures_pos_liab | [optional] \n```\n\n----------------------------------------\n\nTITLE: Listing Small Balance History using Gate.io API in Python\nDESCRIPTION: This snippet shows how to retrieve the small balance conversion history using the Gate.io API. It allows filtering by currency and pagination of results.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_24\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.list_small_balance_history(currency=currency, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_small_balance_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Setting Interest Reinvestment Toggle using Gate.io EarnUniApi in Python\nDESCRIPTION: This Python snippet shows how to set the interest reinvestment preference for the Gate.io Uni Earn feature. It involves configuring the API client with credentials (API Key and Secret), instantiating the `EarnUniApi`, preparing a `UniInterestMode` object, and calling the `switch_interest_reinvest` method. Error handling for `GateApiException` and general `ApiException` is included. The function requires a `UniInterestMode` object as input and returns no content (void) upon success (HTTP 204).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnUniApi(api_client)\nuni_interest_mode = gate_api.UniInterestMode() # UniInterestMode | \n\ntry:\n    # Set interest reinvestment toggle\n    api_instance.switch_interest_reinvest(uni_interest_mode)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->switch_interest_reinvest: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MockOptionsOrder Class Properties for GateAPI Python SDK\nDESCRIPTION: This code snippet defines the properties of the MockOptionsOrder class. It includes the options_name (supporting BTC and ETH with USDT), size (initial order quantity), and left (unfilled contract quantity). These properties are essential for representing and managing option orders in the GateAPI.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockOptionsOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MockOptionsOrder:\n    \"\"\"\n    Option orders\n    \"\"\"\n    options_name: str  # Option name, currently only supports options for BTC and ETH with USDT.\n    size: str  # Initial order quantity, not involved in actual calculation\n    left: str  # Unfilled contract quantity, involved in actual calculation\n```\n\n----------------------------------------\n\nTITLE: FlashSwapPreviewRequest Model Properties Definition\nDESCRIPTION: Defines the structure and properties of the FlashSwapPreviewRequest model, including sell_currency, sell_amount, buy_currency, and buy_amount fields. The model requires either sell_amount or buy_amount to be specified, but not both.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapPreviewRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nsell_currency | str | The name of the asset being sold, as obtained from the \\\"GET /flash_swap/currency_pairs\\\" API, which retrieves a list of supported flash swap currency pairs. | \nsell_amount | str | Amount to sell. It is required to choose one parameter between `sell_amount` and `buy_amount` | [optional] \nbuy_currency | str | The name of the asset being purchased, as obtained from the \\\"GET /flash_swap/currency_pairs\\\" API, which provides a list of supported flash swap currency pairs. | \nbuy_amount | str | Amount to buy. It is required to choose one parameter between `sell_amount` and `buy_amount` | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unified Loan Records with Python Gate.io API Client\nDESCRIPTION: Example code that demonstrates how to retrieve unified loan records using the Gate.io API. It shows parameter setup for filtering by type, currency, pagination, and handling API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/UnifiedApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.UnifiedApi(api_client)\ntype = 'type_example' # str | The types of lending records, borrow - indicates the action of borrowing funds, repay - indicates the action of repaying the borrowed funds (optional)\ncurrency = 'BTC' # str | Retrieve data of the specified currency (optional)\npage = 1 # int | Page number (optional) (default to 1)\nlimit = 100 # int | Maximum response items.  Default: 100, minimum: 1, Maximum: 100 (optional) (default to 100)\n\ntry:\n    # Get load records\n    api_response = api_instance.list_unified_loan_records(type=type, currency=currency, page=page, limit=limit)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling UnifiedApi->list_unified_loan_records: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining LedgerRecord Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the LedgerRecord class using a markdown table. It includes the property names, types, descriptions, and additional notes for each attribute.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/LedgerRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Record ID | [optional] [readonly] \n**txid** | **str** | Hash record of the withdrawal | [optional] [readonly] \n**withdraw_order_id** | **str** | Client order id, up to 32 length and can only include 0-9, A-Z, a-z, underscore(_), hyphen(-) or dot(.)  | [optional] \n**timestamp** | **str** | Operation time | [optional] [readonly] \n**amount** | **str** | Currency amount | \n**currency** | **str** | Currency name | \n**address** | **str** | Withdrawal address. Required for withdrawals | [optional] \n**memo** | **str** | Additional remarks with regards to the withdrawal | [optional] \n**status** | **str** | Record status.  - DONE: done - CANCEL: cancelled - REQUEST: requesting - MANUAL: pending manual approval - BCODE: GateCode operation - EXTPEND: pending confirm after sending - FAIL: pending confirm when fail - INVALID: invalid order - VERIFY: verifying - PROCES: processing - PEND: pending - DMOVE: required manual approval | [optional] [readonly] \n**chain** | **str** | Name of the chain used in withdrawals | \n```\n\n----------------------------------------\n\nTITLE: CollateralAdjust Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the CollateralAdjust model including order_id (integer), type (string for operation type), and collaterals (list of CollateralCurrency objects). Used for managing collateral additions and withdrawals in margin trading.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralAdjust.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CollateralAdjust\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**order_id** | **int** | Order ID | \n**type** | **str** | Operation types: append - for adding collateral, redeem - for withdrawing collateral | \n**collaterals** | [**list[CollateralCurrency]**](CollateralCurrency.md) | Collateral Currency List | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining MarginLeverageTier Model Properties in Python\nDESCRIPTION: Specifies the properties of the MarginLeverageTier model, including upper_limit (maximum loan limit), mmr (maintenance margin rate), and leverage (maximum leverage multiple). All properties are of type string and are optional.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginLeverageTier.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MarginLeverageTier:\n    \"\"\"\n    Market gradient information\n    \"\"\"\n    def __init__(self):\n        self.upper_limit = None  # str\n        self.mmr = None  # str\n        self.leverage = None  # str\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralLoanCurrency Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CollateralLoanCurrency model using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**loan_currency** | **str** | Borrowed currency | [optional] \n**collateral_currency** | **list[str]** | List of supported collateral currencies | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesAutoDeleverage Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesAutoDeleverage model, including their types, descriptions, and additional notes. It covers attributes such as time, user ID, order ID, contract details, leverage, prices, and position sizes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesAutoDeleverage.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FuturesAutoDeleverage\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**time** | **int** | Automatic deleveraging time | [optional] [readonly] \n**user** | **int** | User ID | [optional] [readonly] \n**order_id** | **int** | Order ID. Order IDs before 2023-02-20 are null | [optional] [readonly] \n**contract** | **str** | Futures contract | [optional] [readonly] \n**leverage** | **str** | Position leverage | [optional] [readonly] \n**cross_leverage_limit** | **str** | Cross margin leverage(valid only when `leverage` is 0) | [optional] [readonly] \n**entry_price** | **str** | Average entry price | [optional] [readonly] \n**fill_price** | **str** | Average fill price | [optional] [readonly] \n**trade_size** | **int** | Trading size | [optional] [readonly] \n**position_size** | **int** | Positions after auto-deleveraging | [optional] [readonly] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Querying Currency Interest Compounding Status using Gate.io EarnUniApi in Python\nDESCRIPTION: This Python code demonstrates querying the interest compounding status for a given currency (e.g., 'btc') via the Gate.io Earn Uni API. It requires configuring the API client with credentials (API Key and Secret), creating an `EarnUniApi` instance, calling `get_uni_interest_status` with the currency identifier string as input, and handling potential `GateApiException` and general `ApiException`. The function returns a `UniCurrencyInterest` object containing the status upon success (HTTP 200), which is printed in the example.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnUniApi(api_client)\ncurrency = 'btc' # str | Currency\n\ntry:\n    # query currency interest compounding status\n    api_response = api_instance.get_uni_interest_status(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->get_uni_interest_status: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: AgencyCommission Model Properties Table in Markdown\nDESCRIPTION: A markdown table defining the properties of the AgencyCommission model including field names, types, descriptions, and optional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AgencyCommission.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AgencyCommission\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**commission_time** | **int** | Commission Time. (unix timestamp) | [optional] \n**user_id** | **int** | User ID | [optional] \n**group_name** | **str** | Group name | [optional] \n**commission_amount** | **str** | Commission Amount | [optional] \n**commission_asset** | **str** | Commission Asset | [optional] \n**source** | **str** | Source.  SPOT - SPOT Rebate, FUTURES - Futures Rebate | [optional]\n```\n\n----------------------------------------\n\nTITLE: Querying Cross Margin Borrowable Amount in Python\nDESCRIPTION: Shows how to query the maximum borrowable amount for a specific currency in cross margin trading. Includes error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_18\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.MarginApi(api_client)\ncurrency = 'BTC'\n\ntry:\n    api_response = api_instance.get_cross_margin_borrowable(currency)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_cross_margin_borrowable: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: CountdownCancelAllSpotTask Model Properties Table\nDESCRIPTION: Table describing the properties of the CountdownCancelAllSpotTask model including timeout (required) and currency_pair (optional) fields with their types and descriptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CountdownCancelAllSpotTask.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**timeout** | **int** | Countdown time, in seconds  At least 5 seconds, 0 means cancel the countdown | \n**currency_pair** | **str** | Currency pair | [optional]\n```\n\n----------------------------------------\n\nTITLE: Options Trading Properties Table - Markdown\nDESCRIPTION: Property table defining the OptionsMyTrade model attributes including trade ID, timestamps, contract details, order information, size, pricing and role specifications. Each property includes type information and optional status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsMyTrade.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Trade ID | [optional] \n**create_time** | **float** | Trading time | [optional] \n**contract** | **str** | Options contract name | [optional] \n**order_id** | **int** | Order ID related | [optional] \n**size** | **int** | Trading size | [optional] \n**price** | **str** | Trading price (quote currency) | [optional] \n**underlying_price** | **str** | Underlying price (quote currency) | [optional] \n**role** | **str** | Trade role. Available values are `taker` and `maker` | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesLiqOrder Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesLiqOrder model using a markdown table. It includes the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesLiqOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**time** | **int** | Liquidation time | [optional] [readonly] \n**contract** | **str** | Futures contract | [optional] [readonly] \n**size** | **int** | User position size | [optional] [readonly] \n**order_size** | **int** | Number of forced liquidation orders | [optional] [readonly] \n**order_price** | **str** | Liquidation order price | [optional] [readonly] \n**fill_price** | **str** | Liquidation order average taker price | [optional] [readonly] \n**left** | **int** | System liquidation order maker size | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: Defining Margin Account Currency Model in Python\nDESCRIPTION: Model class defining the structure of margin account currency details for Gate.io API. Includes properties for currency name, available amount, locked amount, borrowed amount, and unpaid interest values.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginAccountCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MarginAccountCurrency:\n    currency: str    # Currency name\n    available: str   # Amount suitable for margin trading\n    locked: str      # Locked amount, used in margin trading\n    borrowed: str    # Borrowed amount\n    interest: str    # Unpaid interests\n```\n\n----------------------------------------\n\nTITLE: Creating Margin Loan with Gate.io API in Python\nDESCRIPTION: Example showing how to configure API credentials and create a margin loan using the Gate.io API. Includes error handling for both Gate-specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\ncreate_uni_loan = gate_api.CreateUniLoan()\n\ntry:\n    api_instance.create_uni_loan(create_uni_loan)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->create_uni_loan: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining AgencyCommissionHistory Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the AgencyCommissionHistory model using a markdown table. It includes the property names, types, descriptions, and optional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AgencyCommissionHistory.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency_pair** | **str** | Currency pair | [optional] \n**total** | **int** | Total | [optional] \n**list** | [**list[AgencyCommission]**](AgencyCommission.md) | List of comission history | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining Options Contract Properties in Python\nDESCRIPTION: A Python model class defining the properties of an options contract. Includes fields for price data (last, mark, index), order book information (bid/ask), position details, implied volatility measures, and options Greeks (delta, gamma, vega, theta, rho).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsTicker.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OptionsTicker:\n    name: str        # Options contract name\n    last_price: str   # Last trading price (quote currency)\n    mark_price: str   # Current mark price (quote currency)\n    index_price: str  # Current index price (quote currency)\n    ask1_size: int    # Best ask size\n    ask1_price: str   # Best ask price\n    bid1_size: int    # Best bid size\n    bid1_price: str   # Best bid price\n    position_size: int # Current total long position size\n    mark_iv: str      # Implied volatility\n    bid_iv: str       # Bid side implied volatility\n    ask_iv: str       # Ask side implied volatility\n    leverage: str     # Current leverage (underlying_price / mark_price * delta)\n    delta: str        # Delta\n    gamma: str        # Gamma\n    vega: str         # Vega\n    theta: str        # Theta\n    rho: str          # Rho\n```\n\n----------------------------------------\n\nTITLE: Creating Lending Orders with Python Gate.io API\nDESCRIPTION: Example showing how to create new lending or redemption orders. Includes authentication setup and error handling. Note that operations are restricted during settlement periods.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.EarnUniApi(api_client)\ncreate_uni_lend = gate_api.CreateUniLend()\n\ntry:\n    api_instance.create_uni_lend(create_uni_lend)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnUniApi->create_uni_lend: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: FuturesInitialOrder Properties Schema\nDESCRIPTION: Defines the properties schema for creating initial futures orders. Includes contract specifications, size parameters for position management, pricing details, and order execution settings. Contains essential flags for position reduction and closing operations.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesInitialOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FuturesInitialOrder:\n    contract: str       # Futures contract\n    size: int          # Number of contracts to close\n    price: str         # Order price (0 for market price)\n    close: bool        # Position closing flag\n    tif: str           # Time in force strategy (gtc/ioc)\n    text: str          # Order source (web/api/app)\n    reduce_only: bool  # Automatic position reduction flag\n    auto_size: str     # Auto size setting for dual-position mode\n    is_reduce_only: bool  # Read-only reduce-only indicator\n    is_close: bool     # Read-only position closing indicator\n```\n\n----------------------------------------\n\nTITLE: CancelBatchOrder Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the CancelBatchOrder model including currency_pair, id, account, and action_mode fields with their types and descriptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CancelBatchOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncurrency_pair | str | Order currency pair | \nid | str | Order ID or user custom ID. Custom ID are accepted only within 30 minutes after order creation | \naccount | str | If the canceled order is a unified account apikey, this field must be specified and set to `unified` | [optional] \naction_mode | str | Processing Mode: When placing an order, different fields are returned based on action_mode. This field is only valid during the request and is not included in the response result ACK: Asynchronous mode, only returns key order fields RESULT: No clearing information FULL: Full mode (default) | [optional]\n```\n\n----------------------------------------\n\nTITLE: MockSpotOrder Properties Definition - Python\nDESCRIPTION: Defines the properties for the MockSpotOrder class used in spot trading. Includes currency pair specification, order price, initial and remaining quantities, and order type (buy/sell).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockSpotOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MockSpotOrder:\n    currency_pairs: str  # Currency pair\n    order_price: str    # Price\n    count: str         # Initial order quantity for spot trading pairs (BTC, ETH only)\n    left: str          # Unfilled quantity\n    type: str          # Order type (sell/buy)\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralLtv Model Properties in Python\nDESCRIPTION: Specifies the properties of the CollateralLtv class that represents collateral ratios for crypto lending. Contains initialization LTV, alert LTV, and liquidation LTV thresholds as string values.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLtv.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninit_ltv | str | The initial collateralization rate | [optional] \nalert_ltv | str | Warning collateralization ratio | [optional] \nliquidate_ltv | str | The liquidation collateralization rate | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralCurrencyInfo Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CollateralCurrencyInfo model using a markdown table. It includes the property names, types, descriptions, and optional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralCurrencyInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency** | **str** | Currency | [optional] \n**index_price** | **str** | Currency Index Price | [optional] \n**left_collateral** | **str** | Left Collateral Amount | [optional] \n**left_collateral_usdt** | **str** | Value of left collateral amount in USDT | [optional]\n```\n\n----------------------------------------\n\nTITLE: Listing Position Close History in Gate.io Futures API\nDESCRIPTION: Python code for retrieving position close history from Gate.io Futures API. Supports filtering by contract, time range, trading side (long/short) and PnL status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesApi.md#2025-04-22_snippet_42\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.FuturesApi(api_client)\nsettle = 'usdt'\ncontract = 'BTC_USDT'\nlimit = 100\noffset = 0\n_from = 1547706332\nto = 1547706332\nside = 'short'\npnl = 'profit'\n\ntry:\n    api_response = api_instance.list_position_close(settle, contract=contract, limit=limit, offset=offset, _from=_from, to=to, side=side, pnl=pnl)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling FuturesApi->list_position_close: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining InsuranceRecord Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the InsuranceRecord model using a markdown table. It specifies two properties: 't' for the Unix timestamp and 'b' for the insurance balance.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/InsuranceRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**t** | **int** | Unix timestamp in seconds | [optional] \n**b** | **str** | Insurance balance | [optional]\n```\n\n----------------------------------------\n\nTITLE: Querying ETH2 Historical Rate of Return with Gate.io API in Python\nDESCRIPTION: This code retrieves the ETH2 earnings rate record for the last 31 days. It requires API key authentication and sends a GET request to the /earn/staking/eth2/rate_records endpoint.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnApi.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.EarnApi(api_client)\n\ntry:\n    # ETH2 historical rate of return query\n    api_response = api_instance.rate_list_eth2()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling EarnApi->rate_list_eth2: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MultiCollateralItem Class Properties in Python\nDESCRIPTION: Class property definitions for MultiCollateralItem including currency identifier, currency index price, and discount rate. All properties are optional string values.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralItem.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ncurrency: str       # Currency\nindex_price: str   # Currency Index Price\ndiscount: str      # Discount\n```\n\n----------------------------------------\n\nTITLE: Defining OptionsMMP Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OptionsMMP model using a markdown table. It includes details such as property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsMMP.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OptionsMMP\n\nMMP Settings\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**underlying** | **str** | Underlying | \n**window** | **int** | Time window (milliseconds), between 1-5000, 0 means disabling MMP | \n**frozen_period** | **int** | Freeze duration (milliseconds), 0 means always frozen, need to call reset API to unfreeze | \n**qty_limit** | **str** | Trading volume upper limit (positive number, up to 2 decimal places) | \n**delta_limit** | **str** | Upper limit of net delta value (positive number, up to 2 decimal places) | \n**trigger_time_ms** | **int** | Trigger freeze time (milliseconds), 0 means no freeze is triggered | [optional] [readonly] \n**frozen_until_ms** | **int** | Unfreeze time (milliseconds). If the freeze duration is not configured, there will be no unfreeze time after the freeze is triggered. | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: Documenting OptionsPositionClose Model Properties in Markdown\nDESCRIPTION: Documents the properties of the OptionsPositionClose model including time, contract, side, PNL, text and settlement size fields. Each property includes its type, description and additional metadata.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsPositionClose.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OptionsPositionClose\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**time** | **float** | Position close time | [optional] [readonly] \n**contract** | **str** | Options contract name | [optional] [readonly] \n**side** | **str** | Position side, long or short | [optional] [readonly] \n**pnl** | **str** | PNL | [optional] [readonly] \n**text** | **str** | Text of close order | [optional] [readonly] \n**settle_size** | **str** | settlement size | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: Defining MultiCollateralRecordCurrency Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the MultiCollateralRecordCurrency model. It includes fields for currency, index price, and amounts before and after operations in both native currency and USDT. All fields are optional strings.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralRecordCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MultiCollateralRecordCurrency:\n    \"\"\"\n    Attributes:\n      currency (str): Currency\n      index_price (str): Currency Index Price\n      before_amount (str): Amount before the operation\n      before_amount_usdt (str): USDT Amount before the operation.\n      after_amount (str): Amount after the operation.\n      after_amount_usdt (str): USDT Amount after the operation.\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Amending Uni Lend Orders with Gate.io Python SDK\nDESCRIPTION: This code snippet demonstrates how to amend an existing lending order using Gate.io's Python SDK. It requires API Key and Secret for authentication, properly configured via the Configuration object. The patch_uni_lend parameter specifies the amendments (e.g., minimum interest rate), and exceptions are handled using GateApiException and ApiException. No data is returned on success (HTTP 204). Ensure 'gate_api' and its dependencies are installed and the user has appropriate API permissions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/EarnUniApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\\nimport gate_api\\nfrom gate_api.exceptions import ApiException, GateApiException\\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\\n# See configuration.py for a list of all supported configuration parameters.\\n# The client must configure the authentication and authorization parameters\\n# in accordance with the API server security policy.\\n# Examples for each auth method are provided below, use the example that\\n# satisfies your auth use case.\\n\\n# Configure APIv4 key authorization\\nconfiguration = gate_api.Configuration(\\n    host = \"https://api.gateio.ws/api/v4\",\\n    key = \"YOU_API_KEY\",\\n    secret = \"YOUR_API_SECRET\"\\n)\\n\\napi_client = gate_api.ApiClient(configuration)\\n# Create an instance of the API class\\napi_instance = gate_api.EarnUniApi(api_client)\\npatch_uni_lend = gate_api.PatchUniLend() # PatchUniLend | \\n\\ntry:\\n    # Amend lending order\\n    api_instance.change_uni_lend(patch_uni_lend)\\nexcept GateApiException as ex:\\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\\nexcept ApiException as e:\\n    print(\"Exception when calling EarnUniApi->change_uni_lend: %s\\n\" % e)\\n\n```\n\n----------------------------------------\n\nTITLE: BatchAmendOrderReq Properties Definition in Markdown\nDESCRIPTION: Defines the properties for modifying contract orders including order identification (order_id or text), size adjustments, price modifications and custom amendment text. Includes detailed notes about size modification behaviors and constraints.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BatchAmendOrderReq.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norder_id | int | Order id, order_id and text must contain at least one | [optional] \ntext | str | User-defined order text, at least one of order_id and text must be passed | [optional] \nsize | int | The new order size, including the executed order size. - If it is less than or equal to the executed quantity, the order will be cancelled. - The new order direction must be consistent with the original one. - The size of the closing order cannot be modified. - For orders that only reduce positions, if the size is increased, other orders that only reduce positions may be kicked out. - If the price is not modified, reducing the size will not affect the depth of the queue, and increasing the size will place it at the end of the current price. | [optional] \nprice | str | New order price. | [optional] \namend_text | str | Custom info during amending order | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesCandlestick Properties in Markdown\nDESCRIPTION: Documents the properties of a FuturesCandlestick data point used in futures trading. Contains fields for timestamp, volume, close price, high price, low price, open price, and trading volume in quote currency.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesCandlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**t** | **float** | Unix timestamp in seconds | [optional] \n**v** | **int** | size volume (contract size). Only returned if `contract` is not prefixed | [optional] \n**c** | **str** | Close price (quote currency) | [optional] \n**h** | **str** | Highest price (quote currency) | [optional] \n**l** | **str** | Lowest price (quote currency) | [optional] \n**o** | **str** | Open price (quote currency) | [optional] \n**sum** | **str** | Trading volume (unit: Quote currency) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Listing Small Balances in Gate.io Python SDK\nDESCRIPTION: Retrieves list of small balance holdings in the account.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/WalletApi.md#2025-04-22_snippet_21\n\nLANGUAGE: python\nCODE:\n```\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.WalletApi(api_client)\n\ntry:\n    api_response = api_instance.list_small_balance()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling WalletApi->list_small_balance: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining Futures Price Triggered Order Properties in Markdown\nDESCRIPTION: Markdown table defining the properties of the FuturesPriceTriggeredOrder model, including property names, types, descriptions and additional notes. The model contains fields for order identification, user details, timing information, status flags and order type specifications.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesPriceTriggeredOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ninitial | [**FuturesInitialOrder**](FuturesInitialOrder.md) |  | \ntrigger | [**FuturesPriceTrigger**](FuturesPriceTrigger.md) |  | \nid | **int** | Auto order ID | [optional] [readonly] \nuser | **int** | User ID | [optional] [readonly] \ncreate_time | **float** | Creation time | [optional] [readonly] \nfinish_time | **float** | Finished time | [optional] [readonly] \ntrade_id | **int** | ID of the newly created order on condition triggered | [optional] [readonly] \nstatus | **str** | Auto order status  - `open`: order is active - `finished`: order is finished - `inactive`: order is not active, only for close-long-order or close-short-order - `invalid`: order is invalid, only for close-long-order or close-short-order | [optional] [readonly] \nfinish_as | **str** | How order is finished | [optional] [readonly] \nreason | **str** | Additional remarks on how the order was finished | [optional] [readonly] \norder_type | **str** | Types of stop-profit and stop-loss, including:  - `close-long-order`: Entrusting order stop profit and stop loss, flat long position - `close-short-order`: Entrusted order stop profit and stop loss, short position  - `close-long-position`: Position stop-profit stop loss, used to close long positions - `close-short-position`: Position stop-profit stop loss, used to close all short positions - `plan-close-long-position`: Position plan take profit and stop loss, used to close long positions in all or part of long positions - `plan-close-short-position`: Position plan stop-profit and stop loss, used to close all short positions or partially close short positions  The two types of entrusted order stop-profit and stop-loss are read-only and cannot be passed in through requests | [optional] \nme_order_id | **int** | Corresponding order ID of order take-profit/stop-loss. | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: BrokerCommission1 Model Properties Table\nDESCRIPTION: Markdown table defining the properties, types and descriptions for the BrokerCommission1 data model. The model includes fields for commission timing, user identification, group details, financial amounts, and trading information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BrokerCommission1.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ncommission_time | int | Commission Time. (unix timestamp) | [optional] \nuser_id | int | User ID | [optional] \ngroup_name | str | Group name | [optional] \namount | str | The amount of commission rebates | [optional] \nfee | str | Fee | [optional] \nfee_asset | str | Fee currency | [optional] \nrebate_fee | str | The income from rebates, converted to USDT | [optional] \nsource | str | Rebate Type: Spot、Futures、Options | [optional] \ncurrency_pair | str | Currency pair | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining OptionsAccountBook Properties in Python API Documentation\nDESCRIPTION: Documents the properties of the OptionsAccountBook model including time, change amount, balance, transaction type, and custom text fields. Each property is defined with its data type and description.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsAccountBook.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OptionsAccountBook\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**time** | **float** | Change time | [optional] \n**change** | **str** | Amount changed (USDT) | [optional] \n**balance** | **str** | Account total balance after change (USDT) | [optional] \n**type** | **str** | Changing Type: - dnw: Deposit & Withdraw - prem: Trading premium - fee: Trading fee - refr: Referrer rebate - point_dnw: POINT Deposit & Withdraw - point_fee: POINT Trading fee - point_refr: POINT Referrer rebate | [optional] \n**text** | **str** | custom text | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partner Commission History via Gate.io RebateApi in Python\nDESCRIPTION: This Python snippet demonstrates fetching commission records of recommended users using the partner_commissions_history method of the Gate.io RebateApi. It requires proper APIv4 authentication configured via gate_api.Configuration, and an initialized api_client. Inputs include optional currency, user_id, time range, as well as pagination controls. The response is a PartnerCommissionHistory object, and errors are captured via GateApiException and ApiException handlers. Required dependencies: gate_api Python library and valid Gate.io API keys.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\ncurrency = 'BTC' # str | Filter by currency. Return all currency records if not specified (optional)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Partner obtains commission records of recommended users\n    api_response = api_instance.partner_commissions_history(currency=currency, user_id=user_id, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->partner_commissions_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining BrokerTransaction Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the BrokerTransaction class using a markdown table. It specifies the name, type, description, and optional notes for each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BrokerTransaction.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **int** | Total | [optional] \n**list** | [**list[BrokerTransaction1]**](BrokerTransaction1.md) | List of transaction history | [optional]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Partner Transaction History using Gate.io RebateApi in Python\nDESCRIPTION: This Python snippet retrieves transaction records of recommended users via the Gate.io RebateApi's partner_transaction_history function. It requires the gate_api Python package, an authenticated api_client instance, and optionally accepts filters such as currency_pair, user_id, and a time range with pagination (limit, offset). Inputs are filter parameters; output is a PartnerTransactionHistory object. Errors are handled for both GateApiException and ApiException. The underlying API requires valid APIv4 credentials set in api_client.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Create an instance of the API class\napi_instance = gate_api.RebateApi(api_client)\ncurrency_pair = 'BTC_USDT' # str | Specify the currency pair, if not specified, return all currency pairs (optional)\nuser_id = 10003 # int | User ID. If not specified, all user records will be returned (optional)\n_from = 1602120000 # int | Time range beginning, default to 7 days before current time (optional)\nto = 1602123600 # int | Time range ending, default to current time (optional)\nlimit = 100 # int | Maximum number of records to be returned in a single list (optional) (default to 100)\noffset = 0 # int | List offset, starting from 0 (optional) (default to 0)\n\ntry:\n    # Partner obtains transaction records of recommended users\n    api_response = api_instance.partner_transaction_history(currency_pair=currency_pair, user_id=user_id, _from=_from, to=to, limit=limit, offset=offset)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling RebateApi->partner_transaction_history: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: MultiCollateralCurrency Class Properties Documentation\nDESCRIPTION: Documents the properties of the MultiCollateralCurrency class which includes two main lists: loan_currencies for supported borrowing currencies and collateral_currencies for supported collateral options. Each list contains specialized items defined in separate model files.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**loan_currencies** | [**list[MultiLoanItem]**](MultiLoanItem.md) | List of supported borrowing currencies | [optional] \n**collateral_currencies** | [**list[MultiCollateralItem]**](MultiCollateralItem.md) | List of supported collateral currencies | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CollateralCurrentRate Model Properties in Python\nDESCRIPTION: Class model defining properties for multi-currency pledge current interest rates. Contains currency identifier and current interest rate as string fields.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralCurrentRate.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CollateralCurrentRate:\n    currency: str        # Currency\n    current_rate: str    # Currency current interest rate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sub-Account Modes in Gate.io API with Python\nDESCRIPTION: Example of fetching sub-account modes using the SubAccountApi. This operation returns a list of SubUserMode objects representing different account modes (classic, multi-currency, or portfolio margin).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/SubAccountApi.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.SubAccountApi(api_client)\n\ntry:\n    # Get sub-account mode\n    api_response = api_instance.list_unified_mode()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling SubAccountApi->list_unified_mode: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MultiCollateralRecord Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the MultiCollateralRecord class, including order_id, record_id, before_ltv, after_ltv, operate_time, borrow_currencies, and collateral_currencies. Each property is described with its type and optional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiCollateralRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass MultiCollateralRecord:\n    \"\"\"\n    Multi-Collateral adjustment record.\n    \"\"\"\n    order_id: int  # Order ID\n    record_id: int  # Collateral record ID\n    before_ltv: str  # The collateral ratio before adjustment\n    after_ltv: str  # The collateral ratio before adjustment\n    operate_time: int  # Operation time, timestamp in seconds.\n    borrow_currencies: List[MultiCollateralRecordCurrency]  # Borrowing Currency List\n    collateral_currencies: List[MultiCollateralRecordCurrency]  # Collateral Currency List\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deprecated Cross Margin Account Details using Gate.io Python SDK\nDESCRIPTION: This Python code shows how to fetch the user's deprecated cross margin account information using the `gate_api` library. It requires configuring the API client with API key and secret for authentication. The script then calls the `get_cross_margin_account` method on a `MarginApi` instance and includes exception handling.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginApi.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n# Create an instance of the API class\napi_instance = gate_api.MarginApi(api_client)\n\ntry:\n    # Retrieve cross margin account. (deprecated)\n    api_response = api_instance.get_cross_margin_account()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginApi->get_cross_margin_account: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: DeliverySettlement Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the DeliverySettlement model, including property names, data types, descriptions, and optional/readonly status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DeliverySettlement.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntime | int | Liquidation time | [optional] [readonly] \ncontract | str | Futures contract | [optional] [readonly] \nleverage | str | Position leverage | [optional] [readonly] \nsize | int | Position size | [optional] [readonly] \nmargin | str | Position margin | [optional] [readonly] \nentry_price | str | Average entry price | [optional] [readonly] \nsettle_price | str | Settled price | [optional] [readonly] \nprofit | str | Profit | [optional] [readonly] \nfee | str | Fee deducted | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: Defining Eth2RateList Model Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the Eth2RateList model using a markdown table. It specifies the name, type, description, and optional status for each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/Eth2RateList.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**date_time** | **int** | Date and Time Stamp | [optional] \n**date** | **str** | Date | [optional] \n**rate** | **str** | percentage | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining Risk Unit Properties in Python\nDESCRIPTION: Specifies the properties and their types for the MockRiskUnit class. Includes fields for risk metrics, margins, and option Greeks. All fields are optional strings except margin_result which is a list of MockMarginResult objects.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockRiskUnit.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nsymbol | str | Risk unit name | [optional] \nspot_in_use | str | Spot usage | [optional] \nmaintain_margin | str | Maintenance margin | [optional] \ninitial_margin | str | Initial margin | [optional] \nmargin_result | list[MockMarginResult] | Margin result | [optional] \ndelta | str | Total Delta of risk unit | [optional] \ngamma | str | Total Gamma of risk unit | [optional] \ntheta | str | Total Theta of risk unit | [optional] \nvega | str | Total Vega of risk unit | [optional]\n```\n\n----------------------------------------\n\nTITLE: Listing STP Group Users with Error Handling in Python\nDESCRIPTION: Makes an API call to list users in an STP group with comprehensive error handling for both Gate API specific and general API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountApi.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.list_stp_groups_users(stp_id)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling AccountApi->list_stp_groups_users: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Countdown Cancel Options Orders in Python using Gate.io API\nDESCRIPTION: Example showing how to cancel all options orders with a countdown using the Gate.io API. Handles both successful API responses and exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsApi.md#2025-04-22_snippet_25\n\nLANGUAGE: python\nCODE:\n```\napi_instance = gate_api.OptionsApi(api_client)\ncountdown_cancel_all_options_task = gate_api.CountdownCancelAllOptionsTask()\n\ntry:\n    api_response = api_instance.countdown_cancel_all_options(countdown_cancel_all_options_task)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling OptionsApi->countdown_cancel_all_options: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining MockSpotBalance Class Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MockSpotBalance class using a markdown table. It specifies the name, type, and description of each property. The class has two properties: 'currency' and 'equity'.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockSpotBalance.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency** | **str** | Currency name | \n**equity** | **str** | Currency equity, where equity &#x3D; balance - borrowed, represents the net delta exposure  of your spot positions, which can be negative. Currently only supports three currencies: BTC, ETH. |\n```\n\n----------------------------------------\n\nTITLE: BatchFuturesOrder Class Properties Definition\nDESCRIPTION: Defines the properties of a futures order including order status flags, execution parameters, timestamps, fees, and self-trade prevention settings. Each property is documented with its type, optionality, and specific constraints.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BatchFuturesOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass BatchFuturesOrder:\n    succeeded: bool  # Whether the batch of orders succeeded\n    label: str      # Error label, only exists if execution fails\n    detail: str     # Error detail, only present if execution failed\n    id: int         # Futures order ID\n    user: int       # User ID\n    create_time: float  # Creation time of order\n    finish_time: float  # Order finished time\n    status: str     # Order status (open/finished)\n    contract: str   # Futures contract\n    size: int       # Order size (positive for bid, negative for ask)\n    price: str      # Order price\n    tif: str        # Time in force (gtc/ioc/poc/fok)\n    text: str       # User defined information\n    stp_act: str    # Self-Trading Prevention Action\n    stp_id: int     # STP group identifier\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesAccountBook Properties in Python\nDESCRIPTION: Specifies the properties of the FuturesAccountBook model including timestamps, amounts, balance changes, and transaction types. Properties include time, change amount, balance, transaction type, comments, contract details, trade ID and record ID.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesAccountBook.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FuturesAccountBook:\n    time: float      # Change time\n    change: str      # Change amount\n    balance: str     # Balance after change\n    type: str        # Changing Type (dnw, pnl, fee, refr, fund, etc)\n    text: str        # Comment\n    contract: str    # Futures contract (available after 2023-10-30)\n    trade_id: str    # trade id\n    id: str          # Account change record id\n```\n\n----------------------------------------\n\nTITLE: Querying User Total Amount\nDESCRIPTION: Makes an API call to retrieve the total borrowing and collateral amount for the user, with error handling for API exceptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CollateralLoanApi.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    api_response = api_instance.get_user_total_amount()\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling CollateralLoanApi->get_user_total_amount: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining DualGetOrders Model Properties in Python\nDESCRIPTION: Specifies the properties of the DualGetOrders model, including their types and descriptions. This model represents dual investment orders with details such as order ID, investment amount, settlement information, and status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DualGetOrders.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# DualGetOrders\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n\"id\" | **int** | Order ID | [optional] \n\"plan_id\" | **int** | Plan ID | [optional] \n\"copies\" | **str** | Copies | [optional] \n\"invest_amount\" | **str** | Investment Amount | [optional] \n\"settlement_amount\" | **str** | Settlement Amount | [optional] \n\"create_time\" | **int** | Creation time | [optional] \n\"complete_time\" | **int** | Completion Time | [optional] \n\"status\" | **str** | Status:  `INIT`-INIT `SETTLEMENT_SUCCESS`-Settlement Success `SETTLEMENT_PROCESSING`-SEttlement Processing `CANCELED`-Canceled `FAILED`-Failed | [optional] \n\"invest_currency\" | **str** | Investment Currency | [optional] \n\"exercise_currency\" | **str** | Strike Currency | [optional] \n\"exercise_price\" | **str** | Strike price | [optional] \n\"settlement_price\" | **str** | settlement price | [optional] \n\"settlement_currency\" | **str** | Settle currency | [optional] \n\"apy_display\" | **str** | APY | [optional] \n\"apy_settlement\" | **str** | Settlement APY | [optional] \n\"delivery_time\" | **int** | Settlement time | [optional] \n\"text\" | **str** | Custom order information | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining FuturesOrderBookItem Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesOrderBookItem model. It includes 'p' for price in quote currency and 's' for size, both as optional fields.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesOrderBookItem.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FuturesOrderBookItem\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**p** | **str** | Price (quote currency) | [optional] \n**s** | **int** | Size | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesOrder Properties in Markdown\nDESCRIPTION: This code snippet defines the properties of the FuturesOrder model using a markdown table. It includes property names, types, descriptions, and additional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Futures order ID | [optional] [readonly] \n**user** | **int** | User ID | [optional] [readonly] \n**create_time** | **float** | Creation time of order | [optional] [readonly] \n**finish_time** | **float** | Order finished time. Not returned if order is open | [optional] [readonly] \n**finish_as** | **str** | How the order was finished.  - filled: all filled - cancelled: manually cancelled - liquidated: cancelled because of liquidation - ioc: time in force is `IOC`, finish immediately - auto_deleveraged: finished by ADL - reduce_only: cancelled because of increasing position while `reduce-only` set- position_closed: cancelled because of position close - position_closed: canceled because the position was closed - reduce_out: only reduce positions by excluding hard-to-fill orders - stp: cancelled because self trade prevention  | [optional] [readonly] \n**status** | **str** | Order status  - `open`: waiting to be traded - `finished`: finished | [optional] [readonly] \n**contract** | **str** | Futures contract | \n**size** | **int** | Order size. Specify positive number to make a bid, and negative number to ask | \n**iceberg** | **int** | Display size for iceberg order. 0 for non-iceberg. Note that you will have to pay the taker fee for the hidden size | [optional] \n**price** | **str** | Order price. 0 for market order with `tif` set as `ioc` | [optional] \n**close** | **bool** | Set as `true` to close the position, with `size` set to 0 | [optional] [default to False]\n**is_close** | **bool** | Is the order to close position | [optional] [readonly] \n**reduce_only** | **bool** | Set as `true` to be reduce-only order | [optional] [default to False]\n**is_reduce_only** | **bool** | Is the order reduce-only | [optional] [readonly] \n**is_liq** | **bool** | Is the order for liquidation | [optional] [readonly] \n**tif** | **str** | Time in force  - gtc: GoodTillCancelled - ioc: ImmediateOrCancelled, taker only - poc: PendingOrCancelled, makes a post-only order that always enjoys a maker fee - fok: FillOrKill, fill either completely or none | [optional] [default to 'gtc']\n**left** | **int** | Size left to be traded | [optional] [readonly] \n**fill_price** | **str** | Fill price of the order | [optional] [readonly] \n**text** | **str** | Order custom information, users can use this field to set a custom ID, and the user-defined field must meet the following conditions:  1. Must start with `t-` 2. If `t-` is not calculated, the length cannot exceed 28 bytes 3. The input content can only contain numbers, letters, underscores (_), midscores (-) or dots (.)  In addition to user-defined information, the following are internal reserved fields that identifies the source of the order:  - web: web page - api: API call - app: mobile terminal - auto_deleveraging: Automatic position reduction - liquidation: ⽼Classic mode position forced closing - liq-xxx: a. The new classic model of forced closing positions, including position-by-position, one-way full position, and two-way full position non-held position. b. The unified account single currency margin model of forced closing positions by position - hedge-liq-xxx: New classic model two-way full position hedging part of forced closing, that is, close long and short positions at the same time - pm_liquidate: Unified account cross-currency margin model for forced closing positions - cob_margin_liquidate: Unified account combination margin model for forced closing position - scm_liquidate: Unified account single currency margin mode position forced closing - insurance: insurance | [optional] \n**tkfr** | **str** | Taker fee | [optional] [readonly] \n**mkfr** | **str** | Maker fee | [optional] [readonly] \n**refu** | **int** | Reference user ID | [optional] [readonly] \n**auto_size** | **str** | Set side to close dual-mode position. `close_long` closes the long side; while `close_short` the short one. Note `size` also needs to be set to 0 | [optional] \n**stp_id** | **int** | Orders between users in the same `stp_id` group are not allowed to be self-traded  1. If the `stp_id` of two orders being matched is non-zero and equal, they will not be executed. Instead, the corresponding strategy will be executed based on the `stp_act` of the taker. 2. `stp_id` returns `0` by default for orders that have not been set for `STP group` | [optional] [readonly] \n**stp_act** | **str** | Self-Trading Prevention Action. Users can use this field to set self-trade prevetion strategies  1. After users join the `STP Group`, he can pass `stp_act` to limit the user's self-trade prevetion strategy. If `stp_act` is not passed, the default is `cn` strategy。 2. When the user does not join the `STP group`, an error will be returned when passing the `stp_act` parameter。 3. If the user did not use 'stp_act' when placing the order, 'stp_act' will return '-'  - cn: Cancel newest, Cancel new orders and keep old ones - co: Cancel oldest, Cancel old orders and keep new ones - cb: Cancel both, Both old and new orders will be cancelled | [optional] \n**amend_text** | **str** | The custom data that the user remarked when amending the order | [optional] [readonly] \n**biz_info** | **str** | Additional information | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: Estimating Unified Margin Interest Rates in Python\nDESCRIPTION: Example of how to estimate interest rates for unified margin lending using the Gate.io API client for Python. It creates an authenticated API client instance and calls the get_margin_uni_estimate_rate method with a list of currencies.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MarginUniApi.md#2025-04-22_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\napi_instance = gate_api.MarginUniApi(api_client)\ncurrencies = ['[\\\"BTC\\\",\\\"GT\\\"]'] # list[str] | An array of up to 10 specifying the currency name\n\ntry:\n    # Estimate interest Rate\n    api_response = api_instance.get_margin_uni_estimate_rate(currencies)\n    print(api_response)\nexcept GateApiException as ex:\n    print(\"Gate api exception, label: %s, message: %s\\n\" % (ex.label, ex.message))\nexcept ApiException as e:\n    print(\"Exception when calling MarginUniApi->get_margin_uni_estimate_rate: %s\\n\" % e)\n```\n\n----------------------------------------\n\nTITLE: Defining CrossMarginCurrency Model Properties in Python\nDESCRIPTION: Defines the properties of the CrossMarginCurrency model class for Gate.io API. Properties include currency name, lending rate, precision, discount, borrowing limits, price, loanable status, and operational status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginCurrency.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CrossMarginCurrency\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**name** | **str** | Currency name | [optional] \n**rate** | **str** | Minimum lending rate (hourly rate) | [optional] \n**prec** | **str** | Currency precision | [optional] \n**discount** | **str** | Currency value discount, which is used in total value calculation | [optional] \n**min_borrow_amount** | **str** | Minimum currency borrow amount. Unit is currency itself | [optional] \n**user_max_borrow_amount** | **str** | Maximum borrow value allowed per user, in USDT | [optional] \n**total_max_borrow_amount** | **str** | Maximum borrow value allowed for this currency, in USDT | [optional] \n**price** | **str** | Price change between this currency and USDT | [optional] \n**loanable** | **bool** | Whether currency is borrowed | [optional] \n**status** | **int** | status  - `0` : disable  - `1` : enable | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining AccountRateLimit Model Properties in Python\nDESCRIPTION: Defines the data structure for account rate limiting in the Gate.io API. Contains properties for tier level, transaction ratios, and update timestamps. Used to track and manage API request frequency limits based on account transaction ratios.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountRateLimit.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AccountRateLimit:\n    tier: str  # Frequency limit level\n    ratio: str  # Transaction rate\n    main_ratio: str  # Total transaction ratio of main account\n    updated_at: str  # Update time\n```\n\n----------------------------------------\n\nTITLE: Configuring Gate API Client for Partner History Retrieval (Python)\nDESCRIPTION: This Python snippet shows the initial setup required to interact with the Gate.io API using the `gate_api` library, specifically for retrieving partner-related history. It demonstrates configuring the API host, key, and secret within a `gate_api.Configuration` object and then initializing the `gate_api.ApiClient`. This setup is a prerequisite for calling methods like `partner_transaction_history`.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/RebateApi.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n```python\nfrom __future__ import print_function\nimport gate_api\nfrom gate_api.exceptions import ApiException, GateApiException\n# Defining the host is optional and defaults to https://api.gateio.ws/api/v4\n# See configuration.py for a list of all supported configuration parameters.\n# The client must configure the authentication and authorization parameters\n# in accordance with the API server security policy.\n# Examples for each auth method are provided below, use the example that\n# satisfies your auth use case.\n\n# Configure APIv4 key authorization\nconfiguration = gate_api.Configuration(\n    host = \"https://api.gateio.ws/api/v4\",\n    key = \"YOU_API_KEY\",\n    secret = \"YOUR_API_SECRET\"\n)\n\napi_client = gate_api.ApiClient(configuration)\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Options Settlement Properties in Gate.io Python API\nDESCRIPTION: Documents the properties of the OptionsSettlement class including time, contract name, profit, fee, strike price and settlement price. Each property includes type information and optional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsSettlement.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntime | float | Last changed time of configuration | [optional] \ncontract | str | Options contract name | [optional] \nprofit | str | Settlement profit per size (quote currency) | [optional] \nfee | str | Settlement fee per size (quote currency) | [optional] \nstrike_price | str | Strike price (quote currency) | [optional] \nsettle_price | str | Settlement price (quote currency) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesAccountHistory Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesAccountHistory model using a markdown table. It includes property names, types, descriptions, and optional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesAccountHistory.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**dnw** | **str** | total amount of deposit and withdraw | [optional] \n**pnl** | **str** | total amount of trading profit and loss | [optional] \n**fee** | **str** | total amount of fee | [optional] \n**refr** | **str** | total amount of referrer rebates | [optional] \n**fund** | **str** | total amount of funding costs | [optional] \n**point_dnw** | **str** | total amount of point deposit and withdraw | [optional] \n**point_fee** | **str** | total amount of point fee | [optional] \n**point_refr** | **str** | total amount of referrer rebates of point fee | [optional] \n**bonus_dnw** | **str** | total amount of perpetual contract bonus transfer | [optional] \n**bonus_offset** | **str** | total amount of perpetual contract bonus deduction | [optional] \n```\n\n----------------------------------------\n\nTITLE: AgencyTransaction Model Properties Definition in Python\nDESCRIPTION: A structured definition of the AgencyTransaction model properties including transaction time, user information, fee details, currency pair, and commission information. Each property is documented with its data type and purpose.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AgencyTransaction.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# AgencyTransaction\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**transaction_time** | **int** | Transaction Time. (unix timestamp) | [optional] \n**user_id** | **int** | User ID | [optional] \n**group_name** | **str** | Group name | [optional] \n**fee** | **str** | Fee | [optional] \n**fee_asset** | **str** | Fee currency | [optional] \n**currency_pair** | **str** | Currency pair | [optional] \n**amount** | **str** | Commission Amount | [optional] \n**amount_asset** | **str** | Commission Asset | [optional] \n**source** | **str** | Source.  SPOT - SPOT Rebate, FUTURES - Futures Rebate | [optional]\n```\n\n----------------------------------------\n\nTITLE: Describing Options Position Close Order Properties\nDESCRIPTION: Documentation table defining the properties of an OptionsPositionCloseOrder object. Contains fields for order ID (integer), price (string), and liquidation status (boolean).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsPositionCloseOrder.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OptionsPositionCloseOrder\n\nCurrent close order if any, or `null`\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Close order ID | [optional] \n**price** | **str** | Close order price （quote currency) | [optional] \n**is_liq** | **bool** | Is the close order from liquidation | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesPremiumIndex Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesPremiumIndex model using a markdown table. It includes the property names, types, descriptions, and additional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesPremiumIndex.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**t** | **float** | Unix timestamp in seconds | [optional] \n**c** | **str** | Close price | [optional] \n**h** | **str** | Highest price | [optional] \n**l** | **str** | Lowest price&#x60; | [optional] \n**o** | **str** | Open price | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining OptionsMMPReset Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the OptionsMMPReset model using a markdown table. It includes the property names, types, descriptions, and additional notes for each attribute of the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsMMPReset.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# OptionsMMPReset\n\nMMP Reset\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**underlying** | **str** | Underlying | \n**window** | **int** | Time window (milliseconds), between 1-5000, 0 means disabling MMP | [optional] [readonly] \n**frozen_period** | **int** | Freeze duration (milliseconds), 0 means always frozen, need to call reset API to unfreeze | [optional] [readonly] \n**qty_limit** | **str** | Trading volume upper limit (positive number, up to 2 decimal places) | [optional] [readonly] \n**delta_limit** | **str** | Upper limit of net delta value (positive number, up to 2 decimal places) | [optional] [readonly] \n**trigger_time_ms** | **int** | Trigger freeze time (milliseconds), 0 means no freeze is triggered | [optional] [readonly] \n**frozen_until_ms** | **int** | Unfreeze time (milliseconds). If the freeze duration is not configured, there will be no unfreeze time after the freeze is triggered. | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: Defining OptionsCandlestick Model Properties in Python\nDESCRIPTION: This code snippet defines the properties of the OptionsCandlestick model. It includes fields for timestamp, volume, and various price points (close, high, low, open). The properties are documented with their types and descriptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsCandlestick.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass OptionsCandlestick:\n    t: float  # Unix timestamp in seconds\n    v: int  # size volume (contract size). Only returned if `contract` is not prefixed\n    c: str  # Close price (quote currency, unit: underlying corresponding option price)\n    h: str  # Highest price (quote currency, unit: underlying corresponding option price)\n    l: str  # Lowest price (quote currency, unit: underlying corresponding option price)\n    o: str  # Open price (quote currency, unit: underlying corresponding option price)\n```\n\n----------------------------------------\n\nTITLE: Defining AccountDetail Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the AccountDetail class. It includes various account-related attributes such as IP whitelist, currency pairs, user ID, VIP tier, API key details, and copy trading role. Each property is documented with its type and description.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AccountDetail.md#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nclass AccountDetail:\n    \"\"\"\n    Account detail\n    \"\"\"\n    ip_whitelist = None  # list[str]: IP whitelist\n    currency_pairs = None  # list[str]: CurrencyPair whitelisting\n    user_id = None  # int: User ID\n    tier = None  # int: User VIP level\n    key = None  # AccountDetailKey\n    copy_trading_role = None  # int: User role: 0 - Ordinary user 1 - Order leader 2 - Follower 3 - Order leader and follower\n```\n\n----------------------------------------\n\nTITLE: Declaring Pytest-Based Testing Dependencies for Python SDK - Plaintext\nDESCRIPTION: This snippet lists required dependencies for running automated tests against the Gate API Python SDK. It specifies the exact package versions of 'pytest', 'pytest-cov', and 'pytest-randomly', ensuring compatibility with Python versions 2.7 and 3.4. Comments next to entries provide contextual information, clarifying version needs for backwards compatibility; this structure is suitable for use in a requirements file or test setup documentation and is read by dependency management tools such as pip.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/test-requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npytest~=4.6.7 # needed for python 2.7+3.4\\npytest-cov>=2.8.1\\npytest-randomly==1.2.3 # needed for python 2.7+3.4\n```\n\n----------------------------------------\n\nTITLE: Defining Cross Margin Repayment Properties in Markdown\nDESCRIPTION: Documents the properties of the CrossMarginRepayment model class including IDs, timestamps, amounts and repayment types. Each property includes its data type, description and optional metadata.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginRepayment.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CrossMarginRepayment\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Loan record ID | [optional] \n**create_time** | **int** | Repayment time | [optional] \n**loan_id** | **str** | Loan record ID | [optional] \n**currency** | **str** | Currency name | [optional] \n**principal** | **str** | Repaid principal | [optional] \n**interest** | **str** | Repaid interest | [optional] \n**repayment_type** | **str** | Repayment type: none - no repayment type, manual_repay - manual repayment, auto_repay - automatic repayment, cancel_auto_repay - automatic repayment after cancellation | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: BatchAmendItem Model Properties Definition - Markdown\nDESCRIPTION: Detailed specification of the BatchAmendItem model properties including order_id, currency_pair, account, amount, price, amend_text, and action_mode fields. Each property is documented with its type, description and optional status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BatchAmendItem.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\norder_id | str | The order ID returned upon successful creation or the custom ID specified by the user during creation (i.e., the 'text' field). | \ncurrency_pair | str | Currency pair | \naccount | str | Default spot, unified account and warehouse-by-store leverage account. | [optional] \namount | str | trade amount, only one of amount and price can be specified | [optional] \nprice | str | trade price, only one of amount and price can be specified | [optional] \namend_text | str | Custom info during amending order | [optional] \naction_mode | str | Processing Mode: When placing an order, different fields are returned based on action_mode. This field is only valid during the request and is not included in the response result ACK: Asynchronous mode, only returns key order fields RESULT: No clearing information FULL: Full mode (default) | [optional]\n```\n\n----------------------------------------\n\nTITLE: Python Options Contract Model Class Properties\nDESCRIPTION: Defines the properties of an options contract including contract specifications, pricing details, fee rates, order limits and trading parameters. The class represents both call and put options with their respective constraints and configuration values.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OptionsContract.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass OptionsContract:\n    name: str                   # Options contract name\n    tag: str                    # tag\n    create_time: float          # Creation time\n    expiration_time: float      # Expiration time\n    is_call: bool               # true means call options, false is put options\n    multiplier: str             # Multiplier for converting from invoicing to settlement currency\n    underlying: str             # Underlying\n    underlying_price: str       # Underlying price (quote currency)\n    last_price: str            # Last trading price\n    mark_price: str            # Current mark price (quote currency)\n    index_price: str           # Current index price (quote currency)\n    maker_fee_rate: str        # Maker fee rate, where negative means rebate\n    taker_fee_rate: str        # Taker fee rate\n    order_price_round: str     # Minimum order price increment\n    mark_price_round: str      # Minimum mark price increment\n    order_size_min: int        # Minimum order size allowed\n    order_size_max: int        # Maximum order size allowed\n    order_price_deviate: str   # Allowed price deviation from mark price\n    ref_discount_rate: str     # Referral fee rate discount\n    ref_rebate_rate: str       # Referrer commission rate\n    orderbook_id: int          # Current orderbook ID\n    trade_id: int              # Current trade ID\n    trade_size: int            # Historical accumulated trade size\n    position_size: int         # Current total long position size\n    orders_limit: int          # Maximum number of open orders\n```\n\n----------------------------------------\n\nTITLE: Defining FuturesIndexConstituents Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the FuturesIndexConstituents model using a Markdown table. It specifies the property names, types, descriptions, and additional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesIndexConstituents.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**index** | **str** | Index name | [optional] [readonly] \n**constituents** | [**list[IndexConstituent]**](IndexConstituent.md) | Constituents | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: FuturesFee Model Properties Definition\nDESCRIPTION: Markdown table defining the properties of the FuturesFee model. The model contains two main properties: taker_fee and maker_fee, both represented as strings and marked as optional and readonly.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesFee.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**taker_fee** | **str** | Taker fee | [optional] [readonly] \n**maker_fee** | **str** | maker fee | [optional] [readonly] \n```\n\n----------------------------------------\n\nTITLE: Python Futures Account Model Properties\nDESCRIPTION: Defines the data model properties for a futures trading account including total balance, margins, PNL, and account settings. The model includes fields for both classic and portfolio margin account types, with support for dual mode trading.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesAccount.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FuturesAccount:\n    properties = {\n        \"total\": \"str\",  # total balance after deposits, withdrawals, PnL\n        \"unrealised_pnl\": \"str\",  # Unrealized PNL\n        \"position_margin\": \"str\",  # Position margin\n        \"order_margin\": \"str\",  # Order margin for unfinished orders\n        \"available\": \"str\",  # Available balance for trading/transfer\n        \"point\": \"str\",  # POINT amount\n        \"currency\": \"str\",  # Settlement currency\n        \"in_dual_mode\": \"bool\",  # Dual mode status\n        \"enable_credit\": \"bool\",  # Portfolio margin mode status\n        \"position_initial_margin\": \"str\",  # Initial margin for portfolio\n        \"maintenance_margin\": \"str\",  # Maintenance margin\n        \"bonus\": \"str\",  # Contract bonus\n        \"enable_evolved_classic\": \"bool\",  # Classic margin mode version\n        \"cross_order_margin\": \"str\",  # Cross margin order deposit\n        \"cross_initial_margin\": \"str\",  # Cross initial margin\n        \"cross_maintenance_margin\": \"str\",  # Cross maintenance margin\n        \"cross_unrealised_pnl\": \"str\",  # Cross unrealized PnL\n        \"cross_available\": \"str\",  # Cross available amount\n        \"cross_margin_balance\": \"str\",  # Cross margin balance\n        \"cross_mmr\": \"str\",  # Cross maintenance margin ratio\n        \"cross_imr\": \"str\",  # Cross initial margin ratio\n        \"isolated_position_margin\": \"str\",  # Isolated position margin\n        \"enable_new_dual_mode\": \"bool\",  # New dual position mode status\n        \"margin_mode\": \"int\",  # Margin mode (0=classic, 1=cross, 2=combined)\n        \"history\": \"FuturesAccountHistory\"  # Account history reference\n    }\n```\n\n----------------------------------------\n\nTITLE: CountdownCancelAllOptionsTask Model Properties in Markdown\nDESCRIPTION: Defines the properties of the CountdownCancelAllOptionsTask model including timeout, contract, and underlying. The timeout property is required and specifies countdown time in seconds, while contract and optional properties are optional.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CountdownCancelAllOptionsTask.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CountdownCancelAllOptionsTask\n\nCountdown cancel task detail\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**timeout** | **int** | Countdown time, in seconds  At least 5 seconds, 0 means cancel the countdown | \n**contract** | **str** | Options contract name | [optional] \n**underlying** | **str** | Underlying | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: OpenOrders Model Properties Table - Gate.io Python API\nDESCRIPTION: Table documenting the properties of the OpenOrders model including currency pair, total order count, and orders list. Used for representing open orders data from the Gate.io API.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/OpenOrders.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency_pair** | **str** | Currency pair | [optional] \n**total** | **int** | The total number of pending orders for this trading pair on the current page | [optional] \n**orders** | [**list[Order]**](Order.md) |  | [optional]\n```\n\n----------------------------------------\n\nTITLE: MultiChainAddressItem Properties Table\nDESCRIPTION: Markdown table defining the properties of the MultiChainAddressItem model, including data types and descriptions for chain name, deposit address, payment identifiers (Tag/Memo), and obtain status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiChainAddressItem.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\nchain | str | Name of the chain | [optional] \naddress | str | Deposit address | [optional] \npayment_id | str | Notes that some currencies required(e.g., Tag, Memo) when depositing | [optional] \npayment_name | str | Note type, `Tag` or `Memo` | [optional] \nobtain_failed | int | The obtain failed status- 0: address successfully obtained- 1: failed to obtain address | [optional]\n```\n\n----------------------------------------\n\nTITLE: FutureCancelOrderResult Model Properties\nDESCRIPTION: Defines the property structure for futures order cancellation results. Contains fields for order ID, user ID, cancellation success status, and potential error messages.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FutureCancelOrderResult.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Order ID | [optional] \n**user_id** | **int** | User ID | [optional] \n**succeeded** | **bool** | Whether cancellation succeeded | [optional] \n**message** | **str** | Error message when failed to cancel the order; empty if succeeded | [optional]\n```\n\n----------------------------------------\n\nTITLE: AgencyTransactionHistory Model Properties Table\nDESCRIPTION: Markdown table defining the properties of the AgencyTransactionHistory model including currency_pair (string), total (integer), and list of AgencyTransaction objects.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AgencyTransactionHistory.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency_pair** | **str** | Currency pair | [optional] \n**total** | **int** | Total | [optional] \n**list** | [**list[AgencyTransaction]**](AgencyTransaction.md) | List of transaction history | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining CrossMarginTransferable Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the CrossMarginTransferable class. It includes 'currency' as a string representing the currency detail, and 'amount' as a string representing the maximum transferable amount. Both properties are marked as optional.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginTransferable.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass CrossMarginTransferable:\n    currency: str  # Currency detail (optional)\n    amount: str  # Max transferable amount (optional)\n```\n\n----------------------------------------\n\nTITLE: Defining MockOptionsPosition Properties in Markdown\nDESCRIPTION: Table showing properties of the MockOptionsPosition model. The model has two properties: options_name (representing the option name for BTC/ETH with USDT) and size (representing position size measured in contract units).\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockOptionsPosition.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**options_name** | **str** | Option name, currently only supports options for BTC and ETH with USDT. | \n**size** | **str** | Position size, measured in contract units. |\n```\n\n----------------------------------------\n\nTITLE: ETH2 Swap Properties Table\nDESCRIPTION: Defines the core properties of an ETH2 swap operation - the direction of the swap (ETH to ETH2 or vice versa) and the amount to swap.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/Eth2Swap.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**side** | **str** | 1-Forward Swap（ETH -> ETH2）, 2-Reverse Swap（ETH2 -> ETH） | \n**amount** | **str** | amount | \n```\n\n----------------------------------------\n\nTITLE: Defining DualGetPlans Model Properties in Python\nDESCRIPTION: Defines the property structure for the DualGetPlans model, including data types and descriptions for each field. This model represents dual investment plans with properties for identification, pricing, timing, and status information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DualGetPlans.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# DualGetPlans\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Plan ID | [optional] \n**instrument_name** | **str** | Instrument Name | [optional] \n**invest_currency** | **str** | Investment Currency | [optional] \n**exercise_currency** | **str** | Strike Currency | [optional] \n**exercise_price** | **float** | Strike price | [optional] \n**delivery_time** | **int** | Settlement time | [optional] \n**min_copies** | **int** | Minimum Copies | [optional] \n**max_copies** | **int** | Maximum Copies | [optional] \n**per_value** | **str** | Per Unit Value | [optional] \n**apy_display** | **str** | APY | [optional] \n**start_time** | **int** | start time | [optional] \n**end_time** | **int** | Finished time | [optional] \n**status** | **str** | Status:   `NOTSTARTED`-not started  `ONGOING`-ongoing  `ENDED`-ended | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining AutoRepaySetting Model Properties in Python\nDESCRIPTION: Defines the properties of the AutoRepaySetting model, including the 'status' field which represents the auto repayment status. The status can be either 'on' for enabled or 'off' for disabled.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/AutoRepaySetting.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass AutoRepaySetting:\n    \"\"\"\n    Attributes:\n      status (str): Auto repayment status. `on` - enabled, `off` - disabled\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining BrokerCommission Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the BrokerCommission model, including 'total' (an integer) and 'list' (an array of BrokerCommission1 objects). It provides type information and optional status for each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BrokerCommission.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**total** | **int** | Total | [optional] \n**list** | [**list[BrokerCommission1]**](BrokerCommission1.md) | List of comission history | [optional]\n```\n\n----------------------------------------\n\nTITLE: FuturesLiquidate Properties Definition in Markdown\nDESCRIPTION: Markdown table defining the properties of the FuturesLiquidate class, including property names, data types, descriptions and additional notes. The model includes fields for liquidation timing, contract details, position metrics, and order information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesLiquidate.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\ntime | int | Liquidation time | [optional] [readonly] \ncontract | str | Futures contract | [optional] [readonly] \nleverage | str | Position leverage. Not returned in public endpoints. | [optional] [readonly] \nsize | int | Position size | [optional] [readonly] \nmargin | str | Position margin. Not returned in public endpoints. | [optional] [readonly] \nentry_price | str | Average entry price. Not returned in public endpoints. | [optional] [readonly] \nliq_price | str | Liquidation price. Not returned in public endpoints. | [optional] [readonly] \nmark_price | str | Mark price. Not returned in public endpoints. | [optional] [readonly] \norder_id | int | Liquidation order ID. Not returned in public endpoints. | [optional] [readonly] \norder_price | str | Liquidation order price | [optional] [readonly] \nfill_price | str | Liquidation order average taker price | [optional] [readonly] \nleft | int | Liquidation order maker size | [optional] [readonly]\n```\n\n----------------------------------------\n\nTITLE: Defining MyFuturesTrade Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MyFuturesTrade model using a markdown table. It includes the property names, types, descriptions, and optional notes for each field in the model.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MyFuturesTrade.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# MyFuturesTrade\n\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **int** | Trade ID | [optional] \n**create_time** | **float** | Trading time | [optional] \n**contract** | **str** | Futures contract | [optional] \n**order_id** | **str** | Order ID related | [optional] \n**size** | **int** | Trading size | [optional] \n**close_size** | **int** | Number of closed positions:  close_size=0 && size＞0       Open long position close_size=0 && size＜0       Open short position close_size>0 && size>0 && size <= close_size Close short postion close_size>0 && size>0 && size > close_size Close short position and open long position close_size<0 && size<0 && size >= close_size Close long postion close_size<0 && size<0 && size < close_size Close long position and open short position | [optional] \n**price** | **str** | Trading price | [optional] \n**role** | **str** | Trade role. Available values are `taker` and `maker` | [optional] \n**text** | **str** | User defined information | [optional] \n**fee** | **str** | Fee deducted | [optional] \n**point_fee** | **str** | Points used to deduct fee | [optional] \n\n[[Back to Model list]](../README.md#documentation-for-models) [[Back to API list]](../README.md#documentation-for-api-endpoints) [[Back to README]](../README.md)\n```\n\n----------------------------------------\n\nTITLE: BorrowCurrencyInfo Model Properties Definition in Markdown\nDESCRIPTION: Defines the properties of the BorrowCurrencyInfo model including currency details, index price, and repayment information. All properties are optional strings that track various aspects of borrowed currency and repayment status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/BorrowCurrencyInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**currency** | **str** | Currency | [optional] \n**index_price** | **str** | Currency Index Price | [optional] \n**left_repay_principal** | **str** | outstanding principal | [optional] \n**left_repay_interest** | **str** | outstanding interest | [optional] \n**left_repay_usdt** | **str** | Value of left total repayments amount in USDT | [optional]\n```\n\n----------------------------------------\n\nTITLE: Defining FundingRateRecord Model Properties in Markdown\nDESCRIPTION: This snippet outlines the properties of the FundingRateRecord model. It defines two fields: 't' for the Unix timestamp and 'r' for the funding rate, both as optional values.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FundingRateRecord.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**t** | **int** | Unix timestamp in seconds | [optional] \n**r** | **str** | Funding rate | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining MultiRepayResp Model Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MultiRepayResp model, including the order_id and repaid_currencies. It specifies the types, descriptions, and optional nature of each property.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MultiRepayResp.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**order_id** | **int** | Order ID | [optional] \n**repaid_currencies** | [**list[RepayCurrencyRes]**](RepayCurrencyRes.md) | Repay Currency List | [optional]\n```\n\n----------------------------------------\n\nTITLE: DebitFee Model Properties Documentation - Gate.io Python API\nDESCRIPTION: Documents the single property 'enabled' of the DebitFee model class which indicates whether GT fee discount is being used. The property is a boolean type.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/DebitFee.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**enabled** | **bool** | Whether GT fee discount is used |\n```\n\n----------------------------------------\n\nTITLE: Defining FlashSwapOrderRequest Model Properties in Markdown\nDESCRIPTION: This snippet describes the properties of the FlashSwapOrderRequest model using a markdown table. It includes the name, type, and description of each property, along with any additional notes.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FlashSwapOrderRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**preview_id** | **str** | Preview result ID | \n**sell_currency** | **str** | The name of the asset being sold, as obtained from the \"GET /flash_swap/currency_pairs\" API, which retrieves a list of supported flash swap currency pairs. | \n**sell_amount** | **str** | Amount to sell (based on the preview result) | \n**buy_currency** | **str** | The name of the asset being purchased, as obtained from the \"GET /flash_swap/currency_pairs\" API, which provides a list of supported flash swap currency pairs. | \n**buy_amount** | **str** | Amount to buy (based on the preview result) | \n```\n\n----------------------------------------\n\nTITLE: MockMarginResult Model Properties Table - Markdown\nDESCRIPTION: Markdown table defining the properties of the MockMarginResult model, including property names, types, descriptions and optional status.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockMarginResult.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**type** | **str** | Position combination type `original_position` - Original position `long_delta_original_position` - Positive delta + Original position `short_delta_original_position` - Negative delta + Original position | [optional] \n**profit_loss_ranges** | **list[ProfitLossRange]** | The results of 33 pressure scenarios for MR1 | [optional] \n**max_loss** | **ProfitLossRange** | 最大损失 | [optional] \n**mr1** | **str** | Stress testing | [optional] \n**mr2** | **str** | Basis spread risk | [optional] \n**mr3** | **str** | Volatility spread risk | [optional] \n**mr4** | **str** | Option short risk | [optional]\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Structure Documentation\nDESCRIPTION: Table structure showing API endpoint documentation layout including Class, Method, HTTP request, and Description columns. All URIs are relative to the base URL https://api.gateio.ws/api/v4.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nClass | Method | HTTP request | Description\n------------ | ------------- | ------------- | -------------\n*EarnUniApi* | [**list_uni_currencies**](docs/EarnUniApi.md#list_uni_currencies) | **GET** /earn/uni/currencies | List currencies for lending\n*EarnUniApi* | [**get_uni_currency**](docs/EarnUniApi.md#get_uni_currency) | **GET** /earn/uni/currencies/{currency} | Get currency detail for lending\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions - Futures Trading\nDESCRIPTION: Collection of futures trading API endpoints including account management, position handling, order operations, and trading history retrieval. Endpoints use RESTful conventions with GET, POST, PUT, and DELETE methods.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n*FuturesApi* | list_futures_accounts | GET /futures/{settle}/accounts\n*FuturesApi* | list_futures_account_book | GET /futures/{settle}/account_book\n*FuturesApi* | list_positions | GET /futures/{settle}/positions\n*FuturesApi* | get_position | GET /futures/{settle}/positions/{contract}\n```\n\n----------------------------------------\n\nTITLE: Defining CrossMarginAccountBook Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the CrossMarginAccountBook model, including their types and descriptions. It uses a markdown table format to clearly present the information.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/CrossMarginAccountBook.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Properties\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**id** | **str** | Balance change record ID | [optional] \n**time** | **int** | The timestamp of the change (in milliseconds) | [optional] \n**currency** | **str** | Currency changed | [optional] \n**change** | **str** | Amount changed. Positive value means transferring in, while negative out | [optional] \n**balance** | **str** | Balance after change | [optional] \n**type** | **str** | Account book type.  Please refer to [account book type](#accountbook-type) for more detail | [optional] \n```\n\n----------------------------------------\n\nTITLE: Defining MockFuturesPosition Properties in Markdown\nDESCRIPTION: This snippet defines the properties of the MockFuturesPosition model in a markdown table format. It includes the property names, types, and descriptions for 'contract' and 'size'.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/MockFuturesPosition.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nName | Type | Description | Notes\n------------ | ------------- | ------------- | -------------\n**contract** | **str** | Futures name, currently only supports perpetual futures for BTC and ETH with USDT. | \n**size** | **str** | Position size, measured in contract units. | \n```\n\n----------------------------------------\n\nTITLE: Defining FuturesBatchAmendOrderRequest Class Properties in Python\nDESCRIPTION: This code snippet defines the properties of the FuturesBatchAmendOrderRequest class used for modifying contract order parameters. It includes properties such as order_id, text, size, price, and amend_text, along with their types and descriptions.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/docs/FuturesBatchAmendOrderRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass FuturesBatchAmendOrderRequest:\n    order_id: int  # Order id, order_id and text must contain at least one\n    text: str  # User-defined order text, at least one of order_id and text must be passed\n    size: int  # The new order size, including the executed order size.\n    price: str  # New order price.\n    amend_text: str  # Custom info during amending order\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions - Margin Trading\nDESCRIPTION: Collection of margin trading API endpoints for account management, funding operations, auto-repayment settings, and currency operations. Includes both active and deprecated endpoints.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n*MarginApi* | list_margin_accounts | GET /margin/accounts\n*MarginApi* | list_margin_account_book | GET /margin/account_book\n*MarginApi* | list_funding_accounts | GET /margin/funding_accounts\n*MarginApi* | get_auto_repay_status | GET /margin/auto_repay\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies in requirements format\nDESCRIPTION: This snippet lists the Python package dependencies required for the `gateio/gateapi-python` project. It uses the standard requirements file format, specifying minimum versions for libraries like `certifi` for SSL certificates, `six` for Python 2/3 compatibility, `python_dateutil` for date/time parsing, `setuptools` for package installation tasks, and `urllib3` for HTTP requests. A conditional dependency on `future` is included specifically for Python versions 2.7 and lower. This file is typically processed by `pip` to install the necessary packages.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncertifi >= 14.05.14\nfuture; python_version<=\"2.7\"\nsix >= 1.10\npython_dateutil >= 2.5.3\nsetuptools >= 21.0.0\nurllib3 >= 1.15.1\n```\n\n----------------------------------------\n\nTITLE: Gate.io API Endpoint Definitions - MultiCollateral Loan Operations\nDESCRIPTION: API endpoint definitions for managing multi-collateral loan operations including creating orders, getting order details, managing repayments, and querying loan rates\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n*MultiCollateralLoanApi* | **POST** /loan/multi_collateral/orders | Create Multi-Collateral Order\n*MultiCollateralLoanApi* | **GET** /loan/multi_collateral/orders/{order_id} | Get Multi-Collateral Order Detail\n```\n\n----------------------------------------\n\nTITLE: Executing the Gate.io API Demo Application (Bash)\nDESCRIPTION: Provides example commands to run the Python demo application (`app.py`) for interacting with Gate.io's APIv4. Demonstrates usage for futures (TestNet and real trading), spot, and margin services, requiring API key (`-k`) and secret (`-s`) arguments. The TestNet example also specifies a custom API endpoint (`-u`). Users must replace placeholders like `<YOUR_API_KEY>` with their actual credentials. **Caution**: Running these commands will interact with the Gate.io API using the provided credentials.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/example/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# run futures demo against TestNet\npython app.py futures -k <YOUR_TESTNET_API_KEY> -s <YOUR_TESTNET_API_SECRET> -u fx-api-testnet.gateio.ws\n\n# run futures demo against real trading\npython app.py futures -k <YOUR_API_KEY> -s <YOUR_API_SECRET>\n\n# run spot demo\npython app.py spot -k <YOUR_API_KEY> -s <YOUR_API_SECRET>\n\n# run margin demo\npython app.py margin -k <YOUR_API_KEY> -s <YOUR_API_SECRET>\n```\n\n----------------------------------------\n\nTITLE: Gate.io API Endpoint Definitions - Spot Trading Operations\nDESCRIPTION: API endpoint definitions for spot trading operations including currency pair information, market data, order management, and account operations\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\n*SpotApi* | **GET** /spot/currencies | List all currencies' details\n*SpotApi* | **GET** /spot/currency_pairs | List all currency pairs supported\n```\n\n----------------------------------------\n\nTITLE: Gate.io API Endpoint Definitions - Rebate Operations\nDESCRIPTION: API endpoint definitions for managing rebate operations including transaction history, commission tracking, and partner relationships\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\n*RebateApi* | **GET** /rebate/agency/transaction_history | The agency obtains the transaction history\n*RebateApi* | **GET** /rebate/partner/commission_history | Partner obtains commission records\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Definitions - Multi-Collateral Loan\nDESCRIPTION: API endpoint for listing multi-collateral loan orders using GET request method.\nSOURCE: https://github.com/gateio/gateapi-python/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n*MultiCollateralLoanApi* | list_multi_collateral_orders | GET /loan/multi_collateral/orders\n```"
  }
]