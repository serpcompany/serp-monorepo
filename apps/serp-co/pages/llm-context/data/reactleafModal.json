[
  {
    "owner": "reactleaf",
    "repo": "modal",
    "content": "TITLE: Creating a Type-Safe useModal Hook\nDESCRIPTION: Shows how to create a type-safe modal hook using createModalHook with a register type to ensure type checking for modal types and props.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// useModal.ts\nimport { createModalHook } from \"@reactleaf/modal\";\nimport register from \"./register\";\n\nexport const useModal = createModalHook<typeof register>();\n```\n\n----------------------------------------\n\nTITLE: Setting Up ModalProvider in a React App\nDESCRIPTION: Demonstrates how to integrate the modal provider into a React application by wrapping the app with ModalProvider and passing the modal register.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModalProvider } from \"@reactleaf/modal\";\nimport register from \"./modals/register\";\n\nfunction App() {\n  ...\n  return <ModalProvider register={register}>{...}</ModalProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type-Safe Modal Hook\nDESCRIPTION: Creating a custom useModal hook with type-checking based on the modal register to ensure modal types and props are correctly matched.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// useModal.ts\nimport { createModalHook } from \"@reactleaf/modal\";\nimport register from \"./register\";\n\nexport const useModal = createModalHook<typeof register>();\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal Register with Dynamic Imports in TypeScript\nDESCRIPTION: Creates a modal register that uses dynamic imports to load modal components only when needed, reducing initial bundle size. The register maps modal names to import functions.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst register = {\n  Alert: () => import(\"./Alert\"),\n  Confirm: () => import(\"./Confirm\"),\n};\n\nexport default register;\n```\n\n----------------------------------------\n\nTITLE: Creating a Modal Register with Dynamic Imports\nDESCRIPTION: Example of creating a modal register using dynamic imports to reduce initial bundle size. Modals are loaded only when they are opened.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst register = {\n  Alert: () => import(\"./Alert\"),\n  Confirm: () => import(\"./Confirm\"),\n};\n\nexport default register;\n```\n\n----------------------------------------\n\nTITLE: Setting Up ModalProvider with Modal Register\nDESCRIPTION: Example of wrapping an application with the ModalProvider component and providing the modal register to enable modal context throughout the app.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ModalProvider } from \"@reactleaf/modal\";\nimport register from \"./modals/register\";\n\nfunction App() {\n  ...\n  return <ModalProvider register={register}>{...}</ModalProvider>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ModalProvider with Default Overlay Options\nDESCRIPTION: Shows how to set default overlay options for all modals in the application when setting up the ModalProvider component.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// 별 설정이 필요 없다면, 기본 값을 사용합니다. 기본값은 아래, openModal과 함께 설명됩니다.\nreturn (\n  <ModalProvider register={register}>\n    <App />\n  </ModalProvider>\n);\n// 모든 모달에 적용할 옵션이 필요하다면 이렇게 작성할 수 있습니다.\nreturn (\n  <ModalProvider\n    register={register}\n    defaultOverlayOptions={{ closeDelay: 300 }}\n  >\n    <App />\n  </ModalProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ModalProvider with Default Overlay Options\nDESCRIPTION: Examples of configuring the ModalProvider with different default overlay options that will apply to all modals in the application.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype defaultOverlayOptions = Partial<OverlayOptions>;\n\n// just use as default. default values are decribed on openModal()'s description.\nreturn (\n  <ModalProvider register={register}>\n    <App />\n  </ModalProvider>\n);\n// if you need some settings that applied to every modal, use 'default'\nreturn (\n  <ModalProvider\n    register={register}\n    defaultOverlayOptions={{ closeDelay: 300 }}\n  >\n    <App />\n  </ModalProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Preloading Modal Components\nDESCRIPTION: Demonstrates how to preload modal components before they're needed, which can improve user experience by eliminating loading time when opening modals.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// [주의] preloadModal은 훅이 아닙니다.\nimport { createModalPreloader } from \"@reactleaf/modal\";\nconst preloadModal = createModalPreloader(register);\n\n// 이 컴포넌트가 불러와졌을 때, 컴포넌트에서 사용할 모달을 미리 불러옵니다.\nuseEffect(() => {\n  preloadModal(\"Alert\", \"Confirm\");\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Preloading Modals for Synchronous Access\nDESCRIPTION: Example of preloading modal components to ensure they open synchronously when needed, useful for modals with animations or large dependencies.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// [WARN] preloadModal is not a hook.\nimport { createModalPreloader } from \"@reactleaf/modal\";\nconst preloadModal = createModalPreloader(register);\n\n// when component mounted, load relative modals.\nuseEffect(() => {\n  preloadModal(\"Alert\", \"Confirm\");\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Modal Component with Provided Props\nDESCRIPTION: Shows how to implement a modal component that uses the BasicModalProps interface, which provides close and visible properties that are injected by the modal system.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BasicModalProps } from \"@reactleaf/modal\";\n\ninterface Props extends BasicModalProps {\n  title: string;\n  message: string;\n}\nconst Alert = ({\n  title,\n  message,\n  visible, // injected by modal\n  close, // injected by modal\n}: Props) => {\n  return (\n    <div className={cx(\"alert\", \"modal\", { visible })}>\n      <p className=\"modal-title\">{title}</p>\n      <div className=\"modal-body\">\n        <p className=\"message\">{message}</p>\n      </div>\n      <div className=\"modal-buttons\">\n        <button onClick={close}>Close</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing a Modal Component with BasicModalProps\nDESCRIPTION: Example of creating a modal component that uses the BasicModalProps interface to access the injected 'close' and 'visible' props for handling modal state and closure.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { BasicModalProps } from \"@reactleaf/modal\";\n\ninterface Props extends BasicModalProps {\n  title: string;\n  message: string;\n}\nconst Alert = ({\n  title,\n  message,\n  visible, // injected by modal\n  close, // injected by modal\n}: Props) => {\n  return (\n    <div className={cx(\"alert\", \"modal\", { visible })}>\n      <p className=\"modal-title\">{title}</p>\n      <div className=\"modal-body\">\n        <p className=\"message\">{message}</p>\n      </div>\n      <div className=\"modal-buttons\">\n        <button onClick={close}>Close</button>\n      </div>\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Modal Styling with CSS\nDESCRIPTION: Provides a basic CSS styling example for modal overlays with transitions and background dimming, which can be customized for different modal styles.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_9\n\nLANGUAGE: css\nCODE:\n```\n.modal-overlay {\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n.modal-overlay.dim {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.modal-overlay.visible {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CSS Animation to Modal Overlays\nDESCRIPTION: CSS example for creating a fade-in animation for modal overlays by transitioning opacity when the 'visible' class is added.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.modal-overlay {\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n.modal-overlay.visible {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Modal Open/Close Animations with CSS\nDESCRIPTION: Demonstrates how to create animations for modals opening and closing using CSS transitions with the visible class applied by the modal system.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.modal-overlay {\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n.modal-overlay.visible {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Slide-Up Animation for Modals\nDESCRIPTION: CSS example for implementing a slide-up animation for modal content with a 500ms transition on the transform property.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.slideup {\n  transition: transform 500ms;\n  transform: translateY(100%);\n}\n\n.slideup.visible {\n  transform: translateY(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Slide-Up Animation for Modals\nDESCRIPTION: Shows how to implement a slide-up animation for modals using CSS transitions and transforms with the visible class applied by the modal system.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_8\n\nLANGUAGE: css\nCODE:\n```\n.slideup {\n  transition: transform 500ms;\n  transform: translateY(100%);\n}\n\n.slideup.visible {\n  transform: translateY(0);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Modal Overlay Styles with CSS\nDESCRIPTION: This CSS snippet demonstrates how to override the default styles for modal overlays. It includes transitions for opacity, background color for dimmed overlays, and visibility classes for animation purposes.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: css\nCODE:\n```\n.modal-overlay {\n  opacity: 0;\n  transition: opacity 0.3s;\n}\n.modal-overlay.dim {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n.modal-overlay.visible {\n  opacity: 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Modals with Window.postMessage\nDESCRIPTION: Shows how to open modals using window.postMessage when hooks can't be used, such as in non-component contexts. Note that this method doesn't support type checking or passing functions.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.postMessage({\n  to: \"@reactleaf/modal\",\n  payload: {\n    type: \"Example\",\n    props: {\n      warning: \"postMessage는 Serializable 한 값만 전달할 수 있습니다.\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Modals via Window postMessage API\nDESCRIPTION: Example of using window.postMessage() to open a modal without hooks, useful for third-party state management but with limitations for non-serializable props.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nwindow.postMessage({\n  to: \"@reactleaf/modal\",\n  payload: {\n    type: \"Example\",\n    props: { warning: \"postMessage only can send SERIALIZABLE values.\" },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Installing the Modal Library\nDESCRIPTION: Shows how to install the @reactleaf/modal library using npm or yarn package managers.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @reactleaf/modal\n# 또는\nyarn add @reactleaf/modal\n```\n\n----------------------------------------\n\nTITLE: Installing @reactleaf/modal Package\nDESCRIPTION: Installation commands for adding the @reactleaf/modal library to a project using either npm or yarn package managers.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @reactleaf/modal\n# or\nyarn add @reactleaf/modal\n```\n\n----------------------------------------\n\nTITLE: Importing Modal Stylesheet\nDESCRIPTION: Shows how to import the default modal styles provided by the library when custom styling is not needed.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README-ko.md#2025-04-23_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@reactleaf/modal/style.css\";\n```\n\n----------------------------------------\n\nTITLE: Importing Default Styles for @reactleaf/modal in JavaScript\nDESCRIPTION: This snippet shows how to import the default CSS file for the @reactleaf/modal package. It's a simple way to include pre-defined styles in your project.\nSOURCE: https://github.com/reactleaf/modal/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"@reactleaf/modal/style.css\";\n```\n\n----------------------------------------\n\nTITLE: Starting React Development Server\nDESCRIPTION: Command to run the React application in development mode with hot reloading at http://localhost:3000\nSOURCE: https://github.com/reactleaf/modal/blob/main/examples/with-cra/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Running React Tests\nDESCRIPTION: Command to launch the test runner in interactive watch mode for running application tests\nSOURCE: https://github.com/reactleaf/modal/blob/main/examples/with-cra/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Building React Production Bundle\nDESCRIPTION: Command to create an optimized production build in the build folder with minified bundles and hashed filenames\nSOURCE: https://github.com/reactleaf/modal/blob/main/examples/with-cra/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Ejecting from Create React App\nDESCRIPTION: Command to eject from Create React App configuration, exposing all configuration files and dependencies for custom configuration\nSOURCE: https://github.com/reactleaf/modal/blob/main/examples/with-cra/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run eject\n```\n\n----------------------------------------\n\nTITLE: Setting Default Web Crawler Permissions in robots.txt\nDESCRIPTION: Configures default access permissions for all web crawlers using the User-agent wildcard. This configuration allows unrestricted access to all crawlers as there are no disallow rules specified.\nSOURCE: https://github.com/reactleaf/modal/blob/main/examples/with-cra/public/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow:\n```"
  }
]