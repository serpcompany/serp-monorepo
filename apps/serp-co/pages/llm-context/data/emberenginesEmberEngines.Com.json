[
  {
    "owner": "ember-engines",
    "repo": "ember-engines.com",
    "content": "TITLE: Providing Services to an Ember Engine from Host Application\nDESCRIPTION: Example showing how a host application configures service provision to an engine. Demonstrates both direct mapping and renaming services when passing them to the engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/services.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// dummy/app/app.js\nexport default class App extends Application {\n  // ...\n  engines = {\n    'super-blog': {\n      dependencies: {\n        services: [\n          'store',\n          { 'session': 'user-session' }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing ember-engines package using Ember CLI\nDESCRIPTION: This command installs the ember-engines package in an existing Ember.js project using Ember CLI. This is the standard way to add the engines capability to an Ember application.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/installation.md#2025-04-12_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nember install ember-engines\n```\n\n----------------------------------------\n\nTITLE: Defining the Engine Class in engine.js\nDESCRIPTION: JavaScript code defining the Engine class in engine.js, which includes the Resolver, modulePrefix and other core Engine functionality.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n// addon/engine.js\nimport Engine from '@ember/engine';\n\nimport loadInitializers from 'ember-load-initializers';\nimport Resolver from 'ember-resolver';\n\nimport config from './config/environment';\n\nconst { modulePrefix } = config;\n\nexport default class YourEngine extends Engine {\n  modulePrefix = modulePrefix;\n  Resolver = Resolver;\n}\n\nloadInitializers(YourEngine, modulePrefix);\n```\n\n----------------------------------------\n\nTITLE: Listing Engine Challenges - Markdown List\nDESCRIPTION: A markdown formatted list highlighting the key challenges that large monolithic applications face, which Ember Engines help address. The list covers side effects, coordination, complexity, innovation barriers, and onboarding issues.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/index.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `Side effects` - if you change something, it may be unclear how it could affect the rest of platform.\n* `Coordination` - when you develop a new feature or make big changes, many teams may need to be in sync to approve it.\n* `Complexity` - with a huge dependency tree and many layers of abstraction, developers cannot iterate quickly, and features suffer as a result.\n* `Killing Innovation` - a/b testing a cutting-edge feature is hard to do without disrupting the rest of the app and the teams working on it.\n* `Slow Onboarding` - new people coming into the team are overwhelmed.\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Dependencies in an Ember Engine\nDESCRIPTION: Example of how to declare required services in an Ember Engine. This configuration informs the host application which services the engine needs to operate properly.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/services.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// super-blog/addon/engine.js\nexport default class SuperBlog extends Engine {\n  // ...\n  dependencies = {\n    services: [\n      'store',\n      'session'\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an In-Repo Engine with Ember CLI\nDESCRIPTION: Command to generate an in-repo engine within an existing Ember application. This creates a directory structure in the /lib folder with all necessary files for an engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nember g in-repo-engine <engine-name>\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Routes for a Blog Engine\nDESCRIPTION: JavaScript code showing a more complex routes.js example for a blog Engine with nested routes for posts, comments, and individual comment pages.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_19\n\nLANGUAGE: js\nCODE:\n```\nimport buildRoutes from 'ember-engines/routes';\n\nexport default buildRoutes(function() {\n  this.route('new');\n\n  this.route('post', { path: 'post/:id' }, function() {\n    this.route('comments', function() {\n      this.route('comment', { path: ':id' });\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lazy Loading for Ember Engine in JavaScript\nDESCRIPTION: This snippet shows how to enable lazy loading for an Ember Engine by setting a flag in the engine's index.js file. It uses the buildEngine function from ember-engines to configure the engine with lazy loading enabled.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/lazy-loading.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// super-blog/index.js\nconst { buildEngine } = require('ember-engines/lib/engine-addon');\n\nmodule.exports = buildEngine({\n  name: 'super-blog',\n  lazyLoading: {\n    enabled: true\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Rendering Test for an Ember Engine Component\nDESCRIPTION: This JavaScript code demonstrates how to set up and execute a rendering test for the 'hello-name' component within an Ember Engine. It uses QUnit for assertions, ember-qunit for test setup, and ember-engines/test-support for engine-specific setup.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-integration.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <app-name>/tests/integration/components/hello-name-test.js\n\nimport { module, test } from 'qunit';\nimport { setupRenderingTest } from 'ember-qunit';\nimport { render } from '@ember/test-helpers';\nimport hbs from 'htmlbars-inline-precompile';\nimport { setupEngine } from 'ember-engines/test-support';\n\nmodule('Integration | Component | hello-name', function(hooks) {\n  setupRenderingTest(hooks);\n  setupEngine(hooks, 'admin-engine')\n\n  test('it renders', async function(assert) {\n    await render(hbs`<HelloName @name=\"Tom\"/>`, { owner: this.engine });\n\n    assert.equal(this.element.textContent.trim(), 'Hello, Tom!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Helper for Lazy Engines in Ember\nDESCRIPTION: This code shows how to set up the test-helper.js file to preload engine assets before running tests for lazy engines. It uses the ember-asset-loader's preloadAssets function to ensure all engine resources are loaded before test execution begins.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-intro.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// <app-name>/tests/test-helper.js\nimport Application from '../app';\nimport config from '../config/environment';\nimport { setApplication } from '@ember/test-helpers';\nimport { start } from 'ember-qunit';\nimport preloadAssets from 'ember-asset-loader/test-support/preload-assets';\nimport manifest from '<app-name>/config/asset-manifest';\n\nsetApplication(Application.create(config.APP));\n\npreloadAssets(manifest).then(start); // This ensures all engine resources are loaded before the tests\n```\n\n----------------------------------------\n\nTITLE: Basic Route Configuration in routes.js\nDESCRIPTION: JavaScript code showing the basic structure of a routes.js file using the buildRoutes function to define Engine routes.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nimport buildRoutes from 'ember-engines/routes';\n\nexport default buildRoutes(function() {\n  // route map\n});\n```\n\n----------------------------------------\n\nTITLE: Linking to Engine Routes from Host Application\nDESCRIPTION: Demonstrates how to create a link to a route within an Engine from the host application, using the full route path including the Engine's mount point.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/links.md#2025-04-12_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<LinkTo @route=\"super-blog.posts.index\">Comments</LinkTo>\n```\n\n----------------------------------------\n\nTITLE: Defining External Routes in an Ember Engine\nDESCRIPTION: Shows how to define external route dependencies in an Ember Engine class. The example specifies 'home' and 'settings' as external routes that the engine needs to link to.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/link-to-external.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// super-blog/addon/engine.js\nexport default class SuperBlog extends Engine {\n  // ...\n  dependencies = {\n    externalRoutes: [\n      'home',\n      'settings'\n    ]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Stubbing Services in Engine Tests (JavaScript)\nDESCRIPTION: Demonstrates how to create and register a stub service for use in Ember Engine tests. This example stubs a location service with predefined data.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/acceptance/basic-test.js\nimport { module, test } from 'qunit';\nimport { setupApplicationTest } from 'ember-qunit';\nimport { visit, click, currentURL } from '@ember/test-helpers';\nimport Service from '@ember/service';\n\n//Stub location service\nclass LocationStub extends Service {\n  city = 'New York';\n  country = 'USA';\n  currentLocation = {\n    x: 1234,\n    y: 5678\n  };\n\n  getCurrentCity() {\n    return this.city;\n  }\n\n  getCurrentCountry() {\n    return this.country;\n  }\n}\n\nmodule('basic acceptance test', function(hooks) {\n  setupApplicationTest(hooks);\n\n  test('the user can visit home page', async function(assert) {\n    this.owner.register('service:location-service', LocationStub);\n\n    await visit('/');\n    await click('.user-menu-item');\n\n    assert.equal(currentURL(), '/users');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring index.js for an Engine Addon\nDESCRIPTION: JavaScript code for the index.js file that configures a standalone addon as an Engine using the buildEngine function, including setting the engine name and lazy loading options.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_13\n\nLANGUAGE: js\nCODE:\n```\n// index.js\n\nconst { buildEngine } = require('ember-engines/lib/engine-addon');\n\nmodule.exports = buildEngine({\n  name: 'super-blog',\n  lazyLoading: {\n    enabled: false\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Mounting Engine in Host Application Router (JavaScript)\nDESCRIPTION: Shows how to mount an Ember Engine in the host application's router. This is necessary for testing the engine within the context of the host application.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// <app-name>/app/router.js\nimport EmberRouter from '@ember/routing/router';\nimport config from './config/environment';\n\nexport default class Router extends EmberRouter {\n  location = config.locationType;\n  rootURL = config.rootURL;\n}\n\nRouter.map(function() {\n  this.mount('admin-engine', { path: '/admin' });\n});\n\nexport default Router;\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset URI Generation for Ember Engines Deployment\nDESCRIPTION: This code snippet demonstrates how to implement a generateURI function in the host application's ember-cli-build.js file. The function specifies the location to retrieve engine assets based on the environment, allowing for different asset URLs in production and development.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deploying.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// host-app/ember-cli-build.js\nlet app = new EmberApp(defaults, {\n  assetLoader: {\n    generateURI(filePath) {\n      if (EmberApp.env() === 'production') {\n        return `https://production.cdn.com/${filePath}`;\n      } else {\n        return `local/static/${filePath}`;\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Stubbing External Routes in Engine Tests (JavaScript)\nDESCRIPTION: Shows how to stub external routes in Ember Engine tests by overriding the router service. This example checks if the correct external route is triggered.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/acceptance/basic-test.js\nimport { module, test } from 'qunit';\nimport { setupApplicationTest } from 'ember-qunit';\nimport { visit, click, currentURL } from '@ember/test-helpers';\nimport Service from '@ember/service';\n\nmodule('basic acceptance test', function(hooks) {\n  setupApplicationTest(hooks);\n\n  test('the user can click on the home button and trigger external transition', async function(assert) {\n    this.owner.unregister('service:router');\n    this.owner.register(\n      'service:router',\n      class extends Service {\n        transitionToExternal(actual) {\n          let expected = 'home';\n          assert.equal(actual, expected);\n        }\n      }\n    );\n\n    await visit('/');\n    await click('.back-to-home');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Resolution in Ember Engine Host App\nDESCRIPTION: Example package.json configuration using Yarn resolutions to force a specific version of ember-power-select across all dependencies to prevent version conflicts.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/dependencies.md#2025-04-12_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"resolutions\": {\n    \"**/ember-power-select\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Engine Instance Mounting\nDESCRIPTION: Demonstrates mounting multiple instances of the same Engine using the 'as' property to specify different route names.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nRouter.map(function() {\n  this.mount('super-blog', { path: '/blog' });\n  this.mount('super-blog', { as: 'dev-blog', path: '/dev-blog' });\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Serializer for Lazy-Loaded Ember Engine in JavaScript\nDESCRIPTION: This code demonstrates how to replace a Route#serialize function with a route serializer for use in a lazy-loaded Ember Engine. It defines a serializePost function and uses it in the routes.js map to ensure proper URL serialization before the engine is loaded.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/lazy-loading.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nfunction serializePost(model) {\n  return { post_id: model.id };\n}\n\nexport default buildRoutes(function() {\n  this.route('post', { serialize: serializePost });\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Host Application Test for Engine Routing (JavaScript)\nDESCRIPTION: Demonstrates how to write an application test in the host application to verify routing to an mounted Ember Engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// <app-name>/tests/acceptance/basic-test.js\nimport { module, test } from 'qunit';\nimport { setupApplicationTest } from 'ember-qunit';\nimport { visit, click, currentURL } from '@ember/test-helpers';\n\nmodule('basic acceptance test', function(hooks) {\n  setupApplicationTest(hooks);\n\n  test('the user can visit /admin page', async function(assert) {\n    await visit('/');\n    await click('.admin-menu-item');\n\n    assert.equal(currentURL(), '/admin');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Service in an Engine with Computed Property\nDESCRIPTION: Example implementation of a service inside an Ember Engine. The service includes a 'foo' property and a computed property 'computedFoo' that depends on the 'foo' property.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-unit.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/services/some-thing-test.js\nimport Service from '@ember/service';\nimport { computed } from '@ember/object';\n\nexport default class SomeService extends Service {\n  foo = 'bar';\n\n  @computed('foo')\n  get computedFoo() {\n    return `computed ${this.foo}`;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring environment.js for an Engine\nDESCRIPTION: JavaScript code for the engine's environment.js file which defines environment-specific configuration including the modulePrefix.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_14\n\nLANGUAGE: js\nCODE:\n```\n// config/environment.js\n\n'use strict';\n\nmodule.exports = function(environment) {\n  const ENV = {\n    modulePrefix: 'super-blog',\n    environment: environment\n  }\n\n  return ENV;\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Routable Engine Mounting\nDESCRIPTION: Example of mounting a routable Engine in the application's Router map using the basic mount syntax.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nRouter.map(function() {\n  this.mount('super-blog');\n});\n```\n\n----------------------------------------\n\nTITLE: Writing Application Test for Engine Routing (JavaScript)\nDESCRIPTION: Demonstrates how to write an application test for routing within an Ember Engine. This test checks if the user can navigate to the users page.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/acceptance/basic-test.js\nimport { module, test } from 'qunit';\nimport { setupApplicationTest } from 'ember-qunit';\nimport { visit, click, currentURL } from '@ember/test-helpers';\n\nmodule('basic acceptance test', function(hooks) {\n  setupApplicationTest(hooks);\n\n  test('the user can visit home page', async function(assert) {\n    await visit('/');\n    await click('.user-menu-item');\n\n    assert.equal(currentURL(), '/users');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Routable Engine Mount Options\nDESCRIPTION: Example showing how to mount a routable Engine with custom path and namespace options.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nRouter.map(function() {\n  this.mount('super-blog', { resetNamespace: true, path: '/blog' });\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying Engine Dependencies in Dummy App (JavaScript)\nDESCRIPTION: Shows how to specify service dependencies for an Ember Engine in the dummy app configuration. This is necessary for stubbing services in tests.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/dummy/app/app.js\nimport Application from '@ember/application';\n\nexport default class App extends Application {\n  // ...\n  engines = {\n    'admin-engine': {\n      dependencies: {\n        services: [\n          'location-service'\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using setupEngine Helper for Engine Testing in Ember\nDESCRIPTION: This example demonstrates how to import and use the setupEngine helper for rendering or unit tests. The setupEngine helper loads and instantiates the specified engine, making it available through this.engine in test contexts.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-intro.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// tests/<integration or unit>/…\nimport { setupEngine } from 'ember-engines/test-support';\n```\n\nLANGUAGE: javascript\nCODE:\n```\nsetupEngine(hooks, '<engine-name>');\n```\n\n----------------------------------------\n\nTITLE: Mounting Engine in Dummy App Router (JavaScript)\nDESCRIPTION: Demonstrates how to mount an engine in the dummy app's router for testing purposes. This is the first step in setting up standalone engine tests.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/dummy/app/router.js\nimport EmberRouter from '@ember/routing/router';\nimport config from './config/environment';\n\nexport default class Router extends EmberRouter {\n  location = config.locationType;\n  rootURL = config.rootURL;\n}\n\nRouter.map(function() {\n  this.mount('admin-engine', { path: '/' });\n});\n\nexport default Router;\n```\n\n----------------------------------------\n\nTITLE: Linking to Routes from Within an Engine\nDESCRIPTION: Shows how to create links to routes from within an Engine, where the Engine's mount point is implicit and therefore omitted from the route path.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/links.md#2025-04-12_snippet_1\n\nLANGUAGE: handlebars\nCODE:\n```\n<LinkTo @route=\"posts.index\">Comments</LinkTo>\n```\n\n----------------------------------------\n\nTITLE: Defining Engine Routes (JavaScript)\nDESCRIPTION: Shows how to set up routes within an Ember Engine using the buildRoutes function from ember-engines.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport buildRoutes from 'ember-engines/routes';\n\nexport default buildRoutes(function() {\n  this.route('users');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring External Routes in the Host Application\nDESCRIPTION: Demonstrates how to configure the paths for external routes when mounting an engine in the host application. The host maps the engine's requested external routes to actual application routes.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/link-to-external.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// dummy/app/app.js\nimport Application from '@ember/application';\n\nexport default class App extends Application {\n  // ...\n  engines = {\n    'super-blog': {\n      dependencies: {\n        externalRoutes: {\n          home: 'home.index',\n          settings: 'settings.blog.index'\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unit Testing an Engine Service with setupEngine Helper\nDESCRIPTION: Demonstrates how to unit test a service from an Ember Engine using the setupEngine helper. This test verifies that the computedFoo property correctly concatenates the foo value after it's changed.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-unit.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// <app-name>/tests/unit/services/some-thing-test.js\n\nimport { module, test } from 'qunit';\nimport { setupTest } from 'ember-qunit';\nimport { setupEngine } from 'ember-engines/test-support';\n\nmodule('Unit | Service | some thing', function(hooks) {\n  setupTest(hooks);\n  setupEngine(hooks, 'admin-engine')\n\n  test('should correctly concat foo', function(assert) {\n    const someThing = this.engine.lookup('service:some-thing');\n    someThing.set('foo', 'baz');\n\n    assert.equal(someThing.get('computedFoo'), 'computed baz');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Specifying External Routes for Engine in Dummy App (JavaScript)\nDESCRIPTION: Demonstrates how to specify external route dependencies for an Ember Engine in the dummy app configuration. This is necessary for stubbing external routes in tests.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-acceptance.md#2025-04-12_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// admin-engine/tests/dummy/app/app.js\nimport Application from '@ember/application';\n\nexport default class App extends Application {\n  // ...\n  engines = {\n    'admin-engine': {\n      dependencies: {\n        externalRoutes: [\n          'home'\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using LinkToExternal Component in Handlebars Templates\nDESCRIPTION: Shows how to use the LinkToExternal component in Handlebars templates to create links to external routes defined in the engine configuration.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/link-to-external.md#2025-04-12_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<LinkToExternal @route=\"home\">Go Home</LinkToExternal>\n```\n\n----------------------------------------\n\nTITLE: Route-less Engine Mounting\nDESCRIPTION: Example of mounting a route-less Engine using the mount helper in a template.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_25\n\nLANGUAGE: handlebars\nCODE:\n```\n{{mount \"super-blog\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring In-Repo Engine Dependencies in package.json\nDESCRIPTION: Example package.json configuration for an in-repo engine that references another in-repo addon called 'common'. Shows how to set up dependencies between in-repo addons.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"super-blog\",\n\n  \"dependencies\": {\n    \"ember-cli-htmlbars\": \"*\",\n    \"ember-cli-babel\": \"*\"\n  },\n\n  \"ember-addon\": {\n    \"paths\": [\n      \"../common\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating the Engine.js File\nDESCRIPTION: Shell command to create the engine.js file in the addon directory, which is a key file that defines the Engine class.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ntouch addon/engine.js\n```\n\n----------------------------------------\n\nTITLE: Installing Engine Dependencies in a Standalone Engine\nDESCRIPTION: Command to install the ember-engines addon in a standalone engine, which provides support for Engine features not yet in Ember core.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd super-blog/\nember install ember-engines\n```\n\n----------------------------------------\n\nTITLE: Creating the routes.js File for Routable Engines\nDESCRIPTION: Shell command to create the routes.js file in the addon directory for defining the route map of a routable Engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ntouch addon/routes.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Cache Key for Addon Tree in Ember Engine\nDESCRIPTION: Example implementation of a custom cacheKeyForTree method for an Ember addon that has a custom treeForAddon hook. This ensures proper deduplication when the addon is used in both the host app and engines.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/addons.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst calculateCacheKeyForTree = require('calculate-cache-key-for-tree');\n\nmodule.exports = {\n  name: require('./package').name,\n\n  treeForAddon() {\n    // returns custom tree - overwriting this hook disables the default caching!\n  },\n\n  cacheKeyForTree(treeType) {\n    if (treeType === 'addon') {\n      return calculateCacheKeyForTree(treeType, this);\n    }\n\n    return this._super.cacheKeyForTree.apply(this, arguments);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Handlebars Component in Ember Engine\nDESCRIPTION: This snippet shows a basic Handlebars template for a component named 'hello-name' within an Ember Engine. It renders a greeting message with a dynamic name.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/testing-integration.md#2025-04-12_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n{{!--  admin-engine/addon/components/hello-name.hbs --}}\nHello, {{@name}}!\n```\n\n----------------------------------------\n\nTITLE: Dependency Resolution Table for Ember Engine and Host\nDESCRIPTION: A markdown table showing how different dependency scenarios are resolved between an Engine and its Host application. Demonstrates version conflict resolution, engine-only dependencies, and shared dependency bundling.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/bundling.md#2025-04-12_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Dependency Name | Engine A | Host |\n|=================|==========|======|\n| Foo             | v2       | v1   |\n| Bar             | v1       | N\\A  |\n| Baz             | v1       | v2   |\n| Qux             | v2       | v2   |\n```\n\n----------------------------------------\n\nTITLE: Basic Engine Template Example\nDESCRIPTION: A simple Handlebars template example showing the minimal content for an Engine's application template.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_21\n\nLANGUAGE: handlebars\nCODE:\n```\n<h3>Hello World!</h3>\n```\n\n----------------------------------------\n\nTITLE: Creating Engine Template Directory Structure\nDESCRIPTION: Shell commands to create the necessary directory structure and application template file for an Ember Engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nmkdir addon/templates\ntouch addon/templates/application.hbs\n```\n\n----------------------------------------\n\nTITLE: Asset Manifest JSON Structure for Lazy-Loaded Ember Engine\nDESCRIPTION: This JSON snippet illustrates the structure of an asset manifest file for a lazy-loaded Ember Engine. It specifies the URIs and types of assets (JS files) that need to be loaded for the engine to function properly.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/lazy-loading.md#2025-04-12_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bundles\": {\n    \"guide\": {\n      \"assets\": [\n        {\n          \"uri\": \"/engines-dist/<lazy-engine>/assets/engine-vendor.js\",\n          \"type\": \"js\"\n        },\n        {\n          \"uri\": \"/engines-dist/<lazy-engine>/assets/engine.js\",\n          \"type\": \"js\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to Engine Root using Application Route\nDESCRIPTION: Demonstrates linking to the Engine's root using the application route from within the Engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/links.md#2025-04-12_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n<LinkTo @route=\"application\">Goes to Blog Home</LinkTo>\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Standalone Engine Example\nDESCRIPTION: Example command showing how to create a standalone addon named 'super-blog' that will be converted into an engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nember addon super-blog\n```\n\n----------------------------------------\n\nTITLE: Linking to Engine Root using Index Route\nDESCRIPTION: Shows an alternative way to link to the Engine's root using the index route from within the Engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/links.md#2025-04-12_snippet_3\n\nLANGUAGE: handlebars\nCODE:\n```\n<LinkTo @route=\"index\">Also goes to Blog Home</LinkTo>\n```\n\n----------------------------------------\n\nTITLE: Using Programmatic External Routing APIs in Route Classes\nDESCRIPTION: Demonstrates how to use programmatic APIs like transitionToExternal in Route classes to navigate to external routes defined in the engine configuration.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/link-to-external.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport Route from \"@ember/routing/route\";\nimport { action } from '@ember/object';\n\nexport default class YourRoute extends Route {\n  @action\n  goHome() {\n    this.transitionToExternal('home');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring htmlbars Dependency in package.json\nDESCRIPTION: JSON configuration snippet showing how to add ember-cli-htmlbars as a dependency in the engine's package.json file for template compilation.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n\"dependencies\": {\n  \"ember-cli-htmlbars\": \"^1.1.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Ember Engines Guides (Shell)\nDESCRIPTION: Commands for setting up and running the Ember Engines guides project locally. This includes cloning the repository, installing dependencies, and starting the Ember development server.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/README.md#2025-04-12_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd ember-engines.com\nyarn install\nember serve\n```\n\n----------------------------------------\n\nTITLE: Generating Routes in an In-Repo Engine\nDESCRIPTION: Command to generate a route within an in-repo engine using the --in-repo flag to specify the target engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nember generate route <route-name> --in-repo <in-repo-name>\n```\n\n----------------------------------------\n\nTITLE: Generating Components in an In-Repo Engine\nDESCRIPTION: Command to generate a component within an in-repo engine using the --in-repo flag to specify the target engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nember generate component <component-name> --in-repo <in-repo-name>\n```\n\n----------------------------------------\n\nTITLE: Using the --in Flag for In-Repo Addon Generation\nDESCRIPTION: Command using the newer --in flag (ember-cli@3.7+) to specify a directory for component generation, which is useful for in-repo engines.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nember generate component awesome-sauce --in ./lib/foo\n```\n\n----------------------------------------\n\nTITLE: Output Paths for In-Repo Addon Generation\nDESCRIPTION: Shows the file paths that will be created when generating a component using the --in flag, including both addon files and test files.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nlib/foo/addon/components/awesome-sauce.js\nlib/foo/addon/templates/components/awesome-sauce.hbs\ntests/integration/components/awesome-sauce-test.js\n```\n\n----------------------------------------\n\nTITLE: Replacing transitionToExternal with router service in Ember Engine Route\nDESCRIPTION: Demonstrates migrating from the deprecated transitionToExternal method to using the EnginesRouterService. This change follows RFC #674 which deprecates similar transition methods in Ember.js core.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deprecations.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/routes/foo.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class FooRoute extends Route {\n  @service session;\n\n  beforeModel() {\n    if (!this.session.isAuthenticated) {\n      this.transitionToExternal('login');\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/routes/foo.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class FooRoute extends Route {\n  @service router;\n  @service session;\n\n  beforeModel() {\n    if (!this.session.isAuthenticated) {\n      this.router.transitionToExternal('login');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing replaceWithExternal with router service in Ember Engine Route\nDESCRIPTION: Shows how to migrate from the deprecated replaceWithExternal method to using the EnginesRouterService. This change aligns with RFC #674 which removes similar methods from Ember.js.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deprecations.md#2025-04-12_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/routes/foo.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class FooRoute extends Route {\n  @service session;\n\n  beforeModel() {\n    if (!this.session.isAuthenticated) {\n      this.replaceWithExternal('login');\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/routes/foo.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class FooRoute extends Route {\n  @service router;\n  @service session;\n\n  beforeModel() {\n    if (!this.session.isAuthenticated) {\n      this.router.replaceWithExternal('login');\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing transitionToExternalRoute with router service in Ember Engine Controller\nDESCRIPTION: Illustrates migrating from the deprecated transitionToExternalRoute controller method to using the EnginesRouterService. The updated implementation uses the router service's transitionToExternal method instead.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deprecations.md#2025-04-12_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/controllers/foo.js\nimport Controller from '@ember/controller';\n\nexport default class FooController extends Controller {\n  @action\n  async save({ title, text }) {\n    let post = this.store.createRecord('post', { title, text });\n    await post.save();\n    return this.transitionToExternalRoute('post', post.id);\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// my-engine/controllers/foo.js\nimport Route from '@ember/routing/route';\nimport { inject as service } from '@ember/service';\n\nexport default class FooRoute extends Route {\n  @service router;\n\n  @action\n  async save({ title, text }) {\n    let post = this.store.createRecord('post', { title, text });\n    await post.save();\n    return this.router.transitionToExternal('post', post.id);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using alias for injecting router service from host application\nDESCRIPTION: Shows the pattern change for injecting the router service from a host application into an engine. The new approach uses a service alias to maintain proper encapsulation between host and engine.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deprecations.md#2025-04-12_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends Application {\n  // ...\n  engines = {\n    'super-blog': {\n      dependencies: {\n        services: [\n          'router'\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends Application {\n  // ...\n  engines = {\n    'super-blog': {\n      dependencies: {\n        services: [\n          { 'host-router': 'router' }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using dash-case instead of camelCase for engine names in configuration\nDESCRIPTION: Demonstrates the change from camelized engine names to dash-case engine names in engine configuration. This aligns engine names with their actual package names as used in npm/Yarn/pnpm.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/deprecations.md#2025-04-12_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends Application {\n  // ...\n  engines = {\n    'superBlog': {\n      dependencies: {\n        services: [\n          'store'\n        ]\n      }\n    }\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class App extends Application {\n  // ...\n  engines = {\n    'super-blog': {\n      dependencies: {\n        services: [\n          'store'\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing @ember/legacy-built-in-components Dependency in package.json\nDESCRIPTION: This diff shows how to remove the @ember/legacy-built-in-components dependency which is no longer required for ember engines in v0.11.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/migrations.md#2025-04-12_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# package.json\n{\n    \"dependencies\": {\n-       \"@ember/legacy-built-in-components\": \"^0.5.0\",\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding ember-engines-router-service Dependency in package.json\nDESCRIPTION: This diff shows how to add the ember-engines-router-service dependency to enable router service injection within engines and access the full RouterService API.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/migrations.md#2025-04-12_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n# package.json\n{\n    \"dependencies\": {\n+       \"ember-engines-router-service\": \"^0.6.0\",\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsupported Query Param Only Router Service Transition in JavaScript\nDESCRIPTION: This code snippet shows the unsupported syntax for query param only router service transitions, which are not supported in v0.11 until upstream issues are resolved.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/migrations.md#2025-04-12_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nthis.router.transitionTo({ queryParams: { page: 1 }});\n```\n\n----------------------------------------\n\nTITLE: Supported Router Service Transition with Query Params in JavaScript\nDESCRIPTION: This code snippet demonstrates the correct syntax for router service transitions with query parameters that continues to be supported in v0.11.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/migrations.md#2025-04-12_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nthis.router.transitionTo('posts', { queryParams: { page: 1 }});\n```\n\n----------------------------------------\n\nTITLE: Destroying Routes from an In-Repo Engine\nDESCRIPTION: Command to remove a previously generated route from an in-repo engine using the destroy command with the --in-repo flag.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nember destroy route <route-name> --in-repo <in-repo-name>\n```\n\n----------------------------------------\n\nTITLE: Destroying Components from an In-Repo Engine\nDESCRIPTION: Command to remove a previously generated component from an in-repo engine using the destroy command with the --in-repo flag.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nember destroy component <component-name> --in-repo <in-repo-name>\n```\n\n----------------------------------------\n\nTITLE: Creating a Standalone Engine Addon\nDESCRIPTION: Command to create a new standalone addon that can be converted into an engine. This generates the base addon structure.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nember addon <engine-name>\n```\n\n----------------------------------------\n\nTITLE: Import Pattern Examples in JavaScript\nDESCRIPTION: Demonstrates the preferred import syntax using brace expansion for Ember packages, as specified in the style guidelines.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/CONTRIBUTING.md#2025-04-12_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { a, b } from '@ember/somepackage'\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Ember Engines Guides (URL)\nDESCRIPTION: The local URL where the Ember Engines guides can be accessed after starting the development server.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/README.md#2025-04-12_snippet_1\n\nLANGUAGE: url\nCODE:\n```\nhttp://localhost:4200\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific In-Repo Engine Example\nDESCRIPTION: Example command showing how to create an in-repo engine named 'super-blog'. This adds a lib directory with the super-blog engine structure.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/app/templates/docs/quickstart.md#2025-04-12_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nember g in-repo-engine super-blog\n```\n\n----------------------------------------\n\nTITLE: Setting Default Web Crawler Access Rules in robots.txt\nDESCRIPTION: Configures default access rules for web crawlers using the standard robots.txt format. Allows unrestricted access to all paths by specifying an empty Disallow directive.\nSOURCE: https://github.com/ember-engines/ember-engines.com/blob/master/tests/dummy/public/robots.txt#2025-04-12_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\n# http://www.robotstxt.org\nUser-agent: *\nDisallow:\n```"
  }
]