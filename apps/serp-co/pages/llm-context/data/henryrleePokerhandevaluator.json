[
  {
    "owner": "henryrlee",
    "repo": "pokerhandevaluator",
    "content": "TITLE: Using PH Evaluator for Card Evaluation\nDESCRIPTION: Example demonstrating how to use the evaluate_cards function to compare poker hands. The function accepts both card strings and numbers as input.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/python/README.md#2025-04-21_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom phevaluator.evaluator import evaluate_cards\n\np1 = evaluate_cards(\"9c\", \"4c\", \"4s\", \"9d\", \"4h\", \"Qc\", \"6c\")\np2 = evaluate_cards(\"9c\", \"4c\", \"4s\", \"9d\", \"4h\", \"2c\", \"9h\")\n\n# Player 2 has a stronger hand\nprint(f\"The rank of the hand in player 1 is {p1}\") # 292\nprint(f\"The rank of the hand in player 2 is {p2}\") # 236\n```\n\n----------------------------------------\n\nTITLE: Evaluating poker hands in C++\nDESCRIPTION: Code example showing how to evaluate two Texas Hold'em hands using the EvaluateCards method, which accepts cards as strings and returns a Rank object.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_10\n\nLANGUAGE: C++\nCODE:\n```\nphevaluator::Rank rank1 =\n  phevaluator::EvaluateCards(\"9c\", \"4c\", \"4s\", \"9d\", \"4h\", \"Qc\", \"6c\");\n\nphevaluator::Rank rank2 =\n  phevaluator::EvaluateCards(\"9c\", \"4c\", \"4s\", \"9d\", \"4h\", \"2c\", \"9c\");\n```\n\n----------------------------------------\n\nTITLE: Determining hand categories in C++\nDESCRIPTION: Code demonstrating how to determine the category of a poker hand (e.g., FULL_HOUSE, STRAIGHT, etc.) using both enum and string descriptions.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_13\n\nLANGUAGE: C++\nCODE:\n```\nassert(rank1.category() == FULL_HOUSE);\nassert(rank1.describeCategory() == \"Full House\");\n\nassert(rank2.category() == FULL_HOUSE);\nassert(rank2.describeCategory() == \"Full House\");\n```\n\n----------------------------------------\n\nTITLE: Getting sample hand description in C++\nDESCRIPTION: Code showing how to retrieve a string representation of the best 5-card hand from an evaluated 7-card hand.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_14\n\nLANGUAGE: C++\nCODE:\n```\nassert(rank2.describeSampleHand() == \"99944\");\n```\n\n----------------------------------------\n\nTITLE: Getting descriptive rank in C++\nDESCRIPTION: Code showing how to get a human-readable description of a poker hand rank (e.g., \"Nines Full over Fours\").\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_16\n\nLANGUAGE: C++\nCODE:\n```\nassert(rank2.describeRank() == \"Nines Full over Fours\");\n```\n\n----------------------------------------\n\nTITLE: Getting numeric rank values in C++\nDESCRIPTION: Code example showing how to retrieve the numeric rank values of evaluated hands, where lower values indicate stronger hands (1 is best, 7462 is worst).\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_12\n\nLANGUAGE: C++\nCODE:\n```\nint value1 = rank1.value(); // 292\nint value2 = rank2.value(); // 236\n```\n\n----------------------------------------\n\nTITLE: Comparing hand ranks in C\nDESCRIPTION: Code showing how to compare two hand rank values in C to determine which is stronger, where a smaller value indicates a stronger hand.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_19\n\nLANGUAGE: C\nCODE:\n```\nassert(rank1 > rank2); // rank2 is stronger\n```\n\n----------------------------------------\n\nTITLE: Evaluating 7-card hands in C\nDESCRIPTION: Code example showing how to evaluate 7-card poker hands using the C API's evaluate_7cards function, which accepts integer card representations.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_18\n\nLANGUAGE: C\nCODE:\n```\nint rank1 = evaluate_7cards(a, b, c, d, e, f, g); // 292\nint rank2 = evaluate_7cards(a, b, c, d, e, h, i); // 236\n```\n\n----------------------------------------\n\nTITLE: Checking for flush in C++\nDESCRIPTION: Code demonstrating how to check if an evaluated hand is a flush (all five cards of the same suit).\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_15\n\nLANGUAGE: C++\nCODE:\n```\nassert(!rank2.isFlush());\n```\n\n----------------------------------------\n\nTITLE: Getting hand category in C\nDESCRIPTION: Code demonstrating how to retrieve the category of a poker hand using the C API, both as an enum and as a string description.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_20\n\nLANGUAGE: C\nCODE:\n```\nenum rank_category category = get_rank_category(rank1);\nassert(category == FULL_HOUSE);\n\nconst char * categoryDesc = describe_rank_category(category); // \"Full House\"\n```\n\n----------------------------------------\n\nTITLE: Comparing hand ranks in C++\nDESCRIPTION: Code demonstrating how to compare two poker hand ranks to determine which is stronger, where a greater rank indicates a stronger hand.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_11\n\nLANGUAGE: C++\nCODE:\n```\nassert(rank1 < rank2); // rank2 is stronger\n```\n\n----------------------------------------\n\nTITLE: Getting sample hand in C\nDESCRIPTION: Code showing how to get a description of the best 5-card hand from an evaluated hand using the C API.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_21\n\nLANGUAGE: C\nCODE:\n```\ndescribe_sample_hand(rank2); // 9 9 9 4 4\n```\n\n----------------------------------------\n\nTITLE: Converting cards to integers in C\nDESCRIPTION: Code example showing how to convert poker cards to integer values for use with the C API, using the formula rank * 4 + suit.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_17\n\nLANGUAGE: C\nCODE:\n```\n// Community cards\nint a = 7 * 4 + 0; // 9c\nint b = 2 * 4 + 0; // 4c\nint c = 2 * 4 + 3; // 4s\nint d = 7 * 4 + 1; // 9d\nint e = 2 * 4 + 2; // 4h\n\n// Player 1\nint f = 10 * 4 + 0; // Qc\nint g = 4 * 4 + 0; // 6c\n\n// Player 2\nint h = 0 * 4 + 0; // 2c\nint i = 7 * 4 + 2; // 9h\n```\n\n----------------------------------------\n\nTITLE: Creating a Card object in C++\nDESCRIPTION: Code snippet demonstrating how to create a Card object in C++ by providing a two-character string representing the card's rank and suit.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_9\n\nLANGUAGE: C++\nCODE:\n```\nphevaluator::Card a = phevaluator::Card(\"Qc\");\n```\n\n----------------------------------------\n\nTITLE: Checking for flush in C\nDESCRIPTION: Code showing how to check if an evaluated hand is a flush using the C API's is_flush function.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_22\n\nLANGUAGE: C\nCODE:\n```\nis_flush(rank2); // false\n```\n\n----------------------------------------\n\nTITLE: Getting descriptive rank in C\nDESCRIPTION: Code demonstrating how to get a human-readable description of a poker hand rank using the C API's describe_rank function.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_23\n\nLANGUAGE: C\nCODE:\n```\ndescribe_rank(rank2); // Nines Full over Fours\n```\n\n----------------------------------------\n\nTITLE: Building Example Executables in CMake for Poker Hand Evaluator\nDESCRIPTION: Creates executable targets for various poker variants including 7-card evaluator and PLO variants, linking them to their respective libraries. Each example executable is conditionally built based on which variant is enabled in the build configuration.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(evaluator7_standalone_example\n  examples/evaluator7_standalone_example.cc\n)\ntarget_link_libraries(evaluator7_standalone_example pheval7)\n\nif (BUILD_PLO4)\n  add_executable(plo4_example\n    examples/plo4_example.cc\n  )\n  target_link_libraries(plo4_example phevalplo4)\n\n  add_executable(omaha_example\n    examples/omaha_example.cc\n  )\n  target_link_libraries(omaha_example phevalplo4)\nendif()\n\nif (BUILD_PLO5)\n  add_executable(plo5_example\n    examples/plo5_example.cc\n  )\n  target_link_libraries(plo5_example phevalplo5)\nendif()\n\nif (BUILD_PLO6)\n  add_executable(plo6_example\n    examples/plo6_example.cc\n  )\n  target_link_libraries(plo6_example phevalplo6)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running PHE Benchmark in Bash\nDESCRIPTION: Sample benchmark output showing the performance of the PHE evaluator across different poker hand types. The benchmark measures execution time for evaluating all possible combinations of 5, 6, and 7-card hands as well as random hand samples including PLO4, PLO5, and PLO6 variants.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ ./benchmark_phevaluator\n2023-09-02T11:51:57+10:00\nRunning ./benchmark_phevaluator\nRun on (12 X 2600 MHz CPU s)\nCPU Caches:\n  L1 Data 32 KiB\n  L1 Instruction 32 KiB\n  L2 Unified 256 KiB (x6)\n  L3 Unified 12288 KiB\nLoad Average: 2.17, 2.68, 2.67\n-------------------------------------------------------------------\nBenchmark                         Time             CPU   Iterations\n-------------------------------------------------------------------\nEvaluateAllFiveCards       33412347 ns     33377333 ns           21\nEvaluateAllSixCards       286893486 ns    286658500 ns            2\nEvaluateAllSevenCards    2229689783 ns   2224943000 ns            1\nEvaluateRandomFiveCards        1376 ns         1375 ns       501339\nEvaluateRandomSixCards         1550 ns         1549 ns       432192\nEvaluateRandomSevenCards       1778 ns         1777 ns       379830\nEvaluateRandomPlo4Cards        3054 ns         3014 ns       227197\nEvaluateRandomPlo5Cards        3300 ns         3202 ns       221414\nEvaluateRandomPlo6Cards        3441 ns         3313 ns       210607\n```\n\n----------------------------------------\n\nTITLE: Calculating Card ID Formula in Poker Hand Evaluator\nDESCRIPTION: A formula for converting a card's rank and suit into a unique integer ID. Ranks range from 0-12 (2 through Ace) and suits range from 0-3 (clubs, diamonds, hearts, spades), with the ID calculated as rank * 4 + suit.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_24\n\nLANGUAGE: markdown\nCODE:\n```\n`rank * 4 + suit`\n```\n\n----------------------------------------\n\nTITLE: Displaying Poker Hand Test Data CSV Format\nDESCRIPTION: Example of CSV test data format showing poker hand combinations and their rankings. Each row contains 5 cards in string notation (e.g., '2C' for 2 of Clubs) followed by the hand's rank value. This example demonstrates several combinations of four-of-a-kind with different kickers.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncard_1,card_2,card_3,card_4,card_5,rank\n2C,2D,2H,2S,3C,166\n2C,2D,2H,2S,3D,166\n2C,2D,2H,2S,3H,166\n2C,2D,2H,2S,3S,166\n2C,2D,2H,2S,4C,165\n2C,2D,2H,2S,4D,165\n2C,2D,2H,2S,4H,165\n2C,2D,2H,2S,4S,165\n2C,2D,2H,2S,5C,164\n```\n\n----------------------------------------\n\nTITLE: Installing Python PHE Library\nDESCRIPTION: Simple pip command to install the Python implementation of the Poker Hand Evaluator. The Python version supports 5-card, 6-card, and 7-card poker hands evaluation as well as Omaha poker variants.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip3 install phevaluator\n```\n\n----------------------------------------\n\nTITLE: Installing PH Evaluator Package\nDESCRIPTION: Commands for installing the phevaluator package either from PyPI or from source code.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/python/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install phevaluator\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install .\n```\n\n----------------------------------------\n\nTITLE: Building with CMake\nDESCRIPTION: Commands to build the library using CMake, which creates a build directory, generates CMake files, and builds the static library and unit tests.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p build\ncd build\ncmake ..\nmake\n```\n\n----------------------------------------\n\nTITLE: Main Library Configuration\nDESCRIPTION: Configures the main poker hand evaluator library 'pheval' with source files, include directories, and compilation options.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(pheval STATIC\n  src/card_sampler.cc\n  src/dptables.c\n  src/evaluator5.cc\n  src/evaluator5.c\n  src/evaluator6.cc\n  src/evaluator6.c\n  src/evaluator7.cc\n  src/evaluator7.c\n  src/tables_bitwise.c\n  src/hash.c\n  src/hashtable.c\n  src/hashtable5.c\n  src/hashtable6.c\n  src/hashtable7.c\n  src/rank.c\n  src/7462.c\n)\n```\n\n----------------------------------------\n\nTITLE: Linking the library with your code\nDESCRIPTION: Example command showing how to compile and link your source code with the poker hand evaluator library.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ng++ -I include/ -std=c++11 your_source_code.cc libpheval.a -o your_binary\n```\n\n----------------------------------------\n\nTITLE: Installing Poker Hand Evaluator Libraries in CMake\nDESCRIPTION: Configures the installation of the poker hand evaluator libraries for UNIX systems using GNUInstallDirs. Sets up proper installation paths for library files, archives, and public headers, with conditional installation for different poker variants based on build flags.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Install library\nif (UNIX)\n  include(GNUInstallDirs)\n  install(TARGETS pheval\n      EXPORT phevalTargets\n      LIBRARY DESTINATION ${CMAKE_INSTALL_DIR}\n      ARCHIVE DESTINATION ${CMAKE_INSTALL_DIR}\n      PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/phevaluator)\n\n  if (BUILD_PLO4)\n    install(TARGETS phevalplo4\n        EXPORT phevalTargets\n        LIBRARY DESTINATION ${CMAKE_INSTALL_DIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_DIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/phevaluator)\n  endif()\n\n  if (BUILD_PLO5)\n    install(TARGETS phevalplo5\n        EXPORT phevalTargets\n        LIBRARY DESTINATION ${CMAKE_INSTALL_DIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_DIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/phevaluator)\n  endif()\n\n  if (BUILD_PLO6)\n    install(TARGETS phevalplo6\n        EXPORT phevalTargets\n        LIBRARY DESTINATION ${CMAKE_INSTALL_DIR}\n        ARCHIVE DESTINATION ${CMAKE_INSTALL_DIR}\n        PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/phevaluator)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Package for Poker Hand Evaluator\nDESCRIPTION: Sets up the CMake find_package support for the poker hand evaluator library. Creates and installs the necessary configuration files to allow other CMake projects to find and use the library through find_package(phevaluator).\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n  #install find_package script\n  install(EXPORT phevalTargets\n    NAMESPACE phevaluator::\n    DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/phevaluator)\n\n  include(CMakePackageConfigHelpers)\n\n  configure_package_config_file(\n          ${CMAKE_CURRENT_SOURCE_DIR}/phevaluatorConfig.cmake.in\n          ${CMAKE_CURRENT_BINARY_DIR}/phevaluatorConfig.cmake\n          INSTALL_DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/phevaluator\n          PATH_VARS\n          CMAKE_INSTALL_LIBDIR)\n\n  write_basic_package_version_file(\n          ${CMAKE_CURRENT_BINARY_DIR}/phevaluatorConfigVersion.cmake\n          COMPATIBILITY SameMajorVersion)\n\n  install(FILES \"${CMAKE_CURRENT_BINARY_DIR}/phevaluatorConfig.cmake\"\n          \"${CMAKE_CURRENT_BINARY_DIR}/phevaluatorConfigVersion.cmake\"\n          DESTINATION \"${CMAKE_INSTALL_LIBDIR}/cmake/phevaluator\")\n```\n\n----------------------------------------\n\nTITLE: Building examples with GNU Make\nDESCRIPTION: Commands to compile the example code using GNU Make, which demonstrates how to use the library in practice.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd examples\nmake\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to run the test suite which verifies pre-calculated tables and evaluator functionality.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/python/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m unittest discover -v\n```\n\n----------------------------------------\n\nTITLE: Building only the library with CMake\nDESCRIPTION: Commands to build only the static library without tests, using the pheval target with CMake.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p build\ncd build\ncmake ..\nmake pheval\n```\n\n----------------------------------------\n\nTITLE: Linking to Algorithm Documentation in Markdown\nDESCRIPTION: This snippet creates a hyperlink in Markdown format to the Algorithm.md file, which contains detailed documentation about the poker hand evaluator's algorithm.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [Algorithm](Algorithm.md)\n```\n\n----------------------------------------\n\nTITLE: Building and Testing Package\nDESCRIPTION: Commands for building the package, installing it locally, and checking distribution files.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/python/README.md#2025-04-21_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npython -m build\npip install dist/*.whl\npython -m twine check dist/*\n```\n\n----------------------------------------\n\nTITLE: Building C++ Code for PHEvaluator\nDESCRIPTION: Commands to build the C++ components of the PHEvaluator project using CMake.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd cpp\nmkdir -p build\ncd build\ncmake ..\nmake\n```\n\n----------------------------------------\n\nTITLE: Testing Configuration\nDESCRIPTION: Sets up Google Test and Google Benchmark frameworks for unit testing and performance benchmarking of the poker evaluator libraries.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nif (BUILD_TESTS)\n  include(FetchContent)\n  FetchContent_Declare(\n    googletest\n    GIT_REPOSITORY https://github.com/google/googletest.git\n    GIT_TAG        release-1.12.1\n  )\n  set(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\n  set(INSTALL_GTEST OFF CACHE BOOL \"\" FORCE)\n\n  FetchContent_Declare(\n    googlebenchmark\n    GIT_REPOSITORY https://github.com/google/benchmark.git\n    GIT_TAG        v1.8.0\n  )\n  set(BENCHMARK_ENABLE_INSTALL OFF CACHE BOOL \"\" FORCE)\n  FetchContent_MakeAvailable(googletest googlebenchmark)\n```\n\n----------------------------------------\n\nTITLE: Running unit tests\nDESCRIPTION: Command to execute the unit tests after building the library to verify its functionality.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./unit_tests\n```\n\n----------------------------------------\n\nTITLE: Running C++ Tests for PHEvaluator\nDESCRIPTION: Command to run the unit tests for the C++ implementation.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd cpp/build\n./unit_tests\n```\n\n----------------------------------------\n\nTITLE: Build Options Configuration\nDESCRIPTION: Defines build options for different card evaluator libraries, tests, and examples using CMake options.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\noption(BUILD_CARD5 \"Build 5-card standalone library\" ON)\noption(BUILD_CARD6 \"Build 6-card standalone library\" ON)\noption(BUILD_CARD7 \"Build 7-card standalone library\" ON)\noption(BUILD_PLO4 \"Build PLO4 library\" ON)\noption(BUILD_PLO5 \"Build PLO5 library\" ON)\noption(BUILD_PLO6 \"Build PLO6 library\" ON)\noption(BUILD_TESTS \"Build test ON/OFF\" ON)\noption(BUILD_EXAMPLES \"Build examples ON/OFF\" ON)\n```\n\n----------------------------------------\n\nTITLE: Building in Windows without tests\nDESCRIPTION: Commands for building the library in Windows without Google Test dependencies by disabling the test build option.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p build\ncd build\ncmake -DBUILD_TESTS=OFF ..\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests\nDESCRIPTION: Command to discover and run all Python unit tests with verbose output.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 -m unittest discover -v\n```\n\n----------------------------------------\n\nTITLE: Setting C++ and C Standards\nDESCRIPTION: Configures the C++ standard to C++11 and C standard to C99 for the project compilation.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_STANDARD 11)\n\nset(CMAKE_C_STANDARD 99)\n```\n\n----------------------------------------\n\nTITLE: Running Python Type Checking\nDESCRIPTION: Command to perform static type checking on Python code using mypy.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmypy .\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup\nDESCRIPTION: Commands for setting up the development environment with pre-commit hooks and installing dependencies.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/python/README.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install pre-commit\npre-commit install\n```\n\nLANGUAGE: shell\nCODE:\n```\npip install '.[dev]'\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project Settings for Poker Hand Evaluator\nDESCRIPTION: Basic CMake configuration that sets up the project with version 0.6.0 and configures it for Release build. Requires CMake version 3.14 or higher.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/CMakeLists.txt#2025-04-21_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nproject(PokerHandEvaluator VERSION 0.6.0)\n\nset(CMAKE_BUILD_TYPE  \"Release\")\n```\n\n----------------------------------------\n\nTITLE: Building without PLO6 support\nDESCRIPTION: Command to build the library without Pot Limit Omaha 6 support using CMake configuration to reduce memory usage during compilation.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncmake -DBUILD_PLO6=OFF .. ; make\n```\n\n----------------------------------------\n\nTITLE: Precomputing Dynamic Programming Table for Fast Binary Hashing in C\nDESCRIPTION: This code precomputes a 3D lookup table for a binary hash function. It calculates values for all possible 16-bit binary blocks, positions, and bit counts to enable faster hash computation for 52-bit binary representations of poker hands.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_4\n\nLANGUAGE: c\nCODE:\n```\n{\n  int dp[65536][4][8];\n\n  for (i=0; i<65536; i++) {\n    for (j=0; j<4; j++) {\n      for (k=0; k<8; k++) {\n        int ck = k;\n        int s;\n        int sum = 0;\n\n        for (s=15; s>=0; s--) {\n          if (i & (1 << s)) {\n            int n = j*16 + s;\n\n            sum += choose[n][ck];\n\n            ck--;\n          }\n        }\n\n        dp[i][j][k] = sum;\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fast Binary Hash Function for Poker Hand Evaluation in C\nDESCRIPTION: This optimized hash function computes the lexicographical position of a 64-bit poker hand representation by splitting it into 16-bit blocks and looking up precomputed values. It performs only 4 summations and 3 decrements, making it computationally efficient.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_5\n\nLANGUAGE: c\nCODE:\n```\nint fast_hash(unsigned long long handid, int k)\n{\n  int hash = 0;\n\n  unsigned short * a = (unsigned short *)&handid;\n\n  hash += dp_fast[a[3]][3][k];\n  k -= bitcount[a[3]];\n\n  hash += dp_fast[a[2]][2][k];\n  k -= bitcount[a[2]];\n\n  hash += dp_fast[a[1]][1][k];\n  k -= bitcount[a[1]];\n\n  hash += dp_fast[a[0]][0][k];\n\n  return hash;\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing N-Bit Binary with K Ones in C\nDESCRIPTION: This function implements the HashNBinaryKSum algorithm, which computes the position of a binary number in the lexicographical ordering of all n-bit binaries with exactly k bits set to 1. It uses a loop to optimize the recursive solution.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_0\n\nLANGUAGE: c\nCODE:\n```\nint hash_binary(unsigned char q[], int len, int k)\n{\n  int sum = 0;\n  int i;\n\n  for (i=0; i<len; i++)\n  {\n    if (q[i])\n    {\n      if (len-i-1 >= k)\n        sum += choose[len-i-1][k];\n\n      k--;\n\n      if (k == 0)\n        break;\n    }\n  }\n\n  return ++sum;\n}\n```\n\n----------------------------------------\n\nTITLE: Hashing a Restricted Quinary Representation of Poker Hands in C\nDESCRIPTION: This function calculates the position of a quinary representation in the lexicographical ordering of all possible valid quinaries. Each digit represents the count of cards of a specific rank, with the sum of all digits equal to 7.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_3\n\nLANGUAGE: c\nCODE:\n```\nint hash_quinary(unsigned char q[], int len, int k)\n{\n  int sum = 0;\n  int i;\n\n  for (i=0; i<len; i++) {\n    sum += dp[q[i]][len-i-1][k];\n\n    k -= q[i];\n\n    if (k <= 0)\n      break;\n  }\n\n  return ++sum;\n}\n```\n\n----------------------------------------\n\nTITLE: 7-Card Poker Hand Binary Representation\nDESCRIPTION: This example shows how a 7-card poker hand can be represented as a 52-bit binary, where each bit corresponds to a specific card in the deck. The binary has exactly 7 bits set to 1, representing the cards in the hand.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n |   Spades   |   Hearts   |  Diamonds  |   Clubs   |\n 23456789TJQKA23456789TJQKA23456789TJQKA23456789TJQKA\n 0001010010000000100000000000000000010000010000000001\n```\n\n----------------------------------------\n\nTITLE: Computing dp[1][i][j] Entries for Quinary Hashing in Pseudocode\nDESCRIPTION: This pseudocode computes values for dp[1][i][j], which represents counts of valid quinaries in ranges starting from 0. It iterates through possible values for each digit and sums up the results from smaller subproblems.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_8\n\nLANGUAGE: pseudocode\nCODE:\n```\n  for each i in [2, 13] and j in [2, 7]:\n    dp[1][i][j] = SUM{k:[0,4]}dp[1][i-1][j-k];\n```\n\n----------------------------------------\n\nTITLE: Problem Definition for HashNQuinaryKSum\nDESCRIPTION: This text block defines the HashNQuinaryKSum problem, which involves finding the lexicographical position of a quinary number with specific constraints. It forms the basis for the quinary hash function used in poker hand evaluation.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n Problem: HashNQuinaryKSum\n\n Input: integer n, integer k, an (n+1)-bit quinary with the sum of all bits\n  equal to k\n\n Output: the position of the quinary in the lexicographical ordering of all\n  (n+1)-bit quinaries with sum of all bits equal to k\n```\n\n----------------------------------------\n\nTITLE: Edge Case Initialization for Quinary Hashing in Pseudocode\nDESCRIPTION: This pseudocode initializes the edge cases in the dynamic programming array where k=0 or k=1, which represent quinary representations with sum 0 or 1. These cases have simple, predictable patterns based on the number of digits.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_7\n\nLANGUAGE: pseudocode\nCODE:\n```\n  for each i in [2, 13]:\n    dp[1][i][1] = i;\n    dp[1][i][0] = 1;\n```\n\n----------------------------------------\n\nTITLE: Problem Definition for HashNBinaryKSum\nDESCRIPTION: This text block defines the HashNBinaryKSum problem, which involves finding the lexicographical position of a binary number with exactly k bits set to 1. This forms the basis for the binary hash function used in poker hand evaluation.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_11\n\nLANGUAGE: text\nCODE:\n```\n Problem: HashNBinaryKSum\n\n Input: integer n, integer k, an n-bit binary with exactly k bits set to 1\n\n Output: the position of the binary in the lexicographical ordering of all n-bit\n binaries with exactly k bits of ones\n```\n\n----------------------------------------\n\nTITLE: Computing General Case for Quinary Hashing in Pseudocode\nDESCRIPTION: This pseudocode computes the general case for the dynamic programming array used in quinary hashing. It splits the problem into smaller subproblems by considering different leading digits and remaining sums.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_9\n\nLANGUAGE: pseudocode\nCODE:\n```\n  for each l in [2, 4] and i in [1, 13] and j in [0, 7]:\n    dp[l][i][j] = dp[l-1][i][j] + dp[1][i][j-l+1]\n```\n\n----------------------------------------\n\nTITLE: Base Case Initialization for Quinary Hashing in Pseudocode\nDESCRIPTION: This pseudocode initializes the base cases for the dynamic programming array used in quinary hash computation. It handles the special cases where the quinary representation has only one digit or specific sum constraints.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_6\n\nLANGUAGE: pseudocode\nCODE:\n```\n  if 0 <= i <= 4:\n    dp[1][1][i] = 1;\n  if i > 4:\n    dp[1][1][i] = 0;\n```\n\n----------------------------------------\n\nTITLE: Flush Evaluation Example\nDESCRIPTION: This example demonstrates how to evaluate a poker hand for flushes by maintaining counters and binaries for each suit. It shows the state of these counters and binaries for a sample hand containing a flush in Spades.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/Documentation/Algorithm.md#2025-04-21_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n Spades:     counter 5, binary 0000101101100\n Hearts:     counter 0, binary 0000000000000\n Clubs:      counter 1, binary 1000000000000\n Diamonds:   counter 1, binary 0001000000000\n```\n\n----------------------------------------\n\nTITLE: Library files generated after compilation\nDESCRIPTION: List of static library files generated during the build process, each serving different poker evaluation needs.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nlibpheval.a      # library pheval\nlibpheval5.a     # library pheval5\nlibpheval6.a     # library pheval6\nlibpheval7.a     # library pheval7\nlibphevalplo4.a  # library phevalplo4\nlibphevalplo5.a  # library phevalplo5\nlibphevalplo6.a  # library phevalplo6\n```\n\n----------------------------------------\n\nTITLE: Changing to cpp directory in shell\nDESCRIPTION: Command to change to the cpp directory where the library code is located. This is a prerequisite for the build process.\nSOURCE: https://github.com/henryrlee/pokerhandevaluator/blob/develop/cpp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncd cpp\n```"
  }
]