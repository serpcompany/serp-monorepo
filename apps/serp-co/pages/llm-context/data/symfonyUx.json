[
  {
    "owner": "symfony",
    "repo": "ux",
    "content": "TITLE: Creating LiveComponent for BlogPost Collection Management\nDESCRIPTION: Implements a Twig component with LiveActions to dynamically add and remove items from a collection form, manipulating formValues to update the form state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_74\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig;\n\nuse App\\Entity\\BlogPost;\nuse App\\Entity\\Comment;\nuse App\\Form\\BlogPostFormType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\ComponentWithFormTrait;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent]\nclass BlogPostCollectionType extends AbstractController\n{\n    use ComponentWithFormTrait;\n    use DefaultActionTrait;\n\n    #[LiveProp]\n    public Post $initialFormData;\n\n    protected function instantiateForm(): FormInterface\n    {\n        return $this->createForm(BlogPostFormType::class, $this->initialFormData);\n    }\n\n    #[LiveAction]\n    public function addComment()\n    {\n        // \"formValues\" represents the current data in the form\n        // this modifies the form to add an extra comment\n        // the result: another embedded comment form!\n        // change \"comments\" to the name of the field that uses CollectionType\n        $this->formValues['comments'][] = [];\n    }\n\n    #[LiveAction]\n    public function removeComment(#[LiveArg] int $index)\n    {\n        unset($this->formValues['comments'][$index]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Product Search Component Template in Twig\nDESCRIPTION: Shows the Twig template for the live product search component. It includes an input field for the search query and a list to display search results.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{# templates/components/ProductSearch.html.twig #}\n{# for the Live Component to work, there must be a single root element\n   (e.g. a <div>) where the attributes are applied to #}\n<div {{ attributes }}>\n    <input\n        type=\"search\"\n        data-model=\"query\"\n    >\n\n    <ul>\n        {% for product in this.products %}\n            <li>{{ product.name }}</li>\n        {% endfor %}\n    </ul>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using PreMount Hook for Data Validation\nDESCRIPTION: Demonstrates how to use a PreMount hook to validate and modify data before it's mounted on a component. Uses OptionsResolver to validate prop types and values.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_30\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\UX\\TwigComponent\\Attribute\\PreMount;\n// ...\n\n#[AsTwigComponent]\nclass Alert\n{\n    public string $message;\n    public string $type = 'success';\n\n    #[PreMount]\n    public function preMount(array $data): array\n    {\n        // validate data\n        $resolver = new OptionsResolver();\n        $resolver->setIgnoreUndefined(true);\n\n        $resolver->setDefaults(['type' => 'success']);\n        $resolver->setAllowedValues('type', ['success', 'danger']);\n        $resolver->setRequired('message');\n        $resolver->setAllowedTypes('message', 'string');\n\n        return $resolver->resolve($data) + $data;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Twig Component to Live Component in PHP\nDESCRIPTION: Shows how to transform a regular Twig component into a live component by changing the attribute and adding the DefaultActionTrait.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\n- use Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n+ use Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\n+ use Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n- #[AsTwigComponent]\n+ #[AsLiveComponent]\n  class RandomNumber\n  {\n+     use DefaultActionTrait;\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Action in PHP Component\nDESCRIPTION: Shows how to add a custom action to a Live Component using the LiveAction attribute to handle user interactions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_50\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nnamespace App\\Twig\\Components;\n\n// ...\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\n\nclass RandomNumber\n{\n    // ...\n\n    #[LiveAction]\n    public function resetMax()\n    {\n        $this->max = 1000;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Product Search Component in PHP\nDESCRIPTION: Demonstrates how to create a live product search component using Symfony UX Live Components. It includes LiveProps and a method to fetch products based on the search query.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Twig/Components/ProductSearch.php\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent]\nclass ProductSearch\n{\n    use DefaultActionTrait;\n\n    #[LiveProp(writable: true)]\n    public string $query = '';\n\n    public function __construct(private ProductRepository $productRepository)\n    {\n    }\n\n    public function getProducts(): array\n    {\n        // example method that returns an array of Products\n        return $this->productRepository->search($this->query);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making LiveProp Writable in PHP\nDESCRIPTION: Shows how to make a LiveProp writable to allow user input to update the component state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n  // src/Twig/Components/RandomNumber.php\n  // ...\n\n  class RandomNumber\n  {\n      // ...\n\n-     #[LiveProp]\n+     #[LiveProp(writable: true)]\n      public int $max = 1000;\n\n      // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Error Validation Display in Twig Templates\nDESCRIPTION: Demonstrates how to display validation errors in a Twig template using the _errors variable, including styling form elements based on validation state and implementing a submit button with live actions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_89\n\nLANGUAGE: twig\nCODE:\n```\n{% if _errors.has('post.content') %}\n    <div class=\"error\">\n        {{ _errors.get('post.content') }}\n    </div>\n{% endif %}\n<textarea\n    data-model=\"post.content\"\n    class=\"{{ _errors.has('post.content') ? 'is-invalid' : '' }}\"\n></textarea>\n\n{% if _errors.has('agreeToTerms') %}\n    <div class=\"error\">\n        {{ _errors.get('agreeToTerms') }}\n    </div>\n{% endif %}\n<input type=\"checkbox\" data-model=\"agreeToTerms\" class=\"{{ _errors.has('agreeToTerms') ? 'is-invalid' : '' }}\"/>\n\n<button\n    type=\"submit\"\n    data-action=\"live#action:prevent\"\n    data-live-action-param=\"save\"\n>Save</button>\n```\n\n----------------------------------------\n\nTITLE: Deferring Re-Render with norender Modifier in HTML+Twig\nDESCRIPTION: Shows how to use the norender modifier to update the internal value of a property without immediately re-rendering the component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: html+twig\nCODE:\n```\n<input data-model=\"norender|max\">\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in a Live Component\nDESCRIPTION: A PHP class that implements validation for a live component without using Symfony's form component, using ValidatableComponentTrait and validation constraints.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_88\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\User;\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\ValidatableComponentTrait;\n\n#[AsLiveComponent]\nclass EditUser\n{\n    use ValidatableComponentTrait;\n\n    #[LiveProp(writable: ['email', 'plainPassword'])]\n    #[Assert\\Valid]\n    public User $user;\n\n     #[LiveProp]\n     #[Assert\\IsTrue]\n    public bool $agreeToTerms = false;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Checkboxes for Boolean and Array Values in PHP and HTML+Twig\nDESCRIPTION: Demonstrates how to use checkboxes to set boolean and array values using LiveProps in PHP and HTML+Twig.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n#[AsLiveComponent]\nclass EditPost\n{\n    #[LiveProp(writable: true)]\n    public bool $agreeToTerms = false;\n\n    #[LiveProp(writable: true)]\n    public array $foods = ['pizza', 'tacos'];\n}\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n<input type=\"checkbox\" data-model=\"agreeToTerms\">\n\n<input type=\"checkbox\" data-model=\"foods[]\" value=\"pizza\">\n<input type=\"checkbox\" data-model=\"foods[]\" value=\"tacos\">\n<input type=\"checkbox\" data-model=\"foods[]\" value=\"sushi\">\n```\n\n----------------------------------------\n\nTITLE: Deferred Loading of Symfony Live Components with HTML Syntax\nDESCRIPTION: Demonstrates how to defer the loading of heavy components until after the page has loaded using the loading=\"defer\" attribute with the HTML syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_92\n\nLANGUAGE: twig\nCODE:\n```\n{# With the HTML syntax #}\n<twig:SomeHeavyComponent loading=\"defer\" />\n```\n\n----------------------------------------\n\nTITLE: Using Select and Radio Elements for LiveProps in PHP and HTML+Twig\nDESCRIPTION: Shows how to use select and radio elements to set single or multiple values for LiveProps in PHP and HTML+Twig.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n#[AsLiveComponent]\nclass EditPost\n{\n    // ...\n\n    #[LiveProp(writable: true)]\n    public string $meal = 'lunch';\n\n    #[LiveProp(writable: true)]\n    public array $foods = ['pizza', 'tacos'];\n}\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n<input type=\"radio\" data-model=\"meal\" value=\"breakfast\">\n<input type=\"radio\" data-model=\"meal\" value=\"lunch\">\n<input type=\"radio\" data-model=\"meal\" value=\"dinner\">\n\n<select data-model=\"foods\" multiple>\n    <option value=\"pizza\">Pizza</option>\n    <option value=\"tacos\">Tacos</option>\n    <option value=\"sushi\">Sushi</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Testing Live Components with InteractsWithLiveComponents Trait in PHP\nDESCRIPTION: Demonstrates how to use the InteractsWithLiveComponents trait for testing live components, including rendering, calling actions, emitting events, and submitting forms.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_157\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\UX\\LiveComponent\\Test\\InteractsWithLiveComponents;\n\nclass MyComponentTest extends KernelTestCase\n{\n    use InteractsWithLiveComponents;\n\n    public function testCanRenderAndInteract(): void\n    {\n        $testComponent = $this->createLiveComponent(\n            name: 'MyComponent', // can also use FQCN (MyComponent::class)\n            data: ['foo' => 'bar'],\n        );\n\n        // render the component html\n        $this->assertStringContainsString('Count: 0', $testComponent->render());\n\n        // call live actions\n        $testComponent\n            ->call('increase')\n            ->call('increase', ['amount' => 2]) // call a live action with arguments\n        ;\n\n        $this->assertStringContainsString('Count: 3', $testComponent->render());\n\n        // call live action with file uploads\n        $testComponent\n            ->call('processUpload', files: ['file' => new UploadedFile(...)]);\n\n        // emit live events\n        $testComponent\n            ->emit('increaseEvent')\n            ->emit('increaseEvent', ['amount' => 2]) // emit a live event with arguments\n        ;\n\n        // set live props\n        $testComponent\n            ->set('count', 99)\n        ;\n\n        // Submit form data ('my_form' for your MyFormType form)\n        $testComponent\n            ->submitForm(['my_form' => ['input' => 'value']], 'save');\n\n        $this->assertStringContainsString('Count: 99', $testComponent->render());\n\n        // refresh the component\n        $testComponent->refresh();\n\n        // access the component object (in its current state)\n        $component = $testComponent->component(); // MyComponent\n\n        $this->assertSame(99, $component->count);\n\n        // test a live action that redirects\n        $response = $testComponent->call('redirect')->response(); // Symfony\\Component\\HttpFoundation\\Response\n\n        $this->assertSame(302, $response->getStatusCode());\n\n        // authenticate a user ($user is instance of UserInterface)\n        $testComponent->actingAs($user);\n\n        // set the '_locale' route parameter (if the component route is localized)\n        $testComponent->setRouteLocale('fr');\n\n        // customize the test client\n        $client = self::getContainer()->get('test.client');\n\n        // do some stuff with the client (ie login user via form)\n\n        $testComponent = $this->createLiveComponent(\n            name: 'MyComponent',\n            data: ['foo' => 'bar'],\n            client: $client,\n        );\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering React Components in Twig\nDESCRIPTION: Examples of rendering React components in Twig templates, including basic usage and components in subdirectories.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/home.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <div {{ react_component('Hello', { fullName: 'Fabien' }) }}>\n        Loading... <i class=\"fas fa-cog fa-spin fa-3x\"></i>\n    </div>\n\n    {# Component living in a subdirectory: \"assets/react/controllers/Admin/OtherComponent\" #}\n    <div {{ react_component('Admin/OtherComponent') }}></div>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using JavaScript Component Lifecycle Hooks\nDESCRIPTION: Example of using LiveComponent JavaScript hooks to run code during specific points in the component lifecycle, such as after rendering.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/some-custom-controller.js\n// ...\nimport { getComponent } from '@symfony/ux-live-component';\n\nexport default class extends Controller {\n    async initialize() {\n        this.component = await getComponent(this.element);\n\n        this.component.on('render:finished', (component) => {\n            // do something after the component re-renders\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Writable Entity LiveProp in HTML+Twig Select\nDESCRIPTION: Shows how to use a writable entity LiveProp in a select element to switch between entities.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_28\n\nLANGUAGE: html+twig\nCODE:\n```\n<select data-model=\"post\">\n    {% for post in posts %}\n        <option value=\"{{ post.id }}\">{{ post.title }}</option>\n    {% endfor %}\n</select>\n```\n\n----------------------------------------\n\nTITLE: Basic Loading State Indicators for LiveComponents\nDESCRIPTION: HTML examples showing how to display or hide elements while a LiveComponent is loading or processing.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_42\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- show only when the component is loading -->\n<span data-loading>Loading</span>\n\n<!-- equivalent, longer syntax -->\n<span data-loading=\"show\">Loading</span>\n```\n\n----------------------------------------\n\nTITLE: Custom Hydration Methods for DTOs in LiveComponents\nDESCRIPTION: Example of taking full control over DTO hydration by specifying custom methods with hydrateWith and dehydrateWith options on LiveProp.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_34\n\nLANGUAGE: php\nCODE:\n```\nclass ComponentWithAddressDto\n{\n    #[LiveProp(hydrateWith: 'hydrateAddress', dehydrateWith: 'dehydrateAddress')]\n    public AddressDto $addressDto;\n\n    public function dehydrateAddress(AddressDto $address)\n    {\n        return [\n            'street' => $address->street,\n            'city' => $address->city,\n            'state' => $address->state,\n        ];\n    }\n\n    public function hydrateAddress($data): AddressDto\n    {\n        return new AddressDto($data['street'], $data['city'], $data['state']);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Browser Events from Components\nDESCRIPTION: Shows how to dispatch browser/JavaScript events from a PHP component, which can be used to trigger actions in Stimulus controllers or other JavaScript code.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_122\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\LiveComponent\\ComponentToolsTrait;\n// ...\n\nclass MyComponent\n{\n    use ComponentToolsTrait;\n\n    #[LiveAction]\n    public function saveProduct()\n    {\n        // ...\n\n        $this->dispatchBrowserEvent('modal:close');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listeners in Components\nDESCRIPTION: Shows how to listen for events in a component using the LiveListener attribute, which allows a component to respond when events are emitted by other components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_114\n\nLANGUAGE: php\nCODE:\n```\n#[LiveProp]\npublic int $productCount = 0;\n\n#[LiveListener('productAdded')]\npublic function incrementProductCount()\n{\n    $this->productCount++;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Binding in Twig Template\nDESCRIPTION: Demonstrates how to implement data binding in a Twig template using the data-model attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{# templates/components/RandomNumber.html.twig #}\n<div {{ attributes }}>\n    <input type=\"number\" data-model=\"max\">\n\n    Generating a number between 0 and {{ max }}\n    <strong>{{ this.randomNumber }}</strong>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Data in Listeners with LiveArg\nDESCRIPTION: Shows how to access data passed with an event in a listener method using the LiveArg attribute, enabling components to receive scalar values from emitted events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_117\n\nLANGUAGE: php\nCODE:\n```\n#[LiveListener('productAdded')]\npublic function incrementProductCount(#[LiveArg] int $product)\n{\n    $this->productCount++;\n    $this->lastProductId = $product;\n}\n```\n\n----------------------------------------\n\nTITLE: Using addCollectionItem Method in Symfony Live Component\nDESCRIPTION: This snippet shows how to use the addCollectionItem method from the LiveCollectionTrait to dynamically add entries to a collection field in a form. It demonstrates adding multiple items to the 'children' field and then submitting the form with data for each added entry.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_159\n\nLANGUAGE: php\nCODE:\n```\n// Call the addCollectionItem method as many times as needed, specifying the name of the collection field.\n    $component->call('addCollectionItem', ['name' => 'children']);\n    $component->call('addCollectionItem', ['name' => 'children']);\n    //... can be called as many times as you need entries in your 'children' field\n\n    // ... then submit the form by providing data for all the fields in the ChildFormType for each added entry:\n    $component->submitForm([ 'live_collection_form' => [\n        'children' => [\n            ['name' => 'childName1', 'age' => 10],\n            ['name' => 'childName2', 'age' => 15],\n        ]\n    ]]);\n```\n\n----------------------------------------\n\nTITLE: Creating a PHP Service-based Twig Component\nDESCRIPTION: Demonstrates how to create a FeaturedProducts component that uses dependency injection to fetch data from a repository. Shows how components work as services with autowiring.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/FeaturedProducts.php\nnamespace App\\Twig\\Components;\n\nuse App\\Repository\\ProductRepository;\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n\n#[AsTwigComponent]\nclass FeaturedProducts\n{\n    public function __construct(private ProductRepository $productRepository)\n    {\n    }\n\n    public function getProducts(): array\n    {\n        // an example method that returns an array of Products\n        return $this->productRepository->findFeatured();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: InvoiceLineItemForm LiveComponent with Event Emission\nDESCRIPTION: Defines a LiveComponent for invoice line items with PostMount hook to initialize data and a LiveAction for saving that emits events to parent components when new items are created.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_142\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/InvoiceLineItemForm.php\n// ...\n\n#[AsLiveComponent]\nfinal class InvoiceLineItemForm\n{\n    // ...\n\n    #[LiveProp]\n    #[Valid]\n    public ?InvoiceLineItem $lineItem = null;\n\n    #[PostMount]\n    public function postMount(): void\n    {\n        if (!$this->lineItem) {\n            $this->lineItem = new InvoiceLineItem();\n        }\n    }\n\n    #[LiveAction]\n    public function save(EntityManagerInterface $entityManager)\n    {\n        if (!$this->lineItem->getId()) {\n            $this->emit('lineItem:created', $this->lineItem);\n        }\n\n        $entityManager->persist($this->lineItem);\n        $entityManager->flush();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Stimulus Controller for Component Interaction\nDESCRIPTION: JavaScript Stimulus controller that demonstrates how to interact with a LiveComponent, including setting properties and triggering actions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/some-custom-controller.js\n// ...\nimport { getComponent } from '@symfony/ux-live-component';\n\nexport default class extends Controller {\n    async initialize() {\n        this.component = await getComponent(this.element);\n    }\n\n    // some Stimulus action triggered, for example, on user click\n    toggleMode() {\n        // e.g. set some live property called \"mode\" on your component\n        this.component.set('mode', 'editing');\n        // then, trigger a re-render to get the fresh HTML\n        this.component.render();\n\n        // or call an action\n        this.component.action('save', { arg1: 'value1' });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Priority for LiveComponent Lifecycle Hooks\nDESCRIPTION: Demonstrates how to control the execution order of multiple hooks of the same type by setting priority values, with higher priority hooks running first.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_148\n\nLANGUAGE: php\nCODE:\n```\n#[PostHydrate(priority: 10)]\npublic function highPriorityHook(): void\n{\n    // Runs first\n}\n\n#[PostHydrate(priority: 1)]\npublic function lowPriorityHook(): void\n{\n    // Runs last\n}\n```\n\n----------------------------------------\n\nTITLE: Dispatching Browser Events with Data\nDESCRIPTION: Shows how to dispatch browser events with data from a PHP component, allowing JavaScript code to receive additional information with the event.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_125\n\nLANGUAGE: php\nCODE:\n```\n$this->dispatchBrowserEvent('product:created', [\n    'product' => $product->getId(),\n]);\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Action Method for Map Interaction\nDESCRIPTION: PHP method annotated with LiveAction that demonstrates how to interact with a map from the server-side. Shows operations like changing center, zoom, adding markers and polygons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n#[LiveAction]\npublic function doSomething(): void\n{\n    // Change the map center\n    $this->getMap()->center(new Point(45.7640, 4.8357));\n\n    // Change the map zoom\n    $this->getMap()->zoom(6);\n\n    // Add a new marker\n    $this->getMap()->addMarker(new Marker(position: new Point(43.2965, 5.3698), title: 'Marseille', infoWindow: new InfoWindow('Marseille')));\n\n    // Add a new polygon\n    $this->getMap()->addPolygon(new Polygon(points: [\n        new Point(48.8566, 2.3522),\n        new Point(45.7640, 4.8357),\n        new Point(43.2965, 5.3698),\n        new Point(44.8378, -0.5792),\n    ], infoWindow: new InfoWindow('Paris, Lyon, Marseille, Bordeaux')));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Ajax-powered Autocomplete Field Class\nDESCRIPTION: PHP code for creating a custom form field type that enables Ajax-powered autocomplete functionality for an entity with configuration options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/FoodAutocompleteField.php\n// ...\n\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\UX\\Autocomplete\\Form\\AsEntityAutocompleteField;\nuse Symfony\\UX\\Autocomplete\\Form\\BaseEntityAutocompleteType;\n\n#[AsEntityAutocompleteField]\nclass FoodAutocompleteField extends AbstractType\n{\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults([\n            'class' => Food::class,\n            'placeholder' => 'What should we eat?',\n\n            // choose which fields to use in the search\n            // if not passed, *all* fields are used\n            //'searchable_fields' => ['name'],\n\n            // if the autocomplete endpoint needs to be secured\n            //'security' => 'ROLE_FOOD_ADMIN',\n\n            // ... any other normal EntityType options\n            // e.g. query_builder, choice_label\n        ]);\n    }\n\n    public function getParent(): string\n    {\n        return BaseEntityAutocompleteType::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Parent Component with Child Component in Twig\nDESCRIPTION: Shows how to render a TodoList parent component with a TodoFooter child component, passing the count of todos as a prop to the child component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_127\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/TodoList.html.twig #}\n<div {{ attributes }}>\n    <input data-model=\"listName\">\n\n    {% for todo in todos %}\n        ...\n    {% endfor %}\n\n    {{ component('TodoFooter', {\n        count: todos|length\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting Component State After Save Action in LiveComponents\nDESCRIPTION: Demonstrates how to reset a component's state after saving a new item, creating a clean form for the next item by instantiating a new model and clearing validation.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_145\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/InvoiceLineItemForm.php\n// ...\n\n#[AsLiveComponent]\nclass InvoiceLineItemForm\n{\n    // ...\n\n    #[LiveAction]\n    public function save(EntityManagerInterface $entityManager)\n    {\n        $isNew = null === $this->lineItem->getId();\n\n        $entityManager->persist($this->lineItem);\n        $entityManager->flush();\n\n        if ($isNew) {\n            // reset the state of this component\n            $this->emit('lineItem:created', $this->lineItem);\n            $this->lineItem = new InvoiceLineItem();\n            // if you're using ValidatableComponentTrait\n            $this->clearValidation();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: MarkdownTextarea Component Template\nDESCRIPTION: Template for MarkdownTextarea component with a textarea that uses data-model binding and a preview section that renders the markdown content as HTML.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_138\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes }} class=\"mb-3\">\n    <textarea\n        name=\"{{ name }}\"\n        data-model=\"value\"\n    ></textarea>\n\n    <div class=\"markdown-preview\">\n        {{ value|markdown_to_html }}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating custom Stimulus controller for Tom Select in JavaScript\nDESCRIPTION: A custom Stimulus controller that extends Tom Select functionality by listening to autocomplete events. This allows customizing Tom Select behavior beyond what is possible with configuration options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/custom-autocomplete_controller.js\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    initialize() {\n        this._onPreConnect = this._onPreConnect.bind(this);\n        this._onConnect = this._onConnect.bind(this);\n    }\n\n    connect() {\n        this.element.addEventListener('autocomplete:pre-connect', this._onPreConnect);\n        this.element.addEventListener('autocomplete:connect', this._onConnect);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side-effects\n        this.element.removeEventListener('autocomplete:connect', this._onConnect);\n        this.element.removeEventListener('autocomplete:pre-connect', this._onPreConnect);\n    }\n\n    _onPreConnect(event) {\n        // TomSelect has not been initialized - options can be changed\n        console.log(event.detail.options); // Options that will be used to initialize TomSelect\n        event.detail.options.onChange = (value) => {\n            // ...\n        };\n    }\n\n    _onConnect(event) {\n        // TomSelect has just been initialized and you can access details from the event\n        console.log(event.detail.tomSelect); // TomSelect instance\n        console.log(event.detail.options); // Options used to initialize TomSelect\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Symfony UX Controller\nDESCRIPTION: HTML configuration for a Leaflet map using Symfony UX controller. Sets up map properties including center coordinates (Paris), zoom level, tile layer configuration from OpenStreetMap, and defines two polylines with coordinates and info windows.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with polylines and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[{&quot;points&quot;:[{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}],&quot;title&quot;:null,&quot;infoWindow&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;polyline1&quot;,&quot;@id&quot;:&quot;823f6ee5acdb5db3&quot;},{&quot;points&quot;:[{&quot;lat&quot;:1.1,&quot;lng&quot;:2.2},{&quot;lat&quot;:3.3,&quot;lng&quot;:4.4},{&quot;lat&quot;:5.5,&quot;lng&quot;:6.6}],&quot;title&quot;:null,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Polyline&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;extra&quot;:[],&quot;id&quot;:&quot;polyline2&quot;,&quot;@id&quot;:&quot;77fb0e390b5e91f1&quot;}]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Turbo Stream Twig Components\nDESCRIPTION: Demonstrates the usage of Turbo Stream Twig Components for various actions like append, prepend, replace, update, remove, before, after, and refresh. These components simplify the creation of Turbo Stream elements in Twig templates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n<twig:Turbo:Stream:Append target=\"#dom_id\">\n    Content to append to container designated with the dom_id.\n</twig:Turbo:Stream:Append>\n\n<twig:Turbo:Stream:Prepend target=\"#dom_id\">\n    Content to prepend to container designated with the dom_id.\n</twig:Turbo:Stream:Prepend>\n\n<twig:Turbo:Stream:Replace target=\"#dom_id\">\n    Content to replace the element designated with the dom_id.\n</twig:Turbo:Stream:Replace>\n\n<twig:Turbo:Stream:Update target=\"#dom_id\">\n    Content to update to container designated with the dom_id.\n</twig:Turbo:Stream:Update>\n\n<twig:Turbo:Stream:Remove target=\"#dom_id\" />\n\n<twig:Turbo:Stream:Before target=\"#dom_id\">\n    Content to place before the element designated with the dom_id.\n</twig:Turbo:Stream:Before>\n\n<twig:Turbo:Stream:After target=\"#dom_id\">\n    Content to place after the element designated with the dom_id.\n</twig:Turbo:Stream:After>\n\n<twig:Turbo:Stream:Refresh />\n```\n\n----------------------------------------\n\nTITLE: Parent Component with Event Listener in Symfony LiveComponents\nDESCRIPTION: Demonstrates a parent component that listens for events emitted by child components, allowing for reactive updates when child components change state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_143\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/InvoiceCreator.php\n// ...\n\n#[AsLiveComponent]\nfinal class InvoiceCreator\n{\n    // ...\n\n    #[LiveListener('lineItem:created')]\n    public function addLineItem()\n    {\n        // no need to do anything here: the component will re-render\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing PostForm Live Component in Symfony\nDESCRIPTION: Defines a PostForm Live Component class that uses ComponentWithFormTrait to handle form rendering and submission in Symfony UX.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_66\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Twig\\Components;\n\nuse App\\Entity\\Post;\nuse App\\Form\\PostType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\ComponentWithFormTrait;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent]\nclass PostForm extends AbstractController\n{\n    use DefaultActionTrait;\n    use ComponentWithFormTrait;\n\n    /**\n     * The initial data used to create the form.\n     */\n    #[LiveProp]\n    public ?Post $initialFormData = null;\n\n    protected function instantiateForm(): FormInterface\n    {\n        // we can extend AbstractController to get the normal shortcuts\n        return $this->createForm(PostType::class, $this->initialFormData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an EditPost Live Component Class\nDESCRIPTION: PHP class for an EditPost Live Component with a writable Post entity and a save action that persists changes to the database.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_135\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig\\Components;\n\nuse App\\Entity\\Post;\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\n\n#[AsLiveComponent]\nfinal class EditPost extends AbstractController\n{\n    #[LiveProp(writable: ['title', 'content'])]\n    public Post $post;\n\n    #[LiveAction]\n    public function save(EntityManagerInterface $entityManager)\n    {\n        $entityManager->flush();\n\n        return $this->redirectToRoute('some_route');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FoodAutocompleteField with extra_options support in PHP\nDESCRIPTION: Custom autocomplete field implementation that uses extra_options to filter out excluded foods. This field works with the extra_options pattern to maintain exclusions during Ajax calls.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/FoodAutocompleteField.php\n// ...\n\nuse Symfony\\UX\\Autocomplete\\Form\\AsEntityAutocompleteField;\nuse Symfony\\UX\\Autocomplete\\Form\\BaseEntityAutocompleteType;\n\n#[AsEntityAutocompleteField]\nclass FoodAutocompleteField extends AbstractType\n{\n    public function configureOptions(OptionsResolver $resolver): void\n    {\n        $resolver->setDefaults([\n            // ...\n            'query_builder' => function (Options $options) {\n                return function (EntityRepository $er) use ($options) {\n                    $qb = $er->createQueryBuilder('o');\n\n                    $excludedFoods = $options['extra_options']['excluded_foods'] ?? [];\n                    if ([] !== $excludedFoods) {\n                        $qb->andWhere($qb->expr()->notIn('o.id', $excludedFoods));\n                    }\n\n                    return $qb;\n                };\n            }\n        ]);\n    }\n\n    public function getParent(): string\n    {\n        return BaseEntityAutocompleteType::class;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using PostMount Hook for Component Initialization\nDESCRIPTION: Example of using a PostMount hook to perform additional initialization after a component is instantiated and its data mounted. Modifies the component state based on its properties.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_31\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\nuse Symfony\\UX\\TwigComponent\\Attribute\\PostMount;\n// ...\n\n#[AsTwigComponent]\nclass Alert\n{\n    #[PostMount]\n    public function postMount(): void\n    {\n        if (str_contains($this->message, 'danger')) {\n            $this->type = 'danger';\n        }\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from PHP Component\nDESCRIPTION: Demonstrates how to emit events from a PHP component using ComponentToolsTrait, allowing communication with other components on the same page.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_112\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\LiveComponent\\ComponentToolsTrait;\n\nclass MyComponent\n{\n    use ComponentToolsTrait;\n\n    #[LiveAction]\n    public function saveProduct()\n    {\n        // ...\n\n        $this->emit('productAdded');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Live Component Actions\nDESCRIPTION: Demonstrates how to configure file uploads with Live Component actions using the files modifier.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_58\n\nLANGUAGE: html+twig\nCODE:\n```\n<input type=\"file\" name=\"my_file\" />\n<button\n    data-action=\"live#action\"\n    data-live-action-param=\"files|my_action\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Charts with PHP Controller\nDESCRIPTION: Example of creating a line chart using ChartBuilderInterface in a Symfony controller with data and options configuration\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\Chartjs\\Builder\\ChartBuilderInterface;\nuse Symfony\\UX\\Chartjs\\Model\\Chart;\n\nclass HomeController extends AbstractController\n{\n    #[Route('/', name: 'app_homepage')]\n    public function index(ChartBuilderInterface $chartBuilder): Response\n    {\n        $chart = $chartBuilder->createChart(Chart::TYPE_LINE);\n\n        $chart->setData([\n            'labels' => ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n            'datasets' => [\n                [\n                    'label' => 'My First dataset',\n                    'backgroundColor' => 'rgb(255, 99, 132)',\n                    'borderColor' => 'rgb(255, 99, 132)',\n                    'data' => [0, 10, 5, 2, 20, 30, 45],\n                ],\n            ],\n        ]);\n\n        $chart->setOptions([\n            'scales' => [\n                'y' => [\n                    'suggestedMin' => 0,\n                    'suggestedMax' => 100,\n                ],\n            ],\n        ]);\n\n        return $this->render('home/index.html.twig', [\n            'chart' => $chart,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Submission LiveAction in Symfony\nDESCRIPTION: Shows how to create a LiveAction method to handle form submission, including persisting the entity and redirecting after successful save.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_68\n\nLANGUAGE: PHP\nCODE:\n```\nuse Doctrine\\ORM\\EntityManagerInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\n\nclass PostForm extends AbstractController\n{\n    // ...\n\n    #[LiveAction]\n    public function save(EntityManagerInterface $entityManager)\n    {\n        // Submit the form! If validation fails, an exception is thrown\n        // and the component is automatically re-rendered with the errors\n        $this->submitForm();\n\n        /** @var Post $post */\n        $post = $this->getForm()->getData();\n        $entityManager->persist($post);\n        $entityManager->flush();\n\n        $this->addFlash('success', 'Post saved!');\n\n        return $this->redirectToRoute('app_post_show', [\n            'id' => $post->getId(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Hook on LiveProp Update in PHP\nDESCRIPTION: Shows how to add a hook that runs when a specific LiveProp is updated using the onUpdated option.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_154\n\nLANGUAGE: php\nCODE:\n```\n#[AsLiveComponent]\nclass ProductSearch\n{\n    #[LiveProp(writable: true, onUpdated: 'onQueryUpdated')]\n    public string $query = '';\n\n    // ...\n\n    public function onQueryUpdated($previousValue): void\n    {\n        // $this->query already contains a new value\n        // and its previous value is passed as an argument\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Form Values from LiveAction in Symfony UX\nDESCRIPTION: Demonstrates how to update form values dynamically from a LiveAction method by directly modifying the formValues property instead of updating the entity object.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_70\n\nLANGUAGE: php\nCODE:\n```\n#[LiveAction]\npublic function generateTitle()\n{\n    // this works!\n    // (the form will be submitted automatically after this method, now with the new title)\n    $this->formValues['title'] = '... some auto-generated-title';\n\n    // this would *not* work\n    // $this->submitForm();\n    // $post = $this->getForm()->getData();\n    // $post->setTitle('... some auto-generated-title');\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Form State in LiveComponent\nDESCRIPTION: Shows how to reset a form back to its initial state after submission using the resetForm() method in a LiveAction.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_72\n\nLANGUAGE: php\nCODE:\n```\n#[LiveAction]\npublic function save(EntityManagerInterface $entityManager)\n{\n    // ...\n\n    $this->resetForm();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Map with Symfony UX Controller via Data Attributes\nDESCRIPTION: HTML div element configured with Symfony UX Google Map controller data attributes. It sets up a map centered on Paris with markers and various configuration options including API key, zoom level, marker information, and map display settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with markers and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker1&quot;,&quot;@id&quot;:&quot;872feba9ebf3905d&quot;},{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Lyon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;bce206d73dc5c164&quot;}]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Testing Turbo Frames with Symfony Panther\nDESCRIPTION: PHP test code showing how to test Turbo Frame functionality using Symfony Panther, which runs tests in real browsers to verify JavaScript behavior.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n// tests/TurboFrameTest.php\nnamespace App\\Tests;\n\nuse Symfony\\Component\\Panther\\PantherTestCase;\n\nclass TurboFrameTest extends PantherTestCase\n{\n    public function testFrame(): void\n    {\n        $client = self::createPantherClient();\n        $client->request('GET', '/');\n\n        $client->clickLink('This block is scoped, the rest of the page will not change if you click here!');\n        $this->assertSelectorWillContain('body', 'This will replace the content of the Turbo Frame!');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveComponent for Button with Click Counter\nDESCRIPTION: This PHP snippet shows how to create a LiveComponent for a Button that includes a click counter, demonstrating state management with backend logic.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n#[AsLiveComponent]\nclass Button\n{\n    use DefaultActionTrait;\n    \n    #[LiveProp]\n    public int $clicks = 0;\n\n    #[LiveAction]\n    public function increment(): void\n    {\n        $this->clicks++;\n\n        $this->save();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Turbo Stream Responses in Symfony Controller\nDESCRIPTION: Demonstrates how to handle form submissions and return Turbo Stream responses in a Symfony controller. It checks if the request format is Turbo Stream and renders a specific block if so, otherwise falls back to standard form handling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/TaskController.php\nnamespace App\\Controller;\n\n// ...\nuse App\\Entity\\Task;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\UX\\Turbo\\TurboBundle;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $form = $this->createForm(TaskType::class, new Task());\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $task = $form->getData();\n            // ... perform some action, such as saving the task to the database\n\n            // 🔥 The magic happens here! 🔥\n            if (TurboBundle::STREAM_FORMAT === $request->getPreferredFormat()) {\n                // If the request comes from Turbo, set the content type as text/vnd.turbo-stream.html and only send the HTML to update\n                $request->setRequestFormat(TurboBundle::STREAM_FORMAT);\n                return $this->renderBlock('task/new.html.twig', 'success_stream', ['task' => $task]);\n            }\n\n            // If the client doesn't support JavaScript, or isn't using Turbo, the form still works as usual.\n            // Symfony UX Turbo is all about progressively enhancing your applications!\n            return $this->redirectToRoute('task_success', [], Response::HTTP_SEE_OTHER);\n        }\n\n        return $this->render('task/new.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Validation Errors in Symfony Live Components\nDESCRIPTION: Shows how to implement a save method that resets validation errors after processing using the resetValidation() method. This allows the form to be reused with a clean validation state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_90\n\nLANGUAGE: php\nCODE:\n```\n// ...\nclass EditUser\n{\n    // ...\n\n    #[LiveAction]\n    public function save()\n    {\n        // validate, save, etc\n\n        // reset your live props to the original state\n        $this->user = new User();\n        $this->agreeToTerms = false;\n        // clear the validation state\n        $this->resetValidation();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing On-Change Real-Time Validation in Twig Templates\nDESCRIPTION: Shows how to set up a field to validate only on change event rather than on every input event, using the on(change) modifier with data-model attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_91\n\nLANGUAGE: twig\nCODE:\n```\n<input\n    type=\"email\"\n    data-model=\"on(change)|user.email\"\n    class=\"{{ _errors.has('post.content') ? 'is-invalid' : '' }}\"\n>\n```\n\n----------------------------------------\n\nTITLE: Activating a Stimulus Controller with HTML Attributes\nDESCRIPTION: Example of how to activate a Stimulus controller directly in HTML using the data-controller attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div data-controller=\"hello\">\n   ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Basic Polling to Symfony Live Components\nDESCRIPTION: Demonstrates how to add basic polling functionality to a component to automatically refresh it every 2 seconds.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_101\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    {{ attributes }}\n    data-poll\n>\n```\n\n----------------------------------------\n\nTITLE: Template for BlogPost Collection Form with Live Actions\nDESCRIPTION: Twig template that renders a form with embedded collection items, including buttons that trigger LiveActions for adding and removing items dynamically without JavaScript.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_75\n\nLANGUAGE: html+twig\nCODE:\n```\n<div{{ attributes }}>\n    {{ form_start(form) }}\n        {{ form_row(form.title) }}\n\n        <h3>Comments:</h3>\n        {% for key, commentForm in form.comments %}\n            <button\n                data-action=\"live#action\"\n                data-live-action-param=\"removeComment\"\n                data-live-index-param=\"{{ key }}\"\n                type=\"button\"\n            >X</button>\n\n            {{ form_widget(commentForm) }}\n        {% endfor %}\n\n        {# avoid an extra label for this field #}\n        {% do form.comments.setRendered %}\n\n        <button\n            data-action=\"live#action\"\n            data-live-action-param=\"addComment\"\n            type=\"button\"\n        >+ Add Comment</button>\n\n        <button type=\"submit\" >Save</button>\n    {{ form_end(form) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Arguments to Component Actions in Twig\nDESCRIPTION: Shows two ways to pass arguments to a component action: using data attributes or the live_action helper.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_55\n\nLANGUAGE: html+twig\nCODE:\n```\n<form>\n    <button\n        data-action=\"live#action\"\n        data-live-action-param=\"addItem\"\n\n        data-live-id-param=\"{{ item.id }}\"\n        data-live-item-name-param=\"CustomItem\"\n    >Add Item</button>\n</form>\n\n{# or #}\n\n<form>\n    <button {{ live_action('addItem', {'id': item.id, 'itemName': 'CustomItem' }) }}>Add Item</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogPostFormType with LiveCollectionType in Symfony\nDESCRIPTION: Uses LiveCollectionType instead of CollectionType to simplify dynamic collection handling with built-in add and remove functionality.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_76\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\nuse Symfony\\UX\\LiveComponent\\Form\\Type\\LiveCollectionType;\n\nclass BlogPostFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('title', TextType::class)\n            // ...\n            ->add('comments', LiveCollectionType::class, [\n                'entry_type' => CommentFormType::class,\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the stimulus_controller Twig Function\nDESCRIPTION: Example of activating a Stimulus controller using the stimulus_controller Twig function, which renders the appropriate data-controller attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_controller('hello') }}>\n    ...\n</div>\n\n<!-- would render -->\n<div data-controller=\"hello\">\n   ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Symfony UX Data Attributes\nDESCRIPTION: HTML markup that configures a Leaflet map using Symfony UX controllers. The configuration includes map center coordinates for Paris, zoom level, tile layer settings from OpenStreetMap, and two markers with different properties including info windows.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with markers and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker1&quot;,&quot;@id&quot;:&quot;872feba9ebf3905d&quot;},{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Lyon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;bce206d73dc5c164&quot;}]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Map Template with Action Button\nDESCRIPTION: Twig template that combines a map with an interactive button. Uses LiveComponent's data-action attributes to trigger server-side actions when the button is clicked.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n<div{{ attributes.defaults() }}>\n    {{ ux_map(map, { style: 'height: 300px' }) }}\n\n    <button\n        type=\"button\"\n        data-action=\"live#action\"\n        data-live-action-param=\"doSomething\"\n    >\n        Do something with the map\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling Connect Event in Symfony UX Map\nDESCRIPTION: This event handler is triggered when the map and all its elements are fully created. It provides access to the map instance and all created elements (markers, info windows, polygons, polylines).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered when the map and all its elements (markers, info windows, ...) are created.\n * The instances depend on the renderer you are using.\n */\n_onConnect(event) {\n    console.log(event.detail.map);\n    console.log(event.detail.markers);\n    console.log(event.detail.infoWindows);\n    console.log(event.detail.polygons);\n    console.log(event.detail.polylines);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Route for Live Component in PHP\nDESCRIPTION: Shows how to specify a custom route for a live component using the AsLiveComponent attribute in PHP.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_152\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent(route: 'live_component_admin')]\nclass RandomNumber\n{\n    use DefaultActionTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Stimulus Controllers with Twig\nDESCRIPTION: Example showing how to chain multiple controllers on the same HTML element using the stimulus_controller filter.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_controller('chart', { 'name': 'Likes' })|stimulus_controller('other-controller') }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div data-controller=\"chart other-controller\" data-chart-name-value=\"Likes\">\n    Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Advanced PostMount Hook with Data Processing\nDESCRIPTION: Shows how to use a PostMount hook that processes remaining props that weren't automatically mapped to properties. Handles custom props and returns the filtered data for attributes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_32\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\n#[AsTwigComponent]\nclass Alert\n{\n    public string $message;\n    public string $type = 'success';\n\n    #[PostMount]\n    public function processAutoChooseType(array $data): array\n    {\n        if ($data['autoChooseType'] ?? false) {\n            if (str_contains($this->message, 'danger')) {\n                $this->type = 'danger';\n            }\n\n            // remove the autoChooseType prop from the data array\n            unset($data['autoChooseType']);\n        }\n\n        // any remaining data will become attributes on the component\n        return $data;\n    }\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Stimulus Controller\nDESCRIPTION: JavaScript code showing how to create a custom Stimulus controller for map interactions and event handling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/mymap_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('ux:map:pre-connect', this._onPreConnect);\n        this.element.addEventListener('ux:map:connect', this._onConnect);\n        this.element.addEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n        this.element.addEventListener('ux:map:marker:after-create', this._onMarkerAfterCreate);\n        this.element.addEventListener('ux:map:info-window:before-create', this._onInfoWindowBeforeCreate);\n        this.element.addEventListener('ux:map:info-window:after-create', this._onInfoWindowAfterCreate);\n        this.element.addEventListener('ux:map:polygon:before-create', this._onPolygonBeforeCreate);\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Controller in PHP\nDESCRIPTION: This code creates a ChatController class that handles form submission and publishes updates to the Mercure hub. It uses Symfony's form builder and renders templates for the chat interface.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/ChatController.php\nnamespace App\\Controller;\n\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\SubmitType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\TextType;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mercure\\HubInterface;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass ChatController extends AbstractController\n{\n    public function chat(Request $request, HubInterface $hub): Response\n    {\n        $form = $this->createFormBuilder()\n            ->add('message', TextType::class, ['attr' => ['autocomplete' => 'off']])\n            ->add('send', SubmitType::class)\n            ->getForm();\n\n        $emptyForm = clone $form; // Used to display an empty form after a POST request\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            $data = $form->getData();\n\n            // 🔥 The magic happens here! 🔥\n            // The HTML update is pushed to the client using Mercure\n            $hub->publish(new Update(\n                'chat',\n                $this->renderView('chat/message.stream.html.twig', ['message' => $data['message']])\n            ));\n\n            // Force an empty form to be rendered below\n            // It will replace the content of the Turbo Frame after a post\n            $form = $emptyForm;\n        }\n\n        return $this->render('chat/index.html.twig', [\n            'form' => $form,\n         ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Form Validation in Live Components\nDESCRIPTION: Shows the basic save method implementation that validates form data before performing save operations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_105\n\nLANGUAGE: php\nCODE:\n```\npublic function save()\n{\n    // this will throw an exception if validation fails\n    $this->validate();\n\n    // perform save operations\n}\n```\n\n----------------------------------------\n\nTITLE: Using Action Modifiers in Twig\nDESCRIPTION: Shows how to add modifiers like debounce to component actions to control their execution.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_52\n\nLANGUAGE: html+twig\nCODE:\n```\n<form>\n    <button\n        data-action=\"live#action\"\n        data-live-action-param=\"debounce(300)|save\"\n    >Save</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Implementing Button Component with Stimulus in Twig\nDESCRIPTION: This example shows how to create a Button component using Twig and Stimulus for state management.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n{% props label %}\n\n<button data-controller=\"button\" data-button-label-value=\"{{ label }}\">\n    {{ label }}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Google Map Component with Data Attributes in HTML\nDESCRIPTION: HTML markup for initializing a Google Map using Symfony UX controllers and data attributes. The configuration includes API key, center coordinates, zoom level, bounds settings, and various map display options like gesture handling and control positions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with default map id, when passing options (except the mapId)__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;my_api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:&quot;DefaultMapId&quot;,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadcast Entity in PHP\nDESCRIPTION: This PHP class demonstrates how to use the Broadcast attribute to automatically publish entity updates. It's a Doctrine entity that will trigger Turbo Stream updates on changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Doctrine\\ORM\\Mapping as ORM;\nuse Symfony\\UX\\Turbo\\Attribute\\Broadcast;\n\n#[ORM\\Entity]\n#[Broadcast] // 🔥 The magic happens here\nclass Book\n{\n    #[ORM\\Column, ORM\\Id, ORM\\GenerateValue(strategy: \"AUTO\")]\n    public ?int $id = null;\n\n    #[ORM\\Column]\n    public string $title = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Button to Update a LiveProp Model\nDESCRIPTION: Example of using HTML data attributes to manually update a model value in a LiveComponent without using a form field.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_36\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    type=\"button\"\n    data-model=\"mode\"\n    data-value=\"edit\"\n    data-action=\"live#update\"\n>Edit</button>\n```\n\n----------------------------------------\n\nTITLE: Using Key Props with Child Components in Twig Templates\nDESCRIPTION: Shows how to use the 'key' prop to uniquely identify child components within a loop, helping LiveComponents track items correctly when the collection changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_140\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/InvoiceCreator.html.twig #}\n{% for lineItem in invoice.lineItems %}\n    {{ component('InvoiceLineItemForm', {\n        lineItem: lineItem,\n        key: lineItem.id,\n    }) }}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveProp for Doctrine Entity in PHP\nDESCRIPTION: Demonstrates how to define a LiveProp for a Doctrine entity in a PHP component class.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\n\n#[AsLiveComponent]\nclass EditPost\n{\n    #[LiveProp]\n    public Post $post;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Map Live Component in PHP\nDESCRIPTION: PHP class that demonstrates how to integrate a Map with Live Components using the ComponentWithMapTrait. It shows how to instantiate a map with markers and points.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\nuse Symfony\\UX\\Map\\InfoWindow;\nuse Symfony\\UX\\Map\\Live\\ComponentWithMapTrait;\nuse Symfony\\UX\\Map\\Map;\nuse Symfony\\UX\\Map\\Marker;\nuse Symfony\\UX\\Map\\Point;\n\n#[AsLiveComponent]\nfinal class MapLivePlayground\n{\n    use DefaultActionTrait;\n    use ComponentWithMapTrait;\n\n    protected function instantiateMap(): Map\n    {\n        return (new Map())\n            ->center(new Point(48.8566, 2.3522))\n            ->zoom(7)\n            ->addMarker(new Marker(position: new Point(48.8566, 2.3522), title: 'Paris', infoWindow: new InfoWindow('Paris')))\n            ->addMarker(new Marker(position: new Point(45.75, 4.85), title: 'Lyon', infoWindow: new InfoWindow('Lyon')))\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Entity Autocompleter in PHP\nDESCRIPTION: Example of a custom FoodAutocompleter class that implements entity autocomplete functionality, showing methods for creating filtered querybuilders, retrieving labels and values, and checking security permissions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function getLabel(object $entity): string\n{\n    return $entity->getName();\n}\n\npublic function getValue(object $entity): string\n{\n    return $entity->getId();\n}\n\npublic function isGranted(Security $security): bool\n{\n    // see the \"security\" option for details\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using DropzoneType in Symfony Form\nDESCRIPTION: PHP code snippet demonstrating how to use DropzoneType as a replacement for the native FileType in a Symfony Form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\UX\\Dropzone\\Form\\DropzoneType;\n\nclass CommentFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            // ...\n            ->add('photo', DropzoneType::class)\n            // ...\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using the mount() Method in Twig Components\nDESCRIPTION: Example of implementing a mount() method in a component to control how props are handled when the component is instantiated. Shows how to map props to method arguments.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\n// ...\n\n#[AsTwigComponent]\nclass Alert\n{\n    public string $message;\n    public string $type = 'success';\n\n    public function mount(bool $isSuccess = true): void\n    {\n        $this->type = $isSuccess ? 'success' : 'danger';\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Stimulus Controller in JavaScript\nDESCRIPTION: Example of a basic Stimulus controller that changes the text content of its element when connected. This is typically stored in assets/controllers/hello_controller.js.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.textContent = 'Hello Stimulus! Edit me in assets/controllers/hello_controller.js';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Updates with LiveProp Changes\nDESCRIPTION: Shows how to make the URL update when a LiveProp changes by using the url: true option, allowing the component state to be reflected in and initialized from the URL.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_104\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/SearchModule.php\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent]\nclass SearchModule\n{\n    use DefaultActionTrait;\n\n    #[LiveProp(writable: true, url: true)]\n    public string $query = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a Stimulus Controller to LiveComponent Root Element\nDESCRIPTION: Twig example showing how to attach a Stimulus controller to the root element of a LiveComponent with configuration values.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_40\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes.defaults(stimulus_controller('some-custom', { someValue: 'foo' })) }}>\n```\n\n----------------------------------------\n\nTITLE: Initiating File Download with LiveAction in Symfony\nDESCRIPTION: Shows how to create a LiveAction that generates a URL for file download and returns a RedirectResponse in a Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_62\n\nLANGUAGE: PHP\nCODE:\n```\n#[LiveAction]\npublic function initiateDownload(UrlGeneratorInterface $urlGenerator): RedirectResponse\n{\n    $url = $urlGenerator->generate('app_file_download');\n    return new RedirectResponse($url);\n}\n```\n\n----------------------------------------\n\nTITLE: AJAX-Enabled Stimulus Controller Implementation in Twig\nDESCRIPTION: Shows how to configure a select element with the autocomplete Stimulus controller that loads options via AJAX from a custom endpoint.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n<select\n    name=\"food\"\n    {{ stimulus_controller('symfony/ux-autocomplete/autocomplete', {\n        url: path('ux_entity_autocomplete', { alias: 'food' })\n    }) }}\n>\n```\n\n----------------------------------------\n\nTITLE: Targeting Loading for Specific Model Changes in Twig\nDESCRIPTION: Demonstrates how to toggle loading behavior only when a specific model value has changed using the model() modifier.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_49\n\nLANGUAGE: html+twig\nCODE:\n```\n<input data-model=\"email\" type=\"email\">\n\n<span data-loading=\"model(email)|show\">\n    Checking if email is available...\n</span>\n\n<!-- multiple modifiers & child properties -->\n<span data-loading=\"model(user.email)|delay|addClass(opacity-50)\">...</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing Component Template with Placeholder for Deferred Loading\nDESCRIPTION: Shows how to define a component template with both main content and a placeholder macro for displaying during deferred loading.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_96\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/recommended-products.html.twig #}\n<div {{ attributes }}>\n    {# This will be rendered when the component is fully loaded #}\n    {% for product in this.products %}\n        <div>{{ product.name }}</div>\n    {% endfor %}\n</div>\n\n{% macro placeholder(props) %}\n    {# This content will (only) be rendered as loading content #}\n    <span class=\"loading-row\"></span>\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Testing Twig Components with InteractsWithTwigComponents Trait\nDESCRIPTION: Example of how to test Twig Components using the InteractsWithTwigComponents trait to verify component mounting, rendering, and content embedding.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_47\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Bundle\\FrameworkBundle\\Test\\KernelTestCase;\nuse Symfony\\UX\\TwigComponent\\Test\\InteractsWithTwigComponents;\n\nclass MyComponentTest extends KernelTestCase\n{\n    use InteractsWithTwigComponents;\n\n    public function testComponentMount(): void\n    {\n        $component = $this->mountTwigComponent(\n            name: 'MyComponent', // can also use FQCN (MyComponent::class)\n            data: ['foo' => 'bar'],\n        );\n\n        $this->assertInstanceOf(MyComponent::class, $component);\n        $this->assertSame('bar', $component->foo);\n    }\n\n    public function testComponentRenders(): void\n    {\n        $rendered = $this->renderTwigComponent(\n            name: 'MyComponent', // can also use FQCN (MyComponent::class)\n            data: ['foo' => 'bar'],\n        );\n\n        $this->assertStringContainsString('bar', (string) $rendered);\n\n        // use the crawler\n        $this->assertCount(5, $rendered->crawler()->filter('ul li'));\n    }\n\n    public function testEmbeddedComponentRenders(): void\n    {\n        $rendered = $this->renderTwigComponent(\n            name: 'MyComponent', // can also use FQCN (MyComponent::class)\n            data: ['foo' => 'bar'],\n            content: '<div>My content</div>', // \"content\" (default) block\n            blocks: [\n                'header' => '<div>My header</div>',\n                'menu' => $this->renderTwigComponent('Menu'), // can embed other components\n            ],\n        );\n\n        $this->assertStringContainsString('bar', (string) $rendered);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Key Generation for New Item Components in Twig\nDESCRIPTION: Shows how to generate dynamic keys for 'new item' components, ensuring a fresh component state after adding items by changing the key based on collection length.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_144\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('InvoiceLineItemForm', {\n    key: 'new_line_item_'~lineItems|length,\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Dynamic ID for Complete Re-rendering\nDESCRIPTION: Shows how to force a child component to completely re-render by using a dynamic ID attribute that changes when the number of todos changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_129\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/TodoList.html.twig #}\n<div {{ attributes }}>\n    <!-- ... -->\n\n    {{ component('TodoFooter', {\n        count: todos|length,\n        id: 'todo-footer-'~todos|length\n    }) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy loading content with Turbo Frames\nDESCRIPTION: Twig template code demonstrating how to lazy load content within a Turbo Frame using the src attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: html+twig\nCODE:\n```\n{# home.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <turbo-frame id=\"the_frame_id\" src=\"{{ path('block') }}\">\n        A placeholder.\n    </turbo-frame>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Turbo Broadcaster\nDESCRIPTION: Implementation of a custom broadcaster for Turbo that handles broadcasting changes to entities marked with the #[Broadcast] attribute. This allows using protocols other than Mercure for broadcasting.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n// src/Turbo/Broadcaster.php\nnamespace App\\Turbo;\n\nuse Symfony\\UX\\Turbo\\Attribute\\Broadcast;\nuse Symfony\\UX\\Turbo\\Broadcaster\\BroadcasterInterface;\n\nclass Broadcaster implements BroadcasterInterface\n{\n    public function broadcast(object $entity, string $action): void\n    {\n        // This method will be called every time an object marked with the #[Broadcast] attribute is changed\n        $attribute = (new \\ReflectionClass($entity))->getAttributes(Broadcast::class)[0] ?? null;\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Form for LiveAction Submission in Twig\nDESCRIPTION: Shows how to configure the form in Twig to use a LiveAction for form submission, preventing default form submission and specifying the action to use.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_69\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{{ form_start(form, {\n    attr: {\n        'data-action': 'live#action:prevent',\n        'data-live-action-param': 'save'\n    }\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Adding LiveProp to Random Number Component in PHP\nDESCRIPTION: Shows how to add a LiveProp to the Random Number component to make it stateful and configurable.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nnamespace App\\Twig\\Components;\n\n// ...\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\n\n#[AsLiveComponent]\nclass RandomNumber\n{\n    #[LiveProp]\n    public int $max = 1000;\n\n    public function getRandomNumber(): int\n    {\n        return rand(0, $this->max);\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Redirecting from Component Actions\nDESCRIPTION: Demonstrates how a component action can redirect after execution by extending AbstractController and returning a RedirectResponse.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_57\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nnamespace App\\Twig\\Components;\n\n// ...\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\n\nclass RandomNumber extends AbstractController\n{\n    // ...\n\n    #[LiveAction]\n    public function resetMax()\n    {\n        // ...\n\n        $this->addFlash('success', 'Max has been reset!');\n\n        return $this->redirectToRoute('app_random_number');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Symfony Serializer for DTO Hydration\nDESCRIPTION: Example of using the Symfony serializer for hydrating/dehydrating DTOs by setting the useSerializerForHydration option on the LiveProp annotation.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_33\n\nLANGUAGE: php\nCODE:\n```\nclass ComponentWithAddressDto\n{\n    #[LiveProp(useSerializerForHydration: true)]\n    public AddressDto $addressDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Action Arguments in PHP Component\nDESCRIPTION: Shows how to receive and use arguments in component actions using the LiveArg attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_56\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/ItemList.php\nnamespace App\\Twig\\Components;\n\n// ...\nuse Psr\\Log\\LoggerInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveArg;\n\nclass ItemList\n{\n    // ...\n    #[LiveAction]\n    public function addItem(#[LiveArg] int $id, #[LiveArg('itemName')] string $name)\n    {\n        $this->id = $id;\n        $this->name = $name;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Custom Events in JavaScript\nDESCRIPTION: Demonstrates how to add an event listener for a custom event 'product:created' and access the product data from the event detail object.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.addEventListener('product:created', (event) => {\n    console.log(event.detail.product);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Symfony UX LazyImage Stimulus Controller in Twig\nDESCRIPTION: HTML and Twig code demonstrating how to use the LazyImage Stimulus controller to load a placeholder image before the high-definition version.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"{{ asset('image/small.png') }}\"\n    {{ stimulus_controller('symfony/ux-lazy-image/lazy-image', {\n        src: asset('image/large.png')\n    }) }}\n\n    {# Optional but avoids having a page jump when the image is loaded #}\n    width=\"200\"\n    height=\"150\"\n>\n```\n\n----------------------------------------\n\nTITLE: Using Component Properties in a Template\nDESCRIPTION: Demonstrates how to access component properties in a Twig template, both directly and via the 'this' variable.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"alert alert-{{ type }}\">\n    {{ message }}\n\n    {# Same as above, but using \"this\", which is the component object #}\n    {{ this.message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Map Instance\nDESCRIPTION: PHP code examples showing how to create a map instance and configure its center, zoom, and markers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\Map\\Map;\nuse Symfony\\UX\\Map\\Point;\n\n$myMap = (new Map())\n    ->center(new Point(46.903354, 1.888334))\n    ->zoom(6)\n    ->fitBoundsToMarkers();\n```\n\n----------------------------------------\n\nTITLE: Custom Stimulus Controller for Chart.js\nDESCRIPTION: Example of a custom Stimulus controller to extend Chart.js functionality with pre-connect and connect event handlers\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// mychart_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('chartjs:pre-connect', this._onPreConnect);\n        this.element.addEventListener('chartjs:connect', this._onConnect);\n    }\n\n    disconnect() {\n        this.element.removeEventListener('chartjs:pre-connect', this._onPreConnect);\n        this.element.removeEventListener('chartjs:connect', this._onConnect);\n    }\n\n    _onPreConnect(event) {\n        event.detail.config.options.scales = {\n            y: {\n                ticks: {\n                    callback: function (value, index, values) {\n                        /* ... */\n                    },\n                },\n            },\n        };\n    }\n\n    _onConnect(event) {\n        event.detail.chart.options.onHover = (mouseEvent) => {\n            /* ... */\n        };\n        event.detail.chart.options.onClick = (mouseEvent) => {\n            /* ... */\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Component Variants with CVA in Twig Components\nDESCRIPTION: Shows how to use the Class Variant Authority (CVA) function to create components with multiple variants such as color and size, which generate appropriate CSS classes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_44\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Alert.html.twig #}\n{% props color = 'blue', size = 'md' %}\n\n {% set alert = cva({\n    base: 'alert',\n    variants: {\n        color: {\n            blue: 'bg-blue',\n            red: 'bg-red',\n            green: 'bg-green',\n        },\n        size: {\n            sm: 'text-sm',\n            md: 'text-md',\n            lg: 'text-lg',\n        }\n    }\n}) %}\n\n<div class=\"{{ alert.apply({color, size}, attributes.render('class')) }}\">\n     {% block content %}{% endblock %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring TextType field with autocomplete in PHP\nDESCRIPTION: Using autocomplete with a TextType field which allows users to enter new options that appear as items in the selection box. The options are submitted as a comma-separated string.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$builder\n    // ...\n    ->add('tags', TextType::class, [\n        'autocomplete' => true,\n        'tom_select_options' => [\n            'create' => true,\n            'createOnBlur' => true,\n            'delimiter' => ',',\n        ],\n        // 'autocomplete_url' => '... optional: custom endpoint, see below',\n    ])\n;\n```\n\n----------------------------------------\n\nTITLE: Using Local Block Variables in LiveComponents\nDESCRIPTION: Shows how local variables declared inside component blocks remain available during re-rendering, providing a solution for maintaining variable state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_147\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/some_page.html.twig #}\n{% component Alert %}\n    {% block content %}\n        {% set message = 'this works during re-rendering!' %}\n        {{ message }}\n    {% endblock %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Triggering Custom Actions in Twig Templates\nDESCRIPTION: Shows how to call custom component actions using data attributes or the live_action helper function.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_51\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#action\"\n    data-live-action-param=\"resetMax\"\n>Reset Min/Max</button>\n```\n\n----------------------------------------\n\nTITLE: Using Writable LiveProp Properties in HTML+Twig\nDESCRIPTION: Demonstrates how to use writable LiveProp properties in a Twig template for input fields and displaying content.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_21\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes }}>\n    <input data-model=\"post.title\">\n    <textarea data-model=\"post.content\"></textarea>\n\n    Allow Markdown?\n    <input type=\"checkbox\" data-model=\"options.allow_markdown\">\n\n    Preview:\n    <div>\n        <h3>{{ post.title }}</h3>\n        {{ post.content|markdown_to_html }}\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Leaflet Map Component with Polygons in HTML\nDESCRIPTION: A single HTML div element configured with the Symfony UX Leaflet map controller. It defines map properties such as center coordinates (48.8566, 2.3522), zoom level (12), OpenStreetMap tile layer, and two polygons with different coordinate points and an info window on the second polygon.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with polygons and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[{&quot;points&quot;:[{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}],&quot;title&quot;:null,&quot;infoWindow&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;polygon1&quot;,&quot;@id&quot;:&quot;35bfa920335b849d&quot;},{&quot;points&quot;:[{&quot;lat&quot;:1.1,&quot;lng&quot;:2.2},{&quot;lat&quot;:3.3,&quot;lng&quot;:4.4},{&quot;lat&quot;:5.5,&quot;lng&quot;:6.6}],&quot;title&quot;:null,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Polygon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;extra&quot;:[],&quot;id&quot;:&quot;polygon2&quot;,&quot;@id&quot;:&quot;7be1fe9f10489d73&quot;}]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Component with Parent Data Model Binding\nDESCRIPTION: Demonstrates how to render a TextareaField component with dataModel attribute to synchronize child model changes with parent model.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_132\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/PostForm.html.twig #}\n{{ component('TextareaField', {\n    dataModel: 'content',\n    error: _errors.get('content'),\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Google Map Component with Data Attributes in HTML\nDESCRIPTION: This HTML snippet demonstrates how to configure a Symfony UX Google Map component using data attributes. It defines map settings including the API key, center coordinates, zoom level, and marker configurations for Paris, Lyon, and Dijon with different icon types.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set markers with icons__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;my_api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;url&quot;,&quot;width&quot;:32,&quot;height&quot;:32,&quot;url&quot;:&quot;https:\\/\\/cdn.jsdelivr.net\\/npm\\/bootstrap-icons@1.11.3\\/icons\\/geo-alt.svg&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;217fa57668ad8e64&quot;},{&quot;position&quot;:{&quot;lat&quot;:45.764,&quot;lng&quot;:4.8357},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;ux-icon&quot;,&quot;width&quot;:32,&quot;height&quot;:32,&quot;name&quot;:&quot;fa:map-marker&quot;,&quot;_generated_html&quot;:&quot;&lt;svg xmlns=\\&quot;http:\\/\\/www.w3.org\\/2000\\/svg\\&quot; width=\\&quot;24\\&quot; height=\\&quot;24\\&quot;&gt;...&lt;\\/svg&gt;&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;255b208136900fc0&quot;},{&quot;position&quot;:{&quot;lat&quot;:45.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Dijon&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;svg&quot;,&quot;width&quot;:24,&quot;height&quot;:24,&quot;html&quot;:&quot;&lt;svg xmlns=\\&quot;http:\\/\\/www.w3.org\\/2000\\/svg\\&quot; width=\\&quot;24\\&quot; height=\\&quot;24\\&quot;&gt;...&lt;\\/svg&gt;&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;1a410e92214f770c&quot;}]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Customizing Polygons Before Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered before creating a polygon, allowing customization of its properties. It demonstrates how to access the polygon definition object which includes title and coordinates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered before creating a polygon.\n * You can use this event to fine-tune it before its creation.\n */\n_onPolygonBeforeCreate(event) {\n    console.log(event.detail.definition);\n    // { title: 'My polygon', points: [ { lat: 48.8566, lng: 2.3522 }, { lat: 45.7640, lng: 4.8357 }, { lat: 43.2965, lng: 5.3698 }, ... ], ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Symfony Form Type for Post Entity\nDESCRIPTION: Defines a PostType form class that's bound to a Post entity in Symfony, with fields for title, slug, and content.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_64\n\nLANGUAGE: PHP\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Entity\\Post;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass PostType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('title')\n            ->add('slug')\n            ->add('content')\n        ;\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults([\n            'data_class' => Post::class,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Symfony Controller\nDESCRIPTION: Demonstrates how to handle file uploads in a Symfony controller action, including single and multiple file uploads.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_61\n\nLANGUAGE: PHP\nCODE:\n```\npublic function myAction(Request $request)\n{\n    $file = $request->files->get('my_file');\n    $multiple = $request->files->all('multiple');\n\n    // Handle files\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling URL Generation Type for Live Component in PHP\nDESCRIPTION: Demonstrates how to control the type of URL generated for a live component using the urlReferenceType option.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_153\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nuse Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent(urlReferenceType: UrlGeneratorInterface::ABSOLUTE_URL)]\nclass RandomNumber\n{\n    use DefaultActionTrait;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TodoFooter Component with updateFromParent Property\nDESCRIPTION: PHP class for a TodoFooter component with a count property that will update when the parent re-renders and the count value changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_128\n\nLANGUAGE: php\nCODE:\n```\n#[LiveComponent]\nclass TodoFooter\n{\n    #[LiveProp(updateFromParent: true)]\n    public int $count = 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Stimulus Controller for Notifications\nDESCRIPTION: JavaScript code for extending the default Symfony UX Notify behavior using a custom Stimulus controller with event handling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/mynotify_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    initialize() {\n        // guarantees \"this\" refers to this object in _onConnect\n        this._onConnect = this._onConnect.bind(this);\n    }\n\n    connect() {\n        this.element.addEventListener('notify:connect', this._onConnect);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side effects\n        this.element.removeEventListener('notify:connect', this._onConnect);\n    }\n\n    _onConnect(event) {\n        // Event sources have just been created\n        console.log(event.detail.eventSources);\n\n        event.detail.eventSources.forEach((eventSource) => {\n            eventSource.addEventListener('message', (event) => {\n                console.log(event); // You can add custom behavior on each event source\n            });\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Svelte Component\nDESCRIPTION: Example of a simple Svelte component with a configurable name property that displays a greeting message.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/svelte/controllers/Hello.svelte\n<script>\n    export let name = \"Svelte\";\n</script>\n\n<div>Hello {name}</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Vue Components in app.js\nDESCRIPTION: JavaScript code to register Vue controller components from a specified directory using require.context.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport { registerVueControllerComponents } from '@symfony/ux-vue';\n\nregisterVueControllerComponents(require.context('./vue/controllers', true, /\\.vue$/));\n```\n\n----------------------------------------\n\nTITLE: Using ID Attributes with Looped Elements in Twig Components\nDESCRIPTION: Demonstrates how to add unique ID attributes to elements within a loop to help LiveComponents understand element identity between re-renders, especially when elements may be reordered or removed.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_139\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/Invoice.html.twig #}\n{% for lineItem in lineItems %}\n    <div id=\"{{ lineItem.id }}\">\n        {{ lineItem.name }}\n    </div>\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Live Component in Twig\nDESCRIPTION: Demonstrates how to render the live component in a Twig template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: Twig\nCODE:\n```\n{{ component('ProductSearch') }}\n```\n\n----------------------------------------\n\nTITLE: Adding Form Fields in Symfony PHP\nDESCRIPTION: This snippet demonstrates how to add form fields to a Symfony form using the FormBuilderInterface. It shows the addition of a 'name' field as a TextType and an 'age' field as an IntegerType.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_158\n\nLANGUAGE: php\nCODE:\n```\n->add('name', TextType::class)\n                ->add('age', IntegerType::class)\n            ;\n```\n\n----------------------------------------\n\nTITLE: Advanced Typed Animation with Customized Parameters\nDESCRIPTION: Enhanced implementation of the Typed animation with additional customization options. This example shows how to configure behavior like smart backspace, delays, loop settings, and cursor appearance.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<div>\n    I created this UX component because\n    <span {{ stimulus_controller('symfony/ux-typed', {\n        strings: ['I ❤ Symfony UX', 'Symfony UX is great', 'Symfony UX is easy'],\n        smartBackspace: true,\n        startDelay: 100,\n        backSpeed: 20,\n        backDelay: 100,\n        loop: true,\n        showCursor: true,\n        cursorChar: '✨'\n    }) }}></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Default Variants with CVA in Twig Components\nDESCRIPTION: Shows how to set default variants that will be applied when specific variants aren't explicitly provided, ensuring consistent styling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_46\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Alert.html.twig #}\n{% set alert = cva({\n    base: 'alert',\n    variants: {\n        color: {\n            red: 'bg-red'\n        },\n        rounded: {\n            sm: 'rounded-sm',\n            md: 'rounded-md'\n        }\n    },\n    defaultVariants: {\n        rounded: 'md'\n    }\n}) %}\n\n{# index.html.twig #}\n\n<twig:Alert color=\"red\">\n    ...\n</twig:Alert>\n\n{# will render as: #}\n\n<div class=\"alert bg-red rounded-md\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Chat Template in Twig\nDESCRIPTION: This Twig template creates the chat interface, including a messages container with Turbo Stream listening and a form for sending messages. It uses Turbo Frames for dynamic updates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: html+twig\nCODE:\n```\n{# chat/index.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <h1>Chat</h1>\n\n    <div id=\"messages\" {{ turbo_stream_listen('chat') }}>\n        {#\n            The messages will be displayed here.\n            \"turbo_stream_listen()\" automatically registers a Stimulus controller that subscribes to the \"chat\" topic as managed by the transport.\n            All connected users will receive the new messages!\n         #}\n    </div>\n\n    <turbo-frame id=\"message_form\">\n        {{ form(form) }}\n\n        {#\n            The form is displayed in a Turbo Frame, with this trick a new empty form is displayed after every post,\n            but the rest of the page will not change.\n        #}\n    </turbo-frame>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using name Attribute Instead of data-model in HTML+Twig\nDESCRIPTION: Shows how to use the name attribute on form fields instead of data-model, with a data-model attribute on the form element.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes }}>\n    <form data-model=\"*\">\n        <input\n            name=\"max\"\n            value=\"{{ max }}\"\n        >\n\n        // ...\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using ExposeInTemplate Attribute with Symfony Twig Components\nDESCRIPTION: Demonstrates how to use the ExposeInTemplate attribute to expose private/protected properties and public methods directly in a component template. Properties must be accessible through getters, and methods cannot have required parameters.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_48\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\UX\\TwigComponent\\Attribute\\ExposeInTemplate;\n\n#[AsTwigComponent]\nclass Alert\n{\n    #[ExposeInTemplate]\n    private string $message; // available as `{{ message }}` in the template\n\n    #[ExposeInTemplate('alert_type')]\n    private string $type = 'success'; // available as `{{ alert_type }}` in the template\n\n    #[ExposeInTemplate(name: 'ico', getter: 'fetchIcon')]\n    private string $icon = 'ico-warning'; // available as `{{ ico }}` in the template using `fetchIcon()` as the getter\n\n    /**\n     * Required to access $this->message\n     */\n    public function getMessage(): string\n    {\n        return $this->message;\n    }\n\n    /**\n     * Required to access $this->type\n     */\n    public function getType(): string\n    {\n        return $this->type;\n    }\n\n    /**\n     * Required to access $this->icon\n     */\n    public function fetchIcon(): string\n    {\n        return $this->icon;\n    }\n\n    #[ExposeInTemplate]\n    public function getActions(): array // available as `{{ actions }}` in the template\n    {\n        // ...\n    }\n\n    #[ExposeInTemplate('dismissable')]\n    public function canBeDismissed(): bool // available as `{{ dismissable }}` in the template\n    {\n        // ...\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to a Component Class\nDESCRIPTION: Shows how to add public properties to a component class to make it configurable with props.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\n// ...\n\n#[AsTwigComponent]\nclass Alert\n{\n    public string $message;\n\n    public string $type = 'success';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering SVG Icons in Twig with UX Icons\nDESCRIPTION: Examples of rendering SVG icons using both the Twig function syntax and Twig Component syntax, along with the resulting SVG output. Shows usage with the Material Design Icons (mdi) pack and custom classes for styling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/README.md#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n{# Twig function.. #}\n{{ ux_icon('mdi:check', {class: 'w-4 h-4'}) }}\n\n{# .. or Twig Component #}\n<twig:ux:icon name=\"mdi:check\" class=\"w-4 h-4\" />\n\n{# Render the \"check\" icon from \"mdi\" pack with class #}\n<svg viewBox=\"0 0 24 24\" fill=\"currentColor\" class=\"w-4 h-4\">\n    <path d=\"M21 7L9 19l-5.5-5.5l1.41-1.41L9 16.17L19.59 5.59z\"/>\n</svg>\n```\n\n----------------------------------------\n\nTITLE: Customizing Markers with a Stimulus Controller\nDESCRIPTION: JavaScript Stimulus controller that customizes map markers before they are created. Shows how to use custom images or glyphs for markers using the 'ux:map:marker:before-create' event.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/my_map_controller.js\nimport {Controller} from \"@hotwired/stimulus\";\n\nexport default class extends Controller\n{\n    connect() {\n        this.element.addEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n    }\n\n    disconnect() {\n        // Always remove listeners when the controller is disconnected\n        this.element.removeEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n    }\n\n    _onMarkerBeforeCreate(event) {\n        // You can access the marker definition and the google object\n        // Note: `definition.rawOptions` is the raw options object that will be passed to the `google.maps.Marker` constructor. \n        const { definition, google } = event.detail;\n\n        // 1. To use a custom image for the marker \n        const beachFlagImg = document.createElement(\"img\");\n        // Note: instead of using a hardcoded URL, you can use the `extra` parameter from `new Marker()` (PHP) and access it here with `definition.extra`.\n        beachFlagImg.src = \"https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png\";\n        definition.rawOptions =  { \n            content: beachFlagImg\n        }\n      \n        // 2. To use a custom glyph for the marker\n        const pinElement = new google.maps.marker.PinElement({\n            // Note: instead of using a hardcoded URL, you can use the `extra` parameter from `new Marker()` (PHP) and access it here with `definition.extra`. \n            glyph: new URL('https://maps.gstatic.com/mapfiles/place_api/icons/v2/museum_pinlet.svg'), \n            glyphColor: \"white\",\n        });\n        definition.rawOptions = {\n            content: pinElement.element,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Svelte Component in Twig Template\nDESCRIPTION: Twig syntax for rendering a Svelte component using the svelte_component() function, passing user data as a prop.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{# templates/home.html.twig #}\n<div {{ svelte_component('Hello', { 'name': app.user.fullName }) }}></div>\n```\n\n----------------------------------------\n\nTITLE: Detecting Turbo Frame requests in a controller\nDESCRIPTION: Controller code showing how to detect if a request was triggered by a Turbo Frame and retrieve the frame's ID.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n// src/Controller/MyController.php\nnamespace App\\Controller;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass MyController\n{\n    #[Route('/')]\n    public function home(Request $request): Response\n    {\n        // Get the frame ID (will be null if the request hasn't been triggered by a Turbo Frame)\n        $frameId = $request->headers->get('Turbo-Frame');\n\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_controller with Values, Classes, and Outlets\nDESCRIPTION: Advanced example of the stimulus_controller Twig function, showing how to pass values, CSS classes, and outlets to a Stimulus controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_controller('chart', { 'name': 'Likes', 'data': [1, 2, 3, 4] }) }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div\n   data-controller=\"chart\"\n   data-chart-name-value=\"Likes\"\n   data-chart-data-value=\"&#x5B;1,2,3,4&#x5D;\"\n>\n   Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Compound Variants with CVA in Twig Components\nDESCRIPTION: Demonstrates how to define compound variants that apply specific classes when multiple variant conditions are met simultaneously.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_45\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Alert.html.twig #}\n{% props color = 'blue', size = 'md' %}\n\n{% set alert = cva({\n    base: 'alert',\n    variants: {\n       color: { red: 'bg-red' },\n       size: { lg: 'text-lg' }\n    },\n    compoundVariants: [{\n        color: ['red'],\n        size: ['lg'],\n        class: 'font-bold'\n    }]\n}) %}\n\n<div class=\"{{ alert.apply({color, size}) }}\">\n     {% block content %}{% endblock %}\n</div>\n\n{# index.html.twig #}\n\n<twig:Alert color=\"red\" size=\"lg\">\n    ...\n</twig:Alert>\n\n{# will render as: #}\n\n<div class=\"alert bg-red text-lg font-bold\">\n    ...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons in Twig Templates\nDESCRIPTION: Illustrates various ways to render icons in Twig templates, including local and on-demand icons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ ux_icon('user-profile') }}\n\n{{ ux_icon('admin:user-profile') }}\n\n{{ ux_icon('flowbite:user-solid') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Map with Symfony UX Data Attributes\nDESCRIPTION: This HTML snippet sets up a div element with various data attributes to configure a Google Map using Symfony UX. It includes settings for the API key, map center coordinates, zoom level, and other map options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set simple map, with minimum options__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Mapping Multiple Data Models Between Parent and Child\nDESCRIPTION: Example of mapping multiple data models between parent and child components using space-separated values in the dataModel attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_134\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('TextareaField', {\n    dataModel: 'user.firstName:first user.lastName:last',\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Live Component for Blog Post Collection Form\nDESCRIPTION: A Twig component class that uses LiveCollectionTrait to handle dynamic form collections for blog posts. It initializes a form instance for the blog post collection.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_78\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig;\n\nuse App\\Entity\\BlogPost;\nuse App\\Form\\BlogPostFormType;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\Form\\FormInterface;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\nuse Symfony\\UX\\LiveComponent\\LiveCollectionTrait;\n\n#[AsLiveComponent]\nclass BlogPostCollectionType extends AbstractController\n{\n    use LiveCollectionTrait;\n    use DefaultActionTrait;\n\n    #[LiveProp]\n    public BlogPost $initialFormData;\n\n    protected function instantiateForm(): FormInterface\n    {\n        return $this->createForm(BlogPostFormType::class, $this->initialFormData);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Dropzone behavior with custom Stimulus controller\nDESCRIPTION: JavaScript code for a custom Stimulus controller to extend the default Dropzone behavior with event listeners.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// mydropzone_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('dropzone:connect', this._onConnect);\n        this.element.addEventListener('dropzone:change', this._onChange);\n        this.element.addEventListener('dropzone:clear', this._onClear);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side-effects\n        this.element.removeEventListener('dropzone:connect', this._onConnect);\n        this.element.removeEventListener('dropzone:change', this._onChange);\n        this.element.removeEventListener('dropzone:clear', this._onClear);\n    }\n\n    _onConnect(event) {\n        // The dropzone was just created\n    }\n\n    _onChange(event) {\n        // The dropzone just changed\n    }\n\n    _onClear(event) {\n        // The dropzone has just been cleared\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Map Options with GoogleOptions\nDESCRIPTION: PHP code showing how to create and configure a map using GoogleOptions. Demonstrates setting map center, zoom level, control options, and other Google Maps-specific settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\Map\\Bridge\\Google\\GoogleOptions;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\ControlPosition;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\FullscreenControlOptions;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\GestureHandling;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\MapTypeControlOptions;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\MapTypeControlStyle;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\StreetViewControlOptions;\nuse Symfony\\UX\\Map\\Bridge\\Google\\Option\\ZoomControlOptions;\nuse Symfony\\UX\\Map\\Point;\nuse Symfony\\UX\\Map\\Map;\n\n$map = (new Map())\n    ->center(new Point(48.8566, 2.3522))\n    ->zoom(6);\n\n// To configure control options and other map options:\n$googleOptions = (new GoogleOptions())\n    // You can skip this option if you configure \"ux_map.google_maps.default_map_id\"\n    // in your \"config/packages/ux_map.yaml\".\n    ->mapId('YOUR_MAP_ID') \n    \n    ->gestureHandling(GestureHandling::GREEDY)\n    ->backgroundColor('#f00')\n    ->doubleClickZoom(true)\n    ->zoomControlOptions(new ZoomControlOptions(\n        position: ControlPosition::BLOCK_START_INLINE_END,\n    ))\n    ->mapTypeControlOptions(new MapTypeControlOptions(\n        mapTypeIds: ['roadmap'],\n        position: ControlPosition::INLINE_END_BLOCK_START,\n        style: MapTypeControlStyle::DROPDOWN_MENU,\n    ))\n    ->streetViewControlOptions(new StreetViewControlOptions(\n        position: ControlPosition::BLOCK_END_INLINE_START,\n    ))\n    ->fullscreenControlOptions(new FullscreenControlOptions(\n        position: ControlPosition::INLINE_START_BLOCK_END,\n    ))\n;\n\n// To disable controls:\n$googleOptions = (new GoogleOptions())\n    ->mapId('YOUR_MAP_ID')\n    ->zoomControl(false)\n    ->mapTypeControl(false)\n    ->streetViewControl(false)\n    ->fullscreenControl(false)\n;\n\n// Add the custom options to the map\n$map->options($googleOptions);\n```\n\n----------------------------------------\n\nTITLE: Defining Writable Object Properties for LiveProp in PHP\nDESCRIPTION: Shows how to define writable properties for a LiveProp entity and an array in a PHP component class.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_20\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\n\n#[AsLiveComponent]\nclass EditPost\n{\n    #[LiveProp(writable: ['title', 'content'])]\n    public Post $post;\n\n    #[LiveProp(writable: ['allow_markdown'])]\n    public array $options = ['allow_markdown' => true, 'allow_html' => false];\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple stimulus_actions\nDESCRIPTION: Example showing how to chain multiple actions on the same HTML element using the stimulus_action filter.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_action('controller', 'method')|stimulus_action('other-controller', 'test') }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div data-action=\"controller#method other-controller#test\">\n    Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Defining a MarkdownTextarea Live Component Class\nDESCRIPTION: PHP class for a MarkdownTextarea Live Component with properties for label, name, and a writable value to store the textarea content.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_136\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\n\n#[AsLiveComponent]\nfinal class MarkdownTextarea\n{\n    #[LiveProp]\n    public string $label;\n\n    #[LiveProp]\n    public string $name;\n\n    #[LiveProp(writable: true)]\n    public string $value = '';\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering PostForm Component in Twig Template\nDESCRIPTION: Shows how to render a PostForm component in a Twig template, passing initial form data for editing a post.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_65\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <h1>Edit Post</h1>\n\n    {{ component('PostForm', {\n        initialFormData: post,\n    }) }}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Implementing BlogPostFormType with CollectionType in Symfony\nDESCRIPTION: Defines a form type that includes a collection of embedded comment forms using Symfony's CollectionType, allowing dynamic addition and removal of nested forms.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_73\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Form;\n\nuse App\\Entity\\BlogPost;\nuse Symfony\\Component\\Form\\AbstractType;\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\CollectionType;\nuse Symfony\\Component\\Form\\FormBuilderInterface;\nuse Symfony\\Component\\OptionsResolver\\OptionsResolver;\n\nclass BlogPostFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('title', TextType::class)\n            // ...\n            ->add('comments', CollectionType::class, [\n                'entry_type' => CommentFormType::class,\n                'allow_add' => true,\n                'allow_delete' => true,\n                'by_reference' => false,\n            ])\n        ;\n    }\n\n    public function configureOptions(OptionsResolver $resolver)\n    {\n        $resolver->setDefaults(['data_class' => BlogPost::class]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Component Methods in Twig Template\nDESCRIPTION: Template for the FeaturedProducts component showing how to access the getProducts() method via 'this.products' to display a list of featured products.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_28\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/FeaturedProducts.html.twig #}\n<div>\n    <h3>Featured Products</h3>\n\n    {% for product in this.products %}\n        ...\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Validating URL Parameter Values with PostMount Hook\nDESCRIPTION: Shows how to validate URL parameter values using a PostMount hook and ValidatableComponentTrait. This enables validation when the component is initially mounted with values from the URL.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_110\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Validator\\Constraints as Assert;\nuse Symfony\\UX\\LiveComponent\\ValidatableComponentTrait;\nuse Symfony\\UX\\TwigComponent\\Attribute\\PostMount;\n\n#[AsLiveComponent]\nclass SearchModule\n{\n    use ValidatableComponentTrait;\n\n    #[LiveProp(writable: true, url: true)]\n    public string $query = '';\n\n    #[LiveProp(writable: true, url: true)]\n    #[Assert\\NotBlank]\n    public string $mode = 'fulltext';\n\n    #[PostMount]\n    public function postMount(): void\n    {\n        // Validate 'mode' field without throwing an exception, so the component can\n        // be mounted anyway and a validation error can be shown to the user\n        if (!$this->validateField('mode', false)) {\n            // Do something when validation fails\n        }\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Date Format for LiveProp in PHP\nDESCRIPTION: Demonstrates how to specify a date format for a DateTime LiveProp in PHP.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n#[LiveProp(writable: true, format: 'Y-m-d')]\npublic ?\\DateTime $publishOn = null;\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component\nDESCRIPTION: Example Vue component with template and script setup demonstrating props usage.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/vue/controllers/Hello.vue\n<template>\n    <div>Hello {{ name }}!</div>\n</template>\n\n<script setup>\n    defineProps({\n        name: String\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a PreRenderEvent Subscriber for Twig Components\nDESCRIPTION: Shows how to create an event subscriber that hooks into the PreRenderEvent of Twig Components. This allows modifying the template and variables before components are rendered.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_50\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\EventDispatcher\\EventSubscriberInterface;\nuse Symfony\\UX\\TwigComponent\\Event\\PreRenderEvent;\n\nclass HookIntoTwigPreRenderSubscriber implements EventSubscriberInterface\n{\n    public function onPreRender(PreRenderEvent $event): void\n    {\n        $event->getComponent(); // the component object\n        $event->getTemplate(); // the twig template name that will be rendered\n        $event->getVariables(); // the variables that will be available in the template\n\n        $event->setTemplate('some_other_template.html.twig'); // change the template used\n\n        // manipulate the variables:\n        $variables = $event->getVariables();\n        $variables['custom'] = 'value';\n\n        $event->setVariables($variables); // {{ custom }} will be available in your template\n    }\n\n    public static function getSubscribedEvents(): array\n    {\n        return [PreRenderEvent::class => 'onPreRender'];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering PostForm Component Template in Twig\nDESCRIPTION: Demonstrates how to render the form in the PostForm component's Twig template, including form start, individual form rows, and submit button.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_67\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n<div {{ attributes }}>\n    {{ form_start(form) }}\n        {{ form_row(form.title) }}\n        {{ form_row(form.slug) }}\n        {{ form_row(form.content) }}\n\n        <button>Save</button>\n    {{ form_end(form) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Forcing Re-Render with Button Click in HTML+Twig\nDESCRIPTION: Demonstrates how to use a button with a data-action attribute to force a component re-render explicitly.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: html+twig\nCODE:\n```\n<input data-model=\"norender|coupon\">\n<button data-action=\"live#$render\">Apply</button>\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Stimulus Controller to Cropper.js Form\nDESCRIPTION: PHP code snippet demonstrating how to apply a custom Stimulus controller to the Cropper.js form in Symfony.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n$form = $this->createFormBuilder(['crop' => $crop])\n    ->add('crop', CropperType::class, [\n        'public_url' => '/public/url/to/the/image.jpg',\n        'cropper_options' => [\n            'aspectRatio' => 2000 / 1800,\n        ],\n        'attr' => ['data-controller' => 'mycropper'],\n    ])\n    ->getForm()\n;\n```\n\n----------------------------------------\n\nTITLE: Composing Components in Twig\nDESCRIPTION: This example illustrates how to compose multiple components together in Twig, including Card, Icon, and Button components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Card>\n    <twig:ux:icon name=\"info\"/>\n    <twig:Button>\n        <twig:ux:icon name=\"close\" />\n    </twig:Button>\n</twig:Card>\n```\n\n----------------------------------------\n\nTITLE: Using the only() Method to Extract Specific Attributes in Twig Components\nDESCRIPTION: Shows how to extract only specific attributes using the attributes.only() method, discarding all others from the rendered output.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_41\n\nLANGUAGE: twig\nCODE:\n```\n{# render component #}\n{{ component('MyComponent', {class: 'foo', style: 'color:red'}) }}\n\n{# templates/components/MyComponent.html.twig #}\n<div {{ attributes.only('class') }}>\n  My Component!\n</div>\n\n{# renders as: #}\n<div class=\"foo\">\n  My Component!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic Turbo Frame implementation in Twig templates\nDESCRIPTION: Twig template code showing how to create Turbo Frames to scope parts of a page for independent updating without full page reload.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: html+twig\nCODE:\n```\n{# home.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <turbo-frame id=\"the_frame_id\">\n        <a href=\"{{ path('another-page') }}\">This block is scoped, the rest of the page will not change if you click here!</a>\n    </turbo-frame>\n{% endblock %}\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n{# another-page.html.twig #}\n{% extends 'base.html.twig' %}\n\n{% block body %}\n    <div>This will be discarded</div>\n\n    <turbo-frame id=\"the_frame_id\">\n        The content of this block will replace the content of the Turbo Frame!\n        The rest of the HTML generated by this template (outside of the Turbo Frame) will be ignored.\n    </turbo-frame>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using Nested Attributes for Component Descendants in Twig\nDESCRIPTION: Demonstrates the nested attributes feature that allows targeting attributes to specific descendant elements within a component rather than just the root element.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_43\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Dialog.html.twig #}\n<div {{ attributes }}>\n    <div {{ attributes.nested('title') }}>\n        {% block title %}Default Title{% endblock %}\n    </div>\n    <div {{ attributes.nested('body') }}>\n        {% block content %}{% endblock %}\n    </div>\n    <div {{ attributes.nested('footer') }}>\n        {% block footer %}Default Footer{% endblock %}\n    </div>\n</div>\n\n{# render #}\n<twig:Dialog class=\"foo\" title:class=\"bar\" body:class=\"baz\" footer:class=\"qux\">\n    Some content\n</twig:MyDialog>\n\n{# output #}\n<div class=\"foo\">\n    <div class=\"bar\">\n        Default Title\n    </div>\n    <div class=\"baz\">\n        Some content\n    </div>\n    <div class=\"qux\">\n        Default Footer\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in PHP Component Action\nDESCRIPTION: Shows how to access uploaded files in a component action through the Request object.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_60\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/FileUpload.php\nnamespace App\\Twig\\Components;\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\DefaultActionTrait;\n\n#[AsLiveComponent]\nclass FileUpload\n{\n    use DefaultActionTrait;\n\n    #[LiveAction]\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Polylines Before Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered before creating a polyline, allowing customization of its properties. It demonstrates how to access the polyline definition object which includes title and coordinates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered before creating a polyline.\n * You can use this event to fine-tune it before its creation.\n */\n_onPolylineBeforeCreate(event) {\n    console.log(event.detail.definition);\n    // { title: 'My polyline', points: [ { lat: 48.8566, lng: 2.3522 }, { lat: 45.7640, lng: 4.8357 }, { lat: 43.2965, lng: 5.3698 }, ... ], ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Event Listeners via Twig\nDESCRIPTION: Shows how to pass data to event listeners from a Twig template using data attributes, allowing for data to be sent with events triggered from the DOM.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_116\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#emit\"\n    data-live-event-param=\"productAdded\"\n    data-live-product-param=\"123\"\n>\n```\n\n----------------------------------------\n\nTITLE: Defining Fully Writable Array LiveProps in PHP\nDESCRIPTION: Shows how to define fully writable array LiveProps in a PHP component class, allowing any key to be changed, added, or removed.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n#[AsLiveComponent]\nclass EditPost\n{\n    // ...\n\n    #[LiveProp(writable: true)]\n    public array $options = ['allow_markdown' => true, 'allow_html' => false];\n\n    #[LiveProp(writable: true)]\n    public array $todoItems = ['Train tiger', 'Feed tiger', 'Pet tiger'];\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom HTML Attributes with the render() Method in Twig Components\nDESCRIPTION: Demonstrates how to take control over attribute rendering using the attributes.render() method to selectively render specific attributes while adding additional styling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_40\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/MyComponent.html.twig #}\n<div\n  style=\"{{ attributes.render('style') }} display:block;\"\n  {{ attributes }} {# be sure to always render the remaining attributes! #}\n>\n  My Component!\n</div>\n\n{# render component #}\n{{ component('MyComponent', {style: 'color:red;'}) }}\n\n{# renders as: #}\n<div style=\"color:red; display:block;\">\n  My Component!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using on(change) Modifier for Data Model in HTML+Twig\nDESCRIPTION: Demonstrates how to use the on(change) modifier with data-model to trigger re-renders on change events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: html+twig\nCODE:\n```\n<input data-model=\"on(change)|max\">\n```\n\n----------------------------------------\n\nTITLE: Using Translations in JavaScript\nDESCRIPTION: Example showing how to import and use translations with different parameters, domains, and locales in JavaScript.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Translator/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n    trans,\n    TRANSLATION_SIMPLE,\n    TRANSLATION_WITH_PARAMETERS,\n    TRANSLATION_MULTI_DOMAINS,\n    TRANSLATION_MULTI_LOCALES,\n} from './translator';\n\n// No parameters, uses the default domain (\"messages\") and the default locale\ntrans(TRANSLATION_SIMPLE);\n\n// Two parameters \"count\" and \"foo\", uses the default domain (\"messages\") and the default locale\ntrans(TRANSLATION_WITH_PARAMETERS, { count: 123, foo: 'bar' });\n\n// No parameters, uses the default domain (\"messages\") and the default locale\ntrans(TRANSLATION_MULTI_DOMAINS);\n// Same as above, but uses the \"domain2\" domain\ntrans(TRANSLATION_MULTI_DOMAINS, {}, 'domain2');\n// Same as above, but uses the \"domain3\" domain\ntrans(TRANSLATION_MULTI_DOMAINS, {}, 'domain3');\n\n// No parameters, uses the default domain (\"messages\") and the default locale\ntrans(TRANSLATION_MULTI_LOCALES);\n// Same as above, but uses the \"fr\" locale\ntrans(TRANSLATION_MULTI_LOCALES, {}, 'messages', 'fr');\n// Same as above, but uses the \"it\" locale\ntrans(TRANSLATION_MULTI_LOCALES, {}, 'messages', 'it');\n```\n\n----------------------------------------\n\nTITLE: Permanent React Component Configuration\nDESCRIPTION: Example of rendering a React component with the permanent option to keep it mounted when the root element is removed from the DOM.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/home.html.twig #}\n{% extends 'base.html.twig' %}\n\n{# The React component will stay mounted if the div is moved in the DOM #}\n<div {{ react_component('Hello', {fullName: 'Fabien'}, {permanent: true}) }}>\n     Loading...\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX React Dependencies\nDESCRIPTION: Terminal commands for installing the Symfony UX React bundle and its required dependencies using Composer and npm.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/ux-react\n$ npm install -D @babel/preset-react --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Listening to Browser Events in Stimulus Controller\nDESCRIPTION: Shows how to listen for browser events dispatched by components in a Stimulus controller, demonstrating integration between LiveComponents and Stimulus.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/bootstrap-modal-controller.js\nimport { Controller } from '@hotwired/stimulus';\nimport Modal from 'bootstrap/js/dist/modal';\n\nexport default class extends Controller {\n    modal = null;\n\n    initialize() {\n        this.modal = Modal.getOrCreateInstance(this.element);\n        window.addEventListener('modal:close', () => this.modal.hide());\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Hydration Extension for a Specific Class\nDESCRIPTION: Example of implementing a HydrationExtensionInterface to handle (de)hydration for a specific type of object. This is useful when you frequently work with the same type of object across components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_35\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Model\\Food;\nuse Symfony\\UX\\LiveComponent\\Hydration\\HydrationExtensionInterface;\n\nclass FoodHydrationExtension implements HydrationExtensionInterface\n{\n    public function supports(string $className): bool\n    {\n        return is_subclass_of($className, Food::class);\n    }\n\n    public function hydrate(mixed $value, string $className): ?object\n    {\n        return new Food($value['name'], $value['isCooked']);\n    }\n\n    public function dehydrate(object $object): mixed\n    {\n        return [\n            'name' => $object->getName(),\n            'isCooked' => $object->isCooked(),\n        ];\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from Twig Template\nDESCRIPTION: Shows how to emit events from a Twig template using data attributes, which can be used to communicate between components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_111\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#emit\"\n    data-live-event-param=\"productAdded\"\n>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Map Bundle\nDESCRIPTION: Command to install the Symfony UX Map bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-map\n```\n\n----------------------------------------\n\nTITLE: Turbo Stream Response in Twig Template\nDESCRIPTION: Shows how to create a Turbo Stream response in a Twig template. This block defines the HTML that will be sent as a partial update to the client, replacing a specific element without a full page reload.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{# bottom of new.html.twig #}\n{% block success_stream %}\n    <turbo-stream action=\"replace\" targets=\"#my_div_id\">\n        <template>\n            The element having the id \"my_div_id\" will be replaced by this block, without a full page reload!\n\n            <div>The task \"{{ task }}\" has been created!</div>\n        </template>\n    </turbo-stream>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Customizing Info Windows Before Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered before creating an info window, allowing customization of its properties. It demonstrates how to access the info window definition object.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered before creating an info window.\n * You can use this event to fine-tune the info window before its creation.\n */\n_onInfoWindowBeforeCreate(event) {\n    console.log(event.detail.definition);\n    // { headerContent: 'Paris', content: 'The capital of France', ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Form Field Options to Fix Rendering Issues in Symfony Forms\nDESCRIPTION: Shows how to configure form fields to fix common rendering issues in live components, including preventing text trimming and enabling password persistence.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_71\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options)\n{\n    $builder\n        // ...\n        ->add('content', TextareaType::class, [\n            'trim' => false,\n        ])\n    ;\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function buildForm(FormBuilderInterface $builder, array $options)\n{\n    $builder\n        // ...\n        ->add('plainPassword', PasswordType::class, [\n            'always_empty' => false,\n        ])\n    ;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Block Content in Twig Components\nDESCRIPTION: Example of how to render content passed between component tags as a 'content' block. This shows the basic component template structure with attributes handling and block rendering.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_25\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes.defaults({class: 'alert alert-' ~ type}) }}>\n    {% block content %}{% endblock %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Optimizing Largest Contentful Paint (LCP) with Symfony UX LazyImage in Twig\nDESCRIPTION: HTML and Twig code demonstrating how to optimize the Largest Contentful Paint (LCP) metric when using LazyImage by preloading the image and using inline styles.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"{{ preload(asset('image/large.png'), { as: 'image', fetchpriority: 'high' }) }}\"\n    style=\"background-image: url('{{ data_uri_thumbnail('public/image/large.png', 20, 15) }}')\"\n    fetchpriority=\"high\"\n\n    {# Using BlurHash, the size is required #}\n    width=\"200\"\n    height=\"150\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Low-Level Options for Symfony UX Map Elements\nDESCRIPTION: This JavaScript snippet demonstrates how to customize low-level options for map elements using the rawOptions property. It shows configuration for both Google Maps and Leaflet renderers across different map elements.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/mymap_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n        this.element.addEventListener('ux:map:info-window:before-create', this._onInfoWindowBeforeCreate);\n        this.element.addEventListener('ux:map:polygon:before-create', this._onPolygonBeforeCreate);\n        this.element.addEventListener('ux:map:polyline:before-create', this._onPolylineBeforeCreate);\n    }\n\n    _onMarkerBeforeCreate(event) {\n        // When using Google Maps, to configure a `google.maps.AdvancedMarkerElement`\n        event.detail.definition.rawOptions = {\n            gmpDraggable: true,\n            // ...\n        };\n\n        // When using Leaflet, to configure a `L.Marker` instance\n        event.detail.definition.rawOptions = {\n            riseOnHover: true,\n            // ...\n        };\n    }\n\n    _onInfoWindowBeforeCreate(event) {\n        // When using Google Maps, to configure a `google.maps.InfoWindow` instance\n        event.detail.definition.rawOptions = {\n            maxWidth: 200,\n            // ...\n        };\n\n        // When using Leaflet, to configure a `L.Popup` instance\n        event.detail.definition.rawOptions = {\n            direction: 'left',\n            // ...\n        };\n    }\n\n    _onPolygonBeforeCreate(event) {\n        // When using Google Maps, to configure a `google.maps.Polygon`\n        event.detail.definition.rawOptions = {\n            strokeColor: 'red',\n            // ...\n        };\n\n        // When using Leaflet, to configure a `L.Polygon`\n        event.detail.definition.rawOptions = {\n            color: 'red',\n            // ...\n        };\n    }\n\n    _onPolylineBeforeCreate(event) {\n        // When using Google Maps, to configure a `google.maps.Polyline`\n        event.detail.definition.rawOptions = {\n            strokeColor: 'red',\n            // ...\n        };\n\n        // When using Leaflet, to configure a `L.Polyline`\n        event.detail.definition.rawOptions = {\n            color: 'red',\n            // ...\n        };\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Map in Twig Template\nDESCRIPTION: Twig examples showing different ways to render a map including custom attributes and styling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n{{ ux_map(my_map, { style: 'height: 300px' }) }}\n\n{{ ux_map(my_map, { style: 'height: 300px', id: 'events-map', class: 'mb-3' }) }}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Dropzone via Composer\nDESCRIPTION: Command to install the Symfony UX Dropzone bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/ux-dropzone\n```\n\n----------------------------------------\n\nTITLE: Rendering Component Attributes with Defaults\nDESCRIPTION: Shows how to render attributes passed to a component while merging with default classes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ attributes.defaults({class: 'alert alert-' ~ type}) }}>\n    {{ message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Registering Svelte Components in JavaScript Entry Point\nDESCRIPTION: JavaScript code to register Svelte controller components in the main JavaScript entry point. This loads all Svelte components from the specified directory.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport { registerSvelteControllerComponents } from '@symfony/ux-svelte';\n\nregisterSvelteControllerComponents(require.context('./svelte/controllers', true, /\\.svelte$/));\n```\n\n----------------------------------------\n\nTITLE: Form handling with Turbo Drive in Symfony 6.2+\nDESCRIPTION: Controller code showing form handling with Turbo Drive in Symfony 6.2+, which automatically handles the correct response status codes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/new', name: 'product_new')]\npublic function newProduct(Request $request): Response\n{\n    $form = $this->createForm(ProductFormType::class, null, [\n        'action' => $this->generateUrl('product_new'),\n    ]);\n    $form->handleRequest($request);\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        // save...\n\n        return $this->redirectToRoute('product_list');\n    }\n\n    return $this->render('product/new.html.twig', [\n        'form' => $form,\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Using DTO Objects with LiveProp in PHP Components\nDESCRIPTION: Example of using a DTO (Data Transfer Object) as a LiveProp in a component class. The LiveProp annotation enables automatic hydration and dehydration of the DTO object.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_30\n\nLANGUAGE: php\nCODE:\n```\nclass ComponentWithAddressDto\n{\n    #[LiveProp]\n    public AddressDto $addressDto;\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Markers Before Creation in Symfony UX Map\nDESCRIPTION: This event handler allows modification of marker properties before the marker is created. It demonstrates accessing the marker definition and modifying its title property as an example.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered before creating a marker.\n * You can use this event to fine-tune it before its creation.\n */\n_onMarkerBeforeCreate(event) {\n    console.log(event.detail.definition);\n    // { title: 'Paris', position: { lat: 48.8566, lng: 2.3522 }, ... }\n\n    // Example: uppercase the marker title\n    event.detail.definition.title = event.detail.definition.title.toUpperCase();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding and Removing Classes During Component Loading\nDESCRIPTION: Examples showing how to add or remove CSS classes while a LiveComponent is in a loading state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_44\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- add this class when loading -->\n<div data-loading=\"addClass(opacity-50)\">...</div>\n\n<!-- remove this class when loading -->\n<div data-loading=\"removeClass(opacity-50)\">...</div>\n\n<!-- add multiple classes when loading -->\n<div data-loading=\"addClass(opacity-50 text-muted)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Live Render Action to Twig Template\nDESCRIPTION: Demonstrates how to add a button that triggers a live re-render of the component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n<div {{ attributes }}>\n    <strong>{{ this.randomNumber }}</strong>\n\n    <button\n        data-action=\"live#$render\"\n    >Generate a new number!</button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Extended Swup Configuration Options\nDESCRIPTION: Advanced Swup configuration example showing all available options including animations, themes, and debug settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n<html lang=\"en\">\n    <head>\n        <title>Swup</title>\n    </head>\n    <body\n        {{ stimulus_controller('symfony/ux-swup/swup', {\n            containers: ['#swup', '#nav'],\n            animateHistoryBrowsing: true,\n            animationSelector: '[class*=\"transition-\"]',\n            cache: true,\n            linkSelector: '...',\n\n            theme: 'slide',\n            debug: true,\n        }) }}\n    >\n        {# ... #}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Live Component\nDESCRIPTION: Shows how to update the Twig template to work with a live component by adding the attributes variable.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n- <div>\n+ <div {{ attributes }}>\n      <strong>{{ this.randomNumber }}</strong>\n  </div>\n```\n\n----------------------------------------\n\nTITLE: Defining Props in Anonymous Components\nDESCRIPTION: Shows how to define and use props in anonymous components using the {% props %} tag. This example creates a button component with icon and type props that can be customized.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_34\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/Button.html.twig #}\n{% props icon = null, type = 'primary' %}\n\n<button {{ attributes.defaults({class: 'btn btn-'~type}) }}>\n    {% block content %}{% endblock %}\n    {% if icon %}\n        <span class=\"fa-solid fa-{{ icon }}\"></span>\n    {% endif %}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading of Symfony Live Components with HTML Syntax\nDESCRIPTION: Demonstrates how to lazy load components when they become visible in the viewport using the loading=\"lazy\" attribute with the HTML syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_94\n\nLANGUAGE: twig\nCODE:\n```\n{# With the HTML syntax #}\n<twig:Acme foo=\"bar\" loading=\"lazy\" />\n```\n\n----------------------------------------\n\nTITLE: Initializing Stimulus App with AssetMapper\nDESCRIPTION: Demonstrates how to initialize the Stimulus application using the startStimulusApp function from @symfony/stimulus-bundle when using AssetMapper.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/bootstrap.js\nimport { startStimulusApp } from '@symfony/stimulus-bundle';\n\nconst app = startStimulusApp();\n```\n\n----------------------------------------\n\nTITLE: Passing Multiple Props to a Component\nDESCRIPTION: Shows how to pass multiple props to a component when rendering it, including the type and message for an Alert.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('Alert', {message: 'Successfully created!'}) }}\n\n{{ component('Alert', {\n    type: 'danger',\n    message: 'Danger Will Robinson!'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Using Turbo Stream Listen in Twig Templates\nDESCRIPTION: HTML example demonstrating how to use the turbo_stream_listen Twig function to register a Stimulus controller for listening to entity broadcasts through a specified transport hub.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_26\n\nLANGUAGE: html+twig\nCODE:\n```\n<div id=\"messages\" {{ turbo_stream_listen('App\\\\Entity\\\\Book', 'hub2') }}></div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Vue Component in Twig\nDESCRIPTION: Example of rendering a Vue component in a Twig template with props.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{# templates/home.html.twig #}\n<div {{ vue_component('Hello', { 'name': app.user.fullName }) }}></div>\n```\n\n----------------------------------------\n\nTITLE: Excluding Attributes with without() Method in Twig Components\nDESCRIPTION: Demonstrates how to exclude specific attributes from rendering using the attributes.without() method while keeping all others.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_42\n\nLANGUAGE: twig\nCODE:\n```\n{# render component #}\n{{ component('MyComponent', {class: 'foo', style: 'color:red'}) }}\n\n{# templates/components/MyComponent.html.twig #}\n<div {{ attributes.without('class') }}>\n  My Component!\n</div>\n\n{# renders as: #}\n<div style=\"color:red\">\n  My Component!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using extra_options with FoodForm in PHP\nDESCRIPTION: Improved form configuration that uses extra_options to pass excluded food IDs. This approach works with Ajax-powered autocomplete as extra_options are preserved during Ajax calls.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/FoodForm.php\n// ...\n\nclass FoodForm extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $currentFoodId = $builder->getData()->getId();\n\n        $builder\n            ->add('food', FoodAutocompleteField::class, [\n                'extra_options' => [\n                    'excluded_foods' => [$currentFoodId],\n                ],\n            ]\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map in Twig Template\nDESCRIPTION: Twig template code snippet showing how to render a map component with custom styling. Uses the ux_map() function to display the map with a specified height.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n<div{{ attributes }}>\n    {{ ux_map(map, {style: 'height: 300px'}) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveComponent Object Directly in JavaScript\nDESCRIPTION: Example of accessing the Component object via the __component property on a LiveComponent element.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst component = document.getElementById('id-of-your-element').__component;\ncomponent.mode = 'editing';\n```\n\n----------------------------------------\n\nTITLE: Using Formatted Date LiveProp in HTML+Twig\nDESCRIPTION: Shows how to use a formatted date LiveProp in an HTML input field.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_26\n\nLANGUAGE: html+twig\nCODE:\n```\n<input type=\"date\" data-model=\"publishOn\">\n```\n\n----------------------------------------\n\nTITLE: Enabling Autocomplete on Form Fields without Ajax\nDESCRIPTION: Diff showing how to add the autocomplete option to EntityType and ChoiceType fields to enable the autocomplete functionality without Ajax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n// src/Form/AnyForm.php\n// ...\n\nclass AnyForm extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n            ->add('food', EntityType::class, [\n                'class' => Food::class,\n                'placeholder' => 'What should we eat?',\n+                'autocomplete' => true,\n            ])\n\n            ->add('portionSize', ChoiceType::class, [\n                'choices' => [\n                    'Choose a portion size' => '',\n                    'small' => 's',\n                    'medium' => 'm',\n                    'large' => 'l',\n                    'extra large' => 'xl',\n                    'all you can eat' => '∞',\n                ],\n+                'autocomplete' => true,\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_controller with CSS Classes\nDESCRIPTION: Example of using the stimulus_controller Twig function to set CSS classes that can be toggled by the controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_controller('chart', { 'name': 'Likes', 'data': [1, 2, 3, 4] }, { 'loading': 'spinner' }) }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div\n   data-controller=\"chart\"\n   data-chart-name-value=\"Likes\"\n   data-chart-data-value=\"&#x5B;1,2,3,4&#x5D;\"\n   data-chart-loading-class=\"spinner\"\n>\n   Hello\n</div>\n\n<!-- or without values -->\n<div {{ stimulus_controller('chart', controllerClasses = { 'loading': 'spinner' }) }}>\n    Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Triggering Specific Actions with Polling in Live Components\nDESCRIPTION: Demonstrates how to trigger a specific action method instead of a normal re-render when polling, with an optional delay.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_103\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    {{ attributes }}\n\n    data-poll=\"save\"\n    {#\n    Or add a delay() modifier:\n    data-poll=\"delay(2000)|save\"\n    #}\n>\n```\n\n----------------------------------------\n\nTITLE: Deferred Loading of Symfony Live Components with Component Function\nDESCRIPTION: Shows how to defer the loading of heavy components until after the page has loaded using the loading: 'defer' option with the component function.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_93\n\nLANGUAGE: twig\nCODE:\n```\n{# With the component function #}\n{{ component('SomeHeavyComponent', { loading: 'defer' }) }}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Component with PHP Function\nDESCRIPTION: Shows how to render the Alert component in a Twig template using the component() function, passing the message prop as an argument.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('Alert', {message: 'Hello Twig Components!'}) }}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Elements During Re-render in HTML\nDESCRIPTION: Demonstrates how to use the data-live-ignore attribute to prevent an element from changing when a component re-renders.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_149\n\nLANGUAGE: html\nCODE:\n```\n<input name=\"favorite_color\" data-live-ignore>\n```\n\n----------------------------------------\n\nTITLE: Loading Icons in Twig Templates\nDESCRIPTION: Examples of using the ux_icon() Twig function to include SVG icons in templates. Shows how to reference local icons, icons in subdirectories, and icons from remote sets.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{# includes the contents of the 'assets/icons/user-profile.svg' file in the template #}\n{{ ux_icon('user-profile') }}\n\n{# icons stored in subdirectories must use the 'subdirectory_name:file_name' syntax\n   (e.g. this includes 'assets/icons/admin/user-profile.svg') #}\n{{ ux_icon('admin:user-profile') }}\n\n{# this downloads the 'user-solid.svg' icon from the 'Flowbite' icon set via ux.symfony.com\n   and embeds the downloaded SVG contents in the template #}\n{{ ux_icon('flowbite:user-solid') }}\n```\n\n----------------------------------------\n\nTITLE: Alert Component Template in Twig\nDESCRIPTION: Defines the HTML template for the Alert component, which renders a div with the appropriate alert class based on the type prop and displays the message content.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Alert.html.twig #}\n<div class=\"alert alert-{{ type }}\">\n    {{ message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Template Path for a Component\nDESCRIPTION: Shows how to specify a custom template path for a component using the AsTwigComponent attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\n// ...\n\n#[AsTwigComponent(template: 'my/custom/template.html.twig')]\nclass Alert\n```\n\n----------------------------------------\n\nTITLE: Defining LiveProps with URL Bindings in PHP Component\nDESCRIPTION: Shows how to define LiveProps that are bound to URL parameters in a SearchModule component. When these properties change, their values are reflected in the URL query parameters.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_106\n\nLANGUAGE: php\nCODE:\n```\n// ...\n#[AsLiveComponent]\nclass SearchModule\n{\n    #[LiveProp(writable: true, url: true)]\n    public string $query = '';\n\n    #[LiveProp(writable: true, url: true)]\n    public string $mode = 'fulltext';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Symfony UX Map with Stimulus Controller in Twig\nDESCRIPTION: This Twig snippet shows how to render a map with the UX Map component and attach a Stimulus controller. The style attribute is used to set the height of the map container.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ ux_map(my_map, { 'data-controller': 'mymap', style: 'height: 300px' }) }}\n```\n\n----------------------------------------\n\nTITLE: Attaching Stimulus Controller to Modal Element\nDESCRIPTION: Shows how to attach a Stimulus controller to a modal element in a Twig template, enabling the controller to respond to browser events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_124\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"modal fade\" {{ stimulus_controller('bootstrap-modal') }}>\n    <div class=\"modal-dialog\">\n        ... content ...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Adding Debounce to Data Model in Twig\nDESCRIPTION: Demonstrates how to add debounce to a data-model attribute to control update frequency.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n        <input data-model=\"debounce(100)|max\">\n```\n\n----------------------------------------\n\nTITLE: Customizing Toggle Password Labels and Icons\nDESCRIPTION: Example showing how to customize the toggle button labels and icons in a form type.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType;\n\nclass CredentialFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('password', PasswordType::class, [\n                'toggle' => true,\n                'hidden_label' => 'Masquer',\n                'visible_label' => 'Afficher',\n                'visible_icon' => null,\n                'hidden_icon' => null,\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating custom entity autocompleter in PHP\nDESCRIPTION: Implementation of a custom autocompleter for entities without using the form system. This creates an Ajax endpoint that can be used with the Stimulus autocomplete controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\Autocompleter;\n\nuse App\\Entity\\Food;\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Symfony\\Bundle\\SecurityBundle\\Security;\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AutoconfigureTag;\nuse Symfony\\UX\\Autocomplete\\EntityAutocompleterInterface;\n\n#[AutoconfigureTag('ux.entity_autocompleter', ['alias' => 'food'])]\nclass FoodAutocompleter implements EntityAutocompleterInterface\n{\n    public function getEntityClass(): string\n    {\n        return Food::class;\n    }\n\n    public function createFilteredQueryBuilder(EntityRepository $repository, string $query): QueryBuilder\n    {\n        return $repository\n            // the alias \"food\" can be anything\n            ->createQueryBuilder('food')\n\n```\n\n----------------------------------------\n\nTITLE: Emitting Events from JavaScript\nDESCRIPTION: Shows how to emit events from JavaScript using the component instance, which is useful when you need to trigger component communication from client-side code.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nthis.component.emit('productAdded');\n```\n\n----------------------------------------\n\nTITLE: Using Service Autowiring in Component Actions\nDESCRIPTION: Shows how to use Symfony's dependency injection with autowiring in component actions to access services.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_54\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/RandomNumber.php\nnamespace App\\Twig\\Components;\n\n// ...\nuse Psr\\Log\\LoggerInterface;\n\nclass RandomNumber\n{\n    // ...\n\n    #[LiveAction]\n    public function resetMax(LoggerInterface $logger)\n    {\n        $this->max = 1000;\n        $logger->debug('The min/max were reset!');\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Overwriting HTML Instead of Morphing in HTML\nDESCRIPTION: Shows how to use the data-skip-morph attribute to overwrite the inner HTML of an element instead of morphing it during a re-render.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_150\n\nLANGUAGE: html\nCODE:\n```\n<select data-skip-morph>\n    <option>...</option>\n</select>\n```\n\n----------------------------------------\n\nTITLE: Using live_action Helper in Twig\nDESCRIPTION: Demonstrates how to use the live_action Twig helper function to render action attributes with or without modifiers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_53\n\nLANGUAGE: html+twig\nCODE:\n```\n<button {{ live_action('resetMax') }}>Reset Min/Max</button>\n\n{# with modifiers #}\n\n<button {{ live_action('save', {}, {'debounce': 300}) }}>Save</button>\n```\n\n----------------------------------------\n\nTITLE: Making Entity LiveProp Fully Writable in PHP\nDESCRIPTION: Demonstrates how to make an entity LiveProp fully writable, allowing the user to switch the entity to another.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_27\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\n\n#[AsLiveComponent]\nclass EditPost\n{\n    #[LiveProp(writable: true)]\n    public Post $post;\n}\n```\n\n----------------------------------------\n\nTITLE: Warming Icon Cache via Console Command in PHP\nDESCRIPTION: Shows how to pre-warm the icon cache for production use to improve performance.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n$ php bin/console ux:icons:warm-cache\n\n# Verbose mode to see potential invalid icons\n$ php bin/console ux:icons:warm-cache -v\n```\n\n----------------------------------------\n\nTITLE: Mixing Props and Attributes in HTML Syntax\nDESCRIPTION: Shows how to combine component props with HTML attributes in the HTML-like syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_22\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert message=\"hello!\" id=\"custom-alert-id\" />\n```\n\n----------------------------------------\n\nTITLE: Implementing Cropper.js in Symfony Controller\nDESCRIPTION: PHP code demonstrating how to use the CropperInterface service to create and process a crop object within a Symfony controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// ...\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\UX\\Cropperjs\\Factory\\CropperInterface;\nuse Symfony\\UX\\Cropperjs\\Form\\CropperType;\n\nclass HomeController extends AbstractController\n{\n    #[Route('/', name: 'app_homepage')]\n    public function index(CropperInterface $cropper, Request $request): Response\n    {\n        $crop = $cropper->createCrop('/server/path/to/the/image.jpg');\n        $crop->setCroppedMaxSize(2000, 1500);\n\n        $form = $this->createFormBuilder(['crop' => $crop])\n            ->add('crop', CropperType::class, [\n                'public_url' => '/public/url/to/the/image.jpg',\n                'cropper_options' => [\n                    'aspectRatio' => 2000 / 1500,\n                ],\n            ])\n            ->getForm()\n        ;\n\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            // Get the cropped image data (as a string)\n            $crop->getCroppedImage();\n\n            // Create a thumbnail of the cropped image (as a string)\n            $crop->getCroppedThumbnail(200, 150);\n\n            // ...\n        }\n\n        return $this->render('home/index.html.twig', [\n            'form' => $form->createView(),\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic URL Parameter Name Modification with Modifiers\nDESCRIPTION: Shows how to use a modifier function to dynamically change URL parameter names, which is useful when using the same component multiple times on a page to avoid parameter name collisions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_108\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\UX\\LiveComponent\\Metadata\\UrlMapping;\n\n#[AsLiveComponent]\nclass SearchModule\n{\n    #[LiveProp(writable: true, url: true, modifier: 'modifyQueryProp')]\n    public string $query = '';\n\n    #[LiveProp]\n    public ?string $alias = null;\n\n    public function modifyQueryProp(LiveProp $liveProp): LiveProp\n    {\n        if ($this->alias) {\n            $liveProp = $liveProp->withUrl(new UrlMapping(as: $this->alias));\n        }\n        return $liveProp;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Data Model in Twig for Form Start\nDESCRIPTION: Shows how to set the data-model attribute with a norender modifier when starting a form in Twig.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_start(form, {attr: {'data-model': 'norender|*'}}) }}\n```\n\n----------------------------------------\n\nTITLE: Adding HTML Attributes to SVG Icons in Twig\nDESCRIPTION: Examples of passing HTML attributes to the SVG element when using the ux_icon() function. Shows how to add classes, dimensions, and ARIA attributes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ ux_icon('user-profile', {class: 'w-4 h-4'}) }}\n{# renders <svg class=\"w-4 h-4\"> ... </svg> #}\n\n{{ ux_icon('user-profile', {height: '16px', width: '16px', 'aria-hidden': true}) }}\n{# renders <svg height=\"16\" width=\"16\" aria-hidden=\"true\"> ... </svg> #}\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Leaflet Map Component in HTML\nDESCRIPTION: HTML markup for a Symfony UX Leaflet map component with data attributes that define map properties. The template includes configuration for map center, zoom level, tile provider, and markers for Paris and Lyon with their respective positions and information windows.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with marker remove and new ones added__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker1&quot;,&quot;@id&quot;:&quot;872feba9ebf3905d&quot;},{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Lyon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker2&quot;,&quot;@id&quot;:&quot;6028bf5e41f644ab&quot;}]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Broadcast Attribute for Entity Transport Selection\nDESCRIPTION: Example showing how to configure a Book entity with the #[Broadcast] attribute and specify which transports to use for broadcasting changes. This allows targeting specific Mercure hubs.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n// src/Entity/Book.php\nnamespace App\\Entity;\n\nuse Symfony\\UX\\Turbo\\Attribute\\Broadcast;\n\n#[Broadcast(transports: ['hub1', 'hub2'])]\n/** ... */\nclass Book\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Placeholder Based on Component Props\nDESCRIPTION: Demonstrates how to use component props in the placeholder macro to create loading content that matches the expected output structure.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_97\n\nLANGUAGE: twig\nCODE:\n```\n{# In the calling template #}\n<twig:RecommendedProducts size=\"3\" loading=\"defer\" />\n```\n\nLANGUAGE: twig\nCODE:\n```\n{# In the component template #}\n{% macro placeholder(props) %}\n    {% for i in 1..props.size %}\n        <div class=\"loading-product\">\n            ...\n        </div>\n    {% endfor %}\n{% endmacro %}\n```\n\n----------------------------------------\n\nTITLE: Using Third-Party Twig Components in Templates\nDESCRIPTION: Example of how to use components from third-party bundles in Twig templates. Components from bundles use the bundle's Twig namespace followed by the component path.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_52\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Acme:Button type=\"primary\">\n    Click me\n</twig:Acme:Button>\n```\n\n----------------------------------------\n\nTITLE: Using Alert Component with Props in Twig\nDESCRIPTION: This example demonstrates how to use the Alert component by passing props for type, icon, and message.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert type=\"success\" icon=\"check\" message=\"Your account has been created.\" />\n```\n\n----------------------------------------\n\nTITLE: Advanced File Upload Options in Twig\nDESCRIPTION: Shows different ways to specify which files should be sent with an action using the files modifier.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_59\n\nLANGUAGE: html+twig\nCODE:\n```\n<p>\n    <input type=\"file\" name=\"my_file\" />\n    <input type=\"file\" name=\"multiple[]\" multiple />\n\n    {# Send only file from first input #}\n    <button data-action=\"live#action\" data-live-action-param=\"files(my_file)|myAction\" />\n    {# You can chain modifiers to send multiple files #}\n    <button data-action=\"live#action\" data-live-action-param=\"files(my_file)|files(multiple[])|myAction\" />\n    {# Or send all pending files #}\n    <button data-action=\"live#action\" data-live-action-param=\"files|myAction\" />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Making Entity LiveProp Partially Writable in PHP\nDESCRIPTION: Demonstrates how to make an entity LiveProp partially writable, allowing changes to the entity itself and specific properties.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_29\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Post;\n\n#[AsLiveComponent]\nclass EditPost\n{\n    #[LiveProp(writable: [LiveProp::IDENTITY, 'title', 'content'])]\n    public Post $post;\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting Event Listeners in Symfony UX Map Controller\nDESCRIPTION: This method removes all event listeners when the Stimulus controller is disconnected to avoid side effects. It cleans up listeners for map creation and various map elements like markers, info windows, polygons, and polylines.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndisconnect() {\n    // You should always remove listeners when the controller is disconnected to avoid side effects\n    this.element.removeEventListener('ux:map:pre-connect', this._onPreConnect);\n    this.element.removeEventListener('ux:map:connect', this._onConnect);\n    this.element.removeEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n    this.element.removeEventListener('ux:map:marker:after-create', this._onMarkerAfterCreate);\n    this.element.removeEventListener('ux:map:info-window:before-create', this._onInfoWindowBeforeCreate);\n    this.element.removeEventListener('ux:map:info-window:after-create', this._onInfoWindowAfterCreate);\n    this.element.removeEventListener('ux:map:polygon:before-create', this._onPolygonBeforeCreate);\n    this.element.removeEventListener('ux:map:polygon:after-create', this._onPolygonAfterCreate);\n    this.element.removeEventListener('ux:map:polyline:before-create', this._onPolylineBeforeCreate);\n    this.element.removeEventListener('ux:map:polyline:after-create', this._onPolylineAfterCreate);\n}\n```\n\n----------------------------------------\n\nTITLE: Syntax Examples for Nested Twig Components\nDESCRIPTION: Demonstrates correct and incorrect ways to nest Twig components, showing that you cannot mix the Twig syntax and HTML syntax when using nested components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_53\n\nLANGUAGE: twig\nCODE:\n```\n{# ❌ this won't work because it mixes different syntaxes #}\n<twig:Card>\n    {# ... #}\n\n    {% block footer %}\n        <twig:Button:Primary :isBlock=\"true\">Edit</twig:Button:Primary>\n    {% endblock %}\n</twig:Card>\n\n{# ✅ this works because it only uses the HTML syntax #}\n<twig:Card>\n    {# ... #}\n\n    <twig:block name=\"footer\">\n        <twig:Button:Primary :isBlock=\"true\">Edit</twig:Button:Primary>\n    </twig:block>\n</twig:Card>\n\n{# ✅ this also works because it only uses the Twig syntax #}\n{% component Card %}\n    {# ... #}\n\n    {% block footer %}\n        {% component 'Button:Primary' with {isBlock: true} %}\n            {% block content %}Edit{% endblock %}\n        {% endcomponent %}\n    {% endblock %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Delaying Loading Effects in Twig\nDESCRIPTION: Examples of using the 'delay' modifier to trigger loading changes only after loading has taken longer than a certain amount of time.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_47\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- Add class after 200ms of loading -->\n<div data-loading=\"delay|addClass(opacity-50)\">...</div>\n\n<!-- Show after 200ms of loading -->\n<div data-loading=\"delay|show\">Loading</div>\n\n<!-- Show after 500ms of loading -->\n<div data-loading=\"delay(500)|show\">Loading</div>\n```\n\n----------------------------------------\n\nTITLE: Hiding Elements During Component Loading\nDESCRIPTION: Example of hiding an element while a LiveComponent is loading, useful for showing success messages once loading is complete.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_43\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- hide when the component is loading -->\n<span data-loading=\"hide\">Saved!</span>\n```\n\n----------------------------------------\n\nTITLE: Setting Turbo Refresh Method in Twig\nDESCRIPTION: Twig function that generates a meta tag to configure the refresh method for Turbo page refreshes, allowing choice between 'replace' or 'morph' methods.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_33\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_refresh_method(method: 'replace') }}\n```\n\n----------------------------------------\n\nTITLE: Setting LiveProp Options Dynamically in PHP\nDESCRIPTION: Demonstrates how to use the modifier option to dynamically configure LiveProp options using a custom method in the component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_155\n\nLANGUAGE: php\nCODE:\n```\n#[AsLiveComponent]\nclass ProductSearch\n{\n    #[LiveProp(writable: true, modifier: 'modifyAddedDate')]\n    public ?\\DateTimeImmutable $addedDate = null;\n\n    #[LiveProp]\n    public string $dateFormat = 'Y-m-d';\n\n    // ...\n\n    public function modifyAddedDate(LiveProp $prop): LiveProp\n    {\n        return $prop->withFormat($this->dateFormat);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Marker After Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered after a marker is created, providing access to the marker instance. The specific implementation of the marker instance depends on the renderer being used (Leaflet or Google Maps).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered after creating a marker.\n * You can access the created marker instance, which depends on the renderer you are using.\n */\n_onMarkerAfterCreate(event) {\n    // The marker instance\n    console.log(event.detail.marker);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Polyline After Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered after a polyline is created, providing access to the polyline instance. The actual implementation depends on the renderer being used (Leaflet or Google Maps).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered after creating a polyline.\n * You can access the created polyline instance, which depends on the renderer you are using.\n */\n_onPolylineAfterCreate(event) {\n    // The polyline instance\n    console.log(event.detail.polyline);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Leaflet Markers with Stimulus\nDESCRIPTION: Stimulus controller implementation for customizing map markers with custom icons and options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Controller} from \"@hotwired/stimulus\";\n\nexport default class extends Controller\n{\n    connect() {\n        this.element.addEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n    }\n\n    disconnect() {\n        // Always remove listeners when the controller is disconnected\n        this.element.removeEventListener('ux:map:marker:before-create', this._onMarkerBeforeCreate);\n    }\n\n    _onMarkerBeforeCreate(event) {\n        // You can access the marker definition and the Leaflet object\n        // Note: `definition.rawOptions` is the raw options object that will be passed to the `L.marker` constructor. \n        const { definition, L } = event.detail;\n\n        // Use a custom icon for the marker\n        const redIcon = L.icon({\n          // Note: instead of using a hardcoded URL, you can use the `extra` parameter from `new Marker()` (PHP) and access it here with `definition.extra`.\n          iconUrl: 'https://leafletjs.com/examples/custom-icons/leaf-red.png',\n          shadowUrl: 'https://leafletjs.com/examples/custom-icons/leaf-shadow.png',\n          iconSize: [38, 95], // size of the icon\n          shadowSize: [50, 64], // size of the shadow\n          iconAnchor: [22, 94], // point of the icon which will correspond to marker's location\n          shadowAnchor: [4, 62],  // the same for the shadow\n          popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor\n        })\n  \n        definition.rawOptions = {\n          icon: redIcon,\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BlurHash with Symfony UX LazyImage in Twig\nDESCRIPTION: HTML and Twig code demonstrating how to use the BlurHash algorithm to create a light, blurred, data-uri thumbnail of the image with LazyImage.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"{{ data_uri_thumbnail('public/image/large.png', 100, 75) }}\"\n    {{ stimulus_controller('symfony/ux-lazy-image/lazy-image', {\n        src: asset('image/large.png')\n    }) }}\n\n    {# Using BlurHash, the size is required #}\n    width=\"200\"\n    height=\"150\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Passing HTML Content to Components\nDESCRIPTION: Shows how to pass HTML content to a component using the HTML-like syntax with opening and closing tags.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_24\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert>\n    I'm writing <strong>HTML</strong> right here!\n</twig:Alert>\n```\n\n----------------------------------------\n\nTITLE: Using HTML Syntax for Twig Components\nDESCRIPTION: Demonstrates the HTML-like syntax for rendering Twig components with properties as attributes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert message=\"This is really cool!\" withCloseButton />\n```\n\n----------------------------------------\n\nTITLE: Spreading Attributes with HTML Syntax\nDESCRIPTION: Demonstrates how to spread an array of attributes to a component using the spread operator syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_23\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert {{ ...myAttributes }} />\n```\n\n----------------------------------------\n\nTITLE: Inline Form Rendering with Custom Collection Controls\nDESCRIPTION: A Twig template that renders a form with custom delete and add buttons for collection items, demonstrating manual control over collection rendering.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_80\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes }}>\n    {{ form_start(form) }}\n        {{ form_row(form.title) }}\n\n        <h3>Comments:</h3>\n        {% for key, commentForm in form.comments %}\n            {# render a delete button for every row #}\n            {{ form_row(commentForm.vars.button_delete, { label: 'X', attr: { class: 'btn btn-outline-danger' } }) }}\n\n            {# render rest of the comment form #}\n            {{ form_row(commentForm, { label: false }) }}\n        {% endfor %}\n\n        {# render the add button #}\n        {{ form_widget(form.comments.vars.button_add, { label: '+ Add comment', attr: { class: 'btn btn-outline-primary' } }) }}\n\n        {# render rest of the form #}\n        {{ form_row(form) }}\n\n        <button type=\"submit\" >Save</button>\n    {{ form_end(form) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Emitting Events Only to Parent Components from Twig\nDESCRIPTION: Shows how to emit events only to parent components using the emitUp action in Twig, which limits the event propagation to ancestors.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_119\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#emitUp\"\n    data-live-event-param=\"productAdded\"\n>\n```\n\n----------------------------------------\n\nTITLE: Table-based Form with Custom Add Button Position\nDESCRIPTION: A template that renders collection items in a table and places the add button after the table instead of inside it using the skip_add_button option.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_87\n\nLANGUAGE: html+twig\nCODE:\n```\n<table class=\"table table-borderless form-no-mb\">\n    <thead>\n        <tr>\n            <td>Item</td>\n            <td>Priority</td>\n            <td></td>\n        </tr>\n    </thead>\n    <tbody>\n        {{ form_row(form.todoItems, { skip_add_button: true }) }}\n    </tbody>\n</table>\n\n{{ form_widget(form.todoItems.vars.button_add, { label: '+ Add Item', attr: { class: 'btn btn-outline-primary' } }) }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Polygon After Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered after a polygon is created, providing access to the polygon instance. The actual implementation depends on the renderer being used (Leaflet or Google Maps).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered after creating a polygon.\n * You can access the created polygon instance, which depends on the renderer you are using.\n */\n_onPolygonAfterCreate(event) {\n    // The polygon instance\n    console.log(event.detail.polygon);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Twig Components\nDESCRIPTION: Console command to list all registered Twig components in a Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:twig-component\n```\n\n----------------------------------------\n\nTITLE: Basic Template for Rendering a Live Collection Form\nDESCRIPTION: A simple Twig template that renders a form with automatic add and delete buttons for the collection items.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_79\n\nLANGUAGE: html+twig\nCODE:\n```\n<div {{ attributes }}>\n    {{ form(form) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Customizing autocomplete route in YAML\nDESCRIPTION: Route configuration for customizing the Ajax URL used by autocomplete. This allows placing the autocomplete endpoint under a specific URL pattern, such as within an admin area.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes/attributes.yaml\nux_entity_autocomplete_admin:\n    controller: ux.autocomplete.entity_autocomplete_controller\n    path: '/admin/autocomplete/{alias}'\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Chart.js with Composer and npm\nDESCRIPTION: Commands to install both the PHP package and its corresponding JavaScript package. The version numbers must match exactly between the Composer and npm packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-chartjs:2.23.0\nnpm add @symfony/ux-chartjs@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Form Options in Symfony Form Type\nDESCRIPTION: The configureOptions method from a Symfony form type class that sets the data_class option to BlogPost.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_77\n\nLANGUAGE: php\nCODE:\n```\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver->setDefaults(['data_class' => BlogPost::class]);\n}\n```\n\n----------------------------------------\n\nTITLE: EditPost Component Template with Embedded MarkdownTextarea\nDESCRIPTION: Template for EditPost component that includes a form with a title input and embeds a MarkdownTextarea component for content editing with data model binding.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_137\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/EditPost.html.twig #}\n<div {{ attributes }}>\n    <form data-model=\"on(change)|*\">\n        <input\n            type=\"text\"\n            name=\"post[title]\"\n            value=\"{{ post.title }}\"\n        >\n\n        {{ component('MarkdownTextarea', {\n            name: 'post[content]',\n            dataModel: 'post.content:value',\n            label: 'Content',\n        }) }}\n\n        <button\n            data-action=\"live#action\"\n            data-live-action-param=\"save\"\n        >Save</button>\n    </form>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Stimulus Controllers in controllers.json\nDESCRIPTION: Demonstrates how to configure Stimulus controllers in the assets/controllers.json file, including enabling and setting fetch mode.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"controllers\": {\n        \"@symfony/ux-chartjs\": {\n            \"chart\": {\n                \"enabled\": true,\n                \"fetch\": \"eager\"\n            }\n        }\n    },\n    \"entrypoints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Event Listeners\nDESCRIPTION: Demonstrates how to pass data to event listeners from a component action, which allows components to share information when events are triggered.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_115\n\nLANGUAGE: php\nCODE:\n```\n#[LiveAction]\npublic function saveProduct()\n{\n    // ...\n\n    $this->emit('productAdded', [\n        'product' => $product->getId(),\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a React Component\nDESCRIPTION: Example of a simple React component that accepts and displays a fullName prop.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/react/controllers/Hello.jsx\nimport React from 'react';\n\nexport default function (props) {\n    return <div>Hello {props.fullName}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Disabled Attribute During Loading in Twig\nDESCRIPTION: Demonstrates how to add the 'disabled' attribute to an element when a Live Component is loading.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_45\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- add the \"disabled\" attribute when loading -->\n<div data-loading=\"addAttribute(disabled)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Lazy Loading of Symfony Live Components with Twig Syntax\nDESCRIPTION: Shows how to lazy load components when they become visible in the viewport using the loading: 'lazy' option with the Twig syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_95\n\nLANGUAGE: twig\nCODE:\n```\n{# With the Twig syntax #}\n{{ component('SomeHeavyComponent', { loading: 'lazy' }) }}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Stimulus Controller with Symfony UX LazyImage in Twig\nDESCRIPTION: HTML and Twig code showing how to use a custom Stimulus controller alongside the LazyImage controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"{{ data_uri_thumbnail('public/image/large.png', 100, 75) }}\"\n    {{ stimulus_controller('mylazyimage')|stimulus_controller('symfony/ux-lazy-image/lazy-image', {\n        src: asset('image/large.png')\n    }) }}\n\n    {# Using BlurHash, the size is required #}\n    width=\"200\"\n    height=\"150\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Content with Template Reference\nDESCRIPTION: Shows how to customize loading content by pointing to a specific template using the loading-template option.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_98\n\nLANGUAGE: twig\nCODE:\n```\n{# With the HTML syntax #}\n<twig:SomeHeavyComponent loading=\"defer\" loading-template=\"spinning-wheel.html.twig\" />\n\n{# With the component function #}\n{{ component('SomeHeavyComponent', { loading: 'defer', 'loading-template': 'spinning-wheel.html.twig' }) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mercure Hubs in YAML\nDESCRIPTION: This snippet shows how to configure Mercure hubs in the Symfony configuration file. It sets up the default hub with URL, public URL, and JWT settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/mercure.yaml\nmercure:\n    hubs:\n        default:\n            url: '%env(MERCURE_URL)%'\n            public_url: '%env(MERCURE_PUBLIC_URL)%'\n            jwt:\n                secret: '%env(MERCURE_JWT_SECRET)%'\n                publish: '*'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stimulus Attributes as Array in Twig\nDESCRIPTION: Demonstrates how to retrieve generated Stimulus attributes as an array in Twig templates, which can be useful for form elements.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.password, { attr: stimulus_target('hello-controller', 'myTarget').toArray() }) }}\n```\n\n----------------------------------------\n\nTITLE: Simple Component Template Example\nDESCRIPTION: Basic template for the Alert component with hardcoded content.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/Alert.html.twig #}\n<div class=\"alert alert-success\">\n    Success! You've created a Twig component!\n</div>\n```\n\n----------------------------------------\n\nTITLE: Custom Form Theme for Collection with Add Button Before Items\nDESCRIPTION: A form theme that moves the add button to appear before the collection items instead of after them.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_84\n\nLANGUAGE: html+twig\nCODE:\n```\n{%- block live_collection_widget -%}\n    {%- if button_add is defined and not button_add.rendered -%}\n        {{ form_row(button_add) }}\n    {%- endif -%}\n    {{ block('form_widget') }}\n{%- endblock -%}\n```\n\n----------------------------------------\n\nTITLE: Using Ajax-powered Autocomplete Field in a Form\nDESCRIPTION: Diff showing how to use the custom Ajax-powered autocomplete field type in a Symfony form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n// src/Form/AnyForm.php\n// ...\n\nclass AnyForm extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $builder\n+            ->add('food', FoodAutocompleteField::class)\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Turbo Stream Listener Renderer\nDESCRIPTION: Custom implementation of a TurboStreamListenRendererInterface that generates HTML attributes for a Stimulus controller. This allows rendering custom Stimulus attributes for different transport types.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n// src/Turbo/TurboStreamListenRenderer.php\nnamespace App\\Turbo;\n\nuse Symfony\\Component\\DependencyInjection\\Attribute\\AsTaggedItem;\nuse Symfony\\UX\\StimulusBundle\\Helper\\StimulusHelper;\nuse Symfony\\UX\\Turbo\\Twig\\TurboStreamListenRendererInterface;\nuse Twig\\Environment;\n\n#[AsTaggedItem(index: 'my-transport')]\nclass TurboStreamListenRenderer implements TurboStreamListenRendererInterface\n{\n    public function __construct(\n        private StimulusHelper $stimulusHelper,\n    ) {}\n\n    public function renderTurboStreamListen(Environment $env, $topic): string\n    {\n        $stimulusAttributes = $this->stimulusHelper->createStimulusAttributes();\n        $stimulusAttributes->addController('your_stimulus_controller', [\n            /* controller values such as topic */\n        ]);\n\n        return (string) $stimulusAttributes;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_target for Element References\nDESCRIPTION: Examples of using the stimulus_target Twig function to mark elements as targets for Stimulus controllers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_target('controller', 'myTarget') }}>Hello</div>\n<div {{ stimulus_target('controller', 'myTarget secondTarget') }}>Hello</div>\n\n<!-- would render -->\n<div data-controller-target=\"myTarget\">Hello</div>\n<div data-controller-target=\"myTarget secondTarget\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Passing Parameters to Actions with stimulus_action\nDESCRIPTION: Example showing how to pass parameters to Stimulus actions using the stimulus_action Twig function.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_action('hello-controller', 'method', 'click', { 'count': 3 }) }}>Hello</div>\n\n<!-- would render -->\n<div data-action=\"click->hello-controller#method\" data-hello-controller-count-param=\"3\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Updating PHP Class for Live Component Definition\nDESCRIPTION: Shows the transition from implementing LiveComponentInterface to using PHP 8 attributes for defining a Live Component, including changes in property and method annotations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Notification;\nuse App\\Repository\\NotificationRepository;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\nuse Symfony\\UX\\LiveComponent\\LiveComponentInterface;\n\nfinal class NotificationComponent implements LiveComponentInterface\n{\n    private NotificationRepository $repo;\n\n    /** @LiveProp */\n    public bool $expanded = false;\n\n    public function __construct(NotificationRepository $repo)\n    {\n        $this->repo = $repo;\n    }\n\n    /** @LiveAction */\n    public function toggle(): void\n    {\n        $this->expanded = !$this->expanded;\n    }\n\n    public function getNotifications(): array\n    {\n        return $this->repo->findAll();\n    }\n\n    public static function getComponentName(): string\n    {\n        return 'notification';\n    }\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nuse App\\Entity\\Notification;\nuse App\\Repository\\NotificationRepository;\nuse Symfony\\UX\\LiveComponent\\Attribute\\AsLiveComponent;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveAction;\nuse Symfony\\UX\\LiveComponent\\Attribute\\LiveProp;\n\n#[AsLiveComponent('notification')]\nfinal class NotificationComponent\n{\n    private NotificationRepository $repo;\n\n    #[LiveProp]\n    public bool $expanded = false;\n\n    public function __construct(NotificationRepository $repo)\n    {\n        $this->repo = $repo;\n    }\n\n    #[LiveAction]\n    public function toggle(): void\n    {\n        $this->expanded = !$this->expanded;\n    }\n\n    public function getNotifications(): array\n    {\n        return $this->repo->findAll();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Loading Content with Block Override\nDESCRIPTION: Demonstrates how to customize loading content by overriding the loadingContent block within the component tag.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_99\n\nLANGUAGE: twig\nCODE:\n```\n{# With the HTML syntax #}\n<twig:SomeHeavyComponent loading=\"defer\">\n    <twig:block name=\"loadingContent\">Custom Loading Content...</twig:block>\n</twig:SomeHeavyComponent>\n\n{# With the component tag #}\n{% component SomeHeavyComponent with { loading: 'defer' } %}\n    {% block loadingContent %}Loading...{% endblock %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Lazy-Loaded Stimulus Controller\nDESCRIPTION: Example of a Stimulus controller configured for lazy loading using a special comment. Lazily loaded controllers are only downloaded when needed on the page.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\n\n/* stimulusFetch: 'lazy' */\nexport default class extends Controller {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet Map with Symfony UX Data Attributes in HTML\nDESCRIPTION: This HTML snippet sets up a div element with various data attributes to configure a Leaflet map using Symfony UX. It specifies map options, center coordinates, zoom level, and marker data for multiple locations. The configuration includes custom icons for markers and uses OpenStreetMap as the tile layer provider.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set markers with icons__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;© &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;url&quot;,&quot;width&quot;:32,&quot;height&quot;:32,&quot;url&quot;:&quot;https:\\/\\/cdn.jsdelivr.net\\/npm\\/bootstrap-icons@1.11.3\\/icons\\/geo-alt.svg&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;217fa57668ad8e64&quot;},{&quot;position&quot;:{&quot;lat&quot;:45.764,&quot;lng&quot;:4.8357},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;ux-icon&quot;,&quot;width&quot;:32,&quot;height&quot;:32,&quot;name&quot;:&quot;fa:map-marker&quot;,&quot;_generated_html&quot;:&quot;&lt;svg xmlns=\\&quot;http:\\/\\/www.w3.org\\/2000\\/svg\\&quot; width=\\&quot;24\\&quot; height=\\&quot;24\\&quot;&gt;...&lt;\\/svg&gt;&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;255b208136900fc0&quot;},{&quot;position&quot;:{&quot;lat&quot;:45.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Dijon&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:{&quot;type&quot;:&quot;svg&quot;,&quot;width&quot;:24,&quot;height&quot;:24,&quot;html&quot;:&quot;&lt;svg xmlns=\\&quot;http:\\/\\/www.w3.org\\/2000\\/svg\\&quot; width=\\&quot;24\\&quot; height=\\&quot;24\\&quot;&gt;...&lt;\\/svg&gt;&quot;},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;1a410e92214f770c&quot;}]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Parameter Names with the 'as' Option\nDESCRIPTION: Demonstrates how to customize the URL parameter name using the 'as' option in UrlMapping, allowing you to use a different name in the URL than the property name.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_107\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\UX\\LiveComponent\\Metadata\\UrlMapping;\n\n#[AsLiveComponent]\nclass SearchModule\n{\n    #[LiveProp(writable: true, url: new UrlMapping(as: 'q'))]\n    public string $query = '';\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Props in HTML Component Syntax\nDESCRIPTION: Explains how to correctly pass boolean values to components using the HTML-like syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_21\n\nLANGUAGE: twig\nCODE:\n```\n{# ❌ the string 'false' is converted to the boolean 'true' #}\n<twig:Alert message=\"...\" withCloseButton=\"false\" />\n\n{# ✅ use the 'false' boolean value #}\n<twig:Alert message=\"...\" withCloseButton=\"{{ false }}\" />\n\n{# ✅ use the dynamic syntax #}\n<twig:Alert message=\"...\" :withCloseButton=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Bootstrap 5 Theme for Table-based Collection Rendering\nDESCRIPTION: A form theme that renders collection items in a Bootstrap 5 table layout with custom styling for add and delete buttons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_86\n\nLANGUAGE: html+twig\nCODE:\n```\n{%- block live_collection_widget -%}\n    <table class=\"table table-borderless form-no-mb\">\n        <thead>\n        <tr>\n            {% for child in form|last %}\n                <td>{{ form_label(child) }}</td>\n            {% endfor %}\n            <td></td>\n        </tr>\n        </thead>\n        <tbody>\n            {{ block('form_widget') }}\n        </tbody>\n    </table>\n    {%- if skip_add_button|default(false) is same as(false) and button_add is defined and not button_add.rendered -%}\n        {{ form_widget(button_add, { label: '+ Add Item', attr: { class: 'btn btn-outline-primary' } }) }}\n    {%- endif -%}\n{%- endblock -%}\n\n{%- block live_collection_entry_row -%}\n    <tr>\n        {% for child in form %}\n            <td>{{- form_row(child, { label: false }) -}}</td>\n        {% endfor %}\n        <td>\n            {{- form_row(button_delete, { label: 'X', attr: { class: 'btn btn-outline-danger' } }) -}}</td>\n    </tr>\n{%- endblock -%}\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Loading Directives in Twig\nDESCRIPTION: Shows how to combine multiple loading directives by separating them with a space to apply multiple effects during component loading.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_46\n\nLANGUAGE: html+twig\nCODE:\n```\n<div data-loading=\"addClass(opacity-50) addAttribute(disabled)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Form Field Behavior in Live Components\nDESCRIPTION: Shows how to update a form's fields to behave like model fields using the data-model attribute on the form element, replacing the previous method of using data-action on the form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n<!-- BEFORE -->\n<form data-action=\"change->live#update\">\n    <input\n        name=\"max\"\n    >\n</form>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- AFTER -->\n<form data-model=\"on(change)|*\">\n    <input\n        name=\"max\"\n    >\n</form>\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet Map Options in PHP\nDESCRIPTION: Example of configuring a Leaflet map with custom options including center point, zoom level, and tile layer settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\Map\\Bridge\\Leaflet\\LeafletOptions;\nuse Symfony\\UX\\Map\\Bridge\\Leaflet\\Option\\TileLayer;\nuse Symfony\\UX\\Map\\Point;\nuse Symfony\\UX\\Map\\Map;\n\n$map = (new Map())\n    ->center(new Point(48.8566, 2.3522))\n    ->zoom(6);\n\n$leafletOptions = (new LeafletOptions())\n    ->tileLayer(new TileLayer(\n        url: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png',\n        attribution: '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>',\n        options: [\n            'minZoom' => 5,\n            'maxZoom' => 10,\n        ]\n    ))\n;\n\n// Add the custom options to the map\n$map->options($leafletOptions);\n```\n\n----------------------------------------\n\nTITLE: Overriding getDataModelValue in PHP for Form Components\nDESCRIPTION: Demonstrates how to override the getDataModelValue method in a PHP component using ComponentWithFormTrait to set a norender modifier.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: php\nCODE:\n```\nprivate function getDataModelValue(): ?string\n{\n    return 'norender|*';\n}\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_action for Event Handling\nDESCRIPTION: Examples of using the stimulus_action Twig function to add event handling to elements that trigger controller methods.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_action('controller', 'method') }}>Hello</div>\n<div {{ stimulus_action('controller', 'method', 'click') }}>Hello</div>\n\n<!-- would render -->\n<div data-action=\"controller#method\">Hello</div>\n<div data-action=\"click->controller#method\">Hello</div>\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Model Updates without Re-rendering\nDESCRIPTION: Demonstrates the change from using data-action=\"live#updateDefer\" to the new norender modifier in data-model for updating a model without triggering a re-render.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<!-- BEFORE -->\n<input\n    data-model=\"max\"\n    data-action=\"live#updateDefer\"\n>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- AFTER -->\n<input\n    data-model=\"norender|max\"\n>\n```\n\n----------------------------------------\n\nTITLE: Changing the Loading Tag for Deferred Components\nDESCRIPTION: Shows how to change the default loading tag from div to another HTML element using the loading-tag option.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_100\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('SomeHeavyComponent', { loading: 'defer', 'loading-tag': 'span' }) }}\n```\n\n----------------------------------------\n\nTITLE: Adding custom controller to form field in PHP\nDESCRIPTION: Applying a custom Stimulus controller to an autocomplete field through the attr option. This enables extending the default autocomplete behavior.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n$builder\n    ->add('food', EntityType::class, [\n        'class' => Food::class,\n        'autocomplete' => true,\n        'attr' => [\n            'data-controller' => 'custom-autocomplete',\n        ],\n    ])\n```\n\n----------------------------------------\n\nTITLE: Configuring UX Map Bundle\nDESCRIPTION: YAML configuration for the UX Map bundle, including renderer and Google Maps specific settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/ux_map.yaml\nux_map:\n    renderer: '%env(resolve:default::UX_MAP_DSN)%'\n\n    # Google Maps specific configuration\n    google_maps:\n        default_map_id: null\n```\n\n----------------------------------------\n\nTITLE: Accessing Info Window After Creation in Symfony UX Map\nDESCRIPTION: This event handler is triggered after an info window is created. It provides access to the info window instance and its associated element (marker, polygon, or polyline).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered after creating an info window.\n * You can access the created info window instance, which depends on the renderer you are using.\n */\n_onInfoWindowAfterCreate(event) {\n    // The info window instance\n    console.log(event.detail.infoWindow);\n\n    // The associated element instance is also available, e.g. a marker...\n    console.log(event.detail.marker);\n    // ... or a polygon\n    console.log(event.detail.polygon);\n    // ... or a polyline\n    console.log(event.detail.polyline);\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Theme for Collection Entry Rows\nDESCRIPTION: A form theme that wraps each collection entry in a div and includes the delete button for each entry.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_85\n\nLANGUAGE: html+twig\nCODE:\n```\n{%- block live_collection_entry_row -%}\n    <div>\n        {{ block('form_row') }}\n        {%- if button_delete is defined and not button_delete.rendered -%}\n            {{ form_row(button_delete) }}\n        {%- endif -%}\n    </div>\n{%- endblock -%}\n```\n\n----------------------------------------\n\nTITLE: Custom Form Theme for Add Button with SVG Icon\nDESCRIPTION: A form theme that customizes the add button for collections, including an SVG icon and custom CSS classes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_83\n\nLANGUAGE: html+twig\nCODE:\n```\n{% block live_collection_button_add_widget %}\n    {% set attr = attr|merge({'class': attr.class|default('btn btn-ghost')}) %}\n    {% set translation_domain = false %}\n    {% set label_html = true %}\n    {%- set label -%}\n        <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\" stroke-width=\"2\">\n            <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\"/>\n        </svg>\n        {{ 'form.collection.button.add.label'|trans({}, 'forms') }}\n    {%- endset -%}\n    {{ block('button_widget') }}\n{% endblock live_collection_button_add_widget %}\n```\n\n----------------------------------------\n\nTITLE: Basic Content Block Usage in Twig Component\nDESCRIPTION: Shows how to pass content into a Twig component using blocks.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_35\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:Alert type=\"success\">\n    <div>Congratulations! You've won a free puppy!</div>\n</twig:Alert>\n```\n\n----------------------------------------\n\nTITLE: Manual form handling with Turbo Drive in Symfony pre-6.2\nDESCRIPTION: Controller code showing how to manually set the correct response status codes for form handling with Turbo Drive in Symfony versions before 6.2.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n#[Route('/product/new')]\npublic function newProduct(Request $request): Response\n{\n    $form = $this->createForm(ProductFormType::class);\n    $form->handleRequest($request);\n\n    if ($form->isSubmitted() && $form->isValid()) {\n        // save...\n    }\n\n+   $response = new Response(null, $form->isSubmitted() ? 422 : 200);\n\n    return $this->render('product/new.html.twig', [\n        'form' => $form->createView()\n-   ]);\n+   ], $response);\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Hinting Entity Arguments in Listeners\nDESCRIPTION: Demonstrates how to type-hint entity arguments in event listeners, allowing for automatic entity resolution similar to how it works in controllers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_118\n\nLANGUAGE: php\nCODE:\n```\n#[LiveListener('productAdded')]\npublic function incrementProductCount(#[LiveArg] Product $product)\n{\n    $this->productCount++;\n    $this->lastProduct = $product;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Stimulus Controller for Button Component\nDESCRIPTION: This JavaScript snippet demonstrates how to implement a Stimulus controller for the Button component, handling state and behavior.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    static values = { label: String };\n\n    connect() {\n        this.element.textContent = this.labelValue;\n    }\n\n    loading() {\n        this.element.textContent = 'Loading...';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Extra Attributes to a Component\nDESCRIPTION: Demonstrates passing additional attributes to a component that will be rendered on the root element.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('Alert', {\n    id: 'custom-alert-id',\n    message: 'Danger Will Robinson!'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: PHP Example of Turbo Stream Format Content Negotiation\nDESCRIPTION: Example PHP code showing how to handle content negotiation with Turbo, checking for the preferred format and rendering the appropriate template. This pattern replaced the previously used TurboStreamResponse approach.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\Turbo\\TurboBundle;\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        // ...\n        if (TurboBundle::STREAM_FORMAT === $request->getPreferredFormat()) {\n            $request->setRequestFormat(TurboBundle::STREAM_FORMAT);\n            $response = $this->render('task/success.stream.html.twig', ['task' => $task]);\n        } else {\n            $response = $this->render('task/success.html.twig', ['task' => $task]);\n        }\n\n        return $response->setVary('Accept');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Charts in Twig Templates\nDESCRIPTION: Examples of rendering charts in Twig templates with optional HTML attributes\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{{ render_chart(chart) }}\n\n{# You can pass HTML attributes as a second argument to add them on the <canvas> tag #}\n{{ render_chart(chart, {'class': 'my-chart'}) }}\n```\n\n----------------------------------------\n\nTITLE: Defining Props in Anonymous Twig Component\nDESCRIPTION: This snippet shows how to define props in an anonymous Twig component for an Alert, including type, icon, and message props.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_2\n\nLANGUAGE: twig\nCODE:\n```\n{% props type, icon, message %}\n\n<div class=\"alert alert-{{ type }}\">\n    <twig:ux:icon name=\"{{ icon }}\" />\n    {{ message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_controller with Form Elements\nDESCRIPTION: Example showing how to use the stimulus_controller helper with form elements by converting the attributes to an array.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_start(form, { attr: stimulus_controller('chart', { 'name': 'Likes' }).toArray() }) }}\n```\n\n----------------------------------------\n\nTITLE: Resetting Form in Twig Template\nDESCRIPTION: Shows how to update the Twig template to reset the form using Turbo Stream. This involves isolating the form rendering into a block and using it in the stream template to replace the entire form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n{# new.html.twig #}\n{% block task_form %}\n {{ form(form) }}\n{% endblock %}\n\n{% block success_stream %}\n<turbo-stream action=\"replace\" targets=\"form[name=task]\">\n    <template>\n        {{ block('task_form') }}\n    </template>\n</turbo-stream>\n<turbo-stream action=\"replace\" targets=\"#my_div_id\">\n    {# ... #}\n</turbo-stream>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Debugging Map Events in JavaScript\nDESCRIPTION: JavaScript code snippet showing how to log map marker events to the console. The code demonstrates accessing event detail data for markers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(event.detail.definition.extra);\n// { type: 'Park', ...}\n\n_onMarkerAfterCreate(event) {\n    console.log(event.detail.definition.extra);\n    // { type: 'Park', ...}\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/ux-toggle-password Package with Version Matching\nDESCRIPTION: Commands for installing both the PHP and npm packages for symfony/ux-toggle-password, ensuring version compatibility between the two dependencies.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-toggle-password:2.23.0\nnpm add @symfony/ux-toggle-password@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Rendering Component with Multiple Blocks\nDESCRIPTION: Example of rendering a component with content and footer blocks with parent() function.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_38\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:Alert type=\"success\">\n    <div>Congrats on winning a free puppy!</div>\n\n    <twig:block name=\"footer\">\n        {{ parent() }} {# render the default content if needed #}\n        <button class=\"btn btn-primary\">Claim your prize</button>\n    </twig:block>\n</twig:Alert>\n```\n\n----------------------------------------\n\nTITLE: Modifying Webpack Config for Svelte 4 Compatibility\nDESCRIPTION: Webpack configuration changes required for Svelte 4 compatibility, adding condition names for browser, import, and svelte to ensure lifecycle callbacks work properly.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n  // webpack.config.js\n- module.exports = Encore.getWebpackConfig();\n+ const config = Encore.getWebpackConfig();\n+ config.resolve.conditionNames = ['browser', 'import', 'svelte'];\n+ module.exports = config;\n```\n\n----------------------------------------\n\nTITLE: Dynamic Attributes in HTML Component Syntax\nDESCRIPTION: Shows how to pass dynamic attributes to a component using the HTML-like syntax with the ':' prefix.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_20\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert message=\"hello!\" :user=\"user.id\" />\n\n// equal to\n<twig:Alert message=\"hello!\" user=\"{{ user.id }}\" />\n\n// pass object, array, or anything you imagine\n<twig:Alert :foo=\"{col: ['foo', 'oof']}\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering Download Button with LiveAction in Twig\nDESCRIPTION: Demonstrates how to create a button in Twig that triggers a LiveAction for file download, with Turbo disabled to prevent prefetching.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_63\n\nLANGUAGE: HTML+Twig\nCODE:\n```\n<div {{ attributes }} data-turbo=\"false\">\n    <button\n        data-action=\"live#action\"\n        data-live-action-param=\"initiateDownload\"\n    >\n        Download\n    </button>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Basic Component\nDESCRIPTION: Simple example of rendering a Twig component without passing any props.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('Alert') }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Accessibility for Icons in Twig\nDESCRIPTION: Demonstrates how to improve accessibility for informative, functional, and decorative icons using ARIA attributes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\nToday's weather:\n{{ ux_icon('cloud-rain', {'aria-label': 'Rainy weather'}) }}\n\n{{ ux_icon('user-profile', {class: 'w-4 h-4', 'aria-label': 'User Profile'}) }}\n\n<a href=\"/profile\">\n    <svg viewBox=\"0 0 24 24\" class=\"w-4 h-4\" aria-hidden=\"true\">\n        <!-- ... -->\n    </svg>\n    Back to profile\n</a>\n\n<twig:ux:icon name=\"user-profile\" aria-hidden=\"false\" />\n```\n\n----------------------------------------\n\nTITLE: Using Default and Custom Icon Attributes in Twig\nDESCRIPTION: Demonstrates how to use default attributes and override them with custom attributes in Twig templates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n# renders \"user-profile.svg\" with fill=\"currentColor\"\n{{ ux_icon('user-profile') }}\n\n# renders \"user-profile.svg\" with fill=\"red\"\n{{ ux_icon('user-profile', {fill: 'red'}) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing Alert Component in Twig\nDESCRIPTION: This snippet demonstrates how to create an Alert component using Twig in Symfony UX. It shows the component's template structure and how it can include other components like Icon.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\n<div class=\"alert alert-{{ type }}\">\n    <twig:ux:icon name=\"{{ icon }}\" />\n    {{ message }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using custom route with autocomplete field in PHP\nDESCRIPTION: FoodAutocompleteField implementation that specifies a custom route for Ajax autocomplete calls. This allows placing the autocomplete endpoint under a specific URL pattern.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/FoodAutocompleteField.php\n#[AsEntityAutocompleteField(route: 'ux_entity_autocomplete_admin')]\nclass FoodAutocompleteField\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Anonymous Component Template Example\nDESCRIPTION: Example of an anonymous component template (without a PHP class) that renders a primary button. Shows how to handle attributes and content blocks in template-only components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_33\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/Button/Primary.html.twig #}\n<button {{ attributes.defaults({class: 'primary'}) }}>\n    {% block content %}{% endblock %}\n</button>\n```\n\n----------------------------------------\n\nTITLE: Configuring Twig Components in Symfony\nDESCRIPTION: Configuration example for Twig Components in Symfony, showing how to define defaults for different component namespaces. Controls component naming and template locations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig_component.yaml\ntwig_component:\n    defaults:\n        # short form: components under this namespace:\n        #    - name will be the class name that comes after the prefix\n        #        App\\Twig\\Components\\Alert => Alert\n        #        App\\Twig\\Components\\Button\\Primary => Button:Primary\n        #    - templates will live in \"components/\"\n        #        Alert => templates/components/Alert.html.twig\n        #        Button:Primary => templates/components/Button/Primary.html.twig\n        App\\Twig\\Components\\: components/\n\n        # long form\n        App\\Pizza\\Components\\:\n            template_directory: components/pizza\n            # component names will have an extra \"Pizza:\" prefix\n            #    App\\Pizza\\Components\\Alert => Pizza:Alert\n            #    App\\Pizza\\Components\\Button\\Primary => Pizza:Button:Primary\n            name_prefix: Pizza\n```\n\n----------------------------------------\n\nTITLE: Customizing Polling Delay in Symfony Live Components\nDESCRIPTION: Shows how to customize the polling delay and specify the render method to call using the delay() modifier.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_102\n\nLANGUAGE: twig\nCODE:\n```\n<div\n    {{ attributes }}\n    data-poll=\"delay(500)|$render\"\n>\n```\n\n----------------------------------------\n\nTITLE: Requiring Page Reload in Turbo via Twig\nDESCRIPTION: Twig function that generates a meta tag to force Turbo to perform a full page reload rather than using its navigation system.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_31\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_page_requires_reload() }}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple stimulus_targets\nDESCRIPTION: Example showing how to chain multiple targets on the same HTML element using the stimulus_target filter.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_target('controller', 'myTarget')|stimulus_target('other-controller', 'anotherTarget') }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div data-controller-target=\"myTarget\" data-other-controller-target=\"anotherTarget\">\n    Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Twig Component with HTML Syntax\nDESCRIPTION: Demonstrates the alternative HTML-like syntax for rendering the Alert component with a message prop.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: twig\nCODE:\n```\n<twig:Alert message=\"Or use the fun HTML syntax!\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Google Map Component with Data Attributes in HTML\nDESCRIPTION: This HTML snippet shows how to implement a Google Map using Symfony UX with data attributes for configuration. It includes settings for the API key, center coordinates, zoom level, markers with info windows, and various map display options like gesture handling and control positions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with marker remove and new ones added__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Paris&quot;,&quot;infoWindow&quot;:null,&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker1&quot;,&quot;@id&quot;:&quot;872feba9ebf3905d&quot;},{&quot;position&quot;:{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},&quot;title&quot;:&quot;Lyon&quot;,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Lyon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;icon&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:&quot;marker2&quot;,&quot;@id&quot;:&quot;6028bf5e41f644ab&quot;}]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Component Template with Content Block\nDESCRIPTION: Demonstrates how to define a content block within a component template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_36\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"alert alert-{{ type }}\">\n    {% block content %}\n        // the content will appear in here\n    {% endblock %}\n </div>\n```\n\n----------------------------------------\n\nTITLE: Adding Action Button in Child Component\nDESCRIPTION: Example of an action button in a child component that will trigger the 'save' action in the child component only, not in the parent.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_130\n\nLANGUAGE: html\nCODE:\n```\n<button data-action=\"live#action\" data-live-action-param=\"save\">Save</button>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Template Path with AsTwigComponent\nDESCRIPTION: Demonstrates how to specify a custom template path for a Twig component using the template parameter in the AsTwigComponent attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n\n#[AsTwigComponent('alert', template: 'other/path/alert.html.twig')]\nclass AlertComponent\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbo Broadcast in YAML\nDESCRIPTION: This YAML configuration sets up the entity template prefixes for Turbo broadcasts. It maps the App\\Entity namespace to the broadcast directory for template resolution.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/turbo.yaml\nturbo:\n    broadcast:\n        entity_template_prefixes:\n            App\\Entity\\: broadcast/\n```\n\n----------------------------------------\n\nTITLE: Handling Pre-Connect Event in Symfony UX Map\nDESCRIPTION: This event handler is triggered before the map is created, allowing configuration of map options. It logs the available options object which can be modified to customize map initialization.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * This event is triggered when the map is not created yet\n * You can use this event to configure the map before it is created\n */\n_onPreConnect(event) {\n    console.log(event.detail.options);\n}\n```\n\n----------------------------------------\n\nTITLE: Full Configuration Example for UX Icons in YAML\nDESCRIPTION: Provides a comprehensive example of all available configuration options for the UX Icons component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/ux_icons.yaml\nux_icons:\n    # The local directory where icons are stored\n    icon_dir: '%kernel.project_dir%/assets/icons'\n\n    # Default attributes to add to all icons\n    default_icon_attributes:\n        fill: currentColor\n        'font-size': '1.25em'\n\n    # Icon aliases (alias => icon name)\n    aliases:\n```\n\n----------------------------------------\n\nTITLE: Custom Component Name with AsTwigComponent Attribute\nDESCRIPTION: Customizing the name of a Twig component by passing a parameter to the AsTwigComponent attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n#[AsTwigComponent('alert')]\nclass Alert\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Broadcast Template in Twig\nDESCRIPTION: This Twig template defines how entity updates are broadcast using Turbo Streams. It includes blocks for create, update, and remove actions that will be automatically used by Symfony UX Turbo.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_22\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/broadcast/Book.stream.html.twig #}\n{% block create %}\n    <turbo-stream action=\"append\" targets=\"#books\">\n        <template>\n            <div id=\"{{ 'book_' ~ id }}\">{{ entity.title }} (#{{ id }})</div>\n        </template>\n    </turbo-stream>\n{% endblock %}\n\n{% block update %}\n    <turbo-stream action=\"update\" targets=\"#book_{{ id }}\">\n        <template>\n            {{ entity.title }} (#{{ id }}, updated)\n        </template>\n    </turbo-stream>\n{% endblock %}\n\n{% block remove %}\n    <turbo-stream action=\"remove\" targets=\"#book_{{ id }}\"></turbo-stream>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Using HTML Syntax with Twig Components for Icons\nDESCRIPTION: Alternative HTML-like syntax for rendering icons when using the symfony/ux-twig-component package. Shows examples with various attributes and icon references.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<!-- renders \"user-profile.svg\" -->\n<twig:ux:icon name=\"user-profile\" class=\"w-4 h-4\" />\n<!-- renders \"admin/user-profile.svg\" -->\n<twig:ux:icon name=\"admin:user-profile\" class=\"w-4 h-4\" />\n<!-- renders 'user-solid.svg' icon from 'Flowbite' icon set via ux.symfony.com -->\n<twig:ux:icon name=\"flowbite:user-solid\" />\n\n<!-- you can also add any HTML attributes -->\n<twig:ux:icon name=\"user-profile\" height=\"16\" width=\"16\" aria-hidden=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Using Computed Properties in Twig Component Templates\nDESCRIPTION: Example of using computed properties in a Twig component template to cache method results. This prevents multiple executions of the same method when called multiple times in the template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_49\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/FeaturedProducts.html.twig #}\n<div>\n    <h3>Featured Products</h3>\n\n    {% for product in computed.products %}\n        ...\n    {% endfor %}\n\n    ...\n    {% for product in computed.products %} {# use cache, does not result in a second query #}\n        ...\n    {% endfor %}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Parent-Child Prop Mapping with dataModel\nDESCRIPTION: Shows how to explicitly map parent props to child props using the 'parentProp:childProp' syntax in the dataModel attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_133\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- same as dataModel: 'content' -->\n{{ component('TextareaField', {\n    dataModel: 'content:value',\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Using Macros in Twig Components\nDESCRIPTION: Example showing how to define and import macros when using Twig components. Demonstrates that you must use the full path of the template rather than the _self keyword.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_26\n\nLANGUAGE: html+twig\nCODE:\n```\n{% macro message_formatter(message) %}\n    <strong>{{ message }}</strong>\n{% endmacro %}\n\n<twig:Alert>\n    {# ❌ this won't work #}\n    {% from _self import message_formatter %}\n\n    {# ✅ this works as expected #}\n    {% from 'path/of/this/template.html.twig' import message_formatter %}\n\n    {{ message_formatter('...') }}\n</twig:Alert>\n```\n\n----------------------------------------\n\nTITLE: Targeting Loading for Specific Actions in Twig\nDESCRIPTION: Shows how to use the action() modifier to toggle loading behavior only when a specific action is triggered.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_48\n\nLANGUAGE: html+twig\nCODE:\n```\n<!-- show only when the \"saveForm\" action is triggering -->\n<span data-loading=\"action(saveForm)|show\">Loading</span>\n<!-- multiple modifiers -->\n<div data-loading=\"action(saveForm)|delay|addClass(opacity-50)\">...</div>\n```\n\n----------------------------------------\n\nTITLE: Adding UX Package to package.json\nDESCRIPTION: Shows how Symfony Flex updates the package.json file to include a UX package as a virtual package pointing to the vendor directory.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"devDependencies\": {\n        \"...\": \"\",\n        \"@symfony/ux-chartjs\": \"file:vendor/symfony/ux-chartjs/assets\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering a Map with a Custom Controller in Twig\nDESCRIPTION: Twig code to render a map with a custom Stimulus controller. This allows for JavaScript customization of the map and its components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ ux_map(map, {'data-controller': 'my-map' }) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Mercure Hub\nDESCRIPTION: YAML configuration for specifying a custom Mercure hub for Symfony UX Notify to use instead of the default one.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notify.yaml\nnotify:\n    # Specifies the Mercure hub to use. Defaults to \"mercure.hub.default\"\n    mercure_hub: mercure.hub.custom\n```\n\n----------------------------------------\n\nTITLE: Adding custom Stimulus controller to DropzoneType in Symfony Form\nDESCRIPTION: PHP code showing how to add a custom Stimulus controller to the DropzoneType in a Symfony Form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\UX\\Dropzone\\Form\\DropzoneType;\n\nclass CommentFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            // ...\n            ->add('photo', DropzoneType::class, [\n                'attr' => ['data-controller' => 'mydropzone'],\n            ])\n            // ...\n        ;\n    }\n\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Updates via Mercure Hub in Symfony Controller\nDESCRIPTION: Example of a Symfony controller that publishes updates through a Mercure hub. The controller injects an HubInterface and returns the ID of the published update in the response.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_24\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\Mercure\\HubInterface;\nuse Symfony\\Component\\Mercure\\Update;\n\nclass MyController extends AbstractController\n{\n    public function publish(HubInterface $hub1): Response\n    {\n        $id = $hub1->publish(new Update('topic', 'content'));\n\n        return new Response(\"Update #{$id} published.\");\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Animated Svelte Component with Transitions\nDESCRIPTION: Svelte component using the fade transition effect from svelte/transition, demonstrating how to implement animations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/svelte/controllers/MyAnimatedComponent.svelte\n<script>\n    import { fade } from 'svelte/transition';\n    export let name = \"Svelte\";\n</script>\n\n<div transition:fade|global>Hello {name}</div>\n```\n\n----------------------------------------\n\nTITLE: Resetting Form in Turbo Stream Response\nDESCRIPTION: Illustrates how to reset a form when returning a Turbo Stream response. This involves creating a fresh form instance and including it in the stream template to replace the existing form.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\n// src/Controller/TaskController.php\n// ...\n\nclass TaskController extends AbstractController\n{\n    public function new(Request $request): Response\n    {\n        $form = $this->createForm(TaskType::class, new Task());\n\n        $emptyForm = clone $form;\n        $form->handleRequest($request);\n\n        if ($form->isSubmitted() && $form->isValid()) {\n            // ...\n\n            if (TurboBundle::STREAM_FORMAT === $request->getPreferredFormat()) {\n                $request->setRequestFormat(TurboBundle::STREAM_FORMAT);\n\n                return $this->renderBlock('task/new.html.twig', 'success_stream', [\n                    'task' => $task,\n                    'form' => $emptyForm,\n                ]);\n            }\n\n            // ...\n            return $this->redirectToRoute('task_success', [], Response::HTTP_SEE_OTHER);\n        }\n\n        return $this->render('task/new.html.twig', [\n            'form' => $form,\n        ]);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Aliases in YAML\nDESCRIPTION: Shows how to define custom aliases for icons in the YAML configuration file.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/ux_icons.yaml\nux_icons:\n    # ...\n    aliases:\n        dots: 'clarity:ellipsis-horizontal-line'\n```\n\n----------------------------------------\n\nTITLE: Compiling Sass Files in Symfony UX Project\nDESCRIPTION: Commands to compile Sass files into CSS using a Symfony console command. Includes an optional watch mode that recompiles files automatically when changes are detected.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsymfony console sass:build\n\n# (optional) Add the --watch flag to automatically recompile the Sass files on change.\nsymfony console sass:build --watch\n```\n\n----------------------------------------\n\nTITLE: Initializing Stimulus App with WebpackEncoreBundle\nDESCRIPTION: Demonstrates how to initialize the Stimulus application and register controllers when using WebpackEncoreBundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/bootstrap.js\nimport { startStimulusApp } from '@symfony/stimulus-bridge';\n\n// Registers Stimulus controllers from controllers.json and in the controllers/ directory\nexport const app = startStimulusApp(require.context(\n    '@symfony/stimulus-bridge/lazy-controller-loader!./controllers',\n    true,\n    /\\.[jt]sx?$/\n));\n```\n\n----------------------------------------\n\nTITLE: Emitting Events Only to Self from Twig\nDESCRIPTION: Shows how to emit an event only to the component itself using the emitSelf action in Twig, allowing a component to trigger its own listeners.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_121\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#emitSelf\"\n    data-live-event-param=\"productAdded\"\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing Dropzone design in assets/controllers.json\nDESCRIPTION: JSON configuration to disable the default Dropzone stylesheet for custom design implementation.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"controllers\": {\n        \"@symfony/ux-dropzone\": {\n            \"dropzone\": {\n                \"enabled\": true,\n                \"fetch\": \"eager\",\n                \"autoimport\": {\n                    \"@symfony/ux-dropzone/dist/style.min.css\": false\n                }\n            }\n        }\n    },\n    \"entrypoints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Events Only to Components with Specific Name from Twig\nDESCRIPTION: Shows how to target specific components by name when emitting events from Twig, allowing for directed communication between components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_120\n\nLANGUAGE: html+twig\nCODE:\n```\n<button\n    data-action=\"live#emit\"\n    data-live-event-param=\"name(ProductList)|productAdded\"\n>\n```\n\n----------------------------------------\n\nTITLE: Exempting Page from Turbo Cache in Twig\nDESCRIPTION: Twig function example that generates a meta tag to disable Turbo's caching for a page. This ensures the page is always freshly loaded.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_29\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_exempts_page_from_cache() }}\n```\n\n----------------------------------------\n\nTITLE: Registering React Controller Components\nDESCRIPTION: JavaScript code to register React components from a specified directory for use in the Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport { registerReactControllerComponents } from '@symfony/ux-react';\n\nregisterReactControllerComponents(require.context('./react/controllers', true, /\\.(j|t)sx?$/));\n```\n\n----------------------------------------\n\nTITLE: Creating Message Stream Template in Twig\nDESCRIPTION: This Twig template defines how new messages are appended to the chat interface using Turbo Streams. It's used when publishing updates through the Mercure hub.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_20\n\nLANGUAGE: html+twig\nCODE:\n```\n{# chat/message.stream.html.twig #}\n{# New messages received through the Mercure connection are appended to the div with the \"messages\" ID. #}\n<turbo-stream action=\"append\" targets=\"#messages\">\n    <template>\n        <div>{{ message }}</div>\n    </template>\n</turbo-stream>\n```\n\n----------------------------------------\n\nTITLE: Using Custom Stimulus Controller with Twig Template\nDESCRIPTION: Twig code showing how to render notification stream with a custom Stimulus controller attached via data attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n{{ stream_notifications(options = {'data-controller': 'mynotify'}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Alert Component Class in PHP\nDESCRIPTION: Defines a basic Twig component class with the AsTwigComponent attribute to create a reusable alert component. The class includes properties for type and message that can be customized when rendering.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n\n#[AsTwigComponent]\nclass Alert\n{\n    public string $type = 'success';\n    public string $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Symfony UX LazyImage Behavior with Custom Stimulus Controller\nDESCRIPTION: JavaScript code for a custom Stimulus controller to extend the default behavior of the LazyImage bundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// mylazyimage_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('lazy-image:connect', this._onConnect);\n        this.element.addEventListener('lazy-image:ready', this._onReady);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side-effects\n        this.element.removeEventListener('lazy-image:connect', this._onConnect);\n        this.element.removeEventListener('lazy-image:ready', this._onReady);\n    }\n\n    _onConnect(event) {\n        // The lazy-image behavior just started\n    }\n\n    _onReady(event) {\n        // The HD version has just been loaded\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JavaScript Translator Configuration\nDESCRIPTION: Base JavaScript configuration file for setting up the translator with locale fallbacks and exports.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Translator/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { trans, getLocale, setLocale, setLocaleFallbacks } from '@symfony/ux-translator';\nimport { localeFallbacks } from '../var/translations/configuration';\n\nsetLocaleFallbacks(localeFallbacks);\n\nexport { trans }\nexport * from '../var/translations';\n```\n\n----------------------------------------\n\nTITLE: Data Model Binding in Child Component\nDESCRIPTION: Shows a textarea with data-model binding in a child component that will only update the child component's state.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_131\n\nLANGUAGE: html\nCODE:\n```\n<textarea data-model=\"value\">\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Missing Icons in YAML\nDESCRIPTION: Shows how to configure the component to ignore missing icons instead of throwing exceptions in production.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/ux_icons.yaml\nux_icons:\n    ignore_not_found: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Map Component with Symfony UX Data Attributes\nDESCRIPTION: HTML markup that initializes a Google Map component using Symfony UX controllers. Includes configuration for API key, map center coordinates, zoom level, and various map options through data attributes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set without controls enabled__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Turbo Refresh Behavior in Twig\nDESCRIPTION: Twig function example that generates meta tags to configure both the refresh method and scroll behavior for Turbo page refreshes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_32\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_refreshes_with(method: 'replace', scroll: 'reset') }}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Animated Svelte Component in Twig\nDESCRIPTION: Twig syntax for rendering a Svelte component with animations, using the third parameter of svelte_component() to enable intro animations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{# templates/home.html.twig #}\n<div {{ svelte_component('MyAnimatedComponent', { 'name': app.user.fullName }, true) }}></div>\n```\n\n----------------------------------------\n\nTITLE: Exempting Page from Turbo Preview in Twig\nDESCRIPTION: Twig function example that generates a meta tag to prevent Turbo from showing cached versions of the page as a preview during navigation.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_30\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_exempts_page_from_preview() }}\n```\n\n----------------------------------------\n\nTITLE: AssetMapper React Configuration\nDESCRIPTION: YAML configuration for specifying the controllers path when using AssetMapper with React components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/react.yaml\nreact:\n    controllers_path: '%kernel.project_dir%/assets/build/react/controllers'\n```\n\n----------------------------------------\n\nTITLE: Installing PHPDocumentor Reflection Library in Terminal\nDESCRIPTION: Command to install the phpdocumentor/reflection-docblock library required for collection type extraction from docblocks.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require phpdocumentor/reflection-docblock\n```\n\n----------------------------------------\n\nTITLE: Adding controller to autocomplete field options in PHP\nDESCRIPTION: Adding a custom Stimulus controller to autocomplete field's default options. This approach is used when defining a custom Ajax autocomplete class.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_13\n\nLANGUAGE: php\nCODE:\n```\npublic function configureOptions(OptionsResolver $resolver)\n{\n    $resolver->setDefaults([\n        'class' => Food::class,\n        'attr' => [\n            'data-controller' => 'custom-autocomplete',\n        ],\n    ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony Project Dependencies\nDESCRIPTION: Command to install all PHP dependencies using Composer with the Symfony CLI wrapper. This installs all necessary libraries and components for the project.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsymfony composer install\n```\n\n----------------------------------------\n\nTITLE: Using Modified LiveProp in Twig Template\nDESCRIPTION: Shows how to use a component with a modified LiveProp in a Twig template, specifying a custom date format.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_156\n\nLANGUAGE: twig\nCODE:\n```\n{{ component('ProductSearch', {\n    dateFormat: 'd/m/Y'\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Creating form submit buttons compatible with Turbo Drive\nDESCRIPTION: Form builder code showing how to add value attributes to submit buttons to make them compatible with Turbo Drive's form submission process.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$builder\n    // ...\n    ->add('save', SubmitType::class, [\n        'label' => 'Create Task',\n        'attr' => [\n            'value' => 'create-task'\n        ]\n    ])\n    ->add('saveAndAdd', SubmitType::class, [\n        'label' => 'Save and Add',\n        'attr' => [\n            'value' => 'save-and-add'\n        ]\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Input Value and Triggering Change Event\nDESCRIPTION: JavaScript example showing how to manually set a form input value and trigger a change event to notify the LiveComponent system.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nconst input = document.getElementById('favorite-food');\ninput.value = 'sushi';\n\ninput.dispatchEvent(new Event('change', { bubbles: true }));\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Mappings and Iconify Settings in Symfony UX\nDESCRIPTION: YAML configuration for icon mappings and Iconify integration settings. Includes icon alias definitions and Iconify API configuration with endpoint specification. Also controls error handling behavior for missing icons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndots: 'clarity:ellipsis-horizontal-line'\n'tabler:save': 'tabler:device-floppy'\n\n# Configuration for the \"on demand\" icons powered by Iconify.design\niconify:\n   enabled: true\n\n   # Whether to use the \"on demand\" icons powered by Iconify.design\n   on_demand: true\n\n   # The endpoint for the Iconify API\n   endpoint: 'https://api.iconify.design'\n\n# Whether to ignore errors when an icon is not found\nignore_not_found: false\n```\n\n----------------------------------------\n\nTITLE: Configuring StimulusBundle in YAML\nDESCRIPTION: Shows how to configure the path to Stimulus controllers directory and the controllers.json file in the YAML configuration file when using AssetMapper.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/stimulus.yaml\nstimulus:\n    # the default values\n    controller_paths:\n        - '%kernel.project_dir%/assets/controllers'\n    controllers_json: '%kernel.project_dir%/assets/controllers.json'\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX CropperJS Package\nDESCRIPTION: Commands to install both the PHP and JavaScript packages for Symfony UX CropperJS. Demonstrates version matching requirement between PHP and npm packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-cropperjs:2.23.0\nnpm add @symfony/ux-cropperjs@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Working with Collections of DTOs in LiveComponents\nDESCRIPTION: Example showing how to specify a collection of DTOs using PHPDoc. This allows LiveComponents to properly (de)hydrate an array of DTO objects.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_31\n\nLANGUAGE: php\nCODE:\n```\nclass ComponentWithAddressDto\n{\n    /**\n     * @var AddressDto[]\n     */\n    #[LiveProp]\n    public array $addressDtoCollection;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Route for Live Components in YAML\nDESCRIPTION: Demonstrates how to define a custom route for live components in the Symfony routing configuration.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_151\n\nLANGUAGE: yaml\nCODE:\n```\n# config/routes.yaml\nlive_component_admin:\n    path: /admin/_components/{_live_component}/{_live_action}\n    defaults:\n        _live_action: 'get'\n```\n\n----------------------------------------\n\nTITLE: Using the Turbo Frame Twig component\nDESCRIPTION: Examples of using the <twig:Turbo:Frame> Twig component in various configurations, which renders as <turbo-frame> elements.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:Turbo:Frame id=\"the_frame_id\" />\n\n{# renders as: #}\n<turbo-frame id=\"the_frame_id\"></turbo-frame>\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:Turbo:Frame id=\"the_frame_id\" loading=\"lazy\" src=\"{{ path('block') }}\" />\n\n{# renders as: #}\n<turbo-frame id=\"the_frame_id\" loading=\"lazy\" src=\"https://example.com/block\"></turbo-frame>\n```\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:Turbo:Frame id=\"the_frame_id\" src=\"{{ path('block') }}\">\n    A placeholder.\n</twig:Turbo:Frame>\n\n{# renders as: #}\n<turbo-frame id=\"the_frame_id\" src=\"https://example.com/block\">\n    A placeholder.\n</turbo-frame>\n```\n\n----------------------------------------\n\nTITLE: Importing Icons via Console Command in PHP\nDESCRIPTION: Demonstrates how to import individual or multiple icons using the Symfony console command.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$ php bin/console ux:icons:import flowbite:user-solid\n\n# it's also possible to import several icons at once\n$ php bin/console ux:icons:import flowbite:user-solid flowbite:home-solid\n```\n\n----------------------------------------\n\nTITLE: Multiple Named Blocks in Component\nDESCRIPTION: Shows how to define multiple named blocks within a component template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_37\n\nLANGUAGE: html+twig\nCODE:\n```\n<div class=\"alert alert-{{ type }}\">\n    {% block content %}{% endblock %}\n    {% block footer %}\n        <div>Default Footer content</div>\n    {% endblock %}\n </div>\n```\n\n----------------------------------------\n\nTITLE: Using Icon Aliases in Twig Templates\nDESCRIPTION: Demonstrates how to use defined icon aliases in Twig templates with both function and HTML syntax.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_14\n\nLANGUAGE: html+twig\nCODE:\n```\n{{ ux_icon('dots') }}\n\n<twig:ux:icon name=\"dots\" />\n```\n\n----------------------------------------\n\nTITLE: Custom JavaScript Event Controller\nDESCRIPTION: Stimulus controller implementation for handling toggle password events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('toggle-password:connect', this._onConnect);\n        this.element.addEventListener('toggle-password:show', this._onShow);\n        this.element.addEventListener('toggle-password:hide', this._onHide);\n    }\n\n    disconnect() {\n        this.element.removeEventListener('toggle-password:connect', this._onConnect);\n        this.element.removeEventListener('toggle-password:show', this._onShow);\n        this.element.removeEventListener('toggle-password:hide', this._onHide);\n    }\n\n    _onConnect(event) {\n        const toggle = event.detail.button;\n        toggle.dataset.customProperty = 'my-custom-value';\n        const input = event.detail.element;\n        input.classList.add('my-custom-class');\n    }\n\n    _onShow(event) {\n        const toggle = event.detail.button;\n        toggle.dataset.visible = true;\n        const input = event.detail.element;\n        input.classList.add('my-custom-class');\n    }\n\n    _onHide(event) {\n        const toggle = event.detail.button;\n        delete toggle.dataset.visible;\n        const input = event.detail.element;\n        input.classList.remove('my-custom-class');\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vue.js Integration for Symfony UX\nDESCRIPTION: This snippet demonstrates how to install both the PHP and npm packages for Vue.js integration in Symfony UX. It emphasizes the importance of matching versions between the two packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-vue:2.23.0\nnpm add @symfony/ux-vue@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Notifier Transport for Mercure\nDESCRIPTION: YAML configuration for setting up the notifier transport to use Mercure in Symfony.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/notifier.yaml\nframework:\n    notifier:\n        chatter_transports:\n           myMercureChatter: '%env(MERCURE_DSN)%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Encore for Turbo Drive asset tracking\nDESCRIPTION: JavaScript configuration for Webpack Encore to enable versioning, which helps Turbo Drive detect when assets change.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n\nEncore.\n    // ...\n    .enableVersioning(Encore.isProduction())\n```\n\n----------------------------------------\n\nTITLE: Rendering Icons with HTML Syntax in Twig\nDESCRIPTION: Demonstrates the HTML syntax for rendering icons in Twig templates, including subdirectory and on-demand icons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:ux:icon name=\"user-profile\" />\n\n<twig:ux:icon name=\"user-profile\" class=\"w-4 h-4\" />\n\n<twig:ux:icon name=\"sub-dir:user-profile\" class=\"w-4 h-4\" />\n\n<twig:ux:icon name=\"flowbite:user-solid\" />\n```\n\n----------------------------------------\n\nTITLE: Locking On-Demand Icons via Console Command in PHP\nDESCRIPTION: Shows how to lock (import) all on-demand icons used in the project, with options to force overwrite existing icons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$ php bin/console ux:icons:lock\n\n# Force overwrite existing icons\n$ php bin/console ux:icons:lock --force\n\n# Verbose mode to see potential invalid icons\n$ php bin/console ux:icons:lock -v\n```\n\n----------------------------------------\n\nTITLE: Vue Before Mount Event Handler\nDESCRIPTION: JavaScript event listener for vue:before-mount event, showing how to modify Vue application instance.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('vue:before-mount', (event) => {\n    const {\n        componentName, // The Vue component's name\n        component, // The resolved Vue component\n        props, // The props that will be injected to the component\n        app, // The Vue application instance\n    } = event.detail;\n\n    // Example with Vue Router\n    const router = VueRouter.createRouter({\n        history: VueRouter.createWebHashHistory(),\n        routes: [\n            /* ... */\n        ],\n    });\n\n    app.use(router);\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Image Fetching in PHP for Symfony UX LazyImage\nDESCRIPTION: PHP code showing how to create a custom invokable class to fetch image content for the LazyImage bundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\BlurHash;\n\nclass FetchImageContent\n{\n    public function __invoke(string $filename): string\n    {\n        // Your custom implementation here to fetch the image content\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Mercure Notifications via NotifierInterface\nDESCRIPTION: PHP code example showing how to inject the NotifierInterface service and send messages on a Mercure channel.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// ...\nuse Symfony\\Component\\Notifier\\ChatterInterface;\nuse Symfony\\Component\\Notifier\\Message\\ChatMessage;\n\n#[AsCommand(name: 'app:flash-sales:announce')]\nclass AnnounceFlashSalesCommand extends Command\n{\n    public function __construct(private ChatterInterface $chatter)\n    {\n        parent::__construct();\n    }\n\n    protected function execute(InputInterface $input, OutputInterface $output): int\n    {\n        $message = (new ChatMessage(\n            'Flash sales has been started!',\n            new MercureOptions(['/chat/flash-sales'])\n        ))->transport('myMercureChatter');\n\n        $this->chatter->send($message);\n\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Turbo Package (Shell)\nDESCRIPTION: Commands to install both the PHP and npm packages for Symfony UX Turbo. This ensures version compatibility between the two packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-turbo:2.23.0\nnpm add @symfony/ux-turbo@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Registering Chart.js Plugin\nDESCRIPTION: JavaScript code for registering a Chart.js plugin globally in the application\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/app.js\nimport zoomPlugin from 'chartjs-plugin-zoom';\n\n// register globally for all charts\ndocument.addEventListener('chartjs:init', function (event) {\n    const Chart = event.detail.Chart;\n    Chart.register(zoomPlugin);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring asset attributes for Turbo Drive reloading\nDESCRIPTION: YAML configuration to add data-turbo-track attribute to script and link tags, allowing Turbo Drive to reload the page when assets change.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/webpack_encore.yaml\nwebpack_encore:\n    # ...\n\n    script_attributes:\n        defer: true\n        'data-turbo-track': reload\n    link_attributes:\n        'data-turbo-track': reload\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Leaflet Map via Composer\nDESCRIPTION: Command to install the Symfony UX Leaflet Map bridge using Composer package manager.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-leaflet-map\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_controller with Outlets\nDESCRIPTION: Example showing how to use the stimulus_controller Twig function with outlet references to other controllers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: twig\nCODE:\n```\n<div {{ stimulus_controller('chart',\n        { 'name': 'Likes', 'data': [1, 2, 3, 4] },\n        { 'loading': 'spinner' },\n        { 'other': '.target' } ) }}>\n    Hello\n</div>\n\n<!-- would render -->\n<div\n   data-controller=\"chart\"\n   data-chart-name-value=\"Likes\"\n   data-chart-data-value=\"&#x5B;1,2,3,4&#x5D;\"\n   data-chart-loading-class=\"spinner\"\n   data-chart-other-outlet=\".target\"\n>\n   Hello\n</div>\n\n<!-- or without values/classes -->\n<div {{ stimulus_controller('chart', controllerOutlets = { 'other': '.target' }) }}>\n    Hello\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Test Application\nDESCRIPTION: Commands to install dependencies and set up the database schema for the test application\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncomposer install\ncd tests/app\nphp public/index.php doctrine:schema:create\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Instances of Component with Different URL Parameter Names\nDESCRIPTION: Example of using the same SearchModule component multiple times in a Twig template with different URL parameter names to avoid collisions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_109\n\nLANGUAGE: html+twig\nCODE:\n```\n<twig:SearchModule alias=\"q1\" />\n<twig:SearchModule alias=\"q2\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache for Symfony UX LazyImage\nDESCRIPTION: YAML configuration to set up a cache pool for storing generated BlurHash images in the LazyImage bundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/lazy_image.yaml\nframework:\n    cache:\n        pools:\n            cache.lazy_image: cache.adapter.redis # or any other cache adapter depending on your needs\n\nlazy_image:\n    cache: cache.lazy_image # the cache pool to use\n```\n\n----------------------------------------\n\nTITLE: Using Symfony UX LazyImage with srcset Attribute in Twig\nDESCRIPTION: HTML and Twig code showing how to use the LazyImage Stimulus controller with the srcset attribute for responsive images.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<img\n    src=\"{{ asset('image/small.png') }}\"\n    srcset=\"{{ asset('image/small.png') }} 1x, {{ asset('image/small2x.png') }} 2x\"\n\n    {{ stimulus_controller('symfony/ux-lazy-image/lazy-image', {\n        src: asset('image/large.png'),\n        srcset: {\n            '1x': asset('image/large.png'),\n            '2x': asset('image/large2x.png')\n        }\n    }) }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Notification Stream in Twig\nDESCRIPTION: Twig code to render the notification stream in a template, specifying a Mercure topic to listen to.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ stream_notifications(['/chat/flash-sales']) }}\n```\n\n----------------------------------------\n\nTITLE: Installing Importmap Packages for Symfony UX\nDESCRIPTION: Command to download JavaScript packages defined in the importmap configuration. This prepares front-end dependencies for the application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsymfony console importmap:install\n```\n\n----------------------------------------\n\nTITLE: Starting Mercure Hub with Docker\nDESCRIPTION: Docker command to run a Mercure Hub instance with configured JWT keys and port mapping\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n    -e SERVER_NAME=:3000 \\\n    -e MERCURE_PUBLISHER_JWT_KEY='!ChangeMe!' \\\n    -e MERCURE_SUBSCRIBER_JWT_KEY='!ChangeMe!' \\\n    -p 3000:3000 \\\n    dunglas/mercure caddy run -config /etc/caddy/dev.Caddyfile\n```\n\n----------------------------------------\n\nTITLE: Using query_builder with FoodForm in PHP\nDESCRIPTION: Example of a form class that uses query_builder to exclude the current food from the autocomplete options list. This approach won't work with Ajax-powered autocomplete as form options aren't preserved in Ajax calls.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// src/Form/FoodForm.php\n// ...\n\nclass FoodForm extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options): void\n    {\n        $currentFoodId = $builder->getData()->getId();\n\n        $builder\n            ->add('food', FoodAutocompleteField::class, [\n                'query_builder' => function (EntityRepository $er) {\n                    $qb = $er->createQueryBuilder('o');\n\n                    return $qb->andWhere($qb->expr()->notIn('o.id', [$currentFoodId]));\n                };\n            ])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Swup Package Dependencies\nDESCRIPTION: Commands to install both the PHP and npm packages for Symfony UX Swup, ensuring version synchronization between both packages. Version 2.23.0 is used as an example.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-swup:2.23.0\nnpm add @symfony/ux-swup@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Vue Router Web History Configuration\nDESCRIPTION: Example of configuring Vue Router with web history mode and defined routes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst router = VueRouter.createRouter({\n    history: VueRouter.createWebHistory(),\n    routes: [\n        { path: '/survey/list', component: ListSurveys },\n        { path: '/survey/create', component: CreateSurvey },\n        { path: '/survey/edit/:surveyId', component: EditSurvey },\n    ],\n});\n\napp.use(router);\n```\n\n----------------------------------------\n\nTITLE: Rendering a 'New Item' Component with Key in Twig\nDESCRIPTION: Demonstrates how to render a component for creating a new item after looping through existing items, using a specific key to identify this component uniquely.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_141\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/components/InvoiceCreator.html.twig #}\n// ... loop and render the existing line item components\n\n{{ component('InvoiceLineItemForm', {\n    key: 'new_line_item',\n}) }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Image Fetching for Symfony UX LazyImage\nDESCRIPTION: YAML configuration to set up a custom image fetching service for the LazyImage bundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/lazy_image.yaml\nlazy_image:\n    fetch_image_content: 'App\\BlurHash\\FetchImageContent'\n```\n\n----------------------------------------\n\nTITLE: Updating Action Parameters in HTML\nDESCRIPTION: Change in passing arguments to actions using Stimulus action parameters syntax in version 2.16.0.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n    data-action=\"live#action\"\n-     data-action-name=\"addItem(id={{ item.id }}, itemName=CustomItem)\"\n+     data-live-action-param=\"addItem\"\n+     data-live-id-param=\"{{ item.id }}\"\n+     data-live-item-name-param=\"CustomItem\"\n>Add Item</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering Leaflet Map in Twig Template\nDESCRIPTION: Twig template code for rendering a map with a custom controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_4\n\nLANGUAGE: twig\nCODE:\n```\n{{ ux_map(map, {'data-controller': 'my-map' }) }}\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets for Symfony UX LazyImage\nDESCRIPTION: Commands to install JavaScript assets and restart Encore for the Symfony UX LazyImage bundle when using WebpackEncore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Variable Scope Limitations in LiveComponent Blocks\nDESCRIPTION: Demonstrates that variables defined in the outer template context are not available during component re-rendering, showing a pattern that won't work correctly.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_146\n\nLANGUAGE: twig\nCODE:\n```\n{# templates/some_page.html.twig #}\n{% set message = 'Variables from the outer part of the template are only available during  the initial render' %}\n\n{% component Alert %}\n    {% block content %}{{ message }}{% endblock %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Updating Data Action Attribute in HTML\nDESCRIPTION: Change in data-action-name attribute behavior in version 2.16.0, moving to Stimulus action parameters.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n    data-action=\"live#action\"\n-    data-action-name=\"debounce(300)|save\"\n+    data-live-action-param=\"debounce(300)|save\"\n>Save</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Twig Component via Composer\nDESCRIPTION: Command to install the Symfony UX Twig Component package using Composer.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-twig-component\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Typed Package Dependencies\nDESCRIPTION: Commands to install both the PHP and npm packages for Symfony UX Typed. Demonstrates version matching requirement between PHP and JavaScript packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-typed:2.23.0\nnpm add @symfony/ux-typed@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Swup Controller in Template\nDESCRIPTION: Twig template showing how to implement a custom Swup controller alongside the default Swup controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<html lang=\"en\">\n    <head>\n        <title>Swup</title>\n        {# ... #}\n    </head>\n    <body {{ stimulus_controller('myswup')|stimulus_controller('symfony/ux-swup/swup', {\n        // ... options\n    }) }}>\n        {# ... #}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Package Name Specification in Markdown\nDESCRIPTION: Package name and URL reference in markdown format showing the symfony/ux-map package on Packagist.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[symfony/ux-map](https://packagist.org/packages/symfony/ux-map)\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps Component with Symfony UX\nDESCRIPTION: HTML div element containing data attributes for initializing a Google Maps component with Symfony UX. Includes configuration for map center coordinates, zoom level, bounds fitting, provider options, and polyline definitions. The component uses data controllers and various map options including gesture handling, controls positioning, and map type settings.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with polylines and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[{&quot;points&quot;:[{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}],&quot;title&quot;:null,&quot;infoWindow&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;7cdd432ea54d0ce9&quot;},{&quot;points&quot;:[{&quot;lat&quot;:1.1,&quot;lng&quot;:2.2},{&quot;lat&quot;:3.3,&quot;lng&quot;:4.4},{&quot;lat&quot;:5.5,&quot;lng&quot;:6.6}],&quot;title&quot;:null,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Polygon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;9074e0a9ead08c1e&quot;}]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Model Updates with Event Modifiers\nDESCRIPTION: Shows how to update the Twig template to use the new on(change) modifier for data-model instead of the previous data-action attribute for handling model updates on change events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: twig\nCODE:\n```\n<!-- BEFORE -->\n<input\n    data-model=\"max\"\n    data-action=\"change->live#update\"\n>\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- AFTER -->\n<input\n    data-model=\"on(change)|max\"\n>\n```\n\n----------------------------------------\n\nTITLE: Vue Mount Event Handler\nDESCRIPTION: JavaScript event listener for vue:mount event, triggered when a component is mounted.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('vue:mount', (event) => {\n    const {\n        componentName, // The Vue component's name\n        component, // The resolved Vue component\n        props, // The props that are injected to the component\n    } = event.detail;\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Typed's Functionality with Custom Stimulus Controller\nDESCRIPTION: JavaScript implementation for extending the default Typed behavior. This custom controller demonstrates how to listen for Typed events, modify options before initialization, and access the Typed instance after it's been created.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/mytyped_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    initialize() {\n        this._onPreConnect = this._onPreConnect.bind(this);\n        this._onConnect = this._onConnect.bind(this);\n    }\n\n    connect() {\n        this.element.addEventListener('typed:pre-connect', this._onPreConnect);\n        this.element.addEventListener('typed:connect', this._onConnect);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side-effects\n        this.element.removeEventListener('typed:connect', this._onConnect);\n        this.element.removeEventListener('typed:pre-connect', this._onPreConnect);\n    }\n\n    _onPreConnect(event) {\n        // Typed has not been initialized - options can be changed\n        console.log(event.detail.options); // Options that will be used to initialize Typed\n        event.detail.options.onBegin = (typed) => {\n            console.log(\"Typed is ready to type cool messages!\");\n        };\n        event.detail.options.onStop = (typed) => {\n            console.log(\"OK. Enough is enough.\");\n        };\n    }\n\n    _onConnect(event) {\n        // Typed has just been intialized and you can access details from the event\n        console.log(event.detail.typed); // Typed instance\n        console.log(event.detail.options); // Options used to initialize Typed\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets with npm for WebpackEncore\nDESCRIPTION: Commands for installing the JavaScript assets needed by the Typed bundle when using WebpackEncore. This step is not required when using AssetMapper.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Using stimulus_action with Form Elements\nDESCRIPTION: Example showing how to use the stimulus_action helper with form elements by converting the attributes to an array.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_12\n\nLANGUAGE: twig\nCODE:\n```\n{{ form_row(form.password, { attr: stimulus_action('hello-controller', 'checkPasswordStrength').toArray() }) }}\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Automatic Value Setting in Live Components\nDESCRIPTION: Demonstrates the change in behavior where Live Components now automatically set the value of fields with data-model, eliminating the need for manual value setting in the component template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: twig\nCODE:\n```\n<!-- BEFORE -->\n<input data-model=\"firstName\" value=\"{{ firstName }}\">\n```\n\nLANGUAGE: twig\nCODE:\n```\n<!-- AFTER -->\n<input data-model=\"firstName\">\n```\n\n----------------------------------------\n\nTITLE: Extending Cropper.js Behavior with Custom Stimulus Controller\nDESCRIPTION: JavaScript code for a custom Stimulus controller to extend the default behavior of Symfony UX Cropper.js.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\n// mycropper_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('cropperjs:pre-connect', this._onPreConnect);\n        this.element.addEventListener('cropperjs:connect', this._onConnect);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side effects\n        this.element.removeEventListener('cropperjs:connect', this._onConnect);\n        this.element.removeEventListener('cropperjs:pre-connect', this._onPreConnect);\n    }\n\n    _onPreConnect(event) {\n        // The cropper has not yet been created and options can be modified\n        console.log(event.detail.options);\n        console.log(event.detail.img);\n    }\n\n    _onConnect(event) {\n        // The cropper was just created and you can access details from the event\n        console.log(event.detail.cropper);\n        console.log(event.detail.options);\n        console.log(event.detail.img);\n\n        // For instance you can listen to additional events\n        event.detail.img.addEventListener('cropend', function () {\n            // ...\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Map Component with Symfony UX in HTML\nDESCRIPTION: This HTML snippet configures a Google Map component using Symfony UX data attributes. It sets up provider options, map center, zoom level, and various map control settings. The component is controlled by the 'symfony--ux-google-map--map' Stimulus controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with every options__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;id&quot;:&quot;gmap&quot;,&quot;language&quot;:&quot;fr&quot;,&quot;region&quot;:&quot;FR&quot;,&quot;nonce&quot;:&quot;abcd&quot;,&quot;retries&quot;:10,&quot;url&quot;:&quot;https:\\/\\/maps.googleapis.com\\/maps\\/api\\/js&quot;,&quot;version&quot;:&quot;quarterly&quot;,&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Modifying LiveProp Attribute in PHP\nDESCRIPTION: Change in LiveProp attribute syntax from 'exposed' to 'writable' option in version 2.8.0.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n-#[LiveProp(exposed: ['email', 'plainPassword'])]\n+#[LiveProp(writable: ['email', 'plainPassword'])]\npublic User $user;\n```\n\n----------------------------------------\n\nTITLE: Vue Unmount Event Handler\nDESCRIPTION: JavaScript event listener for vue:unmount event, triggered when a component is unmounted.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener('vue:unmount', (event) => {\n    const {\n        componentName, // The Vue component's name\n        props, // The props that were injected to the component\n    } = event.detail;\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps Container with Symfony UX Data Attributes\nDESCRIPTION: HTML template that sets up a Google Maps container div with Symfony UX controller and configuration options. Includes settings for map center coordinates, zoom level, bounds fitting, and various map control options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with all markers removed__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Assets with WebpackEncore\nDESCRIPTION: Commands to install JavaScript assets and start the Webpack Encore watch process. This step is not required if using AssetMapper.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --force\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Basic Component Class Structure\nDESCRIPTION: Minimal implementation of a Twig component class with just the AsTwigComponent attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// src/Twig/Components/Alert.php\nnamespace App\\Twig\\Components;\n\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n\n#[AsTwigComponent]\nclass Alert\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Twig Template for Live Component Initialization\nDESCRIPTION: Demonstrates the change from using the init_live_component() Twig function to using the attributes variable for initializing a Live Component.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: twig\nCODE:\n```\n- <div {{ init_live_component() }}>\n+ <div {{ attributes }}>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Translator Bundle\nDESCRIPTION: Terminal commands for installing the Symfony UX Translator bundle and its JavaScript dependencies using Composer and npm.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Translator/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-translator\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Specific Twig Component in Detail\nDESCRIPTION: This command shows detailed information about a specific component (RandomNumber in this example), including its class, template path, type, and properties with their types and default values.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_55\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:twig-component RandomNumber\n\n+---------------------------------------------------+-----------------------------------+\n| Property                                          | Value                             |\n+---------------------------------------------------+-----------------------------------+\n| Component                                         | RandomNumber                      |\n| Class                                             | App\\Components\\RandomNumber       |\n| Template                                          | components/RandomNumber.html.twig |\n| Type                                              | Live                              |\n+---------------------------------------------------+-----------------------------------+\n| Properties (type / name / default value if exist) | string $name = toto               |\n|                                                   | string $type = test               |\n| Live Properties                                   | int $max = 1000                   |\n|                                                   | int $min = 10                     |\n+---------------------------------------------------+-----------------------------------+\n```\n\n----------------------------------------\n\nTITLE: Searching for Specific Icons in a Set via Console Command\nDESCRIPTION: Using the ux:icons:search command to find specific icons within an icon set. This example searches for 'arrow' icons in the Tabler Icons set.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console ux:icons:search tabler arrow\n\nSearching Tabler Icons icons \"arrow\"...\nFound 64 icons.\n ------------------------------------------ ------------------------------------------\n  tabler:archery-arrow                       tabler:arrow-autofit-up\n  tabler:arrow-back                          tabler:arrow-back-up\n  tabler:arrow-badge-down                    tabler:arrow-badge-up\n  tabler:arrow-badge-up-filled               tabler:arrow-bar-both\n  tabler:arrow-bar-down                      tabler:arrow-bar-left\n  tabler:arrow-bar-right                     tabler:arrow-bar-to-up\n  tabler:arrow-bar-up                        tabler:arrow-bear-left\n  tabler:arrow-big-down                      tabler:arrow-big-down-filled\n  tabler:arrow-big-down-line                 tabler:arrow-big-left\n  tabler:arrow-big-left-filled               tabler:arrow-big-left-line\n  tabler:arrow-big-right                     tabler:arrow-big-right-filled\n  tabler:arrow-big-right-line                tabler:arrow-big-up\n ------------------------------------------ ------------------------------------------\n\n Page 1/3. Continue? (yes/no) [yes]:\n >\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet Map with Symfony UX Controller\nDESCRIPTION: HTML configuration for initializing a Leaflet map using Symfony UX controllers. The setup includes map center coordinates (Paris, France), zoom level, tile provider configuration from OpenStreetMap, and empty collections for markers, polygons, and polylines.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set simple map__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for StimulusBundle\nDESCRIPTION: Shows how to enable the Stimulus bridge in the Webpack configuration file when using WebpackEncoreBundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n// webpack.config.js\n.enableStimulusBridge('./assets/controllers.json')\n```\n\n----------------------------------------\n\nTITLE: Initializing Symfony UX Google Map Component with Configuration Options\nDESCRIPTION: HTML markup that configures a Google Map using Symfony UX controllers. The configuration includes API key, map center coordinates, zoom level, and various display options. The component is also prepared to handle markers, polygons, and polylines though none are defined in this example.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with default map id__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;my_api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:&quot;DefaultMapId&quot;,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript assets for WebpackEncore\nDESCRIPTION: Commands to install the JavaScript assets for Symfony UX Turbo when using WebpackEncore and restart the Encore process.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Svelte with AssetMapper\nDESCRIPTION: YAML configuration for specifying the controllers path when using Svelte with AssetMapper instead of WebpackEncore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/svelte.yaml\nsvelte:\n    controllers_path: '%kernel.project_dir%/assets/build/svelte/controllers'\n```\n\n----------------------------------------\n\nTITLE: Alternative Component Syntax\nDESCRIPTION: Shows the non-HTML syntax for component rendering with blocks.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_39\n\nLANGUAGE: html+twig\nCODE:\n```\n{% component Alert with {type: 'success'} %}\n    {% block content %}<div>Congrats!</div>{% endblock %}\n    {% block footer %}... footer content{% endblock %}\n{% endcomponent %}\n```\n\n----------------------------------------\n\nTITLE: Keeping Fork Up-to-date with Upstream\nDESCRIPTION: Git commands to sync your fork with the upstream Symfony UX repository's main branch.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout 2.x && \\\n  git fetch upstream && \\\n  git rebase upstream/2.x && \\\n  git push origin 2.x\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Map Component with Symfony UX\nDESCRIPTION: HTML markup for initializing a Google Map component in Symfony UX. The div element includes data attributes for configuring the map provider options, center coordinates, zoom level, markers, and other map settings. It demonstrates how to set up a map with a custom map ID and specific control options.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with default map id overridden by option mapId__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;my_api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:&quot;CustomMapId&quot;,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Disabling Public Property Exposure in a Component\nDESCRIPTION: Shows how to configure a component to require explicit access via 'this' for properties.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n#[AsTwigComponent(exposePublicProps: false)]\nclass Alert\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps with Symfony UX HTML Attributes\nDESCRIPTION: This HTML snippet demonstrates how to set up a Google Map using Symfony UX data attributes. It includes configuration for the map provider, center coordinates, zoom level, and various map options such as gesture handling and control positions.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with controls enabled__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Autocomplete Route in Twig\nDESCRIPTION: Shows how to create a URL path to the autocomplete endpoint for a specific entity using the ux_entity_autocomplete route with an alias parameter.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_16\n\nLANGUAGE: twig\nCODE:\n```\n{{ path('ux_entity_autocomplete', { alias: 'food' }) }}\n```\n\n----------------------------------------\n\nTITLE: Implementing ComponentInterface in PHP (Legacy Approach)\nDESCRIPTION: Shows the legacy way of creating a Twig component by implementing the ComponentInterface. This approach was used prior to version 2.0 before PHP 8 attributes were introduced.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\TwigComponent\\ComponentInterface;\n\nclass AlertComponent implements ComponentInterface\n{\n    public string $type = 'success';\n    public string $message;\n\n    public static function getComponentName(): string\n    {\n        return 'alert';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX LazyImage Bundle with Composer\nDESCRIPTION: Command to install the Symfony UX LazyImage bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ composer require symfony/ux-lazy-image\n```\n\n----------------------------------------\n\nTITLE: Documenting Changes in Symfony UX Changelog\nDESCRIPTION: This code snippet outlines the changes made in versions 2.22, 2.20, and 2.19 of the Symfony UX project. It includes new features for Map configuration, breaking changes in importmap entries, and the addition of a new bridge.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.22\n\n-   Add support for configuring a default Map ID\n-   Add argument `$defaultMapId` to `Symfony\\UX\\Map\\Bridge\\Google\\Renderer\\GoogleRendererFactory` constructor\n-   Add argument `$defaultMapId` to `Symfony\\UX\\Map\\Bridge\\Google\\Renderer\\GoogleRenderer` constructor\n\n## 2.20\n\n### BC Breaks\n\n-   Renamed importmap entry `@symfony/ux-google-map/map-controller` to `@symfony/ux-google-map`, \n    you will need to update your importmap.\n\n## 2.19\n\n-   Bridge added\n```\n\n----------------------------------------\n\nTITLE: Listing All Twig Components Using debug:twig-component Command\nDESCRIPTION: This command lists all components in your application's templates/components/ directory, showing the component name, class, template path, and type (Live or Anon).\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_54\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console debug:twig-component\n\n+---------------+-----------------------------+------------------------------------+------+\n| Component     | Class                       | Template                           | Type |\n+---------------+-----------------------------+------------------------------------+------+\n| Coucou        | App\\Components\\Alert        | components/Coucou.html.twig        |      |\n| RandomNumber  | App\\Components\\RandomNumber | components/RandomNumber.html.twig  | Live |\n| Test          | App\\Components\\foo\\Test     | components/foo/Test.html.twig      |      |\n| Button        |                             | components/Button.html.twig        | Anon |\n| foo:Anonymous |                             | components/foo/Anonymous.html.twig | Anon |\n| Acme:Button   |                             | @Acme/components/Button.html.twig  | Anon |\n+---------------+-----------------------------+------------------------------------+------+\n```\n\n----------------------------------------\n\nTITLE: Installing and Building Frontend Assets\nDESCRIPTION: Commands to install npm dependencies and run Webpack Encore for asset compilation.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --force\nnpm run watch\n```\n\n----------------------------------------\n\nTITLE: Configuring UX Live Components Route for Localization\nDESCRIPTION: YAML configuration to add locale support to the UX Live Components route.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: YAML\nCODE:\n```\n# config/routes/ux_live_component.yaml\nlive_component:\n    resource: '@LiveComponentBundle/config/routes.php'\n-     prefix: /_components\n+     prefix: /{_locale}/_components\n```\n\n----------------------------------------\n\nTITLE: Updating Prevent Modifier in HTML\nDESCRIPTION: Removal of 'prevent' modifier in favor of standard Stimulus :prevent action option in version 2.16.0.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\n<button\n-    data-action=\"live#action\n+    data-action=\"live#action:prevent\"\n-    data-action-name=\"prevent|save\"\n+    data-live-action-param=\"save\"\n >Save</button>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Vue Dependencies\nDESCRIPTION: Terminal commands for installing the Symfony UX Vue bundle and required Vue loader package using Composer and npm.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Vue/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-vue\n$ npm install -D vue-loader --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Map with Symfony UX in HTML\nDESCRIPTION: This HTML snippet sets up a div element with data attributes to configure a Google Map using Symfony UX components. It includes settings for the map provider, center coordinates, zoom level, and custom polygons. The configuration is done through data attributes, which are likely processed by JavaScript controllers.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with polygons and infoWindows__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[{&quot;points&quot;:[{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522},{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}],&quot;title&quot;:null,&quot;infoWindow&quot;:null,&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;7cdd432ea54d0ce9&quot;},{&quot;points&quot;:[{&quot;lat&quot;:1.1,&quot;lng&quot;:2.2},{&quot;lat&quot;:3.3,&quot;lng&quot;:4.4},{&quot;lat&quot;:5.5,&quot;lng&quot;:6.6}],&quot;title&quot;:null,&quot;infoWindow&quot;:{&quot;headerContent&quot;:null,&quot;content&quot;:&quot;Polygon&quot;,&quot;position&quot;:null,&quot;opened&quot;:false,&quot;autoClose&quot;:true,&quot;extra&quot;:[]},&quot;extra&quot;:[],&quot;id&quot;:null,&quot;@id&quot;:&quot;9074e0a9ead08c1e&quot;}]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Icon Attributes in YAML\nDESCRIPTION: Shows how to set default attributes for all icons in the YAML configuration file.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/ux_icons.yaml\nux_icons:\n    default_icon_attributes:\n        fill: currentColor\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This code snippet shows the structure and format of changelog entries for the Symfony UX component. It includes version numbers, bullet points for changes, and highlights breaking changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   A TypedBundle was added - which allows for integration with symfony/asset-mapper.\n\n-   Add support for symfony/asset-mapper\n\n## 2.7.0\n\n-   Add `assets/src` to `.gitattributes` to exclude source TypeScript files from\n    installing.\n\n-   TypeScript types are now included.\n\n## 2.6.0\n\n-   [BC BREAK] The `assets/` directory was moved from `Resources/assets/` to `assets/`. Make\n    sure the path in your `package.json` file is updated accordingly.\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Live Component via Composer\nDESCRIPTION: Shows the Composer command to install the Symfony UX Live Component bundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: Terminal\nCODE:\n```\n$ composer require symfony/ux-live-component\n```\n\n----------------------------------------\n\nTITLE: Setting Turbo Scroll Behavior in Twig\nDESCRIPTION: Twig function that generates a meta tag to configure the scroll behavior for Turbo page refreshes, with options to reset or preserve scroll position.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_34\n\nLANGUAGE: twig\nCODE:\n```\n{{ turbo_refresh_scroll(scroll: 'reset') }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker for Mercure in Symfony UX\nDESCRIPTION: Optional command to set up Docker containers for Mercure, which is used for real-time updates. This runs the defined Docker services in detached mode.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Basic Stimulus Controller Implementation in Twig\nDESCRIPTION: Demonstrates how to apply the autocomplete Stimulus controller to a select element without AJAX functionality.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_18\n\nLANGUAGE: twig\nCODE:\n```\n<select\n    name=\"food\"\n    {{ stimulus_controller('symfony/ux-autocomplete/autocomplete') }}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Twig Component with MakerBundle\nDESCRIPTION: Command to generate a new Twig component using Symfony's MakerBundle.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_10\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console make:twig-component Alert\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet Map with Symfony UX Data Attributes\nDESCRIPTION: HTML div element configured with Symfony UX Leaflet map controller and required data attributes. The map is centered on Paris (48.8566, 2.3522) with a zoom level of 12 and uses OpenStreetMap as the tile provider.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with all markers removed__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Custom Stimulus Controller for Swup Extension\nDESCRIPTION: JavaScript code showing how to extend Swup's functionality using a custom Stimulus controller with event listeners and plugins.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// assets/controllers/myswup_controller.js\n\nimport { Controller } from '@hotwired/stimulus';\nimport SwupProgressPlugin from '@swup/progress-plugin';\n\nexport default class extends Controller {\n    connect() {\n        this.element.addEventListener('swup:pre-connect', this._onPreConnect);\n        this.element.addEventListener('swup:connect', this._onConnect);\n    }\n\n    disconnect() {\n        // You should always remove listeners when the controller is disconnected to avoid side-effects\n        this.element.removeEventListener('swup:connect', this._onConnect);\n        this.element.removeEventListener('swup:pre-connect', this._onPreConnect);\n    }\n\n    _onPreConnect(event) {\n        // Swup has not been initialized - options can be changed\n        console.log(event.detail.options); // Options that will be used to initialize Swup\n        event.detail.options.plugins.push(new SwupProgressPlugin()); // Adding the progress bar plugin\n    }\n\n    _onConnect(event) {\n        // Swup has just been intialized and you can access details from the event\n        console.log(event.detail.swup); // Swup instance\n        console.log(event.detail.options); // Options used to initialize Swup\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Route configuration update for Symfony UX Autocomplete\nDESCRIPTION: Shows the updated path for importing Autocomplete routes in Symfony applications. This change was introduced in version 2.6.0 and is considered a breaking change that requires configuration updates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n# config/routes/ux_autocomplete.yaml\nux_autocomplete:\n-    resource: '@AutocompleteBundle/Resources/routes.php'\n+    resource: '@AutocompleteBundle/config/routes.php'\n    prefix: '/autocomplete'\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Turbo via Composer\nDESCRIPTION: Command to install the Symfony UX Turbo bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-turbo\n```\n\n----------------------------------------\n\nTITLE: Form Rendering with Custom Theme for Comments\nDESCRIPTION: A Twig template that uses a custom form theme for rendering collection items, showing how to apply separate styling to collection items.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_81\n\nLANGUAGE: html+twig\nCODE:\n```\n{% form_theme form 'components/_form_theme_comment_list.html.twig' %}\n\n<div {{ attributes }}>\n    {{ form_start(form) }}\n        {{ form_row(form.title)\n\n        <h3>Comments:</h3>\n        <ul>\n            {{ form_row(form.comments, { skip_add_button: true }) }}\n        </ul>\n\n        {# render rest of the form #}\n        {{ form_row(form) }}\n\n        <button type=\"submit\" >Save</button>\n    {{ form_end(form) }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Basic PasswordType Form Implementation\nDESCRIPTION: Basic implementation of a password field with toggle functionality in a Symfony form type class.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\Component\\Form\\Extension\\Core\\Type\\PasswordType;\n\nclass CredentialFormType extends AbstractType\n{\n    public function buildForm(FormBuilderInterface $builder, array $options)\n    {\n        $builder\n            ->add('password', PasswordType::class, ['toggle' => true])\n        ;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Twig Component Using PHP 8 Attributes\nDESCRIPTION: Shows the current approach to creating a Twig component using PHP 8 attributes with the AsTwigComponent attribute. This replaced the ComponentInterface in version 2.0.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse Symfony\\UX\\TwigComponent\\Attribute\\AsTwigComponent;\n\n#[AsTwigComponent('alert')]\nclass AlertComponent\n{\n    public string $type = 'success';\n    public string $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Twig Component Configuration in YAML\nDESCRIPTION: YAML configuration file for setting up the template directory and namespace for Twig components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TwigComponent/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# config/packages/twig_component.yaml\ntwig_component:\n    anonymous_template_directory: 'components/'\n    defaults:\n        # Namespace & directory for components\n        App\\Twig\\Components\\: 'components/'\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Encore Alias for Leaflet CSS\nDESCRIPTION: JavaScript configuration to fix Leaflet CSS path issues in Webpack Encore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nEncore.addAliases({\n  'leaflet/dist/leaflet.min.css': 'leaflet/dist/leaflet.css',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Swup Containers\nDESCRIPTION: Extended Twig template configuration showing how to set up multiple containers for Swup transitions, including navigation updates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<html lang=\"en\">\n    <head>\n        <title>Swup</title>\n\n        {% block javascripts %}\n            {{ encore_entry_script_tags('app') }}\n        {% endblock %}\n    </head>\n    <body\n        {{ stimulus_controller('symfony/ux-swup/swup', {\n            containers: ['#swup', '#nav']\n        }) }}\n    >\n        {# ... #}\n\n        <nav id=\"nav\">\n            {# ... #}\n        </nav>\n\n        <main id=\"swup\">\n            {# ... #}\n        </main>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Google Map via Composer\nDESCRIPTION: Command to install the Symfony UX Google Map bridge using Composer and Symfony Flex. This is the first step to integrate Google Maps into a Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-google-map\n```\n\n----------------------------------------\n\nTITLE: Installing Svelte Loader for Webpack\nDESCRIPTION: Command to install the svelte-loader package, which helps Webpack process Svelte components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install svelte-loader --save-dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Maps DSN\nDESCRIPTION: Examples of DSN configuration for Google Maps API integration. Shows basic setup with API key and various options for language, region, and libraries.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nUX_MAP_DSN=google://GOOGLE_MAPS_API_KEY@default\n\n# With options\nUX_MAP_DSN=google://GOOGLE_MAPS_API_KEY@default?version=weekly\nUX_MAP_DSN=google://GOOGLE_MAPS_API_KEY@default?language=fr&region=FR\nUX_MAP_DSN=google://GOOGLE_MAPS_API_KEY@default?libraries[]=geometry&libraries[]=places\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Notify Package with Shell Commands\nDESCRIPTION: Commands to install both the PHP and JavaScript packages for Symfony UX Notify. Ensures that the version numbers match exactly between the PHP and npm packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-notify:2.23.0\nnpm add @symfony/ux-notify@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the structure of changelog entries for the Symfony UX project. It includes version numbers, bullet points for changes, and highlights important updates like new features, breaking changes, and dependency modifications.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.21.0\n\n-   Add `permanent` option to the `react_component` Twig function, to prevent the \n    _unmounting_ when the component is deconnected and immediately re-connected. \n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Add Symfony 7 support.\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   Add support for symfony/asset-mapper\n\n-   Replace `symfony/webpack-encore-bundle` by `symfony/stimulus-bundle` in dependencies\n\n-   Minimum PHP version is now 8.1\n\n## 2.7.0\n\n-   Add `assets/src` to `.gitattributes` to exclude source TypeScript files from\n    installing.\n\n-   TypeScript types are now included.\n\n## 2.6.0\n\n-   [BC BREAK] The `assets/` directory was moved from `Resources/assets/` to `assets/`. Make\n    sure the path in your `package.json` file is updated accordingly.\n\n-   The directory structure of the bundle was updated to match modern best-practices.\n\n## 2.2\n\n-   Component added\n```\n\n----------------------------------------\n\nTITLE: Symfony UX Changelog in Markdown\nDESCRIPTION: A chronological record of changes to the Symfony UX project, including version 2.13.2 reverting JavaScript package type changes, version 2.13.0 adding Svelte 4 support and Symfony 7 support, version 2.9.0 adding asset-mapper support and changing dependencies, and version 2.8.0 introducing the package.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Add support for Svelte 4.\n-   Add Symfony 7 support.\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   Add support for symfony/asset-mapper\n\n-   Replace `symfony/webpack-encore-bundle` by `symfony/stimulus-bundle` in dependencies\n\n-   Minimum PHP version is now 8.1\n\n## 2.8.0\n\n-   Introduce the package\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets for WebpackEncore\nDESCRIPTION: Commands to install JavaScript assets and restart Encore for WebpackEncore users.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: Terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Basic Typed Animation Configuration with Stimulus Controller\nDESCRIPTION: Basic implementation of the Typed animation using the Stimulus controller. This example demonstrates how to define a list of strings that will be animated on the page.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: html+twig\nCODE:\n```\n<div>\n    I created this UX component because\n    <span {{ stimulus_controller('symfony/ux-typed', {\n        strings: ['I ❤ Symfony UX', 'Symfony UX is great', 'Symfony UX is easy']\n    }) }}></span>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Importing Svelte Components with AssetMapper\nDESCRIPTION: Example of how to import Svelte components when using AssetMapper, demonstrating the requirement to use .js extension despite the file having a .svelte extension.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// use PackageList.js even though the file is named PackageList.svelte\nimport PackageList from '../components/PackageList.js';\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Autocomplete Package with Version Matching\nDESCRIPTION: Command to install both the PHP and JavaScript components of the symfony/ux-autocomplete package with matching version numbers. This ensures compatibility between the front-end and back-end components.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-autocomplete:2.23.0\nnpm add @symfony/ux-autocomplete@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Cloning Symfony UX Repository\nDESCRIPTION: Commands to clone the forked Symfony UX repository to your local machine and add the upstream repository to keep your fork up-to-date.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:<USERNAME>/symfony-ux.git symfony-ux\n$ cd symfony-ux\n# Add the upstream repository, to keep your fork up-to-date\n$ git remote add upstream git@github.com:symfony/ux.git\n```\n\n----------------------------------------\n\nTITLE: Configuring Translation Domains in YAML\nDESCRIPTION: YAML configuration for specifying which translation domains should be included or excluded from being dumped to JavaScript.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Translator/doc/index.rst#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nux_translator:\n    domains: ~    # Include all the domains\n\n    domains: foo  # Include only domain 'foo'\n    domains: '!foo' # Include all domains, except 'foo'\n\n    domains: [foo, bar]   # Include only domains 'foo' and 'bar'\n    domains: ['!foo', '!bar'] # Include all domains, except 'foo' and 'bar'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Controller with Typed in Twig Template\nDESCRIPTION: HTML+Twig implementation showing how to apply both the custom controller and Typed controller to an element. The custom controller is added before the Typed controller to properly capture events.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: html+twig\nCODE:\n```\n<html lang=\"en\">\n    <head>\n        <title>Typed</title>\n        {# ... #}\n    </head>\n    <body {{ stimulus_controller('mytyped')|stimulus_controller('symfony/ux-typed', {\n        strings: ['...'],\n    }) }}>\n        {# ... #}\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet shows the structure of changelog entries for the Symfony UX Map Bundle. It includes version numbers and bullet points describing new features, changes, and deprecations.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.24\n\n-  Installing the package in a Symfony app using Flex won't add the `@symfony/ux-map` dependency to the `package.json` file anymore.\n-  Add `Icon` to customize a `Marker` icon (URL or SVG content)\n-  Add parameter `id` to `Marker`, `Polygon` and `Polyline` constructors\n-  Add method `Map::removeMarker(string|Marker $markerOrId)`\n-  Add method `Map::removePolygon(string|Polygon $polygonOrId)`\n-  Add method `Map::removePolyline(string|Polyline $polylineOrId)`\n\n## 2.23\n\n-  Add `DistanceUnit` to represent distance units (`m`, `km`, `miles`, `nmi`) and\n   ease conversion between units.\n-  Add `DistanceCalculatorInterface` interface and three implementations:\n   `HaversineDistanceCalculator`, `SphericalCosineDistanceCalculator` and `VincentyDistanceCalculator`.\n-  Add `CoordinateUtils` helper, to convert decimal coordinates (`43.2109`) in DMS (`56° 78' 90\"`)\n\n## 2.22\n\n-   Add method `Symfony\\UX\\Map\\Renderer\\AbstractRenderer::tapOptions()`, to allow Renderer to modify options before rendering a Map.\n-   Add `ux_map.google_maps.default_map_id` configuration to set the Google ``Map ID``\n-   Add `ComponentWithMapTrait` to ease maps integration in [Live Components](https://symfony.com/bundles/ux-live-component/current/index.html)\n-   Add `Polyline` support\n\n## 2.20\n\n-   Deprecate `render_map` Twig function (will be removed in 2.21). Use \n    `ux_map` or the `<twig:ux:map />` Twig component instead.\n-   Add `ux_map` Twig function (replaces `render_map` with a more flexible \n    interface)\n-   Add `<twig:ux:map />` Twig component\n-   The importmap entry `@symfony/ux-map/abstract-map-controller` can be removed\n    from your importmap, it is no longer needed. \n-   Add `Polygon` support\n\n## 2.19\n\n-   Component added\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Structured changelog entries documenting version changes, breaking changes, and new features for the Symfony UX package from version 2.0 to 2.17.0.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.17.0\n\n-   Add support for `intervention/image` 3.0+\n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Add Symfony 7 support.\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   Add support for symfony/asset-mapper\n\n-   Minimum required Symfony version is now 5.4\n\n## 2.7.0\n\n-   The JavaScript events now bubble up.\n\n-   Add `assets/src` to `.gitattributes` to exclude source TypeScript files from\n    installing.\n\n-   TypeScript types are now included.\n\n## 2.6.0\n\n-   [BC BREAK] The `assets/` directory was moved from `Resources/assets/` to `assets/`. Make\n    sure the path in your `package.json` file is updated accordingly.\n\n-   The directory structure of the bundle was updated to match modern best-practices.\n\n## 2.0\n\n-   Support for `stimulus` version 2 was removed and support for `@hotwired/stimulus`\n    version 3 was added. See the [@symfony/stimulus-bridge CHANGELOG](https://github.com/symfony/stimulus-bridge/blob/main/CHANGELOG.md#300)\n    for more details.\n-   The `data-hd-src` attribute was changed to use a Stimulus value called `src`. See the\n    updated README for usage.\n-   For both JavaScript events - `lazy-image:connect` and `lazy-image:ready` -\n    the `event.detail.hd` `Image` instance was moved to `event.detail.image`.\n-   Support added for Symfony 6\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Google Map Package with Composer and npm\nDESCRIPTION: Command for installing both the PHP package and the corresponding npm package for symfony/ux-google-map, ensuring version alignment between the two dependencies.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-google-map:2.23.0\nnpm add @symfony/ux-google-map@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Lazy Image Package\nDESCRIPTION: Commands to install both the PHP and npm packages for Symfony UX Lazy Image. The versions must match exactly between the PHP and JavaScript packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LazyImage/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-lazy-image:2.23.0\nnpm add @symfony/ux-lazy-image@2.23.0\n```\n\n----------------------------------------\n\nTITLE: HTML Template Implementation\nDESCRIPTION: Twig template example showing how to use TogglePassword without Symfony Forms.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"toggle-password-container\">\n    <label for=\"password\">Password</label>\n    <input\n        id=\"password\"\n        name=\"password\"\n        type=\"password\"\n        {{ stimulus_controller('symfony/ux-toggle-password/toggle-password', {\n            visibleLabel: 'Show password',\n            visibleIcon: 'Name of some SVG icon',\n            hiddenLabel: 'Hide password',\n            hiddenIcon: 'Name of some SVG icon',\n            buttonClasses: ['toggle-password-button'],\n        }) }}\n    >\n</div>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX React Package via Composer and npm\nDESCRIPTION: This snippet demonstrates how to install both the PHP and npm packages for Symfony UX React. It emphasizes the importance of matching versions between the two packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/React/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-react:2.23.0\nnpm add @symfony/ux-react@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Cloning and Accessing the Symfony UX Project Repository\nDESCRIPTION: Commands to clone the Symfony UX GitHub repository and navigate to the project directory. This is the first step in setting up the project locally.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:symfony/ux\ncd ux/ux.symfony.com/\n```\n\n----------------------------------------\n\nTITLE: Rendering Cropper.js Form in Twig Template\nDESCRIPTION: Twig code snippet showing how to render the Cropper.js form in a Symfony template.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: Twig\nCODE:\n```\n{{ form(form) }}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Cropper.js via Composer\nDESCRIPTION: Command to install the Symfony UX Cropper.js bundle using Composer package manager.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ composer require symfony/ux-cropperjs\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Svelte via Composer and NPM\nDESCRIPTION: Commands to install the Symfony UX Svelte bundle using Composer and Symfony Flex, followed by installing required JavaScript dependencies with NPM.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-svelte\n\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Leaflet Map Package with Composer and npm\nDESCRIPTION: This snippet demonstrates how to install both the PHP and JavaScript packages for Symfony UX Leaflet Map. It emphasizes the importance of matching versions between the two packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-leaflet-map:2.23.0\nnpm add @symfony/ux-leaflet-map@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/ux-dropzone package with matching versions\nDESCRIPTION: Commands to install both the PHP and npm packages for symfony/ux-dropzone with matching versions. The example ensures version 2.23.0 is used for both packages.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-dropzone:2.23.0\nnpm add @symfony/ux-dropzone@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Leaflet Map DSN\nDESCRIPTION: Environment variable configuration for Leaflet map integration.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/README.md#2025-04-14_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nUX_MAP_DSN=leaflet://default\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Translator Package - Shell Commands\nDESCRIPTION: Commands to install both the PHP and npm packages for Symfony UX Translator. Demonstrates version matching requirement between PHP and JavaScript dependencies.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Translator/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-translator:2.23.0\nnpm add @symfony/ux-translator@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Rebasing Feature Branch on Main Branch\nDESCRIPTION: Git commands to rebase a feature branch on top of the latest upstream changes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout my-feature-branch && \\\n  git rebase upstream/2.x && \\\n  git push -u origin my-feature-branch\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets with npm for WebpackEncore\nDESCRIPTION: Commands to install and build the JavaScript assets required for UX-Autocomplete when using WebpackEncore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to install the PHP and JavaScript dependencies required for Symfony UX development.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ composer install\n$ corepack enable && yarn install\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Environment for Symfony UX Turbo\nDESCRIPTION: This snippet shows the commands to set up the test environment for Symfony UX Turbo. It includes updating dependencies, starting Docker containers, and creating the database schema.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer update\ndocker compose up -d\ncd tests/app\nphp public/index.php doctrine:schema:create\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Chart.js Bundle\nDESCRIPTION: Commands for installing the Symfony UX Chart.js bundle using Composer and setting up JavaScript assets with npm\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Chartjs/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-chartjs\n```\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets for WebpackEncore\nDESCRIPTION: Commands to install JavaScript assets for Symfony UX Notify if using WebpackEncore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Stylesheet Configuration\nDESCRIPTION: JSON configuration to disable the default stylesheet for custom styling.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"controllers\": {\n        \"@symfony/ux-toggle-password\": {\n            \"toggle-password\": {\n                \"enabled\": true,\n                \"fetch\": \"eager\",\n                \"autoimport\": {\n                    \"@symfony/ux-toggle-password/dist/style.min.css\": false\n                }\n            }\n        }\n    },\n    \"entrypoints\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Icon Sets via Console Command\nDESCRIPTION: Using the ux:icons:search command to find information about available icon sets. This example searches for the 'tabler' icon set.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_4\n\nLANGUAGE: terminal\nCODE:\n```\n$ php bin/console ux:icons:search tabler\n\n -------------- ------- --------- -------- --------------\n  Icon set       Icons   License   Prefix   Example\n -------------- ------- --------- -------- --------------\n  Tabler Icons    5219   MIT       tabler   tabler:alien\n -------------- ------- --------- -------- --------------\n\nSearch \"arrow\" in Tabler Icons icons:\n\n php bin/console ux:icons:search tabler arrow\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP Client for On-Demand Icons\nDESCRIPTION: Command to install the symfony/http-client package, which is required for using provided icon sets from external sources.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/http-client\n```\n\n----------------------------------------\n\nTITLE: Updating Live Component Route Configuration in YAML\nDESCRIPTION: Update to the route configuration for live components in version 2.6.0. The resource path and prefix have changed.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\n# config/routes/ux_live_component.yaml\nlive_component:\n-    resource: '@LiveComponentBundle/Resources/config/routing/live_component.xml'\n+    resource: '@LiveComponentBundle/config/routes.php'\n+    prefix: /_components\n```\n\n----------------------------------------\n\nTITLE: Custom Form Theme for Comment List Items\nDESCRIPTION: A form theme template that customizes the rendering of individual comment items in a collection, including custom styling for delete buttons.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/doc/index.rst#2025-04-14_snippet_82\n\nLANGUAGE: html+twig\nCODE:\n```\n{# templates/components/_form_theme_comment_list.html.twig #}\n{%- block _blog_post_form_comments_entry_row -%}\n    <li class=\"...\">\n        {{ form_row(form.content, { label: false }) }}\n        {{ form_row(button_delete, { label: 'X', attr: { class: 'btn btn-outline-danger' } }) }}\n    </li>\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Defining Props in PHP Class Component\nDESCRIPTION: This snippet shows how to define props for an Alert component using a PHP class with the AsTwigComponent attribute.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/cookbook/component_architecture.md#2025-04-14_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n#[AsTwigComponent]\nclass Alert\n{\n    public string $type;\n    public string $icon;\n    public string $message;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Notify via Composer\nDESCRIPTION: Command to install the Symfony UX Notify bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-notify\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations in Symfony\nDESCRIPTION: Command to execute all pending database migrations using the Symfony console. This sets up the database schema required by the application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsymfony console doctrine:migration:migrate\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests in Symfony UX\nDESCRIPTION: Command to execute the PHPUnit test suite for the Symfony UX project. This runs all automated tests to verify application functionality.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsymfony php bin/phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX-Svelte Package with Shell Commands\nDESCRIPTION: Shell commands for installing both the PHP and JavaScript components of Symfony UX-Svelte. This demonstrates how to ensure version matching between the PHP package and the npm package.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Svelte/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-svelte:2.23.0\nnpm add @symfony/ux-svelte@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Starting Test Server\nDESCRIPTION: Command to start a PHP development server for the test application on port 8000\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp -S localhost:8000 -t public\n```\n\n----------------------------------------\n\nTITLE: Basic Swup Integration in Twig Template\nDESCRIPTION: Basic implementation of Swup in a Twig template, showing how to initialize the Swup Stimulus controller with default configuration.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: html+twig\nCODE:\n```\n<html lang=\"en\">\n    <head>\n        <title>Swup</title>\n\n        {% block javascripts %}\n            {{ encore_entry_script_tags('app') }}\n        {% endblock %}\n    </head>\n    <body {{ stimulus_controller('symfony/ux-swup/swup') }}>\n        {# ... #}\n\n        <main id=\"swup\">\n            {# ... #}\n        </main>\n    </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Symfony UX Leaflet Map with Data Attributes in HTML\nDESCRIPTION: This HTML snippet shows how to set up a Symfony UX Leaflet map using data attributes. It configures the map with coordinates for Paris (48.8566, 2.3522), sets a zoom level of 12, and uses OpenStreetMap as the tile provider. The div has multiple data attributes to control map behavior and appearance.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Leaflet/tests/__snapshots__/LeafletRendererTest__testRenderMap with data set with custom attributes__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div\n  data-controller=\"my-custom-controller symfony--ux-leaflet-map--map\"\n  data-symfony--ux-leaflet-map--map-provider-options-value=\"{}\"\n  data-symfony--ux-leaflet-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-leaflet-map--map-zoom-value=\"12\"\n  data-symfony--ux-leaflet-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-leaflet-map--map-options-value=\"{&quot;tileLayer&quot;:{&quot;url&quot;:&quot;https:\\/\\/tile.openstreetmap.org\\/{z}\\/{x}\\/{y}.png&quot;,&quot;attribution&quot;:&quot;\\u00a9 &lt;a href=\\&quot;https:\\/\\/www.openstreetmap.org\\/copyright\\&quot;&gt;OpenStreetMap&lt;\\/a&gt;&quot;,&quot;options&quot;:[]},&quot;@provider&quot;:&quot;leaflet&quot;}\"\n  data-symfony--ux-leaflet-map--map-markers-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polygons-value=\"[]\"\n  data-symfony--ux-leaflet-map--map-polylines-value=\"[]\"\n  class=\"map\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Icons via Composer\nDESCRIPTION: Command to install the symfony/ux-icons package using Composer. This is the main package required for using SVG icons in your Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Icons/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-icons\n```\n\n----------------------------------------\n\nTITLE: Installing JavaScript Assets for Symfony UX Cropper.js\nDESCRIPTION: Commands to install and build JavaScript assets for Symfony UX Cropper.js when using WebpackEncore.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Running PHPUnit Tests\nDESCRIPTION: Command to execute the project's PHPUnit test suite\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp vendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Swup via Composer\nDESCRIPTION: Terminal commands to install the Symfony UX Swup bundle and its JavaScript dependencies using Composer and npm.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Swup/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-swup\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Integrating Google Maps with Symfony UX using HTML data attributes\nDESCRIPTION: This HTML snippet demonstrates how to implement a Google Map using Symfony UX controllers. It includes configuration for the map's initial position, zoom level, API key, and various display options. The implementation uses data attributes to pass configuration to the Symfony UX Google Map controller.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Map/src/Bridge/Google/tests/__snapshots__/GoogleRendererTest__testRenderMap with data set with custom attributes__1.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div\n  data-controller=\"my-custom-controller symfony--ux-google-map--map\"\n  data-symfony--ux-google-map--map-provider-options-value=\"{&quot;apiKey&quot;:&quot;api_key&quot;}\"\n  data-symfony--ux-google-map--map-center-value=\"{&quot;lat&quot;:48.8566,&quot;lng&quot;:2.3522}\"\n  data-symfony--ux-google-map--map-zoom-value=\"12\"\n  data-symfony--ux-google-map--map-fit-bounds-to-markers-value=\"false\"\n  data-symfony--ux-google-map--map-options-value=\"{&quot;mapId&quot;:null,&quot;gestureHandling&quot;:&quot;auto&quot;,&quot;backgroundColor&quot;:null,&quot;disableDoubleClickZoom&quot;:false,&quot;zoomControlOptions&quot;:{&quot;position&quot;:22},&quot;mapTypeControlOptions&quot;:{&quot;mapTypeIds&quot;:[],&quot;position&quot;:14,&quot;style&quot;:0},&quot;streetViewControlOptions&quot;:{&quot;position&quot;:22},&quot;fullscreenControlOptions&quot;:{&quot;position&quot;:20},&quot;@provider&quot;:&quot;google&quot;}\"\n  data-symfony--ux-google-map--map-markers-value=\"[]\"\n  data-symfony--ux-google-map--map-polygons-value=\"[]\"\n  data-symfony--ux-google-map--map-polylines-value=\"[]\"\n  class=\"map\"\n></div>\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX Typed Bundle via Composer\nDESCRIPTION: Command for installing the Symfony UX Typed bundle using Composer and Symfony Flex. This is the first step in integrating typed animations into a Symfony application.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Typed/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-typed\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog in Markdown\nDESCRIPTION: This snippet presents the entire changelog in Markdown format, detailing changes from version 2.13.2 down to 1.3. It includes information about Symfony version support, breaking changes, and dependency updates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Cropperjs/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Add Symfony 7 support.\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   Add support for symfony/asset-mapper\n\n-   Minimum required Symfony version is now 5.4\n\n## 2.7.0\n\n-   The JavaScript events now bubble up.\n\n-   Add `assets/src` to `.gitattributes` to exclude source TypeScript files from\n    installing.\n\n-   TypeScript types are now included.\n\n## 2.6.0\n\n-   [BC BREAK] The `assets/` directory was moved from `Resources/assets/` to `assets/`. Make\n    sure the path in your `package.json` file is updated accordingly.\n\n-   The directory structure of the bundle was updated to match modern best-practices.\n\n## 2.0\n\n-   Support for `stimulus` version 2 was removed and support for `@hotwired/stimulus`\n    version 3 was added. See the [@symfony/stimulus-bridge CHANGELOG](https://github.com/symfony/stimulus-bridge/blob/main/CHANGELOG.md#300)\n    for more details.\n-   The individual Cropper.js options in `CropperType` were moved under\n    a single `cropper_options` option.\n-   Support added for Symfony 6\n\n## 1.3\n\n-   [DEPENDENCY CHANGE] `cropperjs` is no longer included automatically (#93)\n    but `symfony/flex` will automatically add it to your `package.json` file\n    when upgrading. Additionally `symfony/flex` 1.13 or higher is now required\n    if installed.\n```\n\n----------------------------------------\n\nTITLE: Implementing OptionsAwareEntityAutocompleterInterface for Extra Options\nDESCRIPTION: Example showing how to modify a Food autocompleter to support extra options, particularly for excluding specific food items from the autocomplete results.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\nuse Doctrine\\ORM\\EntityRepository;\nuse Doctrine\\ORM\\QueryBuilder;\nuse Sylius\\Component\\Product\\Model\\ProductAttributeInterface;\nuse Symfony\\Bundle\\SecurityBundle\\Security;\nuse Symfony\\UX\\Autocomplete\\OptionsAwareEntityAutocompleterInterface;\n\n#[AutoconfigureTag('ux.entity_autocompleter', ['alias' => 'food'])]\nclass FoodAutocompleter implements OptionsAwareEntityAutocompleterInterface\n{\n+   /**\n+    * @var array<string, mixed>\n+    */\n+   private array $options = [];\n\n// ...\n\n+   public function createFilteredQueryBuilder(EntityRepository $repository, string $query): QueryBuilder\n+   {\n+       $excludedFoods = $this->options['extra_options']['excluded_foods'] ?? [];\n+\n+       $qb = $repository->createQueryBuilder('o');\n+\n+       if ($productAttributesToBeExcluded !== []) {\n+           $qb\n+               ->andWhere($qb->expr()->notIn('o.id', $excludedFoods));\n+               ->setParameter('excludedFoods', $excludedFoods)\n+           ;\n+       }\n+\n+       return $qb;\n+   }\n\n+   /**\n+   * @param array<string, mixed> $options\n+   */\n+   public function setOptions(array $options): void\n+   {\n+       $this->options = $options;\n+   }\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX TogglePassword Bundle via Composer\nDESCRIPTION: Command to install the TogglePassword bundle using Composer package manager.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/TogglePassword/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-toggle-password\n```\n\n----------------------------------------\n\nTITLE: Installing symfony/ux-live-component and @symfony/ux-live-component\nDESCRIPTION: Commands for installing both the PHP package symfony/ux-live-component and the npm package @symfony/ux-live-component. It's crucial to ensure that the versions of both packages match exactly.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/LiveComponent/assets/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require symfony/ux-live-component:2.23.0\nnpm add @symfony/ux-live-component@2.23.0\n```\n\n----------------------------------------\n\nTITLE: Installing StimulusBundle with Composer\nDESCRIPTION: Command to install the Symfony StimulusBundle via Composer, which is the first step to integrate Stimulus with Symfony.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/StimulusBundle/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ composer require symfony/stimulus-bundle\n```\n\n----------------------------------------\n\nTITLE: Starting the Symfony Local Web Server\nDESCRIPTION: Command to start Symfony's built-in web server in detached mode. This runs the application locally for development purposes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsymfony server:start -d\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony UX-Autocomplete via Composer\nDESCRIPTION: Command to install the Symfony UX-Autocomplete bundle using Composer and Symfony Flex.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Autocomplete/doc/index.rst#2025-04-14_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\n$ composer require symfony/ux-autocomplete\n```\n\n----------------------------------------\n\nTITLE: Changelog Entries in Markdown\nDESCRIPTION: Structured changelog entries documenting version changes from 2.24.0 down to 2.6.0, including breaking changes, feature additions, and structural updates.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Notify/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# CHANGELOG\n\n## 2.24.0\n\n-   Added `options` to Notification\n\n## 2.13.2\n\n-   Revert \"Change JavaScript package to `type: module`\"\n\n## 2.13.0\n\n-   Add Symfony 7 support.\n-   Change JavaScript package to `type: module`\n\n## 2.9.0\n\n-   Add support for symfony/asset-mapper\n\n-   Replace `symfony/webpack-encore-bundle` by `symfony/stimulus-bundle` in dependencies\n\n## 2.7.0\n\n-   Add `assets/src` to `.gitattributes` to exclude source TypeScript files from\n    installing.\n\n-   TypeScript types are now included.\n\n## 2.6.0\n\n-   [BC BREAK] The `assets/` directory was moved from `Resources/assets/` to `assets/`. Make\n    sure the path in your `package.json` file is updated accordingly.\n\n-   The directory structure of the bundle was updated to match modern best-practices.\n```\n\n----------------------------------------\n\nTITLE: Populating Database with Initial Data\nDESCRIPTION: Command to execute a custom Symfony console command that loads initial data into the database. This populates the application with necessary seed data.\nSOURCE: https://github.com/symfony/ux/blob/2.x/ux.symfony.com/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsymfony console app:load-data\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Symfony UX Turbo\nDESCRIPTION: This command runs the PHPUnit tests for Symfony UX Turbo. It should be executed from the src/Turbo directory after setting up the test environment.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Turbo/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/simple-phpunit\n```\n\n----------------------------------------\n\nTITLE: Verifying Documentation Changes\nDESCRIPTION: Docker command to validate RST documentation changes using the doctor-rst tool.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -e DOCS_DIR='/docs' -v ${PWD}:/docs  oskarstark/doctor-rst -vvv\n```\n\n----------------------------------------\n\nTITLE: Installing and running npm assets for Symfony UX Dropzone\nDESCRIPTION: Commands to install JavaScript assets and restart Encore for WebpackEncore users.\nSOURCE: https://github.com/symfony/ux/blob/2.x/src/Dropzone/doc/index.rst#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install --force\n$ npm run watch\n```\n\n----------------------------------------\n\nTITLE: Linking Symfony UX Packages to a Project\nDESCRIPTION: Command to link your local Symfony UX development packages to an existing project for testing purposes.\nSOURCE: https://github.com/symfony/ux/blob/2.x/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ php link /path/to/your/project\n```"
  }
]