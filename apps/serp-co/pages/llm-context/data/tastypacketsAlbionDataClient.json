[
  {
    "owner": "tastypackets",
    "repo": "albion-data-client",
    "content": "TITLE: Installing the @albion-data/client Library via Yarn\nDESCRIPTION: Command to add the `@albion-data/client` package dependency to a project using the Yarn package manager. This is the first step required to use the library in a JavaScript or TypeScript project.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn add @albion-data/client\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Yarn (Shell)\nDESCRIPTION: Executes the 'start' script using yarn, launching the React application in development mode. This typically enables features like hot reloading and displays lint errors in the console, making the app accessible at http://localhost:3000.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/example-app/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Building Production App with Yarn (Shell)\nDESCRIPTION: Executes the 'build' script using yarn to create a production-ready build of the React application. This process bundles React in production mode, optimizes the code for performance, minifies it, and places the output with hashed filenames in the 'build' directory, ready for deployment.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/example-app/README.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Yarn (Shell)\nDESCRIPTION: Executes the 'test' script using yarn, which launches the test runner associated with the Create React App project, usually Jest, in an interactive watch mode. This allows developers to run and monitor tests during development.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/example-app/README.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Basic Usage Example for getChartData in JavaScript\nDESCRIPTION: Imports the `getChartData` function from the `@albion-data/client` library and demonstrates a simple asynchronous call to fetch chart data for a single item ('T5_BAG'). The result is logged to the console using promise `.then()` and potential errors are caught and logged using `.catch()`.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { getChartData } from \"@albion-data/client\";\n\ngetChartData({\n  itemList: \"T5_BAG\",\n})\n  .then((data) => console.log(data))\n  .catch((err) => console.error(err));\n```\n\n----------------------------------------\n\nTITLE: Using Exported Types and Constants in JavaScript\nDESCRIPTION: Illustrates accessing useful data constants and TypeScript types exported by the `@albion-data/client` library (re-exported from `@albion-data/types`). Examples show how to use `QUALITIES_ENUM` and `ENCHANTMENTS_ENUM` to map between numeric values and string representations (or vice-versa), mentions the availability of `cityList` and `marketList` arrays, and demonstrates importing the comprehensive `TItemID` type for type safety.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// QUALITIES_ENUM - Maps all enum quality numbers to string values\nQUALITIES_ENUM[1]; // Normal\nQUALITIES_ENUM[2]; // Good\n\n// or generate the number used for the API call\nQUALITIES_ENUM.Outstanding; // 3\n\n// ENCHANTMENTS_ENUM - Maps enchantments to numbers, useful for parsing the API resaponse\nENCHANTMENTS_ENUM[0]; // Normal\nENCHANTMENTS_ENUM.Exceptional; // 3\n\n// cityList - An array of all cities in the game\n// marketList - An array of all markets in the game (cities + Black Market right now)\n\n// TItemID - ALL item IDs in the game mapped to 1 TypeScript type.\n\n// Example:\n\nimprot { TItemID } from \"@albion-data/client\"\n```\n\n----------------------------------------\n\nTITLE: Configuring getPriceData Request Options in JavaScript\nDESCRIPTION: Demonstrates fetching item price data from the `Price/` API using `getPriceData`. This function requires the `itemList` parameter (string or array of strings) and accepts optional `locations` (string or array) and `qualities` (number or array) parameters. Comments note the return type `Promise<TPrice>` and the `getPriceRaw` alternative.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// getPriceRaw - Axios Promis\n// getPriceData - Promise<TPrice>\n\ngetPriceData({\n  itemList: [\"T5_BAG\", \"T6_BAG\"], // Array of strings or string - required\n  locations: [\"Fort Sterling\", \"Thetford\"], // Array of string or string\n  qualities: 2, // Array of numbers or number\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring getChartData Request Options in JavaScript\nDESCRIPTION: Illustrates calling the `getChartData` function with various parameters to customize the API request. It requires `itemList` (string or array of strings) and accepts optional `startDate`, `endDate`, `locations` (string or array), `qualities` (number or array), and `timeScale` (number 1-6). Comments indicate that `getChartData` returns a `Promise<TChart>` containing processed data, while `getChartRaw` returns the raw Axios promise.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// getChartRaw - Axios Promis\n// getChartData - Promise<TChart>\n\ngetChartData({\n  itemList: \"T5_BAG\", // Array of strings or string - required\n  startDate: new Date(), // Date or date string\n  endDate: new Date(), // Date or date string\n  locations: \"Fort Sterling\", // Array of string or string\n  qualities: [1,2] // Array of numbers or number\n  timeScale: 1 // number 1 - 6\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring getGoldData Request Options in JavaScript\nDESCRIPTION: Shows how to use the `getGoldData` function to fetch gold price history from the `Gold/` API. While no fields are strictly required, optional parameters like `startDate`, `endDate` (Date objects or date strings), and `count` (number, suggested to limit results) can be provided. Comments specify the return type `Promise<TGold>` for `getGoldData` and mention the alternative `getGoldRaw` method.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// getGoldRaw - Axios Promis\n// getGoldData - Promise<TGold>\n\n// No Required fields, but count to limit total results is suggested\ngetGoldData({\n  startDate: new Date(), // Date or date string\n  endDate: new Date(), // Date or date string\n  count: 10, // number\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Albion Online Icon URLs in JavaScript\nDESCRIPTION: Provides examples for generating icon URLs using the Albion Render API via helper functions. `getItemIconUrl` takes an `identifier` (string), optional `quality` (number, see QUALITIES_ENUM), and optional `size` (number in pixels for width/height). `getSpellIconUrl` and `getDestinyBoardIconUrl` take an `identifier` string. An example output URL for `getItemIconUrl` is shown.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ngetItemIconUrl({\n  identifier: \"T4_OFF_SHIELD\", // String indentifier of item, like\n  quality: 2, // Number repersenting the quality of the item (see QUALITIES_ENUM)\n  size: 50, // Sets width and height in px\n});\n\n// Return: https://render.albiononline.com/v1/item/T4_OFF_SHIELD.png\n\ngetSpellIconUrl({\n  identifier: \"HASTE\",\n});\ngetDestinyBoardIconUrl({\n  identifier: \"ADVENTURER_ADEPT\",\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Localized Item Information in JavaScript\nDESCRIPTION: Explains how to retrieve the localized name and description for an item using the `getItemLocale` function. It requires the item's string `identifier` and accepts an optional `locale` string (defaulting to 'en-US'). An example response object containing the item's `id`, `name`, and `description` is provided.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/client/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ngetItemLocale({\n  identifier: \"T4_OFF_SHIELD\", // String indentifier of item, like\n  locale: \"en-US\", // Optional, defaults to en-US\n});\n\n// Example response\n{\n  \"id\":\"T4_OFF_SHIELD\",\n  \"name\":\"Adept's Shield\",\n  \"description\":\"Equipment Item\"\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Configuration with Yarn (Shell)\nDESCRIPTION: Executes the 'eject' script using yarn, a permanent, one-way operation that removes the single build dependency managed by Create React App. It copies all configuration files (like Webpack, Babel, ESLint) and transitive dependencies into the project, granting full control over the build process but requiring manual management.\nSOURCE: https://github.com/tastypackets/albion-data-client/blob/main/packages/example-app/README.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn eject\n```"
  }
]