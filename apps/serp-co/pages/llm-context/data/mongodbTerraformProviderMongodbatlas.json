[
  {
    "owner": "mongodb",
    "repo": "terraform-provider-mongodbatlas",
    "content": "TITLE: Enable Private Endpoint Regional Mode in MongoDB Atlas with Terraform\nDESCRIPTION: This Terraform resource enables the regionalized private endpoint setting for a MongoDB Atlas project. Enabling this mode is necessary to create multiple private endpoints within a cloud provider region, which is required for connecting to multi-region and global Atlas sharded clusters. The `project_id` is required and corresponds to the Atlas project ID. Setting `enabled` to `true` activates the regional mode.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/private_endpoint_regional_mode.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_private_endpoint_regional_mode\" \"test\" {\n  project_id = var.atlasprojectid\n  enabled    = true\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with AWS KMS\nDESCRIPTION: This Terraform configuration sets up encryption at rest using AWS Key Management Service (KMS) for a MongoDB Atlas project. It configures cloud provider access, authorization, and the encryption settings, and then creates an advanced cluster with encryption enabled. An implicit dependency using `project_id` enforces correct resource creation order. It also retrieves encryption at rest data and outputs the validation status.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n  project_id    = var.atlas_project_id\n  provider_name = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n  project_id = var.atlas_project_id\n  role_id    = mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n  aws {\n    iam_assumed_role_arn = aws_iam_role.test_role.arn\n  }\n}\n\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  aws_kms_config {\n    enabled                = true\n    customer_master_key_id = aws_kms_key.kms_key.id\n    region                 = var.atlas_region\n    role_id                = mongodbatlas_cloud_provider_access_authorization.auth_role.role_id\n  }\n\n  enabled_for_search_nodes = true\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id                  = mongodbatlas_encryption_at_rest.test.project_id\n  name                        = \"MyCluster\"\n  cluster_type                = \"REPLICASET\"\n  backup_enabled              = true\n  encryption_at_rest_provider = \"AWS\"\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"US_EAST_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\ndata \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = mongodbatlas_encryption_at_rest.test.project_id\n}\n\noutput \"is_aws_kms_encryption_at_rest_valid\" {\n  value = data.mongodbatlas_encryption_at_rest.test.aws_kms_config.valid\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Cloud Sharded Cluster Terraform\nDESCRIPTION: Defines a multi-cloud sharded MongoDB Atlas advanced cluster spanning AWS (US_EAST_1) and Azure (US_EAST_2), with two shards. Includes settings for backup, JavaScript support, oplog size, and BI connector refresh interval.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id   = mongodbatlas_project.project.id\n  name         = var.cluster_name\n  cluster_type = \"SHARDED\"\n  backup_enabled = true\n\n  replication_specs {   # shard 1\n    region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n\n     region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"US_EAST_2\"\n    }\n\t}\n\n  replication_specs {   # shard 2\n    region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n\n    region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"US_EAST_2\"\n    }\n\t}\n\n  advanced_configuration {\n    javascript_enabled                   = true\n    oplog_size_mb                        = 991\n    sample_refresh_interval_bi_connector = 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Atlas Backup Compliance Policy - Terraform\nDESCRIPTION: This snippet demonstrates how to create a MongoDB Atlas Backup Compliance Policy using Terraform. It includes settings for project ID, authorized user details (email, first name, last name), copy protection, point-in-time recovery enabling, encryption at rest enabling, restore window days, and various policy items like on-demand, hourly, daily, weekly, monthly, and yearly backup policies.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_backup_compliance_policy\" \"backup_policy\" {\n  project_id                 = \"<PROJECT-ID>\"\n  authorized_email           = \"user@email.com\"\n  authorized_user_first_name = \"First\"\n  authorized_user_last_name  = \"Last\"\n  copy_protection_enabled    = false\n  pit_enabled                = false\n  encryption_at_rest_enabled = false\n\n  restore_window_days = 7\n\n  on_demand_policy_item {\n\t\t  frequency_interval = 1\n\t\t  retention_unit     = \"days\"\n\t\t  retention_value    = 3\n\t\t}\n\t\t\n\t\tpolicy_item_hourly {\n\t\t\tfrequency_interval = 1\n\t\t\tretention_unit     = \"days\"\n\t\t\tretention_value    = 7\n\t\t  }\n\t  \n\t\tpolicy_item_daily {\n\t\t\tfrequency_interval = 1\n\t\t\tretention_unit     = \"days\"\n\t\t\tretention_value    = 7\n\t\t  }\n\t  \n\t\t  policy_item_weekly {\n\t\t\tfrequency_interval = 1\n\t\t\tretention_unit     = \"weeks\"\n\t\t\tretention_value    = 4\n\t\t  }\n\t  \n\t\t  policy_item_monthly {\n\t\t\tfrequency_interval = 1\n\t\t\tretention_unit     = \"months\"\n\t\t\tretention_value    = 12\n\t\t  }\n\n\t          policy_item_yearly {\n\t            frequency_interval = 1\n\t            retention_unit     = \"years\"\n\t            retention_value    = 1\n\t          }\n      \n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Scaling Per Shard in MongoDB Atlas with Terraform\nDESCRIPTION: This example shows how to enable compute auto-scaling for each shard independently in a sharded MongoDB Atlas cluster using Terraform. It configures auto-scaling for both electable and analytics nodes, specifying the maximum instance size for each. It also shows how to ignore changes for scaling attributes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = var.project_id\n  name         = \"AutoScalingCluster\"\n  cluster_type = \"SHARDED\"\n  replication_specs { # first shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M40\"\n        node_count    = 3\n      }\n      analytics_specs {\n        instance_size = \"M40\"\n        node_count = 1\n      }\n      auto_scaling {\n        compute_enabled = true\n        compute_max_instance_size = \"M60\"\n      }\n      analytics_auto_scaling {\n        compute_enabled = true\n        compute_max_instance_size = \"M60\"\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n    zone_name = \"Zone 1\"\n  }\n  replication_specs { # second shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M40\"\n        node_count    = 3\n      }\n      analytics_specs {\n        instance_size = \"M40\"\n        node_count = 1\n      }\n      auto_scaling {\n        compute_enabled = true\n        compute_max_instance_size = \"M60\"\n      }\n      analytics_auto_scaling {\n        compute_enabled = true\n        compute_max_instance_size = \"M60\"\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n    zone_name = \"Zone 1\"\n  }\n  lifecycle { # avoids future non-empty plans as instance size start to scale from initial values\n    ignore_changes = [\n      replication_specs[0].region_configs[0].electable_specs[0].instance_size,\n      replication_specs[0].region_configs[0].analytics_specs[0].instance_size,\n      replication_specs[1].region_configs[0].electable_specs[0].instance_size,\n      replication_specs[1].region_configs[0].analytics_specs[0].instance_size\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Cloud Cluster Terraform\nDESCRIPTION: Defines a multi-cloud MongoDB Atlas advanced cluster spanning AWS (US_EAST_1) and GCP (NORTH_AMERICA_NORTHEAST_1). The cluster is configured as a replica set with electable and analytics nodes in the AWS region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n      analytics_specs {\n        instance_size = \"M10\"\n        node_count    = 1\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 2\n      }\n      provider_name = \"GCP\"\n      priority      = 6\n      region_name   = \"NORTH_AMERICA_NORTHEAST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DB Roles with Inherited Roles in MongoDB Atlas with Terraform\nDESCRIPTION: This example demonstrates how to create custom DB roles that inherit permissions from other roles.  It creates three roles: 'insertRole', 'statusServerRole', and 'myCustomRole'. 'myCustomRole' inherits permissions from both 'insertRole' and 'statusServerRole'. The roles 'insertRole' and 'statusServerRole' must be defined before they can be inherited.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/custom_db_role.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_custom_db_role\" \"inherited_role_one\" {\n  project_id = \"<PROJECT-ID>\"\n  role_name  = \"insertRole\"\n\n  actions {\n    action = \"INSERT\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n}\n\nresource \"mongodbatlas_custom_db_role\" \"inherited_role_two\" {\n  project_id = mongodbatlas_custom_db_role.inherited_role_one.project_id\n  role_name  = \"statusServerRole\"\n\n  actions {\n    action = \"SERVER_STATUS\"\n    resources {\n      cluster = true\n    }\n  }\n}\n\nresource \"mongodbatlas_custom_db_role\" \"test_role\" {\n  project_id = mongodbatlas_custom_db_role.inherited_role_one.project_id\n  role_name  = \"myCustomRole\"\n\n  actions {\n    action = \"UPDATE\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n  actions {\n    action = \"REMOVE\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n\n  inherited_roles {\n    role_name     = mongodbatlas_custom_db_role.inherited_role_one.role_name\n    database_name = \"admin\"\n  }\n\n  inherited_roles {\n    role_name     = mongodbatlas_custom_db_role.inherited_role_two.role_name\n    database_name = \"admin\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Single Provider, Single Region Cluster Terraform\nDESCRIPTION: Defines a MongoDB Atlas advanced cluster with a single provider (AWS) and a single region (US_EAST_1). The cluster is configured as a replica set with electable and analytics nodes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n      analytics_specs {\n        instance_size = \"M10\"\n        node_count    = 1\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Advanced Cluster and Cloud Backup Schedule Terraform\nDESCRIPTION: This Terraform configuration sets up an advanced MongoDB Atlas cluster with cloud backup enabled and defines a cloud backup schedule. It specifies the cluster type, replication specifications, reference hour and minute, restore window days, and policy items for hourly, daily, weekly, monthly, and yearly backups. The cluster is configured with backup enabled, and retention policies are set for different backup frequencies.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/backup_compliance_policy.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n  \n  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource\n  policy_item_hourly {\n    frequency_interval = 1        #accepted values = 1, 2, 4, 6, 8, 12 -> every n hours\n    retention_unit     = \"days\"\n    retention_value    = 1\n  }\n  policy_item_daily {\n    frequency_interval = 1        #accepted values = 1 -> every 1 day\n    retention_unit     = \"days\"\n    retention_value    = 2\n  }\n  policy_item_weekly {\n    frequency_interval = 4        # accepted values = 1 to 7 -> every 1=Monday,2=Tuesday,3=Wednesday,4=Thursday,5=Friday,6=Saturday,7=Sunday day of the week\n    retention_unit     = \"weeks\"\n    retention_value    = 3\n  }\n  policy_item_monthly {\n    frequency_interval = 5        # accepted values = 1 to 28 -> 1 to 28 every nth day of the month  \n                                  # accepted values = 40 -> every last day of the month\n    retention_unit     = \"months\"\n    retention_value    = 4\n  }\n  policy_item_yearly {\n    frequency_interval = 1        # accepted values = 1 to 12 -> 1st day of nth month  \n    retention_unit     = \"years\"\n    retention_value    = 1\n  }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: REPLICASET Transition to SHARDED (Single Shard)\nDESCRIPTION: This configuration shows the first step in transitioning a REPLICASET to a sharded cluster. The `cluster_type` is changed to `SHARDED` while maintaining a single `replication_specs` block. This effectively converts the replica set into a single-shard sharded cluster. After this change is applied, the application clients must be restarted before adding additional shards.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n    project_id   = var.project_id\n    name         = \"ReplicaSetTransition\"\n    cluster_type = \"SHARDED\"\n\n    replication_specs {\n        region_configs {\n            electable_specs {\n                instance_size = \"M30\"\n                node_count    = 3\n            }\n            provider_name = \"AZURE\"\n            priority      = 7\n            region_name   = \"US_EAST\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Private Endpoint Connection String\nDESCRIPTION: This Terraform configuration filters private endpoint connection strings based on the `endpoint_service_id`. It retrieves the private endpoints, flattens the list, and then filters based on whether the endpoint ID contains the local `endpoint_service_id`. Finally, it outputs the filtered connection string, if found.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_13\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  endpoint_service_id = google_compute_network.default.name\n  private_endpoints   = try(flatten([for cs in data.mongodbatlas_advanced_cluster.cluster[0].connection_strings : cs.private_endpoint]), [])\n  connection_strings = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], local.endpoint_service_id)\n  ]\n}\noutput \"endpoint_service_connection_string\" {\n  value = length(local.connection_strings) > 0 ? local.connection_strings[0] : \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with GCP KMS\nDESCRIPTION: This Terraform configuration sets up encryption at rest using Google Cloud KMS for a MongoDB Atlas project. It defines the necessary Google Cloud KMS configuration parameters, including a service account key and the key version resource ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  google_cloud_kms_config {\n    enabled                 = true\n    service_account_key     = \"{\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"my-project-common-0\\\",\\\"private_key_id\\\": \\\"e120598ea4f88249469fcdd75a9a785c1bb3\\\",\\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\nMIIEuwIBA(truncated)SfecnS0mT94D9\\n-----END PRIVATE KEY-----\\n\\\",\\\"client_email\\\": \\\"my-email-kms-0@my-project-common-0.iam.gserviceaccount.com\\\",\\\"client_id\\\": \\\"10180967717292066\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/my-email-kms-0%40my-project-common-0.iam.gserviceaccount.com\\\"}\"\n    key_version_resource_id = \"projects/my-project-common-0/locations/us-east4/keyRings/my-key-ring-0/cryptoKeys/my-key-0/cryptoKeyVersions/1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Private Connection String\nDESCRIPTION: This output retrieves the private connection string of the MongoDB Atlas cluster with Network Peering and Custom DNS enabled. This is useful for connections within a private network using peered VPCs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private\" {\n    value = mongodbatlas_cluster.cluster-test.connection_strings[0].private\n}\n```\n\n----------------------------------------\n\nTITLE: Export Snapshot to S3 Bucket - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to export a MongoDB Atlas cloud backup snapshot to an AWS S3 bucket. It requires the project_id, iam_role_id, bucket_name, cluster_name, snapshot_id, and export_bucket_id. It also shows how to add custom data to the metadata file.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_export_job.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id = \"{PROJECT_ID}\"\n  iam_role_id    = \"{IAM_ROLE_ID}\"\n  bucket_name    = \"example_bucket\"\n  cloud_provider = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_export_job\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n  snapshot_id = \"{SNAPSHOT_ID}\"\n  export_bucket_id = mongodbatlas_cloud_backup_snapshot_export_bucket.test.export_bucket_id\n  \n  custom_data {\n    key   = \"exported by\"\n    value = \"myName\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Analyzer Configuration Example\nDESCRIPTION: Example showing how to define custom analyzers within the Terraform resource for MongoDB Atlas Search Index.  It demonstrates defining character filters, tokenizers and token filters.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nanalyzers = <<-EOF\n  [{\n  \"name\": \"index_analyzer_test_name\",\n  \"charFilters\": [{\n\t\"type\": \"mapping\",\n\t\"mappings\": {\"\\\\\" : \"/\"}\n    \t}],\n  \"tokenizer\": {\n  \"type\": \"nGram\",\n  \"minGram\": 2,\n  \"maxGram\": 5\n\t\t},\n  \"tokenFilters\": [{\n\t\"type\": \"length\",\n\t\"min\": 20,\n\t\"max\": 33\n    \t}]\n  }]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Create Single-Region Advanced Cluster - Terraform\nDESCRIPTION: This example demonstrates how to create a single-region MongoDB Atlas advanced cluster using the mongodbatlas_advanced_cluster resource. It defines the project ID, cluster name, cluster type, and replication specifications, including the region configuration for AWS US_EAST_1 with electable and analytics nodes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M10\"\n            node_count    = 3\n          }\n          analytics_specs = {\n            instance_size = \"M10\"\n            node_count    = 1\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Advanced Search Index with Terraform\nDESCRIPTION: This Terraform resource block creates an advanced search index with custom analyzers and field mappings. It includes settings for dynamic mappings, custom analyzers, synonyms, and defines how different fields should be indexed and analyzed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_search_index\" \"test-advanced-search-index\" {\n  project_id = \"<PROJECT_ID>\"\n  cluster_name = \"<CLUSTER_NAME>\"\n  analyzer = \"lucene.standard\"\n  collection_name = \"collection_test\"\n  database = \"database_test\"\n  mappings_dynamic = false\n  mappings_fields = <<-EOF\n{\n      \"address\": {\n        \"type\": \"document\",\n        \"fields\": {\n          \"city\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.simple\",\n            \"ignoreAbove\": 255\n          },\n          \"state\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.english\"\n          }\n        }\n      },\n      \"company\": {\n        \"type\": \"string\",\n        \"analyzer\": \"lucene.whitespace\",\n        \"multi\": {\n          \"mySecondaryAnalyzer\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.french\"\n          }\n        }\n      },\n      \"employees\": {\n        \"type\": \"string\",\n        \"analyzer\": \"lucene.standard\"\n      }\n}\nEOF\n  name = \"test-advanced-search-index\"\n  search_analyzer = \"lucene.standard\"\n  analyzers = <<-EOF\n  [{\n  \"name\": \"index_analyzer_test_name\",\n  \"charFilters\": [{\n\t\"type\": \"mapping\",\n\t\"mappings\": {\"\\\\\" : \"/\"}\n    \t}],\n  \"tokenizer\": {\n  \"type\": \"nGram\",\n  \"minGram\": 2,\n  \"maxGram\": 5\n\t\t},\n  \"tokenFilters\": [{\n\t\"type\": \"length\",\n\t\"min\": 20,\n\t\"max\": 33\n    \t}]\n  }]\nEOF\n  synonyms {\n    analyzer = \"lucene.simple\"\n    name = \"synonym_test\"\n    source_collection = \"collection_test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Serverless PrivateLink Endpoint\nDESCRIPTION: This shows how to import an existing `mongodbatlas_privatelink_endpoint_serverless` resource into Terraform.  The command uses the project ID and endpoint ID, separated by `--`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_serverless.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint_serverless.test 1112222b3bf99403840e8934--serverless_name--vpce-jjg5e24qp93513h03\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Policy for IP Access List in Terraform\nDESCRIPTION: This Terraform code defines a resource policy to forbid access from any IP address (0.0.0.0/0) for project IP access list modifications. It uses the `mongodbatlas_resource_policy` resource and requires the `org_id`, `name`, and `policies` attributes to be defined. The `policies` attribute includes a `body` containing the Cedar policy.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id      = var.org_id\n  name        = \"forbid-access-from-anywhere\"\n  description = \"Forbids access from anywhere\"\n\n  policies = [\n    {\n      body = <<EOF\n        forbid (\n                principal,\n                action == ResourcePolicy::Action::\"project.ipAccessList.modify\",\n                resource\n        )\n                when {\n                context.project.ipAccessList.contains(ip(\"0.0.0.0/0\"))\n        };\nEOF\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database User with AWS IAM Authentication in Terraform\nDESCRIPTION: This snippet demonstrates creating a MongoDB Atlas database user using AWS IAM authentication. It configures the `aws_iam_type` to `ROLE`, sets the `auth_database_name` to `$external`, and uses an AWS IAM role ARN as the username. It also shows how to set roles, labels, and scopes for the user.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = aws_iam_role.test.arn\n  project_id         = \"<PROJECT-ID>\"\n  auth_database_name = \"$external\"\n  aws_iam_type       = \"ROLE\"\n\n  roles {\n    role_name     = \"readAnyDatabase\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"%s\"\n    value = \"%s\"\n  }\n\n  scopes {\n    name   = \"My cluster name\"\n    type = \"CLUSTER\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Basic Vector Index with Terraform\nDESCRIPTION: This Terraform resource block creates a basic vector index in MongoDB Atlas, enabling vector similarity searches. It requires a project ID, cluster name, database name, collection name, and vector field definitions including dimensions and similarity metric.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_search_index\" \"test-basic-search-vector\" {\n  project_id = \"<PROJECT_ID>\"\n  cluster_name = \"<CLUSTER_NAME>\"\n  collection_name = \"collection_test\"\n  database = \"database_test\"\n  type = \"vectorSearch\"\n  fields = <<-EOF\n[{\n      \"type\": \"vector\",\n      \"path\": \"plot_embedding\",\n      \"numDimensions\": 1536,\n      \"similarity\": \"euclidean\"\n}]\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Create Backup and Automatic Snapshot Export Policies - Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas cloud backup schedule with automatic snapshot export policies. It includes configuring the export bucket, backup schedule with auto_export_enabled set to true, and defining the frequency and retention policies (hourly, daily, weekly, monthly).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_export_job.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"export\" {\n  project_id   = \"{PROJECT_ID}\"\n  iam_role_id = \"{IAM_ROLE_ID}\"\n  bucket_name = \"example_bucket\"\n  cloud_provider = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"backup\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n  auto_export_enabled = true\n  export {\n    export_bucket_id = mongodbatlas_cloud_backup_snapshot_export_bucket.export.export_bucket_id\n    frequency_type = \"weekly\"\n  }\n  use_org_and_group_names_in_export_prefix = true\n\n  reference_hour_of_day    = 7\n  reference_minute_of_hour = 00\n  restore_window_days      = 5\n\n  policy_item_hourly {\n    frequency_interval = 6        #accepted values = 1, 2, 4, 6, 8, 12 -> every n hours\n    retention_unit     = \"days\"\n    retention_value    = 7\n  }\n  policy_item_daily {\n    frequency_interval = 1        #accepted values = 1 -> every 1 day\n    retention_unit     = \"days\"\n    retention_value    = 7\n  }\n  policy_item_weekly {\n    frequency_interval = 6        # accepted values = 1 to 7 -> every 1=Monday,2=Tuesday,3=Wednesday,4=Thursday,5=Friday,6=Saturday,7=Sunday day of the week\n    retention_unit     = \"weeks\"\n    retention_value    = 4\n  }\n  policy_item_monthly {\n    frequency_interval = 28        # accepted values = 1 to 28 -> 1 to 28 every nth day of the month  \n                                  # accepted values = 40 -> every last day of the month\n    retention_unit     = \"months\"\n    retention_value    = 12\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create AWS Global Cluster with Private Endpoints\nDESCRIPTION: This Terraform configuration defines a MongoDB Atlas global sharded cluster across multiple AWS regions using private endpoints. It includes resources for configuring private endpoint regional mode, the Atlas cluster, private link endpoints, private link endpoint services, and AWS VPC endpoints.  Note the dependencies between resources, ensuring the private endpoint regional mode and endpoint services are created before the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/private_endpoint_regional_mode.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"cluster_atlas\" {\n  project_id     = var.atlasprojectid\n  name           = var.cluster_name\n  cluster_type   = \"GEOSHARDED\"\n  backup_enabled = true\n\n  replication_specs { # Shard 1\n    zone_name = \"Zone 1\"\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = var.atlas_region_east\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AWS\"\n      priority      = 6\n      region_name   = var.atlas_region_west\n    }\n  }\n\n  replication_specs { # Shard 2\n    zone_name = \"Zone 1\"\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = var.atlas_region_east\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AWS\"\n      priority      = 6\n      region_name   = var.atlas_region_west\n    }\n  }\n\n  depends_on = [\n    mongodbatlas_privatelink_endpoint_service.test_west,\n    mongodbatlas_privatelink_endpoint_service.test_east,\n    mongodbatlas_private_endpoint_regional_mode.test\n  ]\n}\n\nresource \"mongodbatlas_privatelink_endpoint\" \"test_west\" {\n  project_id    = var.atlasprojectid\n  provider_name = \"AWS\"\n  region        = \"US_WEST_1\"\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test_west\" {\n  project_id          = mongodbatlas_privatelink_endpoint.test_west.project_id\n  private_link_id     = mongodbatlas_privatelink_endpoint.test_west.private_link_id\n  endpoint_service_id = aws_vpc_endpoint.test_west.id\n  provider_name       = \"AWS\"\n}\n\nresource \"aws_vpc_endpoint\" \"test_west\" {\n  provider           = aws.west\n  vpc_id             = \"vpc-7fc0a543\"\n  service_name       = mongodbatlas_privatelink_endpoint.test_west.endpoint_service_name\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-de0406d2\"]\n  security_group_ids = [\"sg-3f238186\"]\n}\n\nresource \"mongodbatlas_privatelink_endpoint\" \"test_east\" {\n  project_id    = \"var.atlasprojectid\n  provider_name = \"AWS\"\n  region        = \"US_EAST_1\"\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test_east\" {\n  project_id          = mongodbatlas_privatelink_endpoint.test_east.project_id\n  private_link_id     = mongodbatlas_privatelink_endpoint.test_east.private_link_id\n  endpoint_service_id = aws_vpc_endpoint.test_east.id\n  provider_name       = \"AWS\"\n}\n\nresource \"aws_vpc_endpoint\" \"test_east\" {\n  provider           = aws.east\n  vpc_id             = \"vpc-345a0cf7\"\n  service_name       = mongodbatlas_privatelink_endpoint.test_east.endpoint_service_name\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-2d6040ed\"]\n  security_group_ids = [\"sg-681832f3\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables - Bash\nDESCRIPTION: These commands set the AWS access key ID and secret access key as environment variables.  These variables are required for the Terraform provider to authenticate with AWS and create the necessary resources for encryption at rest using KMS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Create Kafka SSL Stream Connection - Terraform\nDESCRIPTION: This snippet demonstrates creating a Kafka Stream Connection using SSL for secure communication. It includes authentication details, security configuration with a broker public certificate, Kafka config parameters, and bootstrap server list. The project ID, instance name, and connection name are also required. The authentication password and broker public certificate will be stored in the raw state as plaintext.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"test\" {\n    project_id = var.project_id\n    instance_name = \"NewInstance\"\n    connection_name = \"KafkaConnection\"\n    type = \"Kafka\"\n    authentication = {\n        mechanism = \"PLAIN\"\n        username = \"user\"\n        password = \"somepassword\"\n    }\n    security = {\n        protocol = \"SSL\"\n        broker_public_certificate = \"-----BEGIN CERTIFICATE-----<CONTENT>-----END CERTIFICATE-----\"\n    }\n    config = {\n        \"auto.offset.reset\": \"latest\"\n    }\n    bootstrap_servers = \"localhost:9091,localhost:9092\"\n}\n```\n\n----------------------------------------\n\nTITLE: Move Resource Block - Terraform\nDESCRIPTION: This code snippet utilizes the `moved` block in Terraform to migrate the state of a `mongodbatlas_cluster` resource to a `mongodbatlas_advanced_cluster` resource. This facilitates the transition from the old resource type to the new one without causing data loss or resource recreation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nmoved {\n  from = mongodbatlas_cluster.this\n  to   = mongodbatlas_advanced_cluster.this\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Instance Creation - Terraform\nDESCRIPTION: Creates a MongoDB Atlas Stream Instance, defining the project ID, instance name, and data processing region. The data_process_region block specifies the cloud provider and region for processing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_instance\" \"example\" {\n  project_id    = var.project_id\n  instance_name = \"InstanceName\"\n  data_process_region = {\n    region         = \"VIRGINIA_USA\"\n    cloud_provider = \"AWS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing AWS Cloud Provider Access in Terraform\nDESCRIPTION: This Terraform code demonstrates how to authorize an AWS IAM role in MongoDB Atlas using the `mongodbatlas_cloud_provider_access_authorization` resource. It depends on the `mongodbatlas_cloud_provider_access_setup` resource to obtain the `project_id` and `role_id`. The `iam_assumed_role_arn` within the `aws` block specifies the ARN of the IAM role that Atlas assumes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_access.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AWS\"\n}\n\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n   project_id =  mongodbatlas_cloud_provider_access_setup.setup_only.project_id\n   role_id    =  mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n   aws {\n      iam_assumed_role_arn = \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/test-user-role\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Private Endpoint Service with AWS\nDESCRIPTION: This example demonstrates how to create a private endpoint service using AWS.\nIt defines a MongoDB Atlas private endpoint, an AWS VPC endpoint, and then links them together using the `mongodbatlas_privatelink_endpoint_service` resource.\nRequires appropriate AWS VPC and Subnet configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = \"<PROJECT_ID>\"\n  provider_name = \"AWS\"\n  region        = \"US_EAST_1\"\n}\n\nresource \"aws_vpc_endpoint\" \"ptfe_service\" {\n  vpc_id             = \"vpc-7fc0a543\"\n  service_name       = mongodbatlas_privatelink_endpoint.test.endpoint_service_name\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-de0406d2\"]\n  security_group_ids = [\"sg-3f238186\"]\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id          = mongodbatlas_privatelink_endpoint.test.project_id\n  private_link_id     = mongodbatlas_privatelink_endpoint.test.private_link_id\n  endpoint_service_id = aws_vpc_endpoint.ptfe_service.id\n  provider_name       = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS MSK Privatelink Endpoint using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Privatelink Endpoint for Streams using the mongodbatlas_stream_privatelink_endpoint resource, integrating with AWS MSK.  It defines resources for AWS VPC, Subnets, Security Group, MSK Cluster, MSK Cluster Policy, MSK SCRAM Secret Association, and MSK Configuration. Variables used include project_id, msk_cluster_name, aws_account_id and aws_secret_arn.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_privatelink_endpoint.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block = \"192.168.0.0/22\"\n}\n\ndata \"aws_availability_zones\" \"azs\" {\n  state = \"available\"\n}\n\nresource \"aws_subnet\" \"subnet_az1\" {\n  availability_zone = data.aws_availability_zones.azs.names[0]\n  cidr_block        = \"192.168.0.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_subnet\" \"subnet_az2\" {\n  availability_zone = data.aws_availability_zones.azs.names[1]\n  cidr_block        = \"192.168.1.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_security_group\" \"sg\" {\n  vpc_id = aws_vpc.vpc.id\n}\n\nresource \"aws_msk_cluster\" \"example\" {\n  cluster_name           = var.msk_cluster_name\n  kafka_version          = \"3.6.0\"\n  number_of_broker_nodes = 2\n\n  broker_node_group_info {\n    instance_type = \"kafka.m5.large\"\n    client_subnets = [\n      aws_subnet.subnet_az1.id,\n      aws_subnet.subnet_az2.id,\n    ]\n    security_groups = [aws_security_group.sg.id]\n\n    connectivity_info {\n      vpc_connectivity {\n        client_authentication {\n          sasl {\n            scram = true\n          }\n        }\n      }\n    }\n  }\n\n  client_authentication {\n    sasl {\n      scram = true\n    }\n  }\n\n  configuration_info {\n    arn      = aws_msk_configuration.example.arn\n    revision = aws_msk_configuration.example.latest_revision\n  }\n}\n\nresource \"aws_msk_cluster_policy\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = {\n        \"AWS\" = \"arn:aws:iam::${var.aws_account_id}:root\"\n      }\n      Action = [\n        \"kafka:CreateVpcConnection\",\n        \"kafka:GetBootstrapBrokers\",\n        \"kafka:DescribeCluster\",\n        \"kafka:DescribeClusterV2\"\n      ]\n      Resource = aws_msk_cluster.example.arn\n    }]\n  })\n}\n\nresource \"aws_msk_single_scram_secret_association\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n  secret_arn  = var.aws_secret_arn\n}\n\nresource \"aws_msk_configuration\" \"example\" {\n  name = \"${var.msk_cluster_name}-msk-configuration\"\n\n  # Default ASW MSK configuration with \"allow.everyone.if.no.acl.found=false\" added\n  server_properties = <<PROPERTIES\nauto.create.topics.enable=false\ndefault.replication.factor=3\nmin.insync.replicas=2\nnum.io.threads=8\nnum.network.threads=5\nnum.partitions=1\nnum.replica.fetchers=2\nreplica.lag.time.max.ms=30000\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nsocket.send.buffer.bytes=102400\nunclean.leader.election.enable=true\nallow.everyone.if.no.acl.found=false\nPROPERTIES\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AWS\"\n  vendor        = \"MSK\"\n  arn           = aws_msk_cluster.example.arn\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\noutput \"privatelink_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.id\n}\n```\n\n----------------------------------------\n\nTITLE: Create Cluster with Backup & Remove Default Policy - Terraform\nDESCRIPTION: This example demonstrates how to enable cloud backup for a new MongoDB Atlas cluster and then remove the default backup policy by defining a `mongodbatlas_cloud_backup_schedule` resource without any `policy_item_*` blocks. This allows for a clean slate for creating custom backup policies later. The `backup_enabled` attribute must be set to `true` in the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_schedule.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_backup_schedule resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This command is used to review the changes that Terraform will make to your infrastructure before applying them. It's crucial to verify the plan and ensure it aligns with your expectations before proceeding.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/azure/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Create Federated Query Limit Terraform\nDESCRIPTION: This Terraform resource creates a federated query limit for a MongoDB Atlas Federated Database Instance. It configures limits such as bytes processed weekly, along with an overrun policy. Requires a valid `project_id`, `tenant_name`, `limit_name`, `overrun_policy`, and `value`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_query_limit.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_query_limit\" \"test\" {\n  project_id = \"64707f06c519c20c3a2b1b03\"\n  tenant_name = \"FederatedDatabseInstance0\"\n  limit_name = \"bytesProcessed.weekly\"\n  overrun_policy = \"BLOCK\"\n  value          = 5147483648\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BI Connector in Terraform\nDESCRIPTION: This code snippet shows how to configure the BI Connector for Atlas within a MongoDB Atlas cluster using Terraform. It allows you to enable or disable the BI Connector and set the read preference. The read preference can be set to 'primary', 'secondary', or 'analytics'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_16\n\nLANGUAGE: Terraform\nCODE:\n```\nbi_connector_config {\n  enabled         = true\n  read_preference = \"secondary\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Outputting Private SRV Connection String\nDESCRIPTION: This Terraform output retrieves the private SRV connection string from the created MongoDB Atlas cluster. The private SRV connection string is accessed through the `connection_strings[0].private_srv` attribute of the `mongodbatlas_advanced_cluster` resource. This assumes Network Peering and Custom DNS AWS are enabled.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_12\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private_srv\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings[0].private_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Region Replication Spec in Terraform\nDESCRIPTION: This code configures a multi-region MongoDB Atlas cluster using the replication_specs block. It defines the number of shards and the configuration for each region, including the region name, number of electable nodes, priority, and number of read-only nodes. The regions are configured for US_EAST_1, US_EAST_2, and US_WEST_1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_15\n\nLANGUAGE: Terraform\nCODE:\n```\n//Example 3 Multi-Region block\nreplication_specs {\n  num_shards = 1\n  regions_config {\n    region_name     = \"US_EAST_1\"\n    electable_nodes = 3\n    priority        = 7\n    read_only_nodes = 0\n  }\n  regions_config {\n    region_name     = \"US_EAST_2\"\n    electable_nodes = 2\n    priority        = 6\n    read_only_nodes = 0\n  }\n  regions_config {\n    region_name     = \"US_WEST_1\"\n    electable_nodes = 2\n    priority        = 5\n    read_only_nodes = 2\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Project\nDESCRIPTION: This Terraform configuration creates a new MongoDB Atlas project named \"project-name\" within a specified organization.  It configures teams, limits, and various feature flags for the project, such as enabling statistics collection, Data Explorer, Performance Advisor, and more.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_roles_org_id\" \"test\" {\n}\n\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"project-name\"\n  org_id = data.mongodbatlas_roles_org_id.test.org_id\n  project_owner_id = \"<OWNER_ACCOUNT_ID>\"\n\n  teams {\n    team_id    = \"5e0fa8c99ccf641c722fe645\"\n    role_names = [\"GROUP_OWNER\"]\n\n  }\n  teams {\n    team_id    = \"5e1dd7b4f2a30ba80a70cd4rw\"\n    role_names = [\"GROUP_READ_ONLY\", \"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n\n  limits {\n    name = \"atlas.project.deployment.clusters\"\n    value = 26\n  }\n\n  limits {\n    name = \"atlas.project.deployment.nodesPerPrivateLinkRegion\"\n    value = 51\n  }\n\n  is_collect_database_specifics_statistics_enabled = true\n  is_data_explorer_enabled                         = true\n  is_extended_storage_sizes_enabled                = true\n  is_performance_advisor_enabled                   = true\n  is_realtime_performance_panel_enabled            = true\n  is_schema_advisor_enabled                        = true\n  is_slow_operation_thresholding_enabled           = true\n}\n```\n\n----------------------------------------\n\nTITLE: Create automated restore job using Terraform\nDESCRIPTION: This Terraform configuration creates an automated restore job. It requires a MongoDB Atlas cluster and a cloud provider snapshot. The restore job automatically restores the snapshot to the specified target cluster within the target project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_restore_job.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_provider_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_provider_snapshot.test.snapshot_id\n  delivery_type_config   {\n    automated           = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id   = \"5cf5a45a9ccf6400e60981b6\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processor: Cluster to Kafka - Terraform\nDESCRIPTION: Configures a MongoDB Atlas Stream Processor that transfers data from a cluster connection to a Kafka connection. The pipeline specifies a $source stage for the cluster connection and an $emit stage for the Kafka connection, defining the target topic.  The initial state is set to 'CREATED'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-cluster-to-kafka-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"clusterProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-cluster.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_from_cluster\" } }\n  ])\n  state = \"CREATED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Private Link Endpoint Service with Azure\nDESCRIPTION: This Terraform configuration creates a Private Link Endpoint, Azure Private Endpoint, and a Private Link Endpoint Service in MongoDB Atlas, using Azure as the provider.  It requires the `project_id`, `resource_group_name` variables and the `azurerm_subnet.test` and `data.azurerm_resource_group.test` resources to be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AZURE\"\n  region        = \"eastus2\"\n}\n\nresource \"azurerm_private_endpoint\" \"test\" {\n  name                = \"endpoint-test\"\n  location            = data.azurerm_resource_group.test.location\n  resource_group_name = var.resource_group_name\n  subnet_id           = azurerm_subnet.test.id\n  private_service_connection {\n    name                           = mongodbatlas_privatelink_endpoint.test.private_link_service_name\n    private_connection_resource_id = mongodbatlas_privatelink_endpoint.test.private_link_service_resource_id\n    is_manual_connection           = true\n    request_message                = \"Azure Private Link test\"\n  }\n\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id                  = mongodbatlas_privatelink_endpoint.test.project_id\n  private_link_id             = mongodbatlas_privatelink_endpoint.test.private_link_id\n  endpoint_service_id         = azurerm_private_endpoint.test.id\n  private_endpoint_ip_address = azurerm_private_endpoint.test.private_service_connection.0.private_ip_address\n  provider_name               = \"AZURE\"\n}\n\ndata \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id            = mongodbatlas_privatelink_endpoint_service.test.project_id\n  private_link_id       = mongodbatlas_privatelink_endpoint_service.test.private_link_id\n  interface_endpoint_id = mongodbatlas_privatelink_endpoint_service.test.interface_endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Import Existing MongoDB Atlas Advanced Cluster - Terraform\nDESCRIPTION: Shows how to import an existing MongoDB Atlas advanced cluster into Terraform using the terraform import command. The cluster is identified by the project ID and cluster name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_21\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_advanced_cluster.my_cluster 1112222b3bf99403840e8934-Cluster0\n```\n\n----------------------------------------\n\nTITLE: Removing 3 and Modifying 1 Policy After Creation - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to remove the first three default cloud backup policy items (hourly, daily, weekly) after the cluster has already been created and modify the remaining monthly policy. It uses a hardcoded ID for the monthly policy item because the dynamic IDs from the cluster resource are unreliable after removing policy items. The cluster must have `backup_enabled = true` to use this resource. Identifiers are obtained from the cluster's state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_backup_policy.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_provider_snapshot_backup_policy resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n\n  policies {\n    id = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id\n\n    # Item removed\n    # policy_item {\n    #   id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id\n    #   frequency_interval = 1\n    #   frequency_type     = \"hourly\"\n    #   retention_unit     = \"days\"\n    #   retention_value    = 1\n    # }\n\n    # Item removed\n    # policy_item {\n    #   id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id\n    #   frequency_interval = 1\n    #   frequency_type     = \"daily\"\n    #   retention_unit     = \"days\"\n    #   retention_value    = 2\n    # }\n\n    # Item removed\n    # policy_item {\n    #   id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id\n    #   frequency_interval = 4\n    #   frequency_type     = \"weekly\"\n    #   retention_unit     = \"weeks\"\n    #   retention_value    = 3\n    # }\n\n    policy_item {\n      id                 = 5f0747cad187d8609a72f546\n      frequency_interval = 5\n      frequency_type     = \"monthly\"\n      retention_unit     = \"months\"\n      retention_value    = 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Specs in Terraform (Multicloud Example)\nDESCRIPTION: This snippet demonstrates how to configure replication specifications for a MongoDB Atlas cluster in a multi-cloud environment using Terraform. It configures the cluster to have nodes in AWS and GCP regions with different instance sizes, node counts, priorities, and region names.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_22\n\nLANGUAGE: Terraform\nCODE:\n```\n//Example Multicloud\nreplication_specs = [\n  {\n    region_configs = [\n      {\n        electable_specs = {\n          instance_size = \"M10\"\n          node_count    = 3\n        }\n        analytics_specs = {\n          instance_size = \"M10\"\n          node_count    = 1\n        }\n        provider_name = \"AWS\"\n        priority      = 7\n        region_name   = \"US_EAST_1\"\n      }, \n      {\n        electable_specs = {\n          instance_size = \"M10\"\n          node_count    = 2\n        }\n        provider_name = \"GCP\"\n        priority      = 6\n        region_name   = \"NORTH_AMERICA_NORTHEAST_1\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Creating a Database User with X.509 Authentication in Terraform\nDESCRIPTION: This snippet shows how to create a MongoDB Atlas database user using X.509 authentication. It sets the `x509_type` to `MANAGED` and the `auth_database_name` to `$external`.  It also includes role assignment, labels, and scopes to define user access. The username is expected to be compatible with the X.509 authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"test-acc-username\"\n  x509_type          = \"MANAGED\"\n  project_id         = \"<PROJECT-ID>\"\n  auth_database_name = \"$external\"\n\n  roles {\n    role_name     = \"readAnyDatabase\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"%s\"\n    value = \"%s\"\n  }\n\n  scopes {\n    name   = \"My cluster name\"\n    type = \"CLUSTER\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Labels to a MongoDB Atlas Cluster in Terraform\nDESCRIPTION: This snippet shows how to apply labels to a MongoDB Atlas cluster using Terraform.  Each label is defined as a key-value pair.  Labels help to categorize and manage the cluster. Keys and values must be less than 255 characters. Note: The key 'Infrastructure Tool' cannot be used.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_19\n\nLANGUAGE: terraform\nCODE:\n```\nlabels {\n        key   = \"Key 1\"\n        value = \"Value 1\"\n  }\n labels {\n        key   = \"Key 2\"\n        value = \"Value 2\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Create Multi-Cloud Sharded Cluster - Terraform\nDESCRIPTION: This example showcases a multi-cloud sharded cluster configuration with two shards distributed across AWS and Azure. Each shard has region configurations for both AWS and Azure, defining instance sizes, node counts, provider names, priorities, and region names.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id   = mongodbatlas_project.project.id\n  name         = var.cluster_name\n  cluster_type = \"SHARDED\"\n  backup_enabled = true\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"US_EAST_2\"\n        }\n      ]\n    }, \n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"US_EAST_2\"\n        }\n      ]\n    }\n  ]\n\n  advanced_configuration = {\n    javascript_enabled                   = true\n    oplog_size_mb                        = 991\n    sample_refresh_interval_bi_connector = 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Global Cluster with Terraform\nDESCRIPTION: This Terraform configuration defines a MongoDB Atlas advanced cluster of type GEOSHARDED with two zones. Each zone has two shards, and each shard is deployed across two different providers (AWS and Azure) in different regions. The configuration includes settings for replication, instance sizes, node counts, and advanced cluster configurations like Javascript enablement and oplog size.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id     = mongodbatlas_project.project.id\n  name           = var.cluster_name\n  cluster_type   = \"GEOSHARDED\"\n  backup_enabled = true\n\n  replication_specs { # shard 1 - zone n1\n    zone_name  = \"zone n1\"\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"US_EAST_2\"\n    }\n  }\n\n   replication_specs {  # shard 2 - zone n1\n    zone_name  = \"zone n1\"\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"US_EAST_2\"\n    }\n  }\n\n  replication_specs {  # shard 1 - zone n2\n    zone_name  = \"zone n2\"\n\n    region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"EUROPE_NORTH\"\n    }\n  }\n\n  replication_specs {  # shard 2 - zone n2\n    zone_name  = \"zone n2\"\n\n    region_configs { \n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 2\n      }\n      provider_name = \"AZURE\"\n      priority      = 6\n      region_name   = \"EUROPE_NORTH\"\n    }\n  }\n\n  advanced_configuration {\n    javascript_enabled                   = true\n    oplog_size_mb                        = 999\n    sample_refresh_interval_bi_connector = 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Project API Key - Terraform\nDESCRIPTION: This Terraform code creates a Project API key and assigns it to a project with the `GROUP_OWNER` role. It defines the description of the API key and the project assignment details including the project ID and role names.  At least one `project_assignment` block must be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_api_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_api_key\" \"test\" {\n  description   = \"Description of your API key\"\n  project_assignment {\n    project_id = \"64259ee860c43338194b0f8e\"\n    role_names = [\"GROUP_OWNER\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container and Peering Connection AWS Terraform\nDESCRIPTION: This example demonstrates how to create a network container and a network peering connection in AWS using the `mongodbatlas_network_container` and `mongodbatlas_network_peering` resources. It also shows how to accept the peering connection request using the `aws_vpc_peering_connection_accepter` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n# Container example provided but not always required, \n# see network_container documentation for details. \nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = local.project_id\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"test\" {\n  accepter_region_name   = \"us-east-1\"\n  project_id             = local.project_id\n  container_id           = \"507f1f77bcf86cd799439011\"\n  provider_name          = \"AWS\"\n  route_table_cidr_block = \"192.168.0.0/24\"\n  vpc_id                 = \"vpc-abc123abc123\"\n  aws_account_id         = \"abc123abc123\"\n}\n\n# the following assumes an AWS provider is configured\n# Accept the peering connection request\nresource \"aws_vpc_peering_connection_accepter\" \"peer\" {\n  vpc_peering_connection_id = mongodbatlas_network_peering.test.connection_id\n  auto_accept = true\n}\n```\n\n----------------------------------------\n\nTITLE: Create an Azure Cluster\nDESCRIPTION: This example demonstrates how to create a MongoDB Atlas cluster on Azure.  It configures the cluster as a replica set with cloud backups and auto-scaling enabled, specifying Azure-specific provider settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"test\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"test\"\n  cluster_type = \"REPLICASET\"\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n  cloud_backup     = true\n  auto_scaling_disk_gb_enabled = true\n  mongo_db_major_version       = \"7.0\"\n\n  # Provider Settings \"block\"\n  provider_name               = \"AZURE\"\n  provider_disk_type_name     = \"P6\"\n  provider_instance_size_name = \"M30\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Azure Network Peering with Atlas Cluster in Terraform\nDESCRIPTION: This Terraform configuration creates an Atlas cluster and sets up a network peering connection with Azure. It defines the cluster configuration, including the region, instance size, and node count. It also configures the network peering connection with Azure, specifying the Azure directory ID, subscription ID, resource group name, and VNet name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\n# Ensure you have created the required Azure service principal first, see\n# see https://docs.atlas.mongodb.com/security-vpc-peering/\n\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this AZURE region\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = local.project_id\n  name           = \"cluster-azure\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AZURE\"\n      region_name   = \"US_EAST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id            = local.project_id\n  container_id          = one(values(mongodbatlas_advanced_cluster.test.replication_specs[0].container_id))\n  provider_name         = \"AZURE\"\n  azure_directory_id    = local.AZURE_DIRECTORY_ID\n  azure_subscription_id = local.AZURE_SUBSCRIPTION_ID\n  resource_group_name   = local.AZURE_RESOURCE_GROUP_NAME\n  vnet_name             = local.AZURE_VNET_NAME\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Azure Cloud Provider Access Setup in Terraform\nDESCRIPTION: This Terraform code snippet shows how to register an Azure IAM role in MongoDB Atlas using the `mongodbatlas_cloud_provider_access_setup` resource. It requires specifying the `project_id`, setting `provider_name` to \"AZURE\", and providing the `atlas_azure_app_id`, `service_principal_id`, and `tenant_id` within the `azure_config` block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_access.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"test_role\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AZURE\"\n   azure_config {\n      atlas_azure_app_id = \"9f2deb0d-be22-4524-a403-df531868bac0\"\n      service_principal_id = \"22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1\"\n      tenant_id = \"91402384-d71e-22f5-22dd-759e272cdc1c\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Define depends_on for cloud_provider_access resources\nDESCRIPTION: This Terraform configuration shows how to define a `depends_on` statement for the `mongodbatlas_cloud_provider_access_setup` and `mongodbatlas_cloud_provider_access_authorization` resources when Terraform is unable to infer the dependency automatically. This ensures that the resources are created in the correct order.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"default\" {\n  (...)\n  depends_on = [mongodbatlas_cloud_provider_access_setup.<resource_name>, mongodbatlas_cloud_provider_access_authorization.<resource_name>]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Azure Cloud Backup Snapshot Export Bucket\nDESCRIPTION: This Terraform code creates a Cloud Backup Snapshot Export Bucket for Azure. It requires the project ID, role ID, service URL, bucket name, and cloud provider to be specified.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_export_bucket.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  role_id = \"{ROLE_ID}\"\n  service_url = \"{SERVICE_URL}\"\n  bucket_name = \"example-bucket\"\n  cloud_provider = \"AZURE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Authentication for Atlas Project (Terraform)\nDESCRIPTION: This Terraform configuration creates a new MongoDB Atlas project and configures LDAP authentication for it.  It specifies the hostname, port, bind username, and bind password for the LDAP server.  Ensure that the LDAP server is accessible from the Atlas cluster or via VPC peering.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/ldap_configuration.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORG ID\"\n}\n\nresource \"mongodbatlas_ldap_configuration\" \"test\" {\n  project_id             = mongodbatlas_project.test.id\n  authentication_enabled = true\n  hostname               = \"HOSTNAME\"\n  port                   = 636\n  bind_username          = \"USERNAME\"\n  bind_password          = \"PASSWORD\"\n}\n```\n\n----------------------------------------\n\nTITLE: Static Mappings Field Configuration Example\nDESCRIPTION: Example of a static mapping configuration for fields within a MongoDB Atlas Search Index Terraform resource. Demonstrates defining field types, analyzers, and nested fields for complex data structures.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nmappings_fields = <<-EOF\n    {\n      \"address\": {\n        \"type\": \"document\",\n        \"fields\": {\n          \"city\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.simple\",\n            \"ignoreAbove\": 255\n          },\n          \"state\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.english\"\n          }\n        }\n      },\n      \"company\": {\n        \"type\": \"string\",\n        \"analyzer\": \"lucene.whitespace\",\n        \"multi\": {\n          \"mySecondaryAnalyzer\": {\n            \"type\": \"string\",\n            \"analyzer\": \"lucene.french\"\n          }\n        }\n      },\n      \"employees\": {\n        \"type\": \"string\",\n        \"analyzer\": \"lucene.standard\"\n      }\n    }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Endpoint Service - Terraform\nDESCRIPTION: This Terraform configuration creates a new Private Endpoint Service in MongoDB Atlas. It defines the project ID, cloud provider (AWS/AZURE), and region for the endpoint. It also sets timeouts for the creation and deletion operations.  The resource creates a Private Endpoint *Service* in MongoDB Atlas, the endpoint itself is created in your cloud provider using the information returned by this resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = \"<PROJECT-ID>\"\n  provider_name = \"AWS/AZURE\"\n  region        = \"US_EAST_1\"\n\n  timeouts {\n    create = \"30m\"\n    delete = \"20m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Trigger with Function Configuration - Terraform\nDESCRIPTION: This example demonstrates creating a MongoDB Atlas event trigger of type 'DATABASE' that invokes a function. It configures the trigger to respond to 'INSERT' and 'UPDATE' operations on a specific database and collection, filtering events using a match expression. The trigger also sends events to AWS EventBridge.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/event_trigger.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"DATABASE\"\n  function_id = \"FUNCTION ID\"\n  disabled = false\n  config_operation_types = [\"INSERT\", \"UPDATE\"]\n  config_database = \"DATABASE NAME\"\n  config_collection = \"COLLECTION NAME\"\n  config_service_id = \"SERVICE ID\"\n  config_match = <<-EOF\n{\n  \"updateDescription.updatedFields\": {\n    \"status\": \"blocked\"\n  }\n}\nEOF\n  config_project = \"{\\\"updateDescription.updatedFields\\\":{\\\"status\\\":\\\"blocked\\\"}}\"\n  config_full_document = false\n  config_full_document_before = false\n  event_processors {\n    aws_eventbridge {\n      config_account_id = \"AWS ACCOUNT ID\"\n      config_region = \"AWS REGIOn\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maintenance Window with Day, Hour, and Protected Hours - Terraform\nDESCRIPTION: This code configures a maintenance window for a MongoDB Atlas project, specifying the day of the week, hour of the day, and a protected hours window during which no standard updates should occur. The `project_id` needs to be replaced with a valid Atlas project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/maintenance_window.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_maintenance_window\" \"test\" {\n    project_id  = \"<your-project-id>\"\n    day_of_week = 3\n    hour_of_day = 4\n\n    protected_hours {\n    start_hour_of_day = 9\n    end_hour_of_day   = 17\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Configuration with Multiple Notifications\nDESCRIPTION: This example shows creating an alert configuration with multiple notification channels, specifically email and SMS, using the `mongodbatlas_alert_configuration` resource.  It leverages `OUTSIDE_METRIC_THRESHOLD` event type.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/alert_configuration.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"PROJECT ID\"\n  event_type = \"OUTSIDE_METRIC_THRESHOLD\"\n  enabled    = true\n\n  notification {\n    type_name     = \"GROUP\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = false\n    email_enabled = true\n    roles = [\"GROUP_DATA_ACCESS_READ_ONLY\", \"GROUP_CLUSTER_MANAGER\", \"GROUP_DATA_ACCESS_ADMIN\"]\n  }\n\n  notification {\n    type_name     = \"ORG\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = true\n    email_enabled = false\n  }\n\n  matcher {\n    field_name = \"HOSTNAME_AND_PORT\"\n    operator   = \"EQUALS\"\n    value      = \"SECONDARY\"\n  }\n\n  metric_threshold_config {\n    metric_name = \"ASSERT_REGULAR\"\n    operator    = \"LESS_THAN\"\n    threshold   = 99.0\n    units       = \"RAW\"\n    mode        = \"AVERAGE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Cloud Backup Schedule - Terraform\nDESCRIPTION: This snippet demonstrates how to configure a MongoDB Atlas Cloud Backup Schedule using Terraform. It includes settings for project ID, cluster name, reference time, restore window, and various policy items such as hourly, daily, weekly, monthly, and yearly backup frequencies and retention policies.  These policies define how frequently backups are taken and how long they are retained.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n  \n  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource\n  policy_item_hourly {\n    frequency_interval = 1        #accepted values = 1, 2, 4, 6, 8, 12 -> every n hours\n    retention_unit     = \"days\"\n    retention_value    = 7\n  }\n  policy_item_daily {\n    frequency_interval = 1        #accepted values = 1 -> every 1 day\n    retention_unit     = \"days\"\n    retention_value    = 7\n  }\n  policy_item_weekly {\n    frequency_interval = 1        # accepted values = 1 to 7 -> every 1=Monday,2=Tuesday,3=Wednesday,4=Thursday,5=Friday,6=Saturday,7=Sunday day of the week\n    retention_unit     = \"weeks\"\n    retention_value    = 4\n  }\n  policy_item_monthly {\n    frequency_interval = 1        # accepted values = 1 to 28 -> 1 to 28 every nth day of the month  \n                                  # accepted values = 40 -> every last day of the month\n    retention_unit     = \"months\"\n    retention_value    = 12\n  }\n  policy_item_yearly {\n    frequency_interval = 1        # accepted values = 1 to 12 -> 1st day of nth month  \n    retention_unit     = \"years\"\n    retention_value    = 1\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Create Multi-Cloud Cluster - Terraform\nDESCRIPTION: This example demonstrates how to create a multi-cloud MongoDB Atlas advanced cluster that spans multiple cloud providers. It defines region configurations for AWS and GCP, specifying instance sizes, node counts, provider names, priorities, and region names for each provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M10\"\n            node_count    = 3\n          }\n          analytics_specs = {\n            instance_size = \"M10\"\n            node_count    = 1\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M10\"\n            node_count    = 2\n          }\n          provider_name = \"GCP\"\n          priority      = 6\n          region_name   = \"NORTH_AMERICA_NORTHEAST_1\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Basic Search Index with Terraform\nDESCRIPTION: This Terraform resource block creates a basic search index in MongoDB Atlas. It specifies the index name, project ID, cluster name, database, collection, analyzer, and dynamic mappings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_search_index\" \"test-basic-search-index\" {\n  name   = \"test-basic-search-index\"\n  project_id = \"<PROJECT_ID>\"\n  cluster_name = \"<CLUSTER_NAME>\"\n  \n  analyzer = \"lucene.standard\"\n  collection_name = \"collection_test\"\n  database = \"database_test\"\n  mappings_dynamic = true\n  \n  search_analyzer = \"lucene.standard\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container with GCP\nDESCRIPTION: This Terraform configuration creates a network container in MongoDB Atlas for GCP. It specifies the project ID, CIDR block, provider name, and regions.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_container.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<YOUR-PROJECT-ID>\"\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"GCP\"\n  regions = [\"US_EAST_4\", \"US_WEST_3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Flex Cluster with Terraform\nDESCRIPTION: This code snippet demonstrates how to create a `mongodbatlas_flex_cluster` resource using Terraform. It defines the project ID, cluster name, provider settings (backing provider and region), and enables termination protection.  It assumes that `var.project_id` and `var.cluster_name` are defined in your Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  provider_settings = {\n    backing_provider_name = \"AWS\"\n    region_name           = \"US_EAST_1\"\n  }\n  termination_protection_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom DB Role in MongoDB Atlas with Terraform\nDESCRIPTION: This example shows how to create a custom DB role with the name 'myCustomRole' in a MongoDB Atlas project. The role grants 'UPDATE', 'INSERT', and 'REMOVE' actions on any database and collection within the project. The project_id should be replaced with the actual project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/custom_db_role.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_custom_db_role\" \"test_role\" {\n  project_id = \"<PROJECT-ID>\"\n  role_name  = \"myCustomRole\"\n\n  actions {\n    action = \"UPDATE\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\" # use the empty string (\"\") to allow an action on all databases.\n    }\n  }\n  actions {\n    action = \"INSERT\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n  actions {\n    action = \"REMOVE\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Project Invitation with Read-Only Access Terraform\nDESCRIPTION: This snippet shows how to invite a user to a project with `GROUP_READ_ONLY` and `GROUP_DATA_ACCESS_READ_ONLY` roles using the `mongodbatlas_project_invitation` resource.  It requires a valid `username` and `project_id`. This example demonstrates assigning multiple roles to a user. After the resource is applied, an invitation will be created and sent to the specified `username`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_invitation.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_invitation\" \"test\" {\n  username    = \"test-acc-username\"\n  project_id  = \"<PROJECT-ID>\"\n  roles       = [ \"GROUP_READ_ONLY\", \"GROUP_DATA_ACCESS_READ_ONLY\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Cloud Provider Access Setup in Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to register an AWS IAM role in MongoDB Atlas using the `mongodbatlas_cloud_provider_access_setup` resource. It requires specifying the `project_id` and setting `provider_name` to \"AWS\". This setup creates the initial configuration for cloud provider access.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_access.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"test_role\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Replication Specs and Region Configs Terraform\nDESCRIPTION: This snippet demonstrates how to migrate the `replication_specs` and `region_configs` blocks to a list of objects format required by the Preview for MongoDB Atlas Provider 2.0.0. The key change involves wrapping the `region_configs` block within a list.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nreplication_specs {\n  region_configs {\n    electable_specs {\n      instance_size = \"M10\"\n      node_count    = 1\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_WEST_1\"\n  }\n  region_configs {\n    electable_specs {\n      instance_size = \"M10\"\n      node_count    = 2\n    }\n    provider_name = \"AWS\"\n    priority      = 6\n    region_name   = \"US_EAST_1\"\n  }\n}\n```\n\nLANGUAGE: terraform\nCODE:\n```\nreplication_specs = [\n  {\n    region_configs = [\n      {\n        electable_specs = {\n          instance_size = \"M10\"\n          node_count    = 1\n        }\n        provider_name = \"AWS\"\n        priority      = 7\n        region_name   = \"US_WEST_1\"\n      },\n      {\n        electable_specs = {\n          instance_size = \"M10\"\n          node_count    = 2\n        }\n        provider_name = \"AWS\"\n        priority      = 6\n        region_name   = \"US_EAST_1\"\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with GCP KMS - Terraform\nDESCRIPTION: This snippet configures encryption at rest using customer key management in Google Cloud KMS. It sets the encryption settings, including the service account key and key version resource ID. Then retrieves the configuration, and outputs whether the GCP KMS configuration is valid.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  google_cloud_kms_config {\n    enabled                 = true\n    service_account_key     = \"{\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"my-project-common-0\\\",\\\"private_key_id\\\": \\\"e120598ea4f88249469fcdd75a9a785c1bb3\\\",\\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\nMIIEuwIBA(truncated)SfecnS0mT94D9\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\\"client_email\\\": \\\"my-email-kms-0@my-project-common-0.iam.gserviceaccount.com\\\",\\\"client_id\\\": \\\"10180967717292066\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/my-email-kms-0%40my-project-common-0.iam.gserviceaccount.com\\\"}\"\n    key_version_resource_id = \"projects/my-project-common-0/locations/us-east4/keyRings/my-key-ring-0/cryptoKeys/my-key-0/cryptoKeyVersions/1\"\n  }\n}\n\ndata \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = mongodbatlas_encryption_at_rest.test.project_id\n}\n\noutput \"is_gcp_encryption_at_rest_valid\" {\n  value = data.mongodbatlas_encryption_at_rest.test.google_cloud_kms_config.valid\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with Azure Key Vault\nDESCRIPTION: This Terraform configuration sets up encryption at rest using Azure Key Vault for a MongoDB Atlas project. It defines the necessary Azure Key Vault configuration parameters, including tenant ID, subscription ID, client ID, secret, resource group name, key vault name, and key identifier. It also retrieves encryption at rest data and outputs the validation status.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  azure_key_vault_config {\n    enabled           = true\n    azure_environment = \"AZURE\"\n\n    tenant_id       = var.azure_tenant_id\n    subscription_id = var.azure_subscription_id\n    client_id       = var.azure_client_id\n    secret          = var.azure_client_secret\n\n    resource_group_name = var.azure_resource_group_name\n    key_vault_name      = var.azure_key_vault_name\n    key_identifier      = var.azure_key_identifier\n  }\n}\n\ndata \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = mongodbatlas_encryption_at_rest.test.project_id\n}\n\noutput \"is_azure_encryption_at_rest_valid\" {\n  value = data.mongodbatlas_encryption_at_rest.test.azure_key_vault_config.valid\n}\n```\n\n----------------------------------------\n\nTITLE: Create and Assign Project API Key to Multiple Projects - Terraform\nDESCRIPTION: This Terraform code creates a Project API key and assigns it to multiple projects with different roles.  The example illustrates the creation of a single API key and association with two different projects, each with its defined roles.  At least one `project_assignment` block must be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_api_key.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_api_key\" \"test\" {\n  description   = \"Description of your API key\"\n  \n  project_assignment {\n    project_id = \"64259ee860c43338194b0f8e\"\n    role_names = [\"GROUP_READ_ONLY\", \"GROUP_OWNER\"]\n  }\n  \n  project_assignment {\n    project_id = \"74259ee860c43338194b0f8e\"\n    role_names = [\"GROUP_READ_ONLY\"]\n  }\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Create Global Cluster - Terraform\nDESCRIPTION: This example defines a global cluster configuration with two zones distributed across AWS and Azure in different regions.  Each zone includes replication configurations for AWS and Azure, specifying instance sizes, node counts, provider names, priorities, and region names. This example utilizes the `zone_name` property to define zones.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_12\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id     = mongodbatlas_project.project.id\n  name           = var.cluster_name\n  cluster_type   = \"GEOSHARDED\"\n  backup_enabled = true\n\n  replication_specs = [\n    {\n      zone_name  = \"zone n1\"\n\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"US_EAST_2\"\n        }\n      ]\n    }, \n    {\n      zone_name  = \"zone n1\"\n\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"US_EAST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"US_EAST_2\"\n        }\n      ]\n    }, \n    {\n      zone_name  = \"zone n2\"\n\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"EU_WEST_1\"\n        }, \n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"EUROPE_NORTH\"\n        }\n      ]\n    }, \n    {\n      zone_name  = \"zone n2\"\n\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"EU_WEST_1\"\n        }, {\n          electable_specs ={\n            instance_size = \"M30\"\n            node_count    = 2\n          }\n          provider_name = \"AZURE\"\n          priority      = 6\n          region_name   = \"EUROPE_NORTH\"\n        }\n      ]\n    }\n  ]\n\n  advanced_configuration = {\n    javascript_enabled                   = true\n    oplog_size_mb                        = 999\n    sample_refresh_interval_bi_connector = 300\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Policy to Forbid Cloud Providers in Terraform\nDESCRIPTION: This Terraform code defines a resource policy to forbid the use of AWS and Azure as cloud providers for clusters. It uses the `templatefile` function to read Cedar policy templates from the specified file path.  It utilizes the `mongodbatlas_resource_policy` resource and requires the `org_id`, `name`, and `policies` attributes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_provider\" {\n  org_id      = var.org_id\n  name        = \"forbid-cloud-provider\"\n  description = \"Forbids AWS and Azure for clusters\"\n  policies = [\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"azure\"\n      })\n    },\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"aws\"\n      })\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create download restore job using Terraform\nDESCRIPTION: This Terraform configuration creates a download restore job. It requires a MongoDB Atlas cluster and a cloud provider snapshot. The restore job generates a URL to download a `.tar.gz` archive containing the data files of the snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_restore_job.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_provider_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_provider_snapshot.test.snapshot_id\n  delivery_type_config {\n    download = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Tenant Cluster - Terraform\nDESCRIPTION: This snippet illustrates upgrading a tenant cluster to a dedicated cluster. It changes the provider_name from \"TENANT\" to a specific provider such as AWS, and increases the instance size.  Only the upgrade changes will be applied during the terraform apply. A secondary terraform apply is needed to apply additional changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M10\"\n          }\n          provider_name         = \"AWS\"\n          region_name           = \"US_EAST_1\"\n          priority              = 7\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flex Clusters in a Project with Terraform\nDESCRIPTION: This snippet shows how to retrieve a list of all Flex Clusters within a specified project using the `mongodbatlas_flex_clusters` data source. It utilizes the `project_id` to filter the Flex Clusters. The output provides a list of cluster names.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_clusters\" \"example-clusters\" {\n  project_id = var.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Atlas Advanced Cluster - Terraform\nDESCRIPTION: This snippet demonstrates how to create a MongoDB Atlas Advanced Cluster using Terraform. It includes settings for project ID, cluster name, cluster type, backup enabling, and replication specifications with region configurations and electable specifications. The `backup_enabled = true` line specifically enables cloud backup snapshots for the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = var.region\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container with Azure\nDESCRIPTION: This Terraform configuration creates a network container in MongoDB Atlas for Azure. It specifies the project ID, CIDR block, provider name, and region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_container.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<YOUR-PROJECT-ID>\"\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"AZURE\"\n  region           = \"US_EAST_2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Federated Settings Organization Configuration\nDESCRIPTION: This Terraform configuration creates a `mongodbatlas_federated_settings_org_config` resource.  It defines settings for federated authentication within a MongoDB Atlas organization, including federation settings ID, organization ID, allowed domains, and post-authentication roles.  The `data_access_identity_provider_ids` attribute configures the identity providers to be used for data access.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_org_config.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_config\" \"org_connection\" {\n  federation_settings_id            = \"627a9687f7f7f7f774de306f14\"\n  org_id                            = \"627a9683ea7ff7f74de306f14\"\n  data_access_identity_provider_ids = [\"64d613677e1ad50839cce4db\"]\n  domain_restriction_enabled        = false\n  domain_allow_list                 = [\"mydomain.com\"]\n  post_auth_role_grants             = [\"ORG_MEMBER\"]\n  identity_provider_id              = \"0oaqyt9fc2ySTWnA0357\"\n}\n\ndata \"mongodbatlas_federated_settings_org_configs\" \"org_configs_ds\" {\n  federation_settings_id = data.mongodbatlas_federated_settings_org_config.org_connection.id\n}\n```\n\n----------------------------------------\n\nTITLE: Stored Source Fields Configuration Example\nDESCRIPTION: Example of configuring stored source fields within a MongoDB Atlas Search Index Terraform resource. This demonstrates defining which fields should be stored for search results, allowing selective retrieval of data.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nstored_source = <<-EOF\n    {\n      \"include\": [\"field1\", \"field2\"]\n    }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Create Cluster Stream Connection - Terraform\nDESCRIPTION: This code snippet demonstrates how to create a Stream Connection of type 'Cluster' in MongoDB Atlas using Terraform. It requires specifying the project ID, instance name, connection name, and the cluster name to connect to.  The project ID should be configured as a Terraform variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"test\" {\n    project_id = var.project_id\n    instance_name = \"InstanceName\"\n    connection_name = \"ConnectionName\"\n    type = \"Cluster\"\n    cluster_name = \"Cluster0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Trigger with EventBridge Configuration - Terraform\nDESCRIPTION: This example shows how to create a MongoDB Atlas event trigger of type 'DATABASE' that sends events directly to AWS EventBridge. It configures the trigger to listen for 'INSERT' and 'UPDATE' events on a specific database and collection.  The configuration includes parameters for filtering the events and specifying the AWS account and region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/event_trigger.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"DATABASE\"\n  disabled = false\n  unordered = false\n  config_operation_types = [\"INSERT\", \"UPDATE\"]\n  config_operation_type = \"LOGIN\"\n  config_providers = [\"anon-user\"]\n  config_database = \"DATABASE NAME\"\n  config_collection = \"COLLECTION NAME\"\n  config_service_id = \"1\"\n  config_match = \"{\\\"updateDescription.updatedFields\\\":{\\\"status\\\":\\\"blocked\\\"}}\"\n  config_project = \"{\\\"updateDescription.updatedFields\\\":{\\\"status\\\":\\\"blocked\\\"}}\"\n  config_full_document = false\n  config_full_document_before = false\n  config_schedule = \"*\"\n  event_processors {\n    aws_eventbridge {\n      config_account_id = \"AWS ACCOUNT ID\"\n      config_region = \"AWS REGIOn\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Policy for IP Access List in Terraform\nDESCRIPTION: This Terraform resource creates a MongoDB Atlas resource policy that forbids access from anywhere based on IP access lists. It defines a policy using the Cedar policy language to restrict modifications to the project's IP access list when it contains \"0.0.0.0/0\". The resource requires the organization ID and has dependencies on the `var.org_id` variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id      = var.org_id\n  name        = \"forbid-access-from-anywhere\"\n  description = \"Forbids access from anywhere\"\n\n  policies = [\n    {\n      body = <<EOF\n        forbid (\n                principal,\n                action == ResourcePolicy::Action::\"project.ipAccessList.modify\",\n                resource\n        )\n                when {\n                context.project.ipAccessList.contains(ip(\"0.0.0.0/0\"))\n        };\nEOF\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Private Endpoint Service with GCP\nDESCRIPTION: This example demonstrates the creation of a private endpoint service with GCP.\nIt sets up a MongoDB Atlas private endpoint, a Google Compute Network and Subnetwork, Google Compute Addresses and Forwarding Rules, and finally links them together using the `mongodbatlas_privatelink_endpoint_service` resource.\nThis requires appropriate GCP project, region, and network configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"GCP\"\n  region        = var.gcp_region\n}\n\n# Create a Google Network\nresource \"google_compute_network\" \"default\" {\n  project = var.gcp_project\n  name    = \"my-network\"\n}\n\n# Create a Google Sub Network\nresource \"google_compute_subnetwork\" \"default\" {\n  project       = google_compute_network.default.project\n  name          = \"my-subnet\"\n  ip_cidr_range = \"10.0.0.0/16\"\n  region        = var.gcp_region\n  network       = google_compute_network.default.id\n}\n\n# Create Google 50 Addresses\nresource \"google_compute_address\" \"default\" {\n  count        = 50\n  project      = google_compute_subnetwork.default.project\n  name         = \"tf-test${count.index}\"\n  subnetwork   = google_compute_subnetwork.default.id\n  address_type = \"INTERNAL\"\n  address      = \"10.0.42.${count.index}\"\n  region       = var.gcp_region\n\n  depends_on = [mongodbatlas_privatelink_endpoint.test]\n}\n\n# Create 50 Forwarding rules\nresource \"google_compute_forwarding_rule\" \"default\" {\n  count                 = 50\n  target                = mongodbatlas_privatelink_endpoint.test.service_attachment_names[count.index]\n  project               = google_compute_address.default[count.index].project\n  region                = google_compute_address.default[count.index].region\n  name                  = google_compute_address.default[count.index].name\n  ip_address            = google_compute_address.default[count.index].id\n  network               = google_compute_network.default.id\n  load_balancing_scheme = \"\"\n}\n\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id          = mongodbatlas_privatelink_endpoint.test.project_id\n  private_link_id     = mongodbatlas_privatelink_endpoint.test.private_link_id\n  provider_name       = \"GCP\"\n  endpoint_service_id = google_compute_network.default.name\n  gcp_project_id      = var.gcp_project\n\n  dynamic \"endpoints\" {\n    for_each = google_compute_address.default\n\n    content {\n      ip_address    = endpoints.value[\"address\"]\n      endpoint_name = google_compute_forwarding_rule.default[endpoints.key].name\n    }\n  }\n\n  depends_on = [google_compute_forwarding_rule.default]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Cluster Terraform\nDESCRIPTION: Creates a MongoDB Atlas Flex cluster using the FLEX provider. Flex clusters are suitable for workloads with variable resource demands. Requires specifying a backing provider (AWS) and a region (US_EAST_1).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      provider_name = \"FLEX\"\n      backing_provider_name = \"AWS\"\n      region_name = \"US_EAST_1\"\n      priority = 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Push-Based Log Export Resource\nDESCRIPTION: This command demonstrates how to import an existing `mongodbatlas_push_based_log_export` resource into Terraform. The command uses the project ID of the Atlas project where the log export is configured. This allows Terraform to manage the existing resource without recreating it.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/push_based_log_export.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_push_based_log_export.test 650972848269185c55f40ca1\n```\n\n----------------------------------------\n\nTITLE: Terraform Lifecycle Configuration for Compute Auto-Scaling\nDESCRIPTION: This code snippet demonstrates how to use Terraform's lifecycle `ignore_changes` meta-argument to prevent unintended instance size changes when compute auto-scaling is enabled. When `auto_scaling_compute_enabled` is true, Atlas can automatically adjust the instance size, potentially causing Terraform to revert the instance size to the original value defined in the configuration. The `lifecycle` block prevents Terraform from detecting and applying these changes unless explicitly modified. The code requires the Terraform resource where `provider_instance_size_name` is configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_12\n\nLANGUAGE: Terraform\nCODE:\n```\nlifecycle {\n  ignore_changes = [provider_instance_size_name]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Federated Database with Atlas Cluster (Terraform)\nDESCRIPTION: This example configures a Federated Database Instance to use a MongoDB Atlas cluster as a storage database. It defines a storage database with a collection that maps to a collection in the Atlas cluster, using the cluster's name as the store.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_database_instance.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_database_instance\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name = \"TENANT NAME OF THE FEDERATED DATABASE INSTANCE\"\n  storage_databases {\n    name = \"VirtualDatabase0\"\n    collections {\n      name = \"NAME OF THE COLLECTION\"\n      data_sources {\n          collection = \"COLLECTION IN THE CLUSTER\"\n          database = \"DB IN THE CLUSTER\"\n          store_name =  \"CLUSTER NAME\"\n      }\n    }\n  }\n\n  storage_stores {\n    name = \"STORE 1 NAME\"\n    cluster_name = \"CLUSTER NAME\"\n    project_id = \"PROJECT ID\"\n    provider = \"atlas\"\n    read_preference {\n      mode = \"secondary\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Ignore Changes for Paused Cluster State\nDESCRIPTION: This lifecycle block prevents Terraform from detecting and reverting changes to the `paused` state of an Atlas cluster. This is useful when Atlas automatically resumes a paused cluster after 30 days, and you want Terraform to ignore this change and keep the cluster paused upon subsequent applies.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nlifecycle {\n  ignore_changes = [paused]\n}\n```\n\n----------------------------------------\n\nTITLE: Create a GCP Cluster\nDESCRIPTION: This example illustrates how to create a MongoDB Atlas cluster on Google Cloud Platform (GCP). It defines a replica set with regions configured for GCP and sets up provider-specific configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"test\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"test\"\n  cluster_type = \"REPLICASET\"\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"EASTERN_US\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n  cloud_backup                 = true\n  auto_scaling_disk_gb_enabled = true\n  mongo_db_major_version       = \"7.0\"\n\n  # Provider Settings \"block\"\n  provider_name               = \"GCP\"\n  provider_instance_size_name = \"M30\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processor: Kafka to Cluster with DLQ - Terraform\nDESCRIPTION: Creates a MongoDB Atlas Stream Processor that reads data from a Kafka topic and writes to a MongoDB Atlas cluster. Includes a Dead Letter Queue (DLQ) configuration within the options block, specifying the database, collection, and connection for storing failed messages. The initial state is 'CREATED'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-kafka-to-cluster-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"kafkaProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_source\" } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"kafka\", \"coll\" : \"topic_source\", \"timeseries\" : { \"timeField\" : \"ts\" } } }\n  ])\n  state = \"CREATED\"\n  options = {\n    dlq = {\n      coll            = \"exampleColumn\"\n      connection_name = resource.mongodbatlas_stream_connection.example-cluster.connection_name\n      db              = \"exampleDb\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Online Archive with Custom Provider and Region in Terraform\nDESCRIPTION: This Terraform code shows how to create an online archive specifying a custom data processing region. It sets the cloud provider to AZURE and the region to US_EAST_2. It also uses custom query-based criteria to archive documents where the 'department' field is 'engineering'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/online_archive.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_online_archive\" \"test\" {\n    project_id   = var.project_id\n    cluster_name = var.cluster_name\n    coll_name    = var.collection_name\n    db_name      = var.database_name\n\n    data_process_region {\n        cloud_provider = \"AZURE\"\n        region = \"US_EAST_2\"\n    }\n\n    partition_fields {\n        field_name = \"firstName\"\n        order      = 0 \n    }\n\n    criteria {\n        type  = \"CUSTOM\"\n        query =  \"{ \\\"department\\\": \\\"engineering\\\" }\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Tenant Cluster Terraform\nDESCRIPTION: Creates a MongoDB Atlas tenant cluster using the TENANT provider. The cluster relies on a backing provider (AWS) in a specified region (US_EAST_1). Tenant clusters are suitable for initial development or testing environments.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M0\"\n      }\n      provider_name         = \"TENANT\"\n      backing_provider_name = \"AWS\"\n      region_name           = \"US_EAST_1\"\n      priority              = 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Federated Settings Org Role Mapping - Terraform\nDESCRIPTION: This Terraform resource creates a role mapping for a federated settings organization in MongoDB Atlas. It requires `federation_settings_id`, `org_id`, and `external_group_name`. The `role_assignments` block specifies the roles to assign, including both organization-level and group-level roles, based on provided IDs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_org_role_mapping.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_role_mapping\" \"org_group_role_mapping_import\" {\n  federation_settings_id = \"627a9687f7f7f7f774de306f14\"\n  org_id                 = \"627a9683e7f7f7ff7fe306f14\"\n  external_group_name    = \"myGrouptest\"\n\n  role_assignments {\n    org_id = \"627a9683e7f7f7ff7fe306f14\"\n    roles     = [\"ORG_MEMBER\",\"ORG_GROUP_CREATOR\",\"ORG_BILLING_ADMIN\"]\n  }\n\n  role_assignments {\n    group_id = \"628aa20d7f7f7f7f7098b81b8\"\n    roles     = [\"GROUP_OWNER\",\"GROUP_DATA_ACCESS_ADMIN\",\"GROUP_SEARCH_INDEX_EDITOR\",\"GROUP_DATA_ACCESS_READ_ONLY\"]\n  }\n\n  role_assignments {\n    group_id = \"628aa20d7f7f7f7f7078b81b8\"\n    roles     = [\"GROUP_OWNER\",\"GROUP_DATA_ACCESS_ADMIN\",\"GROUP_SEARCH_INDEX_EDITOR\",\"GROUP_DATA_ACCESS_READ_ONLY\",\"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Options in Terraform\nDESCRIPTION: This snippet demonstrates how to configure advanced options for a MongoDB Atlas cluster using the `advanced_configuration` block in Terraform.  It sets `javascript_enabled` to `false` and `minimum_enabled_tls_protocol` to `TLS1_2`. This requires the Terraform MongoDB Atlas provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_19\n\nLANGUAGE: Terraform\nCODE:\n```\n// Nest options within advanced_configuration\n advanced_configuration = {\n   javascript_enabled                   = false\n   minimum_enabled_tls_protocol         = \"TLS1_2\"\n }\n```\n\n----------------------------------------\n\nTITLE: Configure Backup Compliance Policy Terraform\nDESCRIPTION: This Terraform configuration defines a Backup Compliance Policy for MongoDB Atlas. It includes settings for authorized email, user names, copy protection, point-in-time recovery (PIT), encryption at rest, and the restore window. Additionally, it configures backup policy items with different frequencies (on-demand, hourly, daily, weekly, monthly, and yearly) and retention periods. This configuration enforces backup compliance by preventing unauthorized modifications or deletions of backup configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/backup_compliance_policy.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_backup_compliance_policy\" \"backup_policy\" {\n  project_id                 = \"<PROJECT-ID>\"\n  authorized_email           = \"user@email.com\"\n  authorized_user_first_name = \"First\"\n  authorized_user_last_name  = \"Last\"\n  copy_protection_enabled    = false\n  pit_enabled                = false\n  encryption_at_rest_enabled = false\n\n  restore_window_days = 7\n\n  on_demand_policy_item {\n\t\t  frequency_interval = 0\n\t\t  retention_unit     = \"days\"\n\t\t  retention_value    = 3\n\t\t}\n\t\t\n\t\tpolicy_item_hourly {\n\t\t\tfrequency_interval = 6\n\t\t\tretention_unit     = \"days\"\n\t\t\tretention_value    = 7\n\t\t  }\n\t  \n\t\tpolicy_item_daily {\n\t\t\tfrequency_interval = 0\n\t\t\tretention_unit     = \"days\"\n\t\t\tretention_value    = 7\n\t\t  }\n\t  \n\t\t  policy_item_weekly {\n\t\t\tfrequency_interval = 0\n\t\t\tretention_unit     = \"weeks\"\n\t\t\tretention_value    = 4\n\t\t  }\n\t  \n\t\t  policy_item_monthly {\n\t\t\tfrequency_interval = 0\n\t\t\tretention_unit     = \"months\"\n\t\t\tretention_value    = 12\n\t\t  }\n\n\t          policy_item_yearly {\n\t            frequency_interval = 1\n\t            retention_unit     = \"years\"\n\t            retention_value    = 1\n\t          }\n\n}\n\n```\n\n----------------------------------------\n\nTITLE: Modifying All 4 Default Policies Simultaneously - Terraform\nDESCRIPTION: This example demonstrates how to create a MongoDB Atlas cluster with Cloud Backup enabled and simultaneously modify the four default backup policies (hourly, daily, weekly, monthly) using the `mongodbatlas_cloud_provider_snapshot_backup_policy` resource. The `policies` block modifies the frequency and retention settings of each policy item. The cluster must have `backup_enabled = true` to use this resource. Identifiers are obtained from the cluster's state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_backup_policy.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_provider_snapshot_backup_policy resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n  //Keep all 4 default policies but modify the units and values\n  //Could also just reflect the policy defaults here for later management\n  policies {\n    id = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id\n      frequency_interval = 1\n      frequency_type     = \"hourly\"\n      retention_unit     = \"days\"\n      retention_value    = 1\n    }\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id\n      frequency_interval = 1\n      frequency_type     = \"daily\"\n      retention_unit     = \"days\"\n      retention_value    = 2\n    }\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id\n      frequency_interval = 4\n      frequency_type     = \"weekly\"\n      retention_unit     = \"weeks\"\n      retention_value    = 3\n    }\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.3.id\n      frequency_interval = 5\n      frequency_type     = \"monthly\"\n      retention_unit     = \"months\"\n      retention_value    = 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to a MongoDB Atlas Cluster with Terraform\nDESCRIPTION: This snippet shows how to add tags to a MongoDB Atlas cluster using Terraform. Tags are key-value pairs that help categorize and manage resources. The `key` and `value` are strings between 1 and 255 characters long. This example showcases adding two tags with different keys and values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_16\n\nLANGUAGE: terraform\nCODE:\n```\ntags {\n        key   = \"Key 1\"\n        value = \"Value 1\"\n  }\n tags {\n        key   = \"Key 2\"\n        value = \"Value 2\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Import Backup Compliance Policy using Terraform\nDESCRIPTION: This code snippet demonstrates how to import an existing MongoDB Atlas Backup Compliance Policy configuration into Terraform using the `terraform import` command.  The project ID is required to identify the specific policy to be imported. This allows management of existing Atlas resources through Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_backup_compliance_policy.backup_policy 5d0f1f73cf09a29120e173cf\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the `terraform destroy` command to deprovision the infrastructure resources in MongoDB Atlas. This removes all resources created by the Terraform configuration to avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Add Policies to Existing Backup Schedule - Terraform\nDESCRIPTION: This example shows how to add multiple policy items (hourly, daily, weekly, monthly, and yearly) to an existing `mongodbatlas_cloud_backup_schedule` resource.  It assumes the cluster already exists with cloud backup enabled and a previous schedule (potentially without policy items) has been defined. This snippet demonstrates the variety of backup intervals and retention options available.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_schedule.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_backup_schedule resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n  \n  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource\n  policy_item_hourly {\n    frequency_interval = 1        #accepted values = 1, 2, 4, 6, 8, 12 -> every n hours\n    retention_unit     = \"days\"\n    retention_value    = 1\n  }\n  policy_item_daily {\n    frequency_interval = 1        #accepted values = 1 -> every 1 day\n    retention_unit     = \"days\"\n    retention_value    = 2\n  }\n  policy_item_weekly {\n    frequency_interval = 4        # accepted values = 1 to 7 -> every 1=Monday,2=Tuesday,3=Wednesday,4=Thursday,5=Friday,6=Saturday,7=Sunday day of the week\n    retention_unit     = \"weeks\"\n    retention_value    = 3\n  }\n  policy_item_monthly {\n    frequency_interval = 5        # accepted values = 1 to 28 -> 1 to 28 every nth day of the month  \n                                  # accepted values = 40 -> every last day of the month\n    retention_unit     = \"months\"\n    retention_value    = 4\n  }\n  policy_item_yearly {\n    frequency_interval = 1        # accepted values = 1 to 12 -> 1st day of nth month  \n    retention_unit     = \"years\"\n    retention_value    = 1\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Configuration with Third-Party Integration\nDESCRIPTION: This example demonstrates how to create an alert configuration using a third-party integration, specifically PagerDuty, with the `mongodbatlas_alert_configuration` resource.  It uses a data source to fetch the integration ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/alert_configuration.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_third_party_integration\" \"test\" {\n    project_id = \"PROJECT ID\"\n    type = \"PAGER_DUTY\"\n}\n\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"PROJECT ID\"\n  enabled    = true\n  event_type = \"USERS_WITHOUT_MULTI_FACTOR_AUTH\"\n\n  notification {\n    type_name     = \"PAGER_DUTY\"\n    integration_id = data.mongodbatlas_third_party_integration.test.id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Resource Policy IDs in Terraform\nDESCRIPTION: This Terraform code defines an output variable that maps the names of the retrieved resource policies to their corresponding IDs. It uses a `for` expression to iterate over the results of the `mongodbatlas_resource_policies` data source. This allows for referencing policy IDs in other parts of the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"policy_ids\" {\n  value = { for policy in data.mongodbatlas_resource_policies.this.results : policy.name => policy.id }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database User with Password Authentication in Terraform\nDESCRIPTION: This snippet demonstrates how to create a MongoDB Atlas database user with password authentication. It defines the username, password, project ID, authentication database, and roles for the user. It also includes labels and scopes to further define user access.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"test-acc-username\"\n  password           = \"test-acc-password\"\n  project_id         = \"<PROJECT-ID>\"\n  auth_database_name = \"admin\"\n\n  roles {\n    role_name     = \"readWrite\"\n    database_name = \"dbforApp\"\n  }\n\n  roles {\n    role_name     = \"readAnyDatabase\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"My Key\"\n    value = \"My Value\"\n  }\n\n  scopes {\n    name   = \"My cluster name\"\n    type = \"CLUSTER\"\n  }\n\n  scopes {\n    name   = \"My second cluster name\"\n    type = \"CLUSTER\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create an AWS Cluster\nDESCRIPTION: This example shows how to create a MongoDB Atlas cluster on AWS. It defines a replica set with specific regions and provider settings, enabling cloud backups and auto-scaling.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"cluster-test\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"cluster-test\"\n  cluster_type = \"REPLICASET\"\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n  cloud_backup = true\n  auto_scaling_disk_gb_enabled = true\n  mongo_db_major_version       = \"7.0\"\n\n  # Provider Settings \"block\"\n  provider_name               = \"AWS\"\n  provider_instance_size_name = \"M40\"\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration with User to DN Mapping (Terraform)\nDESCRIPTION: This Terraform configuration sets up LDAP authentication with user-to-DN mapping for a MongoDB Atlas project. It includes specifications for hostname, port, bind username, bind password, CA certificate, authorization query template, and user-to-DN mapping. The `user_to_dn_mapping` block maps LDAP usernames to Distinguished Names using a regular expression and an LDAP query.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/ldap_configuration.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORG ID\"\n}\n\nresource \"mongodbatlas_ldap_configuration\" \"test\" {\n  project_id             = mongodbatlas_project.test.id\n  authentication_enabled = true\n  hostname               = \"HOSTNAME\"\n  port                   = 636\n  bind_username          = \"USERNAME\"\n  bind_password          = \"PASSWORD\"\n  ca_certificate         = \"CA CERTIFICATE\"\n  authz_query_template   = \"{USER}?memberOf?base\"\n  user_to_dn_mapping {\n    match      = \"(.+)\"\n    ldap_query = \"DC=example,DC=com??sub?(userPrincipalName={0})\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Project\nDESCRIPTION: This Terraform configuration defines a MongoDB Atlas project using the `mongodbatlas_project` resource. It requires the `name` and `org_id` attributes to be set. The project ID will be used in subsequent resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"example\" {\n  name   = \"project-name\"\n  org_id = var.org_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Atlas Auditing\nDESCRIPTION: This Terraform configuration creates an auditing resource for a MongoDB Atlas project.  It specifies the project ID, audit filter, whether to audit authorization successes, and whether auditing is enabled. The audit_filter uses a JSON format to specify the auditing criteria.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/auditing.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_auditing\" \"test\" {\n\t\tproject_id                  = \"<project-id>\"\n\t\taudit_filter                = \"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\"\n\t\taudit_authorization_success = false\n\t\tenabled                     = true\n\t}\n```\n\n----------------------------------------\n\nTITLE: Advanced Cluster Resource with Backup Enabled in Terraform\nDESCRIPTION: Defines a `mongodbatlas_advanced_cluster` resource to configure a MongoDB Atlas cluster with cloud backup enabled. It specifies project ID, cluster name, cluster type, and replication configurations, setting `backup_enabled` to true to enable cloud backup snapshots. This enables creation of cloud backup schedules associated with the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_schedule.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Load Sample Data via Atlas CLI\nDESCRIPTION: This bash command uses the Atlas CLI to load sample data into a specified Atlas cluster. Replace `<clusterName>` with the name of your cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_data_lake_pipeline/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\natlas clusters loadSampleData <clusterName>\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Confluent Privatelink Endpoint using Terraform\nDESCRIPTION: This snippet demonstrates how to create a Privatelink Endpoint for Streams using the mongodbatlas_stream_privatelink_endpoint resource, integrating with Confluent Cloud on AWS. It includes resource definitions for Confluent Environment, Network, Private Link Access, and Kafka Cluster. It uses variables such as project_id, aws_region, subnets_to_privatelink, and aws_account_id.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_privatelink_endpoint.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"confluent_environment\" \"staging\" {\n  display_name = \"Staging\"\n}\n\nresource \"confluent_network\" \"private_link\" {\n  display_name     = \"terraform-test-private-link-network-manual\"\n  cloud            = \"AWS\"\n  region           = var.aws_region\n  connection_types = [\"PRIVATELINK\"]\n  zones            = keys(var.subnets_to_privatelink)\n  environment {\n    id = confluent_environment.staging.id\n  }\n  dns_config {\n    resolution = \"PRIVATE\"\n  }\n}\n\nresource \"confluent_private_link_access\" \"aws\" {\n  display_name = \"example-private-link-access\"\n  aws {\n    account = var.aws_account_id\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"confluent_kafka_cluster\" \"dedicated\" {\n  display_name = \"example-dedicated-cluster\"\n  availability = \"MULTI_ZONE\"\n  cloud        = confluent_network.private_link.cloud\n  region       = confluent_network.private_link.region\n  dedicated {\n    cku = 2\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id          = var.project_id\n  dns_domain          = confluent_network.private_link.dns_domain\n  provider_name       = \"AWS\"\n  region              = var.aws_region\n  vendor              = \"CONFLUENT\"\n  service_endpoint_id = confluent_network.private_link.aws[0].private_link_endpoint_service\n  dns_sub_domain      = confluent_network.private_link.zonal_subdomains\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoints\" \"plural_datasource\" {\n  project_id = var.project_id\n}\n\noutput \"interface_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.interface_endpoint_id\n}\n\noutput \"interface_endpoint_ids\" {\n  value = data.mongodbatlas_stream_privatelink_endpoints.plural_datasource.results[*].interface_endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Cluster: Initial Auto-Scaling Configuration (Terraform)\nDESCRIPTION: This Terraform code demonstrates an initial configuration for auto-scaling in a MongoDB Atlas cluster. It enables disk and compute auto-scaling, including scale-down for compute. The snippet also defines the minimum and maximum instance sizes for compute auto-scaling.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_29\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nauto_scaling = {\n  disk_gb_enabled = true\n  compute_enabled = true\n  compute_scale_down_enabled = true\n  compute_min_instance_size = \"M30\"\n  compute_max_instance_size = \"M50\"\n}\n...\n```\n\n----------------------------------------\n\nTITLE: AWS Serverless PrivateLink Endpoint Configuration with Terraform\nDESCRIPTION: This Terraform configuration creates a `mongodbatlas_privatelink_endpoint_serverless` resource for an AWS environment. It depends on the `mongodbatlas_serverless_instance` resource and sets the `project_id`, `instance_name`, and `provider_name` attributes.  The project ID must be a valid 24-digit hexadecimal string. The Serverless Instance resource defines settings such as the AWS region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_serverless.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AWS\"\n}\n\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AWS\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST_1\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Atlas Cloud Backup Snapshot\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas advanced cluster and then triggers an on-demand cloud backup snapshot of that cluster. The `backup_enabled` argument must be set to `true` when defining the cluster for snapshots to work. The `retention_in_days` argument specifies how long the snapshot should be retained.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n\n  timeouts { // optional\n    create = \"1h15m\"\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_backup_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_backup_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_backup_snapshot.test.snapshot_id\n  delivery_type_config {\n    download = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Cluster with Backup & Overwrite Default Policy - Terraform\nDESCRIPTION: This example creates a new MongoDB Atlas cluster with cloud backup enabled and simultaneously overwrites the default cloud backup policy with a custom policy that includes hourly and daily policy items. It demonstrates how to define `policy_item_hourly` and `policy_item_daily` within the `mongodbatlas_cloud_backup_schedule` resource.  The `backup_enabled` attribute must be set to `true` in the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_schedule.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_backup_schedule resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n\n  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource\n  policy_item_hourly {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 1\n  }\n  policy_item_daily {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import MongoDB Atlas Alert Configuration with Terraform\nDESCRIPTION: Shows how to import an existing MongoDB Atlas alert configuration into Terraform using the project ID and alert configuration ID. Third-party notification credentials are not imported and require the `notifier_id` for updates without providing original credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/alert_configuration.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform import mongodbatlas_alert_configuration.test 5d0f1f74cf09a29120e123cd-5d0f1f74cf09a29120e1fscg\n```\n\n----------------------------------------\n\nTITLE: Federated Settings Org Config Resource and Data Source Example\nDESCRIPTION: This example demonstrates how to use the `mongodbatlas_federated_settings_org_config` resource and then retrieve org configs using the `mongodbatlas_federated_settings_org_configs` data source. It configures a federated settings org config with domain restrictions, role grants, and data access identity provider IDs, then retrieves the configurations based on the federation settings ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_configs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_config\" \"org_connection\" {\n  federation_settings_id            = \"627a9687f7f7f7f774de306f14\"\n  org_id                            = \"627a9683ea7ff7f74de306f14\"\n  data_access_identity_provider_ids = [\"64d613677e1ad50839cce4db\"]\n  domain_restriction_enabled        = false\n  domain_allow_list                 = [\"mydomain.com\"]\n  post_auth_role_grants             = [\"ORG_MEMBER\"]\n  identity_provider_id              = \"0oaqyt9fc2ySTWnA0357\"\n}\n\ndata \"mongodbatlas_federated_settings_org_configs\" \"org_configs_ds\" {\n  federation_settings_id = data.mongodbatlas_federated_settings_org_config.org_connection.federation_settings_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Push-Based Log Export with Terraform\nDESCRIPTION: This Terraform configuration sets up a MongoDB Atlas project, configures cloud provider access (AWS IAM role), and then sets up push-based log export to an S3 bucket.  It requires the `mongodbatlas` provider and AWS provider to be configured, and relies on existing AWS resources like an IAM role and an S3 bucket. It defines resources to create a MongoDB Atlas project, cloud provider access setup, cloud provider access authorization, and the push-based log export configuration itself.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/push_based_log_export.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"project-tf\" {\n  name   = var.atlas_project_name\n  org_id = var.atlas_org_id\n}\n\n# Set up cloud provider access in Atlas using the created IAM role\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n  project_id    = mongodbatlas_project.project-tf.id\n  provider_name = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n  project_id = mongodbatlas_project.project-tf.id\n  role_id    = mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n  aws {\n    iam_assumed_role_arn = aws_iam_role.test_role.arn\n  }\n}\n\n# Set up push-based log export with authorized IAM role\nresource \"mongodbatlas_push_based_log_export\" \"test\" {\n  project_id  = mongodbatlas_project.project-tf.id\n  bucket_name = aws_s3_bucket.log_bucket.bucket\n  iam_role_id = mongodbatlas_cloud_provider_access_authorization.auth_role.role_id\n  prefix_path = \"push-based-log-test\"\n}\n\ndata \"mongodbatlas_push_based_log_export\" \"test\" {\n  project_id = mongodbatlas_push_based_log_export.test.project_id\n}\n\noutput \"test\" {\n  value = data.mongodbatlas_push_based_log_export.test.prefix_path\n}\n```\n\n----------------------------------------\n\nTITLE: Create an AWS Free Tier Cluster\nDESCRIPTION: This example shows how to provision a free-tier (M0) MongoDB Atlas cluster on AWS. The provider is set to TENANT and the backing provider is specified as AWS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"cluster-test\" {\n  project_id              = \"<YOUR-PROJECT-ID>\"\n  name                    = \"cluster-test-global\"\n\n  # Provider Settings \"block\"\n  provider_name = \"TENANT\"\n  backing_provider_name = \"AWS\"\n  provider_region_name = \"US_EAST_1\"\n  provider_instance_size_name = \"M0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Global Cluster\nDESCRIPTION: This example demonstrates how to create a global, geo-sharded MongoDB Atlas cluster on AWS.  It configures multiple replication specifications across different geographical zones, enabling data locality and redundancy.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"cluster-test\" {\n  project_id              = \"<YOUR-PROJECT-ID>\"\n  name                    = \"cluster-test-global\"\n  num_shards              = 1\n  cloud_backup            = true\n  cluster_type            = \"GEOSHARDED\"\n\n  # Provider Settings \"block\"\n  provider_name               = \"AWS\"\n  provider_instance_size_name = \"M30\"\n\n  replication_specs {\n    zone_name  = \"Zone 1\"\n    num_shards = 2\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n\n  replication_specs {\n    zone_name  = \"Zone 2\"\n    num_shards = 2\n    regions_config {\n      region_name     = \"EU_CENTRAL_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Search Deployment\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas Search Deployment resource. It references the previously created project and cluster, and specifies the instance size and node count for the search nodes. A `project_id`, `cluster_name` and `specs` are required.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_search_deployment\" \"example\" {\n  project_id   = mongodbatlas_project.example.id\n  cluster_name = mongodbatlas_advanced_cluster.example.name\n  specs = [\n    {\n      instance_size = \"S20_HIGHCPU_NVME\"\n      node_count    = 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Configuration with Threshold Config\nDESCRIPTION: This example demonstrates creating an alert configuration with a general threshold configuration using the `mongodbatlas_alert_configuration` resource. It triggers an alert when the replication oplog window is running out and falls below 1 hour.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/alert_configuration.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  event_type = \"REPLICATION_OPLOG_WINDOW_RUNNING_OUT\"\n  enabled    = true\n\n  notification {\n    type_name     = \"GROUP\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = false\n    email_enabled = true\n    roles         = [\"GROUP_CLUSTER_MANAGER\"]\n  }\n\n  matcher {\n    field_name = \"CLUSTER_NAME\"\n    operator   = \"EQUALS\"\n    value      = \"my-cluster\"\n  }\n\n  threshold_config {\n    operator    = \"LESS_THAN\"\n    threshold   = 1\n    units       = \"HOURS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Restore Job Example Usage - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to create a snapshot, restore it to a new cluster using `mongodbatlas_cloud_provider_snapshot_restore_job`, and then retrieve the restore job's details using a `data` block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot_restore_job.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id          = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name      = \"MyCluster\"\n  description       = \"MyDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name = \"MyCluster\"\n  snapshot_id  = \"${mongodbatlas_cloud_provider_snapshot.test.id}\"\n  delivery_type {\n    automated = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  }\n}\n\ndata \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id     = mongodbatlas_cloud_provider_snapshot_restore_job.test.project_id\n  cluster_name = mongodbatlas_cloud_provider_snapshot_restore_job.test.cluster_name\n  job_id       = mongodbatlas_cloud_provider_snapshot_restore_job.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Atlas Credentials in terraform.tfvars - Terraform\nDESCRIPTION: This snippet shows how to define MongoDB Atlas credentials within a `terraform.tfvars` file.  This approach allows for a more structured and potentially secure way to manage sensitive information compared to environment variables. The variables `public_key`, `private_key`, and `atlas_org_id` need to be assigned appropriate values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/multi-cloud/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Online Archive with Custom Criteria in Terraform\nDESCRIPTION: This Terraform configuration creates an online archive with custom query-based criteria. It defines partition fields and specifies a query to archive documents where the 'department' field is 'engineering'. It requires variables for project_id, cluster_name, coll_name, and db_name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/online_archive.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_online_archive\" \"test\" {\n    project_id   = var.project_id\n    cluster_name = var.cluster_name\n    coll_name    = var.collection_name\n    db_name      = var.database_name\n\n    partition_fields {\n        field_name = \"firstName\"\n        order      = 0 \n    }\n\n    partition_fields {\n        field_name = \"secondName\"\n        order      = 1 \n    }\n\n    criteria {\n        type  = \"CUSTOM\"\n        query =  \"{ \\\"department\\\": \\\"engineering\\\" }\"\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IP Access List Entry Using IP Address in Terraform\nDESCRIPTION: This code snippet shows how to create a MongoDB Atlas project IP access list entry using a single IP address. It requires a `project_id` and sets the `ip_address` and `comment` attributes. This allows access from the specified IP address to the clusters within the project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_ip_access_list.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  ip_address = \"2.3.4.5\"\n  comment    = \"ip address for tf acc testing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processor with Sample Source - Terraform\nDESCRIPTION: Defines a MongoDB Atlas Stream Processor that uses a sample connection as its source and emits data to a cluster connection. The pipeline specifies the data transformation logic, using $source and $emit stages. The stream processor is initialized in a 'STARTED' state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-sample-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"sampleProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-sample.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"sample\", \"coll\" : \"solar\", \"timeseries\" : { \"timeField\" : \"_ts\" } } }\n  ])\n  state = \"STARTED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the `terraform plan` command to preview the changes that will be made to the infrastructure. This allows users to review the changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Cluster: Modified Auto-Scaling Configuration (Terraform)\nDESCRIPTION: This Terraform code updates the auto-scaling configuration for a MongoDB Atlas cluster to disable both disk and compute auto-scaling. The disk_gb_enabled and compute_enabled attributes are explicitly set to false instead of removing the entire auto_scaling block, promoting clarity and avoiding potential issues.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_30\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nauto_scaling = {\n  disk_gb_enabled = false\n  compute_enabled = false\n  compute_scale_down_enabled = false\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Reading Auditing Configuration with mongodbatlas_auditing Data Source Terraform\nDESCRIPTION: This Terraform data source retrieves the auditing configuration for a MongoDB Atlas project. It requires the `project_id` which is obtained from the id of the resource `mongodbatlas_auditing.test`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/auditing.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_auditing\" \"test\" {\n\t\t\tproject_id = mongodbatlas_auditing.test.id\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Import Cloud Backup Snapshot Export Bucket\nDESCRIPTION: This example shows how to import an existing Cloud Backup Snapshot Export Bucket into Terraform using the `terraform import` command.  The bucket is identified by a combination of `PROJECTID` and `BUCKETID`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_export_bucket.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nterraform import mongodbatlas_cloud_backup_snapshot_export_bucket.test 5d0f1f73cf09a29120e173cf-5d116d82014b764445b2f9b5\n```\n\n----------------------------------------\n\nTITLE: Invite user as Organization Owner (Terraform)\nDESCRIPTION: This Terraform configuration invites a user to an Atlas organization with the `ORG_OWNER` role. The `username` is the email address of the invited user, and `org_id` is the unique identifier of the organization. The `roles` attribute specifies the roles to be assigned to the user upon acceptance of the invitation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/org_invitation.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_org_invitation\" \"test0\" {\n  username    = \"test0-acc-username\"\n  org_id      = \"<ORG-ID>\"\n  roles       = [ \"ORG_OWNER\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags for a Serverless Instance in MongoDB Atlas\nDESCRIPTION: This Terraform code demonstrates how to configure tags for a Serverless Instance within MongoDB Atlas. Tags are key-value pairs used for categorizing and managing resources. Each tag consists of a 'key' and a 'value'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/serverless_instance.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ntags {\n        key   = \"Key 1\"\n        value = \"Value 1\"\n  }\n tags {\n        key   = \"Key 2\"\n        value = \"Value 2\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Create Private Link Endpoint Service with AWS\nDESCRIPTION: This Terraform configuration creates a Private Link Endpoint, AWS VPC Endpoint, and a Private Link Endpoint Service in MongoDB Atlas, using AWS as the provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = \"<PROJECT_ID>\"\n  provider_name = \"AWS\"\n  region        = \"US_EAST_1\"\n}\n\nresource \"aws_vpc_endpoint\" \"ptfe_service\" {\n  vpc_id             = \"vpc-7fc0a543\"\n  service_name       = mongodbatlas_privatelink_endpoint.test.endpoint_service_name\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-de0406d2\"]\n  security_group_ids = [\"sg-3f238186\"]\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id          = mongodbatlas_privatelink_endpoint.test.project_id\n  private_link_id     = mongodbatlas_privatelink_endpoint.test.private_link_id\n  endpoint_service_id = aws_vpc_endpoint.ptfe_service.id\n  provider_name       = \"AWS\"\n}\n\ndata \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id            = mongodbatlas_privatelink_endpoint_service.test.project_id\n  private_link_id       = mongodbatlas_privatelink_endpoint_service.test.private_link_id\n  interface_endpoint_id = mongodbatlas_privatelink_endpoint_service.test.interface_endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Database User with OIDC Federated Authentication in Terraform\nDESCRIPTION: This snippet illustrates how to create a MongoDB Atlas database user with OIDC federated authentication using Terraform. It sets the `oidc_auth_type` to `IDP_GROUP` and defines the `username` in the format of 'Atlas OIDC IdP ID/IdP group name'. The snippet also includes the project ID, authentication database, and role assignments.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"64d613677e1ad50839cce4db/testUserOr\"\n  project_id         = \"6414908c207f4d22f4d8f232\"\n  auth_database_name = \"admin\"\n  oidc_auth_type     = \"IDP_GROUP\"\n\n  roles {\n    role_name     = \"readWriteAnyDatabase\"\n    database_name = \"admin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migrating Advanced Configuration Terraform\nDESCRIPTION: This snippet illustrates how to migrate the `advanced_configuration` block to a single attribute object format.  This requires removing the block structure and directly assigning the configuration settings to the attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nadvanced_configuration {\n  default_write_concern = \"majority\"\n  javascript_enabled    = true\n}  \n```\n\nLANGUAGE: terraform\nCODE:\n```\nadvanced_configuration = {\n  default_write_concern = \"majority\"\n  javascript_enabled    = true\n}  \n```\n\n----------------------------------------\n\nTITLE: Create AWS Cloud Backup Snapshot Export Bucket\nDESCRIPTION: This Terraform code creates a Cloud Backup Snapshot Export Bucket for AWS. It requires the project ID, IAM role ID, bucket name, and cloud provider to be specified.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_export_bucket.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  iam_role_id = \"{IAM_ROLE_ID}\"\n  bucket_name = \"example-bucket\"\n  cloud_provider = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Snapshot Resource and Data Source Example - Terraform\nDESCRIPTION: Defines a `mongodbatlas_cloud_provider_snapshot` resource and uses the group_id and cluster_name attributes in a `mongodbatlas_cloud_provider_snapshots` data source.  It demonstrates retrieving a list of snapshots based on the cluster name and project ID. Requires `mongodbatlas_cloud_provider_snapshot` resource to be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshots.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  group_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n  description       = \"SomeDescription\"\n  retention_in_days = 1\n}\n\ndata \"mongodbatlas_cloud_provider_snapshots\" \"test\" {\n  group_id     = mongodbatlas_cloud_provider_snapshots.test.group_id\n  cluster_name = mongodbatlas_cloud_provider_snapshots.test.cluster_name\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Synonyms in Terraform\nDESCRIPTION: This code snippet configures synonym mappings for MongoDB Atlas search using Terraform. It specifies the analyzer to use, the name of the synonym mapping, and the source collection where the synonym definitions are stored.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_11\n\nLANGUAGE: terraform\nCODE:\n```\n  synonyms {\n   analyzer = \"lucene.simple\"\n   name = \"synonym_test\"\n   source_collection = \"collection_test\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS and MongoDB Atlas Credentials using environment variables (Bash)\nDESCRIPTION: This snippet shows how to set AWS and MongoDB Atlas credentials using environment variables. This is one method of authenticating with the providers.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Create Private Endpoint Service with Azure\nDESCRIPTION: This example shows how to create a private endpoint service with Azure.\nIt configures a MongoDB Atlas private endpoint, an Azure private endpoint, and then connects them with the `mongodbatlas_privatelink_endpoint_service` resource.\nIt utilizes data sources to fetch existing Azure resources and requires appropriate Azure resource group and subnet setup.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AZURE\"\n  region        = \"eastus2\"\n}\n\nresource \"azurerm_private_endpoint\" \"test\" {\n  name                = \"endpoint-test\"\n  location            = data.azurerm_resource_group.test.location\n  resource_group_name = var.resource_group_name\n  subnet_id           = azurerm_subnet.test.id\n  private_service_connection {\n    name                           = mongodbatlas_privatelink_endpoint.test.private_link_service_name\n    private_connection_resource_id = mongodbatlas_privatelink_endpoint.test.private_link_service_resource_id\n    is_manual_connection           = true\n    request_message                = \"Azure Private Link test\"\n  }\n\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service\" \"test\" {\n  project_id                  = mongodbatlas_privatelink_endpoint.test.project_id\n  private_link_id             = mongodbatlas_privatelink_endpoint.test.private_link_id\n  endpoint_service_id         = azurerm_private_endpoint.test.id\n  private_endpoint_ip_address = azurerm_private_endpoint.test.private_service_connection.0.private_ip_address\n  provider_name               = \"AZURE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Stream Processor (Sample to Cluster) - Terraform\nDESCRIPTION: Creates a MongoDB Atlas Stream Processor that transfers data from a Sample connection to a Cluster connection. It defines a pipeline using `jsonencode` that specifies the source and emit connections, along with database and collection details. The processor is set to the 'STARTED' state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-sample-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"sampleProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-sample.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"sample\", \"coll\" : \"solar\", \"timeseries\" : { \"timeField\" : \"_ts\" } } }\n  ])\n  state = \"STARTED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Metric Threshold Alert Configuration in Terraform\nDESCRIPTION: This Terraform resource defines an alert configuration for MongoDB Atlas that triggers when a metric (ASSERT_REGULAR) exceeds a threshold. It configures notifications to be sent via GROUP (email enabled).  The alert is specific to SECONDARY hosts and ports.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/alert_configuration.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  event_type = \"OUTSIDE_METRIC_THRESHOLD\"\n  enabled    = true\n\n  notification {\n    type_name     = \"GROUP\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = false\n    email_enabled = true\n  }\n\n  matcher {\n    field_name = \"HOSTNAME_AND_PORT\"\n    operator   = \"EQUALS\"\n    value      = \"SECONDARY\"\n  }\n\n  metric_threshold_config {\n    metric_name = \"ASSERT_REGULAR\"\n    operator    = \"LESS_THAN\"\n    threshold   = 99.0\n    units       = \"RAW\"\n    mode        = \"AVERAGE\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Data Source with Cluster Dependency\nDESCRIPTION: This code snippet demonstrates how to create a Terraform data source for a MongoDB Atlas cluster and establishes a dependency on a private link endpoint service. This ensures that the data source is only accessed after the private link endpoint service has been successfully created, guaranteeing the availability of `connection_strings` following `terraform apply`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cluster.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cluster\" \"example_cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  depends_on = [mongodbatlas_privatelink_endpoint_service.example_endpoint]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Data Process Region (Terraform)\nDESCRIPTION: This example demonstrates how to specify the data processing region for a Federated Database Instance. It sets the cloud provider to AWS and the region to OREGON_USA. This setting is crucial for data residency and compliance requirements.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_database_instance.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_database_instance\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name = \"NAME OF THE FEDERATED DATABASE INSTANCE\"\n\n  data_process_region {\n    cloud_provider = \"AWS\"\n    region = \"OREGON_USA\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Backup Configuration Example\nDESCRIPTION: This code snippet shows an example of how to disable legacy backups and enable cloud backups simultaneously in a Terraform configuration. This approach is important because disabling legacy backups alone will let Atlas delete stored snapshots. To preserve these snapshots, it's necessary to disable legacy backups and enable cloud backups in the same Terraform apply action. This configuration assumes that the `backup_enabled` and `cloud_backup` arguments are attributes of a MongoDB Atlas cluster resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_13\n\nLANGUAGE: Terraform\nCODE:\n```\nbackup_enabled = \"false\"\ncloud_backup = \"true\"\n```\n\n----------------------------------------\n\nTITLE: Querying Stream Connections with Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_stream_connections` data source to retrieve all connections for a specified stream instance within a MongoDB Atlas project. The `project_id` and `instance_name` arguments are required to identify the target project and stream instance. The resulting stream connections can then be used for further configuration or output purposes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_connections.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_stream_connections\" \"test\" {\n    project_id = \"<PROJECT_ID>\"\n    instance_name = \"<INSTANCE_NAME>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Set AWS Credentials as Environment Variables\nDESCRIPTION: Defines the environment variables required for authenticating with AWS. Replace `<AWS_SECRET_ACCESS_KEY>` and `<AWS_ACCESS_KEY_ID>` with your actual AWS credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport AWS_SECRET_ACCESS_KEY=\"<AWS_SECRET_ACCESS_KEY>\"\nexport AWS_ACCESS_KEY_ID=\"<AWS_ACCESS_KEY_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Create point in time restore job using Terraform\nDESCRIPTION: This Terraform configuration creates a point-in-time restore job. It requires a MongoDB Atlas cluster and a cloud backup snapshot. The restore job restores the cluster to a specific point in time, defined by `point_in_time_utc_seconds`, to a target cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_restore_job.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.cluster_test.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.cluster_test.name\n  description       = \"My description\"\n  retention_in_days = \"1\"\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  count        = (var.point_in_time_utc_seconds == 0 ? 0 : 1)\n  project_id   = mongodbatlas_cloud_backup_snapshot.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_snapshot.test.cluster_name\n  snapshot_id  = mongodbatlas_cloud_backup_snapshot.test.id\n\n  delivery_type_config {\n    point_in_time             = true\n    target_cluster_name       = mongodbatlas_advanced_cluster.cluster_test.name\n    target_project_id         = mongodbatlas_advanced_cluster.cluster_test.project_id\n    point_in_time_utc_seconds = var.point_in_time_utc_seconds\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Private Endpoint Service for Data Federation and Online Archive in MongoDB Atlas using Terraform\nDESCRIPTION: This Terraform configuration creates a private endpoint service for Data Federation and Online Archive in MongoDB Atlas.  It requires a MongoDB Atlas project, an AWS VPC endpoint, and necessary configuration parameters. The resource establishes a private link between the Atlas Data Federation/Online Archive service and the specified AWS VPC endpoint.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service_data_federation_online_archive.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"atlas-project\" {\n  org_id = var.atlas_org_id\n  name   = var.atlas_project_name\n}\n\nresource \"aws_vpc_endpoint\" \"test\" {\n  vpc_id             = \"vpc-7fc0a543\"\n  service_name       = \"<SERVICE-NAME>\"\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-de0406d2\"]\n  security_group_ids = [\"sg-3f238186\"]\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service_data_federation_online_archive\" \"test\" {\n  project_id    = mongodbatlas_project.atlas-project.id\n  endpoint_id   = aws_vpc_endpoint.test.id\n  provider_name = \"AWS\"\n  comment       = \"Test\"\n  region        = \"US_EAST_1\"\n  customer_endpoint_dns_name = aws_vpc_endpoint.test.dns_entry[0].dns_name\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Federated Database with S3 Bucket (Terraform)\nDESCRIPTION: This example shows how to configure a Federated Database Instance to use an Amazon S3 bucket as a storage database.  It configures both cloud provider configuration and storage stores to connect to an S3 bucket, allowing data in the bucket to be queried via the federated database. The `aws` block inside `cloud_provider_config` requires a role ID and a test S3 bucket.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_database_instance.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_database_instance\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name = \"TENANT NAME OF THE FEDERATED DATABASE INSTANCE\"\n  cloud_provider_config {\n    aws {\n      role_id = \"AWS ROLE ID\"\n      test_s3_bucket = \"S3 BUCKET NAME\"\n    }\n\t}\n  storage_databases {\n    name = \"VirtualDatabase0\"\n    collections {\n      name = \"NAME OF THE COLLECTION\"\n      data_sources {\n          collection = \"COLLECTION IN THE CLUSTER\"\n          database = \"DB IN THE CLUSTER\"\n          store_name =  \"CLUSTER NAME\"\n      }\n      data_sources {\n          store_name = \"S3 BUCKET NAME\"\n          path = \"S3 BUCKET PATH\"\n      }\n    }\n  }\n\n  storage_stores {\n    name = \"STORE 1 NAME\"\n    cluster_name = \"CLUSTER NAME\"\n    project_id = \"PROJECT ID\"\n    provider = \"atlas\"\n    read_preference {\n      mode = \"secondary\"\n    }\n  }\n\n  storage_stores {\n    bucket = \"STORE 2 NAME\"\n    delimiter = \"/\"\n    name = \"S3 BUCKET NAME\"\n    prefix = \"S3 BUCKET PREFIX\"\n    provider = \"s3\"\n    region = \"AWS REGION\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Serverless Instance in MongoDB Atlas using Terraform\nDESCRIPTION: This Terraform resource creates a basic Serverless Instance in MongoDB Atlas. It requires the project ID, instance name, and provider settings like backing provider, provider name and region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/serverless_instance.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n  project_id   = \"<PROJECT_ID>\"\n  name         = \"<SERVERLESS_INSTANCE_NAME>\"\n\n  provider_settings_backing_provider_name = \"AWS\"\n  provider_settings_provider_name = \"SERVERLESS\"\n  provider_settings_region_name = \"US_EAST_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Private Endpoint Connection Strings with Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to output the `srv_connection_string` for regionalized private endpoints in a MongoDB Atlas cluster.  It leverages local variables to filter the connection strings based on endpoint IDs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  private_endpoints = flatten([for cs in mongodbatlas_advanced_cluster.geosharded.connection_strings : cs.private_endpoint])\n\n  connection_strings_east = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], aws_vpc_endpoint.vpce_east.id)\n  ]\n  connection_strings_west = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], aws_vpc_endpoint.vpce_west.id)\n  ]\n}\n\noutput \"connection_string_east\" {\n  value = length(local.connection_strings_east) > 0 ? local.connection_strings_east[0] : \"\"\n}\noutput \"connection_string_west\" {\n  value = length(local.connection_strings_west) > 0 ? local.connection_strings_west[0] : \"\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Peering Connection Only AWS Terraform\nDESCRIPTION: This example shows how to create a network peering connection when a container already exists, in this case, created as a result of creating an Atlas cluster.  It assumes an AWS provider is configured.  It also demonstrates the creation of the AWS VPC Peering Connection Accepter.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this AWS region\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = local.project_id\n  name           = \"terraform-manually-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"US_EAST_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\n# the following assumes an AWS provider is configured\nresource \"aws_default_vpc\" \"default\" {\n  tags = {\n    Name = \"Default VPC\"\n  }\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"mongo_peer\" {\n  accepter_region_name   = \"us-east-2\"\n  project_id             = local.project_id\n  container_id           = one(values(mongodbatlas_advanced_cluster.test.container_id))\n  provider_name          = \"AWS\"\n  route_table_cidr_block = \"172.31.0.0/16\"\n  vpc_id                 = aws_default_vpc.default.id\n  aws_account_id         = local.AWS_ACCOUNT_ID\n}\n\n# Accept the connection \nresource \"aws_vpc_peering_connection_accepter\" \"aws_peer\" {\n  vpc_peering_connection_id = mongodbatlas_network_peering.mongo_peer.connection_id\n  auto_accept               = true\n\n  tags = {\n    Side = \"Accepter\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tenant Cluster to Dedicated Terraform\nDESCRIPTION: Upgrades a tenant cluster to a dedicated cluster hosted on AWS in the US_EAST_1 region.  The `provider_name` is changed from \"TENANT\" to \"AWS\" and the `backing_provider_name` is removed. The instance size is also upgraded to M10.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n      }\n      provider_name         = \"AWS\"\n      region_name           = \"US_EAST_1\"\n      priority              = 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve MongoDB Atlas API Keys Terraform\nDESCRIPTION: This Terraform data source retrieves a list of API keys for a specified MongoDB Atlas organization. It requires the organization ID and allows for pagination using `page_num` and `items_per_page` arguments. The `org_id` is a required parameter to identify the target organization.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/api_keys.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_api_keys\" \"test\" {\n  org_id = \"<ORG_ID>\"\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Provider with AWS Secrets Manager in Terraform\nDESCRIPTION: This snippet shows how to configure the MongoDB Atlas provider to authenticate with AWS Secrets Manager (AWS SM). It uses the `assume_role` block to specify the IAM role ARN, secret name, and AWS region. It retrieves the API keys from the specified secret in AWS SM.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\n# Configure the MongoDB Atlas Provider to Authenticate with AWS Secrets Manager \nprovider \"mongodbatlas\" {\n  assume_role {\n    role_arn = \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/mdbsts\"\n  }\n  secret_name           = \"mongodbsecret\"\n  // fully qualified secret_name ARN also supported as input \"arn:aws:secretsmanager:af-south-1:<AWS_ACCOUNT_ID>:secret:test789-TO06Hy\" \n  region                = \"us-east-2\"\n  \n  aws_access_key_id     = \"<AWS_ACCESS_KEY_ID>\"\n  aws_secret_access_key = \"<AWS_SECRET_ACCESS_KEY>\"\n  aws_session_token     = \"<AWS_SESSION_TOKEN>\"\n  sts_endpoint          = \"https://sts.us-east-2.amazonaws.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import MongoDB Atlas Cloud Backup Snapshot\nDESCRIPTION: This Terraform command imports an existing MongoDB Atlas cloud backup snapshot into Terraform state.  It requires the `project_id`, `cluster_name`, and `snapshot_id` concatenated with hyphens. Replace `PROJECTID`, `CLUSTERNAME`, and `SNAPSHOTID` with their actual values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_cloud_backup_snapshot.test 5d0f1f73cf09a29120e173cf-MyClusterTest-5d116d82014b764445b2f9b5\n```\n\n----------------------------------------\n\nTITLE: Create ADL PrivateLink Endpoint Service Resource\nDESCRIPTION: This resource creates a MongoDB Atlas PrivateLink endpoint service for Atlas Data Lake (ADL). It requires the project ID, endpoint ID, a comment, the type of resource (DATA_LAKE), and the cloud provider (AWS).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoints_service_adl.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_service_adl\" \"adl_test\" {\n  project_id   = \"<PROJECT_ID>\"\n  endpoint_id  = \"<ENDPOINT_ID>\"\n  comment      = \"Comment for PrivateLink endpoint ADL\"\n  type\t\t = \"DATA_LAKE\"\n  provider_name\t = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing IP Access List Entry in Terraform\nDESCRIPTION: This shows how to import an existing IP Access List entry into Terraform. The import command uses the `project_id` and either the `cidr_block` or the `ip_address` to identify the resource. The format is `project_id-ip_address` or `project_id-cidr_block`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_ip_access_list.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_project_ip_access_list.test 5d0f1f74cf09a29120e123cd-10.242.88.0/21\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying IP Access List with AWS Security Group in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to create and query an IP access list entry using an AWS security group.  It depends on having VPC peering enabled between the Atlas project and the AWS VPC. The configuration creates a network container and peering connection before creating the IP access list entry.  The data source retrieves the access list based on the created resource's attributes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_ip_access_list.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<PROJECT-ID>\"\n  atlas_cidr_block = \"192.168.208.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id             = \"<PROJECT-ID>\"\n  container_id           = mongodbatlas_network_container.test.container_id\n  accepter_region_name   = \"us-east-1\"\n  provider_name          = \"AWS\"\n  route_table_cidr_block = \"172.31.0.0/16\"\n  vpc_id                 = \"vpc-0d93d6f69f1578bd8\"\n  aws_account_id         = \"232589400519\"\n}\n\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id         = \"<PROJECT-ID>\"\n  aws_security_group = \"sg-0026348ec11780bd1\"\n  comment            = \"TestAcc for awsSecurityGroup\"\n\n  depends_on = [mongodbatlas_network_peering.test]\n}\n\ndata \"mongodbatlas_project_ip_access_list\" \"test\" {\n\tproject_id = mongodbatlas_project_ip_access_list.test.project_id\n\taws_security_group = mongodbatlas_project_ip_access_list.test.aws_security_group\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container and Peering Connection GCP Terraform\nDESCRIPTION: This example demonstrates how to create a network container and a network peering connection in GCP using the `mongodbatlas_network_container` and `mongodbatlas_network_peering` resources. It also shows how to create a GCP network peering using `google_compute_network_peering` and create a MongoDB Atlas cluster using `mongodbatlas_advanced_cluster`. The example assumes the GCP provider is configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n# Container example provided but not always required, \n# see network_container documentation for details. \nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = local.project_id\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"GCP\"\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id     = local.project_id\n  container_id   = mongodbatlas_network_container.test.container_id\n  provider_name  = \"GCP\"\n  gcp_project_id = local.GCP_PROJECT_ID\n  network_name   = \"default\"\n}\n\n# the following assumes a GCP provider is configured\ndata \"google_compute_network\" \"default\" {\n  name = \"default\"\n}\n\n# Create the GCP peer\nresource \"google_compute_network_peering\" \"peering\" {\n  name         = \"peering-gcp-terraform-test\"\n  network      = data.google_compute_network.default.self_link\n  peer_network = \"https://www.googleapis.com/compute/v1/projects/${mongodbatlas_network_peering.test.atlas_gcp_project_id}/global/networks/${mongodbatlas_network_peering.test.atlas_vpc_name}\"\n}\n\n# Create the cluster once the peering connection is completed\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = local.project_id\n  name           = \"terraform-manually-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"GCP\"\n      region_name   = \"US_EAST_4\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n\n  depends_on = [ google_compute_network_peering.peering ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Peering Connection Only GCP Terraform\nDESCRIPTION: This example demonstrates how to create a network peering connection in GCP when a container already exists. The container is created as a byproduct of cluster creation. It also configures the necessary GCP resources for peering and assumes the GCP provider is properly configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this GCP \nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = local.project_id\n  name           = \"terraform-manually-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"GCP\"\n      region_name   = \"US_EAST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id       = local.project_id\n  atlas_cidr_block = \"192.168.0.0/18\"\n\n  container_id   = one(values(mongodbatlas_advanced_cluster.test.replication_specs[0].container_id))\n  provider_name  = \"GCP\"\n  gcp_project_id = local.GCP_PROJECT_ID\n  network_name   = \"default\"\n}\n\n# the following assumes a GCP provider is configured\ndata \"google_compute_network\" \"default\" {\n  name = \"default\"\n}\n\n# Create the GCP peer\nresource \"google_compute_network_peering\" \"peering\" {\n  name         = \"peering-gcp-terraform-test\"\n  network      = data.google_compute_network.default.self_link\n  peer_network = \"https://www.googleapis.com/compute/v1/projects/${mongodbatlas_network_peering.test.atlas_gcp_project_id}/global/networks/${mongodbatlas_network_peering.test.atlas_vpc_name}\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Confluent Privatelink Configuration - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to create a Privatelink endpoint for Streams with AWS Confluent using the `mongodbatlas_stream_privatelink_endpoint` resource. It sets up a Confluent environment, network, and Kafka cluster with private link access, then creates the stream privatelink endpoint in MongoDB Atlas, retrieving associated data and outputs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoint.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"confluent_environment\" \"staging\" {\n  display_name = \"Staging\"\n}\n\nresource \"confluent_network\" \"private_link\" {\n  display_name     = \"terraform-test-private-link-network-manual\"\n  cloud            = \"AWS\"\n  region           = var.aws_region\n  connection_types = [\"PRIVATELINK\"]\n  zones            = keys(var.subnets_to_privatelink)\n  environment {\n    id = confluent_environment.staging.id\n  }\n  dns_config {\n    resolution = \"PRIVATE\"\n  }\n}\n\nresource \"confluent_private_link_access\" \"aws\" {\n  display_name = \"example-private-link-access\"\n  aws {\n    account = var.aws_account_id\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"confluent_kafka_cluster\" \"dedicated\" {\n  display_name = \"example-dedicated-cluster\"\n  availability = \"MULTI_ZONE\"\n  cloud        = confluent_network.private_link.cloud\n  region       = confluent_network.private_link.region\n  dedicated {\n    cku = 2\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id          = var.project_id\n  dns_domain          = confluent_network.private_link.dns_domain\n  provider_name       = \"AWS\"\n  region              = var.aws_region\n  vendor              = \"CONFLUENT\"\n  service_endpoint_id = confluent_network.private_link.aws[0].private_link_endpoint_service\n  dns_sub_domain      = confluent_network.private_link.zonal_subdomains\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoints\" \"plural_datasource\" {\n  project_id = var.project_id\n}\n\noutput \"interface_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.interface_endpoint_id\n}\n\noutput \"interface_endpoint_ids\" {\n  value = data.mongodbatlas_stream_privatelink_endpoints.plural_datasource.results[*].interface_endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Create HTTPS Stream Connection - Terraform\nDESCRIPTION: This code snippet demonstrates creating an HTTPS Stream Connection with specified URL and headers. It relies on a stream instance being already defined and its instance name being accessible. Required parameters include the project ID, instance name, connection name, type 'Https', the URL, and optional headers.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-https\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"https_connection_tf_new\"\n  type            = \"Https\"\n  url             = \"https://example.com\"\n  headers = {\n    key1 = \"value1\"\n    key2 = \"value2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrade Flex Cluster - Terraform\nDESCRIPTION: This snippet shows how to upgrade a Flex cluster to a dedicated cluster by changing the provider_name from \"FLEX\" to a specific cloud provider (e.g., AWS) and removing the backing_provider_name. Only the upgrade changes will be applied during the terraform apply. A secondary terraform apply is needed to apply additional changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M10\"\n          }\n          provider_name         = \"AWS\"\n          region_name           = \"US_EAST_1\"\n          priority              = 7\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authorizing Azure Cloud Provider Access in Terraform\nDESCRIPTION: This Terraform code demonstrates how to authorize an Azure IAM role in MongoDB Atlas using the `mongodbatlas_cloud_provider_access_authorization` resource. It depends on the `mongodbatlas_cloud_provider_access_setup` resource to obtain the `project_id` and `role_id`. The `azure` block specifies the Azure Active Directory Application ID, service principal ID, and tenant ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_access.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AZURE\"\n   azure_config {\n      atlas_azure_app_id = \"9f2deb0d-be22-4524-a403-df531868bac0\"\n      service_principal_id = \"22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1\"\n      tenant_id = \"91402384-d71e-22f5-22dd-759e272cdc1c\"\n\t}\n}\n\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n   project_id =  mongodbatlas_cloud_provider_access_setup.setup_only.project_id\n   role_id    =  mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n   azure {\n      atlas_azure_app_id = \"9f2deb0d-be22-4524-a403-df531868bac0\"\n      service_principal_id = \"22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1\"\n      tenant_id = \"91402384-d71e-22f5-22dd-759e272cdc1c\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private Connection String in Terraform\nDESCRIPTION: This Terraform code retrieves the private connection string of an advanced MongoDB Atlas cluster configured with network peering and custom DNS on AWS. It uses the `mongodbatlas_advanced_cluster` resource and accesses the `connection_strings.private` attribute. The expected output is a MongoDB connection string similar to `mongodb://cluster-atlas-shard-00-00-pri.ygo1m.mongodb.net:27017,...`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings.private\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cedar Policy Set for Cloud Region in Terraform\nDESCRIPTION: This Terraform code defines a Cedar policy set that forbids cluster modifications in the `gcp:us-east1` region. It uses the `cedar_policyset` data source to define the policy.  This data source converts the policy configuration into a textual representation that can be used as the `body` of a resource policy.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"cedar_policyset\" \"cloud_region\" {\n  policy {\n    any_principal = true\n    effect        = \"forbid\"\n    action = {\n      type = \" ResourcePolicy::Action\"\n      id   = \"cluster.modify\"\n    }\n    any_resource = true\n    when {\n      text = \"context.cluster.regions.contains(ResourcePolicy::Region::\\\"gcp:us-east1\\\")\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Atlas Cluster Connection String\nDESCRIPTION: This Terraform output retrieves the connection strings for the MongoDB Atlas cluster. The `mongodbatlas_advanced_cluster.cluster.connection_strings` attribute contains various connection string formats.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"atlasclusterstring\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings\n}\n```\n\n----------------------------------------\n\nTITLE: Import Database User with Slashes in Username/DB Name (Method 2)\nDESCRIPTION: Imports a MongoDB Atlas database user into Terraform using the format `project_id/username/auth_database_name`. This method is suitable when neither the username nor the auth database name contain forward slashes. The example imports a database user named `my-username-dash` with authentication database `my-db-name` in project `1112222b3bf99403840e8934`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform import mongodbatlas_database_user.my_user 1112222b3bf99403840e8934/my-username-dash/my-db-name # (2)\n```\n\n----------------------------------------\n\nTITLE: Import Cloud Backup Schedule Terraform\nDESCRIPTION: This snippet shows how to import an existing MongoDB Atlas cloud backup schedule into Terraform using the `terraform import` command. It uses the project ID and cluster name in the format `PROJECTID-CLUSTERNAME`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_schedule.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_cloud_backup_schedule.test 5d0f1f73cf09a29120e173cf-MyClusterTest\n```\n\n----------------------------------------\n\nTITLE: Query Organization by ID - Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_organization` data source to retrieve information about a specific MongoDB Atlas organization using its unique ID. The `org_id` argument is required to specify the organization to retrieve.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/organization.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_organization\" \"test\" {\n  org_id = \"<org_id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Stream Processor (Cluster to Kafka) - Terraform\nDESCRIPTION: Defines a Stream Processor that transfers data from a Cluster connection to a Kafka connection. The pipeline configuration specifies the source and emit connections, along with the target Kafka topic. The processor is initialized in the 'CREATED' state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-cluster-to-kafka-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"clusterProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-cluster.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_from_cluster\" } }\n  ])\n  state = \"CREATED\"\n}\n```\n\n----------------------------------------\n\nTITLE: New Backup Schedule Configuration Terraform\nDESCRIPTION: This example demonstrates the new `mongodbatlas_cloud_backup_schedule` resource configuration.  It configures backup policies for a MongoDB Atlas cluster, defining reference hour, minute, restore window, and individual policy items for hourly, daily, weekly, and monthly backups. It simplifies the configuration compared to the deprecated resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n  \n  // This will now add the desired policy items to the existing mongodbatlas_cloud_backup_schedule resource\n  policy_item_hourly {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 1\n  }\n  policy_item_daily {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 2\n  }\n  policy_item_weekly {\n    frequency_interval = 4\n    retention_unit     = \"weeks\"\n    retention_value    = 3\n  }\n  policy_item_monthly {\n    frequency_interval = 5\n    retention_unit     = \"months\"\n    retention_value    = 4\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: Specifies the Terraform version and provider configuration for MongoDB Atlas.  This configuration ensures that the necessary provider is available and compatible with the Terraform version.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.13.0\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.4.0\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via Environment Variables\nDESCRIPTION: Demonstrates setting MongoDB Atlas API keys via environment variables.  These keys are essential for authenticating with the Atlas API and managing resources. The variables `MONGODB_ATLAS_PUBLIC_KEY` and `MONGODB_ATLAS_PRIVATE_KEY` must be set.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Backup Snapshots Resource and Data Source in Terraform\nDESCRIPTION: This Terraform configuration defines a resource to create a cloud backup snapshot and a data source to retrieve snapshots. It requires the `group_id` and `cluster_name` to identify the specific Atlas cluster and snapshot. The data source then retrieves the snapshot based on group_id and cluster_name, with pagination options.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshots.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshots\" \"test\" {\n  group_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n  description       = \"SomeDescription\"\n  retention_in_days = 1\n}\n\ndata \"mongodbatlas_cloud_backup_snapshots\" \"test\" {\n  group_id     = mongodbatlas_cloud_backup_snapshots.test.group_id\n  cluster_name = mongodbatlas_cloud_backup_snapshots.test.cluster_name\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Planning Terraform Deployment\nDESCRIPTION: This snippet demonstrates how to execute a Terraform plan. The command `terraform plan` is used to review the changes that Terraform will make to the infrastructure. This allows you to verify the changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/datadog/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Create Backup with Snapshot Distribution - Terraform\nDESCRIPTION: This example demonstrates how to configure snapshot distribution using the `copy_settings` block within the `mongodbatlas_cloud_backup_schedule` resource. It includes settings for the cloud provider, frequencies of copying, the target region, and whether to copy oplogs.  The `zone_id` is accessed through the cluster's replication specs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_schedule.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_backup_schedule resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n  policy_item_daily {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 14\n  }\n\n  copy_settings {\n    cloud_provider = \"AWS\"\n    frequencies = [\"HOURLY\",\n\t\t   \"DAILY\",\n\t\t   \"WEEKLY\",\n\t\t   \"MONTHLY\",\n                   \"YEARLY\",\n\t\t   \"ON_DEMAND\"]\n    region_name = \"US_EAST_1\"\n    zone_id = mongodbatlas_advanced_cluster.my_cluster.replication_specs.*.zone_id[0]\n    should_copy_oplogs = false\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Create Access List Entry Using CIDR Block (Terraform)\nDESCRIPTION: This example shows how to create an access list entry using a CIDR block. It requires the `org_id`, `cidr_block`, and `api_key_id` to be specified. The `org_id` is the unique identifier for the organization, the `cidr_block` is the IP range in CIDR notation, and the `api_key_id` is the identifier for the Organization API Key.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/access_list_api_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id = \"<ORG-ID>\"\n  cidr_block = \"1.2.3.4/32\"\n  api_key_id = \"a29120e123cd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Project IP Addresses using Terraform\nDESCRIPTION: This Terraform configuration retrieves the IP addresses associated with a specified MongoDB Atlas project using the `mongodbatlas_project_ip_addresses` data source. It then outputs the `services` attribute containing the IP address information.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_ip_addresses.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_project_ip_addresses\" \"test\" {\n  project_id = var.project_id\n}\n\noutput \"project_services\" {\n  value = data.mongodbatlas_project_ip_addresses.test.services\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Organization API Key with Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to create an Organization API key in MongoDB Atlas using the `mongodbatlas_api_key` resource. It sets the description, organization ID, and role names for the API key. Requires a valid organization ID. It creates an API key with read-only access to the specified organization.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/api_key.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_api_key\" \"test\" {\n  description   = \"key-name\"\n  org_id        = \"<ORG_ID>\"\n  role_names = [\"ORG_READ_ONLY\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Independent Shard Scaling in MongoDB Atlas with Terraform\nDESCRIPTION: This example demonstrates how to configure a sharded MongoDB Atlas cluster using Terraform, where each shard is represented by a unique `replication_specs` element. This allows for independent scaling of each shard. The example sets the instance size for both shards to M30.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = var.project_id\n  name         = \"ShardedCluster\"\n  cluster_type = \"SHARDED\"\n\n  replication_specs { # first shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n\n  replication_specs { # second shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Flex Cluster (Pre-Autoconversion)\nDESCRIPTION: This Terraform code snippet defines a resource for creating a new Flex cluster in MongoDB Atlas. It specifies the project ID, cluster name, provider settings (backing provider and region), and enables termination protection. It's intended for pre-autoconversion migration from Shared-tier clusters to Flex clusters.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_flex_cluster\" \"this\" {\n        project_id = var.project_id\n        name       = \"flexClusterName\"\n        provider_settings = {\n            backing_provider_name = \"AWS\"\n            region_name           = \"US_EAST_1\"\n        }\n        termination_protection_enabled = true\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Standard SRV Connection String\nDESCRIPTION: This output retrieves the standard SRV connection string of the MongoDB Atlas cluster. The SRV connection string is used for DNS seedlist connection, offering benefits like automatic discovery and failover.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard_srv\" {\n    value = mongodbatlas_cluster.cluster-test.connection_strings[0].standard_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Flex Cluster Resource Configuration in Terraform\nDESCRIPTION: Defines a MongoDB Atlas Flex Cluster resource using Terraform, configuring project ID, cluster name, provider settings (AWS region), and enabling termination protection.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_cluster.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  provider_settings = {\n    backing_provider_name = \"AWS\"\n    region_name           = \"US_EAST_1\"\n  }\n  termination_protection_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This bash command destroys all the resources created by the Terraform configuration. This command is essential for avoiding unnecessary GCP and Atlas charges after testing is complete.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/gcp/Readme.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Creating a Datadog Third-Party Integration in Terraform\nDESCRIPTION: This Terraform configuration creates a new Datadog third-party integration for a MongoDB Atlas project. It requires the `project_id`, `api_key`, and `region` to be specified. This resource block configures a Datadog integration and enables monitoring.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/third_party_integration.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_third_party_integration\" \"test_datadog\" {\n\tproject_id = \"<PROJECT-ID>\"\n  type = \"DATADOG\"\n\tapi_key = \"<API-KEY>\"\n\tregion = \"<REGION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform plan (Bash)\nDESCRIPTION: This snippet shows the command to execute the Terraform plan. It is used to verify the changes that will be applied to the infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS Credentials using environment variables (Bash)\nDESCRIPTION: This snippet shows how to set AWS credentials using environment variables. It is another way of authenticating with AWS provider in Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\n```\n\n----------------------------------------\n\nTITLE: Configuration with autoscaling enabled - Terraform\nDESCRIPTION: Example configuration block that enables compute and disk auto-scaling with compute scale down enabled with compute min and max instance sizes specified.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_24\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nauto_scaling {\n  disk_gb_enabled = true\n  compute_enabled = true\n  compute_scale_down_enabled = true\n  compute_min_instance_size = \"M30\"\n  compute_max_instance_size = \"M50\"\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a Data Lake Pipeline with Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas project, an advanced cluster with automated backups enabled, and a Data Lake Pipeline that connects to the cluster and exports data to a Data Lake store. The configuration defines the sink, source, and transformations for the pipeline.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/data_lake_pipeline.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"projectTest\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORGANIZATION ID\"\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"automated_backup_test\" {\n  project_id     = var.project_id\n  name           = \"automated-backup-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"GCP\"\n      region_name   = \"US_EAST_4\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_data_lake_pipeline\" \"pipeline\" {\n      project_id       = mongodbatlas_project.projectTest.project_id\n      name       = \"DataLakePipelineName\"\n      sink {\n        type = \"DLS\"\n        partition_fields {\n            name = \"access\"\n            order = 0\n        }\n      }\n\n      source {\n        type = \"ON_DEMAND_CPS\"\n        cluster_name = mongodbatlas_advanced_cluster.automated_backup_test.name\n        database_name = \"sample_airbnb\"\n        collection_name = \"listingsAndReviews\"\n      }\n\n      transformations {\n              field = \"test\"\n              type  = \"EXCLUDE\"\n      }\n\n      transformations {\n              field = \"test22\"\n              type  = \"EXCLUDE\"\n      }\n}\n```\n\n----------------------------------------\n\nTITLE: Create PrivateLink Endpoint Service - AWS - Terraform\nDESCRIPTION: This resource creates a Serverless PrivateLink Endpoint Service in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_service_serverless` resource. It requires a `project_id`, the serverless instance name, the `endpoint_id` of the associated private endpoint and specifies `AWS` as the provider. An optional comment can be provided.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = \"test-db\"\n\tendpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n\tprovider_name = \"AWS\"\n\tcomment = \"New serverless endpoint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cloud Backup Snapshot Export Jobs with Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use the `mongodbatlas_cloud_backup_snapshot_export_jobs` data source to retrieve all cloud backup snapshot export jobs for a specific project and cluster in MongoDB Atlas. It also sets up the necessary resources for creating an export bucket and a single export job.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_export_jobs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id = \"{PROJECT_ID}\"\n  iam_role_id    = \"{IAM_ROLE_ID}\"\n  bucket_name    = \"example_bucket\"\n  cloud_provider = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_export_job\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n  snapshot_id = \"{SNAPSHOT_ID}\"\n  export_bucket_id = mongodbatlas_cloud_backup_snapshot_export_bucket.test.export_bucket_id\n\n  custom_data {\n    key   = \"exported by\"\n    value = \"myName\"\n  }\n}\n\ndata \"mongodbatlas_cloud_backup_snapshot_export_jobs\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Database User with OIDC\nDESCRIPTION: This example shows how to create a MongoDB Atlas database user with OIDC federated authentication.  The `username` is formatted with the external authentication system's user/group identifier, `oidc_auth_type` is set, and the `project_id` is required.  Dependencies include MongoDB 7.0 or later and the MongoDB Atlas provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_user.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"64d613677e1ad50839cce4db/testUserOrGroup\"\n  project_id         = \"6414908c207f4d22f4d8f232\"\n  auth_database_name = \"admin\"\n  oidc_auth_type     = \"IDP_GROUP\"\n\n  roles {\n    role_name     = \"readWriteAnyDatabase\"\n    database_name = \"admin\"\n  }\n}\n\ndata \"mongodbatlas_database_user\" \"test\" {\n  username           = mongodbatlas_database_user.test.username\n  project_id         = \"6414908c207f4d22f4d8f232\"\n  auth_database_name = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This bash command executes the Terraform plan, showing the changes that will be made to the infrastructure. This command allows for a review of the proposed changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/gcp/Readme.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Cluster Resource Configuration\nDESCRIPTION: Defines a MongoDB Atlas cluster resource using Terraform. It sets parameters like project ID, cluster name, cluster type, replication specifications, cloud backup settings, and provider details such as the provider name and instance size.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/clusters.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"test\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"cluster-test\"\n  cluster_type = \"REPLICASET\"\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n  }\n  cloud_backup                = true\n  auto_scaling_disk_gb_enabled = true\n\n  //Provider Settings \"block\"\n  provider_name               = \"AWS\"\n  provider_instance_size_name = \"M40\"\n}\n```\n\n----------------------------------------\n\nTITLE: Access List API Key Using CIDR Block - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define a `mongodbatlas_access_list_api_key` resource using a CIDR block to grant access and then retrieve its details using a data source. The `org_id` and `api_key` attributes are required, while `cidr_block` specifies the IP range.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/access_list_api_keys.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id = \"<ORG-ID>\"\n  cidr_block = \"1.2.3.4/32\"\n  api_key = \"a29120e123cd\"\n}\n\ndata \"mongodbatlas_access_list_api_key\" \"test\" {\n\torg_id     = mongodbatlas_access_list_api_key.test.org_id\n\tcidr_block = mongodbatlas_access_list_api_key.test.cidr_block\n  api_key_id = mongodbatlas_access_list_api_key.test.api_key_id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Char Filter Configuration in Terraform\nDESCRIPTION: This snippet shows the general structure for defining character filters within a custom analyzer for MongoDB Atlas Search using Terraform. The type parameter dictates the filter's function, while additional options depend on the filter type selected.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\n\"charFilters\":[{\n   \"type\": \"<FILTER_TYPE>\",\n   \"ADDITIONAL_OPTION\": VALUE\n  }]\n  \n```\n\n----------------------------------------\n\nTITLE: Creating and Querying IP Access List with CIDR Block in Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas project IP access list entry using a CIDR block and then queries the created entry. It requires the `project_id` and `cidr_block` attributes to be defined. The `comment` attribute is optional.  The data source fetches the access list based on the created resource's attributes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_ip_access_list.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  cidr_block = \"1.2.3.4/32\"\n  comment    = \"cidr block for tf acc testing\"\n}\n\ndata \"mongodbatlas_project_ip_access_list\" \"test\" {\n\tproject_id = mongodbatlas_project_ip_access_list.test.project_id\n\tcidr_block = mongodbatlas_project_ip_access_list.test.cidr_block\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Configuration Options with Terraform\nDESCRIPTION: This snippet demonstrates how to configure advanced configuration options for a MongoDB Atlas cluster using Terraform. It sets `javascript_enabled` to `false` and `minimum_enabled_tls_protocol` to `TLS1_2` within the `advanced_configuration` block.  Note that once set, it's recommended to explicitly set these attributes to their intended value instead of removing them from the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\n// Nest options within advanced_configuration\n advanced_configuration {\n   javascript_enabled                   = false\n   minimum_enabled_tls_protocol         = \"TLS1_2\"\n }\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This command previews the changes Terraform would make to your infrastructure before applying them. It allows you to verify the plan and ensure it aligns with your expectations before provisioning or modifying resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster_outage_simulation/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Create Serverless Instance - Azure - Terraform\nDESCRIPTION: This resource creates a serverless instance in MongoDB Atlas using the `mongodbatlas_serverless_instance` resource. It requires a `project_id`, a name for the instance, and provider settings, including the backing provider name, the provider name, and the region name. Continuous backup is enabled.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AZURE\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Create Flex Cluster - Terraform\nDESCRIPTION: This example configures a MongoDB Atlas Flex cluster using the mongodbatlas_advanced_cluster resource.  It sets the provider_name to FLEX, along with the backing_provider_name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          provider_name = \"FLEX\"\n          backing_provider_name = \"AWS\"\n          region_name = \"US_EAST_1\"\n          priority = 7\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Retrieving a MongoDB Atlas Organization Invitation - Terraform\nDESCRIPTION: This Terraform configuration first creates an organization invitation and then retrieves the details of the invited user. It requires the `org_id` and `username` and assigns the `GROUP_DATA_ACCESS_READ_WRITE` role. The configuration utilizes both the `mongodbatlas_org_invitation` resource and the `mongodbatlas_org_user` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/org_invitation.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_org_invitation\" \"test\" {\n  username    = \"test-acc-username\"\n  org_id      = \"<ORG-ID>\"\n  roles       = [ \"GROUP_DATA_ACCESS_READ_WRITE\" ]\n}\n\ndata \"mongodbatlas_org_user\" \"test\" {\n  org_id     = mongodbatlas_org_user.test.org_id\n  username   = mongodbatlas_org_user.test.username\n}\n```\n\n----------------------------------------\n\nTITLE: SHARDED Cluster Migration (New)\nDESCRIPTION: This configuration demonstrates the new sharding configuration for a SHARDED cluster, replacing the `num_shards` attribute with multiple `replication_specs` blocks. Each `replication_specs` block represents a single shard.  This change is required to use the independent shard scaling and auto-scaling per shard features.  These 2 changes must be done at the same time.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = var.project_id\n  name         = \"SymmetricShardedCluster\"\n  cluster_type = \"SHARDED\"\n\n  replication_specs { # first shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        disk_iops = 3000\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n\n  replication_specs { # second shard\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        disk_iops = 3000\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mapping Char Filter in Terraform\nDESCRIPTION: This code snippet shows how to use the `mapping` character filter in a custom analyzer for MongoDB Atlas Search through Terraform.  The `mapping` filter allows you to define character substitutions.  The type must be mapping and the mappings parameter defines the character replacements.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\nanalyzers = <<-EOF [{\n          \"name\":\"name_analyzer\",        \n          \"type\": \"mapping\",\n          \"mappings\":  \n          {\n             \"\\\\\" : \"/\"\n          }\n          }]\n          EOF \n      \n```\n\n----------------------------------------\n\nTITLE: Ensuring Connection Strings Availability with depends_on in Terraform\nDESCRIPTION: This example shows how to use the `depends_on` attribute in Terraform to ensure that connection strings are available after `terraform apply`.  This is needed because Private connection strings may not be available immediately. It creates a data source that depends on a privatelink endpoint service.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_cluster (preview provider 2.0.0).md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_advanced_cluster\" \"example_cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  depends_on = [mongodbatlas_privatelink_endpoint_service.example_endpoint]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OIDC Identity Provider with Terraform\nDESCRIPTION: This example demonstrates how to create an OIDC Identity Provider using the `mongodbatlas_federated_settings_identity_provider` resource. It configures attributes such as federation settings ID, audience, authorization type, description, issuer URI, IDP type, name, protocol, and user claim. It retrieves the federation settings ID from a `mongodbatlas_federated_settings` data source and uses a variable for the token audience.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_identity_provider.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_identity_provider\" \"oidc\" {\n  federation_settings_id = data.mongodbatlas_federated_settings.this.id\n  audience               = var.token_audience\n  authorization_type     = \"USER\"\n  description            = \"oidc\"\n  issuer_uri = \"https://sts.windows.net/${azurerm_user_assigned_identity.this.tenant_id}/\"\n  idp_type   = \"WORKLOAD\"\n  name       = \"OIDC-for-azure\"\n  protocol   = \"OIDC\"\n  user_claim = \"sub\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Cloud Provider Access Setup resource in Terraform\nDESCRIPTION: This code snippet shows how to import existing Cloud Provider Access Setup using `terraform import`. The format for importing uses the `project_id`, `provider_name`, and `role_id` concatenated with hyphens.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_access.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_cloud_provider_access_setup.my_role 1112222b3bf99403840e8934-AWS-5fc17d476f7a33224f5b224e\n```\n\n----------------------------------------\n\nTITLE: Read Federated Settings Org Config - Terraform\nDESCRIPTION: This Terraform data source retrieves the configuration of a federated settings organization in MongoDB Atlas. It requires the `federation_settings_id` and `org_id` as inputs, allowing you to fetch and utilize existing configurations within your infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_config.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_org_config\" \"org_configs_ds\" {\n  federation_settings_id = data.mongodbatlas_federated_settings_org_config.org_connection.id\n  org_id                 = \"627a9683ea7ff7f74de306f14\"\n}\n```\n\n----------------------------------------\n\nTITLE: Move block configuration\nDESCRIPTION: This code snippet shows how to define a `moved` block in your Terraform configuration to move from `mongodbatlas_cluster` to `mongodbatlas_advanced_cluster`. It specifies the `from` and `to` attributes, indicating the source and destination resources for the move operation. This block is crucial for updating the Terraform state without recreating the resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nmoved {\n  from = mongodbatlas_cluster.this\n  to   = mongodbatlas_advanced_cluster.this\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Connection Creation - Terraform\nDESCRIPTION: Defines a MongoDB Atlas Stream Connection of type 'Sample'. It specifies the project ID, instance name, and connection name. This connection type is used to define a sample data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-sample\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"sample_stream_solar\"\n  type            = \"Sample\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Atlas Encryption at Rest with AWS KMS (Terraform)\nDESCRIPTION: This Terraform configuration sets up encryption at rest using AWS KMS with AWS PrivateLink and creates a private endpoint. It assumes that `mongodbatlas_cloud_provider_access_authorization.auth_role` is already configured and its `role_id` is available.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest_private_endpoint.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"ear\" {\n  project_id = var.atlas_project_id\n\n  aws_kms_config {\n    require_private_networking = true\n\n    enabled                = true\n    customer_master_key_id = var.aws_kms_key_id\n    region                 = var.atlas_aws_region\n    role_id                = mongodbatlas_cloud_provider_access_authorization.auth_role.role_id\n  }\n}\n\n# Creates private endpoint\nresource \"mongodbatlas_encryption_at_rest_private_endpoint\" \"endpoint\" {\n  project_id     = mongodbatlas_encryption_at_rest.ear.project_id\n  cloud_provider = \"AWS\"\n  region_name    = var.atlas_aws_region\n}\n\n```\n\n----------------------------------------\n\nTITLE: Export Atlas Credentials (Bash)\nDESCRIPTION: Exports the MongoDB Atlas public and private keys as environment variables. This allows Terraform to authenticate with MongoDB Atlas. Replace `<ATLAS_PUBLIC_KEY>` and `<ATLAS_PRIVATE_KEY>` with your actual keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Flex Cluster\nDESCRIPTION: This command demonstrates how to import an existing MongoDB Atlas Flex Cluster into Terraform management.  It requires the Project ID and the Flex Cluster Name, separated by a hyphen. Replace `6117ac2fe2a3d04ed27a987v` and `yourFlexClusterName` with the actual values from your MongoDB Atlas project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_flex_cluster.test 6117ac2fe2a3d04ed27a987v-yourFlexClusterName\n```\n\n----------------------------------------\n\nTITLE: Fetch Atlas Search Index Details in Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_search_index` data source to retrieve information about a specific Atlas Search index. It requires the `index_id`, `project_id`, and `cluster_name` as input parameters. The data source then provides attributes like `name`, `status`, `analyzer`, and `mappings_fields` which can be used in other parts of the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_index.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_search_index\" \"test\" {\n  index_id   = \"<INDEX_ID\"\n  project_id = \"<PROJECT_ID>\"\n  cluster_name = \"<CLUSTER_NAME>\"\n  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating an On-Demand Cloud Provider Snapshot (Terraform)\nDESCRIPTION: Creates an on-demand cloud provider snapshot using the `mongodbatlas_cloud_provider_snapshot` resource. It requires a `project_id`, `cluster_name`, a `description`, and a `retention_in_days` value. It also sets a timeout value for the snapshot creation process.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n  timeout           = \"10m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Variables (terraform.tfvars)\nDESCRIPTION: This snippet shows how to define variables in a `terraform.tfvars` file for configuring the MongoDB Atlas provider. It includes the public key, private key, and organization ID. This approach allows for managing sensitive data without directly embedding it in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Create Kafka Plaintext Stream Connection - Terraform\nDESCRIPTION: This code shows how to create a Kafka Stream Connection with plaintext authentication. It requires the project ID, instance name, connection name, type 'Kafka', authentication details (mechanism, username, password), security protocol 'PLAINTEXT', Kafka configuration, and bootstrap servers. All arguments including the Kafka authentication password will be stored in the raw state as plaintext.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"test\" {\n    project_id = var.project_id\n    instance_name = \"NewInstance\"\n    connection_name = \"KafkaConnection\"\n    type = \"Kafka\"\n    authentication = {\n        mechanism = \"SCRAM-256\"\n        username = \"user\"\n        password = \"somepassword\"\n    }\n    security = {\n        protocol = \"PLAINTEXT\"\n    }\n    config = {\n        \"auto.offset.reset\": \"latest\"\n    }\n    bootstrap_servers = \"localhost:9091,localhost:9092\"\n}    \n```\n\n----------------------------------------\n\nTITLE: Query Project Atlas Users\nDESCRIPTION: This Terraform configuration retrieves Atlas Users associated with a specified Project using the `project_id` attribute.  The `project_id` must be configured.  The data source exports a list of users within the specified project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/atlas_users.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_atlas_users\" \"test\" {\n  project_id = \"<PROJECT_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: SHARDED Cluster Migration (Deprecated)\nDESCRIPTION: This configuration shows a SHARDED cluster using the deprecated `num_shards` attribute within the `replication_specs` block. Migrating away from `num_shards` will allow for independent scaling and auto-scaling per shard. When using the new sharding configurations, it will no longer use the existing attribute `num_shards`, and instead the number of shards are defined by the number of `replication_specs` elements.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = var.project_id\n  name         = \"SymmetricShardedCluster\"\n  cluster_type = \"SHARDED\"\n\n  replication_specs {\n    # deprecation warning will be encoutered for using num_shards\n    num_shards = 2 \n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        disk_iops = 3000\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Alert Configuration - New Usage\nDESCRIPTION: This shows the new usage of `metric_threshold_config` and `threshold_config` in the `mongodbatlas_alert_configuration` resource, which are replacements for deprecated `metric_threshold` and `threshold` in v1.0.0. These are now using TypeSet or TypeList with MaxItems = 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nmetric_threshold_config {\n  metric_name = \"ASSERT_REGULAR\"\n  operator    = \"LESS_THAN\"\n  threshold   = 1.0\n  units       = \"RAW\"\n  mode        = \"AVERAGE\"\n}\n\nthreshold_config {\n    operator    = \"LESS_THAN\"\n    threshold   = 72\n    units       = \"HOURS\"\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing private endpoint connection string with locals (Terraform)\nDESCRIPTION: This snippet demonstrates how to use locals to extract the `private_endpoint.#.srv_connection_string` for the `aws_vpc_endpoint` from the MongoDB Atlas advanced cluster resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  private_endpoints = flatten([for cs in mongodbatlas_advanced_cluster.aws_private_connection.connection_strings : cs.private_endpoint])\n\n  connection_strings = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], aws_vpc_endpoint.vpce_east.id)\n  ]\n}\n\noutput \"connection_string\" {\n  value = length(local.connection_strings) > 0 ? local.connection_strings[0] : \"\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials (Environment Variables)\nDESCRIPTION: Sets the MongoDB Atlas public and private keys as environment variables.  This is one method of authenticating with the Atlas API. The keys are required for Terraform to interact with the Atlas account. Values should be replaced with actual API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Data Source with Depends On for Connection Strings in Terraform\nDESCRIPTION: This Terraform configuration defines a data source to retrieve information about an advanced cluster and specifies a dependency on a private link endpoint service to ensure the connection strings are available after applying the Terraform configuration. This dependency is crucial because private connection strings might not be immediately available after creation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_cluster.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_advanced_cluster\" \"example_cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  depends_on = [mongodbatlas_privatelink_endpoint_service.example_endpoint]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform State Remove Command - Bash\nDESCRIPTION: This command executes the `terraform state rm` command, which removes a specific resource from Terraform's state file. This is useful when you want to manage the resource outside of Terraform or prevent Terraform from managing it.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nterraform state rm mongodbatlas_advanced_cluster.cluster\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Atlas Network Peering (AWS)\nDESCRIPTION: This code snippet demonstrates how to create a network peering connection in MongoDB Atlas using Terraform. It specifies the accepter region, project ID, container ID, provider name, route table CIDR block, VPC ID, and AWS account ID. This is a prerequisite for the subsequent data source example.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_peerings.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_network_peering\" \"test\" {\n\taccepter_region_name\t= \"us-east-1\"\t\n\tproject_id    \t\t\t= \"<YOUR-PROJEC-ID>\"\n\tcontainer_id            = \"507f1f77bcf86cd799439011\"\n\tprovider_name           = \"AWS\"\n\troute_table_cidr_block  = \"192.168.0.0/24\"\n\tvpc_id\t\t\t\t\t= \"vpc-abc123abc123\"\n\taws_account_id\t\t\t= \"abc123abc123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Organization Invitation (Terraform)\nDESCRIPTION: This command imports an existing MongoDB Atlas organization invitation into Terraform. It requires the `org_id` and `username` separated by a hyphen. This is useful for managing existing invitations that were not initially created with Terraform. The invitation cannot be imported after it has been accepted.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/org_invitation.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_org_invitation.my_user 1112222b3bf99403840e8934-my_user@mongodb.com\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Example\nDESCRIPTION: Example of how to store AWS credentials in the `~/.aws/credentials` file.  Replace `<AWS_ACCESS_KEY_ID>` and `<AWS_SECRET_ACCESS_KEY>` with your actual AWS credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Restore Job Example\nDESCRIPTION: This example demonstrates how to create a snapshot, request a restore job using `mongodbatlas_cloud_backup_snapshot_restore_job` resource and then retrieve the restore job details using the `mongodbatlas_cloud_backup_snapshot_restore_job` data source. It requires a `project_id` and `cluster_name` to be defined and a snapshot to be created. It shows the creation of a snapshot and the subsequent automated restore job. It depends on the MongoDB Atlas Terraform provider being configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_restore_job.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  project_id          = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name      = \"MyCluster\"\n  description       = \"MyDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name = \"MyCluster\"\n  snapshot_id  = \"${mongodbatlas_cloud_backup_snapshot.test.id}\"\n  delivery_type {\n    automated = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  }\n}\n\ndata \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id = mongodbatlas_cloud_backup_snapshot_restore_job.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_snapshot_restore_job.test.cluster_name\n  snapshot_restore_job_id = mongodbatlas_cloud_backup_snapshot_restore_job.test.snapshot_restore_job_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This command applies the Terraform configuration, creating or modifying resources as defined in your Terraform files.  It provisions the Atlas Project and Cluster resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Import Existing MongoDB Atlas Dedicated Cluster into Terraform\nDESCRIPTION: This Terraform import block allows you to import an existing MongoDB Atlas Dedicated cluster into your Terraform state, enabling management through Terraform. It requires the cluster's project ID and cluster name concatenated with a hyphen. This snippet needs to be added to a `.tf` file.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/flex-cluster-to-dedicated-cluster-migraton-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nimport {\n  to = mongodbatlas_advanced_cluster.this\n  id = \"664619d870c247237f4b86a6-clusterName\" # from step 1\n}\n```\n\n----------------------------------------\n\nTITLE: Database Users Data Source Configuration\nDESCRIPTION: This Terraform code snippet shows how to use the `mongodbatlas_database_users` data source to retrieve information about database users associated with a specific project. It references the `project_id` from the previously defined `mongodbatlas_database_user` resource. This fetches all the database users associated to that project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_users.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_database_users\" \"test\" {\n  project_id = mongodbatlas_database_user.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Maintenance Window by Project ID and Start ASAP - Terraform\nDESCRIPTION: This example demonstrates how to retrieve a MongoDB Atlas maintenance window configuration using the `mongodbatlas_maintenance_window` data source, referencing a previously defined maintenance window resource, and setting the `start_asap` flag to true. The `project_id` is obtained from the resource's ID attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/maintenance_window.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_maintenance_window\" \"test\" {\n  project_id  = \"<your-project-id>\"\n  start_asap  = true \n}\n\ndata \"mongodbatlas_maintenance_window\" \"test\" {\n  project_id = mongodbatlas_maintenance_window.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Import Encryption At Rest Private Endpoint (Terraform)\nDESCRIPTION: These are example commands for importing an existing Encryption at Rest Private Endpoint resource into Terraform. The format is `{project_id}-{cloud_provider}-{private_endpoint_id}`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest_private_endpoint.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_encryption_at_rest_private_endpoint.test 650972848269185c55f40ca1-AZURE-650972848269185c55f40ca2\n$ terraform import mongodbatlas_encryption_at_rest_private_endpoint.test 650972848269185c55f40ca2-AWS-650972848269185c55f40ca3\n```\n\n----------------------------------------\n\nTITLE: Resource Policy Creation: Project IP Access List (Terraform)\nDESCRIPTION: Creates a `mongodbatlas_resource_policy` resource to forbid access from any IP address to a project's IP access list.  The `policies` block includes a Cedar policy that checks if the IP access list contains 0.0.0.0/0.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id      = var.org_id\n  name        = \"forbid-access-from-anywhere\"\n  description = \"Forbids access from anywhere\"\n\n  policies = [\n    {\n      body = <<EOF\n        forbid (\n                principal,\n                action == ResourcePolicy::Action::\"project.ipAccessList.modify\",\n                resource\n        )\n                when {\n                context.project.ipAccessList.contains(ip(\"0.0.0.0/0\"))\n        };\nEOF\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Private Connection String\nDESCRIPTION: This Terraform output retrieves the private connection string from the created MongoDB Atlas cluster. The private connection string is accessed through the `connection_strings[0].private` attribute of the `mongodbatlas_advanced_cluster` resource. This example assumes Network Peering and Custom DNS AWS are enabled.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_11\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings[0].private\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Event Trigger with Terraform\nDESCRIPTION: This Terraform code creates an event trigger in MongoDB Atlas.  It defines parameters such as project ID, app ID, trigger name, trigger type, function ID, and various configuration options including database, collection, service ID, match expressions, and full document updates.  The `config_operation_types` specifies the database event operation types to listen for.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/event_trigger.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"DATABASE\"\n  function_id = \"1\"\n  disabled = false\n  config_operation_types = [\"INSERT\", \"UPDATE\"]\n  config_database = \"DATABASE NAME\"\n  config_collection = \"COLLECTION NAME\"\n  config_service_id = \"1\"\n  config_match {\n    key = \"KEY\",\n    value = \"EXPRESSION\"\n  }\n  config_full_document = false\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command - Bash\nDESCRIPTION: This command executes the `terraform apply` command, which applies the changes defined in your Terraform configuration to your infrastructure. This will create or modify the resources as needed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This snippet shows the command to destroy the resources created by Terraform. This command removes all the resources defined in the Terraform configuration, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-1/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables for Shared Tier Cluster Creation\nDESCRIPTION: This Terraform configuration defines variables to create a shared tier (TENANT) MongoDB Atlas cluster on AWS. It sets the provider to TENANT, the backing provider to AWS, and the instance size to M0. It requires an Atlas organization ID, a public key, and a private key.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/tenant-upgrade/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = <ATLAS_ORG_ID>\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"TENANT\"\nbacking_provider_name       = \"AWS\"\nprovider_instance_size_name = \"M0\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Version and Provider Declaration\nDESCRIPTION: Specifies the required Terraform version and the MongoDB Atlas provider version. This ensures compatibility and sets the base for the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.29.0\n```\n\n----------------------------------------\n\nTITLE: Configure Custom DNS for Atlas Cluster on AWS with Terraform\nDESCRIPTION: This code snippet demonstrates how to configure custom DNS for an Atlas cluster deployed on AWS using the mongodbatlas_custom_dns_configuration_cluster_aws Terraform resource. It sets the project ID and enables custom DNS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/custom_dns_configuration_cluster_aws.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_custom_dns_configuration_cluster_aws\" \"test\" {\n  project_id    = \"<PROJECT-ID>\"\n  enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Datadog Third-Party Integration\nDESCRIPTION: This Terraform code snippet demonstrates how to create a Datadog third-party integration within a MongoDB Atlas project.  It requires the `project_id`, `type` (set to \"DATADOG\"), `api_key`, and `region`. The API key and region are specific to the Datadog integration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/third_party_integration.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_third_party_integration\" \"test_datadog\" {\n  project_id = \"<PROJECT-ID>\"\n  type = \"DATADOG\"\n  api_key = \"<API-KEY>\"\n  region = \"<REGION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables (Shared Tier)\nDESCRIPTION: Defines the Terraform variables required to create a shared tier (tenant) MongoDB Atlas cluster. It includes variables for the Atlas organization ID, public key, private key, provider name, backing provider name, and provider instance size name (M0).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/tenant-upgrade/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = <ATLAS_ORG_ID>\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"TENANT\"\nbacking_provider_name       = \"AWS\"\nprovider_instance_size_name = \"M0\"\n```\n\n----------------------------------------\n\nTITLE: Create a MongoDB Atlas Team with Terraform\nDESCRIPTION: This code snippet demonstrates how to create a MongoDB Atlas team using the `mongodbatlas_team` resource in Terraform. It requires the `org_id`, `name`, and `usernames` attributes to be defined.  The `org_id` specifies the organization to associate the team with, `name` is the team's name, and `usernames` is a list of Atlas user email addresses to add to the team.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/team.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_team\" \"test\" {\n  org_id     = \"<ORGANIZATION-ID>\"\n  name       = \"myNewTeam\"\n  usernames  = [\"user1@email.com\", \"user2@email.com\", \"user3@email.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables (bash)\nDESCRIPTION: This snippet demonstrates how to set the MongoDB Atlas public and private API keys using environment variables. These keys are required for Terraform to authenticate with the MongoDB Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/prometheus-and-teams/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: This snippet defines the Terraform configuration required to use the MongoDB Atlas provider. It specifies the provider's version and indicates its source in the Terraform registry.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command - Bash\nDESCRIPTION: This command executes the `terraform plan` command, which shows the changes that Terraform will make to your infrastructure. This allows you to review the changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via Environment Variables\nDESCRIPTION: These commands set the MongoDB Atlas public and private keys as environment variables. This allows Terraform to authenticate with the Atlas API. The variables MONGODB_ATLAS_PUBLIC_KEY and MONGODB_ATLAS_PRIVATE_KEY must be set with valid Atlas API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced Cluster with Backup Enabled (Terraform)\nDESCRIPTION: Defines a MongoDB Atlas advanced cluster using the `mongodbatlas_advanced_cluster` resource. It enables cloud backup snapshots, configures replication specifications with AWS as the provider, and specifies the region, instance size, and node count.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Sharded Cluster Information - Terraform\nDESCRIPTION: This example shows how to retrieve information about a sharded MongoDB Atlas cluster using the `mongodbatlas_advanced_clusters` data source. This specific example uses `use_replication_spec_per_shard = true` to manage asymmetric shards, meaning shards with different configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters (preview provider 2.0.0).md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id     = \"<YOUR-PROJECT-ID>\"\n  name           = \"cluster-test\"\n  backup_enabled = false\n  cluster_type   = \"SHARDED\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M30\"\n            disk_iops     = 3000\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"EU_WEST_1\"\n        }\n      ]\n    },\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M40\"\n            disk_iops     = 3000\n            node_count    = 3\n          }\n          provider_name = \"AWS\"\n          priority      = 7\n          region_name   = \"EU_WEST_1\"\n        }\n      ]\n    }\n  ]\n}\n\ndata \"mongodbatlas_advanced_cluster\" \"example-asym\" {\n  project_id                     = mongodbatlas_advanced_cluster.example.project_id\n  name                           = mongodbatlas_advanced_cluster.example.name\n  use_replication_spec_per_shard = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Resource Move Block\nDESCRIPTION: A `moved` block in Terraform is used to refactor existing infrastructure by informing Terraform that a resource has been moved from one address to another. This block allows Terraform to maintain the resource's state and avoid recreating it during the next apply.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nmoved {\n  from = mongodbatlas_cluster.this # change `this` to your specific resource identifier\n  to   = mongodbatlas_advanced_cluster.this # change `this` to your specific resource identifier\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Cluster: Modified Read-Only Specs Configuration (Terraform)\nDESCRIPTION: This Terraform code updates the MongoDB Atlas cluster configuration to disable read-only nodes. Instead of removing the read_only_specs block, the node_count is explicitly set to 0. This approach ensures clarity in the Terraform resource state and avoids potential ambiguity.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_28\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nregion_configs = [\n  {\n    read_only_specs =  {\n      instance_size = \"M10\"\n      node_count    = 0\n    }\n    electable_specs = {\n      instance_size = \"M10\"\n      node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_WEST_1\"\n  }\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Stream Connection in MongoDB Atlas (Terraform)\nDESCRIPTION: This code creates a Kafka stream connection to a MongoDB Atlas Stream Instance. It configures the project ID, instance name, connection name, type as 'Kafka', authentication details (mechanism, username, password), bootstrap servers, Kafka configuration, and security protocol.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-kafka\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"KafkaPlaintextConnection\"\n  type            = \"Kafka\"\n  authentication = {\n    mechanism = \"PLAIN\"\n    username  = var.kafka_username\n    password  = var.kafka_password\n  }\n  bootstrap_servers = \"localhost:9092,localhost:9092\"\n  config = {\n    \"auto.offset.reset\" : \"earliest\"\n  }\n  security = {\n    protocol = \"PLAINTEXT\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Terraform Configuration - Bash\nDESCRIPTION: This snippet shows the command used to apply the Terraform configuration, creating the specified infrastructure resources. This command executes the plan generated by `terraform plan`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/multi-cloud/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating a SAML Identity Provider with Terraform\nDESCRIPTION: This example shows how to define a SAML Identity Provider resource using the `mongodbatlas_federated_settings_identity_provider` resource. It sets properties like federation settings ID, name, associated domains, SSO debug, status, SSO URL, issuer URI, request binding, and response signature algorithm.  It's crucial to import the resource before managing it with Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_identity_provider.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_identity_provider\" \"identity_provider\" {\n  federation_settings_id     = \"627a9687f7f7f7f774de306f14\"\n  name = \"mongodb_federation_test\"\n  associated_domains           = [\"yourdomain.com\"]\n  sso_debug_enabled = true\n  status = \"ACTIVE\"\n  sso_url = \"https://mysso.oktapreview.com/app/mysso_terraformtestsso/exk17q7f7f7f7f50h8/sso/saml\"\n  issuer_uri = \"http://www.okta.com/exk17q7f7f7f7fp50h8\"\n  request_binding = \"HTTP-POST\"\n  response_signature_algorithm = \"SHA-256\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Policies for Cloud Providers in Terraform\nDESCRIPTION: This Terraform resource defines MongoDB Atlas resource policies to forbid the use of AWS and Azure as cloud providers for clusters. It utilizes the `templatefile` function to load Cedar policy definitions from external files (cloud-provider.cedar), passing the cloud provider name as a variable (CLOUD_PROVIDER). The resource depends on the `var.org_id` variable and the external policy files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_provider\" {\n  org_id      = var.org_id\n  name        = \"forbid-cloud-provider\"\n  description = \"Forbids AWS and Azure for clusters\"\n  policies = [\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"azure\"\n      })\n    },\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"aws\"\n      })\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This command executes the Terraform plan, which shows the changes that will be applied to the infrastructure. It's important to review the plan before applying the changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Import MongoDB Atlas Cluster with Terraform\nDESCRIPTION: This code snippet demonstrates how to import an existing MongoDB Atlas cluster into Terraform using the `terraform import` command.  The format for importing is `PROJECTID-CLUSTERNAME`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import mongodbatlas_cluster.my_cluster 1112222b3bf99403840e8934-Cluster0\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Atlas Advanced Cluster Terraform\nDESCRIPTION: This resource creates a MongoDB Atlas advanced cluster with specified configurations. It sets the project ID, cluster name, and cluster type. The `replication_specs` block defines region configurations for the cluster including instance size, node count, provider name, priority, and region name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id   = mongodbatlas_project.example.id\n  name         = \"ClusterExample\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This bash command applies the Terraform configuration, provisioning the defined resources in GCP and MongoDB Atlas. This command creates the MongoDB Atlas GCP cluster, Network Container, VPC peering, Routes Entry, and IP Access Whitelisting.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/gcp/Readme.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This command executes the Terraform plan to provision the resources required for encryption at rest over AWS PrivateLink. It creates and configures the necessary resources in your MongoDB Atlas project and AWS account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/aws/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Replica Set Cluster Information - Terraform\nDESCRIPTION: This example demonstrates how to use the `mongodbatlas_advanced_clusters` data source to retrieve information about a MongoDB Atlas replica set cluster within a specified project. It assumes that a cluster named 'cluster-test' has already been created using the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters (preview provider 2.0.0).md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"cluster-test\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M0\"\n          }\n          provider_name         = \"TENANT\"\n          backing_provider_name = \"AWS\"\n          region_name           = \"US_EAST_1\"\n          priority              = 7\n        }\n      ]\n    }\n  ]\n}\n\ndata \"mongodbatlas_advanced_clusters\" \"example\" {\n  project_id = mongodbatlas_advanced_cluster.example.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Import Federated Database Instance by Project ID, Instance Name, and AWS S3 Bucket - Terraform\nDESCRIPTION: This snippet shows how to import a Federated Database Instance using the project ID, instance name, and the AWS S3 bucket name. The resource ID format is `project_id--name--aws_s3_bucket_name`. This is used when the instance is associated with a specific AWS S3 bucket and needs to be managed by Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_database_instance.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_database_instance.example 1112222b3bf99403840e8934--test--s3-test\n```\n\n----------------------------------------\n\nTITLE: Retrieving Stream Instance Information with Terraform\nDESCRIPTION: This Terraform configuration retrieves information about a specific stream instance using the `mongodbatlas_stream_instance` data source.  It requires the `project_id` and `instance_name` as input parameters. The data source then fetches details about the specified stream instance from MongoDB Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_instance.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_instance\" \"example\" {\n    project_id = \"<PROJECT_ID>\"\n    instance_name = \"<INSTANCE_NAME>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Processor with Kafka to Cluster Pipeline (Terraform)\nDESCRIPTION: This code creates a stream processor with a pipeline that moves data from a Kafka connection to a Cluster connection. It sets the project ID, instance name, processor name, pipeline (defined using jsonencode), state to 'CREATED', and configures a Dead Letter Queue (DLQ).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-kafka-to-cluster-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"kafkaProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_source\" } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"kafka\", \"coll\" : \"topic_source\", \"timeseries\" : { \"timeField\" : \"ts\" } } }\n  ])\n  state = \"CREATED\"\n  options = {\n    dlq = {\n      coll            = \"exampleColumn\"\n      connection_name = resource.mongodbatlas_stream_connection.example-cluster.connection_name\n      db              = \"exampleDb\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This command is used to review the changes that Terraform will make to the infrastructure. It allows you to preview the actions before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_query_limit/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan (Bash)\nDESCRIPTION: Executes the `terraform plan` command, which shows the changes that Terraform will make to your infrastructure. This is a crucial step for reviewing and confirming the planned changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Importing Third-Party Integration Settings\nDESCRIPTION: This command demonstrates how to import an existing Third-Party Integration setting into Terraform. It uses the format `project_id`-`type` to identify the resource within MongoDB Atlas. This allows Terraform to manage existing configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/third_party_integration.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_third_party_integration.test_datadog 1112222b3bf99403840e8934-DATADOG\n```\n\n----------------------------------------\n\nTITLE: Create AWS Lambda Stream Connection - Terraform\nDESCRIPTION: This example shows how to create an AWS Lambda Stream Connection using Terraform. It requires the project ID, instance name, connection name, type 'AWSLambda', and the AWS configuration including the IAM role ARN. The IAM role ARN specifies the role that MongoDB Atlas assumes to access resources in your AWS account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"test\" {\n    project_id      = var.project_id\n    instance_name   = \"NewInstance\"\n    connection_name = \"AWSLambdaConnection\"\n    type            = \"AWSLambda\"\n    aws             = {\n      role_arn = \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/lambdaRole\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Federated Settings Org Config\nDESCRIPTION: This example shows how to import an existing `mongodbatlas_federated_settings_org_config` resource into Terraform. The `terraform import` command is used with the resource name and the combined federation settings ID and organization ID as the import ID. This allows managing existing configurations with Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_org_config.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform import mongodbatlas_federated_settings_org_config.org_connection 627a9687f7f7f7f774de306f14-627a9683ea7ff7f74de306f14\n```\n\n----------------------------------------\n\nTITLE: Creating IP Access List Entry Using CIDR Block in Terraform\nDESCRIPTION: This code snippet demonstrates how to create a MongoDB Atlas project IP access list entry using a CIDR block. It requires a `project_id` and sets the `cidr_block` and `comment` attributes. This allows access from the specified CIDR range to the clusters within the project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_ip_access_list.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  cidr_block = \"1.2.3.4/32\"\n  comment    = \"cidr block for tf acc testing\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Policy Configuration in Terraform\nDESCRIPTION: This Terraform configuration defines an advanced cluster and then configures a cloud provider snapshot backup policy for it.  It specifies the project ID, cluster name, reference hour/minute, restore window, and backup policies for different frequencies (hourly, daily, weekly, monthly) with their respective retention periods.  The advanced cluster resource requires `backup_enabled = true` to enable cloud backup snapshots.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot_backup_policy.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"clusterTest\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n\n  policies {\n    id = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id\n      frequency_interval = 1\n      frequency_type     = \"hourly\"\n      retention_unit     = \"days\"\n      retention_value    = 1\n    }\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id\n      frequency_interval = 1\n      frequency_type     = \"daily\"\n      retention_unit     = \"days\"\n      retention_value    = 2\n    }\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id\n      frequency_interval = 4\n      frequency_type     = \"weekly\"\n      retention_unit     = \"weeks\"\n      retention_value    = 3\n    }\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.3.id\n      frequency_interval = 5\n      frequency_type     = \"monthly\"\n      retention_unit     = \"months\"\n      retention_value    = 4\n    }\n  }\n}\n\ndata \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_cloud_provider_snapshot_backup_policy.test.project_id\n  cluster_name = mongodbatlas_cloud_provider_snapshot_backup_policy.test.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Resource: Federated Settings Identity Provider\nDESCRIPTION: Defines a Terraform resource for creating a federated settings identity provider in MongoDB Atlas. It specifies required attributes like federation_settings_id, name, associated_domains, and SSO configuration details.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_identity_provider.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_identity_provider\" \"identity_provider\" {\n  federation_settings_id     = \"627a9687f7f7f7f774de306f14\"\n  name = \"mongodb_federation_test\"\n  associated_domains           = [\"yourdomain.com\"]\n  sso_debug_enabled = true\n  status = \"ACTIVE\"\n  sso_url = \"https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml\"\n  issuer_uri = \"http://www.okta.com/exk17f7f7f7f7p50h8\"\n  request_binding = \"HTTP-POST\"\n  response_signature_algorithm = \"SHA-256\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This command destroys the resources created by Terraform, removing the Azure and MongoDB Atlas resources. It prevents unnecessary charges after testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/azure/Readme.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Deferring Maintenance Window - Terraform\nDESCRIPTION: This code snippet demonstrates how to defer the next scheduled maintenance for a MongoDB Atlas project by one week.  Setting the `defer` attribute to `true` postpones the maintenance. The `project_id` needs to be replaced with a valid Atlas project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/maintenance_window.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_maintenance_window\" \"test\" {\n    project_id = \"<your-project-id>\"\n    defer      = true\n  }\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the `terraform plan` command. This command analyzes the Terraform configuration and displays the changes that will be made to the infrastructure without actually applying them.  It requires Terraform to be initialized and configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration\nDESCRIPTION: This snippet demonstrates how to apply a Terraform configuration. The command `terraform apply` is used to provision the infrastructure defined in the Terraform configuration files. This will create the MongoDB cluster and the DataDog integration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/datadog/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Atlas PrivateLink Endpoint Details Terraform\nDESCRIPTION: This Terraform data source retrieves details of an existing PrivateLink Endpoint in MongoDB Atlas. It depends on the `mongodbatlas_privatelink_endpoint.test` resource and uses its `project_id` and `private_link_id` to fetch the endpoint's information. The provider name is also required.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoint\" \"test\" {\n\tproject_id      = mongodbatlas_privatelink_endpoint.test.project_id\n\tprivate_link_id = mongodbatlas_privatelink_endpoint.test.private_link_id\n    provider_name = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Stream Instance with Terraform\nDESCRIPTION: This code snippet demonstrates how to define a `mongodbatlas_stream_instance` resource in Terraform. It requires a project ID, instance name, and data processing region to be specified. The region specifies the cloud provider and region where stream processing will occur.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_instance.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_instance\" \"test\" {\n    project_id = var.project_id\n\tinstance_name = \"InstanceName\"\n\tdata_process_region = {\n\t\tregion = \"VIRGINIA_USA\"\n\t\tcloud_provider = \"AWS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Upgrade to Advanced Cluster (v2)\nDESCRIPTION: This snippet upgrades the module to `mongodbatlas_advanced_cluster` by using version 2 of the module. It copies the Terraform state, sets the preview provider environment variable, initializes Terraform with upgrade, and applies using the same variables file as version 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd v2\ncp ../v1/terraform.tfstate . # if you are not using a remote state\nexport MONGODB_ATLAS_PREVIEW_PROVIDER_V2_ADVANCED_CLUSTER=true # necessary for the `moved` block to work\nterraform init -upgrade # in case your Atlas Provider version needs to be upgraded\nterraform apply -var-file=../v1_v2.tfvars # notice the same variables used as in `v1`\n```\n\n----------------------------------------\n\nTITLE: Import Private Endpoint Link Connection - Terraform\nDESCRIPTION: This command imports an existing Private Endpoint Link Connection into Terraform. It requires the project ID, private link ID, endpoint service ID, and provider name, concatenated with '--' separators.  It allows Terraform to manage existing Atlas Private Endpoint Link Connections.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint_service.test 1112222b3bf99403840e8934--3242342343112--vpce-4242342343--AWS\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Resource Example\nDESCRIPTION: This example demonstrates how to create a Cloud Backup Snapshot resource in MongoDB Atlas using Terraform. It defines the project ID, cluster name, description, and retention period for the snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  project_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n  description       = \"SomeDescription\"\n  retention_in_days = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Federated Settings Org Role Mapping Resource\nDESCRIPTION: This resource creates a federated settings org role mapping. It defines the federation settings ID, organization ID, group ID, external group name, and the organization and group roles to be mapped.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_role_mappings.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_role_mapping\" \"org_group_role_mapping_import\" {\n  federation_settings_id = \"\"\n  org_id                 = \"627a9683e7f7f7ff7fe306f14\"\n  group_id               = \"628aa20d7f7f7f7f7098b81b8\"\n  external_group_name    = \"myGrouptest\"\n  organization_roles     = [\"ORG_OWNER\", \"ORG_MEMBER\", \"ORG_BILLING_ADMIN\", \"ORG_GROUP_CREATOR\", \"ORG_READ_ONLY\"]\n  group_roles            = [\"GROUP_OWNER\",\"GROUP_CLUSTER_MANAGER\",\"GROUP_DATA_ACCESS_ADMIN\",\"GROUP_DATA_ACCESS_READ_WRITE\",\"GROUP_SEARCH_INDEX_EDITOR\",\"GROUP_DATA_ACCESS_READ_ONLY\",\"GROUP_READ_ONLY\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform resources (Bash)\nDESCRIPTION: This snippet shows the command to destroy the resources provisioned by Terraform. It ensures that resources are deprovisioned to avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Create Federated Settings Identity Provider - Terraform\nDESCRIPTION: This Terraform resource configures a federated settings identity provider in MongoDB Atlas. It defines parameters such as federation settings ID, name, associated domains, SSO debug settings, and status.  The `identity_provider` resource needs to be created before querying it using the `data` block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_identity_providers.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_identity_provider\" \"identity_provider\" {\n  federation_settings_id     = \"627a9687f7f7f7f774de306f\"\n  name = \"mongodb_federation_test\"\n  associated_domains           = [\"yourdomain.com\"]\n  sso_debug_enabled = true\n  status = \"ACTIVE\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying Project by name in Terraform\nDESCRIPTION: This code snippet shows how to fetch project information from MongoDB Atlas using the project's `name` attribute.  It assumes a project resource block named `mongodbatlas_project.test` has been defined. The `org_id` must be provided for project creation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"project-name\"\n  org_id = \"<ORG_ID>\"\n\n  teams {\n    team_id    = \"5e0fa8c99ccf641c722fe645\"\n    role_names = [\"GROUP_OWNER\"]\n  }\n\n  teams {\n    team_id    = \"5e1dd7b4f2a30ba80a70cd4rw\"\n    role_names = [\"GROUP_READ_ONLY\", \"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n\n  limits {\n    name = \"atlas.project.deployment.clusters\"\n    value = 26\n  }\n}\n\ndata \"mongodbatlas_project\" \"test\" {\n  name = mongodbatlas_project.test.name\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Serverless PrivateLink Endpoint Service Configuration\nDESCRIPTION: This example demonstrates how to configure a Serverless PrivateLink Endpoint Service with AWS. It includes creating a `mongodbatlas_privatelink_endpoint_serverless` resource, an AWS VPC Endpoint (`aws_vpc_endpoint`), and the `mongodbatlas_privatelink_endpoint_service_serverless` resource. Requires an existing Serverless instance and AWS VPC configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service_serverless.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AWS\"\n}\n\t  \n\nresource \"aws_vpc_endpoint\" \"ptfe_service\" {\n  vpc_id             = \"vpc-7fc0a543\"\n  service_name       = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_service_name\n  vpc_endpoint_type  = \"Interface\"\n  subnet_ids         = [\"subnet-de0406d2\"]\n  security_group_ids = [\"sg-3f238186\"]\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tendpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n\tcloud_provider_endpoint_id = aws_vpc_endpoint.ptfe_service.id\n\tprovider_name = \"AWS\"\n\tcomment = \"New serverless endpoint\"\n}\n\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AWS\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST_1\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Importing MongoDB Employee Access Grant\nDESCRIPTION: This command demonstrates how to import an existing MongoDB Employee Access Grant into Terraform state. It uses the format `PROJECTID-CLUSTERNAME`. Replace `650972848269185c55f40ca1` with the actual Project ID and `MyCluster` with the actual Cluster Name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/mongodb_employee_access_grant.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_mongodb_employee_access_grant.test 650972848269185c55f40ca1-MyCluster\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the Terraform plan command.  This command displays the proposed changes to the infrastructure without applying them. This allows reviewing the changes before execution.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This command applies the changes described in the Terraform plan, provisioning the Azure and MongoDB Atlas resources. It creates the resources defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/azure/Readme.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Kafka Connection Creation - Terraform\nDESCRIPTION: Creates a MongoDB Atlas Stream Connection of type 'Kafka'. It configures authentication details (username, password, mechanism), bootstrap servers, and security protocol for connecting to a Kafka cluster. Configuration settings like auto.offset.reset are included in the config block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-kafka\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"KafkaPlaintextConnection\"\n  type            = \"Kafka\"\n  authentication = {\n    mechanism = \"PLAIN\"\n    username  = var.kafka_username\n    password  = var.kafka_password\n  }\n  bootstrap_servers = \"localhost:9092,localhost:9092\"\n  config = {\n    \"auto.offset.reset\" : \"earliest\"\n  }\n  security = {\n    protocol = \"PLAINTEXT\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Private Endpoint Resources - Bash\nDESCRIPTION: These commands import existing `mongodbatlas_private_endpoint` and `mongodbatlas_private_endpoint_interface_link` resources.  The import requires specific IDs comprising the project ID, private link ID, provider name, and region.  This step is crucial for adopting the new provider version without recreating the resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\nterraform import mongodbatlas_private_endpoint.test <project_id>-<private_link_id>-<provider_name>-<region>\nterraform import mongodbatlas_private_endpoint_interface_link.test <project_id>-<private_link_id>-<interface_endpoint_id>\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Resource Configuration\nDESCRIPTION: Defines a `mongodbatlas_cloud_provider_snapshot` resource to create a snapshot. It sets attributes like `group_id`, `cluster_name`, `description`, and `retention_in_days` to configure the snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  group_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n  description       = \"SomeDescription\"\n  retention_in_days = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying 3 and Removing 1 Default Policy - Terraform\nDESCRIPTION: This example shows how to create a cluster and modify 3 of the default snapshot backup policies and remove 1 policy item, which is commented out in the code.  The example makes changes to the hourly, daily, and monthly policies, but removes the weekly policy item from the configuration.  The cluster must have `backup_enabled = true` to use this resource. Identifiers are obtained from the cluster's state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_backup_policy.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # must be enabled in order to use cloud_provider_snapshot_backup_policy resource\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_CENTRAL_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n\n  policies {\n    id = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id\n      frequency_interval = 1\n      frequency_type     = \"hourly\"\n      retention_unit     = \"days\"\n      retention_value    = 1\n    }\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id\n      frequency_interval = 1\n      frequency_type     = \"daily\"\n      retention_unit     = \"days\"\n      retention_value    = 2\n    }\n\n    # Item removed\n    # policy_item {\n    #   id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id\n    #   frequency_interval = 4\n    #   frequency_type     = \"weekly\"\n    #   retention_unit     = \"weeks\"\n    #   retention_value    = 3\n    # }\n\n    policy_item {\n      id                 = mongodbatlas_advanced_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.3.id\n      frequency_interval = 5\n      frequency_type     = \"monthly\"\n      retention_unit     = \"months\"\n      retention_value    = 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create PrivateLink Endpoint Service - Azure - Terraform\nDESCRIPTION: This resource creates a Serverless PrivateLink Endpoint Service in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_service_serverless` resource. It requires a `project_id`, the serverless instance name, the `endpoint_id` of the associated private endpoint, and specifies `AZURE` as the provider. An optional comment can be provided.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = \"test-db\"\n\tendpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n\tprovider_name = \"AZURE\"\n\tcomment = \"New serverless endpoint\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials\nDESCRIPTION: This snippet demonstrates how to set MongoDB Atlas credentials using environment variables. It requires setting the `MONGODB_ATLAS_PUBLIC_KEY` and `MONGODB_ATLAS_PRIVATE_KEY` environment variables. These credentials are used to authenticate with the MongoDB Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/datadog/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Custom DB Role using Terraform data source\nDESCRIPTION: This example shows how to use the `mongodbatlas_custom_db_role` data source to retrieve information about a custom role that was previously created. It uses the `project_id` and `role_name` from the created resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/custom_db_role.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_custom_db_role\" \"test\" {\n  project_id = mongodbatlas_custom_db_role.test_role.project_id\n  role_name  = mongodbatlas_custom_db_role.test_role.role_name\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Schedule Resource in Terraform\nDESCRIPTION: Configures a `mongodbatlas_cloud_backup_schedule` resource to define a backup schedule for a specified MongoDB Atlas cluster. It includes settings such as reference time, restore window, daily policy item, and copy settings to AWS including the specification of frequencies, region and whether to copy oplogs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_schedule.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n  policy_item_daily {\n    frequency_interval = 1\n    retention_unit     = \"days\"\n    retention_value    = 14\n  }\n\n  copy_settings {\n    cloud_provider = \"AWS\"\n    frequencies = [\"HOURLY\",\n\t\t   \"DAILY\",\n\t\t   \"WEEKLY\",\n\t\t   \"MONTHLY\",\n\t\t   \"YEARLY\",\n\t\t   \"ON_DEMAND\"]\n    region_name = \"US_EAST_1\"\n    zone_id = mongodbatlas_advanced_cluster.my_cluster.replication_specs.*.zone_id[0]\n    should_copy_oplogs = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Alert Configuration with Integration ID - Terraform\nDESCRIPTION: This code snippet demonstrates how to update a Terraform configuration for the `mongodbatlas_alert_configuration` resource to include the `integration_id` for a notification. This is necessary to address non-empty plans in versions 1.16.0 to 1.19.0 due to changes in the Atlas API. Adding the `integration_id` explicitly resolves the issue.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.20.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nnotification {\n    type_name = \"DATADOG\"\n    integration_id  = \"xxxxxxxxxxxxxxxxxxxxxxxx\" # add integration_id shown in the plan to your configuration\n    datadog_api_key = mongodbatlas_third_party_integration.atlas_datadog.api_key\n    datadog_region  = mongodbatlas_third_party_integration.atlas_datadog.region\n    interval_min    = 6\n  }\n```\n\n----------------------------------------\n\nTITLE: Invite user as Organization Member to Specific Teams (Terraform)\nDESCRIPTION: This Terraform configuration invites a user to an Atlas organization with the `ORG_MEMBER` role and adds them to specific teams identified by their unique IDs. The `username` is the email address of the invited user, `org_id` is the unique identifier of the organization, `teams_ids` is a list of team IDs, and `roles` specifies the roles to be assigned.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/org_invitation.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_org_invitation\" \"test1\" {\n  username    = \"test1-acc-username\"\n  org_id      = \"<ORG-ID>\"\n  teams_ids   = [ \"<TEAM-0-ID>\", \"<TEAM-1-ID>\" ]\n  roles       = [ \"ORG_MEMBER\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy (Cleanup)\nDESCRIPTION: This snippet destroys all the resources created by Terraform, cleaning up the MongoDB Atlas cluster and associated infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Automated Restore Job Configuration - Terraform\nDESCRIPTION: This Terraform configuration creates an automated restore job from a cloud backup snapshot. It requires a pre-existing cluster, snapshot, and specifies the target cluster and project ID for the automated restore. It depends on mongodbatlas_cloud_provider_snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_restore_job.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_provider_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_provider_snapshot.test.snapshot_id\n  delivery_type_config   {\n    automated           = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id   = \"5cf5a45a9ccf6400e60981b6\"\n  }\n  depends_on = [mongodbatlas_cloud_provider_snapshot.test]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Access List Entry Using IP Address (Terraform)\nDESCRIPTION: This example demonstrates how to create an access list entry using a single IP address. It requires the `org_id`, `ip_address`, and `api_key_id`. The `org_id` represents the organization, `ip_address` is the single IP allowed access, and `api_key_id` is the key associated with the IP Access List.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/access_list_api_key.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id = \"<ORG-ID>\"\n  ip_address = \"2.3.4.5\"\n  api_key_id = \"a29120e123cd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Access List Entry (Terraform)\nDESCRIPTION: This shows how to import an existing IP Access List entry using Terraform. The command requires the `org_id`, `api_key_id`, and either the `cidr_block` or `ip_address`.  These values are used to uniquely identify the access list entry within MongoDB Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/access_list_api_key.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_access_list_api_key.test 5d0f1f74cf09a29120e123cd-a29120e123cd-10.242.88.0/21\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables (TFVARS)\nDESCRIPTION: Defines Terraform variables in a `vars.auto.tfvars` file. These variables configure the project name, Azure region, owner, Atlas organization ID, Atlas region, database and collection names for inserting records, and the SSH public key for the Azure VM. Ensure the correct values are set for each variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nproject_name             = \"tf-example-oidc\"\nlocation                 = \"eastus\" # Azure region\nowner                    = \"my-user\"\norg_id                   = \"ATLAS_ORG_ID\" # e.g 65def6ce0f722a1507105aa5\nregion                   = \"US_EAST_1\" # Atlas region\ninsert_record_database   = \"test\"\ninsert_record_collection = \"test\"\nssh_public_key           = \"ssh-rsa AAA....\" # see below for how you can configure this\n```\n\n----------------------------------------\n\nTITLE: Scheduled Trigger Configuration - Terraform\nDESCRIPTION: This example illustrates creating a 'SCHEDULED' type MongoDB Atlas event trigger. The trigger is set to run based on a cron schedule ('*'), and executes a specified function.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/event_trigger.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"SCHEDULED\"\n  function_id = \"1\"\n  disabled = false\n  config_schedule = \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials file example\nDESCRIPTION: This shows an example of ~/.aws/credentials file that can be used to authenticate with the AWS provider in Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_2\n\nLANGUAGE: null\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n\n```\n\n----------------------------------------\n\nTITLE: Configure BI Connector for MongoDB Atlas with Terraform\nDESCRIPTION: This code snippet configures the BI Connector for Atlas within a MongoDB Atlas cluster using Terraform. It enables the BI Connector and sets the read preference to \"secondary\", meaning the BI Connector will read from a secondary member of the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nbi_connector_config {\n  enabled         = true\n  read_preference = \"secondary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Import Command - Identity Provider\nDESCRIPTION: Imports an existing MongoDB Atlas Federated Settings Identity Provider (SAML) into Terraform.  This requires replacing `federation_settings_id` and `idp_id` with the appropriate values from your Atlas configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nterraform import mongodbatlas_federated_settings_identity_provider.saml_identity_provider {federated_settings_id}-{idp_id}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables (Bash)\nDESCRIPTION: This snippet shows how to set the MongoDB Atlas public and private keys as environment variables. These keys are required for the Terraform provider to authenticate with MongoDB Atlas. The keys should be replaced with your actual Atlas credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Generate Atlas-managed X.509 certificate for MongoDB user (Terraform)\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas database user with an Atlas-managed X.509 certificate and retrieves the certificate details using the `mongodbatlas_x509_authentication_database_user` data source. It defines a database user with specific roles and labels, then configures X.509 authentication for that user. Finally, it retrieves the generated certificate information.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/x509_authentication_database_user.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"user\" {\n  project_id    = \"<PROJECT-ID>\"\n  username      = \"myUsername\"\n  x509_type     = \"MANAGED\"\n  database_name = \"$external\"\n\n  roles {\n    role_name     = \"atlasAdmin\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"My Key\"\n    value = \"My Value\"\n  }\n}\n\nresource \"mongodbatlas_x509_authentication_database_user\" \"test\" {\n  project_id              = mongodbatlas_database_user.user.project_id\n  username                = mongodbatlas_database_user.user.username\n  months_until_expiration = 2\n}\n\ndata \"mongodbatlas_x509_authentication_database_user\" \"test\" {\n  project_id = mongodbatlas_x509_authentication_database_user.test.project_id\n  username   = mongodbatlas_x509_authentication_database_user.test.username\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Network Containers Data Source\nDESCRIPTION: Retrieves network containers based on the project ID and provider name defined in the `mongodbatlas_network_container` resource. The `project_id` and `provider_name` arguments are required to filter the results. The output is a list of network container objects.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_containers.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_network_containers\" \"test\" {\n\tproject_id     = mongodbatlas_network_container.test.project_id\n  provider_name  = mongodbatlas_network_container.test.provider_name //\"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Flex Cluster Resource - Terraform\nDESCRIPTION: This snippet defines a `mongodbatlas_flex_cluster` resource in Terraform. It specifies the project ID, cluster name, provider settings (backing provider and region), and enables termination protection. This snippet is used for pre-autoconversion migration to create a new Flex cluster from your existing Serverless instance.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_flex_cluster\" \"this\" {\n        project_id = var.project_id\n        name       = \"flexClusterName\"\n        provider_settings = {\n            backing_provider_name = \"AWS\"\n            region_name           = \"US_EAST_1\"\n        }\n        termination_protection_enabled = true\n    }\n```\n\n----------------------------------------\n\nTITLE: GEOSHARDED Cluster Migration (New)\nDESCRIPTION: This configuration demonstrates the new sharding configuration for a GEOSHARDED cluster, replacing the `num_shards` attribute with multiple `replication_specs` blocks. Each `replication_specs` block represents a single shard within a specific zone.  This change is required to use the independent shard scaling and auto-scaling per shard features.  These 2 changes must be done at the same time.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id = var.project_id\n  name = \"GeoShardedCluster\"\n  cluster_type   = \"GEOSHARDED\"\n\n  replication_specs { # first shard for zone n1\n    zone_name  = \"zone n1\"\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_EAST_1\"\n    }\n  }\n\n  replication_specs { # second shard for zone n1\n    zone_name  = \"zone n1\"\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_EAST_1\"\n    }\n  }\n\n  replication_specs { # first shard for zone n2\n    zone_name  = \"zone n2\"\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"EU_WEST_1\"\n    }\n  }\n\n  replication_specs { # second shard for zone n2\n    zone_name  = \"zone n2\"\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import an Existing MongoDB Atlas Network Peering Connection\nDESCRIPTION: This shows how to import an existing MongoDB Atlas Network Peering Connection into your Terraform state. It requires the project ID, peering ID, and provider name. This allows Terraform to manage the existing resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_network_peering.my_peering 1112222b3bf99403840e8934-5cbf563d87d9d67253be590a-AWS\n```\n\n----------------------------------------\n\nTITLE: Creating Online Archive with Date Criteria in Terraform\nDESCRIPTION: This Terraform configuration creates an online archive for a MongoDB collection using date-based criteria. It specifies the project ID, cluster name, database name, and collection name. It also defines partition fields and an archiving schedule. The archive moves data older than 5 days from the 'dateField'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/online_archive.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_online_archive\" \"test\" {\n    project_id   = var.project_id\n    cluster_name = var.cluster_name\n    coll_name    = var.collection_name\n    db_name      = var.database_name\n\n    partition_fields {\n        field_name = \"dateField\"\n        order = 0\n    }\n\n    partition_fields {\n        field_name = \"firstName\"\n        order = 1\n    }\n\n    partition_fields {\n        field_name = \"lastName\"\n        order = 2\n    }\n\n    criteria {\n        type = \"DATE\"\n        date_field = \"dateField\"\n        expire_after_days = 5\n    }\n\n    schedule {\n        type = \"DAILY\"\n        end_hour = 1\n        end_minute = 1\n        start_hour = 1\n        start_minute = 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query PrivateLink Endpoint Service - AWS - Terraform\nDESCRIPTION: This code retrieves information about a Serverless PrivateLink Endpoint Service in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_service_serverless` data source.  It requires a `project_id`, the serverless instance name, and the `endpoint_id` of the associated private endpoint.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n  project_id   = \"<PROJECT_ID>\"\n  instance_name = mongodbatlas_serverless_instance.test.name\n  endpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Provider with Static Keys in Terraform\nDESCRIPTION: This snippet shows how to configure the MongoDB Atlas provider using static API keys directly within the Terraform configuration file. It sets the `public_key` and `private_key` attributes of the `mongodbatlas` provider block. This approach is generally not recommended due to security risks.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"mongodbatlas\" {\n  public_key = \"atlas_public_api_key\" #required\n  private_key  = \"atlas_private_api_key\" #required\n}\n```\n\n----------------------------------------\n\nTITLE: Import Encryption at Rest Settings Terraform\nDESCRIPTION: This command demonstrates how to import existing Encryption at Rest settings into Terraform using the project ID. Replace `1112222b3bf99403840e8934` with the actual project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_encryption_at_rest.example 1112222b3bf99403840e8934\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution in Bash\nDESCRIPTION: This snippet shows the execution of the Terraform apply command. The `terraform apply` command is used to provision the resources defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Configure Push-Based Log Export with Terraform\nDESCRIPTION: This Terraform configuration sets up a MongoDB Atlas project, configures cloud provider access (AWS IAM role), authorizes the role for log export, and creates a push-based log export configuration. It also defines a data source to retrieve the log export settings and outputs the prefix path.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/push_based_log_export.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"project-tf\" {\n  name   = var.atlas_project_name\n  org_id = var.atlas_org_id\n}\n\n# Set up cloud provider access in Atlas using the created IAM role\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n  project_id    = mongodbatlas_project.project-tf.id\n  provider_name = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n  project_id = mongodbatlas_project.project-tf.id\n  role_id    = mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n  aws {\n    iam_assumed_role_arn = aws_iam_role.test_role.arn\n  }\n}\n\n# Set up push-based log export with authorized IAM role\nresource \"mongodbatlas_push_based_log_export\" \"test\" {\n  project_id  = mongodbatlas_project.project-tf.id\n  bucket_name = aws_s3_bucket.log_bucket.bucket\n  iam_role_id = mongodbatlas_cloud_provider_access_authorization.auth_role.role_id\n  prefix_path = \"push-based-log-test\"\n}\n\ndata \"mongodbatlas_push_based_log_export\" \"test\" {\n  project_id = mongodbatlas_push_based_log_export.test.project_id\n}\n\noutput \"test\" {\n  value = data.mongodbatlas_push_based_log_export.test.prefix_path\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Serverless PrivateLink Endpoints Service - Azure\nDESCRIPTION: This example shows how to retrieve the Serverless PrivateLink Endpoints Service using the `mongodbatlas_privatelink_endpoints_service_serverless` data source and associated resources for Azure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoints_service_serverless.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoints_service_serverless\" \"test\" {\n  project_id   = \"<PROJECT_ID>\"\n  instance_name = mongodbatlas_serverless_instance.test.name\n}\n\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AZURE\"\n}\n\t  \nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = \"test-db\"\n\tendpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n\tprovider_name = \"AZURE\"\n\tcomment = \"New serverless endpoint\"\n}\n\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AZURE\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This command destroys all the resources managed by Terraform in your current configuration.  It's used to clean up the deployed infrastructure and avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/azure/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Datadog Third-Party Integration in Terraform\nDESCRIPTION: This Terraform configuration retrieves the settings for a Datadog third-party integration associated with a MongoDB Atlas project. It uses the `project_id` obtained from the created datadog integration and the type of the integration, in this case 'DATADOG', to retrieve the data source. The data source allows accessing details about the already configured Datadog integration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/third_party_integration.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_third_party_integration\" \"test\" {\n\tproject_id = mongodbatlas_third_party_integration.test_datadog.project_id\n  type = \"DATADOG\"\n}\n```\n\n----------------------------------------\n\nTITLE: Define MongoDB Atlas API Key Resource Terraform\nDESCRIPTION: This Terraform resource defines an API key in MongoDB Atlas. It requires a description, organization ID, and a list of role names. This example showcases creating an API key with read-only access to the organization.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/api_keys.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_api_key\" \"test\" {\n  description   = \"key-name\"\n  org_id        = \"<ORG_ID>\"\n  role_names = [\"ORG_READ_ONLY\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tokenizer Configuration in Terraform\nDESCRIPTION: This snippet illustrates the structure for configuring a tokenizer within a custom analyzer for MongoDB Atlas Search using Terraform. The type parameter specifies the tokenizer type, and additional options depend on the chosen tokenizer.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\n\"tokenizer\":{\n    \"type\": \"<tokenizer-type>\",\n    \"ADDITIONAL_OPTIONS\": VALUE\n    }\n    \n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas API Keys using Environment Variables in Shell\nDESCRIPTION: This snippet shows how to set the MongoDB Atlas API keys using environment variables. The `MONGODB_ATLAS_PUBLIC_KEY` and `MONGODB_ATLAS_PRIVATE_KEY` environment variables are set with the appropriate API keys. These environment variables can then be used by the Terraform provider for authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$  export MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\n$  export MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Restoring a Cloud Provider Snapshot (Terraform)\nDESCRIPTION: Restores a cloud provider snapshot using the `mongodbatlas_cloud_provider_snapshot_restore_job` resource. It depends on an existing snapshot and configures the restore job to allow downloads of the restored data.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_provider_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_provider_snapshot.test.snapshot_id\n  delivery_type_config {\n    download = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Update mongodbatlas_project Terraform script\nDESCRIPTION: This example demonstrates how to remove the `api_keys` parameter from the `mongodbatlas_project` resource in your Terraform script. It assumes that `api_keys` was previously used to manage programmatic API keys. The example also includes the new `mongodbatlas_project_api_key` to assign keys at the project level.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/Programmatic-API-Key-upgrade-guide-1.10.0.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"projectName\"\n  org_id = var.org_id\n}\n\nresource \"mongodbatlas_project_api_key\" \"test2\" {\n  description = \"test create and assign\"\n  project_id  = mongodbatlas_project.test.project_id\n  role_names  = [\"GROUP_OWNER\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Control Plane IP Addresses with Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use the `mongodbatlas_control_plane_ip_addresses` data source to retrieve all control plane IP addresses. It then outputs the AWS outbound IP addresses.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/control_plane_ip_addresses.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_control_plane_ip_addresses\" \"test\" {\n}\n\noutput \"outbound-aws-ip-addresses\" {\n  value = data.mongodbatlas_control_plane_ip_addresses.test.outbound.aws\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Resource Policy for Cloud Region using Cedar Policyset in Terraform\nDESCRIPTION: This Terraform code defines a resource policy to forbid cluster deployments in a specific cloud region. It utilizes the previously defined `cedar_policyset` data source. It uses the `mongodbatlas_resource_policy` resource and its `policies` attribute to apply the Cedar policy.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_region\" {\n  org_id = var.org_id\n  name   = \"forbid-cloud-region\"\n  policies = [\n    {\n      body = data.cedar_policyset.cloud_region.text\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Instance Size for a Specific Shard in MongoDB Atlas with Terraform\nDESCRIPTION: This example demonstrates how to upgrade the instance size of a specific shard in a sharded MongoDB Atlas cluster using Terraform. It defines an upgraded instance size of M40 for the first shard while preserving the M30 instance size for the second shard. It uses `replication_specs` to configure each shard independently.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = var.project_id\n  name         = \"ShardedCluster\"\n  cluster_type = \"SHARDED\"\n\n  replication_specs { # first shard upgraded to M40\n    region_configs {\n      electable_specs {\n        instance_size = \"M40\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n\n  replication_specs { # second shard preserves M30\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Backup Snapshot Export Bucket and Retrieve Buckets - Terraform\nDESCRIPTION: This Terraform configuration creates a Cloud Backup Snapshot Export Bucket and then retrieves all buckets associated with the specified project. It requires the `project_id` and `iam_role_id` and sets the cloud provider and bucket name. The `mongodbatlas_cloud_backup_snapshot_export_buckets` data source then fetches the list of buckets for that project.  Dependencies include the MongoDB Atlas provider and a pre-existing IAM role.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_export_buckets.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  iam_role_id = \"{IAM_ROLE_ID}\"\n  bucket_name = \"example-bucket\"\n  cloud_provider = \"AWS\"\n}\n\ndata \"mongodbatlas_cloud_backup_snapshot_export_buckets\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Advanced Cluster with 'import' Block\nDESCRIPTION: This snippet demonstrates how to import an existing MongoDB Atlas cluster as a `mongodbatlas_advanced_cluster` resource using the `import` block (available in Terraform 1.5 and later). Replace the `id` value with the actual project ID and cluster name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n  to = mongodbatlas_advanced_cluster.this\n  id = \"664619d870c247237f4b86a6-legacy-cluster\" # from step 2\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables\nDESCRIPTION: This snippet demonstrates how to set MongoDB Atlas credentials using environment variables. The public and private keys are exported as environment variables, which Terraform can then use to authenticate with the Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-1/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This snippet shows the command to destroy the resources managed by Terraform.  This command reverses the actions of `terraform apply`, deleting the infrastructure resources.  It requires Terraform to be initialized and configured with the appropriate credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider and Version Declaration\nDESCRIPTION: This block specifies the required Terraform version and the MongoDB Atlas provider with a specific version. This ensures compatibility and prevents unexpected behavior due to provider updates.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.23.0\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration Resource\nDESCRIPTION: Defines a MongoDB Atlas project and then creates an LDAP configuration associated with that project. This example sets up a project and configures LDAP settings such as hostname, port, bind username, and password. Project and Organization IDs must be provided.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/ldap_configuration.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORG ID\"\n}\n\nresource \"mongodbatlas_ldap_configuration\" \"test\" {\n  project_id                  = mongodbatlas_project.test.id\n  authentication_enabled      = true\n  hostname \t\t\t\t= \"HOSTNAME\"\n  port                     \t= 636\n  bind_username               = \"USERNAME\"\n  bind_password               = \"PASSWORD\"\n}\n\ndata \"mongodbatlas_ldap_configuration\" \"test\" {\n  project_id = mongodbatlas_ldap_configuration.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: AWS MSK Privatelink Configuration - Terraform\nDESCRIPTION: This Terraform configuration sets up a Privatelink endpoint for Streams with AWS MSK (Managed Streaming for Kafka) using the `mongodbatlas_stream_privatelink_endpoint` resource.  It configures an AWS VPC, subnets, security group, MSK cluster with associated policies and configurations, and then creates the stream privatelink endpoint in MongoDB Atlas, retrieving endpoint ID as an output.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoint.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block = \"192.168.0.0/22\"\n}\n\ndata \"aws_availability_zones\" \"azs\" {\n  state = \"available\"\n}\n\nresource \"aws_subnet\" \"subnet_az1\" {\n  availability_zone = data.aws_availability_zones.azs.names[0]\n  cidr_block        = \"192.168.0.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_subnet\" \"subnet_az2\" {\n  availability_zone = data.aws_availability_zones.azs.names[1]\n  cidr_block        = \"192.168.1.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_security_group\" \"sg\" {\n  vpc_id = aws_vpc.vpc.id\n}\n\nresource \"aws_msk_cluster\" \"example\" {\n  cluster_name           = var.msk_cluster_name\n  kafka_version          = \"3.6.0\"\n  number_of_broker_nodes = 2\n\n  broker_node_group_info {\n    instance_type = \"kafka.m5.large\"\n    client_subnets = [\n      aws_subnet.subnet_az1.id,\n      aws_subnet.subnet_az2.id,\n    ]\n    security_groups = [aws_security_group.sg.id]\n\n    connectivity_info {\n      vpc_connectivity {\n        client_authentication {\n          sasl {\n            scram = true\n          }\n        }\n      }\n    }\n  }\n\n  client_authentication {\n    sasl {\n      scram = true\n    }\n  }\n\n  configuration_info {\n    arn      = aws_msk_configuration.example.arn\n    revision = aws_msk_configuration.example.latest_revision\n  }\n}\n\nresource \"aws_msk_cluster_policy\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = {\n        \"AWS\" = \"arn:aws:iam::${var.aws_account_id}:root\"\n      }\n      Action = [\n        \"kafka:CreateVpcConnection\",\n        \"kafka:GetBootstrapBrokers\",\n        \"kafka:DescribeCluster\",\n        \"kafka:DescribeClusterV2\"\n      ]\n      Resource = aws_msk_cluster.example.arn\n    }]\n  })\n}\n\nresource \"aws_msk_single_scram_secret_association\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n  secret_arn  = var.aws_secret_arn\n}\n\nresource \"aws_msk_configuration\" \"example\" {\n  name = \"${var.msk_cluster_name}-msk-configuration\"\n\n  # Default ASW MSK configuration with \"allow.everyone.if.no.acl.found=false\" added\n  server_properties = <<PROPERTIES\nauto.create.topics.enable=false\ndefault.replication.factor=3\nmin.insync.replicas=2\nnum.io.threads=8\nnum.network.threads=5\nnum.partitions=1\nnum.replica.fetchers=2\nreplica.lag.time.max.ms=30000\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nsocket.send.buffer.bytes=102400\nunclean.leader.election.enable=true\nallow.everyone.if.no.acl.found=false\nPROPERTIES\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AWS\"\n  vendor        = \"MSK\"\n  arn           = aws_msk_cluster.example.arn\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\noutput \"privatelink_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution (Bash)\nDESCRIPTION: This command destroys all the resources created by Terraform. This is important to avoid unnecessary charges after you have finished testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Query Federated Database Instances - Terraform\nDESCRIPTION: This Terraform configuration defines a data source to fetch information about a Federated Database Instance in MongoDB Atlas. It requires the `project_id` and `name` of the federated database instance. The fetched information can be used to configure other resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_database_instances.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_database_instances\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name               = \"TENANT NAME OF THE FEDERATED DATABASE INSTANCE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials in terraform.tfvars\nDESCRIPTION: This snippet shows how to define MongoDB Atlas credentials in a `terraform.tfvars` file.  It sets the `public_key`, `private_key`, and `atlas_org_id` variables, allowing Terraform to authenticate with the Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Query Online Archive Configuration - Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_online_archive` data source to retrieve information about a specific Online Archive. It requires the `project_id`, `cluster_name`, and `archive_id` as input variables. The retrieved data can then be used in other parts of the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/online_archive.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_online_archive\" \"test\" {\n    project_id   = var.project_id\n    cluster_name = var.cluster_name\n    archive_id     = \"5ebad3c1fe9c0ab8d37d61e1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This command applies the changes defined in the Terraform plan, provisioning the resources specified in your configuration.  It will create, modify, or destroy resources as needed to match the desired state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/azure/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Export Job Configuration\nDESCRIPTION: This Terraform configuration demonstrates how to create a snapshot export bucket, initiate a snapshot export job with custom data, and then retrieve the export job details using the `mongodbatlas_cloud_backup_snapshot_export_job` data source. It requires a project ID, cluster name, and snapshot ID, as well as an export bucket ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_export_job.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id = \"{PROJECT_ID}\"\n  iam_role_id    = \"{IAM_ROLE_ID}\"\n  bucket_name    = \"example_bucket\"\n  cloud_provider = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_export_job\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n  snapshot_id = \"{SNAPSHOT_ID}\"\n  export_bucket_id = mongodbatlas_cloud_backup_snapshot_export_bucket.test.export_bucket_id\n  \n  custom_data {\n    key   = \"exported by\"\n    value = \"myName\"\n  }\n}\n\ndata \"mongodbatlas_cloud_backup_snapshot_export_job\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  cluster_name = \"{CLUSTER_NAME}\"\n  export_job_id = mongodbatlas_cloud_backup_snapshot_export_job.test.export_job_id\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Verify Resource and Data Source Configuration Terraform\nDESCRIPTION: Configures a MongoDB Atlas project and advanced cluster, then sets up an LDAP verification resource and retrieves its information using a data source.  The cluster creation is a prerequisite for LDAP verification. It depends on `mongodbatlas_advanced_cluster.test`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/ldap_verify.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORG ID\"\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = mongodbatlas_project.test.id\n  name           = \"ClusterName\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud provider snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"US_EAST_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_ldap_verify\" \"test\" {\n  project_id                  = mongodbatlas_project.test.id\n  hostname = \"HOSTNAME\"\n  port                     = 636\n  bind_username                     = \"USERNAME\"\n  bind_password                     = \"PASSWORD\"\n  depends_on = [mongodbatlas_advanced_cluster.test]\n}\n\ndata \"mongodbatlas_ldap_verify\" \"test\" {\n  project_id = mongodbatlas_ldap_verify.test.project_id\n  request_id = mongodbatlas_ldap_verify.test.request_id\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Advanced Cluster Resource Configuration\nDESCRIPTION: This Terraform resource block defines a MongoDB Atlas Advanced Cluster. It specifies various configuration options such as cluster type, name, project ID, replication specifications (including zone name, region configuration with priority, provider name, region name, analytics specifications, and electable specifications). Required fields must be specified to avoid errors.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/flex-cluster-to-dedicated-cluster-migraton-guide.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"this\" {\n   cluster_type = \"REPLICASET\"\n   name         = \"clusterName\"\n   project_id   = \"664619d870c247237f4b86a6\"\n   replication_specs {\n      zone_name = \"Zone 1\"\n      region_configs {\n         priority      = 7\n         provider_name = \"AWS\"\n         region_name   = \"EU_WEST_1\"\n         analytics_specs {\n            instance_size = \"M10\"\n            node_count    = 0\n         }\n         electable_specs {\n            instance_size = \"M10\"\n            node_count    = 3\n         }\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Set Atlas API Keys as Environment Variables\nDESCRIPTION: Defines the environment variables required for authenticating with MongoDB Atlas. Replace `<ATLAS_PUBLIC_KEY>` and `<ATLAS_PRIVATE_KEY>` with your actual Atlas API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy (Bash)\nDESCRIPTION: Executes the `terraform destroy` command, which destroys all the resources managed by Terraform. This is used to clean up the infrastructure and avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring Labels in Terraform\nDESCRIPTION: This snippet demonstrates how to configure labels for a MongoDB Atlas cluster using Terraform. Labels are key-value pairs used to categorize the cluster. Keys and values have a maximum length of 255 characters.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_21\n\nLANGUAGE: Terraform\nCODE:\n```\nlabels = {\n    \"Key 1\" = \"Value 1\"\n    \"Key 2\" = \"Value 2\"\n    Key3    = \"Value 3\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating MongoDB Atlas Cloud Backup Snapshot Export Bucket\nDESCRIPTION: This Terraform resource creates a cloud backup snapshot export bucket in MongoDB Atlas.  It requires a project ID, IAM role ID, bucket name, and cloud provider.  The `project_id` specifies the Atlas project, `iam_role_id` is the unique identifier for the IAM role, `bucket_name` is the name of the S3 bucket, and `cloud_provider` defines the cloud service (e.g., AWS).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_export_bucket.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  iam_role_id = \"{IAM_ROLE_ID}\"\n  bucket_name = \"example-bucket\"\n  cloud_provider = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve a Single Flex Snapshot using Terraform\nDESCRIPTION: This code snippet retrieves a specific flex snapshot using the `mongodbatlas_flex_snapshot` data source. It requires the `project_id`, `name` of the flex cluster, and the `snapshot_id` as input variables.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshots.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_snapshot\" \"snapshot\" {\n  project_id  = var.project_id\n  name        = mongodbatlas_flex_cluster.example-cluster.name\n  snapshot_id = var.snapshot_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Team with Terraform\nDESCRIPTION: This snippet demonstrates how to create a MongoDB Atlas team using the `mongodbatlas_team` resource in Terraform.  It requires the organization ID, a team name, and a list of usernames to be associated with the team.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/team.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_team\" \"test\" {\n  org_id     = \"<ORGANIZATION-ID>\"\n  name       = \"myNewTeam\"\n  usernames  = [\"user1\", \"user2\", \"user3\"]\n}\n\ndata \"mongodbatlas_team\" \"test\" {\n\torg_id     = mongodbatlas_team.test.org_id\n\tteam_id    = mongodbatlas_team.test.team_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Resource Policy Creation: Cloud Provider Restriction (Terraform)\nDESCRIPTION: Creates a `mongodbatlas_resource_policy` to restrict the use of AWS and Azure for clusters.  It uses `templatefile` to load Cedar policies from external files, allowing for more complex policy definitions.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_provider\" {\n  org_id      = var.org_id\n  name        = \"forbid-cloud-provider\"\n  description = \"Forbids AWS and Azure for clusters\"\n  policies = [\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"azure\"\n      })\n    },\n    {\n      body = templatefile(\"${path.module}/cloud-provider.cedar\", {\n        CLOUD_PROVIDER = \"aws\"\n      })\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Flex Restore Job - Terraform\nDESCRIPTION: This Terraform configuration defines a data source `mongodbatlas_flex_restore_job` to fetch the details of a single flex restore job. It requires a project ID, the name of the flex cluster, and the restore job ID as input. The output displays the name of the restore job.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_restore_jobs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_restore_job\" \"restore_job\" {\n  project_id     = var.project_id\n  name           = mongodbatlas_flex_cluster.example-cluster.name\n  restore_job_id = var.restore_job_id\n}\n\noutput \"mongodbatlas_flex_restore_job\" {\n  value = data.mongodbatlas_flex_restore_job.restore_job.name\n}\n```\n\n----------------------------------------\n\nTITLE: Ignore Changes with Lifecycle Customization - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use lifecycle ignore customizations to prevent unintended changes when enabling auto-scaling in MongoDB Atlas. By ignoring changes to `disk_size_gb`, `instance_size`, and `disk_iops` attributes, Terraform will not revert automatically scaled values back to the original configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_23\n\nLANGUAGE: Terraform\nCODE:\n```\n// Example: ignore disk_size_gb and instance_size changes in a replica set\nlifecycle {\n  ignore_changes = [\n    replication_specs[0].region_configs[0].electable_specs.disk_size_gb,\n    replication_specs[0].region_configs[0].electable_specs.instance_size,\n    replication_specs[0].region_configs[0].electable_specs.disk_iops // instance_size change can affect disk_iops in case that you are using it\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform: Private Endpoint Regional Mode Data Source\nDESCRIPTION: This Terraform data source retrieves the `private_endpoint_regional_mode` settings for a MongoDB Atlas project. It requires a `project_id` argument, which is the unique identifier for the project. It retrieves the enabled status and other attributes of the regional mode setting.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/private_endpoint_regional_mode.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"private_endpoint_regional_mode\" \"test\" {\n\tproject_id = private_endpoint_regional_mode.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Verification Resource Configuration - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to create a mongodbatlas_ldap_verify resource to verify LDAP over TLS/SSL for a specific project. It depends on a project and an advanced cluster resource. The required arguments are project_id, hostname, port, bind_username, and bind_password.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/ldap_verify.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n\tname   = \"NAME OF THE PROJECT\"\n\torg_id = \"ORG ID\"\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = mongodbatlas_project.test.id\n  name           = \"NAME OF THE CLUSTER\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"US_EAST_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_ldap_verify\" \"test\" {\n    project_id                  = mongodbatlas_project.test.id\n    hostname = \"HOSTNAME\"\n    port                     = 636\n    bind_username                     = \"USERNAME\"\n    bind_password                     = \"PASSWORD\"\n    depends_on = [ mongodbatlas_advanced_cluster.test ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the `terraform apply` command. This command applies the changes defined in the Terraform configuration, provisioning the Atlas Project and Cluster resources.  It requires Terraform to be initialized and configured, and a successful plan to be reviewed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Stream Connection - Terraform\nDESCRIPTION: Retrieves a stream connection using the `mongodbatlas_stream_connection` data source.  The `project_id`, `instance_name`, and `connection_name` are required arguments to identify the stream connection. The attributes of the stream connection are then available for use in other resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_connection.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_connection\" \"example\" {\n    project_id = \"<PROJECT_ID>\"\n    instance_name = \"<INSTANCE_NAME>\"\n    connection_name = \"<CONNECTION_NAME>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Resource: Creating a MongoDB Atlas Project with Terraform\nDESCRIPTION: This Terraform code snippet defines a `mongodbatlas_project` resource. It configures the project's name, organization ID, associated teams with their roles, and project limits.  The `org_id` is obtained from the `mongodbatlas_roles_org_id` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/projects.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"project-name\"\n  org_id = data.mongodbatlas_roles_org_id.test.org_id\n\n  teams {\n    team_id    = \"5e0fa8c99ccf641c722fe645\"\n    role_names = [\"GROUP_OWNER\"]\n  }\n\n  teams {\n    team_id    = \"5e1dd7b4f2a30ba80a70cd4rw\"\n    role_names = [\"GROUP_READ_ONLY\", \"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n\n  limits {\n    name = \"atlas.project.deployment.clusters\"\n    value = 26\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source Retrieval for All Flex Clusters in Terraform\nDESCRIPTION: Retrieves a list of all MongoDB Atlas Flex Clusters within a specific project using the `mongodbatlas_flex_clusters` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_cluster.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_clusters\" \"example-clusters\" {\n  project_id = var.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Cluster Options in Terraform\nDESCRIPTION: This snippet demonstrates how to configure advanced cluster options within the `advanced_configuration` block in Terraform. It sets `javascript_enabled` to false and specifies the minimum enabled TLS protocol to TLS1_2. These options allow for fine-grained control over cluster behavior and security settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_17\n\nLANGUAGE: terraform\nCODE:\n```\n// Nest options within advanced_configuration\n advanced_configuration {\n   javascript_enabled                   = false\n   minimum_enabled_tls_protocol         = \"TLS1_2\"\n }\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via Environment Variables - Bash\nDESCRIPTION: These commands demonstrate how to set the MongoDB Atlas public and private keys as environment variables. This is a common way to authenticate with the Atlas API when using the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform NVME Storage Upgrade Configuration\nDESCRIPTION: This configuration defines the variables required to upgrade an existing MongoDB Atlas cluster to a PROVISIONED (NVME) storage tier. It updates the instance size, volume type, and disk IOPS to reflect the NVME upgrade. Note that the instance size needs to support NVME.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster/nvme-upgrade/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = \"627a9687f7f7f7f774de306f14\"\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"AWS\"\nprovider_instance_size_name = \"M40_NVME\"\nprovider_volume_type        = \"PROVISIONED\"\nprovider_disk_iops          = 135125\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This command applies the changes defined in the Terraform configuration, provisioning the Atlas Project and Cluster resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing an existing API Key\nDESCRIPTION: Terraform import command that will import an existing API key into the terraform state. You must supply the org ID, API Key ID when performing the import. \nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/api_key.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_api_key.test 5d09d6a59ccf6445652a444a-6576974933969669\n```\n\n----------------------------------------\n\nTITLE: Updated Cloud Backup Schedule Data Source (Terraform)\nDESCRIPTION: This example demonstrates how to update the `mongodbatlas_cloud_backup_schedule` data source to use `zone_id` by setting `use_zone_id_for_copy_settings = true`. This ensures that the data source populates `copy_settings.#.zone_id` instead of the deprecated `copy_settings.#.replication_spec_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.18.0-upgrade-guide.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = var.project_id\n  cluster_name = var.cluster_name\n  use_zone_id_for_copy_settings = true\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Schedule Data Source in Terraform\nDESCRIPTION: Uses the `mongodbatlas_cloud_backup_schedule` data source to retrieve information about a cloud backup schedule. It references the project ID and cluster name from the created backup schedule resource. The `use_zone_id_for_copy_settings` attribute specifies that the data source uses the latest schema for copy settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_schedule.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_cloud_backup_schedule.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_schedule.test.cluster_name\n  use_zone_id_for_copy_settings = true\n}\n```\n\n----------------------------------------\n\nTITLE: REPLICASET Configuration\nDESCRIPTION: This configuration defines a basic REPLICASET cluster with a single `replication_specs` block.  This is the starting point for transitioning to a sharded cluster. The cluster is configured with an instance size of M30, 3 nodes, and is hosted on Azure in the US_EAST region. Before adding more shards, the cluster_type must be changed to SHARDED (single shard) and applied.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n    project_id   = var.project_id\n    name         = \"ReplicaSetTransition\"\n    cluster_type = \"REPLICASET\"\n\n    replication_specs {\n        region_configs {\n            electable_specs {\n                instance_size = \"M30\"\n                node_count    = 3\n            }\n            provider_name = \"AZURE\"\n            priority      = 7\n            region_name   = \"US_EAST\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Retrieving MongoDB Atlas Projects with Pagination using Terraform\nDESCRIPTION: This Terraform code snippet retrieves MongoDB Atlas projects using the `mongodbatlas_projects` data source with pagination.  It specifies the page number and the number of items per page to retrieve.  It relies on the MongoDB Atlas provider being configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/projects.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_projects\" \"test\" {\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Import Command - Bash\nDESCRIPTION: This command executes the `terraform import` command, which imports an existing Atlas cluster into Terraform state. This allows you to manage the cluster using Terraform, even if it was not originally created using Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform import mongodbatlas_advanced_cluster.cluster ProjectId-ClusterName\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This command applies the Terraform configuration, provisioning the resources defined in the configuration files. It's executed after reviewing the Terraform plan and confirming that the changes are desired.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Tags in Terraform\nDESCRIPTION: This snippet shows how to configure tags for a MongoDB Atlas cluster using Terraform. Tags are key-value pairs that allow you to categorize and manage your clusters. Keys and values must be between 1 and 255 characters in length.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_20\n\nLANGUAGE: Terraform\nCODE:\n```\ntags = {\n    \"Key 1\" = \"Value 1\"\n    \"Key 2\" = \"Value 2\"\n    Key3    = \"Value 3\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Data Lake Pipeline Configuration with Data Source - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define a Data Lake Pipeline using the `mongodbatlas_data_lake_pipeline` resource and retrieve its information using the `mongodbatlas_data_lake_pipeline` data source. It sets up a project, cluster, and data lake pipeline, and then fetches the pipeline details using the data source, demonstrating the relationship between resource creation and data retrieval.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/data_lake_pipeline.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"projectTest\" {\n  name   = \"NAME OF THE PROJECT\"\n  org_id = \"ORGANIZATION ID\"\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"automated_backup_test\" {\n  project_id     = var.project_id\n  name           = \"automated-backup-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"GCP\"\n      region_name   = \"US_EAST_4\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_data_lake_pipeline\" \"pipeline\" {\n      project_id       = mongodbatlas_project.projectTest.project_id\n      name       = \"DataLakePipelineName\"\n      sink {\n        type = \"DLS\"\n        partition_fields {\n            name = \"access\"\n            order = 0\n        }\n      }\n\n      source {\n        type = \"ON_DEMAND_CPS\"\n        cluster_name = mongodbatlas_advanced_cluster.automated_backup_test.name\n        database_name = \"sample_airbnb\"\n        collection_name = \"listingsAndReviews\"\n      }\n\n      transformations {\n              field = \"test\"\n              type  = \"EXCLUDE\"\n      }\n\n      transformations {\n              field = \"test22\"\n              type  = \"EXCLUDE\"\n      }\n}\n\ndata \"mongodbatlas_data_lake_pipeline\" \"pipelineDataSource\" {\n  project_id       = mongodbatlas_data_lake_pipeline.pipeline.project_id\n  name             = mongodbatlas_data_lake_pipeline.pipeline.name\n}\n```\n\n----------------------------------------\n\nTITLE: Invite user as Organization Member and Billing Admin (Terraform)\nDESCRIPTION: This Terraform configuration invites a user to an Atlas organization with the `ORG_MEMBER` and `ORG_BILLING_ADMIN` roles. The `username` is the email address of the invited user, and `org_id` is the unique identifier of the organization. The `roles` attribute specifies the roles to be assigned to the user upon acceptance of the invitation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/org_invitation.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_org_invitation\" \"test0\" {\n  username    = \"test0-acc-username\"\n  org_id      = \"<ORG-ID>\"\n  roles       = [ \"ORG_MEMBER\", \"ORG_BILLING_ADMIN\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Network Peering Data Source Example - Terraform\nDESCRIPTION: This Terraform data source retrieves information about an existing network peering connection in MongoDB Atlas. It requires the `project_id` and `peering_id` of the connection to be specified, which are obtained from the `mongodbatlas_network_peering` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_peering.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_network_peering\" \"test\" {\n    project_id = mongodbatlas_network_peering.test.project_id\n    peering_id = mongodbatlas_network_peering.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with AWS KMS - Terraform\nDESCRIPTION: This snippet configures encryption at rest using customer key management in AWS. It sets up cloud provider access, authorizes an IAM role, configures the encryption settings, creates an advanced cluster, and then retrieves the encryption at rest configuration to output whether the AWS KMS configuration is valid.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"setup_only\" {\n  project_id    = var.atlas_project_id\n  provider_name = \"AWS\"\n}\n\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth_role\" {\n  project_id = var.atlas_project_id\n  role_id    = mongodbatlas_cloud_provider_access_setup.setup_only.role_id\n\n  aws {\n    iam_assumed_role_arn = aws_iam_role.test_role.arn\n  }\n}\n\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  aws_kms_config {\n    enabled                = true\n    customer_master_key_id = aws_kms_key.kms_key.id\n    region                 = var.atlas_region\n    role_id                = mongodbatlas_cloud_provider_access_authorization.auth_role.role_id\n  }\n\n  enabled_for_search_nodes = true\n}\n\nresource \"mongodbatlas_advanced_cluster\" \"cluster\" {\n  project_id                  = mongodbatlas_encryption_at_rest.test.project_id\n  name                        = \"MyCluster\"\n  cluster_type                = \"REPLICASET\"\n  backup_enabled              = true\n  encryption_at_rest_provider = \"AWS\"\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"US_EAST_1\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\ndata \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = mongodbatlas_encryption_at_rest.test.project_id\n}\n\noutput \"is_aws_kms_encryption_at_rest_valid\" {\n  value = data.mongodbatlas_encryption_at_rest.test.aws_kms_config.valid\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Updated Variables (v3)\nDESCRIPTION: This snippet runs a Terraform plan to preview the changes that will be made by using the updated variables in `v3_no_plan_changes.tfvars`. This ensures that the changes are as expected before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd v3\ncp ../v2/terraform.tfstate . # if you are not using a remote state\nexport MONGODB_ATLAS_PREVIEW_PROVIDER_V2_ADVANCED_CLUSTER=true # necessary for the `moved` block to work\nterraform init -upgrade # in case your Atlas Provider version needs to be upgraded\nterraform plan -var-file=../v3_no_plan_changes.tfvars # updated variables to enable latest mongodb_advanced_cluster features\n```\n\n----------------------------------------\n\nTITLE: Import existing MongoDB Atlas Advanced Cluster using Terraform\nDESCRIPTION: This snippet demonstrates how to import an existing MongoDB Atlas advanced cluster into Terraform using the terraform import command. It uses the project ID and cluster name to uniquely identify the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_25\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_advanced_cluster.my_cluster 1112222b3bf99403840e8934-Cluster0\n```\n\n----------------------------------------\n\nTITLE: Terraform plan output after move\nDESCRIPTION: This text snippet shows the expected output of `terraform plan` after adding the `moved` block. It indicates that the `mongodbatlas_cluster.this` resource has been moved to `mongodbatlas_advanced_cluster.this`.  The plan should show no other changes besides the move, ensuring a safe migration.  (24 unchanged attributes are hidden)\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n # mongodbatlas_cluster.this has moved to mongodbatlas_advanced_cluster.this\n     resource \"mongodbatlas_advanced_cluster\" \"this\" {\n         name                                 = \"my-cluster\"\n         # (24 unchanged attributes hidden)\n     }\n\n Plan: 0 to add, 0 to change, 0 to destroy.\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Version\nDESCRIPTION: Specifies the required Terraform version and the MongoDB Atlas provider version.  This ensures compatibility and access to the necessary features.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v1.10.0\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Stream Processor Data Source - Terraform\nDESCRIPTION: Fetches details of a specific MongoDB Atlas Stream Processor using the `mongodbatlas_stream_processor` data source. It requires the project_id, instance_name, and processor_name to identify the stream processor.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processor\" \"example-stream-processor\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = mongodbatlas_stream_processor.stream-processor-sample-example.processor_name\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Resource Policies in Terraform\nDESCRIPTION: This Terraform data source retrieves all resource policies within a specified MongoDB Atlas organization. The `org_id` is sourced from the `mongodbatlas_resource_policy.project_ip_access_list` resource.  It depends on the creation of the `mongodbatlas_resource_policy` resources for the IP access list, cloud provider, and cloud region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policies\" \"this\" {\n  org_id = data.mongodbatlas_resource_policy.project_ip_access_list.org_id\n\n  depends_on = [mongodbatlas_resource_policy.project_ip_access_list, mongodbatlas_resource_policy.cloud_provider, mongodbatlas_resource_policy.cloud_region]\n}\n```\n\n----------------------------------------\n\nTITLE: Create PrivateLink Endpoint - AWS - Terraform\nDESCRIPTION: This resource creates a PrivateLink Endpoint for a serverless instance in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_serverless` resource. It requires a `project_id`, the serverless instance name, and specifies `AWS` as the provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Search Index Resource (New)\nDESCRIPTION: This snippet demonstrates the new usage of the `mongodbatlas_search_index` resource in v1.0.1. The `analyzers` field is now defined as a JSON string.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.1-upgrade-guide.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_search_index\" \"test\" {\n  project_id = mongodbatlas_cluster.aws_conf.project_id\n  cluster_name = mongodbatlas_cluster.aws_conf.name\n  analyzer = \"lucene.simple\"\n  collection_name = \"collection_test\"\n  database = \"database_test\"\n  mappings_dynamic = true\n  name = \"name_test\"\n  search_analyzer = \"lucene.standard\"\n  \n  analyzers = <<-EOF\n    [{\n    \"name\": \"index_analyzer_test_name\",\n    \"char_filters\": {\n     \"type\": \"mapping\",\n    \t\"mappings\": {\"\\\\\" : \"/\"}\n    \t},\n    \"tokenizer\": {\n      \"type\": \"nGram\",\n      \"min_gram\": 2,\n\t  \"max_gram\": 5\n\t  },\n    \"token_filters\": {\n      \"type\": \"length\",\n\t  \"min\": 20,\n\t  \"max\": 33\n    }\n  }]\n  EOF\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Cloud Provider Access Setup Terraform\nDESCRIPTION: This example demonstrates how to retrieve an AWS cloud provider access setup using the `mongodbatlas_cloud_provider_access_setup` data source in Terraform. It first creates a resource and then uses the data source to fetch the details based on the created resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_access_setup.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"test_role\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AWS\"\n}\n\ndata \"mongodbatlas_cloud_provider_access_setup\" \"single_setup\" {\n   project_id = mongodbatlas_cloud_provider_access_setup.test_role.project_id\n   provider_name = mongodbatlas_cloud_provider_access_setup.test_role.provider_name\n   role_id = mongodbatlas_cloud_provider_access_setup.test_role.role_id\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables\nDESCRIPTION: This snippet shows how to set the MongoDB Atlas public and private keys as environment variables. This is one method of providing authentication credentials to the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flex Clusters Data Source Terraform\nDESCRIPTION: This code retrieves all mongodbatlas_flex_clusters within a specified project ID.  The retrieved clusters are accessible via the `results` attribute of the data source. This depends on the `project_id` variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_clusters.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_clusters\" \"example-clusters\" {\n  project_id = var.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Applying the Terraform Configuration\nDESCRIPTION: This snippet displays the command used to apply the Terraform configuration. Executing `terraform apply` provisions the MongoDB Atlas resources as defined in the Terraform configuration files. This command will create the Atlas project in your MongoDB Atlas account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-2/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Maintenance Window by Project ID and Configuration - Terraform\nDESCRIPTION: This example demonstrates how to retrieve a MongoDB Atlas maintenance window configuration using the `mongodbatlas_maintenance_window` data source, referencing a previously defined maintenance window resource, and configuring specific attributes such as project ID, day of the week, hour of the day, and auto deferral settings. The `project_id` is obtained from the resource's ID attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/maintenance_window.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_maintenance_window\" \"test\" {\n  project_id  = \"<your-project-id>\"\n  day_of_week = 3\n  hour_of_day = 4\n  auto_defer_once_enabled = true\n}\n\ndata \"mongodbatlas_maintenance_window\" \"test\" {\n  project_id = mongodbatlas_maintenance_window.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Data Source Usage\nDESCRIPTION: Defines a `mongodbatlas_cloud_provider_snapshot` data source to retrieve snapshot information. It requires `snapshot_id`, `group_id`, and `cluster_name` to identify the snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  snapshot_id  = \"5d1285acd5ec13b6c2d1726a\"\n  group_id     = mongodbatlas_cloud_provider_snapshot.test.group_id\n  cluster_name = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command (Bash)\nDESCRIPTION: This snippet shows the command to execute a Terraform plan. The plan allows you to preview the changes that Terraform will make to your infrastructure before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Create and Query MongoDB Atlas API Key using Terraform\nDESCRIPTION: This Terraform configuration creates a new API key within an Atlas organization and then retrieves its details using the `mongodbatlas_api_key` data source.  It requires the `org_id` and `api_key_id` from the created resource. The example assumes a valid `ORG_ID` is provided.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/api_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_api_key\" \"test\" {\n  description   = \"key-name\"\n  org_id        = \"<ORG_ID>\"\n  role_names = [\"ORG_READ_ONLY\"]\n  }\n}\n\ndata \"mongodbatlas_api_key\" \"test\" {\n  org_id = \"${mongodbatlas_api_key.test.org_id}\"\n  api_key_id = \"${mongodbatlas_api_key.test.api_key_id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Database User with Hyphens in Username/DB Name (Method 1)\nDESCRIPTION: Imports a MongoDB Atlas database user into Terraform using the format `project_id-username-auth_database_name`. This method does not work if both the username and auth database name contain hyphens. The example imports a database user named `my_user` with authentication database `admin` in project `1112222b3bf99403840e8934`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/database_user.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform import mongodbatlas_database_user.my_user 1112222b3bf99403840e8934-my_user-admin # (1)\n```\n\n----------------------------------------\n\nTITLE: Setting up MongoDB Atlas credentials using environment variables in Bash\nDESCRIPTION: This snippet shows how to set the MongoDB Atlas Public and Private keys as environment variables. These variables are used by the Terraform provider to authenticate with the MongoDB Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Configure Atlas Encryption at Rest with Azure Key Vault (Terraform)\nDESCRIPTION: This Terraform configuration sets up encryption at rest using Azure Key Vault with Azure Private Link, creates a private endpoint, and approves the private endpoint connection from Azure Key Vault. It requires the azapi provider for approving the connection.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/encryption_at_rest_private_endpoint.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"ear\" {\n  project_id = var.atlas_project_id\n\n  azure_key_vault_config {\n    require_private_networking = true\n\n    enabled           = true\n    azure_environment = \"AZURE\"\n\n    tenant_id       = var.azure_tenant_id\n    subscription_id = var.azure_subscription_id\n    client_id       = var.azure_client_id\n    secret          = var.azure_client_secret\n\n    resource_group_name = var.azure_resource_group_name\n    key_vault_name      = var.azure_key_vault_name\n    key_identifier      = var.azure_key_identifier\n  }\n}\n\n# Creates private endpoint\nresource \"mongodbatlas_encryption_at_rest_private_endpoint\" \"endpoint\" {\n  project_id     = mongodbatlas_encryption_at_rest.ear.project_id\n  cloud_provider = \"AZURE\"\n  region_name    = var.azure_region_name\n}\n\nlocals {\n  key_vault_resource_id = \"/subscriptions/${var.azure_subscription_id}/resourceGroups/${var.azure_resource_group_name}/providers/Microsoft.KeyVault/vaults/${var.azure_key_vault_name}\"\n}\n\n# Approves private endpoint connection from Azure Key Vault\nresource \"azapi_update_resource\" \"approval\" {\n  type      = \"Microsoft.KeyVault/Vaults/PrivateEndpointConnections@2023-07-01\"\n  name      = mongodbatlas_encryption_at_rest_private_endpoint.endpoint.private_endpoint_connection_name\n  parent_id = local.key_vault_resource_id\n\n  body = jsonencode({\n    properties = {\n      privateLinkServiceConnectionState = {\n        description = \"Approved via Terraform\"\n        status      = \"Approved\"\n      }\n    }\n  })\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Requirements\nDESCRIPTION: Specifies the required Terraform version and the MongoDB Atlas provider version. This ensures the configuration is compatible with the necessary tools and provider features.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/version-upgrade-with-pinned-fcv/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.23.0\n```\n\n----------------------------------------\n\nTITLE: Querying Project API Key with project_id and api_key_id in Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas Project API Key and then queries it using the `mongodbatlas_project_api_key` data source. It requires the `project_id` and `api_key_id` to retrieve the key.  The resource block creates an API key with a read-only role on a specific project, and the data source block fetches the created API key.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_api_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_api_key\" \"test\" {\n  description   = \"Description of your API key\"\n  project_assignment {\n    project_id = \"64259ee860c43338194b0f8e\"\n    role_names = [\"GROUP_READ_ONLY\"]\n  }\n}\n\ndata \"mongodbatlas_project_api_key\" \"test\" {\n  project_id = \"64259ee860c43338194b0f8e\"\n  api_key_id = mongodbatlas_api_key.test.api_key_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Instance in MongoDB Atlas (Terraform)\nDESCRIPTION: This code creates a stream instance in MongoDB Atlas. It specifies the project ID, instance name, and data processing region, including the region and cloud provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_instance\" \"example\" {\n  project_id    = var.project_id\n  instance_name = \"InstanceName\"\n  data_process_region = {\n    region         = \"VIRGINIA_USA\"\n    cloud_provider = \"AWS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Atlas User by Username - Terraform\nDESCRIPTION: This Terraform configuration retrieves a MongoDB Atlas user's information using their username (email address). The `username` attribute is used to specify the email address of the user to retrieve. Ensure that the `USERNAME` placeholder is replaced with the actual username.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/atlas_user.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_atlas_user\" \"test\" {\n  username = \"<USERNAME>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the Terraform destroy command to remove the provisioned Federated settings resources from MongoDB Atlas.  This command is used to clean up resources after testing to avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply (Bash)\nDESCRIPTION: Executes the `terraform apply` command, which provisions the resources defined in the Terraform configuration.  This command creates or modifies the infrastructure as specified in the plan.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Upgrade Tenant Cluster to Flex - Terraform\nDESCRIPTION: This example demonstrates upgrading a tenant cluster to a Flex cluster. It updates the `provider_name` to \"FLEX\", while keeping the `backing_provider_name` attribute defined. Only the upgrade changes will be applied during the terraform apply. A secondary terraform apply is needed to apply additional changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [ \n    {\n      region_configs = [\n        {\n          provider_name = \"FLEX\"\n          backing_provider_name = \"AWS\"\n          region_name = \"US_EAST_1\"\n          priority = 7\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS and Atlas Credentials in terraform.tfvars\nDESCRIPTION: This shows how to define variables for AWS and MongoDB Atlas credentials in a `terraform.tfvars` file. This approach avoids hardcoding credentials directly into the Terraform configuration. Replace the placeholders with the correct values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\naccess_key           = \"<AWS_ACCESS_KEY_ID>\"\nsecret_key           = \"<AWS_SECRET_ACCESS_KEY>\"\npublic_key           = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Query Stream Privatelink Endpoint - Terraform\nDESCRIPTION: Retrieves information about a single MongoDB Atlas Stream Privatelink Endpoint by project ID and endpoint ID.  It relies on the `mongodbatlas` provider and requires that a `mongodbatlas_stream_privatelink_endpoint` resource is already defined to provide the endpoint's ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoints.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Remove mongodbatlas_project API keys from Terraform State\nDESCRIPTION: Removes the `mongodbatlas_project` resource from the Terraform state file. This is a crucial step in migrating to the new programmatic API key management workflow. This means that assignments of the `api_keys` parameter (as well as project resource itself) will be preserved in the actual infrastructure, but Terraform will no longer manage them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/Programmatic-API-Key-upgrade-guide-1.10.0.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform state rm mongodbatlas_project.test\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the Terraform apply command to provision the resources defined in the Terraform configuration files.  Requires that the Terraform plan has been reviewed and is acceptable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Data Source for Custom DB Roles\nDESCRIPTION: This data source retrieves all custom database roles for a given project ID. It depends on the `mongodbatlas_custom_db_role.test.project_id` output from a custom db role resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/custom_db_roles.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_custom_db_roles\" \"test\" {\n  project_id = mongodbatlas_custom_db_role.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Third-Party Integration Resource Configuration\nDESCRIPTION: Configures PagerDuty and Datadog integrations with MongoDB Atlas using Terraform resources. The `mongodbatlas_third_party_integration` resource is used to define each integration, specifying the project ID, integration type (PAGER_DUTY or DATADOG), and service-specific details like service key or API key and region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/third_party_integrations.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_third_party_integration\" \"test_pager_duty\" {\n    project_id = \"<PROJECT-ID>\"\n\ttype = \"PAGER_DUTY\"\n\tservice_key = \"<PAGER-DUTY-SERVICE-KEY>\"\n}\n\nresource \"mongodbatlas_third_party_integration\" \"test_datadog\" {\n\tproject_id = \"<PROJECT-ID>\"\n  type = \"DATADOG\"\n\tapi_key = \"<API-KEY>\"\n\tregion = \"<REGION>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Project IP Whitelist from Terraform State\nDESCRIPTION: This command removes the `mongodbatlas_project_ip_whitelist` resource from the Terraform state. This is a necessary step before upgrading to v1.0.0, as this resource has been replaced by `mongodbatlas_project_ip_access_list`.  Backing up the Terraform state is crucial before running this command.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform state rm mongodbatlas_project_ip_whitelist.test\n```\n\n----------------------------------------\n\nTITLE: SHARDED Cluster (Two Shards)\nDESCRIPTION: This configuration demonstrates a SHARDED cluster with two shards, where each shard is defined by a separate `replication_specs` block. This configuration is reached after transitioning from a REPLICASET to a single shard and then adding the second shard. Each `replication_specs` defines the settings for an individual shard.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n    project_id   = var.project_id\n    name         = \"ReplicaSetTransition\"\n    cluster_type = \"SHARDED\"\n\n    replication_specs { # first shard\n        region_configs {\n            electable_specs {\n                instance_size = \"M30\"\n                node_count    = 3\n            }\n            provider_name = \"AZURE\"\n            priority      = 7\n            region_name   = \"US_EAST\"\n        }\n    }\n\n    replication_specs { # second shard\n        region_configs {\n            electable_specs {\n                instance_size = \"M30\"\n                node_count    = 3\n            }\n            provider_name = \"AZURE\"\n            priority      = 7\n            region_name   = \"US_EAST\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting a List of Flex Cluster Names\nDESCRIPTION: This Terraform output variable retrieves a list of names from the `mongodbatlas_flex_clusters` data source, iterating through the `results` and extracts the `name` attribute.  The data source `data.mongodbatlas_flex_clusters.example-clusters` should already exist and be populated.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_clusters_names\" {\n  value = [for cluster in data.mongodbatlas_flex_clusters.example-clusters.results : cluster.name]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the `terraform apply` command to provision the infrastructure resources in MongoDB Atlas. This applies the changes defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Access List API Key using IP Address - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to retrieve an Access List API Key entry using an IP address.  It defines a resource to create the access list entry and a data source to retrieve it. The configuration requires the `org_id` and `ip_address` attributes to be set.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/access_list_api_key.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id     = \"<ORG-ID>\"\n  ip_address = \"2.3.4.5\"\n  api_key = \"a29120e123cd\"\n}\n\ndata \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id = mongodbatlas_access_list_api_key.test.org_id\n  ip_address = mongodbatlas_access_list_api_key.test.ip_address\n  api_key_id = mongodbatlas_access_list_api_key.test.api_key_id\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shared Tier Snapshot using Terraform\nDESCRIPTION: This Terraform configuration retrieves details of a specific MongoDB Atlas Shared Tier Cluster snapshot. It requires the `project_id`, `cluster_name`, and `snapshot_id` to identify the desired snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_shared_tier_snapshot.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_shared_tier_snapshot\" \"test\" {\n  project_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n  snapshot_id       = \"5d1285acd5ec13b6c2d1726a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Event Trigger Data with Terraform\nDESCRIPTION: This Terraform code retrieves data for an existing event trigger using the `mongodbatlas_event_trigger` data source.  It requires the `project_id`, `app_id` and the `trigger_id` of the event trigger.  The trigger ID is obtained from an existing `mongodbatlas_event_trigger` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/event_trigger.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = mongodbatlas_event_trigger.test.project_id\n  app_id   = mongodbatlas_event_trigger.test.app_id\n  trigger_id   = mongodbatlas_event_trigger.test.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Reviewing the Terraform Plan\nDESCRIPTION: This snippet displays the command used to review the Terraform plan.  Running `terraform plan` allows you to preview the changes that will be made to your infrastructure before applying them. This is an important step to ensure that the changes are expected and desired.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-2/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Snapshot Restore Job Configuration\nDESCRIPTION: This Terraform configuration creates a Cloud Backup Snapshot, a Cloud Backup Snapshot Restore Job, and a data source to retrieve all restore jobs for the specified cluster and project. It demonstrates how to automate a snapshot restore to a target cluster within the same project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_restore_jobs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  project_id          = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name      = \"MyCluster\"\n  description       = \"MyDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_backup_snapshot_restore_job\" \"test\" {\n  project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name = \"MyCluster\"\n  snapshot_id  = mongodbatlas_cloud_backup_snapshot.test.id\n  delivery_type_config {\n    automated = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  }\n}\n\ndata \"mongodbatlas_cloud_backup_snapshot_restore_jobs\" \"test\" {\n  project_id     = mongodbatlas_cloud_backup_snapshot_restore_job.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_snapshot_restore_job.test.cluster_name\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Cluster: Initial Read-Only Specs Configuration (Terraform)\nDESCRIPTION: This Terraform code defines a MongoDB Atlas cluster configuration with read-only and electable nodes.  It specifies the instance size and node count for each type of node within a region configuration.  The read_only_specs block initially defines an instance of size \"M10\" with a node_count of 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_27\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nregion_configs = [\n  {\n    read_only_specs =  {\n      instance_size = \"M10\"\n      node_count    = 1\n    }\n    electable_specs = {\n      instance_size = \"M10\"\n      node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_WEST_1\"\n  }\n]\n...\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: Specifies the required Terraform provider for MongoDB Atlas, version 1.10.0.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v1.10.0\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Connection String Example\nDESCRIPTION: Example showing signature of the connection strings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_7\n\nLANGUAGE: null\nCODE:\n```\n\"connection_strings\": [\n  {\n    \"aws_private_link\": {\n      \"<aws_vpc_endpoint.vpce_east.id>\": \"mongodb://<private connection details>\"\n    },\n    \"aws_private_link_srv\": {\n      \"<aws_vpc_endpoint.vpce_east.id>\": \"mongodb+srv://<private connection srv details>\"\n    },\n    \"private\": \"\",\n    \"private_endpoint\": [\n      {\n        \"connection_string\": \"mongodb://<private connection details>\",\n        \"endpoints\": [\n          {\n            \"endpoint_id\": \"<aws_vpc_endpoint.vpce_east.id>\",\n            \"provider_name\": \"AWS\",\n            \"region\": \"US_EAST_1\"\n          }\n        ],\n        \"srv_connection_string\": \"mongodb+srv://<private connection srv details>\",\n        \"srv_shard_optimized_connection_string\": \"mongodb+srv://<private connection srv details>\",\n        \"type\": \"MONGOD\"\n      }\n    ],\n    \"private_srv\": \"\",\n    \"standard\": \"mongodb://<standard connection details>\",\n    \"standard_srv\": \"mongodb+srv://<standard connection srv details>\"\n  }\n],\n\n```\n\n----------------------------------------\n\nTITLE: Output Specific Connection String\nDESCRIPTION: This Terraform output uses the `lookup()` function to retrieve a specific connection string from the `aws_private_link_srv` map within the connection strings. It requires the ID of an AWS VPC endpoint.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\noutput \"plstring\" {\n    value = lookup(mongodbatlas_advanced_cluster.cluster.connection_strings[0].aws_private_link_srv, aws_vpc_endpoint.ptfe_service.id)\n}\n```\n\n----------------------------------------\n\nTITLE: Generate SSH Keypair\nDESCRIPTION: Generates an SSH keypair for the Azure VM. This keypair is used for secure access to the VM. The public key is then exported as an environment variable to be used by Terraform. Ensure that the correct email address is provided.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~/.ssh\nssh-keygen -t rsa -b 4096 -C \"<your_email@example.com>\" # to generate a keypair for the VM\nexport TF_VAR_ssh_public_key=$(cat ~/.ssh/id_rsa.pub) # set the `ssh_public_key` with an env var instead of using the variable\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas API Keys (Bash)\nDESCRIPTION: This snippet sets the environment variables for the MongoDB Atlas public and private keys, which are necessary for authenticating with the Atlas API. These variables must be set before running Terraform commands that interact with the MongoDB Atlas service.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data Lake Pipeline Runs using Terraform\nDESCRIPTION: This Terraform configuration shows how to define a `mongodbatlas_data_lake_pipeline_runs` data source to retrieve Data Lake Pipeline Runs, given a `project_id` and `pipeline_name`. It assumes that a project and cluster have already been set up in other blocks, as well as a data lake pipeline.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/data_lake_pipeline_runs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_data_lake_pipeline\" \"pipeline\" {\n      //assuming we've already setup project and cluster in another block\n      project_id       = mongodbatlas_project.projectTest.project_id\n      name             = \"DataLakePipelineName\"\n      sink {\n        type = \"DLS\"\n        partition_fields {\n            name = \"access\"\n            order = 0\n        }\n      }\n      source {\n        type = \"ON_DEMAND_CPS\"\n        cluster_name = mongodbatlas_advanced_cluster.clusterTest.name\n        database_name = \"sample_airbnb\"\n        collection_name = \"listingsAndReviews\"\n      }\n      transformations {\n              field = \"test\"\n              type  = \"EXCLUDE\"\n      }\n      transformations {\n              field = \"test22\"\n              type  = \"EXCLUDE\"\n      }\n}\n\ndata \"mongodbatlas_data_lake_pipeline_runs\" \"test\" {\n  project_id       = mongodbatlas_project.projectTest.project_id\n  pipeline_name    = mongodbatlas_data_lake_pipeline.pipeline.name\n}\n```\n\n----------------------------------------\n\nTITLE: Import Flex Cluster Configuration - Terraform\nDESCRIPTION: This snippet shows how to import an existing Flex cluster into your Terraform state using the `mongodbatlas_advanced_cluster` resource. This allows you to manage the Flex cluster using Terraform after the autoconversion of a Serverless instance. The `id` should be in the format '{PROJECT_ID}-{CLUSTER_NAME}'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n    to = mongodbatlas_advanced_cluster.flex\n    id = \"664619d870c247237f4b86a6-flexClusterName\" # from step 1\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing Connection String Attribute\nDESCRIPTION: This snippet shows how to refer to a specific attribute value within the connection_strings list using index notation in Terraform. It provides an example for accessing the standard_srv connection string.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nmongodbatlas_advanced_cluster.cluster-test.connection_strings.0.standard_srv\n```\n\n----------------------------------------\n\nTITLE: Outputting Search Deployment ID\nDESCRIPTION: This Terraform configuration outputs the ID of the MongoDB Atlas Search Deployment retrieved using the data source. It uses the `value` attribute of the `output` resource to display the ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_search_deployment_id\" {\n  value = data.mongodbatlas_search_deployment.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Atlas Network Peerings\nDESCRIPTION: This code snippet demonstrates how to use the `mongodbatlas_network_peerings` data source to retrieve information about all network peering connections in a specified MongoDB Atlas project. It depends on an existing `mongodbatlas_network_peering` resource to provide the `project_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_peerings.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_network_peerings\" \"test\" {\n    project_id = mongodbatlas_network_peering.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Create Cluster Stream Connection - Terraform\nDESCRIPTION: Defines a connection to a MongoDB Atlas cluster using the `mongodbatlas_stream_connection` resource. It includes the project ID, instance name, connection name, type, cluster name, and database role to execute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-cluster\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"ClusterConnection\"\n  type            = \"Cluster\"\n  cluster_name    = var.cluster_name\n  db_role_to_execute = {\n    role = \"atlasAdmin\"\n    type = \"BUILT_IN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Flex Cluster Data Source Terraform\nDESCRIPTION: This code retrieves a single mongodbatlas_flex_cluster using its name and project ID. It relies on the `mongodbatlas_flex_cluster.example-cluster` resource being defined and uses its name to query the data source.  The output is assigned to the `example-cluster` alias.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_clusters.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: The `terraform plan` command is used to review the changes that Terraform will make to your infrastructure. It shows the resources that will be created, modified, or destroyed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/version-upgrade-with-pinned-fcv/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Import Federated Query Limit Terraform\nDESCRIPTION: This Terraform code snippet shows how to import an existing Federated Database Instance Query Limit using the Terraform CLI. The resource is identified by a combination of `project_id`, `tenant_name`, and `limit_name`, separated by `--`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_query_limit.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_query_limit.example 1112222b3bf99403840e8934--FederatedDatabaseInstance0--bytesProcessed.daily\n```\n\n----------------------------------------\n\nTITLE: Azure Serverless PrivateLink Endpoint Service Configuration\nDESCRIPTION: This example demonstrates how to configure a Serverless PrivateLink Endpoint Service with Azure. It includes creating a `mongodbatlas_privatelink_endpoint_serverless` resource, an Azure Private Endpoint (`azurerm_private_endpoint`), and the `mongodbatlas_privatelink_endpoint_service_serverless` resource. Requires an existing Serverless instance and Azure resource group and subnet configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service_serverless.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource  \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AZURE\"\n}\n\nresource \"azurerm_private_endpoint\" \"test\" {\n  name                = \"endpoint-test\"\n  location            = data.azurerm_resource_group.test.location\n  resource_group_name = var.resource_group_name\n  subnet_id           = azurerm_subnet.test.id\n  private_service_connection {\n    name                           = mongodbatlas_privatelink_endpoint_serverless.test.private_link_service_name\n    private_connection_resource_id = mongodbatlas_privatelink_endpoint_serverless.test.private_link_service_resource_id\n    is_manual_connection           = true\n    request_message                = \"Azure Private Link test\"\n  }\n\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n  project_id                  = mongodbatlas_privatelink_endpoint_serverless.test.project_id\n  instance_name               = mongodbatlas_serverless_instance.test.name\n  endpoint_id                 = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n  cloud_provider_endpoint_id  = azurerm_private_endpoint.test.id \n  private_endpoint_ip_address = azurerm_private_endpoint.test.private_service_connection.0.private_ip_address\n  provider_name               = \"AZURE\"\n  comment                     = \"test\"\n}\n\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AZURE\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Processor with Sample to Cluster Pipeline (Terraform)\nDESCRIPTION: This code creates a stream processor with a pipeline that moves data from a Sample connection to a Cluster connection. It sets the project ID, instance name, processor name, pipeline (defined using jsonencode), and state to 'STARTED'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-sample-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"sampleProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-sample.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"sample\", \"coll\" : \"solar\", \"timeseries\" : { \"timeField\" : \"_ts\" } } }\n  ])\n  state = \"STARTED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This command executes the Terraform plan and provisions the resources defined in your configuration files. It applies the changes to your infrastructure, creating or modifying resources as needed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/azure/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Confluent Privatelink Resources\nDESCRIPTION: Defines resources for configuring a Confluent Privatelink setup, including environment, network, private link access, Kafka cluster, and the MongoDB Atlas stream privatelink endpoint. It depends on the `confluent` provider and the `mongodbatlas` provider, and expects variables like `aws_region`, `subnets_to_privatelink`, `aws_account_id`, and `project_id` to be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoints.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"confluent_environment\" \"staging\" {\n  display_name = \"Staging\"\n}\n\nresource \"confluent_network\" \"private_link\" {\n  display_name     = \"terraform-test-private-link-network-manual\"\n  cloud            = \"AWS\"\n  region           = var.aws_region\n  connection_types = [\"PRIVATELINK\"]\n  zones            = keys(var.subnets_to_privatelink)\n  environment {\n    id = confluent_environment.staging.id\n  }\n  dns_config {\n    resolution = \"PRIVATE\"\n  }\n}\n\nresource \"confluent_private_link_access\" \"aws\" {\n  display_name = \"example-private-link-access\"\n  aws {\n    account = var.aws_account_id\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"confluent_kafka_cluster\" \"dedicated\" {\n  display_name = \"example-dedicated-cluster\"\n  availability = \"MULTI_ZONE\"\n  cloud        = confluent_network.private_link.cloud\n  region       = confluent_network.private_link.region\n  dedicated {\n    cku = 2\n  }\n  environment {\n    id = confluent_environment.staging.id\n  }\n  network {\n    id = confluent_network.private_link.id\n  }\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id          = var.project_id\n  dns_domain          = confluent_network.private_link.dns_domain\n  provider_name       = \"AWS\"\n  region              = var.aws_region\n  vendor              = \"CONFLUENT\"\n  service_endpoint_id = confluent_network.private_link.aws[0].private_link_endpoint_service\n  dns_sub_domain      = confluent_network.private_link.zonal_subdomains\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoints\" \"plural_datasource\" {\n  project_id = var.project_id\n}\n\noutput \"interface_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.interface_endpoint_id\n}\n\noutput \"interface_endpoint_ids\" {\n  value = data.mongodbatlas_stream_privatelink_endpoints.plural_datasource.results[*].interface_endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Database User Resource (Terraform)\nDESCRIPTION: This snippet shows a Terraform resource definition for a MongoDB Atlas database user. It defines the user's authentication database, AWS IAM type, and other properties.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n+ resource \"mongodbatlas_database_user\" \"user2\" {\n      + auth_database_name = \"admin\"\n      + aws_iam_type       = \"NONE\"\n      + id                 = (known after apply)\n      + password           = (sensitive value)\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via Environment Variables\nDESCRIPTION: Sets the MongoDB Atlas public and private keys as environment variables.  These keys are used for authenticating with the MongoDB Atlas API. This method avoids hardcoding credentials in the Terraform configuration files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the `terraform plan` command to preview the changes that will be applied to the MongoDB Atlas environment. This allows users to review the configuration before provisioning resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/version-upgrade-with-pinned-fcv/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Upgrading Tenant Cluster to Flex Terraform\nDESCRIPTION: Upgrades a tenant cluster to a Flex cluster. The `provider_name` is changed from \"TENANT\" to \"FLEX\". The cluster continues to rely on the specified `backing_provider_name` (AWS) and `region_name` (US_EAST_1).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      provider_name = \"FLEX\"\n      backing_provider_name = \"AWS\"\n      region_name = \"US_EAST_1\"\n      priority = 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables File\nDESCRIPTION: Example content for a `terraform.tfvars` file, which sets the values for Terraform variables. This file allows for storing sensitive information, like the access and secret keys, separate from the main Terraform configuration. This avoids hardcoding values in the main configuration files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\naccess_key   = \"<AWS_ACCESS_KEY_ID>\"\nsecret_key   = \"<AWS_SECRET_ACCESS_KEY>\"\npublic_key   = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key  = \"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Encryption At Rest AWS KMS Private Endpoint Terraform\nDESCRIPTION: This Terraform configuration retrieves information about an encryption at rest private endpoint for AWS KMS using the `mongodbatlas_encryption_at_rest_private_endpoint` data source. It requires the project ID, cloud provider (AWS), and the endpoint ID. The example then exports the status of the endpoint as an output.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest_private_endpoint.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_encryption_at_rest_private_endpoint\" \"single\" {\n  project_id     = var.atlas_project_id\n  cloud_provider = \"AWS\"\n  id             = mongodbatlas_encryption_at_rest_private_endpoint.endpoint.id\n}\n\noutput \"status\" {\n  value = data.mongodbatlas_encryption_at_rest_private_endpoint.single.status\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified OIDC flow Diagram\nDESCRIPTION: Mermaid diagram illustrating the simplified OIDC flow between a User/App, Atlas, and an Identity Provider (IdP). It showcases the exchange of information for authentication, including obtaining a JWT token and connecting to Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n---\\\ntitle: \\\"Simplified OIDC flow\\\"\\\n---\nsequenceDiagram\n    autonumber\n    participant U as User/App\n    participant A as Atlas\n    participant Idp as Identity Provider (IdP)\n\n    Note right of A: OIDC is configured and set on the organization<br>issuer_uri=https://{some-idp}.com/\n    A->>Idp: issuer_uri/.well-known/openid-configuration\n    Idp->>A: {..., \\\"jwks_uri\\\": \\\"jwks_uri\\\"}\n    A->>Idp: jwks_uri\n    Idp->>A: {keys: [{\\\"kid\\\": kid}, ...]}\n\n    Note right of U: Obtain token\n    U->>Idp: get_token(authentication-mechanism)\n    Idp->>U: JWT token {\\\"iss\\\": \\\"issuer_uri\\\", sub: \\\"user-identity\\\", \\\"kid\\\": \\\"key-used, ...}\n\n    Note right of A: A database user is registered with idp_id/sub as username\n    U->>A: connect(JWT token)\n    A->>A: use kid and keys to validate the token<br>lookup sub with registered users\n    A->>U: auth ok\n```\n\n----------------------------------------\n\nTITLE: Import Project IP Access List\nDESCRIPTION: This command imports the existing Project IP Whitelist configuration into the new `mongodbatlas_project_ip_access_list` resource.  `<project_id>` and `<entry>` need to be replaced with your specific Project ID and entry identifier.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nterraform import mongodbatlas_project_ip_access_list.test <project_id>-<entry>\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables (Dedicated Tier Upgrade)\nDESCRIPTION: Defines the Terraform variables required to upgrade an existing shared tier MongoDB Atlas cluster to a dedicated tier. It includes variables for the Atlas organization ID, public key, private key, provider name, and provider instance size name (M10).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/tenant-upgrade/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = <ATLAS_ORG_ID>\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"AWS\"\nprovider_instance_size_name = \"M10\"\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Atlas Project Terraform\nDESCRIPTION: This resource creates a MongoDB Atlas project with a specified name and organization ID. The `name` attribute sets the project name, and `org_id` specifies the organization to which the project belongs.  It serves as a prerequisite for creating other resources within the project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"example\" {\n  name   = \"project-name\"\n  org_id = var.org_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables Configuration\nDESCRIPTION: Defines the required variables for authenticating with MongoDB Atlas and configuring the cluster. These variables include the public key, private key, project ID, and FCV expiration date.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/version-upgrade-with-pinned-fcv/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_project_id     = \"<MONGODB_ATLAS_PROJECT_ID>\"\nfcv_expiration_date  = \"<FCV pin expiration date, e.g. 2024-11-22T10:50:00Z>\"\n```\n\n----------------------------------------\n\nTITLE: Authentication Trigger Configuration - Terraform\nDESCRIPTION: This example demonstrates configuring an 'AUTHENTICATION' type MongoDB Atlas event trigger.  The trigger is configured to fire upon user login events ('LOGIN') from the 'anon-user' authentication provider. It also associates a function with the trigger.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/event_trigger.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"AUTHENTICATION\"\n  function_id = \"1\"\n  disabled = false\n  config_operation_type = \"LOGIN\"\n  config_providers = [\"anon-user\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Data Lake Pipelines in Terraform\nDESCRIPTION: This Terraform configuration retrieves a list of Data Lake Pipelines for a given project ID. The project_id argument is required to identify the MongoDB Atlas project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/data_lake_pipelines.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_data_lake_pipelines\" \"pipelineDataSource\" {\n  project_id       = <YOU-PROJECT-ID>\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Federated Settings Org Role Mappings Terraform\nDESCRIPTION: This data source retrieves federated settings org role mappings. It requires the federation settings ID and organization ID.  Optionally, it can be configured to retrieve specific pages of results, specifying the `page_num` and `items_per_page`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_role_mappings.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_org_role_mappings\" \"role_mappings\" {\n  federation_settings_id = mongodbatlas_federated_settings_org_role_mapping.org_group_role_mapping_import.id\n  org_id                 = \"627a9683e7f7f7ff7fe306f14\"\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container and Peering Connection Azure Terraform\nDESCRIPTION: This example demonstrates how to create a network container and a network peering connection in Azure using the `mongodbatlas_network_container` and `mongodbatlas_network_peering` resources. It also shows how to create a MongoDB Atlas cluster using `mongodbatlas_advanced_cluster`. It assumes that the required Azure service principal has been created.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n# Ensure you have created the required Azure service principal first, see\n# see https://docs.atlas.mongodb.com/security-vpc-peering/\n\n# Container example provided but not always required, \n# see network_container documentation for details. \nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = local.project_id\n  atlas_cidr_block = local.ATLAS_CIDR_BLOCK\n  provider_name    = \"AZURE\"\n  region           = \"US_EAST_2\"\n}\n\n# Create the peering connection request\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id            = local.project_id\n  container_id          = mongodbatlas_network_container.test.container_id\n  provider_name         = \"AZURE\"\n  azure_directory_id    = local.AZURE_DIRECTORY_ID\n  azure_subscription_id = local.AZURE_SUBSCRIPTION_ID\n  resource_group_name   = local.AZURE_RESOURCES_GROUP_NAME\n  vnet_name             = local.AZURE_VNET_NAME\n}\n\n# Create the cluster once the peering connection is completed\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id     = local.project_id\n  name           = \"terraform-manually-test\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AZURE\"\n      region_name   = \"US_EAST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n\n  depends_on = [ mongodbatlas_network_peering.test ]\n}\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Atlas Search Indexes with Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_search_indexes` data source to retrieve information about search indexes within a specified MongoDB Atlas cluster, database, and collection.  It requires the `project_id`, `cluster_name`, `database_name`, and `collection_name` attributes. The resulting data can be used to configure other resources or for informational purposes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_indexes.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_search_indexes\" \"test\" {\n  project_id = \"<PROJECT_ID>\"\n  cluster_name = \"<CLUSTER_NAME>\"\n  database_name =\"<DATABASE_NAME>\"\n  collection_name = \"<COLLECTION_NAME>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query Federated Settings Identity Providers - Terraform\nDESCRIPTION: This Terraform data source fetches a list of federated settings identity providers associated with a specific federation settings ID. It allows specifying the page number and the number of items per page to handle pagination of the results.  The `federation_settings_id` is obtained from the previously created identity provider resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_identity_providers.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_identity_providers\" \"identitty_provider\" {\n  federation_settings_id = mongodbatlas_federated_settings_identity_provider.identity_provider.id\n  page_num = 1\n  items_per_page = 5\n}\n\n```\n\n----------------------------------------\n\nTITLE: Importing Maintenance Window - Terraform\nDESCRIPTION: This code demonstrates how to import an existing Maintenance Window into Terraform using the project ID. It uses the `terraform import` command, which requires the resource name and the project ID. Replace `PROJECTID` with the actual Atlas project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/maintenance_window.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_maintenance_window.test 5d0f1f73cf09a29120e173cf\n```\n\n----------------------------------------\n\nTITLE: Referencing Connection String Attribute with Index Notation\nDESCRIPTION: This example demonstrates how to refer to a specific attribute value within the connection_strings list by using index notation. This is necessary because connection strings are returned as a list.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters (preview provider 2.0.0).md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nmongodbatlas_advanced_cluster.cluster-test.connection_strings.0.standard_srv\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flex Snapshots for a Cluster - Terraform\nDESCRIPTION: This code retrieves all flex snapshots associated with a specific flex cluster using the `mongodbatlas_flex_snapshots` data source. It requires the project ID and the name of the flex cluster. The snapshot IDs are then outputted as a list.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshot.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_snapshots\" \"snapshots\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n\noutput \"mongodbatlas_flex_snapshots\" {\n  value = [for snapshot in data.mongodbatlas_flex_snapshots.snapshots.results : snapshot.snapshot_id]\n}\n```\n\n----------------------------------------\n\nTITLE: New Cluster Configuration (mongodbatlas_advanced_cluster)\nDESCRIPTION: This snippet shows an example of a new `mongodbatlas_advanced_cluster` resource configuration. It demonstrates the configuration of the project ID, cluster name, cluster type, backup configuration, and replication spec with auto scaling and region configs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"this\" {\n  project_id     = var.project_id\n  name           = \"advanced-cluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # 4 Backup Configuration\n\n  replication_specs {\n    region_configs {\n      auto_scaling { # 3 Auto Scaling\n        disk_gb_enabled = true\n      }\n      region_name   = \"US_EAST_1\"\n      priority      = 7\n      provider_name = \"AWS\" # 2 Provider Settings\n\n      electable_specs { # 1 Replication Spec Configuration\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n      analytics_specs { # 1 Replication Spec Configuration\n        instance_size = \"M10\"\n        node_count    = 1\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the Terraform plan command to preview the changes that will be made to the infrastructure. It requires that the Terraform configuration files are properly set up and credentials are configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Run Terraform Plan Bash\nDESCRIPTION: This command executes the Terraform plan, which compares the current infrastructure state with the desired state defined in the configuration. After importing the resource, running `terraform plan` should show no changes if the import was successful.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n\n(...)\n\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration and found no differences,\nso no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Creating Stream Processor with Cluster to Kafka Pipeline (Terraform)\nDESCRIPTION: This code creates a stream processor with a pipeline that moves data from a Cluster connection to a Kafka connection. It sets the project ID, instance name, processor name, pipeline (defined using jsonencode), and state to 'CREATED'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-cluster-to-kafka-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"clusterProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-cluster.connection_name } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_from_cluster\" } }\n  ])\n  state = \"CREATED\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database Users Data Source Configuration with OIDC\nDESCRIPTION: This Terraform code snippet demonstrates the data source configuration to retrieve database users when using OIDC authentication. It requires the `project_id` which must be a valid Atlas project ID. The data source will return the database users of the associated project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_users.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_database_users\" \"test\" {\n  project_id = \"6414908c207f4d22f4d8f232\"\n}\n```\n\n----------------------------------------\n\nTITLE: Query PrivateLink Endpoints Service for ADL\nDESCRIPTION: This data source retrieves information about all Atlas Data Lake (ADL) PrivateLink endpoints in a project. It uses the project_id from the created resource above.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoints_service_adl.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoints_service_adl\" \"test\" {\n  project_id            = mongodbatlas_privatelink_endpoint_service_adl.adl_test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates how to set the required environment variables for interacting with MongoDB Atlas using the Terraform provider. It includes the public key, private key, organization ID, project ID, and an optional base URL for a custom server.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=<ATLAS_PUBLIC_KEY>\nexport MONGODB_ATLAS_PRIVATE_KEY=<ATLAS_PRIVATE_KEY>\nexport MONGODB_ATLAS_ORG_ID=<ATLAS_ORG_ID>\nexport MONGODB_ATLAS_PROJECT_ID=<ATLAS_PROJECT_ID>\n\n# This env variable is optional and allow you to run terraform with a custom server\nexport MONGODB_ATLAS_BASE_URL=<CUSTOM_SERVER_URL>\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing MongoDB Atlas Project\nDESCRIPTION: This code snippet shows how to import an existing MongoDB Atlas project into Terraform management.  You must replace `5d09d6a59ccf6445652a444a` with the actual project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_project.my_project 5d09d6a59ccf6445652a444a\n```\n\n----------------------------------------\n\nTITLE: Add Cloud Provider Access Authorization - Terraform\nDESCRIPTION: This code defines a `mongodbatlas_cloud_provider_access_authorization` resource in the Terraform configuration. It links the project ID and role ID from the `mongodbatlas_cloud_provider_access_setup` resource. The `aws` block configures the IAM assumed role ARN for AWS access, connecting the Atlas project to the AWS account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_authorization\" \"auth\" {\n\n  project_id = mongodbatlas_cloud_provider_access_setup.unique.project_id\n  role_id    = mongodbatlas_cloud_provider_access_setup.unique.role_id\n\n  aws = {\n    iam_assumed_role_arn = \"arn:aws:iam::<AWS_ACCOUNT_ID>:role/test-user-role\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import mongodbatlas_project_api_key into Terraform State\nDESCRIPTION: Imports an existing `mongodbatlas_project_api_key` resource into the Terraform state. This is necessary after removing the old api_keys configuration and adding the new resource to the Terraform script. The command requires the organization ID and API key ID, separated by a hyphen, as an argument. There should be no impact to real world resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/Programmatic-API-Key-upgrade-guide-1.10.0.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_project_api_key.test2 5d09d6a59ccf6445652a444a-6576974933969669\n```\n\n----------------------------------------\n\nTITLE: AWS Keys as Environmental Variables\nDESCRIPTION: Temporary storage of AWS keys as enviromental variables.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Create Sample Stream Connection - Terraform\nDESCRIPTION: Creates a connection to a sample stream using the `mongodbatlas_stream_connection` resource.  It specifies the project ID, instance name, connection name, and type as 'Sample'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-sample\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"sample_stream_solar\"\n  type            = \"Sample\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials (Terraform)\nDESCRIPTION: Example of setting the MongoDB Atlas credentials using a terraform.tfvars file. This file will automatically be picked up by Terraform and these variables can then be used within the terraform config files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Third-Party Integrations Data Source Usage\nDESCRIPTION: Retrieves the configured third-party integrations for a specified MongoDB Atlas project using the `mongodbatlas_third_party_integrations` data source. It depends on the project ID obtained from a previously defined `mongodbatlas_third_party_integration` resource (e.g., `test_pager_duty`).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/third_party_integrations.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_third_party_integrations\" \"test\" {\n\tproject_id = mongodbatlas_third_party_integration.test_pager_duty.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration.  This command executes the plan generated by `terraform plan`, provisioning the resources defined in the configuration.  It requires the Terraform plan to have been successfully generated.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution in Bash\nDESCRIPTION: This snippet demonstrates the execution of the Terraform plan command. The `terraform plan` command is used to review the changes that Terraform will make to your infrastructure before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Querying Project by project_id in Terraform\nDESCRIPTION: This code snippet demonstrates how to retrieve a MongoDB Atlas project's data using its `project_id`. It assumes that a project has been created with `mongodbatlas_project.test` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_roles_org_id\" \"test\" {\n}\n\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"project-name\"\n  org_id = data.mongodbatlas_roles_org_id.test.org_id\n\n  teams {\n    team_id    = \"5e0fa8c99ccf641c722fe645\"\n    role_names = [\"GROUP_OWNER\"]\n  }\n\n  teams {\n    team_id    = \"5e1dd7b4f2a30ba80a70cd4rw\"\n    role_names = [\"GROUP_READ_ONLY\", \"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n\n  limits {\n    name = \"atlas.project.deployment.clusters\"\n    value = 26\n  }\n}\n\ndata \"mongodbatlas_project\" \"test\" {\n  project_id = \"${mongodbatlas_project.test.id}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Flex Cluster Information - Terraform\nDESCRIPTION: This example illustrates how to retrieve information about a Flex cluster within a MongoDB Atlas project using the `mongodbatlas_advanced_clusters` data source. It assumes a Flex cluster named 'flex-cluster' has already been created using the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters (preview provider 2.0.0).md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"flex-cluster\"\n  cluster_type = \"REPLICASET\"\n  \n  replication_specs {\n    region_configs {\n      provider_name = \"FLEX\"\n      backing_provider_name = \"AWS\"\n      region_name = \"US_EAST_1\"\n      priority = 7\n    }\n  }\n}\n\ndata \"mongodbatlas_advanced_clusters\" \"example\" {\n  project_id = mongodbatlas_advanced_cluster.example-flex.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Flex Cluster Resource Terraform\nDESCRIPTION: This code creates a mongodbatlas_flex_cluster resource.  It sets the project ID, cluster name, provider settings (AWS, US_EAST_1), and enables termination protection. The resource creation depends on the `project_id` and `cluster_name` variables being defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_clusters.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = var.cluster_name\n  provider_settings = {\n    backing_provider_name = \"AWS\"\n    region_name           = \"US_EAST_1\"\n  }\n  termination_protection_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Terraform Variables in terraform.tfvars\nDESCRIPTION: This snippet shows how to define Terraform variables in a `terraform.tfvars` file. It includes the `public_key`, `private_key`, `project_id`, and `datadog_api_key` variables. This file is used to provide values for the Terraform variables.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/datadog/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key      = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key     = \"<ATLAS_PRIVATE_KEY>\"\nproject_id      = \"<ATLAS_PROJECT_ID>\"\ndatadog_api_key = \"<DATADOG_API_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Output Snapshot IDs using Terraform\nDESCRIPTION: This code snippet outputs a list of snapshot IDs for all snapshots associated with a flex cluster. It iterates through the `results` list returned by the `mongodbatlas_flex_snapshots` data source and extracts the `snapshot_id` for each.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshots.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_snapshots\" {\n  value = [for snapshot in data.mongodbatlas_flex_snapshots.snapshots.results : snapshot.snapshot_id]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Provider with Static Keys in Terraform\nDESCRIPTION: This snippet shows how to configure the MongoDB Atlas provider using static API keys directly within the Terraform configuration file. It sets the `public_key` and `private_key` attributes of the `mongodbatlas` provider block. This approach is generally not recommended due to security risks.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"mongodbatlas\" {\n  public_key = var.mongodbatlas_public_key\n  private_key  = var.mongodbatlas_private_key\n}\n```\n\n----------------------------------------\n\nTITLE: Import Federated Settings Identity Provider - Terraform\nDESCRIPTION: This command imports a federated settings identity provider resource. It requires the federation settings ID and the identity provider ID.  This is necessary after upgrading to provider version 1.17.0 if OIDC Workforce IdPs are being used, due to the `audienceClaim` to `audience` attribute change.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.17.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform import mongodbatlas_federated_settings_identity_provider.identity_provider  <federation_settings_id>-<idp_id>\n```\n\n----------------------------------------\n\nTITLE: Download Restore Job Configuration - Terraform\nDESCRIPTION: This Terraform configuration creates a download restore job from a cloud backup snapshot.  It requires a pre-existing cluster and snapshot. The restore job provides a URL to download a .tar.gz archive of the snapshot.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_restore_job.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"my_cluster\" {\n  project_id     = \"<PROJECT-ID>\"\n  name           = \"MyCluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # enable cloud backup snapshots\n\n  replication_specs {\n    region_configs {\n      priority      = 7\n      provider_name = \"AWS\"\n      region_name   = \"EU_WEST_2\"\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n    }\n  }\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id        = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name      = mongodbatlas_advanced_cluster.my_cluster.name\n  description       = \"myDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id      = mongodbatlas_cloud_provider_snapshot.test.project_id\n  cluster_name    = mongodbatlas_cloud_provider_snapshot.test.cluster_name\n  snapshot_id     = mongodbatlas_cloud_provider_snapshot.test.snapshot_id\n  delivery_type_config {\n    download = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Backup Snapshot Data Source Example\nDESCRIPTION: This example demonstrates how to retrieve information about a specific Cloud Backup Snapshot in MongoDB Atlas using Terraform. It requires the `snapshot_id`, `project_id`, and `cluster_name` as inputs, referencing the resource created above.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_snapshot\" \"test\" {\n  snapshot_id  = \"5d1285acd5ec13b6c2d1726a\"\n  project_id     = mongodbatlas_cloud_backup_snapshot.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_snapshot.test.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Query Federated Query Limits\nDESCRIPTION: This Terraform configuration retrieves Federated Database Instance Query Limits. It requires the `project_id` and `tenant_name` as input. The output will contain a list of Federated Database instance query limits for each item in the results array.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_query_limits.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_query_limits\" \"test\" {\n  project_id = \"PROJECT_ID\"\n  tenant_name = \"FEDERATED_DATABASE_INSTANCE_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Employee Access Grant in Atlas\nDESCRIPTION: This Terraform configuration creates a MongoDB employee access grant in Atlas. It requires the `project_id`, `cluster_name`, `grant_type`, and `expiration_time` variables to be defined. The grant type specifies the level of access granted to MongoDB employees, and the expiration time defines when the grant expires.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/mongodb_employee_access_grant.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_mongodb_employee_access_grant\" \"example\" {\n  project_id      = var.project_id\n  cluster_name    = var.cluster_name\n  grant_type      = \"CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA\"\n  expiration_time = \"2025-01-01T12:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an existing Identity Provider resource\nDESCRIPTION: This example shows how to import an existing `mongodbatlas_federated_settings_identity_provider` resource into Terraform state.  The resource must be imported before managing it with Terraform. The command uses the format `federation_settings_id-idp_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_identity_provider.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_settings_identity_provider.identity_provider 6287a663c660f52b1c441c6c-0oad4fas87jL5Xnk12971234\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Version\nDESCRIPTION: Specifies the required Terraform version and the MongoDB Atlas provider version.  This ensures that the configuration is compatible with the specified provider version. It indicates that the MongoDB Atlas provider v1.10.0 is required.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v1.5.2\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Outputting List of Flex Cluster Names in Terraform\nDESCRIPTION: Outputs a list of names for all MongoDB Atlas Flex Clusters retrieved using the `mongodbatlas_flex_clusters` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_cluster.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_flex_clusters_names\" {\n  value = [for cluster in data.mongodbatlas_flex_clusters.example-clusters.results : cluster.name]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Private Endpoint Service - Terraform\nDESCRIPTION: This command demonstrates how to import an existing Private Endpoint Service into Terraform. The command requires the project ID, private link ID, provider name, and region, separated by hyphens. This allows Terraform to manage existing Atlas Private Endpoint Service resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint.test 1112222b3bf99403840e8934-3242342343112-AWS-us-east-1\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This snippet shows the command to apply a Terraform plan. This command executes the changes defined in the Terraform configuration, provisioning the MongoDB Atlas resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-1/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan and Apply - Bash\nDESCRIPTION: These commands execute a Terraform plan and apply, updating the infrastructure based on the defined configurations. The `terraform plan` command shows the changes to be made, and `terraform apply` executes those changes. These are standard Terraform operations for deploying and managing infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Outputting Standard Connection String\nDESCRIPTION: This Terraform output retrieves the standard connection string from the created MongoDB Atlas cluster. The connection string is accessed through the `connection_strings[0].standard` attribute of the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings[0].standard\n}\n```\n\n----------------------------------------\n\nTITLE: Create Free Cluster (Pre-Autoconversion)\nDESCRIPTION: This Terraform code snippet defines a resource for creating a new Free tier cluster in MongoDB Atlas. It includes configurations for the cluster type, replication specifications, region configurations, and electable specifications with a specific instance size. The snippet is used for migrating from Serverless instances to Free clusters prior to automatic conversion.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"this\" {\n        project_id   = var.atlas_project_id\n        name         = \"freeClusterName\"\n        cluster_type = \"REPLICASET\"\n\n        replication_specs {\n            region_configs {\n            electable_specs {\n                instance_size = \"M0\"\n            }\n            provider_name         = \"TENANT\"\n            backing_provider_name = \"AWS\"\n            region_name           = \"US_EAST_1\"\n            priority              = 7\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command (Bash)\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration. This command provisions the resources defined in the Terraform configuration.  This command requires Terraform to be installed and configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Single Stream Processor - Terraform Data Source\nDESCRIPTION: Utilizes the `mongodbatlas_stream_processor` data source to fetch the details of a specific stream processor, identified by its project ID, instance name, and processor name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processor\" \"example-stream-processor\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = mongodbatlas_stream_processor.stream-processor-sample-example.processor_name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform: Private Endpoint Regional Mode Resource\nDESCRIPTION: This Terraform resource creates a `private_endpoint_regional_mode` setting for a MongoDB Atlas project. It requires a `project_id` argument, which is the unique identifier for the project.  Optionally you can enable the setting with the `enabled` argument.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/private_endpoint_regional_mode.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"private_endpoint_regional_mode\" \"test\" {\n  project_id    = \"<PROJECT-ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generated Advanced Cluster Resource Configuration\nDESCRIPTION: This is an example of a generated `mongodbatlas_advanced_cluster` resource configuration after running `terraform plan -generate-config-out=adv_cluster.tf`. This configuration will likely be more verbose than the original `mongodbatlas_cluster` configuration. Most attributes are removed for readability.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"this\" {\n    # ... most attributes are removed for readability of this guide\n    # ....\n    backup_enabled                       = true\n    cluster_type                         = \"REPLICASET\"\n    disk_size_gb                         = 10\n    name                                 = \"legacy-cluster\"\n    project_id                           = \"664619d870c247237f4b86a6\"\n    state_name                           = \"IDLE\"\n    termination_protection_enabled       = false\n    version_release_system               = \"LTS\"\n\n    advanced_configuration {\n      default_read_concern                 = null\n      default_write_concern                = null\n      fail_index_key_too_long              = false\n      javascript_enabled                   = true\n      minimum_enabled_tls_protocol         = \"TLS1_2\"\n      no_table_scan                        = false\n      oplog_min_retention_hours            = 0\n      oplog_size_mb                        = 0\n      sample_refresh_interval_bi_connector = 0\n      sample_size_bi_connector             = 0\n      transaction_lifetime_limit_seconds   = 0\n    }\n\n    replication_specs {\n      container_id = {\n        \"AWS:US_EAST_1\" = \"669644ae01bf814e3d25b963\"\n      }\n      id         = \"66978026668b7619f6f48cf2\"\n      zone_name  = \"ZoneName managed by Terraform\"\n\n      region_configs {\n        priority              = 7\n        provider_name         = \"AWS\"\n        region_name           = \"US_EAST_1\"\n\n        auto_scaling {\n          compute_enabled            = false\n          compute_max_instance_size  = null\n          compute_min_instance_size  = null\n          compute_scale_down_enabled = false\n          disk_gb_enabled            = false\n        }\n\n        electable_specs {\n          disk_iops       = 3000\n          ebs_volume_type = null\n          instance_size   = \"M10\"\n          node_count      = 3\n        }\n        analytics_specs {\n          disk_iops       = 3000\n          ebs_volume_type = null\n          instance_size   = \"M10\"\n          node_count      = 1\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the Terraform apply command to provision the Federated settings resources in MongoDB Atlas.  This command applies the changes defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Replay Mode for MacT\nDESCRIPTION: Configuring the environment variables required to run a Mocked Acceptance Test (MacT) in replay mode. These variables specify that HTTP interactions should be replayed from pre-recorded data, along with other Atlas configurations to avoid creating new projects/clusters.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/testing-best-practices.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"go.testEnvVars\": {\n      \"HTTP_MOCKER_REPLAY\": \"true\",\n      \"MONGODB_ATLAS_ORG_ID\": \"111111111111111111111111\",\n      \"MONGODB_ATLAS_PROJECT_ID\": \"111111111111111111111111\",\n      \"MONGODB_ATLAS_CLUSTER_NAME\": \"mocked-cluster\",\n      \"HTTP_MOCKER_DATA_UPDATE\": \"true\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform configuration (Bash)\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration. It provisions the AWS and Atlas resources defined in the Terraform files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: Executes the Terraform plan command to review the changes that will be applied to the infrastructure. This allows you to verify that the plan aligns with your expectations before provisioning any resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Output the Name of a Flex Snapshot using Terraform\nDESCRIPTION: This code snippet outputs the name of the flex snapshot retrieved by the `mongodbatlas_flex_snapshot` data source. The name is accessed using the `name` attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshots.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_snapshot\" {\n  value = data.mongodbatlas_flex_snapshot.snapshot.name\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Resource Policy by ID in Terraform\nDESCRIPTION: This Terraform code retrieves an existing resource policy by its ID. It uses the `mongodbatlas_resource_policy` data source and depends on the `mongodbatlas_resource_policy.project_ip_access_list` resource.  The resource's `org_id` and `id` are used to query the data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id = mongodbatlas_resource_policy.project_ip_access_list.org_id\n  id     = mongodbatlas_resource_policy.project_ip_access_list.id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: This code snippet specifies the required Terraform version and the MongoDB Atlas provider version. It ensures that the correct provider is used for managing MongoDB Atlas resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.29.0\n```\n\n----------------------------------------\n\nTITLE: Outputting Standard SRV Connection String\nDESCRIPTION: This Terraform output retrieves the standard SRV connection string from the created MongoDB Atlas cluster. The SRV connection string is accessed through the `connection_strings[0].standard_srv` attribute of the `mongodbatlas_advanced_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard_srv\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings[0].standard_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Project Invitation Resource and Data Source Example (Terraform)\nDESCRIPTION: This example demonstrates how to create a project invitation resource and then retrieve its details using the `mongodbatlas_project_invitation` data source. It requires the `project_id` and `username` of the invitation. The `roles` attribute specifies the roles assigned to the invited user.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_invitation.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_invitation\" \"test\" {\n  username    = \"test-acc-username\"\n  project_id  = \"<PROJECT-ID>\"\n  roles       = [ \"GROUP_DATA_ACCESS_READ_WRITE\" ]\n}\n\ndata \"mongodbatlas_project_invitation\" \"test\" {\n  project_id = mongodbatlas_project_invitation.test.project_id\n  username   = mongodbatlas_project_invitation.test.username\n}\n```\n\n----------------------------------------\n\nTITLE: Save Customer-managed X.509 configuration for Atlas project (Terraform)\nDESCRIPTION: This Terraform configuration demonstrates how to save a customer-managed X.509 configuration for a MongoDB Atlas project using the `mongodbatlas_x509_authentication_database_user` resource. It requires providing the customer's X.509 certificate authority (CA) information. A data source is then used to read the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/x509_authentication_database_user.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_x509_authentication_database_user\" \"test\" {\n  project_id        = \"<PROJECT-ID>\"\n  customer_x509_cas = <<-EOT\n    -----BEGIN CERTIFICATE-----\\n    MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n    VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n    c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n    SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n    MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n    VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n    BAsMBFRlc3QxETAPBgNVQQDDAh0ZXN0LmNvbTErMCkGCSqGSIb3DQEJARYcbWVsaX\n    c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n    iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n    cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n    Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n    SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n    7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n    iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n    -----END CERTIFICATE-----\n  EOT\n}\n\ndata \"mongodbatlas_x509_authentication_database_user\" \"test\" {\n  project_id = mongodbatlas_x509_authentication_database_user.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Retrieve Single Resource Policy (Terraform)\nDESCRIPTION: Retrieves a single `mongodbatlas_resource_policy` using its ID and organization ID.  It depends on the `mongodbatlas_resource_policy.project_ip_access_list` resource being created.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id = mongodbatlas_resource_policy.project_ip_access_list.org_id\n  id     = mongodbatlas_resource_policy.project_ip_access_list.id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Lifecycle Configuration for Disk Auto-Scaling\nDESCRIPTION: This code snippet demonstrates how to use Terraform's lifecycle `ignore_changes` meta-argument to prevent unintended disk size changes when auto-scaling is enabled. When `auto_scaling_disk_gb_enabled` is true, Atlas can automatically adjust the disk size, potentially causing Terraform to revert the disk size to the original value defined in the configuration. The `lifecycle` block prevents Terraform from detecting and applying these changes unless explicitly modified. The code requires the Terraform resource where `disk_size_gb` is configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\nlifecycle {\n  ignore_changes = [disk_size_gb]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source Retrieval for Flex Cluster in Terraform\nDESCRIPTION: Retrieves information about a MongoDB Atlas Flex Cluster using the `mongodbatlas_flex_cluster` data source, referencing the name from the defined resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_cluster.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Cedar Policy Set for Cloud Region in Terraform\nDESCRIPTION: This Terraform data source defines a Cedar policy set that forbids cluster modification in the \"gcp:us-east1\" region.  It sets `any_principal` and `any_resource` to `true` and uses the `contains` function in the `when` block to check the cluster regions. The `effect` is set to \"forbid\".\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"cedar_policyset\" \"cloud_region\" {\n  policy {\n    any_principal = true\n    effect        = \"forbid\"\n    action = {\n      type = \" ResourcePolicy::Action\"\n      id   = \"cluster.modify\"\n    }\n    any_resource = true\n    when {\n      text = \"context.cluster.regions.contains(ResourcePolicy::Region::\\\"gcp:us-east1\\\"\")\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source for MongoDB Employee Access Grant\nDESCRIPTION: This Terraform data source retrieves an existing MongoDB employee access grant. It requires the `project_id` and `cluster_name` variables. The output values can then be used to access properties of the access grant, such as the `grant_type` and `expiration_time`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/mongodb_employee_access_grant.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_mongodb_employee_access_grant\" \"ds_example\" {\n  project_id   = var.project_id\n  cluster_name = var.cluster_name\n}\n\noutput \"grant_type\" {\n  value = data.mongodbatlas_mongodb_employee_access_grant.ds_example.grant_type\n}\n\noutput \"expiration_time\" {\n  value = data.mongodbatlas_mongodb_employee_access_grant.ds_example.expiration_time\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Stream Processors - Terraform Data Source\nDESCRIPTION: Uses the `mongodbatlas_stream_processors` data source to retrieve a list of stream processors associated with a specific project and instance.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processors\" \"example-stream-processors\" {\n  project_id    = var.project_id\n  instance_name = mongodbatlas_stream_instance.example.instance_name\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Schemas (Legacy)\nDESCRIPTION: This command generates initial Terraform schema definitions and associated Go types for a resource or data source.  It utilizes HashiCorp's Code Generation Tools and requires `tfplugingen-openapi` and `tfplugingen-framework` to be installed.  The command takes a single argument specifying the resource or data source where the code generation is run, defined in camel case.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-best-practices.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake scaffold-schemas resource_name=streamInstance\n```\n\n----------------------------------------\n\nTITLE: Encryption at Rest - Old Usage\nDESCRIPTION: This shows the old usage of `aws_kms`, `azure_key_vault`, and `google_cloud_kms` in the `mongodbatlas_encryption_at_rest` resource, which is deprecated in v1.0.0 due to the Terraform SDK v2 migration. These were of TypeMap.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_11\n\nLANGUAGE: terraform\nCODE:\n```\n\naws_kms = {\n  enabled                = true\n  access_key_id          = \"\"\n  secret_access_key      = \"\"\n  customer_master_key_id = \"\"\n  region                 = \"\"\n}\n\nazure_key_vault = {\n  enabled             = true\n  client_id           = \"\"\n  azure_environment   = \"\"\n  subscription_id     = \"\"\n  resource_group_name = \"\"\n  key_vault_name  \t  = \"\"\n  key_identifier  \t  = \"\"\n  secret  \t\t  = \"\"\n  tenant_id  \t\t  = \"\"\n}\n\ngoogle_cloud_kms = {\n  enabled                 = true\n  service_account_key     = \"\"\n  key_version_resource_id = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Endpoint-Specific Connection String in Terraform\nDESCRIPTION: This Terraform code retrieves a specific private endpoint connection string based on the `endpoint_service_id`. It iterates through the `private_endpoint` list and checks if the `endpoint_id` matches the desired `endpoint_service_id`. The connection string is then extracted and outputted. The output will be a MongoDB SRV connection string, such as `mongodb+srv://cluster-atlas-pl-0.ygo1m.mongodb.net`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_17\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  endpoint_service_id = google_compute_network.default.name\n  private_endpoints   = coalesce(mongodbatlas_advanced_cluster.cluster.connection_strings.private_endpoint, [])\n  connection_strings = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], local.endpoint_service_id)\n  ]\n}\noutput \"endpoint_service_connection_string\" {\n  value = length(local.connection_strings) > 0 ? local.connection_strings[0] : \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Resource Documentation with Make\nDESCRIPTION: This command generates the documentation for a specified resource by utilizing the make generate-doc command. Replace 'search_deployment' with the actual resource name for which documentation needs to be generated. This process assumes the resource and data source schemas have defined 'MarkdownDescription' and 'Description' fields.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/documentation.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake generate-doc resource_name=search_deployment\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables File Example\nDESCRIPTION: Example content for `terraform.tfvars` file. Replace placeholders with your actual Atlas and AWS keys. This method provides an alternative to environment variables but should be handled with care due to security considerations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\naccess_key   = \"<AWS_ACCESS_KEY_ID>\"\nsecret_key   = \"<AWS_SECRET_ACCESS_KEY>\"\npublic_key   = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key  = \"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: Configures the Terraform MongoDB Atlas provider. This requires specifying the provider and version constraint. It depends on having Terraform installed and configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Retrieve Standard Connection String\nDESCRIPTION: This output retrieves the standard connection string of the MongoDB Atlas cluster.  The connection string can then be used to connect to the cluster from applications or tools.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard\" {\n    value = mongodbatlas_cluster.cluster-test.connection_strings[0].standard\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Stream Connection in MongoDB Atlas (Terraform)\nDESCRIPTION: This code creates a sample stream connection to a MongoDB Atlas Stream Instance. It configures the project ID, instance name, connection name, and type as 'Sample'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-sample\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"sample_stream_solar\"\n  type            = \"Sample\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Configuration and Import Statements\nDESCRIPTION: This Terraform data source is used to generate the HCL configuration and import statement for an existing MongoDB Atlas alert configuration, using variables for the `project_id` and `alert_configuration_id`. This is useful for importing existing alert configurations into Terraform management.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/alert_configuration.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_alert_configuration\" \"test\" {\n    project_id             = var.project_id\n    alert_configuration_id = var.alert_configuration_id\n\n    output {\n        type = \"resource_hcl\"\n        label = \"test\"\n    }\n\n    output {\n        type = \"resource_import\"\n        label = \"test\"\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Data Source: mongodbatlas_privatelink_endpoint_service_data_federation_online_archives\nDESCRIPTION: This Terraform configuration demonstrates how to retrieve Private Endpoint Service resources for Data Federation and Online Archive using the `mongodbatlas_privatelink_endpoint_service_data_federation_online_archives` data source. It requires a project ID to be specified.  The output is a list of private endpoint services.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_data_federation_online_archives.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"atlas-project\" {\n  org_id = var.atlas_org_id\n  name   = var.atlas_project_name\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service_data_federation_online_archive\" \"test\" {\n  project_id = mongodbatlas_project.atlas-project.id\n  endpoint_id = \"vpce-046cf43c79424d4c9\"\n  provider_name = \"AWS\"\n  comment = \"Test\"\n  region        = \"US_EAST_1\"\n  customer_endpoint_dns_name = \"vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com\"\n}\n\ndata \"mongodbatlas_privatelink_endpoint_service_data_federation_online_archives\" \"test_data_source\" {\n  project_id = mongodbatlas_project.atlas-project.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials using Environment Variables\nDESCRIPTION: This snippet shows how to set AWS credentials using environment variables. It requires the AWS Access Key ID and AWS Secret Access Key to be defined as environment variables before running Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/aws/Readme.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Get SSH Connection String Terraform\nDESCRIPTION: This command retrieves the SSH connection string from the Terraform output using `terraform output -json` and parses the JSON result with `jq` to extract the value of the 'ssh_connection_string' attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform output -json | jq -r '.ssh_connection_string.value'\n```\n\n----------------------------------------\n\nTITLE: Error: Resource Not Found\nDESCRIPTION: This error occurs when upgrading to v0.8.2 from v0.8.0 if the state sync steps are not followed. It indicates that Terraform cannot find the specified Private Service Endpoint Connection in Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.2-upgrade-guide.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError: error reading MongoDB Private Service Endpoint Connection(601881cb0d97874a0eb4eb74): GET https://cloud.mongodb.com/api/atlas/v1.0/groups/5cf5a45a9ccf6400e60913b7/privateEndpoint/AZURE/endpointService//subscriptions/{SUSCRIPTION-ID}/endpoint/601881cb0d97874a0eb4eb74: 404 (request \"RESOURCE_NOT_FOUND\") Cannot find resource /api/atlas/v1.0/groups/5cf5a45a9ccf6400e60913b7/privateEndpoint/AZURE/endpointService//subscriptions{SUSCRIPTION-ID}/endpoint/601881cb0d97874a0eb4eb74.\n```\n\n----------------------------------------\n\nTITLE: Remove Alert Configuration from Terraform State\nDESCRIPTION: This command removes a specific alert configuration resource from the Terraform state. Replace `mongodbatlas_alert_configuration.CLUSTER_MONGOS_IS_MISSING_2` with the actual resource name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_alert_configuration/README.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nterraform state rm mongodbatlas_alert_configuration.CLUSTER_MONGOS_IS_MISSING_2\n```\n\n----------------------------------------\n\nTITLE: Output Stream Processor State (Terraform)\nDESCRIPTION: This code defines an output variable to display the state of the retrieved stream processor. It uses the data source 'mongodbatlas_stream_processor' to fetch the state.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"stream_processors_state\" {\n  value = data.mongodbatlas_stream_processor.example-stream-processor.state\n}\n```\n\n----------------------------------------\n\nTITLE: Access List API Key Using IP Address - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to define a `mongodbatlas_access_list_api_key` resource using an IP address to grant access and then retrieve its details using a data source. The `org_id` and `api_key` attributes are required, while `ip_address` specifies the individual IP.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/access_list_api_keys.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id     = \"<ORG-ID>\"\n  ip_address = \"2.3.4.5\"\n  api_key = \"a29120e123cd\"\n}\n\ndata \"mongodbatlas_access_list_api_key\" \"test\" {\n\torg_id = mongodbatlas_access_list_api_key.test.org_id\n\tip_address = mongodbatlas_access_list_api_key.test.ip_address\n  api_key_id = mongodbatlas_access_list_api_key.test.api_key_id\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Data Source - Terraform\nDESCRIPTION: This code snippet uses a `count` argument on the `data \"mongodbatlas_cluster\" \"this\"` block to conditionally create a data source based on `local.use_new_replication_specs`.  This avoids errors in scenarios such as when Asymmetric Shards are used.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_cluster\" \"this\" {\n  count      = local.use_new_replication_specs ? 0 : 1 # Not safe when Asymmetric Shards are used\n  name       = mongodbatlas_advanced_cluster.this.name\n  project_id = mongodbatlas_advanced_cluster.this.project_id\n\n  depends_on = [mongodbatlas_advanced_cluster.this]\n}\n```\n\n----------------------------------------\n\nTITLE: Import Federated Query Limit\nDESCRIPTION: This Terraform configuration shows how to import a Federated Database Instance Query Limit. It requires the project ID, tenant name, and limit name, separated by `--`. This allows Terraform to manage existing Atlas resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_query_limits.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_query_limit.example 1112222b3bf99403840e8934--FederatedDatabaseInstance0--bytesProcessed.daily\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for AWS Credentials\nDESCRIPTION: This snippet demonstrates how to set environment variables for AWS credentials (access key ID and secret access key). These variables are used to authenticate Terraform with the AWS API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command (Bash)\nDESCRIPTION: This command executes the Terraform plan and provisions the resources defined in the Terraform configuration files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing MongoDB Atlas Auditing\nDESCRIPTION: This command demonstrates how to import an existing MongoDB Atlas auditing configuration into Terraform using the auditing ID. This allows you to manage existing auditing configurations with Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/auditing.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_auditing.my_auditing 5d09d6a59ccf6445652a444a\n```\n\n----------------------------------------\n\nTITLE: Creating Cluster Stream Connection in MongoDB Atlas (Terraform)\nDESCRIPTION: This code creates a cluster stream connection to a MongoDB Atlas Stream Instance. It configures the project ID, instance name, connection name, type as 'Cluster', cluster name, and database role to execute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-cluster\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"ClusterConnection\"\n  type            = \"Cluster\"\n  cluster_name    = var.cluster_name\n  db_role_to_execute = {\n    role = \"atlasAdmin\"\n    type = \"BUILT_IN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Access List API Key using CIDR Block - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to retrieve an Access List API Key entry using a CIDR block. It defines a resource to create the access list entry and a data source to retrieve it. The configuration requires the `org_id` and `cidr_block` attributes to be set.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/access_list_api_key.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id = \"<ORG-ID>\"\n  cidr_block = \"1.2.3.4/32\"\n  api_key = \"a29120e123cd\"\n}\n\ndata \"mongodbatlas_access_list_api_key\" \"test\" {\n  org_id     = mongodbatlas_access_list_api_key.test.org_id\n  cidr_block = mongodbatlas_access_list_api_key.test.cidr_block\n  api_key_id = mongodbatlas_access_list_api_key.test.api_key_id\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas API Keys (Environment Variables)\nDESCRIPTION: This snippet demonstrates how to set MongoDB Atlas API keys as environment variables. Replace `<ATLAS_PUBLIC_KEY>` and `<ATLAS_PRIVATE_KEY>` with your actual public and private keys, respectively. These keys are used to authenticate with the MongoDB Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Configuration for Dedicated Tier Upgrade\nDESCRIPTION: This configuration upgrades an existing shared-tier MongoDB Atlas cluster to a dedicated tier. It sets the provider name to GCP and the instance size to M10. It also requires the Atlas organization ID, public and private keys. Replace the placeholder values with your actual Atlas API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster/tenant-upgrade/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = \"627a9687f7f7f7f774de306f14\"\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"GCP\"\nprovider_instance_size_name = \"M10\"\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Organization\nDESCRIPTION: This Terraform resource creates a new MongoDB Atlas organization. It requires an organization owner ID, a name for the organization, a description, and at least one organization role for the programmatic API key. It sets the org_owner_id to \"6205e5fffff79cde6f\", name to \"testCreateORG\", description to \"test API key from Org Creation Test\", and role_names to [\"ORG_OWNER\"].\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/organization.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_organization\" \"test\" {\n  org_owner_id = \"6205e5fffff79cde6f\"\n  name = \"testCreateORG\"\n  description = \"test API key from Org Creation Test\"\n  role_names = [\"ORG_OWNER\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Import Private Endpoint Regional Mode Terraform Resource\nDESCRIPTION: Demonstrates how to import an existing MongoDB Atlas Private Endpoint Regional Mode resource into Terraform using the project ID. The resource can be imported using terraform import command by passing the project id.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/private_endpoint_regional_mode.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_private_endpoint_regional_mode.test 1112222b3bf99403840e8934\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the Terraform destroy command to deprovision the resources created by Terraform.  This removes all resources managed by the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_database_instance/README.md#_snippet_7\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Remove Resources from Terraform State\nDESCRIPTION: These commands remove the `mongodbatlas_privatelink_endpoint` and `mongodbatlas_privatelink_endpoint_service` resources from the Terraform state. This is a necessary step when upgrading from versions v0.8.0 or v0.8.1 to v0.8.2 due to schema changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.2-upgrade-guide.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform state rm mongodbatlas_privatelink_endpoint.test\n$ terraform state rm mongodbatlas_privatelink_endpoint_service.test\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Example\nDESCRIPTION: This snippet shows an example of storing AWS credentials in the `~/.aws/credentials` file. This file is used by the AWS CLI and other tools to authenticate with AWS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_2\n\nLANGUAGE: null\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Network Peering Resource Example (AWS) - Terraform\nDESCRIPTION: This Terraform resource creates a network peering connection in MongoDB Atlas using AWS as the cloud provider. It specifies the accepter region, project ID, container ID, provider name, route table CIDR block, VPC ID, and AWS account ID.  The resource requires the `accepter_region_name`, `project_id`, `container_id`, `provider_name`, `route_table_cidr_block`, `vpc_id`, and `aws_account_id` to be configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_peering.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_network_peering\" \"test\" {\n\taccepter_region_name\t= \"us-east-1\"\t\n\tproject_id    \t\t\t= \"<YOUR-PROJEC-ID>\"\n\tcontainer_id            = \"507f1f77bcf86cd799439011\"\n\tprovider_name           = \"AWS\"\n\troute_table_cidr_block  = \"192.168.0.0/24\"\n\tvpc_id\t\t\t\t\t= \"vpc-abc123abc123\"\n\taws_account_id\t\t\t= \"abc123abc123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Verification\nDESCRIPTION: This command verifies that the Terraform configuration matches the infrastructure after upgrading the provider and making necessary changes. It ensures no unexpected changes will be applied.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.1.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n\n(...)\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration and found no differences,\nso no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Output Example Requiring Backup Disabled\nDESCRIPTION: Illustrates a case where backup_enabled needs to be explicitly set to false in the advanced cluster resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_5\n\nLANGUAGE: Text\nCODE:\n```\nTerraform will perform the following actions:\n\n  # mongodbatlas_advanced_cluster.this will be updated in-place\n  # (moved from mongodbatlas_cluster.this)\n  ~ resource \"mongodbatlas_advanced_cluster\" \"this\" {\n      ~ backup_enabled                       = false -> true\n      ~ connection_strings                   = {\n          + private          = (known after apply)\n          + private_endpoint = (known after apply)\n          + private_srv      = (known after apply)\n          ~ standard         = \"mongodb://cluster-mig-resource-shard-00-00.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-01.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-02.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-03.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-04.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-05.jciib.mongodb-dev.net:27017,cluster-mig-resource-shard-00-06.jciib.mongodb-dev.net:27017/?ssl=true&authSource=admin&replicaSet=atlas-46mqxd-shard-0\" -> (known after apply)\n          ~ standard_srv     = \"mongodb+srv://cluster-mig-resource.jciib.mongodb-dev.net\" -> (known after apply)\n        } -> (known after apply)\n        name                                 = \"cluster-mig-resource\"\n        # (22 unchanged attributes hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials (terraform.tfvars)\nDESCRIPTION: Defines variables for the MongoDB Atlas public key, private key, and organization ID in a `terraform.tfvars` file. This allows for passing these values directly into the Terraform configuration.  Values should be replaced with actual API keys and org ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Create Tenant Cluster - Terraform\nDESCRIPTION: This example shows how to create a tenant cluster in MongoDB Atlas using the mongodbatlas_advanced_cluster resource. The configuration includes the project ID, cluster name, cluster type, and replication specifications with a region configuration that specifies the provider as TENANT and the backing provider as AWS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          electable_specs = {\n            instance_size = \"M0\"\n          }\n          provider_name         = \"TENANT\"\n          backing_provider_name = \"AWS\"\n          region_name           = \"US_EAST_1\"\n          priority              = 7\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import mongodbatlas_project into Terraform State\nDESCRIPTION: Imports an existing `mongodbatlas_project` resource into the Terraform state. This is necessary after removing the resource from the state and updating the Terraform script. The command requires the project ID as an argument. There should be no impact to real world resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/Programmatic-API-Key-upgrade-guide-1.10.0.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_project.test 5d09d6a59ccf6445652a444a\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This command executes the Terraform plan to preview the changes required to achieve successful encryption at rest over AWS PrivateLink for customer-managed keys. It ensures that you are aware of the planned changes before applying them to your infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/aws/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Read MongoDB Atlas Search Deployment Terraform\nDESCRIPTION: This data source retrieves information about an existing MongoDB Atlas search deployment. It requires the `project_id` and `cluster_name` of the deployment. It then exposes attributes such as the deployment's ID, encryption at rest provider and node specifications.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_search_deployment\" \"example\" {\n  project_id   = mongodbatlas_search_deployment.example.project_id\n  cluster_name = mongodbatlas_search_deployment.example.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Clusters Data Source Configuration\nDESCRIPTION: Retrieves a list of MongoDB Atlas clusters for a given project using the `mongodbatlas_clusters` data source in Terraform. It utilizes the `project_id` from the previously defined `mongodbatlas_cluster` resource to establish a dependency.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/clusters.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_clusters\" \"test\" {\n\tproject_id = mongodbatlas_cluster.test.project_id // To get dependency.\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Private Endpoint Resources from State - Bash\nDESCRIPTION: These commands remove the existing `mongodbatlas_private_endpoint` and `mongodbatlas_private_endpoint_interface_link` resources from the Terraform state. This is necessary to allow for re-importing them with the new provider version. Backups of the Terraform state should be created before executing these commands.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform state rm mongodbatlas_private_endpoint.test\n$ terraform state rm mongodbatlas_private_endpoint_interface_link.test\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This command destroys the resources created by the Terraform plan, preventing unnecessary charges. It removes the encryption at rest configuration and any associated AWS resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/aws/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Navigate to organization-step-1 Directory using cd Command in Bash\nDESCRIPTION: This command changes the current working directory to the organization-step-1 directory. It's used to switch to the directory containing the Terraform configuration for the first step.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/Readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../organization-step-1\n```\n\n----------------------------------------\n\nTITLE: Create Stream Instance - Terraform\nDESCRIPTION: Defines a MongoDB Atlas Stream Instance using the `mongodbatlas_stream_instance` resource. It sets the project ID, instance name, and data processing region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_instance\" \"example\" {\n  project_id    = var.project_id\n  instance_name = \"InstanceName\"\n  data_process_region = {\n    region         = \"VIRGINIA_USA\"\n    cloud_provider = \"AWS\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Installation Override\nDESCRIPTION: This Terraform configuration block (`dev.trfc`) allows overriding the default MongoDB Atlas provider with a locally built binary. This is useful for testing changes during development. Replace `<YourUser>` with your actual username.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nprovider_installation {\n\n    dev_overrides {\n      \"mongodb/mongodbatlas\" = \"/Users/<YourUser>/terraform-provider-mongodbatlas/bin\" # path to the provider binary\n    }\n\n    direct {} \n  }\n```\n\n----------------------------------------\n\nTITLE: Defining Token Filter Configuration in Terraform\nDESCRIPTION: This code outlines the general structure for defining token filters within a custom analyzer for MongoDB Atlas Search using Terraform. The `type` parameter defines the filter type, and `ADDITIONAL-OPTIONS` will vary based on the specific filter chosen.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\n\"tokenFilters\":[{\n    \"type\": \"<FILTER_TYPE>\",\n    \"ADDITIONAL-OPTIONS\": VALUE\n  }]\n  \n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Definitions\nDESCRIPTION: Defines the variables required for the Terraform configuration.  The user needs to create a `terraform.tfvars` file with these variables defined with their appropriate values for the configuration to work.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/version-upgrade-with-pinned-fcv/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_project_id     = \"<MONGODB_ATLAS_PROJECT_ID>\"\nfcv_expiration_date  = \"<FCV pin expiration date, e.g. 2024-11-22T10:50:00Z>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Definition\nDESCRIPTION: Defines Terraform variables required for creating a basic MongoDB Atlas cluster. Includes the project ID, cluster name, instance size, and MongoDB major version.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nproject_id = \"{PROJECT_ID}\" # replace with your project ID, should be similar to 664619d870c247237f4b86a6\ncluster_name = \"cluster-mig-resource\"\ninstance_size = \"M10\"\nmongo_db_major_version = \"8.0\"\n```\n\n----------------------------------------\n\nTITLE: Importing Project Invitation Terraform\nDESCRIPTION: This snippet illustrates how to import an existing project invitation into Terraform using the `terraform import` command. It is important to note that accepted invitations cannot be imported. The invitation is identified by a composite ID consisting of the `project_id` and `username` separated by a hyphen.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_invitation.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_project_invitation.my_user 1112222b3bf99403840e8934-my_user@mongodb.com\n```\n\n----------------------------------------\n\nTITLE: Replication Specs Precondition - Terraform\nDESCRIPTION: This code snippet defines a precondition within a Terraform resource to ensure that either the `replication_specs_new` or the original `replication_specs` variable is used, but not both. It validates the input configuration to avoid conflicts between the old and new variable schemes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nprecondition {\n      condition     = !((local.use_new_replication_specs && length(var.replication_specs) > 0) || (!local.use_new_replication_specs && length(var.replication_specs) == 0))\n      error_message = \"Must use either replication_specs_new or replication_specs, not both.\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This command executes the Terraform plan, which shows the changes that will be made to the infrastructure. This allows users to review the planned changes before applying them.  It requires that Terraform is installed and initialized in the current directory.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Retrieving Alert Configuration Details with Terraform Data Source\nDESCRIPTION: This Terraform data source retrieves an existing MongoDB Atlas alert configuration using its project ID and alert configuration ID. It depends on the resource definition of `mongodbatlas_alert_configuration.test`\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/alert_configuration.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_alert_configuration\" \"test\" {\n\tproject_id             = mongodbatlas_alert_configuration.test.project_id\n\talert_configuration_id = mongodbatlas_alert_configuration.test.alert_configuration_id\n}\n\n```\n\n----------------------------------------\n\nTITLE: Querying a MongoDB Atlas Team with Terraform\nDESCRIPTION: This snippet shows how to query an existing MongoDB Atlas team using the `mongodbatlas_team` data source in Terraform. It depends on a previously defined `mongodbatlas_team` resource named `test`, referencing its organization ID and either the team ID or team name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/team.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_team\" \"test\" {\n  org_id     = \"<ORGANIZATION-ID>\"\n  name       = \"myNewTeam\"\n  usernames  = [\"user1\", \"user2\", \"user3\"]\n}\n\ndata \"mongodbatlas_team\" \"test2\" {\n\torg_id     = mongodbatlas_team.test.org_id\n\tname       = mongodbatlas_team.test.name\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieve Data Lake Pipeline Run details with Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use the `mongodbatlas_data_lake_pipeline_run` data source to retrieve information about a specific Data Lake Pipeline Run. It requires a project ID, pipeline name, and pipeline run ID as inputs. The `pipeline_run_id` is obtained from the `mongodbatlas_data_lake_pipeline_runs` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/data_lake_pipeline_run.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_data_lake_pipeline\" \"pipeline\" {\n      //assuming we've already setup project and cluster in another block\n      project_id       = mongodbatlas_project.projectTest.project_id\n      name             = \"DataLakePipelineName\"\n      sink {\n        type = \"DLS\"\n        partition_fields {\n            name = \"access\"\n            order = 0\n        }\n      }\n      source {\n        type = \"ON_DEMAND_CPS\"\n        cluster_name = mongodbatlas_advanced_cluster.clusterTest.name\n        database_name = \"sample_airbnb\"\n        collection_name = \"listingsAndReviews\"\n      }\n      transformations {\n              field = \"test\"\n              type  = \"EXCLUDE\"\n      }\n      transformations {\n              field = \"test22\"\n              type  = \"EXCLUDE\"\n      }\n}\n\ndata \"mongodbatlas_data_lake_pipeline_runs\" \"pipeline_run\" {\n      project_id       = mongodbatlas_project.projectTest.project_id\n      name             = mongodbatlas_data_lake_pipeline.pipeline.name\n}\n\ndata \"mongodbatlas_data_lake_pipeline_run\" \"test\" {\n  project_id       = mongodbatlas_project.projectTest.project_id\n  pipeline_name    = mongodbatlas_data_lake_pipeline.pipeline.name\n  pipeline_run_id  = mongodbatlas_data_lake_pipeline_runs.pipeline_run.results.0.pipeline_run_id   # pipeline_run_id will only be returned if a schedule or ondemand run is active\n}\n```\n\n----------------------------------------\n\nTITLE: Output Stream Processor Results (Terraform)\nDESCRIPTION: This code defines an output variable to display the results from the stream processors data source.  It retrieves the 'results' attribute from 'mongodbatlas_stream_processors'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"stream_processors_results\" {\n  value = data.mongodbatlas_stream_processors.example-stream-processors.results\n}\n```\n\n----------------------------------------\n\nTITLE: Output Stream Processor State - Terraform\nDESCRIPTION: Exports the state of a specific stream processor retrieved using the data source. This allows for monitoring the status of the stream processor.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"stream_processors_state\" {\n  value = data.mongodbatlas_stream_processor.example-stream-processor.state\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This command is used to apply the changes defined in the Terraform plan. It provisions the Federated settings resources based on the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_query_limit/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This snippet shows the command to execute a Terraform plan. This command analyzes the Terraform configuration and determines the changes that will be made to the infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-1/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Set Atlas Credentials\nDESCRIPTION: Sets the MongoDB Atlas public and private keys as environment variables. These keys are required for authenticating Terraform with MongoDB Atlas and managing Atlas resources. Replace `<ATLAS_PUBLIC_KEY>` and `<ATLAS_PRIVATE_KEY>` with your actual Atlas API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Create a Multi-Region Cluster\nDESCRIPTION: This example showcases how to create a multi-region MongoDB Atlas cluster on AWS. It configures replication across multiple AWS regions for high availability and sets provider settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"cluster-test\" {\n  project_id               = \"<YOUR-PROJECT-ID>\"\n  name                     = \"cluster-test-multi-region\"\n  num_shards               = 1\n  cloud_backup             = true\n  cluster_type             = \"REPLICASET\"\n\n  # Provider Settings \"block\"\n  provider_name               = \"AWS\"\n  provider_instance_size_name = \"M10\"\n\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      electable_nodes = 3\n      priority        = 7\n      read_only_nodes = 0\n    }\n    regions_config {\n      region_name     = \"US_EAST_2\"\n      electable_nodes = 2\n      priority        = 6\n      read_only_nodes = 0\n    }\n    regions_config {\n      region_name     = \"US_WEST_1\"\n      electable_nodes = 2\n      priority        = 5\n      read_only_nodes = 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Serverless Instance Details with Terraform\nDESCRIPTION: This Terraform configuration retrieves information about a specific MongoDB Atlas serverless instance using its name and project ID. It requires the `name` and `project_id` attributes to be set with the appropriate values.  The data source provides access to various attributes of the serverless instance, such as connection strings and provider settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/serverless_instance.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_serverless_instance\" \"test_two\" {\n  name        = \"<SERVERLESS_INSTANCE_NAME>\"\n  project_id  = \"<PROJECT_ID >\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Log Environment Variable\nDESCRIPTION: This snippet demonstrates how to enable detailed logging for Terraform using the TF_LOG environment variable. Setting it to 'TRACE' provides verbose output which can be helpful in debugging issues with the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_LOG=TRACE\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager Secret Example\nDESCRIPTION: This is an example of how Atlas API Keys and add them as one secret to AWS SM with a raw value. Public Key and Private Key each need to be entered as their own key value pair.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"public_key\": \"secret1\",\n      \"private_key\":\"secret2\"\n     }\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This snippet shows the command to execute a Terraform plan. This command shows the changes that Terraform will make to the infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Atlas Cloud Backup Schedule - Terraform\nDESCRIPTION: This snippet demonstrates how to retrieve an existing MongoDB Atlas Cloud Backup Schedule using a data source in Terraform. It uses the project ID and cluster name from an existing `mongodbatlas_cloud_backup_schedule` resource to fetch the schedule's details.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_cloud_backup_schedule.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_schedule.test.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials\nDESCRIPTION: This snippet shows how to set MongoDB Atlas credentials using environment variables.  The `MONGODB_ATLAS_PUBLIC_KEY` and `MONGODB_ATLAS_PRIVATE_KEY` environment variables are used to authenticate with the Atlas API.  Make sure to replace the placeholder values with your actual API keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Updated Cloud Backup Schedule Configuration (Terraform)\nDESCRIPTION: This example shows the updated configuration for `mongodbatlas_cloud_backup_schedule` using `zone_id` instead of the deprecated `replication_spec_id`. This change is necessary to align with the updated API schema in version 1.18.0.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.18.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  # other attributes...\n\n  copy_settings {\n    cloud_provider = \"AWS\"\n    frequencies = [\"HOURLY\",\n\t\t   \"DAILY\",\n\t\t   \"WEEKLY\"]\n    region_name = \"US_EAST_1\"\n    zone_id = mongodbatlas_advanced_cluster.my_cluster.replication_specs.*.zone_id[0]\n    should_copy_oplogs = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Terraform Configuration (bash)\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration, which will provision the MongoDB Atlas resources defined in the Terraform files. After applying, the resources will be created in your MongoDB Atlas account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/prometheus-and-teams/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Outputting All Cluster Names Terraform\nDESCRIPTION: This code outputs a list of names for all flex clusters retrieved by the `mongodbatlas_flex_clusters` data source.  It iterates through the `results` attribute and extracts the name of each cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_clusters.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_clusters_names\" {\n  value = [for cluster in data.mongodbatlas_flex_clusters.example-clusters.results : cluster.name]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Flex Cluster to Dedicated Terraform\nDESCRIPTION: Upgrades a Flex cluster to a dedicated cluster hosted on AWS in the US_EAST_1 region.  The `provider_name` is changed from \"FLEX\" to \"AWS\" and the `backing_provider_name` is removed. The instance size is also upgraded to M10.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id   = \"PROJECT ID\"\n  name         = \"NAME OF CLUSTER\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n      }\n      provider_name         = \"AWS\"\n      region_name           = \"US_EAST_1\"\n      priority              = 7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Provider with Empty Credentials in Terraform\nDESCRIPTION: This snippet shows how to configure the MongoDB Atlas provider without explicitly specifying API keys in the Terraform configuration. It relies on environment variables (`MONGODB_ATLAS_PUBLIC_KEY` and `MONGODB_ATLAS_PRIVATE_KEY` or `MCLI_PUBLIC_API_KEY` and `MCLI_PRIVATE_API_KEY`) to provide the necessary credentials for authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"mongodbatlas\" {}\n```\n\n----------------------------------------\n\nTITLE: Importing a Data Lake Pipeline\nDESCRIPTION: This command demonstrates how to import an existing Data Lake Pipeline into Terraform.  It requires the project ID and the name of the data lake pipeline, separated by `--`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/data_lake_pipeline.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nterraform import mongodbatlas_data_lake_pipeline.example 1112222b3bf99403840e8934--test-data-lake-pipeline-test\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Network Peering Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting environment variables for configuring Network Peering with AWS in MongoDB Atlas using the Terraform provider.  It includes AWS account ID, VPC ID, CIDR block, region, subnet ID, and security group ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCOUNT_ID=<AWS_ACCOUNT_ID>\nexport AWS_VPC_ID=<AWS_VPC_ID>\nexport AWS_VPC_CIDR_BLOCK=<AWS_VPC_CIDR_BLOCK>\nexport AWS_REGION=<AWS_REGION>\nexport AWS_SUBNET_ID=<AWS_SUBNET_ID>\nexport AWS_SECURITY_GROUP_ID=<AWS_SECURITY_GROUP_ID>\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Atlas Cloud Backup Snapshot Export Bucket\nDESCRIPTION: This Terraform data source retrieves an existing cloud backup snapshot export bucket from MongoDB Atlas using the project ID and export bucket ID. The `project_id` identifies the Atlas project, and `export_bucket_id` is the unique identifier of the desired snapshot export bucket. The data source relies on the previously created resource to get the `export_bucket_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_backup_snapshot_export_bucket.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_snapshot_export_bucket\" \"test\" {\n  project_id   = \"{PROJECT_ID}\"\n  export_bucket_id = mongodbatlas_cloud_backup_snapshot_export_bucket.test.export_bucket_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Output Example\nDESCRIPTION: Illustrates the expected output when running `terraform apply` after setting up the move, showing that the `mongodbatlas_cluster` resource is being moved to `mongodbatlas_advanced_cluster`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_4\n\nLANGUAGE: Text\nCODE:\n```\nTerraform will perform the following actions:\n # mongodbatlas_cluster.this has moved to mongodbatlas_advanced_cluster.this\n resource \"mongodbatlas_advanced_cluster\" \"this\" {\n name = \"cluster-mig-resource\"\n # (24 unchanged attributes hidden)\n }\n\n Plan: 0 to add, 0 to change, 0 to destroy.\n Do you want to perform these actions?\n Terraform will perform the actions described above.\n Only 'yes' will be accepted to approve.\n\n Enter a value:\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login\nDESCRIPTION: Authenticates with Azure using the Azure CLI. This command opens a browser window for user authentication and retrieves the user's subscription details, which are necessary for deploying resources to Azure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/azure/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Define MongoDB Atlas Cluster Outage Simulation Terraform Resource\nDESCRIPTION: This Terraform resource defines a cluster outage simulation in MongoDB Atlas. It requires the project ID and cluster name, along with a list of outage filters specifying the cloud provider and region to simulate the outage in. The resource creates and manages a cluster outage simulation based on the provided configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster_outage_simulation.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cluster_outage_simulation\" \"outage_simulation\" {\n  project_id = \"64707f06c519c20c3a2b1b03\"\n  cluster_name = \"Cluster0\"\n \toutage_filters {\n     \tcloud_provider = \"AWS\"\n     \tregion_name = \"US_EAST_1\"\n \t}\n\n    outage_filters {\n     \tcloud_provider = \"AWS\"\n     \tregion_name = \"US_EAST_2\"\n \t}\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform variables example\nDESCRIPTION: This example shows how to define all variables within a terraform.tfvars file. The provider will automatically source these variables.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster/README.md#_snippet_3\n\nLANGUAGE: null\nCODE:\n```\naccess_key   = \"<AWS_ACCESS_KEY_ID>\"\nsecret_key   = \"<AWS_SECRET_ACCESS_KEY>\"\npublic_key   = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key  = \"<ATLAS_PRIVATE_KEY>\"\nproject_id   = \"<ATLAS_PROJECT_ID>\"\ncluster_name = \"aws-private-connection\"\n```\n\n----------------------------------------\n\nTITLE: Replacing Cluster References in mongodbatlas_cloud_backup_schedule - Terraform\nDESCRIPTION: This snippet demonstrates how to modify the `mongodbatlas_cloud_backup_schedule` resource by replacing references to the `mongodbatlas_advanced_cluster` resource with the underlying values. This allows for deletion of the cluster resource first when a backup compliance policy is enabled. This workaround is necessary because deleting the cluster before the schedule can cause errors due to the active backup compliance policy.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n\t\t  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n\t\t  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n          ...\n      }\n\t  \n```\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n\t\tproject_id   = \"65251446ae5f3f6ec7968b13\"\n\t\tcluster_name = \"Cluster0\"\n\t   ...\n\t}\n```\n\n----------------------------------------\n\nTITLE: Applying Tags to a MongoDB Atlas Cluster in Terraform\nDESCRIPTION: This snippet shows how to apply tags to a MongoDB Atlas cluster using Terraform. Each tag consists of a key-value pair.  Tags help in categorizing and managing the cluster within the Atlas environment. The key and value should be between 1 and 255 characters in length.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_18\n\nLANGUAGE: terraform\nCODE:\n```\ntags {\n        key   = \"Key 1\"\n        value = \"Value 1\"\n  }\n tags {\n        key   = \"Key 2\"\n        value = \"Value 2\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Federated Settings Identity Providers - Terraform\nDESCRIPTION: This data source retrieves a list of federated settings identity providers using the `mongodbatlas_federated_settings_identity_providers` data source. It returns both the old (okta_idp_id) and new (idp_id) formats for the identity provider ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.15.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_identity_providers\" \"identity_provider\" {\n\t\t\tfederation_settings_id = <federation_settings_id>\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: Destroys the resources managed by Terraform. This command removes all infrastructure created by the Terraform configuration. Use this command to clean up resources after testing to avoid unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the Terraform apply command.  This command applies the changes defined in the Terraform configuration files. It provisions the infrastructure resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: GCloud Initialization\nDESCRIPTION: This snippet shows the example of the GCloud initialization and project selection process. It demonstrates the interactive steps to authenticate and select a Google Cloud project to use with the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/gcp/Readme.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n⇒  gcloud init\nYou are logged in as: [user@example.com].\n\nPick cloud project to use:\n [1] project1\n [2] project2\n...\n\nPlease enter numeric choice or text value (must exactly match list item): 1\n\nYour Google Cloud SDK is configured and ready to use!\n\n```\n\n----------------------------------------\n\nTITLE: Setting Project(s) Resource Environment Variable - Bash\nDESCRIPTION: This snippet demonstrates setting the environment variable necessary for configuring Project resources in MongoDB Atlas using the Terraform provider. It involves specifying a comma-separated list of team IDs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_TEAMS_IDS=<ATLAS_TEAMS_IDS>\n```\n\n----------------------------------------\n\nTITLE: Output: Resource Policy IDs (Terraform)\nDESCRIPTION: Outputs a map of resource policy names to their corresponding IDs.  It uses a for expression to iterate through the results of the `mongodbatlas_resource_policies` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"policy_ids\" {\n  value = { for policy in data.mongodbatlas_resource_policies.this.results : policy.name => policy.id }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Federated Settings Environment Variables - Bash\nDESCRIPTION: This snippet shows how to set the environment variables required for configuring Federated Settings resources within MongoDB Atlas using the Terraform provider. These variables include federation settings ID, federated organization ID, and other related IDs and URLs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_FEDERATION_SETTINGS_ID=<ATLAS_FEDERATION_SETTINGS_ID>\nexport MONGODB_ATLAS_FEDERATED_ORG_ID=<ATLAS_FEDERATED_ORG_ID>\nexport MONGODB_ATLAS_FEDERATED_GROUP_ID=<ATLAS_FEDERATED_GROUP_ID>\nexport MONGODB_ATLAS_FEDERATED_ROLE_MAPPING_ID=<ATLAS_FEDERATED_ROLE_MAPPING_ID>\nexport MONGODB_ATLAS_FEDERATED_OKTA_IDP_ID=<ATLAS_FEDERATED_OKTA_IDP_ID>\nexport MONGODB_ATLAS_FEDERATED_SSO_URL=<ATLAS_FEDERATED_SSO_URL>\nexport MONGODB_ATLAS_FEDERATED_ISSUER_URI=<ATLAS_FEDERATED_ISSUER_URI>\n```\n\n----------------------------------------\n\nTITLE: Update Atlas SDK using Make\nDESCRIPTION: This command is used to update the Atlas SDK. It's primarily needed for major releases. It automatically updates the SDK to track new Atlas features. The update process might modify a large number of files, so it's recommended to run it on the main branch with no uncommitted changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/atlas-sdk.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake update-atlas-sdk\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command (Bash)\nDESCRIPTION: This snippet shows the command to apply a Terraform plan. This will provision the resources defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Defining local variables Terraform\nDESCRIPTION: This code defines local variables used in the subsequent examples for AWS, GCP, and Azure configurations. These variables include the Project ID, GCP Project ID, Azure Directory ID, Azure Subscription ID, Azure Resource Group Name, and Azure VNet Name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_peering.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nlocals {\n  project_id        = <your-project-id>\n\n  # needed for GCP only\n  GCP_PROJECT_ID = <your-google-project-id>\n\n  # needed for Azure Only\n  AZURE_DIRECTORY_ID = <your-azure-directory-id>\n  AZURE_SUBSCRIPTION_ID = <Unique identifer of the Azure subscription in which the VNet resides>\n  AZURE_RESOURCES_GROUP_NAME = <Name of your Azure resource group>\n  AZURE_VNET_NAME = <Name of your Azure VNet>\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This command executes the Terraform plan, which shows the changes that will be applied to your infrastructure. It allows you to review the changes before making them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command - Bash\nDESCRIPTION: This command executes the `terraform destroy` command, which destroys all the resources created by your Terraform configuration. This is useful for cleaning up your infrastructure after testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Outputting Flex Cluster Name in Terraform\nDESCRIPTION: Outputs the name of a specific MongoDB Atlas Flex Cluster retrieved using the `mongodbatlas_flex_cluster` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_cluster.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_flex_cluster\" {\n  value = data.mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution in Bash\nDESCRIPTION: This snippet shows how to destroy the resources created by Terraform. The `terraform destroy` command is used to remove all resources managed by the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: Generates a Terraform execution plan. This plan shows the changes that Terraform will make to the infrastructure. Review the plan carefully to ensure that it matches your expectations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Creating IP Access List Entry Using AWS Security Group in Terraform\nDESCRIPTION: This example demonstrates creating an IP access list entry using an AWS security group, which requires VPC Peering to be configured.  It showcases the use of `mongodbatlas_network_container` and `mongodbatlas_network_peering` resources to set up the peering connection before creating the `mongodbatlas_project_ip_access_list` resource.  It also shows the `depends_on` attribute being used to ensure proper ordering of resource creation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_ip_access_list.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<PROJECT-ID>\"\n  atlas_cidr_block = \"192.168.208.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n\nresource \"mongodbatlas_network_peering\" \"test\" {\n  project_id             = \"<PROJECT-ID>\"\n  container_id           = mongodbatlas_network_container.test.container_id\n  accepter_region_name   = \"us-east-1\"\n  provider_name          = \"AWS\"\n  route_table_cidr_block = \"172.31.0.0/16\"\n  vpc_id                 = \"vpc-0d93d6f69f1578bd8\"\n  aws_account_id         = \"232589400519\"\n}\n\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id         = \"<PROJECT-ID>\"\n  aws_security_group = \"sg-0026348ec11780bd1\"\n  comment            = \"TestAcc for awsSecurityGroup\"\n\n  depends_on = [\"mongodbatlas_network_peering.test\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BI Connector for Atlas in Terraform\nDESCRIPTION: This code snippet demonstrates how to configure the BI Connector for Atlas within a Terraform resource. It includes options to enable the connector and set the desired read preference.  The 'enabled' flag toggles the BI Connector, and 'read_preference' specifies the source for BI Connector reads.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_18\n\nLANGUAGE: Terraform\nCODE:\n```\nbi_connector_config = {\n  enabled         = true\n  read_preference = \"secondary\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output MongoDB Atlas Cluster Configuration - Terraform\nDESCRIPTION: This code snippet defines a Terraform output variable that exposes the full cluster configuration from the `mongodbatlas_cluster` resource. It provides a value and a description for the output variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_cluster\" {\n  value       = mongodbatlas_cluster.this\n  description = \"Full cluster configuration for mongodbatlas_cluster resource\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Oplog Window Alert Configuration in Terraform\nDESCRIPTION: This Terraform resource defines an alert configuration for MongoDB Atlas that triggers when the replication oplog window is running out. It configures notifications to be sent via GROUP (email enabled).  The alert is specific to SECONDARY hosts and ports. The `roles` attribute within the `notification` block specifies the roles to be notified.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/alert_configuration.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  event_type = \"REPLICATION_OPLOG_WINDOW_RUNNING_OUT\"\n  enabled    = true\n\n  notification {\n    type_name     = \"GROUP\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = false\n    email_enabled = true\n    roles         = [\"GROUP_CLUSTER_MANAGER\"]\n  }\n\n  matcher {\n    field_name = \"HOSTNAME_AND_PORT\"\n    operator   = \"EQUALS\"\n    value      = \"SECONDARY\"\n  }\n\n  threshold_config {\n    operator    = \"LESS_THAN\"\n    threshold   = 1\n    units       = \"HOURS\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials (Bash)\nDESCRIPTION: This snippet demonstrates how to set MongoDB Atlas credentials using environment variables. These variables are used by Terraform to authenticate and interact with the Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Encryption at Rest Environment Variables - Bash\nDESCRIPTION: This snippet shows how to set environment variables needed for configuring Encryption at Rest with AWS in MongoDB Atlas using the Terraform provider. It includes AWS access keys, secret access keys, customer master key ID, and region, with both current and updated values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\nexport AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\nexport AWS_CUSTOMER_MASTER_KEY_ID=<AWS_CUSTOMER_MASTER_KEY_ID>\nexport AWS_REGION=<AWS_REGION>\n\nexport AWS_ACCESS_KEY_ID_UPDATED=<AWS_ACCESS_KEY_ID_UPDATED>\nexport AWS_SECRET_ACCESS_KEY_UPDATED=<AWS_SECRET_ACCESS_KEY_UPDATED>\nexport AWS_CUSTOMER_MASTER_KEY_ID_UPDATED=<AWS_CUSTOMER_MASTER_KEY_ID_UPDATED>\nexport AWS_REGION_UPDATED=<AWS_REGION_UPDATED>\n```\n\n----------------------------------------\n\nTITLE: Terraform Version and Provider Configuration\nDESCRIPTION: This snippet shows the Terraform version used and the MongoDB Atlas provider version required for the project. It specifies the provider and its version.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_query_limit/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v1.4.6\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This command destroys the resources that were previously provisioned by Terraform. It's essential to run this command when you no longer need the resources to avoid incurring unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest_private_endpoint/azure/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: GEOSHARDED Cluster Migration (Deprecated)\nDESCRIPTION: This configuration displays a GEOSHARDED cluster using the deprecated `num_shards` attribute within the `replication_specs` block. Each `replication_specs` specifies a `zone_name` and the (deprecated) `num_shards` for that zone. When using the new sharding configurations, it will no longer use the existing attribute `num_shards`, and instead the number of shards are defined by the number of `replication_specs` elements.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/advanced-cluster-new-sharding-schema.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"test\" {\n  project_id = var.project_id\n  name = \"GeoShardedCluster\"\n  cluster_type   = \"GEOSHARDED\"\n\n  replication_specs {\n    zone_name  = \"zone n1\"\n    num_shards = 2\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_EAST_1\"\n    }\n  }\n\n  replication_specs {\n    zone_name  = \"zone n2\"\n    num_shards = 2\n\n    region_configs {\n    electable_specs {\n        instance_size = \"M30\"\n        node_count    = 3\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a List of Resource Policies in Terraform\nDESCRIPTION: This Terraform code retrieves a list of all resource policies in the specified organization. It uses the `mongodbatlas_resource_policies` data source. It depends on three `mongodbatlas_resource_policy` resources: `project_ip_access_list`, `cloud_provider`, and `cloud_region`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/resource_policy.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policies\" \"this\" {\n  org_id = data.mongodbatlas_resource_policy.project_ip_access_list.org_id\n\n  depends_on = [mongodbatlas_resource_policy.project_ip_access_list, mongodbatlas_resource_policy.cloud_provider, mongodbatlas_resource_policy.cloud_region]\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File\nDESCRIPTION: Shows the format for storing AWS credentials in the `~/.aws/credentials` file. This is an alternative to using environment variables.  Replace `<AWS_ACCESS_KEY_ID>` and `<AWS_SECRET_ACCESS_KEY>` with your actual keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Reviewing the Terraform Plan - Bash\nDESCRIPTION: This snippet shows the command used to create a terraform plan, allowing the user to review the changes that will be made to the infrastructure before applying them.  It is important to inspect the plan to ensure there are no unexpected or unwanted changes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/multi-cloud/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This command destroys the Terraform-managed resources, removing the Atlas project and cluster. This prevents unnecessary Atlas charges. It requires that Terraform is initialized in the current directory and has a valid state file.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Configuration\nDESCRIPTION: This snippet configures the Terraform providers for Google Cloud and MongoDB Atlas. It specifies the versions of the providers being used.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/gcp/Readme.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.13.0\n+ provider registry.terraform.io/hashicorp/google\n+ provider registry.terraform.io/terraform-providers/mongodbatlas\n```\n\n----------------------------------------\n\nTITLE: Export AWS Credentials (Bash)\nDESCRIPTION: Exports the AWS access key ID and secret access key as environment variables. This allows Terraform to authenticate with AWS. Replace `<AWS_ACCESS_KEY_ID>` and `<AWS_SECRET_ACCESS_KEY>` with your actual keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/aws/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: New Cluster Configuration (mongodbatlas_advanced_cluster) with Provider 2.0.0 Preview\nDESCRIPTION: This snippet shows an example of a new `mongodbatlas_advanced_cluster` resource configuration using the Preview of MongoDB Atlas Provider 2.0.0. It demonstrates the configuration of replication specs as a list, and autoscaling.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"this\" {\n  project_id     = var.project_id\n  name           = \"advanced-cluster\"\n  cluster_type   = \"REPLICASET\"\n  backup_enabled = true # 4 Backup Configuration\n\n  replication_specs = [\n    {\n      region_configs = [\n        {\n          auto_scaling = { # 3 Auto Scaling\n            disk_gb_enabled = true\n          }\n          region_name   = \"US_EAST_1\"\n          priority      = 7\n          provider_name = \"AWS\" # 2 Provider Settings\n\n          electable_specs = { # 1 Replication Spec Configuration\n            instance_size = \"M10\"\n            node_count    = 3\n          }\n          analytics_specs = { # 1 Replication Spec Configuration\n            instance_size = \"M10\"\n            node_count    = 1\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials using Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates how to configure MongoDB Atlas credentials by setting environment variables. It exports the public and private keys, which are required for authenticating with the Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/multi-cloud/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Version Configuration\nDESCRIPTION: Specifies the required Terraform version and the MongoDB Atlas provider version. This ensures compatibility with the configurations defined in this project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.29.0\n```\n\n----------------------------------------\n\nTITLE: Configure Encryption at Rest with Azure - Terraform\nDESCRIPTION: This snippet configures encryption at rest using customer key management in Azure Key Vault.  It configures the encryption settings, retrieves the configuration, and outputs whether the Azure Key Vault configuration is valid. It requires Azure-specific variables like tenant ID, subscription ID, client ID, and secret.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = var.atlas_project_id\n\n  azure_key_vault_config {\n    enabled           = true\n    azure_environment = \"AZURE\"\n\n    tenant_id       = var.azure_tenant_id\n    subscription_id = var.azure_subscription_id\n    client_id       = var.azure_client_id\n    secret          = var.azure_client_secret\n\n    resource_group_name = var.azure_resource_group_name\n    key_vault_name      = var.azure_key_vault_name\n    key_identifier      = var.azure_key_identifier\n  }\n}\n\ndata \"mongodbatlas_encryption_at_rest\" \"test\" {\n  project_id = mongodbatlas_encryption_at_rest.test.project_id\n}\n\noutput \"is_azure_encryption_at_rest_valid\" {\n  value = data.mongodbatlas_encryption_at_rest.test.azure_key_vault_config.valid\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processors Data Source - Terraform\nDESCRIPTION: Retrieves a list of all stream processors within a specific MongoDB Atlas Stream Instance using the `mongodbatlas_stream_processors` data source. The instance_name and project_id are required to filter the results.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processors\" \"example-stream-processors\" {\n  project_id    = var.project_id\n  instance_name = mongodbatlas_stream_instance.example.instance_name\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Encryption at Rest Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting environment variables for configuring Encryption at Rest with Azure in MongoDB Atlas using the Terraform provider.  It includes the Azure client ID, subscription ID, resource group name, app secret, key vault name, key identifier, tenant ID, and directory ID, with both current and updated key vault name and key identifier values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_CLIENT_ID=<AZURE_CLIENT_ID>\nexport AZURE_SUBSCRIPTION_ID=<AZURE_SUBSCRIPTION_ID>\nexport AZURE_RESOURCE_GROUP_NAME=<AZURE_RESOURCE_GROUP_NAME>\nexport AZURE_APP_SECRET=<AZURE_APP_SECRET>\nexport AZURE_KEY_VAULT_NAME=<AZURE_KEY_VAULT_NAME>\nexport AZURE_KEY_IDENTIFIER=<AZURE_KEY_IDENTIFIER>\nexport AZURE_TENANT_ID=<AZURE_TENANT_ID>\nexport AZURE_DIRECTORY_ID=<AZURE_DIRECTORY_ID>\nexport AZURE_KEY_VAULT_NAME_UPDATED=<AZURE_KEY_VAULT_NAME_UPDATED>\nexport AZURE_KEY_IDENTIFIER_UPDATED=<AZURE_KEY_IDENTIFIER_UPDATED>\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command (Bash)\nDESCRIPTION: This snippet shows the command to destroy the resources created by Terraform. This will remove all of the infrastructure defined in the Terraform configuration, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Query Shared Tier Restore Jobs in MongoDB Atlas with Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_shared_tier_restore_jobs` data source to fetch all cloud backup snapshot restore jobs for a specific shared tier cluster within a MongoDB Atlas project.  It requires the `project_id` and `cluster_name` as input arguments. This data source is specific to Shared Tier clusters (M2 and M5).\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_shared_tier_restore_jobs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_shared_tier_restore_jobs\" \"test\" {\n  project_id   = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name = \"MyClusterTest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Resources (bash)\nDESCRIPTION: This snippet shows the command to destroy the Terraform-managed resources. Running this command will remove all the resources that were created by the Terraform configuration, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/prometheus-and-teams/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Import Custom DNS Configuration for Atlas Cluster on AWS\nDESCRIPTION: This shows how to import an existing Custom DNS Configuration for Atlas Clusters on AWS into Terraform using the project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/custom_dns_configuration_cluster_aws.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_custom_dns_configuration_cluster_aws.test 1112222b3bf99403840e8934\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This command applies the Terraform configuration, creating or modifying resources in GCP and MongoDB Atlas as defined in the Terraform files. It requires a valid Terraform plan to have been generated beforehand.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/gcp/Readme.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This command executes the Terraform plan, allowing you to preview the changes that will be made to your infrastructure.  It shows the resources that will be created, modified, or destroyed based on the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/azure/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Old Cloud Backup Schedule Configuration (Terraform)\nDESCRIPTION: This example shows the old configuration for `mongodbatlas_cloud_backup_schedule` using `replication_spec_id`. Users should update their configurations to use `zone_id` instead, as `replication_spec_id` is deprecated in version 1.18.0.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.18.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_advanced_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_advanced_cluster.my_cluster.name\n\n  # other attributes...\n\n  copy_settings {\n    cloud_provider = \"AWS\"\n    frequencies = [\"HOURLY\",\n\t\t   \"DAILY\",\n\t\t   \"WEEKLY\"]\n    region_name = \"US_EAST_1\"\n    replication_spec_id = mongodbatlas_advanced_cluster.my_cluster.replication_specs.*.id[0]  # replace with zone_id\n    should_copy_oplogs = false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Network Container\nDESCRIPTION: This example shows how to import an existing `mongodbatlas_network_container` resource into Terraform. It uses the project ID and network peering container ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_container.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_network_container.my_container 1112222b3bf99403840e8934-5cbf563d87d9d67253be590a\n```\n\n----------------------------------------\n\nTITLE: Adding Labels to a MongoDB Atlas Cluster with Terraform\nDESCRIPTION: This snippet demonstrates how to add labels to a MongoDB Atlas cluster using Terraform. Labels are key-value pairs used for categorization.  The key `Infrastructure Tool` is reserved and cannot be set. The provided example showcases adding two labels to the cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_17\n\nLANGUAGE: terraform\nCODE:\n```\nlabels {\n        key   = \"Key 1\"\n        value = \"Value 1\"\n  }\n labels {\n        key   = \"Key 2\"\n        value = \"Value 2\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Updating Search Index Resource (Old)\nDESCRIPTION: This snippet demonstrates the old usage of the `mongodbatlas_search_index` resource in v1.0.0. The `analyzers` field is defined as a block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.1-upgrade-guide.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_search_index\" \"test\" {\n  project_id         = mongodbatlas_cluster.aws_conf.project_id\n  cluster_name       = mongodbatlas_cluster.aws_conf.name\n  analyzer = \"lucene.simple\"\n  collection_name = \"collection_test\"\n  database = \"database_test\"\n  mappings_dynamic = true\n  name = \"name_test\"\n  search_analyzer = \"lucene.standard\"\n  \n  analyzers {\n    name = \"index_analyzer_test_name\"\n    char_filters {\n      type = \"mapping\"\n      mappings = <<-EOF\n\t  {\\\"\\\\\" : \"/\"}\n\t  EOF\n    }\n    tokenizer {\n      type = \"nGram\"\n      min_gram = 2\n      max_gram = 5\n    }\n    token_filters {\n      type = \"length\"\n      min = 20\n      max = 33\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Specifications for Multi-Cloud Deployment with Terraform\nDESCRIPTION: This snippet illustrates how to configure replication specifications for a MongoDB Atlas cluster in a multi-cloud environment using Terraform. It defines configurations for AWS and GCP regions, including instance sizes, node counts, provider names, priorities, and region names.  This is a replication_specs example for multi-cloud deployment.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_18\n\nLANGUAGE: terraform\nCODE:\n```\n//Example Multicloud\nreplication_specs {\n  region_configs {\n    electable_specs {\n      instance_size = \"M10\"\n      node_count    = 3\n    }\n    analytics_specs {\n      instance_size = \"M10\"\n      node_count    = 1\n    }\n    provider_name = \"AWS\"\n    priority      = 7\n    region_name   = \"US_EAST_1\"\n  }\n  region_configs {\n    electable_specs {\n      instance_size = \"M10\"\n      node_count    = 2\n    }\n    provider_name = \"GCP\"\n    priority      = 6\n    region_name   = \"NORTH_AMERICA_NORTHEAST_1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Stream Privatelink Endpoints - Terraform\nDESCRIPTION: Retrieves a list of all MongoDB Atlas Stream Privatelink Endpoints within a specified project. It depends on the `mongodbatlas` provider and requires only the `project_id` variable to be defined. The results are a list of stream privatelink endpoints.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoints.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_privatelink_endpoints\" \"plural_datasource\" {\n  project_id = var.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Schema (Internal Tool)\nDESCRIPTION: This command generates Terraform schema definitions from the OpenAPI specification.  It uses a configuration file (`./tools/codegen/config.yml`). The command takes an optional `resource_name` argument. If not provided, all resources defined in the configuration will be generated.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-best-practices.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake generate-schema resource_name=search_deployment\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Private Endpoint Link Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting environment variables for configuring Private Endpoint Link with AWS in MongoDB Atlas using the Terraform provider. It involves AWS access keys, secret access keys, customer master key ID, region, VPC ID, subnet ID, and security group ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=<AWS_ACCESS_KEY_ID>\nexport AWS_SECRET_ACCESS_KEY=<AWS_SECRET_ACCESS_KEY>\nexport AWS_CUSTOMER_MASTER_KEY_ID=<AWS_CUSTOMER_MASTER_KEY_ID>\nexport AWS_REGION=<AWS_REGION>\nexport AWS_VPC_ID=<AWS_VPC_ID>\nexport AWS_SUBNET_ID=<AWS_SUBNET_ID>\nexport AWS_SECURITY_GROUP_ID=<AWS_SECURITY_GROUP_ID>\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform CLI Configuration File Environment Variable\nDESCRIPTION: This bash command sets the `TF_CLI_CONFIG_FILE` environment variable, pointing Terraform to the `dev.trfc` file. This ensures that Terraform uses the locally built provider during initialization and execution.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport TF_CLI_CONFIG_FILE=PATH/TO/dev.trfc\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Terraform Error: Reference to undeclared resource\nDESCRIPTION: This is a sample error that you might face when updating a Terraform config to use `mongodbatlas_advanced_cluster`. This error indicates that the user forgot to update the resource type to `mongodbatlas_advanced_cluster`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_2\n\nLANGUAGE: Text\nCODE:\n```\nError: Reference to undeclared resource\n    │   on outputs.tf line 7, in output \"container_id\":\n    │    7:     value = mongodbatlas_cluster.this.replication_specs[0].container_id\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: Generates a Terraform execution plan, showing the changes that will be applied to the infrastructure.  This allows users to review the planned changes before applying them, ensuring that the infrastructure will be provisioned as expected.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/azure/Readme.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Apply\nDESCRIPTION: This snippet shows the command to apply the Terraform configuration. This command provisions the resources defined in the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/aws/Readme.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Data Source: Retrieving organization ID with Terraform\nDESCRIPTION: This Terraform code snippet retrieves the organization ID using the `mongodbatlas_roles_org_id` data source. This ID is then used to create a MongoDB Atlas project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/projects.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_roles_org_id\" \"test\" {\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Reading MongoDB Employee Access Grant (Terraform)\nDESCRIPTION: This Terraform data source retrieves information about an existing MongoDB employee access grant. It requires the `project_id` and `cluster_name` to be defined as variables. The output can be used to retrieve attributes of the grant, such as `grant_type` and `expiration_time`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/mongodb_employee_access_grant.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_mongodb_employee_access_grant\" \"ds_example\" {\n  project_id   = var.project_id\n  cluster_name = var.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials via Environment Variables (Bash)\nDESCRIPTION: This snippet shows how to set the AWS access key ID and secret access key as environment variables. These credentials are used by the Terraform AWS provider to manage AWS resources. Replace the placeholders with your actual AWS credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID='<AWS_ACCESS_KEY_ID>'\nexport AWS_SECRET_ACCESS_KEY='<AWS_SECRET_ACCESS_KEY>'\n```\n\n----------------------------------------\n\nTITLE: Import Serverless PrivateLink Endpoint\nDESCRIPTION: This example demonstrates how to import an existing Serverless PrivateLink Endpoint into Terraform using the `terraform import` command. The resource is imported using the project ID and endpoint ID, separated by `--`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service_serverless.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint_service_serverless.test 1112222b3bf99403840e8934--serverless_name--vpce-jjg5e24qp93513h03\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Resources\nDESCRIPTION: This snippet demonstrates how to destroy the Terraform-managed resources. The command `terraform destroy` is used to remove all the infrastructure created by Terraform. This is important to avoid unnecessary charges after testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/datadog/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: The `terraform apply` command is used to apply the changes defined in the Terraform configuration.  This command will provision the Atlas project and cluster resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/version-upgrade-with-pinned-fcv/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas Database User\nDESCRIPTION: This example demonstrates how to create a MongoDB Atlas database user with specified username, password, project ID, authentication database name, and roles.  It also shows how to define labels for the user.  Dependencies include the MongoDB Atlas provider and a valid project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_user.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"test-acc-username\"\n  password           = \"test-acc-password\"\n  project_id         = \"<PROJECT-ID>\"\n  auth_database_name = \"admin\"\n\n  roles {\n    role_name     = \"readWrite\"\n    database_name = \"admin\"\n  }\n\n  roles {\n    role_name     = \"atlasAdmin\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"key 1\"\n    value = \"value 1\"\n  }\n  labels {\n    key   = \"key 2\"\n    value = \"value 2\"\n  }\n}\n\ndata \"mongodbatlas_database_user\" \"test\" {\n  project_id = mongodbatlas_database_user.test.project_id\n  username   = mongodbatlas_database_user.test.username\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Network Container Resource\nDESCRIPTION: Defines a `mongodbatlas_network_container` resource. This code block creates a network container with the specified project ID, CIDR block, provider name, and region name. It serves as a prerequisite for the data source example by creating the necessary infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_containers.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<YOUR-PROJECT-ID>\"\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Database User Resource Configuration with OIDC\nDESCRIPTION: This Terraform code snippet demonstrates how to configure a `mongodbatlas_database_user` resource for OIDC federated authentication. It sets the `username`, `project_id`, `auth_database_name`, and `oidc_auth_type`. Note that OIDC support is available starting in MongoDB 7.0 or later, and the `username` format differs for OIDC users.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_users.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"64d613677e1ad50839cce4db/testUserOrGroup\"\n  project_id         = \"6414908c207f4d22f4d8f232\"\n  auth_database_name = \"admin\"\n  oidc_auth_type     = \"IDP_GROUP\"\n\n  roles {\n    role_name     = \"readWriteAnyDatabase\"\n    database_name = \"admin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables File Example\nDESCRIPTION: This snippet shows an example of a `terraform.tfvars` file.  This file is used to define the values for the Terraform variables used in the configuration. It includes AWS and MongoDB Atlas credentials, and the Atlas Project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_3\n\nLANGUAGE: null\nCODE:\n```\naccess_key   = \"<AWS_ACCESS_KEY_ID>\"\nsecret_key   = \"<AWS_SECRET_ACCESS_KEY>\"\npublic_key   = \"<ATLAS_PUBLIC_KEY>\"\nprivate_key  = \"<ATLAS_PRIVATE_KEY>\"\nproject_id   = \"<ATLAS_PROJECT_ID>\"\n```\n\n----------------------------------------\n\nTITLE: OIDC Workload Azure Diagram\nDESCRIPTION: Mermaid diagram illustrating the OIDC Workload flow in Azure, including a VM, Atlas, and Azure IdP. It shows how the VM obtains a JWT from the metadata endpoint and connects to Atlas using the token, facilitating database operations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\n---\\\ntitle: \\\"OIDC Workload Azure\\\"\\\n---\nsequenceDiagram\n    autonumber\n    participant VM as VM<br>(Azure)\n    participant A as Atlas\n    participant Idp as IdP<br>(Azure)\n    \n    Note right of A: OIDC is configured and set on the organization<br>Atlas will keep an internal {idp_id}\n    A->>Idp: https://sts.windows.net/{tenant-id}/.well-known/openid-configuration\n    Idp->>A: {..., \\\"jwks_uri\\\": \\\"jwks_uri\\\"}\n    A->>Idp: jwks_uri\n    Idp->>A: {keys: [{\\\"kid\\\": kid}, ...]}\n\n    Note right of VM: A python script (pymongo.py) runs on boot<br>It reads the MongoURI from an env-var<br>The pymongo driver gets the JWT from the metadata endpoint<br>See description below\n    VM->>Idp: http://169.254.169.254/metadata/identity/oauth2/token\n    Idp->>VM: JWT token: {<br>\\\"iss\\\": \\\"https://sts.windows.net/{tenant-id}\\\", <br>\\\"sub\\\": \\\"{vm_configured_identity}\\\"<br>}\n\n    Note right of A: A database user exist on the organization<br>username: {idp_id}/{vm_configured_identity}\n    VM ->> A: connect(JWT token, MongoURI)\n    activate A\n    A->>A: validate token and lookup database user\n    A->>VM: auth ok\n    VM->>A: insert record into database\n    A->>VM: insert record response\n    VM->>A: close connection\n    deactivate A\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login\nDESCRIPTION: This command authenticates the user with Azure, allowing Terraform to interact with Azure resources. It opens a browser window for authentication and then displays the user's account details.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/azure/Readme.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Configuring Auditing with mongodbatlas_auditing Resource Terraform\nDESCRIPTION: This Terraform resource configures auditing settings for a MongoDB Atlas project, including the project ID, audit filter, authorization success flag, and enablement status. The audit filter is a JSON string that specifies the events to audit.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/auditing.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_auditing\" \"test\" {\n\tproject_id                  = \"<project-id>\"\n\taudit_filter                = \"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\"\n\taudit_authorization_success = false\n\tenabled                     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Init & Apply (v1 - mongodbatlas_cluster)\nDESCRIPTION: This snippet navigates to the `v1` directory, initializes Terraform, and then applies the configuration using the specified variable file. This step creates the initial `mongodbatlas_cluster` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd v1\nterraform init\nterraform apply -var-file=../v1_v2.tfvars\n```\n\n----------------------------------------\n\nTITLE: Setting Azure Network Peering Environment Variables - Bash\nDESCRIPTION: This snippet outlines setting environment variables for configuring Network Peering with Azure in MongoDB Atlas using the Terraform provider. The variables include the Azure directory ID, subscription ID, resource group name, and VNet name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexport AZURE_DIRECTORY_ID=<AZURE_DIRECTORY_ID>\nexport AZURE_SUBSCRIPTION_ID=<AZURE_SUBSCRIPTION_ID>\nexport AZURE_RESOURCE_GROUP_NAME=<AZURE_RESOURCE_GROUP_NAME>\nexport AZURE_VNET_NAME=<AZURE_VNET_NAME>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Strip Char Filter in Terraform\nDESCRIPTION: This code snippet demonstrates how to configure the `htmlStrip` character filter within a custom analyzer for MongoDB Atlas Search using Terraform.  The `htmlStrip` filter removes HTML tags, and you can specify which tags to ignore using the `ignoredTags` parameter.  The type must be htmlStrip.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_index.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nanalyzers = <<-EOF [{\n            \"name\": \"analyzer_test\",\n            \"charFilters\":[{\n              \"type\": \"htmlStrip\",\n              \"ignoredTags\": [\"a\"]\n              }]   \n            }] \n       \n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This command executes the Terraform plan, showing the changes that will be made to the infrastructure. It's important to review the plan to ensure that the changes are expected and safe before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables (Bash)\nDESCRIPTION: This code demonstrates how to set the MongoDB Atlas public and private keys as environment variables, which can be used by the Terraform provider for authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution (Bash)\nDESCRIPTION: This command executes the Terraform plan, which analyzes the configuration and determines the changes that will be made to your infrastructure.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Database User Resource Configuration\nDESCRIPTION: This Terraform code snippet demonstrates how to create a `mongodbatlas_database_user` resource. It defines a database user with a username, password, project ID, authentication database, roles, and labels. The `project_id` must be a valid Atlas project ID. The `auth_database_name` specifies the database for authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/database_users.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username           = \"test-acc-username\"\n  password           = \"test-acc-password\"\n  project_id         = \"<PROJECT-ID>\"\n  auth_database_name = \"admin\"\n\n  roles {\n    role_name     = \"readWrite\"\n    database_name = \"admin\"\n  }\n\n  roles {\n    role_name     = \"atlasAdmin\"\n    database_name = \"admin\"\n  }\n\n  labels {\n    key   = \"key 1\"\n    value = \"value 1\"\n  }\n  labels {\n    key   = \"key 2\"\n    value = \"value 2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan (No Changes) - Bash\nDESCRIPTION: This command executes a Terraform plan to verify that no changes are detected after the migration. A successful plan with no changes confirms that the migration was completed correctly and that the infrastructure is up-to-date. It is a validation step in the migration process.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n\n(...)\n\nNo changes. Infrastructure is up-to-date.\n\nThis means that Terraform did not detect any differences between your\nconfiguration and real physical resources that exist. As a result, no\nactions need to be performed.\n```\n\n----------------------------------------\n\nTITLE: Importing a Federated Settings Org Role Mapping - Terraform\nDESCRIPTION: This command imports an existing FederatedSettingsOrgRoleMapping resource using the format `federation_settings_id-org_id-role_mapping_id`.  The values must be the unique identifiers of the federated settings, the organization, and the role mapping respectively.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_settings_org_role_mapping.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_settings_org_role_mapping.org_group_role_mapping_import 6287a663c7f7f7f71c441c6c-627a96837f7f7f7e306f14-628ae97f7f7468ea3727\n```\n\n----------------------------------------\n\nTITLE: Retrieve Advanced Clusters for a Project - Replica Set Configuration - Terraform\nDESCRIPTION: This Terraform code retrieves Advanced Clusters for a specified project, creating a replica set configuration with a single region. It uses the 'mongodbatlas_advanced_clusters' data source and depends on the 'mongodbatlas_advanced_cluster' resource for project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"cluster-test\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M0\"\n      }\n      provider_name         = \"TENANT\"\n      backing_provider_name = \"AWS\"\n      region_name           = \"US_EAST_1\"\n      priority              = 7\n    }\n  }\n}\n\ndata \"mongodbatlas_advanced_clusters\" \"example\" {\n  project_id = mongodbatlas_advanced_cluster.example.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Cloud Backup Snapshot Restore Job - Terraform\nDESCRIPTION: Demonstrates how to import an existing MongoDB Atlas Cloud Backup Snapshot Restore Job into Terraform using the `terraform import` command. The resource is identified by a combination of project ID, cluster name, and job ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_backup_snapshot_restore_job.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_cloud_backup_snapshot_restore_job.test 5cf5a45a9ccf6400e60981b6-MyCluster-5d1b654ecf09a24b888f4c79\n```\n\n----------------------------------------\n\nTITLE: Check for Python Script\nDESCRIPTION: This command lists all files and directories in the home directory of the current user, and is used to verify that the `pymongo_oidc.py` script exists in the expected location after cloud-init configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_11\n\nLANGUAGE: Bash\nCODE:\n```\nls -la ~\n```\n\n----------------------------------------\n\nTITLE: Setting Terraform Log Path Environment Variable\nDESCRIPTION: This snippet shows how to redirect Terraform logs to a specific file using the TF_LOG_PATH environment variable. This is useful for capturing log output for later analysis without cluttering the console.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_LOG_PATH=terraform.log\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: Destroys all resources created by Terraform. This command removes all the infrastructure resources provisioned by the Terraform configuration, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/azure/Readme.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Encryption at Rest Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting environment variables for configuring Encryption at Rest with GCP in MongoDB Atlas using the Terraform provider. It involves setting the GCP service account key and the key version resource ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nexport GCP_SERVICE_ACCOUNT_KEY=<GCP_SERVICE_ACCOUNT_KEY>\nexport GCP_KEY_VERSION_RESOURCE_ID=<GCP_KEY_VERSION_RESOURCE_ID>\n```\n\n----------------------------------------\n\nTITLE: Define Static List of Objects in Resource - Terraform\nDESCRIPTION: This code snippet demonstrates how to define a static list of objects within a Terraform resource to avoid issues with dynamic ordering. It defines a mongodbatlas_advanced_cluster resource with explicitly defined replication_specs and region_configs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/troubleshooting.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"main\" {\n  name         = \"advanced-cluster-1\"\n  project_id   = \"64258fba5c9...e5e94617e\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M20\"\n        node_count    = 1\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n\n    region_configs {\n      electable_specs {\n        instance_size = \"M20\"\n        node_count    = 1\n      }\n      provider_name = \"AWS\"\n      priority      = 6\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query Serverless Instances Terraform\nDESCRIPTION: This Terraform configuration retrieves information about all serverless instances within a specified MongoDB Atlas project. The `project_id` is required to identify the target project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/serverless_instances.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_serverless_instances\" \"data_serverless\" {\n  project_id = \"<PROJECT_ID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This command destroys the resources created by Terraform.  It's used to clean up the infrastructure after testing or when the resources are no longer needed, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/starter/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Import Stream Processor - Terraform\nDESCRIPTION: Illustrates how to import an existing MongoDB Atlas Stream Processor resource into Terraform using the `terraform import` command. The format is `INSTANCE_NAME-PROJECT_ID-PROCESSOR_NAME`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_stream_processor.test yourInstanceName-6117ac2fe2a3d04ed27a987v-yourProcessorName\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This command destroys all resources managed by Terraform in your infrastructure. It removes the MongoDB Atlas cluster and any associated resources, preventing unnecessary Atlas charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster_outage_simulation/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cluster Outage Simulation Details - Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_cluster_outage_simulation` data source to fetch details of a cluster outage simulation for a given project ID and cluster name. It requires the `project_id` and `cluster_name` as input and retrieves information like outage filters, simulation ID, and the state of the simulation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cluster_outage_simulation.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_cluster_outage_simulation\" \"outage_simulation\" {\n  project_id = \"64707f06c519c20c3a2b1b03\"\n  cluster_name = \"Cluster0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This command is used to destroy all the resources managed by Terraform. It removes all resources defined in the Terraform State that have previously been deployed, avoiding unnecessary Atlas charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_query_limit/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Creating Project Invitation with Read/Write Access Terraform\nDESCRIPTION: This code snippet demonstrates how to create a `mongodbatlas_project_invitation` resource to invite a user to an Atlas project with `GROUP_DATA_ACCESS_READ_WRITE` role. It requires the `username` and `project_id` to be specified. After applying, an invitation will be sent, and it is up to the invitee to accept the invite. \nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_invitation.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_invitation\" \"test\" {\n  username    = \"test-acc-username\"\n  project_id  = \"<PROJECT-ID>\"\n  roles       = [ \"GROUP_DATA_ACCESS_READ_WRITE\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Advanced Clusters with Sharding and Asymmetric Shards - Terraform\nDESCRIPTION: This Terraform code demonstrates retrieving Advanced Clusters with sharding configuration using independent shard scaling. It defines a sharded cluster with two asymmetric shards (M30 and M40), each having its own replication specifications.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id     = \"<YOUR-PROJECT-ID>\"\n  name           = \"cluster-test\"\n  backup_enabled = false\n  cluster_type   = \"SHARDED\"\n\n  replication_specs {    # Sharded cluster with 2 asymmetric shards (M30 and M40)\n    region_configs {\n      electable_specs {\n        instance_size = \"M30\"\n        disk_iops     = 3000\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M40\"\n        disk_iops     = 3000\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"EU_WEST_1\"\n    }\n  }\n}\n\ndata \"mongodbatlas_advanced_cluster\" \"example-asym\" {\n  project_id                     = mongodbatlas_advanced_cluster.example.project_id\n  name                           = mongodbatlas_advanced_cluster.example.name\n  use_replication_spec_per_shard = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Project API Keys using Terraform\nDESCRIPTION: This Terraform configuration retrieves a list of API keys associated with a specified MongoDB Atlas project using the `mongodbatlas_project_api_keys` data source. It defines the project ID, page number, and the number of items to return per page. The data source will then return a list of API keys matching the specified criteria.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_api_keys.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_project_api_keys\" \"test\" {\n  page_num       = 1\n  items_per_page = 5\n  project_id     = \"32b6e34b3d91647abb20e7b8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This bash command applies the Terraform configuration, provisioning the Atlas Cluster and Federated settings resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_data_lake_pipeline/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Inspect Terraform state advanced_configuration after refresh\nDESCRIPTION: This snippet shows the structure of the `advanced_configuration` block in the Terraform state file after running `terraform refresh`.  Note the boolean values and zero values for numeric fields. The entire block is also wrapped in a list.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.6.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n \"advanced_configuration\": [\n              {\n                \"fail_index_key_too_long\": true,\n                \"javascript_enabled\": true,\n                \"minimum_enabled_tls_protocol\": \"TLS1_2\",\n                \"no_table_scan\": false,\n                \"oplog_size_mb\": 0,\n                \"sample_refresh_interval_bi_connector\": 0,\n                \"sample_size_bi_connector\": 0\n              }\n            ],\n```\n\n----------------------------------------\n\nTITLE: Configure Customer Key Management with AWS KMS - New Project\nDESCRIPTION: This Terraform configuration shows how to configure encryption at rest with AWS KMS for a new project, using an IAM role.  The `role_id` should correspond to the ID obtained from the cloud provider access configuration. The other parameters configure the AWS KMS key to use.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\naws_kms = {\n    enabled                               = true\n    #value from output above\n    role_id                          = \"5f232b94af0a6b41747akx2d\"\n    customer_master_key_id         = \"030gce02-586d-48d2-a999-05ea954fdd0g\"\n    region                             = \"US_EAST_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Replication Specs - Terraform\nDESCRIPTION: This code snippet uses a conditional expression to assign the `replication_specs` attribute of the `mongodbatlas_advanced_cluster` resource. It selects either the new `replication_specs_new` variable or the older `replication_specs_old` based on the value of `local.use_new_replication_specs`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nreplication_specs      = local.use_new_replication_specs ? var.replication_specs_new : local.replication_specs_old\ntags                   = var.tags\n```\n\n----------------------------------------\n\nTITLE: Remove Private Endpoints from Terraform State\nDESCRIPTION: These commands remove the `mongodbatlas_private_endpoint` and `mongodbatlas_private_endpoint_interface_link` resources from the Terraform state.  This step is required to upgrade to v1.0.0, as these resources have been replaced by `mongodbatlas_privatelink_endpoint` and `mongodbatlas_privatelink_endpoint_service` respectively. Prior backup of terraform state is crucial before this action.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform state rm mongodbatlas_private_endpoint.test\n$ terraform state rm mongodbatlas_private_endpoint_interface_link.test\n```\n\n----------------------------------------\n\nTITLE: Query Federated Database Instance Limit Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_federated_query_limit` data source to retrieve information about a specific federated query limit. It requires the `project_id`, `tenant_name` and `limit_name` to identify the limit.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_query_limit.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_query_limit\" \"test\" {\n  project_id = \"PROJECT_ID\"\n  tenant_name = \"FEDERATED_DATABASE_INSTANCE_NAME\"\n  limit_name = \"LIMIT_NAME\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspect Terraform state advanced_configuration before refresh\nDESCRIPTION: This snippet shows the structure of the `advanced_configuration` block in the Terraform state file before running `terraform refresh`.  Note the string values for boolean fields and empty strings for numeric fields.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.6.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n \"advanced_configuration\": {\n              \"fail_index_key_too_long\": \"true\",\n              \"javascript_enabled\": \"true\",\n              \"minimum_enabled_tls_protocol\": \"TLS1_2\",\n              \"no_table_scan\": \"false\",\n              \"oplog_size_mb\": \"\",\n              \"sample_refresh_interval_bi_connector\": \"\",\n              \"sample_size_bi_connector\": \"\"\n            },\n```\n\n----------------------------------------\n\nTITLE: Ignoring Autoscaling Changes in Terraform\nDESCRIPTION: This Terraform code snippet demonstrates how to use a lifecycle ignore customization to prevent Terraform from reverting changes made by Atlas autoscaling. It ignores changes to `disk_size_gb` and `instance_size` within a replica set to avoid unintended scaling back to the original values defined in the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_19\n\nLANGUAGE: Terraform\nCODE:\n```\n// Example: ignore disk_size_gb and instance_size changes in a replica set\nlifecycle {\n  ignore_changes = [\n    replication_specs[0].region_configs[0].electable_specs[0].disk_size_gb,\n    replication_specs[0].region_configs[0].electable_specs[0].instance_size,\n    replication_specs[0].region_configs[0].electable_specs[0].disk_iops // instance_size change can affect disk_iops in case that you are using it\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: The `terraform destroy` command is used to destroy the resources that were created by Terraform. This helps to avoid unnecessary Atlas charges after testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/version-upgrade-with-pinned-fcv/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Cluster Connection Creation - Terraform\nDESCRIPTION: Configures a MongoDB Atlas Stream Connection of type 'Cluster'.  It links to a MongoDB Atlas cluster, specifying the cluster name and the database role to execute.  The db_role_to_execute block defines the role and its type.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-cluster\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"ClusterConnection\"\n  type            = \"Cluster\"\n  cluster_name    = var.cluster_name\n  db_role_to_execute = {\n    role = \"atlasAdmin\"\n    type = \"BUILT_IN\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Network Mirror Configuration - Terraform\nDESCRIPTION: This snippet configures a Terraform provider network mirror, instructing Terraform to install providers from a local filesystem mirror rather than the official Terraform registry.  It specifies the path to the mirror and excludes the official registry from direct downloads.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_15\n\nLANGUAGE: terraform\nCODE:\n```\nprovider_installation {\n  filesystem_mirror {\n    path    = \"C:\\\\Users\\\\<YourUser>\\\\Desktop\\\\Tenant_Upgrade\\\\tf_cache\"\n    include = [\"registry.terraform.io/hashicorp/*\"]\n  }\n  direct {\n    exclude = [\"registry.terraform.io/hashicorp/*\"]\n  }\n}\nplugin_cache_dir = \"C:\\\\Users\\\\<YourUser>\\\\Desktop\\\\Tenant_Upgrade\\\\tf_cache\"\ndisable_checkpoint=true\n```\n\n----------------------------------------\n\nTITLE: Cloning MongoDB Atlas Provider Repository using Git\nDESCRIPTION: This example demonstrates how to clone the MongoDB Atlas Terraform provider repository from GitHub.  It uses the `git clone` command to copy the repository to your local machine.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/mongodb/terraform-provider-mongodbatlas\n\n$ cd terraform-provider-mongodbatlas/examples/example1\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Destroy\nDESCRIPTION: This snippet shows the command to destroy the resources created by Terraform. It is essential to destroy resources to avoid unnecessary AWS charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/aws/Readme.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Querying MongoDB Atlas Organizations with Terraform\nDESCRIPTION: This Terraform configuration retrieves a list of MongoDB Atlas organizations using the `mongodbatlas_organizations` data source.  It sets the page number to 1 and requests 5 items per page. The `page_num` and `items_per_page` arguments control pagination.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/organizations.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_organizations\" \"test\" {\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Update Terraform config advanced_configuration for 0.6.0+\nDESCRIPTION: This snippet shows the Terraform configuration for `advanced_configuration` for version 0.6.0 and later. The assignment operator (=) is removed from the `advanced_configuration` block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.6.0-upgrade-guide.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n    advanced_configuration {\n    }\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Versions\nDESCRIPTION: Specifies the versions of Terraform providers used in this project. This ensures consistency and compatibility of the Terraform configurations with the specified provider versions for Azure and MongoDB Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/azure/Readme.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.13.0\n+ provider registry.terraform.io/hashicorp/azuread v1.0.0\n+ provider registry.terraform.io/hashicorp/azurerm v2.31.1\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v0.6.5\n```\n\n----------------------------------------\n\nTITLE: Import Resource to Terraform State Bash\nDESCRIPTION: This command imports the existing `mongodbatlas_cloud_provider_snapshot_backup_policy` configuration into the new `mongodbatlas_cloud_backup_schedule` resource in the Terraform state. This allows Terraform to manage the existing backup schedule using the new resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nterraform import mongodbatlas_cloud_backup_schedule.test <project_id>-<cluster_name>\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Terraform Error: Invalid Index\nDESCRIPTION: This error shows when invalid indexing used in Terraform configuration. In most cases, you can resolve it by removing the `[0]` or `.0` reference\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\n│   on outputs.tf line 3, in output \"connection_string_standard\":\n│    3:     value = mongodbatlas_advanced_cluster.this.connection_strings[0].standard\n│     ├────────────────\n│     │ mongodbatlas_advanced_cluster.this.connection_strings is object with 5 attributes\n│\n│ The given key does not identify an element in this collection value. An object only supports looking up attributes by name, not by numeric index.\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Single Flex Snapshot by ID - Terraform\nDESCRIPTION: This code retrieves a specific flex snapshot by its ID using the `mongodbatlas_flex_snapshot` data source. It requires the project ID, the name of the flex cluster, and the snapshot ID. The snapshot name is then outputted.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshot.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_snapshot\" \"snapshot\" {\n  project_id  = var.project_id\n  name        = mongodbatlas_flex_cluster.example-cluster.name\n  snapshot_id = var.snapshot_id\n}\n\noutput \"mongodbatlas_flex_snapshot\" {\n  value = data.mongodbatlas_flex_snapshot.snapshot.name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Versions\nDESCRIPTION: Specifies the required Terraform version and provider versions for Azure and MongoDB Atlas to be used in the configuration. This ensures compatibility and proper functionality of the Terraform code.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/azure/Readme.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.13.0\n+ provider registry.terraform.io/hashicorp/azuread v1.0.0\n+ provider registry.terraform.io/hashicorp/azurerm v2.31.1\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v0.6.5\n```\n\n----------------------------------------\n\nTITLE: Import Project API Key - Terraform\nDESCRIPTION: This command demonstrates how to import an existing Project API key into Terraform. The command requires the Project ID and API Key ID, separated by a hyphen. This allows Terraform to manage an API key that was created outside of Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project_api_key.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_project_api_key.test 5d09d6a59ccf6445652a444a-6576974933969669\n```\n\n----------------------------------------\n\nTITLE: Querying Online Archives using Terraform\nDESCRIPTION: This code snippet demonstrates how to use the `mongodbatlas_online_archives` data source in Terraform to retrieve a list of online archives for a specific cluster within a MongoDB Atlas project.  It requires the `project_id` and `cluster_name` variables to be defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/online_archives.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_online_archives\" \"test\" {\n    project_id   = var.project_id\n    cluster_name = var.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Outputs (Bash)\nDESCRIPTION: This snippet shows the Terraform outputs after the apply command. It shows details about the created cluster, including connection strings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_database_user/Readme.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nOutputs:\natlasclusterstring = [\n  {\n    \"aws_private_link\" = {}\n    \"aws_private_link_srv\" = {}\n    \"private\" = \"\"\n    \"private_srv\" = \"\"\n    \"standard\" = \"mongodb://MongoDBAtlas-shard-00-00.xgpi2.mongodb.net:27017,MongoDBAtlas-shard-00-01.xgpi2.mongodb.net:27017,MongoDBAtlas-shard-00-02.xgpi2.mongodb.net:27017/?ssl=true&authSource=admin&replicaSet=atlas-90b49a-shard-0\"\n    \"standard_srv\" = \"mongodb+srv://MongoDBAtlas.xgpi2.mongodb.net\"\n  },\n]\nproject_name = Atlas-DB-Scope\nuser1 = dbuser1\nuser2 = dbuser2\n```\n\n----------------------------------------\n\nTITLE: Import Cloud Backup Snapshot Policy Terraform\nDESCRIPTION: This command imports an existing Cloud Backup Snapshot Policy into Terraform using the project ID and cluster name. Replace `PROJECTID` and `CLUSTERNAME` with the actual values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cloud_provider_snapshot_backup_policy.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_cloud_provider_snapshot_backup_policy.test 5d0f1f73cf09a29120e173cf-MyClusterTest\n```\n\n----------------------------------------\n\nTITLE: Terraform Plugin Cache Environment Variables - Bash\nDESCRIPTION: This snippet demonstrates setting environment variables for configuring the Terraform plugin cache. The variables include plugin cache directory and config file paths.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nexport TF_PLUGIN_CACHE_DIR=/mnt/c/Users/<YourUser>/Desktop/Tenant_Upgrade/tf_cache\nexport TF_CLI_CONFIG_FILE=/mnt/c/Users/<YourUser>/Desktop/Tenant_Upgrade/tf_cache/terraform.rc\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Database User\nDESCRIPTION: This resource configures a MongoDB Atlas database user with specified username, password, project ID, and database roles. It creates a database user with readWrite and atlasAdmin roles on the admin database.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/custom_db_roles.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_database_user\" \"test\" {\n  username      = \"test-acc-username\"\n  password      = \"test-acc-password\"\n  project_id    = \"<PROJECT-ID>\"\n  database_name = \"admin\"\n\n  roles {\n    role_name     = \"readWrite\"\n    database_name = \"admin\"\n  }\n\n  roles {\n    role_name     = \"atlasAdmin\"\n    database_name = \"admin\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Conventional Commit PR Title\nDESCRIPTION: This is an example of a properly formatted pull request title using the Conventional Commits standard. It shows the 'chore' type followed by a description starting with an uppercase character.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nchore: Upgrades `privatelink_endpoint_service_data_federation_online_archive` resource to auto-generated SDK\n```\n\n----------------------------------------\n\nTITLE: Create Serverless Instance - AWS - Terraform\nDESCRIPTION: This resource creates a serverless instance in MongoDB Atlas using the `mongodbatlas_serverless_instance` resource. It requires a `project_id`, a name for the instance, and provider settings, including the backing provider name, the provider name, and the region name. Continuous backup is enabled.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AWS\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST_1\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Terraform Error: Unsupported attribute\nDESCRIPTION: This is a sample error that you might face when updating a Terraform config to use `mongodbatlas_advanced_cluster`. This error indicates that an attribute is no longer supported in `mongodbatlas_advanced_cluster` and needs to be removed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/basic/README.md#_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\nError: Unsupported attribute\n    │   on outputs.tf line 7, in output \"provider_name\":\n    │    7:   value = mongodbatlas_advanced_cluster.this.provider_name\n    │ \n    │ This object has no argument, nested block, or exported attribute named \"provider_name\".\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution (Bash)\nDESCRIPTION: This command applies the Terraform plan, provisioning the resources defined in the configuration. It will create the MongoDB Atlas project and the sharded cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieve Private SRV Connection String\nDESCRIPTION: This output retrieves the private SRV connection string of the MongoDB Atlas cluster with Network Peering and Custom DNS enabled. This is suitable for private network DNS seedlist connections using peered VPCs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private_srv\" {\n    value = mongodbatlas_cluster.cluster-test.connection_strings[0].private_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Advanced MongoDB Atlas Cluster\nDESCRIPTION: This Terraform configuration defines an advanced MongoDB Atlas cluster using the `mongodbatlas_advanced_cluster` resource. It specifies the `project_id`, `name`, `cluster_type`, and replication specifications, including the instance size, node count, provider, priority, and region name. This cluster will be used to deploy a search node.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example\" {\n  project_id   = mongodbatlas_project.example.id\n  name         = \"ClusterExample\"\n  cluster_type = \"REPLICASET\"\n\n  replication_specs {\n    region_configs {\n      electable_specs {\n        instance_size = \"M10\"\n        node_count    = 3\n      }\n      provider_name = \"AWS\"\n      priority      = 7\n      region_name   = \"US_EAST_1\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Dependency Versions\nDESCRIPTION: This snippet specifies the required versions of Terraform and the Google and MongoDB Atlas providers. These versions are crucial for ensuring compatibility and proper functionality of the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/gcp/Readme.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.15.3\non darwin_amd64\n+ provider registry.terraform.io/hashicorp/google v3.74.0\n+ provider registry.terraform.io/mongodb/mongodbatlas v0.9.1\n```\n\n----------------------------------------\n\nTITLE: Running Terraform Plan and Apply\nDESCRIPTION: This example demonstrates how to use `terraform plan` and `terraform apply` to execute the Terraform configuration. This assumes that the user has navigated into the example directory after cloning the repository.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Query Atlas User by User ID - Terraform\nDESCRIPTION: This Terraform configuration retrieves a MongoDB Atlas user's information using their unique user ID. The `user_id` attribute is used to specify the ID of the user to retrieve. Ensure that the `USER_ID` placeholder is replaced with the actual user ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/atlas_user.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_atlas_user\" \"test\" {\n  user_id = \"<USER_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Backup Policy Data with Terraform\nDESCRIPTION: This Terraform data source retrieves the cloud provider snapshot backup policy based on the project ID and cluster name obtained from the previously configured `mongodbatlas_cloud_provider_snapshot_backup_policy` resource. It allows you to access the backup policy configuration within your Terraform code.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot_backup_policy.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_cloud_provider_snapshot_backup_policy.test.project_id\n  cluster_name = mongodbatlas_cloud_provider_snapshot_backup_policy.test.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: TFplugindocs Template Usage with Go text/template\nDESCRIPTION: The TFplugindocs templates are implemented with Go's `text/template` package. After running `tfplugindocs generate`, the engine retrieves templates for resources and data sources, extracts values from the resource schema's `MarkdownDescription` fields, and retrieves resource examples to generate the documentation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/templates/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ntemplates/resources/{resource_name}.md.tmpl\n```\n\nLANGUAGE: Go\nCODE:\n```\ntemplates/data-sources/{resource_name}.md.tmpl\n```\n\nLANGUAGE: Go\nCODE:\n```\nexamples/{resource_name}/main.tf\n```\n\n----------------------------------------\n\nTITLE: Reviewing Terraform Plan (bash)\nDESCRIPTION: This snippet shows the command to execute the Terraform plan, which will display the changes that Terraform will make to the MongoDB Atlas resources. It's crucial to review the plan before applying to ensure the configuration is as expected.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_third_party_integration/prometheus-and-teams/Readme.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Role Statement Example\nDESCRIPTION: Example of the AWS IAM Role Statement you need to allow access to AWS Secrets.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Statement1\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"sts:AssumeRole\"\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Import Encryption at Rest Settings Terraform\nDESCRIPTION: This snippet demonstrates how to import Encryption at Rest settings into Terraform using the `mongodbatlas_encryption_at_rest` resource. It requires the project ID to identify the specific resource in MongoDB Atlas. The command uses `terraform import` to map an existing resource to a Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_encryption_at_rest.example 1112222b3bf99403840e8934\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via terraform.tfvars (Terraform)\nDESCRIPTION: This code shows how to define the MongoDB Atlas public and private keys in a `terraform.tfvars` file for authentication with the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables Example\nDESCRIPTION: This Terraform variables example configures the required variables for creating a project, cluster, and snapshot in MongoDB Atlas.  It includes settings for the organization ID, project name, cluster name, and point-in-time restore timestamp (in seconds since the Unix epoch). It sets `point_in_time_utc_seconds` to 0 initially, requiring a subsequent update for point-in-time restore testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_snapshot_restore_job/point-in-time/README.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\norg_id                        = \"627a9687f7f7f7f774de306f14\"\nproject_name                  = \"cloud_backup_snapshot_v110\"\ncluster_name                  = \"v110-cluster\"\npoint_in_time_utc_seconds     = 0\n```\n\n----------------------------------------\n\nTITLE: Import Resources into Terraform State\nDESCRIPTION: These commands import the `mongodbatlas_privatelink_endpoint` and `mongodbatlas_privatelink_endpoint_service` resources back into the Terraform state after removing them. The resource IDs are constructed using project ID, private link ID, provider name, region, and endpoint service ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.2-upgrade-guide.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint.test {project_id}-{private_link_id}-{provider_name}-{region}\n$ terraform import mongodbatlas_privatelink_endpoint_service.test {project_id}--{private_link_id}--{endpoint_service_id}--{provider_name}\n```\n\n----------------------------------------\n\nTITLE: Configure Customer Key Management - Existing Project (New)\nDESCRIPTION: This Terraform configuration demonstrates how to update the encryption at rest settings of an existing project using an IAM role, replacing the previously used access key ID and secret access key. The `role_id` should correspond to the ID obtained from the cloud provider access configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\naws_kms = {\n    enabled                               = true\n    role_id                          = \"5f232b94af0a6b41747akx2d\"\n    customer_master_key_id         = \"030gce02-586d-48d2-a999-05ea954fdd0g\"\n    region                             = \"US_EAST_1\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Import Dedicated Cluster Configuration - Terraform\nDESCRIPTION: This snippet demonstrates how to import an existing Dedicated cluster into your Terraform state using the `mongodbatlas_advanced_cluster` resource. This is done post-autoconversion of a Serverless instance to a Dedicated cluster to manage it with Terraform. The 'id' attribute is formed as '{PROJECT_ID}-{CLUSTER_NAME}'.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n    to = mongodbatlas_advanced_cluster.this\n    id = \"664619d870c247237f4b86a6-advancedClusterName\" # from step 1\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via terraform.tfvars\nDESCRIPTION: This snippet shows how to set MongoDB Atlas credentials, including the public key, private key, and organization ID, within a terraform.tfvars file. This file allows you to define variable values that will be used by your Terraform configuration. The variables public_key, private_key, and atlas_org_id must be defined with their respective values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Atlas Credentials\nDESCRIPTION: This snippet demonstrates how to set environment variables for MongoDB Atlas credentials (public and private keys). These variables are used to authenticate Terraform with the MongoDB Atlas API.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Outputting Encryption Provider\nDESCRIPTION: This Terraform configuration outputs the encryption at rest provider of the MongoDB Atlas Search Deployment retrieved using the data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_search_deployment_encryption_at_rest_provider\" {\n  value = data.mongodbatlas_search_deployment.example.encryption_at_rest_provider\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Provider Access - Example 2nd Terraform Apply\nDESCRIPTION: This Terraform configuration updates the `mongodbatlas_cloud_provider_access` resource with the IAM assumed role ARN. This ARN needs to be obtained after the AWS IAM role trust policy has been modified. This second apply authorizes the cloud provider access. Outputs are provided to help with editing the AWS IAM policy and enabling BYOK encryption at rest later.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access\" \"test\" {\n    project_id = mongodbatlas_project.my_project.id\n    provider_name = \"AWS\"\n    #after first apply update below with the iam assumed role arn after editing the policy\n    iam_assumed_role_arn = \"REPLACE_WITH_iam_assumed_role_arn\"\n}\n#Information you’ll need to edit your AWS policy \noutput \"cloud_provider_access_external_id\" {\n    value = mongodbatlas_cloud_provider_access.test.atlas_assumed_role_external_id\n}\n#Information you’ll need to edit your AWS policy \noutput \"cloud_provider_access_arn\" {\n    value = mongodbatlas_cloud_provider_access.test.atlas_aws_account_arn\n}\n#Information you’ll need to enable BYOK encryption at rest later        \noutput \"cloud_provider_role_id\" {\n    value = mongodbatlas_cloud_provider_access.test.role_id\n}\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials (Bash)\nDESCRIPTION: These commands set the MongoDB Atlas API keys as environment variables. These keys are required for the Terraform provider to authenticate with your MongoDB Atlas account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/asymmetric-sharded-cluster/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Query Shared Tier Restore Job in Terraform\nDESCRIPTION: This Terraform configuration retrieves information about a specific restore job for a Shared Tier cluster in MongoDB Atlas. It requires the project ID, cluster name, and job ID to identify the restore job. The retrieved data can then be used to access attributes like status, snapshot URL, and restore dates.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_shared_tier_restore_job.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_shared_tier_restore_job\" \"test\" {\n  project_id   = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name = \"MyClusterTest\"\n  job_id       = \"5d1285acd5ec13b6c2d1726a\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving AZURE Cloud Provider Access Setup Terraform\nDESCRIPTION: This example demonstrates how to retrieve an Azure cloud provider access setup using the `mongodbatlas_cloud_provider_access_setup` data source in Terraform. It configures the `azure_config` block with required Azure Active Directory Application ID, Service Principal ID and Tenant ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_access_setup.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"test_role\" {\n   project_id = \"64259ee860c43338194b0f8e\"\n   provider_name = \"AZURE\"\n   azure_config {\n      atlas_azure_app_id = \"9f2deb0d-be22-4524-a403-df531868bac0\"\n      service_principal_id = \"22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1\"\n      tenant_id = \"91402384-d71e-22f5-22dd-759e272cdc1c\"\n   }\n}\n\ndata \"mongodbatlas_cloud_provider_access_setup\" \"single_setup\" {\n   project_id = mongodbatlas_cloud_provider_access_setup.test_role.project_id\n   provider_name = mongodbatlas_cloud_provider_access_setup.test_role.provider_name\n   role_id = mongodbatlas_cloud_provider_access_setup.test_role.role_id\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Configuration with read_only_specs node_count set to 0 - Terraform\nDESCRIPTION: Demonstrates how to effectively remove read-only nodes by setting the `node_count` to 0 instead of removing the block entirely from the `read_only_specs` configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_23\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nregion_configs {\n  read_only_specs {\n    instance_size = \"M10\"\n    node_count    = 0\n  }\n  electable_specs {\n    instance_size = \"M10\"\n    node_count    = 3\n  }\n  provider_name = \"AWS\"\n  priority      = 7\n  region_name   = \"US_WEST_1\"\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Importing a Search Deployment\nDESCRIPTION: This shows the command used to import an existing Search Deployment. The format is PROJECT_ID-CLUSTER_NAME.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_search_deployment.test 650972848269185c55f40ca1-Cluster0\n```\n\n----------------------------------------\n\nTITLE: Query Stream Instances in MongoDB Atlas Project - Terraform\nDESCRIPTION: This data source retrieves information about stream instances in a specified MongoDB Atlas project. It requires the `project_id` to identify the project. The `page_num` and `items_per_page` arguments can be used for pagination, allowing users to retrieve stream instance data in manageable chunks.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_instances.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_stream_instances\" \"test\" {\n    project_id = \"<PROJECT_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Cedar Policy Set Definition (Terraform)\nDESCRIPTION: Defines a `cedar_policyset` data source that creates a policy to forbid cluster modification in a specific cloud region (gcp:us-east1). The policy is configured to apply to any principal and any resource, with a condition based on the cluster's regions.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"cedar_policyset\" \"cloud_region\" {\n  policy {\n    any_principal = true\n    effect        = \"forbid\"\n    action = {\n      type = \" ResourcePolicy::Action\"\n      id   = \"cluster.modify\"\n    }\n    any_resource = true\n    when {\n      text = \"context.cluster.regions.contains(ResourcePolicy::Region::\\\"gcp:us-east1\\\")\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This bash command executes the Terraform plan.  It is used to review the changes that Terraform will make to the infrastructure before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_data_lake_pipeline/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Create and Retrieve MongoDB Atlas Network Container - Terraform\nDESCRIPTION: This example demonstrates how to create a Network Peering Container using the `mongodbatlas_network_container` resource and retrieve its details using the `mongodbatlas_network_container` data source. It requires a Project ID and specifies the Atlas CIDR block, provider name, and region name for the container.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/network_container.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<YOUR-PROJECT-ID>\"\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n\ndata \"mongodbatlas_network_container\" \"test\" {\n\tproject_id   \t\t= mongodbatlas_network_container.test.project_id\n\tcontainer_id\t\t= mongodbatlas_network_container.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via terraform.tfvars - HCL\nDESCRIPTION: This example demonstrates how to define the MongoDB Atlas credentials and organization ID within a `terraform.tfvars` file.  This file is used by Terraform to set the variables needed for authenticating and provisioning resources in Atlas. Replace the placeholder values with your actual credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_encryption_at_rest/aws/atlas-cluster/README.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\npublic_key           = \"examplepksy\"\nprivate_key          = \"22b722a9-34f4-3b1b-aada-298329a5c128\"\natlas_org_id         = \"63f4d4a47baeac59406dc131\"\n```\n\n----------------------------------------\n\nTITLE: Create Kafka Stream Connection - Terraform\nDESCRIPTION: Configures a connection to a Kafka cluster using the `mongodbatlas_stream_connection` resource. It includes details like authentication mechanism, username, password, bootstrap servers, configuration properties, and security protocol.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_connection\" \"example-kafka\" {\n  project_id      = var.project_id\n  instance_name   = mongodbatlas_stream_instance.example.instance_name\n  connection_name = \"KafkaPlaintextConnection\"\n  type            = \"Kafka\"\n  authentication = {\n    mechanism = \"PLAIN\"\n    username  = var.kafka_username\n    password  = var.kafka_password\n  }\n  bootstrap_servers = \"localhost:9092,localhost:9092\"\n  config = {\n    \"auto.offset.reset\" : \"earliest\"\n  }\n  security = {\n    protocol = \"PLAINTEXT\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: Applies the Terraform plan to provision the resources. This command creates or updates the infrastructure defined in the Terraform configuration. It is important to review the plan before applying it.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Stream Processor (Terraform Data Source)\nDESCRIPTION: This code retrieves a specific stream processor using a data source based on the project ID, instance name, and processor name.  The processor name is dynamically obtained from the created 'stream-processor-sample-example' resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processor\" \"example-stream-processor\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = mongodbatlas_stream_processor.stream-processor-sample-example.processor_name\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Resource Policy IDs in Terraform\nDESCRIPTION: This Terraform output block extracts the names and IDs of the retrieved resource policies. It iterates over the `results` attribute of the `mongodbatlas_resource_policies` data source and creates a map of policy names to their corresponding IDs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"policy_ids\" {\n  value = { for policy in data.mongodbatlas_resource_policies.this.results : policy.name => policy.id }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffold Resource/Data Source\nDESCRIPTION: This command scaffolds the initial code and file structure for a new resource or data source. It takes two arguments: `resource_name` (in camel case) and `type` (resource, data-source, or plural-data-source). It generates files with TODO statements to guide development.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-best-practices.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake scaffold resource_name=streamInstance type=resource\n```\n\n----------------------------------------\n\nTITLE: Add Cloud Provider Access Setup Configuration - Terraform\nDESCRIPTION: This code snippet adds a new `mongodbatlas_cloud_provider_access_setup` resource to the Terraform configuration file. It defines the project ID and provider name (AWS) for the cloud provider access setup. The resource is essential for managing cloud provider access within the MongoDB Atlas environment.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access_setup\" \"unique\" {\n   project_id = \"<PROJECT-ID>\"\n   provider_name = \"AWS\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Alert Configurations using Terraform Data Source\nDESCRIPTION: This Terraform configuration retrieves all alert configurations for a given project ID and specifies the desired output types (resource_hcl and resource_import) for easy resource management and import into Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/alert_configurations.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_alert_configurations\" \"import\" {\n  project_id = var.project_id\n\n  output_type = [\"resource_hcl\", \"resource_import\"]\n}\n\nlocals {\n  alerts = data.mongodbatlas_alert_configurations.import.results\n\n  outputs = flatten([\n    for i, alert in local.alerts :\n    alert.output == null ? [] : alert.output\n  ])\n\n  output_values = compact([for i, o in local.outputs : o.value])\n}\n\noutput \"alert_output\" {\n  value = join(\"\\n\", local.output_values)\n}\n```\n\n----------------------------------------\n\nTITLE: Error: Unexpected State\nDESCRIPTION: This error occurs when upgrading from v0.8.1 to v0.8.2 and indicates that the Terraform state does not match the expected state of the Private Service Endpoint Connection in Atlas. This is resolved by the read fix in v0.8.2.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.2-upgrade-guide.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nError: error adding MongoDB Private Service Endpoint Connection(/subscriptions/{SUSCRIPTION-ID}) to a Private Endpoint (6018680618d74a4b62fe0600): unexpected state '', wanted target 'AVAILABLE, REJECTED, DELETED'. last error: %!s(<nil>)\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the Terraform destroy command.  This command destroys all the resources created by Terraform. This prevents unnecessary charges from MongoDB Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Remove Existing Cloud Provider Access from State - Bash\nDESCRIPTION: This command removes the existing `mongodbatlas_cloud_provider_access` resource from the Terraform state. This step is crucial to avoid conflicts and ensure a clean migration to the new `mongodbatlas_cloud_provider_access_setup` and `mongodbatlas_cloud_provider_access_authorization` resources. It's important to back up the Terraform state before running this command.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nterraform state rm mongodbatlas_cloud_provider_access.test_role\n```\n\n----------------------------------------\n\nTITLE: Setting Authentication Database User Environment Variable - Bash\nDESCRIPTION: This snippet shows how to set the environment variable needed for configuring the Authentication Database User resource within MongoDB Atlas using the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_DB_USERNAME=<ATLAS_DATABASE_NAME>\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Mongodbatlas Cluster - Terraform\nDESCRIPTION: This code snippet defines a Terraform output for `mongodbatlas_cluster`. It conditionally sets the value to null if the new replication specs are used, otherwise, it retrieves the value from the data source. This maintains backward compatibility during migration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_cluster\" {\n  value       = local.use_new_replication_specs ? null : data.mongodbatlas_cluster.this[0] # updated\n  description = \"Full cluster configuration for mongodbatlas_cluster resource, will be null if var.replication_specs_new is set\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This command destroys the resources created by the Terraform configuration, removing them from GCP and MongoDB Atlas. It is used to clean up the infrastructure after testing or when it is no longer needed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/gcp/Readme.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Migrating Output References Terraform\nDESCRIPTION: This snippet shows how to adjust output references when migrating from blocks to single attributes. It involves removing the `[0]` or `.0` index from the attribute path.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings[0].standard\n}\noutput \"javascript_enabled\" {\n  value = mongodbatlas_advanced_cluster.cluster.advanced_configuration.0.javascript_enabled\n}\n```\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings.standard\n}\noutput \"javascript_enabled\" {\n  value = mongodbatlas_advanced_cluster.cluster.advanced_configuration.javascript_enabled\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Encryption At Rest Azure Key Vault Private Endpoint Terraform\nDESCRIPTION: This Terraform configuration retrieves information about an encryption at rest private endpoint for Azure Key Vault using the `mongodbatlas_encryption_at_rest_private_endpoint` data source. It requires the project ID, cloud provider (AZURE), and the endpoint ID. The example then exports the private endpoint connection name as an output.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest_private_endpoint.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_encryption_at_rest_private_endpoint\" \"single\" {\n  project_id     = var.atlas_project_id\n  cloud_provider = \"AZURE\"\n  id             = mongodbatlas_encryption_at_rest_private_endpoint.endpoint.id\n}\n\noutput \"endpoint_connection_name\" {\n  value = data.mongodbatlas_encryption_at_rest_private_endpoint.single.private_endpoint_connection_name\n}\n```\n\n----------------------------------------\n\nTITLE: Output Standard Connection String - Terraform\nDESCRIPTION: This example retrieves and outputs the standard connection string of a MongoDB Atlas advanced cluster. The value is retrieved from the connection_strings.standard attribute of the mongodbatlas_advanced_cluster resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_13\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"standard\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings.standard\n}\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login Output Example\nDESCRIPTION: This snippet shows an example output from the `az login` command, displaying user details and subscription information upon successful Azure authentication.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n  {\n    \"cloudName\": \"AzureCloud\",\n    \"homeTenantId\": \"XXXXX\",\n    \"id\": \"XXXXX\",\n    \"isDefault\": true,\n    \"managedByTenants\": [],\n    \"name\": \"Pay-As-You-Go\",\n    \"state\": \"Enabled\",\n    \"tenantId\": \"XXXXX\",\n    \"user\": {\n      \"name\": \"person@domain.com\",\n      \"type\": \"user\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Import Command - Organization Configuration\nDESCRIPTION: Imports an existing MongoDB Atlas Federated Settings Organization Configuration into Terraform. This requires replacing `federation_settings_id` and `org_id` with the appropriate values from your Atlas configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_org_role_mapping/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nterraform import mongodbatlas_federated_settings_org_config.org_connections_import {federated_settings_id}-{org_id}\n```\n\n----------------------------------------\n\nTITLE: Import Cloud Provider Access Setup - Bash\nDESCRIPTION: This command imports an existing `mongodbatlas_cloud_provider_access` resource into the new `mongodbatlas_cloud_provider_access_setup` resource. The import process is crucial to avoid creating a new resource with a different ID during the upgrade.  It requires the project ID, provider (AWS), and role ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nterraform import mongodbatlas_cloud_provider_access_setup.unique <project_id>-AWS-<role-id>\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials via terraform.tfvars\nDESCRIPTION: Shows how to set the MongoDB Atlas API keys and organization ID using a `terraform.tfvars` file.  This is an alternative to environment variables and allows for storing sensitive information in a more structured way. The variables `public_key`, `private_key`, and `atlas_org_id` are defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/auto-scaling-per-shard/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Connection String by Endpoint\nDESCRIPTION: This example shows how to retrieve a connection string for a specific endpoint service ID using local variables and outputs. It filters connection strings based on the endpoint ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/cluster.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\nlocals {\n  endpoint_service_id = google_compute_network.default.name\n  private_endpoints   = try(flatten([for cs in data.mongodbatlas_advanced_cluster.cluster[0].connection_strings : cs.private_endpoint]), [])\n  connection_strings = [\n    for pe in local.private_endpoints : pe.srv_connection_string\n    if contains([for e in pe.endpoints : e.endpoint_id], local.endpoint_service_id)\n  ]\n}\noutput \"endpoint_service_connection_string\" {\n  value = length(local.connection_strings) > 0 ? local.connection_strings[0] : \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flex Cluster Data with Terraform\nDESCRIPTION: This snippet shows how to retrieve information about a Flex Cluster using the `data` source in Terraform.  It uses the project ID and the name of an existing Flex Cluster to fetch its attributes. It relies on the Flex cluster \"example-cluster\" from the resource block to already exist.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_cluster\" \"example-cluster\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Resource: Creating MongoDB Employee Access Grant (Terraform)\nDESCRIPTION: This Terraform resource creates a MongoDB employee access grant. It requires the `project_id`, `cluster_name`, `grant_type`, and `expiration_time` to be defined as variables. The resource grants a specified level of access to MongoDB employees until the defined expiration time.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/mongodb_employee_access_grant.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_mongodb_employee_access_grant\" \"example\" {\n  project_id      = var.project_id\n  cluster_name    = var.cluster_name\n  grant_type      = \"CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA\"\n  expiration_time = \"2025-01-01T12:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create MongoDB Atlas Search Deployment Terraform\nDESCRIPTION: This resource creates a MongoDB Atlas search deployment within a specified project and cluster. The `project_id` and `cluster_name` attributes link the deployment to an existing project and cluster.  The `specs` block defines the instance size and node count for the search nodes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_search_deployment\" \"example\" {\n  project_id   = mongodbatlas_project.example.id\n  cluster_name = mongodbatlas_advanced_cluster.example.name\n  specs = [\n    {\n      instance_size = \"S20_HIGHCPU_NVME\"\n      node_count    = 2\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Query Federated Database with S3 Bucket - Terraform\nDESCRIPTION: Retrieves information about a Federated Database Instance configured to use an Amazon S3 bucket as the storage database. The `project_id`, `name`, and `test_s3_bucket` within `cloud_provider_config` are required to identify the specific instance and S3 bucket.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_database_instance.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_database_instance\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name               = \"TENANT NAME OF THE FEDERATED DATABASE INSTANCE\"\n  cloud_provider_config {\n\t\taws {\n\t\t\ttest_s3_bucket = \"Amazon S3 Bucket Name\"\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Flex Cluster Name\nDESCRIPTION: This code defines a Terraform output variable that exports the name of the Flex Cluster retrieved using the `mongodbatlas_flex_cluster` data source. It allows you to easily access the cluster name after the Terraform apply.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/flex_cluster.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_cluster\" {\n  value = data.mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan with Renamed Variable (v4)\nDESCRIPTION: This snippet runs a Terraform plan to preview the changes after renaming the `replication_specs_new` variable to `replication_specs` in version 4 of the module.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd v4\ncp ../v3/terraform.tfstate . # if you are not using a remote state\nexport MONGODB_ATLAS_PREVIEW_PROVIDER_V2_ADVANCED_CLUSTER=true # necessary to use the latest schema\nterraform init -upgrade # in case your Atlas Provider version needs to be upgraded\nterraform plan -var-file=../v4.tfvars\n```\n\n----------------------------------------\n\nTITLE: Query Flex Restore Job by ID - Terraform\nDESCRIPTION: This Terraform configuration retrieves details of a specific flex restore job using its ID. It requires the `project_id`, the flex cluster `name`, and the `restore_job_id` as inputs. The output displays the name of the restored job.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_restore_job.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_restore_job\" \"restore_job\" {\n  project_id     = var.project_id\n  name           = mongodbatlas_flex_cluster.example-cluster.name\n  restore_job_id = var.restore_job_id\n}\n\noutput \"mongodbatlas_flex_restore_job\" {\n  value = data.mongodbatlas_flex_restore_job.restore_job.name\n}\n```\n\n----------------------------------------\n\nTITLE: Query Team Atlas Users\nDESCRIPTION: This Terraform configuration retrieves Atlas Users associated with a specified Team using the `team_id` and `org_id` attributes. Both the `team_id` and `org_id` must be configured together.  The data source exports a list of users within the specified team.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/atlas_users.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_atlas_users\" \"test\" {\n  team_id = \"<TEAM_ID>\"\n  org_id = \"<ORG_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Execution\nDESCRIPTION: This command applies the Terraform configuration, provisioning the Atlas project and cluster resources. It requires that a valid Terraform plan has been created. This will create real resources in the Atlas account.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/global-cluster/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: Executes the `terraform apply` command to provision the MongoDB Atlas cluster and related resources. This command applies the changes defined in the Terraform configuration files.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/version-upgrade-with-pinned-fcv/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: LDAP Verification Import - Terraform\nDESCRIPTION: This shows how to import an existing LDAP configuration using Terraform.  It requires the project ID and request ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/ldap_verify.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_ldap_verify.test 5d09d6a59ccf6445652a444a-5d09d6a59ccf6445652a444a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Private SRV Connection String in Terraform\nDESCRIPTION: This Terraform code retrieves the private SRV connection string for a MongoDB Atlas cluster with network peering and custom DNS on AWS.  It accesses the `connection_strings.private_srv` attribute of the `mongodbatlas_advanced_cluster` resource.  The output will be in the format `mongodb+srv://cluster-atlas-pri.ygo1m.mongodb.net`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_16\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"private_srv\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings.private_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Query AWS KMS Encryption At Rest Private Endpoints - Terraform\nDESCRIPTION: This Terraform configuration defines a data source to retrieve encryption at rest private endpoints for AWS KMS. It requires the `atlas_project_id` variable and sets the `cloud_provider` to \"AWS\". The output displays the number of retrieved endpoints.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest_private_endpoints.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_encryption_at_rest_private_endpoints\" \"plural\" {\n  project_id     = var.atlas_project_id\n  cloud_provider = \"AWS\"\n}\n\noutput \"number_of_endpoints\" {\n  value = length(data.mongodbatlas_encryption_at_rest_private_endpoints.plural.results)\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Flex Cluster Configuration - Terraform\nDESCRIPTION: This Terraform code snippet shows how to retrieve a Flex cluster configuration. It defines a cluster with the 'FLEX' provider and specifies AWS as the backing provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_clusters.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_advanced_cluster\" \"example-flex\" {\n  project_id   = \"<YOUR-PROJECT-ID>\"\n  name         = \"flex-cluster\"\n  cluster_type = \"REPLICASET\"\n  \n  replication_specs {\n    region_configs {\n      provider_name = \"FLEX\"\n      backing_provider_name = \"AWS\"\n      region_name = \"US_EAST_1\"\n      priority = 7\n    }\n  }\n}\n\ndata \"mongodbatlas_advanced_clusters\" \"example\" {\n  project_id = mongodbatlas_advanced_cluster.example-flex.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom DNS Configuration for AWS Cluster in Atlas (Terraform)\nDESCRIPTION: This Terraform resource enables Custom DNS configuration for an Atlas cluster deployed on AWS. The `project_id` is required and `enabled` specifies if custom DNS is active. The `id` from the resource is used to fetch its configuration using a data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/custom_dns_configuration_cluster_aws.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_custom_dns_configuration_cluster_aws\" \"test\" {\n\tproject_id                  = \"<project-id>\"\n\tenabled                     = true\n}\n\ndata \"mongodbatlas_custom_dns_configuration_cluster_aws\" \"test\" {\n    project_id = mongodbatlas_custom_dns_configuration_cluster_aws.test.id\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Resource Policy for Cloud Region Using Cedar Policyset in Terraform\nDESCRIPTION: This Terraform resource defines a MongoDB Atlas resource policy to forbid cluster modification in a specific cloud region, using the output of the `cedar_policyset` data source. The policy body is set to the text attribute of the `cedar_policyset.cloud_region` data source.  It requires the organization ID and depends on the `var.org_id` variable.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_region\" {\n  org_id = var.org_id\n  name   = \"forbid-cloud-region\"\n  policies = [\n    {\n      body = data.cedar_policyset.cloud_region.text\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Provider for Government in Terraform\nDESCRIPTION: This snippet shows how to configure the MongoDB Atlas provider for use with MongoDB Atlas for Government. It adds the `is_mongodbgov_cloud = true` parameter to the provider configuration, along with the required API keys. This will allow Terraform to manage resources within the MongoDB Atlas for Government environment.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/index.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nprovider \"mongodbatlas\" {\n  public_key = var.mongodbatlas_public_key\n  private_key  = var.mongodbatlas_private_key\n  is_mongodbgov_cloud = true\n}\n```\n\n----------------------------------------\n\nTITLE: Import PrivateLink information\nDESCRIPTION: These Terraform commands are used to import existing private link resources into Terraform state after migrating from the deprecated `private_endpoint` and `private_endpoint_interface_link` resources to `privatelink_endpoint` and `privatelink_endpoint_service` resources. Replace `{project_id}`, `{private_link_id}`, `{provider_name}`, `{region}`, and `{endpoint_service_id}` with your actual values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nterraform import mongodbatlas_privatelink_endpoint.test {project_id}-{private_link_id}-{provider_name}-{region}\n\nterraform import mongodbatlas_privatelink_endpoint_service.test {project_id}--{private_link_id}--{endpoint_service_id}--{provider_name}\n```\n\n----------------------------------------\n\nTITLE: Referencing Connection Strings with Index Notation in Terraform\nDESCRIPTION: This example demonstrates how to refer to a specific connection string attribute value using index notation in Terraform. It is necessary as connection strings are returned as a list.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/advanced_cluster (preview provider 2.0.0).md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nmongodbatlas_advanced_cluster.cluster-test.connection_strings.0.standard_srv\n```\n\n----------------------------------------\n\nTITLE: Defining MongoDB Atlas Credentials via terraform.tfvars\nDESCRIPTION: This snippet shows how to define the MongoDB Atlas public key, private key, and organization ID in a `terraform.tfvars` file. This file is used to set variable values for the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\natlas_org_id         = \"<MONGODB_ATLAS_ORG_ID>\"\n```\n\n----------------------------------------\n\nTITLE: Removing Cluster from Terraform State with 'removed' Block\nDESCRIPTION: This snippet shows how to remove a `mongodbatlas_cluster` resource from the Terraform state file using the `removed` block (available in Terraform 1.7 and later). The `destroy = false` lifecycle setting ensures that the cluster is not destroyed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nremoved {\n    from = mongodbatlas_cluster.this\n\n    lifecycle {\n      destroy = false\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Alert Configuration - Old Usage\nDESCRIPTION: This shows the old usage of `metric_threshold` and `threshold` in the `mongodbatlas_alert_configuration` resource, which is deprecated in v1.0.0 due to the Terraform SDK v2 migration. These were of TypeMap.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nmetric_threshold = {\n  metric_name = \"ASSERT_REGULAR\"\n  operator    = \"LESS_THAN\"\n  threshold   = 1.0\n  units       = \"RAW\"\n  mode        = \"AVERAGE\"\n}\n\nthreshold = {\n    operator    = \"LESS_THAN\"\n    threshold   = 72\n    units       = \"HOURS\"\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan (No Changes)\nDESCRIPTION: This command runs `terraform plan` to verify that the import was successful and no changes are detected after the resource migration.  It confirms that the infrastructure matches the updated Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform plan\n\n(...)\n\n\nNo changes. Your infrastructure matches the configuration.\n\nTerraform has compared your real infrastructure against your configuration and found no differences,\nso no changes are needed.\n```\n\n----------------------------------------\n\nTITLE: Query Organization Atlas Users\nDESCRIPTION: This Terraform configuration retrieves Atlas Users associated with a specified Organization using the `org_id` attribute.  The `org_id` must be configured.  The data source exports a list of users within the specified organization.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/atlas_users.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_atlas_users\" \"test\" {\n  org_id = \"<ORG_ID>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remove All Alert Configurations from State\nDESCRIPTION: This script lists all alert configurations in the Terraform state, generates commands to remove each configuration, and executes the removal commands. This is useful for cleaning up the state after deleting the associated Terraform configuration file.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_alert_configuration/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nterraform state list | grep ^mongodbatlas_alert_configuration. | awk '{print \"terraform state rm \" $1}' > state-rm-alerts.sh\nchmod +x state-rm-alerts.sh\n./state-rm-alerts.sh\n```\n\n----------------------------------------\n\nTITLE: Data: Federated Settings Identity Provider\nDESCRIPTION: Defines a Terraform data source for retrieving an existing federated settings identity provider from MongoDB Atlas. It requires federation_settings_id and identity_provider_id to identify the specific provider to retrieve.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_identity_provider.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_identity_provider\" \"identity_provider_ds\" {\n  federation_settings_id = mongodbatlas_federated_settings_identity_provider.identity_provider.id\n  identity_provider_id   = \"0oad4fas87jL5Xnk12971234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This command executes the Terraform plan, provisioning or modifying resources in your infrastructure. It applies the changes defined in your configuration to your MongoDB Atlas cluster.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster_outage_simulation/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Snapshot Restore Job - New Usage\nDESCRIPTION: This shows the new usage of `delivery_type_config` in the `mongodbatlas_cloud_provider_snapshot_restore_job` resource, which replaces the deprecated `delivery_type` in v1.0.0. This is now using TypeSet or TypeList with MaxItems = 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\ndelivery_type_config   {\n  point_in_time       = true\n  target_cluster_name = mongodbatlas_cluster.target_cluster.name\n  target_project_id   = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: View Cloud-init Script Output\nDESCRIPTION: This command displays the content of the specific cloud-init script output file, `/var/lib/cloud/instance/scripts/part-002`. The output is checked to verify the script has run correctly and for any errors that may have occurred during its execution.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_13\n\nLANGUAGE: Bash\nCODE:\n```\nsudo cat /var/lib/cloud/instance/scripts/part-002\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas Credentials via Environment Variables\nDESCRIPTION: This snippet demonstrates how to set the MongoDB Atlas public and private keys using environment variables. This is one method for authenticating with the MongoDB Atlas API when using the Terraform provider.  The variables MONGODB_ATLAS_PUBLIC_KEY and MONGODB_ATLAS_PRIVATE_KEY must be set before running Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Create PrivateLink Endpoint - Azure - Terraform\nDESCRIPTION: This resource creates a PrivateLink Endpoint for a serverless instance in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_serverless` resource. It requires a `project_id`, the serverless instance name, and specifies `AZURE` as the provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AZURE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Federated Settings Org Config - Terraform\nDESCRIPTION: This Terraform resource configures federated settings for an organization in MongoDB Atlas. It defines settings such as the federation settings ID, organization ID, data access identity provider IDs, domain restrictions, post-authentication role grants, and identity provider ID. The `domain_allow_list` specifies allowed domains for user logins.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_config.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_config\" \"org_connection\" {\n  federation_settings_id            = \"627a9687f7f7f7f774de306f14\"\n  org_id                            = \"627a9683ea7ff7f74de306f14\"\n  data_access_identity_provider_ids = [\"64d613677e1ad50839cce4db\"]\n  domain_restriction_enabled        = false\n  domain_allow_list                 = [\"mydomain.com\"]\n  post_auth_role_grants             = [\"ORG_MEMBER\"]\n  identity_provider_id              = \"0oaqyt9fc2ySTWnA0357\"\n}\n```\n\n----------------------------------------\n\nTITLE: Import Stream Connection - Terraform\nDESCRIPTION: This example demonstrates how to import an existing stream connection resource into Terraform. The resource can be imported using the instance name, project ID, and connection name. The format must be `INSTANCE_NAME-PROJECT_ID-CONNECTION_NAME`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_connection.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_stream_connection.test \"DefaultInstance-12251446ae5f3f6ec7968b13-NewConnection\"\n```\n\n----------------------------------------\n\nTITLE: Importing a Custom DB Role in MongoDB Atlas using Terraform\nDESCRIPTION: This command shows how to import a custom DB role into Terraform state. The custom DB role is identified by the project ID and role name. Replace '1112222b3bf99403840e8934' with your project ID and 'MyCustomRole' with the name of your custom role.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/custom_db_role.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_custom_db_role.my_role 1112222b3bf99403840e8934-MyCustomRole\n```\n\n----------------------------------------\n\nTITLE: Configuration with read_only_specs - Terraform\nDESCRIPTION: Example configuration block demonstrating how to configure `read_only_specs` within `region_configs` for a MongoDB Atlas cluster. It includes settings for instance size and node count.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_22\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nregion_configs {\n  read_only_specs {\n    instance_size = \"M10\"\n    node_count    = 1\n  }\n  electable_specs {\n    instance_size = \"M10\"\n    node_count    = 3\n  }\n  provider_name = \"AWS\"\n  priority      = 7\n  region_name   = \"US_WEST_1\"\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Standard SRV Connection String in Terraform\nDESCRIPTION: This Terraform code snippet retrieves the standard SRV connection string of an advanced MongoDB Atlas cluster.  It utilizes the `mongodbatlas_advanced_cluster` resource and accesses the `connection_strings.standard_srv` attribute. The output will be in the format `mongodb+srv://cluster-atlas.ygo1m.mongodb.net`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"standard_srv\" {\n    value = mongodbatlas_advanced_cluster.cluster.connection_strings.standard_srv\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve All Flex Snapshots for a Cluster using Terraform\nDESCRIPTION: This code retrieves all flex snapshots associated with a specific cluster name and project.  It uses the `mongodbatlas_flex_snapshots` data source and requires the `project_id` and `name` of the flex cluster. The result is a list of snapshots.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_snapshots.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_snapshots\" \"snapshots\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Resource Policy by ID in Terraform\nDESCRIPTION: This Terraform data source retrieves a specific MongoDB Atlas resource policy by its ID. It requires the organization ID and the ID of the resource policy to fetch. The `org_id` and `id` are sourced from the `mongodbatlas_resource_policy.project_ip_access_list` resource.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policies.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policy\" \"project_ip_access_list\" {\n  org_id = mongodbatlas_resource_policy.project_ip_access_list.org_id\n  id     = mongodbatlas_resource_policy.project_ip_access_list.id\n}\n```\n\n----------------------------------------\n\nTITLE: Move MongoDB Atlas Cluster resource to Advanced Cluster resource\nDESCRIPTION: This snippet demonstrates how to move a `mongodbatlas_cluster` resource to `mongodbatlas_advanced_cluster` using the `moved` block in Terraform. This is required when migrating from the older resource type.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_26\n\nLANGUAGE: Terraform\nCODE:\n```\nmoved {\n  from = mongodbatlas_cluster.cluster\n  to   = mongodbatlas_advanced_cluster.cluster\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Project and Private Endpoint Service for Data Federation & Online Archive in Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas project and a private endpoint service for Data Federation and Online Archive. It requires the `mongodbatlas_project` resource to be created first, then defines a `mongodbatlas_privatelink_endpoint_service_data_federation_online_archive` resource using attributes like `project_id`, `endpoint_id`, `provider_name`, `comment`, `region`, and `customer_endpoint_dns_name`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_data_federation_online_archive.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"atlas-project\" {\n  org_id = var.atlas_org_id\n  name   = var.atlas_project_name\n}\n\nresource \"mongodbatlas_privatelink_endpoint_service_data_federation_online_archive\" \"test\" {\n  project_id = mongodbatlas_project.atlas-project.id\n  endpoint_id = \"vpce-046cf43c79424d4c9\"\n  provider_name = \"AWS\"\n  comment = \"Test\"\n  region        = \"US_EAST_1\"\n  customer_endpoint_dns_name = \"vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com\"\n}\n\ndata \"mongodbatlas_privatelink_endpoint_service_data_federation_online_archive\" \"test_data_source\" {\n  project_id = mongodbatlas_project.atlas-project.id\n  endpoint_id = mongodbatlas_privatelink_endpoint_service_data_federation_online_archive.test.endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Grant Attributes (Terraform)\nDESCRIPTION: These Terraform outputs extract the `grant_type` and `expiration_time` attributes from the `mongodbatlas_mongodb_employee_access_grant` data source. It relies on the data source being defined in the same Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/mongodb_employee_access_grant.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"grant_type\" {\n  value = data.mongodbatlas_mongodb_employee_access_grant.ds_example.grant_type\n}\n\noutput \"expiration_time\" {\n  value = data.mongodbatlas_mongodb_employee_access_grant.ds_example.expiration_time\n}\n```\n\n----------------------------------------\n\nTITLE: Import an Existing MongoDB Atlas Team\nDESCRIPTION: This example demonstrates how to import an existing MongoDB Atlas team into Terraform using the `terraform import` command.  The command requires the organization ID and team ID in the format `ORGID-TEAMID`. This allows Terraform to manage a pre-existing team within your infrastructure as code.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/team.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n$ terraform import mongodbatlas_team.my_team 1112222b3bf99403840e8934-1112222b3bf99403840e8935\n```\n\n----------------------------------------\n\nTITLE: Query Cloud Backup Schedule Terraform\nDESCRIPTION: This Terraform configuration queries the cloud backup schedule that has been defined earlier. It uses the `mongodbatlas_cloud_backup_schedule` data source to retrieve the backup schedule details based on the project ID and cluster name.  The data source requires the project_id and cluster_name to be previously defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/backup_compliance_policy.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_cloud_backup_schedule\" \"test\" {\n  project_id   = mongodbatlas_cloud_backup_schedule.test.project_id\n  cluster_name = mongodbatlas_cloud_backup_schedule.test.cluster_name\n}\n\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Credentials using Credentials File\nDESCRIPTION: This snippet illustrates configuring AWS credentials using the `~/.aws/credentials` file. It requires creating or modifying the file with the appropriate access key ID and secret access key under the `default` profile.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/aws/Readme.md#_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Query Federated Database with Atlas Cluster - Terraform\nDESCRIPTION: Retrieves information about a Federated Database Instance configured to use a MongoDB Atlas cluster as the storage database. The `project_id` and `name` are required to identify the specific instance.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_database_instance.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_federated_database_instance\" \"test\" {\n  project_id         = \"PROJECT ID\"\n  name               = \"TENANT NAME OF THE FEDERATED DATABASE INSTANCE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing an existing Private Endpoint Service\nDESCRIPTION: This Terraform command imports an existing MongoDB Atlas Private Endpoint Service resource for Data Federation and Online Archive. It requires the project ID and endpoint ID, concatenated with `--`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/privatelink_endpoint_service_data_federation_online_archive.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_privatelink_endpoint_service_data_federation_online_archive.example 1112222b3bf99403840e8934--vpce-3bf78b0ddee411ba1\n```\n\n----------------------------------------\n\nTITLE: Deprecated API keys block in mongodbatlas_project\nDESCRIPTION: Illustrates the deprecated method of defining API keys within the `mongodbatlas_project` resource using the `api_keys` block. This block is replaced by the `mongodbatlas_project_api_key` resource in newer versions of the Terraform provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/Programmatic-API-Key-upgrade-guide-1.10.0.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_project\" \"test\" {\n  name   = \"projectName\"\n  org_id = var.org_id\n\n  api_keys {\n    api_key_id = mongodbatlas_api_key.orgKey1.api_key_id\n    role_names = [\"GROUP_OWNER\"]\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command\nDESCRIPTION: This snippet shows the command to execute the Terraform plan.  This command analyzes the Terraform configuration and generates an execution plan that outlines the changes that will be made to the infrastructure. It requires Terraform to be initialized and configured with the appropriate credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Resource Policy Creation: Cloud Region Restriction (Terraform)\nDESCRIPTION: Creates a `mongodbatlas_resource_policy` to restrict cluster creation in a specific cloud region. It uses the `cedar_policyset` data source defined earlier as the policy body.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_resource_policy\" \"cloud_region\" {\n  org_id = var.org_id\n  name   = \"forbid-cloud-region\"\n  policies = [\n    {\n      body = data.cedar_policyset.cloud_region.text\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encryption at Rest - New Usage\nDESCRIPTION: This shows the new usage of `aws_kms_config`, `azure_key_vault_config`, and `google_cloud_kms_config` in the `mongodbatlas_encryption_at_rest` resource, which replace the deprecated blocks in v1.0.0. These are now using TypeSet or TypeList with MaxItems = 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_12\n\nLANGUAGE: terraform\nCODE:\n```\naws_kms_config {\n  enabled                = true\n  access_key_id          = \"\"\n  secret_access_key      = \"\"\n  customer_master_key_id = \"\"\n  region                 = \"\"\n}\n\nazure_key_vault_config {\n  enabled             = true\n  client_id           = \"\"\n  azure_environment   = \"\"\n  subscription_id     = \"\"\n  resource_group_name = \"\"\n  key_vault_name  \t  = \"\"\n  key_identifier  \t  = \"\"\n  secret  \t\t  = \"\"\n  tenant_id  \t\t  = \"\"\n}\n\ngoogle_cloud_kms_config {\n  enabled                 = true\n  service_account_key     = \"\"\n  key_version_resource_id = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Network Container with AWS\nDESCRIPTION: This Terraform configuration creates a network container in MongoDB Atlas for AWS. It specifies the project ID, CIDR block, provider name, and region name.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/network_container.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_network_container\" \"test\" {\n  project_id       = \"<YOUR-PROJECT-ID>\"\n  atlas_cidr_block = \"10.8.0.0/21\"\n  provider_name    = \"AWS\"\n  region_name      = \"US_EAST_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Modified Configuration with autoscaling disabled - Terraform\nDESCRIPTION: Shows how to disable autoscaling by setting `disk_gb_enabled` and `compute_enabled` attributes to `false` within the auto_scaling block, instead of removing the entire block.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_25\n\nLANGUAGE: Terraform\nCODE:\n```\n...\nauto_scaling {\n  disk_gb_enabled = false\n  compute_enabled = false\n  compute_scale_down_enabled = false\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Stream Processors in Instance (Terraform Data Source)\nDESCRIPTION: This code retrieves all stream processors within a specified stream instance using a data source. It defines the project ID and instance name to filter the results.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processors.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_stream_processors\" \"example-stream-processors\" {\n  project_id    = var.project_id\n  instance_name = mongodbatlas_stream_instance.example.instance_name\n}\n```\n\n----------------------------------------\n\nTITLE: Import Federated Database Instance by Project ID and Instance Name - Terraform\nDESCRIPTION: This snippet demonstrates how to import a Federated Database Instance using the project ID and instance name. The resource ID format is `project_id--name`. This allows Terraform to manage an existing Atlas Federated Database Instance.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_database_instance.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_database_instance.example 1112222b3bf99403840e8934--test\n```\n\n----------------------------------------\n\nTITLE: Output Search Deployment Encryption Provider Terraform\nDESCRIPTION: This output exports the encryption at rest provider used by the MongoDB Atlas search deployment retrieved by the data source.  The value indicates the cloud service provider managing customer keys.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_search_deployment_encryption_at_rest_provider\" {\n  value = data.mongodbatlas_search_deployment.example.encryption_at_rest_provider\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a MongoDB Atlas Search Deployment\nDESCRIPTION: This Terraform configuration retrieves information about an existing MongoDB Atlas Search Deployment using the `mongodbatlas_search_deployment` data source. It requires the `project_id` and `cluster_name` of the search deployment to be specified.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/search_deployment.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_search_deployment\" \"example\" {\n  project_id   = mongodbatlas_search_deployment.example.project_id\n  cluster_name = mongodbatlas_search_deployment.example.cluster_name\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a MongoDB Atlas PrivateLink Endpoint Resource Terraform\nDESCRIPTION: This Terraform resource creates a new PrivateLink Endpoint in MongoDB Atlas. It requires specifying the project ID, cloud provider name (AWS in this case), and the region.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_privatelink_endpoint\" \"test\" {\n  project_id    = \"<PROJECT-ID>\"\n  provider_name = \"AWS\"\n  region        = \"US_EAST_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying the Terraform Resources - Bash\nDESCRIPTION: This snippet shows the command used to destroy all the resources created by the Terraform configuration.  This is important to avoid unnecessary charges after testing or development is complete.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/multi-cloud/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Retrieve Federated Settings using Terraform\nDESCRIPTION: This Terraform configuration retrieves federated settings for a specific organization in MongoDB Atlas. It requires the `org_id` as input and exports attributes related to the federated settings.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings\" \"settings\" {\n  org_id = \"627a9683e7f7f7ff7fe306f14\"\n}\n```\n\n----------------------------------------\n\nTITLE: Outputting Single Cluster Name Terraform\nDESCRIPTION: This code outputs the name of a single flex cluster retrieved by the `mongodbatlas_flex_cluster` data source. It extracts the name from the `example-cluster` data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_clusters.md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"mongodbatlas_flex_cluster\" {\n  value = data.mongodbatlas_flex_cluster.example-cluster.name\n}\n```\n\n----------------------------------------\n\nTITLE: Import and Apply Alert Resources\nDESCRIPTION: This script outputs commands to import alert resources into the Terraform state, creates a Terraform configuration file for alert resources, and applies the configuration to the MongoDB Atlas project.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_alert_configuration/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nterraform output -raw alert_imports > import-alerts.sh\nterraform output -raw alert_resources > alert-configurations.tf\nchmod +x ./import-alerts.sh\n./import-alerts.sh\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configure Cloud Provider Access - Example 1st Terraform Apply\nDESCRIPTION: This Terraform configuration defines a `mongodbatlas_cloud_provider_access` resource. The initial application creates the cloud provider access configuration but does not include the IAM assumed role ARN. Outputs are provided to help with editing the AWS IAM policy and enabling BYOK encryption at rest later. The ARN will be added in a subsequent apply.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_access\" \"test\" {\n    project_id = mongodbatlas_project.my_project.id\n    provider_name = \"AWS\"\n    #after first apply update below with the iam assumed role arn after editing the policy\n    #iam_assumed_role_arn = \"REPLACE_WITH_iam_assumed_role_arn\"\n}\n#Information you’ll need to edit your AWS policy \noutput \"cloud_provider_access_external_id\" {\n    value = mongodbatlas_cloud_provider_access.test.atlas_assumed_role_external_id\n}\n#Information you’ll need to edit your AWS policy \noutput \"cloud_provider_access_arn\" {\n    value = mongodbatlas_cloud_provider_access.test.atlas_aws_account_arn\n}\n#Information you’ll need to enable BYOK encryption at rest later        \noutput \"cloud_provider_role_id\" {\n    value = mongodbatlas_cloud_provider_access.test.role_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Requirements\nDESCRIPTION: Specifies the Terraform version and MongoDB Atlas provider version required for the configuration. It defines the minimum Terraform version and the specific version of the `mongodbatlas` provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/version-upgrade-with-pinned-fcv/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.29.0\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Access Authorization - New Usage\nDESCRIPTION: This shows the new usage of `aws` in the `mongodbatlas_cloud_provider_access_authorization` resource, which replaces the deprecated `aws` block in v1.0.0. This is now using TypeSet or TypeList with MaxItems = 1.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\naws {\n  iam_assumed_role_arn = aws_iam_role.test_role.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving MongoDB Atlas Backup Compliance Policy - Terraform\nDESCRIPTION: This snippet demonstrates how to retrieve an existing MongoDB Atlas Backup Compliance Policy using a data source in Terraform. It uses the project ID to fetch the compliance policy's details.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/backup_compliance_policy.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_backup_compliance_policy\" \"backup_policy\" {\n  project_id = mongodbatlas_cloud_backup_schedule.test.project_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Execution\nDESCRIPTION: This bash command destroys all resources created by Terraform, preventing unnecessary Atlas charges after testing.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_data_lake_pipeline/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nterraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Declaration\nDESCRIPTION: This snippet declares the required Terraform version and the MongoDB Atlas provider version.  It specifies that Terraform version 0.13 or higher is required, and that the MongoDB Atlas provider version 1.18.0 should be used.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/asymmetric-sharded-cluster/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform >= 0.13\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.18.0\n```\n\n----------------------------------------\n\nTITLE: Importing an existing MongoDB Atlas Serverless Instance\nDESCRIPTION: This command shows how to import an existing Serverless Instance into your Terraform state. Replace `GROUP_ID` and `SERVERLESS_INSTANCE_NAME` with your actual values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/serverless_instance.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_serverless_instance.my_serverless_instance 1112222b3bf99403840e8934-My Serverless Instance\n```\n\n----------------------------------------\n\nTITLE: Terraform Variable Configuration for Shared Tier Cluster\nDESCRIPTION: This configuration creates a shared-tier MongoDB Atlas cluster using the TENANT provider. It defines variables for the Atlas organization ID, public and private keys, provider name, backing provider (AWS), and instance size (M0). The variables need to be replaced with the actual values before applying the Terraform configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster/tenant-upgrade/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = \"627a9687f7f7f7f774de306f14\"\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"TENANT\"\nbacking_provider_name       = \"AWS\"\nprovider_instance_size_name = \"M0\"\n```\n\n----------------------------------------\n\nTITLE: Stream Processors Results Output - Terraform\nDESCRIPTION: Outputs the results (list of stream processors) retrieved using the `mongodbatlas_stream_processors` data source. The value is accessed using the `.results` attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"stream_processors_results\" {\n  value = data.mongodbatlas_stream_processors.example-stream-processors.results\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: Applies the changes defined in the Terraform configuration, provisioning the infrastructure resources. This command executes the plan created by `terraform plan` and creates or modifies resources in Azure and MongoDB Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/azure/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing Stream Instance\nDESCRIPTION: This example demonstrates how to import an existing `mongodbatlas_stream_instance` resource into Terraform state using the project ID and instance name. The format required is `PROJECT_ID-INSTANCE_NAME`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_instance.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n$ terraform import mongodbatlas_stream_instance.test 650972848269185c55f40ca1-InstanceName\n```\n\n----------------------------------------\n\nTITLE: Retrieve Specific Federated Settings Identity Provider - Terraform\nDESCRIPTION: This data source retrieves a specific federated settings identity provider using the `mongodbatlas_federated_settings_identity_provider` data source. It uses the old IdP ID (`okta_idp_id`) to retrieve the provider and returns both the old (okta_idp_id) and new (idp_id) formats for the identity provider ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.15.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_federated_settings_identity_provider\" \"identity_provider\" {\n\t\t\tfederation_settings_id = <federation_settings_id>\n\t\t\tidentity_provider_id   = <okta_idp_id>\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command (Bash)\nDESCRIPTION: This command destroys all the resources that were created by the Terraform configuration, preventing unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command (Bash)\nDESCRIPTION: This snippet shows the command to destroy the resources created by Terraform. This command removes all the resources provisioned by the Terraform configuration.  This command requires Terraform to be installed and configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Retrieve Serverless PrivateLink Endpoints Service - AWS\nDESCRIPTION: This example shows how to retrieve the Serverless PrivateLink Endpoints Service using the `mongodbatlas_privatelink_endpoints_service_serverless` data source and associated resources for AWS.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoints_service_serverless.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoints_service_serverless\" \"test\" {\n  project_id   = \"<PROJECT_ID>\"\n  instance_name = mongodbatlas_serverless_instance.test.name\n}\n\nresource \"mongodbatlas_privatelink_endpoint_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = mongodbatlas_serverless_instance.test.name\n\tprovider_name = \"AWS\"\n}\n\t  \nresource \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tinstance_name = \"test-db\"\n\tendpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n\tprovider_name = \"AWS\"\n\tcomment = \"New serverless endpoint\"\n}\n\nresource \"mongodbatlas_serverless_instance\" \"test\" {\n\tproject_id   = \"<PROJECT_ID>\"\n\tname         = \"test-db\"\n\tprovider_settings_backing_provider_name = \"AWS\"\n\tprovider_settings_provider_name = \"SERVERLESS\"\n\tprovider_settings_region_name = \"US_EAST_1\"\n\tcontinuous_backup_enabled = true\n}\n```\n\n----------------------------------------\n\nTITLE: Output Stream Processors Results - Terraform\nDESCRIPTION: Outputs the results from the `mongodbatlas_stream_processors` data source, which contains a list of stream processors and their details.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"stream_processors_results\" {\n  value = data.mongodbatlas_stream_processors.example-stream-processors.results\n}\n```\n\n----------------------------------------\n\nTITLE: Stream Processor State Output - Terraform\nDESCRIPTION: Outputs the state of a specific stream processor retrieved using the `mongodbatlas_stream_processor` data source. The value is accessed using the `.state` attribute.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/stream_processor.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"stream_processors_state\" {\n  value = data.mongodbatlas_stream_processor.example-stream-processor.state\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Standard Storage Configuration\nDESCRIPTION: This configuration defines the variables required to create a MongoDB Atlas cluster with a STANDARD storage tier. The configuration sets the provider, instance size, and volume type for the cluster. The provider_disk_iops is also defined.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cluster/nvme-upgrade/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = \"627a9687f7f7f7f774de306f14\"\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"AWS\"\nprovider_instance_size_name = \"M40\"\nprovider_volume_type        = \"STANDARD\"\nprovider_disk_iops          = 3000\n```\n\n----------------------------------------\n\nTITLE: Old Cluster Configuration (mongodbatlas_cluster)\nDESCRIPTION: This snippet shows an example of an old `mongodbatlas_cluster` resource configuration. It demonstrates the configuration of the project ID, cluster name, cluster type, provider settings, autoscaling, backup configuration and replication spec.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/cluster-to-advanced-cluster-migration-guide.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cluster\" \"this\" {\n  project_id   = var.project_id\n  name         = \"legacy-cluster\"\n  cluster_type = \"REPLICASET\"\n\n  provider_instance_size_name = \"M10\" # 1 Replication Spec Configuration\n  provider_name               = \"AWS\" # 2 Provider Settings\n\n  auto_scaling_disk_gb_enabled = true # 3 Auto Scaling\n  cloud_backup                 = true # 4 Backup Configuration\n\n  replication_specs {\n    num_shards = 1\n    regions_config {\n      region_name     = \"US_EAST_1\"\n      priority        = 7\n      electable_nodes = 3 # 1 Replication Spec Configuration\n      analytics_nodes = 1 # 1 Replication Spec Configuration\n      read_only_nodes = 0 # 1 Replication Spec Configuration\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Snapshot Restore Job - Old Usage\nDESCRIPTION: This shows the old usage of `delivery_type` in the `mongodbatlas_cloud_provider_snapshot_restore_job` resource, which is deprecated in v1.0.0 due to the Terraform SDK v2 migration. This was of TypeMap.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\ndelivery_type  = {\n  point_in_time       = true\n  target_cluster_name = mongodbatlas_cluster.target_cluster.name\n  target_project_id   = \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output Search Deployment ID Terraform\nDESCRIPTION: This output exports the ID of the MongoDB Atlas search deployment retrieved by the data source.  The value can be used in other resources or configurations.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/search_deployment.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\noutput \"mongodbatlas_search_deployment_id\" {\n  value = data.mongodbatlas_search_deployment.example.id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This command destroys the resources managed by Terraform in your configuration. It's used to remove the Atlas Project and Cluster when they are no longer needed, preventing unnecessary Atlas charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster (preview provider 2.0.0)/global-cluster/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Import Federated Query Limit Terraform\nDESCRIPTION: This command demonstrates how to import an existing Federated Database Instance Query Limit into Terraform for management.  The resource must already exist in MongoDB Atlas.  It requires the `project_id`, `tenant_name`, and `limit_name`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/federated_query_limit.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import mongodbatlas_federated_query_limit.example 1112222b3bf99403840e8934--FederatedDatabaseInstance0--bytesProcessed.daily\n```\n\n----------------------------------------\n\nTITLE: Migrating Tags Terraform\nDESCRIPTION: This snippet demonstrates how to migrate the `tags` block to a map format. This involves converting each tag block into a key-value pair within a map. It also shows the syntax for keys containing spaces and using expressions.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_3\n\nLANGUAGE: terraform\nCODE:\n```\ntags {\n  key   = \"env\"\n  value = \"dev\"\n}\ntags {\n  key   = \"tag 2\"\n  value = \"val\"\n}\ntags {\n  key   = var.tag_key\n  value = \"another_val\"\n}\n\n```\n\nLANGUAGE: terraform\nCODE:\n```\ntags = {\n  env           = \"dev\"         # key strings without blanks can be enclosed in quotes but not required\n  \"tag 2\"       = \"val\"         # enclose key strings with blanks in quotes\n  (var.tag_key) = \"another_val\" # enclose key expressions in brackets so they can be evaluated\n}\n```\n\n----------------------------------------\n\nTITLE: Using a `type = list()` variable with dynamic - Terraform\nDESCRIPTION: This snippet showcases how to use a `type = list()` variable in conjunction with `dynamic` blocks within a Terraform configuration. It defines a variable `region_configs_list` with a list of objects, ensuring a consistent order when used with `dynamic`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/troubleshooting.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"region_configs_list\" {\n  description = \"List of region_configs\"\n  type = list(object({\n    provider_name = string\n    priority      = number\n    region_name   = string\n    electable_specs = list(object({\n      instance_size = string\n      node_count    = number\n    }))\n  }))\n  default = [{\n    provider_name = \"AWS\",\n    priority      = 7,\n    region_name   = \"US_EAST_1\",\n    electable_specs = [{\n      instance_size = \"M20\"\n      node_count    = 1\n    }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This command generates an execution plan, showing the changes that Terraform will make to the infrastructure. It allows the user to review the changes before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/azure/Readme.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Requirements\nDESCRIPTION: This snippet displays the versions of Terraform and the MongoDB Atlas provider required for the configuration. It specifies a minimum version of the Terraform MongoDB Atlas provider to ensure compatibility.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\nTerraform v1.5.2\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.16.0\n```\n\n----------------------------------------\n\nTITLE: AWS Credentials File Example\nDESCRIPTION: This shows the format for storing AWS credentials in the `~/.aws/credentials` file.  The profile `default` is used. Replace `<AWS_ACCESS_KEY_ID>` and `<AWS_SECRET_ACCESS_KEY>` with your actual AWS credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ cat ~/.aws/credentials\n[default]\naws_access_key_id = <AWS_ACCESS_KEY_ID>\naws_secret_access_key = <AWS_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Query Azure Encryption At Rest Private Endpoints - Terraform\nDESCRIPTION: This Terraform configuration defines a data source to retrieve encryption at rest private endpoints for Azure Key Vault. It requires the `atlas_project_id` variable and sets the `cloud_provider` to \"AZURE\". The output displays the number of retrieved endpoints.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/encryption_at_rest_private_endpoints.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_encryption_at_rest_private_endpoints\" \"plural\" {\n  project_id     = var.atlas_project_id\n  cloud_provider = \"AZURE\"\n}\n\noutput \"number_of_endpoints\" {\n  value = length(data.mongodbatlas_encryption_at_rest_private_endpoints.plural.results)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Alert Configuration with Metric Threshold\nDESCRIPTION: This example demonstrates how to create an alert configuration with a metric threshold using the `mongodbatlas_alert_configuration` resource. It defines an alert that triggers when the `ASSERT_REGULAR` metric goes below 99.0.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/alert_configuration.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_alert_configuration\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  event_type = \"OUTSIDE_METRIC_THRESHOLD\"\n  enabled    = true\n\n  notification {\n    type_name     = \"GROUP\"\n    interval_min  = 5\n    delay_min     = 0\n    sms_enabled   = false\n    email_enabled = true\n    roles         = [\"GROUP_CLUSTER_MANAGER\"]\n  }\n\n  matcher {\n    field_name = \"HOSTNAME_AND_PORT\"\n    operator   = \"EQUALS\"\n    value      = \"SECONDARY\"\n  }\n\n  metric_threshold_config {\n    metric_name = \"ASSERT_REGULAR\"\n    operator    = \"LESS_THAN\"\n    threshold   = 99.0\n    units       = \"RAW\"\n    mode        = \"AVERAGE\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query PrivateLink Endpoint Service - Azure - Terraform\nDESCRIPTION: This code retrieves information about a Serverless PrivateLink Endpoint Service in MongoDB Atlas using the `mongodbatlas_privatelink_endpoint_service_serverless` data source. It requires a `project_id`, the serverless instance name, and the `endpoint_id` of the associated private endpoint.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/privatelink_endpoint_service_serverless.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_privatelink_endpoint_service_serverless\" \"test\" {\n  project_id   = \"<PROJECT_ID>\"\n  instance_name = mongodbatlas_serverless_instance.test.name\n  endpoint_id = mongodbatlas_privatelink_endpoint_serverless.test.endpoint_id\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Output Replication Specs - Terraform\nDESCRIPTION: This code snippet defines a Terraform output for `replication_specs`. It conditionally sets the value to an empty list if the new replication specs are used, otherwise, it retrieves the value from the data source. This maintains backward compatibility during migration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_maintainer/README.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\noutput \"replication_specs\" {\n  value       = local.use_new_replication_specs ? [] : data.mongodbatlas_cluster.this[0].replication_specs # updated\n  description = \"Replication Specs for cluster, will be empty if var.replication_specs_new is set\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Atlas Credentials in terraform.tfvars\nDESCRIPTION: Defines the MongoDB Atlas public and private keys as variables within a terraform.tfvars file. This approach allows storing the credentials outside the main Terraform configuration.  It's important to avoid committing this file to version control.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_backup_schedule/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\npublic_key           = \"<MONGODB_ATLAS_PUBLIC_KEY>\"\nprivate_key          = \"<MONGODB_ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Remove Terraform State Resources\nDESCRIPTION: These commands remove the deprecated `mongodbatlas_cloud_provider_snapshot` and `mongodbatlas_cloud_provider_snapshot_restore_job` resources from the Terraform state file. This is a step in migrating to the new `mongodbatlas_cloud_backup_snapshot` and `mongodbatlas_cloud_backup_snapshot_restore_job` resources.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.1.0-upgrade-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform state rm mongodbatlas_cloud_provider_snapshot.test\n$ terraform state rm mongodbatlas_cloud_provider_snapshot_restore_job.test\n```\n\n----------------------------------------\n\nTITLE: Create Stream Processor (Kafka to Cluster) - Terraform\nDESCRIPTION: Creates a Stream Processor to transfer data from a Kafka connection to a MongoDB Atlas cluster connection. It configures the pipeline, state, and options, including a dead-letter queue (DLQ) for handling failed messages.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_processor.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_stream_processor\" \"stream-processor-kafka-to-cluster-example\" {\n  project_id     = var.project_id\n  instance_name  = mongodbatlas_stream_instance.example.instance_name\n  processor_name = \"kafkaProcessorName\"\n  pipeline = jsonencode([\n    { \"$source\" = { \"connectionName\" = resource.mongodbatlas_stream_connection.example-kafka.connection_name, \"topic\" : \"topic_source\" } },\n    { \"$emit\" = { \"connectionName\" : resource.mongodbatlas_stream_connection.example-cluster.connection_name, \"db\" : \"kafka\", \"coll\" : \"topic_source\", \"timeseries\" : { \"timeField\" : \"ts\" } } }\n  ])\n  state = \"CREATED\"\n  options = {\n    dlq = {\n      coll            = \"exampleColumn\"\n      connection_name = resource.mongodbatlas_stream_connection.example-cluster.connection_name\n      db              = \"exampleDb\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Tags for a MongoDB Atlas Project\nDESCRIPTION: This Terraform configuration demonstrates how to define tags for a MongoDB Atlas project. Tags are key-value pairs used for categorization and organization. The `lifecycle` block with `ignore_changes` prevents Terraform from detecting changes to specific tags, such as 'CostCenter', if managed outside of Terraform.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/project.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ntags = {\n    Owner       = \"Terraform\"\n    Environment = \"Example\"\n    Team        = \"tf-experts\"\n  }\n  \n  lifecycle {\n    ignore_changes = [\n      tags[\"CostCenter\"] # useful if `CostCenter` key is managed outside terraform\n    ]\n  }\n```\n\n----------------------------------------\n\nTITLE: Terraform Import\nDESCRIPTION: Imports the `mongodbatlas_federated_settings_org_config` resource into Terraform. This allows Terraform to manage an existing Federated Authentication configuration. Replace `{federated_settings_id}` and `{org_id}` with the actual values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nterraform init\nterraform import mongodbatlas_federated_settings_org_config.this {federated_settings_id}-{org_id}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the `terraform destroy` command to remove the MongoDB Atlas cluster and related resources. This command cleans up the environment and avoids unnecessary charges.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/version-upgrade-with-pinned-fcv/README.md#_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Configuring a MongoDB Atlas Event Trigger with Terraform\nDESCRIPTION: This Terraform configuration defines a mongodbatlas_event_trigger resource and a mongodbatlas_event_triggers data source. The resource creates a new event trigger and the data source retrieves information about existing event triggers using the resource's project_id and app_id as arguments. The config_match block defines criteria for matching events based on a key-value pair.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/event_triggers.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_event_trigger\" \"test\" {\n  project_id = \"PROJECT ID\"\n  app_id = \"APPLICATION ID\"\n  name = \"NAME OF THE TRIGGER\"\n  type = \"DATABASE\"\n  function_id = \"1\"\n  disabled = false\n  config_operation_types = [\"INSERT\", \"UPDATE\"]\n  config_database = \"DATABASE NAME\"\n  config_collection = \"COLLECTION NAME\"\n  config_service_id = \"1\"\n  config_match {\n    key = \"KEY\",\n    value = \"EXPRESSION\"\n  }\n  config_full_document = false\n}\n\ndata \"mongodbatlas_event_triggers\" \"test\" {\n  project_id = mongodbatlas_event_trigger.test.project_id\n  app_id = mongodbatlas_event_trigger.test.app_id\n}\n```\n\n----------------------------------------\n\nTITLE: Import PrivateLink Endpoints and Services\nDESCRIPTION: These commands import the existing Private Endpoint configurations into the new `mongodbatlas_privatelink_endpoint` and `mongodbatlas_privatelink_endpoint_service` resources.  `<project_id>`, `<private_link_id>`, `<provider_name>`, `<region>`, and `<endpoint_service_id>` need to be replaced with your specific values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nterraform import mongodbatlas_privatelink_endpoint.test <project_id>-<private_link_id>-<provider_name>-<region>\nterraform import mongodbatlas_privatelink_endpoint_service.test <project_id>--<private_link_id>--<endpoint_service_id>--<provider_name>\n```\n\n----------------------------------------\n\nTITLE: Import Terraform Resources\nDESCRIPTION: These commands import the existing cloud provider snapshot resources into the new cloud backup snapshot resources in the Terraform state.  This allows Terraform to manage these resources with the updated resource names.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.1.0-upgrade-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nterraform import mongodbatlas_cloud_backup_snapshot.test <project_id>-<cluster_name>-<snapshot_id>\n```\n\nLANGUAGE: bash\nCODE:\n```\nterraform import mongodbatlas_cloud_backup_snapshot_restore_job.test <project_id>-<cluster_name>-<job_id>\n```\n\n----------------------------------------\n\nTITLE: Azure CLI Login\nDESCRIPTION: Authenticates with Azure using the Azure CLI. This command opens a browser window for interactive login and retrieves user details upon successful authentication. The user must have the Azure CLI installed.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\naz login\n```\n\n----------------------------------------\n\nTITLE: Query All Flex Restore Jobs - Terraform\nDESCRIPTION: This Terraform configuration retrieves a list of all flex restore jobs for a specific flex cluster. It takes the `project_id` and the flex cluster `name` as inputs. The output displays the restore job IDs of all the restore jobs.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_restore_job.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_flex_restore_jobs\" \"restore_jobs\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n\noutput \"mongodbatlas_flex_restore_jobs\" {\n  value = [for restore_job in data.mongodbatlas_flex_restore_jobs.restore_jobs.results : restore_job.restore_job_id]\n}\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Access Authorization - Old Usage\nDESCRIPTION: This shows the old usage of `aws` in the `mongodbatlas_cloud_provider_access_authorization` resource, which is deprecated in v1.0.0 due to the Terraform SDK v2 migration. This was of TypeMap.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\naws = {\n  iam_assumed_role_arn = aws_iam_role.test_role.arn\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Shared Tier Snapshots - Terraform\nDESCRIPTION: This Terraform configuration uses the `mongodbatlas_shared_tier_snapshots` data source to retrieve information about snapshots for a specified shared tier cluster within a MongoDB Atlas project. The `project_id` and `cluster_name` are required to identify the specific cluster. This data source is deprecated and will be removed in January 2026.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_shared_tier_snapshots.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_shared_tier_snapshots\" \"test\" {\n  project_id          = \"5d0f1f73cf09a29120e173cf\"\n  cluster_name      = \"MyClusterTest\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply Command\nDESCRIPTION: This snippet shows the command to apply a Terraform configuration. This command creates or modifies the infrastructure as defined in the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Configure Customer Key Management - Existing Project (Old)\nDESCRIPTION: This Terraform configuration shows the old way to configure encryption at rest with AWS KMS for an existing project, using access key ID and secret access key.  This approach is being replaced by the use of IAM roles.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.0-upgrade-guide.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\naws_kms = {\n    enabled                               = true\n    access_key_id                  = \"AKIAIOSFUDNN9EXAMPLE\"\n    secret_access_key           = \"wJalrXUtnFRTI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n    customer_master_key_id         = \"030gce02-586d-48d2-a999-05ea954fdd0g\"\n    region                             = \"US_EAST_1\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Federated Settings Org Role Mapping Example Usage (Terraform)\nDESCRIPTION: This example demonstrates how to use the `mongodbatlas_federated_settings_org_role_mapping` resource and data source. The resource creates a federated settings organization role mapping, and the data source retrieves the created role mapping using its ID. It requires `federation_settings_id` and `org_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/federated_settings_org_role_mapping.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_federated_settings_org_role_mapping\" \"org_group_role_mapping_import\" {\n  federation_settings_id = data.mongodbatlas_federated_settings.federated_settings.id\n  org_id                 = \"627a9683e7f7f7ff7fe306f14\"\n\n  external_group_name = \"myGrouptest\"\n\n  role_assignments {\n    org_id = \"627a9683e7f7f7ff7fe306f14\"\n    roles     = [\"ORG_MEMBER\",\"ORG_GROUP_CREATOR\",\"ORG_BILLING_ADMIN\"]\n  }\n\n  role_assignments {\n    group_id = \"628aa20db7f7f7f98b81b8\"\n    roles     = [\"GROUP_OWNER\",\"GROUP_DATA_ACCESS_ADMIN\",\"GROUP_SEARCH_INDEX_EDITOR\",\"GROUP_DATA_ACCESS_READ_ONLY\"]\n  }\n\n  role_assignments {\n    group_id = \"62b477f7f7f7f5e741489c\"\n    roles     = [\"GROUP_OWNER\",\"GROUP_DATA_ACCESS_ADMIN\",\"GROUP_SEARCH_INDEX_EDITOR\",\"GROUP_DATA_ACCESS_READ_ONLY\",\"GROUP_DATA_ACCESS_READ_WRITE\"]\n  }\n}\n\ndata \"mongodbatlas_federated_settings_org_role_mapping\" \"role_mapping\" {\n  federation_settings_id = mongodbatlas_federated_settings_org_role_mapping.org_group_role_mapping_import.id\n  org_id                 = \"627a9683e7f7f7ff7fe306f14\"\n  role_mapping_id        = \"627a9673e7f7f7ff7fe306f14\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Initialization\nDESCRIPTION: This snippet shows the expected output when initializing the Terraform provider for MongoDB Atlas. It lists the Terraform version and the version of the `mongodbatlas` provider.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_data_lake_pipeline/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nTerraform v0.13.0\n+ provider registry.terraform.io/terraform-providers/mongodbatlas v1.10.0\n```\n\n----------------------------------------\n\nTITLE: Terraform Variables for Dedicated Tier Cluster Upgrade\nDESCRIPTION: This Terraform configuration defines variables to upgrade an existing shared tier MongoDB Atlas cluster to a dedicated tier on AWS. It sets the provider to AWS and the instance size to M10. It requires an Atlas organization ID, a public key, and a private key.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/tenant-upgrade/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\natlas_org_id                = <ATLAS_ORG_ID>\npublic_key                  = <ATLAS_PUBLIC_KEY>\nprivate_key                 = <ATLAS_PRIVATE_KEY>\nprovider_name               = \"AWS\"\nprovider_instance_size_name = \"M10\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: Executes the `terraform destroy` command. This command destroys the infrastructure resources managed by Terraform, in this case, the Atlas Project and Cluster.  It requires Terraform to be initialized and configured, and it removes all resources defined in the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/multi-cloud/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Deprecated Backup Policy Configuration Terraform\nDESCRIPTION: This is an example of the deprecated `mongodbatlas_cloud_provider_snapshot_backup_policy` resource configuration. It defines the backup policy for a MongoDB Atlas cluster, including the reference hour and minute, restore window, and individual policy items with their frequency and retention settings. This resource is deprecated and should be migrated to `mongodbatlas_cloud_backup_schedule`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_13\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot_backup_policy\" \"test\" {\n  project_id   = mongodbatlas_cluster.my_cluster.project_id\n  cluster_name = mongodbatlas_cluster.my_cluster.name\n\n  reference_hour_of_day    = 3\n  reference_minute_of_hour = 45\n  restore_window_days      = 4\n\n  //Keep all 4 default policies but modify the units and values\n  //Could also just reflect the policy defaults here for later management\n  policies {\n    id = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.id\n\n    policy_item {\n      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.0.id\n      frequency_interval = 1\n      frequency_type     = \"hourly\"\n      retention_unit     = \"days\"\n      retention_value    = 1\n    }\n\n    policy_item {\n      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.1.id\n      frequency_interval = 1\n      frequency_type     = \"daily\"\n      retention_unit     = \"days\"\n      retention_value    = 2\n    }\n\n    policy_item {\n      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.2.id\n      frequency_interval = 4\n      frequency_type     = \"weekly\"\n      retention_unit     = \"weeks\"\n      retention_value    = 3\n    }\n\n    policy_item {\n      id                 = mongodbatlas_cluster.my_cluster.snapshot_backup_policy.0.policies.0.policy_item.3.id\n      frequency_interval = 5\n      frequency_type     = \"monthly\"\n      retention_unit     = \"months\"\n      retention_value    = 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Cloud Backup Snapshot Restore Jobs - Terraform\nDESCRIPTION: This Terraform configuration first creates a cloud provider snapshot and a restore job, then retrieves the restore jobs using the `mongodbatlas_cloud_provider_snapshot_restore_jobs` data source. It requires the `project_id` and `cluster_name` attributes from the restore job resource and sets optional pagination parameters.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/cloud_provider_snapshot_restore_jobs.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"mongodbatlas_cloud_provider_snapshot\" \"test\" {\n  project_id          = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name      = \"MyCluster\"\n  description       = \"MyDescription\"\n  retention_in_days = 1\n}\n\nresource \"mongodbatlas_cloud_provider_snapshot_restore_job\" \"test\" {\n  project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  cluster_name = \"MyCluster\"\n  snapshot_id  = mongodbatlas_cloud_provider_snapshot.test.id\n  delivery_type_config {\n    automated = true\n    target_cluster_name = \"MyCluster\"\n    target_project_id     = \"5cf5a45a9ccf6400e60981b6\"\n  }\n}\n\ndata \"mongodbatlas_cloud_provider_snapshot_restore_jobs\" \"test\" {\n  project_id     = mongodbatlas_cloud_provider_snapshot_restore_job.test.project_id\n  cluster_name = mongodbatlas_cloud_provider_snapshot_restore_job.test.cluster_name\n  page_num = 1\n  items_per_page = 5\n}\n```\n\n----------------------------------------\n\nTITLE: Update Terraform config advanced_configuration before 0.6.0\nDESCRIPTION: This snippet shows the Terraform configuration for `advanced_configuration` before version 0.6.0, using the assignment operator (=). The key change required is to remove this equals sign.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.6.0-upgrade-guide.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n     advanced_configuration = {\n     }\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Flex Restore Jobs - Terraform\nDESCRIPTION: This Terraform configuration defines a data source `mongodbatlas_flex_restore_jobs` to fetch all flex restore jobs for a given flex cluster. It requires the project ID and the name of the flex cluster. The output displays a list of restore job IDs from the results.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/flex_restore_jobs.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"mongodbatlas_flex_restore_jobs\" \"restore_jobs\" {\n  project_id = var.project_id\n  name       = mongodbatlas_flex_cluster.example-cluster.name\n}\n\noutput \"mongodbatlas_flex_restore_jobs\" {\n  value = [for restore_job in data.mongodbatlas_flex_restore_jobs.restore_jobs.results : restore_job.restore_job_id]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply with New Features (v3)\nDESCRIPTION: This snippet applies the Terraform configuration with the updated variables in `v3.tfvars`, which enable the latest `mongodbatlas_advanced_cluster` features, such as asymmetric sharding.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/migrate_cluster_to_advanced_cluster/module_user/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd v3\ncp ../v2/terraform.tfstate . # if you are not using a remote state\nexport MONGODB_ATLAS_PREVIEW_PROVIDER_V2_ADVANCED_CLUSTER=true # necessary for the `moved` block to work\nterraform init -upgrade # in case your Atlas Provider version needs to be upgraded\nterraform apply -var-file=../v3.tfvars # updated variables to enable latest mongodb_advanced_cluster features\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command (Bash)\nDESCRIPTION: This snippet shows the command to execute the Terraform plan. This command analyzes the Terraform configuration and shows the changes that will be applied to the infrastructure. This command requires Terraform to be installed and configured.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_push_based_log_export/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Destroying Terraform Resources\nDESCRIPTION: This snippet displays the command used to destroy the resources created by Terraform. Running `terraform destroy` removes all the resources that were provisioned by the Terraform configuration, preventing unnecessary charges. This should be done once the testing is complete.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-2/Readme.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Query Backup Compliance Policy Terraform\nDESCRIPTION: This Terraform configuration queries the existing Backup Compliance Policy using the `mongodbatlas_backup_compliance_policy` data source.  It relies on the `project_id` to identify the project for which the compliance policy needs to be retrieved.  The id parameter of the `mongodbatlas_cloud_backup_schedule` is used as the project_id.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/backup_compliance_policy.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_backup_compliance_policy\" \"backup_policy\" {\n  project_id = mongodbatlas_cloud_backup_schedule.test.id\n}\n\n```\n\n----------------------------------------\n\nTITLE: MSK Privatelink Resources\nDESCRIPTION: Defines resources for configuring an AWS MSK Privatelink setup, including VPC, subnets, security group, MSK cluster, cluster policy, scram secret association, MSK configuration, and the MongoDB Atlas stream privatelink endpoint.  It depends on the `aws` provider and the `mongodbatlas` provider, and uses variables such as `msk_cluster_name`, `aws_account_id`, `aws_secret_arn`, and `project_id`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/stream_privatelink_endpoints.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_vpc\" \"vpc\" {\n  cidr_block = \"192.168.0.0/22\"\n}\n\ndata \"aws_availability_zones\" \"azs\" {\n  state = \"available\"\n}\n\nresource \"aws_subnet\" \"subnet_az1\" {\n  availability_zone = data.aws_availability_zones.azs.names[0]\n  cidr_block        = \"192.168.0.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_subnet\" \"subnet_az2\" {\n  availability_zone = data.aws_availability_zones.azs.names[1]\n  cidr_block        = \"192.168.1.0/24\"\n  vpc_id            = aws_vpc.vpc.id\n}\n\nresource \"aws_security_group\" \"sg\" {\n  vpc_id = aws_vpc.vpc.id\n}\n\nresource \"aws_msk_cluster\" \"example\" {\n  cluster_name           = var.msk_cluster_name\n  kafka_version          = \"3.6.0\"\n  number_of_broker_nodes = 2\n\n  broker_node_group_info {\n    instance_type = \"kafka.m5.large\"\n    client_subnets = [\n      aws_subnet.subnet_az1.id,\n      aws_subnet.subnet_az2.id,\n    ]\n    security_groups = [aws_security_group.sg.id]\n\n    connectivity_info {\n      vpc_connectivity {\n        client_authentication {\n          sasl {\n            scram = true\n          }\n        }\n      }\n    }\n  }\n\n  client_authentication {\n    sasl {\n      scram = true\n    }\n  }\n\n  configuration_info {\n    arn      = aws_msk_configuration.example.arn\n    revision = aws_msk_configuration.example.latest_revision\n  }\n}\n\nresource \"aws_msk_cluster_policy\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n\n  policy = jsonencode({\n    Version = \"2012-10-17\",\n    Statement = [{\n      Effect = \"Allow\"\n      Principal = {\n        \"AWS\" = \"arn:aws:iam::${var.aws_account_id}:root\"\n      }\n      Action = [\n        \"kafka:CreateVpcConnection\",\n        \"kafka:GetBootstrapBrokers\",\n        \"kafka:DescribeCluster\",\n        \"kafka:DescribeClusterV2\"\n      ]\n      Resource = aws_msk_cluster.example.arn\n    }]\n  })\n}\n\nresource \"aws_msk_single_scram_secret_association\" \"example\" {\n  cluster_arn = aws_msk_cluster.example.arn\n  secret_arn  = var.aws_secret_arn\n}\n\nresource \"aws_msk_configuration\" \"example\" {\n  name = \"${var.msk_cluster_name}-msk-configuration\"\n\n  # Default ASW MSK configuration with \"allow.everyone.if.no.acl.found=false\" added\n  server_properties = <<PROPERTIES\nauto.create.topics.enable=false\ndefault.replication.factor=3\nmin.insync.replicas=2\nnum.io.threads=8\nnum.network.threads=5\nnum.partitions=1\nnum.replica.fetchers=2\nreplica.lag.time.max.ms=30000\nsocket.receive.buffer.bytes=102400\nsocket.request.max.bytes=104857600\nsocket.send.buffer.bytes=102400\nunclean.leader.election.enable=true\nallow.everyone.if.no.acl.found=false\nPROPERTIES\n}\n\nresource \"mongodbatlas_stream_privatelink_endpoint\" \"test\" {\n  project_id    = var.project_id\n  provider_name = \"AWS\"\n  vendor        = \"MSK\"\n  arn           = aws_msk_cluster.example.arn\n}\n\ndata \"mongodbatlas_stream_privatelink_endpoint\" \"singular_datasource\" {\n  project_id = var.project_id\n  id         = mongodbatlas_stream_privatelink_endpoint.test.id\n}\n\noutput \"privatelink_endpoint_id\" {\n  value = data.mongodbatlas_stream_privatelink_endpoint.singular_datasource.id\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Autoscaling Changes for Analytics Nodes\nDESCRIPTION: This Terraform code snippet shows how to use a lifecycle ignore customization to prevent Terraform from reverting changes to analytics node configurations due to Atlas autoscaling.  It specifically ignores changes to `disk_size_gb`, `instance_size`, and `disk_iops` for analytics nodes in a replica set to maintain the autoscaled values.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster.md#_snippet_20\n\nLANGUAGE: Terraform\nCODE:\n```\n// Example: ignore disk_size_gb and instance_size changes in a replica set\nlifecycle {\n  ignore_changes = [\n    replication_specs[0].region_configs[0].analytics_specs[0].disk_size_gb,\n    replication_specs[0].region_configs[0].analytics_specs[0].instance_size,\n    replication_specs[0].region_configs[0].analytics_specs[0].disk_iops // instance_size change can affect disk_iops in case that you are using it\n\n  ]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Plan\nDESCRIPTION: This snippet shows the command to execute the Terraform plan. This command allows the user to review the changes that will be made to the infrastructure before applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_network_peering/aws/Readme.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: `integration_id` Drift Detection Example - Terraform\nDESCRIPTION: This snippet shows an example of the drift detection issue caused by the `integration_id` attribute in the `mongodbatlas_alert_configuration` resource. The `integration_id` changes from a specific ID to null, resulting in a non-empty Terraform plan.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/troubleshooting.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n~ notification {\n          - integration_id  = \"xxxxxxxxxxxxxxxxxxxxxxxx\" -> null\n```\n\n----------------------------------------\n\nTITLE: Querying Org ID with Terraform Data Source\nDESCRIPTION: This Terraform configuration defines a data source to query the organization ID and outputs it. No parameters are required for the data source.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/roles_org_id.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_roles_org_id\" \"test\" {\n}\n\noutput \"org_id\" {\n\tvalue = data.mongodbatlas_roles_org_id.test.org_id\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Execution\nDESCRIPTION: This command executes the Terraform plan, showing the changes that will be made to the infrastructure. It requires Terraform to be installed and configured correctly with the necessary providers and credentials.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/gcp/Readme.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This snippet shows the command to destroy the infrastructure created by Terraform. This command removes all the resources defined in the configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_privatelink_endpoint/aws/cluster-geosharded/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: View Cloud-init Log\nDESCRIPTION: This command displays the content of the cloud-init log file. The log is examined for entries indicating the execution and output of the cloud-init script, specifically focusing on the result of `/var/lib/cloud/instance/scripts/part-002`.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_12\n\nLANGUAGE: Bash\nCODE:\n```\nsudo cat /var/log/cloud-init.log\n```\n\n----------------------------------------\n\nTITLE: Import Free Cluster (Post-Autoconversion)\nDESCRIPTION: This Terraform code snippet demonstrates how to import an existing Free cluster into Terraform management after automatic conversion from a Serverless instance. It uses the `import` block to associate the existing cluster (identified by its ID) with a `mongodbatlas_advanced_cluster` resource, allowing Terraform to manage the cluster without recreating it.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/serverless-shared-migration-guide.md#_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nimport {\n    to = mongodbatlas_advanced_cluster.this\n    id = \"664619d870c247237f4b86a6-freeClusterName\" # from step 1\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting MongoDB Atlas API Keys via Environment Variables\nDESCRIPTION: This snippet shows how to set MongoDB Atlas API keys using environment variables.  It is crucial for authenticating Terraform with MongoDB Atlas. Ensure keys are properly configured for successful Terraform operations. Note that this approach is generally discouraged in favor of more secure methods.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_organization/organization-step-2/Readme.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MONGODB_ATLAS_PUBLIC_KEY=\"<ATLAS_PUBLIC_KEY>\"\nexport MONGODB_ATLAS_PRIVATE_KEY=\"<ATLAS_PRIVATE_KEY>\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Command (Bash)\nDESCRIPTION: This command executes the Terraform plan to preview the changes that will be made to the infrastructure without applying them.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_cloud_provider_access/azure/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Provider Requirement - Terraform\nDESCRIPTION: This snippet defines the terraform provider requirements to work with MongoDB Atlas. The source is `mongodb/mongodbatlas` and a minimal `terraform` version is required.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_14\n\nLANGUAGE: terraform\nCODE:\n```\nterraform {\n  required_providers {\n    mongodbatlas = {\n      source = \"mongodb/mongodbatlas\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan (No Changes) - Private Endpoint - Bash\nDESCRIPTION: This command runs a Terraform plan to verify that no changes are detected after re-importing the private endpoint resources. A clean plan validates the successful upgrade and ensures that the Terraform state reflects the current infrastructure configuration.  The output also includes warnings about resource deprecation.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.9.1-upgrade-guide.md#_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nterraform plan\n\n(...)\n\n\nNo changes. Infrastructure is up-to-date.\n\nThis means that Terraform did not detect any differences between your\nconfiguration and real physical resources that exist. As a result, no\nactions need to be performed.\n\nWarning: this resource is deprecated, please transition as soon as possible to mongodbatlas_privatelink_endpoint\n\n  on main.tf line 12, in resource \"mongodbatlas_private_endpoint\" \"test\":\n  12: resource \"mongodbatlas_private_endpoint\" \"test\" {\n\n\n\nWarning: this resource is deprecated, please transition as soon as possible to mongodbatlas_privatelink_endpoint_service\n\n  on main.tf line 26, in resource \"mongodbatlas_private_endpoint_interface_link\" \"test\":\n  26: resource \"mongodbatlas_private_endpoint_interface_link\" \"test\" {\n\n```\n\n----------------------------------------\n\nTITLE: View Cloud-init Output Log\nDESCRIPTION: This command displays the complete output log of cloud-init, which includes detailed information about the initialization process. It is particularly useful for reviewing the overall progress and identifying any issues that occurred during the VM setup and configuration, including Python package installations and script executions.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_federated_settings_identity_provider/azure/README.md#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nsudo cat /var/log/cloud-init-output.log\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Configuration (example)\nDESCRIPTION: This snippet illustrates a path to the example Terraform configuration file for a resource or data source.  The `ExampleFile` field within the template provides the path to the `main.tf` file, allowing for the automatic inclusion of the example in the generated documentation. The file path is relative to the repository root.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/templates/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nexamples/{resource_name}/main.tf\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy Command\nDESCRIPTION: This command destroys the resources created by Terraform, preventing unnecessary Atlas charges after testing is complete.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/examples/mongodbatlas_advanced_cluster/auto-scaling-per-shard/README.md#_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Setting GCP Network Peering Environment Variables - Bash\nDESCRIPTION: This snippet shows how to set the environment variable for configuring Network Peering with GCP in MongoDB Atlas using the Terraform provider. It includes the GCP project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/contributing/development-setup.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$export GCP_PROJECT_ID=<GCP_PROJECT_ID>\n```\n\n----------------------------------------\n\nTITLE: Remove Resource from Terraform State Bash\nDESCRIPTION: This command removes the existing `mongodbatlas_cloud_provider_snapshot_backup_policy` resource from the Terraform state. This is a necessary step when migrating to the new `mongodbatlas_cloud_backup_schedule` resource to avoid conflicts.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/1.0.0-upgrade-guide.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform state rm mongodbatlas_cloud_provider_snapshot_backup_policy.test\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan Verification\nDESCRIPTION: This command verifies that there are no expected changes after importing the resources back into the state. This confirms that the state has been successfully synchronized with the actual resources in Atlas.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/guides/0.8.2-upgrade-guide.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform plan\n\n(...)\n\nNo changes. Infrastructure is up-to-date.\n\nThis means that Terraform did not detect any differences between your\nconfiguration and real physical resources that exist. As a result, no\nactions need to be performed.\n```\n\n----------------------------------------\n\nTITLE: Ignore Changes with Lifecycle Customization - Analytics Specs - Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to use lifecycle ignore customizations to prevent unintended changes when enabling auto-scaling for analytics nodes in MongoDB Atlas. By ignoring changes to `disk_size_gb`, `instance_size`, and `disk_iops` attributes, Terraform will not revert automatically scaled values back to the original configuration.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/resources/advanced_cluster (preview provider 2.0.0).md#_snippet_24\n\nLANGUAGE: Terraform\nCODE:\n```\n// Example: ignore disk_size_gb and instance_size changes in a replica set\nlifecycle {\n  ignore_changes = [\n    replication_specs[0].region_configs[0].analytics_specs.disk_size_gb,\n    replication_specs[0].region_configs[0].analytics_specs.instance_size,\n    replication_specs[0].region_configs[0].analytics_specs.disk_iops // instance_size change can affect disk_iops in case that you are using it\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Data Source: Retrieve All Resource Policies (Terraform)\nDESCRIPTION: Retrieves all `mongodbatlas_resource_policies` within an organization. The `depends_on` argument ensures that the resources are created before the policies are retrieved.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/resource_policy.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\ndata \"mongodbatlas_resource_policies\" \"this\" {\n  org_id = data.mongodbatlas_resource_policy.project_ip_access_list.org_id\n\n  depends_on = [mongodbatlas_resource_policy.project_ip_access_list, mongodbatlas_resource_policy.cloud_provider, mongodbatlas_resource_policy.cloud_region]\n}\n```\n\n----------------------------------------\n\nTITLE: Create Custom DB Role resource using Terraform\nDESCRIPTION: This example demonstrates how to create a `mongodbatlas_custom_db_role` resource using Terraform. It defines a custom role named 'myCustomRole' with 'UPDATE' and 'INSERT' actions on any database and all collections.  Requires a valid project ID.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/custom_db_role.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_custom_db_role\" \"test_role\" {\n  project_id = \"<PROJECT-ID>\"\n  role_name  = \"myCustomRole\"\n\n  actions {\n    action = \"UPDATE\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n  actions {\n    action = \"INSERT\"\n    resources {\n      collection_name = \"\"\n      database_name   = \"anyDatabase\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Querying IP Access List with IP Address in Terraform\nDESCRIPTION: This Terraform configuration creates a MongoDB Atlas project IP access list entry using a specific IP address and then retrieves the created entry using a data source.  It requires the `project_id` and `ip_address` attributes to be configured. The `comment` attribute adds a description to the access list entry. The data source fetches the access list based on the created resource's attributes.\nSOURCE: https://github.com/mongodb/terraform-provider-mongodbatlas/blob/master/docs/data-sources/project_ip_access_list.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"mongodbatlas_project_ip_access_list\" \"test\" {\n  project_id = \"<PROJECT-ID>\"\n  ip_address = \"2.3.4.5\"\n  comment    = \"ip address for tf acc testing\"\n}\n\ndata \"mongodbatlas_project_ip_access_list\" \"test\" {\n\tproject_id = mongodbatlas_project_ip_access_list.test.project_id\n\tip_address = mongodbatlas_project_ip_access_list.test.ip_address\n}\n```"
  }
]