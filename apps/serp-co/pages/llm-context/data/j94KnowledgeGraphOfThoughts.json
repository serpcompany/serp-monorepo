[
  {
    "owner": "j-94",
    "repo": "knowledge-graph-of-thoughts",
    "content": "TITLE: Installing Knowledge Graph of Thoughts (KGoT) in Python\nDESCRIPTION: Commands to clone the KGoT repository, install dependencies, and set up the Playwright browser automation tool.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/spcl/knowledge-graph-of-thoughts.git\ncd knowledge-graph-of-thoughts/\npip install -e .\nplaywright install\n```\n\n----------------------------------------\n\nTITLE: Evaluating KGoT on GAIA Dataset\nDESCRIPTION: Commands to run the evaluation script for KGoT on the GAIA dataset, with options to customize parameters such as log folder, controller type, and backend choice.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x ./run_multiple_gaia.sh # grant permission for logging etc.\n./run_multiple_gaia.sh          # perform the actual run with default parameters\n```\n\n----------------------------------------\n\nTITLE: Running Docker Instances for Neo4j and Python Code Tool\nDESCRIPTION: Commands to set up and run Docker containers for the Neo4j graph database and Python Code Tool, providing a secure execution environment for KGoT.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd docker_instances/\nchmod -R 777 neo4j_docker/snapshots # grant permission for snapshots logging\ndocker compose --env-file neo4j_docker/.env up\n```\n\n----------------------------------------\n\nTITLE: Using KGoT Command Line Interface for Single Task\nDESCRIPTION: Examples of using the KGoT command line interface to solve single tasks, demonstrating how to pass prompts and files as input.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkgot single -p \"What is a knowledge graph?\"\n\nkgot --db_choice neo4j --controller_choice directRetrieve single --p \"Could you summarize the content of these files for me?\" --files [path/to/file1] [path/to/file2]\n```\n\n----------------------------------------\n\nTITLE: Controller Configuration Parameters\nDESCRIPTION: Core configuration parameters that control the KGoT system's behavior including retry limits and decision thresholds. These parameters can be customized or used with default values defined in Controller classes.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/controller/README.md#2025-04-18_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nnum_next_steps_decision: Number of times to prompt an LLM on how to proceed (SOLVE/ENHANCE)\nmax_retrieve_query_retry: Maximum retries for a SOLVE query when the initial attempt fails\nmax_cypher_fixing_retry: Maximum retries for fixing a Cypher query that encounter errors\nmax_final_solution_parsing: Maximum retries of parsing the final solution from the output of the SOLVE query\nmax_tool_retries: Maximum number of retries when a tool invocation fails\n```\n\n----------------------------------------\n\nTITLE: Running GAIA Evaluation with KGoT from Root Directory\nDESCRIPTION: Basic command to evaluate KGoT on the GAIA dataset. Requires specifying a log folder and the path to the GAIA dataset file.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 GAIA/gaia.py --log_folder_base log --gaia_file [path_to_json]\n```\n\n----------------------------------------\n\nTITLE: GAIA Command-Line Interface Usage Example\nDESCRIPTION: Full command-line help documentation showing all available options for configuring KGoT evaluations on the GAIA benchmark, including database settings, LLM parameters, and retry limitations.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython3 GAIA/gaia.py --help\nusage: gaia.py [-h] --log_folder_base LOG_FOLDER_BASE --gaia_file GAIA_FILE\n               [--attachment_folder ATTACHMENT_FOLDER] [--config_llm_path CONFIG_LLM_PATH]\n               [--logger_level LOGGER_LEVEL] [--logger_file_mode LOGGER_FILE_MODE]\n               [--neo4j_uri NEO4J_URI] [--neo4j_username NEO4J_USERNAME]\n               [--neo4j_password NEO4J_PASSWORD] [--python_executor_uri PYTHON_EXECUTOR_URI]\n               [--max_iterations MAX_ITERATIONS]\n               [--num_next_steps_decision NUM_NEXT_STEPS_DECISION]\n               [--max_retrieve_query_retry MAX_RETRIEVE_QUERY_RETRY]\n               [--max_cypher_fixing_retry MAX_CYPHER_FIXING_RETRY]\n               [--max_final_solution_parsing MAX_FINAL_SOLUTION_PARSING]\n               [--max_tool_retries MAX_TOOL_RETRIES] [--max_llm_retries MAX_LLM_RETRIES]\n               [--llm_planning_model LLM_PLANNING_MODEL]\n               [--llm_planning_temperature LLM_PLANNING_TEMPERATURE]\n               [--llm_execution_model LLM_EXECUTION_MODEL]\n               [--llm_execution_temperature LLM_EXECUTION_TEMPERATURE]\n               [--controller_choice CONTROLLER_CHOICE] [--db_choice DB_CHOICE]\n               [--tool_choice TOOL_CHOICE] [--zero_shot]\n\nRun GAIA processing with customized paths.\n\noptions:\n  -h, --help            show this help message and exit\n  --log_folder_base LOG_FOLDER_BASE\n                        Base folder for logging results\n  --gaia_file GAIA_FILE\n                        Path to GAIA JSON file\n  --attachment_folder ATTACHMENT_FOLDER\n                        Path to GAIA problems attachments folder\n  --config_llm_path CONFIG_LLM_PATH\n                        Path to LLM configuration file\n  --logger_level LOGGER_LEVEL\n                        Logging level\n  --logger_file_mode LOGGER_FILE_MODE\n                        Log file mode\n  --neo4j_uri NEO4J_URI\n                        Docker URI for Neo4j\n  --neo4j_username NEO4J_USERNAME\n                        Neo4j username\n  --neo4j_password NEO4J_PASSWORD\n                        Neo4j password\n  --python_executor_uri PYTHON_EXECUTOR_URI\n                        URI for Python tool executor\n  --max_iterations MAX_ITERATIONS\n                        Max iterations for KGoT\n  --num_next_steps_decision NUM_NEXT_STEPS_DECISION\n                        Number of next steps decision\n  --max_retrieve_query_retry MAX_RETRIEVE_QUERY_RETRY\n                        Max retries for retrieve query\n  --max_cypher_fixing_retry MAX_CYPHER_FIXING_RETRY\n                        Max retries for Cypher fixing\n  --max_final_solution_parsing MAX_FINAL_SOLUTION_PARSING\n                        Max retries for final solution parsing\n  --max_tool_retries MAX_TOOL_RETRIES\n                        Max retries for tools\n  --max_llm_retries MAX_LLM_RETRIES\n                        Max retries for LLM\n  --llm_planning_model LLM_PLANNING_MODEL\n                        LLM planning model\n  --llm_planning_temperature LLM_PLANNING_TEMPERATURE\n                        LLM planning temperature\n  --llm_execution_model LLM_EXECUTION_MODEL\n                        LLM execution model\n  --llm_execution_temperature LLM_EXECUTION_TEMPERATURE\n                        LLM execution temperature\n  --controller_choice CONTROLLER_CHOICE\n                        Controller choice\n  --db_choice DB_CHOICE\n                        Database choice\n  --tool_choice TOOL_CHOICE\n                        Tool choice\n  --zero_shot           Use zero-shot mode\n```\n\n----------------------------------------\n\nTITLE: Running Multiple GAIA Subset Evaluations\nDESCRIPTION: Command to execute a bash script that automates running evaluations on multiple GAIA dataset subsets. Results are stored in designated log folders.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./run_multiple_gaia.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing ToolManager in Python for KGoT Framework\nDESCRIPTION: This snippet demonstrates how to initialize the ToolManager object, which is responsible for managing the list of available tools in the KGoT framework. It requires usage statistics and accepts an optional configuration file path.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/tools/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntool_manager = ToolManager(\n    usage_statistics,\n    base_config_path=\"kgot/config_tools.json\"\n)\n```\n\n----------------------------------------\n\nTITLE: Solving GAIA Task with Python in NetworkX\nDESCRIPTION: A Python script generated by the LLM Graph Executor to solve Question 106 using the NetworkX graph. It retrieves URL construction details from the graph, processes array data, and simulates the execution of a sorting algorithm to calculate the final result.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/knowledge_graph/README.md#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Retrieve the base URL and indices to construct the final URL\nbase_url = self.G.nodes['A4']['base']\nindices = self.G.nodes['A4']['indices']\n\n# Retrieve the array content\narr = eval(self.G.nodes['A3']['content'])\n\n# Construct the URL using the specified indices\nconstructed_url = base_url + ''.join(arr[i] for i in indices)\n\n# The next step would be to compile and run the C++ code from the constructed URL, but since we cannot execute external code, we will simulate the sorting and summing process in Python.\n\n# Simulating the C++ code execution with the given array\nsorted_arr = sorted([35, 12, 8, 99, 21, 5])\nresult = sorted_arr[2] + sorted_arr[4]  # Sum of the third and fifth integers in the sorted list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Complete Graph State with Cypher in Neo4j\nDESCRIPTION: A Cypher query that exports all nodes and relationships from the Neo4j database, retrieving the complete knowledge graph state in a format suitable for further analysis. The query collects relationship types and properties along with source and target node information.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/knowledge_graph/README.md#2025-04-18_snippet_0\n\nLANGUAGE: cypher\nCODE:\n```\nMATCH (n)-[r]->(m)\nWITH type(r) as labels, collect({\n    properties: properties(r),\n    source: labels(n),\n    target: labels(m),\n    source_id: elementId(n),\n    target_id: elementId(m)\n}) as rels\nRETURN {labels: labels, rels: rels} AS groupedRels\n```\n\n----------------------------------------\n\nTITLE: Retrieving Writer Information with Cypher in Neo4j\nDESCRIPTION: A Cypher query used to solve Question 59 by finding a writer who was quoted for a specific WordOfTheDay entry on a particular date. This query demonstrates how Neo4j can efficiently retrieve specific relationship patterns.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/knowledge_graph/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nMATCH (w:Writer)-[:QUOTED_FOR]->(wod:WordOfTheDay {date: '2022-06-27'}) RETURN w.name AS writer_name\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose\nDESCRIPTION: Commands to start Neo4j and Python Docker containers using docker compose, with both standard and detached mode options.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n\n# detached version\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Images\nDESCRIPTION: Command to force rebuild Docker containers without using cache when modifications are made to the setup or mounted datasets.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose build --no-cache\n```\n\n----------------------------------------\n\nTITLE: Building and Running KGoT Docker Image using docker-compose\nDESCRIPTION: Command to build and run the KGoT Docker image by executing docker-compose in the kgot_docker directory. This starts all the required services defined in the docker-compose.yml file.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/kgot_docker/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up \n```\n\n----------------------------------------\n\nTITLE: Running Neo4j Docker Container with Docker Compose\nDESCRIPTION: This snippet shows how to run a Neo4j Docker container using Docker Compose. It demonstrates the command to start the container in detached mode, allowing it to run in the background.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/neo4j_docker/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd neo4j_docker\n\ndocker compose up -d \n# or\ndocker-compose up -d \n```\n\n----------------------------------------\n\nTITLE: Building and Running Python Docker Image with Docker Compose\nDESCRIPTION: This command builds and runs the Python Docker image using Docker Compose. It should be executed from within the 'python_docker' directory.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/python_docker/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Python Code Execution Request Structure\nDESCRIPTION: Defines the input JSON structure for the /run endpoint that specifies required Python packages and the code to execute.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/python_docker/files/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n   \"required_modules\": list[str], # List of packages to install.\n   \"code\": str # Python code to run.\n}\n```\n\n----------------------------------------\n\nTITLE: Python Code Execution Success Response\nDESCRIPTION: Defines the success response structure returned with status code 200 containing the execution output.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/python_docker/files/README.md#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"output\": str # Output of the code execution.\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure for Python API\nDESCRIPTION: Defines the JSON structure used for error responses from the API endpoints.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/python_docker/files/README.md#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"error\": str\n}\n```\n\n----------------------------------------\n\nTITLE: NetworkX Knowledge Graph State for Question 106\nDESCRIPTION: An example of the knowledge graph state in NetworkX after the second iteration of solving GAIA task question 106. It shows nodes with Function, Script, Array, and URL labels along with their properties and relationships between them.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/knowledge_graph/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# at iteration 2:\nExisting Nodes:\n Label: Function\n   [{id:A1, properties:{'name': 'image_inspector'}}, {id:call_X2CcPnp5acMUPAp1Qx3OTvKx, properties:{'name': 'image_inspector', 'args': {'question': 'What Python script is depicted in the attached image?', 'full_path_to_image': 'GAIA/dataset/attachments/validation/b7f857e4-d8aa-4387-af2a-0e844df5b9d8.png'}}}]\n Label: Script\n   [{id:A2, properties:{'description': 'Python script to construct a URL by combining a base URL with specific indices from an array'}}]\n Label: Array\n   [{id:A3, properties:{'content': \"['_alg', 'ghi', 'C++', 'jkl', 'tps', '/Q', 'pqr', 'stu', ':', '//', 'rose', 'vwx', 'yz1', '234', 'tta', '567', '890', 'cod', 'e.', 'or', 'g/', 'wiki', '/', 'ing', 'sort', 'abc' , 'or', 'it', 'hms', 'mno' , 'uic', 'ksort', '#', 'ht']\"}}]\n Label: URL\n   [{id:A4, properties:{'base': 'https://web.archive.org/web/20230609112831/', 'indices': [33, 4, 8, 9, 10, 14, 17, 18, 19, 20, 21, 22, 24, 23, 0, 26, 27, 28, 5, 30, 31, 32, 2]}}]\nExisting Relationships:\n Label: uses\n   [{source: {id: A1}, target: {id: A2}, properties: {}}]\n Label: contains\n   [{source: {id: A2}, target: {id: A3}, properties: {}}]\n Label: constructs\n   [{source: {id: A2}, target: {id: A4}, properties: {}}]\n Label: None\n   [{source: {id: call_X2CcPnp5acMUPAp1Qx3OTvKx}, target: {id: A2}, properties: {}}]\n```\n\n----------------------------------------\n\nTITLE: Neo4j Knowledge Graph State for Question 59\nDESCRIPTION: An example of the knowledge graph state in Neo4j after the first iteration of solving GAIA task question 59. It shows nodes with Writer, WordOfTheDay, and Quote labels along with their properties and relationships between them.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/knowledge_graph/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# at iteration 1:\nNodes:\n  Label: Writer\n    {neo4j_id:0, properties:{'name': 'Annie Levin'}}\n  Label: WordOfTheDay\n    {neo4j_id:1, properties:{'pronunciation': 'JING-goh-iz-im', 'definition': 'excessive patriotism or nationalism, particularly when marked by a belligerent foreign policy', 'counter': 1, 'origin': 'Russo-Turkish War of 1877-1878', 'word': 'jingoism', 'date': '2022-06-27'}}\n  Label: Quote\n    {neo4j_id:2, properties:{'text': 'War is bad for culture. Not least of all because it turns our cultural institutions into bastions of jingoism.', 'source': 'The New York Observer', 'date': '2022-03-07'}}\nRelationships:\n  Label: QUOTED_FOR\n    {source: {neo4j_id: 0, label: Writer}, target: {neo4j_id: 1, label: WordOfTheDay}, properties: {}}\n  Label: QUOTED_IN\n    {source: {neo4j_id: 0, label: Writer}, target: {neo4j_id: 2, label: Quote}, properties: {}}\n```\n\n----------------------------------------\n\nTITLE: Creating and Activating Virtual Environment for GAIA Dataset Script\nDESCRIPTION: Creates a Python virtual environment and activates it for running the GAIA dataset fetch script.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/dataset/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv venv\nsource venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for GAIA Dataset Script\nDESCRIPTION: Installs the required Python packages listed in requirements.txt file for the GAIA dataset fetch script.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/dataset/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hugging Face Token in .env File\nDESCRIPTION: Creates a .env file with the Hugging Face API token for accessing the GAIA dataset. Requires prior access request approval.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/dataset/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nHUGGINGFACE_TOKEN=your_token_here\n```\n\n----------------------------------------\n\nTITLE: Running GAIA Dataset Fetch Script\nDESCRIPTION: Executes the fetch_gaia_dataset.py script to download and process the GAIA dataset with optional arguments for specifying the dataset split and dummy dataset creation.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/dataset/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 ./fetch_gaia_dataset.py [--dataset <split>] [--dummy | --no_dummy]\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for Snapshot Visualization Tool\nDESCRIPTION: This snippet demonstrates how to start the Snapshot Visualization Tool using Docker Compose. It includes alternative commands for different Docker Compose versions and explains the use of the detach flag.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd visualization\n\ndocker compose up -d \n# or\ndocker-compose up -d \n```\n\n----------------------------------------\n\nTITLE: Running Development Server in Next.js Project\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. Running these commands will start a local development server that can be accessed at http://localhost:3000.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/frontend/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Python Package Dependencies\nDESCRIPTION: Core dependencies required for running a FastAPI application with Neo4j integration. Includes FastAPI framework, Neo4j driver, Pydantic for data validation, and Uvicorn ASGI server.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/backend/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nfastapi==0.95.1\nneo4j==5.20.0\npip==22.0.2\nsetuptools==59.6.0\nuvicorn==0.22.0\npydantic==1.10.7\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies\nDESCRIPTION: A plaintext list of Python packages required for the knowledge graph of thoughts project. The dependencies include Flask for web development, waitress for WSGI server, langchain_experimental for language processing capabilities, and requests for HTTP functionality.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/python_docker/files/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflask\nwaitress\nlangchain_experimental\nrequests\n```\n\n----------------------------------------\n\nTITLE: Defining Package Dependencies in a Requirements File\nDESCRIPTION: This snippet specifies the exact versions of Python packages required for the project. It includes huggingface_hub version 0.30.1 for interacting with Hugging Face models and python-dotenv version 1.1.0 for loading environment variables from .env files.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/GAIA/dataset/requirements.txt#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhuggingface_hub==0.30.1\npython-dotenv==1.1.0\n```\n\n----------------------------------------\n\nTITLE: Citation for Knowledge Graph of Thoughts (KGoT)\nDESCRIPTION: BibTeX citation for referencing the Knowledge Graph of Thoughts paper in academic work.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bibtex\nCODE:\n```\n@misc{besta2025kgot,\n  title = {{Affordable AI Assistants with Knowledge Graph of Thoughts}},\n  author = {Besta, Maciej and Paleari, Lorenzo and Hao, Jia and Jiang, Andrea and Gerstenberger, Robert and Wu, You and Iff, Patrick and Kubicek, Ales and Nyczyk, Piotr and Khimey, Diana and Hannesson, Jón Gunnar and Kwaśniewski, Grzegorz and Copik, Marcin and Niewiadomski, Hubert and Hoefler, Torsten},\n  year = 2025,\n  month = Apr,\n  doi = {10.48550/arXiv.2504.02670},\n  url = {http://arxiv.org/abs/2504.02670},\n  eprinttype = {arXiv},\n  eprint = {2504.02670}\n}\n```\n\n----------------------------------------\n\nTITLE: Checking File Permissions in Linux Bash\nDESCRIPTION: This snippet demonstrates how to check file permissions and ownership in a Linux environment using the 'ls -la' command. It's useful for determining the correct user and group IDs for Docker container setup.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd visualization/backend/db/\n\nls -la\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:12 .\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:12 ..\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:27 import\n```\n\n----------------------------------------\n\nTITLE: Modifying File Permissions and Ownership in Linux Bash\nDESCRIPTION: This snippet shows how to change file permissions and ownership in a Linux environment. It's used to ensure proper access rights for the Docker container, especially in shared folder setups.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd visualization\n\n# Allow everyone to have access\nchmod -R 777 backend/db/import \n# Change ownership of the folder\nchown -R [OWNER]:[GROUP] backend/db/import\n```\n\n----------------------------------------\n\nTITLE: Retrieving User and Group IDs in Linux Bash\nDESCRIPTION: This command retrieves the current user's UID and GID in a Linux environment. It's essential for setting up the correct user permissions in the Docker container.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/snapshots_visualization_tool/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nid\n# uid=1000([OWNER]) gid=1000([GROUP]) groups=1000([GROUP]),27(sudo),999(vboxsf)\n\n# Based on the setup we are going to use either 999 or 1000 if we changed ownership/permissions.\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents in Bash\nDESCRIPTION: This snippet demonstrates how to list directory contents with detailed information using the 'ls' command in Bash. It shows file permissions, ownership, and other metadata.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/neo4j_docker/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nls -la\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:12 .\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:12 ..\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:27 .env\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:27 README.md\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:27 docker-compose.yaml\n# drwxrwx---  3 root  vboxsf  96 Jun 25 17:27 snapshots\n```\n\n----------------------------------------\n\nTITLE: Changing File Permissions and Ownership in Bash\nDESCRIPTION: This snippet shows how to change file permissions and ownership using the 'chmod' and 'chown' commands in Bash. It demonstrates granting full access to all users and changing the owner and group of a directory.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/neo4j_docker/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd neo4j_docker\n\n# Allow everyone to have access\nchmod -R 777 snapshots \n# Change ownership of the folder\nchown -R [OWNER]:[GROUP] snapshots\n```\n\n----------------------------------------\n\nTITLE: Retrieving User and Group IDs in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve user and group IDs using the 'id' command in Bash. It displays the UID, GID, and group memberships for the current user.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/docker_instances/neo4j_docker/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nid\n# uid=1000([OWNER]) gid=1000([GROUP]) groups=1000([GROUP]),27(sudo),999(vboxsf)\n\n# Based on the setup we are going to use either 999 or 1000 if we changed ownership/permissions.\n```\n\n----------------------------------------\n\nTITLE: Referencing JSON Configuration File in Markdown\nDESCRIPTION: This snippet demonstrates how to reference a JSON file in Markdown syntax. The file is intended for supplying API keys and configuration parameters to tools, though it's not required for the current version.\nSOURCE: https://github.com/j-94/knowledge-graph-of-thoughts/blob/main/kgot/tools/tools_v2_3/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[JSON file](additional_config_tools.json)\n```"
  }
]