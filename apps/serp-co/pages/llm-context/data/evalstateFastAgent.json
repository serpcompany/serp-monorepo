[
  {
    "owner": "evalstate",
    "repo": "fast-agent",
    "content": "TITLE: Defining a Basic Agent with @fast.agent\nDESCRIPTION: This code snippet shows how to define a basic agent using the `@fast.agent` decorator.  The `instruction` parameter defines the agent's behavior.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\n  instruction=\"Given an object, respond only with an estimate of its size.\"\n)\n```\n\n----------------------------------------\n\nTITLE: Installing fast-agent with uv\nDESCRIPTION: This snippet demonstrates how to install the fast-agent-mcp package using the uv package manager, create example agent and configuration files, and run a simple agent.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv pip install fast-agent-mcp       # install fast-agent!\n\nfast-agent setup                    # create an example agent and config files\nuv run agent.py                     # run your first agent\nuv run agent.py --model=o3-mini.low # specify a model\nfast-agent quickstart workflow       # create \"building effective agents\" examples\n```\n\n----------------------------------------\n\nTITLE: Complete sizer.py Agent Application\nDESCRIPTION: This is a complete example of an agent application, including imports, agent definition, and asynchronous execution. It showcases how to structure a simple agent using the `FastAgent` class and `asyncio`.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcp_agent.core.fastagent import FastAgent\n\n# Create the application\nfast = FastAgent(\"Agent Example\")\n\n@fast.agent(\n  instruction=\"Given an object, respond only with an estimate of its size.\"\n)\nasync def main():\n  async with fast.run() as agent:\n    await agent.interactive()\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Running an Agent with fast.run()\nDESCRIPTION: This snippet shows how to send messages to an agent and start an interactive chat session using `fast.run()`. It demonstrates asynchronous interaction with the agent.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nasync with fast.run() as agent:\n  moon_size = await agent(\"the moon\")\n  print(moon_size)\n```\n\nLANGUAGE: python\nCODE:\n```\nasync with fast.run() as agent:\n  await agent.interactive()\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Agent with fast.agent decorator\nDESCRIPTION: This code snippet shows how to define a basic agent using the `@fast.agent` decorator. It configures the agent's name, instruction, servers, model, use of history, request parameters (temperature), and human input capability. It uses the RequestParams class to configure temperature. The agent maintains chat history and can request human input.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\n  name=\"agent\",                          # name of the agent\n  instruction=\"You are a helpful Agent\", # base instruction for the agent\n  servers=[\"filesystem\"],                # list of MCP Servers for the agent\n  model=\"o3-mini.high\",                  # specify a model for the agent\n  use_history=True,                      # agent maintains chat history\n  request_params=RequestParams(temperature= 0.7)), # additional parameters for the LLM (or RequestParams())\n  human_input=True,                      # agent can request human input\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Chain Workflow with @fast.chain\nDESCRIPTION: This example shows how to define a chain workflow using `@fast.chain` and how to prompt it directly. It also demonstrates how the last agent in the chain enters a chat session after the chain completes.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n@fast.chain(\n  \"post_writer\",\n   sequence=[\"url_fetcher\",\"social_media\"]\n)\n\n# we can them prompt it directly:\nasync with fast.run() as agent:\n  await agent.post_writer()\n```\n\n----------------------------------------\n\nTITLE: Calling Agents with fast.agent decorator\nDESCRIPTION: This code demonstrates how to define and call agents using the `@fast.agent` decorator.  It shows how to create agents with or without names and instructions. It then shows how to call the default agent or a named agent using dot notation or dictionary access.  Chat sessions can be started with no initial message using the prompt function.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\"You are a helpful agent\")          # Create an agent with a default name.\n@fast.agent(\"greeter\",\"Respond cheerfully!\")    # Create an agent with the name \"greeter\"\n\nmoon_size = await agent(\"the moon\")             # Call the default (first defined agent) with a message\n\nresult = await agent.greeter(\"Good morning!\")   # Send a message to an agent by name using dot notation\nresult = await agent.greeter.send(\"Hello!\")     # You can call 'send' explicitly\n\nawait agent.greeter()                           # If no message is specified, a chat session will open\nawait agent.greeter.prompt()                    # that can be made more explicit\nawait agent.greeter.prompt(default_prompt=\"OK\") # and supports setting a default prompt\n\nagent[\"greeter\"].send(\"Good Evening!\")          # Dictionary access is supported if preferred\n```\n\n----------------------------------------\n\nTITLE: Chaining Agents with @fast.agent and @fast.chain\nDESCRIPTION: This snippet demonstrates how to chain multiple agents together to create a workflow using `@fast.agent` and `@fast.chain`. It includes specifying MCP servers and defining the execution sequence.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\n    \"url_fetcher\",\n    \"Given a URL, provide a complete and comprehensive summary\",\n    servers=[\"fetch\"], # Name of an MCP Server defined in fastagent.config.yaml\n)\n@fast.agent(\n    \"social_media\",\n    \"\"\"\n    Write a 280 character social media post for any given text.\n    Respond only with the post, never use hashtags.\n    \"\"\",\n)\n@fast.chain(\n    name=\"post_writer\",\n    sequence=[\"url_fetcher\", \"social_media\"],\n)\nasync def main():\n    async with fast.run() as agent:\n        # using chain workflow\n        await agent.post_writer(\"http://llmindset.co.uk\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Chain Workflow with fast.chain decorator\nDESCRIPTION: This code demonstrates defining a chain workflow using the `@fast.chain` decorator. It specifies the name of the chain, the sequence of agents to execute, an instruction for the chain, whether to accumulate messages through the chain, and whether to open a chat with an agent at the end of the chain after prompting.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n@fast.chain(\n  name=\"chain\",                          # name of the chain\n  sequence=[\"agent1\", \"agent2\", ...],    # list of agents in execution order\n  instruction=\"instruction\",             # instruction to describe the chain for other workflows\n  cumulative=False                       # whether to accumulate messages through the chain\n  continue_with_final=True,              # open chat with agent at end of chain after prompting\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Router Workflow with @fast.router\nDESCRIPTION: This snippet showcases defining a router workflow using the `@fast.router` decorator.  It automatically routes messages to the most suitable agent based on the provided agents list and their instructions.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n@fast.router(\n  name=\"route\"\n  agents[\"agent1\",\"agent2\",\"agent3\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Evaluator-Optimizer Workflow with fast.evaluator_optimizer\nDESCRIPTION: This code defines an evaluator-optimizer workflow using the `@fast.evaluator_optimizer` decorator. It sets the workflow's name, generator agent, evaluator agent, minimum acceptable quality, and maximum number of refinement iterations.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n@fast.evaluator_optimizer(\n  name=\"researcher\",                     # name of the workflow\n  generator=\"web_searcher\",              # name of the content generator agent\n  evaluator=\"quality_assurance\",         # name of the evaluator agent\n  min_rating=\"GOOD\",                     # minimum acceptable quality (EXCELLENT, GOOD, FAIR, POOR)\n  max_refinements=3,                     # maximum number of refinement iterations\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Orchestrator Agent with fast.orchestrator decorator\nDESCRIPTION: This code demonstrates defining an orchestrator agent using the `@fast.orchestrator` decorator. It configures the orchestrator's name, instruction, agents, planning model, history usage (which has no effect), human input ability, planning approach (full or iterative), and maximum iterations.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n@fast.orchestrator(\n  name=\"orchestrator\",                   # name of the orchestrator\n  instruction=\"instruction\",             # base instruction for the orchestrator\n  agents=[\"agent1\", \"agent2\"],           # list of agent names this orchestrator can use\n  model=\"o3-mini.high\",                  # specify orchestrator planning model\n  use_history=False,                     # orchestrator doesn't maintain chat history (no effect).\n  human_input=False,                     # whether orchestrator can request human input\n  plan_type=\"full\",                      # planning approach: \"full\" or \"iterative\"\n  max_iterations=5,                      # maximum number of full plan attempts, or iterations\n)\n```\n\n----------------------------------------\n\nTITLE: Defining an Orchestrator Workflow with @fast.orchestrator\nDESCRIPTION: This snippet demonstrates creating an orchestrator workflow using the `@fast.orchestrator` decorator. It divides complex tasks among available agents using a plan generated by an LLM.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n@fast.orchestrator(\n  name=\"orchestrate\"\n  agents=[\"task1\",\"task2\",\"task3\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Router Agent with fast.router decorator\nDESCRIPTION: This code shows how to define a router agent using the `@fast.router` decorator. The configuration includes the name of the router, the list of agents it can delegate to, the routing model, whether to maintain conversation history, and whether the router can request human input.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n@fast.router(\n  name=\"route\",                          # name of the router\n  agents=[\"agent1\", \"agent2\", \"agent3\"], # list of agent names router can delegate to\n  model=\"o3-mini.high\",                  # specify routing model\n  use_history=False,                     # router maintains conversation history\n  human_input=False,                     # whether router can request human input\n)\n```\n\n----------------------------------------\n\nTITLE: Defining a Parallel Workflow with @fast.parallel\nDESCRIPTION: This snippet demonstrates how to define a parallel workflow using `@fast.parallel`, sending messages to multiple agents simultaneously. It shows the `fan_out` parameter for specifying agents and mentions the use of a `fan-in` agent to process combined results.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\"translate_fr\", \"Translate the text to French\")\n@fast.agent(\"translate_de\", \"Translate the text to German\")\n@fast.agent(\"translate_es\", \"Translate the text to Spanish\")\n\n@fast.parallel(\n  name=\"translate\",\n  fan_out=[\"translate_fr\",\"translate_de\",\"translate_es\"]\n)\n\n@fast.chain(\n  \"post_writer\",\n   sequence=[\"url_fetcher\",\"social_media\",\"translate\"]\n)\n```\n\n----------------------------------------\n\nTITLE: Requesting Human Input with human_input=True\nDESCRIPTION: This snippet shows how to configure an agent to request human input using the `human_input=True` parameter. The agent will prompt the user for additional information during task completion.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n@fast.agent(\n    instruction=\"An AI agent that assists with basic tasks. Request Human Input when needed.\",\n    human_input=True,\n)\n\nawait agent(\"print the next number in the sequence\")\n```\n\n----------------------------------------\n\nTITLE: Defining an Evaluator-Optimizer Workflow with @fast.evaluator_optimizer\nDESCRIPTION: This snippet demonstrates how to create an evaluator-optimizer workflow using `@fast.evaluator_optimizer`. It includes setting the generator, evaluator, minimum rating, and maximum refinements.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n@fast.evaluator_optimizer(\n  name=\"researcher\"\n  generator=\"web_searcher\"\n  evaluator=\"quality_assurance\"\n  min_rating=\"EXCELLENT\"\n  max_refinements=3\n)\n\nasync with fast.run() as agent:\n  await agent.researcher.send(\"produce a report on how to make the perfect espresso\")\n```\n\n----------------------------------------\n\nTITLE: Defining a Parallel Workflow with fast.parallel decorator\nDESCRIPTION: This code demonstrates defining a parallel workflow using the `@fast.parallel` decorator.  It configures the workflow's name, the agents to run in parallel (`fan_out`), an optional aggregator agent (`fan_in`), an instruction describing the workflow, and whether to include the original request in the fan-in message.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n@fast.parallel(\n  name=\"parallel\",                       # name of the parallel workflow\n  fan_out=[\"agent1\", \"agent2\"],          # list of agents to run in parallel\n  fan_in=\"aggregator\",                   # name of agent that combines results (optional)\n  instruction=\"instruction\",             # instruction to describe the parallel for other workflows\n  include_request=True,                  # include original request in fan-in message\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Resources to Prompts using agent.with_resource\nDESCRIPTION: This code snippet demonstrates how to add resources to prompts using the `agent.with_resource` method. It shows how to specify a message, the MCP server, and the resource URL. The agent summarizes the PDF specified by the resource URL.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nsummary: str =  await agent.with_resource(\n      \"Summarise this PDF please\",\n      \"mcp_server\",\n      \"resource://fast-agent/sample.pdf\",\n  )\n```\n\n----------------------------------------\n\nTITLE: Running a Chained Agent Workflow\nDESCRIPTION: This snippet demonstrates how to execute a chained agent workflow from the command line, specifying the agent and message.  The `--quiet` switch disables progress and message display.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run workflow/chaining.py --agent post_writer --message \"<url>\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampling LLMs in fastagent.config.yaml\nDESCRIPTION: This YAML code snippet demonstrates how to configure sampling LLMs on a per-client/server pair basis within the `fastagent.config.yaml` file. It specifies the command, arguments, and sampling model for a particular server.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/README.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nmcp:\n  servers:\n    sampling_resource:\n      command: \"uv\"\n      args: [\"run\", \"sampling_resource_server.py\"]\n      sampling:\n        model: \"haiku\"\n```\n\n----------------------------------------\n\nTITLE: Querying Moon Size Data\nDESCRIPTION: A structured response providing the size of the Moon in a standardized format, including its diameter in kilometers and classification as a satellite.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/sizing.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOBJECT: MOON\nSIZE: 3,474.8\nUNITS: KM\nTYPE: SATELLITE\n```\n\n----------------------------------------\n\nTITLE: Querying Earth Size Data\nDESCRIPTION: A structured response providing the size of Earth in a standardized format, including its diameter in kilometers and classification as a planet.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/sizing.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nOBJECT: EARTH\nSIZE: 12,742\nUNITS: KM\nTYPE: PLANET\n```\n\n----------------------------------------\n\nTITLE: Querying Tiger Size Data\nDESCRIPTION: A structured response providing the size of a tiger in a standardized format, including its average height in meters and classification as an animal.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/sizing.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOBJECT: TIGER\nSIZE: 1.2\nUNITS: M\nTYPE: ANIMAL\n```\n\n----------------------------------------\n\nTITLE: Using the `basic_memory-project_info` tool\nDESCRIPTION: This snippet shows how the agent uses the `basic_memory-project_info` tool to get the project's information. The tool is called with an empty input.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/persist.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{'type': 'tool_use', 'name': 'basic_memory-project_info', 'input': {}, 'id': 'toolu_01LyNZ48ryLEt8Nn1WQt5b45'}\n```\n\n----------------------------------------\n\nTITLE: Response from `basic_memory-project_info`\nDESCRIPTION: This is the JSON response from the `basic_memory-project_info` tool. It includes project name, project path, available projects, statistics, recent activity and system information.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/persist.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{'type': 'tool_result', 'tool_use_id': 'toolu_01LyNZ48ryLEt8Nn1WQt5b45', 'content': [TextContent(type='text', text='{\"project_name\": \"main\", \"project_path\": \"/home/ssmith/basic-memory\", \"available_projects\": {\"main\": \"/home/ssmith/basic-memory\"}, \"default_project\": \"main\", \"statistics\": {\"total_entities\": 4, \"total_observations\": 3, \"total_relations\": 0, \"total_unresolved_relations\": 0, \"entity_types\": {\"note\": 4}, \"observation_categories\": {\"note\": 3}, \"relation_types\": {}, \"most_connected_entities\": [], \"isolated_entities\": 4}, \"activity\": {\"recently_created\": [{\"id\": 4, \"title\": \"Monochrome CSS\", \"permalink\": \"notes/monochrome-css\", \"entity_type\": \"note\", \"created_at\": \"2025-03-15 20:33:26.644923\"}, {\"id\": 3, \"title\": \"sample.css\", \"permalink\": \"styles/sample-css\", \"entity_type\": \"note\", \"created_at\": \"2025-03-15 20:33:20.008125\"}, {\"id\": 2, \"title\": \"AeroPress: A Guide to Versatile Coffee Brewing\", \"permalink\": \"coffee-guides/aero-press-a-guide-to-versatile-coffee-brewing\", \"entity_type\": \"note\", \"created_at\": \"2025-03-15 18:44:44.821574\"}, {\"id\": 1, \"title\": \"The Art and Science of Brewing Coffee\", \"permalink\": \"coffee/the-art-and-science-of-brewing-coffee\", \"entity_type\": \"note\", \"created_at\": \"2025-03-15 18:31:36.136678\"}], \"recently_updated\": [{\"id\": 4, \"title\": \"Monochrome CSS\", \"permalink\": \"notes/monochrome-css\", \"entity_type\": \"note\", \"updated_at\": \"2025-03-15 20:33:26.644923\"}, {\"id\": 3, \"title\": \"sample.css\", \"permalink\": \"styles/sample-css\", \"entity_type\": \"note\", \"updated_at\": \"2025-03-15 20:33:20.008125\"}, {\"id\": 2, \"title\": \"AeroPress: A Guide to Versatile Coffee Brewing\", \"permalink\": \"coffee-guides/aero-press-a-guide-to-versatile-coffee-brewing\", \"entity_type\": \"note\", \"updated_at\": \"2025-03-15 18:44:44.821574\"}, {\"id\": 1, \"title\": \"The Art and Science of Brewing Coffee\", \"permalink\": \"coffee/the-art-and-science-of-brewing-coffee\", \"entity_type\": \"note\", \"updated_at\": \"2025-03-15 18:31:36.136678\"}], \"monthly_growth\": {\"2025-03\": {\"entities\": 4, \"observations\": 3, \"relations\": 0, \"total\": 7}}}, \"system\": {\"version\": \"0.9.0\", \"database_path\": \"/home/ssmith/basic-memory/.basic-memory/memory.db\", \"database_size\": \"0.16 MB\", \"watch_status\": null, \"timestamp\": \"2025-03-15T22:32:32.589891\"}}')] , 'is_error': False}\n```\n\n----------------------------------------\n\nTITLE: Using the `basic_memory-recent_activity` tool\nDESCRIPTION: This snippet demonstrates the agent calling the `basic_memory-recent_activity` tool, with no input parameters. This retrieves information about the recent activities within the memory system.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/persist.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{'type': 'tool_use', 'name': 'basic_memory-recent_activity', 'input': {}, 'id': 'toolu_01FhrwofF24WCEMN785qgnoJ'}\n```\n\n----------------------------------------\n\nTITLE: Response from `basic_memory-recent_activity` tool\nDESCRIPTION: This is the JSON response from the `basic_memory-recent_activity` tool. The response contains recently created entities and observations including content and metadata.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/persist.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{'type': 'tool_result', 'tool_use_id': 'toolu_01FhrwofF24WCEMN785qgnoJ', 'content': [TextContent(type='text', text='{\"primary_results\": [{\"type\": \"entity\", \"permalink\": \"notes/monochrome-css\", \"title\": \"Monochrome CSS\", \"content\": \"I\\'ve updated the CSS file to use #000000 for all color variables. The file has been saved as \\'sample.css\\' in the \\'styles\\' folder.\", \"file_path\": \"notes/Monochrome CSS.md\", \"created_at\": \"2025-03-15T20:33:26.644923\"}, {\"type\": \"observation\", \"title\": \"note: I\\'ve updated the CSS file to use #000000 for all color variables. The file has been saved as \\'sample...\", \"file_path\": \"notes/Monochrome CSS.md\", \"permalink\": \"notes/monochrome-css/observations/note/i-ve-updated-the-css-file-to-use-000000-for-all-color-variables-the-file-has-been-saved-as-sample-css-in-the-styles-folder\", \"category\": \"note\", \"content\": \"I\\'ve updated the CSS file to use #000000 for all color variables. The file has been saved as \\'sample.css\\' in the \\'styles\\' folder.\", \"created_at\": \"2025-03-15T20:33:26.644923\"}, {\"type\": \"entity\", \"permalink\": \"coffee-guides/aero-press-a-guide-to-versatile-coffee-brewing\", \"title\": \"AeroPress: A Guide to Versatile Coffee Brewing\", \"content\": \"## What is an AeroPress?\\n- Invented by Alan Adler in 2005, the AeroPress is a manual coffee-making device that combines pressure and immersion methods to brew coffee.\\n- Made of BPA-free plastic, consisting of two main parts: the chamber and the plung\", \"file_path\": \"Coffee Guides/AeroPress: A Guide to Versatile Coffee Brewing.md\", \"created_at\": \"2025-03-15T18:44:44.821574\"}, {\"type\": \"entity\", \"permalink\": \"coffee/the-art-and-science-of-brewing-coffee\", \"title\": \"The Art and Science of Brewing Coffee\", \"content\": \"# The Art and Science of Brewing Coffee\\n\\nBrewing coffee is a delicate balance of variables that affect extraction and flavor. This note covers the fundamentals of brewing excellent coffee at home.\\n\\n## Brewing Methods\\n\\n### Pour-Over (V60, Chemex, Kali\", \"file_path\": \"Coffee/The Art and Science of Brewing Coffee.md\", \"created_at\": \"2025-03-15T18:31:36.136678\"}], \"related_results\": [], \"metadata\": {\"uri\": null, \"types\": [\"entity\", \"relation\", \"observation\"], \"depth\": 1, \"timeframe\": \"2025-03-08T22:32:42.109832\", \"generated_at\": \"2025-03-15T22:32:42.129314Z\", \"total_results\": 4, \"total_relations\": 0}, \"page\": 1, \"page_size\": 10}')] , 'is_error': False}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in Text\nDESCRIPTION: Demonstrates basic template variable syntax using double curly braces for product and company placeholders.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/integration/prompt-server/simple_sub.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nthis is {{product}} by {{company}}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in User Message\nDESCRIPTION: A user message containing a placeholder variable {{user_name}} that would be replaced with actual user name during processing.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/integration/prompt-server/multi_sub.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nhello, my name is {{user_name}}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in Assistant Response\nDESCRIPTION: An assistant response containing a placeholder variable {{assistant_name}} that would be replaced with the actual assistant name during processing.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/integration/prompt-server/multi_sub.txt#2025-04-22_snippet_1\n\nLANGUAGE: plain text\nCODE:\n```\nnice to meet you. i am {{assistant_name}}\n```\n\n----------------------------------------\n\nTITLE: Echoing Template Variable in Plaintext\nDESCRIPTION: A directive to repeat the content of the template variable 'name' verbatim. This uses double curly braces as delimiters to indicate template substitution.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/e2e/prompts-resources/simple.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{name}}\n```\n\n----------------------------------------\n\nTITLE: Agent Routing Response for Target1\nDESCRIPTION: JSON response format for routing to target1 agent with high confidence. The response includes the target agent identifier, confidence level, and reasoning behind the routing decision.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/integration/workflow/router/router_script.txt#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{     \n    \"agent\": \"target1\", \n    \"confidence\": \"high\",\n    \"reasoning\": \"Request is asking for weather information\"                                                \n}\n```\n\n----------------------------------------\n\nTITLE: Agent Routing Response for Target2\nDESCRIPTION: JSON response format for routing to target2 agent with high confidence. The response includes the target agent identifier, confidence level, and reasoning behind the routing decision.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/integration/workflow/router/router_script.txt#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{     \n    \"agent\": \"target2\", \n    \"confidence\": \"high\",\n    \"reasoning\": \"Request is asking for weather information\"                                                \n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Content - Editorial Report Structure\nDESCRIPTION: Structured markdown document containing spelling corrections, grammar feedback, and style recommendations for a children's story manuscript.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/workflows/graded_report.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Graded Report: \"The Kittens Castle Adventure\"\n\n## Proofreading Feedback\n\n### Spelling Errors\n1. \"Adventuer\" → \"Adventure\"\n2. \"lil\" → \"little\"\n[...]\n\n### Grammar and Syntax Errors\n1. Inconsistent verb tenses throughout the story\n2. Improper use of articles (a/an)\n[...]\n\n### Style and Formatting Recommendations\n1. Use standard capitalization for proper nouns\n2. Maintain consistent verb tense (past tense recommended)\n[...]\n```\n\n----------------------------------------\n\nTITLE: Generating Structured Documentation for Code Snippets in JSON Format\nDESCRIPTION: This specification details the required JSON schema and approach for generating structured documentation of code snippets within text. It includes requirements for page-level analysis, snippet analysis, and formatting guidelines.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/testingagain.md#2025-04-22_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"page_title\": \"string\",      \n  \"page_description\": \"string\",    \n  \"page_summary\": \"string\",    \n  \"languages\": [\"string\"],\n  \"codeSnippets\": [\n    {\n      \"title\": \"string\",         \n      \"description\": \"string\",   \n      \"language\": \"string\",   \n      \"codeList\": [{\n          \"language\": \"string\",\n          \"code\": \"string\"\n      }]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Non-English Content in JSON Format\nDESCRIPTION: This code snippet shows the JSON structure to return when the input content is not in English. It's a simple error object that indicates the issue without processing the content.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/src/mcp_agent/resources/examples/prompting/testingagain.md#2025-04-22_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"error\": \"non-english-content\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating New Log File for Test Fixtures in Bash\nDESCRIPTION: Commands for generating a new log file to be used as a test fixture. This includes navigating to the example directory, removing any existing log file, running the agent, and copying the output to the fixtures directory.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/unit/mcp_agent/mcp_agent/fixture/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/mcp_basic_agent\nrm -f mcp-agent.jsonl  # Start with a clean log file\nuv run python main.py \"What is the timestamp in different timezones?\"\ncp mcp-agent.jsonl ../../tests/fixture/mcp_basic_agent_20250131_205604.jsonl\n```\n\n----------------------------------------\n\nTITLE: Updating Expected Output Fixtures in Python\nDESCRIPTION: Python code to update the expected output fixtures. This imports a utility function from the test module and calls it to update the test fixtures.\nSOURCE: https://github.com/evalstate/fast-agent/blob/main/tests/unit/mcp_agent/mcp_agent/fixture/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom tests.test_event_progress import update_test_fixtures\nupdate_test_fixtures()\n```"
  }
]