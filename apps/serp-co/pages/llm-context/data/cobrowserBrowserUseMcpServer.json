[
  {
    "owner": "co-browser",
    "repo": "browser-use-mcp-server",
    "content": "TITLE: Setting Environment Variables\nDESCRIPTION: Defines environment variables for the application, including the OpenAI API key, optional Chrome path, and a flag to enable patient API calls, waiting for task completion. These variables are typically stored in a `.env` file.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your-api-key\nCHROME_PATH=optional/path/to/chrome\nPATIENT=false  # Set to true if API calls should wait for task completion\n```\n\n----------------------------------------\n\nTITLE: Running the Server with API Key (Inline)\nDESCRIPTION: Runs the server with the OpenAI API key provided inline, specifying the port, stdio transport, and proxy port. This is useful for one-time runs without setting the environment variable globally.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your-api-key-here browser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n```\n\n----------------------------------------\n\nTITLE: Running the Server in stdio Mode\nDESCRIPTION: Builds the package, installs it globally as a uv tool, and then runs the server using stdio transport, specifying the port and proxy port. Requires mcp-proxy to be installed.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nuv build\nuv tool uninstall browser-use-mcp-server 2>/dev/null || true\nuv tool install dist/browser_use_mcp_server-*.whl\n\n# 2. Run with stdio transport\nbrowser-use-mcp-server run server --port 8000 --stdio --proxy-port 9000\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for stdio Mode (JSON)\nDESCRIPTION: JSON configuration for the client to connect to the server in stdio mode. Defines the command, arguments, and environment variables to run the browser-use-mcp-server.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"browser-server\": {\n      \"command\": \"browser-use-mcp-server\",\n      \"args\": [\n        \"run\",\n        \"server\",\n        \"--port\",\n        \"8000\",\n        \"--stdio\",\n        \"--proxy-port\",\n        \"9000\"\n      ],\n      \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository via git\nDESCRIPTION: This command clones the forked repository to your local machine, allowing you to make changes and contribute back to the project. The URL needs to be replaced with your forked repository URL.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/browser-use-mcp-server.git\n```\n\n----------------------------------------\n\nTITLE: Installing the Package as a Global Tool\nDESCRIPTION: Uninstalls any existing version of the package and then installs the newly built wheel as a global tool using uv. This allows the server to be run from any directory.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nuv tool uninstall browser-use-mcp-server 2>/dev/null || true\nuv tool install dist/browser_use_mcp_server-*.whl\n```\n\n----------------------------------------\n\nTITLE: Running Docker with Custom VNC Password\nDESCRIPTION: Runs the Docker container with a custom VNC password read from a file. The password file is mounted as a read-only secret inside the container for security.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\necho \"your-secure-password\" > vnc_password.txt\ndocker run --rm -p8000:8000 -p5900:5900 \\\n  -v $(pwd)/vnc_password.txt:/run/secrets/vnc_password:ro \\\n  browser-use-mcp-server\n```\n\n----------------------------------------\n\nTITLE: Cloning the repository via git (Direct)\nDESCRIPTION: This command clones the main repository directly to your local machine for direct contribution, intended for contributors. It fetches all the project files and history.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/co-browser/browser-use-mcp-server.git\n```\n\n----------------------------------------\n\nTITLE: Launching noVNC Proxy for Browser-Based VNC\nDESCRIPTION: Clones the noVNC repository, navigates to the directory, and starts the noVNC proxy, allowing browser-based access to the VNC server running inside the Docker container.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/novnc/noVNC\ncd noVNC\n./utils/novnc_proxy --vnc localhost:5900\n```\n\n----------------------------------------\n\nTITLE: Creating a new git branch\nDESCRIPTION: This command creates a new branch for your feature or bug fix. It ensures that your changes are isolated from the main branch until you are ready to submit them.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Reinstalling the Package\nDESCRIPTION: Rebuilds the package and reinstalls it as a global tool after making changes. This ensures that the latest changes are reflected in the globally installed version.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nuv build\nuv tool uninstall browser-use-mcp-server\nuv tool install dist/browser_use_mcp_server-*.whl\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with uv and Playwright\nDESCRIPTION: Installs project dependencies using uv, and then installs Playwright browsers (Chromium) with their dependencies. The `--no-shell` flag avoids using a shell during installation.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\nuv pip install playwright\nuv run playwright install --with-deps --no-shell chromium\n```\n\n----------------------------------------\n\nTITLE: Running the Server in SSE Mode\nDESCRIPTION: Starts the server directly from the source code using uv, specifying the port number. This configuration uses Server-Sent Events (SSE) for communication.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run server --port 8000\n```\n\n----------------------------------------\n\nTITLE: Running the Docker Container\nDESCRIPTION: Runs the Docker container, mapping the server and VNC ports. The `--rm` flag ensures the container is removed when it stops. The default VNC password is 'browser-use'.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -p8000:8000 -p5900:5900 browser-use-mcp-server\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to repository (Direct)\nDESCRIPTION: This command pushes your changes directly to the main repository, for direct contributors. This makes your changes available for review and integration into the main project.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Example AI Query\nDESCRIPTION: Provides an example query that can be used with the AI agent to interact with a browser. Asks the AI to open a specific URL and return the top-ranked article.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nopen https://news.ycombinator.com and return the top ranked article\n```\n\n----------------------------------------\n\nTITLE: Pushing changes to forked git repository\nDESCRIPTION: This command pushes your changes to your forked repository on GitHub. This makes your changes available for review and integration into the main project.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites using uv\nDESCRIPTION: Installs uv, mcp-proxy and updates the shell to make uv commands available. uv is used as the Python package manager.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv tool install mcp-proxy\nuv tool update-shell\n```\n\n----------------------------------------\n\nTITLE: Building a Docker Image\nDESCRIPTION: Builds a Docker image for the browser-use-mcp-server, allowing for consistent and isolated execution. The `-t` flag tags the image with a name.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t browser-use-mcp-server .\n```\n\n----------------------------------------\n\nTITLE: Building the Package Locally\nDESCRIPTION: Builds the project into a distributable wheel using uv. This step prepares the package for local installation as a tool.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nuv build\n```\n\n----------------------------------------\n\nTITLE: Client Configuration for SSE Mode (JSON)\nDESCRIPTION: JSON configuration for the client to connect to the server in SSE mode. Defines the URL for the browser-use-mcp-server.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"browser-use-mcp-server\": {\n      \"url\": \"http://localhost:8000/sse\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom VNC Password\nDESCRIPTION: Creates a file containing the desired VNC password.  This file will be mounted as a secret in the Docker container.\nSOURCE: https://github.com/co-browser/browser-use-mcp-server/blob/main/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\necho \"your-secure-password\" > vnc_password.txt\n```"
  }
]