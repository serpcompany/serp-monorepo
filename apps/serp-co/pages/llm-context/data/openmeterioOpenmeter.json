[
  {
    "owner": "openmeterio",
    "repo": "openmeter",
    "content": "TITLE: Launching OpenMeter with Docker Compose\nDESCRIPTION: Command to start OpenMeter and its dependencies in detached mode using Docker Compose.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Usage Meter\nDESCRIPTION: YAML configuration for setting up a new meter to track LLM token usage with grouping by model and prompt type.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmeters:\n  # Sample meter to count LLM Token Usage\n  - slug: tokens_total\n    description: AI Token Usage\n    eventType: prompt               # Filter events by type\n    aggregation: SUM\n    valueProperty: $.tokens         # JSONPath to parse usage value\n    groupBy:\n      model: $.model                # AI model used: gpt4-turbo, etc.\n      type: $.type                  # Prompt type: input, output, system\n```\n\n----------------------------------------\n\nTITLE: Ingesting Usage Event - First Request\nDESCRIPTION: HTTP POST request to ingest a usage event in CloudEvents format with sample request data.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:8888/api/v1/events \\\n-H 'Content-Type: application/cloudevents+json' \\\n--data-raw '\n{\n  \"specversion\" : \"1.0\",\n  \"type\": \"request\",\n  \"id\": \"00001\",\n  \"time\": \"2023-01-01T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"method\": \"GET\",\n    \"route\": \"/hello\",\n    \"duration_ms\": 10\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Implementing Mid-Period Billing Line Splitting\nDESCRIPTION: Demonstrates how a line is split into multiple parts when billing occurs mid-period. The original line becomes a grouping line with 'split' status, while two new lines are created for the already billed period and remaining period.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/billing/README.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n period.start              asOf                              period.end\nLine1 [status=split]         |--------------------------------------------------------|\nSplitLine1 [status=valid]    |------------------|\nSplitLine2 [status=valid]                       |-------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter Using Docker Compose\nDESCRIPTION: Quick installation steps for setting up OpenMeter locally using git clone and docker compose.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:openmeterio/openmeter.git\ncd openmeter/quickstart\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Operation Types and Function in Go\nDESCRIPTION: Defines the fundamental structure for an operation including request/response types and a function that processes the operation. This is the first step in the bottom-up approach for implementing a new API endpoint.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/pkg/framework/README.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Request struct {\n    // request params\n}\n\ntype Response struct {\n    // response data\n}\n\nfunc Operation(ctx context.Context, req Request) (Response, error) {\n    // operation logic\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Relationship Diagram for Subscription Addon System\nDESCRIPTION: Mermaid diagram showing relationships between Subscription, SubscriptionAddon, SubscriptionAddonQuantity, SubscriptionAddonRateCard, and Addon entities. Defines primary and foreign key relationships and cardinality between entities.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/subscription/addon/README.md#2025-04-20_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nerDiagram\n    Subscription ||--|| SubscriptionAddon : \"has (1:1)\"\n    SubscriptionAddon ||--o{ SubscriptionAddonQuantity : \"has (1:N)\"\n    SubscriptionAddon ||--o{ SubscriptionAddonRateCard : \"has (1:N) calculated from Addon\"\n    Addon ||--|| SubscriptionAddon : \"has (1:1)\"\n\n    Subscription {\n        string id PK\n    }\n\n    Addon {\n        string id PK\n    }\n\n    SubscriptionAddon {\n        string id PK\n        string subscription_id FK\n        string addon_id FK\n    }\n\n    SubscriptionAddonQuantity {\n        string id PK\n        string subscription_addon_id FK\n    }\n\n    SubscriptionAddonRateCard {\n\n    }\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter via Helm\nDESCRIPTION: This Helm command installs or upgrades OpenMeter in the local Kubernetes cluster. It uses a custom values file and updates dependencies. This deploys the OpenMeter application to the cluster.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install --dependency-update -f ./charts/openmeter/values.example.yaml openmeter ./charts/openmeter\n```\n\n----------------------------------------\n\nTITLE: Querying Meter Data from OpenMeter in Go\nDESCRIPTION: Retrieves usage data from OpenMeter based on specified parameters. The query includes filtering by meter slug, subject, and time range (from/to dates).\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/go/README.md#2025-04-20_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nslug := \"token-usage\"\nsubject := []string{\"user-id\"}\nfrom, _ := time.Parse(time.RFC3339, \"2023-01-01T00:00:00Z\")\nto, _ := time.Parse(time.RFC3339, \"2023-01-02T00:00:00Z\")\nresp, _ := client.QueryMeterWithResponse(ctx, slug, &om.QueryMeterParams{\n    Subject: &subject,\n    From:    &from,\n    To:      &to,\n})\n// resp.JSON200.Data\n```\n\n----------------------------------------\n\nTITLE: Implementing Diffable Interface in Go\nDESCRIPTION: Defines the core interface for objects that can be applied to and removed from subscription specifications. Contains two main methods for getting apply and restore operations.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/subscription/addon/diff/README.md#2025-04-20_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ninterface {\n    GetApplies() // Returns operations to apply to the specification\n    GetRestores() // Returns operations to revert changes\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenMeter Client in Python\nDESCRIPTION: Example of initializing the OpenMeter client in Python. It demonstrates setting the endpoint and headers. The ENDPOINT is retrieved from an environment variable or defaults to 'http://localhost:8888'.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/python/README.md#2025-04-20_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom os import environ\nfrom openmeter import Client\n\nENDPOINT = environ.get(\"OPENMETER_ENDPOINT\") or \"http://localhost:8888\"\n\n# it's recommended to also set the Accept header at the client level\nclient = Client(\n    endpoint=ENDPOINT,\n    headers={\"Accept\": \"application/json\"},\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Self-Contained HTTP Handler with Internal Operation in Go\nDESCRIPTION: Creates an HTTP handler that instantiates its own operation instance. This approach provides a more self-contained handler that doesn't require external operation dependencies to be passed in.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/pkg/framework/README.md#2025-04-20_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc NewOperationHandler(errorHandler httptransport.ErrorHandler) http.Handler {\n\treturn httptransport.NewHandler(\n\t\tNewOperation(),\n\t\tDecodeOperationRequest,\n\t\tEncodeOperationResponse,\n\t\tEncodeOperationError,\n\t\thttptransport.WithErrorHandler(errorHandler),\n\t\thttptransport.WithOperationName(\"operation\"),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a CloudEvent for API Call Duration\nDESCRIPTION: Example of a CloudEvent JSON structure describing the execution duration of a serverless application. The event includes standard CloudEvents fields and custom data properties for duration and path.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specversion\": \"1.0\",\n  \"type\": \"api-calls\",\n  \"id\": \"00001\",\n  \"time\": \"2023-01-01T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"duration\": \"12\",\n    \"path\": \"/hello\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter Backend API Client\nDESCRIPTION: Configuration setup for accessing the OpenMeter API from backend applications using baseUrl and apiKey.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/javascript/README.md#2025-04-20_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenMeter } from '@openmeter/sdk'\n\nconst openmeter = new OpenMeter({\n  baseUrl: 'https://openmeter.cloud',\n  apiKey: 'om_...',\n})\n```\n\n----------------------------------------\n\nTITLE: Querying OpenMeter API Requests Duration\nDESCRIPTION: Command to query the meters API for requests duration, grouped by subject. This curl command interacts with the OpenMeter API endpoint running on localhost port 8888.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/ingest-logs/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'http://localhost:8888/api/v1/meters/api_requests_duration/query?groupBy=subject'\n```\n\n----------------------------------------\n\nTITLE: Implementing an Operation as a Service Method in Go\nDESCRIPTION: Shows how to implement an operation as a method on a service struct rather than a standalone function. This approach is useful when the operation needs to access shared service resources or state.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/pkg/framework/README.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype Service struct {\n\n}\n\nfunc (s Service) Operation(ctx context.Context, req Request) (Response, error) {\n    // operation logic\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter SDK via NPM\nDESCRIPTION: Command to install the OpenMeter SDK package using npm package manager.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/javascript/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install --save @openmeter/sdk\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Splitting in OpenMeter Billing System\nDESCRIPTION: Shows how invoice lines are split when billing mid-period. The example illustrates the transition from a single valid line to split lines with different statuses to handle partial billing periods.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/billing/README.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n period.start                                              period.end\nLine1 [status=valid] |--------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter Meters\nDESCRIPTION: YAML configuration example showing how to define meters for processing events, including event type, value property, aggregation, and grouping options.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  meters:\n    - slug: m1\n      description: API calls\n      eventType: api-calls\n      valueProperty: $.duration_ms\n      aggregation: SUM\n      groupBy:\n        method: $.method\n        path: $.path\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter Go SDK\nDESCRIPTION: Command to install the OpenMeter Go SDK using go get, specifying a beta version.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/go/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/openmeterio/openmeter/api/client/go@v1.0.0-beta.53\n```\n\n----------------------------------------\n\nTITLE: Updating Webhook Secret in Database\nDESCRIPTION: SQL commands to connect to PostgreSQL and update the webhook secret for the Stripe app in the database. This ensures that webhook signatures can be properly verified.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npsql -h 127.0.0.1 -U postgres postgres\nUPDATE app_stripes set webhook_secret = 'whsec_c67e0e4f97227eb66ca026a4fcd9124923035ff778a1945601d109756ca707f4'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Meter in Self-hosted OpenMeter\nDESCRIPTION: YAML configuration for creating a meter to track Pod execution time in a self-hosted OpenMeter instance.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: pod_execution_time\n    eventType: kube-pod-exec-time\n    aggregation: SUM\n    valueProperty: $.duration_seconds\n    groupBy:\n      pod_namespace: $.pod_namespace\n      pod_name: $.pod_name\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for OpenMeter API Access\nDESCRIPTION: This kubectl command sets up port forwarding to access the OpenMeter API. It forwards local port 8888 to port 80 of the openmeter-api service in the cluster. This allows for local access to the API once the pod is ready.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/openmeter-api 8888:80\n```\n\n----------------------------------------\n\nTITLE: Creating a Customer in OpenMeter\nDESCRIPTION: Curl command to create a new customer in OpenMeter with a name, attribution key, USD currency, and US billing address. This is the first step in linking a customer to Stripe.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://127.0.0.1:8000/api/v1/customers \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '\n  {\n  \"name\": \"test\",\n  \"usageAttribution\": {\n    \"subjectKeys\": [\n      \"test\"\n    ]\n  },\n  \"currency\": \"USD\",\n  \"billingAddress\": {\n    \"country\": \"US\"\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Configuring a Meter in OpenMeter YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to define a meter configuration for a self-hosted OpenMeter instance. It configures an 'api_calls' meter that aggregates API call events, tracks the duration_ms value property, and groups data by method and path attributes.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/README.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: api_calls\n    eventType: api-calls\n    aggregation: SUM\n    valueProperty: $.duration_ms\n    groupBy:\n      method: $.method\n      path: $.path\n```\n\n----------------------------------------\n\nTITLE: Configuring a Meter in OpenMeter\nDESCRIPTION: YAML configuration for defining a meter that tracks API call durations, summing them by endpoint path. The configuration specifies the event type, value property using JsonPath, aggregation method, and grouping criteria.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmeters:\n  - slug: m1\n    type: api-calls\n    valueProperty: $.duration\n    aggregation: SUM\n    groupBy:\n      path: $.path\n```\n\n----------------------------------------\n\nTITLE: Deploying Test Pods to Kubernetes\nDESCRIPTION: Command to deploy sample Pods to the Kubernetes cluster for metering their execution time.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/openmeterio/openmeter/main/examples/collectors/kubernetes-pod-exec-time/seed/pod.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter Meters in YAML\nDESCRIPTION: Defines meters in OpenMeter configuration to process events. This example configures an 'API calls' meter that tracks duration of API calls and aggregates by method and path.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.tmpl.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  meters:\n    - slug: m1\n      description: API calls\n      eventType: api-calls\n      valueProperty: $.duration_ms\n      aggregation: SUM\n      groupBy:\n        method: $.method\n        path: $.path\n```\n\n----------------------------------------\n\nTITLE: Installing Benthos Collector with Helm\nDESCRIPTION: Command to install the latest version of the Benthos collector for OpenMeter using Helm.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/benthos-collector/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/benthos-collector\n```\n\n----------------------------------------\n\nTITLE: Starting Event Seeder for Continuous Testing\nDESCRIPTION: Command to launch the seeder component using Docker Compose profile, which continuously sends test events to the forwarder for demonstration and testing purposes.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile seed up -d\n```\n\n----------------------------------------\n\nTITLE: OpenMeter Meter Configuration\nDESCRIPTION: YAML configuration for setting up a meter to track API calls with various grouping dimensions and SUM aggregation.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/generate/README.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: api_calls\n    eventType: api-calls\n    aggregation: SUM\n    valueProperty: $.duration_ms\n    groupBy:\n      method: $.method\n      path: $.path\n      region: $.region\n      zone: $.zone\n```\n\n----------------------------------------\n\nTITLE: Deploying Benthos Collector with Helm\nDESCRIPTION: Helm command to deploy the Benthos collector to Kubernetes with configuration for Pod execution time metering.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm install --devel --namespace benthos-collector --create-namespace --set preset=kubernetes-pod-exec-time --set openmeter.url=<OPENMETER_URL> --set openmeter.token=<OPENMETER_TOKEN> benthos-collector oci://ghcr.io/openmeterio/helm-charts/benthos-collector\n```\n\n----------------------------------------\n\nTITLE: Running Benthos with Custom Configuration\nDESCRIPTION: Command to run Benthos directly with the custom configuration file that defines the HTTP server settings, event validation rules, and OpenMeter output configuration.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nbenthos -c config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating an HTTP Handler with External Operation in Go\nDESCRIPTION: Creates an HTTP handler for an operation by connecting the operation function with request/response encoding/decoding functions. This example uses an externally provided operation instance.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/pkg/framework/README.md#2025-04-20_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc NewOperationHandler(op operation.Operation[Request, Response], errorHandler httptransport.ErrorHandler) http.Handler {\n\treturn httptransport.NewHandler(\n\t\top,\n\t\tDecodeOperationRequest,\n\t\tEncodeOperationResponse,\n\t\tEncodeOperationError,\n\t\thttptransport.WithErrorHandler(errorHandler),\n\t\thttptransport.WithOperationName(\"operation\"),\n\t)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter Portal API Client\nDESCRIPTION: Configuration setup for accessing the OpenMeter Portal API from frontend applications using portalToken.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/javascript/README.md#2025-04-20_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OpenMeter } from '@openmeter/sdk/portal'\n\nconst openmeter = new OpenMeter({\n  baseUrl: 'https://openmeter.cloud',\n  portalToken: 'om_portal_...',\n})\n```\n\n----------------------------------------\n\nTITLE: Deploying Benthos Collector Locally\nDESCRIPTION: Alternative Helm command for deploying the Benthos collector when running the example locally.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nhelm install --devel --namespace benthos-collector --create-namespace --set preset=kubernetes-pod-exec-time --set openmeter.url=$OPENMETER_URL --set openmeter.token=$OPENMETER_TOKEN benthos-collector ../../../deploy/charts/benthos-collector\n```\n\n----------------------------------------\n\nTITLE: Ingesting Events with OpenMeter Client in Python\nDESCRIPTION: Example of ingesting events using the OpenMeter client in Python. It shows how to create a CloudEvent and ingest it using the client's ingest_events method.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/python/README.md#2025-04-20_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom cloudevents.http import CloudEvent\nfrom cloudevents.conversion import to_dict\n\nevent = CloudEvent(\n    attributes={\n        \"type\": \"tokens\",\n        \"source\": \"openmeter-python\",\n        \"subject\": \"user-id\",\n    },\n    data={\n        \"prompt_tokens\": 5,\n        \"completion_tokens\": 10,\n        \"total_tokens\": 15,\n        \"model\": \"gpt-3.5-turbo\",\n    },\n)\n\nresp = client.ingest_events(to_dict(event))\n```\n\n----------------------------------------\n\nTITLE: Installing Stripe App in OpenMeter with API Key\nDESCRIPTION: This curl command registers a Stripe app in OpenMeter using a test API key. It creates a new app instance that can process payments, calculate tax, and invoice customers.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# curl -H \"Content-Type: application/json\" -X POST -d '{\"apiKey\": \"sk_test_***\", \"name\": \"stripe\"}' http://127.0.0.1:8000/api/v1/marketplace/listings/stripe/install/apikey\n```\n\n----------------------------------------\n\nTITLE: Applying Local Pod Definition File\nDESCRIPTION: Alternative command for applying the Pod definition file when running the example locally.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f seed/pod.yaml\n```\n\n----------------------------------------\n\nTITLE: Ingesting Events with OpenMeter in Go\nDESCRIPTION: Creates and sends a CloudEvent to OpenMeter for usage reporting. The example demonstrates setting event properties including ID, source, type, subject, and custom data with token usage metrics.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/go/README.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\ne := cloudevents.New()\ne.SetID(\"00001\")\ne.SetSource(\"my-app\")\ne.SetType(\"tokens\")\ne.SetSubject(\"user-id\")\ne.SetTime(time.Now())\ne.SetData(\"application/json\", map[string]string{\n  \"tokens\": \"15\",\n  \"model\": \"gpt-4\",\n})\n\n_, err := client.IngestEventWithResponse(ctx, e)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter Meter via YAML\nDESCRIPTION: YAML configuration example for defining a meter in a self-hosted OpenMeter instance, specifying the event type, aggregation method, value property, and grouping dimensions.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: api_calls\n    eventType: api-calls\n    aggregation: SUM\n    valueProperty: $.duration_ms\n    groupBy:\n      method: $.method\n      path: $.path\n      region: $.region\n      zone: $.zone\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Commands to create a configuration file with OpenMeter connection details from a template.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.dist .env\n# edit .env and fill in the details\n```\n\n----------------------------------------\n\nTITLE: Second API Call CloudEvent Example\nDESCRIPTION: Example of a second CloudEvent with a different ID and duration value, which will be aggregated with the first event for the same time window, path, and subject.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specversion\": \"1.0\",\n  \"type\": \"api-calls\",\n  \"id\": \"00002\",\n  \"time\": \"2023-01-01T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"duration\": \"20\",\n    \"path\": \"/hello\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meter in YAML for Self-hosted OpenMeter\nDESCRIPTION: YAML configuration for setting up an API calls meter in a self-hosted OpenMeter instance. Defines event type, aggregation method, value property, and grouping dimensions.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/otel-log/README.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: api_calls\n    eventType: api-calls\n    aggregation: SUM\n    valueProperty: $.duration_ms\n    groupBy:\n      method: $.method\n      path: $.path\n      region: $.region\n      zone: $.zone\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenMeter Repository\nDESCRIPTION: Instructions for cloning the OpenMeter repository and navigating to the quickstart directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone git@github.com:openmeterio/openmeter.git\ncd openmeter/quickstart\n```\n\n----------------------------------------\n\nTITLE: Configuring External Dependencies for OpenMeter in Production\nDESCRIPTION: Provides connection details for external dependencies when deploying OpenMeter in production. Includes configuration for Kafka, ClickHouse, PostgreSQL, and Svix service connections.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.tmpl.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    ingest:\n      kafka:\n        broker: KAFKA_ADDRESS\n\n    aggregation:\n      clickhouse:\n        address: CLICKHOUSE_ADDRESS\n        username: default\n        password: \"\"\n        database: default\n\n    postgres:\n      url: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable\n      autoMigrate: migration\n\n    svix:\n      apiKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdml4LXNlcnZlciIsInN1YiI6Im9yZ18yM3JiOFlkR3FNVDBxSXpwZ0d3ZFhmSGlyTXUiLCJleHAiOjE4OTM0NTYwMDAsIm5iZiI6MTcwNDA2NzIwMCwiaWF0IjoxNzIzNTUzMTQ0fQ.JVOFgHymisTD-Zw_p03qD4iUXXXw-VwABda2Q3f1wfs\n      serverURL: http://127.0.0.1:8071/\n      debug: true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Stripe Webhook Listener\nDESCRIPTION: Command to start the Stripe CLI in event listening mode, forwarding webhook events to the OpenMeter API endpoint. This enables processing of Stripe events in OpenMeter.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nstripe listen  -l --forward-to http://127.0.0.1:8000/api/v1/apps/01JK62H967WX20W9E6RNS05E80/stripe/webhook\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenMeter Repository\nDESCRIPTION: Commands to clone the OpenMeter repository and navigate to the generate example directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/generate/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openmeterio/openmeter.git\ncd openmeter/examples/collectors/generate\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenMeter Client in Go\nDESCRIPTION: Sets up imports and initializes an OpenMeter client connecting to a specified endpoint. The client is used for all interactions with the OpenMeter API.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/go/README.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  cloudevents \"github.com/cloudevents/sdk-go/v2/event\"\n  om \"github.com/openmeterio/openmeter/api/client/go\"\n)\n\nfunc main() {\n  // Initialize OpenMeter client\n  om, err := openmeter.NewClientWithResponses(\"http://localhost:8888\")\n  if err != nil {\n      panic(err.Error())\n  }\n\n  // Use OpenMeter client\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose with Dev Profile\nDESCRIPTION: Command to run Docker Compose with development profile enabled for Kafka and ClickHouse UI access.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose --profile dev up\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenMeter Repository for HTTP Server Example\nDESCRIPTION: Commands to clone the OpenMeter repository and navigate to the HTTP server collector example directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openmeterio/openmeter.git\ncd openmeter/examples/collectors/http-server\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Setup SQL Script for OpenMeter\nDESCRIPTION: SQL script that is executed during PostgreSQL initialization. Creates two separate database users and databases: one for the main application and one for the Svix webhooks service, with appropriate permissions.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER application WITH PASSWORD 'application';\nCREATE DATABASE application;\nGRANT ALL PRIVILEGES ON DATABASE application TO application;\nALTER DATABASE application OWNER TO application;\nCREATE USER svix WITH PASSWORD 'svix';\nCREATE DATABASE svix;\nGRANT ALL PRIVILEGES ON DATABASE svix TO svix;\nALTER DATABASE svix OWNER TO svix;\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Dependencies in OpenMeter Helm Chart\nDESCRIPTION: Configuration to disable the default dependencies (Svix, Redis, PostgreSQL, Kafka, ClickHouse) when deploying OpenMeter in production environments. This allows using external service instances instead.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.tmpl.md#2025-04-20_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nsvix:\n  enabled: false\n\nredis:\n  enabled: false\n\npostgres:\n  enabled: false\n\nkafka:\n  enabled: false\n\nclickhouse:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Resources\nDESCRIPTION: Command to stop and remove Docker containers and volumes.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenMeter React SDK with Context\nDESCRIPTION: Setup for using OpenMeter in React applications with provider context and hooks for accessing the portal API.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/javascript/README.md#2025-04-20_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  OpenMeter,\n  OpenMeterProvider,\n  useOpenMeter,\n} from '@openmeter/sdk/react'\n\nfunction App() {\n  // get portal token from your backend\n  const openmeter = new OpenMeter({\n    baseUrl: 'https://openmeter.cloud',\n    portalToken,\n  })\n\n  return (\n    <OpenMeterProvider value={openmeter}>\n      <UsageComponent />\n      {/* ... */}\n    </OpenMeterProvider>\n  )\n}\n\nfunction UsageComponent() {\n  // get openmeter client from context\n  const openmeter = useOpenMeter()\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Hourly Usage\nDESCRIPTION: HTTP GET request to query hourly usage metrics grouped by method and route.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://localhost:8888/api/v1/meters/api_requests_total/query?windowSize=HOUR&groupBy=method&groupBy=route' | jq\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"windowSize\": \"HOUR\",\n  \"data\": [\n    {\n      \"value\": 2,\n      \"windowStart\": \"2023-01-01T00:00:00Z\",\n      \"windowEnd\": \"2023-01-01T01:00:00Z\",\n      \"subject\": null,\n      \"groupBy\": {\n        \"method\": \"GET\",\n        \"route\": \"/hello\"\n      }\n    },\n    {\n      \"value\": 1,\n      \"windowStart\": \"2023-01-02T00:00:00Z\",\n      \"windowEnd\": \"2023-01-02T01:00:00Z\",\n      \"subject\": null,\n      \"groupBy\": {\n        \"method\": \"GET\",\n        \"route\": \"/hello\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Docker Resources\nDESCRIPTION: Command to stop and remove all containers including the seeder profile, and remove associated volumes to clean up after testing.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose --profile seed down -v\n```\n\n----------------------------------------\n\nTITLE: OpenMeter Aggregated Usage Result\nDESCRIPTION: Shell representation of how OpenMeter aggregates the sum of durations from multiple events for the same time window, path, and subject, demonstrating the SUM aggregation functionality.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nwindowstart   = \"2023-01-01T00:00\"\nwindowend     = \"2023-01-01T00:01\"\nsubject       = \"customer-1\"\nvalue         = 30\npath          = \"/hello\"\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations with golang-migrate CLI\nDESCRIPTION: Command to execute database migrations using the golang-migrate CLI tool. Uses PostgreSQL connection string with specific schema table configuration.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/migration.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmigrate -database \"postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable&x-migrations-table=schema_om\" -path ./services/common/migrations/om up\n```\n\n----------------------------------------\n\nTITLE: Stopping and Cleaning Up Resources\nDESCRIPTION: Command to stop all containers and remove associated volumes when finished with the example.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: OpenMeter Usage Tracking Result for First Event\nDESCRIPTION: Shell representation of how OpenMeter tracks usage data for the first event, showing the time window, subject, value, and path information that gets stored in the system.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwindowstart   = \"2023-01-01T00:00\"\nwindowend     = \"2023-01-01T00:01\"\nsubject       = \"customer-1\"\nvalue         = 10\npath          = \"/hello\"\n```\n\n----------------------------------------\n\nTITLE: OpenMeter Meter Configuration for Self-hosted Instances\nDESCRIPTION: YAML configuration defining three meters for tracking chat message counts and lengths with different aggregation methods and grouping.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# ...\n\nmeters:\n  - slug: all_message_lengths\n    eventType: chat-message\n    aggregation: SUM\n    valueProperty: $.message_length\n    groupBy:\n      plan: $.plan\n  - slug: billable_message_lengths\n    eventType: chat-message\n    aggregation: SUM\n    valueProperty: $.message_length_billable\n    groupBy:\n      plan: $.plan\n  - slug: message_count\n    eventType: chat-message\n    aggregation: COUNT\n    groupBy:\n      plan: $.plan\n```\n\n----------------------------------------\n\nTITLE: Sending Single CloudEvent to HTTP Server\nDESCRIPTION: cURL command to send a single CloudEvent in JSON format to the HTTP collector server for processing and forwarding to OpenMeter.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl -vvv http://127.0.0.1:4196/api/v1/events -H \"Content-Type: application/cloudevents+json\" -d @seed/event.json\n```\n\n----------------------------------------\n\nTITLE: Querying Total Usage by Customer\nDESCRIPTION: HTTP GET request to query total usage metrics for a specific customer.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://localhost:8888/api/v1/meters/api_requests_total/query?subject=customer-1' | jq\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": [\n    {\n      \"value\": 3,\n      \"windowStart\": \"2023-01-01T00:00:00Z\",\n      \"windowEnd\": \"2023-01-02T00:01:00Z\",\n      \"subject\": \"customer-1\",\n      \"groupBy\": {}\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Batch of CloudEvents to HTTP Server\nDESCRIPTION: cURL command to send a batch of CloudEvents in JSON format to the HTTP collector for efficient bulk processing and forwarding to OpenMeter.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -vvv http://127.0.0.1:4196/api/v1/events -H \"Content-Type: application/cloudevents-batch+json\" -d @seed/batch.json\n```\n\n----------------------------------------\n\nTITLE: First API Call CloudEvent Example\nDESCRIPTION: Example of the first CloudEvent sent to OpenMeter with type 'api-calls'. Contains a duration of 10 for the '/hello' path, which will be processed according to the meter configuration.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/event-ingestion.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"specversion\": \"1.0\",\n  \"type\": \"api-calls\",\n  \"id\": \"00001\",\n  \"time\": \"2023-01-01T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"duration\": \"10\",\n    \"path\": \"/hello\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter with Helm\nDESCRIPTION: Basic Helm commands to install OpenMeter from the container registry, with options for installing specific versions.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/openmeter\n```\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/openmeter --version $VERSION\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Benthos Collector with Helm\nDESCRIPTION: Command to install a specific version of the Benthos collector for OpenMeter using Helm with version parameter.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/benthos-collector/README.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/benthos-collector --version $VERSION\n```\n\n----------------------------------------\n\nTITLE: Custom External Service Configuration\nDESCRIPTION: YAML configuration for connecting to external services when using custom infrastructure instead of built-in dependencies.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.md#2025-04-20_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n    ingest:\n      kafka:\n        broker: KAFKA_ADDRESS\n\n    aggregation:\n      clickhouse:\n        address: CLICKHOUSE_ADDRESS\n        username: default\n        password: \"\"\n        database: default\n\n    postgres:\n      url: postgres://postgres:postgres@localhost:5432/postgres?sslmode=disable\n      autoMigrate: migration\n\n    svix:\n      apiKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdml4LXNlcnZlciIsInN1YiI6Im9yZ18yM3JiOFlkR3FNVDBxSXpwZ0d3ZFhmSGlyTXUiLCJleHAiOjE4OTM0NTYwMDAsIm5iZiI6MTcwNDA2NzIwMCwiaWF0IjoxNzIzNTUzMTQ0fQ.JVOFgHymisTD-Zw_p03qD4iUXXXw-VwABda2Q3f1wfs\n      serverURL: http://127.0.0.1:8071/\n      debug: true\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Dependencies\nDESCRIPTION: YAML configuration showing how to disable default dependencies for production deployments where external services will be used.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/README.md#2025-04-20_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsvix:\n  enabled: false\n\nredis:\n  enabled: false\n\npostgres:\n  enabled: false\n\nkafka:\n  enabled: false\n\nclickhouse:\n  enabled: false\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation for Contributing Guidelines\nDESCRIPTION: Detailed markdown documentation explaining contribution guidelines, issue reporting procedures, pull request requirements, and review processes for the OpenMeter project. Includes special instructions for security vulnerabilities and review requirements.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/CONTRIBUTING.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing\n\nThanks for your interest in contributing to OpenMeter!\n\nHere are a few general guidelines on contributing and reporting bugs that we ask you to review.\nFollowing these guidelines helps to communicate that you respect the time of the contributors managing and developing this open source project.\nIn return, they should reciprocate that respect in addressing your issue, assessing changes, and helping you finalize your pull requests.\nIn that spirit of mutual respect, we endeavor to review incoming issues and pull requests within 10 days,\nand will close any lingering issues or pull requests after 60 days of inactivity.\n\nPlease note that all of your interactions in the project are subject to our [Code of Conduct](/CODE_OF_CONDUCT.md).\nThis includes creation of issues or pull requests, commenting on issues or pull requests,\nand extends to all interactions in any real-time space e.g., Slack, Discord, etc.\n\n## Reporting issues\n\nBefore reporting a new issue, please ensure that the issue was not already reported or fixed by searching through our issue tracker.\n\nWhen creating a new issue, please be sure to include a **title and clear description**, as much relevant information as possible, and, if possible, a test case.\n\n**If you discover a security bug, please do not report it through GitHub issues. Instead, please see security procedures in [SECURITY.md](/SECURITY.md).**\n\n## Sending pull requests\n\nBefore sending a new pull request, take a look at existing pull requests and issues to see if the proposed change or fix has been discussed in the past,\nor if the change was already implemented but not yet released.\n\nWe expect new pull requests to include tests for any affected behavior, and, as we follow semantic versioning,\nwe may reserve breaking changes until the next major version release.\n\n### Ensuring All Requested Reviewers Approve\n\nBy default, pull requests can often be merged once the minimum number of required approvals (e.g., from CODEOWNERS or branch protection rules) is met. However, sometimes you might explicitly request reviews from specific individuals because their input is crucial for that particular PR.\n\nTo ensure that *all* individuals you've specifically requested using the GitHub \"Reviewers\" UI must approve before merging, follow these steps:\n\n1.  **Request Reviews:** Use the standard GitHub interface on the pull request page to request reviews from the necessary individuals.\n2.  **Add Label:** Add the label `require-all-reviewers` to the pull request.\n\nWhen this label is present, an automated check named \"Review Gatekeeper\" will run. This check will only pass if **every single user** listed under the \"Reviewers\" section has submitted an **approving** review. This check is required for merging, preventing merges until all explicitly requested reviewers are satisfied.\n\nIf the label is removed, the \"Review Gatekeeper\" check will be skipped.\n\n## Other ways to contribute\n\nWe welcome anyone that wants to contribute to triage and reply to open issues to help troubleshoot and fix existing bugs.\nHere is what you can do:\n\n- Help ensure that existing issues follows the recommendations from the _[Reporting Issues](#reporting-issues)_ section,\n  providing feedback to the issue's author on what might be missing.\n- Review and update the existing content of our [documentation](https://openmeter.io) with up-to-date instructions and code samples.\n- Review existing pull requests, and testing patches against real existing applications.\n- Write a test, or add a missing test case to an existing test.\n```\n\n----------------------------------------\n\nTITLE: Basic Seeding Command\nDESCRIPTION: Basic command to start the seeding process with default settings.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/seeder.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmake seed\n```\n\n----------------------------------------\n\nTITLE: Ingesting Usage Event - Second Request\nDESCRIPTION: HTTP POST request to ingest another usage event with a different ID.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:8888/api/v1/events \\\n-H 'Content-Type: application/cloudevents+json' \\\n--data-raw '\n{\n  \"specversion\" : \"1.0\",\n  \"type\": \"request\",\n  \"id\": \"00002\",\n  \"time\": \"2023-01-01T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"method\": \"GET\",\n    \"route\": \"/hello\",\n    \"duration_ms\": 20\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Configuring Event Count and Rate\nDESCRIPTION: Command to customize the total number of events and ingestion rate. This example generates 100 events at 1 event per second.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/seeder.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake SEEDER_COUNT=100 SEEDER_INTERVAL=1s seed\n```\n\n----------------------------------------\n\nTITLE: Ingesting Usage Event - Third Request\nDESCRIPTION: HTTP POST request to ingest a third usage event with different ID and timestamp.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/quickstart/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST http://localhost:8888/api/v1/events \\\n-H 'Content-Type: application/cloudevents+json' \\\n--data-raw '\n{\n  \"specversion\" : \"1.0\",\n  \"type\": \"request\",\n  \"id\": \"00003\",\n  \"time\": \"2023-01-02T00:00:00.001Z\",\n  \"source\": \"service-0\",\n  \"subject\": \"customer-1\",\n  \"data\": {\n    \"method\": \"GET\",\n    \"route\": \"/hello\",\n    \"duration_ms\": 30\n  }\n}\n'\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Seeders\nDESCRIPTION: Command to run multiple seeders together using Benthos streams mode, processing all seeder configurations in the streams directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/seeder.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbenthos -c ./etc/seed/observability.yaml streams ./etc/seed/streams/*.yaml\n```\n\n----------------------------------------\n\nTITLE: Launching Benthos Collector\nDESCRIPTION: Shell commands to set environment variables and launch Benthos with the provided configuration file.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/generate/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OPENMETER_URL=https://openmeter.cloud # default, only needed for self-hosted OpenMeter\nexport OPENMETER_TOKEN=<YOUR TOKEN>\n\nbenthos -c config.yaml\n```\n\n----------------------------------------\n\nTITLE: Launching the OpenTelemetry Log Collector Example\nDESCRIPTION: Command to start the collector and seeder containers using Docker Compose in detached mode.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/otel-log/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Development Commands for OpenMeter\nDESCRIPTION: Basic make commands for running dependencies, tests, linters and the OpenMeter application during development.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake up\nmake run\nmake test\nmake lint\n```\n\n----------------------------------------\n\nTITLE: Launching Event Forwarder with Docker Compose\nDESCRIPTION: Command to start the HTTP event forwarder using Docker Compose in detached mode.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Creating Local Kubernetes Cluster with Kind\nDESCRIPTION: This command creates a local Kubernetes cluster using Kind, with configuration specified in the kind.yaml file. This sets up the environment for deploying OpenMeter.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkind create cluster --config ./kind.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Database Profile for Docker Compose\nDESCRIPTION: Command to select which database profile (PostgreSQL or Clickhouse) to use with Docker Compose.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport COMPOSE_PROFILES=SELECTED_DATABASE\n```\n\n----------------------------------------\n\nTITLE: Launching Database Collection Example\nDESCRIPTION: Command to start the database, event collector, and data seeder containers using Docker Compose.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Removing Test Pods\nDESCRIPTION: Command to delete the sample Pods from the Kubernetes cluster during cleanup.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f https://raw.githubusercontent.com/openmeterio/openmeter/main/examples/collectors/kubernetes-pod-exec-time/seed/pod.yaml\n```\n\n----------------------------------------\n\nTITLE: Linking OpenMeter Customer to Stripe\nDESCRIPTION: Curl command to update the customer in OpenMeter with a Stripe customer ID, creating the connection between the OpenMeter customer and a Stripe customer.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X PUT http://127.0.0.1:8000/api/v1/customers/01JK636MNJ1R9NKFA2VS62HVTF/apps \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '[\n  {\n    \"type\": \"stripe\",\n    \"stripeCustomerId\": \"cus_****\"\n  }\n]\n  '\n```\n\n----------------------------------------\n\nTITLE: Creating Environment Configuration File\nDESCRIPTION: Command to create a new environment configuration file from the template and a comment about editing it with OpenMeter instance details.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/otel-log/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.dist .env\n# edit .env and fill in the details\n```\n\n----------------------------------------\n\nTITLE: Stripe Webhook Listener Output\nDESCRIPTION: The expected output when the Stripe webhook listener starts successfully, showing the webhook signing secret that needs to be configured in the database.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n> Ready! You are using Stripe API Version [2025-01-27.acacia]. Your webhook signing secret is whsec_c67e0e4f97227eb66ca026a4fcd9124923035ff778a1945601d109756ca707f4 (^C to quit)\n```\n\n----------------------------------------\n\nTITLE: Monitoring Event Forwarder Logs\nDESCRIPTION: Command to follow the logs of the event forwarder to monitor its activity and troubleshoot any issues.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose logs -f forwarder\n```\n\n----------------------------------------\n\nTITLE: Stripe App Installation Response\nDESCRIPTION: The JSON response from installing the Stripe app, showing the created app details including its ID, capabilities, and status.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"app\":{\"createdAt\":\"2025-02-03T14:13:23.276159Z\",\"default\":true,\"description\":\"Stripe account ***\",\"id\":\"01JK62H967WX20W9E6RNS05E80\",\"listing\":{\"capabilities\":[{\"description\":\"Process payments\",\"key\":\"stripe_collect_payment\",\"name\":\"Payment\",\"type\":\"collectPayments\"},{\"description\":\"Calculate tax for a payment\",\"key\":\"stripe_calculate_tax\",\"name\":\"Calculate Tax\",\"type\":\"calculateTax\"},{\"description\":\"Invoice a customer\",\"key\":\"stripe_invoice_customer\",\"name\":\"Invoice Customer\",\"type\":\"invoiceCustomers\"}],\"description\":\"Send invoices, calculate tax and collect payments.\",\"name\":\"Stripe\",\"type\":\"stripe\"},\"livemode\":false,\"maskedAPIKey\":\"sk_test_***QpT\",\"metadata\":null,\"name\":\"stripe\",\"status\":\"ready\",\"stripeAccountId\":\"acct_1OSLCsE98Y117at0\",\"type\":\"stripe\",\"updatedAt\":\"2025-02-03T14:13:23.276165Z\"},\"defaultForCapabilityTypes\":[\"calculateTax\",\"invoiceCustomers\",\"collectPayments\"]}\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up the OpenTelemetry Log Collector Example\nDESCRIPTION: Command to stop and remove the Docker containers and associated volumes.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/otel-log/README.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose down -v\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Base Head Template in Go Template\nDESCRIPTION: Creates a comprehensive header section for Helm chart documentation. It combines multiple templates including headers, badges, description, homepage, requirements, and installation instructions into a standard format.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_7\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.baseHead\" -}}\n{{ template \"chart.header\" . }}\n\n{{ template \"chart.badges\" . }}\n\n{{ template \"chart.description\" . }}\n\n{{ template \"chart.homepageLine\" . }}\n\n{{ template \"chart.requirementsSection\" . }}\n\n{{ template \"tldr\" . }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: HTTP Request/Response Encoding and Decoding in Go\nDESCRIPTION: Defines functions for encoding/decoding HTTP requests, responses, and errors. These functions translate between the HTTP protocol and the internal operation types, handling serialization and error conditions.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/pkg/framework/README.md#2025-04-20_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc DecodeOperationRequest(ctx context.Context, r *http.Request) (Request, error) {\n\t// decode request\n}\n\nfunc EncodeOperationResponse(ctx context.Context, w http.ResponseWriter, response Response) error {\n\t// encode response\n}\n\nfunc EncodeOperationError(ctx context.Context, err error, w http.ResponseWriter) bool {\n\t// encode error\n\n  // return true if the error is considered \"handled\", false otherwise (error gets passed to the error handler)\n  return true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Badges Composite Template in Go Template\nDESCRIPTION: Creates a composite template that combines type, Kubernetes version, and ArtifactHub badges. This reusable template groups related badges to display consistent chart metadata across documentation.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_6\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.badges\" -}}\n{{ template \"chart.typeBadge\" . }} {{ template \"chart.kubeVersionBadge\" . }} {{ template \"chart.artifactHubBadge\" . }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Subjects\nDESCRIPTION: Command to configure the maximum number of subjects for seeding data.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/seeder.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmake SEEDER_MAX_SUBJECTS=100 seed\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Version Badge Template in Go Template\nDESCRIPTION: Creates a Kubernetes version badge using shields.io for Helm charts. It conditionally renders the required Kubernetes version as a badge image that can be embedded in Markdown documentation if the KubeVersion field is available.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_3\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.kubeVersionBadge\" -}}\n{{- if .KubeVersion -}}![kube version: {{ .KubeVersion }}](https://img.shields.io/badge/kube%20version-{{ .KubeVersion | replace \"-\" \"--\" }}-informational?style=flat-square){{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing Direnv on MacOS\nDESCRIPTION: Command to install direnv using Homebrew package manager on MacOS.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nbrew install direnv\n```\n\n----------------------------------------\n\nTITLE: Including Base Chart Template in Helm\nDESCRIPTION: Uses Helm's template directive to include the 'chart.base' template. This is a common pattern in Helm charts to reuse template components across different parts of the chart.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/benthos-collector/README.tmpl.md#2025-04-20_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ template \"chart.base\" . }}\n```\n\n----------------------------------------\n\nTITLE: Removing Test Pods Locally\nDESCRIPTION: Alternative command for removing the sample Pods when running the example locally.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete -f seed/pod.yaml\n```\n\n----------------------------------------\n\nTITLE: Conditional Service Deployment Notifications in Helm Template\nDESCRIPTION: A series of conditional blocks that display recommendations about using dedicated production instances for various services when they are enabled in the Values configuration.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/openmeter/templates/NOTES.txt#2025-04-20_snippet_0\n\nLANGUAGE: helm\nCODE:\n```\n{{ if .Values.postgresql.enabled }}\nIt is highly recommended to use your own Postgres for production deployments!\n{{- end }}\n{{- if .Values.clickhouse.enabled }}\nIt is highly recommended to use your own Clickhouse for production deployments!\n{{- end }}\n{{- if .Values.clickhouse.enabled }}\nIt is highly recommended to use your own ClickHouse for production deployments!\n{{- end }}\n{{- if .Values.kafka.enabled }}\nIt is highly recommended to use your own Kafka for production deployments!\n{{- end }}\n{{- if .Values.redis.enabled }}\nIt is highly recommended to use your own Redis for production deployments!\n{{- end }}\n{{- if .Values.svix.enabled }}\nIt is highly recommended to use your own Svix for production deployments!\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Deleting the Kubernetes Cluster\nDESCRIPTION: Command to delete the Kind Kubernetes cluster during cleanup.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment Configuration\nDESCRIPTION: Command to create an environment configuration file from the template, which should be edited to include OpenMeter instance details.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/http-server/README.md#2025-04-20_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncp .env.dist .env\n# edit .env and fill in the details\n```\n\n----------------------------------------\n\nTITLE: Installing Direnv from Binary\nDESCRIPTION: Command to install direnv directly from binary builds using curl.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sfL https://direnv.net/install.sh | bash\n```\n\n----------------------------------------\n\nTITLE: Publishing OpenMeter Python SDK to PyPI\nDESCRIPTION: Commands to publish the OpenMeter Python SDK to PyPI. It includes setting the PyPI token and using Poetry to build and publish the package.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/python/README.md#2025-04-20_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npoetry config pypi-token.pypi {your_pypi_api_token}\npoetry publish --build\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Billing Points Within a Period\nDESCRIPTION: Shows how multiple billing events within a single period are handled through progressive line splitting. Each split maintains the relationship to the original parent line while creating new valid lines for billing.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/billing/README.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n period.start              asOf1          asof2                period.end\nLine1 [status=split]         |--------------------------------------------------------|\nSplitLine1 [status=valid]    |------------------|\nSplitLine2 [status=valid]                       |---------------|\nSplitLine3 [status=valid]                                       |---------------------|\n```\n\n----------------------------------------\n\nTITLE: Installing OpenMeter Python SDK\nDESCRIPTION: Command to install the OpenMeter Python SDK using pip. The SDK is currently in preview mode.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/api/client/python/README.md#2025-04-20_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install openmeter\n```\n\n----------------------------------------\n\nTITLE: Customer Creation Response\nDESCRIPTION: JSON response showing the details of the newly created customer, including its ID which will be used to link the customer to Stripe.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/stripe-dev.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\"billingAddress\":{\"country\":\"US\"},\"createdAt\":\"2025-02-03T14:25:03.154256Z\",\"currency\":\"USD\",\"id\":\"01JK636MNJ1R9NKFA2VS62HVTF\",\"metadata\":null,\"name\":\"test\",\"updatedAt\":\"2025-02-03T14:25:03.154257Z\",\"usageAttribution\":{\"subjectKeys\":[\"test\"]}}\n```\n\n----------------------------------------\n\nTITLE: Docker Login to GitHub Container Registry\nDESCRIPTION: Command to authenticate with GitHub Container Registry using docker login.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker login ghcr.io\n```\n\n----------------------------------------\n\nTITLE: Subscription Addon Operations in Go\nDESCRIPTION: Implements functionality to convert subscription addons into diffable objects that can modify subscription specifications. Includes a wrapper for apply and restore implementations.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/openmeter/subscription/addon/diff/README.md#2025-04-20_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc GetDiffableFromAddon() // Creates a diffable object from a subscription addon\n\ntype diffable struct {\n    // Wrapper for apply and restore implementations\n    // for a single SubscriptionAddonInstance\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Cluster with Kind\nDESCRIPTION: Command to create a local Kubernetes cluster using Kind for testing purposes.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Implementing Event Deduplication in ksqlDB\nDESCRIPTION: Reference to the ksqlDB approach for deduplicating Kafka messages using windowed tables. This method counts event occurrences and only processes each unique event once, as detailed in the linked Confluent tutorial.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/decisions/0003-idempotency.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nSee [How to find distinct values in a stream of events](https://developer.confluent.io/tutorials/finding-distinct-events/ksql.html) for more details.\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Benthos Collector\nDESCRIPTION: Helm command to remove the Benthos collector from the Kubernetes cluster during cleanup.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/kubernetes-pod-exec-time/README.md#2025-04-20_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm delete --namespace benthos-collector benthos-collector\n```\n\n----------------------------------------\n\nTITLE: Defining TL;DR Installation Section Template in Go Template with Bash Commands\nDESCRIPTION: Creates a TL;DR section with Bash commands for quickly installing the Helm chart. It provides simple commands for installing the latest version or a specific version of the chart from the OCI registry.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_5\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"tldr\" -}}\n## TL;DR;\n\n```bash\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/{{ .Name }}\n```\n\nto install a specific version:\n\n```bash\nhelm install --generate-name --wait oci://ghcr.io/openmeterio/helm-charts/{{ .Name }} --version $VERSION\n```\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Seeding with Logging Enabled\nDESCRIPTION: Command to run the seeder with logging enabled to view generated events.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/docs/seeder.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake SEEDER_LOG=true seed\n```\n\n----------------------------------------\n\nTITLE: Defining Chart Base Template in Go Template\nDESCRIPTION: Creates a complete base template for Helm chart documentation. It extends the baseHead template by adding the values section to create a full documentation page with all necessary chart information.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_8\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.base\" -}}\n{{ template \"chart.baseHead\" . }}\n\n{{ template \"chart.valuesSection\" . }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository for Database Collection Example\nDESCRIPTION: Commands to clone the OpenMeter repository and navigate to the database collector example directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/database/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openmeterio/openmeter.git\ncd openmeter/examples/collectors/database\n```\n\n----------------------------------------\n\nTITLE: Defining Version Badge Template in Go Template\nDESCRIPTION: Creates a version badge using shields.io for Helm charts. It renders the chart version as a badge image that can be embedded in Markdown documentation.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.versionBadge\" -}}\n![version: {{ .Version }}](https://img.shields.io/badge/version-{{ .Version | replace \"-\" \"--\" }}-informational?style=flat-square)\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Cloning the OpenMeter Repository\nDESCRIPTION: Commands to clone the OpenMeter repository and navigate to the OpenTelemetry log collector example directory.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/examples/collectors/otel-log/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/openmeterio/openmeter.git\ncd openmeter/examples/collectors/otel-log\n```\n\n----------------------------------------\n\nTITLE: Defining ArtifactHub Badge Template in Go Template\nDESCRIPTION: Creates an ArtifactHub badge with a link to the chart's ArtifactHub page. This badge provides a direct link to the chart's repository on ArtifactHub for discovering more information and details.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_4\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.artifactHubBadge\" -}}\n[![artifact hub](https://img.shields.io/badge/artifact%20hub-{{ .Name | replace \"-\" \"--\" }}-informational?style=flat-square)](https://artifacthub.io/packages/helm/openmeter/{{ .Name }})\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenMeter Repository\nDESCRIPTION: This command clones the OpenMeter repository from GitHub and changes the directory to the deploy folder. It's the first step in setting up OpenMeter locally.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/README.md#2025-04-20_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:openmeterio/openmeter.git\ncd openmeter/deploy\n```\n\n----------------------------------------\n\nTITLE: Defining App Version Badge Template in Go Template\nDESCRIPTION: Creates an application version badge using shields.io for Helm charts. It conditionally renders the application version as a badge image that can be embedded in Markdown documentation if the AppVersion field is available.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_2\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.appVersionBadge\" -}}\n{{- if .AppVersion -}}![app version: {{ .AppVersion }}](https://img.shields.io/badge/app%20version-{{ .AppVersion | replace \"-\" \"--\" }}-informational?style=flat-square){{- end -}}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Package Manager\nDESCRIPTION: Command to install the Nix package manager using curl and the daemon option.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/README.md#2025-04-20_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install) --daemon\n```\n\n----------------------------------------\n\nTITLE: Defining Type Badge Template in Go Template\nDESCRIPTION: Creates a type badge using shields.io for Helm charts. It conditionally renders the chart type as a badge image that can be embedded in Markdown documentation if the Type field is available.\nSOURCE: https://github.com/openmeterio/openmeter/blob/main/deploy/charts/template.md#2025-04-20_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{- define \"chart.typeBadge\" -}}\n{{- if .Type -}}![type: {{ .Type }}](https://img.shields.io/badge/type-{{ .Type }}-informational?style=flat-square){{- end -}}\n{{- end -}}\n```"
  }
]