[
  {
    "owner": "duckdb",
    "repo": "duckdb",
    "content": "TITLE: Loading and Configuring DuckDB Extensions in CMake\nDESCRIPTION: This function handles the loading and configuration of DuckDB extensions. It supports various options for specifying source directories, Git repositories, and build settings. The function also manages extension versioning and registration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_28\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(duckdb_extension_load NAME)\n  # Parameter parsing\n  set(options DONT_LINK DONT_BUILD LOAD_TESTS APPLY_PATCHES)\n  set(oneValueArgs SOURCE_DIR INCLUDE_DIR TEST_DIR GIT_URL GIT_TAG SUBMODULES EXTENSION_VERSION LINKED_LIBS)\n  cmake_parse_arguments(duckdb_extension_load \"${options}\" \"${oneValueArgs}\" \"\" ${ARGN})\n\n  string(TOLOWER ${NAME} EXTENSION_NAME_LOWERCASE)\n  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n\n  # If extension was set already, we ignore subsequent calls\n  list (FIND DUCKDB_EXTENSION_NAMES ${EXTENSION_NAME_LOWERCASE} _index)\n  if (${_index} GREATER -1)\n    return()\n  endif()\n\n  # Running this function in whitelist mode will only build the extensions in the whitelist\n  if (${DUCKDB_EXTENSION_LOAD_WHITELIST_SET})\n    list (FIND DUCKDB_EXTENSION_LOAD_WHITELIST ${EXTENSION_NAME_LOWERCASE} _index)\n    if (${_index} EQUAL -1)\n      return()\n    endif()\n  endif()\n\n  list (FIND SKIP_EXTENSIONS ${EXTENSION_NAME_LOWERCASE} _index)\n  if (${_index} GREATER -1)\n    return()\n  endif()\n\n  # Remote Git extension\n  if (${duckdb_extension_load_DONT_BUILD})\n    register_extension(${NAME} \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"\" \"\" \"\" \"\" \"\" \"${duckdb_extension_load_EXTENSION_VERSION}\")\n  elseif (NOT \"${duckdb_extension_load_GIT_URL}\" STREQUAL \"\")\n    if (\"${duckdb_extension_load_GIT_TAG}\" STREQUAL \"\")\n      message(FATAL_ERROR, \"Git URL specified but no valid GIT_TAG was found for ${NAME} extension\")\n    endif()\n    register_external_extension(${NAME} \"${duckdb_extension_load_GIT_URL}\" \"${duckdb_extension_load_GIT_TAG}\" \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_LOAD_TESTS}\" \"${duckdb_extension_load_SOURCE_DIR}\" \"${duckdb_extension_load_INCLUDE_DIR}\" \"${duckdb_extension_load_TEST_DIR}\" \"${duckdb_extension_load_APPLY_PATCHES}\" \"${duckdb_extension_load_LINKED_LIBS}\" \"${duckdb_extension_load_SUBMODULES}\" \"${duckdb_extension_load_EXTENSION_VERSION}\")\n    if (NOT \"${duckdb_extension_load_EXTENSION_VERSION}\" STREQUAL \"\")\n      set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION \"${duckdb_extension_load_EXTENSION_VERSION}\" PARENT_SCOPE)\n    endif()\n  elseif (NOT \"${duckdb_extension_load_SOURCE_DIR}\" STREQUAL \"\")\n    # Version detection\n    if (\"${duckdb_extension_load_EXTENSION_VERSION}\" STREQUAL \"\")\n      duckdb_extension_generate_version(EXT_VERSION ${duckdb_extension_load_SOURCE_DIR})\n    else()\n      set(EXT_VERSION ${duckdb_extension_load_EXTENSION_VERSION})\n    endif()\n\n    # Local extension, custom path\n    message(STATUS \"Load extension '${NAME}' from '${duckdb_extension_load_SOURCE_DIR}' @ ${EXT_VERSION}\")\n\n    # If no include path specified, use default\n    if (\"${duckdb_extension_load_INCLUDE_DIR}\" STREQUAL \"\")\n      set(INCLUDE_PATH_DEFAULT \"${duckdb_extension_load_SOURCE_DIR}/src/include\")\n    else()\n      set(INCLUDE_PATH_DEFAULT ${duckdb_extension_load_INCLUDE_DIR})\n    endif()\n\n    # If no test path specified, use default\n    if (\"${duckdb_extension_load_TEST_DIR}\" STREQUAL \"\")\n      set(TEST_PATH_DEFAULT \"${duckdb_extension_load_SOURCE_DIR}/test/sql\")\n    else()\n      set(TEST_PATH_DEFAULT ${duckdb_extension_load_TEST_DIR})\n    endif()\n\n    register_extension(${NAME} \"${duckdb_extension_load_DONT_LINK}\" \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_LOAD_TESTS}\" \"${duckdb_extension_load_SOURCE_DIR}\" \"${INCLUDE_PATH_DEFAULT}\" \"${TEST_PATH_DEFAULT}\" \"${duckdb_extension_load_LINKED_LIBS}\" \"${EXT_VERSION}\")\n  elseif(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/extension_external/${NAME})\n    # Local extension, default path\n    message(STATUS \"Load extension '${NAME}' from '${CMAKE_CURRENT_SOURCE_DIR}/extension_external' @ ${duckdb_extension_load_EXTENSION_VERSION}\")\n    register_extension(${NAME} ${duckdb_extension_load_DONT_LINK} \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_LOAD_TESTS}\"  \"${CMAKE_CURRENT_SOURCE_DIR}/extension_external/${NAME}\" \"${CMAKE_CURRENT_SOURCE_DIR}/extension_external/${NAME}/src/include\" \"${CMAKE_CURRENT_SOURCE_DIR}/extension_external/${NAME}/test/sql\" \"${duckdb_extension_load_LINKED_LIBS}\" \"${duckdb_extension_load_EXTENSION_VERSION}\")\n  else()\n    # For in-tree extensions of the default path, we set the extension version to GIT_COMMIT_HASH by default\n    if (\"${duckdb_extension_load_EXTENSION_VERSION}\" STREQUAL \"\")\n      set(duckdb_extension_load_EXTENSION_VERSION ${DUCKDB_NORMALIZED_VERSION})\n    endif()\n\n    # Local extension, default path\n    message(STATUS \"Load extension '${NAME}' from '${CMAKE_CURRENT_SOURCE_DIR}/extensions' @ ${duckdb_extension_load_EXTENSION_VERSION}\")\n\n    register_extension(${NAME} ${duckdb_extension_load_DONT_LINK} \"${duckdb_extension_load_DONT_BUILD}\" \"${duckdb_extension_load_LOAD_TESTS}\" \"${CMAKE_CURRENT_SOURCE_DIR}/extension/${NAME}\" \"${CMAKE_CURRENT_SOURCE_DIR}/extension/${NAME}/include\" \"${CMAKE_CURRENT_SOURCE_DIR}/extension/${NAME}/test/sql\" \"${duckdb_extension_load_LINKED_LIBS}\" \"${duckdb_extension_load_EXTENSION_VERSION}\")\n  endif()\n\n  # Propagate variables set by register_extension\n  set(DUCKDB_EXTENSION_NAMES ${DUCKDB_EXTENSION_NAMES} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LOAD_TESTS ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LOAD_TESTS} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_TEST_PATH ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_TEST_PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LINKED_LIBS ${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LINKED_LIBS} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION \"${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Generating Version Information for DuckDB Extensions in CMake\nDESCRIPTION: This function generates version information for a DuckDB extension by using Git commands to retrieve commit hash and tag information. It handles different scenarios such as being inside a Git repository or not.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_27\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(duckdb_extension_generate_version OUTPUT_VAR WORKING_DIR)\n  find_package(Git)\n  if(Git_FOUND)\n    execute_process(\n            COMMAND ${GIT_EXECUTABLE} rev-parse --is-inside-work-tree\n            WORKING_DIRECTORY ${WORKING_DIR}\n            OUTPUT_VARIABLE IS_IN_GIT_DIR\n            ERROR_QUIET\n    )\n  endif()\n  if (IS_IN_GIT_DIR)\n    execute_process(\n            COMMAND ${GIT_EXECUTABLE} log -1 --format=%h\n            WORKING_DIRECTORY ${WORKING_DIR}\n            RESULT_VARIABLE GIT_RESULT\n            OUTPUT_VARIABLE GIT_COMMIT_HASH\n            OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if (GIT_RESULT)\n      message(FATAL_ERROR \"git is available (at ${GIT_EXECUTABLE}) but has failed to execute 'log -1 --format=%h'.\")\n    endif()\n    execute_process(\n            COMMAND ${GIT_EXECUTABLE} describe --tags --always --match '${VERSIONING_TAG_MATCH}'\n            WORKING_DIRECTORY ${WORKING_DIR}\n            RESULT_VARIABLE GIT_RESULT\n            OUTPUT_VARIABLE GIT_DESCRIBE\n            OUTPUT_STRIP_TRAILING_WHITESPACE)\n    if (GIT_RESULT)\n      set(VERSION \"${GIT_COMMIT_HASH}\")\n    elseif (GIT_DESCRIBE MATCHES \"^v[0-9]+\\.[0-9]+\\.[0-9]+(-[a-zA-Z0-9\\.]+)?$\")\n      # We are on a valid SemVer version in the format v{MAJOR}.{MINOR}.{PATH}(-{RC})\n      set(VERSION \"${GIT_DESCRIBE}\")\n    else()\n      set(VERSION \"${GIT_COMMIT_HASH}\")\n    endif()\n  else()\n    # No git found, we set empty string\n    set(VERSION \"\")\n  endif()\n\n  # Propagate the version\n  set(${OUTPUT_VAR} ${VERSION} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB from Source\nDESCRIPTION: Installing DuckDB by cloning the repository and using pip in the Python package directory\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/pythonpkg\npython3 -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Including Third-Party Libraries in DuckDB CMake\nDESCRIPTION: Sets up include directories for various third-party libraries used in the DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(src/include)\ninclude_directories(third_party/fsst)\ninclude_directories(third_party/fmt/include)\ninclude_directories(third_party/hyperloglog)\ninclude_directories(third_party/fastpforlib)\ninclude_directories(third_party/skiplist)\ninclude_directories(third_party/fast_float)\ninclude_directories(third_party/re2)\ninclude_directories(third_party/miniz)\ninclude_directories(third_party/utf8proc/include)\ninclude_directories(third_party/concurrentqueue)\ninclude_directories(third_party/pcg)\ninclude_directories(third_party/tdigest)\ninclude_directories(third_party/mbedtls/include)\ninclude_directories(third_party/jaro_winkler)\ninclude_directories(third_party/yyjson/include)\ninclude_directories(third_party/zstd/include)\n```\n\n----------------------------------------\n\nTITLE: Basic DuckDB Operations in Julia\nDESCRIPTION: Demonstrates core database operations including connection creation, table creation, data insertion using prepared statements, and querying\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: julia\nCODE:\n```\n# create a new in-memory database\ncon = DBInterface.connect(DuckDB.DB, \":memory:\")\n\n# create a table\nDBInterface.execute(con, \"CREATE TABLE integers(i INTEGER)\")\n\n# insert data using a prepared statement\nstmt = DBInterface.prepare(con, \"INSERT INTO integers VALUES(?)\")\nDBInterface.execute(stmt, [42])\n\n# query the database\nresults = DBInterface.execute(con, \"SELECT 42 a\")\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Implementing DuckDB with Pyodide in Browser\nDESCRIPTION: Complete HTML implementation showing how to load Pyodide, install DuckDB package, and execute SQL queries. Demonstrates creating a CSV file in memory and running a simple COUNT query against it.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/pyodide.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n  </head>\n  <body>\n    <script type=\"text/javascript\" src=\"https://cdn.jsdelivr.net/pyodide/v0.25.1/full/pyodide.js\"></script>\n    <script type=\"text/javascript\">\n      async function main() {\n        let pyodide = await loadPyodide();\n        await pyodide.loadPackage(\"micropip\");\n        const micropip = pyodide.pyimport(\"micropip\");\n        await micropip.install([\"https://pyodide.duckdb.org/duckdb-0.10.2.dev479-cp311-cp311-emscripten_3_1_46_wasm32.whl\"]);\n        await pyodide.runPython(`\nimport duckdb\n\ndata = \"\"\"\\\\n\na,b,c\n1,2,3\n4,5,6\n7,8,9\"\"\"\n\nwith open('data.csv', mode=\"w\") as f:\n    f.write(data)\n\nprint(duckdb.sql(\"SELECT COUNT(*) FROM 'data.csv'\"))\n      `);\n      }\n      main();\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Building C-API Loadable Extension Functions in CMake\nDESCRIPTION: Functions for building extensions using the C API interface, supporting both stable and unstable versions with version tracking.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_23\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(build_loadable_extension_capi NAME CAPI_VERSION_MAJOR CAPI_VERSION_MINOR CAPI_VERSION_PATCH PARAMETERS)\n  set(FILES \"${ARGV}\")\n  list(REMOVE_AT FILES 0 1 2 3)\n  set(CAPI_VERSION v${CAPI_VERSION_MAJOR}.${CAPI_VERSION_MINOR}.${CAPI_VERSION_PATCH})\n  build_loadable_extension_capi_internal(${NAME} ${CAPI_VERSION} \"C_STRUCT\" ${FILES})\n  target_compile_definitions(${NAME}_loadable_extension PRIVATE DUCKDB_EXTENSION_API_VERSION_MAJOR=${CAPI_VERSION_MAJOR})\n  target_compile_definitions(${NAME}_loadable_extension PRIVATE DUCKDB_EXTENSION_API_VERSION_MINOR=${CAPI_VERSION_MINOR})\n  target_compile_definitions(${NAME}_loadable_extension PRIVATE DUCKDB_EXTENSION_API_VERSION_PATCH=${CAPI_VERSION_PATCH})\n  target_compile_definitions(${NAME}_loadable_extension PRIVATE DUCKDB_EXTENSION_NAME=${NAME})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: External Extension Registration Macro in CMake\nDESCRIPTION: CMake macro for downloading and registering external DuckDB extensions from Git repositories. Handles version generation, patching, and path configuration before calling the internal registration function.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_26\n\nLANGUAGE: cmake\nCODE:\n```\nmacro(register_external_extension NAME URL COMMIT DONT_LINK DONT_BUILD LOAD_TESTS PATH INCLUDE_PATH TEST_PATH APPLY_PATCHES LINKED_LIBS SUBMODULES EXTENSION_VERSION)\n  include(FetchContent)\n  if (${APPLY_PATCHES})\n    set(PATCH_COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/scripts/apply_extension_patches.py ${CMAKE_SOURCE_DIR}/.github/patches/extensions/${NAME}/)\n  endif()\n  FETCHCONTENT_DECLARE(\n          ${NAME}_extension_fc\n          GIT_REPOSITORY ${URL}\n          GIT_TAG ${COMMIT}\n          GIT_SUBMODULES \"${SUBMODULES}\"\n          PATCH_COMMAND ${PATCH_COMMAND}\n  )\n  FETCHCONTENT_POPULATE(${NAME}_EXTENSION_FC)\n\n  # Autogenerate version tag if not provided\n  if (\"${EXTENSION_VERSION}\" STREQUAL \"\")\n    duckdb_extension_generate_version(EXTERNAL_EXTENSION_VERSION ${${NAME}_extension_fc_SOURCE_DIR})\n  else()\n    set(EXTERNAL_EXTENSION_VERSION \"${EXTENSION_VERSION}\")\n  endif()\n\n  message(STATUS \"Load extension '${NAME}' from ${URL} @ ${EXTERNAL_EXTENSION_VERSION}\")\n\n  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION \"${EXTERNAL_EXTENSION_VERSION}\" PARENT_SCOPE)\n\n  if (\"${INCLUDE_PATH}\" STREQUAL \"\")\n    set(INCLUDE_FULL_PATH \"${${NAME}_extension_fc_SOURCE_DIR}/src/include\")\n  else()\n    set(INCLUDE_FULL_PATH \"${${NAME}_extension_fc_SOURCE_DIR}/${INCLUDE_PATH}\")\n  endif()\n\n  if (\"${TEST_PATH}\" STREQUAL \"\")\n    set(TEST_FULL_PATH \"${${NAME}_extension_fc_SOURCE_DIR}/test/sql\")\n  else()\n    set(TEST_FULL_PATH \"${${NAME}_extension_fc_SOURCE_DIR}/${TEST_PATH}\")\n  endif()\n\n  register_extension(${NAME} ${DONT_LINK} ${DONT_BUILD} ${LOAD_TESTS} ${${NAME}_extension_fc_SOURCE_DIR}/${PATH} \"${INCLUDE_FULL_PATH}\" \"${TEST_FULL_PATH}\" \"${LINKED_LIBS}\" \"${EXTERNAL_EXTENSION_VERSION}\")\nendmacro()\n```\n\n----------------------------------------\n\nTITLE: Configuring and Building Core Functions Extension in CMake\nDESCRIPTION: This CMake script configures the build process for the Core Functions Extension in DuckDB. It sets up include directories, adds subdirectories for aggregate and scalar functions, defines source files, and creates both static and loadable extension targets with appropriate settings and dependencies.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.29)\n\nproject(CoreFunctionsExtension)\n\ninclude_directories(include)\n\nadd_subdirectory(aggregate)\nadd_subdirectory(scalar)\n\nset(CORE_FUNCTION_FILES ${CORE_FUNCTION_FILES} core_functions_extension.cpp\n                        function_list.cpp lambda_functions.cpp)\n\nbuild_static_extension(core_functions ${CORE_FUNCTION_FILES})\nset(PARAMETERS \"-warnings\")\nbuild_loadable_extension(core_functions ${PARAMETERS} ${CORE_FUNCTION_FILES})\ntarget_link_libraries(core_functions_loadable_extension duckdb_skiplistlib)\n\ninstall(\n  TARGETS core_functions_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Installing with Virtualenv\nDESCRIPTION: Setting up and installing DuckDB in a virtual environment using Python 3.12\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd tools/pythonpkg\nvirtualenv .venv --python=python3.12\nsource .venv/bin/activate\npython3 -m pip install .\n```\n\n----------------------------------------\n\nTITLE: Cloud Storage Setup Commands\nDESCRIPTION: Commands for setting up DuckDB package files in cloud storage with correct versioning\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install build\ncd tools/pythonpkg\nexport SETUPTOOLS_SCM_PRETEND_VERSION=$(python3 -m setuptools_scm)\npyproject-build . --sdist\ncd ../.. \n```\n\n----------------------------------------\n\nTITLE: Configuring Extension Static Build Optimization\nDESCRIPTION: Enables garbage collection section flags for static extension builds to discard unused functions and data. Sets compiler-specific flags for GNU and MSVC to optimize binary size during linking.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n# This option allows --gc-sections flag during extension linking to discard any unused functions or data\nif (EXTENSION_STATIC_BUILD AND \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n  if (\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -ffunction-sections -fdata-sections\")\n  elseif(WIN32 AND MVSC)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} /Gy\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: DuckDB Python Dependencies Requirements\nDESCRIPTION: Specifies the required Python packages and minimum version constraints for DuckDB. Includes core dependencies like numpy and pybind11, testing frameworks like pytest, data processing libraries like pandas and pyarrow, and machine learning frameworks like torch and tensorflow.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/requirements-dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumpy>=1.14\npybind11>=2.9.0\nsetuptools_scm>=6.3\nsetuptools>=58\npytest\npandas\npytest-timeout\nmypy<=1.13\npsutil>=5.9.0\nrequests>=2.26\nfsspec\npyarrow>=8.0\ntorch\npolars\nadbc_driver_manager\ntensorflow\ncxxheaderparser\npcpp\npyspark\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform-Specific Settings for DuckDB\nDESCRIPTION: Configures platform detection and specific settings for DuckDB builds. Detects operating system (OSX, Windows, Linux) and architecture (arm64, amd64, i386), while supporting explicit platform overrides.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nif (DUCKDB_EXPLICIT_PLATFORM)\n    add_definitions(-DDUCKDB_CUSTOM_PLATFORM=${DUCKDB_EXPLICIT_PLATFORM})\nendif()\n\noption (WASM_ENABLED \"Are DuckDB-Wasm extensions build enabled\" FALSE)\nif (DEFINED ENV{WASM_EXTENSIONS})\n     set(WASM_ENABLED \"$ENV{WASM_EXTENSIONS}\")\nendif()\noption (MUSL_ENABLED \"Are Musl extensions build enabled\" FALSE)\nif (DEFINED ENV{DUCKDB_PLATFORM})\n     if (\"$ENV{DUCKDB_PLATFORM}\" STREQUAL \"linux_amd64_musl\")\n          set(MUSL_ENABLED ON)\n     endif()\nendif()\n\nif (MUSL_ENABLED)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -D__MUSL_ENABLED__\")\nendif()\n\nset(M32_FLAG \"\")\nif(FORCE_32_BIT)\n  set(M32_FLAG \" -m32 \")\nendif()\n\nset(OS_NAME \"unknown\")\nset(OS_ARCH \"amd64\")\n\nstring(REGEX MATCH \"(arm64|aarch64)\" IS_ARM \"${CMAKE_SYSTEM_PROCESSOR}\")\nif(IS_ARM)\n  set(OS_ARCH \"arm64\")\nelseif(FORCE_32_BIT)\n  set(OS_ARCH \"i386\")\nendif()\n\nif(APPLE)\n  set(OS_NAME \"osx\")\nendif()\nif(WIN32)\n  set(OS_NAME \"windows\")\nendif()\nif(UNIX AND NOT APPLE)\n  set(OS_NAME \"linux\") # sorry BSD\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for DuckDB C++ Project\nDESCRIPTION: This CMake configuration sets up a C++ project named 'example' that uses the DuckDB library. It specifies CMake version requirements, sets C++11 as the standard, includes DuckDB headers, links against the DuckDB library, and defines the executable target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/examples/embedded-c++/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\nproject(example-c++)\n\nset(CMAKE_CXX_STANDARD 11)\n\ninclude_directories(../../src/include)\nlink_directories(../../build/release/src)\n\nadd_executable(example main.cpp)\ntarget_link_libraries(example duckdb)\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB in Julia\nDESCRIPTION: Shows how to install and import the DuckDB package in Julia using the package manager\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: julia\nCODE:\n```\npkg> add DuckDB\n\njulia> using DuckDB\n```\n\n----------------------------------------\n\nTITLE: Building Standard Loadable Extension Function in CMake\nDESCRIPTION: Helper function to build standard C++ loadable extensions with default parameters and version handling.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_22\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(build_loadable_extension NAME PARAMETERS)\n  # all parameters after name\n  set(FILES \"${ARGV}\")\n  list(REMOVE_AT FILES 0 1)\n  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n\n  build_loadable_extension_directory(${NAME} \"CPP\" \"extension/${NAME}\" \"${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION}\" \"\" \"${PARAMETERS}\" ${FILES})\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extension Build with CMake\nDESCRIPTION: CMake configuration file that sets up build parameters for a DuckDB extension. It includes version requirements, project setup, extension naming, and conditional compilation based on API stability preference. The configuration supports both stable and unstable C API versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/demo_capi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(DemoCapiExtension)\n\ninclude_directories(include)\n\n# Configure extension: the minimum CAPI version where the extension still\n# compiles should be chosen here\nset(EXTENSION_NAME demo_capi)\n\nset(EXTENSION_FILES add_numbers.cpp capi_demo.cpp)\n\noption(\n  USE_UNSTABLE_C_API\n  \"Use the unstable C Extension API (extension will be tied to exact DuckDB version)\"\n  TRUE)\n\nif(USE_UNSTABLE_C_API)\n  build_loadable_extension_capi_unstable(${EXTENSION_NAME} ${EXTENSION_FILES})\nelse()\n  # Minimum supported DuckDB version\n  set(CAPI_MAJOR 1)\n  set(CAPI_MINOR 2)\n  set(CAPI_PATCH 0)\n  build_loadable_extension_capi(${EXTENSION_NAME} ${CAPI_MAJOR} ${CAPI_MINOR}\n                                ${CAPI_PATCH} ${EXTENSION_FILES})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Querying a Delta table from S3 in SQL\nDESCRIPTION: Example of using delta_scan to query a Delta table stored in S3. This is the basic usage pattern that will trigger auto-loading of the extension.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/README.md#2025-04-22_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nFROM delta_scan('s3://some/delta/table');\n```\n\n----------------------------------------\n\nTITLE: Configuring JeMalloc Source Files and Build Settings in CMake\nDESCRIPTION: Defines the JeMalloc library build configuration including source files, compilation standards, and warning settings. Includes an optional C++ integration component controlled by OVERRIDE_NEW_DELETE flag. Sets up the library as an object library with C99 standard compliance.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n\nset(JEMALLOC_C_FILES\n  src/jemalloc.c\n  src/arena.c\n  src/background_thread.c\n  src/base.c\n  src/batcher.c\n  src/bin.c\n  src/bin_info.c\n  src/bitmap.c\n  src/buf_writer.c\n  src/cache_bin.c\n  src/ckh.c\n  src/counter.c\n  src/ctl.c\n  src/decay.c\n  src/div.c\n  src/ecache.c\n  src/edata.c\n  src/edata_cache.c\n  src/ehooks.c\n  src/emap.c\n  src/eset.c\n  src/exp_grow.c\n  src/extent.c\n  src/extent_dss.c\n  src/extent_mmap.c\n  src/fxp.c\n  src/san.c\n  src/san_bump.c\n  src/hook.c\n  src/hpa.c\n  src/hpa_hooks.c\n  src/hpdata.c\n  src/inspect.c\n  src/large.c\n  src/log.c\n  src/malloc_io.c\n  src/mutex.c\n  src/nstime.c\n  src/pa.c\n  src/pa_extra.c\n  src/pai.c\n  src/pac.c\n  src/pages.c\n  src/peak_event.c\n  src/prof.c\n  src/prof_data.c\n  src/prof_log.c\n  src/prof_recent.c\n  src/prof_stats.c\n  src/prof_sys.c\n  src/psset.c\n  src/rtree.c\n  src/safety_check.c\n  src/sc.c\n  src/sec.c\n  src/stats.c\n  src/sz.c\n  src/tcache.c\n  src/test_hooks.c\n  src/thread_event.c\n  src/ticker.c\n  src/tsd.c\n  src/util.c\n  src/witness.c\n  src/zone.c)\n\nif(OVERRIDE_NEW_DELETE)\n    set(JEMALLOC_C_FILES ${JEMALLOC_C_FILES} src/jemalloc_cpp.cpp)\nendif()\n\nadd_library(jemalloc OBJECT ${JEMALLOC_C_FILES})\n\nset_property(TARGET jemalloc PROPERTY C_STANDARD 99)\n\nset(JEMALLOC_OBJECT_FILES\n    ${JEMALLOC_OBJECT_FILES} $<TARGET_OBJECTS:jemalloc>\n    PARENT_SCOPE)\n\ndisable_target_warnings(jemalloc)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Extension Source Files\nDESCRIPTION: Defines the core source files for the Parquet extension including readers, writers, and utility components.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(decoder)\nadd_subdirectory(reader)\nadd_subdirectory(writer)\nset(PARQUET_EXTENSION_FILES\n    ${PARQUET_EXTENSION_FILES}\n    column_reader.cpp\n    column_writer.cpp\n    parquet_crypto.cpp\n    parquet_extension.cpp\n    parquet_float16.cpp\n    parquet_metadata.cpp\n    parquet_reader.cpp\n    parquet_statistics.cpp\n    parquet_timestamp.cpp\n    parquet_writer.cpp\n    serialize_parquet.cpp\n    zstd_file_system.cpp\n    geo_parquet.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Swift Dependency in Package.swift\nDESCRIPTION: This snippet shows how to add DuckDB Swift as a dependency in a Swift package manifest file. It specifies the package URL and version constraint.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/swift/duckdb-swift/README.md#2025-04-22_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n.package(url: \"https://github.com/duckdb/duckdb-swift\", .upToNextMajor(from: .init(1, 0, 0))),\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Build for DuckDB C Example\nDESCRIPTION: Sets up a CMake build configuration for a C example project that links against the DuckDB library. Specifies minimum CMake version, includes necessary headers, and configures build targets and dependencies.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/examples/embedded-c/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\nproject(example-c)\n\ninclude_directories(../../src/include)\nlink_directories(../../build/release/src)\n\nadd_executable(example main.c)\ntarget_link_libraries(example duckdb)\n```\n\n----------------------------------------\n\nTITLE: Window Function Implementation for DuckDB Aggregates\nDESCRIPTION: The window operation computes windowed aggregate values, allowing optimization for specific aggregates. It uses frame bounds to determine which rows to include.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nwindow(Vector inputs[], const ValidityMask &filter,\n       AggregateInputData &info, idx_t ninputs, State *state,\n       const FrameBounds &frame, const FrameBounds &prev, Vector &result, idx_t rid,\n       idx_t bias)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for JemallocExtension in DuckDB\nDESCRIPTION: This CMake script configures the build process for the Jemalloc extension in DuckDB. It sets the minimum CMake version, defines the project, includes necessary directories, builds the static extension, and specifies installation targets. The script focuses on creating a static library for the Jemalloc extension.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(JemallocExtension)\n\ninclude_directories(include)\ninclude_directories(jemalloc/include)\n\nadd_subdirectory(jemalloc)\n\nset(JEMALLOC_EXTENSION_FILES jemalloc_extension.cpp ${JEMALLOC_OBJECT_FILES})\n\nbuild_static_extension(jemalloc ${JEMALLOC_EXTENSION_FILES})\n# we do not do build_loadable_extension here because jemalloc is static-only\n\ninstall(\n  TARGETS jemalloc_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Exception Handling and Symbol Export\nDESCRIPTION: Controls explicit C++ exception handling and dynamic symbol export. These options enable explicit exception handling in build configurations and control symbol visibility for debugging and dynamic loading.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\noption(EXPLICIT_EXCEPTIONS \"Explicitly enable C++ exceptions.\" FALSE)\nif(${EXPLICIT_EXCEPTIONS})\n  set(CXX_EXTRA \"${CXX_EXTRA} -fexceptions\")\nendif()\n\noption(EXPORT_DYNAMIC_SYMBOLS \"Export dynamic symbols.\" FALSE)\nif(${EXPORT_DYNAMIC_SYMBOLS})\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -rdynamic\")\nendif()\n\nset(VERSIONING_TAG_MATCH \"v*.*.*\")\n```\n\n----------------------------------------\n\nTITLE: Building Extension Loader Name List and Body\nDESCRIPTION: Generates the extension loader code by constructing lists of extension names and their loading logic. Converts snake_case extension names to CamelCase for class names.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(EXT_LOADER_NAME_LIST \"\")\nset(EXT_LOADER_BODY \"\")\nforeach(EXT_NAME IN LISTS STATICALLY_LINKED_EXTENSIONS)\n  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n  if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n\n    # Assumes lowercase input!\n    string(REPLACE \"_\" \";\" EXT_NAME_SPLIT ${EXT_NAME})\n    set(EXT_NAME_CAMELCASE \"\")\n    foreach(EXT_NAME_PART IN LISTS EXT_NAME_SPLIT)\n      string(SUBSTRING ${EXT_NAME_PART} 0 1 FIRST_LETTER)\n      string(SUBSTRING ${EXT_NAME_PART} 1 -1 REMAINDER)\n      string(TOUPPER ${FIRST_LETTER} FIRST_LETTER)\n      set(EXT_NAME_CAMELCASE \"${EXT_NAME_CAMELCASE}${FIRST_LETTER}${REMAINDER}\")\n    endforeach()\n\n    set(EXT_LOADER_NAME_LIST \"${EXT_LOADER_NAME_LIST},\\n\\t\\\"${EXT_NAME}\\\"\")\n    set(EXT_LOADER_BODY\n        \"${EXT_LOADER_BODY}\\  if (extension==\\\"${EXT_NAME}\\\") {\\n      db.LoadStaticExtension<${EXT_NAME_CAMELCASE}Extension>();\\n      return true;\\n  }\\n\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB String Functions Library Build\nDESCRIPTION: CMake configuration that creates a library target for DuckDB core string functions. The configuration includes source files for various string operations like pattern matching, encoding, formatting, and string manipulations. The built objects are added to the parent scope's CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/string/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_string\n  OBJECT\n  starts_with.cpp\n  jaccard.cpp\n  levenshtein.cpp\n  damerau_levenshtein.cpp\n  bar.cpp\n  printf.cpp\n  replace.cpp\n  hamming.cpp\n  instr.cpp\n  ascii.cpp\n  reverse.cpp\n  url_encode.cpp\n  parse_path.cpp\n  left_right.cpp\n  to_base.cpp\n  pad.cpp\n  trim.cpp\n  format_bytes.cpp\n  hex.cpp\n  repeat.cpp\n  translate.cpp\n  chr.cpp\n  unicode.cpp\n  jaro_winkler.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_string>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running Julia Package Tests\nDESCRIPTION: Commands for running the test suite, either complete or specific test files\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./test.sh\n\n./test.sh test_connection.jl\n```\n\n----------------------------------------\n\nTITLE: Querying External Files in DuckDB SQL\nDESCRIPTION: Demonstrates basic SQL queries to import and read data directly from CSV and Parquet files in DuckDB. Shows the simple syntax for referencing external files in the FROM clause.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM 'myfile.csv';\nSELECT * FROM 'myfile.parquet';\n```\n\n----------------------------------------\n\nTITLE: Simple Update Operation for DuckDB Aggregates\nDESCRIPTION: The simple_update operation accumulates all input values into a single State object, optimized for queries without GROUP BY clauses.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nsimple_update(Vector inputs[], AggregateInputData &info, idx_t ninputs, State *state, idx_t count)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extension Build Process in CMake\nDESCRIPTION: This section sets up the build process for DuckDB extensions, including handling Windows DLL export symbols, logging loaded extensions, and including various configuration files for both in-tree and out-of-tree extensions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_29\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXPORT_DLL_SYMBOLS})\n  # For Windows DLL export symbols\n  add_definitions(-DDUCKDB_BUILD_LIBRARY)\nendif()\n\n# Log extensions that are built by directly passing cmake variables\nforeach(EXT IN LISTS DUCKDB_EXTENSION_NAMES)\n  if (NOT \"${EXT}\" STREQUAL \"\")\n    string(TOUPPER ${EXT} EXTENSION_NAME_UPPERCASE)\n    message(STATUS \"Load extension '${EXT}' from '${DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH}'\")\n  endif()\nendforeach()\n\n# Load extensions passed through cmake config var\nforeach(EXT IN LISTS BUILD_EXTENSIONS)\n  if(NOT \"${EXT}\" STREQUAL \"\")\n    duckdb_extension_load(${EXT})\n  endif()\nendforeach()\n\nif (NOT \"${CORE_EXTENSIONS}\" STREQUAL \"\")\n    SET(DUCKDB_EXTENSION_LOAD_WHITELIST ${CORE_EXTENSIONS})\n    SET(DUCKDB_EXTENSION_LOAD_WHITELIST_SET 1)\n    include(${CMAKE_CURRENT_SOURCE_DIR}/.github/config/out_of_tree_extensions.cmake)\n    include(${CMAKE_CURRENT_SOURCE_DIR}/.github/config/in_tree_extensions.cmake)\n    SET(DUCKDB_EXTENSION_LOAD_WHITELIST \"\")\n    SET(DUCKDB_EXTENSION_LOAD_WHITELIST_SET 0)\nendif()\n\n# Custom extension configs passed in DUCKDB_EXTENSION_CONFIGS parameter\nforeach(DUCKDB_EXTENSION_CONFIG IN LISTS DUCKDB_EXTENSION_CONFIGS)\n  if (NOT \"${DUCKDB_EXTENSION_CONFIG}\" STREQUAL \"\")\n    include(${DUCKDB_EXTENSION_CONFIG})\n  endif()\nendforeach()\n\n# Local extension config\nif (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/extension/extension_config_local.cmake)\n  include(${CMAKE_CURRENT_SOURCE_DIR}/extension/extension_config_local.cmake)\nendif()\n\n# Load client specific config\nif(BUILD_PYTHON)\n  include(${CMAKE_CURRENT_SOURCE_DIR}/tools/pythonpkg/duckdb_extension_config.cmake)\nendif()\n\n# Load base extension config\ninclude(${CMAKE_CURRENT_SOURCE_DIR}/extension/extension_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for TPC-DS Extension in DuckDB\nDESCRIPTION: Sets up the CMake project for the TPC-DS extension, including version requirements, project name, and directory inclusions. It also adds the dsdgen subdirectory and defines build targets for static and loadable extensions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpcds/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(TpcdsExtension)\n\ninclude_directories(include)\ninclude_directories(dsdgen/include)\nadd_subdirectory(dsdgen)\n\nbuild_static_extension(tpcds tpcds_extension.cpp ${DSDGEN_OBJECT_FILES})\nset(PARAMETERS \"-warnings\")\nbuild_loadable_extension(tpcds ${PARAMETERS} tpcds_extension.cpp\n                         ${DSDGEN_OBJECT_FILES})\n\ninstall(\n  TARGETS tpcds_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: DuckDB Build Commands\nDESCRIPTION: Make commands for building DuckDB with different configurations including debug mode and parallel builds using Ninja.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake\nmake debug\nGEN=ninja make\nCMAKE_BUILD_PARALLEL_LEVEL=4 GEN=ninja make\nCMAKE_BUILD_PARALLEL_LEVEL=$(nproc)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scalar Function in C++\nDESCRIPTION: Pattern for implementing a scalar function in DuckDB's C++ codebase. The GetFunction method should return a ScalarFunction object that represents the function's implementation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nScalarFunction DateDiffFun::GetFunction() {\n\treturn ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Common Library for DuckDB in CMake\nDESCRIPTION: This CMake script creates an object library named 'duckdb_icu_common' by compiling a large list of ICU source files. It then adds the resulting object files to the ICU_LIBRARY_FILES variable for use in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/third_party/icu/common/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_icu_common\n  OBJECT\n  appendable.cpp\n  bmpset.cpp\n  brkeng.cpp\n  brkiter.cpp\n  bytesinkutil.cpp\n  bytestream.cpp\n  bytestrie.cpp\n  bytestriebuilder.cpp\n  bytestrieiterator.cpp\n  caniter.cpp\n  characterproperties.cpp\n  chariter.cpp\n  charstr.cpp\n  cmemory.cpp\n  cstr.cpp\n  cstring.cpp\n  cwchar.cpp\n  dictbe.cpp\n  dictionarydata.cpp\n  dtintrv.cpp\n  edits.cpp\n  errorcode.cpp\n  filteredbrk.cpp\n  filterednormalizer2.cpp\n  icudataver.cpp\n  icuplug.cpp\n  loadednormalizer2impl.cpp\n  localebuilder.cpp\n  localematcher.cpp\n  localeprioritylist.cpp\n  locavailable.cpp\n  locbased.cpp\n  locdispnames.cpp\n  locdistance.cpp\n  locdspnm.cpp\n  locid.cpp\n  loclikely.cpp\n  loclikelysubtags.cpp\n  locresdata.cpp\n  locutil.cpp\n  lsr.cpp\n  messagepattern.cpp\n  normalizer2.cpp\n  normalizer2impl.cpp\n  normlzr.cpp\n  parsepos.cpp\n  patternprops.cpp\n  pluralmap.cpp\n  propname.cpp\n  propsvec.cpp\n  punycode.cpp\n  rbbi.cpp\n  rbbi_cache.cpp\n  rbbidata.cpp\n  rbbinode.cpp\n  rbbirb.cpp\n  rbbiscan.cpp\n  rbbisetb.cpp\n  rbbistbl.cpp\n  rbbitblb.cpp\n  resbund.cpp\n  resbund_cnv.cpp\n  resource.cpp\n  restrace.cpp\n  ruleiter.cpp\n  schriter.cpp\n  serv.cpp\n  servlk.cpp\n  servlkf.cpp\n  servls.cpp\n  servnotf.cpp\n  servrbf.cpp\n  servslkf.cpp\n  sharedobject.cpp\n  simpleformatter.cpp\n  static_unicode_sets.cpp\n  stringpiece.cpp\n  stringtriebuilder.cpp\n  uarrsort.cpp\n  ubidi.cpp\n  ubidi_props.cpp\n  ubidiln.cpp\n  ubiditransform.cpp\n  ubidiwrt.cpp\n  ubrk.cpp\n  ucase.cpp\n  ucasemap.cpp\n  ucasemap_titlecase_brkiter.cpp\n  ucat.cpp\n  uchar.cpp\n  ucharstrie.cpp\n  ucharstriebuilder.cpp\n  ucharstrieiterator.cpp\n  uchriter.cpp\n  ucln_cmn.cpp\n  ucmndata.cpp\n  ucnv.cpp\n  ucnv2022.cpp\n  ucnv_bld.cpp\n  ucnv_cb.cpp\n  ucnv_cnv.cpp\n  ucnv_ct.cpp\n  ucnv_err.cpp\n  ucnv_ext.cpp\n  ucnv_io.cpp\n  ucnv_lmb.cpp\n  ucnv_set.cpp\n  ucnv_u16.cpp\n  ucnv_u32.cpp\n  ucnv_u7.cpp\n  ucnv_u8.cpp\n  ucnvbocu.cpp\n  ucnvdisp.cpp\n  ucnvhz.cpp\n  ucnvisci.cpp\n  ucnvlat1.cpp\n  ucnvmbcs.cpp\n  ucnvscsu.cpp\n  ucnvsel.cpp\n  ucol_swp.cpp\n  ucptrie.cpp\n  ucurr.cpp\n  udata.cpp\n  udatamem.cpp\n  udataswp.cpp\n  uenum.cpp\n  uhash.cpp\n  uhash_us.cpp\n  uidna.cpp\n  uinit.cpp\n  uinvchar.cpp\n  uiter.cpp\n  ulist.cpp\n  uloc.cpp\n  uloc_keytype.cpp\n  uloc_tag.cpp\n  umath.cpp\n  umutablecptrie.cpp\n  umutex.cpp\n  unames.cpp\n  unifiedcache.cpp\n  unifilt.cpp\n  unifunct.cpp\n  uniset.cpp\n  uniset_closure.cpp\n  uniset_props.cpp\n  unisetspan.cpp\n  unistr.cpp\n  unistr_case.cpp\n  unistr_case_locale.cpp\n  unistr_cnv.cpp\n  unistr_props.cpp\n  unistr_titlecase_brkiter.cpp\n  unorm.cpp\n  unormcmp.cpp\n  uobject.cpp\n  uprops.cpp\n  ures_cnv.cpp\n  uresbund.cpp\n  uresdata.cpp\n  usc_impl.cpp\n  uscript.cpp\n  uscript_props.cpp\n  uset.cpp\n  uset_props.cpp\n  usetiter.cpp\n  ushape.cpp\n  usprep.cpp\n  ustack.cpp\n  ustr_cnv.cpp\n  ustr_titlecase_brkiter.cpp\n  ustr_wcs.cpp\n  ustrcase.cpp\n  ustrcase_locale.cpp\n  ustrenum.cpp\n  ustrfmt.cpp\n  ustring.cpp\n  ustrtrns.cpp\n  utext.cpp\n  utf_impl.cpp\n  util.cpp\n  util_props.cpp\n  utrace.cpp\n  utrie.cpp\n  utrie2.cpp\n  utrie2_builder.cpp\n  utrie_swap.cpp\n  uts46.cpp\n  utypes.cpp\n  uvector.cpp\n  uvectr32.cpp\n  uvectr64.cpp\n  locmap.cpp\n  putil.cpp\n  umapfile.cpp\n  wintz.cpp)\nset(ICU_LIBRARY_FILES\n    ${ICU_LIBRARY_FILES} $<TARGET_OBJECTS:duckdb_icu_common>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Core Nested Functions Library in CMake\nDESCRIPTION: This snippet adds a library named 'duckdb_core_functions_nested' using the add_library_unity command. It includes source files for binned histogram, list, and histogram functions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/nested/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_nested OBJECT binned_histogram.cpp\n                  list.cpp histogram.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB-specific decay setting to jemalloc.h\nDESCRIPTION: C++ code to add a DuckDB-specific decay setting to jemalloc.h.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n// DuckDB uses a 5s decay\n#define DUCKDB_JEMALLOC_DECAY 5\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Extension Directory Function in CMake\nDESCRIPTION: Defines a function to build loadable extension directories with support for different ABI types, platforms, and build configurations. Handles static/dynamic linking and symbol visibility.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_21\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(build_loadable_extension_directory NAME ABI_TYPE OUTPUT_DIRECTORY EXTENSION_VERSION CAPI_VERSION PARAMETERS)\n  set(TARGET_NAME ${NAME}_loadable_extension)\n  if (LOCAL_EXTENSION_REPO)\n    add_dependencies(duckdb_local_extension_repo ${NAME}_loadable_extension)\n  endif()\n  # all parameters after output_directory\n  set(FILES \"${ARGV}\")\n  # remove name, abi_type, output_directory, extension_version, capi_version, parameters\n  list(REMOVE_AT FILES 0 1 2 3 4 5)\n\n  # parse parameters\n  string(FIND \"${PARAMETERS}\" \"-no-warnings\" IGNORE_WARNINGS)\n\n  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n\n  if(EMSCRIPTEN)\n     add_library(${TARGET_NAME} STATIC ${FILES})\n  else()\n     add_library(${TARGET_NAME} SHARED ${FILES})\n  endif()\n  # ... rest of function implementation\n```\n\n----------------------------------------\n\nTITLE: Configuring Unittest Root Directory in CMake\nDESCRIPTION: Sets up the unittest root directory with a configurable cache variable that defaults to the project source directory. This directory path is used by tests to locate test resources and is defined as a compiler definition.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(UNITTEST_ROOT_DIRECTORY\n    \"\"\n    CACHE\n      STRING\n      \"The unittest root directory (defaults to the project source directory)\")\nif(DEFINED UNITTEST_ROOT_DIRECTORY AND NOT UNITTEST_ROOT_DIRECTORY STREQUAL \"\")\n  add_definitions(-DDUCKDB_ROOT_DIRECTORY=\"${UNITTEST_ROOT_DIRECTORY}\")\nelse()\n  add_definitions(-DDUCKDB_ROOT_DIRECTORY=\"${PROJECT_SOURCE_DIR}\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up DuckDB CMake Project with Requirements\nDESCRIPTION: Initializes the CMake project with minimum version requirement and finds required dependencies like Python3 and Threads. Sets core CMake policies to ensure consistent behavior across different CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.29)\n\nif(NOT CLANG_TIDY)\n  find_package(Python3)\nendif()\n\nif(POLICY CMP0026)\n  cmake_policy(SET CMP0026 NEW)\nendif()\n\nif(POLICY CMP0051)\n  cmake_policy(SET CMP0051 NEW)\nendif()\n\nif(POLICY CMP0054)\n  cmake_policy(SET CMP0054 NEW)\nendif()\n\nif(POLICY CMP0063)\n  cmake_policy(SET CMP0063 NEW)\nendif()\n\nproject(DuckDB)\n\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Generating Function Headers with Python Script\nDESCRIPTION: Command to generate function headers from the functions.json definition files. This script processes the function definitions and creates the necessary header files for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\npython3 scripts/generate_functions.py\n```\n\n----------------------------------------\n\nTITLE: Defining the DuckDB Common Types Library and Source Files\nDESCRIPTION: Creates a library using the unity build pattern (combining multiple source files) for the DuckDB common types, including implementations for various data types, operations, and utility classes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_types\n  OBJECT\n  batched_data_collection.cpp\n  bit.cpp\n  blob.cpp\n  cast_helpers.cpp\n  conflict_manager.cpp\n  conflict_info.cpp\n  data_chunk.cpp\n  date.cpp\n  decimal.cpp\n  hash.cpp\n  hugeint.cpp\n  uhugeint.cpp\n  uuid.cpp\n  hyperloglog.cpp\n  interval.cpp\n  list_segment.cpp\n  selection_vector.cpp\n  string_heap.cpp\n  string_type.cpp\n  timestamp.cpp\n  time.cpp\n  validity_mask.cpp\n  value.cpp\n  varint.cpp\n  vector_buffer.cpp\n  vector.cpp\n  vector_cache.cpp\n  vector_constants.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB System Table Functions Library in CMake\nDESCRIPTION: CMake configuration that creates a library named 'duckdb_table_func_system' from multiple source files and adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable. The library contains implementations of various system table functions that expose database metadata.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/table/system/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_table_func_system\n  OBJECT\n  duckdb_columns.cpp\n  duckdb_constraints.cpp\n  duckdb_databases.cpp\n  duckdb_dependencies.cpp\n  duckdb_extensions.cpp\n  duckdb_external_file_cache.cpp\n  duckdb_functions.cpp\n  duckdb_keywords.cpp\n  duckdb_log.cpp\n  duckdb_log_contexts.cpp\n  duckdb_indexes.cpp\n  duckdb_memory.cpp\n  duckdb_optimizers.cpp\n  duckdb_schemas.cpp\n  duckdb_secrets.cpp\n  duckdb_prepared_statements.cpp\n  duckdb_which_secret.cpp\n  duckdb_secret_types.cpp\n  duckdb_sequences.cpp\n  duckdb_settings.cpp\n  duckdb_tables.cpp\n  duckdb_temporary_files.cpp\n  duckdb_types.cpp\n  duckdb_variables.cpp\n  duckdb_views.cpp\n  pragma_collations.cpp\n  pragma_database_size.cpp\n  pragma_metadata_info.cpp\n  pragma_storage_info.cpp\n  pragma_table_info.cpp\n  pragma_table_sample.cpp\n  pragma_user_agent.cpp\n  test_all_types.cpp\n  test_vector_types.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_table_func_system>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test Configuration in CMake\nDESCRIPTION: Adds platform-specific test directories with conditional compilation based on both platform type and build configuration flags. This ensures that tests that rely on platform-specific features are only compiled on supported platforms.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32 AND NOT SUN)\n  if(${BUILD_TPCE})\n    add_subdirectory(tpce)\n  endif()\n  add_subdirectory(persistence)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Core DuckDB Definitions and Compiler Flags\nDESCRIPTION: Configures core DuckDB compiler definitions and debug flags based on compiler type (MSVC, GCC, Clang). Sets additional warning flags for Clang/AppleClang.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DDUCKDB)\n\nif(${DISABLE_THREADS})\n  add_definitions(-DDUCKDB_NO_THREADS)\nendif()\n\nadd_extension_definitions()\n\nif(NOT MSVC)\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wextra -Wno-unused-parameter -Wno-redundant-move\"\n  )\n  if(CMAKE_COMPILER_IS_GNUCC)\n    if(CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 6)\n      set(CMAKE_CXX_FLAGS_DEBUG\n          \"${CMAKE_CXX_FLAGS_DEBUG} -Wimplicit-fallthrough\")\n    endif()\n  else()\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -Wimplicit-fallthrough\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Unity Build Generation Function in CMake\nDESCRIPTION: Implements a unity build system that combines multiple source files into a single compilation unit. Checks for file changes and regenerates the unity build file only when necessary.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(enable_unity_build UB_SUFFIX SOURCE_VARIABLE_NAME)\n  set(files ${${SOURCE_VARIABLE_NAME}})\n\n  # Generate a unique filename for the unity build translation unit\n  set(unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp)\n  set(temp_unit_build_file ${CMAKE_CURRENT_BINARY_DIR}/ub_${UB_SUFFIX}.cpp.tmp)\n  # Exclude all translation units from compilation\n  set_source_files_properties(${files} PROPERTIES HEADER_FILE_ONLY true)\n\n  set(rebuild FALSE)\n  # check if any of the source files have changed\n  foreach(source_file ${files})\n    if(${CMAKE_CURRENT_SOURCE_DIR}/${source_file} IS_NEWER_THAN\n       ${unit_build_file})\n      set(rebuild TRUE)\n    endif()\n  endforeach(source_file)\n  # write a temporary file\n  file(WRITE ${temp_unit_build_file} \"// Unity Build generated by CMake\\n\")\n  foreach(source_file ${files})\n    file(\n      APPEND ${temp_unit_build_file}\n      \"#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\\n\"\n    )\n  endforeach(source_file)\n\n  execute_process(\n    COMMAND ${CMAKE_COMMAND} -E compare_files ${unit_build_file}\n            ${temp_unit_build_file}\n    RESULT_VARIABLE compare_result\n    OUTPUT_VARIABLE bla\n    ERROR_VARIABLE bla)\n  if(compare_result EQUAL 0)\n    # files are identical: do nothing\n  elseif(compare_result EQUAL 1)\n    # files are different: rebuild\n    set(rebuild TRUE)\n  else()\n    # error while compiling: rebuild\n    set(rebuild TRUE)\n  endif()\n\n  if(${rebuild})\n    file(WRITE ${unit_build_file} \"// Unity Build generated by CMake\\n\")\n    foreach(source_file ${files})\n      file(\n        APPEND ${unit_build_file}\n        \"#include <${CMAKE_CURRENT_SOURCE_DIR}/${source_file}>\\n\"\n      )\n    endforeach(source_file)\n  endif()\n\n  # Complement list of translation units with the name of ub\n  set(${SOURCE_VARIABLE_NAME}\n      ${${SOURCE_VARIABLE_NAME}} ${unit_build_file}\n      PARENT_SCOPE)\nendfunction(enable_unity_build)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and HyperLogLog Library\nDESCRIPTION: Initializes the CMake build system for the duckdb_hyperloglog library by setting policies, adding source files to the static library, and configuring include directories and target properties. Specifically, policy CMP0063 is set if available. Dependencies include CMake and the target source files identified by hyperloglog.cpp and sds.cpp.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/hyperloglog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n\nadd_library(duckdb_hyperloglog STATIC hyperloglog.cpp sds.cpp)\n\ntarget_include_directories(\n  duckdb_hyperloglog\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\nset_target_properties(duckdb_hyperloglog PROPERTIES EXPORT_NAME duckdb_hyperloglog)\n\ninstall(TARGETS duckdb_hyperloglog\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n\ndisable_target_warnings(duckdb_hyperloglog)\n```\n\n----------------------------------------\n\nTITLE: Configuring pybind11 and Python Headers in CMake\nDESCRIPTION: Sets up pybind11 dependencies and includes necessary Python header directories for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(pybind11 REQUIRED)\n\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Extension Source Files\nDESCRIPTION: Creates a variable containing all source files needed for the JSON extension, including core functionality files and specialized JSON function implementations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(JSON_EXTENSION_FILES\n    json_reader.cpp\n    json_extension.cpp\n    json_common.cpp\n    json_enums.cpp\n    json_functions.cpp\n    json_multi_file_info.cpp\n    json_scan.cpp\n    json_serializer.cpp\n    json_deserializer.cpp\n    serialize_json.cpp\n    json_functions/copy_json.cpp\n    json_functions/json_array_length.cpp\n    json_functions/json_contains.cpp\n    json_functions/json_exists.cpp\n    json_functions/json_extract.cpp\n    json_functions/json_keys.cpp\n    json_functions/json_merge_patch.cpp\n    json_functions/json_pretty.cpp\n    json_functions/json_structure.cpp\n    json_functions/json_transform.cpp\n    json_functions/json_create.cpp\n    json_functions/json_type.cpp\n    json_functions/json_valid.cpp\n    json_functions/json_value.cpp\n    json_functions/json_serialize_sql.cpp\n    json_functions/json_serialize_plan.cpp\n    json_functions/read_json.cpp\n    json_functions/read_json_objects.cpp)\n```\n\n----------------------------------------\n\nTITLE: C++ Class Layout Example\nDESCRIPTION: Demonstrates the preferred class layout pattern in DuckDB with public constructor and variables first, followed by public methods, then private functions and variables.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyClass {\npublic:\n\tMyClass();\n\n\tint my_public_variable;\n\npublic:\n\tvoid MyFunction();\n\nprivate:\n\tvoid MyPrivateFunction();\n\nprivate:\n\tint my_private_variable;\n};\n```\n\n----------------------------------------\n\nTITLE: Standard Build Configuration\nDESCRIPTION: Sets up the standard build configuration for DuckDB when not using amalgamation. Includes subdirectories, configures dependencies, and creates shared/static library targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\n  add_definitions(-DDUCKDB_MAIN_LIBRARY)\n\n  add_subdirectory(optimizer)\n  add_subdirectory(planner)\n  add_subdirectory(parser)\n  add_subdirectory(function)\n  add_subdirectory(catalog)\n  add_subdirectory(common)\n  add_subdirectory(logging)\n  add_subdirectory(execution)\n  add_subdirectory(main)\n  add_subdirectory(parallel)\n  add_subdirectory(storage)\n  add_subdirectory(transaction)\n  add_subdirectory(verification)\n\n  set(DUCKDB_LINK_LIBS\n      ${DUCKDB_SYSTEM_LIBS}\n      duckdb_fsst\n      duckdb_fmt\n      duckdb_pg_query\n      duckdb_re2\n      duckdb_miniz\n      duckdb_utf8proc\n      duckdb_hyperloglog\n      duckdb_fastpforlib\n      duckdb_skiplistlib\n      duckdb_mbedtls\n      duckdb_yyjson\n      duckdb_zstd)\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB with pip\nDESCRIPTION: Default installation of DuckDB using pip package manager\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install duckdb\n```\n\n----------------------------------------\n\nTITLE: Building Static Version of AutoComplete Extension\nDESCRIPTION: Invokes a custom CMake function to build a static library version of the AutoComplete extension using the previously defined source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_static_extension(autocomplete ${AUTOCOMPLETE_EXTENSION_FILES})\n```\n\n----------------------------------------\n\nTITLE: Library Unity Build Helper Function in CMake\nDESCRIPTION: Helper function to create a library with unity build support. Enables unity building if not disabled and adds MSVC-specific compilation options.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_library_unity NAME MODE)\n  set(SRCS ${ARGN})\n  if(NOT DISABLE_UNITY)\n    enable_unity_build(${NAME} SRCS)\n  endif()\n  add_library(${NAME} OBJECT ${SRCS})\n  if(MSVC)\n    target_compile_options(${NAME} PRIVATE /bigobj)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: DuckDB Python Library Target Configuration\nDESCRIPTION: Creates and configures the python_duckdb library target with necessary source files, include directories, and link libraries.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES duckdb_python.cpp ${ALL_OBJECT_FILES})\n\nadd_library(python_duckdb ${ALL_OBJECT_FILES})\ntarget_include_directories(python_duckdb PRIVATE ${PYTHON_INCLUDE_DIRS})\ntarget_link_libraries(python_duckdb duckdb_static ${PYTHON_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Unit Tests for Extensions\nDESCRIPTION: If unit tests are enabled, this snippet defines the test objects, adds them to a unity library, and collects all object files for the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/extension/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(${ENABLE_UNITTEST_CPP_TESTS})\n    set(TEST_EXT_OBJECTS test_remote_optimizer.cpp)\n\n    add_library_unity(test_extensions OBJECT ${TEST_EXT_OBJECTS})\n    set(ALL_OBJECT_FILES\n        ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_extensions>\n        PARENT_SCOPE)\n  endif()\n```\n\n----------------------------------------\n\nTITLE: Defining and Integrating DuckDB Catalog Default Entries Library in CMake\nDESCRIPTION: Creates a library target named 'duckdb_catalog_default_entries' with OBJECT type, which compiles various default catalog entry source files. Then adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/default/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_catalog_default_entries\n  OBJECT\n  default_functions.cpp\n  default_generator.cpp\n  default_schemas.cpp\n  default_table_functions.cpp\n  default_types.cpp\n  default_views.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_catalog_default_entries>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Processing DuckDB Extensions in CMake\nDESCRIPTION: Iterates through registered DuckDB extensions, setting up build configurations and handling vcpkg dependencies. It also manages extension versions and adds subdirectories for building.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_30\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n\n  if (NOT DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD)\n    set(DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD TRUE)\n  endif()\n\n  # Skip explicitly disabled extensions\n  if (NOT ${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_BUILD} OR ${EXTENSION_CONFIG_BUILD})\n    continue()\n  endif()\n\n  # Warning for trying to load vcpkg extensions without having VCPKG_BUILD SET\n  if (EXISTS \"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH}/vcpkg.json\" AND NOT DEFINED VCPKG_BUILD)\n    message(WARNING \"Extension '${EXT_NAME}' has a vcpkg.json, but build was not run with VCPKG. If build fails, check out VCPKG build instructions in 'duckdb/extension/README.md' or try manually installing the dependencies in ${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH}vcpkg.json\")\n  endif()\n\n  if (NOT \"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_EXT_VERSION}\" STREQUAL \"\")\n    add_definitions(-DEXT_VERSION_${EXT_NAME_UPPERCASE}=\"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_EXT_VERSION}\")\n  endif()\n\n  if (DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH)\n    add_subdirectory(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_PATH} extension/${EXT_NAME})\n  else()\n    message(FATAL_ERROR \"No path found for registered extension '${EXT_NAME}'\")\n  endif()\n\n  if (NOT \"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_EXT_VERSION}\" STREQUAL \"\")\n    remove_definitions(-DEXT_VERSION_${EXT_NAME_UPPERCASE}=\"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_EXT_VERSION}\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Common Subdirectories in CMake\nDESCRIPTION: Adds several subdirectories to the build process, each likely containing specific functional components of the DuckDB common module.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(arrow)\nadd_subdirectory(crypto)\nadd_subdirectory(enums)\nadd_subdirectory(exception)\nadd_subdirectory(multi_file)\nadd_subdirectory(operator)\nadd_subdirectory(progress_bar)\nadd_subdirectory(tree_renderer)\nadd_subdirectory(row_operations)\nadd_subdirectory(serializer)\nadd_subdirectory(sort)\nadd_subdirectory(types)\nadd_subdirectory(value_operations)\nadd_subdirectory(vector_operations)\n```\n\n----------------------------------------\n\nTITLE: Building Static and Loadable JSON Extensions\nDESCRIPTION: Configures the build targets for both static and loadable versions of the JSON extension, with warning parameters and dependency linking to the yyjson library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_static_extension(json ${JSON_EXTENSION_FILES})\nset(PARAMETERS \"-warnings\")\nbuild_loadable_extension(json ${PARAMETERS} ${JSON_EXTENSION_FILES})\ntarget_link_libraries(json_loadable_extension duckdb_yyjson)\n```\n\n----------------------------------------\n\nTITLE: Window Template Method for DuckDB Aggregates\nDESCRIPTION: The Window template method provides a simpler interface for implementing windowed aggregates, handling frame bounds and result generation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nWindow(const ArgType *arg, ValidityMask &filter, ValidityMask &valid, \n       AggregateInputData &info, State *state, \n       const FrameBounds &frame, const FrameBounds &prev, \n       ResultType &result, idx_t rid, idx_tbias)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Extension Demo\nDESCRIPTION: Defines and builds a loadable extension demo. This uses the set parameters and C++ as the required programming language, specifying the path for the extension source file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/extension/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_loadable_extension_directory(\n  loadable_extension_demo\n  \"CPP\"\n  test/extension\n  \"default-version\"\n  \"\"\n  ${PARAMETERS}\n  loadable_extension_demo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Operator Projection Library in CMake\nDESCRIPTION: Creates a library named 'duckdb_operator_projection' from multiple source files related to projection operations in DuckDB. The library's objects are then added to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/projection/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_projection OBJECT physical_projection.cpp\n  physical_tableinout_function.cpp physical_pivot.cpp physical_unnest.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_projection>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Third-party Dependencies\nDESCRIPTION: Conditionally adds third-party library source files to the build when not using Clang-Tidy, including Parquet, Thrift, Snappy, LZ4, and Brotli implementations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT CLANG_TIDY)\n  # parquet/thrift/snappy\n  set(PARQUET_EXTENSION_FILES\n      ${PARQUET_EXTENSION_FILES}\n      ../../third_party/parquet/parquet_types.cpp\n      ../../third_party/thrift/thrift/protocol/TProtocol.cpp\n      ../../third_party/thrift/thrift/transport/TTransportException.cpp\n      ../../third_party/thrift/thrift/transport/TBufferTransports.cpp\n      ../../third_party/snappy/snappy.cc\n      ../../third_party/snappy/snappy-sinksource.cc)\n  # lz4\n  set(PARQUET_EXTENSION_FILES ${PARQUET_EXTENSION_FILES}\n                              ../../third_party/lz4/lz4.cpp)\n  # brotli\n  set(PARQUET_EXTENSION_FILES\n      ${PARQUET_EXTENSION_FILES}\n      ../../third_party/brotli/enc/dictionary_hash.cpp\n      ../../third_party/brotli/enc/backward_references_hq.cpp\n      ../../third_party/brotli/enc/histogram.cpp\n      ../../third_party/brotli/enc/memory.cpp\n      ../../third_party/brotli/enc/entropy_encode.cpp\n      ../../third_party/brotli/enc/compound_dictionary.cpp\n      ../../third_party/brotli/enc/compress_fragment_two_pass.cpp\n      ../../third_party/brotli/enc/block_splitter.cpp\n      ../../third_party/brotli/enc/command.cpp\n      ../../third_party/brotli/enc/encode.cpp\n      ../../third_party/brotli/enc/encoder_dict.cpp\n      ../../third_party/brotli/enc/cluster.cpp\n      ../../third_party/brotli/enc/backward_references.cpp\n      ../../third_party/brotli/enc/utf8_util.cpp\n      ../../third_party/brotli/enc/compress_fragment.cpp\n      ../../third_party/brotli/enc/fast_log.cpp\n      ../../third_party/brotli/enc/brotli_bit_stream.cpp\n      ../../third_party/brotli/enc/bit_cost.cpp\n      ../../third_party/brotli/enc/static_dict.cpp\n      ../../third_party/brotli/enc/literal_cost.cpp\n      ../../third_party/brotli/enc/metablock.cpp\n      ../../third_party/brotli/common/dictionary.cpp\n      ../../third_party/brotli/common/constants.cpp\n      ../../third_party/brotli/common/transform.cpp\n      ../../third_party/brotli/common/platform.cpp\n      ../../third_party/brotli/common/shared_dictionary.cpp\n      ../../third_party/brotli/common/context.cpp\n      ../../third_party/brotli/dec/state.cpp\n      ../../third_party/brotli/dec/decode.cpp\n      ../../third_party/brotli/dec/huffman.cpp\n      ../../third_party/brotli/dec/bit_reader.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Extension Repository Setup in CMake\nDESCRIPTION: Sets up the local extension repository directory and creates custom build targets for extension deployment. Handles Python dependency checking and directory creation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_20\n\nLANGUAGE: cmake\nCODE:\n```\nif (\"${LOCAL_EXTENSION_REPO}\" STREQUAL \"\")\n  set(LOCAL_EXTENSION_REPO_DIR ${CMAKE_BINARY_DIR}/repository)\nelse()\n  if (NOT Python3_FOUND)\n    MESSAGE(FATAL_ERROR \"Could not find python3 executable, when providing LOCAL_EXTENSION_REPO this is compulsory\")\n  endif()\n  set(LOCAL_EXTENSION_REPO_DIR ${LOCAL_EXTENSION_REPO})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring TPC-H Extension Build in CMake\nDESCRIPTION: This CMake configuration sets up the build process for the TPC-H benchmark extension in DuckDB. It includes necessary directories, adds the dbgen subdirectory, builds both static and loadable versions of the extension, and configures installation targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(TpchExtension)\n\ninclude_directories(dbgen/include)\ninclude_directories(include)\nadd_subdirectory(dbgen)\n\nbuild_static_extension(tpch tpch_extension.cpp ${DBGEN_OBJECT_FILES})\nset(PARAMETERS \"-warnings\")\nbuild_loadable_extension(tpch ${PARAMETERS} tpch_extension.cpp\n                         ${DBGEN_OBJECT_FILES})\n\ninstall(\n  TARGETS tpch_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Extension Build in CMake for DuckDB\nDESCRIPTION: Complete CMake configuration for building the ICU extension in DuckDB. It handles dependency management (internal vs. external ICU), defines source files, and configures both static and loadable extension targets with appropriate linking options.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(ICUExtension)\n\ninclude_directories(include)\noption(WITH_INTERNAL_ICU \"Use vendored copy of icu\" TRUE)\nif(WITH_INTERNAL_ICU)\n  include_directories(third_party/icu/common)\n  include_directories(third_party/icu/i18n)\n\n  add_subdirectory(third_party)\nendif()\n\nset(ICU_EXTENSION_FILES\n    ${ICU_LIBRARY_FILES}\n    icu_extension.cpp\n    icu-current.cpp\n    icu-dateadd.cpp\n    icu-datefunc.cpp\n    icu-datepart.cpp\n    icu-datesub.cpp\n    icu-datetrunc.cpp\n    icu-makedate.cpp\n    icu-list-range.cpp\n    icu-table-range.cpp\n    icu-strptime.cpp\n    icu-timebucket.cpp\n    icu-timezone.cpp)\n\nbuild_static_extension(icu ${ICU_EXTENSION_FILES})\nlink_threads(icu_extension \"\")\nif(NOT WITH_INTERNAL_ICU)\n  find_package(\n    ICU\n    COMPONENTS i18n uc data\n    REQUIRED)\n  target_link_libraries(icu_extension ICU::i18n ICU::uc ICU::data)\nendif()\ndisable_target_warnings(icu_extension)\nset(PARAMETERS \"-no-warnings\")\nbuild_loadable_extension(icu ${PARAMETERS} ${ICU_EXTENSION_FILES})\nif(NOT WITH_INTERNAL_ICU)\n  target_link_libraries(icu_loadable_extension ICU::i18n ICU::uc ICU::data)\nendif()\ninstall(\n  TARGETS icu_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for DuckDB Parser\nDESCRIPTION: Sets up include paths for the libpg_query dependency that the parser relies on. These include statements make the libpg_query headers available to the parser module.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../../third_party/libpg_query/include)\ninclude_directories(../../third_party/libpg_query)\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking the Unittest Executable in CMake\nDESCRIPTION: Creates the main unittest executable and links it with the appropriate libraries based on the platform. Different linking strategies are used for Windows, SUN, and ZOS platforms versus other platforms to handle platform-specific requirements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(unittest unittest.cpp ${ALL_OBJECT_FILES})\n\nif(NOT WIN32\n   AND NOT SUN\n   AND NOT ZOS)\n  target_link_libraries(unittest duckdb test_helpers)\n  if(${BUILD_TPCE})\n    target_link_libraries(unittest tpce)\n  endif()\nelse()\n  target_link_libraries(unittest duckdb_static test_helpers)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Table Functions Library in CMake\nDESCRIPTION: This CMake code defines the build configuration for DuckDB's table function module. It includes subdirectories for system, version, and arrow components, then creates a unity build library named 'duckdb_func_table' from various source files implementing table functions such as CSV reading, arrow conversion, and system functions. Finally, it adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/table/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(system)\nadd_subdirectory(version)\nadd_subdirectory(arrow)\nadd_library_unity(\n  duckdb_func_table\n  OBJECT\n  arrow.cpp\n  arrow_conversion.cpp\n  checkpoint.cpp\n  glob.cpp\n  query_function.cpp\n  range.cpp\n  repeat.cpp\n  repeat_row.cpp\n  copy_csv.cpp\n  read_csv.cpp\n  sniff_csv.cpp\n  read_file.cpp\n  system_functions.cpp\n  summary.cpp\n  table_scan.cpp\n  unnest.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_table>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Loadable Version of AutoComplete Extension\nDESCRIPTION: Invokes a custom CMake function to build a dynamically loadable version of the AutoComplete extension, applying specified parameters and using the defined source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nbuild_loadable_extension(autocomplete ${PARAMETERS}\n                         ${AUTOCOMPLETE_EXTENSION_FILES})\n```\n\n----------------------------------------\n\nTITLE: Defining Schema Operators Library in CMake for DuckDB\nDESCRIPTION: Creates a library of schema-related database operators including table, view, schema, sequence, and index creation operations. The code uses add_library_unity to compile multiple source files as a single translation unit and then adds the resulting object files to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/schema/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_schema\n  OBJECT\n  physical_alter.cpp\n  physical_attach.cpp\n  physical_create_art_index.cpp\n  physical_create_schema.cpp\n  physical_create_type.cpp\n  physical_create_sequence.cpp\n  physical_create_table.cpp\n  physical_create_view.cpp\n  physical_create_function.cpp\n  physical_detach.cpp\n  physical_drop.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_schema>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Function Subdirectories in CMake for DuckDB\nDESCRIPTION: Adds subdirectories to the build process for different function types in DuckDB. This ensures that function implementations in specialized directories are included in the build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(aggregate)\nadd_subdirectory(cast)\nadd_subdirectory(pragma)\nadd_subdirectory(scalar)\nadd_subdirectory(table)\nadd_subdirectory(window)\n```\n\n----------------------------------------\n\nTITLE: Extension Dependencies Management Functions in CMake\nDESCRIPTION: Collection of functions for managing DuckDB extension dependencies, including linking extensions and managing statically linked extensions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_18\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_extension_dependencies LIBRARY)\n  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n    string(TOUPPER ${EXT_NAME} EXTENSION_NAME_UPPERCASE)\n    if (DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK)\n      add_dependencies(${LIBRARY} ${EXT_NAME}_extension)\n    endif()\n  endforeach()\nendfunction()\n\nfunction(get_statically_linked_extensions DUCKDB_EXTENSION_NAMES OUT_VARIABLE)\n  if(NOT ${DISABLE_BUILTIN_EXTENSIONS})\n      set(${OUT_VARIABLE} ${DUCKDB_EXTENSION_NAMES} PARENT_SCOPE)\n  elseif(${GENERATE_EXTENSION_ENTRIES})\n      set(${OUT_VARIABLE} \"\" PARENT_SCOPE)\n  else()\n      set(${OUT_VARIABLE} \"\" PARENT_SCOPE)\n      foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n          if(${EXT_NAME} STREQUAL \"core_functions\")\n              set(${OUT_VARIABLE} \"core_functions\" PARENT_SCOPE)\n          endif()\n      endforeach()\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags for DuckDB in CMake\nDESCRIPTION: Configures compiler flags for different build types and compiler versions, including debug and release configurations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT MSVC)\n  if(${FORCE_WARN_UNUSED})\n    set(CXX_EXTRA \"${CXX_EXTRA} -Wunused\")\n  endif()\n  if(TREAT_WARNINGS_AS_ERRORS)\n    set(CXX_EXTRA \"${CXX_EXTRA} -Werror\")\n  endif()\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -g -O0 -DDEBUG -Wall ${M32_FLAG} ${CXX_EXTRA}\")\n  set(CMAKE_CXX_FLAGS_RELEASE\n      \"${CMAKE_CXX_FLAGS_RELEASE} -O3 -DNDEBUG ${M32_FLAG} ${CXX_EXTRA}\")\n  if(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang$\" AND CMAKE_LTO)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -flto=${CMAKE_LTO}\")\n  elseif (CMAKE_CXX_COMPILER_ID STREQUAL \"GNU\" AND CMAKE_LTO)\n    set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -flto\")\n  endif()\n  set(CMAKE_CXX_FLAGS_RELWITHDEBINFO \"${CMAKE_CXX_FLAGS_RELEASE} -g\")\n\n  set(CXX_EXTRA_DEBUG\n      \"${CXX_EXTRA_DEBUG} -Wunused -Werror=vla -Wnarrowing -pedantic\"\n  )\n\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\" AND CMAKE_CXX_COMPILER_VERSION\n                                                   VERSION_GREATER 8.0)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${CXX_EXTRA_DEBUG}\")\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang$\"\n         AND CMAKE_CXX_COMPILER_VERSION VERSION_GREATER 9.0)\n    set(CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} ${CXX_EXTRA_DEBUG}\")\n  else()\n    message(WARNING \"Please use a recent compiler for debug builds\")\n  endif()\nelse()\n  set(CMAKE_CXX_WINDOWS_FLAGS\n      \"/wd4244 /wd4267 /wd4200 /wd26451 /wd26495 /D_CRT_SECURE_NO_WARNINGS /utf-8\")\n  if(TREAT_WARNINGS_AS_ERRORS)\n    set(CMAKE_CXX_WINDOWS_FLAGS \"${CMAKE_CXX_WINDOWS_FLAGS} /WX\")\n  endif()\n  # remove warning from CXX flags\n  string(REGEX REPLACE \"/W[0-4]\" \"\" CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  # add to-be-ignored warnings\n  set(CMAKE_CXX_FLAGS\n      \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_WINDOWS_FLAGS}\"\n  )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Install Snowball Library\nDESCRIPTION: This snippet specifies the installation rules for the 'snowball' library. It defines the destination directories for the library and archive files, using variables like `DUCKDB_EXPORT_SET`, `INSTALL_LIB_DIR`. This allows the library to be easily integrated into other projects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/snowball/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(\n  TARGETS snowball\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Physical Plan Library in CMake\nDESCRIPTION: This CMake code defines the duckdb_physical_plan library as an OBJECT library containing various physical operator implementations for the DuckDB database system. It lists all the source files that implement different physical operations like joins, aggregations, and data manipulation. It also updates the parent scope's ALL_OBJECT_FILES variable to include these compiled objects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/physical_plan/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_physical_plan\n  OBJECT\n  plan_aggregate.cpp\n  plan_any_join.cpp\n  plan_asof_join.cpp\n  plan_column_data_get.cpp\n  plan_comparison_join.cpp\n  plan_copy_database.cpp\n  plan_copy_to_file.cpp\n  plan_create.cpp\n  plan_create_index.cpp\n  plan_create_table.cpp\n  plan_create_secret.cpp\n  plan_cross_product.cpp\n  plan_delete.cpp\n  plan_delim_get.cpp\n  plan_delim_join.cpp\n  plan_distinct.cpp\n  plan_dummy_scan.cpp\n  plan_empty_result.cpp\n  plan_execute.cpp\n  plan_explain.cpp\n  plan_export.cpp\n  plan_filter.cpp\n  plan_get.cpp\n  plan_insert.cpp\n  plan_limit.cpp\n  plan_order.cpp\n  plan_pivot.cpp\n  plan_positional_join.cpp\n  plan_pragma.cpp\n  plan_prepare.cpp\n  plan_projection.cpp\n  plan_set_operation.cpp\n  plan_set.cpp\n  plan_reset.cpp\n  plan_sample.cpp\n  plan_simple.cpp\n  plan_top_n.cpp\n  plan_update.cpp\n  plan_window.cpp\n  plan_vacuum.cpp\n  plan_unnest.cpp\n  plan_expression_get.cpp\n  plan_recursive_cte.cpp\n  plan_cte.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_physical_plan>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Main Extension Library\nDESCRIPTION: Creates a unified library for the main extension system components, including alias handling, helper functions, installation, loading, and utilities.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_main_extension\n  OBJECT\n  extension_alias.cpp\n  extension_helper.cpp\n  extension_install.cpp\n  extension_load.cpp\n  extension_util.cpp)\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Library Configuration\nDESCRIPTION: Configures platform-specific library dependencies for different operating systems (Apple, Unix, Windows).\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(APPLE)\n  set(PLATFORM_LIBS\n      m\n      c\n      System\n      resolv\n      \"-framework Corefoundation -framework SystemConfiguration -framework Security\"\n  )\nelseif(UNIX)\n  set(PLATFORM_LIBS m c resolv)\nelseif(WIN32)\n  set(PLATFORM_LIBS ws2_32 userenv advapi32)\nelse()\n  message(STATUS \"UNKNOWN OS\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Define RE2 Sources\nDESCRIPTION: Defines a list of source files that make up the RE2 library. These files are used to build the library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n\"set(RE2_SOURCES\n\n        re2/bitmap256.cc\n        re2/compile.cc\n    re2/bitstate.cc\n    re2/dfa.cc\n    re2/filtered_re2.cc\n    re2/mimics_pcre.cc\n    re2/nfa.cc\n    re2/onepass.cc\n    re2/parse.cc\n    re2/perl_groups.cc\n    re2/prefilter.cc\n    re2/prefilter_tree.cc\n    re2/prog.cc\n    re2/re2.cc\n    re2/regexp.cc\n    re2/set.cc\n    re2/simplify.cc\n    re2/stringpiece.cc\n    re2/tostring.cc\n    re2/unicode_casefold.cc\n    re2/unicode_groups.cc\n    util/rune.cc\n    util/strutil.cc\n)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Date Functions Library in CMake\nDESCRIPTION: Creates a library target for DuckDB's core date functions by combining multiple source files. Sets up object compilation and adds the resulting objects to the parent scope's CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/date/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_date\n  OBJECT\n  current.cpp\n  age.cpp\n  date_diff.cpp\n  date_sub.cpp\n  to_interval.cpp\n  time_bucket.cpp\n  date_trunc.cpp\n  epoch.cpp\n  date_part.cpp\n  make_date.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_date>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Shell Executable Build\nDESCRIPTION: Sets up the shell executable build configuration with necessary link libraries and conditional static linking of libc++.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\noption(STATIC_LIBCPP \"Statically link CLI to libc++\" FALSE)\n\nadd_executable(shell ${SHELL_SOURCES})\ntarget_link_libraries(shell sqlite3_api_wrapper_static\n                      ${DUCKDB_EXTRA_LINK_FLAGS})\nlink_threads(shell \"\")\nif(STATIC_LIBCPP)\n  message(\"Statically linking CLI\")\n  target_link_libraries(shell -static-libstdc++ -static-libgcc)\nendif()\n\nif(NOT AMALGAMATION_BUILD AND NOT WIN32)\n  target_link_libraries(shell duckdb_utf8proc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Compiler Warning Disabling Function in CMake\nDESCRIPTION: Utility function to disable compiler warnings for a specific target across different compilers (MSVC, Clang, and GNU).\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(disable_target_warnings NAME)\n  if(MSVC)\n    target_compile_options(${NAME} PRIVATE \"/W0\")\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang$\"\n         OR \"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    target_compile_options(${NAME} PRIVATE \"-w\")\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Integration Dependencies in CMake\nDESCRIPTION: Sets up include directories for pybind11 and Python headers, finds the required pybind11 package, and creates a python_common library object with exceptions handling. Also updates the parent scope's object files list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/common/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_common OBJECT exceptions.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_common>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including ICU Subdirectory and Setting Library Files in CMake for DuckDB\nDESCRIPTION: This CMake snippet adds the ICU subdirectory to the build and sets the ICU library files variable for the parent scope. It ensures that the ICU library is properly integrated into the DuckDB project build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/third_party/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(icu)\n\nset(ICU_LIBRARY_FILES\n    ${ICU_LIBRARY_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Optimizer Rules Library in CMake\nDESCRIPTION: Creates an object library containing various query optimization rule implementations. The library includes code for simplifications of arithmetic, comparisons, conjunctions, and other optimization strategies used by the DuckDB query optimizer.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/rule/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_rules\n  OBJECT\n  arithmetic_simplification.cpp\n  case_simplification.cpp\n  comparison_simplification.cpp\n  conjunction_simplification.cpp\n  constant_folding.cpp\n  date_part_simplification.cpp\n  distinct_aggregate_optimizer.cpp\n  distributivity.cpp\n  empty_needle_removal.cpp\n  enum_comparison.cpp\n  equal_or_null_simplification.cpp\n  in_clause_simplification_rule.cpp\n  join_dependent_filter.cpp\n  like_optimizations.cpp\n  move_constants.cpp\n  ordered_aggregate_optimizer.cpp\n  regex_optimizations.cpp\n  timestamp_comparison.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU i18n Library Build in CMake\nDESCRIPTION: Creates an object library named 'duckdb_icu_i18n' containing all ICU i18n source files. Sets up compilation of numerous components for internationalization support including date/time formatting, number formatting, calendars, and collation. Updates the parent scope ICU_LIBRARY_FILES variable with the compiled objects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/third_party/icu/i18n/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_icu_i18n\n  OBJECT\n  alphaindex.cpp\n  astro.cpp\n  basictz.cpp\n  bocsu.cpp\n  buddhcal.cpp\n  calendar.cpp\n  cecal.cpp\n  chnsecal.cpp\n  choicfmt.cpp\n  coleitr.cpp\n  coll.cpp\n  collation.cpp\n  collationbuilder.cpp\n  collationcompare.cpp\n  collationdata.cpp\n  collationdatabuilder.cpp\n  collationdatareader.cpp\n  collationdatawriter.cpp\n  collationfastlatin.cpp\n  collationfastlatinbuilder.cpp\n  collationfcd.cpp\n  collationiterator.cpp\n  collationkeys.cpp\n  collationroot.cpp\n  collationrootelements.cpp\n  collationruleparser.cpp\n  collationsets.cpp\n  collationsettings.cpp\n  collationtailoring.cpp\n  collationweights.cpp\n  compactdecimalformat.cpp\n  coptccal.cpp\n  curramt.cpp\n  currfmt.cpp\n  currpinf.cpp\n  currunit.cpp\n  dangical.cpp\n  datefmt.cpp\n  dayperiodrules.cpp\n  dcfmtsym.cpp\n  decContext.cpp\n  decNumber.cpp\n  decimfmt.cpp\n  double-conversion-bignum-dtoa.cpp\n  double-conversion-bignum.cpp\n  double-conversion-cached-powers.cpp\n  double-conversion-double-to-string.cpp\n  double-conversion-fast-dtoa.cpp\n  double-conversion-string-to-double.cpp\n  double-conversion-strtod.cpp\n  dtfmtsym.cpp\n  dtitvfmt.cpp\n  dtitvinf.cpp\n  dtptngen.cpp\n  dtrule.cpp\n  erarules.cpp\n  ethpccal.cpp\n  fmtable.cpp\n  fmtable_cnv.cpp\n  format.cpp\n  formatted_string_builder.cpp\n  formattedval_iterimpl.cpp\n  formattedval_sbimpl.cpp\n  formattedvalue.cpp\n  fphdlimp.cpp\n  fpositer.cpp\n  gender.cpp\n  gregocal.cpp\n  gregoimp.cpp\n  hebrwcal.cpp\n  indiancal.cpp\n  islamcal.cpp\n  listformatter.cpp\n  measfmt.cpp\n  measunit.cpp\n  measure.cpp\n  msgfmt.cpp\n  nfrs.cpp\n  nfrule.cpp\n  nfsubs.cpp\n  nounit.cpp\n  number_affixutils.cpp\n  number_asformat.cpp\n  number_capi.cpp\n  number_compact.cpp\n  number_currencysymbols.cpp\n  number_decimalquantity.cpp\n  number_decimfmtprops.cpp\n  number_fluent.cpp\n  number_formatimpl.cpp\n  number_grouping.cpp\n  number_integerwidth.cpp\n  number_longnames.cpp\n  number_mapper.cpp\n  number_modifiers.cpp\n  number_multiplier.cpp\n  number_notation.cpp\n  number_output.cpp\n  number_padding.cpp\n  number_patternmodifier.cpp\n  number_patternstring.cpp\n  number_rounding.cpp\n  number_scientific.cpp\n  number_skeletons.cpp\n  number_utils.cpp\n  numfmt.cpp\n  numparse_affixes.cpp\n  numparse_compositions.cpp\n  numparse_currency.cpp\n  numparse_decimal.cpp\n  numparse_impl.cpp\n  numparse_parsednumber.cpp\n  numparse_scientific.cpp\n  numparse_symbols.cpp\n  numparse_validators.cpp\n  numrange_fluent.cpp\n  numrange_impl.cpp\n  numsys.cpp\n  olsontz.cpp\n  persncal.cpp\n  plurfmt.cpp\n  plurrule.cpp\n  quantityformatter.cpp\n  rbnf.cpp\n  rbtz.cpp\n  region.cpp\n  reldatefmt.cpp\n  reldtfmt.cpp\n  rulebasedcollator.cpp\n  scientificnumberformatter.cpp\n  search.cpp\n  selfmt.cpp\n  simpletz.cpp\n  smpdtfmt.cpp\n  smpdtfst.cpp\n  sortkey.cpp\n  standardplural.cpp\n  string_segment.cpp\n  stsearch.cpp\n  taiwncal.cpp\n  timezone.cpp\n  tmunit.cpp\n  tmutamt.cpp\n  tmutfmt.cpp\n  translit.cpp\n  tzfmt.cpp\n  tzgnames.cpp\n  tznames.cpp\n  tznames_impl.cpp\n  tzrule.cpp\n  tztrans.cpp\n  ucal.cpp\n  ucln_in.cpp\n  ucol.cpp\n  ucol_res.cpp\n  ucol_sit.cpp\n  ucoleitr.cpp\n  udat.cpp\n  udateintervalformat.cpp\n  udatpg.cpp\n  ufieldpositer.cpp\n  uitercollationiterator.cpp\n  ulistformatter.cpp\n  ulocdata.cpp\n  umsg.cpp\n  unum.cpp\n  unumsys.cpp\n  upluralrules.cpp\n  uregion.cpp\n  usearch.cpp\n  utf16collationiterator.cpp\n  utf8collationiterator.cpp\n  utmscale.cpp\n  vtzone.cpp\n  vzone.cpp\n  zonemeta.cpp\n  zrule.cpp\n  ztrans.cpp\n  japancal.cpp\n  windtfmt.cpp\n  winnmfmt.cpp\n  wintzimpl.cpp\n)\nset(ICU_LIBRARY_FILES\n    ${ICU_LIBRARY_FILES} $<TARGET_OBJECTS:duckdb_icu_i18n>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Managing SQL Keywords in DuckDB Grammar - Yacc\nDESCRIPTION: This snippet outlines how to manage keywords in DuckDB by adding them to various lists, specifying their usage restrictions. It highlights best practices for defining keywords to avoid conflicts with user-defined identifiers.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/README.md#2025-04-22_snippet_4\n\nLANGUAGE: yacc\nCODE:\n```\nunreserved_keywords.list\ncolumn_name_keywords.list\nfunc_name_keywords.list\ntype_name_keywords.list\nreserved_keywords.list\n```\n\n----------------------------------------\n\nTITLE: Add RE2 Library\nDESCRIPTION: Adds the RE2 library as a static library using the specified source files. The library is named duckdb_re2.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_library(duckdb_re2 STATIC ${RE2_SOURCES})\"\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Operator Order Library in CMake\nDESCRIPTION: This CMake snippet adds a library named 'duckdb_operator_order' as an OBJECT library, including source files for physical order and top N operations. It then adds the library objects to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/order/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_operator_order OBJECT physical_order.cpp\n                  physical_top_n.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_order>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Shared SQLite3 API Wrapper Library\nDESCRIPTION: Creates shared library version of SQLite3 API wrapper for non-Windows and non-ZOS platforms. Links against DuckDB static library with platform-specific link flags.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT WIN32 AND NOT ZOS)\n  add_library(sqlite3_api_wrapper SHARED ${SQLITE_API_WRAPPER_FILES})\n  target_link_libraries(sqlite3_api_wrapper duckdb_static\n                        ${DUCKDB_EXTRA_LINK_FLAGS})\n  link_threads(sqlite3_api_wrapper \"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Math Functions Library and Updating Core Function Files in DuckDB\nDESCRIPTION: This snippet adds a library for math functions and updates the list of core function files in the DuckDB project. It creates an object library named 'duckdb_core_functions_math' from the 'numeric.cpp' file and adds it to the CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/math/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_math OBJECT numeric.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_math>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Extension Options\nDESCRIPTION: Sets various options for DuckDB extensions handling including auto-loading, auto-installing, WASM compatibility, and test-only modes. These options control how extensions are handled during runtime and build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\noption(FORCE_WARN_UNUSED \"Unused code objects lead to compiler warnings.\" FALSE)\n\noption(ENABLE_EXTENSION_AUTOLOADING \"Enable extension auto-loading by default.\" FALSE)\noption(ENABLE_EXTENSION_AUTOINSTALL \"Enable extension auto-installing by default.\" FALSE)\noption(EXTENSION_TESTS_ONLY \"Only load the tests for extensions, don't actually build them; useful for testing loadable extensions\" FALSE)\noption(WASM_LOADABLE_EXTENSIONS \"WebAssembly build with loadable extensions.\" FALSE)\n```\n\n----------------------------------------\n\nTITLE: Version Number Validation Function\nDESCRIPTION: Implements a CMake function to validate version numbers, ensuring they contain only numeric values.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(ensure_variable_is_number INPUT_VERSION OUT_RESULT)\n  if(NOT \"${${INPUT_VERSION}}\" MATCHES \"^[0-9]+$\")\n    message(\n      WARNING\n        \"VERSION PARAMETER ${INPUT_VERSION} \\\"${${INPUT_VERSION}}\\\" IS NOT A NUMBER - SETTING TO 0\"\n    )\n    set(${OUT_RESULT}\n        0\n        PARENT_SCOPE)\n  else()\n    set(${OUT_RESULT}\n        ${${INPUT_VERSION}}\n        PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring WebAssembly Thread Support\nDESCRIPTION: Sets up thread support for WebAssembly builds with pthread flags. When WebAssembly threads are enabled, configures both C and C++ compiler flags with pthread support and enables shared memory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\noption(DISABLE_UNITY \"Disable unity builds.\" FALSE)\noption(USE_WASM_THREADS \"Should threads be used\" FALSE)\nif (${USE_WASM_THREADS})\n   set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pthread\")\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n   set(WASM_THREAD_FLAGS\n       -pthread\n       -sSHARED_MEMORY=1\n   )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Test File Addition in CMake\nDESCRIPTION: Conditionally adds a read-only test file to the list of test objects for non-Windows platforms. This handles platform-specific testing requirements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n  set(TEST_API_OBJECTS ${TEST_API_OBJECTS} test_read_only.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Functions Library in DuckDB CMake Build\nDESCRIPTION: CMake configuration that creates a library for DuckDB's JSON functions. It includes multiple source files for JSON operations like array length, extraction, validation, and serialization. The library is added to the project's object files collection for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/json_functions/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_json_functions\n  OBJECT\n  copy_json.cpp\n  json_array_length.cpp\n  json_contains.cpp\n  json_exists.cpp\n  json_extract.cpp\n  json_keys.cpp\n  json_merge_patch.cpp\n  json_pretty.cpp\n  json_structure.cpp\n  json_transform.cpp\n  json_create.cpp\n  json_type.cpp\n  json_valid.cpp\n  json_value.cpp\n  json_serialize_plan.cpp\n  json_serialize_sql.cpp\n  read_json.cpp\n  read_json_objects.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_json_functions>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Operator Set Library in CMake\nDESCRIPTION: Creates a library named 'duckdb_operator_set' from several physical operator implementation files using the add_library_unity command. Then adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/set/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_operator_set OBJECT physical_union.cpp\n                  physical_recursive_cte.cpp physical_cte.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_set>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Math Operations Library in CMake\nDESCRIPTION: Defines a CMake library target for DuckDB's basic arithmetic operations by combining several source files into a single unity build. The compiled object files are then added to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/operator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_ops_main OBJECT add.cpp arithmetic.cpp\n                  multiply.cpp subtract.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_ops_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB System Functions Library in CMake\nDESCRIPTION: This CMake code creates a library for DuckDB system functions by compiling multiple source files into a unified object. It includes various system-related functionality like transaction IDs, connection IDs, and query IDs. The compiled object is then added to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/system/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_func_system\n  OBJECT\n  aggregate_export.cpp\n  write_log.cpp\n  current_transaction_id.cpp\n  current_connection_id.cpp\n  current_query_id.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_system>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Sequence Function Library in CMake\nDESCRIPTION: Defines a CMake library target named 'duckdb_func_seq' from the nextval.cpp source file using the add_library_unity function. It then adds the compiled objects to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/sequence/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_seq OBJECT nextval.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_seq>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Grammar Rule for FROM Clause - Yacc\nDESCRIPTION: This yacc snippet defines a grammar rule called 'from_list' that describes how to parse a list of tables in the FROM clause of a SQL SELECT statement. It illustrates recursive parsing using OR statements to manage multiple table references.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yacc\nCODE:\n```\nfrom_list:\n            table_ref                   { $$ = list_make1($1); }\n            | from_list ',' table_ref   { $$ = lappend($1, $3); }\n        ;\n```\n\n----------------------------------------\n\nTITLE: Binding Aggregates in DuckDB\nDESCRIPTION: The bind operation allows aggregates to customize their behavior based on arguments and cache data during query planning.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nbind(ClientContext &context, AggregateFunction &function,vector<unique_ptr<Expression>> &arguments)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Scalar Function Set in C++\nDESCRIPTION: Pattern for implementing a scalar function set in DuckDB's C++ codebase. The GetFunctions method should return a ScalarFunctionSet object that contains multiple function implementations with different signatures.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nScalarFunctionSet DateDiffFun::GetFunctions() {\n\treturn ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking Benchmark Runner Executable\nDESCRIPTION: Defines the benchmark runner executable and links it with required libraries. Conditionally links TPCE library if BUILD_TPCE is enabled.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(benchmark_runner benchmark_runner.cpp interpreted_benchmark.cpp\n                                ${BENCHMARK_OBJECT_FILES})\n\ntarget_link_libraries(benchmark_runner duckdb imdb test_helpers)\n\nif(${BUILD_TPCE})\n  target_link_libraries(benchmark_runner tpce)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running a Single DuckDB Benchmark\nDESCRIPTION: Command to run a specific benchmark using the DuckDB benchmark runner.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Regular Expression Library in CMake\nDESCRIPTION: Creates a library target for DuckDB's regular expression functions including regexp_util.cpp and regexp_extract_all.cpp. The library is added to the project's object files to be compiled into the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/string/regexp/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_func_string_regexp OBJECT regexp_util.cpp\n                  regexp_extract_all.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_string_regexp>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Parallel Execution Module in CMake\nDESCRIPTION: Defines a CMake library target 'duckdb_parallel' that compiles source files related to parallel execution in DuckDB. The library includes pipeline management, task execution, and threading components. The built object files are then added to the parent scope's ALL_OBJECT_FILES variable for integration into the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parallel/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_parallel\n  OBJECT\n  base_pipeline_event.cpp\n  meta_pipeline.cpp\n  executor_task.cpp\n  executor.cpp\n  event.cpp\n  interrupt.cpp\n  pipeline.cpp\n  pipeline_complete_event.cpp\n  pipeline_event.cpp\n  pipeline_executor.cpp\n  pipeline_finish_event.cpp\n  pipeline_initialize_event.cpp\n  pipeline_prepare_finish_event.cpp\n  task_executor.cpp\n  task_notifier.cpp\n  task_scheduler.cpp\n  thread_context.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_parallel>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Common Exception Library in CMake\nDESCRIPTION: This CMake snippet creates an object library named 'duckdb_common_exception' with multiple source files for different exception types. It then adds the compiled objects to the ALL_OBJECT_FILES variable for use in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/exception/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_exception OBJECT binder_exception.cpp catalog_exception.cpp\n  conversion_exception.cpp parser_exception.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_exception>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Build for Test Library in CMake\nDESCRIPTION: This code snippet defines a CMake target named `test_common` for unified builds by listing the corresponding source files. The target is set as an OBJECT type, making it a standalone component in the build process. This setup is key for managing dependencies and organizing test-related components within the build system. It is used to perform unit testing on various utility functions across different files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/common/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\\n  test_common\\n  OBJECT\\n  test_cast.cpp\\n  test_checksum.cpp\\n  test_file_system.cpp\\n  test_hyperlog.cpp\\n  test_numeric_cast.cpp\\n  test_parse_logical_type.cpp\\n  test_utf.cpp\\n  test_strftime.cpp\\n  test_string_util.cpp)\n```\n\n----------------------------------------\n\nTITLE: Initializing State Objects in DuckDB Aggregates\nDESCRIPTION: The initialize operation constructs an empty State object from uninitialized memory, preparing it for accumulating values.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ninitialize(State *)\n```\n\n----------------------------------------\n\nTITLE: Combining States in DuckDB Aggregates\nDESCRIPTION: The combine operation merges source states into target states, essential for parallel aggregation. The template version works on individual state pairs.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ncombine(Vector &sources, Vector &targets, AggregateInputData &info, idx_t count)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nCombine(const State& source, State &target, AggregateInputData &info)\n```\n\n----------------------------------------\n\nTITLE: Define DuckDB Parsed Data Library with Unity Build\nDESCRIPTION: This snippet defines a library named `duckdb_parsed_data` as an object library. It uses `add_library_unity`, implying a unity build where multiple source files are compiled together. The snippet lists all the `.cpp` files that are compiled into this library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/parsed_data/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_parsed_data\n  OBJECT\n  alter_info.cpp\n  alter_scalar_function_info.cpp\n  alter_table_function_info.cpp\n  alter_table_info.cpp\n  attach_info.cpp\n  comment_on_column_info.cpp\n  copy_info.cpp\n  create_info.cpp\n  create_function_info.cpp\n  create_index_info.cpp\n  create_aggregate_function_info.cpp\n  create_collation_info.cpp\n  create_copy_function_info.cpp\n  create_macro_info.cpp\n  create_pragma_function_info.cpp\n  create_secret_info.cpp\n  create_sequence_info.cpp\n  create_schema_info.cpp\n  create_scalar_function_info.cpp\n  create_table_function_info.cpp\n  create_table_info.cpp\n  create_type_info.cpp\n  create_view_info.cpp\n  detach_info.cpp\n  drop_info.cpp\n  exported_table_data.cpp\n  extra_drop_info.cpp\n  load_info.cpp\n  sample_options.cpp\n  parse_info.cpp\n  transaction_info.cpp\n  pragma_info.cpp\n  vacuum_info.cpp)\n```\n\n----------------------------------------\n\nTITLE: Testing DuckDB Installation\nDESCRIPTION: Verifying DuckDB installation by checking version through Python\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../.. \npython3 -c \"import duckdb; duckdb.sql('SELECT version() AS version').show()\"\n```\n\n----------------------------------------\n\nTITLE: Getting Statically Linked Extensions List\nDESCRIPTION: Calls a function to get the list of statically linked extensions based on the provided extension names.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nget_statically_linked_extensions(\"${DUCKDB_EXTENSION_NAMES}\"\n                                 STATICALLY_LINKED_EXTENSIONS)\n```\n\n----------------------------------------\n\nTITLE: Running memory leak tests in the debugger\nDESCRIPTION: This command runs a specific memory leak test within a debugger.  It requires passing the `--memory-leak-tests` flag to enable the memory leak tests. It assumes the `unittest` binary is built in the `build/debug/test/` directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/memoryleak/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n\"build/debug/test/unittest \\\"Test temporary table leaks (#5501)\\\" --memory-leak-tests\"\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB TableRef Library Components with CMake\nDESCRIPTION: This CMake script defines a library 'duckdb_bind_tableref' that contains all the binding and planning components for table references in DuckDB. It lists all the source files related to table reference binding and planning operations, then adds the resulting object files to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/binder/tableref/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_bind_tableref\n  OBJECT\n  bind_basetableref.cpp\n  bind_delimgetref.cpp\n  bind_emptytableref.cpp\n  bind_expressionlistref.cpp\n  bind_column_data_ref.cpp\n  bind_joinref.cpp\n  bind_pivot.cpp\n  bind_showref.cpp\n  bind_subqueryref.cpp\n  bind_table_function.cpp\n  bind_named_parameters.cpp\n  plan_basetableref.cpp\n  plan_delimgetref.cpp\n  plan_dummytableref.cpp\n  plan_expressionlistref.cpp\n  plan_column_data_ref.cpp\n  plan_joinref.cpp\n  plan_subqueryref.cpp\n  plan_table_function.cpp\n  plan_cteref.cpp\n  plan_pivotref.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_bind_tableref>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Function Library with Unity Build\nDESCRIPTION: Defines a unity build library for DuckDB functions, including various function types like aggregate, scalar, table functions and more. Unity build combines multiple source files into one compilation unit to improve build times.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_function\n  OBJECT\n  aggregate_function.cpp\n  built_in_functions.cpp\n  cast_rules.cpp\n  compression_config.cpp\n  copy_function.cpp\n  encoding_function.cpp\n  function.cpp\n  function_binder.cpp\n  function_list.cpp\n  function_set.cpp\n  pragma_function.cpp\n  macro_function.cpp\n  register_function_list.cpp\n  scalar_macro_function.cpp\n  table_macro_function.cpp\n  scalar_function.cpp\n  table_function.cpp\n  udf_function.cpp)\n```\n\n----------------------------------------\n\nTITLE: Thread Support Configuration in CMake\nDESCRIPTION: Adds a preprocessor definition to disable thread support in DuckDB when the DISABLE_THREADS option is enabled. This allows for building a single-threaded version of the database engine.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${DISABLE_THREADS})\n  add_definitions(-DDUCKDB_NO_THREADS)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB String Functions Library in CMake\nDESCRIPTION: CMake configuration that includes the regexp subdirectory and creates a library target 'duckdb_func_string_main' containing various string manipulation function implementations. The target objects are then added to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/string/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(regexp)\nadd_library_unity(\n  duckdb_func_string_main\n  OBJECT\n  caseconvert.cpp\n  concat.cpp\n  concat_ws.cpp\n  length.cpp\n  like.cpp\n  md5.cpp\n  nfc_normalize.cpp\n  regexp.cpp\n  substring.cpp\n  prefix.cpp\n  regexp_escape.cpp\n  sha1.cpp\n  sha256.cpp\n  strip_accents.cpp\n  string_split.cpp\n  suffix.cpp\n  contains.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_string_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Generic Function Library in CMake\nDESCRIPTION: Creates a Unity build library for DuckDB's generic function components, combining constant_or_null.cpp, error.cpp, and getvariable.cpp source files into a single compilation unit.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/generic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_generic_main OBJECT constant_or_null.cpp\n                  error.cpp getvariable.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining the Size Operation in DuckDB Aggregates\nDESCRIPTION: The size operation returns the fixed memory size required for the aggregate's State object. This is essential for memory allocation in aggregate operations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nsize()\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Pandas Build Dependencies in CMake\nDESCRIPTION: Sets up include directories for pybind11 and Python headers, finds the pybind11 package, and creates a library target for the Python Pandas integration. Also adds the compiled objects to the parent scope's object files list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/pandas/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_pandas OBJECT scan.cpp analyzer.cpp bind.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_pandas>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Using ORDER BY with String Aggregation in DuckDB\nDESCRIPTION: An example of an ordered aggregate function that concatenates strings in alphabetical order, demonstrating how ORDER BY works with aggregates.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- Concatenate the strings in alphabetical order \nSTRING_AGG(code, ',' ORDER BY code)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Execution Library in CMake\nDESCRIPTION: Creates a unity build library named 'duckdb_execution' using the add_library_unity command. This library includes various source files related to execution components such as adaptive filters, hash tables, and physical operators.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_execution\n  OBJECT\n  adaptive_filter.cpp\n  aggregate_hashtable.cpp\n  base_aggregate_hashtable.cpp\n  column_binding_resolver.cpp\n  expression_executor.cpp\n  expression_executor_state.cpp\n  join_hashtable.cpp\n  perfect_aggregate_hashtable.cpp\n  physical_operator.cpp\n  physical_plan_generator.cpp\n  radix_partitioned_hashtable.cpp)\n```\n\n----------------------------------------\n\nTITLE: Profiling DuckDB Benchmark Query\nDESCRIPTION: Command to display a detailed query execution profile for a specific benchmark, including execution time and query tree.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark --profile\n```\n\n----------------------------------------\n\nTITLE: Shell Output Configuration and Installation\nDESCRIPTION: Sets the output properties for the shell executable and configures installation paths.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(shell PROPERTIES OUTPUT_NAME duckdb)\nset_target_properties(shell PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                                       ${PROJECT_BINARY_DIR})\n\ninstall(TARGETS shell RUNTIME DESTINATION \"${INSTALL_BIN_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Random Functions Library with CMake\nDESCRIPTION: Creates a library for DuckDB random functions from source files and adds the resulting objects to the core function files list. The configuration includes random.cpp and setseed.cpp source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/random/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_random OBJECT random.cpp setseed.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_random>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running S3 Tests with Minio\nDESCRIPTION: This command runs the S3 tests using the specified test file, utilizing the Minio test server setup.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbuild/debug/test/unittest test/sql/copy/s3/s3_hive_partition.test\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Transformer Statement Library in CMake\nDESCRIPTION: This CMake snippet creates an object library for DuckDB's SQL statement transformers. It includes numerous source files that handle transforming different types of SQL statements (like CREATE, ALTER, INSERT, etc.) and adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/statement/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_transformer_statement\n  OBJECT\n  transform_alter_table.cpp\n  transform_attach.cpp\n  transform_detach.cpp\n  transform_call.cpp\n  transform_checkpoint.cpp\n  transform_create_function.cpp\n  transform_comment_on.cpp\n  transform_copy.cpp\n  transform_copy_database.cpp\n  transform_create_table_as.cpp\n  transform_create_index.cpp\n  transform_create_schema.cpp\n  transform_create_table.cpp\n  transform_create_view.cpp\n  transform_create_type.cpp\n  transform_delete.cpp\n  transform_explain.cpp\n  transform_export.cpp\n  transform_drop.cpp\n  transform_import.cpp\n  transform_insert.cpp\n  transform_load.cpp\n  transform_pragma.cpp\n  transform_rename.cpp\n  transform_secret.cpp\n  transform_select.cpp\n  transform_select_node.cpp\n  transform_set.cpp\n  transform_pivot_stmt.cpp\n  transform_prepare.cpp\n  transform_show.cpp\n  transform_show_select.cpp\n  transform_transaction.cpp\n  transform_update.cpp\n  transform_upsert.cpp\n  transform_use.cpp\n  transform_create_sequence.cpp\n  transform_vacuum.cpp\n  transform_alter_sequence.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Core List Functions Library in CMake\nDESCRIPTION: Creates a library named 'duckdb_core_functions_list' from various list-related implementation files. This library contains functionality for list operations such as flattening, transforming, filtering, and aggregating lists in DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/list/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_list\n  OBJECT\n  flatten.cpp\n  list_transform.cpp\n  range.cpp\n  list_value.cpp\n  list_filter.cpp\n  list_has_any_or_all.cpp\n  list_aggregates.cpp\n  list_distance.cpp\n  array_slice.cpp\n  list_sort.cpp\n  list_reduce.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Integration Subdirectories in CMake\nDESCRIPTION: Adds various subdirectories containing Python integration components to the build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(pyrelation)\nadd_subdirectory(pyexpression)\nadd_subdirectory(pybind11)\nadd_subdirectory(numpy)\nadd_subdirectory(native)\nadd_subdirectory(jupyter)\nadd_subdirectory(typing)\nadd_subdirectory(functional)\nadd_subdirectory(pyconnection)\nadd_subdirectory(common)\nadd_subdirectory(pandas)\nadd_subdirectory(arrow)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Operator Aggregate Library in CMake\nDESCRIPTION: This CMake snippet creates a library named 'duckdb_operator_aggregate' as an OBJECT library type, consisting of various source files related to aggregate operations in DuckDB. It includes files for hash aggregation, partitioned aggregation, window functions, and other aggregation mechanisms.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/aggregate/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_aggregate\n  OBJECT\n  aggregate_object.cpp\n  distinct_aggregate_data.cpp\n  physical_hash_aggregate.cpp\n  grouped_aggregate_data.cpp\n  physical_partitioned_aggregate.cpp\n  physical_perfecthash_aggregate.cpp\n  physical_ungrouped_aggregate.cpp\n  physical_window.cpp\n  physical_streaming_window.cpp)\n```\n\n----------------------------------------\n\nTITLE: Generating Extension Headers Template File\nDESCRIPTION: Creates a template file for extension headers and writes it to a candidate file for comparison before finalizing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  generated_extension_headers.hpp.in\n  \"${PROJECT_BINARY_DIR}/codegen/include/generated_extension_headers.hpp.cand\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Decoder Library in CMake\nDESCRIPTION: Creates an object library for Parquet format decoders and adds it to the parent scope's PARQUET_EXTENSION_FILES variable. Includes multiple decoder implementations for different Parquet encoding types.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/decoder/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_parquet_decoders\n  OBJECT\n  byte_stream_split_decoder.cpp\n  delta_binary_packed_decoder.cpp\n  delta_byte_array_decoder.cpp\n  delta_length_byte_array_decoder.cpp\n  dictionary_decoder.cpp\n  rle_decoder.cpp)\nset(PARQUET_EXTENSION_FILES\n    ${PARQUET_EXTENSION_FILES} $<TARGET_OBJECTS:duckdb_parquet_decoders>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python/NumPy Include Paths in CMake\nDESCRIPTION: Sets up include directories for pybind11 and Python headers required for compilation. Uses CMake's find_package to ensure pybind11 dependency is available.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/numpy/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Building Static Extension Function in CMake\nDESCRIPTION: Simple function to build static extensions that are linked directly into the DuckDB binary.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_24\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(build_static_extension NAME PARAMETERS)\n  # all parameters after name\n  set(FILES \"${ARGV}\")\n  list(REMOVE_AT FILES 0)\n  add_library(${NAME}_extension STATIC ${FILES})\n  target_link_libraries(${NAME}_extension duckdb_static)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding List Functions to DuckDB Core Functions\nDESCRIPTION: Updates the parent scope's CORE_FUNCTION_FILES variable to include the compiled objects from the list functions library. This makes the list functions available to the main DuckDB compilation process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/list/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_list>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Operator Join Library in CMake\nDESCRIPTION: This CMake command creates an object library named 'duckdb_operator_join' by compiling multiple source files for different join operations. It includes various physical join implementations such as hash join, nested loop join, and others.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/join/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_join\n  OBJECT\n  outer_join_marker.cpp\n  physical_asof_join.cpp\n  physical_blockwise_nl_join.cpp\n  physical_comparison_join.cpp\n  physical_cross_product.cpp\n  physical_delim_join.cpp\n  physical_left_delim_join.cpp\n  physical_hash_join.cpp\n  physical_iejoin.cpp\n  physical_join.cpp\n  physical_nested_loop_join.cpp\n  perfect_hash_join_executor.cpp\n  physical_piecewise_merge_join.cpp\n  physical_positional_join.cpp\n  physical_range_join.cpp\n  physical_right_delim_join.cpp)\n```\n\n----------------------------------------\n\nTITLE: Generating DuckDB Serialization Schema with Python Script\nDESCRIPTION: Command to regenerate the serialization schema for DuckDB components using a Python script in the scripts directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/include/duckdb/storage/serialization/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 scripts/generate_serialization.py\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for DuckDB Scalar Function Modules in CMake\nDESCRIPTION: This snippet lists the subdirectories containing specialized scalar function implementations that need to be included in the build process. Each subdirectory contains related scalar functions grouped by functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(compressed_materialization)\nadd_subdirectory(date)\nadd_subdirectory(generic)\nadd_subdirectory(list)\nadd_subdirectory(map)\nadd_subdirectory(operator)\nadd_subdirectory(sequence)\nadd_subdirectory(string)\nadd_subdirectory(struct)\nadd_subdirectory(system)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Storage Buffer Library in CMake\nDESCRIPTION: This snippet defines a CMake library target named 'duckdb_storage_buffer' that compiles multiple source files related to buffer management in DuckDB's storage system. It then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/buffer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_buffer\n  OBJECT\n  buffer_handle.cpp\n  block_handle.cpp\n  block_manager.cpp\n  buffer_pool.cpp\n  buffer_pool_reservation.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_buffer>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unity Library for Subquery Components in CMake\nDESCRIPTION: This CMake command creates a Unity library named 'duckdb_planner_subquery' that consolidates multiple source files associated with subquery operations and expression rewriting. The source files included are 'flatten_dependent_join.cpp', 'has_correlated_expressions.cpp', 'rewrite_correlated_expressions.cpp', and 'rewrite_cte_scan.cpp'. The final list of object files is updated to include this new library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/subquery/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_planner_subquery OBJECT flatten_dependent_join.cpp\n  has_correlated_expressions.cpp rewrite_correlated_expressions.cpp\n  rewrite_cte_scan.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_planner_subquery>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Connection Build in CMake\nDESCRIPTION: Sets up include directories for Python and pybind11 dependencies, creates a python_connection library object, and adds it to the project's object files. Used for enabling Python bindings in DuckDB with proper clang-tidy support.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/pyconnection/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_connection OBJECT type_creation.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_connection>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB MBEDTLS Library\nDESCRIPTION: This snippet defines a static library called 'duckdb_mbedtls' which includes various source files related to MBEDTLS. The files listed are responsible for cryptographic functions and are crucial for enhancing the security of DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_mbedtls STATIC\n        mbedtls_wrapper.cpp\n        library/aes.cpp\n        library/asn1parse.cpp\n        library/asn1write.cpp\n        library/base64.cpp\n        library/bignum.cpp\n        library/bignum_core.cpp\n        library/cipher.cpp\n        library/cipher_wrap.cpp\n        library/constant_time.cpp\n        library/gcm.cpp\n        library/md.cpp\n        library/oid.cpp\n        library/pem.cpp\n        library/pk.cpp\n        library/pk_wrap.cpp\n        library/pkparse.cpp\n        library/platform.cpp\n        library/platform_util.cpp\n        library/rsa.cpp\n        library/rsa_alt_helpers.cpp\n        library/sha1.cpp\n        library/sha256.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB CSV Utility Library in CMake\nDESCRIPTION: This CMake code adds a library called 'duckdb_csv_util' using the add_library_unity command, which compiles multiple source files together. The library includes CSV error handling, reader options, and validation functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/util/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_csv_util OBJECT csv_error.cpp csv_reader_options.cpp\n                  csv_validator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Arrow Conversion Library in CMake\nDESCRIPTION: Defines a CMake object library for DuckDB's Arrow conversion functionality and adds its objects to the parent scope's ALL_OBJECT_FILES variable. The library includes source files for Arrow-DuckDB schema conversion, array scanning, and type information.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/table/arrow/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_arrow_conversion OBJECT arrow_duck_schema.cpp\n                  arrow_array_scan_state.cpp arrow_type_info.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_arrow_conversion>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Destructing State Objects in DuckDB Aggregates\nDESCRIPTION: The destructor operation cleans up a Vector of state pointers, freeing any allocated resources. The template version works on individual State objects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ndestructor(Vector &state, AggregateInputData &info, idx_t count)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nDestroy(State &state, AggregateInputData &info)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Collation Locales in C++\nDESCRIPTION: Demonstrates how to retrieve and display all supported collation locales using ICU Collator. The code iterates through available locales and formats them as language or language_country codes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nint32_t count;\nauto locales = Collator::getAvailableLocales(count);\nfprintf(stdout, \"Available collation locales: [\");\nfor(int32_t i = 0; i < count; i++) {\n    if (i > 0) {\n        fprintf(stdout, \", \");\n    }\n    if (string(locales[i].getCountry()).empty()) {\n        // language only\n        fprintf(stdout, \"%s\", locales[i].getLanguage());\n    } else {\n        // language + country\n        fprintf(stdout, \"%s_%s\", locales[i].getLanguage(), locales[i].getCountry());\n    }\n}\nfprintf(stdout, \"]\\n\");\n```\n\n----------------------------------------\n\nTITLE: Decompressing and Loading a Gzipped DuckDB Database File in Test Runner\nDESCRIPTION: Commands for decompressing a gzipped database file and loading it into the DuckDB test runner with a specified extraction path in read-only mode.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/data/storage/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunzip <path/to/filename.db.gz> <extraction/path/to/filename.db>\n\nload <extraction/path/to/filename.db> readonly\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Union Functions Library in CMake\nDESCRIPTION: Creates a new library target for DuckDB's core union functions and adds the compiled objects to the parent scope's CORE_FUNCTION_FILES variable. The library includes union_extract.cpp, union_value.cpp, and union_tag.cpp source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/union/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_union OBJECT union_extract.cpp\n                  union_value.cpp union_tag.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_union>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Expression Module Build in CMake\nDESCRIPTION: Sets up the build configuration for Python expression integration in DuckDB. Includes necessary Python and pybind11 headers, creates a library target for python_expression, and adds it to the project's object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/pyexpression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_expression OBJECT initialize.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_expression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Displaying DuckDB Benchmark Query\nDESCRIPTION: Command to display the SQL query executed by a specific benchmark.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark --query\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Serialization Library with CMake\nDESCRIPTION: Creates a library target for DuckDB serialization components, adding source files related to binary serialization/deserialization, buffered file operations, and memory streaming. It then adds the library objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/serializer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_serializer\n  OBJECT\n  binary_serializer.cpp\n  binary_deserializer.cpp\n  buffered_file_reader.cpp\n  buffered_file_writer.cpp\n  memory_stream.cpp\n  serializer.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_serializer>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Expression Library with CMake\nDESCRIPTION: This CMake script configures the duckdb_expression library by specifying all the expression-related source files to compile. It creates a unity build (combining multiple source files) and adds the resulting object files to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/expression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_expression\n  OBJECT\n  between_expression.cpp\n  case_expression.cpp\n  cast_expression.cpp\n  collate_expression.cpp\n  conjunction_expression.cpp\n  columnref_expression.cpp\n  comparison_expression.cpp\n  constant_expression.cpp\n  default_expression.cpp\n  function_expression.cpp\n  lambda_expression.cpp\n  lambdaref_expression.cpp\n  operator_expression.cpp\n  parameter_expression.cpp\n  positional_reference_expression.cpp\n  star_expression.cpp\n  subquery_expression.cpp\n  window_expression.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_expression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining and Linking Roaring Compression Library in DuckDB with CMake\nDESCRIPTION: This CMake code defines a library for DuckDB's roaring bitmap compression functionality and links it to the main project. It creates an OBJECT library named 'duckdb_storage_compression_roaring' with five source files and adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/roaring/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_compression_roaring\n  OBJECT\n  common.cpp\n  metadata.cpp\n  analyze.cpp\n  compress.cpp\n  scan.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_compression_roaring>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Struct Function Library and Adding to DuckDB Objects in CMake\nDESCRIPTION: Creates a unity build library for struct functions in DuckDB and adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable. The library includes implementation files for various struct operations like extraction, packing, remapping, and concatenation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/struct/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_struct_main OBJECT remap_struct.cpp\n                  struct_extract.cpp struct_pack.cpp struct_concat.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_struct_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining CSV Scanner Library in CMake for DuckDB\nDESCRIPTION: Creates an object library named 'duckdb_csv_scanner' with multiple source files for CSV scanning functionality in DuckDB. The library includes various scanner components for processing CSV files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/scanner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_csv_scanner\n  OBJECT\n  base_scanner.cpp\n  column_count_scanner.cpp\n  csv_schema.cpp\n  scanner_boundary.cpp\n  skip_scanner.cpp\n  string_value_scanner.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Buffered Data Library in DuckDB with CMake\nDESCRIPTION: Creates a library named 'duckdb_main_buffered_data' from three source files related to buffered data handling. Then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main project build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/buffered_data/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_main_buffered_data OBJECT buffered_data.cpp\n                  simple_buffered_data.cpp batched_buffered_data.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_buffered_data>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Finalizing Generated Extension Headers File\nDESCRIPTION: Copies the candidate file to the final headers file, only updating if there are changes to avoid unnecessary recompilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nconfigure_file(\n  \"${PROJECT_BINARY_DIR}/codegen/include/generated_extension_headers.hpp.cand\"\n  \"${PROJECT_BINARY_DIR}/codegen/include/generated_extension_headers.hpp\")\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Cast Functions Library in CMake\nDESCRIPTION: This CMake code adds a subdirectory for union-related functionality and creates a library target for all cast functions in DuckDB. It compiles multiple source files that implement type casting between different data types, then adds the resulting object files to the parent scope for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/cast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(union)\n\nadd_library_unity(\n  duckdb_func_cast\n  OBJECT\n  array_casts.cpp\n  blob_cast.cpp\n  bit_cast.cpp\n  cast_function_set.cpp\n  decimal_cast.cpp\n  default_casts.cpp\n  enum_casts.cpp\n  list_casts.cpp\n  map_cast.cpp\n  numeric_casts.cpp\n  pointer_cast.cpp\n  string_cast.cpp\n  struct_cast.cpp\n  time_casts.cpp\n  union_casts.cpp\n  uuid_casts.cpp\n  varint_casts.cpp\n  nested_to_varchar_cast.cpp\n  vector_cast_helpers.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_cast>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Enum Functions to DuckDB Core Library in CMake\nDESCRIPTION: This snippet adds a new library object for enum functions and updates the list of core function files. It uses CMake commands to create a library from the enum_functions.cpp file and appends it to the CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/enum/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_enum OBJECT enum_functions.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_enum>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Pragma Functions Library and Adding to Object Files in CMake\nDESCRIPTION: This CMake snippet creates a library target named 'duckdb_func_pragma' using the unity build approach, which combines multiple source files. It then adds the resulting object files to a parent scope variable 'ALL_OBJECT_FILES' for further processing in the build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/pragma/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_pragma OBJECT pragma_functions.cpp\n                  pragma_queries.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_pragma>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running Julia Format Script\nDESCRIPTION: Command to run the formatting script for the Julia package from the project root directory\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njulia tools/juliapkg/scripts/format.jl\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Parquet Writers Library in CMake\nDESCRIPTION: Configures CMake library target for Parquet column writers. Creates an OBJECT library containing multiple column writer implementations and adds the compiled objects to PARQUET_EXTENSION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/writer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_parquet_writers\n  OBJECT\n  array_column_writer.cpp\n  boolean_column_writer.cpp\n  decimal_column_writer.cpp\n  enum_column_writer.cpp\n  list_column_writer.cpp\n  primitive_column_writer.cpp\n  struct_column_writer.cpp)\nset(PARQUET_EXTENSION_FILES\n    ${PARQUET_EXTENSION_FILES} $<TARGET_OBJECTS:duckdb_parquet_writers>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Cloning and Compiling DuckDB Benchmark Runner\nDESCRIPTION: Instructions for cloning the DuckDB repository and compiling the benchmark runner with specific build flags.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/duckdb/duckdb\ncd duckdb\nBUILD_BENCHMARK=1 BUILD_TPCH=1 make\n```\n\n----------------------------------------\n\nTITLE: Configuring DSDGEN Build Environment in CMake\nDESCRIPTION: Sets up the build environment for DSDGEN by configuring include directories, adding a subdirectory for dsdgen-c, creating a library from source files, and exporting object files to the parent scope. The build process disables warnings for the dsdgen target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpcds/dsdgen/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(include)\ninclude_directories(include/dsdgen-c)\nadd_subdirectory(dsdgen-c)\n\nadd_library(dsdgen OBJECT dsdgen.cpp append_info-c.cpp dsdgen_helpers.cpp)\n\nset(DSDGEN_OBJECT_FILES\n    ${DSDGEN_OBJECT_FILES} $<TARGET_OBJECTS:dsdgen>\n    PARENT_SCOPE)\n\ndisable_target_warnings(dsdgen)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Expression Executor Library in CMake\nDESCRIPTION: This CMake snippet adds a library named 'duckdb_expression_executor' as an OBJECT library, including various source files for different expression execution functions. It then adds the resulting object files to a parent scope variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/expression_executor/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_expression_executor\n  OBJECT\n  execute_between.cpp\n  execute_case.cpp\n  execute_cast.cpp\n  execute_comparison.cpp\n  execute_conjunction.cpp\n  execute_constant.cpp\n  execute_function.cpp\n  execute_operator.cpp\n  execute_parameter.cpp\n  execute_reference.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_expression_executor>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting up DuckDB Shell Build Dependencies\nDESCRIPTION: Configures include directories and source files for the DuckDB shell build, with conditional inclusion of linenoise for non-Windows platforms.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\ninclude_directories(../sqlite3_api_wrapper/include)\nif(NOT WIN32)\n  add_subdirectory(linenoise)\n  add_definitions(-DHAVE_LINENOISE=1)\n  include_directories(../../third_party/utf8proc/include)\n  include_directories(linenoise/include)\nendif()\nset(SHELL_SOURCES ${SHELL_SOURCES} shell.cpp shell_renderer.cpp\n                  shell_highlight.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Progress Bar Library in CMake\nDESCRIPTION: Defines an object library named 'duckdb_progress_bar' using the add_library_unity command. This library includes two source files: progress_bar.cpp and terminal_progress_bar_display.cpp.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/progress_bar/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_progress_bar OBJECT progress_bar.cpp\n                  terminal_progress_bar_display.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Optimizer Library in CMake\nDESCRIPTION: Configures the duckdb_optimizer library as a unity build (combined source files) containing various optimizer components. The source files implement different optimization strategies such as filter pushdown, join ordering, expression rewriting, and materialization techniques.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer\n  OBJECT\n  build_probe_side_optimizer.cpp\n  column_binding_replacer.cpp\n  column_lifetime_analyzer.cpp\n  empty_result_pullup.cpp\n  common_aggregate_optimizer.cpp\n  compressed_materialization.cpp\n  cse_optimizer.cpp\n  cte_filter_pusher.cpp\n  deliminator.cpp\n  expression_heuristics.cpp\n  expression_rewriter.cpp\n  filter_combiner.cpp\n  filter_pullup.cpp\n  filter_pushdown.cpp\n  in_clause_rewriter.cpp\n  join_filter_pushdown_optimizer.cpp\n  late_materialization.cpp\n  optimizer.cpp\n  regex_range_filter.cpp\n  remove_duplicate_groups.cpp\n  remove_unused_columns.cpp\n  statistics_propagator.cpp\n  limit_pushdown.cpp\n  topn_optimizer.cpp\n  unnest_rewriter.cpp\n  sampling_pushdown.cpp\n  sum_rewriter.cpp)\n```\n\n----------------------------------------\n\nTITLE: Internal Extension Registration Function in CMake\nDESCRIPTION: CMake function to register an internal DuckDB extension. Handles extension naming, build flags, linking configuration, and path validation. Sets various CMake variables in the parent scope for extension configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_25\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(register_extension NAME DONT_LINK DONT_BUILD LOAD_TESTS PATH INCLUDE_PATH TEST_PATH LINKED_LIBS EXTENSION_VERSION)\n  string(TOLOWER ${NAME} EXTENSION_NAME_LOWERCASE)\n  string(TOUPPER ${NAME} EXTENSION_NAME_UPPERCASE)\n\n  set(DUCKDB_EXTENSION_NAMES ${DUCKDB_EXTENSION_NAMES} ${EXTENSION_NAME_LOWERCASE} PARENT_SCOPE)\n\n  if (\"${LOAD_TESTS}\")\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LOAD_TESTS TRUE PARENT_SCOPE)\n  else()\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LOAD_TESTS FALSE PARENT_SCOPE)\n  endif()\n  set(LINK_EXTENSION TRUE)\n  if (NOT ${BUILD_EXTENSIONS_ONLY})\n    if (${DONT_LINK})\n      set(LINK_EXTENSION FALSE)\n    endif()\n    if(DISABLE_BUILTIN_EXTENSIONS)\n      if(${GENERATE_EXTENSION_ENTRIES})\n        set(LINK_EXTENSION FALSE)\n      elseif(${EXTENSION_NAME_UPPERCASE} STREQUAL \"CORE_FUNCTIONS\")\n      else()\n        set(LINK_EXTENSION FALSE)\n      endif()\n    endif()\n  endif()\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK ${LINK_EXTENSION} PARENT_SCOPE)\n\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_LINKED_LIBS \"${LINKED_LIBS}\" PARENT_SCOPE)\n\n  if (NOT ${DONT_BUILD} AND NOT ${EXTENSION_TESTS_ONLY})\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD TRUE PARENT_SCOPE)\n  elseif(NOT ${GENERATE_EXTENSION_ENTRIES} AND ${EXTENSION_NAME_UPPERCASE} STREQUAL \"CORE_FUNCTIONS\")\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD TRUE PARENT_SCOPE)\n  else()\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_BUILD FALSE PARENT_SCOPE)\n    set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_SHOULD_LINK FALSE PARENT_SCOPE)\n  endif()\n\n  if (\"${PATH}\" STREQUAL \"\")\n    message(FATAL_ERROR \"Invalid path set for extension '${NAME}' : '${INCLUDE}'\")\n  endif()\n  if (\"${INCLUDE_PATH}\" STREQUAL \"\")\n    message(FATAL_ERROR \"Invalid include path for extension '${NAME}' : '${INCLUDE_PATH}'\")\n  endif()\n  if (\"${TEST_PATH}\" STREQUAL \"\" AND \"${LOAD_TESTS}\")\n    message(FATAL_ERROR \"Invalid include path for extension '${NAME}' : '${INCLUDE_PATH}'\")\n  endif()\n\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_PATH ${PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_INCLUDE_PATH ${INCLUDE_PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_TEST_PATH ${TEST_PATH} PARENT_SCOPE)\n  set(DUCKDB_EXTENSION_${EXTENSION_NAME_UPPERCASE}_EXT_VERSION ${EXTENSION_VERSION} PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Arrow Integration Library in DuckDB with CMake\nDESCRIPTION: CMake configuration that defines the duckdb_common_arrow library with source files for Arrow integration. It also adds a subdirectory for appender components and sets up parent scope object files for the build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/arrow/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_arrow\n  OBJECT\n  arrow_appender.cpp\n  arrow_converter.cpp\n  arrow_type_extension.cpp\n  arrow_merge_event.cpp\n  arrow_query_result.cpp\n  arrow_util.cpp\n  arrow_wrapper.cpp\n  physical_arrow_collector.cpp\n  physical_arrow_batch_collector.cpp\n  schema_metadata.cpp)\nadd_subdirectory(appender)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_arrow>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Cloud Storage Installation\nDESCRIPTION: Installing DuckDB package in cloud storage location with prefix configuration\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p $DUCKDB_PREFIX/src/duckdb-pythonpkg\ntar --directory=$DUCKDB_PREFIX/src/duckdb-pythonpkg -xzpf tools/pythonpkg/dist/duckdb-${SETUPTOOLS_SCM_PRETEND_VERSION}.tar.gz\npip install --prefix $DUCKDB_PREFIX -e $DUCKDB_PREFIX/src/duckdb-pythonpkg/duckdb-${SETUPTOOLS_SCM_PRETEND_VERSION}\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation for AutoComplete Extension\nDESCRIPTION: Sets up installation rules for the AutoComplete extension, specifying target locations for libraries and adding the extension to the DuckDB export set for package management.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  TARGETS autocomplete_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring CSV Table Function Library in DuckDB with CMake\nDESCRIPTION: Creates a library target named 'duckdb_operator_csv_table_function' that compiles CSV-related source files. It then adds the target objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/table_function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_csv_table_function OBJECT csv_file_scanner.cpp\n  global_csv_state.cpp csv_multi_file_info.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_csv_table_function>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Function Definition JSON Example\nDESCRIPTION: Example JSON configuration for defining a date_diff function in DuckDB. The configuration includes the function name, parameters, description, example usage, function type, struct name, and aliases.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"name\": \"date_diff\",\n    \"parameters\": \"part,startdate,enddate\",\n    \"description\": \"The number of partition boundaries between the timestamps\",\n    \"example\": \"date_diff('hour', TIMESTAMPTZ '1992-09-30 23:59:59', TIMESTAMPTZ '1992-10-01 01:58:00')\",\n    \"type\": \"scalar_function_set\",\n    \"struct\": \"DateDiffFun\",\n    \"aliases\": [\"datediff\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Planner Expression Library in CMake\nDESCRIPTION: Defines a unity build library for DuckDB's planner expression component, compiling various bound expression implementations into a single object. It then adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main project build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/expression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_planner_expression\n  OBJECT\n  bound_expression.cpp\n  bound_aggregate_expression.cpp\n  bound_between_expression.cpp\n  bound_case_expression.cpp\n  bound_cast_expression.cpp\n  bound_columnref_expression.cpp\n  bound_comparison_expression.cpp\n  bound_conjunction_expression.cpp\n  bound_constant_expression.cpp\n  bound_expanded_expression.cpp\n  bound_function_expression.cpp\n  bound_lambda_expression.cpp\n  bound_lambdaref_expression.cpp\n  bound_operator_expression.cpp\n  bound_parameter_expression.cpp\n  bound_reference_expression.cpp\n  bound_subquery_expression.cpp\n  bound_unnest_expression.cpp\n  bound_window_expression.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_planner_expression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Testing Type Stubs\nDESCRIPTION: Running pytest to verify DuckDB type stubs match implementation\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pytest tests/stubs\n```\n\n----------------------------------------\n\nTITLE: Creating Library for DuckDB List Nested Functions in CMake\nDESCRIPTION: This CMake code creates a library called 'duckdb_func_list_nested' that includes multiple source files related to list operations in DuckDB. It then adds the compiled objects to ALL_OBJECT_FILES in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/list/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_func_list_nested\n  OBJECT\n  contains_or_position.cpp\n  list_extract.cpp\n  list_resize.cpp\n  list_zip.cpp\n  list_select.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_list_nested>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Bindings with CMake and pybind11\nDESCRIPTION: Sets up Python binding configuration using pybind11. Configures include directories for pybind11 and Python headers, finds the pybind11 package, creates a library object for Python bindings, and adds it to the project's object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/pybind11/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_pybind11 OBJECT pybind_wrapper.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_pybind11>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring UDF Test Library with CMake\nDESCRIPTION: Defines a CMake library for UDF testing components. Creates an OBJECT library named 'test_api_udf_function' that includes several test files for templated and argumented scalar UDFs, vector UDFs, and aggregate UDFs.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/udf_function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  test_api_udf_function\n  OBJECT\n  test_templated_scalar_udf.cpp\n  test_argumented_scalar_udf.cpp\n  test_templated_vec_udf.cpp\n  test_argumented_vec_udf.cpp\n  test_aggregate_udf.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating SQLite Test Library in CMake\nDESCRIPTION: This snippet adds a unity build library named test_sqlite using the defined SQLite test runner sources. This library will be used to execute SQL logic tests in the DuckDB environment.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sqlite/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_sqlite OBJECT ${SQLITE_TEST_RUNNER_SOURCES})\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Type Bindings in CMake\nDESCRIPTION: Sets up the build environment for Python type bindings in DuckDB using pybind11. Configures include directories, finds required packages, and creates a library for Python type handling.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/typing/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_type OBJECT pytype.cpp typing.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_type>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Using DuckDB Secrets for S3 Authentication in SQL\nDESCRIPTION: Example showing how to use DuckDB Secrets for S3 authentication when accessing Delta tables. Creates a secret with credential chain provider before scanning the table.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/README.md#2025-04-22_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nCREATE SECRET (TYPE S3, provider credential_chain);\nFROM delta_scan('s3://some/delta/table/with/auth');\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flags for DuckDB in CMake\nDESCRIPTION: Sets various compilation flags based on build options, including debug settings and optimization levels.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nif(${BUILD_RDTSC})\n  add_compile_definitions(RDTSC)\nendif()\n\nif(BUILD_EXTENSIONS_ONLY)\n  set(BUILD_MAIN_DUCKDB_LIBRARY FALSE)\nendif()\n\nif(EXTENSION_CONFIG_BUILD)\n  set(BUILD_MAIN_DUCKDB_LIBRARY FALSE)\nendif()\n\nif (NOT BUILD_MAIN_DUCKDB_LIBRARY)\n  set(BUILD_UNITTESTS FALSE)\n  set(BUILD_SHELL FALSE)\n  set(DISABLE_BUILTIN_EXTENSIONS TRUE)\nendif()\n\nif (GENERATE_EXTENSION_ENTRIES)\n  set(DISABLE_BUILTIN_EXTENSIONS TRUE)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Build Parameters for Loadable Extension\nDESCRIPTION: Defines compiler/linker parameters to be used when building the loadable version of the extension. Enables warnings during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(PARAMETERS \"-warnings\")\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Operator Filter Library in CMake\nDESCRIPTION: This snippet adds the DuckDB operator filter library as an object library and updates the list of all object files. It includes the physical_filter.cpp source file in the library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/filter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_operator_filter OBJECT physical_filter.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_filter>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining portable logarithm of pointer size in C++\nDESCRIPTION: C++ code to define the logarithm of the size of a pointer in a portable way, replacing non-portable definitions in jemalloc.h and jemalloc_defs.h.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n#ifdef _MSC_VER\n#  ifdef _WIN64\n#    define LG_SIZEOF_PTR_WIN 3\n#  else\n#    define LG_SIZEOF_PTR_WIN 2\n#  endif\n#endif\n\n/* sizeof(void *) == 2^LG_SIZEOF_PTR. */\n#include <limits.h>\n#ifdef _MSC_VER\n#  define LG_SIZEOF_PTR LG_SIZEOF_PTR_WIN\n#elif INTPTR_MAX == INT64_MAX\n#  define LG_SIZEOF_PTR 3\n#else\n#  define LG_SIZEOF_PTR 2\n#endif\n```\n\n----------------------------------------\n\nTITLE: Configuring MD5 Crypto Library in DuckDB using CMake\nDESCRIPTION: Creates an object library named 'duckdb_common_crypto' from the md5.cpp source file using CMake's add_library_unity command, then adds the compiled objects to the ALL_OBJECT_FILES collection that's passed to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/crypto/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_common_crypto OBJECT md5.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_crypto>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Storage Object Library\nDESCRIPTION: This command creates a CMake object library named `duckdb_storage`. This library groups together object files compiled from the specified C++ source files. The OBJECT keyword indicates that this is an object library, meaning it contains only compiled object files, not a linkable library. This is then used later to collect all object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_library_unity(\n  duckdb_storage\n  OBJECT\n  arena_allocator.cpp\n  buffer_manager.cpp\n  caching_file_system.cpp\n  checkpoint_manager.cpp\n  temporary_memory_manager.cpp\n  block.cpp\n  data_pointer.cpp\n  data_table.cpp\n  external_file_cache.cpp\n  index.cpp\n  local_storage.cpp\n  magic_bytes.cpp\n  storage_manager.cpp\n  standard_buffer_manager.cpp\n  temporary_file_manager.cpp\n  table_index_list.cpp\n  write_ahead_log.cpp\n  optimistic_data_writer.cpp\n  partial_block_manager.cpp\n  single_file_block_manager.cpp\n  storage_info.cpp\n  storage_lock.cpp\n  wal_replay.cpp)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Nested Loop Join Library in CMake\nDESCRIPTION: This CMake snippet adds a library for DuckDB's nested loop join functionality and updates the list of all object files. It includes two source files for inner and mark joins.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/nested_loop_join/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_nested_loop_join OBJECT nested_loop_join_inner.cpp\n                  nested_loop_join_mark.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_nested_loop_join>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Core Function Subdirectories in CMake\nDESCRIPTION: This CMake script adds subdirectories for different function categories in DuckDB, including data types (array, bit, blob, etc.) and operations (math, operators, random, etc.). It also passes the CORE_FUNCTION_FILES variable to the parent scope for further processing in the build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(array)\nadd_subdirectory(bit)\nadd_subdirectory(blob)\nadd_subdirectory(date)\nadd_subdirectory(debug)\nadd_subdirectory(enum)\nadd_subdirectory(generic)\nadd_subdirectory(list)\nadd_subdirectory(map)\nadd_subdirectory(math)\nadd_subdirectory(operators)\nadd_subdirectory(random)\nadd_subdirectory(string)\nadd_subdirectory(struct)\nadd_subdirectory(union)\n\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Micro Benchmarks Build in CMake\nDESCRIPTION: Sets up the build configuration for DuckDB micro benchmarks. It includes the SQLite headers, defines a library target with benchmark source files, and adds the compiled objects to the parent scope's benchmark object files collection.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/micro/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../../third_party/sqlite/include)\nadd_library(\n  duckdb_benchmark_micro OBJECT append.cpp append_mix.cpp bulkupdate.cpp\n                                cast.cpp in.cpp storage.cpp)\n\nset(BENCHMARK_OBJECT_FILES\n    ${BENCHMARK_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_benchmark_micro>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Library Object Target in CMake\nDESCRIPTION: This snippet defines a library target named 'test_sql_storage' for object files. The target includes several test-related source files. These objects can be linked into other targets, facilitating modular testing and build inclusion. It also sets object files to be part of the parent scope, ensuring their availability throughout the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/storage/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  test_sql_storage\n  OBJECT\n  test_buffer_manager.cpp\n  test_checksum.cpp\n  test_storage.cpp\n  test_database_size.cpp\n  wal_torn_write.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_storage>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories for DuckDB Optimizer in CMake\nDESCRIPTION: Adds subdirectories to the build process for different components of the DuckDB optimizer module. These subdirectories contain code for specialized optimization tasks like compressed materialization, join ordering, and statistics management.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(compressed_materialization)\nadd_subdirectory(join_order)\nadd_subdirectory(matcher)\nadd_subdirectory(pullup)\nadd_subdirectory(pushdown)\nadd_subdirectory(rule)\nadd_subdirectory(statistics)\n```\n\n----------------------------------------\n\nTITLE: Amalgamation Build Configuration\nDESCRIPTION: Configures amalgamation build targets for DuckDB, creating both shared and static libraries from a single source file. Sets up installation rules for headers.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(AMALGAMATION_BUILD)\n\n  add_library(duckdb SHARED \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n  target_link_libraries(duckdb ${DUCKDB_SYSTEM_LIBS})\n  link_threads(duckdb PUBLIC)\n  link_extension_libraries(duckdb PRIVATE)\n\n  add_library(duckdb_static STATIC\n              \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.cpp\")\n  target_link_libraries(duckdb_static ${DUCKDB_SYSTEM_LIBS})\n  link_threads(duckdb_static PUBLIC)\n  link_extension_libraries(duckdb_static PUBLIC)\n\n  install(FILES \"${PROJECT_SOURCE_DIR}/src/amalgamation/duckdb.hpp\"\n                \"${PROJECT_SOURCE_DIR}/src/include/duckdb.h\"\n          DESTINATION \"${INSTALL_INCLUDE_DIR}\")\n  install(FILES \"${PROJECT_SOURCE_DIR}/src/include/duckdb/common/winapi.hpp\"\n          DESTINATION \"${INSTALL_INCLUDE_DIR}/duckdb/common\")\n```\n\n----------------------------------------\n\nTITLE: Adding Library for Binding Expressions - CMake\nDESCRIPTION: This snippet configures the addition of various binding expression components to the DuckDB library. It specifies the source files that implement different binding expressions, which are crucial for interpreting and executing SQL expressions in DuckDB. No specific dependencies are required beyond a standard CMake environment set up for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/binder/expression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_bind_expression\n  OBJECT\n  bind_aggregate_expression.cpp\n  bind_between_expression.cpp\n  bind_case_expression.cpp\n  bind_cast_expression.cpp\n  bind_collate_expression.cpp\n  bind_columnref_expression.cpp\n  bind_comparison_expression.cpp\n  bind_conjunction_expression.cpp\n  bind_constant_expression.cpp\n  bind_function_expression.cpp\n  bind_lambda.cpp\n  bind_macro_expression.cpp\n  bind_operator_expression.cpp\n  bind_parameter_expression.cpp\n  bind_positional_reference_expression.cpp\n  bind_unpacked_star_expression.cpp\n  bind_star_expression.cpp\n  bind_subquery_expression.cpp\n  bind_unnest_expression.cpp\n  bind_window_expression.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_bind_expression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Running all memory leak tests\nDESCRIPTION: This command executes all memory leak tests using the Python script `test_memory_leaks.py` located in the `test/memoryleak` directory.  It assumes that you are in the root directory of the DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/memoryleak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"python3 test/memoryleak/test_memory_leaks.py\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Vector Operations Library in CMake\nDESCRIPTION: Defines the duckdb_vector_operations object library with source files for various vector operations including boolean, comparison, cast, hash, storage, and numeric operations. It then adds the compiled objects to the parent scope for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/vector_operations/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n  duckdb_vector_operations OBJECT\n  boolean_operators.cpp\n  vector_cast.cpp\n  comparison_operators.cpp\n  vector_copy.cpp\n  generators.cpp\n  vector_hash.cpp\n  vector_storage.cpp\n  null_operations.cpp\n  numeric_inplace_operators.cpp\n  is_distinct_from.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_vector_operations>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Core Functions Bit Library in CMake\nDESCRIPTION: This snippet adds the DuckDB core functions bit library as an object library and updates the list of core function files. It includes the 'bitstring.cpp' file in the library and adds the resulting object to the CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/bit/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_bit OBJECT bitstring.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_bit>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Suppressing ThreadSanitizer Warnings in DuckDB\nDESCRIPTION: This code snippet contains a list of ThreadSanitizer suppression rules for DuckDB. It includes suppressions for deadlocks, race conditions, and specific function or file patterns.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/.sanitizer-thread-suppressions.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ndeadlock:InitializeIndexes\nrace:InsertMatchesAndIncrementMisses\nrace:NextInnerJoin\nrace:NextRightSemiOrAntiJoin\nrace:duckdb_moodycamel\nrace:*duckdb/extension/jemalloc/jemalloc/*\nrace:AddToEvictionQueue\nrace:ValidityAppend\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Common Enums Library in CMake\nDESCRIPTION: Creates an object library named 'duckdb_common_enums' from multiple source files containing enum definitions. The library is then added to the ALL_OBJECT_FILES variable in the parent scope for further use in the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/enums/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_enums\n  OBJECT\n  catalog_type.cpp\n  compression_type.cpp\n  date_part_specifier.cpp\n  expression_type.cpp\n  file_compression_type.cpp\n  join_type.cpp\n  logical_operator_type.cpp\n  metric_type.cpp\n  optimizer_type.cpp\n  physical_operator_type.cpp\n  statement_type.cpp\n  relation_type.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_enums>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Optimizer Pushdown Library in CMake\nDESCRIPTION: Defines a Unity-build library named 'duckdb_optimizer_pushdown' containing various query optimization pushdown implementations. The library is compiled as object files and includes pushdown operations for aggregates, joins, filters, and other SQL operations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/pushdown/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_pushdown\n  OBJECT\n  pushdown_aggregate.cpp\n  pushdown_cross_product.cpp\n  pushdown_distinct.cpp\n  pushdown_filter.cpp\n  pushdown_get.cpp\n  pushdown_inner_join.cpp\n  pushdown_limit.cpp\n  pushdown_left_join.cpp\n  pushdown_mark_join.cpp\n  pushdown_projection.cpp\n  pushdown_semi_anti_join.cpp\n  pushdown_set_operation.cpp\n  pushdown_single_join.cpp\n  pushdown_window.cpp\n  pushdown_unnest.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for DuckDB Window Example\nDESCRIPTION: Sets up a CMake project for DuckDB window functionality example. It requires minimum CMake version 2.8.12, sets C++11 as the standard, enables Address Sanitizer, and links against the DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/examples/standalone-window/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\nproject(example-window)\n\nset(CMAKE_CXX_STANDARD 11)\n\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n\ninclude_directories(../../src/include)\nlink_directories(../../build/debug/src)\n\nadd_executable(example main.cpp)\ntarget_link_libraries(example duckdb)\n```\n\n----------------------------------------\n\nTITLE: Configuring Third-Party Library Subdirectories in CMake\nDESCRIPTION: Adds multiple third-party library subdirectories to the build process, excluding them during amalgamation builds. Libraries include fmt, libpg_query, re2, and others for various functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT AMALGAMATION_BUILD)\n  add_subdirectory(fmt)\n  add_subdirectory(libpg_query)\n  add_subdirectory(re2)\n  add_subdirectory(miniz)\n  add_subdirectory(utf8proc)\n  add_subdirectory(hyperloglog)\n  add_subdirectory(skiplist)\n  add_subdirectory(fastpforlib)\n  add_subdirectory(mbedtls)\n  add_subdirectory(fsst)\n  add_subdirectory(yyjson)\n  add_subdirectory(zstd)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining ZSTD Source Files for DuckDB\nDESCRIPTION: This snippet defines a list of ZSTD source files that will be used to build the DuckDB ZSTD library. It includes files related to compression and decompression algorithms.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ZSTD_FILES\n\tcompress/zstd_compress_superblock.cpp\n\tcompress/zstdmt_compress.cpp\n\tcompress/zstd_double_fast.cpp\n\tcompress/zstd_fast.cpp\n\tcompress/zstd_compress_sequences.cpp\n\tcompress/zstd_ldm.cpp\n\tcompress/hist.cpp\n\tcompress/zstd_compress.cpp\n\tcompress/zstd_lazy.cpp\n\tcompress/zstd_compress_literals.cpp\n\tcompress/huf_compress.cpp\n\tcompress/zstd_opt.cpp\n\tcompress/fse_compress.cpp\n\tdecompress/zstd_ddict.cpp\n\tdecompress/huf_decompress.cpp\n\tdecompress/zstd_decompress.cpp\n\tdecompress/zstd_decompress_block.cpp\n\tcommon/entropy_common.cpp\n\tcommon/fse_decompress.cpp\n\tcommon/debug.cpp\n\tcommon/xxhash.cpp\n\tcommon/pool.cpp\n\tcommon/threading.cpp\n\tcommon/zstd_common.cpp\n\tcommon/error_private.cpp\n\tdict/cover.cpp\n\tdict/divsufsort.cpp\n\tdict/fastcover.cpp\n\tdict/zdict.cpp\n\tdeprecated/zbuff_common.cpp\n\tdeprecated/zbuff_decompress.cpp\n\tdeprecated/zbuff_compress.cpp\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Unity Test Persistence Library\nDESCRIPTION: Adds a library target for test persistence using Unity build approach, combining multiple source files into a single object library\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/persistence/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_persistence OBJECT test_persistence.cpp test_locking.cpp test_sequence_crash.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Arrow Object Library\nDESCRIPTION: Defines an object library for Python Arrow integration with source files for array stream and export utilities.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/arrow/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(python_arrow OBJECT arrow_array_stream.cpp arrow_export_utils.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Parser Library in CMake\nDESCRIPTION: Creates the main parser library with all its source files using the add_library_unity command. This library handles SQL parsing functionality in DuckDB, including expression parsing, query nodes, and transformations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_parser\n  OBJECT\n  base_expression.cpp\n  column_definition.cpp\n  column_list.cpp\n  constraint.cpp\n  expression_util.cpp\n  keyword_helper.cpp\n  parsed_expression.cpp\n  parsed_expression_iterator.cpp\n  parser.cpp\n  qualified_name.cpp\n  query_error_context.cpp\n  query_node.cpp\n  result_modifier.cpp\n  tableref.cpp\n  transformer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Statement Binding Library in CMake\nDESCRIPTION: Configures the DuckDB statement binding library by listing all the source files that need to be compiled. The library handles binding of various SQL statements including ATTACH, CALL, COPY, CREATE, DELETE, and other operations. The compiled objects are then added to the master list of object files for the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/binder/statement/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_bind_statement\n  OBJECT\n  bind_attach.cpp\n  bind_call.cpp\n  bind_copy.cpp\n  bind_copy_database.cpp\n  bind_create.cpp\n  bind_create_table.cpp\n  bind_delete.cpp\n  bind_detach.cpp\n  bind_drop.cpp\n  bind_execute.cpp\n  bind_explain.cpp\n  bind_export.cpp\n  bind_extension.cpp\n  bind_insert.cpp\n  bind_load.cpp\n  bind_logical_plan.cpp\n  bind_pragma.cpp\n  bind_prepare.cpp\n  bind_relation.cpp\n  bind_select.cpp\n  bind_set.cpp\n  bind_simple.cpp\n  bind_summarize.cpp\n  bind_update.cpp\n  bind_update_extensions.cpp\n  bind_vacuum.cpp)\n```\n\n----------------------------------------\n\nTITLE: Running a specific memory leak test\nDESCRIPTION: This command executes a specific memory leak test by passing the `--test` flag followed by the name of the test. The test name should match the name defined within the test suite. It assumes that you are in the root directory of the DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/memoryleak/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"python3 test/memoryleak/test_memory_leaks.py --test=\\\"Test temporary table leaks (#5501)\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Common Library in CMake\nDESCRIPTION: Creates a unified library target named 'duckdb_common' as an OBJECT library, including numerous source files that implement core common functionality for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common\n  OBJECT\n  allocator.cpp\n  assert.cpp\n  bind_helpers.cpp\n  box_renderer.cpp\n  cgroups.cpp\n  complex_json.cpp\n  compressed_file_system.cpp\n  constants.cpp\n  checksum.cpp\n  encryption_state.cpp\n  exception.cpp\n  exception_format_value.cpp\n  extra_type_info.cpp\n  file_buffer.cpp\n  file_system.cpp\n  filename_pattern.cpp\n  fsst.cpp\n  gzip_file_system.cpp\n  hive_partitioning.cpp\n  http_util.cpp\n  pipe_file_system.cpp\n  local_file_system.cpp\n  error_data.cpp\n  opener_file_system.cpp\n  printer.cpp\n  radix_partitioning.cpp\n  re2_regex.cpp\n  random_engine.cpp\n  stacktrace.cpp\n  string_util.cpp\n  enum_util.cpp\n  symbols.cpp\n  render_tree.cpp\n  tree_renderer.cpp\n  types.cpp\n  virtual_file_system.cpp\n  windows_util.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Compressed Materialization Library in CMake\nDESCRIPTION: Defines a CMake object library for DuckDB's compressed materialization functionality and adds it to the parent scope's object files. The library includes implementation files for compressing integral and string data types.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/compressed_materialization/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_compressed_materialization OBJECT\n                  compress_integral.cpp compress_string.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_compressed_materialization>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Sanitizer Support\nDESCRIPTION: Sets up sanitizer options for DuckDB including address, thread, and undefined behavior sanitizers. Contains logic to handle conflicts between sanitizers and special handling for Python/R/Node builds with sanitizers enabled.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\noption(ENABLE_SANITIZER \"Enable address sanitizer.\" TRUE)\noption(ENABLE_THREAD_SANITIZER \"Enable thread sanitizer.\" FALSE)\noption(ENABLE_UBSAN \"Enable undefined behavior sanitizer.\" TRUE)\noption(DISABLE_VPTR_SANITIZER \"Disable vptr sanitizer; work-around for sanitizer false positive on Macbook M1\" FALSE)\noption(\n  FORCE_SANITIZER\n  \"Forces building with sanitizers even if the Python and R modules are enabled.\"\n  FALSE)\nif((BUILD_PYTHON)\n   AND (ENABLE_SANITIZER OR ENABLE_UBSAN)\n   AND (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"Debug\"))\n  if(FORCE_SANITIZER)\n    message(\n      WARNING\n        \"FORCE_SANITIZER is set and the Python/R/Node builds are enabled. Sanitizers will be linked as a shared library (-shared-libasan). You may need to do LD_PRELOAD tricks to load packages built in this way.\"\n    )\n    set(CXX_EXTRA_DEBUG \"${CXX_EXTRA_DEBUG} -shared-libasan\")\n  else()\n    message(\n      WARNING\n        \"Sanitizers are enabled but will not be built because the Python/R builds are enabled. Use FORCE_SANITIZER to force building of the sanitizers even when building these packages.\"\n    )\n    set(ENABLE_SANITIZER FALSE)\n    set(ENABLE_UBSAN FALSE)\n  endif()\nendif()\nif(${ENABLE_THREAD_SANITIZER})\n  if(${ENABLE_SANITIZER})\n    message(\n      WARNING\n        \"Both thread and address sanitizers are enabled. This is not supported. The address sanitizer will be disabled, and we will run with only the thread sanitizer.\"\n    )\n  endif()\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_THREAD_SANITIZER\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=thread\")\nelseif(${ENABLE_SANITIZER})\n  if(FORCE_ASSERT)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=address\")\n  else()\n    set(CXX_EXTRA_DEBUG \"${CXX_EXTRA_DEBUG} -fsanitize=address\")\n  endif()\nendif()\n\nif (${DISABLE_VPTR_SANITIZER})\nelse()\n  if(APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES \"arm64\")\n    if(\"${CMAKE_CXX_COMPILER_VERSION}\" VERSION_GREATER 14.0)\n      message(\n        WARNING\n          \"Not disabling vptr sanitizer on M1 Macbook - set DISABLE_VPTR_SANITIZER manually if you run into issues with false positives in the sanitizer\"\n      )\n    else()\n    set(DISABLE_VPTR_SANITIZER TRUE)\n    endif()\n  endif()\nendif()\n\nif(${ENABLE_UBSAN})\n  if(${ENABLE_THREAD_SANITIZER})\n    message(\n      WARNING\n        \"Both thread and undefined sanitizers are enabled. This is not supported. The undefined sanitizer will be disabled, and we will run with only the thread sanitizer.\"\n    )\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_THREAD_SANITIZER\")\n  else()\n    if(FORCE_ASSERT)\n      set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fsanitize=undefined -fno-sanitize-recover=all\")\n      if (${DISABLE_VPTR_SANITIZER})\n        set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-sanitize=vptr\")\n      endif()\n    else()\n      set(CXX_EXTRA_DEBUG \"${CXX_EXTRA_DEBUG} -fsanitize=undefined -fno-sanitize-recover=all\")\n      if (${DISABLE_VPTR_SANITIZER})\n        set(CXX_EXTRA_DEBUG \"${CXX_EXTRA_DEBUG} -fno-sanitize=vptr\")\n      endif()\n    endif()\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Row Operations Library in CMake for DuckDB\nDESCRIPTION: CMake configuration that defines the 'duckdb_row_operations' library as an OBJECT library comprising various row operation components. It also adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/row_operations/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_row_operations\n  OBJECT\n  row_aggregate.cpp\n  row_scatter.cpp\n  row_gather.cpp\n  row_matcher.cpp\n  row_external.cpp\n  row_radix_scatter.cpp\n  row_heap_scatter.cpp\n  row_heap_gather.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_row_operations>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Package Build in CMake\nDESCRIPTION: Sets up the build process for the DuckDB Python package, including handling different compiler flags for MSVC and non-MSVC compilers, and configuring the pip install command.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_31\n\nLANGUAGE: CMake\nCODE:\n```\nif(BUILD_PYTHON)\n  if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}\")\n  elseif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}\")\n  elseif(CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n    set(ALL_COMPILE_FLAGS\n            \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n  else()\n    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS}\")\n  endif()\n\n  # Check for MSVC compiler and set the correct C++ standard flag\n  if(MSVC)\n    # MSVC does not support `-std=c++11` or `-std=c++14`, use `/std:c++14`\n    set(ALL_COMPILE_FLAGS \"${ALL_COMPILE_FLAGS} /std:c++14\")\n  else()\n    # For non-MSVC compilers, use the `-std=c++11`\n    set(ALL_COMPILE_FLAGS \"${ALL_COMPILE_FLAGS} -std=c++11\")\n  endif()\n\n  get_target_property(duckdb_libs duckdb LINK_LIBRARIES)\n\n  set(PIP_COMMAND\n      cmake\n      -E\n      env\n      DUCKDB_BINARY_DIR=${PROJECT_BINARY_DIR}\n      DUCKDB_COMPILE_FLAGS=${ALL_COMPILE_FLAGS}\n      DUCKDB_LIBS=\"${duckdb_libs}\"\n    )\n\n  if(PYTHON_EDITABLE_BUILD)\n    set(PIP_COMMAND ${PIP_COMMAND} ${Python3_EXECUTABLE} -m pip install --editable .)\n  else()\n    set(PIP_COMMAND ${PIP_COMMAND} ${Python3_EXECUTABLE} -m pip install .)\n  endif()\n\n  if(USER_SPACE)\n    set(PIP_COMMAND ${PIP_COMMAND} --user)\n  endif()\n  add_custom_target(\n    duckdb_python ALL\n    COMMAND ${PIP_COMMAND}\n    DEPENDS duckdb duckdb_static\n    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/pythonpkg\n    COMMENT Build\n    Python package)\n  add_extension_dependencies(duckdb_python)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB ART Index Component with CMake\nDESCRIPTION: Creates a library target for DuckDB's ART (Adaptive Radix Tree) index implementation by specifying all the component source files. The add_library_unity command combines multiple source files into a compilation unit, and the resulting objects are added to the ALL_OBJECT_FILES variable that is passed to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/index/art/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_execution_index_art\n  OBJECT\n  art_key.cpp\n  node.cpp\n  iterator.cpp\n  leaf.cpp\n  base_node.cpp\n  node48.cpp\n  node256.cpp\n  prefix.cpp\n  base_leaf.cpp\n  node256_leaf.cpp\n  art.cpp\n  plan_art.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_execution_index_art>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Parquet Readers Library in DuckDB with CMake\nDESCRIPTION: This snippet creates a library named 'duckdb_parquet_readers' as an OBJECT library containing various column reader implementations for Parquet files. It then adds the compiled objects to the parent scope's PARQUET_EXTENSION_FILES variable for inclusion in the Parquet extension.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/reader/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_parquet_readers\n  OBJECT\n  decimal_column_reader.cpp\n  expression_column_reader.cpp\n  list_column_reader.cpp\n  row_number_column_reader.cpp\n  string_column_reader.cpp\n  struct_column_reader.cpp)\nset(PARQUET_EXTENSION_FILES\n    ${PARQUET_EXTENSION_FILES} $<TARGET_OBJECTS:duckdb_parquet_readers>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring duckdb_union_cast Library in CMake\nDESCRIPTION: Defines a CMake library target called duckdb_union_cast that compiles from_struct.cpp as an object file using unity build. It then adds this object to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/cast/union/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_union_cast OBJECT from_struct.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_union_cast>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Unity Object Library in CMake\nDESCRIPTION: This CMake code uses the `add_library_unity` function to create an object library named `test_table_function`. The library is composed of the source files `table_in_out.cpp` and `table_bind_replace.cpp`. This creates an object library meant to be linked in later stages.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/function/table/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(test_table_function OBJECT table_in_out.cpp\n                  table_bind_replace.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for SQLite Tests in DuckDB\nDESCRIPTION: This CMake snippet sets up the build environment for SQLite-related tests in DuckDB. It defines the current directory, includes necessary headers, and specifies test source files for the SQLite API and UDF wrapper.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/test/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(CUR_DIR ${CMAKE_CURRENT_SOURCE_DIR})\n\ninclude_directories(../sqlite3_udf_api/include)\n\nset(SQLITE_TEST_FILES\n    ${CUR_DIR}/test_sqlite3_api_wrapper.cpp\n    ${CUR_DIR}/test_sqlite3_udf_api_wrapper.cpp\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Main Object Library in CMake\nDESCRIPTION: Creates the main DuckDB object library using add_library_unity with OBJECT type. This library includes core source files for the DuckDB database system, such as client context, connection management, and query processing components.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_main\n  OBJECT\n  appender.cpp\n  attached_database.cpp\n  client_config.cpp\n  client_context_file_opener.cpp\n  client_context.cpp\n  client_context_wrapper.cpp\n  client_data.cpp\n  client_verify.cpp\n  connection_manager.cpp\n  chunk_scan_state.cpp\n  config.cpp\n  connection.cpp\n  database.cpp\n  database_path_and_type.cpp\n  database_manager.cpp\n  db_instance_cache.cpp\n  error_manager.cpp\n  extension.cpp\n  extension_install_info.cpp\n  materialized_query_result.cpp\n  pending_query_result.cpp\n  prepared_statement.cpp\n  prepared_statement_data.cpp\n  profiling_info.cpp\n  relation.cpp\n  query_profiler.cpp\n  query_result.cpp\n  stream_query_result.cpp\n  valid_checker.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Optimizer Compressed Materialization Library - CMake\nDESCRIPTION: This snippet defines a CMake library target named 'duckdb_optimizer_compressed_materialization' and includes various source files that implement compression-related functionalities such as aggregate compression, comparison joins, distinct operations, and ordered operations. It also updates the variable 'ALL_OBJECT_FILES' to include this new target, making it available for linking in parent scopes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/compressed_materialization/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\\\n  duckdb_optimizer_compressed_materialization OBJECT compress_aggregate.cpp\\\n  compress_comparison_join.cpp compress_distinct.cpp compress_order.cpp)\\\nset(ALL_OBJECT_FILES\\\n    ${ALL_OBJECT_FILES}\\\n    $<TARGET_OBJECTS:duckdb_optimizer_compressed_materialization>\\\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Static SQLite3 API Wrapper Library\nDESCRIPTION: Configures and builds the static version of the SQLite3 API wrapper library. Links against DuckDB static library and optionally utf8proc, with thread support.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(sqlite3_api_wrapper_static STATIC ${SQLITE_API_WRAPPER_FILES})\ntarget_link_libraries(sqlite3_api_wrapper_static duckdb_static)\nif(NOT AMALGAMATION_BUILD)\n  target_link_libraries(sqlite3_api_wrapper_static duckdb_utf8proc)\nendif()\nlink_threads(sqlite3_api_wrapper_static \"\")\n```\n\n----------------------------------------\n\nTITLE: Adding NumPy Objects to Parent Scope\nDESCRIPTION: Updates the parent scope's ALL_OBJECT_FILES variable to include the newly created python_numpy object library for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/numpy/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_numpy>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Helper Functions in CMake\nDESCRIPTION: Sets up compilation definitions and configures source files for SQLite helper functions. Includes conditional compilation for Windows-specific code and creates an object library for SQLite API wrapper functions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/sqlite3/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_definitions(-DUSE_DUCKDB_SHELL_WRAPPER)\nset(SQLITE_FILES printf.c strglob.c)\nif(WIN32)\n  set(SQLITE_FILES ${SQLITE_FILES} os_win.c)\nendif()\n\nadd_library(sqlite3_api_wrapper_sqlite3 OBJECT ${SQLITE_FILES})\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:sqlite3_api_wrapper_sqlite3>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Object for DuckDB Optimizer in CMake\nDESCRIPTION: This snippet adds a library object named 'duckdb_optimizer_matcher' which is built from the source file 'expression_matcher.cpp'. It then appends this object to a global variable 'ALL_OBJECT_FILES' to ensure it is included in the build process. The usage of PARENT_SCOPE allows visibility in parent scopes of CMake.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/matcher/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_optimizer_matcher OBJECT expression_matcher.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_matcher>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup Commands\nDESCRIPTION: Series of commands for setting up the development environment including library path configuration and package installation\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport JULIA_DUCKDB_LIBRARY=\"`pwd`/../../build/debug/src/libduckdb.dylib\"\n\nrm -rf ~/.julia/compiled\n\ncd tools/juliapkg\n```\n\n----------------------------------------\n\nTITLE: Extension Library Linking\nDESCRIPTION: Links the Delta Kernel Rust libraries to both static and loadable extensions and configures installation targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(\n  ${EXTENSION_NAME}\n  debug\n  \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/debug/libdelta_kernel_ffi.a\"\n  optimized\n  \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/release/libdelta_kernel_ffi.a\"\n  ${PLATFORM_LIBS})\nadd_dependencies(${EXTENSION_NAME} delta_kernel)\n\ntarget_link_libraries(\n  ${LOADABLE_EXTENSION_NAME}\n  debug\n  \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/debug/libdelta_kernel_ffi.a\"\n  optimized\n  \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/release/libdelta_kernel_ffi.a\"\n  ${PLATFORM_LIBS})\nadd_dependencies(${LOADABLE_EXTENSION_NAME} delta_kernel)\n\ninstall(\n  TARGETS ${EXTENSION_NAME}\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding the library\nDESCRIPTION: Adds a static library named \"duckdb_pg_query\" and specifies the source files that make up the library. This defines the core library to be built, including all the necessary C++ source files for parsing PostgreSQL queries.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_pg_query STATIC\n            postgres_parser.cpp\n            pg_functions.cpp\n            src_backend_parser_parser.cpp\n            src_backend_parser_gram.cpp\n            src_backend_nodes_list.cpp\n            src_backend_parser_scansup.cpp\n            src_backend_nodes_makefuncs.cpp\n            src_backend_nodes_value.cpp\n            src_backend_parser_scan.cpp\n            src_common_keywords.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for Test Helpers\nDESCRIPTION: This CMake command sets a variable `DUCKDB_TEST_HELPERS_UNITS` which lists the source files to be included in the `test_helpers` library. These files likely contain utility functions and test-related code used throughout the DuckDB testing suite.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/helpers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(DUCKDB_TEST_HELPERS_UNITS test_helpers.cpp capi_tester.cpp pid.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Functional Test Library in CMake\nDESCRIPTION: Defines an object library for Python functional tests and adds it to the global object files list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/functional/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(python_functional OBJECT functional.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_functional>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating CSV State Machine Library in DuckDB CMake Configuration\nDESCRIPTION: Defines a CMake library target for the DuckDB CSV state machine component. This snippet adds a library named 'duckdb_csv_state_machine' built from two source files that handle CSV parsing state machine functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/state_machine/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_csv_state_machine OBJECT csv_state_machine.cpp\n                  csv_state_machine_cache.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Planner Operator Library in CMake\nDESCRIPTION: This CMake script defines and configures the 'duckdb_planner_operator' library, which contains all logical operators used in the DuckDB query planner. It also adds the compiled object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/operator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_planner_operator\n  OBJECT\n  logical_aggregate.cpp\n  logical_any_join.cpp\n  logical_column_data_get.cpp\n  logical_comparison_join.cpp\n  logical_copy_to_file.cpp\n  logical_copy_database.cpp\n  logical_create.cpp\n  logical_create_index.cpp\n  logical_create_table.cpp\n  logical_cross_product.cpp\n  logical_cteref.cpp\n  logical_delete.cpp\n  logical_delim_get.cpp\n  logical_dependent_join.cpp\n  logical_distinct.cpp\n  logical_dummy_scan.cpp\n  logical_empty_result.cpp\n  logical_export.cpp\n  logical_expression_get.cpp\n  logical_extension_operator.cpp\n  logical_filter.cpp\n  logical_get.cpp\n  logical_insert.cpp\n  logical_join.cpp\n  logical_limit.cpp\n  logical_order.cpp\n  logical_pivot.cpp\n  logical_positional_join.cpp\n  logical_pragma.cpp\n  logical_prepare.cpp\n  logical_projection.cpp\n  logical_recursive_cte.cpp\n  logical_materialized_cte.cpp\n  logical_sample.cpp\n  logical_set.cpp\n  logical_reset.cpp\n  logical_set_operation.cpp\n  logical_simple.cpp\n  logical_top_n.cpp\n  logical_unconditional_join.cpp\n  logical_unnest.cpp\n  logical_update.cpp\n  logical_vacuum.cpp\n  logical_window.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_planner_operator>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: DuckDB Extension Definitions Setup in CMake\nDESCRIPTION: Sets up compilation definitions and include paths for DuckDB extensions. Handles both built-in and external extensions configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_17\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(add_extension_definitions)\n  include_directories(${PROJECT_SOURCE_DIR}/extension)\n  if(NOT \"${TEST_WITH_LOADABLE_EXTENSION}\" STREQUAL \"\")\n    string(REPLACE \";\"  \",\" COMMA_SEPARATED_EXTENSIONS \"${TEST_WITH_LOADABLE_EXTENSION}\")\n    # Note: weird commas are for easy substring matching in c++\n    add_definitions(-DDUCKDB_EXTENSIONS_TEST_WITH_LOADABLE=\\\",${COMMA_SEPARATED_EXTENSIONS},\\\")\n    add_definitions(-DDUCKDB_EXTENSIONS_BUILD_PATH=\"${CMAKE_BINARY_DIR}/extension\")\n  endif()\n  if(NOT(\"${TEST_REMOTE_INSTALL}\" STREQUAL \"OFF\"))\n    add_definitions(-DDUCKDB_TEST_REMOTE_INSTALL=\"${TEST_REMOTE_INSTALL}\")\n  endif()\n\n  if(${DISABLE_BUILTIN_EXTENSIONS})\n    add_definitions(-DDISABLE_BUILTIN_EXTENSIONS=${DISABLE_BUILTIN_EXTENSIONS})\n  endif()\n\n  # Include paths for any registered out-of-tree extensions\n  foreach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n    if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n      add_definitions(-DDUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_LINKED=1)\n      if (DEFINED DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH)\n        include_directories(\"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_INCLUDE_PATH}\")\n      else()\n        # We try the default locations for headers\n        include_directories(\"${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/src/include\")\n        include_directories(\"${PROJECT_SOURCE_DIR}/extension_external/${EXT_NAME}/include\")\n      endif()\n    endif()\n  endforeach()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring TPC-H Benchmark Build in DuckDB with CMake\nDESCRIPTION: Sets up build configuration for the TPC-H benchmark component in DuckDB. It includes the necessary header directories, defines the source files, creates an object library, and updates the parent scope with the benchmark object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/tpch/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../../extension/tpch/include)\n\nset(BENCHMARK_SOURCE_FILES startup.cpp)\n\nadd_library(duckdb_benchmark_tpch OBJECT ${BENCHMARK_SOURCE_FILES})\n\nset(BENCHMARK_OBJECT_FILES\n    ${BENCHMARK_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_benchmark_tpch>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Core Functions Holistic Library in CMake\nDESCRIPTION: This CMake snippet creates a library for DuckDB's core holistic functions and adds its objects to the parent scope. It specifies the library name, type, and source files for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/holistic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_holistic\n  OBJECT\n  approx_top_k.cpp\n  quantile.cpp\n  reservoir_quantile.cpp\n  mad.cpp\n  approximate_quantile.cpp\n  mode.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_holistic>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Execution Index Library Build in CMake\nDESCRIPTION: This CMake snippet sets up the build for the DuckDB execution index library. It adds a subdirectory, creates a library target with specified source files, and updates the parent scope's object files list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/index/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(art)\nadd_library_unity(\n  duckdb_execution_index\n  OBJECT\n  fixed_size_allocator.cpp\n  fixed_size_buffer.cpp\n  unbound_index.cpp\n  index_type_set.cpp\n  bound_index.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_execution_index>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Linenoise Library Build\nDESCRIPTION: CMake configuration that sets up the build for the DuckDB linenoise library. It includes the necessary header files directory and creates an object library from multiple source files handling terminal features, syntax highlighting, history, and line editing. The compiled objects are added to the parent scope's SHELL_SOURCES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/linenoise/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n\nadd_library(duckdb_linenoise OBJECT highlighting.cpp history.cpp linenoise.cpp\n                                    linenoise-c.cpp rendering.cpp terminal.cpp)\nset(SHELL_SOURCES\n    ${SHELL_SOURCES} $<TARGET_OBJECTS:duckdb_linenoise>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Window Function Library in CMake\nDESCRIPTION: This CMake script defines a library target 'duckdb_func_window' for the window function components of DuckDB. It specifies all source files to be compiled as part of this module and adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/window/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_func_window\n  OBJECT\n  window_aggregate_function.cpp\n  window_aggregate_states.cpp\n  window_aggregator.cpp\n  window_boundaries_state.cpp\n  window_collection.cpp\n  window_constant_aggregator.cpp\n  window_custom_aggregator.cpp\n  window_distinct_aggregator.cpp\n  window_executor.cpp\n  window_index_tree.cpp\n  window_merge_sort_tree.cpp\n  window_naive_aggregator.cpp\n  window_rank_function.cpp\n  window_rownumber_function.cpp\n  window_segment_tree.cpp\n  window_shared_expressions.cpp\n  window_token_tree.cpp\n  window_value_function.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_window>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Julia Package Development Setup\nDESCRIPTION: Julia commands for activating and setting up the development environment\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_6\n\nLANGUAGE: julia\nCODE:\n```\nusing Pkg\nPkg.activate(\"./test\")\nPkg.instantiate()\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite3 API Wrapper Tests\nDESCRIPTION: Sets up test configuration for the SQLite3 API wrapper, including catch framework integration and platform-specific library linking.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(../../third_party/catch)\n\ninclude_directories(test/include)\nadd_subdirectory(test)\n\nadd_executable(test_sqlite3_api_wrapper ${SQLITE_TEST_FILES})\nif(WIN32 OR ZOS)\n  target_link_libraries(test_sqlite3_api_wrapper sqlite3_api_wrapper_static)\nelse()\n  target_link_libraries(test_sqlite3_api_wrapper sqlite3_api_wrapper)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library Object with CMake\nDESCRIPTION: This snippet adds an object library named 'test_catalog' using the source file 'test_catalog_version.cpp'. It also updates the 'ALL_OBJECT_FILES' variable to include the newly created target's object files, allowing for proper linkage in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/catalog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_catalog OBJECT test_catalog_version.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_catalog>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building Extension Test Path List\nDESCRIPTION: Creates a list of test paths for extensions whose SQLLogicTests need to be registered with DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Load test paths for extensions whose SQLLogicTests need to be registered\nset(EXT_TEST_PATH_LIST \"\")\nforeach(EXT_NAME IN LISTS DUCKDB_EXTENSION_NAMES)\n  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n  if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_LOAD_TESTS})\n    set(EXT_TEST_PATH_LIST\n        \"${EXT_TEST_PATH_LIST},\\n\\t\\\"${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_TEST_PATH}\\\"\"\n    )\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Adding Python Objects to Parent Scope\nDESCRIPTION: Adds the compiled Python native objects to the parent scope's ALL_OBJECT_FILES variable for linking.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/native/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_native>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB's Chunk Scan State Library in CMake\nDESCRIPTION: Creates a unity build library for DuckDB's main chunk scan state components, including the query result and batched data collection implementation files. It then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/chunk_scan_state/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_main_chunk_scan_state OBJECT query_result.cpp\n                  batched_data_collection.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_chunk_scan_state>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining Test API Source Files in CMake\nDESCRIPTION: Defines a list of source files for the test API. Each file tests a specific aspect of DuckDB's functionality, such as connections, queries, appenders, and various API features.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(TEST_API_OBJECTS\n    test_api.cpp\n    test_config.cpp\n    test_custom_allocator.cpp\n    test_extension_setting_autoload.cpp\n    test_instance_cache.cpp\n    test_results.cpp\n    test_reset.cpp\n    test_get_table_names.cpp\n    test_prepared_api.cpp\n    test_table_info.cpp\n    test_appender_api.cpp\n    test_lifecycle_hooks.cpp\n    test_pending_query.cpp\n    test_plan_serialization.cpp\n    test_relation_api.cpp\n    test_query_profiler.cpp\n    test_dbdir.cpp\n    test_pending_with_parameters.cpp\n    test_progress_bar.cpp\n    test_uuid.cpp\n    test_insertion_order_preserving_map.cpp\n    test_varint.cpp\n    test_threads.cpp\n    test_windows_header_compatibility.cpp\n    test_windows_unicode_path.cpp\n    test_object_cache.cpp)\n```\n\n----------------------------------------\n\nTITLE: Building ICU Data with Filters\nDESCRIPTION: This shell command demonstrates how to use the ICU data filter configuration to create a packaged data file. It shows the steps to configure, compile, and generate the final data output using make.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nICU_DATA_FILTER_FILE=filters.json ./runConfigureICU Linux --with-data-packaging=archive\nmake\n# result data file: data/out/icudt66l.dat\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories and Definitions for SQLite3 Wrapper\nDESCRIPTION: Sets up include paths for the SQLite3 wrapper and its dependencies, including utf8proc and autocomplete extension. Adds build definitions for UTF8 support and DuckDB shell wrapper.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\nadd_subdirectory(sqlite3)\n\ninclude_directories(sqlite3_udf_api/include)\nadd_subdirectory(sqlite3_udf_api)\n\nadd_extension_definitions()\nadd_definitions(-DSQLITE_SHELL_IS_UTF8)\nadd_definitions(-DUSE_DUCKDB_SHELL_WRAPPER)\n\ninclude_directories(../../third_party/utf8proc/include)\n```\n\n----------------------------------------\n\nTITLE: Adding Date Function Library in CMake for DuckDB\nDESCRIPTION: Creates a CMake object library named 'duckdb_func_date' from the strftime.cpp source file. Then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable to be included in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/date/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_func_date OBJECT strftime.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_date>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Handling Extension Load Disabling\nDESCRIPTION: Adds a compiler definition to disable extension loading if the DISABLE_EXTENSION_LOAD flag is set.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\nif(${DISABLE_EXTENSION_LOAD})\n  add_definitions(-DDUCKDB_DISABLE_EXTENSION_LOAD)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Removing unnecessary files from jemalloc in DuckDB\nDESCRIPTION: Commands to remove junk files from the copied jemalloc source in the DuckDB project directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd $DUCKDB_DIR/extension/jemalloc/jemalloc\nfind . -name \"*.in\" -type f -delete\nfind . -name \"*.sh\" -type f -delete\nfind . -name \"*.awk\" -type f -delete\nfind . -name \"*.txt\" -type f -delete\nfind . -name \"*.py\" -type f -delete\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Parser TableRef Library in CMake\nDESCRIPTION: This CMake snippet defines a library named 'duckdb_parser_tableref' containing various table reference implementation files. It also adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/tableref/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_parser_tableref\n  OBJECT\n  at_clause.cpp\n  basetableref.cpp\n  delimgetref.cpp\n  emptytableref.cpp\n  expressionlistref.cpp\n  column_data_ref.cpp\n  joinref.cpp\n  pivotref.cpp\n  showref.cpp\n  subqueryref.cpp\n  table_function.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_parser_tableref>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Query Node Library - CMake\nDESCRIPTION: This snippet defines a CMake target for query nodes in DuckDB using object files for specific node implementations. The target is named 'duckdb_query_node' and includes multiple source files that contribute to the query functionality. It ensures that the object files can be referenced in parent scopes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/query_node/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_query_node OBJECT recursive_cte_node.cpp cte_node.cpp\n                  select_node.cpp set_operation_node.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_query_node>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Verification Object Library\nDESCRIPTION: This snippet defines an object library named `duckdb_verification` using CMake. It includes a list of C++ source files that will be compiled into the library. This library is likely used for verifying the behavior of DuckDB statements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/verification/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n  duckdb_verification OBJECT\n  copied_statement_verifier.cpp\n  external_statement_verifier.cpp\n  fetch_row_verifier.cpp\n  prepared_statement_verifier.cpp\n  deserialized_statement_verifier.cpp\n  statement_verifier.cpp\n  parsed_statement_verifier.cpp\n  no_operator_caching_verifier.cpp\n  unoptimized_statement_verifier.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library in CMake\nDESCRIPTION: This snippet defines a CMake command to add an object library named 'test_sql_storage_catalog' using the source file 'test_storage_sequences.cpp'. The library is constructed for unit testing components related to SQL storage catalogs. The object files are then included in the ALL_OBJECT_FILES variable to ensure they are available in the parent scope for further building processes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/storage/catalog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_sql_storage_catalog OBJECT test_storage_sequences.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_storage_catalog>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting All Object Files in CMake\nDESCRIPTION: This snippet extends the ALL_OBJECT_FILES variable with the target objects from the test_sql_tpce library. This approach ensures that the newly added object files are included in the parent scope, allowing for seamless integration with other parts of the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/tpce/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_tpce>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for DuckDB Python Build\nDESCRIPTION: Sets up the necessary include directories for the DuckDB Python integration build including source directories and project root.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(src)\ninclude_directories(../../)\ninclude_directories(src/include)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB ZSTD Library\nDESCRIPTION: This snippet creates a static library named duckdb_zstd using the previously defined ZSTD source files, and establishes its include directories and properties.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_zstd STATIC ${ZSTD_FILES})\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB C API Object Library with CMake\nDESCRIPTION: This CMake script builds the DuckDB C API as an object library. It first includes the 'cast' subdirectory, then defines the 'duckdb_main_capi' object library containing all C API wrapper source files. Finally, it adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/capi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(cast)\n\nadd_library_unity(\n  duckdb_main_capi\n  OBJECT\n  aggregate_function-c.cpp\n  appender-c.cpp\n  arrow-c.cpp\n  cast_function-c.cpp\n  config-c.cpp\n  data_chunk-c.cpp\n  datetime-c.cpp\n  duckdb-c.cpp\n  duckdb_value-c.cpp\n  helper-c.cpp\n  hugeint-c.cpp\n  logical_types-c.cpp\n  pending-c.cpp\n  prepared-c.cpp\n  profiling_info-c.cpp\n  replacement_scan-c.cpp\n  result-c.cpp\n  scalar_function-c.cpp\n  stream-c.cpp\n  table_function-c.cpp\n  table_description-c.cpp\n  threading-c.cpp\n  value-c.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_capi>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB CSV Sniffer Library with CMake\nDESCRIPTION: Defines a CMake object library for the CSV sniffer component of DuckDB, including all its source files. The library components handle CSV dialect detection, header parsing, column configuration, and type detection/refinement for CSV import functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/sniffer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_csv_sniffer\n  OBJECT\n  csv_sniffer.cpp\n  dialect_detection.cpp\n  header_detection.cpp\n  set_columns.cpp\n  type_detection.cpp\n  type_refinement.cpp\n  type_replacement.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_sniffer>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite UDF Integration for DuckDB in CMake\nDESCRIPTION: This CMake snippet sets up the build configuration for integrating SQLite User-Defined Functions (UDFs) into DuckDB. It includes the necessary directories, creates an object library for the SQLite UDF API, and adds the resulting object files to the overall project compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/sqlite3_udf_api/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# set(UDF_WRAPPER_FILES cast_sqlite.cpp)\ninclude_directories(include)\n\nadd_library(sqlite3_udf_api OBJECT sqlite3_udf_wrapper.cpp cast_sqlite.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:sqlite3_udf_api>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB ADBC NanoArrow Library in CMake\nDESCRIPTION: This CMake snippet defines a library target for DuckDB ADBC NanoArrow components and adds its object files to the parent scope. It specifies the source files to be compiled and ensures they're included in the overall build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/adbc/nanoarrow/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_adbc_nanoarrow OBJECT metadata.cpp schema.cpp\n                  allocator.cpp single_batch_array_stream.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_adbc_nanoarrow>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Appender Tests Library in CMake\nDESCRIPTION: This CMake snippet creates a library named 'test_appender' from several C++ source files that test different aspects of DuckDB's appender functionality. It then adds the generated object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/appender/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  test_appender\n  OBJECT\n  test_appender_abort.cpp\n  test_appender.cpp\n  test_concurrent_append.cpp\n  test_appender_transactions.cpp\n  test_nested_appender.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_appender>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Platform Detection in CMake\nDESCRIPTION: Sets up platform detection for DuckDB, either by running a test binary or using an explicitly provided platform. This helps in determining the target architecture for the build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_32\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT DUCKDB_EXPLICIT_PLATFORM)\n  set(VERSION_SOURCES tools/utils/test_platform.cpp)\n\n  add_executable(duckdb_platform_binary ${VERSION_SOURCES})\n  link_threads(duckdb_platform_binary \"\")\n\n  set_target_properties(duckdb_platform_binary PROPERTIES OUTPUT_NAME duckdb_platform_binary)\n  set_target_properties(duckdb_platform_binary PROPERTIES RUNTIME_OUTPUT_DIRECTORY\n                                         ${PROJECT_BINARY_DIR})\n  add_custom_command(\n          OUTPUT ${PROJECT_BINARY_DIR}/duckdb_platform_out\n          DEPENDS duckdb_platform_binary\n          COMMAND duckdb_platform_binary > ${PROJECT_BINARY_DIR}/duckdb_platform_out || ( echo \"Provide explicit DUCKDB_PLATFORM=your_target_arch to avoid build-type detection of the platform\" && exit 1 )\n          WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n          )\nelse()\n  add_custom_command(\n          OUTPUT ${PROJECT_BINARY_DIR}/duckdb_platform_out\n          COMMAND\n          ${CMAKE_COMMAND} -E echo_append \\\"${DUCKDB_EXPLICIT_PLATFORM}\\\" > ${PROJECT_BINARY_DIR}/duckdb_platform_out\n          WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n          )\nendif()\nadd_custom_target(duckdb_platform DEPENDS ${PROJECT_BINARY_DIR}/duckdb_platform_out)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library in CMake\nDESCRIPTION: This snippet defines an object library named 'duckdb_storage_serialization' in CMake, including various source files related to serialization functionalities. It helps in organizing and managing the serialization aspects of DuckDB, ensuring that all serialization-related code is compiled into a single library. The object library can be linked with other targets in the DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/serialization/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_serialization\n  OBJECT\n  serialize_constraint.cpp\n  serialize_create_info.cpp\n  serialize_dependency.cpp\n  serialize_expression.cpp\n  serialize_extension_install_info.cpp\n  serialize_extra_drop_info.cpp\n  serialize_logical_operator.cpp\n  serialize_macro_function.cpp\n  serialize_nodes.cpp\n  serialize_parsed_expression.cpp\n  serialize_parse_info.cpp\n  serialize_query_node.cpp\n  serialize_result_modifier.cpp\n  serialize_statement.cpp\n  serialize_table_filter.cpp\n  serialize_tableref.cpp\n  serialize_types.cpp\n  serialize_storage.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_serialization>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Multi-File Library in CMake\nDESCRIPTION: Creates a library object from multi-file related source files and adds it to the parent scope objects. This CMake code defines how the multi-file functionality components should be built and integrated into the larger DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/multi_file/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_common_multi_file OBJECT multi_file_list.cpp\n                  multi_file_reader.cpp multi_file_column_mapper.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_multi_file>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB FSST Library\nDESCRIPTION: This snippet adds a static library target named 'duckdb_fsst' that compiles the 'libfsst.cpp' source file. This library can be linked to other parts of the DuckDB project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_fsst STATIC libfsst.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Unity in CMake\nDESCRIPTION: This snippet adds a library object called 'test_ossfuzz' to the current scope and updates the list of all object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/ossfuzz/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_ossfuzz OBJECT test_ossfuzz.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_ossfuzz>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Aggregate Functions Library in CMake for DuckDB\nDESCRIPTION: Creates a unified library named 'duckdb_func_aggr' from sorted_aggregate_function.cpp source file, then adds the library's objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/aggregate/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_func_aggr OBJECT sorted_aggregate_function.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_aggr>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Pybind11 Dependency Check Configuration\nDESCRIPTION: Verifies the presence of pybind11 library and exits if not found using CMake's find_package system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(pybind11)\nif(NOT pybind11_FOUND)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library Object in CMake for DuckDB\nDESCRIPTION: This snippet adds a library object named 'duckdb_transformer_constraint' using the source file 'transform_constraint.cpp'. It then updates the 'ALL_OBJECT_FILES' variable to include the newly created object, allowing it to be visible to parent scopes in the CMake project setup.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/constraint/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_transformer_constraint OBJECT transform_constraint.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_constraint>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Planner Library - CMake\nDESCRIPTION: This snippet defines the DuckDB planner as a unity library using CMake, specifying various source files that contribute to the construction of the planner's functionality. The library is an object type, which allows it to be compiled and linked as part of other targets in the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_planner\n  OBJECT\n  binding_alias.cpp\n  bound_result_modifier.cpp\n  bound_parameter_map.cpp\n  collation_binding.cpp\n  expression_iterator.cpp\n  expression.cpp\n  table_binding.cpp\n  expression_binder.cpp\n  joinside.cpp\n  logical_operator.cpp\n  binder.cpp\n  bind_context.cpp\n  planner.cpp\n  pragma_handler.cpp\n  logical_operator_visitor.cpp\n  table_filter.cpp\n  table_filter_state.cpp)\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in Parent Scope\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the object files from the duckdb_function library. This makes the compiled objects available to the parent CMake configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_function>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining CMake Project for AutoComplete Extension\nDESCRIPTION: Names the CMake project as AutoCompleteExtension, which helps identify the project in build outputs and is used for CMake variable namespacing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(AutoCompleteExtension)\n```\n\n----------------------------------------\n\nTITLE: Creating Unity Test Library for Concurrent SQL Operations\nDESCRIPTION: Compiles multiple test source files into a single object library for testing SQL interquery parallelism features in DuckDB. Includes tests for concurrent checkpointing, appending, deleting, and other concurrent database operations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/parallelism/interquery/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  test_sql_interquery_parallelism\n  OBJECT\n  concurrent_checkpoint.cpp\n  test_concurrentappend.cpp\n  test_concurrentdelete.cpp\n  test_concurrent_dependencies.cpp\n  test_concurrent_index.cpp\n  test_concurrentupdate.cpp\n  test_concurrent_sequence.cpp\n  test_concurrent_prepared.cpp\n  test_default_catalog.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_interquery_parallelism>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Library for Test Parallel CSV in CMake\nDESCRIPTION: This snippet defines a new CMake object library named 'test_parallel_csv' which compiles the source file 'test_parallel_csv.cpp'. This is essential for the parallel CSV handling functionality in DuckDB. The object can be used in other targets of the project as needed.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/parallel_csv/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_parallel_csv OBJECT test_parallel_csv.cpp)\n```\n\n----------------------------------------\n\nTITLE: Rust Platform Target Configuration\nDESCRIPTION: Sets up platform-specific Rust target architecture based on the operating system and architecture variables.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(RUST_PLATFORM_TARGET \"\")\nif(\"${OS_NAME}\" STREQUAL \"linux\")\n  if(\"${OS_ARCH}\" STREQUAL \"arm64\")\n    set(RUST_PLATFORM_TARGET \"aarch64-unknown-linux-gnu\")\n  else()\n    set(RUST_PLATFORM_TARGET \"x86_64-unknown-linux-gnu\")\n  endif()\nelseif(\"${OS_NAME}\" STREQUAL \"osx\")\n  if(\"${OSX_BUILD_ARCH}\" STREQUAL \"arm64\")\n    set(RUST_PLATFORM_TARGET \"aarch64-apple-darwin\")\n  elseif(\"${OSX_BUILD_ARCH}\" STREQUAL \"x86_64\")\n    set(RUST_PLATFORM_TARGET \"x86_64-apple-darwin\")\n  elseif(\"${OS_ARCH}\" STREQUAL \"arm64\")\n    set(RUST_PLATFORM_TARGET \"aarch64-apple-darwin\")\n  else()\n    set(RUST_PLATFORM_TARGET \"x86_64-apple-darwin\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Join Order Optimizer Library\nDESCRIPTION: This code snippet uses the `add_library_unity` macro to create a library named `duckdb_optimizer_join_order`. This macro bundles multiple source files into a single compilation unit, potentially improving build times. It includes several source files related to query graph management, join relation sets, join node optimization, cardinality estimation, cost modeling, plan enumeration, relation management, query graph management, and relation statistics.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/join_order/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_join_order\n  OBJECT\n  query_graph.cpp\n  join_relation_set.cpp\n  join_node.cpp\n  join_order_optimizer.cpp\n  cardinality_estimator.cpp\n  cost_model.cpp\n  plan_enumerator.cpp\n  relation_manager.cpp\n  query_graph_manager.cpp\n  relation_statistics_helper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Up JSON Extension Project in CMake\nDESCRIPTION: Initializes the CMake project for the JSON extension in DuckDB, defining minimum required CMake version and project name.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(JSONExtension)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and Pybind11 Dependencies in CMake\nDESCRIPTION: Sets up include directories for clang-tidy checks using pybind11 and Python headers.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/arrow/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding Library in CMake\nDESCRIPTION: The snippet creates a CMake target for the 'tpce_utilities' library, listing its source files. This allows compilation of multiple source files into a single library object. Required dependency is CMake.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/utilities/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tpce_utilities OBJECT\n            DateTime.cpp\n            EGenVersion.cpp\n            Money.cpp\n            Random.cpp\n            condition.cpp\n            error.cpp\n            locking.cpp\n            threading.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(TPCE_OBJECT_FILES\n    ${TPCE_OBJECT_FILES} $<TARGET_OBJECTS:tpce_utilities>\n    PARENT_SCOPE)\n```\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(tpce_utilities)\n```\n\n----------------------------------------\n\nTITLE: Installing JSON Extension Library\nDESCRIPTION: Sets up installation rules for the JSON extension, specifying target locations for library and archive files and adding the extension to the DuckDB export set.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(\n  TARGETS json_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and Pybind11 Dependencies in CMake\nDESCRIPTION: Sets up include directories for Python and Pybind11 headers and ensures Pybind11 is available as a required dependency.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/jupyter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in CMake for DuckDB\nDESCRIPTION: This CMake command updates the ALL_OBJECT_FILES variable in the parent scope. It adds the objects from the 'duckdb_catalog_entries' target to the existing list of object files, which is likely used for linking the final DuckDB executable or library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/catalog_entry/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_catalog_entries>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Storage Table Library\nDESCRIPTION: This snippet adds a CMake target for the DuckDB storage table that includes multiple source files essential for the operation of the storage subsystem. It leverages the 'add_library_unity' function to group the specified CPP files into a single library object, ensuring efficient compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/table/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\\\n  duckdb_storage_table\\\n  OBJECT\\\n  chunk_info.cpp\\\n  column_checkpoint_state.cpp\\\n  column_data_checkpointer.cpp\\\n  column_data.cpp\\\n  column_segment.cpp\\\n  array_column_data.cpp\\\n  list_column_data.cpp\\\n  update_segment.cpp\\\n  persistent_table_data.cpp\\\n  row_group.cpp\\\n  row_group_collection.cpp\\\n  row_version_manager.cpp\\\n  scan_state.cpp\\\n  standard_column_data.cpp\\\n  struct_column_data.cpp\\\n  table_statistics.cpp\\\n  validity_column_data.cpp)\\\nset(ALL_OBJECT_FILES\\\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_table>\\\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Subdirectories in CMake\nDESCRIPTION: Adds various subdirectories to the build process conditionally, skipping the C API when CLANG_TIDY is enabled. These subdirectories contain different components of the DuckDB database system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CLANG_TIDY)\n  add_subdirectory(capi)\nendif()\nadd_subdirectory(extension)\nadd_subdirectory(relation)\nadd_subdirectory(secret)\nadd_subdirectory(settings)\nadd_subdirectory(buffered_data)\nadd_subdirectory(chunk_scan_state)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Version Requirements for DuckDB AutoComplete Extension\nDESCRIPTION: Defines the minimum and maximum compatible CMake versions for building the DuckDB AutoComplete extension. Ensures the build system is compatible with the project requirements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n```\n\n----------------------------------------\n\nTITLE: Creating Arrow Roundtrip Test Library with CMake\nDESCRIPTION: Defines a CMake library for Arrow roundtrip tests composed of multiple source files. The library is created using the add_library_unity function, which combines multiple source files into a single unit for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/arrow/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_arrow_roundtrip OBJECT arrow_test_helper.cpp\n                  arrow_roundtrip.cpp arrow_move_children.cpp)\n```\n\n----------------------------------------\n\nTITLE: Python and Pybind11 Include Directories Setup\nDESCRIPTION: Adds include directories for both Python and pybind11 headers to the build configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Distributed Aggregation Functions Library in CMake\nDESCRIPTION: Defines a CMake library target for DuckDB's distributed aggregation functions. The library is built from source files for count, first/last/any, and minmax aggregation operations. The target objects are then added to the parent scope's ALL_OBJECT_FILES list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/aggregate/distributive/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_aggr_distr OBJECT count.cpp first_last_any.cpp\n                  minmax.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_aggr_distr>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating ADBC Test Library in DuckDB with CMake\nDESCRIPTION: Creates a unified library object from test_adbc.cpp for testing ADBC (Arrow Database Connectivity) functionality in DuckDB. The object is then added to the ALL_OBJECT_FILES collection at the parent scope to be included in the build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/adbc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_sql_adbc OBJECT test_adbc.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_adbc>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Core Extension Configuration\nDESCRIPTION: Sets up basic CMake configuration and defines core project variables including target names and source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12)\ninclude(ExternalProject)\n\nset(TARGET_NAME delta)\nset(EXTENSION_NAME ${TARGET_NAME}_extension)\nset(LOADABLE_EXTENSION_NAME ${TARGET_NAME}_loadable_extension)\n\nproject(${TARGET_NAME})\n\ninclude_directories(src/include)\n\nset(EXTENSION_SOURCES src/delta_extension.cpp src/delta_functions.cpp\n                      src/delta_utils.cpp src/functions/delta_scan.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exit-Time Destructors Warning in CMake\nDESCRIPTION: Conditionally adds a compiler flag to suppress exit-time destructors warnings in debug mode if EXIT_TIME_DESTRUCTORS_WARNING is enabled.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXIT_TIME_DESTRUCTORS_WARNING})\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-exit-time-destructors\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB Library\nDESCRIPTION: This snippet defines the installation rules for the previously created DuckDB library. It specifies the destination for both the library and its associated archive, ensuring correct export set usage.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fmt/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS duckdb_fmt\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Buffer Manager Library in CMake for DuckDB\nDESCRIPTION: Creates a library named 'duckdb_csv_buffer_manager' from three source files that handle CSV buffer management. The OBJECT specification means the files are compiled but not linked into a separate library file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/buffer_manager/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_csv_buffer_manager OBJECT csv_buffer.cpp\n                  csv_buffer_manager.cpp csv_file_handle.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Colored Compiler Output\nDESCRIPTION: Adds options to force colored output in compiler diagnostics for GNU and Clang compilers. When enabled, sets compiler-specific flags to ensure ANSI-colored output in build logs.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\noption(FORCE_COLORED_OUTPUT\n       \"Always produce ANSI-colored output (GNU/Clang only).\" FALSE)\nif(${FORCE_COLORED_OUTPUT})\n  if(\"${CMAKE_CXX_COMPILER_ID}\" STREQUAL \"GNU\")\n    add_compile_options(-fdiagnostics-color=always)\n  elseif(\"${CMAKE_CXX_COMPILER_ID}\" MATCHES \"Clang$\")\n    add_compile_options(-fcolor-diagnostics)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in CMake\nDESCRIPTION: This snippet updates the 'ALL_OBJECT_FILES' variable by appending the objects from the 'duckdb_value_operations' library. It uses the PARENT_SCOPE keyword to modify the variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/value_operations/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_value_operations>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Initializing Parquet Extension CMake Project\nDESCRIPTION: Sets up the basic CMake project configuration and includes necessary directory paths for the Parquet extension build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.29)\n\nproject(ParquetExtension)\n\ninclude_directories(\n  include ../../third_party/lz4 ../../third_party/parquet\n  ../../third_party/thrift ../../third_party/snappy\n  ../../third_party/brotli/include)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Statement Library in CMake\nDESCRIPTION: This CMake code defines a library named 'duckdb_statement' that compiles various statement handling source files as object files. It then adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/statement/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_statement\n  OBJECT\n  alter_statement.cpp\n  attach_statement.cpp\n  call_statement.cpp\n  copy_statement.cpp\n  copy_database_statement.cpp\n  create_statement.cpp\n  detach_statement.cpp\n  delete_statement.cpp\n  drop_statement.cpp\n  execute_statement.cpp\n  explain_statement.cpp\n  export_statement.cpp\n  extension_statement.cpp\n  insert_statement.cpp\n  load_statement.cpp\n  multi_statement.cpp\n  pragma_statement.cpp\n  prepare_statement.cpp\n  relation_statement.cpp\n  select_statement.cpp\n  set_statement.cpp\n  transaction_statement.cpp\n  update_statement.cpp\n  update_extensions_statement.cpp\n  vacuum_statement.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories for AutoComplete Extension\nDESCRIPTION: Adds the 'include' directory to the include path, enabling source files to find header files during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Defining and Configuring DuckDB Scalar Function Library in CMake\nDESCRIPTION: This CMake code defines a unity build library named 'duckdb_func_scalar' that includes various scalar function implementations. It compiles several source files into an object library to be included in the main DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_func_scalar\n  OBJECT\n  compressed_materialization_utils.cpp\n  create_sort_key.cpp\n  strftime_format.cpp\n  nested_functions.cpp\n  pragma_functions.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Library for Test Logging - CMake\nDESCRIPTION: The snippet uses the CMake function 'add_library_unity' to create an object library from the 'test_logging.cpp' source file. This is part of DuckDB's build process, allowing for efficient compilation in unity builds. The function specifies that the library is of the OBJECT type and will later be linked into other targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/logging/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_logging OBJECT test_logging.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Storage Compression Dictionary Object Library\nDESCRIPTION: Creates an object library named duckdb_storage_compression_dictionary with source files for compression and analysis components. Adds the library's object files to the parent scope's object files collection.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/dictionary/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_storage_compression_dictionary OBJECT common.cpp\n                  analyze.cpp compression.cpp decompression.cpp)\n```\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_compression_dictionary>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Storage Statistics Library with CMake\nDESCRIPTION: This snippet uses CMake to add a library target named 'duckdb_storage_statistics'. It comprises several C++ source files related to different types of statistical analyses, including base, column, and distinct statistics. The code snippet also sets the 'ALL_OBJECT_FILES' variable to include the storage statistics target, making it accessible in the parent scope. This configuration is essential for building the statistics component of DuckDB and depends on having CMake properly installed.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/statistics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nadd_library_unity(duckdb_storage_statistics OBJECT base_statistics.cpp column_statistics.cpp distinct_statistics.cpp array_stats.cpp list_stats.cpp numeric_stats.cpp segment_statistics.cpp string_stats.cpp struct_stats.cpp)\nset(ALL_OBJECT_FILES ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_statistics> PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Version Number Validation Function\nDESCRIPTION: CMake function to validate version numbers, ensuring they contain only digits. Sets the value to 0 if validation fails.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(ensure_variable_is_number INPUT_VERSION OUT_RESULT)\n  if(NOT \"${${INPUT_VERSION}}\" MATCHES \"^[0-9]+$\")\n    message(\n      WARNING\n        \"VERSION PARAMETER ${INPUT_VERSION} \\\"${${INPUT_VERSION}}\\\" IS NOT A NUMBER - SETTING TO 0\"\n    )\n    set(${OUT_RESULT}\n        0\n        PARENT_SCOPE)\n  else()\n    set(${OUT_RESULT}\n        ${${INPUT_VERSION}}\n        PARENT_SCOPE)\n  endif()\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: DuckDB Benchmark Output Format\nDESCRIPTION: Example of the CSV output format produced by the DuckDB benchmark runner, showing benchmark name, run number, and timing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_3\n\nLANGUAGE: csv\nCODE:\n```\nname\trun\ttiming\nbenchmark/micro/nulls/no_nulls_addition.benchmark\t1\t0.121234\nbenchmark/micro/nulls/no_nulls_addition.benchmark\t2\t0.121702\nbenchmark/micro/nulls/no_nulls_addition.benchmark\t3\t0.122948\nbenchmark/micro/nulls/no_nulls_addition.benchmark\t4\t0.122534\nbenchmark/micro/nulls/no_nulls_addition.benchmark\t5\t0.124102\n```\n\n----------------------------------------\n\nTITLE: Setting Target Include Directories for DuckDB FastPforLib\nDESCRIPTION: This snippet specifies the include directories for the 'duckdb_fastpforlib' target to make the current source directory available during the build. It is essential for ensuring that the necessary headers are found.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(\\n        duckdb_fastpforlib\\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Native Object Library\nDESCRIPTION: Creates an object library for Python native integration, compiling python_objects.cpp and python_conversion.cpp files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/native/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(python_native OBJECT python_objects.cpp python_conversion.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding the duckdb_utf8proc Static Library\nDESCRIPTION: This snippet defines a static library named 'duckdb_utf8proc' using the source files 'utf8proc.cpp' and 'utf8proc_wrapper.cpp'.  It creates a static library file that contains the compiled code from the listed source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/utf8proc/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_utf8proc STATIC utf8proc.cpp utf8proc_wrapper.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Package Support in CMake\nDESCRIPTION: Conditional CMake configuration that includes the Python package directory when BUILD_PYTHON_PKG is enabled, primarily for CLion IDE development purposes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Just to make CLion aware of the python package for development purposes\nif(BUILD_PYTHON_PKG)\n  add_subdirectory(pythonpkg)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Optimizer Statistics Expression Library in CMake\nDESCRIPTION: Defines a CMake library unity target for the DuckDB optimizer's statistics expression components. The library includes various propagation operation files for statistical expressions, such as aggregates, between operations, case statements, casts, comparisons, conjunctions, constants, column references, functions, and operators.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/statistics/expression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_statistics_expr\n  OBJECT\n  propagate_aggregate.cpp\n  propagate_between.cpp\n  propagate_case.cpp\n  propagate_cast.cpp\n  propagate_comparison.cpp\n  propagate_conjunction.cpp\n  propagate_constant.cpp\n  propagate_columnref.cpp\n  propagate_function.cpp\n  propagate_operator.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Headers to Generated File\nDESCRIPTION: For each extension that should be linked, appends an include directive for its header to the candidate generated headers file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nforeach(EXT_NAME IN LISTS STATICALLY_LINKED_EXTENSIONS)\n  string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n  if(${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n    set(DUCKDB_EXTENSION_HEADER \"${EXT_NAME}_extension.hpp\")\n    file(\n      APPEND\n      \"${PROJECT_BINARY_DIR}/codegen/include/generated_extension_headers.hpp.cand\"\n      \"#include \\\"${DUCKDB_EXTENSION_HEADER}\\\"\\n\")\n  endif()\nendforeach()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB C API Test Library in CMake\nDESCRIPTION: This CMake snippet creates an object library named 'test_sql_capi' containing C++ test files for DuckDB's C API functionality, and adds the compiled objects to a parent scope variable for inclusion in the project build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/capi/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  test_sql_capi\n  OBJECT\n  capi_aggregate_functions.cpp\n  capi_custom_type.cpp\n  capi_scalar_functions.cpp\n  capi_table_functions.cpp\n  test_capi.cpp\n  test_capi_any_invalid_type.cpp\n  test_capi_append_data_chunk.cpp\n  test_starting_database.cpp\n  test_capi_appender.cpp\n  test_capi_arrow.cpp\n  test_capi_data_chunk.cpp\n  test_capi_extract.cpp\n  test_capi_instance_cache.cpp\n  test_capi_pending.cpp\n  test_capi_prepared.cpp\n  test_capi_profiling.cpp\n  test_capi_website.cpp\n  test_capi_complex_types.cpp\n  test_capi_to_decimal.cpp\n  test_capi_values.cpp\n  test_capi_replacement_scan.cpp\n  test_capi_streaming.cpp\n  test_capi_table_description.cpp\n  test_without_disabled_functions.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sql_capi>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating Extension Loader Library\nDESCRIPTION: Creates an object library for the generated extension loader implementation and sets up variables to track the object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_generated_extension_loader OBJECT ${GENERATED_CPP_FILE})\nset(generated_loader_obj_files\n    $<TARGET_OBJECTS:duckdb_generated_extension_loader>)\n```\n\n----------------------------------------\n\nTITLE: Adding Unity Library in CMake\nDESCRIPTION: This snippet defines a CMake command to create an object library named 'test_index' using specified source files. It also updates the 'ALL_OBJECT_FILES' variable to include the object files associated with 'test_index'. Dependencies include CMake itself to process these commands. The input parameters specify the library name and source files while the output manages the PARENT_SCOPE variable for broader scope access.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/index/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_index OBJECT test_art_index.cpp test_art_keys.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_index>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Persistent Operator Library in CMake\nDESCRIPTION: This CMake snippet defines the duckdb_operator_persistent library as an OBJECT library, listing its source files. It then adds the compiled objects to the ALL_OBJECT_FILES variable for use in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/persistent/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_persistent\n  OBJECT\n  csv_rejects_table.cpp\n  physical_batch_copy_to_file.cpp\n  physical_batch_insert.cpp\n  physical_copy_database.cpp\n  physical_copy_to_file.cpp\n  physical_delete.cpp\n  physical_export.cpp\n  physical_insert.cpp\n  physical_update.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_persistent>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Constraints Object Library in CMake\nDESCRIPTION: Creates an object library for DuckDB's constraint implementations, including check, not null, unique, and foreign key constraints. The compilation products are then added to the ALL_OBJECT_FILES variable in the parent scope for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/constraints/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_constraints OBJECT check_constraint.cpp not_null_constraint.cpp\n  unique_constraint.cpp foreign_key_constraint.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_constraints>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Files for Parent Scope in CMake\nDESCRIPTION: Adds the objects from the 'duckdb_common' library to the ALL_OBJECT_FILES variable in the parent scope, making them available for inclusion in the main DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Bitwise Operators Library with CMake\nDESCRIPTION: Creates an object library for DuckDB's bitwise operators and adds it to the parent scope's CORE_FUNCTION_FILES variable. This allows the bitwise.cpp implementation to be compiled and included in the core DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/operators/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_operators OBJECT bitwise.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_operators>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings for DuckDB FastPforLib\nDESCRIPTION: This snippet disables compiler warnings for the 'duckdb_fastpforlib' library target. This is commonly done to prevent unnecessary warnings from cluttering the build output.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(duckdb_fastpforlib)\n```\n\n----------------------------------------\n\nTITLE: Adding Library Object in CMake\nDESCRIPTION: This snippet defines a new OBJECT library target named test_sql_tpce using the source file test_tpce.cpp. This setup is essential for organizing test-related code and allows for better management of object files within the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/tpce/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_sql_tpce OBJECT test_tpce.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Static Library\nDESCRIPTION: This snippet creates a static library named 'duckdb_fmt' from the source file 'format.cc'. It sets the library's properties and includes directories for the build interface.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fmt/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_fmt STATIC format.cc)\n\ntarget_include_directories(duckdb_fmt PRIVATE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\nset_target_properties(duckdb_fmt PROPERTIES EXPORT_NAME duckdb_fmt)\n```\n\n----------------------------------------\n\nTITLE: Creating a Unity Build Library for DuckDB Regression Functions in CMake\nDESCRIPTION: Configures a CMake unity build library for DuckDB's regression analysis functions. The library includes various regression-related source files such as calculation of slope, intercept, correlation coefficients, and other statistical measures. After creating the library, it adds the compiled objects to the parent scope's CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/regression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_regression\n  OBJECT\n  regr_sxy.cpp\n  regr_intercept.cpp\n  regr_count.cpp\n  regr_r2.cpp\n  regr_avg.cpp\n  regr_slope.cpp\n  regr_sxx_syy.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_regression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Checkpoint Storage Library in CMake\nDESCRIPTION: Defines a CMake object library for DuckDB's checkpoint storage functionality, compiling several source files related to checkpointing operations such as row group writing, table data reading/writing, and string overflow handling.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/checkpoint/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_checkpoint OBJECT row_group_writer.cpp table_data_writer.cpp\n  table_data_reader.cpp write_overflow_strings_to_disk.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_checkpoint>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Library for Test Helpers\nDESCRIPTION: This CMake command creates a static library named `test_helpers`. It uses the source files specified in the `DUCKDB_TEST_HELPERS_UNITS` variable, compiling them into a reusable library for testing purposes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/helpers/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test_helpers STATIC ${DUCKDB_TEST_HELPERS_UNITS})\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Column Types Library with Unity Build in CMake\nDESCRIPTION: Defines the duckdb_common_types_column library using unity build approach, which combines multiple source files into a single compilation unit. The library includes various column data management components that handle allocation, collection, segmentation, and consumption of column data.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/column/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_types_column\n  OBJECT\n  column_data_allocator.cpp\n  column_data_collection.cpp\n  column_data_collection_segment.cpp\n  column_data_consumer.cpp\n  partitioned_column_data.cpp)\n```\n\n----------------------------------------\n\nTITLE: Finding Threads Package\nDESCRIPTION: This snippet finds and ensures that the Threads package is available for linking, which is a common dependency for C++ projects that require multi-threading support.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(Threads REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Configuring ADBC Library Build for DuckDB using CMake\nDESCRIPTION: This CMake snippet sets up the build process for the ADBC library in DuckDB. It creates an object library for ADBC, includes the nanoarrow subdirectory, and updates the list of all object files to include the ADBC objects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/adbc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_adbc OBJECT adbc.cpp driver_manager.cpp)\nadd_subdirectory(nanoarrow)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_adbc>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregate Function Subdirectories in CMake\nDESCRIPTION: Adds subdirectories for different types of aggregate functions in DuckDB's build system. The code organizes aggregate functions into five categories: algebraic, distributive, holistic, nested, and regression functions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(algebraic)\nadd_subdirectory(distributive)\nadd_subdirectory(holistic)\nadd_subdirectory(nested)\nadd_subdirectory(regression)\n\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Add DuckDB Parsed Data Objects to Global File List\nDESCRIPTION: This snippet appends the object files produced by the `duckdb_parsed_data` library to a variable called `ALL_OBJECT_FILES`. This variable is then set in the parent scope, making it accessible to the parent CMakeLists.txt file. This is commonly done to collect all object files from different libraries for linking.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/parsed_data/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_parsed_data>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for DuckDB Modules - CMake\nDESCRIPTION: This snippet adds various subdirectories to the DuckDB CMake build system, each representing a separate module within the project. These modules are likely to define different components of the DuckDB functionality, allowing for modular development and organization.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(expression)\nadd_subdirectory(binder)\nadd_subdirectory(expression_binder)\nadd_subdirectory(filter)\nadd_subdirectory(operator)\nadd_subdirectory(subquery)\n```\n\n----------------------------------------\n\nTITLE: Setting Properties for DuckDB ZSTD Target\nDESCRIPTION: This snippet sets properties for the duckdb_zstd target, including exporting the target name for use by other modules or packages.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(duckdb_zstd PROPERTIES EXPORT_NAME duckdb_duckdb_z_std)\n```\n\n----------------------------------------\n\nTITLE: Add Snowball Static Library\nDESCRIPTION: This snippet defines a static library named 'snowball' and includes all the necessary C source files for different language stemming algorithms. The C files are located in the `libstemmer`, `runtime`, and `src_c` directories.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/snowball/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n  snowball STATIC\n  libstemmer/libstemmer.c\n  runtime/utilities.c\n  runtime/api.c\n  src_c/stem_UTF_8_arabic.c\n  src_c/stem_UTF_8_basque.c\n  src_c/stem_UTF_8_catalan.c\n  src_c/stem_UTF_8_danish.c\n  src_c/stem_UTF_8_dutch.c\n  src_c/stem_UTF_8_english.c\n  src_c/stem_UTF_8_finnish.c\n  src_c/stem_UTF_8_french.c\n  src_c/stem_UTF_8_german.c\n  src_c/stem_UTF_8_german2.c\n  src_c/stem_UTF_8_greek.c\n  src_c/stem_UTF_8_hindi.c\n  src_c/stem_UTF_8_hungarian.c\n  src_c/stem_UTF_8_indonesian.c\n  src_c/stem_UTF_8_irish.c\n  src_c/stem_UTF_8_italian.c\n  src_c/stem_UTF_8_kraaij_pohlmann.c\n  src_c/stem_UTF_8_lithuanian.c\n  src_c/stem_UTF_8_lovins.c\n  src_c/stem_UTF_8_nepali.c\n  src_c/stem_UTF_8_norwegian.c\n  src_c/stem_UTF_8_porter.c\n  src_c/stem_UTF_8_portuguese.c\n  src_c/stem_UTF_8_romanian.c\n  src_c/stem_UTF_8_russian.c\n  src_c/stem_UTF_8_serbian.c\n  src_c/stem_UTF_8_spanish.c\n  src_c/stem_UTF_8_swedish.c\n  src_c/stem_UTF_8_tamil.c\n  src_c/stem_UTF_8_turkish.c)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB FastPforLib Library\nDESCRIPTION: This snippet creates a static library named 'duckdb_fastpforlib' and associates it with the source file 'bitpacking.cpp'. This library is a core component that uses the FastPFor algorithm for bit packing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_fastpforlib STATIC bitpacking.cpp)\n```\n\n----------------------------------------\n\nTITLE: Preparing Extension Name Vector Initializer\nDESCRIPTION: Trims the leading comma from the extension name list to create a proper vector initializer for the generated code.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# trim comma\nif(NOT ${EXT_LOADER_NAME_LIST} STREQUAL \"\")\n  string(SUBSTRING ${EXT_LOADER_NAME_LIST} 1 -1 EXT_NAME_VECTOR_INITIALIZER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Transaction Module with CMake\nDESCRIPTION: Configures the build process for DuckDB's transaction module using CMake's add_library_unity command. This creates an OBJECT library by compiling various transaction-related source files, which are then added to the project's ALL_OBJECT_FILES variable for linking into the main DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/transaction/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_transaction\n  OBJECT\n  duck_transaction_manager.cpp\n  duck_transaction.cpp\n  meta_transaction.cpp\n  undo_buffer_allocator.cpp\n  undo_buffer.cpp\n  transaction_context.cpp\n  transaction.cpp\n  transaction_manager.cpp\n  commit_state.cpp\n  rollback_state.cpp\n  cleanup_state.cpp\n  wal_write_state.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transaction>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring ICU Library Components in CMake\nDESCRIPTION: CMake configuration that sets up ICU library build by adding required subdirectories and propagating library files to parent scope. Includes common, i18n, and stubdata components that are essential parts of the ICU library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/third_party/icu/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(common)\nadd_subdirectory(i18n)\nadd_subdirectory(stubdata)\n\nset(ICU_LIBRARY_FILES\n    ${ICU_LIBRARY_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Linking Test Helpers Library to DuckDB (Non-Windows)\nDESCRIPTION: This CMake command links the `test_helpers` library to the `duckdb` library, providing the test helpers with access to DuckDB's functionality. The linking is conditionally skipped when building on Windows, which may indicate platform-specific handling or differences in dependency management.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/helpers/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32)\n  target_link_libraries(test_helpers duckdb)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB FSST Library\nDESCRIPTION: This snippet installs the 'duckdb_fsst' library to specified destinations for both library and archive files, allowing it to be used in deployed applications.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS duckdb_fsst\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Python and pybind11 Include Paths in CMake\nDESCRIPTION: Sets up include directories for pybind11 and Python headers, and finds the required pybind11 package.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/functional/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Adding ALP Compression Library to DuckDB Build System using CMake\nDESCRIPTION: Configures the DuckDB ALP compression module as a library. It adds the necessary source files (alp_constants.cpp and alp.cpp) to create an object library named duckdb_storage_compression_alp, and adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/alp/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_storage_compression_alp OBJECT alp_constants.cpp\n                  alp.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_compression_alp>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Object Files in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include objects from the duckdb_optimizer library. This allows the parent CMake configuration to access and link these object files during the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Cloning jemalloc and setting up environment\nDESCRIPTION: Instructions for cloning the jemalloc repository and setting up the DUCKDB_DIR environment variable for convenience.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport DUCKDB_DIR=<duckdb_dir>\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Subdirectories in CMake\nDESCRIPTION: Defines the subdirectories for various parser components that will be built as part of the parser module. Each subdirectory contains specialized parser functionality for different aspects of SQL parsing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(constraints)\nadd_subdirectory(expression)\nadd_subdirectory(parsed_data)\nadd_subdirectory(query_node)\nadd_subdirectory(statement)\nadd_subdirectory(tableref)\nadd_subdirectory(transform)\n```\n\n----------------------------------------\n\nTITLE: Add Definitions\nDESCRIPTION: Adds definitions to the compiler flags. It defines RE2_ON_VALGRIND to enable specific behavior when running under Valgrind.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_definitions(-DRE2_ON_VALGRIND)\"\n```\n\n----------------------------------------\n\nTITLE: Setting All Object Files in CMake\nDESCRIPTION: This code snippet updates the variable 'ALL_OBJECT_FILES' to include the object files from 'test_parallel_csv'. This ensures that all object files are accessible at a higher scope, making them available for the entire DuckDB build system. It uses CMake's PARENT_SCOPE to ensure the changes are visible in the parent context.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/parallel_csv/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_parallel_csv>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties for DuckDB FastPforLib\nDESCRIPTION: This snippet sets export properties for the 'duckdb_fastpforlib' library to define its name when being used elsewhere, ensuring consistency in its usage across different parts of the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(duckdb_fastpforlib PROPERTIES EXPORT_NAME duckdb_fastpforlib)\n```\n\n----------------------------------------\n\nTITLE: Preparing Test Path Initializer\nDESCRIPTION: Trims the leading comma from the test path list to create a proper initializer for the generated code.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT ${EXT_TEST_PATH_LIST} STREQUAL \"\")\n  string(SUBSTRING ${EXT_TEST_PATH_LIST} 1 -1 EXT_TEST_PATH_INITIALIZER)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Expression Transformer Library in CMake\nDESCRIPTION: Creates a library named 'duckdb_transformer_expression' containing source files that transform different types of SQL expressions. The library is built as an OBJECT library, which means the compiled object files can be used in other targets without linking. After defining the library, it adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/expression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_transformer_expression\n  OBJECT\n  transform_array_access.cpp\n  transform_bool_expr.cpp\n  transform_boolean_test.cpp\n  transform_case.cpp\n  transform_cast.cpp\n  transform_coalesce.cpp\n  transform_columnref.cpp\n  transform_constant.cpp\n  transform_expression.cpp\n  transform_function.cpp\n  transform_grouping_function.cpp\n  transform_lambda.cpp\n  transform_interval.cpp\n  transform_is_null.cpp\n  transform_operator.cpp\n  transform_param_ref.cpp\n  transform_positional_reference.cpp\n  transform_subquery.cpp\n  transform_multi_assign_reference.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Storage Compression Library in CMake\nDESCRIPTION: Creates a unified object library named 'duckdb_storage_compression' containing various compression implementation source files. These files implement different compression strategies for DuckDB's storage engine.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_compression\n  OBJECT\n  numeric_constant.cpp\n  fixed_size_uncompressed.cpp\n  rle.cpp\n  dictionary_compression.cpp\n  string_uncompressed.cpp\n  uncompressed.cpp\n  validity_uncompressed.cpp\n  bitpacking.cpp\n  bitpacking_hugeint.cpp\n  patas.cpp\n  zstd.cpp\n  alprd.cpp\n  fsst.cpp\n  empty_validity.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB SkipList Library\nDESCRIPTION: This command installs the `duckdb_skiplistlib` target to the specified installation directories. It also exports the target for use by other projects. The `LIBRARY DESTINATION` and `ARCHIVE DESTINATION` specify the directories where the shared library and static library files will be installed, respectively, defined by `INSTALL_LIB_DIR`. The `EXPORT` keyword makes the library available for use by other CMake projects via the `DUCKDB_EXPORT_SET`.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS duckdb_skiplistlib\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Adds the object files from the 'test_api_udf_function' library to the ALL_OBJECT_FILES variable in the parent scope. This allows these test objects to be included in the main build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/udf_function/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_api_udf_function>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Main Relation Object Library in CMake\nDESCRIPTION: Creates an object library called 'duckdb_main_relation' that includes all relation implementation source files. The library contains various relation types such as table, projection, filter, join, and other relations that are fundamental to DuckDB's query processing system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/relation/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_main_relation\n  OBJECT\n  aggregate_relation.cpp\n  create_table_relation.cpp\n  create_view_relation.cpp\n  cross_product_relation.cpp\n  delete_relation.cpp\n  delim_get_relation.cpp\n  distinct_relation.cpp\n  explain_relation.cpp\n  filter_relation.cpp\n  insert_relation.cpp\n  join_relation.cpp\n  limit_relation.cpp\n  order_relation.cpp\n  update_relation.cpp\n  projection_relation.cpp\n  query_relation.cpp\n  read_csv_relation.cpp\n  read_json_relation.cpp\n  setop_relation.cpp\n  subquery_relation.cpp\n  table_function_relation.cpp\n  table_relation.cpp\n  value_relation.cpp\n  materialized_relation.cpp\n  view_relation.cpp\n  write_parquet_relation.cpp\n  write_csv_relation.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Statement Objects to Parent Scope in CMake\nDESCRIPTION: This CMake command adds the compiled objects from the 'duckdb_statement' library to the ALL_OBJECT_FILES variable in the parent scope, making them available for linking into the final executable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/statement/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_statement>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Shell Components Build in CMake\nDESCRIPTION: Conditional CMake configuration that adds subdirectories for SQLite3 API wrapper and shell components when BUILD_SHELL is enabled and not on SUN systems.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(NOT SUN AND BUILD_SHELL)\n  add_subdirectory(sqlite3_api_wrapper)\n  add_subdirectory(shell)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Parser Objects to Parent Scope in CMake\nDESCRIPTION: Appends the compiled parser objects to the ALL_OBJECT_FILES variable in the parent scope. This makes the parser objects available for linking into the main DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_parser>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Interquery Subdirectory in CMake\nDESCRIPTION: Adds the interquery subdirectory to the current CMake build configuration, allowing compilation of related source files and modules\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/parallelism/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(interquery)\n```\n\n----------------------------------------\n\nTITLE: Creating and Registering DuckDB Common Operators Library in CMake\nDESCRIPTION: Creates a unity build library for DuckDB common operators with cast and string conversion source files, then adds the resulting object files to the parent scope. This is part of DuckDB's build system that organizes operators related to type casting and string operations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/operator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_common_operators OBJECT cast_operators.cpp\n                  convert_to_string.cpp string_cast.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_operators>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Set Target Include Directories\nDESCRIPTION: Sets the include directories for the duckdb_re2 target. The PUBLIC keyword makes these include directories available to other targets that link against duckdb_re2.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_14\n\nLANGUAGE: CMake\nCODE:\n```\n\"target_include_directories(\n  duckdb_re2\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Unity Library for Expression Binders - CMake\nDESCRIPTION: This snippet defines a unity library in CMake named 'duckdb_expression_binders' which includes multiple source files related to expression binding in DuckDB. This setup is used to optimize the build process by aggregating related source files into a single library. The 'ALL_OBJECT_FILES' variable is updated to include the object files of this library for use in parent scopes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/expression_binder/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_expression_binders\n  OBJECT\n  aggregate_binder.cpp\n  alter_binder.cpp\n  base_select_binder.cpp\n  check_binder.cpp\n  column_alias_binder.cpp\n  constant_binder.cpp\n  group_binder.cpp\n  having_binder.cpp\n  lateral_binder.cpp\n  qualify_binder.cpp\n  index_binder.cpp\n  insert_binder.cpp\n  order_binder.cpp\n  relation_binder.cpp\n  returning_binder.cpp\n  select_binder.cpp\n  select_bind_state.cpp\n  table_function_binder.cpp\n  update_binder.cpp\n  where_binder.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_expression_binders>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Operator Helper Library in CMake\nDESCRIPTION: This CMake snippet defines a library named 'duckdb_operator_helper' that contains various physical operators for the DuckDB database system. It specifies all the source files to be compiled as part of this library and adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/helper/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_helper\n  OBJECT\n  physical_batch_collector.cpp\n  physical_buffered_collector.cpp\n  physical_buffered_batch_collector.cpp\n  physical_create_secret.cpp\n  physical_execute.cpp\n  physical_explain_analyze.cpp\n  physical_limit.cpp\n  physical_limit_percent.cpp\n  physical_load.cpp\n  physical_materialized_collector.cpp\n  physical_pragma.cpp\n  physical_prepare.cpp\n  physical_reservoir_sample.cpp\n  physical_result_collector.cpp\n  physical_set.cpp\n  physical_set_variable.cpp\n  physical_reset.cpp\n  physical_streaming_limit.cpp\n  physical_streaming_sample.cpp\n  physical_transaction.cpp\n  physical_update_extensions.cpp\n  physical_vacuum.cpp\n  physical_verify_vector.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_helper>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Compiler Warnings for Target in CMake\nDESCRIPTION: Calls a custom CMake function to disable compiler warnings for the dbgen target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpch/dbgen/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(dbgen)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories and Propagating Object Files in CMake\nDESCRIPTION: This CMake script adds multiple subdirectories to the build configuration and propagates all object files to the parent scope. It includes important components like buffer_manager, encode, scanner, sniffer, state_machine, table_function, and util.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(buffer_manager)\nadd_subdirectory(encode)\nadd_subdirectory(scanner)\nadd_subdirectory(sniffer)\nadd_subdirectory(state_machine)\nadd_subdirectory(table_function)\nadd_subdirectory(util)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Progress Bar Library to Project Object Files in CMake\nDESCRIPTION: Appends the objects from the 'duckdb_progress_bar' library to the ALL_OBJECT_FILES variable in the parent scope. This ensures the progress bar functionality is included in the main project build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/progress_bar/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_progress_bar>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Core Distributive Functions Library in CMake\nDESCRIPTION: Configures the duckdb_core_functions_distributive library by specifying its source files and setting up the build target. The code adds the compiled objects to the parent scope's CORE_FUNCTION_FILES variable for inclusion in the main DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/distributive/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_distributive\n  OBJECT\n  kurtosis.cpp\n  string_agg.cpp\n  sum.cpp\n  arg_min_max.cpp\n  approx_count.cpp\n  skew.cpp\n  bitagg.cpp\n  bitstring_agg.cpp\n  product.cpp\n  bool.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_distributive>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Expression Transformer Objects to Parent Scope\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the objects generated from the duckdb_transformer_expression library. This allows the parent CMake configuration to include these objects in the final build targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/expression/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_expression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Handle MSVC Compiler\nDESCRIPTION: Configures settings specific to the MSVC compiler. It checks the Visual Studio version and sets export symbols for shared libraries. It also disables specific warnings and sets UTF-8 encoding for source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(CMAKE_CXX_COMPILER_ID MATCHES \\\"MSVC\\\")\n  if(MSVC_VERSION LESS 1900)\n    message(FATAL_ERROR \\\"you need Visual Studio 2015 or later\\\")\n  endif()\n  if(BUILD_SHARED_LIBS)\n    # See http://www.kitware.com/blog/home/post/939 for details.\n    cmake_minimum_required(VERSION 3.4)\n    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n  endif()\n  # CMake defaults to /W3, but some users like /W4 (or /Wall) and /WX, so we\n  # disable various warnings that aren't particularly helpful.\n  add_compile_options(/wd4100\n                      /wd4201\n                      /wd4456\n                      /wd4457\n                      /wd4702\n                      /wd4815)\n  # Without a byte order mark (BOM), Visual Studio assumes that the source file\n  # is encoded using the current user code page, so we specify UTF-8.\n  add_compile_options(/utf-8)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency Subdirectory in CMake for DuckDB\nDESCRIPTION: This CMake command adds a subdirectory named 'dependency' to the build process. It allows CMake to process the CMakeLists.txt file in that subdirectory, incorporating its targets and settings into the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/catalog_entry/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(dependency)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Definitions in CMake\nDESCRIPTION: This snippet calls the function add_extension_definitions() without any arguments. It is intended to include or define additional SQLite-related functionalities for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sqlite/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_extension_definitions()\n```\n\n----------------------------------------\n\nTITLE: Conditional Autocomplete Extension Configuration\nDESCRIPTION: Conditionally includes and configures the autocomplete extension if DUCKDB_EXTENSION_AUTOCOMPLETE_SHOULD_LINK is enabled. Sets up necessary include paths and source files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/sqlite3_api_wrapper/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(DUCKDB_EXTENSION_AUTOCOMPLETE_SHOULD_LINK)\n  include_directories(../../extension/autocomplete/include)\n  set(ALL_OBJECT_FILES ${ALL_OBJECT_FILES}\n                       ../../extension/autocomplete/autocomplete_extension.cpp)\n  add_definitions(-DSHELL_INLINE_AUTOCOMPLETE)\nendif()\nset(SQLITE_API_WRAPPER_FILES shell_extension.cpp sqlite3_api_wrapper.cpp\n                             ${ALL_OBJECT_FILES})\n```\n\n----------------------------------------\n\nTITLE: Handle Windows Definitions\nDESCRIPTION: Adds Windows-specific definitions. These definitions disable certain warnings and enforce Unicode support.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(WIN32)\n  add_definitions(-DUNICODE\n                  -D_UNICODE\n                  -DSTRICT\n                  -DNOMINMAX)\n  add_definitions(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Map Functions Library in CMake\nDESCRIPTION: Defines and configures the duckdb_core_functions_map library which contains implementations of map-related functions in DuckDB. The library is built as an OBJECT library and includes various map operation source files. The compiled objects are then added to the parent scope's CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/map/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_map\n  OBJECT\n  map_keys_values.cpp\n  map_extract.cpp\n  map_from_entries.cpp\n  map_entries.cpp\n  map.cpp\n  map_concat.cpp\n  cardinality.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_map>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for DuckDB Parser Components in CMake\nDESCRIPTION: This CMake snippet adds five subdirectories for different parser components (constraint, expression, helpers, statement, and tableref) to be included in the build process. It also sets the ALL_OBJECT_FILES variable in the parent scope to ensure compiled objects are properly tracked.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(constraint)\nadd_subdirectory(expression)\nadd_subdirectory(helpers)\nadd_subdirectory(statement)\nadd_subdirectory(tableref)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Dependencies and Building Python Relation Object\nDESCRIPTION: Sets up include directories for pybind11 and Python headers, finds required pybind11 package, and creates a Python relation object library. The compiled object files are added to the parent scope's object file collection.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/pyrelation/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\n# this is used for clang-tidy checks\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n\nadd_library(python_relation OBJECT initialize.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_relation>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Delta Kernel Rust Integration\nDESCRIPTION: Configures the external Rust delta-kernel project build process including debug and release builds with platform-specific targets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nExternalProject_Add(\n  ${KERNEL_NAME}\n  GIT_REPOSITORY \"https://github.com/delta-incubator/delta-kernel-rs\"\n  GIT_TAG 08f0764a00e89f42136fd478823d28278adc7ee8\n  CONFIGURE_COMMAND \"\"\n  UPDATE_COMMAND \"\"\n  BUILD_IN_SOURCE 1\n  BUILD_COMMAND cargo build --package delta_kernel_ffi --workspace\n                --all-features --target=${RUST_PLATFORM_TARGET}\n  COMMAND cargo build --package delta_kernel_ffi --workspace --all-features\n          --release --target=${RUST_PLATFORM_TARGET}\n  COMMAND cargo build\n    --manifest-path=${CMAKE_BINARY_DIR}/rust/src/delta_kernel/acceptance/Cargo.toml\n  BUILD_BYPRODUCTS\n    \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/debug/libdelta_kernel_ffi.a\"\n  BUILD_BYPRODUCTS\n    \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/${RUST_PLATFORM_TARGET}/release/libdelta_kernel_ffi.a\"\n  BUILD_BYPRODUCTS\n    \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/ffi-headers/delta_kernel_ffi.h\"\n  BUILD_BYPRODUCTS\n    \"${CMAKE_BINARY_DIR}/rust/src/delta_kernel/target/ffi-headers/delta_kernel_ffi.hpp\"\n  INSTALL_COMMAND \"\"\n  LOG_BUILD ON)\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Scope Object Files in CMake\nDESCRIPTION: This CMake code appends the objects from the duckdb_csv_util library to the parent scope's ALL_OBJECT_FILES variable. This allows these objects to be included in the final build process at a higher level.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/util/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_util>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Core Array Functions Library in CMake\nDESCRIPTION: Defines and builds the duckdb_core_functions_array library from array-related source files. It then adds the compiled objects to the parent scope's CORE_FUNCTION_FILES variable to be included in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/array/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_array OBJECT array_functions.cpp\n                  array_value.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_array>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Files for DuckDB Join Order Optimizer\nDESCRIPTION: This CMake code snippet appends the target objects (object files) associated with the `duckdb_optimizer_join_order` library to the `ALL_OBJECT_FILES` variable. The `PARENT_SCOPE` option ensures that the variable is updated in the parent scope of the current CMake context. This is likely used to collect all object files for linking into a larger library or executable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/join_order/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_join_order>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling YYJSON Warnings\nDESCRIPTION: Disables compiler warnings for the YYJSON library target using a custom CMake function.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/yyjson/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(duckdb_yyjson)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Scalar Function Objects to Parent Scope in CMake\nDESCRIPTION: This snippet propagates the compiled object files from the 'duckdb_func_scalar' library to the parent scope for inclusion in the final build. It appends the library's objects to the ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_scalar>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in Parent Scope\nDESCRIPTION: Appends the compiled objects from the common types library to the ALL_OBJECT_FILES variable in the parent scope, making them available for linking in the parent CMake context.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_types>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Include Paths and Dependencies\nDESCRIPTION: Sets up include directories for pybind11 and Python headers, and requires pybind11 package for compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/native/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(${pybind11_INCLUDE_DIR})\ninclude_directories(${PYTHON_INCLUDE_DIRS})\nfind_package(pybind11 REQUIRED)\n```\n\n----------------------------------------\n\nTITLE: Install RE2 Library\nDESCRIPTION: Installs the duckdb_re2 library to the specified destination directories. The library and archive are installed separately.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\n\"install(TARGETS duckdb_re2\n        EXPORT \\\"${DUCKDB_EXPORT_SET}\\\"\n        LIBRARY DESTINATION \\\"${INSTALL_LIB_DIR}\\\"\n        ARCHIVE DESTINATION \\\"${INSTALL_LIB_DIR}\\\")\"\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Core Generic Functions Library in CMake\nDESCRIPTION: This CMake script configures the compilation of DuckDB's generic core functions. It creates an object library from multiple source files including alias, binning, hash functions, and others, then adds the compiled objects to the parent scope's CORE_FUNCTION_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/generic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_core_functions_generic\n  OBJECT\n  alias.cpp\n  binning.cpp\n  can_implicitly_cast.cpp\n  current_setting.cpp\n  hash.cpp\n  least.cpp\n  stats.cpp\n  typeof.cpp\n  system_functions.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_generic>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Parquet Extension\nDESCRIPTION: Configures the build targets for both static and loadable extensions, sets up linking dependencies, and defines installation rules.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/parquet/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nbuild_static_extension(parquet ${PARQUET_EXTENSION_FILES})\nset(PARAMETERS \"-warnings\")\nbuild_loadable_extension(parquet ${PARAMETERS} ${PARQUET_EXTENSION_FILES})\ntarget_link_libraries(parquet_loadable_extension duckdb_mbedtls duckdb_zstd)\n\ninstall(\n  TARGETS parquet_extension\n  EXPORT \"${DUCKDB_EXPORT_SET}\"\n  LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n  ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Including Subdirectories and Propagating Object Files in CMake\nDESCRIPTION: This CMake configuration adds multiple subdirectories to the build process and propagates all object files to the parent scope. It organizes the DuckDB codebase by functional components such as aggregate, scan, filter, join, and persistence.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(aggregate)\nadd_subdirectory(csv_scanner)\nadd_subdirectory(filter)\nadd_subdirectory(helper)\nadd_subdirectory(join)\nadd_subdirectory(order)\nadd_subdirectory(persistent)\nadd_subdirectory(projection)\nadd_subdirectory(scan)\nadd_subdirectory(schema)\nadd_subdirectory(set)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting SQLite Test Runner Sources in CMake\nDESCRIPTION: This snippet creates a list of source files for the SQLite test runner, which will be compiled into an object library. The files included are responsible for testing the SQL logic in DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sqlite/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(SQLITE_TEST_RUNNER_SOURCES\n    result_helper.cpp sqllogic_command.cpp sqllogic_test_runner.cpp\n    sqllogic_parser.cpp test_sqllogictest.cpp sqllogic_test_logger.cpp)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Files in CMake\nDESCRIPTION: This CMake code snippet adds the object files generated by the `test_table_function` target to the `ALL_OBJECT_FILES` variable in the parent scope. This allows other parts of the CMake configuration to use these object files, likely during the final linking stage to produce an executable or a shared library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/function/table/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_table_function>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Blob Functions Library in DuckDB CMake Configuration\nDESCRIPTION: Creates a unity build library for blob manipulation functions in DuckDB, including base64 and encode implementations. Updates the parent scope's CORE_FUNCTION_FILES to include the generated object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/blob/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_blob OBJECT base64.cpp encode.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_blob>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Optimizer Rules Objects to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope by adding the objects from the duckdb_optimizer_rules library. This ensures the optimizer rules are included in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/rule/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_rules>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Installing YYJSON Library\nDESCRIPTION: Configures installation rules for the YYJSON library, specifying export set and destination directories for library and archive files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/yyjson/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS duckdb_yyjson\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the CMake version used to build the project is compatible with the commands and features used in the CMakeLists.txt file. The range 3.5 to 3.29 is supported.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.29)\n```\n\n----------------------------------------\n\nTITLE: Setting a Variable in CMake with Parent Scope\nDESCRIPTION: The `set` command defines or modifies a CMake variable. The `PARENT_SCOPE` option makes the variable available in the parent directory. This ensures that `ALL_OBJECT_FILES` accumulates object files from all subdirectories.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Directories and Subdirectories for JSON Extension\nDESCRIPTION: Sets up include directories and adds the json_functions subdirectory to the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/json/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(include)\nadd_subdirectory(json_functions)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake policy CMP0063\nDESCRIPTION: Sets the CMake policy CMP0063 to NEW. This policy controls how CMake handles target properties related to shared libraries. Setting it to NEW ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Handle GNU/Clang Compiler\nDESCRIPTION: Configures settings for GNU or Clang compilers. It adds compile options to enforce the c++11 standard.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n\"elseif(CMAKE_CXX_COMPILER_ID MATCHES \\\"GNU|Clang\\\")\n  add_compile_options(-std=c++11)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Query Node Binding and Planning Library in CMake\nDESCRIPTION: This CMake snippet defines the 'duckdb_bind_query_node' library which contains binding and planning functionality for various query node types in DuckDB. It also adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/binder/query_node/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_bind_query_node\n  OBJECT\n  bind_select_node.cpp\n  bind_setop_node.cpp\n  bind_recursive_cte_node.cpp\n  bind_cte_node.cpp\n  bind_table_macro_node.cpp\n  plan_query_node.cpp\n  plan_recursive_cte_node.cpp\n  plan_cte_node.cpp\n  plan_select_node.cpp\n  plan_setop.cpp\n  plan_subquery.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_bind_query_node>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Filtering ICU Data for Reduced Size\nDESCRIPTION: This JSON configuration provides a set of filters to exclude certain features from the ICU data packaging process, aimed at reducing the size of the generated data files. It defines what elements to exclude when compiling ICU data, specifically focusing on various unnecessary components.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"featureFilters\": {\n        \"brkitr_rules\" : \"exclude\",\n        \"brkitr_dictionaries\" : \"exclude\",\n        \"brkitr_tree\"   : \"exclude\",\n        \"conversion_mappings\"   : \"exclude\",\n        \"confusables\"   : \"exclude\",\n        \"curr_supplemental\" : \"exclude\",\n        \"curr_tree\" : \"exclude\",\n        \"lang_tree\" : \"exclude\",\n        \"normalization\" : \"exclude\",\n        \"region_tree\"   : \"exclude\",\n        \"rbnf_tree\" : \"exclude\",\n        \"stringprep\"    : \"exclude\",\n        \"zone_tree\" : \"exclude\",\n        \"translit\"  : \"exclude\",\n        \"unames\"    : \"exclude\",\n        \"ulayout\"   : \"exclude\",\n        \"unit_tree\" : \"exclude\",\n        \"cnvalias\" : \"exclude\",\n        \"locales_tree\"  : \"exclude\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB SkipList Library\nDESCRIPTION: This CMake command adds a static library named `duckdb_skiplistlib` that is built from the source file `SkipList.cpp`. This library is intended to provide SkipList data structure functionality to DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_skiplistlib STATIC SkipList.cpp)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Directory Variables in CMake\nDESCRIPTION: The snippet uses add_definitions to set the DUCKDB_ROOT_DIRECTORY and DUCKDB_BUILD_DIRECTORY, providing paths required for the DuckDB build process. These definitions support proper directory referencing in subsequent build tasks.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sqlite/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DDUCKDB_ROOT_DIRECTORY=\"${PROJECT_SOURCE_DIR}\"\n                -DDUCKDB_BUILD_DIRECTORY=\"${PROJECT_BINARY_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Aggregating Object Files in CMake\nDESCRIPTION: This snippet modifies the `ALL_OBJECT_FILES` variable to include the object files from the `test_common` target. This setup uses CMake's generator expressions to dynamically include the compiled object files into a parent-scope variable. Such an aggregation is essential for linking and ensuring all necessary object files are part of the build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/common/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_common>\\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories and Core Functions Extension in DuckDB Catalog CMake\nDESCRIPTION: Sets up subdirectories for the catalog components and conditionally enables/disables the core functions extension based on the BUILD_CORE_FUNCTIONS_EXTENSION flag.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(catalog_entry)\nadd_subdirectory(default)\n\nif(${BUILD_CORE_FUNCTIONS_EXTENSION})\n\nelse()\n  add_definitions(-DDISABLE_CORE_FUNCTIONS_EXTENSION=1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting all object files with duckdb_verification targets\nDESCRIPTION: This CMake snippet appends the object files generated from the `duckdb_verification` target to the `ALL_OBJECT_FILES` variable in the parent scope. The use of `TARGET_OBJECTS` retrieves the object files associated with the given target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/verification/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_verification>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: Conditionally sets CMake policy CMP0063 to NEW if available. This policy determines visibility properties for exported symbols.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/yyjson/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: Specifies the include directories for the \"duckdb_pg_query\" library. This allows the library to find the necessary header files during compilation. The include directory is set to the \"include\" directory within the current source directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  duckdb_pg_query\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\n```\n\n----------------------------------------\n\nTITLE: Setting build type to Release\nDESCRIPTION: Sets the build type to \"Release\".  Optimizes the build for performance, typically disabling debug symbols and enabling optimizations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_BUILD_TYPE \"Release\")\n```\n\n----------------------------------------\n\nTITLE: Adding Distributive Functions Subdirectory in CMake for DuckDB\nDESCRIPTION: Adds the 'distributive' subdirectory to the build system, which likely contains implementations for distributive aggregate functions in DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/aggregate/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(distributive)\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: Defines the project name and supported languages (CXX and C). This sets up the basic project structure for CMake. The project name is \"duckdb_pg_query\".\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nproject(duckdb_pg_query CXX C)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Secret Management Library with CMake\nDESCRIPTION: Defines a CMake library target for DuckDB's secret management functionality. The library is created using the 'add_library_unity' command with the OBJECT type, combining multiple source files related to secret handling into a single compilation unit.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/secret/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_main_secret OBJECT secret.cpp secret_manager.cpp\n                  secret_storage.cpp default_secrets.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Optimizer Pullup Library in CMake\nDESCRIPTION: This CMake code creates a library called 'duckdb_optimizer_pullup' that builds several source files as a single compilation unit using the unity build approach. It then adds the generated object files to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/pullup/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_pullup\n  OBJECT\n  pullup_filter.cpp\n  pullup_projection.cpp\n  pullup_from_left.cpp\n  pullup_both_side.cpp\n  pullup_set_operation.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_pullup>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: This code snippet sets the minimum required CMake version to be between 3.5 and 3.29. It ensures that the CMake version used to build the project meets the minimum requirements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.5...3.29)\n```\n\n----------------------------------------\n\nTITLE: Creating Jupyter Progress Bar Display Library\nDESCRIPTION: Defines an object library for the Jupyter notebook progress bar display functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/jupyter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(python_jupyter OBJECT jupyter_progress_bar_display.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB FastPforLib Library\nDESCRIPTION: This snippet directs the installation process for the 'duckdb_fastpforlib' library, defining the export set and specifying where the library files should be placed in the installation directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS duckdb_fastpforlib\\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Updating Core Function Files List in CMake\nDESCRIPTION: This snippet updates the CORE_FUNCTION_FILES variable by appending the objects from the newly created duckdb_core_functions_nested library. The PARENT_SCOPE keyword ensures the variable is updated in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/nested/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_nested>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Object Files in DuckDB CMake Configuration\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the duckdb_optimizer_statistics_expr library. This allows the parent CMake configuration to include these objects in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/statistics/expression/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_statistics_expr>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Define Project\nDESCRIPTION: Defines the project name as RE2 and specifies the CXX language. This is a fundamental declaration for any CMake project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"project(RE2 CXX)\"\n```\n\n----------------------------------------\n\nTITLE: CMake project setup\nDESCRIPTION: This snippet sets the minimum required CMake version and defines the project name as 'Snowball'. It also includes directories containing the source code for the stemming library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/snowball/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n\nproject(Snowball)\n\n# cmake_policy(SET CMP0063 NEW)\n\ninclude_directories(libstemmer runtime src_c)\n```\n\n----------------------------------------\n\nTITLE: Creating static tpce library\nDESCRIPTION: Creates a static library named 'tpce' from the specified object files and source code.  This library likely contains the core logic and functionality of the TPCE benchmark.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tpce STATIC\n            ${TPCE_OBJECT_FILES}\n            duckdb_interface.cpp\n            tpce.cpp\n            tpce_generated.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Unity Build in CMake for DuckDB Tests\nDESCRIPTION: This CMake snippet defines a unity build target 'test_memory_leak' that includes 'test_appender.cpp' and 'test_temporary_tables.cpp'. These test files are bundled into a single object to reduce compilation time and memory usage. Furthermore, the unity object's files are aggregated into the 'ALL_OBJECT_FILES' variable, which is propagated to the parent CMake scope for broader usage.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/memoryleak/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_memory_leak OBJECT test_appender.cpp\\n                  test_temporary_tables.cpp)\\nset(ALL_OBJECT_FILES\\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_memory_leak>\\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including HTTP Library Directory in DuckDB\nDESCRIPTION: Adds the third-party httplib directory to the include path for the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../../../third_party/httplib/)\n```\n\n----------------------------------------\n\nTITLE: Set CXX Visibility Preset\nDESCRIPTION: Sets the C++ visibility preset to hidden. This controls the visibility of symbols in the generated library, reducing the likelihood of conflicts with other libraries.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n\"set(CMAKE_CXX_VISIBILITY_PRESET hidden)\"\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Core Algebraic Functions Library in CMake\nDESCRIPTION: This CMake snippet creates an object library for DuckDB core algebraic functions and adds it to the main project's core function files. It includes correlation, standard deviation, average, and covariance implementations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/algebraic/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_algebraic OBJECT corr.cpp stddev.cpp\n                  avg.cpp covar.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_algebraic>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Sample Module Libraries with CMake\nDESCRIPTION: Creates a unified library called 'duckdb_sample' from source files related to reservoir sampling, and adds the resulting object to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/sample/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_sample OBJECT base_reservoir_sample.cpp\n                  reservoir_sample.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_sample>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Defining the project\nDESCRIPTION: This code defines the project named 'imdb' and specifies that it uses CXX (C++) as the programming language. It is a fundamental CMake command to set up the project environment.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nproject(imdb CXX)\n```\n\n----------------------------------------\n\nTITLE: Creating C API Cast Library Unity in CMake\nDESCRIPTION: Creates a library unity object called 'duckdb_main_capi_cast' that includes the C implementations for casting utilities. The object files are then added to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/capi/cast/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_main_capi_cast OBJECT utils-c.cpp from_decimal-c.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing the duckdb_utf8proc Library\nDESCRIPTION: This snippet configures the installation of the 'duckdb_utf8proc' library. It specifies the export set, library destination, and archive destination. The `${DUCKDB_EXPORT_SET}`, `${INSTALL_LIB_DIR}` variables are assumed to be defined elsewhere in the CMake configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/utf8proc/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS duckdb_utf8proc\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Defining Source Files for AutoComplete Extension\nDESCRIPTION: Creates a variable containing all source files needed to build the AutoComplete extension. Includes the main extension file, matcher, and tokenizer components.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/autocomplete/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(AUTOCOMPLETE_EXTENSION_FILES autocomplete_extension.cpp matcher.cpp\n                                 tokenizer.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Optimizer Pushdown Objects to Parent Scope\nDESCRIPTION: Adds the compiled object files from the duckdb_optimizer_pushdown library to the parent scope's ALL_OBJECT_FILES variable. This ensures the optimizer pushdown objects are included in the final DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/pushdown/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_pushdown>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disable Target Warnings\nDESCRIPTION: Disables target warnings for the duckdb_re2 target.  This likely refers to a custom function that disables compiler warnings for the specified target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\n\"disable_target_warnings(duckdb_re2)\"\n```\n\n----------------------------------------\n\nTITLE: Setting minimum CMake version\nDESCRIPTION: Specifies the minimum required version of CMake to build the project. Ensures that the CMake version is within the specified range.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 2.8.12...3.29)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Visibility for DuckDB Build\nDESCRIPTION: This snippet sets the default visibility for symbols in C++ to hidden, which can help reduce symbol conflicts and improve encapsulation in shared libraries.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Scanning a Local Delta Table in SQL\nDESCRIPTION: Example of using delta_scan to query a Delta table stored on the local filesystem using the file:// protocol prefix with the full path.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/README.md#2025-04-22_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nFROM delta_scan('file:///some/path/on/local/machine');\n```\n\n----------------------------------------\n\nTITLE: Including Generated Headers Directory\nDESCRIPTION: Adds the directory containing generated headers to the include path for the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# include generated includes\ninclude_directories(\"${PROJECT_BINARY_DIR}/codegen/include/\")\n```\n\n----------------------------------------\n\nTITLE: Setting the build type\nDESCRIPTION: This code sets the build type to \"Release\". This tells CMake to optimize the build for performance and disable debug symbols.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_BUILD_TYPE \"Release\")\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB MBEDTLS Library\nDESCRIPTION: This snippet provides the installation instructions for the 'duckdb_mbedtls' library, specifying its export set and destination directories for dynamic and static libraries. This step ensures that the compiled library is correctly installed in the specified locations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS duckdb_mbedtls\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Subdirectories with CMake\nDESCRIPTION: These commands add subdirectories for different storage-related components to the build process.  `add_subdirectory` tells CMake to process the `CMakeLists.txt` file located in each specified subdirectory, allowing these components to be built as part of the overall DuckDB project. Each subdirectory likely contains its own source files and build instructions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"add_subdirectory(buffer)\nadd_subdirectory(checkpoint)\nadd_subdirectory(compression)\nadd_subdirectory(metadata)\nadd_subdirectory(serialization)\nadd_subdirectory(statistics)\nadd_subdirectory(table)\"\n```\n\n----------------------------------------\n\nTITLE: Set Minimum CMake Version\nDESCRIPTION: Specifies the minimum required version of CMake for the project. This ensures that the build system has the necessary features and capabilities.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n\"cmake_minimum_required(VERSION 3.5...3.29)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Jupyter Objects to Project Files\nDESCRIPTION: Adds the compiled Jupyter progress bar object files to the project's overall object files list with parent scope visibility.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/jupyter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_jupyter>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting DuckDB FSST Export Name\nDESCRIPTION: This snippet sets the EXPORT_NAME property of the 'duckdb_fsst' library, which is useful for exporting the library to other build systems or projects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nset_target_properties(duckdb_fsst PROPERTIES EXPORT_NAME duckdb_fsst)\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Encoder Library in CMake for DuckDB\nDESCRIPTION: Creates an OBJECT library for the DuckDB CSV encoder component using the csv_encoder.cpp source file and adds it to the parent scope's collection of object files for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/encode/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_csv_encode OBJECT csv_encoder.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_encode>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating ALL_OBJECT_FILES with DuckDB Operator Join Library\nDESCRIPTION: This CMake command updates the ALL_OBJECT_FILES variable by adding the objects from the duckdb_operator_join library. It uses the PARENT_SCOPE keyword to modify the variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/join/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_join>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings for TPC-E Input Library\nDESCRIPTION: Suppresses compiler warnings for the tpce_input target to minimize unnecessary warning output during compilation\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/input/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(tpce_input)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: This snippet checks if CMake policy CMP0063 is defined and sets it to NEW if it is. This policy likely relates to some specific CMake behavior.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/utf8proc/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Target Properties\nDESCRIPTION: This command sets the `EXPORT_NAME` property for the `duckdb_skiplistlib` target. This ensures that the library is exported with the specified name when it is used by other projects that depend on DuckDB. This allows the library to be referenced by its intended name in dependent projects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(duckdb_skiplistlib PROPERTIES EXPORT_NAME duckdb_skiplistlib)\n```\n\n----------------------------------------\n\nTITLE: Define RE2 Testing Option\nDESCRIPTION: Defines an option to enable or disable testing for RE2. This allows users to control whether tests are built and run. The default is OFF.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n\"option(RE2_BUILD_TESTING \\\"enable testing for RE2\\\" OFF)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories\nDESCRIPTION: Sets up include directories for the YYJSON library, making headers publicly available during build time.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/yyjson/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n        duckdb_yyjson\n        PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\nset_target_properties(duckdb_yyjson PROPERTIES EXPORT_NAME duckdb_duckdb_yyjson)\n```\n\n----------------------------------------\n\nTITLE: Setting include directories\nDESCRIPTION: This snippet adds the 'include' directory to the include search path. This allows the compiler to find header files located in the 'include' directory when compiling the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Optimizer Statistics Operations Library in CMake\nDESCRIPTION: Defines a CMake library named 'duckdb_optimizer_statistics_op' containing source files for statistical propagation across different query operators. The library is built as an OBJECT library, and its objects are added to the parent scope's ALL_OBJECT_FILES collection.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/statistics/operator/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(\n  duckdb_optimizer_statistics_op\n  OBJECT\n  propagate_aggregate.cpp\n  propagate_cross_product.cpp\n  propagate_filter.cpp\n  propagate_get.cpp\n  propagate_limit.cpp\n  propagate_join.cpp\n  propagate_order.cpp\n  propagate_projection.cpp\n  propagate_set_operation.cpp\n  propagate_window.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_optimizer_statistics_op>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Settings Library in CMake\nDESCRIPTION: Configures the build for DuckDB's settings component. It creates an OBJECT library named 'duckdb_main_settings' from two source files (custom_settings.cpp and autogenerated_settings.cpp), then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/settings/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_main_settings OBJECT custom_settings.cpp\n                  autogenerated_settings.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_settings>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Target Warnings for DuckDB\nDESCRIPTION: This snippet disables compiler warnings for the 'duckdb_fmt' target, helping to maintain a clean build by preventing unnecessary warnings during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fmt/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(duckdb_fmt)\n```\n\n----------------------------------------\n\nTITLE: Configuring TPC-E Input Data Object Library\nDESCRIPTION: Creates an object library named 'tpce_input' with multiple source files for data file record processing in the TPC-E benchmark implementation\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/input/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tpce_input OBJECT\n            AreaCodeDataFileRecord.cpp\n            ChargeDataFileRecord.cpp\n            CommissionRateDataFileRecord.cpp\n            CompanyCompetitorDataFileRecord.cpp\n            CompanyCompetitorFile.cpp\n            CompanyDataFileRecord.cpp\n            CompanyFile.cpp\n            CompanySPRateDataFileRecord.cpp\n            DataFileManager.cpp\n            ExchangeDataFileRecord.cpp\n            FemaleFirstNameDataFileRecord.cpp\n            IndustryDataFileRecord.cpp\n            LastNameDataFileRecord.cpp\n            MaleFirstNameDataFileRecord.cpp\n            NewsDataFileRecord.cpp\n            NonTaxableAccountNameDataFileRecord.cpp\n            SectorDataFileRecord.cpp\n            SecurityDataFileRecord.cpp\n            SecurityFile.cpp\n            StatusTypeDataFileRecord.cpp\n            StreamSplitter.cpp\n            StreetNameDataFileRecord.cpp\n            StreetSuffixDataFileRecord.cpp\n            StringSplitter.cpp\n            TaxRateCountryDataFileRecord.cpp\n            TaxRateDivisionDataFileRecord.cpp\n            TaxRateFile.cpp\n            TaxableAccountNameDataFileRecord.cpp\n            TextFileSplitter.cpp\n            TradeTypeDataFileRecord.cpp\n            Utilities.cpp\n            ZipCodeDataFileRecord.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding subdirectories\nDESCRIPTION: Adds the specified subdirectories to the build process.  These subdirectories likely contain source code and their own CMakeLists.txt files to define their build procedures.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(main)\nadd_subdirectory(input)\nadd_subdirectory(utilities)\n```\n\n----------------------------------------\n\nTITLE: Defining YYJSON Static Library\nDESCRIPTION: Creates a static library target for DuckDB's YYJSON implementation using the yyjson.cpp source file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/yyjson/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(duckdb_yyjson STATIC yyjson.cpp)\n```\n\n----------------------------------------\n\nTITLE: Creating Python NumPy Library Object in CMake\nDESCRIPTION: Defines a new object library 'python_numpy' with source files for NumPy integration including type handling, scanning, array operations, and result conversion.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/numpy/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n  python_numpy OBJECT\n  type.cpp numpy_scan.cpp array_wrapper.cpp raw_array_wrapper.cpp\n  numpy_bind.cpp numpy_result_conversion.cpp)\n```\n\n----------------------------------------\n\nTITLE: Disabling Target Warnings in CMake\nDESCRIPTION: This snippet uses a custom CMake function, `disable_target_warnings`, to disable compiler warnings for the `tpce_main` target. This can be useful for suppressing warnings that are not relevant or cannot be easily fixed.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/main/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(tpce_main)\n```\n\n----------------------------------------\n\nTITLE: Setting Parent Scope Variable for Object Files in CMake\nDESCRIPTION: Appends the dbgen object files to a parent scope variable, allowing the parent CMake file to access these objects.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpch/dbgen/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(DBGEN_OBJECT_FILES\n   ${DBGEN_OBJECT_FILES} $<TARGET_OBJECTS:dbgen>\n   PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Compiler Flags to Suppress Exit-Time Destructors Warning\nDESCRIPTION: Conditionally sets C++ compiler flags for debug builds to suppress exit-time destructors warnings, based on the EXIT_TIME_DESTRUCTORS_WARNING variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXIT_TIME_DESTRUCTORS_WARNING})\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-exit-time-destructors\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up DuckDB Build Definitions\nDESCRIPTION: Adds extension definitions and sets the DuckDB root directory macro for build configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_extension_definitions()\nadd_definitions(-DDUCKDB_ROOT_DIRECTORY=\"${PROJECT_SOURCE_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Creating ICU Stubdata Library in DuckDB with CMake\nDESCRIPTION: Defines an object library named 'duckdb_icu_stubdata' with 'stubdata.cpp' as its source file, then adds the resulting object file to the parent scope's ICU_LIBRARY_FILES variable. This allows the ICU stubdata functionality to be integrated into the DuckDB build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/third_party/icu/stubdata/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(\n  duckdb_icu_stubdata\n  OBJECT\nstubdata.cpp\n)\nset(ICU_LIBRARY_FILES\n    ${ICU_LIBRARY_FILES} $<TARGET_OBJECTS:duckdb_icu_stubdata>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting C++ Visibility Preset\nDESCRIPTION: This snippet sets the visibility preset for C++ symbols to 'hidden', which can help reduce link time and improve encapsulation by only exposing necessary symbols. It's a preliminary configuration step in compiling the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Planner Filter Library Components in CMake\nDESCRIPTION: This CMake snippet defines the 'duckdb_planner_filter' library using the unity build approach, which combines multiple source files into a single compilation unit. It includes various filter implementations and adds the resulting object files to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/filter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_planner_filter\n  OBJECT\n  conjunction_filter.cpp\n  constant_filter.cpp\n  dynamic_filter.cpp\n  in_filter.cpp\n  null_filter.cpp\n  struct_filter.cpp\n  optional_filter.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_planner_filter>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Union Declaration for Yacc Return Values - C\nDESCRIPTION: This C snippet defines a union that specifies the various return types for different grammar rules. This includes types used for parsing nodes and lists from SQL statements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/README.md#2025-04-22_snippet_3\n\nLANGUAGE: c\nCODE:\n```\n%union\n{\n  ...\n  PGList *list;\n  PGNode *node;\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a TPCE Object Library in CMake\nDESCRIPTION: This snippet defines a CMake object library named `tpce_main`. It lists the source files that will be compiled into object files, which are then linked into the final executable or library. The `OBJECT` keyword indicates that it's an object library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(tpce_main OBJECT\n            AddressTable.cpp\n            BaseLogger.cpp\n            CE.cpp\n            CETxnInputGenerator.cpp\n            CETxnMixGenerator.cpp\n            ChargeTable.cpp\n            CommissionRateTable.cpp\n            CustomerSelection.cpp\n            CustomerTable.cpp\n            DM.cpp\n            EGenGenerateAndLoad.cpp\n            EGenLogFormatterTab.cpp\n            ExchangeTable.cpp\n            FlatFileLoader.cpp\n            IndustryTable.cpp\n            MEE.cpp\n            MEEPriceBoard.cpp\n            MEESecurity.cpp\n            MEETickerTape.cpp\n            MEETradingFloor.cpp\n            Person.cpp\n            SectorTable.cpp\n            StatusTypeTable.cpp\n            TaxRateTable.cpp\n            TradeGen.cpp\n            TradeTypeTable.cpp\n            WheelTime.cpp\n            ZipCodeTable.cpp\n            bucketsimulator.cpp\n            progressmeter.cpp\n            progressmeterinterface.cpp\n            strutil.cpp)\n```\n\n----------------------------------------\n\nTITLE: Propagating TPC-E Object Library to Parent Scope\nDESCRIPTION: Adds the compiled tpce_input object library to the parent scope's list of object files, enabling library usage in broader build context\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/input/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TPCE_OBJECT_FILES\n    ${TPCE_OBJECT_FILES} $<TARGET_OBJECTS:tpce_input>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings for DuckDB ZSTD\nDESCRIPTION: This snippet disables warnings for the duckdb_zstd target, which can help maintain a cleaner build output by ignoring specific compiler messages.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(duckdb_zstd)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Value Operations Library in CMake\nDESCRIPTION: This snippet adds a library named 'duckdb_value_operations' using the 'add_library_unity' command. It specifies the library type as OBJECT and includes the source file 'comparison_operations.cpp'.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/value_operations/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_value_operations OBJECT comparison_operations.cpp)\n```\n\n----------------------------------------\n\nTITLE: Updating State with Multiple Inputs in DuckDB Aggregates\nDESCRIPTION: The update operation accumulates input values into corresponding State objects, supporting grouped aggregation by scattering values to appropriate states.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nupdate(Vector inputs[], AggregateInputData &info, idx_t ninputs, Vector &states, idx_t count)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories for DuckDB Tests in CMake\nDESCRIPTION: Configures include directories for the testing framework by including third-party dependencies and project-specific headers. This ensures that test files can reference necessary header files from various components of the project and its dependencies.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../third_party/catch)\ninclude_directories(../third_party/tpce-tool/include)\ninclude_directories(../third_party/sqlite/include)\ninclude_directories(include)\n\n# Allows loading tests from registered extensions\ninclude_directories(\"${PROJECT_BINARY_DIR}/codegen/include/\")\nadd_definitions(-DGENERATED_EXTENSION_HEADERS=1)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options in CMake for DuckDB\nDESCRIPTION: Configures various build options for DuckDB, including native architecture compilation and new/delete overriding.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\noption(NATIVE_ARCH \"Compile targeting the native architecture\" FALSE)\noption(OVERRIDE_NEW_DELETE \"Override C++ new/delete (only when jemalloc is enabled)\" FALSE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063 for DuckDB\nDESCRIPTION: This snippet checks if the CMake policy CMP0063 is available and sets it to the NEW version. Policy CMP0063 affects how the preprocessor definitions are handled for object libraries. This setting is necessary for version consistency and building the project with policy changes. No external dependencies are required.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/miniz/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining TPCE project\nDESCRIPTION: Defines the TPCE project, specifying CXX and C as the supported languages.  This command sets up the basic project structure within the CMake build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nproject(tpce CXX C)\n```\n\n----------------------------------------\n\nTITLE: Configuring IMDB Benchmark for DuckDB in CMake\nDESCRIPTION: This snippet configures the IMDB benchmark for the DuckDB project. It includes the IMDB header files, creates an object library for the benchmark, and adds it to the list of benchmark object files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/imdb/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(../../third_party/imdb/include)\n\nadd_library(duckdb_benchmark_imdb OBJECT imdb.cpp)\nset(BENCHMARK_OBJECT_FILES\n    ${BENCHMARK_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_benchmark_imdb>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including Include Directories\nDESCRIPTION: This snippet includes the 'include' directory, making header files within that directory available for use during compilation. This step is crucial for accessing necessary declarations and definitions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/utf8proc/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB TableRef Transformer Library in CMake\nDESCRIPTION: Creates a library target named 'duckdb_transformer_tableref' that compiles various table reference transformation source files. The library is built as an OBJECT library, which means the object files are generated but not linked into a standalone library file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/tableref/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_transformer_tableref\n  OBJECT\n  transform_base_tableref.cpp\n  transform_join.cpp\n  transform_from.cpp\n  transform_pivot.cpp\n  transform_subquery.cpp\n  transform_table_function.cpp\n  transform_tableref.cpp)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB dsdgen Library Components\nDESCRIPTION: CMake configuration that defines the dsdgen_c object library with numerous source files for data generation. The library includes components for handling dates, decimals, random generation, and various database table implementations. It also sets up build configuration and disables warnings for the target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpcds/dsdgen/dsdgen-c/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n  dsdgen_c OBJECT\n  skip_days.cpp\n  address.cpp\n  build_support.cpp\n  date.cpp\n  dbgen_version.cpp\n  decimal.cpp\n  dist.cpp\n  error_msg.cpp\n  genrand.cpp\n  init.cpp\n  join.cpp\n  list.cpp\n  load.cpp\n  misc.cpp\n  nulls.cpp\n  parallel.cpp\n  permute.cpp\n  pricing.cpp\n  r_params.cpp\n  release.cpp\n  scaling.cpp\n  scd.cpp\n  sparse.cpp\n  StringBuffer.cpp\n  tdef_functions.cpp\n  tdefs.cpp\n  text.cpp\n  w_call_center.cpp\n  w_catalog_page.cpp\n  w_catalog_returns.cpp\n  w_catalog_sales.cpp\n  w_customer.cpp\n  w_customer_address.cpp\n  w_customer_demographics.cpp\n  w_datetbl.cpp\n  w_household_demographics.cpp\n  w_income_band.cpp\n  w_inventory.cpp\n  w_item.cpp\n  w_promotion.cpp\n  w_reason.cpp\n  w_ship_mode.cpp\n  w_store.cpp\n  w_store_returns.cpp\n  w_store_sales.cpp\n  w_timetbl.cpp\n  w_warehouse.cpp\n  w_web_page.cpp\n  w_web_returns.cpp\n  w_web_sales.cpp\n  w_web_site.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(DSDGEN_OBJECT_FILES\n    ${DSDGEN_OBJECT_FILES} $<TARGET_OBJECTS:dsdgen_c>\n    PARENT_SCOPE)\n```\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(dsdgen_c)\n```\n\n----------------------------------------\n\nTITLE: Building DuckDB Logging Library with CMake\nDESCRIPTION: CMake configuration that creates a library called 'duckdb_logging' from several source files related to logging functionality. It then adds the compiled objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main project build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/logging/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_logging OBJECT logger.cpp log_manager.cpp\n                  log_storage.cpp logging.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_logging>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding compiler definitions\nDESCRIPTION: Adds a compiler definition to enable flat file loading. This likely enables specific code paths or features in the source code related to flat file processing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_definitions(-DCOMPILE_FLAT_FILE_LOAD)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Catalog Entries Library in CMake\nDESCRIPTION: This CMake command creates a library target named 'duckdb_catalog_entries' using the add_library_unity function. It compiles multiple source files related to catalog entries into a single object file for improved build performance.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/catalog_entry/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_catalog_entries\n  OBJECT\n  copy_function_catalog_entry.cpp\n  duck_index_entry.cpp\n  duck_schema_entry.cpp\n  duck_table_entry.cpp\n  type_catalog_entry.cpp\n  index_catalog_entry.cpp\n  macro_catalog_entry.cpp\n  pragma_function_catalog_entry.cpp\n  schema_catalog_entry.cpp\n  sequence_catalog_entry.cpp\n  table_catalog_entry.cpp\n  column_dependency_manager.cpp\n  scalar_function_catalog_entry.cpp\n  table_function_catalog_entry.cpp\n  view_catalog_entry.cpp)\n```\n\n----------------------------------------\n\nTITLE: Running Train Benchmark Queries in DuckDB\nDESCRIPTION: Commands for executing the six benchmark queries against the loaded dataset. Each query represents a different test case from the Train Benchmark specification.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/trainbenchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat queries/connectedsegments.sql | duckdb tb.duckdb\ncat queries/routesensor.sql | duckdb tb.duckdb\ncat queries/poslength.sql | duckdb tb.duckdb\ncat queries/semaphoreneighbor.sql | duckdb tb.duckdb\ncat queries/switchmonitored.sql | duckdb tb.duckdb\ncat queries/switchset.sql | duckdb tb.duckdb\n```\n\n----------------------------------------\n\nTITLE: Creating Test API Library and Setting Object Files in CMake\nDESCRIPTION: Creates an OBJECT library from all the test API source files and appends this library to the parent scope's ALL_OBJECT_FILES variable. This allows the test objects to be linked into the final test executable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(test_api OBJECT ${TEST_API_OBJECTS})\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_api>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Python Dependencies Check Configuration\nDESCRIPTION: Checks for required Python libraries and exits if not found using CMake's find_package system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PythonLibs)\nif(NOT PythonLibs_FOUND)\n  return()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Getting TimeZone Offset\nDESCRIPTION: This C++ snippet retrieves the standard and daylight saving time offsets for the 'America/Los_Angeles' timezone using the ICU library's Calendar and TimeZone functionalities. It handles potential errors while creating the timezone and obtaining the offsets.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nUErrorCode success = U_ZERO_ERROR;\nauto tz_us = CreateTimezone(\"America/Los_Angeles\");\n\nauto calendar = unique_ptr<Calendar>(Calendar::createInstance(success));\nif (U_FAILURE(success)) {\n\t// something went wrong\n\texit(1);\n}\n\nauto curDate = calendar->getNow();\n\n// Use getOffset to get the stdOffset and dstOffset for the given time\nint32_t stdOffset, dstOffset;\ntz_us->getOffset(curDate, false, stdOffset, dstOffset, success);\nif (U_FAILURE(success)) {\n\t// something went wrong\n\texit(1);\n}\nprintf(\"%s: %d\\n\",\"US Time Zone STD offset\",stdOffset/(1000*60*60));\nprintf(\"%s: %d\\n\",\"US Time Zone DST offset\",dstOffset/(1000*60*60));\nprintf(\"%s: \", \"US date/time is in daylight savings time\");\nprintf(\"%s\\n\", (calendar->inDaylightTime(success))?\"Yes\":\"No\");\n\n// out:\n// US Time Zone STD offset: -8\n// US Time Zone DST offset: 1\n// US date/time is in daylight savings time: Yes\n```\n\n----------------------------------------\n\nTITLE: Suppressing Exit-Time Destructors Warning\nDESCRIPTION: If configured, adds a compiler flag to suppress warnings about exit-time destructors in debug mode.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_13\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXIT_TIME_DESTRUCTORS_WARNING})\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-exit-time-destructors\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in Parent Scope with CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the test_arrow_roundtrip library. This ensures the Arrow test objects are included in the overall build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/arrow/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_arrow_roundtrip>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Set CMake Policies\nDESCRIPTION: Sets CMake policies for specific behaviors. CMP0048 addresses relative paths in include directories, and CMP0063 manages the visibility of global target properties.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n\"if(POLICY CMP0048)\n  cmake_policy(SET CMP0048 NEW)\nendif()\n\nif(POLICY CMP0063)\n  cmake_policy(SET CMP0063 NEW)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Including Core API Subdirectories in CMake\nDESCRIPTION: Adds two essential subdirectories to the build: 'capi' (C API) and 'udf_function' (User-Defined Function support). These components provide critical API functionality for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(capi)\nadd_subdirectory(udf_function)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories for DuckDB Execution Module in CMake\nDESCRIPTION: Adds multiple subdirectories to the CMake build configuration for the DuckDB execution module. These subdirectories likely contain additional source files and configurations for specific components of the execution engine.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(expression_executor)\nadd_subdirectory(nested_loop_join)\nadd_subdirectory(operator)\nadd_subdirectory(physical_plan)\nadd_subdirectory(index)\nadd_subdirectory(sample)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Arrow Appender Library in CMake\nDESCRIPTION: Adds a library target 'duckdb_common_arrow_appender' as an OBJECT library composed of multiple source files for handling different Arrow data types. The target objects are then added to the ALL_OBJECT_FILES variable in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/arrow/appender/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_arrow_appender\n  OBJECT\n  bool_data.cpp\n  fixed_size_list_data.cpp\n  null_data.cpp\n  struct_data.cpp\n  union_data.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_arrow_appender>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exit-Time Destructors Warning for Debug Build in CMake\nDESCRIPTION: Conditionally adds a compiler flag to disable exit-time destructors warning in debug builds. This is controlled by the EXIT_TIME_DESTRUCTORS_WARNING variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/row/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXIT_TIME_DESTRUCTORS_WARNING})\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-exit-time-destructors\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Hidden Symbol Visibility Configuration\nDESCRIPTION: Sets the C compiler visibility preset to hidden, preventing symbol exports from third-party libraries to maintain encapsulation and reduce potential symbol conflicts.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(CMAKE_C_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Setting position independent code\nDESCRIPTION: Sets the POSITION_INDEPENDENT_CODE property to ON for the \"duckdb_pg_query\" target. This enables position-independent code generation, which is required for shared libraries on some platforms. This is necessary for creating shared libraries that can be loaded at any address in memory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(duckdb_pg_query PROPERTIES POSITION_INDEPENDENT_CODE ON)\n```\n\n----------------------------------------\n\nTITLE: Running All DuckDB Benchmarks\nDESCRIPTION: Command to run all available benchmarks in the DuckDB benchmark runner.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner\n```\n\n----------------------------------------\n\nTITLE: Setting All Object Files for DuckDB Planner - CMake\nDESCRIPTION: This snippet updates the variable ALL_OBJECT_FILES to include all object files from the duckdb_planner target, with the PARENT_SCOPE option allowing this variable to be accessible in parent scopes. This is useful for managing dependencies and ensuring all necessary object files are compiled correctly.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_planner>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Inclusion of ADBC Subdirectory in CMake\nDESCRIPTION: Conditionally includes the ADBC (Arrow Database Connectivity) subdirectory only if CLANG_TIDY is not enabled, likely to avoid certain checks during code analysis.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CLANG_TIDY)\n  add_subdirectory(adbc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring MbedTLS Header Installation\nDESCRIPTION: Conditionally installs MbedTLS and PSA headers with specific file permissions when INSTALL_MBEDTLS_HEADERS option is enabled\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/include/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(INSTALL_MBEDTLS_HEADERS \"Install mbed TLS headers.\" ON)\n\nif(INSTALL_MBEDTLS_HEADERS)\n\n    file(GLOB headers \"mbedtls/*.h\")\n    file(GLOB psa_headers \"psa/*.h\")\n\n    install(FILES ${headers}\n        DESTINATION include/mbedtls\n        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)\n\n    install(FILES ${psa_headers}\n        DESTINATION include/psa\n        PERMISSIONS OWNER_READ OWNER_WRITE GROUP_READ WORLD_READ)\n\nendif(INSTALL_MBEDTLS_HEADERS)\n```\n\n----------------------------------------\n\nTITLE: Include CTest\nDESCRIPTION: Includes the CTest module, which provides support for testing. This allows the project to define and run unit tests as part of the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n\"include(CTest)\"\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB as Target Dependency in Package.swift\nDESCRIPTION: This snippet demonstrates how to add DuckDB as a dependency to a specific target in a Swift package manifest file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/swift/duckdb-swift/README.md#2025-04-22_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n.target(name: \"TargetName\", dependencies: [\n  .product(name: \"DuckDB\", package: \"duckdb-swift\"),\n...\\n]),\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Struct Functions Library in CMake\nDESCRIPTION: Creates a CMake library target for DuckDB's struct functions and adds the resulting object files to the core functions collection. This connects the struct_insert.cpp implementation to the main DuckDB build system.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/struct/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_struct OBJECT struct_insert.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_struct>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding and Configuring the duckdb_miniz Static Library\nDESCRIPTION: This snippet adds a static library named 'duckdb_miniz' that includes the 'miniz.cpp' file. It sets the include directories for this library, specifies target properties, and defines installation pathways. This configuration is essential for compiling and linking the miniz component within the DuckDB project. The snippet assumes that 'miniz.cpp' is present and references the DuckDB project's installation directories.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/miniz/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(duckdb_miniz STATIC miniz.cpp)\n\ntarget_include_directories(\n  duckdb_miniz\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\nset_target_properties(duckdb_miniz PROPERTIES EXPORT_NAME duckdb_duckdb_miniz)\n\ninstall(TARGETS duckdb_miniz\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n\ndisable_target_warnings(duckdb_miniz)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Sort Library in CMake\nDESCRIPTION: This snippet adds a library named 'duckdb_sort' to the project, specifying its source files. It then adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/sort/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_sort\n  OBJECT\n  comparators.cpp\n  merge_sorter.cpp\n  partition_state.cpp\n  radix_sort.cpp\n  sort_state.cpp\n  sorted_block.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_sort>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Updating ALL_OBJECT_FILES Variable in CMake\nDESCRIPTION: Appends the compiled objects from the duckdb_common_types_row library to the ALL_OBJECT_FILES variable. This update is propagated to the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/row/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_types_row>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Subdirectory Inclusion for ADBC in CMake\nDESCRIPTION: Conditionally includes the ADBC subdirectory if CLANG_TIDY is not defined. This is likely to bypass tidy checks for the ADBC module.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CLANG_TIDY)\n  add_subdirectory(adbc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting C++ visibility preset\nDESCRIPTION: Sets the C++ visibility preset to hidden.  This reduces the visibility of symbols exported from the library, improving build times and reducing the risk of symbol clashes. It only allows symbols explicitly marked for export to be visible.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(CMAKE_CXX_VISIBILITY_PRESET hidden)\n```\n\n----------------------------------------\n\nTITLE: Using Default Extraction Path with DuckDB Test Runner\nDESCRIPTION: Commands for decompressing a gzipped database file to the default temporary directory (__TEST_DIR__) and loading it into the DuckDB test runner in read-only mode.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/data/storage/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nunzip <path/to/filename.db.gz>\n\nload __TEST_DIR__/<filename.db> readonly\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Core Modules in CMake\nDESCRIPTION: This CMake snippet includes subdirectories for expression and operator components and propagates compiled object files to the parent scope. It's part of the build system structure that organizes the DuckDB codebase.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/optimizer/statistics/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(expression)\nadd_subdirectory(operator)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Generating Unified Build Files for DuckDB Swift Package\nDESCRIPTION: This Python command generates the Unified Build files for the DuckDB Swift package, which is a crucial step in setting up the development environment.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/swift/duckdb-swift/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npython3 tools/swift/create_package.py tools/swift\n```\n\n----------------------------------------\n\nTITLE: Defining Memory Leak Suppressions for DuckDB dsdgen Extension\nDESCRIPTION: Configuration that suppresses memory leak warnings for specific functions in the TPC-DS data generator (dsdgen) extension. These functions are known to have controlled memory leaks that are part of the TPC-DS implementation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/.sanitizer-leak-suppressions.txt#2025-04-22_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nleak:load_dist\nleak:find_dist\nleak:read_dist\nleak:init_text_pool\nleak:makePermutation\nleak:init_params\n```\n\n----------------------------------------\n\nTITLE: Implementing jemalloc constructor in C++\nDESCRIPTION: C++ implementation of the jemalloc_constructor function in jemalloc.c, which sets up the custom malloc configuration based on CPU count and other parameters.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nJEMALLOC_ATTR(constructor)\nstatic void\njemalloc_constructor(void) {\n\tunsigned long long cpu_count = malloc_ncpus();\n\tif (cpu_count == 0) {\n\t\tcpu_count = duckdb_malloc_ncpus();\n\t}\n\tunsigned long long narenas = cpu_count / 2;\n\tif (narenas == 0) {\n\t    narenas = 1;\n\t}\n\tunsigned long long bgt_count = cpu_count / 16;\n\tif (bgt_count == 0) {\n\t\tbgt_count = 1;\n\t}\n\t// decay is in ms\n\tunsigned long long decay = DUCKDB_JEMALLOC_DECAY * 1000;\n#ifdef DEBUG\n\tsnprintf(JE_MALLOC_CONF_BUFFER, JE_MALLOC_CONF_BUFFER_SIZE, \"junk:true,oversize_threshold:268435456,dirty_decay_ms:%llu,muzzy_decay_ms:%llu,narenas:%llu,max_background_threads:%llu\", decay, decay, narenas, bgt_count);\n#else\n\tsnprintf(JE_MALLOC_CONF_BUFFER, JE_MALLOC_CONF_BUFFER_SIZE, \"oversize_threshold:268435456,dirty_decay_ms:%llu,muzzy_decay_ms:%llu,narenas:%llu,max_background_threads:%llu\", decay, decay, narenas, bgt_count);\n#endif\n\tje_malloc_conf = JE_MALLOC_CONF_BUFFER;\n\tmalloc_init();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up LDBC Benchmark with DuckDB\nDESCRIPTION: A series of bash commands to download LDBC benchmark data, initialize the database schema in DuckDB, and load the data. The process involves creating a DuckDB database file named 'ldbc.duckdb' and populating it with data from the sf0.1 directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/ldbc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython download-benchmark-data.py\ncat schema.sql | duckdb ldbc.duckdb\nsed \"s|PATHVAR|`pwd`/sf0.1|\" snb-load.sql | duckdb ldbc.duckdb\n```\n\n----------------------------------------\n\nTITLE: Running DuckDB Benchmark with Output File\nDESCRIPTION: Command to run a benchmark and write timings to a file, along with an example of viewing the file contents.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark --out=timings.out\ncat timings.out\n```\n\n----------------------------------------\n\nTITLE: Adding Statement Binding Objects to Parent Scope in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the compiled objects from the duckdb_bind_statement library. This ensures that these objects are included in the final build process when linking the complete DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/planner/binder/statement/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_bind_statement>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Common Tree Renderer Library in CMake\nDESCRIPTION: This CMake snippet adds a library named 'duckdb_common_tree_renderer' as an OBJECT library, including various tree renderer implementation files. It then adds the resulting object files to the ALL_OBJECT_FILES variable for use in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/tree_renderer/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_tree_renderer\n  OBJECT\n  json_tree_renderer.cpp\n  html_tree_renderer.cpp\n  graphviz_tree_renderer.cpp\n  text_tree_renderer.cpp\n  tree_renderer.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_tree_renderer>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Registering Column Types Objects with Parent Scope in CMake\nDESCRIPTION: Appends the object files generated by the duckdb_common_types_column library to the ALL_OBJECT_FILES variable in the parent scope. This ensures these objects are included in the final DuckDB library build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/column/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_common_types_column>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Set Extra Target Link Libraries\nDESCRIPTION: Initializes an empty variable for extra target link libraries. This variable can be used to add additional libraries that the RE2 library depends on.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n\"set(EXTRA_TARGET_LINK_LIBRARIES)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Definitions\nDESCRIPTION: Applies extension-specific compile definitions to the main extension library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_16\n\nLANGUAGE: CMake\nCODE:\n```\nadd_extension_definitions(duckdb_main_extension)\n```\n\n----------------------------------------\n\nTITLE: Adding Secret Management Objects to Parent Scope in CMake\nDESCRIPTION: Updates the parent scope's ALL_OBJECT_FILES variable to include the object files produced by the duckdb_main_secret target. This ensures the secret management components will be included in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/secret/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_secret>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Displaying DuckDB Benchmark Information\nDESCRIPTION: Command to display additional information about a specific benchmark, such as display name, group, and subgroup.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner benchmark/micro/nulls/no_nulls_addition.benchmark --info\n```\n\n----------------------------------------\n\nTITLE: Modifying malloc_write function in C++\nDESCRIPTION: C++ code modification for the malloc_write function in malloc_io.c to only print in DEBUG mode.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nvoid\nmalloc_write(const char *s) {\n#ifdef DEBUG\n\tif (je_malloc_message != NULL) {\n\t\tje_malloc_message(NULL, s);\n\t} else {\n\t\twrtmessage(NULL, s);\n\t}\n#endif\n}\n```\n\n----------------------------------------\n\nTITLE: Defining custom malloc configuration buffer in jemalloc.c\nDESCRIPTION: C++ code to define a custom malloc configuration buffer in jemalloc.c, to be placed after the #include statements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\n#include \"malloc_ncpus.h\"\n\n#define JE_MALLOC_CONF_BUFFER_SIZE 200\nchar JE_MALLOC_CONF_BUFFER[JE_MALLOC_CONF_BUFFER_SIZE];\n```\n\n----------------------------------------\n\nTITLE: Copying jemalloc source files to DuckDB\nDESCRIPTION: Commands to configure jemalloc, copy its source files to the DuckDB project directory, and copy the license file.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncd <jemalloc_dir>\n./configure --with-jemalloc-prefix=\"duckdb_je_\" --with-private-namespace=\"duckdb_\" --without-export\ncp -r src/* $DUCKDB_DIR/extension/jemalloc/jemalloc/src/\ncp -r include/* $DUCKDB_DIR/extension/jemalloc/jemalloc/include/\ncp COPYING $DUCKDB_DIR/extension/jemalloc/jemalloc/LICENSE\n```\n\n----------------------------------------\n\nTITLE: Adding symbol definitions to private_namespace.h\nDESCRIPTION: C++ code additions to private_namespace.h to define symbols that were found by the exported_symbols_check.py script.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n// DuckDB: added these so we can pass \"exported_symbols_check.py\"\n#define JE_MALLOC_CONF_BUFFER JEMALLOC_N(JE_MALLOC_CONF_BUFFER)\n#define arena_name_get JEMALLOC_N(arena_name_get)\n#define arena_name_set JEMALLOC_N(arena_name_set)\n#define b0_alloc_tcache_stack JEMALLOC_N(b0_alloc_tcache_stack)\n#define b0_dalloc_tcache_stack JEMALLOC_N(b0_dalloc_tcache_stack)\n#define base_alloc_rtree JEMALLOC_N(base_alloc_rtree)\n#define cache_bin_stack_use_thp JEMALLOC_N(cache_bin_stack_use_thp)\n#define disabled_bin JEMALLOC_N(disabled_bin)\n#define global_do_not_change_tcache_maxclass JEMALLOC_N(global_do_not_change_tcache_maxclass)\n#define global_do_not_change_tcache_nbins JEMALLOC_N(global_do_not_change_tcache_nbins)\n#define invalid_conf_abort JEMALLOC_N(invalid_conf_abort)\n#define je_free_aligned_sized JEMALLOC_N(je_free_aligned_sized)\n#define je_free_sized JEMALLOC_N(je_free_sized)\n#define _malloc_thread_cleanup JEMALLOC_N(_malloc_thread_cleanup)\n#define _malloc_tsd_cleanup_register JEMALLOC_N(_malloc_tsd_cleanup_register)\n#define multi_setting_parse_next JEMALLOC_N(multi_setting_parse_next)\n#define opt_calloc_madvise_threshold JEMALLOC_N(opt_calloc_madvise_threshold)\n#define opt_debug_double_free_max_scan JEMALLOC_N(opt_debug_double_free_max_scan)\n#define opt_malloc_conf_env_var JEMALLOC_N(opt_malloc_conf_env_var)\n#define opt_malloc_conf_symlink JEMALLOC_N(opt_malloc_conf_symlink)\n#define opt_prof_bt_max JEMALLOC_N(opt_prof_bt_max)\n#define opt_prof_pid_namespace JEMALLOC_N(opt_prof_pid_namespace)\n#define os_page JEMALLOC_N(os_page)\n#define pa_shard_nactive JEMALLOC_N(pa_shard_nactive)\n#define pa_shard_ndirty JEMALLOC_N(pa_shard_ndirty)\n#define pa_shard_nmuzzy JEMALLOC_N(pa_shard_nmuzzy)\n#define prof_sample_free_hook_get JEMALLOC_N(prof_sample_free_hook_get)\n#define prof_sample_free_hook_set JEMALLOC_N(prof_sample_free_hook_set)\n#define prof_sample_hook_get JEMALLOC_N(prof_sample_hook_get)\n#define prof_sample_hook_set JEMALLOC_N(prof_sample_hook_set)\n#define pthread_create_wrapper JEMALLOC_N(pthread_create_wrapper)\n#define tcache_bin_ncached_max_read JEMALLOC_N(tcache_bin_ncached_max_read)\n#define tcache_bins_ncached_max_write JEMALLOC_N(tcache_bins_ncached_max_write)\n#define tcache_enabled_set JEMALLOC_N(tcache_enabled_set)\n#define thread_tcache_max_set JEMALLOC_N(thread_tcache_max_set)\n#define tsd_tls JEMALLOC_N(tsd_tls)\n#define batcher_pop_begin JEMALLOC_N(batcher_pop_begin)\n#define batcher_pop_get_pushes JEMALLOC_N(batcher_pop_get_pushes)\n#define batcher_postfork_child JEMALLOC_N(batcher_postfork_child)\n#define batcher_postfork_parent JEMALLOC_N(batcher_postfork_parent)\n#define batcher_prefork JEMALLOC_N(batcher_prefork)\n#define batcher_push_begin JEMALLOC_N(batcher_push_begin)\n#define bin_info_nbatched_bins JEMALLOC_N(bin_info_nbatched_bins)\n#define bin_info_nbatched_sizes JEMALLOC_N(bin_info_nbatched_sizes)\n#define bin_info_nunbatched_bins JEMALLOC_N(bin_info_nunbatched_bins)\n#define opt_bin_info_max_batched_size JEMALLOC_N(opt_bin_info_max_batched_size)\n#define opt_bin_info_remote_free_max JEMALLOC_N(opt_bin_info_remote_free_max)\n#define opt_bin_info_remote_free_max_batch JEMALLOC_N(opt_bin_info_remote_free_max_batch)\n```\n\n----------------------------------------\n\nTITLE: Building with Make\nDESCRIPTION: Building DuckDB using make command with Python build flag\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nBUILD_PYTHON=1 make debug\n```\n\n----------------------------------------\n\nTITLE: Finalizing Results in DuckDB Aggregates\nDESCRIPTION: The finalize operation converts accumulated states into final result values. The template version handles conversion for individual states.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nfinalize(Vector &state, AggregateInputData &info, Vector &result, idx_t count, idx_t offset)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nFinalize(const State &state, ResultType &result, AggregateFinalizeData &info)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Catalog Library Target and Object Files\nDESCRIPTION: Creates a library target named 'duckdb_catalog' that compiles various catalog-related source files and adds the resulting objects to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_catalog\n  OBJECT\n  catalog_entry.cpp\n  catalog_entry_retriever.cpp\n  catalog.cpp\n  catalog_search_path.cpp\n  catalog_set.cpp\n  catalog_transaction.cpp\n  duck_catalog.cpp\n  dependency_manager.cpp\n  dependency_list.cpp\n  dependency_catalog_set.cpp\n  entry_lookup_info.cpp\n  similar_catalog_entry.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_catalog>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Unity Library for Serialization Tests using CMake\nDESCRIPTION: Configures a library target specifically for serialization tests utilizing unity builds in CMake. It includes the test serialization source file and updates the global object files list. Requires target objects to be defined elsewhere in the project configuration.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/serialize/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_serialization OBJECT serialization_test.cpp)\\nset(ALL_OBJECT_FILES\\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_serialization>\\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: This snippet checks for the presence of CMake policy CMP0063 and sets it to NEW, which modifies how CMake handles interface libraries. The snippet ensures compatibility with newer CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Generating Extension Loader Implementation\nDESCRIPTION: Configures and generates the C++ implementation file for the extension loader using the previously constructed components.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\nset(GENERATED_CPP_FILE\n    ${PROJECT_BINARY_DIR}/codegen/src/generated_extension_loader.cpp)\nconfigure_file(generated_extension_loader.cpp.in \"${GENERATED_CPP_FILE}\")\nadd_definitions(-DGENERATED_EXTENSION_HEADERS=1)\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Map Function Library in CMake\nDESCRIPTION: Defines a Unity build library for DuckDB's map functions, specifically including the map_contains.cpp implementation file. It then adds this library object to the parent scope's collection of object files for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/map/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library_unity(duckdb_function_map OBJECT map_contains.cpp)\n```\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_function_map>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Statistics Generation for DuckDB Aggregates\nDESCRIPTION: The statistics operation derives result statistics from argument statistics, assisting the query planner in optimizing execution.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nstatistics(ClientContext &context, BoundAggregateExpression &expr, AggregateStatisticsInput &input)\n```\n\n----------------------------------------\n\nTITLE: Fetching Git Tags for DuckDB Development\nDESCRIPTION: This shell command fetches all tags from the remote Git repository, which is necessary for setting up the DuckDB Swift development environment.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/swift/duckdb-swift/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch --all --tags\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for S3 Tests\nDESCRIPTION: These commands set environment variables required to run S3 tests against Minio. It can be done manually or through a script.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport S3_TEST_SERVER_AVAILABLE=1\nexport AWS_DEFAULT_REGION=eu-west-1\nexport AWS_ACCESS_KEY_ID=minio_duckdb_user\nexport AWS_SECRET_ACCESS_KEY=minio_duckdb_user_password\nexport DUCKDB_S3_ENDPOINT=duckdb-minio.com:9000\nexport DUCKDB_S3_USE_SSL=false\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables Using a Script\nDESCRIPTION: This snippet uses a script to set the required environment variables for running the S3 tests, ensuring they are available in the current session.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsource scripts/set_s3_test_server_variables.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Available DuckDB Benchmarks\nDESCRIPTION: Command to list all available benchmarks in the DuckDB benchmark runner.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner --list\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Build Environment\nDESCRIPTION: Sets up the core build environment for DuckDB, including C++11 standard requirement, position independent code, and macOS rpath settings. Configures compiler cache support for both ccache and sccache to speed up builds.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(DUCKDB_MODULE_BASE_DIR \"${CMAKE_CURRENT_LIST_DIR}\")\n\nset(CMAKE_EXPORT_COMPILE_COMMANDS ON)\n\nset(CMAKE_CXX_STANDARD \"11\" CACHE STRING \"C++ standard to enforce\")\n\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\nset(CMAKE_CXX_EXTENSIONS OFF)\n\nset(CMAKE_VERBOSE_MAKEFILE OFF)\nset(CMAKE_POSITION_INDEPENDENT_CODE ON)\nset(CMAKE_MACOSX_RPATH 1)\n\nfind_program(CCACHE_PROGRAM ccache)\nif(CCACHE_PROGRAM)\n  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\nelse()\n  find_program(CCACHE_PROGRAM sccache)\n  if(CCACHE_PROGRAM)\n    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE \"${CCACHE_PROGRAM}\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating DuckDB Catalog Entries Dependency Library with CMake\nDESCRIPTION: This CMake snippet creates a library target for DuckDB catalog entries dependency components by combining multiple source files using add_library_unity. It then adds the generated object files to a parent variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/catalog/catalog_entry/dependency/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_catalog_entries_dependency OBJECT dependency_entry.cpp\n                  dependency_subject_entry.cpp dependency_dependent_entry.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_catalog_entries_dependency>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding CSV State Machine Objects to Parent Scope in DuckDB\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include objects from the CSV state machine library. This allows the parent CMake configuration to include these objects in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/state_machine/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_state_machine>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Conditional Build for Non-Windows and Non-Sun Platforms\nDESCRIPTION: This snippet checks if the build is not being executed on Windows or Sun platforms, then it adds a compiler definition for the DuckDB build directory and builds the optimizer demo extension.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/extension/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32 AND NOT SUN)\n  add_definitions(-DDUCKDB_BUILD_DIRECTORY=\"${PROJECT_BINARY_DIR}\")\n\n  build_loadable_extension_directory(\n    loadable_extension_optimizer_demo\n    \"CPP\"\n    test/extension\n    \"default-version\"\n    \"\"\n    ${PARAMETERS}\n    ../extension/loadable_extension_optimizer_demo.cpp)\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Directory Configuration in CMake\nDESCRIPTION: Conditionally adds test subdirectories based on the ENABLE_UNITTEST_CPP_TESTS flag. This allows for selective compilation of different test categories such as API tests, SQL tests, and more, helping to organize the test suite by functionality.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(${ENABLE_UNITTEST_CPP_TESTS})\n  add_subdirectory(api)\n  add_subdirectory(appender)\n  add_subdirectory(arrow)\n  add_subdirectory(catalog)\n  add_subdirectory(common)\n  add_subdirectory(logging)\n  add_subdirectory(memoryleak)\n  add_subdirectory(parallel_csv)\n  add_subdirectory(secrets)\n  add_subdirectory(serialize)\n  add_subdirectory(sql)\n  add_subdirectory(ossfuzz)\n  add_subdirectory(mbedtls)\nendif()\nadd_subdirectory(extension)\nadd_subdirectory(helpers)\nadd_subdirectory(sqlite)\n```\n\n----------------------------------------\n\nTITLE: Implementing portable strerror_r in C++\nDESCRIPTION: C++ implementation of a portable strerror_r function, to be added in malloc_io.c above the buferror function.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n// taken from https://ae1020.github.io/fixing-strerror_r-posix-debacle/\nint strerror_fixed(int err, char *buf, size_t buflen) {\n    assert(buflen != 0);\n\n    buf[0] = (char)255;  // never valid in UTF-8 sequences\n    int old_errno = errno;\n    intptr_t r = (intptr_t)strerror_r(err, buf, buflen);\n    int new_errno = errno;\n\n    if (r == -1 || new_errno != old_errno) {\n        //\n        // errno was changed, so probably the return value is just -1 or\n        // something else that doesn't provide info.\n        //\n        malloc_snprintf(buf, buflen, \"errno %d in strerror_r call\", new_errno);\n    }\n    else if (r == 0) {\n        //\n        // The GNU version always succeds and should never return 0 (NULL).\n        //\n        // \"The XSI-compliant strerror_r() function returns 0 on success.\n        // On error, a (positive) error number is returned (since glibc\n        // 2.13), or -1 is returned and errno is set to indicate the error\n        // (glibc versions before 2.13).\"\n        //\n        // Documentation isn't clear on whether the buffer is terminated if\n        // the message is too long, or ERANGE always returned.  Terminate.\n        //\n        buf[buflen - 1] = '\\0';\n    }\n    else if (r == EINVAL) {  // documented result from XSI strerror_r\n        malloc_snprintf(buf, buflen, \"bad errno %d for strerror_r()\", err);\n    }\n    else if (r == ERANGE) {  // documented result from XSI strerror_r\n        malloc_snprintf(buf, buflen, \"bad buflen for errno %d\", err);\n    }\n    else if (r == (intptr_t)buf) {\n        //\n        // The GNU version gives us our error back as a pointer if it\n        // filled the buffer successfully.  Sanity check that.\n        //\n        if (buf[0] == (char)255) {\n            assert(false);\n            strncpy(buf, \"strerror_r didn't update buffer\", buflen);\n        }\n    }\n    else if (r < 256) {  // extremely unlikely to be string buffer pointer\n        assert(false);\n        strncpy(buf, \"Unknown XSI strerror_r error result code\", buflen);\n    }\n    else {\n        // The GNU version never fails, but may return an immutable string\n        // instead of filling the buffer. Unknown errors get an\n        // \"unknown error\" message.  The result is always null terminated.\n        //\n        // (This is the risky part, if `r` is not a valid pointer but some\n        // weird large int return result from XSI strerror_r.)\n        //\n        strncpy(buf, (const char*)r, buflen);\n    }\n\treturn 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Parent Scope's Object Files List in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects from the duckdb_func_generic_main target. This ensures these objects are included in the final build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/scalar/generic/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_generic_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Extension Objects to Parent Scope\nDESCRIPTION: Adds all extension-related object files to the ALL_OBJECT_FILES variable in the parent scope for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/extension/CMakeLists.txt#2025-04-22_snippet_15\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_extension>\n    ${ALL_OBJECT_FILES} ${generated_loader_obj_files}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Compressing DuckDB Database Files with gzip\nDESCRIPTION: Command for compressing a DuckDB database file using gzip. This is recommended for large database files to reduce storage space requirements.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/data/storage/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngzip <filename.db>\n```\n\n----------------------------------------\n\nTITLE: Running Basic Delta Extension Tests in Shell\nDESCRIPTION: Shell commands to run the Delta Acceptance Tests and delta-kernel-rs based tests in debug or release mode.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake test_debug\n```\n\nLANGUAGE: shell\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Running DuckDB Benchmarks with Regex Pattern\nDESCRIPTION: Example of using a regex pattern to run multiple benchmarks matching the specified pattern.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbuild/release/benchmark/benchmark_runner \"benchmark/micro/nulls/.*\" \n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Installation Paths\nDESCRIPTION: Determines installation directories for libraries, executables, and header files using GNU standard installation directories. Sets up platform-specific paths for CMake configuration files, particularly for Windows vs Unix-like systems.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\n# Determine install paths\n# default to gnu standard installation directories (lib, bin, include)\n# https://cmake.org/cmake/help/latest/module/GNUInstallDirs.html\ninclude(GNUInstallDirs)\nset(INSTALL_LIB_DIR\n    ${CMAKE_INSTALL_LIBDIR}\n    CACHE PATH \"Installation directory for libraries\")\nset(INSTALL_BIN_DIR\n    ${CMAKE_INSTALL_BINDIR}\n    CACHE PATH \"Installation directory for executables\")\nset(INSTALL_INCLUDE_DIR\n    ${CMAKE_INSTALL_INCLUDEDIR}\n    CACHE PATH \"Installation directory for header files\")\nif(WIN32 AND NOT CYGWIN)\n  set(DEF_INSTALL_CMAKE_DIR cmake)\nelse()\n  set(DEF_INSTALL_CMAKE_DIR ${INSTALL_LIB_DIR}/cmake/DuckDB)\nendif()\nset(INSTALL_CMAKE_DIR\n    ${DEF_INSTALL_CMAKE_DIR}\n    CACHE PATH \"Installation directory for CMake files\")\nset(DUCKDB_EXPORT_SET \"DuckDBExports\")\n```\n\n----------------------------------------\n\nTITLE: Adding C API Cast Objects to Parent Scope in CMake\nDESCRIPTION: Adds the compiled objects from the duckdb_main_capi_cast library to the ALL_OBJECT_FILES variable in the parent scope. This ensures they will be included in the final DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/capi/cast/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_capi_cast>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Files for Parent Scope in CMake\nDESCRIPTION: Adds the Python source object files to the parent scope's object files list.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_src>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Listing Available Timezones in C++ using ICU library\nDESCRIPTION: This code creates a string enumeration of timezone IDs using the ICU library's TimeZone class. It iterates through the enumeration to print all available timezone IDs to standard output. Error handling is included to check for failures in the ICU operations.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nUErrorCode status = U_ZERO_ERROR;\nauto timeZoneIds = unique_ptr<StringEnumeration>(TimeZone::createEnumeration());\nconst UnicodeString *zoneId = timeZoneIds->snext(status);\nif (U_FAILURE(status)) {\n\t// something went wrong\n\texit(1);\n}\n\nint32_t count = 0;\nfprintf(stdout, \"Available timezones: [\");\nwhile (zoneId != NULL && status == U_ZERO_ERROR) {\n\tstd::string zoneIdString;\n\tzoneId->toUTF8String(zoneIdString);\n\tif (count == 0) {\n\t\tfprintf(stdout, \", \", zoneIdString.c_str());\n\t}\n\tfprintf(stdout, \"%s\", zoneIdString.c_str());\n\tcount++;\n\tzoneId = timeZoneIds->snext(status);\n}\nfprintf(stdout, \"]\\n\");\n// out:\n// Available timezones: [ACT, AET, AGT, ART, AST, Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmara, Africa/Asmera, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Juba, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Sao_Tome, Africa/Timbuktu, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Argentina/Buenos_Aires, America/Argentina/Catamarca, America/Argentina/ComodRivadavia, America/Argentina/Cordoba, America/Argentina/Jujuy, America/Argentina/La_Rioja, America/Argentina/Mendoza, America/Argentina/Rio_Gallegos, America/Argentina/Salta, America/Argentina/San_Juan, America/Argentina/San_Luis, America/Argentina/Tucuman, America/Argentina/Ushuaia, America/Aruba, America/Asuncion, America/Atikokan, America/Atka, America/Bahia, America/Bahia_Banderas, America/Barbados, America/Belem, America/Belize, America/Blanc-Sablon, America/Boa_Vista, America/Bogota, America/Boise, America/Buenos_Aires, America/Cambridge_Bay, America/Campo_Grande, America/Cancun, America/Caracas, America/Catamarca, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Coral_Harbour, America/Cordoba, America/Costa_Rica, America/Creston, America/Cuiaba, America/Curacao, America/Danmarkshavn, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Ensenada, America/Fort_Nelson, America/Fort_Wayne, America/Fortaleza, America/Glace_Bay, America/Godthab, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Petersburg, America/Indiana/Tell_City, America/Indiana/Vevay, America/Indiana/Vincennes, America/Indiana/Winamac, America/Indianapolis, America/Inuvik, America/Iqaluit, America/Jamaica, America/Jujuy, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Knox_IN, America/Kralendijk, America/La_Paz, America/Lima, America/Los_Angeles, America/Louisville, America/Lower_Princes, America/Maceio, America/Managua, America/Manaus, America/Marigot, America/Martinique, America/Matamoros, America/Mazatlan, America/Mendoza, America/Menominee, America/Merida, America/Metlakatla, America/Mexico_City, America/Miquelon, America/Moncton, America/Monterrey, America/Montevideo, America/Montreal, America/Montserrat, America/Nassau, America/New_York, America/Nipigon, America/Nome, America/Noronha, America/North_Dakota/Beulah, America/North_Dakota/Center, America/North_Dakota/New_Salem, America/Ojinaga, America/Panama, America/Pangnirtung, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Acre, America/Porto_Velho, America/Puerto_Rico, America/Punta_Arenas, America/Rainy_River, America/Rankin_Inlet, America/Recife, America/Regina, America/Resolute, America/Rio_Branco, America/Rosario, America/Santa_Isabel, America/Santarem, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Shiprock, America/Sitka, America/St_Barthelemy, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Thunder_Bay, America/Tijuana, America/Toronto, America/Tortola, America/Vancouver, America/Virgin, America/Whitehorse, America/Winnipeg, America/Yakutat, America/Yellowknife, Antarctica/Casey, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Macquarie, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/Rothera, Antarctica/South_Pole, Antarctica/Syowa, Antarctica/Troll, Antarctica/Vostok, Arctic/Longyearbyen, Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Ashkhabad, Asia/Atyrau, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Barnaul, Asia/Beirut, Asia/Bishkek, Asia/Brunei, Asia/Calcutta, Asia/Chita, Asia/Choibalsan, Asia/Chongqing, Asia/Chungking, Asia/Colombo, Asia/Dacca, Asia/Damascus, Asia/Dhaka, Asia/Dili, Asia/Dubai, Asia/Dushanbe, Asia/Famagusta, Asia/Gaza, Asia/Harbin, Asia/Hebron, Asia/Ho_Chi_Minh, Asia/Hong_Kong, Asia/Hovd, Asia/Irkutsk, Asia/Istanbul, Asia/Jakarta, Asia/Jayapura, Asia/Jerusalem, Asia/Kabul, Asia/Kamchatka, Asia/Karachi, Asia/Kashgar, Asia/Kathmandu, Asia/Katmandu, Asia/Khandyga, Asia/Kolkata, Asia/Krasnoyarsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Kuwait, Asia/Macao, Asia/Macau, Asia/Magadan, Asia/Makassar, Asia/Manila, Asia/Muscat, Asia/Nicosia, Asia/Novokuznetsk, Asia/Novosibirsk, Asia/Omsk, Asia/Oral, Asia/Phnom_Penh, Asia/Pontianak, Asia/Pyongyang, Asia/Qatar, Asia/Qostanay, Asia/Qyzylorda, Asia/Rangoon, Asia/Riyadh, Asia/Saigon, Asia/Sakhalin, Asia/Samarkand, Asia/Seoul, Asia/Shanghai, Asia/Singapore, Asia/Srednekolymsk, Asia/Taipei, Asia/Tashkent, Asia/Tbilisi, Asia/Tehran, Asia/Tel_Aviv, Asia/Thimbu, Asia/Thimphu, Asia/Tokyo, Asia/Tomsk, Asia/Ujung_Pandang, Asia/Ulaanbaatar, Asia/Ulan_Bator, Asia/Urumqi, Asia/Ust-Nera, Asia/Vientiane, Asia/Vladivostok, Asia/Yakutsk, Asia/Yangon, Asia/Yekaterinburg, Asia/Yerevan, Atlantic/Azores, Atlantic/Bermuda, Atlantic/Canary, Atlantic/Cape_Verde, Atlantic/Faeroe, Atlantic/Faroe, Atlantic/Jan_Mayen, Atlantic/Madeira, Atlantic/Reykjavik, Atlantic/South_Georgia, Atlantic/St_Helena, Atlantic/Stanley, Australia/ACT, Australia/Adelaide, Australia/Brisbane, Australia/Broken_Hill, Australia/Canberra, Australia/Currie, Australia/Darwin, Australia/Eucla, Australia/Hobart, Australia/LHI, Australia/Lindeman, Australia/Lord_Howe, Australia/Melbourne, Australia/NSW, Australia/North, Australia/Perth, Australia/Queensland, Australia/South, Australia/Sydney, Australia/Tasmania, Australia/Victoria, Australia/West, Australia/Yancowinna, BET, BST, Brazil/Acre, Brazil/DeNoronha, Brazil/East, Brazil/West, CAT, CET, CNT, CST, CST6CDT, CTT, Canada/Atlantic, Canada/Central, Canada/East-Saskatchewan, Canada/Eastern, Canada/Mountain, Canada/Newfoundland, Canada/Pacific, Canada/Saskatchewan, Canada/Yukon, Chile/Continental, Chile/EasterIsland, Cuba, EAT, ECT, EET, EST, EST5EDT, Egypt, Eire, Etc/GMT, Etc/GMT+0, Etc/GMT+1, Etc/GMT+10, Etc/GMT+11, Etc/GMT+12, Etc/GMT+2, Etc/GMT+3, Etc/GMT+4, Etc/GMT+5, Etc/GMT+6, Etc/GMT+7, Etc/GMT+8, Etc/GMT+9, Etc/GMT-0, Etc/GMT-1, Etc/GMT-10, Etc/GMT-11, Etc/GMT-12, Etc/GMT-13, Etc/GMT-14, Etc/GMT-2, Etc/GMT-3, Etc/GMT-4, Etc/GMT-5, Etc/GMT-6, Etc/GMT-7, Etc/GMT-8, Etc/GMT-9, Etc/GMT0, Etc/Greenwich, Etc/UCT, Etc/UTC, Etc/Universal, Etc/Zulu, Europe/Amsterdam, Europe/Andorra, Europe/Astrakhan, Europe/Athens, Europe/Belfast, Europe/Belgrade, Europe/Berlin, Europe/Bratislava, Europe/Brussels, Europe/Bucharest, Europe/Budapest, Europe/Busingen, Europe/Chisinau, Europe/Copenhagen, Europe/Dublin, Europe/Gibraltar, Europe/Guernsey, Europe/Helsinki, Europe/Isle_of_Man, Europe/Istanbul, Europe/Jersey, Europe/Kaliningrad, Europe/Kiev, Europe/Kirov, Europe/Lisbon, Europe/Ljubljana, Europe/London, Europe/Luxembourg, Europe/Madrid, Europe/Malta, Europe/Mariehamn, Europe/Minsk, Europe/Monaco, Europe/Moscow, Europe/Nicosia, Europe/Oslo, Europe/Paris, Europe/Podgorica, Europe/Prague, Europe/Riga, Europe/Rome, Europe/Samara, Europe/San_Marino, Europe/Sarajevo, Europe/Saratov, Europe/Simferopol, Europe/Skopje, Europe/Sofia, Europe/Stockholm, Europe/Tallinn, Europe/Tirane, Europe/Tiraspol, Europe/Ulyanovsk, Europe/Uzhgorod, Europe/Vaduz, Europe/Vatican, Europe/Vienna, Europe/Vilnius, Europe/Volgograd, Europe/Warsaw, Europe/Zagreb, Europe/Zaporozhye, Europe/Zurich, Factory, GB, GB-Eire, GMT, GMT+0, GMT-0, GMT0, Greenwich, HST, Hongkong, IET, IST, Iceland, Indian/Antananarivo, Indian/Chagos, Indian/Christmas, Indian/Cocos, Indian/Comoro, Indian/Kerguelen, Indian/Mahe, Indian/Maldives, Indian/Mauritius, Indian/Mayotte, Indian/Reunion, Iran, Israel, JST, Jamaica, Japan, Kwajalein, Libya, MET, MIT, MST, MST7MDT, Mexico/BajaNorte, Mexico/BajaSur, Mexico/General, NET, NST, NZ, NZ-CHAT, Navajo, PLT, PNT, PRC, PRT, PST, PST8PDT, Pacific/Apia, Pacific/Auckland, Pacific/Bougainville, Pacific/Chatham, Pacific/Chuuk, Pacific/Easter, Pacific/Efate, Pacific/Enderbury, Pacific/Fakaofo, Pacific/Fiji, Pacific/Funafuti, Pacific/Galapagos, Pacific/Gambier, Pacific/Guadalcanal, Pacific/Guam, Pacific/Honolulu, Pacific/Johnston, Pacific/Kiritimati, Pacific/Kosrae, Pacific/Kwajalein, Pacific/Majuro, Pacific/Marquesas, Pacific/Midway, Pacific/Nauru, Pacific/Niue, Pacific/Norfolk, Pacific/Noumea, Pacific/Pago_Pago, Pacific/Palau, Pacific/Pitcairn, Pacific/Pohnpei, Pacif\n```\n\n----------------------------------------\n\nTITLE: Specifying Include Directories for DuckDB FSST\nDESCRIPTION: This snippet sets the public include directories for the 'duckdb_fsst' library, allowing its users to access headers during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\ntarget_include_directories(duckdb_fsst PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR)>)\n```\n\n----------------------------------------\n\nTITLE: Installing DuckDB ZSTD Library\nDESCRIPTION: This snippet defines the installation targets for duckdb_zstd, specifying where to place the library and archive files during installation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS duckdb_zstd\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice text for applying Apache License 2.0 to software projects. Includes copyright notice, license declaration, and standard terms regarding distribution and warranties.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/data/parquet-testing/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Generating Presigned URL for Tests\nDESCRIPTION: This snippet generates necessary data for testing by running the script to create presigned URLs.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/generate_presigned_url.sh\n```\n\n----------------------------------------\n\nTITLE: Running Full Delta Extension Tests with Generated Data in Shell\nDESCRIPTION: Shell commands to generate test data and run all tests including those on generated data by setting the GENERATED_DATA_AVAILABLE environment variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/delta/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake generate-data\nGENERATED_DATA_AVAILABLE=1 make test\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: This CMake snippet adds the compiled objects from the duckdb_transformer_statement library to the ALL_OBJECT_FILES variable in the parent scope, making them available for linking into the final executable or library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/statement/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_statement>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Compression Objects to Parent Scope in CMake\nDESCRIPTION: Adds the compiled compression objects to the ALL_OBJECT_FILES variable in the parent scope, making them available for inclusion in the main DuckDB library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_compression>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the compiled objects from the duckdb_main_relation library. This makes the compiled objects available to the parent CMake configuration for linking into the final binary.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/relation/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main_relation>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: This snippet checks if the CMake policy CMP0063 is set, and if not, it sets it to 'NEW'. This policy controls how CMake handles the use of the 'include()' command when the provided path is a relative path.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fmt/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: String Sorting with German Locale Collation\nDESCRIPTION: Implements locale-aware string sorting using ICU Collator with German locale. Creates byte-orderable sort keys for proper string comparison and demonstrates the difference between locale-aware and binary sorting.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/icu/README.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstatic string createSortKey(icu::Collator &collator, const string &str) {\n    int32_t size = collator.getSortKey(UnicodeString::fromUTF8(StringPiece(str)), nullptr, 0);\n    auto buf = unique_ptr<uint8_t[]>(new uint8_t[size]);\n    UnicodeString unicode_str = UnicodeString::fromUTF8(StringPiece(str));\n    collator.getSortKey(unicode_str, buf.get(), size);\n    return string((char*) buf.get(), size);\n}\n\nvector<string> strings = {\"Göbel\", \"Goethe\", \"Goldmann\", \"Göthe\" \"Götz\", \"Gabel\"};\n\nUErrorCode status = U_ZERO_ERROR;\nauto de_collator = unique_ptr<icu::Collator>(Collator::createInstance(Locale(\"de\"), status));\nif (U_FAILURE(status)) {\n\texit(1);\n}\nstd::sort(strings.begin(), strings.end(), [&](const string &a, const string &b) {\n\treturn createSortKey(*de_collator, a) < createSortKey(*de_collator, b);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: This snippet checks and sets the CMake policy CMP0063 to NEW, which affects the behavior of the 'find_package' command. It's necessary for handling policy warnings.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding static library\nDESCRIPTION: This code adds a static library named 'imdb'. It specifies 'imdb.cpp' and '${ALL_OBJECT_FILES}' as the source files to be compiled and linked into the library. The variable ${ALL_OBJECT_FILES} likely contains a list of other object files needed for the library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(imdb STATIC imdb.cpp ${ALL_OBJECT_FILES})\n```\n\n----------------------------------------\n\nTITLE: Checking for Persistent Secrets Availability in DuckDB Tests\nDESCRIPTION: A shell command that should be used to ensure tests only run in environments where persistent secrets are properly configured with the required permissions (x00, like 600 or 700).\nSOURCE: https://github.com/duckdb/duckdb/blob/main/data/secrets/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrequire-env TEST_PERSISTENT_SECRETS_AVAILABLE\n```\n\n----------------------------------------\n\nTITLE: Loading Train Benchmark Data into DuckDB\nDESCRIPTION: Commands for initializing the database with schema and loading the Train Benchmark dataset. It includes preprocessing CSV files to handle NULL values and loading data with a dynamic path variable substitution.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/trainbenchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat schema.sql | duckdb tb.duckdb\nTB_DATA_DIR=sf1\nsed -i.bkp \"s|\\\\N||g\" ${TB_DATA_DIR}/Route.csv\nsed \"s/PATHVAR/${TB_DATA_DIR}/g\" tb-load.sql | duckdb tb.duckdb\n```\n\n----------------------------------------\n\nTITLE: Windows-Specific Resource Configuration\nDESCRIPTION: Configures Windows-specific resource flags and version information for the DuckDB shell build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/shell/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nif(WIN32 AND NOT MINGW)\n  string(TIMESTAMP DUCKDB_COPYRIGHT_YEAR \"%Y\")\n  ensure_variable_is_number(DUCKDB_MAJOR_VERSION RC_MAJOR_VERSION)\n  ensure_variable_is_number(DUCKDB_MINOR_VERSION RC_MINOR_VERSION)\n  ensure_variable_is_number(DUCKDB_PATCH_VERSION RC_PATCH_VERSION)\n  ensure_variable_is_number(DUCKDB_DEV_ITERATION RC_DEV_ITERATION)\n\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_VERSION=\\\"${DUCKDB_VERSION}\\\"\")\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_MAJOR_VERSION=\\\"${RC_MAJOR_VERSION}\\\"\")\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_MINOR_VERSION=\\\"${RC_MINOR_VERSION}\\\"\")\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_PATCH_VERSION=\\\"${RC_PATCH_VERSION}\\\"\")\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_DEV_ITERATION=\\\"${RC_DEV_ITERATION}\\\"\")\n  set(CMAKE_RC_FLAGS\n      \"${CMAKE_RC_FLAGS} -D DUCKDB_COPYRIGHT_YEAR=\\\"${DUCKDB_COPYRIGHT_YEAR}\\\"\")\n  target_sources(shell PRIVATE rc/duckdb.rc)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Transformer Helpers Library in CMake\nDESCRIPTION: This CMake snippet creates a library target named 'duckdb_transformer_helpers' that includes various transformation operation source files. It then adds the built objects to the parent scope's ALL_OBJECT_FILES variable for inclusion in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/helpers/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_transformer_helpers\n  OBJECT\n  transform_alias.cpp\n  transform_cte.cpp\n  transform_groupby.cpp\n  transform_orderby.cpp\n  transform_sample.cpp\n  transform_typename.cpp\n  nodetype_to_string.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_helpers>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Aggregate Library Objects to Parent Scope in CMake\nDESCRIPTION: This CMake snippet adds the objects created by the 'duckdb_operator_aggregate' library to the parent scope's ALL_OBJECT_FILES variable. This allows the parent CMake configuration to include these object files in the final build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/aggregate/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_aggregate>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: CMake Policy Configuration\nDESCRIPTION: This snippet checks if the CMake policy CMP0063 is defined and sets it to NEW if it is. This policy likely relates to a specific CMake feature or behavior, and setting it ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Template Methods for Update Operations in DuckDB Aggregates\nDESCRIPTION: These template methods handle constant and per-row operations when updating state objects in aggregate functions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nConstantOperation(State& state, const Arg1Type &arg1, ..., AggregateInputInfo &info, idx_t count)\n```\n\nLANGUAGE: cpp\nCODE:\n```\nOperation(State& state, const Arg1Type &arg1, ..., AggregateInputInfo &info)\n```\n\n----------------------------------------\n\nTITLE: Configuring Include Directories for DuckDB ZSTD\nDESCRIPTION: This snippet specifies the include directories for the duckdb_zstd library, making the header files accessible for other targets that depend on the library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n\t\tduckdb_zstd\n\t\tPUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)\n```\n\n----------------------------------------\n\nTITLE: Creating Python Source Object Library in CMake\nDESCRIPTION: Defines an object library containing core Python integration source files for DuckDB.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(\n  python_src OBJECT\n  path_like.cpp\n  python_udf.cpp\n  pyconnection.cpp\n  pystatement.cpp\n  python_import_cache.cpp\n  python_replacement_scan.cpp\n  python_dependency.cpp\n  pyrelation.cpp\n  pyexpression.cpp\n  dataframe.cpp\n  pyresult.cpp\n  pyfilesystem.cpp\n  map.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Docker on MacOS using Homebrew\nDESCRIPTION: This snippet installs Docker on MacOS using Homebrew, which is a prerequisite for running Minio.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install docker --cask\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in CMake for DuckDB\nDESCRIPTION: Appends the objects from the 'duckdb_execution' library to the ALL_OBJECT_FILES variable and propagates it to the parent scope. This is likely used for linking these objects into the main DuckDB library or executable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_execution>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB Scan Operators Library in CMake\nDESCRIPTION: Creates a library target named 'duckdb_operator_scan' that combines multiple scan operator source files. It then adds the resulting object files to the parent scope's ALL_OBJECT_FILES variable.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/scan/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_operator_scan\n  OBJECT\n  physical_column_data_scan.cpp\n  physical_dummy_scan.cpp\n  physical_empty_result.cpp\n  physical_expression_scan.cpp\n  physical_positional_scan.cpp\n  physical_table_scan.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_operator_scan>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy CMP0063\nDESCRIPTION: This snippet checks and sets the CMake policy CMP0063 to NEW, which affects the behavior of certain commands when compiling the project. This policy must be enabled to ensure compatibility with newer CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fastpforlib/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(POLICY CMP0063)\\n    cmake_policy(SET CMP0063 NEW)\\nendif()\n```\n\n----------------------------------------\n\nTITLE: DataFrame Integration with DuckDB in Julia\nDESCRIPTION: Shows how to integrate Julia DataFrames with DuckDB, including creating a connection, registering a DataFrame as a view, and querying it\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/juliapkg/README.md#2025-04-22_snippet_2\n\nLANGUAGE: julia\nCODE:\n```\nusing DuckDB\nusing DataFrames\n\n# create a new in-memory database\ncon = DBInterface.connect(DuckDB.DB)\n\n# create a DataFrame\ndf = DataFrame(a = [1, 2, 3], b = [42, 84, 42])\n\n# register it as a view in the database\nDuckDB.register_data_frame(con, df, \"my_df\")\n\n# run a SQL query over the DataFrame\nresults = DBInterface.execute(con, \"SELECT * FROM my_df\")\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Disabling target warnings\nDESCRIPTION: This code disables compiler warnings for the 'imdb' target. It uses a custom function 'disable_target_warnings' which is not defined in the snippet but is assumed to handle warning suppression for the specified target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(imdb)\n```\n\n----------------------------------------\n\nTITLE: Restoring specific files in jemalloc\nDESCRIPTION: Command to restore specific files that were deleted in the previous step but are needed for the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -- \\\n  include/jemalloc/internal/jemalloc_internal_defs.h \\\n  include/jemalloc/jemalloc.h \\\n  CMakeLists.txt\n```\n\n----------------------------------------\n\nTITLE: Conditional Compilation Flag for Extension Entries in DuckDB\nDESCRIPTION: Sets a compilation definition for generating extension entries when the GENERATE_EXTENSION_ENTRIES option is enabled. This allows conditional compilation of code for extension support.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/function/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(GENERATE_EXTENSION_ENTRIES)\n  add_definitions(-DGENERATE_EXTENSION_ENTRIES)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running C API Generation Script\nDESCRIPTION: Command to run the Python script that generates the C API headers from the JSON definition files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/include/duckdb/main/capi/header_generation/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nscripts/generate_c_api.py\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files List in CMake for DuckDB\nDESCRIPTION: Appends the objects from the 'duckdb_csv_scanner' library to the ALL_OBJECT_FILES variable in the parent scope. This ensures that the CSV scanner objects are included in the main DuckDB build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/scanner/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_scanner>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in DuckDB Common Types Module\nDESCRIPTION: Adds the column and row subdirectories to the build system, including them in the compilation process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(column)\nadd_subdirectory(row)\n```\n\n----------------------------------------\n\nTITLE: Using Makefile Target for Generation\nDESCRIPTION: Makefile command to trigger the C API header generation process as an alternative to running the Python script directly.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/include/duckdb/main/capi/header_generation/README.md#2025-04-22_snippet_1\n\nLANGUAGE: makefile\nCODE:\n```\nmake generate-files\n```\n\n----------------------------------------\n\nTITLE: Updating Object Files Scope in CMake\nDESCRIPTION: This snippet updates the variable ALL_OBJECT_FILES to include the newly created test_sqlite target. By using PARENT_SCOPE, it ensures the variable can be accessed from parent CMake scopes.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sqlite/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_sqlite>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Library Linking Utility Functions in CMake\nDESCRIPTION: Helper functions for linking extension libraries and thread libraries to targets with specified linkage types.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/CMakeLists.txt#2025-04-22_snippet_19\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(link_extension_libraries LIBRARY LINKAGE)\n  get_statically_linked_extensions(\"${DUCKDB_EXTENSION_NAMES}\" STATICALLY_LINKED_EXTENSIONS)\n  # Now link against any registered out-of-tree extensions\n  foreach(EXT_NAME IN LISTS STATICALLY_LINKED_EXTENSIONS)\n    string(TOUPPER ${EXT_NAME} EXT_NAME_UPPERCASE)\n    if (${DUCKDB_EXTENSION_${EXT_NAME_UPPERCASE}_SHOULD_LINK})\n      target_link_libraries(${LIBRARY} ${LINKAGE} ${EXT_NAME}_extension)\n    endif()\n  endforeach()\nendfunction()\n\nfunction(link_threads LIBRARY LINKAGE)\n    target_link_libraries(${LIBRARY} ${LINKAGE} Threads::Threads)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Stacktrace in CMake\nDESCRIPTION: Conditionally adds a compiler definition for debug stacktrace functionality if DEBUG_STACKTRACE is enabled.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif(DEBUG_STACKTRACE)\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -DDUCKDB_DEBUG_STACKTRACE\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing the library\nDESCRIPTION: Installs the \"duckdb_pg_query\" target, specifying the destination directories for the library and archive files. This ensures that the library is installed in the correct location during the installation process. The DUCKDB_EXPORT_SET, INSTALL_LIB_DIR variables are assumed to be set elsewhere.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: cmake\nCODE:\n```\ninstall(TARGETS duckdb_pg_query\n        EXPORT \"${DUCKDB_EXPORT_SET}\"\n        LIBRARY DESTINATION \"${INSTALL_LIB_DIR}\"\n        ARCHIVE DESTINATION \"${INSTALL_LIB_DIR}\")\n```\n\n----------------------------------------\n\nTITLE: Adding CSV Buffer Manager Objects to Parent Scope in CMake\nDESCRIPTION: Updates the ALL_OBJECT_FILES variable in the parent scope to include the objects generated from the CSV buffer manager library. This ensures these objects are included in the final build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/execution/operator/csv_scanner/buffer_manager/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_csv_buffer_manager>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Propagating Object Files to Parent Scope\nDESCRIPTION: Passes the current set of object files to the parent scope, enabling shared compilation across different CMake targets and directories\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/parallelism/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Compiling the DuckDB Parser Using Flex/Bison - Bash\nDESCRIPTION: This snippet shows the commands to compile the DuckDB grammar and lexer using Python scripts along with flex/bison.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyac --flex 2.5.35 Apple(flex-32)\nbison (GNU Bison) 2.3\n\n# Compile the grammar\npython3 scripts/generate_grammar.py\n\n# Compile the lexer\npython3 scripts/generate_flex.py\n```\n\n----------------------------------------\n\nTITLE: Setting TPCE Object Files in CMake\nDESCRIPTION: This snippet sets the `TPCE_OBJECT_FILES` variable, appending the object files generated from the `tpce_main` target. The `$<TARGET_OBJECTS:tpce_main>` generator expression retrieves the object files associated with the target. `PARENT_SCOPE` makes the variable available in the parent directory scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/main/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(TPCE_OBJECT_FILES\n    ${TPCE_OBJECT_FILES} $<TARGET_OBJECTS:tpce_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Return Values Definition in Grammar Files - Yacc\nDESCRIPTION: This yacc snippet indicates how to define return types for grammar rules. It specifies that the 'from_list' rule returns a list and 'table_ref' returns a node. These definitions are crucial for proper rule composition.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/README.md#2025-04-22_snippet_2\n\nLANGUAGE: yacc\nCODE:\n```\n%type <list> from_list\n%type <node> table_ref\n```\n\n----------------------------------------\n\nTITLE: Setting Up Include Directories in CMake for DuckDB Benchmarks\nDESCRIPTION: Configures include paths for various dependencies including Catch testing framework, TPCE tools, SQLite, and internal test directories.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(../third_party/catch)\ninclude_directories(../third_party/tpce-tool/include)\ninclude_directories(../third_party/sqlite/include)\ninclude_directories(../test/include)\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Defining DuckDB Common Types Row Library in CMake\nDESCRIPTION: Adds a unity build library for DuckDB common types row components. It specifies the object files to be compiled and sets them as part of the library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/row/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_common_types_row\n  OBJECT\n  partitioned_tuple_data.cpp\n  row_data_collection.cpp\n  row_data_collection_scanner.cpp\n  row_layout.cpp\n  tuple_data_allocator.cpp\n  tuple_data_collection.cpp\n  tuple_data_iterator.cpp\n  tuple_data_layout.cpp\n  tuple_data_scatter_gather.cpp\n  tuple_data_segment.cpp)\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectory Catalog in CMake\nDESCRIPTION: This CMake command adds the 'catalog' directory into the build process. It allows CMake to process the CMakeLists.txt file within the 'catalog' directory, enabling further configuration and file inclusion defined in that directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/storage/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(catalog)\n```\n\n----------------------------------------\n\nTITLE: Running the S3 Test Server in Background\nDESCRIPTION: This snippet starts the S3 test server in the background using Docker, which must be running for tests to execute.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsource ./scripts/run_s3_test_server.sh\n```\n\n----------------------------------------\n\nTITLE: Adding Object Files to Parent Scope in CMake\nDESCRIPTION: Sets the ALL_OBJECT_FILES variable in the parent scope to include the objects from duckdb_main library. This makes these object files available for linking in the parent CMake context.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_main>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including External Compression Libraries in DuckDB CMake\nDESCRIPTION: Adds subdirectories for external compression libraries used by DuckDB, including chimp, alp, roaring, and dictionary.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(chimp)\nadd_subdirectory(alp)\nadd_subdirectory(roaring)\nadd_subdirectory(dictionary)\n```\n\n----------------------------------------\n\nTITLE: Setting ALL_OBJECT_FILES Variable in Parent Scope\nDESCRIPTION: This command appends the object files generated by the `duckdb_storage` target to the `ALL_OBJECT_FILES` variable in the parent scope. This is done using the `set` command with the `PARENT_SCOPE` option. The `$<TARGET_OBJECTS:duckdb_storage>` generator expression expands to the list of object files associated with the `duckdb_storage` target.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n\"set(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage>\n    PARENT_SCOPE)\"\n```\n\n----------------------------------------\n\nTITLE: Adding Subdirectories in CMake\nDESCRIPTION: The `add_subdirectory` command incorporates other CMakeLists.txt files from the specified directories into the current build process. This allows for modular project organization and independent building of components like filter, function, index, parallelism, and storage.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(filter)\nadd_subdirectory(function)\nadd_subdirectory(index)\nadd_subdirectory(parallelism)\nadd_subdirectory(storage)\n```\n\n----------------------------------------\n\nTITLE: Running the install_s3_test_server Script\nDESCRIPTION: This snippet executes the script to install the S3 test server, requiring root access, and modifies system files for local testing.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/copy/s3/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo ./scripts/install_s3_test_server.sh\n```\n\n----------------------------------------\n\nTITLE: Set Target Include Directories\nDESCRIPTION: This command sets the include directories for the 'snowball' target. It makes the current source directory available as a build interface for include paths during the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/snowball/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  snowball PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Configuring DuckDB's Chimp Compression Library with CMake\nDESCRIPTION: Creates a library for the Chimp compression algorithm implementation in DuckDB. The configuration specifies the source files to compile and adds the resulting object files to the parent scope's collection for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/storage/compression/chimp/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(\n  duckdb_storage_compression_chimp\n  OBJECT\n  bit_reader.cpp\n  chimp_constants.cpp\n  flag_buffer.cpp\n  leading_zero_buffer.cpp\n  chimp.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_storage_compression_chimp>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Handle Cygwin/Mingw Compiler\nDESCRIPTION: Configures settings for Cygwin or MinGW compilers. It adds compile options to enforce the gnu++11 standard.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/re2/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n\"elseif(CYGWIN OR MINGW)\n  # See https://stackoverflow.com/questions/38139631 for details.\n  add_compile_options(-std=gnu++11)\nendif()\"\n```\n\n----------------------------------------\n\nTITLE: Updating Global Object Files List\nDESCRIPTION: Propagates the test persistence object files to the parent scope, enabling inclusion in broader build configuration\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/persistence/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_persistence>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Object Files Scope in CMake\nDESCRIPTION: This snippet aggregates all object files in a project-specific variable, allowing CMake to manage these files within the parent scope. This pattern is dependent on variables being previously defined and is integral to building the final executable or library.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/function/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES}\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Adding Python Arrow Objects to Parent Scope\nDESCRIPTION: Adds the Python Arrow object files to the parent scope's ALL_OBJECT_FILES variable for inclusion in the main build.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/src/arrow/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:python_arrow>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Include Directories\nDESCRIPTION: This command sets the include directories for the `duckdb_skiplistlib` target.  It makes the current source directory available as a public include directory for consumers of this library. This allows other parts of the DuckDB project to include the SkipList library's header files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_include_directories(\n  duckdb_skiplistlib\n  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)\n```\n\n----------------------------------------\n\nTITLE: Adding Object Library in CMake\nDESCRIPTION: This snippet adds an object library named 'test_secrets' which includes the source files 'test_custom_secret_storage.cpp' and 'test_persistent_secret_permissions.cpp'. It also updates a variable 'ALL_OBJECT_FILES' with the new library's object files in the parent scope, allowing for broader usage within the project.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/secrets/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_secrets OBJECT test_custom_secret_storage.cpp\n                  test_persistent_secret_permissions.cpp)\n\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_secrets>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Subdirectories in CMake\nDESCRIPTION: The snippet adds a specified subdirectory to the CMake project, which is essential for organizing the project's directory structure. This requires the subdirectory to have its own 'CMakeLists.txt' to be effectively managed.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/function/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_subdirectory(table)\n```\n\n----------------------------------------\n\nTITLE: Setting up Include Directories in CMake\nDESCRIPTION: Configures the include directories for the build system to find header files.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpch/dbgen/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Linking MbedTLS Headers for Out-of-Source Builds\nDESCRIPTION: Creates symbolic links for MbedTLS and PSA headers during testing and out-of-source build configurations to ensure header availability\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/include/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif (ENABLE_TESTING AND NOT ${CMAKE_CURRENT_BINARY_DIR} STREQUAL ${CMAKE_CURRENT_SOURCE_DIR})\n    link_to_source(mbedtls)\n    link_to_source(psa)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Updating All Object Files - CMake\nDESCRIPTION: This snippet appends the object files from the 'test_logging' component to the 'ALL_OBJECT_FILES' variable. This is crucial for propagating the compiled object files to other parts of the larger build system, marked to be accessible in the parent scope.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/logging/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_logging>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Including directories\nDESCRIPTION: Includes the 'include' directory for header files. Allows the project to find necessary header files during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Configuring TPCH Extension Build in CMake\nDESCRIPTION: Conditionally adds the TPCH benchmark subdirectory based on whether TPCH is included in DUCKDB_EXTENSION_NAMES.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/benchmark/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_subdirectory(micro)\nlist(FIND DUCKDB_EXTENSION_NAMES tpch _index)\nif(${_index} GREATER -1)\n  add_subdirectory(tpch)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Conditional Query Log Flag in CMake\nDESCRIPTION: Adds a preprocessor definition for DUCKDB_FORCE_QUERY_LOG when FORCE_QUERY_LOG is enabled. This allows for configurable query logging behavior during compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/main/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FORCE_QUERY_LOG)\n  add_definitions(-DDUCKDB_FORCE_QUERY_LOG=\"\\\"\"${FORCE_QUERY_LOG}\"\\\"\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Warnings for DuckDB FSST Target\nDESCRIPTION: This snippet disables compiler warnings for the 'duckdb_fsst' target, ensuring that warnings do not appear during the build process, which may be useful for a cleaner compilation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/fsst/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(duckdb_fsst)\n```\n\n----------------------------------------\n\nTITLE: Including Header Directories\nDESCRIPTION: The snippet sets the include directories for the project, allowing CMake to find header files from the specified 'include' path. This is essential for compiling files that depend on these headers.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/mbedtls/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ninclude_directories(include)\n```\n\n----------------------------------------\n\nTITLE: Adding DuckDB Core Functions Debug Library with CMake\nDESCRIPTION: Creates a library object for the DuckDB core functions debug module, including the vector_type.cpp source file. Then updates the CORE_FUNCTION_FILES variable in the parent scope to include this new object.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/scalar/debug/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(duckdb_core_functions_debug OBJECT vector_type.cpp)\nset(CORE_FUNCTION_FILES\n    ${CORE_FUNCTION_FILES} $<TARGET_OBJECTS:duckdb_core_functions_debug>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy for DuckDB\nDESCRIPTION: This snippet checks and sets the CMake policy CMP0063 to NEW, which affects how CMake handles variable shadowing during the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/zstd/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Adding Library to Unity Build in CMake\nDESCRIPTION: This snippet uses CMake to add an object file, specifically 'filter_cache.cpp', to a Unity build target named 'test_filter'. It then updates a variable 'ALL_OBJECT_FILES' to include this target's object files. This setup is intended for incorporating specific object files into the build process efficiently, leveraging CMake's target mechanism. The configuration requires 'filter_cache.cpp' to be available in the project directory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/sql/filter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library_unity(test_filter OBJECT filter_cache.cpp)\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:test_filter>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting CMake Policy\nDESCRIPTION: This snippet sets the CMake policy CMP0063 to NEW. CMP0063 relates to the visibility of source file properties, and setting it to NEW ensures consistent behavior across different CMake versions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/imdb/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(POLICY CMP0063)\n    cmake_policy(SET CMP0063 NEW)\nendif()\n```\n\n----------------------------------------\n\nTITLE: TPC-H Extension Integration in CMake\nDESCRIPTION: If the TPC-H benchmark extension is enabled, this adds TPC-H-specific test files and includes necessary headers. It also adds backward compatibility tests for serialized query plans.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/api/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nif(DUCKDB_EXTENSION_TPCH_SHOULD_LINK)\n  include_directories(../../extension/tpch/include)\n  set(TEST_API_OBJECTS\n      ${TEST_API_OBJECTS} test_tpch_with_relations.cpp\n      test_tpch_with_streaming.cpp\n      serialized_plans/test_plan_serialization_bwc.cpp)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Disabling Target Warnings\nDESCRIPTION: This command disables compiler warnings for the `duckdb_skiplistlib` target. This can be useful for suppressing warnings that are not relevant or actionable, but it should be used with caution to avoid masking important issues. It utilizes a custom function `disable_target_warnings` which is not shown in the snippet.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/skiplist/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(duckdb_skiplistlib)\n```\n\n----------------------------------------\n\nTITLE: Disabling target warnings\nDESCRIPTION: Disables compiler warnings for the 'tpce' target. This suppresses potentially noisy or irrelevant warnings during the build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/tpce-tool/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\ndisable_target_warnings(tpce)\n```\n\n----------------------------------------\n\nTITLE: Configuring Exit-Time Destructors Warning Suppression in CMake\nDESCRIPTION: Conditionally adds a compiler flag to suppress exit-time destructor warnings in debug builds if the EXIT_TIME_DESTRUCTORS_WARNING variable is set. This helps reduce noise in debug compilation output.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/common/types/column/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nif(${EXIT_TIME_DESTRUCTORS_WARNING})\n  set(CMAKE_CXX_FLAGS_DEBUG\n      \"${CMAKE_CXX_FLAGS_DEBUG} -Wno-exit-time-destructors\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Conditional Test Tools Subdirectory Configuration\nDESCRIPTION: Adds test-related subdirectories for imdb and tpce-tool, with platform and build configuration restrictions. Only included on non-Windows, non-Sun platforms when unit tests are enabled.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT WIN32\n   AND NOT SUN\n   AND ${BUILD_UNITTESTS})\n  add_subdirectory(imdb)\n  if(${BUILD_TPCE})\n    add_subdirectory(tpce-tool)\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Extension Import Error Example\nDESCRIPTION: Example of common import error when extensions are incorrectly linked\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_9\n\nLANGUAGE: console\nCODE:\n```\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/bin/python3/site-packages/duckdb/__init__.py\", line 4, in <module>\n    import duckdb.functional as functional\n  File \"/usr/bin/python3/site-packages/duckdb/functional/__init__.py\", line 1, in <module>\n    from duckdb.duckdb.functional import (\nImportError: dlopen(/usr/bin/python3/site-packages/duckdb/duckdb.cpython-311-darwin.so, 0x0002): symbol not found in flat namespace '_MD5_Final'\n```\n\n----------------------------------------\n\nTITLE: Adding TableRef Transformer Objects to Parent Scope in CMake\nDESCRIPTION: Adds the compiled object files from the 'duckdb_transformer_tableref' target to the ALL_OBJECT_FILES variable in the parent scope. This allows these objects to be included in a larger build process.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/src/parser/transform/tableref/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nset(ALL_OBJECT_FILES\n    ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_tableref>\n    PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Disabling target warnings\nDESCRIPTION: Disables compiler warnings for the \"duckdb_pg_query\" target. This can be useful for suppressing warnings that are not relevant or cannot be easily fixed.  The disable_target_warnings function is assumed to be defined elsewhere.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: cmake\nCODE:\n```\ndisable_target_warnings(duckdb_pg_query)\n```\n\n----------------------------------------\n\nTITLE: Setting target properties\nDESCRIPTION: Sets the export name property for the \"duckdb_pg_query\" target.  This defines the name under which the target will be exported. The exported name is set to \"duckdb_duckdb_pg_query\".\nSOURCE: https://github.com/duckdb/duckdb/blob/main/third_party/libpg_query/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: cmake\nCODE:\n```\nset_target_properties(duckdb_pg_query PROPERTIES EXPORT_NAME duckdb_duckdb_pg_query)\n```\n\n----------------------------------------\n\nTITLE: Modifying os_overcommits_proc function in C++\nDESCRIPTION: C++ code modification for the os_overcommits_proc function in pages.c to explicitly initialize a buffer and prevent reading uninitialized memory.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/jemalloc/jemalloc/README.md#2025-04-22_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\n// explicitly initialize this buffer to prevent reading uninitialized memory if the file is somehow empty\n// 0 is the default setting for linux if it hasn't been changed so that's what we initialize to\nchar buf[1] = {'0'};\n// in this function\nstatic bool\nos_overcommits_proc(void)\n```\n\n----------------------------------------\n\nTITLE: Serializing and Deserializing DuckDB Aggregates\nDESCRIPTION: These operations save and restore binding data for aggregates, enabling serialization of query plans containing aggregate functions.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/core_functions/aggregate/README.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nserialize(Serializer &serializer, const optional_ptr<FunctionData> bind_data, const AggregateFunction &function);\ndeserialize(Deserializer &deserializer, AggregateFunction &function);\n```\n\n----------------------------------------\n\nTITLE: Setting Warning Parameters for Build\nDESCRIPTION: This snippet sets the warning parameters for the CMake build process. The 'PARAMETERS' variable is initialized with '-warnings', which will be used in various build commands.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/test/extension/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nset(PARAMETERS \"-warnings\")\n```\n\n----------------------------------------\n\nTITLE: Defining dbgen Object Library in CMake\nDESCRIPTION: Creates an OBJECT library named 'dbgen' with multiple source files related to database generation.\nSOURCE: https://github.com/duckdb/duckdb/blob/main/extension/tpch/dbgen/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(dbgen OBJECT\n  dbgen.cpp\n  dbgen_gunk.cpp\n  bm_utils.cpp\n  build.cpp\n  permute.cpp\n  rnd.cpp\n  rng64.cpp\n  speed_seed.cpp\n  text.cpp)\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies\nDESCRIPTION: Installing required development dependencies from requirements file\nSOURCE: https://github.com/duckdb/duckdb/blob/main/tools/pythonpkg/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install -r requirements-dev.txt\n```"
  }
]