[
  {
    "owner": "onesignal",
    "repo": "onesignal-unity-sdk",
    "content": "TITLE: Initializing OneSignal SDK in C#\nDESCRIPTION: Initialize the OneSignal SDK during application startup. This method sets up the SDK for use with the specified app ID.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nvoid Initialize(string appId)\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Unity with App ID\nDESCRIPTION: Basic code snippet for initializing the OneSignal SDK in a Unity application. This should be placed in a method like Start() of a MonoBehaviour early in your application's lifecycle. Replace the placeholder with your actual OneSignal App ID from the OneSignal dashboard.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Replace 'YOUR_ONESIGNAL_APP_ID' with your OneSignal App ID from app.onesignal.com\nOneSignal.Initialize(\"YOUR_ONESIGNAL_APP_ID\");\n```\n\n----------------------------------------\n\nTITLE: Logging in User with OneSignal in C#\nDESCRIPTION: Log in a user to OneSignal using an external ID and optional JWT bearer token. This switches the user context and handles push notification and in-app messaging subscriptions.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvoid Login(string externalId, string jwtBearerToken = null)\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Unity\nDESCRIPTION: Basic code snippet to initialize the OneSignal SDK in Unity. This should be placed in an appropriate method such as the Start method of a MonoBehaviour early in the application's lifecycle. Replace the placeholder app ID with your actual OneSignal App ID from the OneSignal dashboard.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/README.md#2025-04-18_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Replace 'YOUR_ONESIGNAL_APP_ID' with your OneSignal App ID from app.onesignal.com\nOneSignal.Initialize(\"YOUR_ONESIGNAL_APP_ID\");\n```\n\n----------------------------------------\n\nTITLE: User Login Implementation in OneSignal Unity SDK\nDESCRIPTION: Method for logging in a user with an external ID, which associates the device's push subscription with the user identified by the provided external ID.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Login(\"USER_EXTERNAL_ID\");\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Unity C#\nDESCRIPTION: Code for initializing the OneSignal SDK and requesting notification permissions. The app ID is now provided during initialization and cannot be changed later.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Initialize(ONESIGNAL_APP_ID);\n// RequestPermissionAsync will show the native platform notification permission prompt.\n// We recommend removing the following code and instead using an In-App Message to prompt for notification permission.\nvar result = await OneSignal.Notifications.RequestPermissionAsync(true);\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Lifecycle Events in OneSignal\nDESCRIPTION: Implementation of notification lifecycle event handlers including notification opened, notification received/will show, and in-app message clicked events.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .HandleNotificationOpened(onNotificationOpened)\n   .EndInit();\n   \nvoid onNotificationOpened(OSNotificationOpenedResult result) {\n    var notif = result.notification;\n    var action = result.action;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.NotificationOpened += onNotificationOpened;\n\nvoid onNotificationOpened(NotificationOpenedResult result) {\n    var notif = result.notification;\n    var action = result.action;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .HandleNotificationReceived(onNotificationReceived)\n   .EndInit();\n\nvoid onNotificationReceived(OSNotification notification) {\n    var notifID = notification.payload.notificationID;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.NotificationWillShow += onNotificationWillShow;\n\nNotification onNotificationWillShow(Notification notification) {\n    if (someCheck) {\n        return null; // don't show the notificaiton\n    }\n    return notification; // show the notification\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how the initialization method has been simplified in 3.x.x. The new initialization uses a simpler single method call rather than the builder pattern.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.StartInit(\"your_app_id\")\n   .EndInit();\n\n// 3.x.x\nOneSignal.Default.Initialize(\"your_app_id\");\n```\n\n----------------------------------------\n\nTITLE: Tag Management in OneSignal SDK\nDESCRIPTION: Comprehensive tag management including sending, retrieving, and deleting tags for user segmentation and tracking.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendTag(\"tagName\", \"tagValue\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendTag(\"tagName\", \"tagValue\");\n```\n\n----------------------------------------\n\nTITLE: Opting In to Push Notifications in OneSignal Unity SDK\nDESCRIPTION: Method for opting back in to push notifications, which will trigger the native permission prompt if OS permissions are not already granted.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npushSubscription.OptIn();\n```\n\n----------------------------------------\n\nTITLE: Sending Outcomes with OneSignal Unity SDK\nDESCRIPTION: Examples of sending basic, unique and valued outcomes in both 2.x.x and 3.x.x versions. Demonstrates the syntax changes for sending different types of outcomes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendOutcome(\"outcomeName\");\n\nOneSignal.SendUniqueOutcome(\"uniqueOutcomeName\");\n\nOneSignal.SendOutcomeWithValue(\"outcomeWithVal\", 4.2f);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendOutcome(\"outcomeName\");\n\nOneSignal.Default.SendUniqueOutcome(\"uniqueOutcomeName\");\n\nOneSignal.Default.SendOutcomeWithValue(\"outcomeWithVal\", 4.2f);\n```\n\n----------------------------------------\n\nTITLE: Managing Push Notification Permissions in OneSignal Unity SDK\nDESCRIPTION: Examples of requesting push notification permissions and handling user responses in both SDK versions. Shows how to prompt users for notifications and handle their response.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_7\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.PromptForPushNotificationsWithUserResponse(response => {\n    if (response) {\n        // user accepted\n    }\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar response = await OneSignal.Default.PromptForPushNotificationsWithUserResponse();\nif (response == NotificationPermission.Authorized) {\n    // user accepted\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in OneSignal Unity SDK\nDESCRIPTION: Methods for adding and removing email and SMS subscriptions for a user, allowing multiple subscriptions of each type per user.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Add email subscription\nOneSignal.User.AddEmail(\"customer@company.com\")\n// Remove previously added email subscription\nOneSignal.User.RemoveEmail(\"customer@company.com\")\n\n// Add SMS subscription\nOneSignal.User.AddSms(\"+15558675309\")\n// Remove previously added SMS subscription\nOneSignal.User.RemoveSms(\"+15558675309\")\n```\n\n----------------------------------------\n\nTITLE: Prompting for Push Notification Permission in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to prompt the user for permission to send push notifications using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_16\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.PromptForPushNotificationsWithUserResponse(response => {\n    if (response) {\n        // user accepted\n    }\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar response = await OneSignal.Default.PromptForPushNotificationsWithUserResponse();\nif (response == NotificationPermission.Authorized) {\n    // user accepted\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification States in OneSignal\nDESCRIPTION: Methods for checking push notification permission status and subscription state. Includes examples of observing permission changes and managing notification settings.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\nvar currentDeviceState = OneSignal.GetPermissionSubscriptionState();\nvar currentStatus      = currentDeviceState.permissionStatus.status;\n\nif (currentDeviceState.permissionStatus.hasPrompted == false) {\n    // do if user was not prompted\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar currentStatus = OneSignal.Default.NotificationPermission;\nif (currentStatus == NotificationPermission.NotDetermined) {\n    // do if user was not prompted\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OneSignal SDK in Unity C#\nDESCRIPTION: Initializes the OneSignal SDK with an app ID and requests notification permission. This is the basic initialization flow in the new v5.0.0 SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Initialize(ONESIGNAL_APP_ID);\n// RequestPermissionAsync will show the native platform notification permission prompt.\n// We recommend removing the following code and instead using an In-App Message to prompt for notification permission.\nvar result = await OneSignal.Notifications.RequestPermissionAsync(true);\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Click Events in C#\nDESCRIPTION: Event that fires whenever a notification is clicked by the user. Provides access to the notification data and click result.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationClickEventArgs> Clicked\n\nNotificationClickEventArgs { INotification Notification, INotificationClickResult Result }\n```\n\n----------------------------------------\n\nTITLE: OneSignal User Namespace Methods\nDESCRIPTION: User-scoped functionality methods accessible via OneSignal.User, including subscription management, aliases, tags, and email/SMS functionality.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nIPushSubscription PushSubscription\nstring Language\nevent EventHandler<PushSubscriptionChangedEventArgs> Changed\nvoid AddAlias(string label, string id)\nvoid AddAliases(Dictionary<string, string> aliases)\nvoid RemoveAlias(string label)\nvoid RemoveAliases(params string[] labels)\nvoid AddEmail(string email)\nvoid RemoveEmail(string email)\nvoid AddSms(string sms)\nvoid RemoveSms(string sms)\nDictionary<string, string> GetTags()\nvoid AddTag(string key, string value)\nvoid AddTags(Dictionary<string, string> tags)\nvoid RemoveTag(string key)\nvoid RemoveTags(params string[] keys)\n```\n\n----------------------------------------\n\nTITLE: OneSignal Core API Methods\nDESCRIPTION: Core initialization and user management methods available in the OneSignal static class, including consent management, initialization, login, and logout functionality.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nbool ConsentRequired\nbool ConsentGiven\nvoid Initialize(string appId)\nvoid Login(string externalId, string jwtBearerToken = null)\nvoid Logout()\n```\n\n----------------------------------------\n\nTITLE: Managing Notifications in C# with OneSignal Notifications Namespace\nDESCRIPTION: Properties and methods for handling push notifications, including permission management, clearing notifications, and event handlers for notification interactions.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nbool Permission\n```\n\nLANGUAGE: C#\nCODE:\n```\nbool CanRequestPermission\n```\n\nLANGUAGE: C#\nCODE:\n```\nNotificationPermission PermissionNative\n```\n\nLANGUAGE: C#\nCODE:\n```\nTask<bool> RequestPermissionAsync(bool fallbackToSettings)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid ClearAllNotifications()\n```\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationPermissionChangedEventArgs> PermissionChanged\n```\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationWillDisplayEventArgs> ForegroundWillDisplay\n```\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationClickEventArgs> Clicked\n```\n\n----------------------------------------\n\nTITLE: Sending a Push Notification in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to send a push notification to a user using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations, including creating the notification object and handling the response.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_24\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.IdsAvailable((pushUserId, pushToken) => {\n    var notification = new Dictionary<string, object> {\n        [\"contents\"]           = new Dictionary<string, string> { [\"en\"] = \"Test Message\" },\n        [\"include_player_ids\"] = new List<string> { pushUserId },\n        [\"send_after\"]         = DateTime.Now.ToUniversalTime().AddSeconds(30).ToString(\"U\")\n    };\n\n    OneSignal.PostNotification(notification,\n        response => Debug.Log(\"success\"),\n        error => Debug.Log(\"error\")\n    );\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar pushUserId = OneSignal.Default.PushSubscriptionState.userId;\nvar pushOptions = new Dictionary<string, object> {\n    [\"contents\"]           = new Dictionary<string, string> { [\"en\"] = \"Test Message\" },\n    [\"include_player_ids\"] = new List<string> { pushUserId },\n    [\"send_after\"]         = DateTime.Now.ToUniversalTime().AddSeconds(30).ToString(\"U\")\n};\n\nvar result = await OneSignal.Default.PostNotification(pushOptions);\nif (result != null) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Outcomes in C# with OneSignal Session Namespace\nDESCRIPTION: Methods for adding outcomes to the current session in OneSignal. Includes adding simple outcomes, unique outcomes, and outcomes with values.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddOutcome(string name)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddUniqueOutcome(string name)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddOutcomeWithValue(string name, float value)\n```\n\n----------------------------------------\n\nTITLE: Getting Push Notification Permission Status in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to retrieve the current push notification permission status using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_17\n\nLANGUAGE: c#\nCODE:\n```\nvar currentDeviceState = OneSignal.GetPermissionSubscriptionState();\nvar currentStatus      = currentDeviceState.permissionStatus.status;\n\nif (currentDeviceState.permissionStatus.hasPrompted == false) {\n    // do if user was not prompted\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar currentStatus = OneSignal.Default.NotificationPermission;\nif (currentStatus == NotificationPermission.NotDetermined) {\n    // do if user was not prompted\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple User Tags in OneSignal C# SDK\nDESCRIPTION: Add multiple tags (key:value pairs) for the current user. Tags are used for targeting and personalizing messages. Existing tags with the same keys will be replaced.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddTags(Dictionary<string, string> tags)\n```\n\n----------------------------------------\n\nTITLE: Getting Push Notification Subscription Status in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to retrieve the current push notification subscription status using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_19\n\nLANGUAGE: c#\nCODE:\n```\nvar currentDeviceState = OneSignal.GetPermissionSubscriptionState();\nvar pushUserId         = currentDeviceState.subscriptionStatus.userId;\nvar pushIsSubscribed   = currentDeviceState.subscriptionStatus.subscribed;\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar pushState        = OneSignal.Default.PushSubscriptionState;\nvar pushUserId       = pushState.userId;\nvar pushIsSubscribed = pushState.isSubscribed;\n```\n\n----------------------------------------\n\nTITLE: Managing In-App Messages in OneSignal\nDESCRIPTION: Functionality for handling in-app messages including setting triggers, removing triggers, and pausing messages. Shows both single and bulk trigger operations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.AddTrigger(\"triggerKey\", 123);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetTrigger(\"triggerKey\", 123);\n```\n\n----------------------------------------\n\nTITLE: Requesting Notification Permission in C#\nDESCRIPTION: Method to prompt users for push notification permission. This displays the native OS prompt and automatically adds a push subscription to the device if enabled.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nTask<bool> RequestPermissionAsync(bool fallbackToSettings)\n```\n\n----------------------------------------\n\nTITLE: Accessing Push Subscription in OneSignal Unity SDK\nDESCRIPTION: Code for retrieving the current device's push subscription, which can be used to manage notification preferences.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar pushSubscription = OneSignal.User.PushSubscription;\n```\n\n----------------------------------------\n\nTITLE: Handling Foreground Notification Display Events in C#\nDESCRIPTION: Event that fires before displaying a notification while the app is in focus. Can be used to read notification data or control whether a notification should be shown.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationWillDisplayEventArgs> ForegroundWillDisplay\n\nNotificationWillDisplayEventArgs { IDisplayableNotification Notification, void PreventDefault() }\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Subscription Changes in OneSignal Unity SDK\nDESCRIPTION: Registers an event handler to be notified when the push subscription status changes. This allows your app to react to changes in the notification subscription state.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.User.PushSubscription.Changed += yourOnPushSubscriptionChangedMethod;\n\npublic void yourOnPushSubscriptionChangedMethod(object sender, PushSubscriptionChangedEventArgs e) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Push Notifications in OneSignal Unity SDK\nDESCRIPTION: Stops the user from receiving push notifications on the current device regardless of OS permission status. Used when a user wants to disable notifications from your app.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npushSubscription.OptOut();\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Permission Change Events in C#\nDESCRIPTION: Event that fires when notification permission settings change. This occurs when users enable or disable notifications for the app from system settings.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<NotificationPermissionChangedEventArgs> PermissionChanged\n\nNotificationPermissionChangedEventArgs { bool Permission }\n```\n\n----------------------------------------\n\nTITLE: Disabling Push Notifications in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to disable push notifications without removing the push subscription using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_21\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetSubscription(false);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.PushEnabled = false;\n```\n\n----------------------------------------\n\nTITLE: Managing Tags in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to manage tags using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations for sending, retrieving, and deleting tags.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_34\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendTag(\"tagName\", \"tagValue\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendTag(\"tagName\", \"tagValue\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendTags(new Dictionary<string, string> {\n    [\"tag1\"] = \"123\",\n    [\"tag2\"] = \"abc\"\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendTags(new Dictionary<string, string> {\n    [\"tag1\"] = \"123\",\n    [\"tag2\"] = \"abc\"\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.GetTags(tags => {\n    var tag3Value = tags[\"tag3\"];\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar tags = await OneSignal.Default.GetTags();\nvar tag3Value = tags[\"tag3\"];\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.DeleteTag(\"tag4\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.DeleteTag(\"tag4\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.DeleteTags(new[] { \"tag5\", \"tag6\" });\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.DeleteTags(new[] { \"tag5\", \"tag6\" });\n```\n\n----------------------------------------\n\nTITLE: Managing Email and SMS Subscriptions in OneSignal Unity SDK\nDESCRIPTION: Demonstrates how to add and remove email and SMS subscriptions for the current user. This enables multi-channel communication through the OneSignal platform.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Add email subscription\nOneSignal.User.AddEmail(\"customer@company.com\")\n// Remove previously added email subscription\nOneSignal.User.RemoveEmail(\"customer@company.com\")\n\n// Add SMS subscription\nOneSignal.User.AddSms(\"+15558675309\")\n// Remove previously added SMS subscription\nOneSignal.User.RemoveSms(\"+15558675309\")\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Push Subscription Changes in OneSignal Unity SDK\nDESCRIPTION: Code for observing changes to the push subscription by adding a custom method to the PushSubscription.Changed event.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.User.PushSubscription.Changed += yourOnPushSubscriptionChangedMethod;\n\npublic void yourOnPushSubscriptionChangedMethod(object sender, PushSubscriptionChangedEventArgs e) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Push Notifications in OneSignal Unity SDK\nDESCRIPTION: Method for opting out of push notifications on the current device, which stops the user from receiving notifications regardless of permission status.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npushSubscription.OptOut();\n```\n\n----------------------------------------\n\nTITLE: Handling In-Focus Notifications in OneSignal Unity SDK\nDESCRIPTION: Demonstrates how to handle notifications when the app is in focus. Version 3.x.x uses a NotificationWillShow event that allows modifying or preventing notification display.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_39\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .HandleNotificationReceived(onNotificationReceived)\n   .EndInit();\n\nvoid onNotificationReceived(OSNotification notification) {\n    var notifID = notification.payload.notificationID;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.NotificationWillShow += onNotificationWillShow;\n\nNotification onNotificationWillShow(Notification notification) {\n    if (someCheck) {\n        return null; // don't show the notificaiton\n    }\n    // COMING SOON - make modifications to the notification before showing\n    return notification; // show the notification\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to User State Changes in OneSignal Unity SDK\nDESCRIPTION: Code for observing changes to the OneSignal ID or external ID by adding a custom method to the User.Changed event.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.User.Changed += _userStateChanged;\n\nprivate void _userStateChanged(object sender, UserStateChangedEventArgs e) {\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple User Aliases in OneSignal C# SDK\nDESCRIPTION: Set multiple aliases for the current user. Existing aliases with the same labels will be overwritten.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddAliases(Dictionary<string, string> aliases)\n```\n\n----------------------------------------\n\nTITLE: Listening for Push Notification Permission Changes in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to listen for changes in push notification permission status using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_18\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.permissionObserver += changes => {\n    var previousStatus = changes.from.status;\n    var currentStatus  = changes.to.status;\n\n    if (changes.to.hasPrompted) {\n        // do if user was prompted\n    }\n};\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.NotificationPermissionChanged += (current, previous) => {\n    if (current != NotificationPermission.NotDetermined) {\n        // do if user was prompted\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: User Logout Implementation in OneSignal Unity SDK\nDESCRIPTION: Method for logging out the current user, which reverts to a device-scoped user that becomes the new owner of the device's push subscription.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Logout();\n```\n\n----------------------------------------\n\nTITLE: Adding User Alias in OneSignal C# SDK\nDESCRIPTION: Set an alias for the current user. If the alias already exists, it will be overwritten.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddAlias(string label, string id)\n```\n\n----------------------------------------\n\nTITLE: Adding User Tag in OneSignal C# SDK\nDESCRIPTION: Add a tag (key:value pair) for the current user. Tags are used for targeting and personalizing messages. Existing tags with the same key will be replaced.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddTag(string key, string value)\n```\n\n----------------------------------------\n\nTITLE: Accessing OneSignal Notification Properties in C#\nDESCRIPTION: Properties for checking notification permissions and status. These properties provide access to check if an app has push notification permission, can request permission, and the native permission state of the device.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nbool Permission\nbool CanRequestPermission\nNotificationPermission PermissionNative\n```\n\n----------------------------------------\n\nTITLE: User Logout with OneSignal SDK in Unity C#\nDESCRIPTION: Logs out the current identified user and reverts to a device-scoped user. The device's push subscription is transferred to this device-scoped user.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Logout();\n```\n\n----------------------------------------\n\nTITLE: Handling In-App Message Clicks in OneSignal Unity SDK\nDESCRIPTION: Shows how to listen for in-app message action clicks. Version 3.x.x uses an event subscription model with InAppMessageTriggeredAction event.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_40\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .HandleInAppMessageClicked(onIAMClicked)\n   .EndInit();\n\nvoid onIAMClicked(OSInAppMessageAction action) {\n    var clickName = action.clickName;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.InAppMessageTriggeredAction += onIAMTriggedAction;\n\nvoid onIAMTriggedAction(InAppMessageAction action) {\n    var clickName  = action.clickName;\n    var firstClick = action.firstClick;\n}\n```\n\n----------------------------------------\n\nTITLE: Opting In to Push Notifications in OneSignal Unity SDK\nDESCRIPTION: Resumes push notification delivery for the current device, potentially triggering the native permission prompt if OS permissions are not already granted.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npushSubscription.OptIn();\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveActivities Functionality in C# for iOS\nDESCRIPTION: The LiveActivities namespace provides methods for interacting with iOS Live Activities. These async methods allow associating and disassociating activity IDs with temporary push tokens on the OneSignal server.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nTask<bool> EnterAsync(string activityId, string token)\n```\n\nLANGUAGE: C#\nCODE:\n```\nTask<bool> ExitAsync(string activityId)\n```\n\n----------------------------------------\n\nTITLE: Accessing Push Subscription in OneSignal Unity SDK\nDESCRIPTION: Retrieves the current device's push subscription object, which can be used to manage notification opt-in/opt-out status for the current device.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar pushSubscription = OneSignal.User.PushSubscription;\n```\n\n----------------------------------------\n\nTITLE: Handling Notification Open Events in OneSignal Unity SDK\nDESCRIPTION: Shows how to listen for notification opened events. Version 3.x.x uses an event subscription model rather than the builder pattern used in 2.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_38\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .HandleNotificationOpened(onNotificationOpened)\n   .EndInit();\n   \nvoid onNotificationOpened(OSNotificationOpenedResult result) {\n    var notif = result.notification;\n    var action = result.action;\n}\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.NotificationOpened += onNotificationOpened;\n\nvoid onNotificationOpened(NotificationOpenedResult result) {\n    var notif = result.notification;\n    var action = result.action;\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Live Activities in C# (iOS Only)\nDESCRIPTION: Shows methods for entering and exiting live activities, as well as setting up default live activity attributes and starting a new live activity. These methods are specific to iOS platforms.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nTask<bool> EnterAsync(string activityId, string token)\nTask<bool> ExitAsync(string activityId)\nvoid SetupDefault(LiveActivitySetupOptions options = null)\nvoid StartDefault(string activityId, IDictionary<string, object> attributes, IDictionary<string, object> content)\n```\n\n----------------------------------------\n\nTITLE: User Login with OneSignal SDK in Unity C#\nDESCRIPTION: Associates the current device's push subscription with a specific user identified by an external ID. This is used for user-centric implementations where the same user can be identified across multiple devices.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nOneSignal.Login(\"USER_EXTERNAL_ID\");\n```\n\n----------------------------------------\n\nTITLE: Listening for Push Notification Subscription Changes in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to listen for changes in push notification subscription status using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_20\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.subscriptionObserver += changes => {\n    var prevPushState = changes.from;\n    var currPushState = changes.to;\n\n    var pushToken   = currPushState.pushToken;\n    var pushEnabled = currPushState.userSubscriptionSetting;\n};\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.PushSubscriptionStateChanged += (current, previous) => {\n    var pushToken   = current.pushToken;\n    var pushEnabled = !current.isPushDisabled;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting In-App Message Triggers in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to set trigger values for In-App Messages using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x for setting single and multiple triggers.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_25\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.AddTrigger(\"triggerKey\", 123);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetTrigger(\"triggerKey\", 123);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.AddTriggers(new Dictionary<string, object> {\n    [\"trigger1\"] = \"abc\",\n    [\"trigger2\"] = 456\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetTriggers(new Dictionary<string, object> {\n    [\"trigger1\"] = \"abc\",\n    [\"trigger2\"] = 456\n});\n```\n\n----------------------------------------\n\nTITLE: Setting User Email in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to set the user's email using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations, including handling the result of the operation.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_28\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetEmail(\"user@email.com\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetEmail(\"user@email.com\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetEmail(\"user@email.com\",\n    () => Debug.Log(\"success\"),\n    error => Debug.Log(\"error\")\n);\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.SetEmail(\"user@email.com\");\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Removing In-App Message Triggers in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to remove trigger values for In-App Messages using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations for removing single and multiple triggers.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_26\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.RemoveTriggerForKey(\"trigger3\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.RemoveTrigger(\"trigger3\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.RemoveTriggersForKeys(new[] { \"trigger4\", \"trigger5\" });\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.RemoveTriggers(new[] { \"trigger4\", \"trigger5\" });\n```\n\n----------------------------------------\n\nTITLE: Setting SMS Number in OneSignal\nDESCRIPTION: Method to set the user's SMS number in the OneSignal SDK. This is a new feature in 3.x.x that allows for SMS subscription management.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetSMSNumber(\"+12345556789\");\n```\n\n----------------------------------------\n\nTITLE: Accessing OneSignal InAppMessages Properties and Methods in C#\nDESCRIPTION: The InAppMessages namespace provides functionality for controlling in-app message display, including pausing all messages, managing triggers, and event handlers for message lifecycle and interaction events.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nbool Paused\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddTrigger(string key, string value)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddTriggers(Dictionary<string, string> triggers)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid RemoveTrigger(string key)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid RemoveTriggers(params string[] keys)\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid ClearTriggers()\n```\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<InAppMessageWillDisplayEventArgs> WillDisplay\nevent EventHandler<InAppMessageDidDisplayEventArgs> DidDisplay\nevent EventHandler<InAppMessageWillDismissEventArgs> WillDismiss\nevent EventHandler<InAppMessageDidDismissEventArgs> DidDismiss\n\nInAppMessageWillDisplayEventArgs { IInAppMessage Message }\nInAppMessageDidDisplayEventArgs { IInAppMessage Message }\nInAppMessageWillDismissEventArgs { IInAppMessage Message }\nInAppMessageDidDismissEventArgs { IInAppMessage Message }\n```\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<InAppMessageClickEventArgs> Clicked\n\nInAppMessageClickEventArgs { IInAppMessage Message, IInAppMessageClickResult Result }\n```\n\n----------------------------------------\n\nTITLE: Setting External User ID with Result Callback - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to set the external user ID and get the result. The 3.x.x version uses async/await instead of a callback.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_13\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.SetExternalUserId(\"3983ad1b-e31d-4df8-b063-85785ee34aa4\",\n    result => Debug.Log(\"success\")\n);\n\n// 3.x.x\nvar result = await OneSignal.Default.SetExternalUserId(\"3983ad1b-e31d-4df8-b063-85785ee34aa4\");\nif (result) {\n    Debug.Log(\"success\");\n}\n```\n\n----------------------------------------\n\nTITLE: Getting SMS Subscription State in OneSignal\nDESCRIPTION: Code to retrieve the current SMS subscription status, including the SMS user ID and phone number. Useful for checking the current state of the SMS subscription.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar smsState  = OneSignal.Default.SMSSubscriptionState;\nvar smsUserId = smsState.smsUserId;\nvar smsNumber = smsState.smsNumber;\n```\n\n----------------------------------------\n\nTITLE: Accessing InAppMessages Namespace in C#\nDESCRIPTION: Demonstrates how to access the InAppMessages namespace in the OneSignal Unity SDK. This namespace provides functionality for managing in-app messages.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nOneSignal.InAppMessages\n```\n\n----------------------------------------\n\nTITLE: Setting External User ID - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to set the external user ID. The method name is the same but now uses the Default singleton.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_12\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.SetExternalUserId(\"3983ad1b-e31d-4df8-b063-85785ee34aa4\");\n\n// 3.x.x\nOneSignal.Default.SetExternalUserId(\"3983ad1b-e31d-4df8-b063-85785ee34aa4\");\n```\n\n----------------------------------------\n\nTITLE: Logging Out SMS Subscription in OneSignal\nDESCRIPTION: Method to unlink the SMS subscription from the device so it will no longer be updated. This removes the association between the device and the SMS number.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.LogOutSMS();\n```\n\n----------------------------------------\n\nTITLE: Managing InAppMessage Triggers in C#\nDESCRIPTION: Shows methods for adding, removing, and clearing triggers for in-app messages. Triggers are used to determine whether specific in-app messages should be displayed to the user.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddTrigger(string key, string value)\nvoid AddTriggers(Dictionary<string, string> triggers)\nvoid RemoveTrigger(string key)\nvoid RemoveTriggers(params string[] keys)\nvoid ClearTriggers()\n```\n\n----------------------------------------\n\nTITLE: Removing External User ID with Result Callback - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to remove the external user ID and get the result. The 3.x.x version uses async/await instead of a callback.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_15\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.RemoveExternalUserId(\n    result => Debug.Log(\"success\")\n);\n\n// 3.x.x\nvar result = await OneSignal.Default.RemoveExternalUserId();\nif (result) {\n    Debug.Log(\"success\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OneSignal Namespace in C#\nDESCRIPTION: Import statement needed to use the OneSignal SDK in C# files. This must be added to all files using OneSignal functionality after migrating to 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing OneSignalSDK;\n```\n\n----------------------------------------\n\nTITLE: Setting InAppMessage Lifecycle Events in C#\nDESCRIPTION: Demonstrates how to set up event handlers for various lifecycle events of in-app messages, including display and dismissal events.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<InAppMessageWillDisplayEventArgs> WillDisplay\nevent EventHandler<InAppMessageDidDisplayEventArgs> DidDisplay\nevent EventHandler<InAppMessageWillDismissEventArgs> WillDismiss\nevent EventHandler<InAppMessageDidDismissEventArgs> DidDismiss\n\nInAppMessageWillDisplayEventArgs { IInAppMessage Message }\nInAppMessageDidDisplayEventArgs { IInAppMessage Message }\nInAppMessageWillDismissEventArgs { IInAppMessage Message }\nInAppMessageDidDismissEventArgs { IInAppMessage Message }\n```\n\n----------------------------------------\n\nTITLE: Logging out User from OneSignal in C#\nDESCRIPTION: Log out the current user from OneSignal. This creates a new device-scoped user without a retrievable user identity.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nvoid Logout()\n```\n\n----------------------------------------\n\nTITLE: SMS Subscription State Change Listener\nDESCRIPTION: Event handler for monitoring SMS subscription state changes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SMSSubscriptionStateChanged += (current, previous) => {\n    var smsSubscribed = current.isSubscribed;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting InAppMessage Click Events in C#\nDESCRIPTION: Shows how to set up event handlers for click events on in-app messages.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nevent EventHandler<InAppMessageClickEventArgs> Clicked\n\nInAppMessageClickEventArgs { IInAppMessage Message, IInAppMessageClickResult Result }\n```\n\n----------------------------------------\n\nTITLE: OneSignal Session Namespace Methods\nDESCRIPTION: Session-scoped functionality methods accessible via OneSignal.Session, providing outcome tracking capabilities.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvoid AddOutcome(string name)\nvoid AddUniqueOutcome(string name)\nvoid AddOutcomeWithValue(string name, float value)\n```\n\n----------------------------------------\n\nTITLE: SMS Subscription Logout\nDESCRIPTION: Method to unlink SMS subscription from the device.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_3\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.LogOutSMS();\n```\n\n----------------------------------------\n\nTITLE: Getting Push Notification Subscription IDs in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to retrieve the push notification subscription status' ids using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_23\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.IdsAvailable((pushUserId, pushToken) => {\n    // perform action with push info\n});\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar pushUserId = OneSignal.Default.PushSubscriptionState.userId;\nvar pushToken  = OneSignal.Default.PushSubscriptionState.pushToken;\n```\n\n----------------------------------------\n\nTITLE: Managing Location Sharing in C# with OneSignal Location Namespace\nDESCRIPTION: Properties and methods for handling location sharing with OneSignal, including checking the current sharing status and requesting location permissions.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nbool IsShared\n```\n\nLANGUAGE: C#\nCODE:\n```\nvoid RequestPermission()\n```\n\n----------------------------------------\n\nTITLE: Requesting Location Permission in C#\nDESCRIPTION: Method to manually prompt users for location permissions. Enables geotagging for location-based notifications.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvoid RequestPermission()\n```\n\n----------------------------------------\n\nTITLE: Getting Email Subscription Status in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to retrieve the current email subscription status using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_30\n\nLANGUAGE: c#\nCODE:\n```\nvar currentDeviceState = OneSignal.GetPermissionSubscriptionState();\nvar emailUserId        = currentDeviceState.emailSubscriptionStatus.emailUserId;\nvar emailAddress       = currentDeviceState.emailSubscriptionStatus.emailAddress;\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar emailState = OneSignal.Default.EmailSubscriptionState;\nvar emailUserId  = emailState.emailUserId;\nvar emailAddress = emailState.emailAddress;\n```\n\n----------------------------------------\n\nTITLE: Prompting for Location Sharing in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to prompt the user if they would like to share their location using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_33\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.PromptLocation();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.PromptLocation();\n```\n\n----------------------------------------\n\nTITLE: Accessing OneSignal Location Properties in C#\nDESCRIPTION: Property to check if location is currently shared with OneSignal.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nbool IsShared\n```\n\n----------------------------------------\n\nTITLE: Sending Unique Outcome in OneSignal Unity SDK\nDESCRIPTION: Shows how to send a unique outcome event to OneSignal. In version 3.x.x, this is done through the Default instance rather than a static method call.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_36\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendUniqueOutcome(\"uniqueOutcomeName\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendUniqueOutcome(\"uniqueOutcomeName\");\n```\n\n----------------------------------------\n\nTITLE: Setting Location Sharing in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to set whether location sharing is enabled using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_32\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetLocationShared(true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.ShareLocation = true;\n```\n\n----------------------------------------\n\nTITLE: Clearing Notifications in C#\nDESCRIPTION: Method to remove all OneSignal notifications from the device.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvoid ClearAllNotifications()\n```\n\n----------------------------------------\n\nTITLE: Sending Outcome in OneSignal Unity SDK\nDESCRIPTION: Demonstrates how to send an outcome event to OneSignal. The implementation has changed from direct static method calls to using the Default instance in version 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_35\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendOutcome(\"outcomeName\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendOutcome(\"outcomeName\");\n```\n\n----------------------------------------\n\nTITLE: Pausing In-App Messages in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to pause In-App Messages using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_27\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.PauseInAppMessages(true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.InAppMessagesArePaused = true;\n```\n\n----------------------------------------\n\nTITLE: Listening for Email Subscription Changes in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to listen for changes in email subscription status using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_31\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.emailSubscriptionObserver += changes => {\n    var prevEmailState = changes.from;\n    var currEmailState = changes.to;\n\n    var emailSubscribed = currEmailState.subscribed;\n};\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.EmailSubscriptionStateChanged += (current, previous) => {\n    var emailSubscribed = current.isSubscribed;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting User Consent Requirement - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to set whether user consent is required before initialization. The 3.x.x version uses a property instead of a method call.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_9\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.SetRequiresUserPrivacyConsent(true); // before init\n\n// or\n\nOneSignal.StartInit(\"your_app_id\")\n   .SetRequiresUserPrivacyConsent(true)\n   .EndInit();\n\n// 3.x.x\nOneSignal.Default.RequiresPrivacyConsent = true; // before init\n```\n\n----------------------------------------\n\nTITLE: Logging Out Email in OneSignal Unity SDK\nDESCRIPTION: This snippet shows how to unlink the email subscription from the device using OneSignal SDK. It compares the implementation between version 2.x.x and 3.x.x, including handling the result of the operation.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_29\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.LogoutEmail();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.LogoutEmail();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.LogoutEmail(\n    () => Debug.Log(\"success\"),\n    error => Debug.Log(\"error\")\n);\n```\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.LogoutEmail();\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing LiveActivities Namespace in C#\nDESCRIPTION: Demonstrates how to access the LiveActivities namespace in the OneSignal Unity SDK. This namespace provides functionality for managing live activities.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nOneSignal.LiveActivities\n```\n\n----------------------------------------\n\nTITLE: Clearing OneSignal Notifications in OneSignal Unity SDK\nDESCRIPTION: This snippet demonstrates how to clear all OneSignal notifications from the notification shade using OneSignal SDK. It shows the difference between version 2.x.x and 3.x.x implementations.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_22\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.ClearOneSignalNotifications();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.ClearOneSignalNotifications();\n```\n\n----------------------------------------\n\nTITLE: Configuring Android In-App Message Display Options via AndroidManifest\nDESCRIPTION: XML configuration options for the AndroidManifest.xml file to customize the appearance of OneSignal In-App Messages by hiding the gray overlay and drop shadow.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.onesignal.inAppMessageHideGrayOverlay\" android:value=\"true\"/>\n```\n\nLANGUAGE: xml\nCODE:\n```\n<meta-data android:name=\"com.onesignal.inAppMessageHideDropShadow\" android:value=\"true\"/>\n```\n\n----------------------------------------\n\nTITLE: Sending Outcome with Value in OneSignal Unity SDK\nDESCRIPTION: Demonstrates how to send an outcome with a float value to OneSignal. Version 3.x.x uses the Default instance pattern instead of the static method approach in 2.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_37\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SendOutcomeWithValue(\"outcomeWithVal\", 4.2f);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SendOutcomeWithValue(\"outcomeWithVal\", 4.2f);\n```\n\n----------------------------------------\n\nTITLE: Checking User Consent Status - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to check if the user has provided consent. The 3.x.x version uses a property instead of a method call.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nif (OneSignal.UserProvidedConsent()) {\n    // user provided consent\n}\n\n// 3.x.x\nif (OneSignal.Default.PrivacyConsent) {\n    // user provided consent\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Push to Start Tokens for Live Activities in C# (iOS Only)\nDESCRIPTION: Demonstrates methods for setting and removing push to start tokens for live activities. These methods are specific to iOS platforms and are used to manage the device's capability to receive push to start live activities.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nvoid SetPushToStartToken(string activityType, string token)\nvoid RemovePushToStartToken(string activityType)\n```\n\n----------------------------------------\n\nTITLE: Email Management in OneSignal SDK\nDESCRIPTION: Complete email subscription management including setting email, logging out, and monitoring subscription status changes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetEmail(\"user@email.com\");\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetEmail(\"user@email.com\");\n```\n\n----------------------------------------\n\nTITLE: Setting User Consent Status - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to update the user's consent status. The 3.x.x version uses a property instead of a method call.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_10\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.UserDidProvideConsent(true);\n\n// 3.x.x\nOneSignal.Default.PrivacyConsent = true;\n```\n\n----------------------------------------\n\nTITLE: Android Notification Icon File Naming and Size Requirements\nDESCRIPTION: Table showing the required file names, densities, and sizes for small and large notification icons in Android apps using OneSignal.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/com.onesignal.unity.android/Editor/OneSignalConfig.androidlib/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                                | Density (dp) | Size (px) |\n|-------------------------------------|--------------|-----------|\n| ic_stat_onesignal_default.png       | MDPI         | 24x24     |\n| ic_stat_onesignal_default.png       | HDPI         | 36x36     |\n| ic_stat_onesignal_default.png       | XHDPI        | 48x48     |\n| ic_stat_onesignal_default.png       | XXHDPI       | 72x72     |\n| ic_stat_onesignal_default.png       | XXXHDPI      | 96x96     |\n| ic_onesignal_large_icon_default.png | XXXHDPI      | 256x256   |\n```\n\n----------------------------------------\n\nTITLE: Listening for SMS Subscription Changes in OneSignal\nDESCRIPTION: Event handler setup to listen for changes to the SMS subscription state. Provides both current and previous state for comparison.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_6\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SMSSubscriptionStateChanged += (current, previous) => {\n    var smsSubscribed = current.isSubscribed;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Settings in OneSignal Unity SDK\nDESCRIPTION: The Debug namespace provides properties to control logging levels for the OneSignal SDK. It allows setting both the general logging level and the alert modal logging level.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nLogLevel LogLevel\n```\n\nLANGUAGE: C#\nCODE:\n```\nLogLevel AlertLevel\n```\n\n----------------------------------------\n\nTITLE: Setting SMS Number with Async Result in OneSignal\nDESCRIPTION: Asynchronous method to set the user's SMS number and get the result of the operation. Uses await pattern to handle the async operation.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.SetSMSNumber(\"+12345556789\");\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OneSignal Namespace in C#\nDESCRIPTION: Import statement required at the top of files using the OneSignal Unity SDK.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_0\n\nLANGUAGE: c#\nCODE:\n```\nusing OneSignalSDK;\n```\n\n----------------------------------------\n\nTITLE: Android Troubleshooting: Missing Type or Namespace Error\nDESCRIPTION: Common error message when OneSignal types or namespaces cannot be found in the Unity project. This usually requires deleting and reimporting the OneSignal assets.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nAssets/OneSignal/Example/OneSignalExampleBehaviou.cs: error CS0246: The type or namespace name '...' could not be found (are you missing a using directive or an assembly reference?)\n```\n\n----------------------------------------\n\nTITLE: Logging Out SMS Subscription with Async Result in OneSignal\nDESCRIPTION: Asynchronous method to unlink the SMS subscription from the device and get the result of the operation. Uses await pattern to handle the async operation.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.LogOutSMS();\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Setting SMS Number in OneSignal\nDESCRIPTION: Method to set a user's SMS number for notifications.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_1\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetSMSNumber(\"+12345556789\");\n```\n\n----------------------------------------\n\nTITLE: Resolving Android Gradle Build Failure for Kotlin Coroutines in OneSignal\nDESCRIPTION: Error that occurs during Android builds due to duplicate Kotlin coroutines library files. The issue happens during the merge of Java resources in the Gradle build process.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_23\n\nLANGUAGE: gradle\nCODE:\n```\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':unityLibrary:mergeReleaseJavaResource'.\n> A failure occurred while executing com.android.build.gradle.internal.tasks.MergeJavaResWorkAction\n > 2 files found with path 'META-INF/kotlinx_coroutines_core.version' from inputs:\n   - /Users/.../Library/Bee/Android/Prj/Mono2x/Gradle/unityLibrary/libs/org.jetbrains.kotlinx.kotlinx-coroutines-core-jvm-1.6.4.jar\n   - /Users/.../Library/Bee/Android/Prj/Mono2x/Gradle/unityLibrary/libs/org.jetbrains.kotlinx.kotlinx-coroutines-core-1.6.4.jar\n```\n\nLANGUAGE: gradle\nCODE:\n```\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':launcher:mergeReleaseJavaResource'.\n> A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\n   > More than one file was found with OS independent path 'META-INF/kotlinx_coroutines_core.version'.\n```\n\n----------------------------------------\n\nTITLE: Removing External User ID - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to remove the external user ID. The method name is the same but now uses the Default singleton.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_14\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.RemoveExternalUserId();\n\n// 3.x.x\nOneSignal.Default.RemoveExternalUserId();\n```\n\n----------------------------------------\n\nTITLE: Get SMS Subscription State\nDESCRIPTION: Retrieve current SMS subscription status including userId and number.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_5\n\nLANGUAGE: c#\nCODE:\n```\nvar smsState  = OneSignal.Default.SMSSubscriptionState;\nvar smsUserId = smsState.smsUserId;\nvar smsNumber = smsState.smsNumber;\n```\n\n----------------------------------------\n\nTITLE: Android Troubleshooting: Gradle Merge Conflict Error\nDESCRIPTION: Gradle build error caused by duplicate Kotlin coroutines files. This requires updating project settings and resolving Android dependencies.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_28\n\nLANGUAGE: gradle\nCODE:\n```\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':unityLibrary:mergeReleaseJavaResource'.\n> A failure occurred while executing com.android.build.gradle.internal.tasks.MergeJavaResWorkAction\n > 2 files found with path 'META-INF/kotlinx_coroutines_core.version' from inputs:\n   - /Users/.../Library/Bee/Android/Prj/Mono2x/Gradle/unityLibrary/libs/org.jetbrains.kotlinx.kotlinx-coroutines-core-jvm-1.6.4.jar\n   - /Users/.../Library/Bee/Android/Prj/Mono2x/Gradle/unityLibrary/libs/org.jetbrains.kotlinx.kotlinx-coroutines-core-1.6.4.jar\n```\n\n----------------------------------------\n\nTITLE: Location Services Integration in OneSignal\nDESCRIPTION: Methods for managing location sharing permissions and prompting users for location access.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_11\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.SetLocationShared(true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.ShareLocation = true;\n```\n\n----------------------------------------\n\nTITLE: Async SMS Number Setting with Result\nDESCRIPTION: Asynchronous method to set SMS number and handle the result.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_2\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.SetSMSNumber(\"+12345556789\");\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: iOS Troubleshooting: Bitcode Build Error\nDESCRIPTION: Xcode build error related to bitcode not being enabled in the OneSignal framework. The solution is to disable bitcode for all targets in the project.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_30\n\nLANGUAGE: csharp\nCODE:\n```\n'/Users/.../Library/Developer/Xcode/DerivedData/Unity-iPhone-.../Build/Products/ReleaseForRunning-iphoneos/XCFrameworkIntermediates/OneSignalXCFramework/OneSignalCore/OneSignalCore.framework/OneSignalCore' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. file '/Users/.../Library/Developer/Xcode/DerivedData/Unity-iPhone-.../Build/Products/ReleaseForRunning-iphoneos/XCFrameworkIntermediates/OneSignalXCFramework/OneSignalCore/OneSignalCore.framework/OneSignalCore' for architecture arm64\n```\n\n----------------------------------------\n\nTITLE: Setting Log and Alert Levels - Migration from 2.x.x to 3.x.x\nDESCRIPTION: Comparison showing how to set the logging and alert levels in both versions. The 3.x.x version uses properties instead of a method call.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_8\n\nLANGUAGE: c#\nCODE:\n```\n// 2.x.x\nOneSignal.SetLogLevel(OneSignal.LOG_LEVEL.INFO, OneSignal.LOG_LEVEL.ERROR);\n\n// 3.x.x\nOneSignal.Default.LogLevel   = LogLevel.Info;\nOneSignal.Default.AlertLevel = LogLevel.Error;\n```\n\n----------------------------------------\n\nTITLE: Async SMS Logout with Result\nDESCRIPTION: Asynchronous method to logout SMS subscription and handle the result.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_4\n\nLANGUAGE: c#\nCODE:\n```\nvar result = await OneSignal.Default.LogOutSMS();\nif (result) {\n    Debug.Log(\"success\");\n}\nelse {\n    Debug.Log(\"error\");\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing iOS Bitcode Error in OneSignal SDK Integration\nDESCRIPTION: Build error that occurs when trying to compile for iOS with bitcode enabled. The OneSignal framework doesn't contain bitcode, requiring bitcode to be disabled in the Xcode project settings.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n'/Users/.../Library/Developer/Xcode/DerivedData/Unity-iPhone-.../Build/Products/ReleaseForRunning-iphoneos/XCFrameworkIntermediates/OneSignalXCFramework/OneSignalCore/OneSignalCore.framework/OneSignalCore' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. file '/Users/.../Library/Developer/Xcode/DerivedData/Unity-iPhone-.../Build/Products/ReleaseForRunning-iphoneos/XCFrameworkIntermediates/OneSignalXCFramework/OneSignalCore/OneSignalCore.framework/OneSignalCore' for architecture arm64\n```\n\n----------------------------------------\n\nTITLE: Fixing C# Compilation Errors for OneSignal Unity SDK\nDESCRIPTION: Common C# compilation errors that occur when OneSignal components cannot be found or have missing definitions. The solution involves removing and reimporting the OneSignal assets.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nAssets/OneSignal/Example/OneSignalExampleBehaviou.cs: error CS0246: The type or namespace name '...' could not be found (are you missing a using directive or an assembly reference?)\n```\n\nLANGUAGE: csharp\nCODE:\n```\nAssets/OneSignal/Attribution/OneSignalVSAttribution.cs: error CS0117: 'OneSignal' does not contain a definition for '...'\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Handling in OneSignal Unity SDK\nDESCRIPTION: Shows how to configure whether URLs in notifications open within the app or in a browser. Version 3.x.x uses a simple method call rather than the settings dictionary approach.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_41\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .Settings(new Dictionary<string, bool> { { OneSignal.kOSSettingsInAppLaunchURL, true } })\n   .EndInit();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetLaunchURLsInApp(true);\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation Structure for OneSignal Unity SDK\nDESCRIPTION: Structured markdown documentation that outlines contribution guidelines, bug reporting procedures, and best practices for submitting issues to the OneSignal Unity SDK project.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Contributing to the OneSignal Unity SDK\n\n:+1::tada: First off, thanks for taking the time to contribute! :tada::+1:\n\n### How to Contribute\nWe love the open source community and enjoy the support and contributions of many of our users. We ask that any potential contributors to the SDK Follow the following guidelines:\n\nIf your proposed contribution is a small bug fix, please feel free to create your own fork of the repository and create a pull request.\n\nIf your contribution would _break_ or _change_ the functionality of the SDK, please reach out to us before you put in a lot of effort into a change we may not be able to use. We try our best to make sure that the SDK remains stable so that developers do not have to continually change their code, however some breaking changes _are_ desirable, so please get in touch to discuss your idea before you put in a lot of effort.\n\n#### Before Submitting A Bug Report\nBefore creating bug reports, please check this list of steps to follow.\n\n1. Make sure that you are actually encountering an _issue_ and not a _question_. If you simply have a question about the SDK, we would be more than happy to assist you in our Support section on the web (https://www.onesignal.com - click the Message button at the bottom right)\n2. Please make sure to [include as many details as possible](#how-do-i-submit-a-good-bug-report)\n\n> **Note:** If you find a **Closed** issue that seems like it is the same thing that you're experiencing, open a new issue and include a link to the original issue in the body of your new one.\n\n\n#### How Do I Submit a Good Bug Report\n* **Use a clear and descriptive title** for the issue to identify the problem.\n* **Include Reproducibility** It is nearly always a good idea to include steps to reproduct the issue. If you cannot reliably reproduce the issue yourself, that's ok, but reproducible steps help best.\n* **Describe your environment**, tell us what version of the Unity OneSignal SDK you are using, what platforms the issue occurs on (android/iOS), related code samples, and so on.\n* **Include a Stack Trace** If your issue involves a crash/exception, ***PLEASE*** post the stack trace to help us identify the root issue.\n* **Include an Example Project** This isn't required, but if you want your issue fixed quickly, it's often a good idea to include an example project as a zip and include it with the issue. You can also download the Demo project (included in the `/OneSignalExample` folder of this repo) and set up an example project with this code as a starting point.\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Vibration (Removed in 3.x.x)\nDESCRIPTION: Shows the now-removed way to enable notification vibration. This functionality has been replaced by Notification Categories (Channels) due to Android 8+ changes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_43\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.EnableVibrate(true);\n```\n\n----------------------------------------\n\nTITLE: Android Troubleshooting: Missing Definition Error\nDESCRIPTION: Error indicating that the OneSignal object is missing expected definitions. The solution is to delete and reimport the OneSignal assets.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_27\n\nLANGUAGE: csharp\nCODE:\n```\nAssets/OneSignal/Attribution/OneSignalVSAttribution.cs: error CS0117: 'OneSignal' does not contain a definition for '...'\n```\n\n----------------------------------------\n\nTITLE: Setting In-Focus Display Options (Removed in 3.x.x)\nDESCRIPTION: Shows the now-removed way to configure how notifications display when the app is in focus. This has been replaced by the NotificationWillShow event in 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_42\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.inFocusDisplayType = OneSignal.OSInFocusDisplayOption.InAppAlert;\n\n// or\n\nOneSignal.StartInit(\"your_app_id\")\n   .InFocusDisplaying(OneSignal.OSInFocusDisplayOption.Notification)\n   .EndInit();\n```\n\n----------------------------------------\n\nTITLE: OneSignal Unity SDK Android Icon File Paths\nDESCRIPTION: Table showing the correct file paths for adding custom notification icons to the OneSignal Unity SDK Android plugin, including different densities and sizes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/com.onesignal.unity.android/Editor/OneSignalConfig.androidlib/README.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Path                                                                                                       | Density (dp) | Size (px) |\n|------------------------------------------------------------------------------------------------------------|--------------|-----------|\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-mdpi**/ic_stat_onesignal_default.png          | MDPI         | 24x24     |\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-hdpi**/ic_stat_onesignal_default.png          | HDPI         | 36x36     |\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-xhdpi**/ic_stat_onesignal_default.png         | XHDPI        | 48x48     |\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-xxhdpi**/ic_stat_onesignal_default.png        | XXHDPI       | 72x72     |\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-xxxhdpi**/ic_stat_onesignal_default.png       | XXXHDPI      | 96x96     |\n| Assets/Plugins/Android/OneSignalConfig.androidlib/src/main/res/**drawable-xxxhdpi**/ic_onesignal_large_icon_default.png | XXXHDPI      | 256x256   |\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Generated Podfile Using Post-Process Build Script\nDESCRIPTION: A C# script that demonstrates how to modify the generated Podfile by appending text to it after generation but before pod installation. This example adds an app extension to the Podfile.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.IO;\npublic class PostProcessIOS : MonoBehaviour {\n[PostProcessBuildAttribute(45)]//must be between 40 and 50 to ensure that it's not overriden by Podfile generation (40) and that it's added before \"pod install\" (50)\nprivate static void PostProcessBuild_iOS(BuildTarget target, string buildPath)\n{\n    if (target == BuildTarget.iOS)\n    {\n\n        using (StreamWriter sw = File.AppendText(buildPath + \"/Podfile\"))\n        {\n            //in this example I'm adding an app extension\n            sw.WriteLine(\"\\ntarget 'NSExtension' do\\n  pod 'Firebase/Messaging', '6.6.0'\\nend\");\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Sound (Removed in 3.x.x)\nDESCRIPTION: Shows the now-removed way to enable notification sounds. This functionality has been replaced by Notification Categories (Channels) due to Android 8+ changes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/OneSignal/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_44\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.EnableSound(true);\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Manager Registries in XML\nDESCRIPTION: Example XML configuration for adding a Unity Package Manager registry for plugins in the 'com.coolstuff' scope. This should be placed in a file like 'MyPlugin/Editor/MyPluginRegistries.xml'.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<registries>\n  <registry name=\"Cool Stuff\"\n            url=\"https://unityregistry.coolstuff.com\"\n            termsOfService=\"https://coolstuff.com/unityregistry/terms\"\n            privacyPolicy=\"https://coolstuff.com/unityregistry/privacy\">\n    <scopes>\n      <scope>com.coolstuff</scope>\n    </scopes>\n  </registry>\n</registries>\n```\n\n----------------------------------------\n\nTITLE: Building the OneSignal Unity SDK Plugin from Source Using Gradle\nDESCRIPTION: Command examples for building the OneSignal Unity SDK plugin from source using Gradle on Linux/OSX and Windows platforms. These commands will compile the plugin from source code.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew build\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew.bat build\n```\n\n----------------------------------------\n\nTITLE: Specifying Maven Central Dependencies in XML for Unity Plugins\nDESCRIPTION: This XML snippet shows how to define an Android dependency located on Maven Central. It demonstrates a simpler syntax for specifying such dependencies without additional SDK package information.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_2\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n  <androidPackages>\n    <androidPackage spec=\"com.google.api-client:google-api-client-android:1.22.0\" />\n  </androidPackages>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Documenting Version History in Markdown\nDESCRIPTION: This snippet shows the format used to document version history, including version numbers, dates, new features, and bug fixes.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Version 1.2.52 - Sep 25, 2017\n## New Features\n* Changed Android Resolver's Gradle resolution to resolve conflicting\n  dependencies across Google Play services and Android Support library packages.\n\n# Version 1.2.51 - Sep 20, 2017\n## Changes\n* Changed iOS Resolver to execute the CocoaPods \"pod\" command via the shell\n  by default.  Some developers customize their shell environment to use\n  custom ssh certs to access internal git repositories that host pods so\n  executing \"pod\" via the shell will work for these scenarios.\n  The drawback of executing \"pod\" via the shell could potentially cause\n  users problems if they break their shell environment.  Though users who\n  customize their shell environments will be able to resolve these issues.\n```\n\n----------------------------------------\n\nTITLE: Android Troubleshooting: Launcher Merge Conflict Error\nDESCRIPTION: Another Gradle build error caused by duplicate Kotlin coroutines files. This requires the same solution as the previous merge conflict error.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v3_to_v5.md#2025-04-18_snippet_29\n\nLANGUAGE: gradle\nCODE:\n```\nFAILURE: Build failed with an exception.\n* What went wrong:\nExecution failed for task ':launcher:mergeReleaseJavaResource'.\n> A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\n   > More than one file was found with OS independent path 'META-INF/kotlinx_coroutines_core.version'.\n```\n\n----------------------------------------\n\nTITLE: Defining Android Dependencies in XML for Unity Plugins\nDESCRIPTION: This XML snippet demonstrates how to specify Android dependencies for a Unity plugin. It shows how to add the Google Play Games library as a dependency, including version specification and SDK package requirements.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n  <androidPackages>\n    <androidPackage spec=\"com.google.android.gms:play-services-games:9.8.0\">\n      <androidSdkPackageIds>\n        <androidSdkPackageId>extra-google-m2repository</androidSdkPackageId>\n      </androidSdkPackageIds>\n    </androidPackage>\n  </androidPackages>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Android Support Library XML Dependency\nDESCRIPTION: Example XML configuration showing how to specify an Android Support Library dependency using the Android Resolver XML format.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<androidPackage spec=\"com.android.support:support-v4:27.0.2\"/>\n```\n\n----------------------------------------\n\nTITLE: Releasing the OneSignal Unity SDK Plugin with Gradle Tasks\nDESCRIPTION: Commands for releasing a new version of the OneSignal Unity SDK using Gradle tasks. These commands create the release commit and tag the release in git after updating version numbers.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew release\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew gitCreateReleaseCommit\n```\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew gitTagRelease\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit push --tag REMOTE HEAD:master\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Pod Dependencies in XML\nDESCRIPTION: Example XML configuration for adding the AdMob pod with version 7.0 or greater, bitcode enabled, and specific SDK requirements. This should be placed in a file like 'MyPlugin/Editor/MyPluginDependencies.xml'.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <iosPods>\n    <iosPod name=\"Google-Mobile-Ads-SDK\" version=\"~> 7.0\" bitcodeEnabled=\"true\"\n            minTargetSdk=\"6.0\" addToAllTargets=\"false\" />\n  </iosPods>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Importing and Exporting EDM4U Package using Unity Command Line\nDESCRIPTION: Command line example showing how to import EDM4U package and export a plugin package with the -gvh_disable flag to maintain proper Version Handler functionality.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/Assets/ExternalDependencyManager/Editor/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUnity -gvh_disable \\\n      -batchmode \\\n      -importPackage external-dependency-manager-1.2.46.0.unitypackage \\\n      -projectPath MyPluginProject \\\n      -exportPackage Assets MyPlugin.unitypackage \\\n      -quit\n```\n\n----------------------------------------\n\nTITLE: Setting Unity Editor Version for OneSignal SDK\nDESCRIPTION: Configuration that specifies Unity Editor version 2022.3.10f1 with revision ff3792e53c62 for the project. This ensures consistent development environment across team members.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/OneSignalExample/ProjectSettings/ProjectVersion.txt#2025-04-18_snippet_0\n\nLANGUAGE: unity\nCODE:\n```\nm_EditorVersion: 2022.3.10f1\nm_EditorVersionWithRevision: 2022.3.10f1 (ff3792e53c62)\n```\n\n----------------------------------------\n\nTITLE: Configuring OneSignal URL Handling and In-App Settings\nDESCRIPTION: Configuration settings for URL handling in notifications and deprecated features from version 2.x.x to 3.x.x.\nSOURCE: https://github.com/OneSignal/OneSignal-Unity-SDK/blob/main/MIGRATION_GUIDE_v2_to_v3.md#2025-04-18_snippet_15\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.StartInit(\"your_app_id\")\n   .Settings(new Dictionary<string, bool> { { OneSignal.kOSSettingsInAppLaunchURL, true } })\n   .EndInit();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.Default.SetLaunchURLsInApp(true);\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.inFocusDisplayType = OneSignal.OSInFocusDisplayOption.InAppAlert;\n\n// or\n\nOneSignal.StartInit(\"your_app_id\")\n   .InFocusDisplaying(OneSignal.OSInFocusDisplayOption.Notification)\n   .EndInit();\n```\n\nLANGUAGE: c#\nCODE:\n```\nOneSignal.EnableVibrate(true);\n\nOneSignal.EnableSound(true);\n```"
  }
]