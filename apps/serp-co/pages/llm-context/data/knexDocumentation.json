[
  {
    "owner": "knex",
    "repo": "documentation",
    "content": "TITLE: Knex From Table (JS)\nDESCRIPTION: Illustrates how to specify the table to select from in a Knex.js query using the `from` method. Shows a basic example.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Key-Value Syntax\nDESCRIPTION: This snippet demonstrates the key-value syntax for the `where` clause in Knex.js, specifying the column and value to match.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('id', 1)\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE RAW Clause\nDESCRIPTION: This snippet demonstrates the `whereRaw` clause, which allows specifying a raw SQL expression within the WHERE clause. Bindings can be used to safely inject values into the query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereRaw('id = ?', [1])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Grouped Chain\nDESCRIPTION: This snippet demonstrates how to group `where` clauses using a function to define logical groupings, combined with `orWhere` for alternative conditions.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where(function() {\n  this.where('id', 1).orWhere('id', '>', 10)\n}).orWhere({name: 'Tester'})\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Async/Await and Transacting (TypeScript)\nDESCRIPTION: This example showcases using `knex.transaction` with `async/await` and the `transacting` method, providing an alternative way to manage transactions with asynchronous operations.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await knex.transaction(async trx => {\n\n    const books = [\n      {title: 'Canterbury Tales'},\n      {title: 'Moby Dick'},\n      {title: 'Hamlet'}\n    ];\n\n    const ids = await knex('catalogues')\n      .insert({\n        name: 'Old Books'\n      }, 'id')\n      .transacting(trx)\n\n    books.forEach(book => book.catalogue_id = ids[0])\n    await knex('books')\n      .insert(books)\n      .transacting(trx)\n\n    console.log(inserts.length + ' new books saved.')\n  })\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Latest Migrations with Knex.js\nDESCRIPTION: This snippet demonstrates how to run all pending migrations and then execute seed files using Knex.js. It shows the asynchronous nature of migration execution and how to chain promises to ensure proper execution order.  It uses the `knex.migrate.latest()` and `knex.seed.run()` functions, handling promises to execute migrations and seeds sequentially.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nknex.migrate.latest()\n  .then(function() {\n    return knex.seed.run();\n  })\n  .then(function() {\n    // migrations are finished\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Functions (Subqueries)\nDESCRIPTION: This snippet shows the use of functions within the `where` clause to create subqueries. It allows for complex conditional logic using nested `where` and `whereIn` clauses.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where((builder) =>\n    builder\n      .whereIn('id', [1, 11, 15])\n      .whereNotIn('id', [17, 19])\n  )\n  .andWhere(function() {\n    this.where('id', '>', 10)\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Query Builder (JavaScript)\nDESCRIPTION: This snippet demonstrates using `knex.transaction` with a callback function where the transaction object (`trx`) is used as a query builder. It inserts a catalogue and then books associated with that catalogue. The transaction commits if all operations succeed, and rolls back if any operation fails.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex.transaction(function(trx) {\n\n  const books = [\n    {title: 'Canterbury Tales'},\n    {title: 'Moby Dick'},\n    {title: 'Hamlet'}\n  ];\n\n  return trx\n    .insert({name: 'Old Books'}, 'id')\n    .into('catalogues')\n    .then(function(ids) {\n      books.forEach((book) => book.catalogue_id = ids[0]);\n      return trx('books').insert(books);\n    });\n})\n.then(function(inserts) {\n  console.log(inserts.length + ' new books saved.');\n})\n.catch(function(error) {\n  // If we get here, that means that \n  // neither the 'Old Books' catalogues insert,\n  // nor any of the books inserts will have taken place.\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: Insert Query with Knex.js\nDESCRIPTION: Shows how to create an insert query in Knex.js. It takes either a hash of properties to be inserted into the row, or an array of inserts, to be executed as a single insert command. It covers single inserts, multi-row inserts, and the use of the `returning` option.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns [1] in \"mysql\", \"sqlite\", \"oracle\"; \n// [] in \"postgresql\" \n// unless the 'returning' parameter is set.\nknex('books').insert({title: 'Slaughterhouse Five'})\n\n// Normalizes for empty keys on multi-row insert:\nknex('coords').insert([{x: 20}, {y: 30},  {x: 10, y: 20}])\n\n// Returns [2] in \"mysql\", \"sqlite\"; [2, 3] in \"postgresql\"\nknex\n  .insert(\n    [\n      { title: 'Great Gatsby' }, \n      { title: 'Fahrenheit 451' }\n    ],\n    ['id']\n  )\n  .into('books')\n```\n\n----------------------------------------\n\nTITLE: On Conflict Merge with Knex.js\nDESCRIPTION: Shows how to use the `onConflict` and `merge` methods to perform an UPSERT operation, updating the existing row with new data if a conflict occurs. This example merges all columns.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\"\n  })\n  .onConflict('email')\n  .merge()\n```\n\n----------------------------------------\n\nTITLE: Using Explicit Transaction Management with Async Code (TS)\nDESCRIPTION: This example illustrates how to use explicit transaction management in Knex with asynchronous code using TypeScript. It uses the `knex.transaction` method to start a transaction and defines an async function that can perform operations within the transaction. It demonstrates both rolling back within the async function and handling errors in the transaction to ensure proper rollback.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait knex.transaction(trx => {\n  async function stuff() {\n    trx.rollback(new Error('Foo'));\n  };\n  stuff()\n    .then(() => {\n      // do something\n    });\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await knex.transaction(trx => {\n    async function stuff() {\n      trx.rollback(new Error('always explicit rollback this time'));\n    }\n    stuff();\n  }); \n  // transaction was committed\n  } catch (err) {\n    // transaction was rolled back \n  }\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NULL Clause\nDESCRIPTION: This snippet demonstrates the `whereNull` clause, which selects records where the specified column's value is NULL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_117\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNull('updated_at')\n```\n\n----------------------------------------\n\nTITLE: On Conflict Merge with Separate Updates in Knex.js\nDESCRIPTION: Demonstrates updating data differently from the insert data during an UPSERT operation. The example updates the 'name' column to \"John Doe The Second\" if a conflict occurs on the 'email' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\",\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge({\n    name: \"John Doe The Second\",\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT IN Clause\nDESCRIPTION: Demonstrates the `whereNotIn` clause, which excludes records where the column's value is present in the provided array.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotIn('id', [1, 2, 3])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where('name', 'like', '%Test%')\n  .orWhereNotIn('id', [1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Provider (TypeScript)\nDESCRIPTION: This example demonstrates the use of `knex.transactionProvider()` to create a reusable transaction instance that only starts the transaction when it's first used. Subsequent calls to the provider return the same transaction instance.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Does not start a transaction yet\nconst trxProvider = knex.transactionProvider();\n\nconst books = [\n  {title: 'Canterbury Tales'},\n  {title: 'Moby Dick'},\n  {title: 'Hamlet'}\n];\n\n// Starts a transaction\nconst trx = await trxProvider();\nconst ids = await trx('catalogues')\n  .insert({name: 'Old Books'}, 'id')\nbooks.forEach((book) => book.catalogue_id = ids[0]);\nawait trx('books').insert(books);\n\n// Reuses same transaction\nconst sameTrx = await trxProvider();\nconst ids2 = await sameTrx('catalogues')\n  .insert({name: 'New Books'}, 'id')\nbooks.forEach((book) => book.catalogue_id = ids2[0]);\nawait sameTrx('books').insert(books);\n```\n\n----------------------------------------\n\nTITLE: Basic Join with Knex.js\nDESCRIPTION: Performs a basic join between two tables using Knex.js, selecting specific columns. The code joins 'users' and 'contacts' tables on 'users.id' and 'contacts.user_id' and selects 'users.id' and 'contacts.phone'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_132\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .join('contacts', 'users.id', '=', 'contacts.user_id')\n  .select('users.id', 'contacts.phone')\n\nknex('users')\n  .join('contacts', 'users.id', 'contacts.user_id')\n  .select('users.id', 'contacts.phone')\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: This JavaScript code demonstrates how to configure different environments (development and production) in the `knexfile.js`. Each environment can have its own database client and connection settings.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  development: {\n    client: 'pg',\n    connection: { user: 'me', database: 'my_app' }\n  },\n  production: { \n    client: 'pg', \n    connection: process.env.DATABASE_URL \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Insert/Update/Delete in Knex.js\nDESCRIPTION: This example demonstrates the 'returning' method, which is supported by PostgreSQL, MSSQL, SQLite, and Oracle. It shows how to specify which columns should be returned after an insert operation, and highlights how the return values work with single inserts vs array inserts.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// Returns [ { id: 1 } ]\nknex('books')\n  .returning('id')\n  .insert({title: 'Slaughterhouse Five'})\n\n// Returns [{ id: 2 } ] in \"mysql\", \"sqlite\"; \n// [ { id: 2 }, { id: 3 } ] in \"postgresql\"\nknex('books')\n  .returning('id')\n  .insert([\n    {title: 'Great Gatsby'},\n    {title: 'Fahrenheit 451'}\n  ])\n\n// Returns [ { id: 1, title: 'Slaughterhouse Five' } ]\nknex('books')\n  .returning(['id','title'])\n  .insert({title: 'Slaughterhouse Five'})\n```\n\n----------------------------------------\n\nTITLE: Raw Parameter Binding with Positional Placeholders - Knex.js\nDESCRIPTION: Demonstrates using `knex.raw` with positional bindings (`?` for values and `??` for identifiers) to prevent SQL injection when injecting dynamic values or identifiers.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select(knex.raw('count(*) as user_count, status'))\n  .where(knex.raw(1))\n  .orWhere(knex.raw('status <> ?', [1]))\n  .groupBy('status')\n```\n\n----------------------------------------\n\nTITLE: Modifying Queries with Knex.js\nDESCRIPTION: Demonstrates how to use the `.modify()` method in Knex.js to encapsulate and re-use query snippets and common behaviors as functions.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nconst withUserName = function(queryBuilder, foreignKey) {\n  queryBuilder.leftJoin(\n    'users', \n    foreignKey, \n    'users.id'\n  ).select('users.user_name');\n};\nknex.table('articles')\n  .select('title', 'body')\n  .modify(withUserName, 'articles_user.id')\n  .then(function(article) {\n    console.log(article.user_name);\n  });\n```\n\n----------------------------------------\n\nTITLE: Batch Inserting with Knex.js\nDESCRIPTION: The `knex.batchInsert` utility efficiently inserts a batch of rows into a table within a transaction. It automatically creates a transaction unless one is explicitly provided using `transacting`. The `chunkSize` parameter controls the number of rows inserted in each chunk. It also supports returning values.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/utility.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst rows = [{/*...*/}, {/*...*/}];\nconst chunkSize = 30;\nknex.batchInsert('TableName', rows, chunkSize)\n  .returning('id')\n  .then(function(ids) { /*...*/ })\n  .catch(function(error) { /*...*/ });\n\nknex.transaction(function(tr) {\n  return knex.batchInsert('TableName', rows, chunkSize)\n    .transacting(tr)\n  })\n  .then(function() { /*...*/ })\n  .catch(function(error) { /*...*/ });\n```\n\n----------------------------------------\n\nTITLE: Async Connection Configuration\nDESCRIPTION: This JavaScript code shows how to use an async function to get connection details in the knexfile. This allows fetching credentials from a secure location like a vault, providing more secure database access.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst getPassword = async () => {\n  // TODO: implement me\n  return 'my_pass'\n}\n\nmodule.exports = {\n  client: 'pg',\n  connection: async () => {\n    const password = await getPassword()\n    return { user: 'me', password }\n  },\n  migrations: {}\n};\n```\n\n----------------------------------------\n\nTITLE: Raw Join with Knex.js\nDESCRIPTION: Executes a raw SQL join statement in Knex.js, allowing for more complex or database-specific join syntax. The examples perform a natural full join with a raw SQL expression.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_144\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('accounts')\n  .joinRaw('natural full join table1').where('id', 1)\n\nknex.select('*')\n  .from('accounts')\n  .join(knex.raw('natural full join table1')).where('id', 1)\n```\n\n----------------------------------------\n\nTITLE: Knex Select Query (JS)\nDESCRIPTION: Illustrates how to create a basic Knex.js select query. Shows how to specify columns to select and the table to select from using the `select` and `from` methods.  Returns array of objects.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('title', 'author', 'year')\n  .from('books')\n\nknex.select()\n  .table('books')\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Async/Await (TypeScript)\nDESCRIPTION: This example demonstrates the use of `knex.transaction` with `async/await` syntax for cleaner asynchronous code. The transaction is automatically committed if the function completes successfully and rolled back if an error is thrown.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  await knex.transaction(async trx => {\n\n    const books = [\n      {title: 'Canterbury Tales'},\n      {title: 'Moby Dick'},\n      {title: 'Hamlet'}\n    ];\n    \n    const ids = await trx('catalogues')\n      .insert({\n        name: 'Old Books'\n      }, 'id')\n\n    books.forEach((book) => book.catalogue_id = ids[0])\n    const inserts = await trx('books').insert(books)\n    \n    console.log(inserts.length + ' new books saved.')\n  })\n} catch (error) {\n  // If we get here, that means that neither the 'Old Books' catalogues insert,\n  // nor any of the books inserts will have taken place.\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration File\nDESCRIPTION: This command creates a new migration file with the specified name. The `-x ts` flag specifies that a TypeScript migration file should be created.  The `--stub` option allows specifying a custom migration template file.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:make migration_name \n\n# or for .ts\n\n$ knex migrate:make migration_name -x ts\n```\n\n----------------------------------------\n\nTITLE: Knex Usage with JSDoc (JavaScript)\nDESCRIPTION: Shows how to use JSDoc comments in plain JavaScript to achieve type hinting and autocompletion with Knex.js. Defines a JSDoc typedef for a `User` object and uses it to specify the return type of a function returning a Knex query builder.  Helps with autocompletion of database fields.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @typedef {Object} User\n * @property {number} id\n * @property {number} age\n * @property {string} name\n *\n * @returns {Knex.QueryBuilder<User, {}>}\n */\nconst Users = () => knex('Users')\n\n// 'id' property can be autocompleted by editor\nUsers().where('id', 1)\n```\n\n----------------------------------------\n\nTITLE: Extending Knex Builders in JavaScript\nDESCRIPTION: This code snippet demonstrates how to extend Knex's SchemaBuilder, TableBuilder, ViewBuilder, and ColumnBuilder with custom functions. Each extension logs a message to the console and returns the builder instance for chaining.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/extending.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex.SchemaBuilder.extend(\"functionName\", function() {\n    console.log('Custom Schema Builder Function');\n    return this;\n});\nknex.TableBuilder.extend(\"functionName\", function() {\n    console.log('Custom Table Builder Function');\n    return this;\n});\nknex.ViewBuilder.extend(\"functionName\", function() {\n    console.log('Custom View Builder Function');\n    return this;\n});\nknex.ColumnBuilder.extend(\"functionName\", function() {\n    console.log('Custom Column Builder Function');\n    return this;\n});\n```\n\n----------------------------------------\n\nTITLE: Using postProcessResponse Hook in Knex.js\nDESCRIPTION: This snippet shows how to use the `postProcessResponse` hook to modify the returned rows before they are passed to the user.  This example provides a basic snake_case to camelCase conversion on the returned columns. It handles both single objects and arrays of objects.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  // overly simplified snake_case -> camelCase converter\n  postProcessResponse: (result, queryContext) => {\n    // TODO: add special case for raw results \n    // (depends on dialect)\n    if (Array.isArray(result)) {\n      return result.map(row => convertToCamel(row));\n    } else {\n      return convertToCamel(result);\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Upsert Query with Knex.js (CockroachDB)\nDESCRIPTION: Demonstrates how to create an upsert query in Knex.js for CockroachDB. This query inserts a new row if one does not exist, or updates the existing row if it does. It covers single upserts, multi-row upserts, and the use of the `returning` option.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// insert new row with unique index on title column\nknex('books').upsert({title: 'Great Gatsby'})\n\n// update row by unique title 'Great Gatsby' \n// and insert row with title 'Fahrenheit 451'\nknex('books').upsert([\n  {title: 'Great Gatsby'},\n  {title: 'Fahrenheit 451'}\n], ['id'])\n\n// Normalizes for empty keys on multi-row upsert, \n// result sql: \n// (\"x\", \"y\") values (20, default), (default, 30), (10, 20):\nknex('coords').upsert([{x: 20}, {y: 30}, {x: 10, y: 20}])\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MySQL\nDESCRIPTION: This snippet shows how to initialize Knex with a MySQL client, providing connection details such as host, port, user, password, and database name.  It demonstrates the basic configuration object structure for connecting to a MySQL database.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning Queries with Knex.js\nDESCRIPTION: Explains the use of the `.clone()` method in Knex.js to create a copy of the current query chain, allowing for re-use without mutating the original.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_85\n\n\n\n----------------------------------------\n\nTITLE: Using .then() with Knex.js Queries\nDESCRIPTION: This code shows how to use the .then() method with Knex.js to execute a query and then perform subsequent operations with the results. It selects a user by name, inserts a new account with the user's ID, and logs the inserted account ID.  An error handler is also included.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .where({name: 'Tim'})\n  .then(function(rows) {\n    return knex\n      .insert({user_id: rows[0].id, name: 'Test'}, 'id')\n      .into('accounts');\n  })\n  .then(function(id) {\n    console.log('Inserted Account ' + id);\n  })\n  .catch(function(error) { console.error(error); });\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Knex.js\nDESCRIPTION: This snippet demonstrates how to update records in a table using Knex.js. It shows updating multiple columns with a hash, and updating a single column with a key/value pair. The example also highlights how the return value differs across databases if the 'returning' parameter is not specified.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nknex('books')\n  .where('published_date', '<', 2000)\n  .update({\n    status: 'archived',\n    thisKeyIsSkipped: undefined\n  })\n\n// Returns [1] in \"mysql\", \"sqlite\", \"oracle\"; \n// [] in \"postgresql\" \n// unless the 'returning' parameter is set.\nknex('books').update('title', 'Slaughterhouse Five')\n\n/** Returns  \n * [{ \n *   id: 42, \n *   title: \"The Hitchhiker's Guide to the Galaxy\" \n * }] **/\nknex('books')\n  .where({ id: 42 })\n  .update({ \n    title: \"The Hitchhiker's Guide to the Galaxy\" \n  }, ['id', 'title'])\n```\n\n----------------------------------------\n\nTITLE: Running Latest Migrations\nDESCRIPTION: This command applies the latest migrations to the database, bringing the database schema up to date. The `--env` flag or the `NODE_ENV` environment variable can be used to specify the environment (e.g., production).\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:latest\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:latest --env production\n\n# or\n\n$ NODE_ENV=production knex migrate:latest\n```\n\n----------------------------------------\n\nTITLE: Basic Knexfile Configuration\nDESCRIPTION: This JavaScript code shows a basic `knexfile.js` configuration, specifying the database client (PostgreSQL) and connection details.  It uses environment variables or default values for the database URL, user, and database name.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  connection: process.env.DATABASE_URL || { \n    user: 'me', \n    database: 'my_app' \n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction with Transaction Object (JavaScript)\nDESCRIPTION: This snippet shows how to use `knex.transaction` with explicit `trx.commit` and `trx.rollback`. The `trx` object is passed to the `transacting` method of the Knex query builder. This allows for more fine-grained control over transaction management.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex.transaction(function(trx) {\n\n  const books = [\n    {title: 'Canterbury Tales'},\n    {title: 'Moby Dick'},\n    {title: 'Hamlet'}\n  ];\n\n  knex.insert({name: 'Old Books'}, 'id')\n    .into('catalogues')\n    .transacting(trx)\n    .then(function(ids) {\n      books.forEach((book) => book.catalogue_id = ids[0]);\n      return knex('books').insert(books).transacting(trx);\n    })\n    .then(trx.commit)\n    .catch(trx.rollback);\n})\n.then(function(inserts) {\n  console.log(inserts.length + ' new books saved.');\n})\n.catch(function(error) {\n  // If we get here, that means that \n  // neither the 'Old Books' catalogues insert,\n  // nor any of the books inserts will have taken place.\n  console.error(error);\n});\n```\n\n----------------------------------------\n\nTITLE: DB Access using SQLite and SQLCipher\nDESCRIPTION: This code demonstrates how to access an encrypted SQLite database using SQLCipher with Knex. It shows how to set the encryption key when opening the database by using the `afterCreate` option in the connection pool configuration. This function is called after a connection is established allowing for custom settings such as the SQLCipher PRAGMA.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst myDBConfig = {\n  client: \"sqlite3\",\n  connection: {\n    filename: \"myEncryptedSQLiteDbFile.db\"\n  },\n  pool: {\n    afterCreate: function(conn, done) {\n      conn.run(\"PRAGMA KEY = 'secret'\");\n      done();\n    }  \n  } \n};\nconst knex = require('knex')(myDBConfig);\n```\n\n----------------------------------------\n\nTITLE: Knex.js Migration File with ESM Export\nDESCRIPTION: This TypeScript snippet illustrates a Knex.js migration file using ES modules (ESM).  It defines and exports the `up` and `down` functions, which Knex.js uses to apply and revert database schema changes.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// file: migration.js\n/** \n * Same as the CommonJS version, the miration file should export \n * \"up\" and \"down\" named functions\n */\nexport function up(knex) {\n  // ... migration logic here\n}\nexport function down(knex) {\n// ... migration logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Knex.js Seed File with ESM Export\nDESCRIPTION: This TypeScript snippet illustrates a Knex.js seed file using ES modules (ESM).  It defines and exports the `seed` function, which Knex.js uses to populate the database with initial data.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// file: seed.js\n/** \n * Same as with the CommonJS modules\n * You will need to export a \"seed\" named function.\n * */\nexport function seed(knex) {\n  // ... seed logic here\n}\n```\n\n----------------------------------------\n\nTITLE: Knex Usage with TypeScript\nDESCRIPTION: Demonstrates how to use Knex.js with TypeScript, leveraging type parameters for improved autocompletion and type safety.  Shows how to define an interface for database rows and pass it to the `knex` function.  Illustrates using `.first()` to return a type.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface User {\n  id: number;\n  name: string;\n  age: number;\n}\n\nknex('users')\n  .where('id')\n  .first(); // Resolves to any\n\nknex<User>('users') // User is the type of row in database\n  .where('id', 1) // Your IDE will be able to help with the completion of id\n  .first(); // Resolves to User | undefined\n```\n\n----------------------------------------\n\nTITLE: Closing Knex Instance to Prevent Hanging\nDESCRIPTION: This code shows how to properly close a Knex instance after execution to prevent the Node process from hanging due to open connections. It wraps the migration process in a `try...catch...finally` block and uses `knex.destroy()` in the `finally` block to ensure the connection is closed regardless of whether the migration succeeds or fails.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nasync function migrate() {\n  try {\n    await knex.migrate.latest({/**config**/})\n  } catch (e) {\n    process.exit(1)\n  } finally {\n    try {\n      knex.destroy()\n    } catch (e) {\n      // ignore\n    }\n  }\n}\n\nmigrate()\n```\n\n----------------------------------------\n\nTITLE: Querying with Promises in Knex.js\nDESCRIPTION: This code demonstrates how to execute a Knex.js query using promises. It selects data from the 'users' and 'nicknames' tables, filters results based on IDs and nicknames, and logs the results. Error handling is implemented using a .catch block.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name')\n  .from('users')\n  .where('id', '>', 20)\n  .andWhere('id', '<', 200)\n  .limit(10)\n  .offset(x)\n  .then(function(rows) {\n    return _.pluck(rows, 'name');\n  })\n  .then(function(names) {\n    return knex.select('id')\n      .from('nicknames')\n      .whereIn('nickname', names);\n  })\n  .then(function(rows) {\n    console.log(rows);\n  })\n  .catch(function(error) {\n    console.error(error)\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex With Clause (JS)\nDESCRIPTION: Demonstrates the usage of the `.with()` method in Knex.js for adding a CTE (Common Table Expression) to the query. Shows examples with a raw SQL query, a query builder callback, and specifying columns for the CTE.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .with(\n    'with_alias', \n    knex.raw(\n      'select * from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n\nknex\n  .with(\n    'with_alias', \n    [\"title\"], \n    knex.raw(\n      'select \"title\" from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n\nknex\n  .with('with_alias', (qb) => {\n    qb.select('*')\n      .from('books')\n      .where('author', 'Test')\n  })\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive CTE with withRecursive - JavaScript\nDESCRIPTION: Defines a recursive common table expression (CTE) named 'ancestors' using the `withRecursive` method. This allows querying hierarchical data such as family trees. The CTE selects all people who are direct ancestors of the person with ID 1.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withRecursive('ancestors', (qb) => {\n    qb.select('*')\n      .from('people')\n      .where('people.id', 1)\n      .union((qb) => {\n        qb.select('*')\n          .from('people')\n          .join(\n            'ancestors', \n            'ancestors.parentId', \n            'people.id'\n          )\n      })\n  })\n  .select('*')\n  .from('ancestors')\n```\n\n----------------------------------------\n\nTITLE: On Conflict Ignore with Knex.js\nDESCRIPTION: Demonstrates how to use the `onConflict` and `ignore` methods to silently ignore insert conflicts in Knex.js for PostgreSQL, MySQL, and SQLite. This example uses `onConflict('email').ignore()` to handle conflicts on the 'email' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\"\n  })\n  .onConflict('email')\n  .ignore()\n```\n\n----------------------------------------\n\nTITLE: Updating Records with Returning Values in Knex.js\nDESCRIPTION: This example demonstrates updating records and retrieving specific columns of the updated rows using the 'returning' option. It shows how to specify which columns should be returned after the update operation.  The `includeTriggerModifications` option is shown for use with MSSQL to work around issues with triggers.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers.\n// Only affects MSSQL.\nknex('books')\n  .update(\n    {title: 'Alice in Wonderland'},\n    ['id', 'title'],\n    { includeTriggerModifications: true }\n  )\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL and SSL\nDESCRIPTION: This example illustrates configuring Knex with PostgreSQL, including SSL settings and individual connection parameters. It prioritizes `connectionString` and allows configuration via individual fields (`host`, `port`, etc.) if `connectionString` is unspecified.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({\n  client: 'pg',\n  connection: {\n    connectionString: config.DATABASE_URL,\n    host: config[\"DB_HOST\"],\n    port: config[\"DB_PORT\"],\n    user: config[\"DB_USER\"],\n    database: config[\"DB_NAME\"],\n    password: config[\"DB_PASSWORD\"],\n    ssl: config[\"DB_SSL\"] ? { rejectUnauthorized: false } : false,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Limit and Offset Clauses with skipBinding Option - JavaScript\nDESCRIPTION: Adds a limit and offset clause to the query, limiting the number of returned rows and skipping the specified number of rows, with the `skipBinding` option set to `true` for the limit. This avoids setting the limit value as a prepared value, which may be necessary for some databases.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\n// Limit value isn't a prepared value.\nknex.select('*')\n  .from('users')\n  .limit(10, {skipBinding: true})\n  .offset(30)\n  .toSQL()\n  .sql\n```\n\n----------------------------------------\n\nTITLE: Locking Rows for Update in Transactions with Knex.js\nDESCRIPTION: This example demonstrates how to use `forUpdate()` in a transaction to lock rows during a select statement in PostgreSQL and MySQL. This prevents other transactions from modifying the selected rows until the current transaction is complete. Not supported by Amazon Redshift.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .transacting(trx)\n  .forUpdate()\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Object Syntax\nDESCRIPTION: This snippet demonstrates the object syntax for the `where` clause in Knex.js, allowing for specifying multiple conditions as key-value pairs. All conditions are combined with `AND`.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where({\n  first_name: 'Test',\n  last_name:  'User'\n}).select('id')\n```\n\n----------------------------------------\n\nTITLE: Getting Column Info with Knex.js\nDESCRIPTION: Demonstrates how to use the `.columnInfo()` method in Knex.js to retrieve information about the columns in the current table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').columnInfo().then(function(info) { /*...*/ });\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Operator\nDESCRIPTION: This snippet demonstrates using an operator (e.g., 'like') within the `where` clause to perform comparisons other than equality.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where('columnName', 'like', '%rowlikeme%')\n```\n\n----------------------------------------\n\nTITLE: Knex.js Configuration with Default Export\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Knex.js using a default export. The default export takes precedence over named exports.  It defines the client, connection, migrations, and seeds configurations within the default export object.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * filename: knexfile.js\n * For the knexfile you can use a default export\n **/\nexport default {\n  client: 'sqlite3',\n  connection: {\n    filename: '../test.sqlite3',\n  },\n  migrations: {\n    directory: './migrations',\n  },\n  seeds: {\n    directory: './seeds',\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Incrementing Column Value with Knex.js\nDESCRIPTION: Demonstrates how to use the `.increment()` method in Knex.js to increment a column's value by a specified amount. Object syntax is also supported for the column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('userid', '=', 1)\n  .increment('balance', 10)\n\nknex('accounts')\n  .where('id', '=', 1)\n  .increment({\n    balance: 10,\n    times: 1,\n  })\n```\n\n----------------------------------------\n\nTITLE: Adding Rank with Knex.js\nDESCRIPTION: Demonstrates how to add a rank() call to your query using the `.rank()` method in Knex.js. String, Raw and Function syntax is supported.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank('alias_name', 'email', 'firstName')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank(\n    'alias_name', \n    ['email', 'address'], \n    ['firstName', 'lastName']\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rank('alias_name', knex.raw('order by ??', ['email']))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select('*').rank('alias_name', function() {\n  this.orderBy('email').partitionBy('firstName')\n})\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE LIKE Clause\nDESCRIPTION: This snippet demonstrates the `whereLike` clause, which adds a case-sensitive substring comparison for a specified column and value.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_126\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereLike('email', '%mail%')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereLike('email', '%mail%')\n  .andWhereLike('email', '%.com')\n  .orWhereLike('email', '%name%')\n```\n\n----------------------------------------\n\nTITLE: Augmenting Knex Tables Interface in TypeScript\nDESCRIPTION: This snippet demonstrates how to augment the `Tables` interface in the `'knex/types/tables'` module to provide type information for your database tables when using Knex with TypeScript. This allows for better type checking and auto-completion in TypeScript-aware editors.  It shows how to define types for rows, and specify separate types for insert and update operations.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Knex } from 'knex';\n\ndeclare module 'knex/types/tables' {\n  interface User {\n    id: number;\n    name: string;\n    created_at: string;\n    updated_at: string;\n  }\n  \n  interface Tables {\n    // This is same as specifying `knex<User>('users')`\n    users: User;\n    // For more advanced types, you can specify separate type\n    // for base model, \"insert\" type and \"update\" type.\n    // But first: notice that if you choose to use this, \n    // the basic typing showed above can be ignored.\n    // So, this is like specifying\n    //    knex\n    //    .insert<{ name: string }>({ name: 'name' })\n    //    .into<{ name: string, id: number }>('users')\n    users_composite: Knex.CompositeTableType<\n      // This interface will be used for return type and \n      // `where`, `having` etc where full type is required \n      User,\n      // Specifying \"insert\" type will also make sure\n      // data matches interface in full. Meaning\n      // if interface is `{ a: string, b: string }`,\n      // `insert({ a: '' })` will complain about missing fields.\n      // \n      // For example, this will require only \"name\" field when inserting\n      // and make created_at and updated_at optional.\n      // And \"id\" can't be provided at all.\n      // Defaults to \"base\" type.\n      Pick<User, 'name'> & Partial<Pick<User, 'created_at' | 'updated_at'>>,\n      // This interface is used for \"update()\" calls.\n      // As opposed to regular specifying interface only once,\n      // when specifying separate update interface, user will be\n      // required to match it  exactly. So it's recommended to\n      // provide partial interfaces for \"update\". Unless you want to always\n      // require some field (e.g., `Partial<User> & { updated_at: string }`\n      // will allow updating any field for User but require updated_at to be\n      // always provided as well.\n      // \n      // For example, this wil allow updating all fields except \"id\".\n      // \"id\" will still be usable for `where` clauses so\n      //      knex('users_composite')\n      //      .update({ name: 'name2' })\n      //      .where('id', 10)`\n      // will still work.\n      // Defaults to Partial \"insert\" type\n      Partial<Omit<User, 'id'>>\n    >;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knex Identifier Syntax Example (JS)\nDESCRIPTION: Illustrates how to use aliases for table names and columns in a Knex.js query. Uses both the `as` suffix and object notation for defining aliases. Requires the `knex` object to be initialized. Demonstrates raw where clause with identifiers.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nknex({ a: 'table', b: 'table' })\n  .select({\n    aTitle: 'a.title',\n    bTitle: 'b.title'\n  })\n  .whereRaw('?? = ??', ['a.column_1', 'b.column_2'])\n```\n\n----------------------------------------\n\nTITLE: Adding Dense Rank with Knex.js\nDESCRIPTION: Demonstrates how to add a dense_rank() call to your query using the `.denseRank()` method in Knex.js. String, Raw and Function syntax is supported.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank('alias_name', 'email', 'firstName')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank(\n    'alias_name', \n    ['email', 'address'], \n    ['firstName', 'lastName']\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select('*')\n  .denseRank(\n    'alias_name', \n    knex.raw('order by ??', ['email']\n  ))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .denseRank('alias_name', function() {\n    this.orderBy('email').partitionBy('firstName')\n  })\n```\n\n----------------------------------------\n\nTITLE: Handling 'query-error' Event in Knex.js\nDESCRIPTION: This code demonstrates how to handle the 'query-error' event in Knex.js. The 'query-error' event is triggered when an error occurs during query execution. The event handler logs the error and query information for debugging purposes.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select(['NonExistentColumn'])\n  .from('users')\n  .on('query-error', function(error, obj) {\n    app.log(error);\n  })\n  .then(function() { /* ... */ })\n  .catch(function(error) {\n    // Same error object as the query-error event provides.\n  });\n```\n\n----------------------------------------\n\nTITLE: Listening for 'query' Event in Knex.js\nDESCRIPTION: This code illustrates how to listen for the 'query' event in Knex.js. The 'query' event is fired just before a query is executed. The event handler logs data about the query, useful for debugging and monitoring.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .on('query', function(data) {\n    app.log(data);\n  })\n  .then(function() {\n    // ...\n  });\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Pool in Knex.js\nDESCRIPTION: This snippet demonstrates how to configure the connection pool for a Knex.js instance. It sets the minimum and maximum number of connections in the pool. The pool configuration is passed as an option within the initialize block. This example uses MySQL as the client.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  },\n  pool: { min: 0, max: 7 }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Errors with .catch() in Knex.js\nDESCRIPTION: This snippet demonstrates the usage of the .catch() method to handle errors in Knex.js queries. It attempts to insert a record into the 'accounts' table and then selects the record. Errors are logged to the console, ensuring that the application doesn't crash due to database errors.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nreturn knex.insert({id: 1, name: 'Test'}, 'id')\n  .into('accounts')\n  .catch(function(error) {\n    console.error(error);\n  })\n  .then(function() {\n    return knex.select('*')\n      .from('accounts')\n      .where('id', 1);\n  })\n  .then(function(rows) {\n    console.log(rows[0]);\n  })\n  .catch(function(error) {\n    console.error(error);\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE IN Clause with Array\nDESCRIPTION: This snippet demonstrates the `whereIn` clause using an array of values. It selects records where the specified column's value is present in the array.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name').from('users')\n  .whereIn('id', [1, 2, 3])\n  .orWhereIn('id', [4, 5, 6])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Subquery\nDESCRIPTION: This snippet demonstrates using a subquery within the `where` clause. The result of the subquery is used to filter the main query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nconst subquery = knex('users')\n  .where('votes', '>', 100)\n  .andWhere('status', 'active')\n  .orWhere('name', 'John')\n  .select('id');\n\nknex('accounts').where('id', 'in', subquery)\n```\n\n----------------------------------------\n\nTITLE: Except Query with Knex.js\nDESCRIPTION: Demonstrates how to create an except query in Knex.js.  This method returns the rows from the first select statement that are not present in the second select statement. The except method is unsupported on MySQL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except(function() {\n    this.select('*').from('users').whereNull('first_name')\n  })\n\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except([\n    knex.select('*').from('users').whereNull('first_name')\n  ])\n\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .except(\n    knex.raw(\n      'select * from users where first_name is null'\n    ),\n    knex.raw(\n      'select * from users where email is null'\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Knex.js OR WHERE Clause with Object\nDESCRIPTION: This snippet demonstrates the use of orWhere with an object which automatically wraps the statement and creates an `or (and - and - and)` clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where('id', 1)\n  .orWhere({votes: 100, user: 'knex'})\n```\n\n----------------------------------------\n\nTITLE: Calculating Sum with Knex.js\nDESCRIPTION: Demonstrates how to use the `.sum()` method in Knex.js to calculate the sum of values for a specified column or columns from a database table. Also shows the usage of sumDistinct function.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').sum('products')\n\nknex('users').sum('products as p')\n\nknex('users').sum({ p: 'products' })\n\nknex('users').sum('products', 'orders')\n\nknex('users').sum({ sum: ['products', 'orders'] })\n\nknex('users').sum(knex.raw('??', ['products']))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').sumDistinct('products')\n```\n\n----------------------------------------\n\nTITLE: Insert Query with Null as Default in Knex.js\nDESCRIPTION: Shows how to configure Knex.js to use NULL as the default value for undefined keys during insert operations. This is achieved by setting the `useNullAsDefault` configuration parameter.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  },\n  useNullAsDefault: true\n});\n\nknex('coords').insert([{x: 20}, {y: 30}, {x: 10, y: 20}])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT BETWEEN Clause\nDESCRIPTION: This snippet demonstrates the `whereNotBetween` clause, which selects records where the specified column's value falls outside a given range.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotBetween('votes', [1, 100])\n```\n\n----------------------------------------\n\nTITLE: Adding Comments to Queries with Knex.js\nDESCRIPTION: Demonstrates how to use the `.comment()` method to prepend comments to SQL queries.  Some characters are forbidden such as `/*`, `*/` and `?`.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where('id', '=', 1)\n  .comment('Get user by id')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE ILIKE Clause\nDESCRIPTION: This snippet demonstrates the `whereILike` clause, which adds a case-insensitive substring comparison for a specified column and value.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereILike('email', '%mail%')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereILike('email', '%MAIL%')\n  .andWhereILike('email', '%.COM')\n  .orWhereILike('email', '%NAME%')\n```\n\n----------------------------------------\n\nTITLE: Left Join with Knex.js\nDESCRIPTION: Illustrates how to perform a left join between tables in Knex.js. The examples demonstrate joining 'users' and 'accounts' tables where 'users.id' equals 'accounts.user_id', as well as a grouped left join based on account ID or owner ID.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .leftJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex.select('*')\n  .from('users')\n  .leftJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: On Conflict Merge with Column Subset in Knex.js\nDESCRIPTION: Shows how to specify a subset of columns to merge during an UPSERT operation.  This example updates 'email', 'name', and 'updated_at' columns if a conflict occurs on the 'email' column, while 'created_at' remains unchanged.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\",\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge(['email', 'name', 'updated_at'])\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Not In Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingNotIn` function to add a having not in clause to a Knex.js query.  This filters results where the 'id' column is not in the provided array of values.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_170\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .havingNotIn('id', [5, 3, 10, 17])\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Named Parameter Binding - Knex.js\nDESCRIPTION: Shows how to use `knex.raw` with named bindings (`:name` for values and `:name:` for identifiers) for dynamic insertion of values and identifiers into the raw SQL query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst raw = ':name: = :thisGuy or :name: = :otherGuy or :name: = :undefinedBinding'\n\nknex('users')\n  .where(\n    knex.raw(raw, {\n      name: 'users.name',\n      thisGuy: 'Bob',\n      otherGuy: 'Jay',\n      undefinedBinding: undefined\n  }))\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE IN Clause with Builder (Subquery)\nDESCRIPTION: This snippet demonstrates using a Knex query builder instance as a subquery for the `whereIn` clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nconst subquery = knex.select('id').from('accounts');\n\nknex.select('name').from('users')\n  .whereIn('account_id', subquery)\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Raw Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingRaw` function to add a having raw clause to a Knex.js query.  This allows for using raw SQL expressions in the having clause. Bindings can be provided to prevent SQL injection.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_177\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .groupBy('count')\n  .orderBy('name', 'desc')\n  .havingRaw('count > ?', [100])\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL and Search Path\nDESCRIPTION: This snippet demonstrates initializing Knex with a PostgreSQL client and setting the search path. It uses environment variables for the connection string and specifies the `searchPath` option to define the search path for each connection.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({\n  client: 'pg',\n  connection: process.env.PG_CONNECTION_STRING,\n  searchPath: ['knex', 'public'],\n});\n```\n\n----------------------------------------\n\nTITLE: Left Outer Join with Knex.js\nDESCRIPTION: Shows how to perform a left outer join between tables using Knex.js. The code joins 'users' and 'accounts' tables based on 'users.id' and 'accounts.user_id', along with a grouped left outer join.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .leftOuterJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex.select('*')\n  .from('users')\n  .leftOuterJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Raw Expression in Select Statement - Knex.js\nDESCRIPTION: Illustrates using `knex.raw` to include a raw SQL expression within a `select` statement.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').select(knex.raw('count(*) as user_count, status'))\n  .where(knex.raw(1))\n  .orWhere(knex.raw('status <> ?', [1]))\n  .groupBy('status')\n```\n\n----------------------------------------\n\nTITLE: Knex.js Configuration with Named Exports\nDESCRIPTION: This JavaScript snippet demonstrates how to configure Knex.js using named exports. The `client`, `connection`, `migrations`, and `seeds` are exported as named constants. A default export takes precedence over named exports, meaning if both are defined, only the default export will be used.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * filename: knexfile.js\n * Let knex find the configuration by providing named exports,\n * but if exported a default, it will take precedence, and it will be used instead\n **/\nconst config = {\n  client: 'sqlite3',\n  connection: {\n    filename: '../test.sqlite3',\n  },\n  migrations: {\n    directory: './migrations',\n  },\n  seeds: {\n    directory: './seeds',\n  },\n};\n/** this will be used, it has precedence over named export */\nexport default config;\n/** Named exports, will be used if you didn't provide a default export */\nexport const { client, connection, migrations, seeds } = config;\n```\n\n----------------------------------------\n\nTITLE: TypeScript definitions for Knex Builder Extensions\nDESCRIPTION: This code snippet shows how to add TypeScript support for the custom Knex builder extensions. It uses declaration merging to augment the Knex module with the new function signatures for each builder (SchemaBuilder, TableBuilder, ViewBuilder, ColumnBuilder).\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/extending.md#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"knex\";\ndeclare module \"knex\" {\n    namespace Knex {\n        interface SchemaBuilder {\n            functionName (): Knex.SchemaBuilder;\n        }\n        interface TableBuilder {\n            functionName (): Knex.TableBuilder;\n        }\n        interface ViewBuilder {\n            functionName (): Knex.ViewBuilder;\n        }\n        interface ColumnBuilder {\n            functionName (): Knex.ColumnBuilder;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Join with Object Syntax in Knex.js\nDESCRIPTION: Demonstrates using an object to represent the join syntax in Knex.js. It joins 'users' and 'accounts' tables where 'accounts.id' equals 'users.account_id'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .join('accounts', {'accounts.id': 'users.account_id'})\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT EXISTS Clause with Builder\nDESCRIPTION: This snippet demonstrates using a Knex query builder instance as a subquery for the `whereNotExists` clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereNotExists(\n    knex.select('*')\n      .from('accounts')\n      .whereRaw('users.account_id = accounts.id')\n  )\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE EXISTS Clause with Builder (Subquery)\nDESCRIPTION: This snippet demonstrates using a Knex query builder instance as a subquery for the `whereExists` clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereExists(\n    knex.select('*')\n      .from('accounts')\n      .whereRaw('users.account_id = accounts.id')\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Not Materialized CTE with withNotMaterialized, Columns, and Raw Query - JavaScript\nDESCRIPTION: Defines a not materialized common table expression (CTE) named 'with_alias' using the `withNotMaterialized` method with an optional column list and a raw SQL query.  This example selects the 'title' column from the 'books' table where the author is 'Test'. The column list may be used by some databases when creating the view-like CTE.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withNotMaterialized(\n    'with_alias', \n    [\"title\"], \n    knex.raw(\n      'select \"title\" from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Value with nested jsonExtract and jsonInsert - JavaScript\nDESCRIPTION: Inserts a JSON value at a specified JsonPath within the result of a nested `jsonExtract` call.  This example extracts the value at '$.otherAccount' from `json_col` then inserts the value 'newName' at path '$.name'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonInsert(\n    knex.jsonExtract('json_col', '$.otherAccount'), \n    '$.name', \n    { \"name\": \"newName\" }, \n    'newNameCol'\n  )\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging in Knex.js\nDESCRIPTION: This snippet shows how to configure custom logging functions in Knex.js. It demonstrates how to override the default console logging for warnings, errors, deprecations, and debug messages.  Different log functions can be configured for separate Knex instances.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  log: {\n    warn(message) {\n    },\n    error(message) {\n    },\n    deprecate(message) {\n    },\n    debug(message) {\n    },\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Converting UUID to Binary with Knex.js\nDESCRIPTION: The `knex.fn.uuidToBin(uuid)` function converts a string UUID (char(36)) to a binary UUID (binary(16)). It is useful when storing UUIDs in a binary format in the database, improving storage efficiency.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/utility.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex.schema.createTable('uuid_table', (t) => {\n  t.uuid('uuid_col_binary', { useBinaryUuid: true });\n});\nknex('uuid_table').insert({\n  uuid_col_binary:  knex.fn.uuidToBin('3f06af63-a93c-11e4-9797-00505690773f'),\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with 'using' Syntax in Knex.js\nDESCRIPTION: This snippet demonstrates how to delete records with joins in PostgreSQL using the 'using' syntax. It provides an alternative way to specify the join condition in a delete statement.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('activated', false)\n  .using('accounts')\n  .whereRaw('accounts.id = users.account_id')\n  .del()\n```\n\n----------------------------------------\n\nTITLE: Counting Records with Knex.js\nDESCRIPTION: This example demonstrates how to use the `count()` method in Knex.js to count records. It shows how to count a specific column, use aliases, and work with raw expressions.  It also covers TypeScript usage and type considerations.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').count('active')\n\nknex('users').count('active', {as: 'a'})\n\nknex('users').count('active as a')\n\nknex('users').count({ a: 'active' })\n\nknex('users').count({ a: 'active', v: 'valid' })\n\nknex('users').count('id', 'active')\n\nknex('users').count({ count: ['id', 'active'] })\n\nknex('users').count(knex.raw('??', ['active']))\n```\n\n----------------------------------------\n\nTITLE: Adding Limit and Offset Clauses - JavaScript\nDESCRIPTION: Adds a limit and offset clause to the query, limiting the number of returned rows and skipping the specified number of rows. This example limits the result to 10 rows, starting from the 31st row (offset 30) in the 'users' table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .limit(10)\n  .offset(30)\n```\n\n----------------------------------------\n\nTITLE: Handling 'start' Event in Knex.js\nDESCRIPTION: This code shows how to listen for the 'start' event in Knex.js. The start event is fired right before a query-builder is compiled. The event handler can be used to modify the builder's state prior to compilation.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .on('start', function(builder) {\n    builder\n    .where('IsPrivate', 0)\n  })\n  .then(function(Rows) {\n    //Only contains Rows where IsPrivate = 0\n  })\n  .catch(function(error) { });\n```\n\n----------------------------------------\n\nTITLE: Extending Knex.js Query Builder (TypeScript)\nDESCRIPTION: This snippet illustrates extending the Knex.js QueryBuilder interface using TypeScript declaration merging. It defines a `customSelect` method with type annotations, requiring the creation of a `knex.d.ts` file and modification of the `tsconfig.json` file.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_97\n\nLANGUAGE: typescript\nCODE:\n```\n// knex.d.ts\n\nimport { Knex as KnexOriginal } from 'knex';\n\ndeclare module 'knex' {\n  namespace Knex {\n    interface QueryInterface {\n      customSelect<TRecord, TResult>(value: number): KnexOriginal.QueryBuilder<TRecord, TResult>;\n    }\n  }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"typeRoots\": [\n      \"node_modules/@types\",\n      \"@types\"\n    ],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Query - JavaScript\nDESCRIPTION: Creates a union query by combining the results of multiple queries. This example combines the results of two queries, one selecting users with a null 'last_name' and another selecting users with a null 'first_name'.  The union eliminates duplicate rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union(function() {\n    this.select('*')\n      .from('users')\n      .whereNull('first_name')\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex and Using Client Specific Instances\nDESCRIPTION: This snippet demonstrates creating separate Knex instances for different database clients. This allows using client-specific features. Example is showing with `pg` client.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst pg = require('knex')({client: 'pg'});\n\nknex('table')\n  .insert({a: 'b'})\n  .returning('*')\n  .toString();\n// \"insert into \\\"table\\\" (\\\"a\\\") values ('b')\"\n\npg('table')\n  .insert({a: 'b'})\n  .returning('*')\n  .toString();\n// \"insert into \\\"table\\\" (\\\"a\\\") values ('b') returning *\"\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE JSON PATH Clause\nDESCRIPTION: This snippet demonstrates the `whereJsonPath` clause, which allows comparing a value extracted from a JSON column using a JSON path expression.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_129\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereJsonPath('json_col', '$.age', '>', 18)\n\nknex('users')\n  .whereJsonPath('json_col', '$.name', '=', 'username')\n```\n\n----------------------------------------\n\nTITLE: Seed Configuration\nDESCRIPTION: This JavaScript code shows a sample seed configuration within the `knexfile.js`.  It specifies the directory where seed files are located for the `development` environment. The `seeds.directory` property should be a relative path.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  // ...\n  development: {\n    client: {/* ... */},\n    connection: {/* ... */},\n    seeds: {\n        directory: './seeds/dev'\n    }\n  }\n  // ...\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Seed Source in Knex.js\nDESCRIPTION: Demonstrates how to create a custom seed source class in Knex.js. The `MySeedSource` class defines the `getSeeds` and `getSeed` methods, which control the retrieval of seed names and the execution of seed logic, respectively. An instance of this class is then passed to the `knex.seed.run` method to execute the seeds.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a custom seed source class\nclass MySeedSource {\n  // Must return a Promise containing a list of seeds. \n  // Seeds can be whatever you want, they will be passed as\n  // arguments to getSeed\n  getSeeds() {\n    // In this example we are just returning seed names\n    return Promise.resolve(['seed1'])\n  }\n\n  getSeed(seed) {\n    switch(seed) {\n      case 'seed1':\n        return (knex) => { /* ... */ }\n    }\n  }\n}\n\n// pass an instance of your seed source as knex config\nknex.seed.run({ seedSource: new MySeedSource() })\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Joins in Knex.js\nDESCRIPTION: This example shows how to delete records with joins in PostgreSQL using the classic 'join' syntax. This allows for deleting records based on conditions in related tables.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('activated', false)\n  .join('accounts', 'accounts.id', 'users.account_id')\n  .del()\n```\n\n----------------------------------------\n\nTITLE: Getting Maximum Value with Knex.js\nDESCRIPTION: Demonstrates how to use the `.max()` method in Knex.js to retrieve the maximum value for a specified column or columns from a database table. Different ways of specifying columns, including aliases and raw expressions are shown.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').max('age')\n\nknex('users').max('age', {as: 'a'})\n\nknex('users').max('age as a')\n\nknex('users').max({ a: 'age' })\n\nknex('users').max('age', 'logins')\n\nknex('users').max({ max: ['age', 'logins'] })\n\nknex('users').max({ max: 'age', exp: 'experience' })\n\nknex('users').max(knex.raw('??', ['age']))\n```\n\n----------------------------------------\n\nTITLE: Defining Recursive CTE with withRecursive and Columns - JavaScript\nDESCRIPTION: Defines a recursive common table expression (CTE) named 'family' using the `withRecursive` method, explicitly defining the columns returned. This is needed for certain databases like Oracle. The CTE selects names and parent names from the 'folks' table and recursively joins it with itself.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withRecursive('family', ['name', 'parentName'], (qb) => {\n    qb.select('name', 'parentName')\n      .from('folks')\n      .where({ name: 'grandchild' })\n      .unionAll((qb) =>\n        qb\n          .select('folks.name', 'folks.parentName')\n          .from('folks')\n          .join(\n            'family',\n            knex.ref('family.parentName'),\n            knex.ref('folks.name')\n          )\n      )\n  })\n  .select('name')\n  .from('family')\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Custom PostgreSQL Client\nDESCRIPTION: This example demonstrates configuring Knex with a custom PostgreSQL client (e.g., `knex-aurora-data-api-client`) and explicitly stating jsonb support. It configures the `client`, `connection`, and `jsonbSupport` options.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n    client: require('knex-aurora-data-api-client').postgres,\n    connection: { resourceArn, secretArn, database: `mydb` },\n    version: 'data-api',\n    jsonbSupport: true\n})\n```\n\n----------------------------------------\n\nTITLE: Converting Knex.js Query to String\nDESCRIPTION: This example demonstrates how to convert a Knex.js query to a SQL string using the `.toString()` method. This is useful for debugging purposes, allowing developers to see the exact SQL that will be executed.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst toStringQuery = knex.select('*')\n  .from('users')\n  .where('id', 1)\n  .toString();\n\n// Outputs: console.log(toStringQuery);\n// select * from \"users\" where \"id\" = 1\n```\n\n----------------------------------------\n\nTITLE: Inner Join with Knex.js\nDESCRIPTION: Demonstrates different ways to perform an inner join between tables using Knex.js. The examples show joining 'users' and 'accounts' tables where 'users.id' equals 'accounts.user_id'.  It also includes an example of a grouped inner join.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_137\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .from('users')\n  .innerJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex\n  .table('users')\n  .innerJoin(\n    'accounts', \n    'users.id', \n    '=', \n    'accounts.user_id'\n  )\n\nknex('users')\n  .innerJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Ordering with Raw SQL Expression in Knex.js\nDESCRIPTION: Demonstrates how to use the orderByRaw function in Knex.js to add a raw SQL expression to the order by clause. This allows for more complex or database-specific ordering logic.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_167\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('table')\n  .orderByRaw('col DESC NULLS LAST')\n```\n\n----------------------------------------\n\nTITLE: Using Knex with User Params\nDESCRIPTION: This example demonstrates how to use `withUserParams` on a Knex instance to get a copy with custom parameters. This is helpful for executing the same migrations with different parameters.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  // Params\n});\n\nconst knexWithParams = knex.withUserParams({ \n  customUserParam: 'table1'\n});\nconst customUserParam = knexWithParams\n  .userParams\n  .customUserParam;\n```\n\n----------------------------------------\n\nTITLE: On Conflict Merge with Batch Inserts in Knex.js\nDESCRIPTION: Demonstrates how to use `onConflict` and `merge` with batch inserts. The example merges all columns for the conflicting rows when inserting multiple records.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert([\n    { email: \"john@example.com\", name: \"John Doe\" },\n    { email: \"jane@example.com\", name: \"Jane Doe\" },\n    { email: \"alex@example.com\", name: \"Alex Doe\" },\n  ])\n  .onConflict('email')\n  .merge()\n```\n\n----------------------------------------\n\nTITLE: Creating a Knexfile\nDESCRIPTION: This command initializes a new `knexfile.js` in the current directory. The knexfile is used to configure database connections and migration settings. The `-x ts` flag specifies that a TypeScript knexfile should be created.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ knex init\n\n# or for .ts\n\n$ knex init -x ts\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Query with Array - JavaScript\nDESCRIPTION: Creates a union query using an array of query builders.  This example combines the results of two queries, one selecting users with a null 'last_name' and another selecting users with a null 'first_name'. The union eliminates duplicate rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union([\n    knex.select('*')\n      .from('users')\n      .whereNull('first_name')\n  ])\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Stub\nDESCRIPTION: This JavaScript code shows how to configure a custom migration stub file in the `knexfile.js`.  This allows developers to use a custom template for generating migration files.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    stub: 'migration.stub'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Locking Rows with No Key Update in Transactions with Knex.js\nDESCRIPTION: This example shows how to use `forNoKeyUpdate()` in a transaction to lock rows in PostgreSQL.  It's similar to forUpdate, but with a more specific locking mode.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .transacting(trx)\n  .forNoKeyUpdate()\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Getting Current Timestamp with Knex.js\nDESCRIPTION: The `knex.fn.now(precision)` function retrieves the current timestamp with an optional precision value. This can be used to set default values for datetime columns in a database table, specifying the desired level of precision for the timestamp.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/utility.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntable.datetime('some_time', { precision: 6 }).defaultTo(knex.fn.now(6))\n```\n\n----------------------------------------\n\nTITLE: Maintaining Changelog for Seeds (Knex >= 0.16.0-next1)\nDESCRIPTION: This snippet demonstrates how to use Knex.js changelog functionality for seed files to ensure environments are only seeded once, while keeping seed files separate from migration files. It configures multiple directories as a source for migrations, specifying separate directories for migrations and seeds, and setting the `sortDirsSeparately` option to true.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait knex.migrate.latest({\n    directory: [\n      'src/services/orders/database/migrations',\n      'src/services/orders/database/seeds'\n    ],\n    sortDirsSeparately: true,\n    tableName: 'orders_migrations',\n    schemaName: 'orders',  \n})\n```\n\n----------------------------------------\n\nTITLE: Right Join with Knex.js\nDESCRIPTION: Demonstrates performing a right join with Knex.js. The examples join 'users' and 'accounts' tables where 'users.id' equals 'accounts.user_id'. It also includes a grouped right join example.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_140\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .rightJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex.select('*')\n  .from('users')\n  .rightJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining Materialized CTE with withMaterialized and Raw Query - JavaScript\nDESCRIPTION: Defines a materialized common table expression (CTE) named 'with_alias' using the `withMaterialized` method with a raw SQL query. Materialized CTEs store the result of the CTE in a temporary table. This example selects all rows from the 'books' table where the author is 'Test'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withMaterialized(\n    'with_alias', \n    knex.raw(\n      'select * from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Updating Records with 'updateFrom' in Knex.js\nDESCRIPTION: This snippet shows how to use the 'updateFrom' method in PostgreSQL to define an update statement with explicit 'from' syntax, allowing references to another table in the 'where' conditions. This is specifically useful for complex update scenarios involving related tables.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .update({ enabled: false })\n  .updateFrom('clients')\n  .where('accounts.id', '=', 'clients.id')\n  .where('clients.active', '=', false)\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Value with jsonSet - JavaScript\nDESCRIPTION: Sets a value at a specified JsonPath within a JSON column using the `jsonSet` method. The first example sets the value at '$.name' to 'newName' in the 'json_col' column, aliasing the result as 'newNameCol'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonSet('json_col', '$.name', 'newName', 'newNameCol')\n```\n\n----------------------------------------\n\nTITLE: Grouped Join with Knex.js\nDESCRIPTION: Executes a grouped join using Knex.js, using a function to define the join conditions. The code joins 'users' and 'accounts' tables, linking them based on either 'accounts.id' matching 'users.account_id' or 'accounts.owner_id' matching 'users.id'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_133\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('accounts', function() {\n  this\n    .on('accounts.id', '=', 'users.account_id')\n    .orOn('accounts.owner_id', '=', 'users.id')\n})\n```\n\n----------------------------------------\n\nTITLE: Right Outer Join with Knex.js\nDESCRIPTION: Illustrates a right outer join in Knex.js. The snippets join 'users' and 'accounts' tables based on matching IDs. Additionally, a grouped right outer join example is provided for more complex conditions.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_141\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .rightOuterJoin(\n    'accounts', \n    'users.id', \n    'accounts.user_id'\n  )\n\nknex.select('*')\n  .from('users')\n  .rightOuterJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex Column Selection (JS)\nDESCRIPTION: Demonstrates the usage of the `.column()` method in Knex.js for specifying the columns to be selected. Includes examples with an array of columns, individual column arguments, and object notation for aliasing columns.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nknex.column('title', 'author', 'year')\n  .select()\n  .from('books')\n\nknex.column(['title', 'author', 'year'])\n  .select()\n  .from('books')\n\nknex.column('title', { by: 'author' }, 'year')\n  .select()\n  .from('books')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE BETWEEN Clause\nDESCRIPTION: This snippet demonstrates the `whereBetween` clause, which selects records where the specified column's value falls within a given range (inclusive).\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_123\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereBetween('votes', [1, 100])\n```\n\n----------------------------------------\n\nTITLE: Webpack Migration Source for Knex.js\nDESCRIPTION: This code demonstrates using webpack to bundle Knex.js migrations. It creates a `WebpackMigrationSource` class to handle migrations within the webpack context. It uses `require.context` to load migration files and exposes them to Knex.js.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path')\n\nclass WebpackMigrationSource {\n  constructor(migrationContext) {\n    this.migrationContext = migrationContext\n  }\n\n  getMigrations() {\n    return Promise.resolve(\n      this.migrationContext.keys().sort()\n    )\n  }\n\n  getMigrationName(migration) {\n    return path.parse(migration).base\n  }\n\n  getMigration(migration) {\n    return this.migrationContext(migration)\n  }\n}\n\n// pass an instance of your migration source as knex config\nknex.migrate.latest({\n  migrationSource: new WebpackMigrationSource(\n    require.context('./migrations', false, /.js$/)\n  )\n})\n\n// with webpack >=5, require.context will add \n// both the relative and absolute paths to the context\n// to avoid duplicate migration errors, you'll need \n// to filter out one or the other this example filters \n// out absolute paths, leaving only the relative \n// ones(./migrations/*.js):\nknex.migrate.latest({\n  migrationSource: new WebpackMigrationSource(\n    require.context('./migrations', false, /^.\\/.*\\.js$/)\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring fetchAsString for Oracledb in Knex.js\nDESCRIPTION: This snippet shows how to configure the `fetchAsString` option for the Oracledb client. It specifies an array of data types that should be returned as strings instead of their default representations.  Valid types are 'DATE', 'NUMBER' and 'CLOB'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'oracledb',\n  connection: {/*...*/},\n  fetchAsString: [ 'number', 'clob' ]\n});\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE IN Clause with Multiple Columns and Subquery\nDESCRIPTION: This snippet demonstrates using `whereIn` with multiple columns and a subquery that returns multiple columns for comparison.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name').from('users')\n  .whereIn(\n    ['account_id', 'email'], \n    knex.select('id', 'email')\n      .from('accounts')\n  )\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE EXISTS Clause with Callback\nDESCRIPTION: This snippet demonstrates the `whereExists` clause, which checks for the existence of records based on a subquery defined using a callback function.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereExists(function() {\n  this.select('*')\n    .from('accounts')\n    .whereRaw('users.account_id = accounts.id');\n})\n```\n\n----------------------------------------\n\nTITLE: onJsonPathEquals Clause with Knex.js\nDESCRIPTION: Adds an `onJsonPathEquals` clause to a join using Knex.js. This snippet joins the 'cities' and 'country' tables based on matching JSON paths within specified columns. It joins where the 'country_name' column in 'cities' matches the 'description' column in 'country'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\nknex('cities')\n  .select(\n    'cities.name as cityName', \n    'country.name as countryName'\n  )\n  .join('country', function () {\n    this.onJsonPathEquals(\n      // json column in cities\n      'country_name', \n      // json path to country name in 'country_name' column\n      '$.country.name', \n      // json column in country\n      'description', \n       // json field in 'description' column\n      '$.name'\n    );\n  })\n```\n\n----------------------------------------\n\nTITLE: Streaming as a Promise using Knex.js\nDESCRIPTION: This code demonstrates using the stream method with a callback to handle the stream and a promise to handle the completion or errors. It selects data from the 'users' table where the ID equals 1. The resulting stream is then piped to a writable stream. A `.then()` and `.catch()` handlers are also included for promise management.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Use as a promise:\nconst stream = knex.select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .stream(function(stream) {\n    stream.pipe(writableStream);\n  })\n  .then(function() { /* ... */ })\n  .catch(function(e) { console.error(e); });\n```\n\n----------------------------------------\n\nTITLE: Ordering by Multiple Columns with orderBy in Knex.js\nDESCRIPTION: Demonstrates how to use the orderBy function in Knex.js to sort query results by multiple columns, with optional direction and null placement for each column.  An array of column names or objects is passed to the orderBy method to define the sorting order.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_166\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').orderBy([\n  'email', { column: 'age', order: 'desc' }\n])\n\nknex('users').orderBy([\n  { column: 'email' }, \n  { column: 'age', order: 'desc' }\n])\n\nknex('users').orderBy([\n  { column: 'email' }, \n  { column: 'age', order: 'desc', nulls: 'last' }\n])\n```\n\n----------------------------------------\n\nTITLE: onIn Clause with Knex.js\nDESCRIPTION: Adds an `onIn` clause to a join in Knex.js. The code joins 'users' and 'contacts' tables, and then filters the results where 'contacts.id' is in the array [7, 15, 23, 41].\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_145\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .join('contacts', function() {\n    this\n      .on('users.id', '=', 'contacts.id')\n      .onIn('contacts.id', [7, 15, 23, 41])\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE IN Clause with Callback\nDESCRIPTION: This snippet demonstrates the `whereIn` clause using a callback function to define a subquery. It selects records where the specified column's value is present in the result of the subquery.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name').from('users')\n  .whereIn('account_id', function() {\n    this.select('id').from('accounts');\n  })\n```\n\n----------------------------------------\n\nTITLE: Calculating Average with Knex.js\nDESCRIPTION: Demonstrates how to use the `.avg()` method in Knex.js to calculate the average of values for a specified column or columns from a database table. Also shows usage of avgDistinct function.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').avg('age')\n\nknex('users').avg('age as a')\n\nknex('users').avg({ a: 'age' })\n\nknex('users').avg('age', 'logins')\n\nknex('users').avg({ avg: ['age', 'logins'] })\n\nknex('users').avg(knex.raw('??', ['age']))\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').avgDistinct('age')\n```\n\n----------------------------------------\n\nTITLE: Manually Closing Streams with HTTPIncomingMessage\nDESCRIPTION: This example demonstrates how to handle aborted HTTP requests when streaming data from a database using Knex.  It attaches a 'close' event listener to the `request` object (an `HTTPIncomingMessage` or a compatible object like Express's `req`) and calls `stream.end()` to signal Knex to release the database connection back to the pool. This prevents connections from being leaked when a client prematurely closes the connection.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nserver.on('request', function (request, response) {\n  const stream = knex.select('*').from('items').stream();\n  request.on('close', stream.end.bind(stream));\n});\n```\n\n----------------------------------------\n\nTITLE: onExists Clause with Knex.js\nDESCRIPTION: Adds an `onExists` clause to a join in Knex.js. The code joins 'users' and 'contacts' tables, and then filters results where there exists a record in the 'accounts' table satisfying the condition 'users.account_id = accounts.id'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_149\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onExists(function() {\n      this.select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id');\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Query Results with Knex.js\nDESCRIPTION: This code demonstrates how to stream query results using Knex.js. It selects all data from the 'users' table and pipes the stream to a writable stream.  This allows processing of large datasets without loading everything into memory at once.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Retrieve the stream:\nconst stream = knex.select('*')\n  .from('users')\n  .stream();\nstream.pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Knex Check Transaction Completion (TypeScript)\nDESCRIPTION: This demonstrates how to check if a transaction has been committed or rolled back using the `isCompleted` method.  The method returns `true` if the transaction has been completed and `false` otherwise.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await knex.transaction();\ntrx.isCompleted(); // false\nawait trx.commit();\ntrx.isCompleted(); // true\n\nconst trx2 = knex.transactionProvider();\nawait trx2.rollback();\ntrx2.isCompleted(); // true\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Dynamic Connection Configuration\nDESCRIPTION: This snippet illustrates configuring Knex with a dynamic connection configuration using a function. The function returns a connection object.  This allows for dynamic determination of connection parameters.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3',\n  connection: () => ({\n    filename: process.env.SQLITE_FILENAME\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Migrations in Knex.js\nDESCRIPTION: This snippet demonstrates how to configure the migrations settings directly during Knex.js initialization. It specifies the table name used for storing migration history.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  },\n  migrations: {\n    tableName: 'migrations'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Partitioning Queries with Knex.js\nDESCRIPTION: Demonstrates how to use the `.partitionBy()` method to partition rowNumber, denseRank, and rank after a specific column or columns, with optional direction sort.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function() {\n    this.partitionBy('firstName');\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function() {\n    this.partitionBy('firstName', 'desc');\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function() {\n    this.partitionBy([\n      { column: 'firstName', order: 'asc' }, \n      { column: 'lastName', order: 'desc' }\n    ]);\n  });\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Isolation Level (TypeScript)\nDESCRIPTION: This snippet showcases how to specify the isolation level for a transaction using the `isolationLevel` config parameter. Supported options are database-specific and may include 'read uncommitted', 'read committed', 'repeatable read', 'snapshot', and 'serializable'. Not supported by Oracle and SQLite.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Simple read skew example\nconst isolationLevel = 'read committed';\nconst trx = await knex.transaction({isolationLevel});\nconst result1 = await trx(tableName).select();\nawait knex(tableName).insert({ id: 1, value: 1 });\nconst result2 = await trx(tableName).select();\nawait trx.commit();\n// result1 may or may not deep equal result2 depending on isolation level\n```\n\n----------------------------------------\n\nTITLE: Streaming as an Iterator using Knex.js\nDESCRIPTION: This code shows how to consume a Knex.js stream as an asynchronous iterator using `for await...of`. This enables easy processing of each row in the stream within an asynchronous loop.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Use as an iterator\nconst stream = knex.select('*')\n  .from('users')\n  .stream();\n\nfor await (const row of stream) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Single JSON Value with Alias using jsonExtract - JavaScript\nDESCRIPTION: Extracts a single value from a JSON column and assigns an alias. The singleValue boolean specifies if the extracted value is a single value or an array/object value.  This example extracts the value at '$.name' from 'json_col', aliases it as 'accountName', and specifies that it's a single value.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonExtract('json_col', '$.name', 'accountName', true)\n```\n\n----------------------------------------\n\nTITLE: Full Outer Join with Knex.js\nDESCRIPTION: Shows how to perform a full outer join between tables using Knex.js.  The examples join 'users' and 'accounts' tables where 'users.id' equals 'accounts.user_id'.  A grouped full outer join is also demonstrated.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_142\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .fullOuterJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex.select('*')\n  .from('users')\n  .fullOuterJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE IN Clause with Multiple Columns and Values\nDESCRIPTION: This snippet demonstrates using `whereIn` with multiple columns and a nested array of values for comparison.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_114\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name').from('users')\n  .whereIn(\n    ['account_id', 'email'], \n    [\n      [3, 'test3@example.com'], \n      [4, 'test4@example.com']\n    ]\n  )\n```\n\n----------------------------------------\n\nTITLE: Calling an Oracle Stored Procedure\nDESCRIPTION: This example demonstrates how to call an Oracle stored procedure with bind-out variables using Knex. It defines the stored procedure's input and output variables, and uses `knex.raw` to execute the procedure with the specified parameters. It then retrieves and logs the results from the output variables.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst oracle = require('oracledb');\nconst bindVars = {\n  input_var1: 6,\n  input_var2: 7,\n  output_var: {\n    dir: oracle.BIND_OUT\n  },\n  output_message: {\n    dir: oracle.BIND_OUT\n  }\n};\n\nconst sp = 'BEGIN MULTIPLY_STORED_PROCEDURE(:input_var1, :input_var2, :output_var, :output_message); END;';\nconst results = await knex.raw(sp, bindVars);\nconsole.log(results[0]); // 42\nconsole.log(results[1]); // 6 * 7 is the answer to life\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MSSQL and Custom Type Mapping\nDESCRIPTION: This snippet demonstrates configuring Knex with MSSQL and defining a custom `mapBinding` function. The function maps Knex query parameters to `tedious` types, allowing custom type handling. This example binds all strings to varchar and allows passing tedious type at query time.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { TYPES } from 'tedious';\n\nconst knex = require('knex')({\n  client: 'mssql',\n  connection: {\n    options: {\n      mapBinding: value => {\n        // bind all strings to varchar instead of nvarchar\n        if (typeof value === 'string') {\n          return {\n            type: TYPES.VarChar,\n            value\n          };\n        }\n\n        // allow devs to pass tedious type at query time\n        if (value != null && value.type) {\n          return {\n            type: value.type,\n            value: value.value\n          };\n        }\n\n        // undefined is returned; falling back to default mapping function\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Materialized CTE with withMaterialized and Query Builder - JavaScript\nDESCRIPTION: Defines a materialized common table expression (CTE) named 'with_alias' using the `withMaterialized` method with a query builder. This example selects all rows from the 'books' table where the author is 'Test'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withMaterialized('with_alias', (qb) => {\n    qb.select('*')\n      .from('books')\n      .where('author', 'Test')\n  })\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Executing a Full Raw Query - Knex.js\nDESCRIPTION: Shows how to use `knex.raw` to build and execute a complete SQL query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nknex.raw('select * from users where id = ?', [1])\n  .then(function(resp) { /*...*/ });\n```\n\n----------------------------------------\n\nTITLE: Adding a Having In Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingIn` function to add a having in clause to a Knex.js query.  This filters results where the 'id' column is in the provided array of values.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .havingIn('id', [5, 3, 10, 17])\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Raw Query - Knex.js\nDESCRIPTION: Demonstrates wrapping a raw query using the `wrap` method.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst subcolumn = knex.raw(\n    'select avg(salary) from employee where dept_no = e.dept_no'\n  )\n  .wrap('(', ') avg_sal_dept');\n\nknex.select('e.lastname', 'e.salary', subcolumn)\n  .from('employee as e')\n  .whereRaw('dept_no = e.dept_no')\n```\n\n----------------------------------------\n\nTITLE: Decrementing Column Value with Knex.js\nDESCRIPTION: Demonstrates how to use the `.decrement()` method in Knex.js to decrement a column's value by a specified amount. Object syntax is also supported for the column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('userid', '=', 1)\n  .decrement('balance', 5)\n\nknex('accounts')\n  .where('id', '=', 1)\n  .decrement({\n    balance: 50,\n  })\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Exists Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingExists` function to add a having exists clause to a Knex.js query. This filters results based on the existence of rows returned by a subquery.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_173\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingExists(function() {\n  this.select('*')\n    .from('accounts')\n    .whereRaw('users.account_id = accounts.id');\n})\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Identifier and Value Binding - Knex.js\nDESCRIPTION: Illustrates using `knex.raw` with positional placeholders (`??` for identifier and `?` for value) for specifying the column and value in the where clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').where(knex.raw('?? = ?', ['user.name', 1]))\n```\n\n----------------------------------------\n\nTITLE: Converting Knex.js Query to SQL Object\nDESCRIPTION: This code shows how to convert a Knex.js query to a SQL object using the `.toSQL()` and `.toSQL().toNative()` methods. The `toSQL` method returns an object containing the SQL string, bindings, and other query information. The `toNative` method formats the SQL string and bindings for a specific database dialect.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .toSQL()\n// Outputs:\n// {\n//   bindings: [1],\n//   method: 'select',\n//   sql: 'select * from \"users\" where id = ?',\n//   options: undefined,\n//   toNative: function () {}\n// }\n\nknex.select('*')\n  .from('users')\n  .where(knex.raw('id = ?', [1]))\n  .toSQL()\n  .toNative()\n// Outputs for postgresql dialect:\n// {\n//   bindings: [1],\n//   sql: 'select * from \"users\" where id = $1',\n// }\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction Execution Promise (TypeScript)\nDESCRIPTION: This snippet illustrates how to access the promise that gets resolved or rejected after a transaction is committed or rolled back using the `executionPromise` property.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst trxProvider = knex.transactionProvider();\nconst trx = await trxProvider();\nconst trxPromise = trx.executionPromise;\n\nconst trx2 = await knex.transaction();\nconst trx2Promise = trx2.executionPromise;\n\nconst trxInitPromise = new Promise(async (resolve, reject) => {\n  knex.transaction((transaction) => {\n    resolve(transaction);\n  });\n});\nconst trx3 = await trxInitPromise;\nconst trx3Promise = trx3.executionPromise;\n```\n\n----------------------------------------\n\nTITLE: Knex Transaction without Handler Function (TypeScript)\nDESCRIPTION: This snippet shows how to create a transaction instance without a handler function, allowing for deferred execution of statements within the transaction. Requires explicit commit or rollback.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Using trx as a transaction object:\nconst trx = await knex.transaction();\n\nconst books = [\n  {title: 'Canterbury Tales'},\n  {title: 'Moby Dick'},\n  {title: 'Hamlet'}\n];\n\ntrx('catalogues')\n  .insert({name: 'Old Books'}, 'id')\n  .then(function(ids) {\n    books.forEach((book) => book.catalogue_id = ids[0]);\n    return trx('books').insert(books);\n  })\n  .then(trx.commit)\n  .catch(trx.rollback);\n```\n\n----------------------------------------\n\nTITLE: Removing JSON Value with jsonRemove - JavaScript\nDESCRIPTION: Removes a value at a specified JsonPath within a JSON column using the `jsonRemove` method. This example removes the value at '$.name' from the 'json_col' column, aliasing the result as 'colWithRemove'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonRemove('json_col', '$.name', 'colWithRemove')\n```\n\n----------------------------------------\n\nTITLE: Using Parentheses with AND Operator\nDESCRIPTION: This code shows how to create a query with nested `WHERE` conditions and parentheses with the `AND` operator.  This allows constructing a more complex boolean logic within the SQL query.  It uses the `.andWhere` method with a callback to define the nested `WHERE` and `OR` conditions within parentheses.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nqueryBuilder\n  .where('status', status.uuid)\n  .andWhere((qB) => qB\n    .where('firstName', 'ilike', `%${q}%`)\n    .orWhere('lastName', 'ilike', `%${q}%`)\n  )\n```\n\n----------------------------------------\n\nTITLE: Using Transactions with Knex.js\nDESCRIPTION: This snippet demonstrates how to use transactions with Knex.js. It shows how to create a transaction, execute queries within the transaction, and commit or rollback the transaction based on the outcome of the queries. The `transacting` method is chained to associate the query with the transaction.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nconst Promise = require('bluebird');\nknex.transaction(function(trx) {\n  knex('books').transacting(trx).insert({name: 'Old Books'})\n    .then(function(resp) {\n      const id = resp[0];\n      return someExternalMethod(id, trx);\n    })\n    .then(trx.commit)\n    .catch(trx.rollback);\n})\n.then(function(resp) {\n  console.log('Transaction complete.');\n})\n.catch(function(err) {\n  console.error(err);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Token-Based Authentication and Expiration Checker\nDESCRIPTION: This example shows how to configure Knex with dynamic connection configuration that refreshes based on token expiration. It uses `expirationChecker` function that calls `someCallToGetTheToken()` to check when the token should refresh.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'postgres',\n  connection: async () => {\n    const { \n      token, \n      tokenExpiration \n    } = await someCallToGetTheToken();\n\n    return {\n      host : 'your_host',\n      port : 5432,\n      user : 'your_database_user',\n      password : token,\n      database : 'myapp_test',\n      expirationChecker: () => {\n        return tokenExpiration <= Date.now();\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Object with jsonInsert - JavaScript\nDESCRIPTION: Inserts a JSON object at a specified JsonPath within a JSON column using the `jsonInsert` method. If a value already exists at the given path, the value is not replaced. This example inserts the JSON object `{\"name\": \"newName\"}` at '$.name' in the 'json_col' column, aliasing the result as 'newNameCol'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonInsert(\n    'json_col', \n    '$.name', \n    { \"name\": \"newName\" }, \n    'newNameCol'\n  )\n```\n\n----------------------------------------\n\nTITLE: Plucking Column Values with Knex.js\nDESCRIPTION: Demonstrates how to use the `.pluck()` method in Knex.js to retrieve the values of a specified column from each row in the result set.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nknex.table('users')\n  .pluck('id')\n  .then(function(ids) { console.log(ids); });\n```\n\n----------------------------------------\n\nTITLE: Extracting Multiple JSON Values using jsonExtract - JavaScript\nDESCRIPTION: Extracts multiple values from the same JSON column using the `jsonExtract` method with an array of arrays. Each inner array specifies the column, path, and alias for each extraction. This example extracts '$.name' as 'accountName' and '$.lastName' as 'accountLastName' from the 'json_col' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonExtract([ \n    ['json_col', '$.name', 'accountName'], \n    ['json_col', '$.lastName', 'accountLastName'] \n  ])\n```\n\n----------------------------------------\n\nTITLE: Running the Next Pending Migration\nDESCRIPTION: This command runs the next migration that has not yet been run.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:up\n```\n\n----------------------------------------\n\nTITLE: Installing Knex Globally\nDESCRIPTION: This command installs Knex.js globally, making the `knex` command-line interface (CLI) available system-wide. This allows you to execute Knex commands from any directory in your terminal.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install knex -g\n```\n\n----------------------------------------\n\nTITLE: Selecting First Record with Knex.js\nDESCRIPTION: Demonstrates how to use the `.first()` method in Knex.js to retrieve only the first record from the query result.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nknex.table('users')\n  .first('id', 'name')\n  .then(function(row) { console.log(row); });\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Knex.js\nDESCRIPTION: This example illustrates deleting records from a table based on specified conditions using the 'del' method. It demonstrates a simple delete operation and highlights that it returns the number of affected rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('activated', false)\n  .del()\n```\n\n----------------------------------------\n\nTITLE: Defining Not Materialized CTE with withNotMaterialized and Query Builder - JavaScript\nDESCRIPTION: Defines a not materialized common table expression (CTE) named 'with_alias' using the `withNotMaterialized` method with a query builder. This example selects all rows from the 'books' table where the author is 'Test'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withNotMaterialized('with_alias', (qb) => {\n    qb.select('*')\n      .from('books')\n      .where('author', 'Test')\n  })\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Migration Configuration: Disable Transactions\nDESCRIPTION: This Javascript code disables the transactions for a specific migration. By default, each migration is run inside a transaction. Set the `transaction` property to `false` within the `config` object to override this behavior.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexports.up = function(knex) {\n  return knex.schema\n    .createTable('users', function (table) {\n        table.increments('id');\n        table.string('first_name', 255).notNullable();\n        table.string('last_name', 255).notNullable();\n    })\n    .createTable('products', function (table) {\n        table.increments('id');\n        table.decimal('price').notNullable();\n        table.string('name', 1000).notNullable();\n    });\n};\n\nexports.down = function(knex) {\n  return knex.schema\n      .dropTable(\"products\")\n      .dropTable(\"users\");\n};\n\nexports.config = { transaction: false };\n```\n\n----------------------------------------\n\nTITLE: Truncating Table with Knex.js\nDESCRIPTION: Demonstrates how to use the `.truncate()` method in Knex.js to truncate the current table, removing all data.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts').truncate()\n```\n\n----------------------------------------\n\nTITLE: Distinct Clause with Knex.js\nDESCRIPTION: Demonstrates how to set a distinct clause on the Knex.js query. If no parameters are provided or an empty array is provided, the query will select distinct rows. Otherwise, it will select distinct combinations of the provided columns.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\n// select distinct 'first_name' from customers\nknex('customers')\n  .distinct('first_name', 'last_name')\n\n// select which eliminates duplicate rows\nknex('customers')\n  .distinct()\n```\n\n----------------------------------------\n\nTITLE: Setting JSON Object with jsonSet - JavaScript\nDESCRIPTION: Sets a JSON object at a specified JsonPath within a JSON column using the `jsonSet` method. This example sets the value at '$.name' to the JSON object `{\"name\": \"newName\"}` in the 'json_col' column, aliasing the result as 'newNameCol'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonSet(\n    'json_col', \n    '$.name', \n    { \"name\": \"newName\" }, \n    'newNameCol'\n  )\n```\n\n----------------------------------------\n\nTITLE: On Conflict Raw Ignore with Knex.js\nDESCRIPTION: Shows how to use the `onConflict` method with a raw SQL expression for more complex conflict resolution logic. This example uses `knex.raw('(email) where active')` to ignore conflicts only when the 'email' conflicts and 'active' is true (PostgreSQL/SQLite).\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\",\n    active: true\n  })\n    // ignore only on email conflict and active is true.\n  .onConflict(knex.raw('(email) where active'))\n  .ignore()\n```\n\n----------------------------------------\n\nTITLE: Deleting Records with Returning Values and Triggers in Knex.js\nDESCRIPTION: This snippet demonstrates deleting records and retrieving specific columns of the deleted rows using the 'returning' option in conjunction with the `includeTriggerModifications` option for MSSQL to handle triggers.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers. \n// Only affects MSSQL.\nknex('books')\n  .where('title', 'Alice in Wonderland')\n  .del(\n    ['id', 'title'],\n    { includeTriggerModifications: true }\n  )\n```\n\n----------------------------------------\n\nTITLE: Rolling Back All Migrations\nDESCRIPTION: This command rolls back all completed migrations, effectively resetting the database schema to its initial state. Use with caution, as this will undo all schema changes made by migrations.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:rollback --all\n```\n\n----------------------------------------\n\nTITLE: Generating UUID with Knex.js\nDESCRIPTION: The `knex.fn.uuid()` function generates a UUID. This is not supported by Redshift. It can be used to create default values for UUID columns in a database table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/utility.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ntable.uuid('uuid').defaultTo(knex.fn.uuid())\n```\n\n----------------------------------------\n\nTITLE: Ordering with orderBy in Knex.js\nDESCRIPTION: Demonstrates how to use the orderBy function in Knex.js to sort query results by a single column, with optional direction and null placement. The column parameter specifies the column to sort by. The direction parameter specifies the sort order ('asc' or 'desc'). The nulls parameter specifies where null values are placed ('first' or 'last').\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_165\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').orderBy('email')\n\nknex('users').orderBy('name', 'desc')\n\nknex('users').orderBy('name', 'desc', 'first')\n```\n\n----------------------------------------\n\nTITLE: Converting Binary to UUID with Knex.js\nDESCRIPTION: The `knex.fn.binToUuid(binaryUuid)` function converts a binary UUID (binary(16)) back to a string UUID (char(36)). This is useful when retrieving UUIDs stored in binary format from the database and displaying them as strings.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/utility.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst res = await knex('uuid_table').select('uuid_col_binary');\nknex.fn.binToUuid(res[0].uuid_col_binary)\n```\n\n----------------------------------------\n\nTITLE: Clear Clauses with Knex.js\nDESCRIPTION: Demonstrates how to clear specific clauses from a Knex.js query. It clears the 'select' and 'where' clauses from the query, effectively removing the selection of 'email' and 'name' columns and the 'id < 10' condition.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('email', 'name')\n  .from('users')\n  .where('id', '<', 10)\n  .clear('select')\n  .clear('where')\n```\n\n----------------------------------------\n\nTITLE: Configuring Knex with PostgreSQL-compatible Database\nDESCRIPTION: This snippet shows how to configure Knex to work with a database that is compatible with the PostgreSQL wire protocol, such as CockroachDB. It specifies the PostgreSQL version that the target database is protocol-wise compatible with using the `version` option. Ensure to replace the connection details with your actual database credentials.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  version: '7.2',\n  connection: {\n    host: '127.0.0.1',\n    user: 'your_database_user',\n    password: 'your_database_password',\n    database: 'myapp_test'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Better-SQLite3 and Native Binding\nDESCRIPTION: This snippet shows initializing Knex with Better-SQLite3 and specifying the location of the native binding. It sets the `nativeBinding` option to point to the adapter's compiled C++ addon.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'better-sqlite3',\n  connection: {\n    filename: \":memory:\",\n    options: {\n      nativeBinding: \"/path/to/better_sqlite3.node\",\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Run Development Server (Yarn)\nDESCRIPTION: This command starts the development server for the Knex.js documentation website using Yarn. It allows developers to preview and test changes locally before deploying to production. It requires Yarn to be installed.\nSOURCE: https://github.com/knex/documentation/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev # or npm run dev\n```\n\n----------------------------------------\n\nTITLE: Knex From Raw SQL (JS)\nDESCRIPTION: Demonstrates how to use raw SQL in the `from` clause of a Knex.js query using the `fromRaw` method. Allows for using complex SQL statements directly within the query builder.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .fromRaw('(select * from \"users\" where \"age\" > ?)', '18')\n```\n\n----------------------------------------\n\nTITLE: Locking Rows for Share in Transactions with Knex.js\nDESCRIPTION: This snippet shows how to use `forShare()` in a transaction to lock rows in share mode during a select statement in PostgreSQL and MySQL.  Other transactions can read the locked rows, but not modify them until the current transaction completes. Not supported by Amazon Redshift.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .transacting(trx)\n  .forShare()\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Escaping Positional Placeholders in Raw Queries - Knex.js\nDESCRIPTION: Shows how to prevent the replacement of positional placeholders (`?`) in raw queries using the escape sequence `\\?`.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .where('id', '=', 1)\n  .whereRaw('?? \\\\? ?', ['jsonColumn', 'jsonKey'])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT Clause with Grouped Chain\nDESCRIPTION: This snippet demonstrates how to group `whereNot` clauses to create complex exclusion criteria, combined with `orWhereNot` for alternative conditions.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot(function() {\n  this.where('id', 1).orWhereNot('id', '>', 10)\n}).orWhereNot({name: 'Tester'})\n```\n\n----------------------------------------\n\nTITLE: Locking Rows with Key Share in Transactions with Knex.js\nDESCRIPTION: This example shows how to use `forKeyShare()` in a transaction to lock rows in PostgreSQL.  It's a more restrictive locking mode compared to forShare.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .transacting(trx)\n  .forKeyShare()\n  .select('*')\n```\n\n----------------------------------------\n\nTITLE: Running Seed Files\nDESCRIPTION: This command runs all seed files located in the configured seed directory. Seed files are executed in alphabetical order. The `--specific` flag allows execution of only the specified seed files.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:run\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:run --specific=seed-filename.js --specific=another-seed-filename.js\n```\n\n----------------------------------------\n\nTITLE: Knex Read Only Transaction (TypeScript)\nDESCRIPTION: This example demonstrates setting the transaction mode to `read only` using the `readOnly` config parameter.  Attempting to perform write operations within a read-only transaction will result in an error. It is currently only supported on mysql, postgres, and redshift.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/transactions.md#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst trx = await knex.transaction({ readOnly: true });\n// 💥 Cannot `INSERT` while inside a `READ ONLY` transaction\nconst result = await trx(tableName).insert({ id: 1, foo: 'bar' });\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with In-Memory SQLite3\nDESCRIPTION: This snippet shows how to configure Knex to use an in-memory SQLite3 or Better-SQLite3 database. It's configured with the filename set to `:memory:`, which tells SQLite to create the database in RAM.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3', // or 'better-sqlite3'\n  connection: {\n    filename: \":memory:\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Nested Join with Knex.js\nDESCRIPTION: Illustrates a nested join statement in Knex.js using a function within the 'on' clause. It joins 'users' and 'accounts' tables, linking them based on either 'accounts.id' matching 'users.account_id' or 'accounts.owner_id' matching 'users.id' using nested 'on' clauses.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_134\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('accounts', function() {\n  this.on(function() {\n    this.on('accounts.id', '=', 'users.account_id')\n    this.orOn('accounts.owner_id', '=', 'users.id')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3 and Flags\nDESCRIPTION: This example shows how to set SQLite3 connection flags. It sets the filename to use a memory database with URI and shared cache enabled by using `OPEN_URI` and `OPEN_SHAREDCACHE` flags.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3',\n  connection: {\n    filename: \"file:memDb1?mode=memory&cache=shared\",\n    flags: ['OPEN_URI', 'OPEN_SHAREDCACHE']\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Knex Alias Subquery (TS)\nDESCRIPTION: Example showing how to alias a subquery using `as()` with knex.ts.  Shows an aggregate function on a subquery.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nknex.avg('sum_column1')\n  .from(function() {\n    this.sum('column1 as sum_column1')\n      .from('t1')\n      .groupBy('column1')\n      .as('t1')\n  })\n  .as('ignored_alias')\n```\n\n----------------------------------------\n\nTITLE: onNotIn Clause with Knex.js\nDESCRIPTION: Adds an `onNotIn` clause to a join in Knex.js. The code joins 'users' and 'contacts' tables, and then filters the results where 'contacts.id' is NOT in the array [7, 15, 23, 41].\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_146\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .join('contacts', function() {\n    this\n      .on('users.id', '=', 'contacts.id')\n      .onNotIn('contacts.id', [7, 15, 23, 41])\n  })\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Migration Down\nDESCRIPTION: This command undoes the last migration that was run. You must provide the migration filename to undo the migration.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:down 001_migration_name.js\n```\n\n----------------------------------------\n\nTITLE: Augmenting Knex Tables with Module Resolution\nDESCRIPTION: This snippet shows how to augment the `Tables` interface in the `'knex/types/tables.js'` module when TypeScript is configured to use a modern module resolution setting (`node16`, `nodenext`, etc.). In such configurations, the compiler expects the declared module name to end with a `.js` file type.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\n// The trailing `.js` is required by the TypeScript compiler in certain configs:\ndeclare module 'knex/types/tables.js' { // <----- Different module path!!!\n  interface Tables {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using .asCallback() with Knex.js\nDESCRIPTION: This code illustrates how to execute a Knex.js query using the .asCallback() method, which provides a standard Node.js style callback interface. It selects data from the 'users' and 'nicknames' tables and handles potential errors using the callback's error parameter.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('name').from('users')\n  .where('id', '>', 20)\n  .andWhere('id', '<', 200)\n  .limit(10)\n  .offset(x)\n  .asCallback(function(err, rows) {\n    if (err) return console.error(err);\n    knex.select('id')\n      .from('nicknames')\n      .whereIn('nickname', _.pluck(rows, 'name'))\n      .asCallback(function(err, rows) {\n        if (err) return console.error(err);\n        console.log(rows);\n      });\n  });\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Not Between Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingNotBetween` function to add a having not between clause to a Knex.js query. This filters results where the 'id' column is not within the specified range.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_176\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .havingNotBetween('id', [5, 10])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT Clause with Operator\nDESCRIPTION: This snippet demonstrates the `whereNot` clause with an operator to exclude records based on a comparison other than equality.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot('votes', '>', 100)\n```\n\n----------------------------------------\n\nTITLE: Generated Migration Extension\nDESCRIPTION: This JavaScript code shows how to control the extension of generated migration files in the `knexfile.js`. This allows specifying the file extension, such as 'ts' for TypeScript migration files.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    extension: 'ts'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Skipping Locked Rows with Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `skipLocked()` method to skip locked rows in MySQL 8.0+, MariaDB-10.6+ and PostgreSQL 9.5+. This is useful when you want to avoid waiting for locks and proceed with available rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .select('*')\n  .forUpdate()\n  .skipLocked()\n```\n\n----------------------------------------\n\nTITLE: onNull Clause with Knex.js\nDESCRIPTION: Adds an `onNull` clause to a join in Knex.js.  The query selects from 'users', joins with 'contacts', and filters results where 'contacts.email' is NULL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_147\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onNull('contacts.email')\n})\n```\n\n----------------------------------------\n\nTITLE: Using afterCreate Callback in Knex.js Pool\nDESCRIPTION: This snippet shows how to use the `afterCreate` callback to execute custom logic after a new connection is acquired from the database server.  The callback receives the raw driver connection and a `done` function. The `done` function must be called to indicate whether the connection is valid or should be discarded.  This example configures a PostgreSQL client to set the timezone to UTC and set a limit.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  connection: {/*...*/},\n  pool: {\n    afterCreate: function (conn, done) {\n      // in this example we use pg driver's connection API\n      conn.query('SET timezone=\"UTC\";', function (err) {\n        if (err) {\n          // first query failed, \n          // return error and don't try to make next query\n          done(err, conn);\n        } else {\n          // do the second query...\n          conn.query(\n            'SELECT set_limit(0.01);', \n            function (err) {\n              // if err is not falsy, \n              //  connection is discarded from pool\n              // if connection aquire was triggered by a \n              // query the error is passed to query promise\n              done(err, conn);\n            });\n        }\n      });\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Rolling Back Last Batch of Migrations\nDESCRIPTION: This command rolls back the last batch of migrations, reverting the database schema to its previous state. This is useful for undoing changes made by the latest migrations.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:rollback\n```\n\n----------------------------------------\n\nTITLE: Using knex.ref for Column/Table References (JavaScript)\nDESCRIPTION: Demonstrates the use of `knex.ref` to create references to columns and tables within a Knex.js query builder. This includes specifying schema and aliasing the result. It requires Knex.js to be initialized.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/ref.md#_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex(knex.ref('Users').withSchema('TenantId'))\n  .where(knex.ref('Id'), 1)\n  .orWhere(knex.ref('Name'), 'Admin')\n  .select(['Id', knex.ref('Name').as('Username')])\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE JSON SUPERSETOF Clause\nDESCRIPTION: This snippet demonstrates the `whereJsonSupersetOf` clause, which checks if a JSON column contains all elements of a specified JSON object.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_130\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereJsonSupersetOf('hobbies', { \"sport\" : \"foot\" })\n```\n\n----------------------------------------\n\nTITLE: Piping Query Results with Knex.js\nDESCRIPTION: This code demonstrates piping query results directly to a writable stream using the `.pipe()` method of a Knex.js query. It selects all data from the 'users' table and pipes the stream to a writable stream for processing.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst stream = knex.select('*')\n  .from('users')\n  .pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Setting Options with Knex.js\nDESCRIPTION: Demonstrates how to use the `.options()` method in Knex.js to mix in additional options as defined by database client specific libraries.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts as a1')\n  .leftJoin('accounts as a2', function() {\n    this.on('a1.email', '<>', 'a2.email');\n  })\n  .select(['a1.email', 'a2.email'])\n  .where(knex.raw('a1.id = 1'))\n  .options({ nestTables: true, rowMode: 'array' })\n  .limit(2)\n  .then({ /*...*/ })\n```\n\n----------------------------------------\n\nTITLE: Distinct On Clause with Knex.js\nDESCRIPTION: Demonstrates the use of the distinctOn clause in Knex.js (PostgreSQL only). This snippet selects distinct 'age' values from the 'users' table. Only available in PostgreSQL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').distinctOn('age')\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Mixing jsonInsert and jsonRemove Example - JavaScript\nDESCRIPTION: This example demonstrates a mixing of `jsonRemove` and `jsonInsert`. While valid syntax, it highlights that developers should take care to ensure proper function calls.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonInsert(\n    'json_col', \n    '$.name', \n    { \"name\": \"newName\" }, \n    'newNameCol'\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Connection with Knex.js\nDESCRIPTION: Demonstrates how to use the `.connection()` method in Knex.js to set the database connection to use for the query without using the connection pool.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nconst Pool = require('pg-pool');\nconst pool = new Pool({ /* ... */ });\nconst connection = await pool.connect();\n\ntry {\n  return await knex.connection(connection); // knex here is a query builder with query already built\n} catch (error) {\n  // Process error\n} finally {\n  connection.release();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring compileSqlOnError in Knex.js\nDESCRIPTION: This snippet demonstrates how to configure whether Knex.js includes the compiled SQL or parameterized SQL in error messages. Setting `compileSqlOnError` to `false` includes the parameterized SQL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  compileSqlOnError: false\n});\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE Clause with Undefined Value\nDESCRIPTION: This snippet shows what happens when an undefined value is supplied to a where clause.  Knex throws an error.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('login', undefined)\n  .select()\n  .toSQL()\n```\n\n----------------------------------------\n\nTITLE: Custom Knex.js Migration Source\nDESCRIPTION: This example demonstrates how to create a custom migration source for Knex.js. This allows developers to define custom logic for retrieving migrations, such as from a non-filesystem source.  It showcases the creation of a `MyMigrationSource` class, implementing the `getMigrations`, `getMigrationName`, and `getMigration` methods.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// Create a custom migration source class\nclass MyMigrationSource {\n  // Must return a Promise containing a list of migrations. \n  // Migrations can be whatever you want, \n  // they will be passed as arguments to getMigrationName \n  // and getMigration\n  getMigrations() {\n    // In this example we are just returning migration names\n    return Promise.resolve(['migration1'])\n  }\n\n  getMigrationName(migration) {\n    return migration;\n  }\n\n  getMigration(migration) {\n    switch(migration) {\n      case 'migration1':\n        return {\n          up(knex)   { /* ... */ },\n          down(knex) { /* ... */ },\n        }\n    }\n  }\n}\n\n// pass an instance of your migration source as knex config\nknex.migrate.latest({ \n  migrationSource: new MyMigrationSource() \n})\n```\n\n----------------------------------------\n\nTITLE: Undoing the Last Migration\nDESCRIPTION: This command undoes the last migration that was run.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:down\n```\n\n----------------------------------------\n\nTITLE: Configuring acquireConnectionTimeout in Knex.js\nDESCRIPTION: This snippet demonstrates how to configure the `acquireConnectionTimeout` option, which determines how long Knex.js should wait before throwing a timeout error when acquiring a connection. It helps prevent indefinite waiting when the connection pool is exhausted. The value is in milliseconds.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  connection: {/*...*/},\n  pool: {/*...*/},\n  acquireConnectionTimeout: 10000\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Hint Comments with Knex.js\nDESCRIPTION: Demonstrates how to use the `.hintComment()` method to add hints to the query using comment-like syntax, useful for optimizer hints in MySQL and Oracle.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .where('userid', '=', 1)\n  .hintComment('NO_ICP(accounts)')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT NULL Clause\nDESCRIPTION: This snippet demonstrates the `whereNotNull` clause, which selects records where the specified column's value is NOT NULL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotNull('created_at')\n```\n\n----------------------------------------\n\nTITLE: Running Knex.js with Node v10 and ESM\nDESCRIPTION: This bash command shows how to run Knex.js with Node.js v10 when using ECMAScript modules (ESM). It includes the `--experimental-modules` flag required for older Node.js versions.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n# launching knex on Node v10 to use mjs/cjs modules\nnode --experimental-modules ./node_modules/.bin/knex $@\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MySQL and Database Version\nDESCRIPTION: This snippet shows how to initialize Knex with a MySQL client and specify the database version.  It sets the `version` to '5.7'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  version: '5.7',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Knex Test Timeout (Bash)\nDESCRIPTION: This snippet shows how to set the `KNEX_TEST_TIMEOUT` environment variable, which allows extending the default test timeout in milliseconds. This is useful when tests fail due to slow database connections or when running in CI environments. The `npm test` command is used to run the tests after setting the timeout.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/index.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ export KNEX_TEST_TIMEOUT=30000\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Using wrapIdentifier Hook in Knex.js\nDESCRIPTION: This snippet demonstrates how to use the `wrapIdentifier` hook to transform identifier names. This allows for custom quoting and naming conventions. It shows how to perform a basic camelCase to snake_case conversion.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  // overly simplified camelCase -> snake_case converter\n  wrapIdentifier: (\n    value, \n    origImpl, \n    queryContext\n  ) => origImpl(convertToSnakeCase(value))\n});\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT Clause with Subquery\nDESCRIPTION: Demonstrates using a subquery with `whereNot` to exclude records based on a complex condition defined in the subquery.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nconst subquery = knex('users')\n  .whereNot('votes', '>', 100)\n  .andWhere('status', 'active')\n  .orWhere('name', 'John')\n  .select('id');\n\nknex('accounts').where('id', 'not in', subquery)\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with User Parameters\nDESCRIPTION: This snippet shows how to initialize Knex with custom user parameters. The userParams are accessible via `knex.userParams` property.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    host : '127.0.0.1',\n    port : 3306,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  },\n  userParams: {\n    userParam1: '451'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Name\nDESCRIPTION: This JavaScript code shows how to configure a custom migration name function in the `knexfile.js`. This enables overriding the default migration filename generation with a custom logic.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  client: 'pg',\n  migrations: {\n    getNewMigrationName: (name) => {\n      return `${+new Date()}-${name}.js`;\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Context in Knex.js\nDESCRIPTION: This snippet demonstrates how to configure a context to be passed to the wrapIdentifier and postProcessResponse hooks in Knex.js. The context can be accessed and modified by these hooks, allowing for dynamic query manipulation.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts as a1')\n  .queryContext({ foo: 'bar' })\n  .select(['a1.email', 'a2.email'])\n```\n\n----------------------------------------\n\nTITLE: Streaming with Options using Knex.js\nDESCRIPTION: This example shows how to configure a Knex.js stream with specific options. The highWaterMark option is set to 5, which controls the buffer size of the stream. The stream is then piped to a writable stream.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// With options:\nconst stream = knex.select('*')\n  .from('users')\n  .stream({highWaterMark: 5});\nstream.pipe(writableStream);\n```\n\n----------------------------------------\n\nTITLE: Clear Counters with Knex.js\nDESCRIPTION: Demonstrates how to clear increments/decrements clauses from a Knex.js query using the `clearCounters()` method. It removes the decrement operation on the 'balance' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_160\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n    .where('id', '=', 1)\n    .update({ email: 'foo@bar.com' })\n    .decrement({\n      balance: 50,\n    })\n    .clearCounters()\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE JSON OBJECT Clause\nDESCRIPTION: This snippet demonstrates the `whereJsonObject` clause, which compares a JSON column to a provided JSON object.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .whereJsonObject('json_col', { \"name\" : \"user_name\"})\n```\n\n----------------------------------------\n\nTITLE: Escaping Named Bindings in Raw Queries - Knex.js\nDESCRIPTION: Demonstrates escaping named bindings using the escape sequence `\\:` to prevent their replacement within raw queries.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereRaw(\":property: = '\\\\:value' OR \\\\:property: = :value\", {\n    property: 'name',\n    value: 'Bob'\n  })\n```\n\n----------------------------------------\n\nTITLE: Extending Knex.js Query Builder (JavaScript)\nDESCRIPTION: This snippet shows how to extend the Knex.js Query Builder with a custom function. The example demonstrates adding a 'customSelect' function that allows selecting a value with an alias.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nconst { knex } = require('knex');\nknex.QueryBuilder.extend('customSelect', function(value) {\n  return this.select(this.client.raw(`${value} as value`));\n});\n\nconst meaningOfLife = await knex('accounts')\n  .customSelect(42);\n```\n\n----------------------------------------\n\nTITLE: Getting Minimum Value with Knex.js\nDESCRIPTION: Demonstrates how to use the `.min()` method in Knex.js to retrieve the minimum value for a specified column or columns from a database table. It shows different ways to specify the column, including using an alias.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').min('age')\n\nknex('users').min('age', {as: 'a'})\n\nknex('users').min('age as a')\n\nknex('users').min({ a: 'age' })\n\nknex('users').min({ a: 'age', b: 'experience' })\n\nknex('users').min('age', 'logins')\n\nknex('users').min({ min: ['age', 'logins'] })\n\nknex('users').min(knex.raw('??', ['age']))\n```\n\n----------------------------------------\n\nTITLE: Creating a Union All Query with Raw Statements - JavaScript\nDESCRIPTION: Creates a union all query using raw SQL statements. This example combines the results of two raw SQL queries selecting users where 'first_name' is null and where 'email' is null.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll(\n    knex.raw(\n      'select * from users where first_name is null'\n    ),\n    knex.raw(\n      'select * from users where email is null'\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Defining Materialized CTE with withMaterialized, Columns, and Raw Query - JavaScript\nDESCRIPTION: Defines a materialized common table expression (CTE) named 'with_alias' using the `withMaterialized` method with an optional column list and a raw SQL query.  This example selects the 'title' column from the 'books' table where the author is 'Test'. The column list is used by some databases when creating the temporary table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withMaterialized(\n    'with_alias', \n    [\"title\"], \n    knex.raw(\n      'select \"title\" from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Clear Select with Knex.js\nDESCRIPTION: Demonstrates how to clear the select clause from a Knex.js query using the deprecated `clearSelect()` method. It removes the 'email' and 'name' column selections from the query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_155\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('email', 'name').from('users').clearSelect()\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Null Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingNull` function to add a having null clause to a Knex.js query.  This filters results where the 'email' column is null.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_171\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNull('email')\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with PostgreSQL and Database Version\nDESCRIPTION: This snippet shows how to initialize Knex with a PostgreSQL client and specify the database version. It sets the `version` option to '7.2' to connect to a specific database version.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'pg',\n  version: '7.2',\n  connection: {\n    host : '127.0.0.1',\n    port : 5432,\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Clear Order with Knex.js\nDESCRIPTION: Demonstrates how to clear the order by clause from a Knex.js query using the deprecated `clearOrder()` method. It removes the ordering by 'name' in descending order from the query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_158\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select()\n  .from('users')\n  .orderBy('name', 'desc')\n  .clearOrder()\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Array Binding - Knex.js\nDESCRIPTION: Illustrates how to use array bindings in raw queries by manually constructing the placeholder string.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst myArray = [1,2,3]\nknex.raw('select * from users where id in (' + myArray.map(_ => '?').join(',') + ')', [...myArray]);\n```\n\nLANGUAGE: sql\nCODE:\n```\nselect * from users where id in (?, ?, ?) /* with bindings [1,2,3] */\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Query with groupBy and orderBy - JavaScript\nDESCRIPTION: Creates a union query and demonstrates the importance of applying clauses to the base statement for proper grouping and ordering. The corrected example shows using `knex.union` as a base statement to ensure `groupBy` and `orderBy` are applied correctly to individual queries within the union.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nknex.union([\n  knex('users').select('id', 'name').groupBy('id'),\n  knex('invitations').select('id', 'name').orderBy('expires_at')\n])\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Not Exists Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingNotExists` function to add a having not exists clause to a Knex.js query. This filters results based on the non-existence of rows returned by a subquery.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_174\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNotExists(function() {\n  this.select('*')\n    .from('accounts')\n    .whereRaw('users.account_id = accounts.id');\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Not Null Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingNotNull` function to add a having not null clause to a Knex.js query.  This filters results where the 'email' column is not null.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_172\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').havingNotNull('email')\n```\n\n----------------------------------------\n\nTITLE: Listing Migrations\nDESCRIPTION: This command lists both completed and pending migrations, providing an overview of the migration status in the database.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:list\n```\n\n----------------------------------------\n\nTITLE: Nesting JSON Functions - JavaScript\nDESCRIPTION: Demonstrates nesting JSON functions, such as `jsonRemove` and `jsonSet`, directly from the knex object within a `jsonExtract` call. This example removes the '$.min' and '$.max' properties from the 'population' column, sets '$.current' to '1234', and extracts each result with different aliases.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nknex('cities')\n  .jsonExtract([\n    [\n      knex.jsonRemove('population', '$.min'), \n      '$', \n      'withoutMin'\n    ],\n    [\n      knex.jsonRemove('population', '$.max'), \n      '$', \n      'withoutMax'\n    ],\n    [\n      knex.jsonSet('population', '$.current', '1234'),\n      '$',\n      'currentModified',\n    ]\n  ])\n```\n\n----------------------------------------\n\nTITLE: Intersect Query with Knex.js\nDESCRIPTION: Demonstrates how to create an intersect query in Knex.js. This method combines the results of two or more select statements. The intersect method is unsupported on MySQL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect(function() {\n    this.select('*').from('users').whereNull('first_name')\n  })\n\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect([\n    knex.select('*').from('users').whereNull('first_name')\n  ])\n\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .intersect(\n    knex.raw(\n      'select * from users where first_name is null'\n    ),\n    knex.raw(\n      'select * from users where email is null'\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Knex Test Configuration (Bash)\nDESCRIPTION: This snippet demonstrates how to set the `KNEX_TEST` environment variable, which specifies the path to the database configuration file for the Knex test suite.  The `npm test` command then runs the tests.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ export KNEX_TEST='/path/to/your/knex_config.js'\n$ npm test\n```\n\n----------------------------------------\n\nTITLE: Defining Not Materialized CTE with withNotMaterialized and Raw Query - JavaScript\nDESCRIPTION: Defines a not materialized common table expression (CTE) named 'with_alias' using the `withNotMaterialized` method with a raw SQL query. Not materialized CTEs are like views and do not store their results. This example selects all rows from the 'books' table where the author is 'Test'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nknex\n  .withNotMaterialized(\n    'with_alias', \n    knex.raw(\n      'select * from \"books\" where \"author\" = ?', \n      'Test'\n    )\n  )\n  .select('*')\n  .from('with_alias')\n```\n\n----------------------------------------\n\nTITLE: Subquery with .as() - Knex.js\nDESCRIPTION: Demonstrates creating a subquery using the `.as()` method.  Achieves the same result as the previous example with `wrap()` but using Knex.js builder methods.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst subcolumn = knex.avg('salary')\n  .from('employee')\n  .whereRaw('dept_no = e.dept_no')\n  .as('avg_sal_dept');\n\nknex.select('e.lastname', 'e.salary', subcolumn)\n  .from('employee as e')\n  .whereRaw('dept_no = e.dept_no')\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT Clause with Key-Value Syntax\nDESCRIPTION: This snippet demonstrates using the `whereNot` clause with a key-value pair to exclude records where the condition matches.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot('id', 1)\n```\n\n----------------------------------------\n\nTITLE: Knex Timeout Example (JS)\nDESCRIPTION: Demonstrates how to set a timeout for a Knex.js query.  Includes an example with and without the `cancel` option, which is only supported in MySQL and PostgreSQL.  Throws a TimeoutError if exceeded.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select()\n  .from('books')\n  .timeout(1000)\n\nknex.select()\n  .from('books')\n  .timeout(1000, { \n    cancel: true // MySQL and PostgreSQL only\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with SQLite3\nDESCRIPTION: This snippet shows how to configure Knex for SQLite3 or Better-SQLite3 using a filename for the database.  It highlights that a filename is required for SQLite3, not a network connection, and can be used to specify an in-memory database.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'sqlite3', // or 'better-sqlite3'\n  connection: {\n    filename: \"./mydb.sqlite\"\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Clause in Knex.js\nDESCRIPTION: Demonstrates how to add a basic `having` clause to a Knex.js query to filter aggregated results.  It is applied after the `groupBy` and `orderBy` clauses, filtering results based on the aggregated 'count' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_168\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .groupBy('count')\n  .orderBy('name', 'desc')\n  .having('count', '>', 100)\n```\n\n----------------------------------------\n\nTITLE: Installing Knex and Database Drivers with npm\nDESCRIPTION: This snippet demonstrates how to install Knex.js and various database drivers using npm. It installs the knex library and then installs one of the specified database drivers (pg, pg-native, sqlite3, better-sqlite3, mysql, mysql2, oracledb, tedious) as dependencies. The `--save` flag is used to add the packages to the project's package.json file.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install knex --save\n\n# Then add one of the following (adding a --save) flag:\n$ npm install pg\n$ npm install pg-native\n$ npm install sqlite3\n$ npm install better-sqlite3\n$ npm install mysql\n$ npm install mysql2\n$ npm install oracledb\n$ npm install tedious\n```\n\n----------------------------------------\n\nTITLE: Creating a Union Query with Raw Statements - JavaScript\nDESCRIPTION: Creates a union query using raw SQL statements. This example combines the results of three raw SQL queries selecting users where 'first_name' is null and where 'email' is null. The union eliminates duplicate rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .union(\n    knex.raw(\n      'select * from users where first_name is null'\n    ),\n    knex.raw(\n      'select * from users where email is null'\n    )\n  )\n```\n\n----------------------------------------\n\nTITLE: Clear Where with Knex.js\nDESCRIPTION: Demonstrates how to clear the where clause from a Knex.js query using the deprecated `clearWhere()` method. It removes the 'id = 1' condition from the query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_156\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('email', 'name')\n  .from('users')\n  .where('id', 1)\n  .clearWhere()\n```\n\n----------------------------------------\n\nTITLE: Creating a Union All Query - JavaScript\nDESCRIPTION: Creates a union all query by combining the results of multiple queries, including duplicate rows. This example combines the results of two queries, one selecting users with a null 'last_name' and another selecting users with a null 'first_name'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll(function() {\n    this.select('*').from('users').whereNull('first_name');\n  })\n```\n\n----------------------------------------\n\nTITLE: Knex.js Configuration with Mixed JS and MJS\nDESCRIPTION: This TypeScript snippet demonstrates a Knex.js configuration file using the `.mjs` extension with migrations using `.js` extensions.  It specifies the `loadExtensions` property to load `.js` files for migrations when using ESM.  This configuration allows to combine different file types for seeds/migrations and knexfile.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n/** \n * knexfile.mjs\n */\nexport default {\n  migrations: {\n    // ... client, connection,etc ....\n    directory: './migrations',\n    loadExtensions: ['.js'] // knex will search for 'mjs' file by default\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT EXISTS Clause with Callback\nDESCRIPTION: This snippet demonstrates the `whereNotExists` clause, which checks for the non-existence of records based on a subquery defined using a callback function.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNotExists(function() {\n  this.select('*')\n    .from('accounts')\n    .whereRaw('users.account_id = accounts.id');\n})\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE JSON SUBSETOF Clause\nDESCRIPTION: This snippet demonstrates the `whereJsonSubsetOf` clause, which checks if a JSON column is contained within a specified JSON object.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_131\n\nLANGUAGE: javascript\nCODE:\n```\n// given a hobby column with { \"sport\" : \"tennis\" }, \n// the where clause is true\nknex('users')\n  .whereJsonSubsetOf(\n    'hobby', \n    { \"sport\" : \"tennis\", \"book\" : \"fantasy\" }\n  )\n```\n\n----------------------------------------\n\nTITLE: Install Dependencies and Run Development Server (Yarn)\nDESCRIPTION: This command first installs the necessary dependencies for the Knex.js documentation website using Yarn and then starts the development server. It ensures all required packages are available before running the website locally. It requires Yarn to be installed.\nSOURCE: https://github.com/knex/documentation/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install # or npm i\nyarn dev # or npm run dev\n```\n\n----------------------------------------\n\nTITLE: Counting Distinct Records with Knex.js\nDESCRIPTION: This example shows how to use the `countDistinct()` method in Knex.js to count distinct values in a column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nknex('users').countDistinct('active')\n```\n\n----------------------------------------\n\nTITLE: Connecting to MSSQL on Azure SQL Database\nDESCRIPTION: This code demonstrates how to connect to an MSSQL database hosted on Azure SQL Database using Knex. It's crucial to include `{encrypt: true}` within the options branch of the connection configuration to ensure a secure connection. Replace placeholders for database, server, user, and password with your actual credentials.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nknex({\n  client : 'mssql',\n  connection: {\n    database: 'mydatabase',\n    server: 'myserver.database.windows.net',\n    user: 'myuser',\n    password: 'mypass',\n    port: 1433,\n    connectionTimeout: 30000,\n    options: {\n      encrypt: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Returning Values with Triggers in MSSQL using Knex.js\nDESCRIPTION: This example shows how to use the 'returning' method in MSSQL with the `includeTriggerModifications` option to handle triggers that might interfere with the returned values. This ensures that the correct values are returned even when triggers are present.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications allows you\n// to run statements on tables that contain triggers. \n// Only affects MSSQL.\nknex('books')\n  .returning(\n    ['id','title'],\n    { includeTriggerModifications: true }\n  )\n  .insert({title: 'Slaughterhouse Five'})\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with Better-SQLite3 in Read-Only Mode\nDESCRIPTION: This snippet demonstrates initializing Knex with Better-SQLite3 in read-only mode using the `readonly` option. This configures the database to be opened in a read-only state.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'better-sqlite3',\n  connection: {\n    filename: \"/path/to/db.sqlite3\",\n    options: {\n      readonly: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Having Between Clause in Knex.js\nDESCRIPTION: Demonstrates how to use the `havingBetween` function to add a having between clause to a Knex.js query. This filters results where the 'id' column is within the specified range.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_175\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .havingBetween('id', [5, 10])\n```\n\n----------------------------------------\n\nTITLE: Initializing Knex with MySQL and Unix Domain Socket\nDESCRIPTION: This snippet demonstrates configuring Knex with a MySQL client and connecting via a Unix domain socket. The host and port parameters are ignored when the socket path is set.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/index.md#_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst knex = require('knex')({\n  client: 'mysql',\n  connection: {\n    socketPath : '/path/to/socket.sock',\n    user : 'your_database_user',\n    password : 'your_database_password',\n    database : 'myapp_test'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: onNotNull Clause with Knex.js\nDESCRIPTION: Adds an `onNotNull` clause to a join in Knex.js. The query selects from 'users', joins with 'contacts', and filters results where 'contacts.email' is not NULL.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_148\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onNotNull('contacts.email')\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Schema with withSchema - JavaScript\nDESCRIPTION: Specifies the database schema to be used for table names in the query.  This example sets the schema to 'public' and selects all columns from the 'users' table within that schema.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nknex.withSchema('public')\n  .select('*')\n  .from('users')\n```\n\n----------------------------------------\n\nTITLE: Join with Raw Value in Knex.js\nDESCRIPTION: Shows how to use a literal value in a join condition using `knex.raw`. It joins 'users' and 'accounts' tables where 'accounts.type' equals 'admin'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_136\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .join(\n    'accounts', \n    'accounts.type',\n    knex.raw('?', ['admin'])\n  )\n```\n\n----------------------------------------\n\nTITLE: onBetween Clause with Knex.js\nDESCRIPTION: Adds an `onBetween` clause to a join in Knex.js.  The code joins 'users' and 'contacts' tables, and filters the results where 'contacts.id' is between 5 and 30 (inclusive).\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_151\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onBetween('contacts.id', [5, 30])\n})\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Value with Alias using jsonExtract - JavaScript\nDESCRIPTION: Extracts a value from a JSON column and assigns an alias to the extracted value.  This example extracts the value at '$.name' from 'json_col' and aliases it as 'accountName'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonExtract('json_col', '$.name', 'accountName')\n```\n\n----------------------------------------\n\nTITLE: Extracting JSON Value with jsonExtract - JavaScript\nDESCRIPTION: Extracts a value from a JSON column using the `jsonExtract` method. The first example extracts the value at '$.name' from the 'json_col' column in the 'accounts' table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonExtract('json_col', '$.name')\n```\n\n----------------------------------------\n\nTITLE: Raw Query with Single Parameter Binding - Knex.js\nDESCRIPTION: Demonstrates using `knex.raw` with a single value binding, passing the value directly as the second argument.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/raw.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .where(\n    knex.raw('LOWER(\"login\") = ?', 'knex')\n  )\n  .orWhere(\n    knex.raw('accesslevel = ?', 1)\n  )\n  .orWhere(\n    knex.raw('updtime = ?', '01-01-2016')\n  )\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration File with Stub\nDESCRIPTION: This command creates a new migration file using a specific stub file as a template.  The stub file serves as a pre-defined structure for the migration, speeding up development for common migration operations. If a stub path is provided, it must be relative to the knexfile location.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:make --stub \n\n# or\n\n$ knex migrate:make --stub \n```\n\n----------------------------------------\n\nTITLE: Adding Offset Clause - JavaScript\nDESCRIPTION: Adds an offset clause to the query, skipping the specified number of rows. This example skips the first 10 rows in the 'users' table.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .offset(10)\n```\n\n----------------------------------------\n\nTITLE: Cross Join with Knex.js\nDESCRIPTION: Demonstrates cross join operations using Knex.js.  The cross join creates all possible combinations of rows from 'users' and 'accounts' tables. Cross join conditions are only supported in MySQL and SQLite3.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_143\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .crossJoin('accounts')\n\nknex.select('*')\n  .from('users')\n  .crossJoin('accounts', 'users.id', 'accounts.user_id')\n\nknex.select('*')\n  .from('users')\n  .crossJoin('accounts', function() {\n    this\n      .on('accounts.id', '=', 'users.account_id')\n      .orOn('accounts.owner_id', '=', 'users.id')\n  })\n```\n\n----------------------------------------\n\nTITLE: Adding Offset Clause with skipBinding Option - JavaScript\nDESCRIPTION: Adds an offset clause to the query, skipping the specified number of rows, with the `skipBinding` option set to `true`. This avoids setting the offset value as a prepared value, which may be necessary for some databases.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\n// Offset value isn't a prepared value.\nknex.select('*')\n  .from('users')\n  .offset(10, {skipBinding: true})\n  .toSQL()\n  .sql\n```\n\n----------------------------------------\n\nTITLE: Using knex.ref with Schema (JavaScript)\nDESCRIPTION: Shows how to use the `.withSchema(string)` method with `knex.ref` to specify the schema for a table reference in Knex.js. Requires Knex.js to be initialized.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/ref.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex(knex.ref('users').withSchema('TenantId')).select()\n```\n\n----------------------------------------\n\nTITLE: Using knex.ref with Alias (JavaScript)\nDESCRIPTION: Illustrates how to use the `.as(string)` method with `knex.ref` to create an alias for a column reference in Knex.js.  Requires Knex.js to be initialized.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/ref.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nknex('users')\n  .select(knex.ref('Id').as('UserId'))\n```\n\n----------------------------------------\n\nTITLE: On Conflict Merge with WHERE Clause in Knex.js\nDESCRIPTION: Shows how to add a WHERE clause to the merge operation to conditionally update rows only if they meet specific criteria.  This is PostgreSQL/SQLite specific.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nconst timestamp = Date.now();\nknex('tableName')\n  .insert({\n    email: \"ignore@example.com\",\n    name: \"John Doe\",\n    created_at: timestamp,\n    updated_at: timestamp,\n  })\n  .onConflict('email')\n  .merge({\n    name: \"John Doe\",\n    updated_at: timestamp,\n  })\n  .where('updated_at', '<', timestamp)\n```\n\n----------------------------------------\n\nTITLE: Insert Query with Trigger Modifications in Knex.js\nDESCRIPTION: Demonstrates the use of the `includeTriggerModifications` option for MSSQL when inserting into tables with triggers. This modifies the SQL so that proper values are returned.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n// Adding the option includeTriggerModifications \n// allows you to run statements on tables \n// that contain triggers. Only affects MSSQL.\nknex('books')\n  .insert(\n    {title: 'Alice in Wonderland'},\n    ['id'],\n    { includeTriggerModifications: true }\n  )\n```\n\n----------------------------------------\n\nTITLE: Handling 'query-response' Event in Knex.js\nDESCRIPTION: This snippet demonstrates how to listen to the 'query-response' event in Knex.js. The 'query-response' event is triggered when a query has successfully completed. The event handler processes the response and logs relevant query information.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/interfaces.md#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .on('query-response', function(response, obj, builder) {\n    // ...\n  })\n  .then(function(response) {\n    // Same response as the emitted event\n  })\n  .catch(function(error) { });\n```\n\n----------------------------------------\n\nTITLE: Raw Group By Clause with Knex.js\nDESCRIPTION: Adds a raw SQL group by clause to the query using Knex.js. This groups the sales data by year with rollup to include summary rows.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_164\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('year', knex.raw('SUM(profit)'))\n  .from('sales')\n  .groupByRaw('year WITH ROLLUP')\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Migration Up\nDESCRIPTION: This command runs a specific migration file that has not yet been run. You must provide the migration filename to run the migration.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ knex migrate:up 001_migration_name.js\n```\n\n----------------------------------------\n\nTITLE: Adding a Full-Text Index for PostgreSQL\nDESCRIPTION: This snippet shows how to add a full-text index to a PostgreSQL table using Knex. It creates a table named 'foo' with an auto-incrementing 'id' column and a 'fulltext' column of type 'tsvector'.  It then creates a GIN index on the 'fulltext' column. This is intended for use within a Knex migration.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nexports.up = (knex) => {\n  return knex.schema.createTable('foo', (table) => {\n    table.increments('id');\n    table.specificType('fulltext', 'tsvector');\n    table.index('fulltext', null, 'gin');\n  })\n};\n```\n\n----------------------------------------\n\nTITLE: Knex.js Configuration with MJS Extension\nDESCRIPTION: This TypeScript snippet demonstrates a Knex.js configuration file using the `.mjs` extension. It shows how to specify the `loadExtensions` property to include `.mjs` files for migrations when using ESM. This is important for Knex to find the migration files.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n/** \n * knexfile.mjs\n */\nexport default {\n  migrations: {\n    // ... client, connection,etc ....\n    directory: './migrations',\n    loadExtensions: ['.mjs'] // \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Union All Query with Array - JavaScript\nDESCRIPTION: Creates a union all query using an array of query builders. This example combines the results of two queries, one selecting users with a null 'last_name' and another selecting users with a null 'first_name'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*')\n  .from('users')\n  .whereNull('last_name')\n  .unionAll([\n    knex.select('*').from('users').whereNull('first_name')\n  ])\n```\n\n----------------------------------------\n\nTITLE: onNotExists Clause with Knex.js\nDESCRIPTION: Adds an `onNotExists` clause to a join in Knex.js. The query joins 'users' and 'contacts', filtering for cases where no corresponding 'accounts' record exists with 'users.account_id = accounts.id'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_150\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onNotExists(function() {\n      this.select('*')\n        .from('accounts')\n        .whereRaw('users.account_id = accounts.id');\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Debugging Queries with Knex.js\nDESCRIPTION: Describes how to use the `.debug()` method in Knex.js to override the global debug setting for the current query chain.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_92\n\n\n\n----------------------------------------\n\nTITLE: onNotBetween Clause with Knex.js\nDESCRIPTION: Adds an `onNotBetween` clause to a join in Knex.js. The code joins 'users' and 'contacts' tables, filtering for records where 'contacts.id' is NOT between 5 and 30.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_152\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select('*').from('users').join('contacts', function() {\n  this\n    .on('users.id', '=', 'contacts.id')\n    .onNotBetween('contacts.id', [5, 30])\n})\n```\n\n----------------------------------------\n\nTITLE: Inserting JSON Value with jsonInsert - JavaScript\nDESCRIPTION: Inserts a value at a specified JsonPath within a JSON column using the `jsonInsert` method.  If a value already exists at the given path, the value is not replaced. This example inserts the value 'newName' at '$.name' in the 'json_col' column, aliasing the result as 'newNameCol'.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nknex('accounts')\n  .jsonInsert('json_col', '$.name', 'newName', 'newNameCol')\n```\n\n----------------------------------------\n\nTITLE: Adding Row Number with Knex.js\nDESCRIPTION: Demonstrates how to add a row_number() call to your query using the `.rowNumber()` method in Knex.js. String, Raw and Function syntax is supported.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', 'email', 'firstName')\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber(\n    'alias_name', \n    ['email', 'address'], \n    ['firstName', 'lastName']\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber(\n    'alias_name', \n    knex.raw('order by ??', ['email'])\n  )\n```\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users')\n  .select('*')\n  .rowNumber('alias_name', function() {\n    this.orderBy('email').partitionBy('firstName')\n  })\n```\n\n----------------------------------------\n\nTITLE: Group By Clause with Knex.js\nDESCRIPTION: Adds a group by clause to the query using Knex.js. This groups the results by the 'count' column.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_163\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').groupBy('count')\n```\n\n----------------------------------------\n\nTITLE: Failing Immediately on Locked Rows with Knex.js\nDESCRIPTION: This example shows how to use the `noWait()` method to make the query fail immediately if any selected rows are currently locked in MySQL 8.0+, MariaDB-10.3+ and PostgreSQL 9.5+.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nknex('tableName')\n  .select('*')\n  .forUpdate()\n  .noWait()\n```\n\n----------------------------------------\n\nTITLE: Knex.js WHERE NOT Clause with Object Syntax\nDESCRIPTION: This snippet shows the object syntax for the `whereNot` clause. It filters records where none of the specified key-value pairs match.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nknex('users').whereNot({\n  first_name: 'Test',\n  last_name:  'User'\n}).select('id')\n```\n\n----------------------------------------\n\nTITLE: Clear Having with Knex.js\nDESCRIPTION: Demonstrates how to clear the having clause from a Knex.js query using the deprecated `clearHaving()` method.  It removes the 'id > 5' condition from the query's having clause.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_159\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select()\n  .from('users')\n  .having('id', '>', 5)\n  .clearHaving()\n```\n\n----------------------------------------\n\nTITLE: Executing Raw SQL with Encryption Key in SQLite with Knex\nDESCRIPTION: This code shows how to execute a raw SQL statement to set the encryption key for an SQLCipher database when not using `afterCreate` within the pool. This approach requires executing the `PRAGMA KEY` statement before every SQL query, which can be less efficient than setting it up during connection creation.\nSOURCE: https://github.com/knex/documentation/blob/main/src/faq/recipes.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nreturn knex.raw(\"PRAGMA KEY = 'secret'\")\n  .then(() => knex('some_table')\n    .select()\n    .on('query-error', function(ex, obj) {\n      console.log(\n        \"KNEX select from some_table ERR ex:\", \n        ex, \n        \"obj:\", \n        obj\n      );\n    })\n  );\n```\n\n----------------------------------------\n\nTITLE: Clear Group with Knex.js\nDESCRIPTION: Demonstrates how to clear the group by clause from a Knex.js query using the deprecated `clearGroup()` method. It removes the grouping by 'id' from the query.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_157\n\nLANGUAGE: javascript\nCODE:\n```\nknex.select().from('users').groupBy('id').clearGroup()\n```\n\n----------------------------------------\n\nTITLE: SQL Insert Query with Null Values\nDESCRIPTION: SQL statement illustrating how `useNullAsDefault` affects the insert statement by inserting `NULL` instead of `DEFAULT` when a value is not provided.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/query-builder.md#_snippet_47\n\nLANGUAGE: sql\nCODE:\n```\ninsert into `coords` (`x`, `y`) values (20, NULL), (NULL, 30), (10, 20)\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Seed File\nDESCRIPTION: This command creates a new seed file with the specified name. Seed files are used to populate the database with initial or test data.\nSOURCE: https://github.com/knex/documentation/blob/main/src/guide/migrations.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ knex seed:make seed_name\n```\n\n----------------------------------------\n\nTITLE: Build for Production (Yarn)\nDESCRIPTION: This command builds the Knex.js documentation website for production using Yarn. It optimizes the website for deployment by minifying code and creating static assets. It requires Yarn to be installed.\nSOURCE: https://github.com/knex/documentation/blob/main/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build # or npm run build\n```"
  }
]