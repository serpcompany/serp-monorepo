[
  {
    "owner": "plotly",
    "repo": "plotly.js",
    "content": "TITLE: Including Plotly.js in HTML (Minified Version)\nDESCRIPTION: Shows how to import the minified version of plotly.js library in an HTML file. This loads the plotly.js library and injects the Plotly object into the global scope.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/README.md#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"plotly.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Plotly.js via Script Tag\nDESCRIPTION: Example showing how to load and use plotly.js in HTML using a CDN script tag, including creating a basic plot.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <script src=\"https://cdn.plot.ly/plotly-3.0.1.min.js\" charset=\"utf-8\"></script>\n</head>\n<body>\n    <div id=\"gd\"></div>\n\n    <script>\n        Plotly.newPlot(\"gd\", /* JSON object */ {\n            \"data\": [{ \"y\": [1, 2, 3] }],\n            \"layout\": { \"width\": 600, \"height\": 400}\n        })\n    </script>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Layout Properties\nDESCRIPTION: Layout-specific configuration options for Plotly graphs including axis properties, legends, annotations, shapes and other visual elements.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_21\n\nLANGUAGE: JavaScript\nCODE:\n```\nlayout.separators\nlayout.dragmode\nlayout.hovermode\n```\n\n----------------------------------------\n\nTITLE: Using Plotly.update Method\nDESCRIPTION: A method that can perform both data and layout updates in a single call, improving efficiency when making multiple changes.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.update\n```\n\n----------------------------------------\n\nTITLE: Using Hovertemplate in Plotly.js Traces\nDESCRIPTION: Example of the new hovertemplate attribute for customizing hover labels on various trace types including scatter, bar, and pie charts.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar trace = {\n  type: 'scatter',\n  x: [1, 2, 3],\n  y: [4, 5, 6],\n  hovertemplate: 'x: %{x}<br>y: %{y}'\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Plotly Feature Configurations\nDESCRIPTION: Code examples showing new configuration options and features added to plotly.js, including rangebreaks on date axes, unified hovermode, and various trace customizations.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  rangebreaks: [...],  // for date axes\n  hovermode: 'x unified',  // or 'y unified'\n  spikesnap: 'hovered data',\n  opacityscale: [...],  // for surface traces\n  uniformtext: {...},  // for various chart types\n  quartilemethod: 'exclusive',  // or 'inclusive' for box plots\n  notifyOnLogging: true  // for logging notifications\n}\n```\n\n----------------------------------------\n\nTITLE: Animation API Methods\nDESCRIPTION: Methods for creating and managing animations in Plotly.js, allowing for animated transitions between different states of a plot.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.animate\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.addFrames\n```\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.deleteFrames\n```\n\n----------------------------------------\n\nTITLE: Importing Plotly.js in Node.js\nDESCRIPTION: Examples showing how to import plotly.js using ES6 modules or CommonJS require syntax.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// ES6 module\nimport Plotly from 'plotly.js-dist-min'\n\n// CommonJS\nvar Plotly = require('plotly.js-dist-min')\n```\n\n----------------------------------------\n\nTITLE: Configuring Title Placement in Plotly.js Layouts\nDESCRIPTION: Demonstration of new layout.title placement attributes for precise control over title position and alignment.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar layout = {\n  title: {\n    text: 'Chart Title',\n    x: 0.5,\n    y: 0.95,\n    xref: 'paper',\n    yref: 'paper',\n    xanchor: 'center',\n    yanchor: 'top'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Graph-wide Colorscale Defaults in Plotly.js\nDESCRIPTION: Demonstration of new layout attributes for setting default colorscales across the entire graph for sequential, sequential-minus, and diverging scales.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar layout = {\n  colorscale: {\n    sequential: 'Viridis',\n    sequentialminus: 'Plasma',\n    diverging: 'RdBu'\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly.js via NPM\nDESCRIPTION: Command to install the minified distribution bundle of plotly.js using npm package manager.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i --save plotly.js-dist-min\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly Trace Properties\nDESCRIPTION: Examples of new trace properties and customization options including customdata for sankey diagrams, intensitymode for mesh3d traces, and text orientation for pie/sunburst charts.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  node: {\n    customdata: [...]\n  },\n  link: {\n    customdata: [...]\n  },\n  intensitymode: 'cell',  // for mesh3d\n  insidetextorientation: '...',  // for pie/sunburst\n  featureidkey: '...',  // for geo traces\n  geo: {\n    visible: false,\n    fitbounds: '...'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Plotly.js as ES6 Module\nDESCRIPTION: Example demonstrating how to load plotly.js using native ES6 import in a script tag.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script type=\"module\">\n    import \"https://cdn.plot.ly/plotly-3.0.1.min.js\"\n    Plotly.newPlot(\"gd\", [{ y: [1, 2, 3] }])\n</script>\n```\n\n----------------------------------------\n\nTITLE: Loading Plotly.js Localization File\nDESCRIPTION: Demonstrates how to load a locale definition file for Plotly.js. This example uses Swiss-German (de-CH) localization, which should be loaded after the main Plotly.js script.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/README.md#2025-04-18_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"plotly-locale-de-ch.js\"></script>\n<script>Plotly.setPlotConfig({locale: 'de-CH'})</script>\n```\n\n----------------------------------------\n\nTITLE: Using Plotly.validate Method\nDESCRIPTION: The validate method allows checking if a chart specification is valid according to the Plotly.js schema.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.validate\n```\n\n----------------------------------------\n\nTITLE: Initializing Plotly Graph Configuration and Properties\nDESCRIPTION: Various code references showing configuration and initialization of Plotly graphs, including options like scrollZoom, layout separators, bar modes, hover events, and other plot-specific settings.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_20\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlotly.plot\nPlotly.toImage\nPlotly.downloadImage\nPlotly.purge\nPlotly.Fx.hover\nPlotly.Plots.resize\nPlotly.deleteTraces\n```\n\n----------------------------------------\n\nTITLE: Setting Modebar Layout Style\nDESCRIPTION: Customization attributes for modebar appearance including orientation, background color, text color and active color.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  orientation: 'v|h',\n  bgcolor: 'color',\n  color: 'color',\n  activecolor: 'color'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pie Chart Title\nDESCRIPTION: Attributes for adding and styling titles in pie charts including position and font settings.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  title: 'string',\n  titleposition: 'position',\n  titlefont: {\n    family: 'string',\n    size: number,\n    color: 'color'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Plotly.js Logging Level\nDESCRIPTION: Sets the logging level for Plotly.js. Level 1 displays warnings only, while level 2 shows all logs. By default, all logging is turned off.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.setPlotConfig({ logging: /* 1 or 2 */ })\n```\n\n----------------------------------------\n\nTITLE: Including Plotly.js in HTML (Un-minified Version)\nDESCRIPTION: Shows how to import the un-minified version of plotly.js library in an HTML file with UTF-8 character encoding. This is useful for debugging as it contains readable code.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"plotly.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Setting Locale for Individual Plotly Chart\nDESCRIPTION: Shows how to set localization for a specific Plotly chart using the config parameter in the newPlot function. This allows using different localizations for different charts on the same page.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/README.md#2025-04-18_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nPlotly.newPlot(graphDiv, data, layout, {locale: 'de-CH'})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bundle with Specific Traces\nDESCRIPTION: Command to create a custom bundle with only specified trace types. The 'scatter' trace is included by default and cannot be removed.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- --traces scatter,scattergl,scatter3d\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bundle with Multiple Options\nDESCRIPTION: Example commands demonstrating how to combine multiple options to create a custom bundle. This creates an unminified bundle named 'myScatters' with specific trace types.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- \\\n    --unminified \\\n    --out myScatters \\\n    --traces scatter,scattergl,scatter3d \\\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- --unminified --out myScatters --traces scatter,scattergl,scatter3d\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack for Plotly.js in Angular CLI\nDESCRIPTION: This snippet shows how to set up a custom webpack configuration file to include Plotly.js in an Angular project. It uses ify-loader to process Plotly.js files.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/BUILDING.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    module: {\n        rules: [\n            {\n                test: /\\.js$/,\n                include: [\n                    path.resolve(__dirname, \"node_modules/plotly.js\")\n                ],\n                loader: 'ify-loader'\n            }\n        ]\n    },\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Angular JSON for Custom Webpack\nDESCRIPTION: This JSON snippet demonstrates how to modify the Angular configuration file (angular.json) to use a custom webpack configuration. It specifies the custom builder and the path to the webpack config file.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/BUILDING.md#2025-04-18_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\n  \"version\": 1,\n  \"newProjectRoot\": \"projects\",\n  \"projects\": {\n    \"MY_PROJECT_NAME\": {\n      \"root\": \"\",\n      \"sourceRoot\": \"src\",\n      \"projectType\": \"application\",\n      \"prefix\": \"app\",\n      \"schematics\": {\n        \"@schematics/angular:component\": {\n          \"styleext\": \"scss\"\n        }\n      },\n      \"architect\": {\n        \"build\": {\n          \"builder\": \"@angular-builders/custom-webpack:browser\",\n          \"options\": {\n            ....\n            \"customWebpackConfig\": {\n              \"path\": \"./extra-webpack.config.js\",\n              \"replaceDuplicatePlugins\": true,\n              \"mergeStrategies\": {\"module.rules\":  \"merge\"}\n            }\n          }\n        }\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Scroll Zoom in Plotly.js\nDESCRIPTION: Example of using the updated scrollZoom config option, which is now a flaglist instead of a boolean. This allows enabling scroll zoom for specific subplot types.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlotly.newPlot('myDiv', data, layout, {scrollZoom: 'geo+gl3d+mapbox'})\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Plot with Fixed Dimensions (JavaScript)\nDESCRIPTION: Sample code for creating a plot with fixed dimensions and margins to ensure reliable interaction testing. This approach helps ensure consistent coordinates for simulated user interactions across different environments.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nPlotly.newPlot(gd, [{\n    x: [1, 1, 1, 2, 2, 2, 3, 3, 3],\n    y: [1, 2, 3, 1, 2, 3, 1, 2, 3],\n    mode: 'markers'\n}], {\n    width: 400, height: 400,\n    margin: {l: 100, r: 100, t: 100, b: 100},\n    xaxis: {range: [0, 4]},\n    yaxis: {range: [0, 4]}\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Trace Module Registration Example in JavaScript\nDESCRIPTION: Example of how trace modules are registered in Plotly.js under the Registry object. Registration is performed using Plotly.register as shown in the dist/ index files.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlotly.register\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax v3 Integration\nDESCRIPTION: Example showing how to load MathJax version 3 for use with plotly.js.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/mathjax@3.2.2/es5/tex-svg.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading MathJax v2 Integration\nDESCRIPTION: Example showing how to load MathJax version 2 for use with plotly.js.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Loading Virtual-WebGL Integration\nDESCRIPTION: Example showing how to load virtual-webgl for supporting multiple WebGL graphs on a page.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/virtual-webgl@1.0.6/src/virtual-webgl.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding New Layout Attributes in JavaScript\nDESCRIPTION: Adds new layout attributes piecolorway and extendpiecolors for more control over pie chart colors.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New layout attributes for pie charts\nlayout: {\n  piecolorway: value,\n  extendpiecolors: value\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing bar trace issues in Plotly.js\nDESCRIPTION: Fixes issues with bar text position for traces with set base and adds support for typed arrays for width and offset attributes.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Fix `bar` text position for traces with set `base`\n[[#3156](https://github.com/plotly/plotly.js/pull/3156)]\n\n// Fix `bar` support for typed arrays for `width` and `offset` attributes\n[[#3169](https://github.com/plotly/plotly.js/pull/3169)]\n```\n\n----------------------------------------\n\nTITLE: Rendering Filled Colorbars with SVG in JavaScript\nDESCRIPTION: Uses <linearGradient> SVG element to render filled colorbars, improving performance and visual quality.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Rendering filled colorbars with SVG\n<linearGradient id=\"colorbar-gradient\">\n  <!-- Gradient stops -->\n</linearGradient>\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Bundle Output Name\nDESCRIPTION: Command to create a custom bundle with a specified output name. The bundle will be created in the 'dist/' directory.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- --out myBundleName\n```\n\n----------------------------------------\n\nTITLE: Creating Unminified Custom Bundle\nDESCRIPTION: Command to create an unminified custom bundle by disabling compression.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- --unminified\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Bundle with Strict Trace Types\nDESCRIPTION: Command to create a custom bundle using strict trace types where possible.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle -- --traces scatter,scattergl --strict\n```\n\n----------------------------------------\n\nTITLE: Adding New Trace Attributes in JavaScript\nDESCRIPTION: Adds new attributes r0, dr, theta0 and dtheta to scatterpolar and scatterpolargl trace types.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n// New attributes for scatterpolar and scatterpolargl\nscatterpolar: {\n  r0: value,\n  dr: value,\n  theta0: value,\n  dtheta: value\n},\nscatterpolargl: {\n  r0: value,\n  dr: value,\n  theta0: value,\n  dtheta: value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Custom Bundle\nDESCRIPTION: Command to create a custom bundle with all trace types included by default.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run custom-bundle\n```\n\n----------------------------------------\n\nTITLE: Installing Plotly.js Dependencies\nDESCRIPTION: Commands to navigate to the Plotly.js directory and install its dependencies using npm.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd plotly.js\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Cloning Plotly.js Repository\nDESCRIPTION: Command to clone a specific version of the Plotly.js repository. The <version> should be replaced with one of the available tags from the Plotly.js repository.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone --branch <version> https://github.com/plotly/plotly.js.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the plotly.js Repository (Bash)\nDESCRIPTION: Commands to fork the plotly.js repository, clone it locally, and navigate to the project directory. Uses shallow clone (depth 1) to minimize download size.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone --depth 1 git@github.com:<your-GitHub-username>/plotly.js.git\ncd plotly.js\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies (Bash)\nDESCRIPTION: Command to install all required npm dependencies for the plotly.js project as specified in package.json.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment (Bash)\nDESCRIPTION: Command to run the pretest script which prepares the environment for running tests.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run pretest\n```\n\n----------------------------------------\n\nTITLE: Starting the Test Dashboard (Bash)\nDESCRIPTION: Command to bundle the source files and launch the test dashboard in a browser, which is the primary development environment for plotly.js.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Regenerating Plot Schema (Bash)\nDESCRIPTION: Command to regenerate the plot schema in the test folder, which records changes to the API when implementing new features or editing attribute descriptions.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run schema\n```\n\n----------------------------------------\n\nTITLE: Running Jasmine Tests (Bash)\nDESCRIPTION: Commands for running Jasmine tests in a browser using karma. Shows examples of how to run specific test suites, multiple suites, and options for watch mode and verbosity.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-jasmine\n```\n\n----------------------------------------\n\nTITLE: Generating Test Baselines with Python (Bash)\nDESCRIPTION: Command to generate new baseline images for visual regression tests using Python. Used when adding new mock files or updating existing ones.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npython3 test/image/make_baseline.py = mock_1 mock_2\n```\n\n----------------------------------------\n\nTITLE: Defining Plotly Config with Local MathJax\nDESCRIPTION: Configuration option to override default MathJax behavior by using local MathJax configuration instead of modifying global MathJax config on load.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nPlotlyConfig.MathJaxConfig = 'local'\n```\n\n----------------------------------------\n\nTITLE: Generating Test Baselines with npm (Bash)\nDESCRIPTION: Alternative commands to generate baseline images using npm scripts instead of directly calling Python, with support for wildcard patterns.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run baseline mock_1 mock_2\nnpm run baseline mock_*\n```\n\n----------------------------------------\n\nTITLE: Registry.traceIs Method Reference in JavaScript\nDESCRIPTION: Reference to the Registry.traceIs method used to detect traces that belong to specific categories based on their identifiers.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nRegistry.traceIs\n```\n\n----------------------------------------\n\nTITLE: Fixing WebGL warnings for scatter3d traces in Plotly.js\nDESCRIPTION: Fixes WebGL warnings for scatter3d traces with blank text items and empty lines.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Fix WebGL warnings for `scatter3d` traces with blank text items\n[[#3171](https://github.com/plotly/plotly.js/pull/3171), [#3177](https://github.com/plotly/plotly.js/pull/3177)]\n\n// Fix WebGL warnings for `scatter3d` trace with empty lines\n[[#3174](https://github.com/plotly/plotly.js/pull/3174)]\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in JavaScript\nDESCRIPTION: Bumps versions of browserify, glslify, and color-normalize dependencies used in plotly.js.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Bumped dependency versions\nbrowserify: v16\nglslify: v6.2.1\ncolor-normalize: 1.3.0\n```\n\n----------------------------------------\n\nTITLE: Using derequire Browserify Plugin in JavaScript\nDESCRIPTION: Implements derequire browserify plugin to enable bundling of the distributed npm package with browserify.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CHANGELOG.md#2025-04-18_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Using derequire browserify plugin\nconst browserify = require('browserify');\nconst derequire = require('derequire');\n\nbrowserify()\n  .plugin(derequire)\n  .bundle()\n```\n\n----------------------------------------\n\nTITLE: Markdown Contributors Table\nDESCRIPTION: A markdown table listing notable contributors to Plotly.js, including their GitHub handles, Twitter accounts, and current status in the project.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/README.md#2025-04-18_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n|   | GitHub | Twitter | Status |\n|---|--------|---------|--------|\n|**Alex C. Johnson**| [@alexcjohnson](https://github.com/alexcjohnson) | | Active, Maintainer |\n|**Mojtaba Samimi** | [@archmoj](https://github.com/archmoj) | [@solarchvision](https://twitter.com/solarchvision) | Active, Maintainer |\n|**Emily Kellison-Linn** | [@emilykl](https://github.com/emilykl) | | Active, Maintainer |\n```\n\n----------------------------------------\n\nTITLE: Modebar Button Labels - JavaScript String Constants\nDESCRIPTION: String constants used for modebar button labels in Plotly.js, including zoom controls, selection tools, download options, and other interactive features.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt#2025-04-18_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Modebar button text constants\nAutoscale                     // components/modebar/buttons.js:203\nBox Select                    // components/modebar/buttons.js:111\nPan                          // components/modebar/buttons.js:101\nZoom                         // components/modebar/buttons.js:91\nZoom in                      // components/modebar/buttons.js:183\nZoom out                     // components/modebar/buttons.js:193\n```\n\n----------------------------------------\n\nTITLE: Plot Title and Axis Labels - JavaScript String Constants\nDESCRIPTION: Default text strings for plot titles, subtitles, and axis labels used when initializing or editing plots.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt#2025-04-18_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Plot title and axis label constants\nClick to enter Plot title          // plots/plots.js:314\nClick to enter Plot subtitle       // plots/plots.js:315\nClick to enter X axis title       // plots/plots.js:316\nClick to enter Y axis title       // plots/plots.js:317\nClick to enter Colorscale title   // plots/plots.js:318\n```\n\n----------------------------------------\n\nTITLE: Statistical Plot Labels - JavaScript String Constants\nDESCRIPTION: Label text used in statistical plots like box plots and violin plots, including statistical measures and data point descriptions.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/dist/translation-keys.txt#2025-04-18_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Statistical measure labels\nkde:           // traces/violin/calc.js:86\nmax:           // traces/box/calc.js:289\nmean ± σ:      // traces/box/calc.js:291\nmean:          // traces/box/calc.js:292\nmedian:        // traces/box/calc.js:285\nmin:           // traces/box/calc.js:286\nq1:            // traces/box/calc.js:287\nq3:            // traces/box/calc.js:288\n```\n\n----------------------------------------\n\nTITLE: Creating Changelog Entry for New Feature in Markdown\nDESCRIPTION: Example of formatting a changelog entry for a new feature (PR #5546) that adds an icicle trace type. Shows proper markdown formatting with PR link.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/draftlogs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n - Add `icicle` trace type [[#5546](https://github.com/plotly/plotly.js/pull/5546)]\n```\n\n----------------------------------------\n\nTITLE: Switching to Another Plotly.js Version\nDESCRIPTION: Commands to fetch and checkout a different version of Plotly.js if you've already cloned the repository.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CUSTOM_BUNDLE.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit fetch\ngit checkout <version>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Jasmine Test Suites (Bash)\nDESCRIPTION: Commands demonstrating how to run specific or multiple test suites at once, with options for disabling auto-watch and enabling verbose reporting.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test-jasmine -- <suite>\nnpm run test-jasmine -- bar axes scatter\nnpm run test-jasmine -- <suite> --nowatch\nnpm run test-jasmine -- <suite> --verbose\n```\n\n----------------------------------------\n\nTITLE: Regenerating REGL Shaders (Bash)\nDESCRIPTION: Command to regenerate REGL shader code, necessary when implementing features that involve REGL shaders or changing how they're used. This ensures CSP compliance.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run regl-codegen\n```\n\n----------------------------------------\n\nTITLE: Creating a Development Branch (Bash)\nDESCRIPTION: Command to create and switch to a new development branch. Note that master or main branches should not be used for development work.\nSOURCE: https://github.com/plotly/plotly.js/blob/master/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# please do not use master or main for your dev branch\ngit checkout dev-branch-name\n```"
  }
]