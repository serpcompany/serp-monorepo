[
  {
    "owner": "datadog",
    "repo": "browser-sdk",
    "content": "TITLE: Initializing Datadog RUM in JavaScript\nDESCRIPTION: Code snippet showing how to initialize Datadog Real User Monitoring in a web application. The configuration includes required parameters like applicationId, clientToken, and site, as well as optional settings for tracking resources, long tasks, and user interactions.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/rum/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { datadogRum } from '@datadog/browser-rum'\n\ndatadogRum.init({\n  applicationId: '<DATADOG_APPLICATION_ID>',\n  clientToken: '<DATADOG_CLIENT_TOKEN>',\n  site: '<DATADOG_SITE>',\n  //  service: 'my-web-application',\n  //  env: 'production',\n  //  version: '1.0.0',\n  sessionSampleRate: 100,\n  sessionReplaySampleRate: 100,\n  trackResources: true,\n  trackLongTasks: true,\n  trackUserInteractions: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Datadog Browser Logs SDK in JavaScript\nDESCRIPTION: This snippet demonstrates how to initialize the Datadog browser logs SDK. It sets up the client token, site, error forwarding, and session sample rate.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/logs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { datadogLogs } from '@datadog/browser-logs'\n\ndatadogLogs.init({\n  clientToken: '<DATADOG_CLIENT_TOKEN>',\n  site: '<DATADOG_SITE>',\n  forwardErrorsToLogs: true,\n  sessionSampleRate: 100,\n})\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Logs with Datadog Browser Logs SDK in JavaScript\nDESCRIPTION: This snippet shows how to send custom log entries to Datadog using the initialized SDK. It includes examples of sending an info log and an error log with additional context.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/logs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { datadogLogs } from '@datadog/browser-logs'\n\ndatadogLogs.logger.info('Button clicked', { name: 'buttonName', id: 123 })\n\ntry {\n  ...\n  throw new Error('Wrong behavior')\n  ...\n} catch (ex) {\n  datadogLogs.logger.error('Error occurred', { team: 'myTeam' }, ex)\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Browser Compatibility Matrix in Markdown\nDESCRIPTION: A markdown table showing browser compatibility for various Datadog Browser SDK features including RUM tracking, error monitoring, and performance metrics. Includes support status for desktop and mobile browsers with specific limitations noted.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/rum/BROWSER_SUPPORT.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Feature           | Chrome | Firefox | Safari | Edge | Chrome Android | Safari iOS | IE  | Opera |\n| ----------------- | ------ | ------- | ------ | ---- | -------------- | ---------- | --- | ----- |\n| loading           | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| init              | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| rum request       | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| flush on hide     | ✅     | ✅      | ✅     | ✅   | ✅             | ❌         | ❌  | ✅    |\n| console error     | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| runtime error     | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| CSP violation     | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| intervention      | ✅     | ❌      | ❌     | ✅   | ✅             | ❌         | ❌  | ✅    |\n| auto action       | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| custom action     | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| long task         | ✅     | ❌      | ❌     | ✅   | ✅             | ❌         | ❌  | ✅    |\n| tracing           | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| route change      | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| loading time      | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| resource timing   | ✅     | ✅      | ⚠️(2)  | ✅   | ✅             | ⚠️(2)      | ❌  | ✅    |\n| navigation timing | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n| web vitals        | ✅     | ⚠️(1)   | ⚠️(1)  | ✅   | ✅             | ⚠️(1)      | ❌  | ✅    |\n| FCP               | ✅     | ✅      | ✅     | ✅   | ✅             | ✅         | ❌  | ✅    |\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Datadog Browser SDK\nDESCRIPTION: Command to start the local development server using yarn. The server will be accessible at http://localhost:8080.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/sandbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Building the Browser SDK Developer Extension\nDESCRIPTION: Commands to clone the repository, install dependencies, and build the extension. This is necessary if loading the extension unpacked instead of from the Chrome Web Store.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/developer-extension/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/DataDog/browser-sdk\n$ cd browser-sdk\n$ yarn\n$ yarn build\n```\n\n----------------------------------------\n\nTITLE: Searching Events in the Event Tab\nDESCRIPTION: Example of using the key:value search syntax to filter events in the Event Tab of the extension. This demonstrates how to search for specific event types and attributes.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/developer-extension/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\ntype:view application.id:2 action.target.name:my_action_name\n```\n\n----------------------------------------\n\nTITLE: Running Browser SDK Performance Tests\nDESCRIPTION: Commands for executing performance tests using different versions of the Datadog Browser SDK. The default command uses datadog-rum.js while the --recorder flag enables testing with datadog-rum-recorder.js.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/performances/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn start\nyarn start --recorder\n```\n\n----------------------------------------\n\nTITLE: Session Start State Flow\nDESCRIPTION: State diagram showing possible transitions when starting a session, including transitions from NotStarted to Expired and handling of active sessions\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\nstate fork_state2 <<fork>>\n\n[*] --> fork_state\n\nfork_state --> NotStarted\nfork_state --> Expired\nfork_state --> Tracked\nfork_state --> NotTracked\nNotStarted --> Expired: startSession()\n\nExpired --> fork_state2\nTracked --> fork_state2\nNotTracked --> fork_state2\nfork_state2 --> [*]: expandOrRenew()\n```\n\n----------------------------------------\n\nTITLE: Expand or Renew State Flow\nDESCRIPTION: State diagram showing the expand or renew process including tracking type computation\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\nstate fork_state2 <<fork>>\nstate fork_state3 <<fork>>\n\n\nstate expandOrRenew() {\n  [*] --> fork_state: expandOrRenew()\n  Tracked2: Tracked\n  NotTracked2: NotTracked\n\n  fork_state --> NotStarted\n  fork_state --> Expired\n  fork_state --> Tracked\n  fork_state --> NotTracked\n\n  NotStarted --> [*]\n\n  Expired --> fork_state2: renew()\n  Tracked --> fork_state2: extend()\n  NotTracked --> fork_state2: extend()\n\n  fork_state2 --> fork_state3: computeTrackingType()\n\n  fork_state3 --> Tracked2\n  fork_state3 --> NotTracked2\n\n  Tracked2 --> [*]\n  NotTracked2 --> [*]\n}\n```\n\n----------------------------------------\n\nTITLE: Extend or Expire State Flow\nDESCRIPTION: State diagram showing the extend or expire process for different session states\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_7\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\n\nstate extendOrExpire() {\n  [*] --> fork_state : extendOrExpire()\n  Tracked2: Tracked\n  NotTracked2: NotTracked\n  Expired2: Expired\n\n  fork_state --> NotStarted\n  fork_state --> Expired\n  fork_state --> Tracked\n  fork_state --> NotTracked\n\n  Tracked --> Tracked2: extend()\n  NotTracked --> NotTracked2: extend()\n  Expired --> Expired2: expire()\n\n  NotStarted --> [*]\n  Tracked2 --> [*]\n  NotTracked2 --> [*]\n  Expired2 --> [*]\n}\n```\n\n----------------------------------------\n\nTITLE: User Activity State Flow\nDESCRIPTION: State diagram showing session state transitions triggered by user activity\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\n\n[*] --> fork_state\n\nfork_state --> [*]: expandOrRenew()\n```\n\n----------------------------------------\n\nTITLE: Visibility Change State Flow\nDESCRIPTION: State diagram showing how visibility changes affect session state, handling both visible and hidden states\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\nstate visibility <<choice>>\n\n[*] --> visibility: VisibilityChange\n\nvisibility --> [*]: hidden\nvisibility --> fork_state : visible\n\nfork_state --> [*]: extendOrExpire()\n```\n\n----------------------------------------\n\nTITLE: Frozen State Resume Flow\nDESCRIPTION: State diagram showing session state management when resuming from a frozen state\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\nstate fork_state2 <<fork>>\n\n[*] --> fork_state: Resume\n\nfork_state --> NotStarted\nfork_state --> Expired\nfork_state --> Tracked\nfork_state --> NotTracked\n\nNotStarted --> Expired: restartSession()\nExpired --> fork_state2\nTracked --> fork_state2\nNotTracked --> fork_state2\n\nfork_state2 --> [*]: extendOrExpire()\n```\n\n----------------------------------------\n\nTITLE: Watch Timer State Flow\nDESCRIPTION: State diagram showing periodic session state checks performed every second\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_4\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\n\n\n[*] --> fork_state\nfork_state --> [*]: extendOrExpire()\n```\n\n----------------------------------------\n\nTITLE: Cookie Clearing State Flow\nDESCRIPTION: State diagram showing session state transitions when cookies are cleared by third parties\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/src/domain/session/README.md#2025-04-22_snippet_5\n\nLANGUAGE: mermaid\nCODE:\n```\nstateDiagram-v2\nstate fork_state <<fork>>\nstate join_state <<join>>\nNotStarted2: NotStarted\n\n[*] --> fork_state\n\nfork_state --> NotStarted\nfork_state --> Expired\nfork_state --> Tracked\nfork_state --> NotTracked\n\nExpired --> join_state\nTracked --> join_state\nNotTracked --> join_state\nNotStarted --> join_state\n\njoin_state --> NotStarted2 : clearCookies()\n\nNotStarted2 --> [*]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Gitmoji-inspired Commit Message Convention in Markdown\nDESCRIPTION: This code snippet showcases the commit message convention used in the project, inspired by gitmoji. It lists various emoji and their corresponding meanings for both user-facing and internal changes.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### User-facing changes\n\n💥 - Breaking change.\n\n✨ - New feature.\n\n🐛 - Bug fix.\n\n⚡️ - Performance improvement.\n\n📝 - Documentation.\n\n⚗ - Experimental.\n\n### Internal changes\n\n👷 - Updating project setup (continuous integration, build system, package dependencies...).\n\n♻️ - Refactoring code.\n\n🎨 - Improving structure / format of the code.\n\n✅ - Updating tests.\n\n👌 - Updating code due to code review changes.\n```\n\n----------------------------------------\n\nTITLE: Core Module Description in Markdown\nDESCRIPTION: A simple markdown header and description for the core module of the Datadog browser SDK. This documentation indicates that the module contains browser core utilities for Datadog.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `core`\n\nDatadog browser core utilities.\n```\n\n----------------------------------------\n\nTITLE: Defining Datadog Browser RUM Core Package in Markdown\nDESCRIPTION: This snippet defines the package name 'rum-core' for Datadog browser RUM core utilities. It provides a brief description of the package's purpose.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/rum-core/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `rum-core`\n\nDatadog browser RUM core utilities.\n```\n\n----------------------------------------\n\nTITLE: Web Worker Header Definition in Markdown\nDESCRIPTION: Markdown header defining the web worker module name and providing a brief description of the Datadog browser web Worker functionality.\nSOURCE: https://github.com/datadog/browser-sdk/blob/main/packages/worker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `worker`\n\nDatadog browser web Worker.\n```"
  }
]