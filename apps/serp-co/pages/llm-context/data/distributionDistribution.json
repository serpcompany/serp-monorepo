[
  {
    "owner": "distribution",
    "repo": "distribution",
    "content": "TITLE: Docker Image Push/Pull Example\nDESCRIPTION: Commands demonstrating how to pull, tag, and push an image to the locally running registry. This example uses the Alpine image as a test case.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/dockerhub.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull alpine\ndocker tag alpine localhost:5000/alpine\ndocker push localhost:5000/alpine\n```\n\n----------------------------------------\n\nTITLE: Tagging a Docker Image for Local Distribution Registry - sh\nDESCRIPTION: This Docker CLI command tags the locally available 'ubuntu' image to a new name referencing the local registry at 'localhost:5000/myfirstimage'. This tag associates the image with the custom registry endpoint, allowing it to be pushed subsequently. Dependencies include presence of the source image locally. Inputs are source image 'ubuntu' and target tag 'localhost:5000/myfirstimage'; no direct output, but prepares image for push.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker image tag ubuntu localhost:5000/myfirstimage\n```\n\n----------------------------------------\n\nTITLE: Copying and Managing Docker Images Between Docker Hub and Local Registry - console\nDESCRIPTION: Demonstrates the pull, tag, push, remove, and pull workflow to transfer a Docker image from Docker Hub to a local registry. Pulls the 'ubuntu:16.04' image, tags it for the local registry address, pushes it to the local registry, deletes local copies to test retrieval, then pulls the image again from the local registry. Requires a running local registry on localhost:5000.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ubuntu:16.04\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker tag ubuntu:16.04 localhost:5000/my-ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker push localhost:5000/my-ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker image remove ubuntu:16.04\n$ docker image remove localhost:5000/my-ubuntu\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull localhost:5000/my-ubuntu\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token Authentication in HTTP Headers for Docker Registry - None\nDESCRIPTION: Demonstrates how a client should place a signed Bearer token in the HTTP Authorization header to authenticate Docker Registry requests. The snippet is a simple HTTP header format example showcasing the 'Authorization: Bearer <token>' syntax as per OAuth 2.0 Bearer Token standards.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/jwt.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkJWM0Q6MkFWWjpVQjVaOktJQVA6SU5QTDo1RU42Ok40SjQ6Nk1XTzpEUktFOkJWUUs6M0ZKTDpQT1RMIn0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJCQ0NZOk9VNlo6UUVKNTpXTjJDOjJBVkM6WTdZRDpBM0xZOjQ1VVc6NE9HRDpLQUxMOkNOSjU6NUlVTCIsImF1ZCI6InJlZ2lzdHJ5LmRvY2tlci5jb20iLCJleHAiOjE0MTUzODczMTUsIm5iZiI6MTQxNTM4NzAxNSwiaWF0IjoxNDE1Mzg3MDE1LCJqdGkiOiJ0WUpDTzFjNmNueXk3a0FuMGM3cktQZ2JWMUgxYkZ3cyIsInNjb3BlIjoiamxoYXduOnJlcG9zaXRvcnk6c2FtYWxiYS9teS1hcHA6cHVzaCxwdWxsIGpsaGF3bjpuYW1lc3BhY2U6c2FtYWxiYTpwdWxsIn0.Y3zZSwaZPqy4y9oRBVRImZyv3m_S9XDHF1tWwN7mL52C_IiA73SJkWVNsvNqpJIn5h7A2F8biv_S2ppQ1lgkbw\n```\n\n----------------------------------------\n\nTITLE: Running a Local Docker Registry with Default Configuration - console\nDESCRIPTION: Starts a Docker container running the official registry image on port 5000, detached and configured to restart automatically. This example is intended for initial testing and demonstrates how to make the Docker registry available locally for image hosting. Requires Docker installed on the host and uses the registry:3 image. Outputs a running container named 'registry'.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d -p 5000:5000 --restart=always --name registry registry:3\n```\n\n----------------------------------------\n\nTITLE: Running a Docker Registry with Automatic Restart and Custom Port - console\nDESCRIPTION: Runs a Docker registry container detached, publishing port 5000 (default) and enabling automatic restart on Docker or container failure. A second example runs on port 5001, named 'registry-test'. Both demonstrate modifying port mappings and container names, using the '-p' flag for port forwarding. Docker images and the registry:3 configuration are prerequisites.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  registry:3\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -p 5001:5000 \\\n  --name registry-test \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Image Layer Upload (HTTP)\nDESCRIPTION: Describes the initial HTTP POST request to begin the process of uploading a layer (blob) to the registry. The request is made under the context of the image `name`. The response will include a `Location` header indicating the URL for the subsequent upload steps.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_10\n\nLANGUAGE: none\nCODE:\n```\nPOST /v2/<name>/blobs/uploads/\n```\n\n----------------------------------------\n\nTITLE: Tags Paginated Request\nDESCRIPTION: This code snippet shows the structure of a GET request to retrieve a paginated list of tags for a specified repository. The request includes query parameters `n` to limit the number of entries and `last` to specify the starting point for pagination. The response includes a JSON object containing the repository name and an array of tags.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_27\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/tags/list?n=<integer>&last=<integer>\n```\n\n----------------------------------------\n\nTITLE: Configure Docker Daemon Registry Mirror - JSON\nDESCRIPTION: This JSON snippet configures the Docker daemon to use a specified registry mirror. The `registry-mirrors` key in the `/etc/docker/daemon.json` file defines an array of mirror URLs that the daemon will use for pulling images. This configuration makes the change persistent, ensuring that the daemon always uses the specified mirrors.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/mirror.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"registry-mirrors\": [\"https://mirror.company.example\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Redis Client, Setting and Fetching Keys in Go\nDESCRIPTION: This Go example demonstrates creating a Redis client using go-redis, setting a key-value pair, and retrieving values. It explains handling missing keys and error management. Dependencies are 'github.com/redis/go-redis/v9' and 'context'. Inputs include connection settings (address, password, DB number). Outputs are printed key values or error messages where appropriate.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"github.com/redis/go-redis/v9\"\n)\n\nvar ctx = context.Background()\n\nfunc ExampleClient() {\n    rdb := redis.NewClient(&redis.Options{\n        Addr:     \"localhost:6379\",\n        Password: \"\", // no password set\n        DB:       0,  // use default DB\n    })\n\n    err := rdb.Set(ctx, \"key\", \"value\", 0).Err()\n    if err != nil {\n        panic(err)\n    }\n\n    val, err := rdb.Get(ctx, \"key\").Result()\n    if err != nil {\n        panic(err)\n    }\n    fmt.Println(\"key\", val)\n\n    val2, err := rdb.Get(ctx, \"key2\").Result()\n    if err == redis.Nil {\n        fmt.Println(\"key2 does not exist\")\n    } else if err != nil {\n        panic(err)\n    } else {\n        fmt.Println(\"key2\", val2)\n    }\n    // Output: key value\n    // key2 does not exist\n}\n\n```\n\n----------------------------------------\n\nTITLE: PATCH Blob Upload Request in Docker Registry API\nDESCRIPTION: HTTP PATCH request format for uploading a chunk of data to an existing blob upload. Requires repository name, upload UUID, and binary data in the request body with Content-Type set to application/octet-stream.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_82\n\nLANGUAGE: none\nCODE:\n```\nPATCH /v2/<name>/blobs/uploads/<uuid>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Type: application/octet-stream\n\n<binary data>\n```\n\n----------------------------------------\n\nTITLE: Fetching Blob Part - HTTP Request - API\nDESCRIPTION: Demonstrates the HTTP GET request format used to fetch a specific byte range (chunk) of a blob from the registry. Required headers include `Host`, `Authorization` (for authentication), and `Range` specifying the desired byte range. Path parameters specify the repository `name` and blob `digest`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_50\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/blobs/<digest>\nHost: <registry host>\nAuthorization: <scheme> <token>\nRange: bytes=<start>-<end>\n```\n\n----------------------------------------\n\nTITLE: Executing Common Redis Commands using go-redis in Go\nDESCRIPTION: Presents various usage examples of go-redis commands including conditional set (SetNX), sorting lists, working with sorted sets and scripting with Eval, and sending custom commands with Do. Shows usage of command-specific data structures like Sort and ZRangeBy. Outputs or returns are the command results or errors as applicable. Dependencies: go-redis/v9, context, time.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\n// SET key value EX 10 NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", 10*time.Second).Result()\n\n// SET key value keepttl NX\nset, err := rdb.SetNX(ctx, \"key\", \"value\", redis.KeepTTL).Result()\n\n// SORT list LIMIT 0 2 ASC\nvals, err := rdb.Sort(ctx, \"list\", &redis.Sort{Offset: 0, Count: 2, Order: \"ASC\"}).Result()\n\n// ZRANGEBYSCORE zset -inf +inf WITHSCORES LIMIT 0 2\nvals, err := rdb.ZRangeByScoreWithScores(ctx, \"zset\", &redis.ZRangeBy{\n    Min: \"-inf\",\n    Max: \"+inf\",\n    Offset: 0,\n    Count: 2,\n}).Result()\n\n// ZINTERSTORE out 2 zset1 zset2 WEIGHTS 2 3 AGGREGATE SUM\nvals, err := rdb.ZInterStore(ctx, \"out\", &redis.ZStore{\n    Keys: []string{\"zset1\", \"zset2\"},\n    Weights: []int64{2, 3}\n}).Result()\n\n// EVAL \"return {KEYS[1],ARGV[1]}\" 1 \"key\" \"hello\"\nvals, err := rdb.Eval(ctx, \"return {KEYS[1],ARGV[1]}\", []string{\"key\"}, \"hello\").Result()\n\n// custom command\nres, err := rdb.Do(ctx, \"set\", \"key\", \"value\").Result()\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Registry Instance in YAML\nDESCRIPTION: Provides a minimal YAML configuration for running a Docker registry locally for development. It configures logging to debug level, uses the filesystem for storage rooted at `/var/lib/registry`, binds the main HTTP server to `localhost:5000` with a specified secret, and enables a separate debug server on `localhost:5001`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\nlog:\n  level: debug\nstorage:\n    filesystem:\n        rootdirectory: /var/lib/registry\nhttp:\n    addr: localhost:5000\n    secret: asecretforlocaldevelopment\n    debug:\n        addr: localhost:5001\n```\n\n----------------------------------------\n\nTITLE: Deprecating a pflag Flag in Go\nDESCRIPTION: Demonstrates how to mark a flag (\"badflag\") as deprecated using `MarkDeprecated`. This hides the flag from help messages and prints a specified warning (\"please use --good-flag instead\") when the deprecated flag is used.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag by specifying its name and a usage message\nflags.MarkDeprecated(\"badflag\", \"please use --good-flag instead\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Blob Upload via API (HTTP)\nDESCRIPTION: Defines the HTTP DELETE request format to cancel an ongoing blob upload identified by its UUID. Requires `Host`, `Authorization`, and zero `Content-Length` headers, along with the repository `name` and upload `uuid` in the path.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_103\n\nLANGUAGE: http\nCODE:\n```\nDELETE /v2/<name>/blobs/uploads/<uuid>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Graceful Shutdown of HTTP Server with Gorilla Mux in Go\nDESCRIPTION: This snippet illustrates configuring an HTTP server with gorilla/mux and enabling graceful shutdown using context and signals. It sets server timeouts for safety, starts the server in a goroutine, and listens for interrupt signals to initiate shutdown with a timeout period. It ensures ongoing requests are completed before termination, preventing abrupt disconnections.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nsrv := &http.Server{\n Addr: \"0.0.0.0:8080\",\n WriteTimeout: time.Second * 15,\n ReadTimeout: time.Second * 15,\n IdleTimeout: time.Second * 60,\n Handler: r,\n}\n\n// Run server in goroutine\ngo func() {\n if err := srv.ListenAndServe(); err != nil {\n  log.Println(err)\n }\n}()\n\n// Wait for interrupt signal\nc := make(chan os.Signal, 1)\nsignal.Notify(c, os.Interrupt)\n<-c\n\n// Shutdown with timeout\nctx, cancel := context.WithTimeout(context.Background(), wait)\ndeferr cancel()\nsrv.Shutdown(ctx)\nlog.Println(\"shutting down\")\nos.Exit(0)\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Settings Using YAML\nDESCRIPTION: This YAML snippet configures the HTTP server for the registry with network address, protocol type, URL prefix, host URL for generated URLs, secret for cryptographic signing, relative URLs behavior, and graceful shutdown timeout. It includes sub-settings for debugging, headers, and HTTP2/h2c protocols. The configuration supports TCP and UNIX sockets and allows customization of server listening behavior. This snippet depends on a compatible HTTP server that reads this YAML to configure its runtime parameters.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  addr: localhost:5000\n  net: tcp\n  prefix: /my/nested/registry/\n  host: https://myregistryaddress.org:5000\n  secret: asecretforlocaldevelopment\n  relativeurls: false\n  draintimeout: 60s\n  tls:\n    certificate: /path/to/x509/public\n    key: /path/to/x509/private\n    clientcas:\n      - /path/to/ca.pem\n      - /path/to/another/ca.pem\n    clientauth: require-and-verify-client-cert\n    minimumtls: tls1.2\n    ciphersuites:\n      - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n      - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n    letsencrypt:\n      cachefile: /path/to/cache-file\n      email: emailused@letsencrypt.com\n      hosts: [myregistryaddress.org]\n      directoryurl: https://acme-v02.api.letsencrypt.org/directory\n  debug:\n    addr: localhost:5001\n  headers:\n    X-Content-Type-Options: [nosniff]\n  http2:\n    disabled: false\n  h2c:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Adding Middleware to Gorilla Mux Router in Go\nDESCRIPTION: This snippet explains how to define, add, and use middleware functions with a mux.Router. It covers simple logging middleware and an example of an authentication middleware that checks for session tokens in headers. Middlewares are executed in order, and can terminate request processing by not calling next.ServeHTTP, allowing for functionalities like logging, request modification, or access control.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\ntype MiddlewareFunc func(http.Handler) http.Handler\n\n// Basic logging middleware\nfunc loggingMiddleware(next http.Handler) http.Handler {\n return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n  log.Println(r.RequestURI)\n  next.ServeHTTP(w, r)\n })\n}\n\n// Adding middleware to router\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\nr.Use(loggingMiddleware)\n```\n\nLANGUAGE: Go\nCODE:\n```\n// Authentication middleware example\n type authenticationMiddleware struct {\n  tokenUsers map[string]string\n }\n\n func (amw *authenticationMiddleware) Populate() {\n  amw.tokenUsers[\"00000000\"] = \"user0\"\n  amw.tokenUsers[\"aaaaaaaa\"] = \"userA\"\n  amw.tokenUsers[\"05f717e5\"] = \"randomUser\"\n  amw.tokenUsers[\"deadbeef\"] = \"user0\"\n }\n\n func (amw *authenticationMiddleware) Middleware(next http.Handler) http.Handler {\n  return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n   token := r.Header.Get(\"X-Session-Token\")\n\n   if user, found := amw.tokenUsers[token]; found {\n    log.Printf(\"Authenticated user %s\\n\", user)\n    next.ServeHTTP(w, r)\n   } else {\n    http.Error(w, \"Forbidden\", http.StatusForbidden)\n   }\n  })\n }\n\n// Usage\nr := mux.NewRouter()\nr.HandleFunc(\"/\", handler)\n\namw := authenticationMiddleware{tokenUsers: make(map[string]string)}\namw.Populate()\nr.Use(amw.Middleware)\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing the Local Distribution Registry Container - sh\nDESCRIPTION: This shell command stops the running registry container named 'registry' and removes it along with its volumes, cleaning up all data stored by the local registry instance. This effectively resets the local registry server environment. Dependencies are the presence of the container named 'registry'. Inputs are container name; output is the stopped and removed container and erased data.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker container stop registry && docker container rm -v registry\n```\n\n----------------------------------------\n\nTITLE: Testing a Gorilla Mux HTTP Handler in Go\nDESCRIPTION: This Go test demonstrates how to test an HTTP handler using Go's net/http/httptest package. It constructs a mock request and response recorder to exercise HealthCheckHandler, then compares response status and body with expectations. Dependencies: testing, net/http, net/http/httptest from standard library. Input: Simulated GET requests. Output: Test pass/fail based on response correctness. These patterns are reusable for other handlers.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\npackage main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"testing\"\n)\n\nfunc TestHealthCheckHandler(t *testing.T) {\n    // Create a request to pass to our handler. We don't have any query parameters for now, so we'll\n    // pass 'nil' as the third parameter.\n    req, err := http.NewRequest(\"GET\", \"/health\", nil)\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // We create a ResponseRecorder (which satisfies http.ResponseWriter) to record the response.\n    rr := httptest.NewRecorder()\n    handler := http.HandlerFunc(HealthCheckHandler)\n\n    // Our handlers satisfy http.Handler, so we can call their ServeHTTP method\n    // directly and pass in our Request and ResponseRecorder.\n    handler.ServeHTTP(rr, req)\n\n    // Check the status code is what we expect.\n    if status := rr.Code; status != http.StatusOK {\n        t.Errorf(\"handler returned wrong status code: got %v want %v\",\n            status, http.StatusOK)\n    }\n\n    // Check the response body is what we expect.\n    expected := `{\"alive\": true}`\n    if rr.Body.String() != expected {\n        t.Errorf(\"handler returned unexpected body: got %v want %v\",\n            rr.Body.String(), expected)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Paginated Catalog (None)\nDESCRIPTION: HTTP GET request to fetch a specific portion of the catalog list using pagination parameters. The `n` query parameter limits the number of results per page, and `last` indicates the lexical start point for the current page.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_113\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/_catalog?n=<integer>&last=<integer>\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Registry Proxy Cache (YAML)\nDESCRIPTION: Configures the registry to act as a pull-through cache for an upstream registry like Docker Hub. It requires the `remoteurl` parameter and supports optional `username` and `password` for authenticating with the upstream registry to access private repositories, along with a `ttl` to control cache expiration. Pushing to a registry configured this way is not supported.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\n  ttl: 168h\n```\n\n----------------------------------------\n\nTITLE: Handling Invalid Pagination Response (None)\nDESCRIPTION: 400 Bad Request HTTP response indicating invalid pagination parameters (e.g., 'n' is not a valid integer or is out of range). The JSON body provides detailed error information, including the specific error code like PAGINATION_NUMBER_INVALID, guiding the client on how to correct the request.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_115\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Invalid Range (416 Response) - Docker Registry API\nDESCRIPTION: Shows the 416 Requested Range Not Satisfiable response, which occurs when the provided `Content-Range` header in a chunk upload request is invalid or does not align with the current upload progress.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_90\n\nLANGUAGE: none\nCODE:\n```\n416 Requested Range Not Satisfiable\n```\n\n----------------------------------------\n\nTITLE: Docker Compose file for Registry\nDESCRIPTION: Defines a Docker Compose file for deploying the registry.  Configures restart policy, image, ports, environment variables for TLS and authentication, and volume mounts for data, certificates, and authentication files. Replace `/path` with the actual directories.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nregistry:\n  restart: always\n  image: registry:3\n  ports:\n    - 5000:5000\n  environment:\n    REGISTRY_HTTP_TLS_CERTIFICATE: /certs/domain.crt\n    REGISTRY_HTTP_TLS_KEY: /certs/domain.key\n    REGISTRY_AUTH: htpasswd\n    REGISTRY_AUTH_HTPASSWD_PATH: /auth/htpasswd\n    REGISTRY_AUTH_HTPASSWD_REALM: Registry Realm\n  volumes:\n    - /path/data:/var/lib/registry\n    - /path/certs:/certs\n    - /path/auth:/auth\n```\n\n----------------------------------------\n\nTITLE: Configuring Middleware for Docker Registry in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure middleware injection points in a Docker registry setup under registry, repository, and storage hooks. It shows usage of custom middleware with names and options. The example specifically highlights the cloudfront storage middleware, detailing essential options such as baseurl, private key, key pair ID, duration, IP filtering modes, AWS region filtering, update frequency, and AWS IP ranges URL. This snippet is a reference for configuring middleware with arbitrary options as map structures.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nmiddleware:\n  registry:\n    - name: ARegistryMiddleware\n      options:\n        foo: bar\n  repository:\n    - name: ARepositoryMiddleware\n      options:\n        foo: bar\n  storage:\n    - name: cloudfront\n      options:\n        baseurl: https://my.cloudfronted.domain.com/\n        privatekey: /path/to/pem\n        keypairid: cloudfrontkeypairid\n        duration: 3000s\n        ipfilteredby: awsregion\n        awsregion: us-east-1, use-east-2\n        updatefrequency: 12h\n        iprangesurl: https://ip-ranges.amazonaws.com/ip-ranges.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Notification Endpoints in YAML\nDESCRIPTION: This snippet configures notification endpoints, specifying the URL, headers, timeout, threshold, and backoff settings for a listener.  It also shows how to ignore specific media types and actions for event notifications.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nnotifications:\n  events:\n    includereferences: true\n  endpoints:\n    - name: alistener\n      disabled: false\n      url: https://my.listener.com/event\n      headers: <http.Header>\n      timeout: 1s\n      threshold: 10\n      backoff: 1s\n      ignoredmediatypes:\n        - application/octet-stream\n      ignore:\n        mediatypes:\n           - application/octet-stream\n        actions:\n           - pull\n```\n\n----------------------------------------\n\nTITLE: Running Registry Container with Default Configuration\nDESCRIPTION: Command to run the registry locally using Docker with the default configuration. The registry will be available on port 5000 and automatically restart if it stops.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/dockerhub.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 5000:5000 --restart always --name registry distribution/distribution:edge\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Stack for Registry and Nginx Proxy in YAML\nDESCRIPTION: Describes the 'docker-compose.yml' configuration to orchestrate both the Nginx reverse proxy and the Docker registry using Docker Compose. Specifies necessary images, port mappings, volume mounts for certificates and configuration, and service dependencies. Requires Docker Compose and access to image registries; enables secure proxying and authentication for artifact storage and retrieval.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    nginx:\n      # Note : Only nginx:alpine supports bcrypt.\n      # If you don't need to use bcrypt, you can use a different tag.\n      # Ref. https://github.com/nginxinc/docker-nginx/issues/29\n      image: \"nginx:alpine\"\n      ports:\n        - 5043:443\n      depends_on:\n        - registry\n      volumes:\n        - ./auth:/etc/nginx/conf.d\n        - ./auth/nginx.conf:/etc/nginx/nginx.conf:ro\n\n    registry:\n      image: registry:3\n      volumes:\n        - ./data:/var/lib/registry\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Labeled Timer Metric in Go\nDESCRIPTION: This snippet shows how to create a labeled timer metric for tracking the time it takes to perform different container actions. Labels are used to differentiate between action types (e.g., create, start, delete) without creating separate metrics for each. The last parameter \"action\" represents the label name or key used to distinguish various actions.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-metrics/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\ncontainerActions = ns.NewLabeledTimer(\"container_actions\", \"The number of milliseconds it takes to process each container action\", \"action\")\n```\n\n----------------------------------------\n\nTITLE: Configure Registry Proxy Settings - YAML\nDESCRIPTION: This YAML snippet configures the Docker Registry as a pull-through cache by defining the `proxy` section in the registry's configuration file. It specifies the remote URL of the Docker Hub, optional username and password for accessing private images, and a TTL (time-to-live) value for cached images. The TTL determines how long cached images are stored before being refreshed from the upstream registry.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/mirror.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\n  ttl: 168h\n```\n\n----------------------------------------\n\nTITLE: Building Named Routes with Gorilla Mux in Go\nDESCRIPTION: This code snippet shows how to define named routes and generate URLs by substituting route variables. It includes examples for building full URLs with host and query parameters, enforcing route variable patterns for URL matching, and constructing subrouter URLs. Dependencies include the Gorilla Mux package, and the code demonstrates the `Name()`, `URL()`, `URLHost()`, and `URLPath()` methods.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n r.HandleFunc(\"/articles/{category}/{id:[0-9]+}\", ArticleHandler).\n   Name(\"article\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nurl, err := r.Get(\"article\").URL(\"category\", \"technology\", \"id\", \"42\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n r.Host(\"{subdomain}.example.com\")\n   .Path(\"/articles/{category}/{id:[0-9]+}\")\n   .Queries(\"filter\", \"{filter}\")\n   .HandlerFunc(ArticleHandler)\n   .Name(\"article\")\n\n// Generate full URL with host and query variables\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\", \"category\", \"technology\", \"id\", \"42\", \"filter\", \"gorilla\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n r.HeadersRegexp(\"Content-Type\", \"application/(text|json)\")\n```\n\nLANGUAGE: Go\nCODE:\n```\n// Build only the URL host\nhost, err := r.Get(\"article\").URLHost(\"subdomain\", \"news\")\n\n// Build only the URL path\npath, err := r.Get(\"article\").URLPath(\"category\", \"technology\", \"id\", \"42\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n s := r.Host(\"{subdomain}.example.com\").Subrouter()\n s.Path(\"/articles/{category}/{id:[0-9]+}\").\n   HandlerFunc(ArticleHandler).\n   Name(\"article\")\n\n// Generate URL for the subrouter route\nurl, err := r.Get(\"article\").URL(\"subdomain\", \"news\", \"category\", \"technology\", \"id\", \"42\")\n```\n\nLANGUAGE: Go\nCODE:\n```\nr := mux.NewRouter()\n r.Host(\"{domain}\").\n   Path(\"/{group}/{item_id}\").\n   Queries(\"some_data1\", \"{some_data1}\").\n   Queries(\"some_data2\", \"{some_data2}\").\n   Name(\"article\")\n\n// Retrieve variable names for the route\nvarNames := r.Get(\"article\").GetVarNames()\nfmt.Println(varNames) // Output: [domain group item_id some_data1 some_data2]\n```\n\n----------------------------------------\n\nTITLE: Installing jwt-go package with Go modules\nDESCRIPTION: Command to install the jwt-go package as a dependency in a Go program using the go get command with version specification.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/golang-jwt/jwt/v5\n```\n\n----------------------------------------\n\nTITLE: Reading a Storage Object in Go using Google Cloud Storage Client\nDESCRIPTION: This snippet shows how to read the contents of an object stored in a Google Cloud Storage bucket. It involves creating a reader for the object, handling possible errors, reading all data from the reader, and closing the reader to free resources. It requires a valid client, context, and object identifiers.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cloud.google.com/go/storage/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// Read the object1 from bucket.\nrc, err := client.Bucket(\"bucket\").Object(\"object1\").NewReader(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\ndefer rc.Close()\nbody, err := io.ReadAll(rc)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon to Allow Non-Distributable Artifacts (JSON)\nDESCRIPTION: This JSON configuration snippet for the Docker daemon (`daemon.json`) enables pushing non-distributable image layers to specified private registries. The `allow-nondistributable-artifacts` key accepts an array of registry hostnames (and optional ports). This configuration is necessary in air-gapped setups when using base images with non-distributable layers, ensuring compliance with redistribution terms.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow-nondistributable-artifacts\": [\"myregistrydomain.com:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Labeled Timer Metric with Values in Go\nDESCRIPTION: This code snippet shows how to update the labeled timer metric created in the previous example with a specific action type and duration. The `WithValues` function is used to specify the label value (e.g., \"create\") for the action being tracked, and `UpdateSince` calculates the duration since the `start` time.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-metrics/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\ncontainerActions.WithValues(\"create\").UpdateSince(start)\n```\n\n----------------------------------------\n\nTITLE: Running Registry Container with Custom Configuration File (Bash)\nDESCRIPTION: Demonstrates using the `docker run` command to start the registry container. It mounts a local `config.yml` file to `/etc/distribution/config.yml` inside the container using the `-v` flag, publishes port 5000, sets the restart policy to `always`, and names the container `registry`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ docker run -d -p 5000:5000 --restart=always --name registry \\\n             -v `pwd`/config.yml:/etc/distribution/config.yml \\\n             registry:3\n```\n\n----------------------------------------\n\nTITLE: Aliasing pflag Flag Names with a Normalization Function in Go\nDESCRIPTION: Shows how to use a flag name normalization function (`aliasNormalizeFunc`) to create aliases. In this example, any occurrence of `--old-flag-name` on the command line is treated as `--new-flag-name`. This is useful for renaming flags while maintaining backward compatibility. The function is applied using `SetNormalizeFunc`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc aliasNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tswitch name {\n\tcase \"old-flag-name\":\n\t\tname = \"new-flag-name\"\n\t\tbreak\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(aliasNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Binding a pflag Flag to a Variable in Go\nDESCRIPTION: Illustrates binding a command-line flag directly to an existing integer variable `flagvar` using `flag.IntVar`. This is often done within an `init` function to ensure the flag is registered before parsing. It defines the flag name, default value, and help message.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar flagvar int\nfunc init() {\n    flag.IntVar(&flagvar, \"flagname\", 1234, \"help message for flagname\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection in YAML\nDESCRIPTION: This snippet configures the Redis connection parameters, including TLS settings, address, password, database, timeouts, and pool size. It also shows how to configure Redis TLS with certificate, key, and client CAs.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nredis:\n  tls:\n    certificate: /path/to/cert.crt\n    key: /path/to/key.pem\n    clientcas:\n      - /path/to/ca.pem\n  addrs: [localhost:6379]\n  password: asecret\n  db: 0\n  dialtimeout: 10ms\n  readtimeout: 10ms\n  writetimeout: 10ms\n  maxidleconns: 16\n  poolsize: 64\n  connmaxidletime: 300s\n```\n\n----------------------------------------\n\nTITLE: Retrieving Flag Value from a pflag FlagSet by Name in Go\nDESCRIPTION: Illustrates how to retrieve the value of a specific flag (e.g., \"flagname\") directly from a `pflag.FlagSet` object using type-specific getter methods like `GetInt`. This avoids needing to manage pointers explicitly but requires knowing the flag's type and handling potential errors if the flag doesn't exist or has a different type.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ni, err := flagset.GetInt(\"flagname\")\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Secrets\nDESCRIPTION: Creates Docker secrets for TLS certificate and key.  These secrets are then used to configure the registry service for secure communication.  Assumes the existence of `certs/domain.crt` and `certs/domain.key`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ docker secret create domain.crt certs/domain.crt\n\n$ docker secret create domain.key certs/domain.key\n```\n\n----------------------------------------\n\nTITLE: Importing Cobra Library in Go Source Code\nDESCRIPTION: This snippet demonstrates how to import the Cobra package in a Go source file. Including 'github.com/spf13/cobra' as an import allows access to the core types and functions of the Cobra CLI framework, which is essential for defining commands, flags, and the application's CLI structure.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/spf13/cobra\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx for Docker Registry Proxy in Nginx Configuration\nDESCRIPTION: Defines the main Nginx configuration (typically 'auth/nginx.conf') to set up a secure reverse proxy for an upstream Docker registry with SSL termination. Includes directives for authentication using htpasswd, handling client SSL/TLS, header forwarding, request body constraints, and conditional logic to block unsupported clients. Requires Nginx, SSL certificate/key, and a properly formatted htpasswd file; listens on port 443 and proxies /v2/ requests to the private registry, enforcing HTTP Basic Auth and custom header management.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_1\n\nLANGUAGE: conf\nCODE:\n```\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n\n  upstream docker-registry {\n    server registry:5000;\n  }\n\n  ## Set a variable to help us decide if we need to add the\n  ## 'Docker-Distribution-Api-Version' header.\n  ## The registry always sets this header.\n  ## In the case of nginx performing auth, the header is unset\n  ## since nginx is auth-ing before proxying.\n  map $upstream_http_docker_distribution_api_version $docker_distribution_api_version {\n    '' 'registry/2.0';\n  }\n\n  server {\n    listen 443 ssl;\n    server_name myregistrydomain.com;\n\n    # SSL\n    ssl_certificate /etc/nginx/conf.d/domain.crt;\n    ssl_certificate_key /etc/nginx/conf.d/domain.key;\n\n    # Recommendations from https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html\n    ssl_protocols TLSv1.1 TLSv1.2;\n    ssl_ciphers 'EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH';\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n\n    # disable any limits to avoid HTTP 413 for large image uploads\n    client_max_body_size 0;\n\n    # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)\n    chunked_transfer_encoding on;\n\n    location /v2/ {\n      # Do not allow connections from docker 1.5 and earlier\n      # docker pre-1.6.0 did not properly set the user agent on ping, catch \"Go *\" user agents\n      if ($http_user_agent ~ \"^(docker\\/1\\.(3|4|5(?!\\.[0-9]-dev))|Go ).*$\" ) {\n        return 404;\n      }\n\n      # To add basic authentication to v2 use auth_basic setting.\n      auth_basic \"Registry realm\";\n      auth_basic_user_file /etc/nginx/conf.d/nginx.htpasswd;\n\n      ## If $docker_distribution_api_version is empty, the header is not added.\n      ## See the map directive above where this variable is defined.\n      add_header 'Docker-Distribution-Api-Version' $docker_distribution_api_version always;\n\n      proxy_pass                          http://docker-registry;\n      proxy_set_header  Host              $http_host;   # required for docker client's sake\n      proxy_set_header  X-Real-IP         $remote_addr; # pass on real client's IP\n      proxy_set_header  X-Forwarded-For   $proxy_add_x_forwarded_for;\n      proxy_set_header  X-Forwarded-Proto $scheme;\n      proxy_read_timeout                  900;\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Minimal Gorilla Mux HTTP Server in Go\nDESCRIPTION: This Go code presents a complete example for starting a simple HTTP server using Gorilla Mux. It defines a basic handler ('/'), registers the route, and starts the server on port 8000. Dependencies: github.com/gorilla/mux, net/http, log. Input: Any HTTP request to the root path. Output: Plain text response 'Gorilla!\\n'. Suitable as a template for larger applications.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    \"net/http\"\n    \"log\"\n    \"github.com/gorilla/mux\"\n)\n\nfunc YourHandler(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Gorilla!\\n\"))\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    // Routes consist of a path and a handler function.\n    r.HandleFunc(\"/\", YourHandler)\n\n    // Bind to a port and pass our router in\n    log.Fatal(http.ListenAndServe(\":8000\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Command-Line Flags with pflag in Go\nDESCRIPTION: Demonstrates the essential step of calling `flag.Parse()` to process the command-line arguments and populate the defined flags with their values. This function must be called after all flags are defined.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nflag.Parse()\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth2 Access Token via Refresh Token Grant (HTTP)\nDESCRIPTION: Illustrates an example HTTP POST request to the `/token` endpoint using the `refresh_token` grant type to obtain a new access token. It requires the `refresh_token`, `service`, `client_id`, and the desired `scope` for the new token. The example response includes the original `refresh_token`, a new `access_token`, its `expires_in` duration, and the granted `scope`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/oauth.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nPOST /token HTTP/1.1\nHost: auth.docker.io\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=refresh_token&refresh_token=kas9Da81Dfa8&service=registry-1.docker.io&client_id=dockerengine&scope=repository:samalba/my-app:pull,push\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"refresh_token\":\"kas9Da81Dfa8\",\"access_token\":\"eyJhbGciOiJFUzI1NiIsInR5\":\"expires_in\":900,\"scope\":\"repository:samalba/my-app:pull,repository:samalba/my-app:push\"}\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication with azidentity in Go\nDESCRIPTION: Demonstrates authenticating to Azure in Go using azidentity's ClientSecretCredential. Requires github.com/Azure/azure-sdk-for-go/sdk/azidentity and the Azure Resource Manager arm/subscriptions package. It initializes a credential and uses it to create an authenticated subscriptions client. Parameters: tenantID, clientID, secret. Output: an authenticated armsubscriptions client instance.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Managed Identity with User-Assigned Identity using azidentity in Go\nDESCRIPTION: Demonstrates specifying a user-assigned managed identity with azidentity in Go. Sets ManagedIdentityCredentialOptions with a ClientID, then calls NewManagedIdentityCredential. This allows precise selection of a managed identity on resources where multiple identities are assigned.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n\nopts := azidentity.ManagedIdentityCredentialOptions{ID: azidentity.ClientID(\"...\")}\ncred, err := azidentity.NewManagedIdentityCredential(&opts)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Initializing Logrus Hooks for Multiple Logging Destinations in Go\nDESCRIPTION: Demonstrates how to add hooks to Logrus to send logs to multiple destinations such as an exception tracker (Airbrake) and syslog. This setup allows routing errors of specific severity levels to different logging services.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n  \"gopkg.in/gemnasium/logrus-airbrake-hook.v2\" // the package is named \"airbrake\"\n  logrus_syslog \"github.com/sirupsen/logrus/hooks/syslog\"\n  \"log/syslog\"\n)\n\nfunc init() {\n\n  // Use the Airbrake hook to report errors that have Error severity or above to\n  // an exception tracker. You can create custom hooks, see the Hooks section.\n  log.AddHook(airbrake.NewHook(123, \"xyz\", \"production\"))\n\n  hook, err := logrus_syslog.NewSyslogHook(\"udp\", \"localhost:514\", syslog.LOG_INFO, \"\")\n  if err != nil {\n    log.Error(\"Unable to connect to local syslog daemon\")\n  } else {\n    log.AddHook(hook)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTTP Sink for Event Handling in Go\nDESCRIPTION: This Go snippet demonstrates the implementation of an `httpSink` type, which is designed to send events as HTTP POST requests. It takes an event, marshals it to JSON, and sends it to a configured URL. If the HTTP request fails or the response status is not 200, it returns an error.  It depends on `bytes` package for `NewReader`, and `encoding/json` for `Marshal`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-events/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc (h *httpSink) Write(event Event) error {\n\tp, err := json.Marshal(event)\n\tif err != nil {\n\t\treturn err\n\t}\n\tbody := bytes.NewReader(p)\n\tresp, err := h.client.Post(h.url, \"application/json\", body)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer resp.Body.Close()\n\t\n\tif resp.Status != 200 {\n\t\treturn errors.New(\"unexpected status\")\n\t}\n\n\treturn nil\n}\n\n// implement (*httpSink).Close()\n```\n\n----------------------------------------\n\nTITLE: Configuring Let's Encrypt Hosts in Registry TLS (YAML)\nDESCRIPTION: Defines the `hosts` list within the `http.tls.letsencrypt` section of the registry configuration file. This list specifies the domain names for which Let's Encrypt certificates should be automatically obtained and managed.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nhttp:\n  tls:\n    letsencrypt:\n      hosts: [myregistryaddress.org]\n```\n\n----------------------------------------\n\nTITLE: Using Logrus for structured logging with JSON and Text formatters in Go\nDESCRIPTION: Demonstrates how to configure Logrus to output logs in JSON or plain text formats suitable for log aggregation tools or human reading. Shows example log entries for different formatter settings and how to enable caller reporting for added context.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetFormatter(&log.JSONFormatter{})\n```\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetFormatter(&log.TextFormatter{DisableColors: true, FullTimestamp: true})\n```\n\n----------------------------------------\n\nTITLE: Overriding Registry Configuration via Environment Variable (Shell)\nDESCRIPTION: Sets the `REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY` environment variable to override the `storage.filesystem.rootdirectory` setting specified in the YAML configuration file. The underscores represent nesting levels within the YAML structure.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nREGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/somewhere\n```\n\n----------------------------------------\n\nTITLE: Defining Sink Interface for Event Handling in Go\nDESCRIPTION: This snippet shows the definition of the `Sink` interface, a core concept of the `events` package. Any custom sink must implement this interface to handle events, which consists of `Write` and `Close` methods. `Write` handles writing events to sink, `Close` handles cleanup and closing the sink.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-events/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ntype Sink {\n\tWrite(Event) error\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Standard JSON Error Response Structure in Docker Registry API (none)\nDESCRIPTION: Specifies the generic JSON error response format used across various HTTP failure responses such as 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, and 429 Too Many Requests. Each response includes a JSON array of error objects containing mandatory code and message fields plus optional detail information. The error codes are enumerated with descriptions to guide clients on appropriate error handling strategies based on specific failure cases like authentication failures, invalid repository names, or denied access.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_77\n\nLANGUAGE: none\nCODE:\n```\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Propagate Trace Context in OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to set up OpenTelemetry propagation in Go for distributed trace context forwarding. It includes initializing a propagator, injecting trace contexts into a carrier, and extracting them back from the carrier to continue trace correlation across service boundaries.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/propagation/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/propagation\"\n)\n\n// Initialize global propagator\npropagator := propagation.TraceContext{ }\notel.SetTextMapPropagator(propagator)\n\n// Inject trace context into carrier\ncarrier := propagation.MapCarrier{ }\nctx := context.Background()\notel.GetTextMapPropagator().Inject(ctx, carrier)\n\n// Extract trace context from carrier\nextractedCtx := otel.GetTextMapPropagator().Extract(ctx, carrier)\n\n```\n\n----------------------------------------\n\nTITLE: Defining TLS Security Options for HTTP Server in YAML\nDESCRIPTION: This TLS configuration within the HTTP server section specifies paths to the X.509 certificate and private key files to enable encrypted communication via TLS. It optionally includes client CA certificates for mutual TLS authentication, client authentication mode, minimum allowed TLS version, and customizable cipher suites supported by the server. This section requires valid TLS certificates and keys and integrates with the HTTP server to enforce secure connections. Proper TLS versioning and cipher selection enforce security policies and compatibility.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  certificate: /path/to/x509/public\n  key: /path/to/x509/private\n  clientcas:\n    - /path/to/ca.pem\n    - /path/to/another/ca.pem\n  clientauth: require-and-verify-client-cert\n  minimumtls: tls1.2\n  ciphersuites:\n    - TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n```\n\n----------------------------------------\n\nTITLE: Signature for Instantiation Function Using Options in Go\nDESCRIPTION: Defines the typical signature for a constructor or factory function (`NewT`) that uses the functional options pattern. It accepts required parameters followed by a variadic slice of `Option` arguments to configure the new instance.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nfunc NewT(options ...Option) T {…}\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Registry with Docker Compose\nDESCRIPTION: Starts the Docker Registry using Docker Compose.  This command should be run in the directory containing the `docker-compose.yml` file.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_19\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Authenticating Azure SDK Clients Using DefaultAzureCredential in Go\nDESCRIPTION: This Go snippet demonstrates creating a DefaultAzureCredential instance that aggregates multiple credential types to simplify authentication during development and deployment. The credential is then used to instantiate an Azure Resource Groups client with a specified subscription ID. The snippet includes error handling to ensure the credential is successfully created before use.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ncred, err := azidentity.NewDefaultAzureCredential(nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Requesting OAuth2 Refresh Token via Password Grant (HTTP)\nDESCRIPTION: Shows an example HTTP POST request to the `/token` endpoint using the `password` grant type to obtain both an initial access token and a long-lived refresh token by specifying `access_type=offline`. Includes required parameters like `username`, `password`, `service`, and `client_id`. The example response shows the returned `refresh_token`, `access_token`, `expires_in`, and `scope`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/oauth.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nPOST /token HTTP/1.1\nHost: auth.docker.io\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&username=johndoe&password=A3ddj3w&service=hub.docker.io&client_id=dockerengine&access_type=offline\n\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"refresh_token\":\"kas9Da81Dfa8\",\"access_token\":\"eyJhbGciOiJFUzI1NiIsInR5\",\"expires_in\":900,\"scope\":\"\"}\n```\n\n----------------------------------------\n\nTITLE: Running go-redis Tests with Redis in Shell\nDESCRIPTION: Demonstrates how to execute go-redis test suite using either the default setup or a running Redis server on a custom port. The 'go test' command runs the test suite. Setting the REDIS_PORT environment variable allows redirecting the tests to a specific Redis instance. Outputs are test results as printed to standard output.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ngo test\n```\n\nLANGUAGE: Shell\nCODE:\n```\nREDIS_PORT=9999 go test <your options>\n```\n\n----------------------------------------\n\nTITLE: Viewing Endpoint Status via /debug/vars (JSON)\nDESCRIPTION: Provides an example JSON output from the `/debug/vars` interface (typically `http://localhost:5001/debug/vars`), showcasing the configuration and metrics for notification endpoints. Key metrics include `Pending` (queue size), `Events`, `Successes`, `Failures`, and `Errors`, which are vital for assessing endpoint health and identifying potential issues.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"notifications\": {\n    \"endpoints\": [\n      {\n        \"name\": \"local-5003\",\n        \"url\": \"http://localhost:5003/callback\",\n        \"Headers\": {\n          \"Authorization\": [\n            \"Bearer \\u003can example token\\u003e\"\n          ]\n        },\n        \"Timeout\": 1000000000,\n        \"Threshold\": 10,\n        \"Backoff\": 1000000000,\n        \"Metrics\": {\n          \"Pending\": 76,\n          \"Events\": 76,\n          \"Successes\": 0,\n          \"Failures\": 0,\n          \"Errors\": 46,\n          \"Statuses\": {\n          }\n        }\n      },\n      {\n        \"name\": \"local-8083\",\n        \"url\": \"http://localhost:8083/callback\",\n        \"Headers\": null,\n        \"Timeout\": 1000000000,\n        \"Threshold\": 10,\n        \"Backoff\": 1000000000,\n        \"Metrics\": {\n          \"Pending\": 0,\n          \"Events\": 76,\n          \"Successes\": 76,\n          \"Failures\": 0,\n          \"Errors\": 28,\n          \"Statuses\": {\n            \"202 Accepted\": 76\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding registry CA certificate to Red Hat Enterprise Linux trusted certificates\nDESCRIPTION: Commands to add a self-signed certificate to Red Hat Enterprise Linux's trusted certificate store. This enables Docker to authenticate with the registry when basic authentication is configured.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/insecure.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cp certs/domain.crt /etc/pki/ca-trust/source/anchors/myregistrydomain.com.crt\nupdate-ca-trust\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error for Blob Upload in Docker Registry API\nDESCRIPTION: HTTP 400 response format when there's an error processing the upload. Can occur due to digest mismatch, invalid repository name, or other blob upload issues requiring the upload to be restarted.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_84\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CA trust updates on Oracle Linux\nDESCRIPTION: Command to enable CA trust updates on Oracle Linux systems when working with self-signed certificates for Docker registry authentication.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/insecure.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ update-ca-trust enable\n```\n\n----------------------------------------\n\nTITLE: Verifying App Service managed identity endpoint - cURL\nDESCRIPTION: This snippet uses `curl` to verify if the managed identity endpoint is available within an Azure App Service environment. It assumes that the `IDENTITY_ENDPOINT` and `IDENTITY_SECRET` environment variables are set. The command retrieves an access token and should be executed via SSH.  The output, which contains the access token, should not be shared for security reasons.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"$IDENTITY_ENDPOINT?resource=https://management.core.windows.net&api-version=2019-08-01\" -H \"X-IDENTITY-HEADER: $IDENTITY_HEADER\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Method Middleware with Gorilla Mux in Go\nDESCRIPTION: This Go snippet shows how to use Gorilla Mux's CORSMethodMiddleware to set the Access-Control-Allow-Methods header automatically based on route definitions. It demonstrates registering a handler for multiple HTTP methods (including OPTIONS), applying the CORS middleware, and explicitly setting Access-Control-Allow-Origin in a custom handler. Dependencies: github.com/gorilla/mux for routing and middleware. Input: HTTP requests to '/foo'. Output: Appropriate CORS headers in the HTTP response. Limitation: You must explicitly include the OPTIONS method matcher for CORS headers to be set.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"net/http\"\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    r := mux.NewRouter()\n\n    // IMPORTANT: you must specify an OPTIONS method matcher for the middleware to set CORS headers\n    r.HandleFunc(\"/foo\", fooHandler).Methods(http.MethodGet, http.MethodPut, http.MethodPatch, http.MethodOptions)\n    r.Use(mux.CORSMethodMiddleware(r))\n    \n    http.ListenAndServe(\":8080\", r)\n}\n\nfunc fooHandler(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Access-Control-Allow-Origin\", \"*\")\n    if r.Method == http.MethodOptions {\n        return\n    }\n\n    w.Write([]byte(\"foo\"))\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Authenticated User Password File with Docker and htpasswd in Console\nDESCRIPTION: Generates a .htpasswd file containing 'testuser' with bcrypt-encrypted 'testpassword' using the Dockerized 'htpasswd' utility from the official httpd image. This step is essential for enforcing basic authentication in Nginx and should be run from the command line with Docker installed. The command outputs an htpasswd-formatted text file to 'auth/nginx.htpasswd' for use as the authentication backend.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker run --rm --entrypoint htpasswd httpd -Bbn testuser testpassword > auth/nginx.htpasswd\n```\n\n----------------------------------------\n\nTITLE: Using Different Logging Levels with Logrus in Go\nDESCRIPTION: Shows the seven logging levels available in Logrus (Trace, Debug, Info, Warning, Error, Fatal, Panic) and demonstrates how to use them. Also shows how to configure the minimum logging level for a logger.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nlog.Trace(\"Something very low level.\")\nlog.Debug(\"Useful debugging information.\")\nlog.Info(\"Something noteworthy happened!\")\nlog.Warn(\"You should probably take a look at this.\")\nlog.Error(\"Something failed but I'm not quitting.\")\n// Calls os.Exit(1) after logging\nlog.Fatal(\"Bye.\")\n// Calls panic() after logging\nlog.Panic(\"I'm bailing.\")\n```\n\nLANGUAGE: go\nCODE:\n```\n// Will log anything that is info or above (warn, error, fatal, panic). Default.\nlog.SetLevel(log.InfoLevel)\n```\n\n----------------------------------------\n\nTITLE: Running a Secure External Docker Registry Using TLS Certificates - console\nDESCRIPTION: Starts a registry container configured to use TLS for secure communication on port 443, mounting certificate files via a bind mount and setting environment variables to locate the certificate and key inside the container. Uses '--restart=always' for resilience. Requires valid CA-issued .crt and .key files placed in a 'certs' directory. Enables clients to securely push and pull images via HTTPS.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  --restart=always \\\n  --name registry \\\n  -v \"$(pwd)\"/certs:/certs \\\n  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \\\n  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\n  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\n  -p 443:443 \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boolean Option (Default True) in Go\nDESCRIPTION: Demonstrates implementing the `Option` interface for a boolean setting that defaults to `true`. An unexported type (`defaultTrueOption`) holds the value, and an exported function (`WithoutOption`) returns an instance configured to set the boolean field to `false`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\ntype defaultTrueOption bool\n\nfunc (o defaultTrueOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithoutOption sets a T to have Bool option excluded.\nfunc WithoutOption() Option {\n\treturn defaultTrueOption(false)\n}\n```\n\n----------------------------------------\n\nTITLE: Example of an event envelope with multiple webhook events in JSON\nDESCRIPTION: This JSON snippet shows an event envelope containing multiple independent registry events grouped together in a single webhook notification. Each event provides its own unique ID, timestamp, action ('push'), target metadata including media type and digest, request context, actor information, and source node details. Event envelopes help reduce the number of HTTP requests by batching events, though there is no implied relationship between events within an envelope. The media type for the envelope is 'application/vnd.docker.distribution.events.v2+json'.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"events\": [ \"...\" ]\n}\n\n// Example representation (truncated inline for brevity):\n\n{\n  \"events\": [\n    {\n      \"id\": \"asdf-asdf-asdf-asdf-0\",\n      \"timestamp\": \"2006-01-02T15:04:05Z\",\n      \"action\": \"push\",\n      \"target\": {\n        \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n        \"digest\": \"sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf\",\n        \"length\": 1,\n        \"repository\": \"library/test\",\n        \"url\": \"https://example.com/v2/library/test/manifests/sha256:c3b3692957d439ac1928219a83fac91e7bf96c153725526874673ae1f2023f8d5\"\n      },\n      \"request\": {\n        \"id\": \"asdfasdf\",\n        \"addr\": \"client.local\",\n        \"host\": \"registrycluster.local\",\n        \"method\": \"PUT\",\n        \"useragent\": \"test/0.1\"\n      },\n      \"actor\": {\n        \"name\": \"test-actor\"\n      },\n      \"source\": {\n        \"addr\": \"hostname.local:port\"\n      }\n    },\n    // Other events omitted for brevity\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Registry Configuration Example (YAML)\nDESCRIPTION: A detailed example YAML file showcasing various configuration options for a Docker registry. It includes settings for version, logging, multiple storage backends (filesystem, azure, gcs, s3, inmemory), authentication methods (silly, token, htpasswd), middleware, HTTP/TLS settings (including Let's Encrypt and debug endpoints), notifications, Redis caching, health checks, proxy settings, and validation rules.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\nlog:\n  accesslog:\n    disabled: true\n  level: debug\n  formatter: text\n  fields:\n    service: registry\n    environment: staging\n  hooks:\n    - type: mail\n      disabled: true\n      levels:\n        - panic\n      options:\n        smtp:\n          addr: mail.example.com:25\n          username: mailuser\n          password: password\n          insecure: true\n        from: sender@example.com\n        to:\n          - errors@example.com\nloglevel: debug # deprecated: use \"log\"\nstorage:\n  filesystem:\n    rootdirectory: /var/lib/registry\n    maxthreads: 100\n  azure:\n    accountname: accountname\n    accountkey: base64encodedaccountkey\n    container: containername\n    rootdirectory: /az/object/name/prefix\n    credentials:\n      type: client_secret\n      clientid: client_id_string\n      tenantid: tenant_id_string\n      secret: secret_string\n    max_retries: 10\n    retry_delay: 100ms\n  gcs:\n    bucket: bucketname\n    keyfile: /path/to/keyfile\n    credentials:\n      type: service_account\n      project_id: project_id_string\n      private_key_id: private_key_id_string\n      private_key: private_key_string\n      client_email: client@example.com\n      client_id: client_id_string\n      auth_uri: http://example.com/auth_uri\n      token_uri: http://example.com/token_uri\n      auth_provider_x509_cert_url: http://example.com/provider_cert_url\n      client_x509_cert_url: http://example.com/client_cert_url\n    rootdirectory: /gcs/object/name/prefix\n    chunksize: 5242880\n  s3:\n    accesskey: awsaccesskey\n    secretkey: awssecretkey\n    region: us-west-1\n    regionendpoint: http://myobjects.local\n    forcepathstyle: true\n    accelerate: false\n    bucket: bucketname\n    encrypt: true\n    keyid: mykeyid\n    secure: true\n    v4auth: true\n    chunksize: 5242880\n    multipartcopychunksize: 33554432\n    multipartcopymaxconcurrency: 100\n    multipartcopythresholdsize: 33554432\n    rootdirectory: /s3/object/name/prefix\n    usedualstack: false\n    loglevel: debug\n  inmemory:  # This driver takes no parameters\n  tag:\n    concurrencylimit: 8\n  delete:\n    enabled: false\n  redirect:\n    disable: false\n  cache:\n    blobdescriptor: redis\n    blobdescriptorsize: 10000\n  maintenance:\n    uploadpurging:\n      enabled: true\n      age: 168h\n      interval: 24h\n      dryrun: false\n    readonly:\n      enabled: false\nauth:\n  silly:\n    realm: silly-realm\n    service: silly-service\n  token:\n    autoredirect: true\n    realm: token-realm\n    service: token-service\n    issuer: registry-token-issuer\n    rootcertbundle: /root/certs/bundle\n    jwks: /path/to/jwks\n    signingalgorithms:\n        - EdDSA\n        - HS256\n  htpasswd:\n    realm: basic-realm\n    path: /path/to/htpasswd\nmiddleware:\n  registry:\n    - name: ARegistryMiddleware\n      options:\n        foo: bar\n  repository:\n    - name: ARepositoryMiddleware\n      options:\n        foo: bar\n  storage:\n    - name: cloudfront\n      options:\n        baseurl: https://my.cloudfronted.domain.com/\n        privatekey: /path/to/pem\n        keypairid: cloudfrontkeypairid\n        duration: 3000s\n        ipfilteredby: awsregion\n        awsregion: us-east-1, use-east-2\n        updatefrequency: 12h\n        iprangesurl: https://ip-ranges.amazonaws.com/ip-ranges.json\n  storage:\n    - name: redirect\n      options:\n        baseurl: https://example.com/\nhttp:\n  addr: localhost:5000\n  prefix: /my/nested/registry/\n  host: https://myregistryaddress.org:5000\n  secret: asecretforlocaldevelopment\n  relativeurls: false\n  draintimeout: 60s\n  tls:\n    certificate: /path/to/x509/public\n    key: /path/to/x509/private\n    clientcas:\n      - /path/to/ca.pem\n      - /path/to/another/ca.pem\n    clientauth: require-and-verify-client-cert\n    letsencrypt:\n      cachefile: /path/to/cache-file\n      email: emailused@letsencrypt.com\n      hosts: [myregistryaddress.org]\n      directoryurl: https://acme-v02.api.letsencrypt.org/directory\n  debug:\n    addr: localhost:5001\n    prometheus:\n      enabled: true\n      path: /metrics\n  headers:\n    X-Content-Type-Options: [nosniff]\n  http2:\n    disabled: false\n  h2c:\n    enabled: false\nnotifications:\n  events:\n    includereferences: true\n  endpoints:\n    - name: alistener\n      disabled: false\n      url: https://my.listener.com/event\n      headers: <http.Header>\n      timeout: 1s\n      threshold: 10\n      backoff: 1s\n      ignoredmediatypes:\n        - application/octet-stream\n      ignore:\n        mediatypes:\n           - application/octet-stream\n        actions:\n           - pull\nredis:\n  tls:\n    certificate: /path/to/cert.crt\n    key: /path/to/key.pem\n    clientcas:\n      - /path/to/ca.pem\n  addrs: [localhost:6379]\n  password: asecret\n  db: 0\n  dialtimeout: 10ms\n  readtimeout: 10ms\n  writetimeout: 10ms\n  maxidleconns: 16\n  poolsize: 64\n  connmaxidletime: 300s\n  tls:\n    enabled: false\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\n  file:\n    - file: /path/to/checked/file\n      interval: 10s\n  http:\n    - uri: http://server.to.check/must/return/200\n      headers:\n        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]\n      statuscode: 200\n      timeout: 3s\n      interval: 10s\n      threshold: 3\n  tcp:\n    - addr: redis-server.domain.com:6379\n      timeout: 3s\n      interval: 10s\n      threshold: 3\nproxy:\n  remoteurl: https://registry-1.docker.io\n  username: [username]\n  password: [password]\n  exec:\n    command: docker-credential-helper\n    lifetime: 1h\n  ttl: 168h\nvalidation:\n  manifests:\n    urls:\n      allow:\n        - ^https?://([^/]+\\.)*example\\.com/\n      deny:\n        - ^https?://www\\.example\\.com/\n    indexes:\n      platforms: List\n      platformlist:\n      - architecture: amd64\n        os: linux\n```\n\n----------------------------------------\n\nTITLE: Importing jwt-go v5 in Go\nDESCRIPTION: Shows the new import path for using `jwt-go` version 5.0.0 and above.  This is a breaking change compared to earlier versions.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Initializing OTLP Trace gRPC Exporter in Go\nDESCRIPTION: This snippet explains the process of initializing an OTLP trace exporter that uses gRPC in Go. It details dependencies like the OpenTelemetry SDK, the OTLP gRPC exporter package, and configuration parameters needed to set up the exporter. The code sets up the exporter, which is used to send trace data to an OpenTelemetry Collector or backend endpoint.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n)\n\n// Create a new OTLP trace exporter over gRPC\nexporter, err := otlptracegrpc.New(context.Background(),\n\totlptracegrpc.WithEndpoint(\"<collector-endpoint>\"),\n\totlptracegrpc.WithInsecure(),\n)\nif err != nil {\n\t// Handle error during exporter creation\n}\n// The exporter instance can now be used to configure TracerProvider\n```\n\n----------------------------------------\n\nTITLE: Rate Limiting Error Response in Docker Registry API\nDESCRIPTION: HTTP 429 response format when client makes too many requests within a time interval. Returns a JSON error body with TOOMANYREQUESTS code to indicate rate limiting is in effect.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_81\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Signature Generation\nDESCRIPTION: This snippet describes the process of signing the JWT using the specified algorithm (e.g., ES256) with a private key. The header and claim set are encoded in URL-safe base64, then concatenated with a '.', and signed to produce the signature. The resulting JWT is a string combining the encoded header, payload, and signature, used for client authentication.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/jwt.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\nBase64URLEncode(header) + '.' + Base64URLEncode(claim_set)  /* then signed with private key using ES256 */\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: Authentication Required - json\nDESCRIPTION: Presents an HTTP 401 Unauthorized error response for unauthenticated Docker Registry actions, returning a JSON error object as response body. Standard headers such as WWW-Authenticate specify authentication, while Content-Length and Content-Type describe the payload. The JSON error array can enumerate multiple issues; each error object includes a code, message, and optionally detailed diagnostics. Prerequisites: requests must lack valid authentication. Output is a JSON error report; all fields (codes, messages) map directly to standard registry error types.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_66\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Unabridged Catalog Response (None)\nDESCRIPTION: Successful 200 OK HTTP response for the unabridged catalog request. Contains a JSON body listing all available repository names and includes the Content-Length header.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_112\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"repositories\": [\n\t\t<name>,\n\t\t...\n\t],\n}\n```\n\n----------------------------------------\n\nTITLE: Showing Azure CLI account details\nDESCRIPTION: This Azure CLI command displays the currently logged-in account details. It's used to verify the account being used by the Azure CLI before attempting to obtain tokens.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_3\n\nLANGUAGE: azurecli\nCODE:\n```\naz account show\n```\n\n----------------------------------------\n\nTITLE: Successful Paginated Catalog Response (None)\nDESCRIPTION: Successful 200 OK HTTP response for the paginated catalog request. Includes the JSON body with a subset of repository names, Content-Length header, and a Link header (or JSON field) compliant with RFC5988 to navigate to the next page of results if available.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_114\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Length: <length>\nLink: <<url>?n=<last n value>&last=<last entry from response>>; rel=\"next\"\nContent-Type: application/json\n\n{\n\t\"repositories\": [\n\t\t<name>,\n\t\t...\n\t],\n\t\"next\": \"<url>?last=<name>&n=<last value of n>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Azure Active Directory\nDESCRIPTION: Creates an Azure Blob Storage client using Azure Active Directory authentication with the DefaultAzureCredential.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// create a credential for authenticating with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle err\n\n// create an azblob.Client for the specified storage account that uses the above credential\nclient, err := azblob.NewClient(\"https://MYSTORAGEACCOUNT.blob.core.windows.net/\", cred, nil)\n// TODO: handle err\n```\n\n----------------------------------------\n\nTITLE: Deleting a Manifest in Docker Registry - HTTP\nDESCRIPTION: Provides an example HTTP DELETE request to remove a manifest by name and reference (must be a digest). The request requires a Host header and RFC7235-compliant Authorization. Inputs: Correct repository name and manifest digest, auth token. Output: The manifest is deleted if found and authorized.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_33\n\nLANGUAGE: HTTP\nCODE:\n```\nDELETE /v2/<name>/manifests/<reference>\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\n----------------------------------------\n\nTITLE: Client Certificate Authentication with autorest/adal in Go\nDESCRIPTION: Illustrates performing Azure authentication with a client certificate using autorest/adal in Go. It loads a PKCS#12 certificate file, decodes it, and initializes a ServicePrincipalToken using certificate and RSA private key. Dependencies include os, adal, and the Azure subscriptions SDK. Inputs: tenantID, clientID, certificate path. Output: subscriptions client authorized via certificate.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncertificate, rsaPrivateKey, err := decodePkcs12(certData, \"\")\nhandle(err)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromCertificate(\n    *oauthConfig, clientID, certificate, rsaPrivateKey, \"https://management.azure.com/\",\n)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Handling 403 Forbidden Error for Access Denied (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 403 status code when the authenticated client lacks the necessary permissions for the requested operation. Includes the `DENIED` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment-specific Logging in Go with Logrus\nDESCRIPTION: Demonstrates how to set up environment-specific logging configurations with Logrus. In this example, JSON formatting is used in production while the default text formatter is used in other environments.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  log \"github.com/sirupsen/logrus\"\n)\n\nfunc init() {\n  // do something here to set environment depending on an environment variable\n  // or command-line flag\n  if Environment == \"production\" {\n    log.SetFormatter(&log.JSONFormatter{})\n  } else {\n    // The TextFormatter is default, you don't actually have to do this.\n    log.SetFormatter(&log.TextFormatter{})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automating TLS with Let's Encrypt Configuration in YAML\nDESCRIPTION: This optional letsencrypt configuration enables automated TLS certificate management via the Let's Encrypt ACME service. It defines a cache file to store issued certificates, an email address for Let's Encrypt registration, allowed hostnames for certificate issuance, and an ACME directory URL. Usage requires running the registry accessible over port 443 with valid hosts specified to prevent certificate issuance abuses. It depends on having the necessary CA certificates installed on the system to verify returned certificates and requires network accessibility for validation.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nletsencrypt:\n  cachefile: /path/to/cache-file\n  email: emailused@letsencrypt.com\n  hosts: [myregistryaddress.org]\n  directoryurl: https://acme-v02.api.letsencrypt.org/directory\n```\n\n----------------------------------------\n\nTITLE: Declaring an Integer Flag with pflag in Go\nDESCRIPTION: Shows how to declare an integer command-line flag named `flagname` using `flag.Int`. It initializes a pointer `ip` to an integer, sets a default value of 1234, and provides a help message.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags\nDESCRIPTION: This snippet demonstrates retrieving the tags for a specific image repository using a GET request to `/v2/<name>/tags/list`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_18\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/tags/list\n```\n\n----------------------------------------\n\nTITLE: Pushing Tagged Image to the Local Distribution Registry - sh\nDESCRIPTION: This command pushes the image tagged as 'localhost:5000/myfirstimage' to the running local distribution registry on port 5000. It uploads the image layers and metadata, making it available for pulling from the registry. Prerequisites include a running registry server and the image correctly tagged to refer to the registry endpoint. Input is the image tag; output is the uploaded image stored in the registry.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker push localhost:5000/myfirstimage\n```\n\n----------------------------------------\n\nTITLE: Logging into the Docker Registry\nDESCRIPTION: Logs into the Docker Registry using the Docker CLI. Requires a username and password configured in the htpasswd file.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_17\n\nLANGUAGE: console\nCODE:\n```\n$ docker login myregistrydomain.com:5000\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Not Found Error for Unknown Repository (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 404 status code when an operation targets a repository name not known to the registry. Includes the `NAME_UNKNOWN` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_100\n\nLANGUAGE: json\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests\nDESCRIPTION: Command to run Go tests across multiple CPU cores with a timeout limit before submitting a PR.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Handling 401 Unauthorized Error Response (HTTP/JSON)\nDESCRIPTION: Shows the HTTP 401 response format, including the mandatory `WWW-Authenticate` header and a JSON body detailing the `UNAUTHORIZED` error. This indicates the client needs to authenticate before retrying the operation.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_99\n\nLANGUAGE: http\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Apache Reverse Proxy Configuration File (sh)\nDESCRIPTION: Generates the `httpd.conf` file for the Apache proxy. It configures an SSL virtual host, proxies requests for `/v2` to a backend registry, enforces Basic Authentication using htpasswd and group files, and restricts write access to a specific user group.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat <<EOF > auth/httpd.conf\nLoadModule headers_module modules/mod_headers.so\n\nLoadModule authn_file_module modules/mod_authn_file.so\nLoadModule authn_core_module modules/mod_authn_core.so\nLoadModule authz_groupfile_module modules/mod_authz_groupfile.so\nLoadModule authz_user_module modules/mod_authz_user.so\nLoadModule authz_core_module modules/mod_authz_core.so\nLoadModule auth_basic_module modules/mod_auth_basic.so\nLoadModule access_compat_module modules/mod_access_compat.so\n\nLoadModule log_config_module modules/mod_log_config.so\n\nLoadModule ssl_module modules/mod_ssl.so\n\nLoadModule proxy_module modules/mod_proxy.so\nLoadModule proxy_http_module modules/mod_proxy_http.so\n\nLoadModule unixd_module modules/mod_unixd.so\n\n<IfModule ssl_module>\n    SSLRandomSeed startup builtin\n    SSLRandomSeed connect builtin\n</IfModule>\n\n<IfModule unixd_module>\n    User daemon\n    Group daemon\n</IfModule>\n\nServerAdmin you@example.com\n\nErrorLog /proc/self/fd/2\n\nLogLevel warn\n\n<IfModule log_config_module>\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\"\" combined\n    LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b\" common\n\n    <IfModule logio_module>\n      LogFormat \"%h %l %u %t \\\"%r\\\" %>s %b \\\"%{Referer}i\\\" \\\"%{User-Agent}i\\\" %I %O\" combinedio\n    </IfModule>\n\n    CustomLog /proc/self/fd/1 common\n</IfModule>\n\nServerRoot \"/usr/local/apache2\"\n\nListen 5043\n\n<Directory />\n    AllowOverride none\n    Require all denied\n</Directory>\n\n<VirtualHost *:5043>\n\n  ServerName myregistrydomain.com\n\n  SSLEngine on\n  SSLCertificateFile /usr/local/apache2/conf/domain.crt\n  SSLCertificateKeyFile /usr/local/apache2/conf/domain.key\n\n  ## SSL settings recommendation from: https://raymii.org/s/tutorials/Strong_SSL_Security_On_Apache2.html\n  # Anti CRIME\n  SSLCompression off\n\n  # POODLE and other stuff\n  SSLProtocol all -SSLv2 -SSLv3 -TLSv1\n\n  # Secure cypher suites\n  SSLCipherSuite EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH\n  SSLHonorCipherOrder on\n\n  Header always set \"Docker-Distribution-Api-Version\" \"registry/2.0\"\n  Header onsuccess set \"Docker-Distribution-Api-Version\" \"registry/2.0\"\n  RequestHeader set X-Forwarded-Proto \"https\"\n\n  ProxyRequests     off\n  ProxyPreserveHost on\n\n  # no proxy for /error/ (Apache HTTPd errors messages)\n  ProxyPass /error/ !\n\n  ProxyPass        /v2 http://registry:5000/v2\n  ProxyPassReverse /v2 http://registry:5000/v2\n\n  <Location /v2>\n    Order deny,allow\n    Allow from all\n    AuthName \"Registry Authentication\"\n    AuthType basic\n    AuthUserFile \"/usr/local/apache2/conf/httpd.htpasswd\"\n    AuthGroupFile \"/usr/local/apache2/conf/httpd.groups\"\n\n    # Read access to authentified users\n    <Limit GET HEAD>\n      Require valid-user\n    </Limit>\n\n    # Write access to docker-deployer only\n    <Limit POST PUT DELETE PATCH>\n      Require group pusher\n    </Limit>\n\n  </Location>\n\n</VirtualHost>\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Index Platform Existence Validation (YAML)\nDESCRIPTION: Configures validation for image index manifests, specifically controlling whether the registry checks for the existence of referenced platform-specific images. The `platforms` parameter can be set to `all` (default), `none`, or `list`. When set to `list`, the `platformlist` array specifies which platforms (defined by `os` and `architecture`) to validate for existence in the registry. This setting is experimental and disabling validation may impact tooling expecting complete indexes.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  manifests:\n    indexes:\n      platforms: [all|none|list]\n      platformlist:\n      - os: linux\n        architecture: amd64\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image Layer by Name and Digest (HTTP)\nDESCRIPTION: Describes the HTTP GET request to download a specific image layer (blob) from the registry. Access is based on the image `name`, but the layer is uniquely identified across the registry by its `digest`. The endpoint may issue redirects (307 or 302) and should support caching and range requests.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_9\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/blobs/<digest>\n```\n\n----------------------------------------\n\nTITLE: Configuring Tag Concurrency Limit - YAML\nDESCRIPTION: This snippet configures the concurrency limit for tag lookups. It sets the `concurrencylimit` to `8` under the `tag` section. When a value isn't provided, `GOMAXPROCS` is used for the concurrency limit. This optimization helps improve performance when deleting manifests.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ntag:\n  concurrencylimit: 8\n```\n\n----------------------------------------\n\nTITLE: Running Vet Script in Bash\nDESCRIPTION: Command to run the vet script that checks for common Go code issues before submitting a PR.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/vet.sh\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying LogRecord SeverityText in Go\nDESCRIPTION: Defines methods to retrieve and assign the textual representation of the severity (`SeverityText`) on a `Record`. This complements the numeric severity and enables human-readable severity labeling in logs. These methods follow the OpenTelemetry Logs Data Model for severity text.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) SeverityText() string\nfunc (r *Record) SetSeverityText(s string)\n```\n\n----------------------------------------\n\nTITLE: Pulling Docker Image Manifest by Name and Reference (HTTP)\nDESCRIPTION: Describes the HTTP GET request used to retrieve a specific image manifest from the registry. The request requires the image `name` and a `reference`, which can be a tag or a digest. Clients should include an `Accept` header to specify supported manifest content types.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/manifests/<reference>\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: No Such Repository - json\nDESCRIPTION: Describes the HTTP 404 Not Found error for cases when the Docker Registry cannot locate the referenced repository. Returns a JSON document containing one or more error objects, where each includes a code and a human-readable message, and detailed diagnostic context if available. Standard Content-Length and Content-Type headers specify the response structure. Triggered by requests referencing unknown repositories; outputs a JSON error array conforming to registry API conventions.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_67\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Garbage Collection Command in Docker Registry\nDESCRIPTION: Command syntax for running garbage collection in Docker Registry, with optional flags for dry run mode, deleting untagged manifests, and suppressing output.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/garbage-collection.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/registry garbage-collect [--dry-run] [--delete-untagged] [--quiet] /path/to/config.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Default Credentials for Managed/Workload Identity\nDESCRIPTION: This configuration snippet demonstrates setting up the Azure storage driver to utilize Azure's default credential chain by specifying `default` as the credential `type`. This approach is suitable for authentication via Azure Managed Identity or Azure Workload Identity in AKS, simplifying configuration by automatically leveraging the environment's identity without needing explicit client IDs, tenant IDs, or secrets. Only the storage `accountname` and `container` name are required alongside the credential type.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/storage-drivers/azure.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproperties: {\n  azure: {\n    accountname: accountname\n    container: containername\n    credentials: {\n      type: default\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Root logr Logger in Go\nDESCRIPTION: Demonstrates the typical initialization of a root `logr.Logger` within the `main` function. It uses a placeholder `logimpl` package to represent a chosen logging implementation, creating a logger instance early in the application lifecycle.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n    func main() {\n        // ... other setup code ...\n\n        // Create the \"root\" logger.  We have chosen the \"logimpl\" implementation,\n        // which takes some initial parameters and returns a logr.Logger.\n        logger := logimpl.New(param1, param2)\n\n        // ... other setup code ...\n\n```\n\n----------------------------------------\n\nTITLE: Docker registry systemd service file\nDESCRIPTION: Defines a systemd service configuration to manage a Docker container running a registry. It ensures the container starts on boot, restarts automatically, and handles cleanup before start. The service mounts a named volume for persistent storage and exposes port 5000.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/systemd.md#_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Distribution registry\nAfter=docker.service\nRequires=docker.service\n\n[Service]\n#TimeoutStartSec=0\nRestart=always\nExecStartPre=-/usr/bin/docker stop %N\nExecStartPre=-/usr/bin/docker rm %N\nExecStart=/usr/bin/docker run --name %N \\\n    -v registry:/var/lib/registry \\\n    -p 5000:5000 \\\n    registry:3\n\n[Install]\nWantedBy=multi-user.target\n```\n\n----------------------------------------\n\nTITLE: Generating Semantic Conventions\nDESCRIPTION: This snippet demonstrates how to generate new versions of the `semconv` package using the `semconv-generate` make target. It requires a local copy of the OpenTelemetry Semantic Conventions and the `otel/semconvgen` Docker image.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=\"v1.21.0\" # Change to the release version you are generating.\nexport OTEL_SEMCONV_REPO=\"/absolute/path/to/opentelemetry/semantic-conventions\"\ndocker pull otel/semconvgen:latest\nmake semconv-generate # Uses the exported TAG and OTEL_SEMCONV_REPO.\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Not Found during Upload Deletion (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 404 status code when attempting to delete an unknown blob upload (UUID not found). Includes the `BLOB_UPLOAD_UNKNOWN` error code. Client can safely ignore this error and assume the upload is deleted.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_106\n\nLANGUAGE: json\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Diffing with the Pre-Release Branch\nDESCRIPTION: This command shows the differences between the current branch and the pre-release branch, which includes the version changes. It helps in verifying the changes before merging.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\ngit diff ...prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Authentication with azidentity in Go\nDESCRIPTION: Illustrates using managed identity authentication with azidentity in Go. Supports both system-assigned and user-assigned identities through ManagedIdentityCredentialOptions. It instantiates a ManagedIdentityCredential and passes it to armsubscriptions.NewClient for client authentication. No explicit secrets are required except optional identity specification.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewManagedIdentityCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Pulling a Base Image from Docker Hub using Docker CLI - sh\nDESCRIPTION: This shell command fetches the latest 'ubuntu' image from Docker Hub to the local Docker environment. It is a prerequisite step to tag and push images into the private distribution registry. Dependencies include network connectivity and access to Docker Hub. The input is the image name 'ubuntu'; output is the local presence of the Ubuntu image.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ubuntu\n```\n\n----------------------------------------\n\nTITLE: Pushing Tags to Upstream\nDESCRIPTION: This command pushes the newly created tags to the upstream remote, including all submodules. It is important to push to the correct repository.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ngit push upstream <new tag>\ngit push upstream <submodules-path/new tag>\n...\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags: Paginated Request\nDESCRIPTION: This snippet shows how to initiate a paginated request for image tags. The `n` parameter limits the number of tags returned per page.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_20\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/tags/list?n=<integer>\n```\n\n----------------------------------------\n\nTITLE: Set Exemplar Filter to Deny All Measurements\nDESCRIPTION: This snippet sets the exemplar filter to `always_off`, preventing any measurements from being exported as exemplars. It is useful for disabling exemplars selectively.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_off\n```\n\n----------------------------------------\n\nTITLE: Implementing a Health Check Handler with Gorilla Mux in Go\nDESCRIPTION: This Go code defines a simple health check HTTP handler and integrates it with a Gorilla Mux router. The HealthCheckHandler responds with a 200 status and a JSON body. It shows how to create handlers, register them, and launch a server. Dependencies: github.com/gorilla/mux, net/http, log, and optionally io for response writing. Input: GET requests to '/health'. Output: JSON with {'alive': true}. Limitation: Assumes no authentication or advanced checks.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\npackage main\n\nfunc HealthCheckHandler(w http.ResponseWriter, r *http.Request) {\n    // A very simple health check.\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n\n    // In the future we could report back on the status of our DB, or our cache\n    // (e.g. Redis) by performing a simple PING, and include them in the response.\n    io.WriteString(w, `{\"alive\": true}`)\n}\n\nfunc main() {\n    r := mux.NewRouter()\n    r.HandleFunc(\"/health\", HealthCheckHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response - Not Found - API\nDESCRIPTION: Illustrates the HTTP 404 Not Found response structure used when a requested resource, such as a blob or repository identified by name or digest, is unknown to the registry. The response includes a JSON body detailing the specific error code like `NAME_UNKNOWN` or `BLOB_UNKNOWN`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_46\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chained Authentication Flow Using ManagedIdentityCredential and AzureCLICredential in Go\nDESCRIPTION: This snippet shows how to create a ChainedTokenCredential that sequentially attempts authentication via a managed identity credential and falls back to the Azure CLI credential if managed identity is unavailable. It initializes each credential, checks for errors, and composes them into a chain used to authenticate Azure SDK clients. This pattern supports advanced custom authentication flows, handling multiple credential mechanisms gracefully.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nmanaged, err := azidentity.NewManagedIdentityCredential(nil)\nif err != nil {\n  // handle error\n}\nazCLI, err := azidentity.NewAzureCLICredential(nil)\nif err != nil {\n  // handle error\n}\nchain, err := azidentity.NewChainedTokenCredential([]azcore.TokenCredential{managed, azCLI}, nil)\nif err != nil {\n  // handle error\n}\n\nclient := armresources.NewResourceGroupsClient(\"subscription ID\", chain, nil)\n```\n\n----------------------------------------\n\nTITLE: Example Docker Client Commands for Using an External TLS-Enabled Registry - console\nDESCRIPTION: Shows Docker CLI commands for pulling an image from Docker Hub, tagging it with the external registry's hostname, pushing the tagged image to the external registry, and pulling it back. Demonstrates normal client-side operations with a secured external registry accessible on port 443.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker pull ubuntu:16.04\n$ docker tag ubuntu:16.04 myregistry.domain.com/my-ubuntu\n$ docker push myregistry.domain.com/my-ubuntu\n$ docker pull myregistry.domain.com/my-ubuntu\n```\n\n----------------------------------------\n\nTITLE: Wrapping HTTP Handler with CaptureMetrics in Go\nDESCRIPTION: This code snippet demonstrates how to use `httpsnoop.CaptureMetrics` to wrap an existing HTTP handler (`myH`) and capture metrics like response code, duration, and bytes written. The wrapped handler logs request details, including method, URL, status code, duration, and bytes written.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/felixge/httpsnoop/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// myH is your app's http handler, perhaps a http.ServeMux or similar.\nvar myH http.Handler\n// wrappedH wraps myH in order to log every request.\nwrappedH := http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\tm := httpsnoop.CaptureMetrics(myH, w, r)\n\tlog.Printf(\n\t\t\"%s %s (code=%d dt=%s written=%d)\",\n\t\tr.Method,\n\t\tr.URL,\n\t\tm.Code,\n\t\tm.Duration,\n\t\tm.Written,\n\t)\n})\nhttp.ListenAndServe(\":8080\", wrappedH)\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories: Paginated Catalog Request\nDESCRIPTION: This snippet shows how to initiate a paginated request for the catalog. The `n` parameter specifies the number of results to return per page. Subsequent pages are accessed using the `last` parameter.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_15\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/_catalog?n=<integer>\n```\n\n----------------------------------------\n\nTITLE: Enabling caller reporting in Logrus to add method information\nDESCRIPTION: Shows how to configure Logrus to include the calling method name in log entries by enabling the report caller feature with `log.SetReportCaller(true)`. Useful for debugging and tracing execution flow, though it introduces performance overhead.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetReportCaller(true)\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose File (sh)\nDESCRIPTION: Generates the `docker-compose.yml` file. It defines two services: `apache` (using `httpd:2.4`, linking to `registry`, exposing port 5043, and mounting the `auth` directory) and `registry` (using `registry:3`, binding port 5000 locally, and mounting the `data` directory for storage). Requires Docker Compose.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat <<EOF > docker-compose.yml\napache:\n  image: \"httpd:2.4\"\n  hostname: myregistrydomain.com\n  ports:\n    - 5043:5043\n  links:\n    - registry:registry\n  volumes:\n    - `pwd`/auth:/usr/local/apache2/conf\n\nregistry:\n  image: registry:3\n  ports:\n    - 127.0.0.1:5000:5000\n  volumes:\n    - `pwd`/data:/var/lib/registry\n\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom JSON Formatter for Logrus in Go\nDESCRIPTION: Shows how to implement a custom formatter by implementing the Logrus Formatter interface. This example creates a simple JSON formatter that serializes the log entry data.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype MyJSONFormatter struct {\n}\n\nlog.SetFormatter(new(MyJSONFormatter))\n\nfunc (f *MyJSONFormatter) Format(entry *Entry) ([]byte, error) {\n  // Note this doesn't include Time, Level and Message which are available on\n  // the Entry. Consult `godoc` on information about those fields or read the\n  // source of the official loggers.\n  serialized, err := json.Marshal(entry.Data)\n    if err != nil {\n      return nil, fmt.Errorf(\"Failed to marshal fields to JSON, %w\", err)\n    }\n  return append(serialized, '\\n'), nil\n}\n```\n\n----------------------------------------\n\nTITLE: systemd socket file for registry port\nDESCRIPTION: Specifies a socket unit to enable socket-activation for the registry service, listening on port 5000. It is used to start the registry service on demand, reducing resource usage and improving security.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/systemd.md#_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[Unit]\nDescription=Distribution registry\n\n[Socket]\nListenStream=5000\n\n[Install]\nWantedBy=sockets.target\n```\n\n----------------------------------------\n\nTITLE: Parsing and Marshaling YAML Data with Go Using gopkg.in/yaml.v2 - Go\nDESCRIPTION: This snippet demonstrates several common operations using the yaml v2 Go library: unmarshaling YAML data into a struct, marshaling a struct back to YAML, handling YAML with map[interface{}]interface{}, and robust error handling. Key dependencies are the standard Go packages (fmt, log) and gopkg.in/yaml.v2. The struct fields use YAML tags for field-name mapping and flow style for nested slices. The code expects a multiline YAML string, decodes it into both structured and generic types, then re-encodes the results. Outputs are printed for each intermediate step. All struct fields to be unmarshaled must be exported (start with a capital letter), and both marshaling and unmarshaling depend on correct YAML formatting and field tags.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/gopkg.in/yaml.v2/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v2\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags: Paginated Response\nDESCRIPTION: This snippet displays the format of a paginated tags response. The Link header provides the URL for requesting the next page of results using the `last` parameter, which specifies the last tag from the current page.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_21\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Type: application/json\nLink: <<url>?n=<n from the request>&last=<last tag value from previous response>>; rel=\"next\"\n\n{\n    \"name\": <name>,\n    \"tags\": [\n        <tag>,\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Services with Docker Compose (console)\nDESCRIPTION: Executes the `docker compose up -d` command to build, create, start, and run the Docker services (Apache proxy and Registry) in the background based on the configuration in `docker-compose.yml`. Requires Docker Compose and the `docker-compose.yml` file.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Installing Golang on macOS using GVM\nDESCRIPTION: Commands to install the Go Version Manager (GVM) and set up Go 1.4.2 on macOS. This is required to build the registry from source.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ bash < <(curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer)\n$ source ~/.gvm/scripts/gvm\n$ gvm install go1.4.2\n$ gvm use go1.4.2\n```\n\n----------------------------------------\n\nTITLE: Creating a new Azure Blob Storage client with azblob in Go\nDESCRIPTION: This snippet demonstrates how to instantiate an azblob client using a storage account URL, a credential, and optional client options. It replaces the previous constructor requiring a URL and pipeline, streamlining client creation with direct credential passing, and allowing configuration via ClientOptions.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: GET Manifest Success Response\nDESCRIPTION: This code snippet represents a successful (200 OK) response for the GET Manifest request. It includes the Docker-Content-Digest header, which provides the digest of the targeted content. The response body is a JSON object containing the manifest details: name, tag, fsLayers, history (v1 images), and signature (JWS).\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_30\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"name\": <name>,\n    \"tag\": <tag>,\n    \"fsLayers\": [\n        {\n            \"blobSum\": \"<digest>\"\n        },\n        ...\n    ],\n    \"history\": <v1 images>,\n    \"signature\": <JWS>\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 401 Unauthorized during Upload Deletion (HTTP/JSON)\nDESCRIPTION: Shows the HTTP 401 response format returned when attempting to delete a blob upload without proper authentication. Includes the `WWW-Authenticate` header and `UNAUTHORIZED` error code in the JSON body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_107\n\nLANGUAGE: http\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Considered Logger.Emit design with options pattern\nDESCRIPTION: A considered alternative design for the Logger.Emit method using the options pattern similar to the Meter API. This approach was rejected due to performance concerns around heap allocations.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Logger interface{\n\tembedded.Logger\n\tEmit(ctx context.Context, options ...RecordOption)\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Handler with Metrics in Go\nDESCRIPTION: This code demonstrates how to instrument an HTTP handler with metrics using the go-metrics package. It creates a namespace for HTTP metrics, initializes default HTTP metrics, registers the namespace, and then wraps the handler with the `InstrumentHandler` function to collect request-related metrics.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-metrics/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nnamespace := metrics.NewNamespace(\"docker_distribution\", \"http\", metrics.Labels{\"handler\": \"your_http_handler_name\"})\nhttpMetrics := namespace.NewDefaultHttpMetrics()\nmetrics.Register(namespace)\ninstrumentedHandler = metrics.InstrumentHandler(httpMetrics, unInstrumentedHandler)\n```\n\n----------------------------------------\n\nTITLE: Logging In and Pushing Image (console)\nDESCRIPTION: Shows how to log in to the Apache-proxied registry endpoint using the `testuserpush` credentials, tag a local image (`ubuntu`) with the registry domain, and push the tagged image to the repository, verifying write access for the \"pusher\" group. Requires Docker daemon, running services, and a local image.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker login myregistrydomain.com:5043\n$ docker tag ubuntu myregistrydomain.com:5043/test\n$ docker push myregistrydomain.com:5043/test\n```\n\n----------------------------------------\n\nTITLE: HTTP 401 Unauthorized Response with Bearer Authentication Challenge\nDESCRIPTION: Example of a WWW-Authenticate header in an HTTP 401 response from a registry requiring authentication. The response indicates that a Bearer token is required and specifies the realm, service, and scope parameters needed to obtain the token.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/token.md#_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nHTTP/1.1 401 Unauthorized\nContent-Type: application/json\nDocker-Distribution-Api-Version: registry/2.0\nWww-Authenticate: Bearer realm=\"https://auth.docker.io/token\",service=\"registry.docker.io\",scope=\"repository:samalba/my-app:pull,push\"\nDate: Thu, 10 Sep 2015 19:32:31 GMT\nContent-Length: 235\nStrict-Transport-Security: max-age=31536000\n\n{\"errors\":[{\"code\":\"UNAUTHORIZED\",\"message\":\"access to the requested resource is not authorized\",\"detail\":[{\"Type\":\"repository\",\"Name\":\"samalba/my-app\",\"Action\":\"pull\"},{\"Type\":\"repository\",\"Name\":\"samalba/my-app\",\"Action\":\"push\"}]}]}\n```\n\n----------------------------------------\n\nTITLE: Replacing golang.org Modules with go mod (Shell)\nDESCRIPTION: These shell commands demonstrate how to use the `go mod edit -replace` feature to point the `google.golang.org/grpc` dependency to its mirror on GitHub (`github.com/grpc/grpc-go@latest`). This is a workaround for network issues preventing direct access to `golang.org`. After replacing, `go mod tidy` updates the `go.mod` file, `go mod vendor` copies dependencies into a `vendor` directory, and `go build -mod=vendor` builds the project using the vendored dependencies.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod edit -replace=google.golang.org/grpc=github.com/grpc/grpc-go@latest\ngo mod tidy\ngo mod vendor\ngo build -mod=vendor\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker daemon.json for insecure registry access\nDESCRIPTION: JSON configuration to add to daemon.json file to allow Docker to connect to an insecure registry. This configuration instructs Docker to first try HTTPS and ignore certificate errors, then fall back to HTTP if HTTPS is unavailable.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/insecure.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"insecure-registries\" : [\"myregistrydomain.com:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OTLP Metric HTTP Exporter Package in Go\nDESCRIPTION: This snippet includes a badge link to the Go package for the OTLP Metric HTTP Exporter, which serves as a quick reference or documentation link for the package. It helps users identify the package source and version.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)](https://pkg.go.dev/go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetrichttp)\n```\n\n----------------------------------------\n\nTITLE: Building SysUnix Files with New Build System\nDESCRIPTION: The new build system uses Docker containers to generate Go files from kernel and library source checkouts. It is used for GOOS == \"linux\" and requires Docker support. The script `mkall.sh` is used within a Docker container.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/golang.org/x/sys/unix/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkall.sh\n```\n\n----------------------------------------\n\nTITLE: Installing cobra-cli Generator Tool Using Go Install (bash)\nDESCRIPTION: This snippet instructs how to install the 'cobra-cli' tool via the Go install command. 'cobra-cli' is a command-line utility that scaffolds Cobra-based Go applications by generating command files and application boilerplate. Installing it globally provides easy access to rapidly develop and bootstrap new CLI projects using Cobra.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo install github.com/spf13/cobra-cli@latest\n```\n\n----------------------------------------\n\nTITLE: Logging in, Tagging, and Pushing/Pulling Images via Docker CLI in Console\nDESCRIPTION: Executes sequential Docker CLI commands to login with Basic Auth credentials, tag a local image, push it to, and pull it from the secure registry. Requires Docker Engine installed and running, with prior steps completed. Ensures that authentication and registry proxying function as intended by performing real push/pull operations with valid credentials.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\n$ docker login -u=testuser -p=testpassword -e=root@example.ch myregistrydomain.com:5043\n$ docker tag ubuntu myregistrydomain.com:5043/test\n$ docker push myregistrydomain.com:5043/test\n$ docker pull myregistrydomain.com:5043/test\n```\n\n----------------------------------------\n\nTITLE: Defining Distribution Token Scope Grammar\nDESCRIPTION: This grammar defines the syntax for the 'scope' parameter used in token authorization requests. It specifies how resource types, names, and actions are combined, noting that the grammar is a subset of the Go 'reference' package grammar and includes potential complexities like colons in the resource name.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/scope.md#_snippet_0\n\nLANGUAGE: grammar\nCODE:\n```\nscope                   := resourcescope [ ' ' resourcescope ]*\nresourcescope           := resourcetype  \":\" resourcename  \":\" action [ ',' action ]*\nresourcetype            := resourcetypevalue [ '(' resourcetypevalue ')' ]\nresourcetypevalue       := /[a-z0-9]+/\nresourcename            := [ hostname '/' ] component [ '/' component ]*\nhostname                := hostcomponent ['.' hostcomponent]* [':' port-number]\nhostcomponent           := /([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]*[a-zA-Z0-9])/\nport-number             := /[0-9]+/\naction                  := /[a-z]*/\ncomponent               := alpha-numeric [ separator alpha-numeric ]*\nalpha-numeric           := /[a-z0-9]+/\nseparator               := /[_.]|__|[-]*/\n```\n\n----------------------------------------\n\nTITLE: Syscall Dispatch Entry Points in Assembly\nDESCRIPTION: This snippet describes the three entry points in the assembly file `asm_${GOOS}_${GOARCH}.s`, used for system call dispatching. `Syscall` and `Syscall6` are the standard calls, and `RawSyscall` is for low-level use. `RawSyscall` does not invoke the scheduler.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/golang.org/x/sys/unix/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\nfunc Syscall6(trap, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr)\nfunc RawSyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr)\n```\n\n----------------------------------------\n\nTITLE: JWT Header Construction\nDESCRIPTION: This snippet explains the structure of the JWT header, which includes parameters such as 'alg' (algorithm used for signing) and 'typ' (token type), as well as optional key identifiers or certificates. The header must be JSON-compliant and is base64 URL-encoded for inclusion in the JWT.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/jwt.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\"typ\":\"JWT\",\"alg\":\"ES256\",\"kid\":\"PYYO:TEWU:V7JH:26JV:AQTZ:LJC3:SXVJ:XGHA:34F2:2LAQ:ZRMK:Z7Q6\"}\n```\n\n----------------------------------------\n\nTITLE: Running pflag tests using go test\nDESCRIPTION: Provides the shell command to execute the tests for the `pflag` library using the standard Go toolchain.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngo test github.com/spf13/pflag\n```\n\n----------------------------------------\n\nTITLE: Mounting a Blob Across Repositories in Docker Registry HTTP API (none)\nDESCRIPTION: Describes the HTTP POST request format to mount an existing blob identified by digest from a source repository into a target repository within the Docker registry. Declares required headers including Host, Authorization with valid credentials, and a zero Content-Length to indicate no body content. The query parameters 'mount' (blob digest) and 'from' (source repository) specify the mount operation. Success and failure HTTP status codes and associated headers or JSON error bodies are documented for clients to correctly interpret the outcome of the mount attempt.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_73\n\nLANGUAGE: none\nCODE:\n```\nPOST /v2/<name>/blobs/uploads/?mount=<digest>&from=<repository name>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication - YAML\nDESCRIPTION: This snippet configures the authentication options available to the registry. It shows examples for `silly`, `token`, and `htpasswd` auth providers. Only one authentication provider can be configured.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nauth:\n  silly:\n    realm: silly-realm\n    service: silly-service\n  token:\n    realm: token-realm\n    service: token-service\n    issuer: registry-token-issuer\n    rootcertbundle: /root/certs/bundle\n    jwks: /path/to/jwks\n    signingalgorithms:\n        - EdDSA\n        - HS256\n        - ES512\n  htpasswd:\n    realm: basic-realm\n    path: /path/to/htpasswd\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Azure Identity in Go\nDESCRIPTION: Example of how to set up logging for the Azure Identity module using the azcore/log package. This code configures logs to print to stdout and filters to only show authentication events from the azidentity module.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Enabling Logging in azidentity Go\nDESCRIPTION: This snippet demonstrates how to enable logging for debugging authentication issues using the Azure SDK for Go. It sets a listener to print log output to the console and filters the logs to show only authentication-related events from the `azidentity` package. This helps in diagnosing problems by providing detailed information about the authentication process.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport azlog \"github.com/Azure/azure-sdk-for-go/sdk/azcore/log\"\n\n// print log output to stdout\nazlog.SetListener(func(event azlog.Event, s string) {\n    fmt.Println(s)\n})\n\n// include only azidentity credential logs\nazlog.SetEvents(azidentity.EventAuthentication)\n```\n\n----------------------------------------\n\nTITLE: Configuring Registry Logging Behavior (YAML)\nDESCRIPTION: Configures the logging behavior for the registry within the `log` section. Includes options for disabling access logs (`accesslog.disabled`), setting the log `level` (e.g., debug, info, warn, error), choosing a `formatter` (text, json, logstash), and adding custom static `fields` (like service and environment) to every log entry for better context.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nlog:\n  accesslog:\n    disabled: true\n  level: debug\n  formatter: text\n  fields:\n    service: registry\n    environment: staging\n```\n\n----------------------------------------\n\nTITLE: Configuring Access Logging - YAML\nDESCRIPTION: This snippet configures access logging. It sets the `disabled` flag to `true`, which disables the access logging system. The default access logging system outputs to stdout in Combined Log Format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\naccesslog:\n  disabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Filesystem Storage Root Directory in YAML\nDESCRIPTION: Defines the `rootdirectory` for the `filesystem` storage driver within the `storage` section of the registry configuration file. This path specifies where the registry stores its data on the local filesystem.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  filesystem:\n    rootdirectory: /var/lib/registry\n```\n\n----------------------------------------\n\nTITLE: Stopping Local S3 Storage Environment\nDESCRIPTION: Command to stop the local S3 storage environment when it's no longer needed.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmake stop-s3-storage\n```\n\n----------------------------------------\n\nTITLE: Making Swagger Parameter Required (FilterBlobsWhere)\nDESCRIPTION: This directive modifies the Swagger document definition for the `FilterBlobsWhere` parameter. It sets the `required` property of this parameter to `true`, making it mandatory in requests that use it.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.FilterBlobsWhere\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Token with azidentity in Go\nDESCRIPTION: Shows how to retrieve an access token on demand from azidentity credentials in Go. While SDK clients obtain tokens automatically, GetToken can be called directly with the appropriate scopes for custom needs. Dependencies: azcore/policy and azidentity. Inputs: tenantID, clientID, secret, OAuth2 scopes. Output: token string if successful.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\ntk, err := cred.GetToken(\n    context.TODO(), policy.TokenRequestOptions{Scopes: []string{\"https://vault.azure.net/.default\"}},\n)\nif err == nil {\n    token := tk.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Go OpenTelemetry SDK Trace Package Badge using Markdown\nDESCRIPTION: This snippet uses markdown syntax to display a badge image for the go.opentelemetry.io/otel/sdk/trace package hosted on pkg.go.dev. It includes a clickable image linking directly to the package documentation page. The badge visually indicates the package information, aiding in project documentation enrichment. There are no external dependencies beyond standard markdown rendering support.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/trace/README.md#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/trace)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/trace)\n```\n\n----------------------------------------\n\nTITLE: Copying SSL Certificate and Key (sh)\nDESCRIPTION: Copies the SSL certificate (`domain.crt`) and private key (`domain.key`) files into the `auth` directory, making them available to the Apache container for TLS termination as configured in the `httpd.conf`. Requires `domain.crt` and `domain.key` to exist in the current directory.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncp domain.crt auth\ncp domain.key auth\n```\n\n----------------------------------------\n\nTITLE: Fixing BlobMetadata Definition\nDESCRIPTION: This YAML directive removes the 'properties' field from the 'BlobMetadata' definition within the swagger document.  This action is intended to fix or simplify the structure of the BlobMetadata.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.BlobMetadata[\"properties\"];\n```\n\n----------------------------------------\n\nTITLE: Listing blobs using pageable results in azblob with Go\nDESCRIPTION: This snippet demonstrates how to list blobs within a container using the new paging mechanism returning a *runtime.Pager[T] in azblob. It simplifies the previous marker-based system, iterating over pages using More() and NextPage() methods.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\npager := client.NewListBlobsFlatPager(\"my-container\", nil)\nfor pager.More() {\n    page, err := pager.NextPage(context.TODO())\n    // process results\n}\n```\n\n----------------------------------------\n\nTITLE: Removing DataLake Related Paths\nDESCRIPTION: This YAML directive removes any paths in the swagger document that include 'filesystem', effectively removing DataLake-specific operations from the generated code.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('filesystem'))\n        {\n            delete $[property];\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Route Variable Handlers in Gorilla Mux (Go)\nDESCRIPTION: This Go code registers a handler for a route containing a variable using Gorilla Mux. The example sets up a '/metrics/{type}' endpoint, demonstrating how the router parses and passes variable path segments to handlers. Dependencies: github.com/gorilla/mux, net/http, log. Input: HTTP requests to '/metrics/{type}'. Output: Handler response based on variable. Useful for RESTful APIs that require resource-specific endpoints.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\n// endpoints.go\nfunc main() {\n    r := mux.NewRouter()\n    // A route with a route variable:\n    r.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n\n    log.Fatal(http.ListenAndServe(\"localhost:8080\", r))\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching a Blob from Docker Registry - HTTP\nDESCRIPTION: Illustrates the HTTP GET request used to fetch a blob's binary data from the registry, including required Host and Authorization headers. Inputs: Repository name, digest, and valid authorization. Outputs: If successful, returns the binary blob and associated headers.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_42\n\nLANGUAGE: HTTP\nCODE:\n```\nGET /v2/<name>/blobs/<digest>\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Client with azidentity and Sovereign Cloud Support in Go\nDESCRIPTION: Illustrates creating a credential using azidentity and specifying a sovereign cloud endpoint in Go. Requires github.com/Azure/azure-sdk-for-go/sdk/azidentity and github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud. Sets the ClientOptions to target Azure China cloud, then creates a ClientSecretCredential using provided tenantID, clientID, and secret. Used as a credential source for SDK clients.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azcore/cloud\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n)\n\nclientOpts := azcore.ClientOptions{Cloud: cloud.AzureChina}\n\ncred, err := azidentity.NewClientSecretCredential(\n    tenantID, clientID, secret, &azidentity.ClientSecretCredentialOptions{ClientOptions: clientOpts},\n)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Handling Overlapping Configurations with Interfaces in Go\nDESCRIPTION: Demonstrates a pattern for managing shared and distinct configuration options across multiple types (e.g., `Dog`, `Bird`). It uses a common `config` struct, type-specific option interfaces (`DogOption`, `BirdOption`) embedded within a general `Option` interface, and distinct `apply` methods (`applyDog`, `applyBird`) to handle type-specific logic.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\n// config holds options for all animals.\ntype config struct {\n\tWeight      float64\n\tColor       string\n\tMaxAltitude float64\n}\n\n// DogOption apply Dog specific options.\ntype DogOption interface {\n\tapplyDog(config) config\n}\n\n// BirdOption apply Bird specific options.\ntype BirdOption interface {\n\tapplyBird(config) config\n}\n\n// Option apply options for all animals.\ntype Option interface {\n\tBirdOption\n\tDogOption\n}\n\ntype weightOption float64\n\nfunc (o weightOption) applyDog(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc (o weightOption) applyBird(c config) config {\n\tc.Weight = float64(o)\n\treturn c\n}\n\nfunc WithWeight(w float64) Option { return weightOption(w) }\n\ntype furColorOption string\n\nfunc (o furColorOption) applyDog(c config) config {\n\tc.Color = string(o)\n\treturn c\n}\n\nfunc WithFurColor(c string) DogOption { return furColorOption(c) }\n\ntype maxAltitudeOption float64\n\nfunc (o maxAltitudeOption) applyBird(c config) config {\n\tc.MaxAltitude = float64(o)\n\treturn c\n}\n\nfunc WithMaxAltitude(a float64) BirdOption { return maxAltitudeOption(a) }\n\nfunc NewDog(name string, o ...DogOption) Dog    {…}\nfunc NewBird(name string, o ...BirdOption) Bird {…}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with azblob using Azure Identity credentials in Go\nDESCRIPTION: This snippet shows how to create a new azblob client with an Azure Active Directory credential obtained from the azidentity module. It replaces the older method of constructing a Pipeline with credential, simplifying authentication by passing the credential directly into the client constructor.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := azblob.NewClient(\"<my storage account URL>\", cred, nil)\n```\n\n----------------------------------------\n\nTITLE: Fetching Repository Tags Docker Registry API V2 GET Request none\nDESCRIPTION: Shows the GET request to retrieve all tags for a given repository by name under Docker Registry API V2. The request requires 'Host' and 'Authorization' headers and the repository name as a path parameter. A successful response returns HTTP 200 with a JSON body listing the repository name and associated tags.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_25\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/tags/list\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Length: <length>\nContent-Type: application/json\n\n{\n    \"name\": <name>,\n    \"tags\": [\n        <tag>,\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using structured fields with Logrus for detailed logging\nDESCRIPTION: Demonstrates how to attach key-value pairs to log entries via `WithFields`, enabling rich, structured logs that improve discoverability and analysis. Reusing `Entry` objects helps maintain consistent context across multiple logs.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nlog.WithFields(log.Fields{\"animal\": \"walrus\"}).Info(\"A walrus appears\")\n```\n\nLANGUAGE: Go\nCODE:\n```\ncontextLogger := log.WithFields(log.Fields{ \"common\": \"this is a common field\", \"other\": \"I also should be logged always\"})\n```\n\n----------------------------------------\n\nTITLE: Starting the Docker Registry with Basic Authentication\nDESCRIPTION: Starts the Docker Registry container with basic authentication enabled using a htpasswd file. It mounts the auth and certs directories, sets environment variables for authentication and TLS configuration. Requires pre-existing `auth/htpasswd`, `certs/domain.crt`, and `certs/domain.key` files.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_16\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v \"$(pwd)\"/auth:/auth \\\n  -e \"REGISTRY_AUTH=htpasswd\" \\\n  -e \"REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm\" \\\n  -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \\\n  -v \"$(pwd)\"/certs:/certs \\\n  -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \\\n  -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Specifying Registry Configuration Version (YAML)\nDESCRIPTION: Defines the required `version` field at the top level of the registry configuration file. This field indicates the schema version (0.1) of the configuration being used, ensuring consistent parsing.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\n```\n\n----------------------------------------\n\nTITLE: Adding or Updating Go Module Dependencies\nDESCRIPTION: Demonstrates using the `go get` command to add or update Go module dependencies. The first command fetches the latest tagged release of a package, while the second fetches a specific version (vX.Y.Z). This process requires Go version 1.12 or greater.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n# Pick the latest tagged release.\ngo get example.com/some/module/pkg\n\n# Pick a specific version.\ngo get example.com/some/module/pkg@vX.Y.Z\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Error: Not Found\nDESCRIPTION: HTTP 404 error response when the specified blob is not found. Includes specific error codes for unknown repository name or unknown blob.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_59\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Insecure Registry Configuration\nDESCRIPTION: JSON configuration for Docker daemon to allow insecure registry connections. This needs to be added to /etc/docker/daemon.json to allow pushing and pulling from a local registry without HTTPS.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/dockerhub.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"insecure-registries\": [\"host.docker.internal:5000\"]\n}\n```\n\n----------------------------------------\n\nTITLE: GET Manifest Request\nDESCRIPTION: This code snippet illustrates the structure of a GET request to retrieve a manifest by name and reference (tag or digest).  The request includes the standard HTTP Host header and an optional Authorization header for authenticated access. The response is the manifest content itself, which can be used to resolve the resources required to run the specified image.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_29\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/manifests/<reference>\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\n----------------------------------------\n\nTITLE: Installing Cobra CLI Library Using Go Module System (bash)\nDESCRIPTION: This snippet shows the command to install the latest version of the Cobra library using the Go tools. The user runs 'go get -u' with the module path and '@latest' to fetch and update to the most recent version of the github.com/spf13/cobra package. This installation enables use of the Cobra framework in Go projects by adding it to the module dependencies.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/cobra/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get -u github.com/spf13/cobra@latest\n```\n\n----------------------------------------\n\nTITLE: Creating a digest from byte content in Go\nDESCRIPTION: This snippet demonstrates how to generate a content digest from a byte array using the digest.FromBytes function. It enables content identification without trusting application outside verification.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nid := digest.FromBytes([]byte(\"my content\"))\n```\n\n----------------------------------------\n\nTITLE: Starting Local S3 Storage with Docker Compose\nDESCRIPTION: Command to start a local S3-compatible storage environment using minio through Docker Compose.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmake start-s3-storage\n```\n\n----------------------------------------\n\nTITLE: Deleting an Image\nDESCRIPTION: This snippet shows how to delete an image from the registry using its `name` and `reference` (which *must* be a digest).  A DELETE request is sent to `/v2/<name>/manifests/<reference>`. The registry must be version 2.3 or later.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_23\n\nLANGUAGE: none\nCODE:\n```\nDELETE /v2/<name>/manifests/<reference>\n```\n\n----------------------------------------\n\nTITLE: Stopping the Docker Registry container\nDESCRIPTION: Stops the running Docker Registry container, allowing for reconfiguration or updates.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_15\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop registry\n```\n\n----------------------------------------\n\nTITLE: Claims Interface Definition in Go\nDESCRIPTION: Defines the `Claims` interface in Go, which outlines methods for retrieving standard claim values like expiration time, issued at time, not before time, issuer, subject, and audience. This interface decouples validation logic from claim storage representation.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Claims interface {\n\tGetExpirationTime() (*NumericDate, error)\n\tGetIssuedAt() (*NumericDate, error)\n\tGetNotBefore() (*NumericDate, error)\n\tGetIssuer() (string, error)\n\tGetSubject() (string, error)\n\tGetAudience() (ClaimStrings, error)\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading a Blob from Azure Storage\nDESCRIPTION: Shows how to download a blob from Azure Blob Storage to a local file using anonymous access (no credentials).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// this example accesses a public blob via anonymous access, so no credentials are required\nclient, err := azblob.NewClientWithNoCredential(\"https://azurestoragesamples.blob.core.windows.net/\", nil)\n// TODO: handle error\n\n// create or open a local file where we can download the blob\nfile, err := os.Create(\"cloud.jpg\")\n// TODO: handle error\ndefer file.Close()\n\n// download the blob\n_, err = client.DownloadFile(context.TODO(), \"samples\", \"cloud.jpg\", file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Implementing the CallErr Type for Service Errors in Go\nDESCRIPTION: Defines the `CallErr` struct, designed to encapsulate errors from HTTP service calls within MSAL. It stores the `http.Request`, `http.Response`, and the underlying `error`. It implements the standard `error` interface and provides a `Verbose()` method for detailed diagnostic output, omitting bulky TLS details.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// CallErr represents an HTTP call error. Has a Verbose() method that allows getting the\n// http.Request and Response objects. Implements error.\ntype CallErr struct {\n    Req  *http.Request\n    Resp *http.Response\n    Err  error\n}\n\n// Errors implements error.Error().\nfunc (e CallErr) Error() string {\n    return e.Err.Error()\n}\n\n// Verbose prints a versbose error message with the request or response.\nfunc (e CallErr) Verbose() string {\n    e.Resp.Request = nil // This brings in a bunch of TLS stuff we don't need\n    e.Resp.TLS = nil     // Same\n    return fmt.Sprintf(\"%s:\\nRequest:\\n%s\\nResponse:\\n%s\", e.Err, prettyConf.Sprint(e.Req), prettyConf.Sprint(e.Resp))\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for CallErr Type using errors.As in Go\nDESCRIPTION: Demonstrates how to use the standard Go `errors.As` function to check if a generic error variable (`err`) holds a specific custom error type, in this case, `CallErr`. This allows developers to identify and handle service-side HTTP errors specifically.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar callErr CallErr\nif errors.As(err, &callErr) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pushing an Image Manifest\nDESCRIPTION: This snippet shows the format for pushing an image manifest to the registry. It uses a PUT request to the `/v2/<name>/manifests/<reference>` endpoint. The content type should match the manifest type.  The name and reference must match the URL.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_11\n\nLANGUAGE: none\nCODE:\n```\nPUT /v2/<name>/manifests/<reference>\nContent-Type: <manifest media type>\n\n{\n    \"name\": <name>,\n    \"tag\": <tag>,\n    \"fsLayers\": [\n        {\n            \"blobSum\": <digest>\n        },\n        ...\n    ],\n    \"history\": <v1 images>,\n    \"signature\": <JWS>,\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Chained Token Credential Before and After API Change - Go\nDESCRIPTION: Demonstrates how to create a ChainedTokenCredential using the previous and the updated function signatures. The old version passed credentials directly as variadic parameters, whereas the new version takes a slice of azcore.TokenCredential and an options struct. The updated usage is required as of the breaking change for improved flexibility and extensibility.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewChainedTokenCredential(credA, credB)\n```\n\nLANGUAGE: go\nCODE:\n```\n// after\ncred, err := NewChainedTokenCredential([]azcore.TokenCredential{credA, credB}, nil)\n```\n\n----------------------------------------\n\nTITLE: In-Memory Buffer Decompression with zstd in Go\nDESCRIPTION: Illustrates decoding zstd compressed byte slices in Go using a reusable decoder. A `zstd.Reader` is created once with a `nil` reader and configured for concurrency (here, using GOMAXPROCS). The `DecodeAll` method is then used to decompress source byte slices, allocating the destination buffer automatically.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a reader that caches decompressors.\n// For this operation type we supply a nil Reader.\nvar decoder, _ = zstd.NewReader(nil, zstd.WithDecoderConcurrency(0))\n\n// Decompress a buffer. We don't supply a destination buffer,\n// so it will be allocated by the decoder.\nfunc Decompress(src []byte) ([]byte, error) {\n    return decoder.DecodeAll(src, nil)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Logging with Logrus Test Hooks in Go\nDESCRIPTION: Shows how to use Logrus's built-in testing facilities to assert that specific log messages were created. This uses the test hook and NullLogger to record but not output messages for verification in tests.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport(\n  \"github.com/sirupsen/logrus\"\n  \"github.com/sirupsen/logrus/hooks/test\"\n  \"github.com/stretchr/testify/assert\"\n  \"testing\"\n)\n\nfunc TestSomething(t*testing.T){\n  logger, hook := test.NewNullLogger()\n  logger.Error(\"Helloerror\")\n\n  assert.Equal(t, 1, len(hook.Entries))\n  assert.Equal(t, logrus.ErrorLevel, hook.LastEntry().Level)\n  assert.Equal(t, \"Helloerror\", hook.LastEntry().Message)\n\n  hook.Reset()\n  assert.Nil(t, hook.LastEntry())\n}\n```\n\n----------------------------------------\n\nTITLE: Manipulating LogRecord Attributes in Go\nDESCRIPTION: Offers methods to iterate over log record attributes and add new attributes. The `WalkAttributes` method takes a callback function to process each `KeyValue` attribute efficiently without allocations. `AddAttributes` accepts variadic `KeyValue` pairs to attach additional structured data to the record. This allows flexible and performant attribute management compatible with OpenTelemetry's model.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) WalkAttributes(f func(KeyValue) bool)\nfunc (r *Record) AddAttributes(attrs ...KeyValue)\n```\n\n----------------------------------------\n\nTITLE: Docker Image Manifest Version 2 Schema 1 Structure (JSON)\nDESCRIPTION: Illustrates the JSON structure of an image manifest returned by the registry, specifically mentioning fields relevant to the V1 compatibility schema. Key fields include `name`, `tag`, `fsLayers` (containing blob digests), `history`, and `signature`. Clients should verify the signature upon retrieval.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"name\": <name>,\n    \"tag\": <tag>,\n    \"fsLayers\": [\n        {\n            \"blobSum\": <digest>\n        },\n        ...\n    ],\n    \"history\": <v1 images>,\n    \"signature\": <JWS>\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating SpanLimits with RawSpanLimits in Go SDK\nDESCRIPTION: This snippet documents the deprecation of the `WithSpanLimits` option in favor of `WithRawSpanLimits`, allowing more granular control over span limits, including the ability to set unlimited or zero limits explicitly using `NewSpanLimits`. This change increases flexibility in span limit configuration and ensures clearer semantics when disabling or customizing span attribute and event limits.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code example provided, only deprecation note and usage instructions\n```\n\n----------------------------------------\n\nTITLE: Concatenating Domain and Intermediate Certificates to Create a Certificate Bundle - console\nDESCRIPTION: Combines a domain certificate and intermediate certificates into a single certificate bundle using the 'cat' command. The resulting bundle is saved over the domain certificate file, allowing use with Docker registry TLS setup when the CA provides intermediate certificates. No dependencies beyond a POSIX shell environment.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\ncat domain.crt intermediate-certificates.pem > certs/domain.crt\n```\n\n----------------------------------------\n\nTITLE: Using Verifier to stream and verify content in Go\nDESCRIPTION: This example illustrates creating a Verifier from an existing digest to verify streamed data via io.Reader, suitable for large or streaming data sources. The verifier tracks whether the data matches the original digest.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nrd := getContent()\nverifier := id.Verifier()\nio.Copy(verifier, rd)\n\nif !verifier.Verified() {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Passing the logr Logger in Go\nDESCRIPTION: Shows how the initialized `logr.Logger` instance is passed to other parts of the application, such as an application object creation function (`createTheAppObject`). This pattern facilitates dependency injection of the logger.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n    app := createTheAppObject(logger)\n    app.Run()\n\n```\n\n----------------------------------------\n\nTITLE: Example Redis Cluster URL for Parsing\nDESCRIPTION: Provides an example Redis cluster URL string format compatible with the `ParseClusterURL` function introduced in go-redis v9. The URL includes credentials (user:password), primary host/port (localhost:6789), query parameters for timeouts (`dial_timeout`, `read_timeout`), and additional cluster node addresses specified using the `addr` parameter.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/CHANGELOG.md#_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nredis://user:password@localhost:6789?dial_timeout=3&read_timeout=6s&addr=localhost:6790&addr=localhost:6791\n```\n\n----------------------------------------\n\nTITLE: Podman container creation command\nDESCRIPTION: Creates a container named 'registry' with no network and a mounted volume for persistent storage, then generates a systemd service file for managing the container. This setup supports socket-activation and integration with systemd for lifecycle management.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/systemd.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npodman create --name registry --network=none -v registry:/var/lib/registry registry:3\npodman generate systemd --name --new registry > registry.service\n```\n\n----------------------------------------\n\nTITLE: Building the Registry Binary\nDESCRIPTION: Commands to build the registry binary from source and install it to /usr/local/libexec. This uses the GOPATH with Godeps workspace for dependencies.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ GOPATH=$(PWD)/Godeps/_workspace:$GOPATH make binaries\n$ sudo mkdir -p /usr/local/libexec\n$ sudo cp bin/registry /usr/local/libexec/registry\n```\n\n----------------------------------------\n\nTITLE: Device Code Authentication with azidentity in Go\nDESCRIPTION: Demonstrates user sign-in with device code flow via azidentity in Go for interactive authentication. DeviceCodeCredential is instantiated and passed to the Azure subscriptions client. The credential prompts for user interaction via the console by default and can be customized. Inputs: optional credential options. Output: authenticated Azure SDK client.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncred, err := azidentity.NewDeviceCodeCredential(nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewSubscriptionsClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logstash Hook with Logrus in Go\nDESCRIPTION: This snippet demonstrates setting up a Logstash hook in a Go application using the logrus library. It includes connection establishment to a Logstash server, hook creation with default formatter, and adding the hook to log entries with specific fields. The example also shows how to emit a log message with custom fields.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/bshuster-repo/logrus-logstash-hook/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"github.com/bshuster-repo/logrus-logstash-hook\"\n\t\"github.com/sirupsen/logrus\"\n\t\"net\"\n)\n\nfunc main() {\n\tlog := logrus.New()\n\tconn, err := net.Dial(\"tcp\", \"logstash.mycompany.net:8911\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\thook := logrustash.New(conn, logrustash.DefaultFormatter(logrus.Fields{\"type\": \"myappName\"}))\n\n\tlog.Hooks.Add(hook)\n\tctx := log.WithFields(logrus.Fields{\n\t\t\"method\": \"main\",\n\t})\n\tctx.Info(\"Hello World!\")\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace and Metric Support with Environment Variables in Go SDK\nDESCRIPTION: This snippet details the configuration of tracing and metric limits using environment variables such as `OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT`, `OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT`, and others. It sets resource-specific span limits, attribute value length limits, and supports enabling or disabling features dynamically, with default fallback values for invalid inputs. This allows flexible runtime configuration without code changes.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code example provided, only configuration description\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying LogRecord Body in Go\nDESCRIPTION: Provides getter and setter methods for the `Body` field of a `Record`, which holds the main content or payload of the log entry represented as a `Value` type. This abstraction allows storing different data types efficiently as per OpenTelemetry specifications.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) Body() Value\nfunc (r *Record) SetBody(v Value)\n```\n\n----------------------------------------\n\nTITLE: Tidying and Vendoring Go Module Dependencies\nDESCRIPTION: Shows the commands to update the `go.mod` and `go.sum` files (`go mod tidy`) and copy the dependencies into the `vendor/` directory (`go mod vendor`). The `GO111MODULE=on` variable forces module-aware mode, which might be optional if the project isn't in the GOPATH. Changes to `go.mod`, `go.sum`, and `vendor/` must be included in commits.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n# The GO111MODULE variable can be omitted when the code isn't located in GOPATH.\nGO111MODULE=on go mod tidy\n\nGO111MODULE=on go mod vendor\n```\n\n----------------------------------------\n\nTITLE: Updating Go Code to Use azcore.ETag\nDESCRIPTION: This set of directives modifies multiple Go files (`zz_models.go`, `zz_options.go`, `zz_responses.go`, and various client files) to replace `*string` types with `*azcore.ETag` for ETag-related fields (ETag, IfMatch, IfNoneMatch, SourceIfMatch, SourceIfNoneMatch). It also adds the necessary import for `azcore` and handles type conversions (e.g., `(*azcore.ETag)(&val)`, `string(*modifiedAccessConditions.IfMatch)`) where required.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from:\n  - zz_models.go\n  - zz_options.go\n  where: $\n  transform: >-\n    return $.\n      replace(/import \"time\"/, `import (\\n\\t\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n)`).\n      replace(/Etag\\s+\\*string/g, `ETag *azcore.ETag`).\n      replace(/IfMatch\\s+\\*string/g, `IfMatch *azcore.ETag`).\n      replace(/IfNoneMatch\\s+\\*string/g, `IfNoneMatch *azcore.ETag`).\n      replace(/SourceIfMatch\\s+\\*string/g, `SourceIfMatch *azcore.ETag`).\n      replace(/SourceIfNoneMatch\\s+\\*string/g, `SourceIfNoneMatch *azcore.ETag`);\n\n- from: zz_responses.go\n  where: $\n  transform: >-\n    return $.\n      replace(/\"time\"/, `\"time\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"`).\n      replace(/ETag\\s+\\*string/g, `ETag *azcore.ETag`);\n\n- from:\n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/\"github\\.com\\/Azure\\/azure\\-sdk\\-for\\-go\\/sdk\\/azcore\\/policy\"/, `\"github.com/Azure/azure-sdk-for-go/sdk/azcore\"\\n\\t\"github.com/Azure/azure-sdk-for-go/sdk/azcore/policy\"`).\n      replace(/result\\.ETag\\s+=\\s+&val/g, `result.ETag = (*azcore.ETag)(&val)`).\n      replace(/\\*modifiedAccessConditions.IfMatch/g, `string(*modifiedAccessConditions.IfMatch)`).\n      replace(/\\*modifiedAccessConditions.IfNoneMatch/g, `string(*modifiedAccessConditions.IfNoneMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfMatch/g, `string(*sourceModifiedAccessConditions.SourceIfMatch)`).\n      replace(/\\*sourceModifiedAccessConditions.SourceIfNoneMatch/g, `string(*sourceModifiedAccessConditions.SourceIfNoneMatch)`);\n```\n\n----------------------------------------\n\nTITLE: Example Docker Image Manifest in JSON\nDESCRIPTION: A sample image manifest that includes configuration and layer references. It specifies the schema version, media type, config digest and size, and the ordered list of layers with their digests and sizes.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/manifest-v2-2.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"schemaVersion\": 2,\n    \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n    \"config\": {\n        \"mediaType\": \"application/vnd.docker.container.image.v1+json\",\n        \"digest\": \"sha256:b5b2b2c507a0944348e0303114d8d93aaaa081732b86451d9bce1f432a537bc7\",\n        \"size\": 7023\n    },\n    \"layers\": [\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"digest\": \"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f\",\n            \"size\": 32654\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"digest\": \"sha256:3c3a4604a545cdc127456d94e421cd355bca5b528f4a9c1905b15da2eb4a4c6b\",\n            \"size\": 16724\n        },\n        {\n            \"mediaType\": \"application/vnd.docker.image.rootfs.diff.tar.gzip\",\n            \"digest\": \"sha256:ec4b8955958665577945c89419d1af06b5f7636b4ac3da7f12184802ad867736\",\n            \"size\": 73109\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Table-Driven Testing for Route Variables in Go Handler Tests\nDESCRIPTION: This Go test function uses table-driven tests to verify how MetricsHandler responds to various route variable values in Gorilla Mux. It simulates GET requests to '/metrics/{type}', dynamically injecting test cases and checking for expected responses, including error conditions. Dependencies: testing, net/http, httptest, mux, and fmt. Input: Array of routeVariable test cases. Output: Pass/fail results for each route variant. Limitation: Relies on MetricsHandler's implementation for correctness.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// endpoints_test.go\nfunc TestMetricsHandler(t *testing.T) {\n    tt := []struct{\n        routeVariable string\n        shouldPass bool\n    }{\n        {\"goroutines\", true},\n        {\"heap\", true},\n        {\"counters\", true},\n        {\"queries\", true},\n        {\"adhadaeqm3k\", false},\n    }\n\n    for _, tc := range tt {\n        path := fmt.Sprintf(\"/metrics/%s\", tc.routeVariable)\n        req, err := http.NewRequest(\"GET\", path, nil)\n        if err != nil {\n            t.Fatal(err)\n        }\n\n        rr := httptest.NewRecorder()\n    \n\t// To add the vars\\u00a0to the context, \n\t// we need to create\\u00a0a router through which we can\\u00a0pass the request.\n    router := mux.NewRouter()\n        router.HandleFunc(\"/metrics/{type}\", MetricsHandler)\n        router.ServeHTTP(rr, req)\n\n        // In this case, our MetricsHandler returns a non-200 response\n        // for a route variable it doesn't know about.\n        if rr.Code == http.StatusOK && !tc.shouldPass {\n            t.Errorf(\"handler should have failed on routeVariable %s: got %v want %v\",\n                tc.routeVariable, rr.Code, http.StatusOK)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Google UUID Package with Go\nDESCRIPTION: Command to install the Google UUID package using the Go package manager. This makes the UUID package available for use in Go applications.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/google/uuid/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get github.com/google/uuid\n```\n\n----------------------------------------\n\nTITLE: Installation instructions for rootless systemd service\nDESCRIPTION: Provides steps for configuring the registry service under a non-root user by copying files to the user systemd directory, enabling, and starting the service. Notes the necessity of enabling linger for auto-start on boot in rootless mode.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/systemd.md#_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Sample Logstash Log Entry Format in Ruby\nDESCRIPTION: This snippet shows an example of a log message formatted as a Ruby hash, representing a typical Logstash input. It includes timestamp, version, log level, message, method, host, port, and type fields, illustrating the structure of logs sent to Logstash for processing.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/bshuster-repo/logrus-logstash-hook/README.md#_snippet_1\n\nLANGUAGE: Ruby\nCODE:\n```\n{\n    \"@timestamp\" => \"2016-02-29T16:57:23.000Z\",\n    \"@version\" => \"1\",\n    \"level\" => \"info\",\n    \"message\" => \"Hello World!\",\n    \"method\" => \"main\",\n    \"host\" => \"172.17.0.1\",\n    \"port\" => 45199,\n    \"type\" => \"myappName\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Functional Option in Go\nDESCRIPTION: Illustrates the functional options pattern where an unexported function type (`optionFunc`) implements the `Option` interface's `apply` method. An exported factory function (`WithMyType`) returns a closure of this type, capturing the desired value and logic to modify the config.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\ntype optionFunc func(config) config\n\nfunc (fn optionFunc) apply(c config) config {\n\treturn fn(c)\n}\n\n// WithMyType sets t as MyType.\nfunc WithMyType(t MyType) Option {\n\treturn optionFunc(func(c config) config {\n\t\tc.MyType = t\n        return c\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Deprecating a pflag Flag Shorthand in Go\nDESCRIPTION: Shows how to deprecate only the shorthand ('n') of a flag (\"noshorthandflag\") using `MarkShorthandDeprecated`. The full flag name remains usable, but using the shorthand triggers a warning message (\"please use --noshorthandflag only\") and the shorthand is hidden from help.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// deprecate a flag shorthand by specifying its flag name and a usage message\nflags.MarkShorthandDeprecated(\"noshorthandflag\", \"please use --noshorthandflag only\")\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin text\nDESCRIPTION: The full text of the Developer Certificate of Origin (DCO) version 1.1 that contributors must certify to when making contributions to the project.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Importing pflag as flag in Go\nDESCRIPTION: Demonstrates how to import the `pflag` library, aliasing it to `flag` to maintain compatibility with code originally written for Go's standard `flag` package. This allows using `pflag` as a drop-in replacement.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport flag \"github.com/spf13/pflag\"\n```\n\n----------------------------------------\n\nTITLE: Querying Array Elements with JMESPath Search in Go\nDESCRIPTION: Illustrates selecting a specific field (`first`) from all elements (`[*]`) within an array (`foo`) using `jmespath.Search`. Requires parsing the JSON data first.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvar jsondata  = []byte(`{\"foo\": [{\"first\": \"a\", \"last\": \"b\"},\n                           {\"first\": \"c\", \"last\": \"d\"}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[*].first\", data)\n```\n\n----------------------------------------\n\nTITLE: Sample YAML Data for Unmarshaling and Marshaling in Go - YAML\nDESCRIPTION: This YAML snippet serves as input data for the Go example, illustrating nested keys and complex structures. The input consists of a top-level mapping where 'a' is a string and 'b' is a map containing another integer value and a list. This structure tests the Go code's ability to handle nested objects and sequences both in structs and in generic maps. The snippet is required for demonstrating YAML parsing; any changes to the format must be reflected in the struct definitions on the Go side. The data is processed as a raw string and converted to Go data structures during execution.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/gopkg.in/yaml.v2/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n\n```\n\n----------------------------------------\n\nTITLE: Using Bearer Token in HTTP Authorization Header for Docker Registry Access\nDESCRIPTION: Shows how a Docker client includes the issued JWT token in the 'Authorization' HTTP header as a Bearer token for subsequent requests to the registry service. This header enables the client to authenticate against the registry and perform authorized actions based on the token's embedded scopes. The snippet illustrates one example of the 'Authorization' header format conforming to RFC 6750 Section 2.1, which standardizes Bearer token usage in OAuth 2.0. This approach requires that the token is valid, unexpired, and grants the necessary permissions to the requested resource.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/token.md#_snippet_3\n\nLANGUAGE: HTTP\nCODE:\n```\nAuthorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IkJWM0Q6MkFWWjpVQjVaOktJQVA6SU5QTDo1RU42Ok40SjQ6Nk1XTzpEUktFOkJWUUs6M0ZKTDpQT1RMIn0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJCQ0NZOk9VNlo6UUVKNTpXTjJDOjJBVkM6WTdZRDpBM0xZOjQ1VVc6NE9HRDpLQUxMOkNOSjU6NUlVTCIsImF1ZCI6InJlZ2lzdHJ5LmRvY2tlci5jb20iLCJleHAiOjE0MTUzODczMTUsIm5iZiI6MTQxNTM4NzAxNSwiaWF0IjoxNDE1Mzg3MDE1LCJqdGkiOiJ0WUpDTzFjNmNueXk3a0FuMGM3cktQZ2JWMUgxYkZ3cyIsInNjb3BlIjoiamxoYXduOnJlcG9zaXRvcnk6c2FtYWxiYS9teS1hcHA6cHVzaCxwdWxsIGpsaGF3bjpuYW1lc3BhY2U6c2FtYWxiYTpwdWxsIn0.Y3zZSwaZPqy4y9oRBVRImZyv3m_S9XDHF1tWwN7mL52C_IiA73SJkWVNsvNqpJIn5h7A2F8biv_S2ppQ1lgkbw\n```\n\n----------------------------------------\n\nTITLE: Making HTTP CORS Requests Using curl in Bash\nDESCRIPTION: This Bash snippet uses curl to make a GET request to the '/foo' endpoint of the configured Go web server. It displays the response headers and body to verify that CORS headers like Access-Control-Allow-Methods and Access-Control-Allow-Origin are correctly set. No dependencies apart from curl. Input: none (direct invocation). Output: verbose HTTP response including CORS headers for inspection. Useful for manual API testing purposes.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl localhost:8080/foo -v\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics in YAML\nDESCRIPTION: This snippet configures Prometheus metrics for the registry, enabling the metrics and specifying the path to access them. The metrics cover storage, notification, and proxy statistics.  The URL to access the metrics is HOST:PORT/path, where HOST:PORT is defined in addr under debug.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nprometheus:\n  enabled: true\n  path: /metrics\n```\n\n----------------------------------------\n\nTITLE: Initializing Retrying Sink with Breaker Strategy in Go\nDESCRIPTION: This code initializes a retrying sink using `NewRetryingSink`. This sink retries failed events against the provided `httpSink`. It uses a `Breaker` to implement a backoff strategy, retrying events after 5 consecutive failures with a delay of one second before retrying. The retry mechanism is intended to handle transient errors in the HTTP calls.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-events/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nhs := newHTTPSink(/*...*/)\nretry := NewRetryingSink(hs, NewBreaker(5, time.Second))\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Checks in YAML\nDESCRIPTION: This snippet configures various health checks, including storage driver health, file existence checks, HTTP endpoint checks, and TCP server checks.  It defines the intervals, thresholds, and specific settings for each type of check.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nhealth:\n  storagedriver:\n    enabled: true\n    interval: 10s\n    threshold: 3\n  file:\n    - file: /path/to/checked/file\n      interval: 10s\n  http:\n    - uri: http://server.to.check/must/return/200\n      headers:\n        Authorization: [Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]\n      statuscode: 200\n      timeout: 3s\n      interval: 10s\n      threshold: 3\n  tcp:\n    - addr: redis-server.domain.com:6379\n      timeout: 3s\n      interval: 10s\n      threshold: 3\n```\n\n----------------------------------------\n\nTITLE: Changing Registry Listening Port Inside Container Using Environment Variable - console\nDESCRIPTION: Runs the registry container with environment variable 'REGISTRY_HTTP_ADDR' set to listen on port 5001 inside the container. Ports are mapped accordingly with '-p 5001:5001'. This allows changing the internal listening port, impacting client access. Requires registry:3 image and proper port mapping.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -e REGISTRY_HTTP_ADDR=0.0.0.0:5001 \\\n  -p 5001:5001 \\\n  --name registry-test \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Standardizing CPK Acronym Casing in Go Code\nDESCRIPTION: This directive enforces consistent capitalization for the 'CPK' (Customer-Provided Key) acronym across all Go source files (`source-file-go`). It replaces all occurrences of \"Cpk\" with \"CPK\".\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/Cpk/g, \"CPK\");\n```\n\n----------------------------------------\n\nTITLE: Enabling gRPC-Go Logging via Environment Variables (Console)\nDESCRIPTION: These console commands show how to enable detailed logging for the gRPC-Go library by setting two environment variables: `GRPC_GO_LOG_VERBOSITY_LEVEL` to a high number (e.g., 99 for maximum verbosity) and `GRPC_GO_LOG_SEVERITY_LEVEL` to `info` (or `warning`, `error`, etc.) to control the minimum severity level of logged messages.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_3\n\nLANGUAGE: Console\nCODE:\n```\n$ export GRPC_GO_LOG_VERBOSITY_LEVEL=99\n$ export GRPC_GO_LOG_SEVERITY_LEVEL=info\n```\n\n----------------------------------------\n\nTITLE: Creating Client Certificate Credential Before and After API Change - Go\nDESCRIPTION: This snippet describes the old and new approaches for creating a ClientCertificateCredential. Previously, a file path to the PEM certificate was provided; now, the certificate data must be parsed manually, and both certificates and private key are explicitly passed. The ParseCertificates helper assists with extraction and decoding, and developers must handle file I/O for certificate loading.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewClientCertificateCredential(\"tenant\", \"client-id\", \"/cert.pem\", nil)\n```\n\nLANGUAGE: go\nCODE:\n```\n// after\ncertData, err := os.ReadFile(\"/cert.pem\")\ncerts, key, err := ParseCertificates(certData, password)\ncred, err := NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\n```\n\n----------------------------------------\n\nTITLE: Verifying content integrity by comparing digests in Go\nDESCRIPTION: This snippet shows how to compare a previously generated digest with a new digest from the same content to verify if the content has changed. It ensures data integrity and detects modifications.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/opencontainers/go-digest/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nif id != digest.FromBytes([]byte(\"my content\")) {\n  return errors.New(\"the content has changed!\")\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Claims in Go\nDESCRIPTION: Shows how to use the `jwt.NewValidator` function to create a validator and then use its `Validate` method to validate claims independently of parsing or verifying a token.  The validator can be configured with options like leeway for time-based claims.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nvar v = jwt.NewValidator(jwt.WithLeeway(5*time.Second))\nv.Validate(myClaims)\n```\n\n----------------------------------------\n\nTITLE: Creating a Config Instance with Options in Go\nDESCRIPTION: Implements an unexported `newConfig` function that initializes a `config` struct with default values and then iteratively applies provided functional options. This function centralizes default setting, option application, and potential validation, returning the configured struct or an error.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\n// newConfig returns an appropriately configured config.\nfunc newConfig(options ...Option) config {\n\t// Set default values for config.\n\tconfig := config{/* […] */}\n\tfor _, option := range options {\n\t\tconfig = option.apply(config)\n\t}\n\t// Perform any validation here.\n\treturn config\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hooks - YAML\nDESCRIPTION: This snippet configures logging hooks' behavior. It defines a sequence handler to send emails, specifying the email server's address, authentication details, sender, and recipient information. It sets the type of hook to `mail` and the log level to `panic`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nhooks:\n  - type: mail\n    levels:\n      - panic\n    options:\n      smtp:\n        addr: smtp.sendhost.com:25\n        username: sendername\n        password: password\n        insecure: true\n      from: name@sendhost.com\n      to:\n        - name@receivehost.com\n```\n\n----------------------------------------\n\nTITLE: Installing pflag using go get\nDESCRIPTION: Provides the shell command to install the `pflag` library using the standard Go toolchain.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/spf13/pflag\n```\n\n----------------------------------------\n\nTITLE: Pre-compiling JMESPath Query in Go\nDESCRIPTION: Explains how to pre-compile a JMESPath expression using `jmespath.Compile` for improved performance when executing the same query multiple times. Shows error handling for compilation failures and running the query on the compiled object.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": \"bar\"}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nprecompiled, err := Compile(\"foo\")\nif err != nil{\n    // ... handle the error\n}\nresult, err := precompiled.Search(data)\n```\n\n----------------------------------------\n\nTITLE: Client Secret Authentication with autorest/adal in Go\nDESCRIPTION: Shows how to authenticate with Azure using a client secret and the autorest/adal library in Go. Prerequisites include the Azure subscription SDK, autorest, and adal packages. The code constructs OAuth configuration and a ServicePrincipalToken, then assigns a BearerAuthorizer to an Azure subscriptions client. Key parameters: tenantID, clientID, secret. The output is an authenticated subscriptions client.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.azure.com/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Using the logr Logger within a Component in Go\nDESCRIPTION: Illustrates how a component (represented by `appObject`) stores and uses a received `logr.Logger`. The example shows embedding the logger in a struct and calling its `Info` method with key-value pairs for structured logging. Requires the `logr` and `time` packages.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/go-logr/logr/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n    type appObject struct {\n        // ... other fields ...\n        logger logr.Logger\n        // ... other fields ...\n    }\n\n    func (app *appObject) Run() {\n        app.logger.Info(\"starting up\", \"timestamp\", time.Now())\n\n        // ... app code ...\n\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags: Paginated Next Request\nDESCRIPTION: This snippet demonstrates how to request the next page of a paginated image tag listing, using the `Link` header from the previous response. It incorporates `n` (number of results) and `last` (the last tag from the prior page).\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_22\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/tags/list?n=<n from the request>&last=<last tag value from previous response>\n```\n\n----------------------------------------\n\nTITLE: Correcting Typo in Go Constant Name\nDESCRIPTION: This directive corrects a typo in a constant name within `zz_constants.go`, changing `IncrementalCopyOfEralierVersionSnapshotNotAllowed` to the correctly spelled `IncrementalCopyOfEarlierVersionSnapshotNotAllowed`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_constants.go\n  where: $\n  transform: >-\n    return $.\n      replace(/IncrementalCopyOfEralierVersionSnapshotNotAllowed/g, \"IncrementalCopyOfEarlierVersionSnapshotNotAllowed\");\n```\n\n----------------------------------------\n\nTITLE: Registering Fatal Exit Handlers with Logrus in Go\nDESCRIPTION: Shows how to register handlers that will be called before Logrus exits the program on fatal log messages. This allows for graceful shutdown before the application terminates.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nhandler := func() {\n  // gracefully shutdown something...\n}\nlogrus.RegisterExitHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Declared Type Option in Go\nDESCRIPTION: Shows how to implement the `Option` interface for a custom declared type (`MyType`). An unexported struct (`myTypeOption`) holds the value, and an exported factory function (`WithMyType`) takes the custom type value and returns the corresponding option implementation.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_11\n\nLANGUAGE: go\nCODE:\n```\ntype myTypeOption struct {\n\tMyType MyType\n}\n\nfunc (o myTypeOption) apply(c config) config {\n\tc.MyType = o.MyType\n    return c\n}\n\n// WithMyType sets T to have include MyType.\nfunc WithMyType(t MyType) Option {\n\treturn myTypeOption{t}\n}\n```\n\n----------------------------------------\n\nTITLE: Rewrite Middleware Configuration Example YAML\nDESCRIPTION: This YAML configuration demonstrates how to use the rewrite middleware to modify the URL generated by the Azure Blob Storage driver. It rewrites the scheme to HTTPS, sets the host to an Azure CDN endpoint, and trims the container name prefix from the path.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/storage-drivers/middleware/rewrite.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  azure:\n    accountname: \"ACCOUNT_NAME\"\n    accountkey: \"******\"\n    container: container-name\nmiddleware:\n  storage:\n    - name: rewrite\n      options:\n        scheme: https\n        host: example-cdn-endpoint.azurefd.net\n        trimpathprefix: /container-name\n```\n\n----------------------------------------\n\nTITLE: Example Base URI for the 'library/ubuntu' Repository\nDESCRIPTION: Illustrates a concrete example of the API V2 base URI pattern applied to the 'library/ubuntu' repository. All API calls targeting this specific repository will use this prefix.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_1\n\nLANGUAGE: none\nCODE:\n```\n/v2/library/ubuntu/\n```\n\n----------------------------------------\n\nTITLE: Adding registry CA certificate to Ubuntu trusted certificates\nDESCRIPTION: Commands to add a self-signed certificate to the Ubuntu system's trusted certificate store. This allows Docker to authenticate with the registry when using basic authentication.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/insecure.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cp certs/domain.crt /usr/local/share/ca-certificates/myregistrydomain.com.crt\nupdate-ca-certificates\n```\n\n----------------------------------------\n\nTITLE: Adding Properties Field to BlobPrefix Definition\nDESCRIPTION: This YAML directive adds a 'Properties' field to the 'BlobPrefix' definition in the swagger document.  It references the 'BlobPropertiesInternal' definition for its structure.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobPrefix.properties[\"Properties\"] = {\n      \"type\": \"object\",\n      \"$ref\": \"#/definitions/BlobPropertiesInternal\"\n    };\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying LogRecord Timestamp in Go\nDESCRIPTION: Defines methods on the `Record` struct to get and set the `Timestamp` field representing the log record's timestamp. These methods provide safe access and modification of the timestamp, crucial for accurate log timing. Requires the Go `time` package and the `Record` struct from the OpenTelemetry logs bridge API.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) Timestamp() time.Time\nfunc (r *Record) SetTimestamp(t time.Time)\n```\n\n----------------------------------------\n\nTITLE: Evaluating Boolean Conditions in CEL (C Syntax Example)\nDESCRIPTION: This snippet demonstrates a boolean condition using CEL syntax to determine whether a transaction withdrawal is allowed based on account balance, overdraft protection, and overdraft limit. The condition uses logical operators (>=, ||, &&, -) and references the fields of 'account' and 'transaction' objects. Input variables must be present in the evaluation context with their expected types. The output is a boolean value indicating whether the withdrawal should be permitted. No external dependencies are required for the snippet itself, but evaluation requires embedding within a CEL-supporting host.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cel.dev/expr/README.md#_snippet_0\n\nLANGUAGE: c\nCODE:\n```\n// Condition\naccount.balance >= transaction.withdrawal\n    || (account.overdraftProtection\n    && account.overdraftLimit >= transaction.withdrawal  - account.balance)\n```\n\n----------------------------------------\n\nTITLE: Opening URL in Browser - OpenURL\nDESCRIPTION: This Go function `OpenURL` takes a URL as a string and opens it in a new browser window. The choice of browser is determined by the client environment. It returns an error if the URL cannot be opened.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/pkg/browser/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenURL(url string) error\n```\n\n----------------------------------------\n\nTITLE: Defining Flags with Shorthands using pflag in Go\nDESCRIPTION: Shows how to define flags with single-letter shorthands using the `P`-suffixed functions (`IntP`, `BoolVarP`, `VarP`). This allows users to specify flags using a shorter syntax (e.g., `-f` instead of `--flagname`).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nvar flagvar bool\nfunc init() {\n\tflag.BoolVarP(&flagvar, \"boolname\", \"b\", true, \"help message\")\n}\nflag.VarP(&flagVal, \"varname\", \"v\", \"help message\")\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boolean Option (Default False) in Go\nDESCRIPTION: Demonstrates implementing the `Option` interface for a boolean setting that defaults to `false`. An unexported type (`defaultFalseOption`) holds the value, and an exported function (`WithOption`) returns an instance configured to set the boolean field to `true`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype defaultFalseOption bool\n\nfunc (o defaultFalseOption) apply(c config) config {\n\tc.Bool = bool(o)\n    return c\n}\n\n// WithOption sets a T to have an option included.\nfunc WithOption() Option {\n\treturn defaultFalseOption(true)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic xxhash API Functions in Go\nDESCRIPTION: The core API functions of the xxhash package, including the Sum64 and Sum64String functions for hashing byte slices and strings, and the New function for creating a new Digest instance.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc Sum64(b []byte) uint64\nfunc Sum64String(s string) uint64\ntype Digest struct{ ... }\n    func New() *Digest\n```\n\n----------------------------------------\n\nTITLE: Unpacking OTEL_RESOURCE_ATTRIBUTES using WithFromEnv in Go\nDESCRIPTION: This Go code snippet demonstrates how to use the WithFromEnv option when creating a resource to unpack the OTEL_RESOURCE_ATTRIBUTES environment variable. This allows the detector to automatically retrieve the Kubernetes attributes set in the environment.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n...\n// Detect your resources\nres, err := resource.New(ctx,\n    resource.WithDetectors(gcp.NewDetector()),\n    resource.WithTelemetrySDK(),\n    resource.WithFromEnv(), // unpacks OTEL_RESOURCE_ATTRIBUTES\n    // Add your own custom attributes to identify your application\n    resource.WithAttributes(\n        semconv.ServiceNameKey.String(\"my-application\"),\n        semconv.ServiceNamespaceKey.String(\"my-company-frontend-team\"),\n    ),\n)\n...\n```\n\n----------------------------------------\n\nTITLE: Querying JSON with JMESPath Search in Go\nDESCRIPTION: Demonstrates the basic usage of the `jmespath.Search` function to query a Go interface{} representation of JSON data using a JMESPath expression. It shows parsing a JSON byte slice into an interface{} and performing a simple selection.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/jmespath/go-jmespath\"\n\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.Search(\"foo.bar.baz[2]\", data)\n```\n\n----------------------------------------\n\nTITLE: Implementing SecureJoin Function in Go for Secure Path Joining\nDESCRIPTION: This snippet defines the SecureJoin function, which securely joins a root and an unsafe path, resolving symlinks relative to the root and ensuring the resulting path is canonical and safe. It requires a certain understanding of system security practices and uses external commands like 'readlink' and 'chroot' on Linux systems. Dependencies include the 'os/exec' and 'path/filepath' packages. It is intended for applications requiring secure file path resolution, especially in handling user input or untrusted paths.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/cyphar/filepath-securejoin/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage securejoin\n\nimport (\n\t\"os/exec\"\n\t\"path/filepath\"\n)\n\nfunc SecureJoin(root, unsafePath string) (string, error) {\n\tunsafePath = string(filepath.Separator) + unsafePath\n\tcmd := exec.Command(\"chroot\", root,\n\t\t\"readlink\", \"--canonicalize-missing\", \"--no-newline\", unsafePath)\n\toutput, err := cmd.CombinedOutput()\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\texpanded := string(output)\n\treturn filepath.Join(root, expanded), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Client Certificate Authentication with azidentity in Go\nDESCRIPTION: Shows how to perform client certificate authentication in Go using azidentity. It reads a PKCS#12 certificate, parses it into usable certificate and key components, and uses them to construct a ClientCertificateCredential. Requires os and azidentity. Inputs: path to .pfx certificate, tenantID, clientID; Output: authenticated armsubscriptions client.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/resources/armsubscriptions\"\n)\n\ncertData, err := os.ReadFile(\"./example.pfx\")\nhandle(err)\n\ncerts, key, err := azidentity.ParseCertificates(certData, nil)\nhandle(err)\n\ncred, err = azidentity.NewClientCertificateCredential(tenantID, clientID, certs, key, nil)\nhandle(err)\n\nclient, err := armsubscriptions.NewClient(cred, nil)\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories: Paginated Catalog Next Request\nDESCRIPTION: This snippet shows how to request the next page of a paginated catalog, using the `Link` header from the previous response.  It specifies both the number of results per page (`n`) and the last repository from the previous page (`last`).\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_17\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/_catalog?n=<n from the request>&last=<last repository value from previous response>\n```\n\n----------------------------------------\n\nTITLE: Defining the Option Interface in Go\nDESCRIPTION: Defines the `Option` interface used in the functional options pattern. It contains a single unexported method `apply` which takes and returns a `config` struct by value to prevent heap allocation. This design seals the interface, preventing external implementation.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\ntype Option interface {\n\tapply(config) config\n}\n```\n\n----------------------------------------\n\nTITLE: Importing jwt-go in Go code\nDESCRIPTION: Code snippet showing how to import the jwt-go package in a Go program using the import statement.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/golang-jwt/jwt/v5\"\n```\n\n----------------------------------------\n\nTITLE: Example JSON for dynamic structure decoding\nDESCRIPTION: A JSON example demonstrating when mapstructure would be useful. This shows a case where the structure needed depends on the 'type' field in the data.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"person\",\n  \"name\": \"Mitchell\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs with /proc and /sys - Go\nDESCRIPTION: This Go snippet shows how to initialize a procfs object that requires access to both /proc and /sys filesystems. The `blockdevice.NewFS` function is used to create a new FS object, specifying the paths to /proc and /sys. The `ProcDiskstats()` function is then called on this object to retrieve disk statistics. It requires both /proc and /sys mounts to function correctly and handles errors during initialization and data retrieval.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfs, err := blockdevice.NewFS(\"/proc\", \"/sys\")\nstats, err := fs.ProcDiskstats()\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Too Many Requests Error - HTTP\nDESCRIPTION: Demonstrates a 429 Too Many Requests HTTP response indicating rate limiting. The JSON body details the error. Inputs: Excessive DELETE or other requests over a short timeframe. Outputs: 429 status and rate-limiting error details in JSON.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_39\n\nLANGUAGE: HTTP\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Generation Settings\nDESCRIPTION: This YAML snippet configures the code generation settings for the Azure Blob Storage SDK using Autorest. It specifies the use of Go as the target language, clears the output folder, sets the version, defines the license header, and points to the input swagger file.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ngo: true\nclear-output-folder: false\nversion: \"^3.0.0\"\nlicense-header: MICROSOFT_MIT_NO_VERSION\ninput-file: \"https://raw.githubusercontent.com/Azure/azure-rest-api-specs/ae95eb6a4701d844bada7d1c4f5ecf4a7444e5b8/specification/storage/data-plane/Microsoft.BlobStorage/stable/2025-01-05/blob.json\"\ncredential-scope: \"https://storage.azure.com/.default\"\noutput-folder: ../generated\nfile-prefix: \"zz_\"\nopenapi-type: \"data-plane\"\nverbose: true\nsecurity: AzureKey\nmodelerfour:\n  group-parameters: false\n  seal-single-value-enum-by-default: true\n  lenient-model-deduplication: true\nexport-clients: true\nuse: \"@autorest/go@4.0.0-preview.65\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Error Type in Go\nDESCRIPTION: Illustrates creating a custom error type (`MyCustomErr`) in Go. This involves defining a struct and implementing the `Error()` method, which satisfies the built-in `error` interface, allowing for more structured error information.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype MyCustomErr struct {\n  Msg string\n}\nfunc (m MyCustomErr) Error() string { // This implements \"error\"\n  return m.Msg\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 429 Too Many Requests Error (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 429 status code when the client exceeds the allowed request rate limit. Includes the `TOOMANYREQUESTS` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Authentication Token from Docker Registry Token Server via HTTP GET\nDESCRIPTION: Demonstrates the HTTP GET request a Docker client makes to obtain an authentication token from the token server. The request URL includes query parameters specifying the service and the repository access scope (pull, push). The token server authenticates the client based on provided credentials (Basic Auth or OAuth2), verifies access permissions for the requested scope, and returns a JSON Web Token (JWT) with the authorized access scopes embedded. This token is then used by the client to authenticate subsequent requests. The snippet includes a sample 200 OK JSON response with the issued token and its metadata.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/token.md#_snippet_2\n\nLANGUAGE: HTTP\nCODE:\n```\nhttps://auth.docker.io/token?service=registry.docker.io&scope=repository:samalba/my-app:pull,push\n```\n\nLANGUAGE: HTTP\nCODE:\n```\nHTTP/1.1 200 OK\nContent-Type: application/json\n\n{\"token\": \"eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiIsImtpZCI6IlBZWU86VEVXVTpWN0pIOjI2SlY6QVFUWjpMSkMzOlNYVko6WEdIQTozNEYyOjJMQVE6WlJNSzpaN1E2In0.eyJpc3MiOiJhdXRoLmRvY2tlci5jb20iLCJzdWIiOiJqbGhhd24iLCJhdWQiOiJyZWdpc3RyeS5kb2NrZXIuY29tIiwiZXhwIjoxNDE1Mzg3MzE1LCJuYmYiOjE0MTUzODcwMTUsImlhdCI6MTQxNTM4NzAxNSwianRpIjoidFlKQ08xYzZjbnl5N2tBbjBjN3JLUGdiVjFIMWJGd3MiLCJhY2Nlc3MiOlt7InR5cGUiOiJyZXBvc2l0b3J5IiwibmFtZSI6InNhbWFsYmEvbXktYXBwIiwiYWN0aW9ucyI6WyJwdXNoIl19XX0.QhflHPfbd6eVF4lM9bwYpFZIV0PfikbyXuLx959ykRTBpe3CYnzs6YBK8FToVb5R47920PVLrh8zuLzdCr9t3w\", \"expires_in\": 3600,\"issued_at\": \"2009-11-10T23:00:00Z\"}\n```\n\n----------------------------------------\n\nTITLE: Configuring webhook notification endpoints in YAML\nDESCRIPTION: This snippet shows how to configure a Docker Registry instance to send webhook notifications to defined HTTP endpoints. It includes fields for endpoint name, target URL, HTTP headers (such as Authorization tokens), request timeout durations, failure thresholds to trigger backoff, and backoff durations. The configuration is intended to be inserted into the registry's main configuration file and enables event dispatching to external services. Proper configuration should result in informative log messages upon registry startup.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nnotifications:\n  endpoints:\n    - name: alistener\n      url: https://mylistener.example.com/event\n      headers:\n        Authorization: [Bearer <your token, if needed>]\n      timeout: 500ms\n      threshold: 5\n      backoff: 1s\n```\n\n----------------------------------------\n\nTITLE: Managed Identity Authentication with autorest/adal in Go\nDESCRIPTION: Demonstrates the use of managed identity authentication with autorest/adal in Go for Azure resources. No credentials are required for default MSI, but user-assigned identity uses ManagedIdentityOptions. Generates a ServicePrincipalToken and configures the Azure SDK client. Parameters: resource URL, optional ManagedIdentityOptions; Output: Subscription client using MSI.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\", nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure\nDESCRIPTION: This code snippet represents the standard JSON structure for error responses returned by the Distribution API when a request fails. It includes an array of error objects, each containing an error code, message, and optional details. This format is consistently used for different error scenarios like authentication failures, repository not found errors, and access denied errors.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_26\n\nLANGUAGE: none\nCODE:\n```\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Exemplars Export in OpenTelemetry Go Metric SDK\nDESCRIPTION: This snippet demonstrates enabling exemplars export by setting the environment variable `OTEL_GO_X_EXEMPLAR` to true (case-insensitive). When enabled, measurements may be exported as exemplars. It requires setting the variable accordingly in the environment.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_EXEMPLAR=true\n```\n\n----------------------------------------\n\nTITLE: Git commit signature format\nDESCRIPTION: The format for signing off on git commits in Docker Distribution projects, using your real name and email address.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/opencontainers/go-digest/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: JWT Claim Set Construction\nDESCRIPTION: This snippet details the structure of the JWT claim set, including registered claims such as 'iss', 'sub', 'aud', 'exp', 'nbf', 'iat', and 'jti', along with a custom 'access' claim listing resource type, name, and allowed actions. The claim set provides the token's metadata and scope of access for authorization purposes.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/jwt.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"iss\": \"auth.docker.com\",\n    \"sub\": \"jlhawn\",\n    \"aud\": \"registry.docker.com\",\n    \"exp\": 1415387315,\n    \"nbf\": 1415387015,\n    \"iat\": 1415387015,\n    \"jti\": \"tYJCO1c6cnyy7kAn0c7rKPgbV1H1bFws\",\n    \"access\": [\n        {\n            \"type\": \"repository\",\n            \"name\": \"samalba/my-app\",\n            \"actions\": [\"pull\", \"push\"]\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: AWS S3 Policy for Docker Registry Access\nDESCRIPTION: This AWS IAM policy provides the required permissions for a Docker Registry to interact with an S3 bucket. It includes permissions for listing the bucket and its uploads, as well as operations on objects such as put, get, delete, and multipart upload management.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/storage-drivers/s3.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:ListBucket\",\n        \"s3:GetBucketLocation\",\n        \"s3:ListBucketMultipartUploads\"\n      ],\n      \"Resource\": \"arn:aws:s3:::S3_BUCKET_NAME\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"s3:PutObject\",\n        \"s3:GetObject\",\n        \"s3:DeleteObject\",\n        \"s3:ListMultipartUploadParts\",\n        \"s3:AbortMultipartUpload\"\n      ],\n      \"Resource\": \"arn:aws:s3:::S3_BUCKET_NAME/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restricting Manifest URLs with Regex Validation (YAML)\nDESCRIPTION: Configures validation rules for URLs found within pushed manifests using regular expressions. The `allow` list specifies patterns that URLs must match, and the `deny` list specifies patterns that URLs must not match. If `allow` is unset, any manifest with URLs will fail validation; otherwise, URLs must match an `allow` pattern and not match any `deny` pattern.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  manifests:\n    urls:\n      allow:\n        - ^https?://([^/]+\\.)*example\\.com/\n      deny:\n        - ^https?://www\\.example\\.com/\n```\n\n----------------------------------------\n\nTITLE: Digest Methods Implementation in Go\nDESCRIPTION: The key methods of the Digest type, which implements hash.Hash64 interface, allowing for incremental hashing through Write and WriteString methods, and retrieving the final hash with Sum64.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nfunc (*Digest) Write([]byte) (int, error)\nfunc (*Digest) WriteString(string) (int, error)\nfunc (*Digest) Sum64() uint64\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Not Found Error for Unknown Upload (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 404 status code when attempting to operate on an upload UUID that is unknown to the registry. Includes the `BLOB_UPLOAD_UNKNOWN` error code. The upload must be restarted.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Go Tests with Race Detection\nDESCRIPTION: Command to run Go tests with race condition detection enabled across multiple CPU cores with a timeout limit.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngo test -race -cpu 1,4 -timeout 7m ./...\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Storage Middleware in YAML\nDESCRIPTION: Demonstrates how to configure Amazon CloudFront as storage middleware in YAML for a Docker registry to serve layers via CDN. This configuration requires the S3 storage driver (not shown). Key options specified include the CloudFront distribution's base URL (`baseurl`), the path to the private key file (`privatekey`), the CloudFront key pair ID (`keypairid`), and the duration for signed URLs (`duration`).\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nmiddleware:\n  storage:\n  - name: cloudfront\n    disabled: false\n    options:\n      baseurl: http://d111111abcdef8.cloudfront.net\n      privatekey: /path/to/asecret.pem\n      keypairid: asecret\n      duration: 60s\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage - YAML\nDESCRIPTION: This snippet shows the different configuration options for storage backends. It configures multiple backends including `filesystem`, `azure`, `gcs`, and `s3`. You must configure exactly one backend. The parameters vary for each storage type, detailing configurations like root directories, account keys, bucket names, and authentication specifics.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nstorage:\n  filesystem:\n    rootdirectory: /var/lib/registry\n  azure:\n    accountname: accountname\n    accountkey: base64encodedaccountkey\n    container: containername\n  gcs:\n    bucket: bucketname\n    keyfile: /path/to/keyfile\n    credentials:\n      type: service_account\n      project_id: project_id_string\n      private_key_id: private_key_id_string\n      private_key: private_key_string\n      client_email: client@example.com\n      client_id: client_id_string\n      auth_uri: http://example.com/auth_uri\n      token_uri: http://example.com/token_uri\n      auth_provider_x509_cert_url: http://example.com/provider_cert_url\n      client_x509_cert_url: http://example.com/client_cert_url\n    rootdirectory: /gcs/object/name/prefix\n  s3:\n    accesskey: awsaccesskey\n    secretkey: awssecretkey\n    region: us-west-1\n    regionendpoint: http://myobjects.local\n    forcepathstyle: true\n    accelerate: false\n    bucket: bucketname\n    encrypt: true\n    keyid: mykeyid\n    secure: true\n    v4auth: true\n    chunksize: 5242880\n    multipartcopychunksize: 33554432\n    multipartcopymaxconcurrency: 100\n    multipartcopythresholdsize: 33554432\n    rootdirectory: /s3/object/name/prefix\n    loglevel: debug\n  inmemory:\n  delete:\n    enabled: false\n  cache:\n    blobdescriptor: inmemory\n    blobdescriptorsize: 10000\n  maintenance:\n    uploadpurging:\n      enabled: true\n      age: 168h\n      interval: 24h\n      dryrun: false\n    readonly:\n      enabled: false\n  redirect:\n    disable: false\n```\n\n----------------------------------------\n\nTITLE: Fixing XML String for ObjectReplicationMetadata\nDESCRIPTION: This YAML directive renames the 'ObjectReplicationMetadata' property to 'OrMetadata' in the 'BlobItemInternal' definition. This ensures that the XML serialization uses the correct name, potentially avoiding conflicts or issues with the Go XML library.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal.properties[\"OrMetadata\"] = $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n    delete $.BlobItemInternal.properties[\"ObjectReplicationMetadata\"];\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Not Found (404 Response) - Docker Registry API\nDESCRIPTION: Displays the 404 Not Found response when the registry does not recognize the upload UUID specified in the request, indicating the upload may have been cancelled or never started. It provides the standard JSON error body structure.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_89\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Missing Layer Error in Docker Registry - HTTP\nDESCRIPTION: Demonstrates the HTTP 400 Bad Request response for missing blob (layer) errors when uploading a manifest to a Docker registry. The response is JSON-encoded with detailed error information including a specific blob digest. Prerequisites: Docker registry must support JSON error responses for manifest uploads. Inputs: Manifest upload request with missing or unknown blob references. Outputs: 400 status, Content-Type application/json, structured error object.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_31\n\nLANGUAGE: HTTP\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n    \"errors\": [\n        {\n            \"code\": \"BLOB_UNKNOWN\",\n            \"message\": \"blob unknown to registry\",\n            \"detail\": {\n                \"digest\": \"<digest>\"\n            }\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting Various CreateRequest/HandleResponse Methods\nDESCRIPTION: This YAML directive exports several internal 'createRequest' and 'HandleResponse' methods in 'zz_container_client.go' and 'zz_pageblob_client.go'. This modification changes the function names to uppercase, making them publicly accessible within the SDK.  It applies specifically to listBlobHierarchySegment and getPageRanges related methods.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_container_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/listBlobHierarchySegmentCreateRequest/g, function(_, s) { return `ListBlobHierarchySegmentCreateRequest` }).\n      replace(/listBlobHierarchySegmentHandleResponse/g, function(_, s) { return `ListBlobHierarchySegmentHandleResponse` });\n\n- from: zz_pageblob_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/getPageRanges(Diff)?CreateRequest/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}CreateRequest` }).\n      replace(/getPageRanges(Diff)?HandleResponse/g, function(_, s) { if (s === undefined) { s = '' }; return `GetPageRanges${s}HandleResponse` });\n```\n\n----------------------------------------\n\nTITLE: Walking Registered Routes with Gorilla Mux in Go\nDESCRIPTION: This code snippet demonstrates how to iterate over all registered routes in a mux.Router instance using the Walk method. It retrieves route details such as path templates, regexps, query templates, methods, and regexps and prints them out. Used for debugging or route documentation, it requires the gorilla/mux package and is helpful for inspecting the router's configuration.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/mux/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nerr := r.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {\n pathTemplate, err := route.GetPathTemplate()\n if err == nil {\n  fmt.Println(\"ROUTE:\", pathTemplate)\n }\n pathRegexp, err := route.GetPathRegexp()\n if err == nil {\n  fmt.Println(\"Path regexp:\", pathRegexp)\n }\n queriesTemplates, err := route.GetQueriesTemplates()\n if err == nil {\n  fmt.Println(\"Queries templates:\", strings.Join(queriesTemplates, \",\"))\n }\n queriesRegexps, err := route.GetQueriesRegexp()\n if err == nil {\n  fmt.Println(\"Queries regexps:\", strings.Join(queriesRegexps, \",\"))\n }\n methods, err := route.GetMethods()\n if err == nil {\n  fmt.Println(\"Methods:\", strings.Join(methods, \",\"))\n }\n fmt.Println()\n return nil\n})\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Bad Request (400 Response) - Docker Registry API\nDESCRIPTION: Illustrates the 400 Bad Request response received when the registry encounters an error processing an upload chunk, requiring the upload to be restarted. It shows the standard JSON error response body format used to convey specific error codes and messages.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_88\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Azure Developer CLI access token\nDESCRIPTION: This Azure Developer CLI command retrieves an access token for the default scope, using JSON format.  The output of this command should not be shared because it contains a valid access token.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nazd auth token --output json --scope https://management.core.windows.net/.default\n```\n\n----------------------------------------\n\nTITLE: Opening Reader in Browser - OpenReader\nDESCRIPTION: This Go function `OpenReader` accepts an `io.Reader` as input, consumes its contents, and displays the result in a new browser window. It handles the reading process and presents the data in the browser.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/pkg/browser/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenReader(r io.Reader) error\n```\n\n----------------------------------------\n\nTITLE: Signature for Exported Option Functions in Go\nDESCRIPTION: Shows the standard function signature for exported factory functions that return an `Option`. These functions encapsulate the creation of specific option implementations and are typically prefixed with `With*` or `Without*`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc With*(…) Option { … }\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Registry Service\nDESCRIPTION: Creates a Docker service for the registry. It configures constraints, mounts secrets and volumes, sets environment variables, and publishes ports. It requires pre-existing TLS certificates stored as secrets and a directory `/mnt/registry` on the node where the service is running.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_12\n\nLANGUAGE: console\nCODE:\n```\n$ docker service create \\\n  --name registry \\\n  --secret domain.crt \\\n  --secret domain.key \\\n  --constraint 'node.labels.registry==true' \\\n  --mount type=bind,src=/mnt/registry,dst=/var/lib/registry \\\n  -e REGISTRY_HTTP_ADDR=0.0.0.0:443 \\\n  -e REGISTRY_HTTP_TLS_CERTIFICATE=/run/secrets/domain.crt \\\n  -e REGISTRY_HTTP_TLS_KEY=/run/secrets/domain.key \\\n  --publish published=443,target=443 \\\n  --replicas 1 \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Creating Event Queue Using the Event Package in Go\nDESCRIPTION: This Go snippet creates a queue that will process events asynchronously. It uses `NewQueue` with a previous retry sink. The queue allows sending events without blocking the current execution path, which is ideal for use in HTTP requests. The queue stores events sent via `Write` and processes them in the background.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-events/README.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nqueue := NewQueue(retry)\n```\n\n----------------------------------------\n\nTITLE: Initiate Monolithic Blob Upload Request\nDESCRIPTION: HTTP POST request to upload a blob in a single request. Includes the blob digest as a query parameter and the binary data in the request body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_62\n\nLANGUAGE: none\nCODE:\n```\nPOST /v2/<name>/blobs/uploads/?digest=<digest>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Length: <length of blob>\nContent-Type: application/octet-stream\n\n<binary data>\n```\n\n----------------------------------------\n\nTITLE: Fixing BlobDeleteType Enum\nDESCRIPTION: This YAML directive modifies the 'BlobDeleteType' parameter, explicitly setting its allowed values to 'None' and 'Permanent'.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.BlobDeleteType.enum;\n    $.BlobDeleteType.enum = [\n        \"None\",\n        \"Permanent\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Enhancing Trace and Metric Exporters with Connection and Retry Logic in Go\nDESCRIPTION: This snippet outlines the transition to using gRPC `ClientConn` for exporters to manage name resolution, connection establishment, retries, and TLS handshakes robustly. It introduces `RetryConfig` for retry behavior, default CA pools for secure connections, and lazy evaluation of resource attributes to enable dynamic environment configuration. These improvements enhance exporter reliability and security.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code example provided, only explanation of connection handling enhancements\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response - Unauthorized - API\nDESCRIPTION: Presents the HTTP 401 Unauthorized response returned when the client fails to authenticate with the registry. The response includes a `WWW-Authenticate` header indicating the required authentication scheme and a JSON body with an `UNAUTHORIZED` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_47\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Logging In and Pulling Image (console)\nDESCRIPTION: Illustrates logging into the proxied registry using the `testuser` credentials (only authorized for pull) and pulling the `myregistrydomain.com:5043/test` image, demonstrating read access for all authenticated users. Requires Docker daemon, running services, and the image to exist.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ docker login myregistrydomain.com:5043\n$ docker pull myregistrydomain.com:5043/test\n```\n\n----------------------------------------\n\nTITLE: Initializing a Namespace with Labels in Go\nDESCRIPTION: This code snippet demonstrates how to create a new metrics namespace with associated labels, which is recommended for grouping related metrics within Docker projects. The namespace helps enforce consistent naming and allows attaching constant labels like version and commit hash.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-metrics/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nns := metrics.NewNamespace(\"engine\", \"daemon\", metrics.Labels{\n        \"version\": dockerversion.Version,\n        \"commit\":  dockerversion.GitCommit,\n})\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Status Retrieval via HTTP GET to Docker Registry (none)\nDESCRIPTION: Defines the GET request to query the status of a resumable blob upload identified by a UUID. Required headers include Host, Authorization, and path parameters such as repository name and upload UUID. The response on success is HTTP 204 No Content with a Range header indicating the last received byte offset, enabling clients to resume interrupted uploads reliably. Custom headers like Docker-Upload-UUID are included to correlate the request.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_75\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/<name>/blobs/uploads/<uuid>\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\n----------------------------------------\n\nTITLE: Managing Docker Compose Stack Lifecycle via Console Shell\nDESCRIPTION: Launches Nginx and Docker registry containers in detached mode via Docker Compose. This step assumes 'docker-compose.yml' is correctly configured and Docker Compose is available. Starts the authentication-enabled registry stack, providing endpoints for authenticated login, image push, and pull.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Verifying IMDS availability on Azure VM - cURL\nDESCRIPTION: This snippet uses `curl` to check if the Instance Metadata Service (IMDS) endpoint is reachable from an Azure Virtual Machine. It sends a request to the IMDS endpoint to retrieve an access token for Azure Resource Manager. The output, which contains the access token, should not be shared for security reasons.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncurl 'http://169.254.169.254/metadata/identity/oauth2/token?resource=https://management.core.windows.net&api-version=2018-02-01' -H \"Metadata: true\"\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tags using Shell Script\nDESCRIPTION: Executes the `tag.sh` script after merging the release pull request. Sets the `TAG` environment variable to the released version (e.g., `v1.0.0`). This script creates Git tags for the packages within the distribution.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/RELEASING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/tag.sh\n```\n\n----------------------------------------\n\nTITLE: Defining the Base URI Structure for API V2 Endpoints\nDESCRIPTION: Specifies the fundamental URI structure for all Docker Registry API V2 endpoints. All endpoints are prefixed with `/v2/` followed by the repository `<name>`, establishing a namespace for operations within that repository.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n/v2/<name>/\n```\n\n----------------------------------------\n\nTITLE: Integrating Standard Go Flags with pflag in Go\nDESCRIPTION: Demonstrates how to add flags defined using Go's standard `flag` package (`goflag`) to a `pflag` FlagSet (specifically the global `flag.CommandLine`). This allows `pflag` to parse flags defined by standard Go libraries or dependencies. `goflag.CommandLine` represents the default set of standard Go flags.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tgoflag \"flag\"\n\tflag \"github.com/spf13/pflag\"\n)\n\nvar ip *int = flag.Int(\"flagname\", 1234, \"help message for flagname\")\n\nfunc main() {\n\tflag.CommandLine.AddGoFlagSet(goflag.CommandLine)\n\tflag.Parse()\n}\n```\n\n----------------------------------------\n\nTITLE: Resumable Blob Upload Accepted Response - none\nDESCRIPTION: Describes the HTTP 202 Accepted response that is returned when initiating a resumable blob upload. Includes Location header for the upload session, a Range header reflecting any current progress (starting at zero), and Docker-Upload-UUID for identifying the session. Content-Length is zero and response body is empty. Clients should use the Location provided to continue upload; this response is critical to managing multi-step upload workflows.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_71\n\nLANGUAGE: none\nCODE:\n```\n202 Accepted\nLocation: /v2/<name>/blobs/uploads/<uuid>\nRange: 0-<offset>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Supporting Custom Retry Options per API Call in SDK 0.4.0\nDESCRIPTION: This code provides a method to specify custom retry policies dynamically via context using `WithRetryOptions()`. It allows developers to tailor retry behavior, such as maximum retries or retry conditions, on a per-request basis, improving resilience and configurability.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nEnable custom `RetryOptions` for API calls...\n```\n\n----------------------------------------\n\nTITLE: Checking for Optional Interface Implementation in Go\nDESCRIPTION: Shows Go code using type assertion (`e.(Closer)`) to check if a value `e` of a known interface type (`Exporter`) also implements another optional interface (`Closer`). This allows calling methods from the optional interface conditionally.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nfunc caller(e Exporter) {\n\t/* ... */\n\tif c, ok := e.(Closer); ok {\n\t\tc.Close()\n\t}\n\t/* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Blob via Docker Registry V2 API Response - none\nDESCRIPTION: Demonstrates the standard HTTP 201 Created response after successfully uploading a blob to the Docker Registry. Includes required headers such as Location (identifying the blob URL), Docker-Upload-UUID (blob session), and mandates an empty body with zero Content-Length. No payloads or dependencies are required; expected inputs are standard HTTP requests, and output is the header set shown. Limitations: this response only applies to successful blob creation and not failures.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_63\n\nLANGUAGE: none\nCODE:\n```\n201 Created\nLocation: <blob location>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Normalizing pflag Flag Names with Custom Separator Handling in Go\nDESCRIPTION: Provides an example of a flag name normalization function (`wordSepNormalizeFunc`). This function replaces hyphens (`-`) and underscores (`_`) with periods (`.`) in flag names, ensuring that variations like `--my-flag`, `--my_flag`, and `--my.flag` are treated identically when parsed. The function is then applied to a `FlagSet` using `SetNormalizeFunc`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nfunc wordSepNormalizeFunc(f *pflag.FlagSet, name string) pflag.NormalizedName {\n\tfrom := []string{\"-\", \"_\"}\n\tto := \".\"\n\tfor _, sep := range from {\n\t\tname = strings.Replace(name, sep, to, -1)\n\t}\n\treturn pflag.NormalizedName(name)\n}\n\nmyFlagSet.SetNormalizeFunc(wordSepNormalizeFunc)\n```\n\n----------------------------------------\n\nTITLE: Identifying Failing Endpoints in Logs (Text)\nDESCRIPTION: Shows example log messages generated when a notification endpoint fails to process events. These logs indicate specific errors (like 'connection refused') and show that the system is retrying and potentially entering a backoff period due to excessive errors. Monitoring these logs is crucial for diagnosing endpoint connectivity problems.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nERRO[0340] retryingsink: error writing events: httpSink{http://localhost:5003/callback}: error posting: Post http://localhost:5003/callback: dial tcp 127.0.0.1:5003: connection refused, retrying\nWARN[0340] httpSink{http://localhost:5003/callback} encountered too many errors, backing off\n```\n\n----------------------------------------\n\nTITLE: Cloning the opentelemetry-go Repository (Shell)\nDESCRIPTION: Clones the main `opentelemetry-go` repository from GitHub using the `git clone` command. This is a standard way to get a local copy of the project source code for general development or contribution setup.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-go.git\n```\n\n----------------------------------------\n\nTITLE: Standardizing CORS Acronym Casing in Go Code\nDESCRIPTION: This directive enforces consistent capitalization for the 'CORS' (Cross-Origin Resource Sharing) acronym across all Go source files (`source-file-go`). It replaces all occurrences of \"Cors\" with \"CORS\".\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/Cors/g, \"CORS\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Broadcaster for Events in Go\nDESCRIPTION: This Go code demonstrates how to set up a `Broadcaster` to distribute events to multiple listeners (queues in this case). `NewBroadcaster` creates the broadcaster instance which is later used to add multiple queues using `Add`. The `Write` method of the `Broadcaster` then calls the `Write` of all its added queues, facilitating event distribution to all consumers.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-events/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nvar broadcast = NewBroadcaster() // make it available somewhere in your application.\nbroadcast.Add(queue) // add your queue!\nbroadcast.Add(queue2) // and another!\n```\n\n----------------------------------------\n\nTITLE: Blob Chunk Accepted (202 Response) - Docker Registry API\nDESCRIPTION: Shows the successful response (202 Accepted) returned after a chunk of data has been successfully uploaded and accepted. It includes headers indicating the updated upload location (`Location`), the current progress (`Range`), and the Docker upload UUID.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_87\n\nLANGUAGE: none\nCODE:\n```\n202 Accepted\nLocation: /v2/<name>/blobs/uploads/<uuid>\nRange: 0-<offset>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Revert Exemplar Filter to Default (`trace_based`)\nDESCRIPTION: This snippet unsets the `OTEL_METRICS_EXEMPLAR_FILTER` variable to revert to the default filter, which allows only trace-sampled measurements as exemplars.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_7\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_METRICS_EXEMPLAR_FILTER\n```\n\n----------------------------------------\n\nTITLE: Accessing Parsed Flag Values with pflag in Go\nDESCRIPTION: Shows how to access the values of parsed flags. If a flag was defined using functions like `flag.Int`, its value is accessed by dereferencing the pointer (`*ip`). If bound directly using `flag.IntVar`, the variable (`flagvar`) holds the value directly.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(\"ip has value \", *ip)\nfmt.Println(\"flagvar has value \", flagvar)\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Filesystem Volume Mount\nDESCRIPTION: Command to run the registry with a local filesystem volume mounted to the container. This ensures that registry data persists even if the container is removed.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/dockerhub.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 5000:5000 -v $PWD/FS/PATH:/var/lib/registry --restart always --name registry distribution/distribution:edge\n```\n\n----------------------------------------\n\nTITLE: WWW-Authenticate Header for Bearer Token Authentication\nDESCRIPTION: The WWW-Authenticate header that specifies the authentication challenge parameters. It defines the token server realm, the service name, and the required scope for the operation that the client is attempting to perform.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/token.md#_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nWww-Authenticate: Bearer realm=\"https://auth.docker.io/token\",service=\"registry.docker.io\",scope=\"repository:samalba/my-app:pull,push\"\n```\n\n----------------------------------------\n\nTITLE: Defining an Additive Interface in Go\nDESCRIPTION: Defines a simple interface `Closer` with a `Close()` method. This illustrates the preferred pattern for adding new functionality: defining a separate, targeted interface rather than modifying an existing stable one.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\ntype Closer interface {\n\tClose()\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Blob Mount in Docker Registry API (none)\nDESCRIPTION: Outlines the HTTP 201 Created response indicating successful mounting of a blob into the target repository. Important headers include Location (URL of the mounted blob), Content-Length with zero value indicating no response body, and Docker-Upload-UUID to track the upload session. Clients should use these headers to confirm blob availability and continued upload management if applicable.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_74\n\nLANGUAGE: none\nCODE:\n```\n201 Created\nLocation: <blob location>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Creating a Superset Interface in Go\nDESCRIPTION: Illustrates creating a new interface (`ClosingExporter`) that embeds an existing interface (`Exporter`) and adds new methods (`Close()`). This is an alternative, often less flexible, approach to adding functionality compared to using separate, targeted interfaces.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_18\n\nLANGUAGE: go\nCODE:\n```\ntype ClosingExporter struct {\n\tExporter\n\tClose()\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Distribution Registry Server with Docker CLI - sh\nDESCRIPTION: This shell snippet demonstrates how to start a local instance of the Distribution Registry server container. It uses the official 'registry:3' Docker image, runs it as a detached container, maps port 5000, and names the container 'registry'. This sets up a stateless registry server listening locally. Dependencies include Docker installed and network port 5000 available. The container runs in the background awaiting image pushes and pulls.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 5000:5000 --name registry registry:3\n```\n\n----------------------------------------\n\nTITLE: Example Docker Manifest List in JSON\nDESCRIPTION: A sample manifest list ('fat manifest') that points to image manifests for two platforms: ppc64le/linux and amd64/linux. It includes digests, sizes, and platform-specific features.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/manifest-v2-2.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"mediaType\": \"application/vnd.docker.distribution.manifest.list.v2+json\",\n  \"manifests\": [\n    {\n      \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n      \"digest\": \"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f\",\n      \"size\": 7143,\n      \"platform\": {\n        \"architecture\": \"ppc64le\",\n        \"os\": \"linux\"\n      }\n    },\n    {\n      \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n      \"digest\": \"sha256:5b0bcabd1ed22e9fb1310cf6c2dec7cdef19f0ad69efa1f392e94a4333501270\",\n      \"size\": 7682,\n      \"platform\": {\n        \"architecture\": \"amd64\",\n        \"os\": \"linux\",\n        \"features\": [\n          \"sse4\"\n        ]\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a pflag Flag from Help Text in Go\nDESCRIPTION: Illustrates how to hide a flag (\"secretFlag\") from help and usage messages using `MarkHidden`. The flag remains functional but is not advertised to the user, useful for internal or debugging flags.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_16\n\nLANGUAGE: go\nCODE:\n```\n// hide a flag by specifying its name\nflags.MarkHidden(\"secretFlag\")\n```\n\n----------------------------------------\n\nTITLE: Verifying Pull-Only User Cannot Push (console)\nDESCRIPTION: Attempts to push the `myregistrydomain.com:5043/test` image while logged in as `testuser`. This action is expected to fail based on the Apache authorization configuration (`Require group pusher`), confirming that users not in the \"pusher\" group cannot push.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_8\n\nLANGUAGE: console\nCODE:\n```\n$ docker push myregistrydomain.com:5043/test\n```\n\n----------------------------------------\n\nTITLE: Using azidentity Credentials with Older Azure SDKs in Go\nDESCRIPTION: Demonstrates interoperating new azidentity credentials with legacy Azure SDK clients in Go via the azidext module. The adapter bridges modern TokenCredential implementations to older Authorizer interfaces. Requires azidext module and accepts credential instances with a list of resource scopes.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/Azure/azure-sdk-for-go/sdk/azidentity\"\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/jongio/azidext/go/azidext\"\n)\n\ncred, err := azidentity.NewClientSecretCredential(tenantID, clientID, secret, nil)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = azidext.NewTokenCredentialAdapter(cred, []string{\"https://management.azure.com//.default\"})\n```\n\n----------------------------------------\n\nTITLE: Example go get Timeout Error (Console)\nDESCRIPTION: This console output shows a typical error message encountered when using `go get` to fetch the `google.golang.org/grpc` package if the `golang.org` domain is blocked or inaccessible due to network issues like firewalls or timeouts.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_1\n\nLANGUAGE: Console\nCODE:\n```\n$ go get -u google.golang.org/grpc\npackage google.golang.org/grpc: unrecognized import path \"google.golang.org/grpc\" (https fetch: Get https://google.golang.org/grpc?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)\n```\n\n----------------------------------------\n\nTITLE: Example Go code for YAML unmarshalling and marshalling\nDESCRIPTION: This Go code demonstrates how to unmarshal YAML data into a struct and a map, then marshal these structures back into YAML format. It showcases the usage of 'gopkg.in/yaml.v3' library functions 'yaml.Unmarshal' and 'yaml.Marshal' and highlights key aspects like public struct fields and flow styles.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/gopkg.in/yaml.v3/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n\n        \"gopkg.in/yaml.v3\"\n)\n\nvar data = `\na: Easy!\nb:\n  c: 2\n  d: [3, 4]\n`\n\n// Note: struct fields must be public in order for unmarshal to\n// correctly populate the data.\ntype T struct {\n        A string\n        B struct {\n                RenamedC int   `yaml:\"c\"`\n                D        []int `yaml:\",flow\"`\n        }\n}\n\nfunc main() {\n        t := T{}\n    \n        err := yaml.Unmarshal([]byte(data), &t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t:\\n%v\\n\\n\", t)\n    \n        d, err := yaml.Marshal(&t)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- t dump:\\n%s\\n\\n\", string(d))\n    \n        m := make(map[interface{}]interface{})\n    \n        err = yaml.Unmarshal([]byte(data), &m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m:\\n%v\\n\\n\", m)\n    \n        d, err = yaml.Marshal(&m)\n        if err != nil {\n                log.Fatalf(\"error: %v\", err)\n        }\n        fmt.Printf(\"--- m dump:\\n%s\\n\\n\", string(d))\n}\n```\n\n----------------------------------------\n\nTITLE: Setting No-Option Default Value for a pflag Flag in Go\nDESCRIPTION: Demonstrates setting a `NoOptDefVal` for a flag. This allows the flag to take a specific default value (e.g., \"4321\") if it's provided on the command line without an explicit value (e.g., `--flagname`), differing from its standard default (1234) used when the flag is absent.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nvar ip = flag.IntP(\"flagname\", \"f\", 1234, \"help message\")\nflag.Lookup(\"flagname\").NoOptDefVal = \"4321\"\n```\n\n----------------------------------------\n\nTITLE: Creating Apache Htpasswd File (sh)\nDESCRIPTION: Uses the `htpasswd` utility via a Docker container to create and append user entries (`testuser`, `testuserpush`) with bcrypt-hashed passwords to the `auth/httpd.htpasswd` file, required for basic authentication by the Apache proxy. Requires Docker and the `httpd:2.4` image.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --entrypoint htpasswd httpd:2.4 -Bbn testuser testpassword > auth/httpd.htpasswd\ndocker run --entrypoint htpasswd httpd:2.4 -Bbn testuserpush testpasswordpush >> auth/httpd.htpasswd\n```\n\n----------------------------------------\n\nTITLE: Compressing Streams with zstd Encoder in Go\nDESCRIPTION: This Go function demonstrates compressing an input stream to an output stream using the zstd Encoder. It creates a new Encoder instance with NewWriter, compresses data read from the provided input io.Reader, and writes compressed output to the specified io.Writer. The encoder must be closed after use to finalize output and release resources. Dependencies include the github.com/klauspost/compress/zstd package; expected parameters are io.Reader for input and io.Writer for output. The function returns an error if encoding initialization or writing fails. Reusing the Encoder with Reset is recommended for performance in repeated calls.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Compress input to output.\nfunc Compress(in io.Reader, out io.Writer) error {\n    enc, err := zstd.NewWriter(out)\n    if err != nil {\n        return err\n    }\n    _, err = io.Copy(enc, in)\n    if err != nil {\n        enc.Close()\n        return err\n    }\n    return enc.Close()\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Registry API V2 Base Endpoint GET Request none\nDESCRIPTION: Demonstrates a basic GET request to the /v2/ endpoint to verify that the Docker Registry implements the V2 API and to validate authentication. Required headers include 'Host' and 'Authorization'. Success returns status 200 OK, failures include 404 Not Found, 401 Unauthorized with WWW-Authenticate challenge, and 429 Too Many Requests for rate limiting.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_24\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\nLANGUAGE: none\nCODE:\n```\n200 OK\n```\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\n```\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        }\n    ]\n}\n```\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 400 Bad Request Error during Upload (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 400 status code when a blob upload fails due to processing issues like invalid digest or repository name. The 'errors' array contains specific codes (`DIGEST_INVALID`, `NAME_INVALID`, `BLOB_UPLOAD_INVALID`, `UNSUPPORTED`) and messages.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Go-Redis Client with OpenTelemetry - Go\nDESCRIPTION: This Go snippet demonstrates importing and initializing a Go-Redis client, then enabling both tracing and metrics OpenTelemetry instrumentation via the redisotel package. The example requires the Go-Redis and redisotel packages at compatible versions and expects an initialized 'rdb.Options' struct for connection settings. The InstrumentTracing and InstrumentMetrics functions add observability hooks, returning errors if setup fails.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/extra/redisotel/v9/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"github.com/redis/go-redis/v9\"\n    \"github.com/redis/go-redis/extra/redisotel/v9\"\n)\n\nrdb := rdb.NewClient(&rdb.Options{...})\n\n// Enable tracing instrumentation.\nif err := redisotel.InstrumentTracing(rdb); err != nil {\n\tpanic(err)\n}\n\n// Enable metrics instrumentation.\nif err := redisotel.InstrumentMetrics(rdb); err != nil {\n\tpanic(err)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing procfs and Retrieving Stats - Go\nDESCRIPTION: This Go code snippet demonstrates how to initialize the procfs library and retrieve system statistics. It begins by calling `procfs.NewFS` to create a new file system representation. The returned `FS` instance is then used to call methods like `Stat()` to retrieve the corresponding data. The code retrieves CPU statistics via `/proc/stat`. Errors are handled during initialization and when retrieving data. The /proc filesystem must be accessible to the program.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfs, err := procfs.NewFS(\"/proc\")\nstats, err := fs.Stat()\n```\n\n----------------------------------------\n\nTITLE: Streaming Decompression with zstd in Go\nDESCRIPTION: Demonstrates how to decompress a zstd data stream in Go. It uses `zstd.NewReader` to wrap an input `io.Reader` and copies the decompressed data to an output `io.Writer`. It's crucial to call `defer d.Close()` to release resources, especially goroutines used for concurrent decoding.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\nfunc Decompress(in io.Reader, out io.Writer) error {\n    d, err := zstd.NewReader(in)\n    if err != nil {\n        return err\n    }\n    defer d.Close()\n    \n    // Copy content...\n    _, err = io.Copy(out, d)\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying LogRecord ObservedTimestamp in Go\nDESCRIPTION: Defines methods to get and set the `ObservedTimestamp` on the `Record` struct, representing the time the record was observed. This is essential for conforming to OpenTelemetry specifications where observed timestamp may differ from event timestamp. Methods ensure encapsulated access to this field. Requires Go's `time` package and `Record` struct.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) ObservedTimestamp() time.Time\nfunc (r *Record) SetObservedTimestamp(t time.Time)\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level - YAML\nDESCRIPTION: This deprecated snippet configures the log level for the registry. The allowed values are `error`, `warn`, `info`, and `debug`. The default log level is `info`. It is recommended to use the `log` configuration instead.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nloglevel: debug\n```\n\n----------------------------------------\n\nTITLE: Installing mapstructure library with Go\nDESCRIPTION: Standard Go command to install the mapstructure library using go get. This will download and install the library from GitHub.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/mitchellh/mapstructure/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ go get github.com/mitchellh/mapstructure\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Flag Type with pflag in Go\nDESCRIPTION: Shows how to register a custom flag type that satisfies the `pflag.Value` interface. The `flag.Var` function associates the custom variable `flagVal` with the flag name \"name\" and provides a help message. The variable's initial value serves as the default.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nflag.Var(&flagVal, \"name\", \"help message for flagname\")\n```\n\n----------------------------------------\n\nTITLE: HTTP GET request to obtain Docker Bearer Token\nDESCRIPTION: This snippet depicts the HTTP GET request used by clients to request a Bearer token from Docker's authentication service. It includes the URL with query parameters defining the service and scope of the requested access. The server uses Basic Authentication credentials if provided, to determine client access rights, and responds with a signed JWT token encapsulating the access scope.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/auth/jwt.md#_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET https://auth.docker.io/token?service=registry.docker.io&scope=repository:samalba/my-app:pull,push\n```\n\n----------------------------------------\n\nTITLE: Handling 'Too Many Requests' Error Response in HTTP API (none)\nDESCRIPTION: Defines the format and semantics of the 429 Too Many Requests HTTP error returned when a client exceeds the allowed request rate to the registry service. Specifies response headers such as Content-Length, Content-Type and the structure of the JSON body containing one or more error objects with code, message, and optional details. The snippet guides client implementations on error parsing and retry behavior when encountering this status.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_72\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Image Tags Response\nDESCRIPTION: This snippet shows the JSON format for the response when listing image tags. It includes the repository `name` and an array of `tags`.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_19\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Type: application/json\n\n{\n    \"name\": <name>,\n    \"tags\": [\n        <tag>,\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading a Blob to Azure Storage\nDESCRIPTION: Demonstrates how to upload a local file to Azure Blob Storage using the Azure Blob Storage client.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n\tblobName      = \"sample-blob\"\n\tsampleFile    = \"path/to/sample/file\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// open the file for reading\nfile, err := os.OpenFile(sampleFile, os.O_RDONLY, 0)\n// TODO: handle error\ndefer file.Close()\n\n// upload the file to the specified container with the specified blob name\n_, err = client.UploadFile(context.TODO(), containerName, blobName, file, nil)\n// TODO: handle error\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Blocks with zstd Encoder in Go\nDESCRIPTION: This Go code sample shows how to compress entire data blocks as byte slices using a reusable zstd Encoder. After initializing the encoder (potentially with a nil writer for cached operation), it compresses the source byte slice and appends the result to a provided or allocated destination slice using EncodeAll. This method is suitable for small or repeated block compression and is concurrency safe when used with multiple goroutines. The key dependency is github.com/klauspost/compress/zstd. For optimum performance, the destination buffer should be preallocated to avoid unnecessary memory allocations.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/zstd/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/klauspost/compress/zstd\"\n\n// Create a writer that caches compressors.\n// For this operation type we supply a nil Reader.\nvar encoder, _ = zstd.NewWriter(nil)\n\n// Compress a buffer. \n// If you have a destination buffer, the allocation in the call can also be eliminated.\nfunc Compress(src []byte) []byte {\n    return encoder.EncodeAll(src, make([]byte, 0, len(src)))\n} \n```\n\n----------------------------------------\n\nTITLE: Disabling Registry Content Validation (YAML)\nDESCRIPTION: Provides a setting to disable all other validation options within the `validation` section. The `disabled` flag, when set to `true`, turns off validation checks performed on content uploaded to the registry. This setting only affects new uploads and deprecates the older `enabled` flag.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nvalidation:\n  disabled: false\n```\n\n----------------------------------------\n\nTITLE: Updating OTLP Exporters to Handle Per-Signal Endpoints in Go\nDESCRIPTION: This snippet updates the OTLP exporter's behavior to correctly handle environment variables specifying signal-specific endpoints, such as `OTEL_EXPORTER_OTLP_TRACE_ENDPOINT`. It appends signal paths to the base endpoint URL, respecting per-signal environment configurations as per OpenTelemetry specifications. Defaults to using the root CA pool for security unless overridden by the user.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code example provided, only behavior description\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud IAM Go Client Library - bash\nDESCRIPTION: This command demonstrates how to install the Google Cloud IAM API client library using the Go module system. The 'go get' command retrieves and adds 'cloud.google.com/go/iam' as a dependency to your Go project. Ensure that Go is installed and properly configured before running this command. No additional parameters are needed, and the output is an updated go.mod/go.sum with the new dependency.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cloud.google.com/go/iam/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get cloud.google.com/go/iam\n\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Content Digest Grammar (Syntax)\nDESCRIPTION: Specifies the required format for a content digest string used in the Docker Registry V2 API. A digest consists of an algorithm name followed by a colon and the hexadecimal representation of the hash value.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ndigest      := algorithm \":\" hex\nalgorithm   := /[A-Za-z0-9_+.-]+/\nhex         := /[A-Fa-f0-9]+/\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: Not Allowed - none\nDESCRIPTION: Illustrates the HTTP 405 Method Not Allowed error for blob uploads when the registry configuration (such as pull-through cache mode) prohibits uploads. No payload is included, and only the HTTP status signals the disallowed operation. Applies when global or contextual registry settings forbid client uploads.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_65\n\nLANGUAGE: none\nCODE:\n```\n405 Method Not Allowed\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Elements with JMESPath Search in Go\nDESCRIPTION: Demonstrates filtering elements within an array (`foo`) based on a condition (`age > `30``) using `jmespath.Search`. Shows how to apply filters directly in the JMESPath expression.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": [{\"age\": 20}, {\"age\": 25},\n                           {\"age\": 30}, {\"age\": 35},\n                           {\"age\": 40}]}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo[?age > `30`]\")\n```\n\n----------------------------------------\n\nTITLE: Detecting GCP Resources using OpenTelemetry Resource SDK in Go\nDESCRIPTION: This code snippet demonstrates how to detect GCP resources using the OpenTelemetry Resource SDK in Go. It initializes the resource with the GCP detector and default detectors, and adds custom attributes. The detected resource is then used in the TracerProvider.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nctx := context.Background()\n// Detect your resources\nres, err := resource.New(ctx,\n    // Use the GCP resource detector!\n    resource.WithDetectors(gcp.NewDetector()),\n    // Keep the default detectors\n    resource.WithTelemetrySDK(),\n    // Add your own custom attributes to identify your application\n    resource.WithAttributes(\n        semconv.ServiceNameKey.String(\"my-application\"),\n        semconv.ServiceNamespaceKey.String(\"my-company-frontend-team\"),\n    ),\n)\nif err != nil {\n    // Handle err\n}\n// Use the resource in your tracerprovider (or meterprovider)\ntp := trace.NewTracerProvider(\n    // ... other options\n    trace.WithResource(res),\n)\n```\n\n----------------------------------------\n\nTITLE: Renaming Internal Go Models\nDESCRIPTION: This directive renames two Go models generated from the Swagger definition. It changes `BlobItemInternal` to `BlobItem` and `BlobPropertiesInternal` to `BlobProperties`, providing more user-friendly names.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- rename-model:\n    from: BlobItemInternal\n    to: BlobItem\n- rename-model:\n    from: BlobPropertiesInternal\n    to: BlobProperties\n```\n\n----------------------------------------\n\nTITLE: Example HTTP POST request showing event notification envelope structure\nDESCRIPTION: This HTTP snippet demonstrates how a registry sends a webhook notification as an HTTP POST request. It sets appropriate headers including the media type and optional Authorization token, and includes the JSON event envelope in the request body. The event envelope uses the 'application/vnd.docker.distribution.events.v2+json' content type. This example illustrates the required request format expected by configured webhook endpoints.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_4\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST /callback HTTP/1.1\nHost: application/vnd.docker.distribution.events.v2+json\nAuthorization: Bearer <your token, if needed>\nContent-Type: application/vnd.docker.distribution.events.v2+json\n\n{\n  \"events\": [\n    {\n      \"id\": \"asdf-asdf-asdf-asdf-0\",\n      \"timestamp\": \"2006-01-02T15:04:05Z\",\n      \"action\": \"push\",\n      \"target\": {\n        \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n        \"digest\": \"sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf\",\n        \"length\": 1,\n        \"repository\": \"library/test\",\n        \"url\": \"https://example.com/v2/library/test/manifests/sha256:c3b3692957d439ac1928219a83fac91e7bf96c153725526874673ae1f2023f8d5\"\n      },\n      \"request\": {\n        \"id\": \"asdfasdf\",\n        \"addr\": \"client.local\",\n        \"host\": \"registrycluster.local\",\n        \"method\": \"PUT\",\n        \"useragent\": \"test/0.1\"\n      },\n      \"actor\": {\n        \"name\": \"test-actor\"\n      },\n      \"source\": {\n        \"addr\": \"hostname.local:port\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Too Many Requests (429 Response) - Docker Registry API\nDESCRIPTION: Illustrates the 429 Too Many Requests response received when a client exceeds the rate limit for accessing the registry during a blob upload process. It includes the standard JSON error body format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_94\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories: Catalog Response\nDESCRIPTION: This snippet shows the JSON format for the catalog response, which contains a list of repository names.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_14\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Type: application/json\n\n{\n    \"repositories\": [\n        <name>,\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Redis Client Identity Verification in Go\nDESCRIPTION: Demonstrates disabling the client identity feature by setting DisableIdentity to true in redis.Options. This is relevant for Redis server versions prior to 7.2 or environments where client identification should not be sent. The option DisableIndentity is deprecated and replaced by DisableIdentity. Input is a boolean field; effect is that set-info command is skipped on connect.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nrdb := redis.NewClient(&redis.Options{\n    Addr:            \"localhost:6379\",\n    Password:        \"\",\n    DB:              0,\n    DisableIdentity: true, // Disable set-info on connect\n})\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Docker Registry Storage Location with Bind Mount - console\nDESCRIPTION: Runs the Docker registry container with a host directory bind-mounted to the container's storage directory '/var/lib/registry'. This enables persistent registry data stored on a specified host path (e.g., SSD or SAN) instead of Docker volumes, improving performance or storage management. Requires the bind mount path to exist and docker permissions.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ docker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v /mnt/registry:/var/lib/registry \\\n  registry:3\n```\n\n----------------------------------------\n\nTITLE: Calculating Docker Content Digest Example (Pseudocode)\nDESCRIPTION: Provides a simple pseudocode example demonstrating how a content digest is calculated. It shows taking a byte string, hashing it (using SHA256), encoding the hash to hex, and combining the algorithm name and hex hash to form the digest string. This process generates a content-addressable identifier.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_5\n\nLANGUAGE: none\nCODE:\n```\nlet C = 'a small string'\nlet B = sha256(C)\nlet D = 'sha256:' + EncodeHex(B)\nlet ID(C) = D\n```\n\n----------------------------------------\n\nTITLE: Accessing and Modifying LogRecord Severity in Go\nDESCRIPTION: Provides getter and setter methods for the `Severity` field of a log `Record`, which indicates the severity number of the log entry. The `Severity` type and constants are defined separately and aligned with OpenTelemetry severity display recommendations. This design enables easy severity level manipulation and retrieval while maintaining API clarity.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) Severity() Severity\nfunc (r *Record) SetSeverity(s Severity)\n```\n\n----------------------------------------\n\nTITLE: Error Response: BLOB_UNKNOWN\nDESCRIPTION: This snippet illustrates the JSON format for an error response indicating that one or more image layers are unknown to the registry.  Each unknown blob will result in a `BLOB_UNKNOWN` error in the `errors` array, including the `digest` of the missing blob.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_12\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"errors\": [\n        {\n            \"code\": \"BLOB_UNKNOWN\",\n            \"message\": \"blob unknown to registry\",\n            \"detail\": {\n                \"digest\": <digest>\n            }\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating azblob client without credentials for anonymous or SAS access in Go\nDESCRIPTION: This snippet illustrates how to instantiate a client without credentials to access public blobs or SAS URLs. It replaces the previous method of creating a pipeline with anonymous credentials and passing it to the client constructor, offering a simplified approach.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := azblob.NewClientWithNoCredential(\"<public blob or blob with SAS URL>\", nil)\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting macOS Build Error with CGO - Shell\nDESCRIPTION: This snippet shows a typical build error encountered when building a Go application using the Azure SDK's persistent cache on macOS without enabling cgo. The error messages indicate undefined symbols related to the cache accessor.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\n$ GOOS=darwin go build\n# github.com/Azure/azure-sdk-for-go/sdk/azidentity/cache\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:19: undefined: accessor.New\n../../go/pkg/mod/github.com/!azure/azure-sdk-for-go/sdk/azidentity/cache@v0.3.0/darwin.go:18:38: undefined: accessor.WithAccount\n```\n\n----------------------------------------\n\nTITLE: Completing Blob Upload (PUT Request) - Docker Registry API\nDESCRIPTION: Describes the PUT request used to finalize a blob upload identified by UUID. It includes required headers and path parameters, plus a query parameter for the blob's digest. Optionally, the final chunk of data can be included in the request body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_95\n\nLANGUAGE: none\nCODE:\n```\nPUT /v2/<name>/blobs/uploads/<uuid>?digest=<digest>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Length: <length of data>\nContent-Type: application/octet-stream\n\n<binary data>\n```\n\n----------------------------------------\n\nTITLE: Uploading Blob Chunk (PATCH Request) - Docker Registry API\nDESCRIPTION: Describes the PATCH request used to upload a chunk of a blob to an ongoing upload identified by UUID. It details the required URL path parameters, host header, authorization header, and crucial Content-Range and Content-Length headers for managing the chunk data.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_86\n\nLANGUAGE: none\nCODE:\n```\nPATCH /v2/<name>/blobs/uploads/<uuid>\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Range: <start of range>-<end of range, inclusive>\nContent-Length: <length of chunk>\nContent-Type: application/octet-stream\n\n<binary chunk>\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics Exponential Histogram Support in Go SDK\nDESCRIPTION: This snippet introduces support for exponential histogram metrics in the Go SDK by providing new mapping functions in the `sdk/metric/aggregator/exponential/mapping` package. It facilitates advanced metric distribution analysis and enhances the metrics API to accommodate exponential histograms, which are useful for capturing a wide range of metric values efficiently.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// No specific code example provided, only description for the support addition\n```\n\n----------------------------------------\n\nTITLE: Querying Nested JSON with JMESPath Search in Go\nDESCRIPTION: Shows how to use `jmespath.Search` to select a nested object from parsed JSON data using a JMESPath expression. Includes the necessary steps for parsing JSON into a Go interface{}.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/jmespath/go-jmespath/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar jsondata = []byte(`{\"foo\": {\"bar\": {\"baz\": [0, 1, 2, 3, 4]}}}`)\nvar data interface{}\nerr := json.Unmarshal(jsondata, &data)\nresult, err := jmespath.search(\"foo.bar\", data)\n```\n\n----------------------------------------\n\nTITLE: Creating htpasswd file for basic auth\nDESCRIPTION: Creates a htpasswd file with bcrypt encoding for basic authentication. It uses the httpd:2 docker image and outputs the htpasswd file to the auth/ directory. Requires the `auth` directory to exist.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_13\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir auth\n$ docker run \\\n  --entrypoint htpasswd \\\n  httpd:2 -Bbn testuser testpassword > auth/htpasswd\n```\n\n----------------------------------------\n\nTITLE: Developer Certificate of Origin (DCO) v1.1 Text\nDESCRIPTION: The full text of the Developer Certificate of Origin Version 1.1. Contributors must agree to these terms and certify their contributions by signing their commits. This ensures the contributor has the right to submit the code under the project's open-source license.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nDeveloper Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n660 York Street, Suite 102,\nSan Francisco, CA 94110 USA\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n```\n\n----------------------------------------\n\nTITLE: Error Response: Access Denied\nDESCRIPTION: HTTP 403 error response format returned when the client does not have required access to the repository. Includes specific error codes and messages in JSON format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_54\n\nLANGUAGE: none\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Forbidden (Access Denied) Error - HTTP\nDESCRIPTION: Depicts a 403 Forbidden HTTP response returned when a client lacks permissions to delete a manifest. The JSON body describes the specific reason for access denial. Inputs: DELETE with insufficient privileges. Outputs: 403 status and JSON error array.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_38\n\nLANGUAGE: HTTP\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Method Not Allowed Error in Docker Registry - HTTP\nDESCRIPTION: Shows the HTTP 405 Method Not Allowed response when PUT or DELETE operations on manifests are disallowed, such as when pull-through cache is enabled or certain operations are unsupported. No body is returned. No authentication is required for this example. Inputs: Disallowed HTTP method. Output: 405 response with no content.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_32\n\nLANGUAGE: HTTP\nCODE:\n```\n405 Method Not Allowed\n```\n\n----------------------------------------\n\nTITLE: Setting Kubernetes attributes using OTEL_RESOURCE_ATTRIBUTES in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set Kubernetes attributes such as container.name, k8s.pod.name, and k8s.namespace.name using the OTEL_RESOURCE_ATTRIBUTES environment variable in a Pod spec.  It leverages fieldRef to retrieve the pod name and namespace.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/contrib/detectors/gcp/README.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n- name: POD_NAME\n  valueFrom:\n    fieldRef:\n      fieldPath: metadata.name\n- name: NAMESPACE_NAME\n  valueFrom:\n    fieldRef:\n      fieldPath: metadata.namespace\n- name: CONTAINER_NAME\n  value: my-container-name\n- name: OTEL_RESOURCE_ATTRIBUTES\n  value: k8s.pod.name=$(POD_NAME),k8s.namespace.name=$(NAMESPACE_NAME),k8s.container.name=$(CONTAINER_NAME)\n```\n\n----------------------------------------\n\nTITLE: Installation instructions for rootful systemd service\nDESCRIPTION: Guides on deploying the registry service as root, including copying service files to '/etc/systemd/system/', enabling, and starting the service with or without socket activation. Ensures the registry is managed by systemd and persists across reboots.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/systemd.md#_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Updating Service Version\nDESCRIPTION: This YAML directive updates the service version string in multiple generated Go files. It replaces the hardcoded version '2021-12-02' with the 'ServiceVersion' constant. This ensures consistency and allows for easier version management.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_appendblob_client.go\n  - zz_blob_client.go\n  - zz_blockblob_client.go\n  - zz_container_client.go\n  - zz_pageblob_client.go\n  - zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replaceAll(`[]string{\"2021-12-02\"}`, `[]string{ServiceVersion}`);\n```\n\n----------------------------------------\n\nTITLE: Handling 403 Forbidden during Upload Deletion (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 403 status code when the client is denied access to delete the specified blob upload due to insufficient permissions. Includes the `DENIED` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Image Manifest Existence by Name and Reference (HTTP)\nDESCRIPTION: Describes the HTTP HEAD request to check for the existence of an image manifest without downloading the full content. The request requires the image `name` and a `reference` (tag or digest). A 200 OK response with `Content-Length` and `Docker-Content-Digest` headers indicates existence.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_8\n\nLANGUAGE: none\nCODE:\n```\nHEAD /v2/<name>/manifests/<reference>\n```\n\n----------------------------------------\n\nTITLE: Pulling Image from the Local Distribution Registry - sh\nDESCRIPTION: This Docker CLI command retrieves the image 'localhost:5000/myfirstimage' from the local distribution registry and stores it locally. It verifies that the pushing step was successful and that the image is available in the local custom registry. Input is the fully qualified image name referencing the local registry; output is the image stored locally.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/_index.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull localhost:5000/myfirstimage\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Access Denied (403 Response) - Docker Registry API\nDESCRIPTION: Shows the 403 Forbidden response returned when the client is authenticated but lacks the necessary permissions to perform the blob upload operation on the specified repository. It includes the standard JSON error body format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_93\n\nLANGUAGE: none\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Registry Version\nDESCRIPTION: Command to verify the successful build by checking the registry binary version.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/registry --version\n./bin/registry github.com/distribution/distribution/v3 v2.7.0-1993-g8857a194\n```\n\n----------------------------------------\n\nTITLE: pflag Command-Line Flag Syntax Examples\nDESCRIPTION: Illustrates the various command-line syntax options supported by `pflag`, including long flags (`--flag`), boolean flags, flags with values (`--flag=x`, `--flag x`), shorthand flags (`-f`), combined shorthand booleans (`-abc`), shorthands with values (`-n 1234`, `-n=1234`, `-n1234`), mixed shorthands (`-abcs \"hello\"`), and the argument terminator (`--`).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_11\n\nLANGUAGE: plaintext\nCODE:\n```\n--flag    // boolean flags, or flags with no option default values\n--flag x  // only on flags without a default value\n--flag=x\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// boolean or flags where the 'no option default value' is set\n-f\n-f=true\n-abc\nbut\n-b true is INVALID\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// non-boolean and flags without a 'no option default value'\n-n 1234\n-n=1234\n-n1234\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n// mixed\n-abcs \"hello\"\n-absd=\"hello\"\n-abcs1234\n```\n\n----------------------------------------\n\nTITLE: Initiating a Resumable Blob Upload - none\nDESCRIPTION: Demonstrates the HTTP POST structure to initiate a resumable blob upload to a Docker Registry for a target repository. The request is defined by its HTTP path, Authorization header, and Content-Length: 0. Inputs: request path and headers (Host, Authorization, Content-Length), primarily for use in clients implementing Docker's blob upload semantics. This does not return a payload but triggers a session for future content upload.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_70\n\nLANGUAGE: none\nCODE:\n```\nPOST /v2/<name>/blobs/uploads/\nHost: <registry host>\nAuthorization: <scheme> <token>\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: Access Denied - json\nDESCRIPTION: Illustrates the HTTP 403 Forbidden error response used when a Docker Registry client is denied access to perform blob uploads or related actions. The body is a JSON object with an 'errors' array, including elements for each access-related failure, with code, message, and optional detail fields. Requires Content-Type: application/json and specifies body length. Used in authorization failure scenarios; input is an unauthorized API call requiring permission.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_68\n\nLANGUAGE: none\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Apache Group File (sh)\nDESCRIPTION: Generates the `auth/httpd.groups` file, defining the `pusher` group and including `testuserpush` as a member. This file is used by the Apache configuration to control access permissions based on user groups.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/apache.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"pusher: testuserpush\" > auth/httpd.groups\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Error: Method Not Allowed\nDESCRIPTION: HTTP 405 error response when blob deletion is not allowed, such as when the registry is configured as a pull-through cache or delete has been disabled.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_60\n\nLANGUAGE: none\nCODE:\n```\n405 Method Not Allowed\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Instantiating and Returning CallErr from Communication Package\nDESCRIPTION: Provides an example of how `CallErr` is created and returned within the MSAL `comm` package after an HTTP request fails. It captures the request, response, and formats a detailed error message using `fmt.Errorf` which includes the URL, method, status code, and the error response body.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nreturn nil, errors.CallErr{\n    Req:  req,\n    Resp: reply,\n    Err:  fmt.Errorf(\"http call(%s)(%s) error: reply status code was %d:\\n%s\", req.URL.String(), req.Method, reply.StatusCode, ErrorResponse), //ErrorResponse is the json body extracted from the http response\n    }\n```\n\n----------------------------------------\n\nTITLE: Updating Docker Node Label\nDESCRIPTION: Updates a Docker node with a label to indicate that it should run the registry service. This is used in conjunction with service constraints to ensure the registry runs on the correct node. Replace `node1` with the actual node name.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ docker node update --label-add registry=true node1\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response - Forbidden - API\nDESCRIPTION: Displays the HTTP 403 Forbidden response, indicating the client was authenticated but does not possess the necessary permissions to perform the requested operation on the resource. The response includes a JSON body containing a `DENIED` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_48\n\nLANGUAGE: none\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blob Part - Partial Content Response - API\nDESCRIPTION: Shows the HTTP 206 Partial Content success response returned when a requested byte range of a blob is successfully retrieved. The response includes `Content-Length` and `Content-Range` headers detailing the returned chunk, and the body contains the requested binary data.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_51\n\nLANGUAGE: none\nCODE:\n```\n206 Partial Content\nContent-Length: <length>\nContent-Range: bytes <start>-<end>/<size>\nContent-Type: application/octet-stream\n\n<blob binary data>\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP pipeline options during azblob client creation in Go\nDESCRIPTION: This snippet shows how to configure the HTTP pipeline through azcore.ClientOptions during client instantiation, replacing manual pipeline setup. It enables customization of pipeline behaviors directly via client options, streamlining setup and configuration.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/migrationguide.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := azblob.NewClient(account, cred, &azblob.ClientOptions{\n    ClientOptions: azcore.ClientOptions{\n        // configure HTTP pipeline options here\n    },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing redisotel for Go-Redis Instrumentation - Bash\nDESCRIPTION: This Bash snippet uses 'go get' to install the 'github.com/redis/go-redis/extra/redisotel/v9' package, which provides OpenTelemetry instrumentation hooks for the Go-Redis client. Ensure Go modules are enabled and the project is initialized for Go dependency management before running this command.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/extra/redisotel/v9/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/redis/go-redis/extra/redisotel/v9\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Google Cloud Storage Client in Go\nDESCRIPTION: This snippet demonstrates how to create a new Google Cloud Storage client using the Go client library. It involves calling storage.NewClient with a context and handling potential errors. The resulting client object is used for subsequent storage operations and must be closed when no longer needed.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cloud.google.com/go/storage/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nclient, err := storage.NewClient(ctx)\nif err != nil {\n\tlog.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Docker Registry V2 API Version (HTTP)\nDESCRIPTION: Describes the HTTP GET request to the root of the V2 API endpoint to check for V2 compatibility. A 200 OK or 401 Unauthorized response indicates V2 support, while other statuses suggest no V2 support. The 'Docker-Distribution-API-Version' header is also important for clients to confirm V2 support.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/\n```\n\n----------------------------------------\n\nTITLE: Adding Permissions to ListBlobsInclude Parameter\nDESCRIPTION: This YAML directive modifies the 'ListBlobsInclude' parameter within the swagger document, adding 'permissions' as a possible enumeration value. This allows clients to specify 'permissions' as a value when including additional information in the list blobs operation.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.parameters.ListBlobsInclude    \n  transform: >        \n    $.items.enum.push(\"permissions\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OAuth with autorest/adal in Go\nDESCRIPTION: Demonstrates initializing OAuth configuration for Microsoft Entra (Azure Active Directory) using autorest/adal in Go. Dependencies include github.com/Azure/go-autorest/autorest/adal. The code constructs an OAuthConfig object with a tenant-specific endpoint and creates a ServicePrincipalToken using client secrets. Inputs: tenantID, clientID, and secret; Output: an ADAL ServicePrincipalToken object.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.chinacloudapi.cn\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://management.chinacloudapi.cn/\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n```\n\n----------------------------------------\n\nTITLE: Enumerating Blobs in a Container\nDESCRIPTION: Demonstrates how to list blobs in a container using pagination to handle large collections efficiently.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\taccount       = \"https://MYSTORAGEACCOUNT.blob.core.windows.net/\"\n\tcontainerName = \"sample-container\"\n)\n\n// authenticate with Azure Active Directory\ncred, err := azidentity.NewDefaultAzureCredential(nil)\n// TODO: handle error\n\n// create a client for the specified storage account\nclient, err := azblob.NewClient(account, cred, nil)\n// TODO: handle error\n\n// blob listings are returned across multiple pages\npager := client.NewListBlobsFlatPager(containerName, nil)\n\n// continue fetching pages until no more remain\nfor pager.More() {\n  // advance to the next page\n\tpage, err := pager.NextPage(context.TODO())\n\t// TODO: handle error\n\n\t// print the blob names for this page\n\tfor _, blob := range page.Segment.BlobItems {\n\t\tfmt.Println(*blob.Name)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response: Too Many Requests\nDESCRIPTION: HTTP 429 error response format returned when the client makes too many requests within a time interval. Includes rate limiting error codes and messages in JSON format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_55\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CloudFront Middleware for Docker Registry in YAML\nDESCRIPTION: Example YAML configuration for Docker registry that uses CloudFront as middleware for pull operations while maintaining direct S3 storage for push operations. Includes required parameters for S3 bucket storage and CloudFront authentication.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/storage-drivers/s3.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n...\nstorage:\n  s3:\n    region: us-east-1\n    bucket: docker.myregistry.com\nmiddleware:\n  storage:\n    - name: cloudfront\n      options:\n        baseurl: https://abcdefghijklmn.cloudfront.net/\n        privatekey: /etc/docker/cloudfront/pk-ABCEDFGHIJKLMNOPQRST.pem\n        keypairid: ABCEDFGHIJKLMNOPQRST\n...\n```\n\n----------------------------------------\n\nTITLE: Adding Custom HTTP Headers Using azcore.WithHTTPHeader in Go\nDESCRIPTION: This snippet demonstrates how to add custom HTTP headers to a context using azcore's WithHTTPHeader function, enabling customization of HTTP requests by inserting headers extracted from caller context. It facilitates dynamic header management essential for authentication, tracking, or custom behavior.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nazcore.WithHTTPHeader\n```\n\n----------------------------------------\n\nTITLE: Example of a JSON event payload for a manifest pull notification\nDESCRIPTION: This JSON snippet represents an example event envelope containing a single event triggered by the pull of a manifest from the registry. The event contains metadata such as a unique event ID, timestamp, the action type ('pull'), and the target object with fields describing media type, digest, size, repository, URL, and tag. It also includes the originating HTTP request context, actor information (empty in this example), and source registry node details. This structure forms the body of the webhook notification sent to configured endpoints.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"events\": [\n    {\n      \"id\": \"320678d8-ca14-430f-8bb6-4ca139cd83f7\",\n      \"timestamp\": \"2016-03-09T14:44:26.402973972-08:00\",\n      \"action\": \"pull\",\n      \"target\": {\n        \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",\n        \"digest\": \"sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf\",\n        \"size\": 708,\n        \"length\": 708,\n        \"repository\": \"hello-world\",\n        \"url\": \"http://192.168.100.227:5000/v2/hello-world/manifests/sha256:fea8895f450959fa676bcc1df0611ea93823a735a01205fd8622846041d0c7cf\",\n        \"tag\": \"latest\"\n      },\n      \"request\": {\n        \"id\": \"6df24a34-0959-4923-81ca-14f09767db19\",\n        \"addr\": \"192.168.64.11:42961\",\n        \"host\": \"192.168.100.227:5000\",\n        \"method\": \"GET\",\n        \"useragent\": \"curl/7.38.0\"\n      },\n      \"actor\": {},\n      \"source\": {\n        \"addr\": \"xtal.local:5000\",\n        \"instanceID\": \"a53db899-3b4b-4a62-a067-8dd013beaca4\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Managed Identity with User-Assigned Identity using autorest/adal in Go\nDESCRIPTION: Shows managed identity configuration for a user-assigned identity using autorest/adal in Go. It creates a ManagedIdentityOptions struct with a specified ClientID and initializes the authentication token. This approach allows workloads to authenticate using a specific managed identity, which is required in multi-identity scenarios.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\nopts := &adal.ManagedIdentityOptions{ClientID: \"...\"}\nspt, err := adal.NewServicePrincipalTokenFromManagedIdentity(\"https://management.azure.com/\")\nhandle(err)\n```\n\n----------------------------------------\n\nTITLE: Creating htpasswd file on Windows\nDESCRIPTION: Creates a htpasswd file with bcrypt encoding for basic authentication on Windows using Powershell.  Ensures the output file is correctly encoded using ASCII. Requires the `auth` directory to exist.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_14\n\nLANGUAGE: powershell\nCODE:\n```\ndocker run --rm --entrypoint htpasswd httpd:2 -Bbn testuser testpassword | Set-Content -Encoding ASCII auth/htpasswd\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories: Paginated Catalog Response\nDESCRIPTION: This snippet shows the format of a paginated catalog response. The Link header provides the URL for retrieving the next page of results using the `last` parameter.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_16\n\nLANGUAGE: none\nCODE:\n```\n200 OK\nContent-Type: application/json\nLink: <<url>?n=<n from the request>&last=<last repository in response>>; rel=\"next\"\n\n{\n    \"repositories\": [\n        <name>,\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: No Such Repository Error Response in Docker Registry API\nDESCRIPTION: HTTP 404 response format when a repository is not known to the registry. Returns a JSON error body with NAME_UNKNOWN code indicating the repository name was not found.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_79\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Access Denied Error Response in Docker Registry API\nDESCRIPTION: HTTP 403 response format when client lacks required access to a repository. Returns a JSON error body with DENIED code indicating the access controller denied the operation on the resource.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_80\n\nLANGUAGE: none\nCODE:\n```\n403 Forbidden\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Redirects - YAML\nDESCRIPTION: This snippet disables redirects from content backends. It sets the `disable` flag to `true` under the `redirect` section. This setting prevents the registry from redirecting to the backend and forces all data to route through the Registry.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nredirect:\n  disable: true\n```\n\n----------------------------------------\n\nTITLE: Upload Not Found Error in Docker Registry API\nDESCRIPTION: HTTP 404 response format when the specified upload is unknown to the registry. Returns a JSON error body with BLOB_UPLOAD_UNKNOWN code indicating the upload must be restarted.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_85\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Hugo Geekdoc Theme Assets - Shell\nDESCRIPTION: These shell commands are used to prepare the Hugo Geekdoc theme when working directly from a cloned source branch. They install Node.js dependencies specified in `package.json`, build necessary theme assets using `webpack`, and finally package the theme into a release tarball. This process is required because pre-built assets are only included in official releases.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/themes/hugo-geekdoc/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n# install required packages from package.json\nnpm install\n\n# run the build script to build required assets\nnpm run build\n\n# build release tarball\nnpm run pack\n```\n\n----------------------------------------\n\nTITLE: Creating and configuring custom Logger instances in Logrus\nDESCRIPTION: Illustrates how to create independent Logrus logger instances for separate components or modules, allowing individualized configuration such as output destination, formatter, and log level. Promotes flexible logging setups within applications.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nvar log = logrus.New()\n```\n\nLANGUAGE: Go\nCODE:\n```\nlog.Out = os.Stdout\n```\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetFormatter(&log.JSONFormatter{})\n```\n\nLANGUAGE: Go\nCODE:\n```\nlog.SetLevel(log.WarnLevel)\n```\n\n----------------------------------------\n\nTITLE: Fixing RehydratePriority Enum\nDESCRIPTION: This YAML directive corrects the 'x-ms-enum' setting for the 'RehydratePriority' definition, specifying the 'RehydratePriority' enum name and setting 'modelAsString' to false.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.RehydratePriority[\"x-ms-enum\"];\n    $.RehydratePriority[\"x-ms-enum\"] = {\n        \"name\": \"RehydratePriority\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: Authentication Required Error Response in Docker Registry API\nDESCRIPTION: HTTP 401 response format when authentication is required. Returns WWW-Authenticate header with an RFC7235 compliant authentication challenge and a JSON error body with UNAUTHORIZED code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_78\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON target object for manifest/blob delete event\nDESCRIPTION: This JSON snippet illustrates the minimal event target structure sent when manifests or blobs are deleted in the registry. It only includes the 'digest' of the content and the associated repository name. This reflects a subset of the full event target data typically sent during get or put operations. The 'length' field is deprecated in favor of 'size' but both may appear for compatibility.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/notifications.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"target\": {\n    \"digest\": \"sha256:d89e1bee20d9cb344674e213b581f14fbd8e70274ecf9d10c514bab78a307845\",\n    \"repository\": \"library/test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Interface in Go\nDESCRIPTION: Defines a basic exported interface `Exporter` with a single method `Export()`. This serves as a starting point for discussing interface evolution strategies.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_15\n\nLANGUAGE: go\nCODE:\n```\ntype Exporter interface {\n\tExport()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ClaimsValidator Interface in Go\nDESCRIPTION: Demonstrates how to implement the `ClaimsValidator` interface to add application-specific validation to claims. The `Validate` method of a custom claims struct is defined, which is called by the validator in addition to standard validations.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// MyCustomClaims includes all registered claims, plus Foo.\ntype MyCustomClaims struct {\n\tFoo string `json:\"foo\"`\n\tjwt.RegisteredClaims\n}\n\n// Validate can be used to execute additional application-specific claims\n// validation.\nfunc (m MyCustomClaims) Validate() error {\n\tif m.Foo != \"bar\" {\n\t\treturn errors.New(\"must be foobar\")\n\t}\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Unauthorized (401 Response) - Docker Registry API\nDESCRIPTION: Presents the 401 Unauthorized response when authentication fails for a blob upload operation. It includes the `WWW-Authenticate` header challenging the client and the standard JSON error body format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_91\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing CRC Response Header in PutBlob Response\nDESCRIPTION: This YAML directive modifies the swagger document to correctly define the 'x-ms-content-crc64' header in the PUT Blob response. It specifies the header's data type, format, and description for improved client-side integrity checks.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{containerName}/{blob}?BlockBlob\"].put.responses[\"201\"].headers\n  transform: >\n      $[\"x-ms-content-crc64\"] = {\n        \"x-ms-client-name\": \"ContentCRC64\",\n        \"type\": \"string\",\n        \"format\": \"byte\",\n        \"description\": \"Returned for a block blob so that the client can check the integrity of message content.\"\n      };\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Error: Authentication Required\nDESCRIPTION: HTTP 401 error response when authentication is required but not provided. Includes a WWW-Authenticate header with authentication challenges.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_61\n\nLANGUAGE: none\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Device Code Authentication with autorest/adal in Go\nDESCRIPTION: Shows how to implement device code authentication for user login to Azure resources using autorest/adal in Go. The workflow initiates device auth, prompts the user, polls for completion, and constructs a manual ServicePrincipalToken. Input: tenantID, clientID, resource. Output: authenticated subscription client.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2018-06-01/subscriptions\"\n    \"github.com/Azure/go-autorest/autorest\"\n    \"github.com/Azure/go-autorest/autorest/adal\"\n)\n\noauthClient := &http.Client{}\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\nresource := \"https://management.azure.com/\"\ndeviceCode, err := adal.InitiateDeviceAuth(oauthClient, *oauthCfg, clientID, resource)\nhandle(err)\n\n// display instructions, wait for the user to authenticate\nfmt.Println(*deviceCode.Message)\ntoken, err := adal.WaitForUserCompletion(oauthClient, deviceCode)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenFromManualToken(*oauthCfg, clientID, resource, *token)\nhandle(err)\n\nclient := subscriptions.NewClient()\nclient.Authorizer = autorest.NewBearerAuthorizer(spt)\n```\n\n----------------------------------------\n\nTITLE: Configuring Deletion - YAML\nDESCRIPTION: This snippet configures deletion by digest. It enables deletion of image blobs and manifests by digest by setting the `enabled` flag to `true`. This feature defaults to `false` and must be explicitly enabled.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndelete:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Custom Configuration\nDESCRIPTION: Command to run the registry with a custom configuration file. This allows overriding the default settings by mounting your own configuration YAML file into the container.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/dockerhub.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 5000:5000 -v $PWD/PATH/TO/config.yml:/etc/distribution/config.yml --restart always --name registry distribution/distribution:edge\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Sets the OTEL_GO_X_RESOURCE environment variable to 'true' to enable experimental resource semantic conventions in the OpenTelemetry Go SDK. This allows resource detectors to add experimental attributes defined in the OpenTelemetry specification.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_RESOURCE=true\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Request\nDESCRIPTION: HTTP DELETE request to remove a blob identified by repository name and digest. Requires authentication and specific path parameters for the target blob.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_56\n\nLANGUAGE: none\nCODE:\n```\nDELETE /v2/<name>/blobs/<digest>\nHost: <registry host>\nAuthorization: <scheme> <token>\n```\n\n----------------------------------------\n\nTITLE: Go modules commands\nDESCRIPTION: Shows the go modules commands to update the project to use `jwt-go` version 4. These commands are `go get` to get the dependency and `go mod tidy` to update the go.mod file.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngo get github.com/golang-jwt/jwt/v4\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Error: Invalid Name or Digest\nDESCRIPTION: HTTP 400 error response for invalid repository name or digest. Returned when the provided digest doesn't match the content or the repository name is invalid.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_58\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\n```\n\n----------------------------------------\n\nTITLE: Building Registry Binaries with Make\nDESCRIPTION: Command to build the registry binaries using the provided Makefile, which creates the registry, digest, and other utility executables.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make\n+ bin/registry\n+ bin/digest\n+ bin/registry-api-descriptor-template\n+ binaries\n```\n\n----------------------------------------\n\nTITLE: Listing Repositories: Catalog Request\nDESCRIPTION: This snippet demonstrates how to retrieve the catalog of available repositories in the registry. It uses a GET request to the `/v2/_catalog` endpoint.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_13\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/_catalog\n```\n\n----------------------------------------\n\nTITLE: Creating Managed Identity Credential Before and After API Change - Go\nDESCRIPTION: Illustrates the revised creation process for ManagedIdentityCredential, moving from using a dedicated id parameter to setting ManagedIdentityCredentialOptions.ID. The update allows specifying either ClientID or ResourceID explicitly in options. This approach aligns with new environmental configuration standards and provides better type safety.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/CHANGELOG.md#_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// before\ncred, err := NewManagedIdentityCredential(\"client-id\", nil)\n// or, for a resource ID\nopts := &ManagedIdentityCredentialOptions{ID: ResourceID}\ncred, err := NewManagedIdentityCredential(\"/subscriptions/...\", opts)\n```\n\nLANGUAGE: go\nCODE:\n```\n// after\nclientID := ClientID(\"7cf7db0d-...\")\nopts := &ManagedIdentityCredentialOptions{ID: clientID}\n// or, for a resource ID\nresID: ResourceID(\"/subscriptions/...\")\nopts := &ManagedIdentityCredentialOptions{ID: resID}\ncred, err := NewManagedIdentityCredential(opts)\n```\n\n----------------------------------------\n\nTITLE: Running a Local Go Documentation Server (Shell)\nDESCRIPTION: Installs the `pkgsite` tool using `go install` and then runs it. This command starts a local web server, allowing developers to preview Go documentation comments (`godoc`) for the project as they would appear on `pkg.go.dev`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngo install golang.org/x/pkgsite/cmd/pkgsite@latest\npkgsite\n```\n\n----------------------------------------\n\nTITLE: Retrieving Verbose Error Details in Go (MSAL)\nDESCRIPTION: Shows the usage of a custom `errors.Verbose(err)` function (presumably provided by the MSAL errors package) to get the most detailed error message available, likely utilizing the `Verbose()` method of custom types like `CallErr` when applicable.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/errors/error_design.md#_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfmt.Println(errors.Verbose(err))\n```\n\n----------------------------------------\n\nTITLE: Disable Cardinality Limit in OpenTelemetry Go Metric SDK\nDESCRIPTION: This snippet shows unsetting the environment variable to disable the cardinality limit, allowing unlimited metric streams. It requires unsetting or removing the `OTEL_GO_X_CARDINALITY_LIMIT` environment variable.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_CARDINALITY_LIMIT\n```\n\n----------------------------------------\n\nTITLE: Reading and Preparing /proc Files for Parsing in Go\nDESCRIPTION: Illustrates reading a file from the /proc filesystem (e.g., `/proc/cpuinfo`) using the internal `util.ReadFileNoStat` helper, which avoids `stat` system calls. The file content is read into a byte slice, then a `bufio.Scanner` is created via a `bytes.Reader` to facilitate line-by-line parsing. This approach separates file reading from parsing logic.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n    data, err := util.ReadFileNoStat(\"/proc/cpuinfo\")\n    if err != nil {\n        return err\n    }\n    reader := bytes.NewReader(data)\n    scanner := bufio.NewScanner(reader)\n```\n\n----------------------------------------\n\nTITLE: Initializing gRPC Client for Secure Session Agent in Go\nDESCRIPTION: This snippet demonstrates how to set up a gRPC client in Go to communicate with the Secure Session Agent. It involves establishing a connection to the agent's server endpoint, with considerations for secure transport and context management. Dependencies include the gRPC library and any Secure Session-specific protocols or middleware to facilitate authentication and security.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/google/s2a-go/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nconn, err := grpc.Dial(\"secure-session-agent:443\", grpc.WithTransportCredentials(credentials.NewClientTLSFromCert(nil, \"\")))\nif err != nil {\n    log.Fatalf(\"Failed to connect: %v\", err)\n}\ndefer conn.Close()\n// Use conn to create client stubs for further communication\n```\n\n----------------------------------------\n\nTITLE: Tags Paginated Success Response\nDESCRIPTION: This code snippet represents a successful (200 OK) response for the tags paginated request. It includes a JSON object with the repository name and an array of tags.  The Link header provides a URL for retrieving the next page of results, if available. The Content-Length header indicates the length of the response body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_28\n\nLANGUAGE: none\nCODE:\n```\n{\n    \"name\": <name>,\n    \"tags\": [\n        <tag>,\n        ...\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Accepted Response in Docker Registry - HTTP\nDESCRIPTION: Depicts the HTTP 202 Accepted response indicating a successful deletion of a manifest or tag. No response body is included. Inputs: Valid delete request. Output: 202 status response.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_34\n\nLANGUAGE: HTTP\nCODE:\n```\n202 Accepted\n```\n\n----------------------------------------\n\nTITLE: Removing UnmarshalXML for BlobItems\nDESCRIPTION: This YAML directive disables automatic XML unmarshaling for 'BlobItemInternal' by setting the 'x-ms-go-omit-serde-methods' extension in the swagger document. This allows for implementing a custom 'UnmarshalXML' function for handling BlobItems.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    $.BlobItemInternal[\"x-ms-go-omit-serde-methods\"] = true;\n```\n\n----------------------------------------\n\nTITLE: Running redis-stack-server with Docker\nDESCRIPTION: This command starts a redis-stack-server Docker container, mapping port 6379 on the host machine to port 6379 in the container.  This is required for running capabilities tests.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\ndocker run -p 6379:6379 -it redis/redis-stack-server:edge\n```\n\n----------------------------------------\n\nTITLE: Requesting Unabridged Catalog (None)\nDESCRIPTION: HTTP GET request to retrieve the full list of repositories available in the registry cluster. The server implementation may impose a maximum limit and return a partial set with pagination links, although the request itself does not specify limits.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_111\n\nLANGUAGE: none\nCODE:\n```\nGET /v2/_catalog\n```\n\n----------------------------------------\n\nTITLE: Set Exemplar Filter to Allow Only Sampled Measurements\nDESCRIPTION: This snippet sets the exemplar filter to `trace_based`, allowing only sampled measurements to be exported as exemplars, following the OpenTelemetry specification.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_6\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=trace_based\n```\n\n----------------------------------------\n\nTITLE: Checking Commit History\nDESCRIPTION: This command shows the commit history between the last tag and the current HEAD.  It is useful to verify changes.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\ngit --no-pager log --pretty=oneline \"<last tag>..HEAD\"\n```\n\n----------------------------------------\n\nTITLE: Docker Registry Configuration for Garbage Collection\nDESCRIPTION: Sample YAML configuration file for Docker Registry that specifies the storage location for registry data, required when running garbage collection.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/garbage-collection.md#_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: 0.1\nstorage:\n  filesystem:\n    rootdirectory: /registry/data\n```\n\n----------------------------------------\n\nTITLE: Successful Blob Upload Progress Response in Docker Registry API (none)\nDESCRIPTION: Shows the HTTP 204 No Content response indicating the upload is recognized and progress reported. The Range header specifies the byte offset last received by the server, facilitating resumable upload logic. The response has an empty body and uses Docker-Upload-UUID to confirm the upload session identity. Clients use these headers to maintain upload state consistency.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_76\n\nLANGUAGE: none\nCODE:\n```\n204 No Content\nRange: 0-<offset>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Token with autorest/adal in Go\nDESCRIPTION: Illustrates explicit token acquisition and refresh cycles using autorest/adal in Go. Creates a ServicePrincipalToken for a specific resource, refreshes it, and retrieves the access token. Optionally handles the refreshed token object or error if refresh fails. Useful for cases requiring direct token management.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/MIGRATION.md#_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nimport \"github.com/Azure/go-autorest/autorest/adal\"\n\noauthCfg, err := adal.NewOAuthConfig(\"https://login.microsoftonline.com\", tenantID)\nhandle(err)\n\nspt, err := adal.NewServicePrincipalTokenWithSecret(\n    *oauthCfg, clientID, \"https://vault.azure.net\", &adal.ServicePrincipalTokenSecret{ClientSecret: secret},\n)\n\nerr = spt.Refresh()\nif err == nil {\n    token := spt.Token\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Your Fork as a Git Remote (Shell)\nDESCRIPTION: Adds a new Git remote pointing to your personal fork of the `opentelemetry-go` repository. Replace `<YOUR_FORK>` with a desired remote name (e.g., your username) and `<YOUR_GITHUB_USERNAME>` with your actual GitHub username. This is necessary for pushing changes to your fork before creating a pull request.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit remote add <YOUR_FORK> git@github.com:<YOUR_GITHUB_USERNAME>/opentelemetry-go\n```\n\n----------------------------------------\n\nTITLE: Restarting the Registry Service\nDESCRIPTION: Commands to restart the registry service using launchctl, which stops and starts the service.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ launchctl stop com.docker.registry\n$ launchctl start com.docker.registry\n```\n\n----------------------------------------\n\nTITLE: Set Exemplar Filter to Allow All Measurements\nDESCRIPTION: This snippet configures all measurements to be allowed as exemplars by setting the `OTEL_METRICS_EXEMPLAR_FILTER` to `always_on`. This controls which measurements are exported as exemplars based on sampling and filtering policies.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_4\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_METRICS_EXEMPLAR_FILTER=always_on\n```\n\n----------------------------------------\n\nTITLE: Fixing EncryptionAlgorithm Enum\nDESCRIPTION: This YAML directive modifies the 'EncryptionAlgorithm' parameter, explicitly setting its allowed values to 'None' and 'AES256'.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters\n  transform: >\n    delete $.EncryptionAlgorithm.enum;\n    $.EncryptionAlgorithm.enum = [\n      \"None\",\n      \"AES256\"\n    ];\n```\n\n----------------------------------------\n\nTITLE: Enable Cardinality Limit in OpenTelemetry Go Metric SDK\nDESCRIPTION: This snippet demonstrates setting an environment variable to activate the cardinality limit feature, restricting the number of metric streams for an instrument to a specified maximum, such as 2000. Setting the value to -1 or unset disables the limit. It requires setting the environment variable `OTEL_GO_X_CARDINALITY_LIMIT` with an integer value.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nexport OTEL_GO_X_CARDINALITY_LIMIT=2000\n```\n\n----------------------------------------\n\nTITLE: Adding HTTPResponse Interface for Error Handling in SDK 0.9.0\nDESCRIPTION: This snippet introduces an interface to access raw HTTP responses in case of API call failures, allowing callers to retrieve detailed response data from error objects. It enhances debugging and error handling capabilities by exposing underlying HTTP response details.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nAdd `HTTPResponse` interface...\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: Too Many Requests - json\nDESCRIPTION: Exemplifies the HTTP 429 Too Many Requests response, emitted by the registry when rate limits are exceeded. The body is a JSON array of errors, each describing the excess request attempt with machine-readable codes and overrides for further introspection. Key headers specify response format and size. Used for throttling, the output is a standard registry error JSON map.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_69\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Sampler in Go for go-redis\nDESCRIPTION: Illustrates using the `ParentBased(NeverSample())` sampler from the `go.opentelemetry.io/otel/sdk/trace` package to control OpenTelemetry span creation in go-redis. This specific configuration prevents the creation of spans if the parent span is not recording, mimicking the library's behavior prior to v9.0.5.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/CHANGELOG.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nParentBased(NeverSample())\n```\n\n----------------------------------------\n\nTITLE: Defining a Configuration Struct in Go\nDESCRIPTION: Defines a basic Go struct named `config` intended to hold configuration options for a specific component or package. This struct is typically kept unexported unless user customization is expected, in which case it should be exported with documentation on extension.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// config contains configuration options for a thing.\ntype config struct {\n\t// options ...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating self-signed certificates for Docker registry with OpenSSL\nDESCRIPTION: Commands to generate a self-signed certificate for securing a Docker registry. Creates a 4096-bit RSA key and a certificate valid for 365 days with the registry domain specified in the Subject Alternative Name.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/insecure.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p certs\n\n$ openssl req \\\n  -newkey rsa:4096 -nodes -sha256 -keyout certs/domain.key \\\n  -addext \"subjectAltName = DNS:myregistry.domain.com\" \\\n  -x509 -days 365 -out certs/domain.crt\n```\n\n----------------------------------------\n\nTITLE: Cloning the Distribution Repository\nDESCRIPTION: Commands to create the required directory structure and clone the distribution repository to the appropriate location in the GOPATH.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir -p $GOPATH/src/github.com/distribution\n$ git clone https://github.com/distribution/distribution.git $GOPATH/src/github.com/distribution/distribution\n$ cd $GOPATH/src/github.com/distribution/distribution\n```\n\n----------------------------------------\n\nTITLE: Disabling Experimental Resource Semantic Conventions in OpenTelemetry Go SDK\nDESCRIPTION: Unsets the OTEL_GO_X_RESOURCE environment variable to disable experimental resource semantic conventions in the OpenTelemetry Go SDK. This prevents resource detectors from adding experimental attributes.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/internal/x/README.md#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_RESOURCE\n```\n\n----------------------------------------\n\nTITLE: Implementing Support for JSON Marshalling and Unmarshalling in SDK 0.2.0\nDESCRIPTION: This snippet details support for JSON serialization and deserialization, enabling response payloads to be easily converted to and from JSON format. It includes handling early exit if payloads are absent and removing the Payload field from Response, streamlining data processing workflows.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\nAdd support for marshalling and unmarshalling JSON...\n```\n\n----------------------------------------\n\nTITLE: Handling Too Many Requests Response (None)\nDESCRIPTION: Example HTTP response for a 429 Too Many Requests error, indicating rate limiting. Includes the standard JSON error payload with specific error codes and describes the relevant headers such as Content-Length and Content-Type.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_110\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Azure Blob Storage Errors\nDESCRIPTION: Shows how to handle specific Azure Blob Storage error codes, particularly for container deletion scenarios where you might want to ignore certain errors.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/README.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst (\n\tconnectionString = \"<connection_string>\"\n\tcontainerName    = \"sample-container\"\n)\n\n// create a client with the provided connection string\nclient, err := azblob.NewClientFromConnectionString(connectionString, nil)\n// TODO: handle error\n\n// try to delete the container, avoiding any potential race conditions with an in-progress or completed deletion\n_, err = client.DeleteContainer(context.TODO(), containerName, nil)\n\nif bloberror.HasCode(err, bloberror.ContainerBeingDeleted, bloberror.ContainerNotFound) {\n\t// ignore any errors if the container is being deleted or already has been deleted\n} else if err != nil {\n\t// TODO: some other error\n}\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Repository Not Found (404 Response) - Docker Registry API\nDESCRIPTION: Details the 404 Not Found response when the specified repository name in a blob upload request is unknown to the registry. It includes the standard JSON error body format with details about the `NAME_UNKNOWN` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_92\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Blob Success Response\nDESCRIPTION: HTTP 202 success response for a blob deletion operation. Includes the digest of the deleted blob in the response headers.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_57\n\nLANGUAGE: none\nCODE:\n```\n202 Accepted\nContent-Length: 0\nDocker-Content-Digest: <digest>\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Not Found (Repository) during Upload Deletion (JSON)\nDESCRIPTION: Represents the JSON error response body returned with a 404 status code when the repository specified in the delete upload request path is unknown to the registry. Includes the `NAME_UNKNOWN` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_108\n\nLANGUAGE: json\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding List Element in Registry Configuration via Environment Variable (Shell)\nDESCRIPTION: Sets the `REGISTRY_HTTP_TLS_LETSENCRYPT_HOSTS_0` environment variable to override the first element (index 0) of the `hosts` list within the `http.tls.letsencrypt` section specified in the YAML configuration. This allows changing specific list items via environment variables.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/configuration.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nREGISTRY_HTTP_TLS_LETSENCRYPT_HOSTS_0=registry.example.com\n```\n\n----------------------------------------\n\nTITLE: Cloning the Distribution Repository with Git\nDESCRIPTION: Commands to fetch the registry source code from GitHub using git and navigate to the project directory.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/distribution/distribution\ncd distribution\n```\n\n----------------------------------------\n\nTITLE: Initializing OTLP Log HTTP Exporter in Go\nDESCRIPTION: This snippet demonstrates how to initialize the OTLP Log HTTP Exporter using the Go programming language. It involves creating an exporter instance that transmits logs over HTTP to an OTLP endpoint. Dependencies include the OpenTelemetry Go SDK and the OTLP exporter package.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n  \"context\"\n  \"go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp\"\n)\n\n// InitializeExporter creates a new OTLP Log HTTP exporter\nfunc InitializeExporter(endpoint string) (*otlploghttp.Exporter, error) {\n  ctx := context.Background()\n  exporter, err := otlploghttp.New(ctx, otlploghttp.WithEndpoint(endpoint))\n  if err != nil {\n    return nil, err\n  }\n  return exporter, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Blob Part - Range Not Satisfiable Response - API\nDESCRIPTION: Displays the HTTP 416 Requested Range Not Satisfiable response, indicating that the byte range specified in the `Range` header of a fetch request is invalid or cannot be fulfilled for the target blob. This can occur due to incorrect formatting or a range outside the blob's size.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_52\n\nLANGUAGE: none\nCODE:\n```\n416 Requested Range Not Satisfiable\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Unauthorized Error with Authentication Header - HTTP\nDESCRIPTION: Demonstrates a 401 Unauthorized response for an unauthenticated manifest delete request. The response includes the WWW-Authenticate header and a JSON error body. Prerequisite: Client must present valid credentials to avoid this error. Outputs: 401 status, authentication challenge header, and JSON error array.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_36\n\nLANGUAGE: HTTP\nCODE:\n```\n401 Unauthorized\nWWW-Authenticate: <scheme> realm=\"<realm>\", ...\"\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Blob Upload Deletion Response (HTTP 204)\nDESCRIPTION: Shows the HTTP 204 No Content response indicating successful deletion of a blob upload. The response must have a `Content-Length` header set to zero and an empty body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_104\n\nLANGUAGE: http\nCODE:\n```\n204 No Content\nContent-Length: 0\n```\n\n----------------------------------------\n\nTITLE: Getting Azure CLI access token\nDESCRIPTION: This Azure CLI command retrieves an access token for the specified resource (Azure Resource Manager). The `--output json` option formats the output as a JSON object. The token should not be shared for security reasons.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_4\n\nLANGUAGE: azurecli\nCODE:\n```\naz account get-access-token --output json --resource https://management.core.windows.net\n```\n\n----------------------------------------\n\nTITLE: Stopping and Removing a Docker Registry Container - console\nDESCRIPTION: Shows how to stop the running Docker registry container and remove it with associated volumes. First stops the registry container using 'docker container stop', then removes the container and volumes using 'docker container rm -v'. Useful for cleaning up the Docker environment. Requires the container name 'registry'.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop registry\n```\n\nLANGUAGE: console\nCODE:\n```\n$ docker container stop registry && docker container rm -v registry\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response - Bad Request - API\nDESCRIPTION: Shows the standard HTTP 400 Bad Request response returned by the API when there is a client-side issue with the request, such as invalid parameters like repository name or tag. The response includes a JSON body containing an array of specific error details.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_45\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRecord Limits in Go OpenTelemetry SDK\nDESCRIPTION: These Go function signatures (`WithAttributeCountLimit`, `WithAttributeValueLengthLimit`) provide options for configuring the `LoggerProvider`. They allow setting limits on the maximum number of attributes per log record and the maximum length of attribute values, respectively, as defined by the OpenTelemetry specification. These limits can also be configured via environment variables (`OTEL_LOGRECORD_*`).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/log/DESIGN.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc WithAttributeCountLimit(limit int) LoggerProviderOption\nfunc WithAttributeValueLengthLimit(limit int) LoggerProviderOption\n```\n\n----------------------------------------\n\nTITLE: HTTP Error Response - Too Many Requests - API\nDESCRIPTION: Shows the HTTP 429 Too Many Requests response, returned when the client exceeds the rate limit for accessing the registry API. The response body includes a `TOOMANYREQUESTS` error code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_49\n\nLANGUAGE: none\nCODE:\n```\n429 Too Many Requests\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Go JOSE Library\nDESCRIPTION: This standard Go import statement brings the `go-jose/v4` package into the current Go file. It is a necessary first step to use any of the functions and types provided by the library for JOSE (JWE, JWS, JWT) operations.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/go-jose/go-jose/v4/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/go-jose/go-jose/v4\"\n```\n\n----------------------------------------\n\nTITLE: Installing Registry as a Launch Agent\nDESCRIPTION: Commands to validate, copy, and set permissions for the registry's launchd plist file, which will enable the registry to run as a user agent on macOS.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ plutil -lint docs/content/recipes/osx/com.docker.registry.plist\n$ cp docs/content/recipes/osx/com.docker.registry.plist ~/Library/LaunchAgents/\n$ chmod 644 ~/Library/LaunchAgents/com.docker.registry.plist\n```\n\n----------------------------------------\n\nTITLE: Manifest or Tag Unknown Error in Delete Operation - HTTP\nDESCRIPTION: Shows another variant of a 404 Not Found response specific to attempts to delete an unknown manifest or tag. The JSON error array provides error codes such as NAME_UNKNOWN or MANIFEST_UNKNOWN. Inputs: DELETE request for missing manifest. Outputs: 404 status, detailed error array.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_40\n\nLANGUAGE: HTTP\nCODE:\n```\n404 Not Found\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using LoggingHandler and CompressHandler in Go\nDESCRIPTION: This code snippet demonstrates how to use the `LoggingHandler` and `CompressHandler` from the `gorilla/handlers` package. `LoggingHandler` logs HTTP requests to stdout, while `CompressHandler` compresses HTTP responses using gzip. The example shows how to apply these handlers to an HTTP server.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/gorilla/handlers/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"net/http\"\n    \"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n    r := http.NewServeMux()\n\n    // Only log requests to our admin dashboard to stdout\n    r.Handle(\"/admin\", handlers.LoggingHandler(os.Stdout, http.HandlerFunc(ShowAdminDashboard)))\n    r.HandleFunc(\"/\", ShowIndex)\n\n    // Wrap our server with our gzip handler to gzip compress all responses.\n    http.ListenAndServe(\":8000\", handlers.CompressHandler(r))\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Bad Request with JSON Error - HTTP\nDESCRIPTION: Displays the HTTP 400 Bad Request response with a JSON error array when a manifest delete fails due to invalid repository name or tag/digest reference. Inputs: DELETE request with invalid path parameters. Output: 400 status, JSON error body with error code and detail.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_35\n\nLANGUAGE: HTTP\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Small /sys Files in Go\nDESCRIPTION: Shows how to read small files from the /sys filesystem, like `/sys/class/power_supply/BAT0/capacity`, using the internal `util.SysReadFile` helper function. This function is optimized for reading these typically small files containing single values without performing a preliminary size check.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n    data, err := util.SysReadFile(\"/sys/class/power_supply/BAT0/capacity\")\n```\n\n----------------------------------------\n\nTITLE: Blob Fetch Temporary Redirect Response in Docker Registry - HTTP\nDESCRIPTION: Depicts a 307 Temporary Redirect response when the blob is accessible at an alternate location, with the Location header indicating the reroute destination. Inputs: Blob fetch requiring redirect. Outputs: 307 status, Location header, Docker-Content-Digest header.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_44\n\nLANGUAGE: HTTP\nCODE:\n```\n307 Temporary Redirect\nLocation: <blob location>\nDocker-Content-Digest: <digest>\n```\n\n----------------------------------------\n\nTITLE: Starting the Registry Service\nDESCRIPTION: Command to load the registry launch agent into launchd to start the registry service.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ launchctl load ~/Library/LaunchAgents/com.docker.registry.plist\n```\n\n----------------------------------------\n\nTITLE: Standard JSON Format for API Error Responses\nDESCRIPTION: Defines the standard JSON structure used in the body of 4xx API responses to report errors. It contains an 'errors' array, where each object includes a unique 'code', a human-readable 'message', and optional 'detail' for client resolution guidance.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"errors\": [\n        {\n            \"code\": <error identifier>,\n            \"message\": <message describing condition>,\n            \"detail\": <unstructured>\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful PATCH Blob Upload Response in Docker Registry API\nDESCRIPTION: HTTP 202 response format for successful upload of a data chunk. Includes Location header with updated upload URL, Range header showing upload progress, and Docker-Upload-UUID header identifying the upload.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_83\n\nLANGUAGE: none\nCODE:\n```\n202 Accepted\nLocation: /v2/<name>/blobs/uploads/<uuid>\nRange: 0-<offset>\nContent-Length: 0\nDocker-Upload-UUID: <uuid>\n```\n\n----------------------------------------\n\nTITLE: Gathering Docker and Registry Information for Bug Reports (Shell)\nDESCRIPTION: Shell commands used to collect version and configuration details from Docker and the running registry container. This information is required when submitting bug reports to aid in diagnosis.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker version\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker info\n```\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec <registry-container> registry --version\n```\n\n----------------------------------------\n\nTITLE: Enabling Unstable RESP3 Mode and Fetching Raw Redis Search Results (Go)\nDESCRIPTION: Shows configuring UnstableResp3 in the Redis client to access experimental or complex response structures in search commands. Outputs must be fetched using RawResult or RawVal instead of standard Result/Val methods. Applicable when using advanced RediSearch capabilities. Prerequisites: go-redis/v9, appropriate Redis server. Inputs include UnstableResp3 option and search arguments.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\nredis.NewClient(&redis.Options{\n\t\t\tUnstableResp3: true,\n\t\t})\n\n```\n\nLANGUAGE: Go\nCODE:\n```\nres1, err := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawResult()\nval1 := client.FTSearchWithArgs(ctx, \"txt\", \"foo bar\", &redis.FTSearchOptions{}).RawVal()\n\n```\n\n----------------------------------------\n\nTITLE: Error Response: No Such Repository\nDESCRIPTION: HTTP 404 error response format returned when the requested repository is not known to the registry. Includes error codes and messages in JSON format.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_53\n\nLANGUAGE: none\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 400 Bad Request during Upload Deletion (JSON)\nDESCRIPTION: Represents the JSON error response body for a 400 error during blob upload deletion, possibly due to an invalid repository name or upload state. Includes `NAME_INVALID` and `BLOB_UPLOAD_INVALID` codes. Client may ignore this error.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n400 Bad Request\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Complete (201 Response) - Docker Registry API\nDESCRIPTION: Shows the successful response (201 Created) after a blob upload has been successfully completed and accepted by the registry. It provides headers indicating the canonical location of the uploaded blob (`Location`) and the final digest (`Docker-Content-Digest`).\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_96\n\nLANGUAGE: none\nCODE:\n```\n201 Created\nLocation: <blob location>\nContent-Range: <start of range>-<end of range, inclusive>\nContent-Length: 0\nDocker-Content-Digest: <digest>\n```\n\n----------------------------------------\n\nTITLE: Specifying RESP Protocol Version in Redis Client (Go)\nDESCRIPTION: Shows how to configure the go-redis client to use either RESP2 or RESP3 by setting the Protocol field in redis.Options. Requires go-redis/v9. Users specify Protocol as 2 or 3 to choose the corresponding Redis protocol. Outputs depend on subsequent command executions with the set protocol.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nrdb := redis.NewClient(&redis.Options{\n    Addr:     \"localhost:6379\",\n    Password: \"\", // no password set\n    DB:       0,  // use default DB\n    Protocol: 3, // specify 2 for RESP 2 or 3 for RESP 3\n})\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Modules for go-redis in Shell\nDESCRIPTION: This snippet initializes a Go module and adds the go-redis/v9 dependency for a new or existing Go project. The 'go mod init' command sets up the module using the provided path, while 'go get' downloads and adds the required package reference. No inputs are required other than the module name. Prerequisites include Go installed with modules support.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngo mod init github.com/my/repo\n```\n\nLANGUAGE: Shell\nCODE:\n```\ngo get github.com/redis/go-redis/v9\n```\n\n----------------------------------------\n\nTITLE: Retrieving Number of LogRecord Attributes in Go\nDESCRIPTION: The `AttributesLen` method returns the count of attributes present on a `Record`. This supports efficient preallocation when converting or copying attributes, improving performance when handling log records. It complements the attribute manipulation API by exposing attribute count.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_6\n\nLANGUAGE: Go\nCODE:\n```\nfunc (r *Record) AttributesLen() int\n```\n\n----------------------------------------\n\nTITLE: Disabling Flag Sorting in pflag Help Output in Go\nDESCRIPTION: Shows how to disable the default alphabetical sorting of flags in the help/usage output. By setting `flags.SortFlags = false`, flags will be printed in the order they were defined.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nflags.BoolP(\"verbose\", \"v\", false, \"verbose output\")\nflags.String(\"coolflag\", \"yeaah\", \"it's really cool flag\")\nflags.Int(\"usefulflag\", 777, \"sometimes it's very useful\")\nflags.SortFlags = false\nflags.PrintDefaults()\n```\n\n----------------------------------------\n\nTITLE: Installing Azure Identity SDK for Go\nDESCRIPTION: This shell command installs the Azure Identity Go module using Go modules for dependency management. It requires Go 1.18 or later and allows Go projects to import and use Azure AD-based authentication credentials.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get -u github.com/Azure/azure-sdk-for-go/sdk/azidentity\n```\n\n----------------------------------------\n\nTITLE: Manifest Delete Not Found (Repository or Manifest Unknown) Error - HTTP\nDESCRIPTION: Shows the HTTP 404 Not Found response indicating that either the repository or the manifest reference is unknown. The body contains a JSON array of error objects detailing the reason. Inputs: DELETE with unknown repository or digest. Outputs: 404 status, JSON error response.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_37\n\nLANGUAGE: HTTP\nCODE:\n```\n404 Not Found\nContent-Length: <length>\nContent-Type: application/json\n\n{\n\t\"errors\": [\n\t    {\n            \"code\": <error code>,\n            \"message\": \"<error message>\",\n            \"detail\": ...\n        },\n        ...\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Blob Fetch Response in Docker Registry - HTTP\nDESCRIPTION: Displays a 200 OK response to a successful blob GET, returning the requested binary data. Includes length, digest, and content-type headers. Inputs: Successful blob request. Outputs: 200 status and binary content in response body.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_43\n\nLANGUAGE: HTTP\nCODE:\n```\n200 OK\nContent-Length: <length>\nDocker-Content-Digest: <digest>\nContent-Type: application/octet-stream\n\n<blob binary data>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Server Binary and Test Files in Go\nDESCRIPTION: Defines file paths for the Redis server executable and config file, used during go-redis testing. Uses filepath.Abs and filepath.Join to build absolute paths relative to testdata directory. No inputs other than path structure; outputs are the variable definitions. Prerequisites are local file system access and standard Go libraries.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_7\n\nLANGUAGE: Go\nCODE:\n```\nvar (\n\tredisServerBin, _  = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"src\", \"redis-server\"))\n\tredisServerConf, _ = filepath.Abs(filepath.Join(\"testdata\", \"redis\", \"redis.conf\"))\n)\n\n```\n\n----------------------------------------\n\nTITLE: Manifest or Tag Delete Method Not Allowed in Docker Registry - HTTP\nDESCRIPTION: Presents the 405 Method Not Allowed HTTP response for situations when deletion of manifests or tags is prevented via registry policy (e.g., pull-through cache, delete disabled). No response body is provided. Inputs: DELETE with operation disabled. Outputs: 405 status code.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_41\n\nLANGUAGE: HTTP\nCODE:\n```\n405 Method Not Allowed\n```\n\n----------------------------------------\n\nTITLE: Defining State Machine Function Type for JSON Processing\nDESCRIPTION: Definition of the stateFn type used to implement state machines for JSON processing. This follows Rob Pike's pattern for lexers and parsers in Go.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/AzureAD/microsoft-authentication-library-for-go/apps/internal/json/design.md#_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype stateFn func() (stateFn, error)\n```\n\n----------------------------------------\n\nTITLE: Example Output with pflag Flag Sorting Disabled\nDESCRIPTION: Shows the example help output generated when flag sorting is disabled via `flags.SortFlags = false`. The flags are listed in the order they were defined in the code, not alphabetically.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/spf13/pflag/README.md#_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\n  -v, --verbose           verbose output\n      --coolflag string   it's really cool flag (default \"yeaah\")\n      --usefulflag int    sometimes it's very useful (default 777)\n```\n\n----------------------------------------\n\nTITLE: Blob Upload Error: Invalid Name or Digest - none\nDESCRIPTION: Shows an HTTP 400 Bad Request response for cases where the registry detects an invalid repository name or digest during a blob upload or manifest validation. This response requires no payload and asserts the error purely via its status code; no returned data beyond standard HTTP error handling is involved. This applies when the client sends malformed or inconsistent identifiers.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/spec/api.md#_snippet_64\n\nLANGUAGE: none\nCODE:\n```\n400 Bad Request\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis via URL Specification in Go\nDESCRIPTION: Illustrates connecting to Redis by parsing a URI according to the redis URI specification. 'redis.ParseURL' converts the URL string into client options, which are passed to NewClient. Only go-redis/v9 is required. Inputs: connection URI as a string; Output: a configured Redis client instance.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\nimport (\n    \"github.com/redis/go-redis/v9\"\n)\n\nfunc ExampleClient() *redis.Client {\n    url := \"redis://user:password@localhost:6379/0?protocol=3\"\n    opts, err := redis.ParseURL(url)\n    if err != nil {\n        panic(err)\n    }\n\n    return redis.NewClient(opts)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Copying SSL Certificate and Key Files in Console\nDESCRIPTION: Copies SSL/TLS certificate and key ('domain.crt', 'domain.key') into the 'auth' directory where Nginx expects them for secure (HTTPS) registry access. This operation should be performed in the console and assumes that valid certificate and key files are available. Ensures encrypted communication between clients and Nginx when authenticating or pushing/pulling images.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ cp domain.crt auth\n$ cp domain.key auth\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Local S3 Storage Configuration\nDESCRIPTION: Command with environment variables to run the registry using a local S3-compatible storage backend.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY=distribution \\\n        AWS_SECRET_KEY=password \\\n        AWS_REGION=us-east-1 \\\n        S3_BUCKET=images-local \\\n        S3_ENCRYPT=false \\\n        REGION_ENDPOINT=http://127.0.0.1:9000 \\\n        S3_SECURE=false \\\n./bin/registry serve tests/conf-local-s3.yml\n```\n\n----------------------------------------\n\nTITLE: Constructing Objects in CEL (C Syntax Example)\nDESCRIPTION: This snippet demonstrates CEL object construction syntax by instantiating a 'common.GeoPoint' object with specified latitude and longitude values. The expression relies on the presence of a 'common.GeoPoint' type in the evaluation context. It takes named parameters (latitude, longitude) as input and produces an instance of the specified object type. This construction is used to model geographic positions within CEL expressions. Actual instantiation depends on CEL language embedding and runtime support for object types.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cel.dev/expr/README.md#_snippet_1\n\nLANGUAGE: c\nCODE:\n```\n// Object construction\ncommon.GeoPoint{ latitude: 10.0, longitude: -5.5 }\n```\n\n----------------------------------------\n\nTITLE: Setting Up Registry Configuration\nDESCRIPTION: Commands to create a directory for the registry files and copy the example configuration file to that location.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir /Users/Shared/Registry\n$ cp docs/content/recipes/osx/config.yml /Users/Shared/Registry/config.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TLS Certificates - console\nDESCRIPTION: Creates a directory named 'certs' for storing TLS certificate and key files required for running a secure Docker registry. Uses the '-p' flag to create parent directories as needed. This is the preparation step before copying certificate files into place for use with Docker volume mounting.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/about/deploying.md#_snippet_9\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p certs\n```\n\n----------------------------------------\n\nTITLE: Omitting Read-Only Fields from Request Payloads in SDK Version 0.9.2\nDESCRIPTION: This code handles cloning of object graphs to omit fields marked with azure:\"ro\" (read-only) annotations during request payload creation. It ensures that only writable fields are included, maintaining payload integrity, and verifies that no fields were inadvertently dropped during cloning. Suitable for scenarios requiring modification or filtering of complex request objects.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/CHANGELOG.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nOmit read-only content from request payloads...\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Daemon Debug Mode (Shell)\nDESCRIPTION: The '-D' flag is used as a command-line argument to start the Docker daemon in debug mode. This provides more verbose logging, which is helpful for troubleshooting issues when reporting bugs.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n-D\n```\n\n----------------------------------------\n\nTITLE: Creating Registry Data Directory\nDESCRIPTION: Command to create the default directory for storing registry data, with a note about permission requirements.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p /var/lib/registry\n```\n\n----------------------------------------\n\nTITLE: Creating Required Directories via Console Shell\nDESCRIPTION: Creates the necessary directory structure ('auth' and 'data') for persistent storage and configuration files before setting up Nginx and Docker Registry. This prerequisite ensures proper volume mapping and credentials storage for subsequent setup stages. No additional dependencies beyond a Unix-like shell; outputs new directories or no error if they already exist.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/nginx.md#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ mkdir -p auth data\n```\n\n----------------------------------------\n\nTITLE: Running Registry with Development Config\nDESCRIPTION: Command to run the registry with a development configuration file, showing the expected output logs.\nSOURCE: https://github.com/distribution/distribution/blob/main/BUILDING.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./bin/registry serve cmd/registry/config-dev.yml\nINFO[0000] debug server listening :5001\nWARN[0000] No HTTP secret provided - generated random secret. This may cause problems with uploads if multiple registries are behind a load-balancer. To provide a shared secret, fill in http.secret in the configuration file or set the REGISTRY_HTTP_SECRET environment variable.  environment=development go.version=go1.18.3 instance.id=e837df62-a66c-4e04-a014-b063546e82e0 service=registry version=v2.7.0-1993-g8857a194\nINFO[0000] endpoint local-5003 disabled, skipping        environment=development go.version=go1.18.3 instance.id=e837df62-a66c-4e04-a014-b063546e82e0 service=registry version=v2.7.0-1993-g8857a194\nINFO[0000] endpoint local-8083 disabled, skipping        environment=development go.version=go1.18.3 instance.id=e837df62-a66c-4e04-a014-b063546e82e0 service=registry version=v2.7.0-1993-g8857a194\nINFO[0000] using inmemory blob descriptor cache          environment=development go.version=go1.18.3 instance.id=e837df62-a66c-4e04-a014-b063546e82e0 service=registry version=v2.7.0-1993-g8857a194\nINFO[0000] providing prometheus metrics on /metrics\nINFO[0000] listening on [::]:5000                        environment=development go.version=go1.18.3 instance.id=e837df62-a66c-4e04-a014-b063546e82e0 service=registry version=v2.7.0-1993-g8857a194\n```\n\n----------------------------------------\n\nTITLE: Unloading the Registry Service\nDESCRIPTION: Command to unload the registry service from launchd, which stops the service and prevents it from starting automatically.\nSOURCE: https://github.com/distribution/distribution/blob/main/docs/content/recipes/osx-setup-guide.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ launchctl unload ~/Library/LaunchAgents/com.docker.registry.plist\n```\n\n----------------------------------------\n\nTITLE: Symlinking and Copying Redis Server Files in Shell\nDESCRIPTION: Shows how to create a symbolic link to the redis-server binary and copy the redis.conf file to the test directory for local testing. Required to locally run go-redis tests. Inputs are local file paths; expected outcome is correct setup of test environment for the tests to locate redis-server and config files.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/README.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nln -s /usr/bin/redis-server ./go-redis/testdata/redis/src\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncp ./go-redis/testdata/redis.conf ./go-redis/testdata/redis/\n```\n\n----------------------------------------\n\nTITLE: Regenerating Protobuf Go Code and Formatting (Shell)\nDESCRIPTION: This shell script regenerates Go code from the `error.proto` file using the protobuf compiler (`protoc`) and then formats the generated code using `goimports`. It requires the `protoc` compiler, the Go protobuf plugin, the `goimports` tool, a local copy of the `googleapis` repository, and the `GOOGLEAPIS` environment variable pointing to the repository's path. The `module` option ensures output in the current directory.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/googleapis/gax-go/v2/apierror/internal/proto/README.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nprotoc -I $GOOGLEAPIS -I. --go_out=. --go_opt=module=github.com/googleapis/gax-go/v2/apierror/internal/proto error.proto\ngoimports -w .\n```\n\n----------------------------------------\n\nTITLE: Adding MaxEncodedSize to zstd Encoder\nDESCRIPTION: This snippet describes the addition of the MaxEncodedSize method to the zstd Encoder, allowing users to determine the maximum size of compressed data for a given input. This functionality depends on the 'github.com/klauspost/compress@v1.15.13/zstd' package and enhances pre-allocation control.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nAdd [MaxEncodedSize](https://pkg.go.dev/github.com/klauspost/compress@v1.15.13/zstd#Encoder.MaxEncodedSize) to encoder\n```\n\n----------------------------------------\n\nTITLE: Running Gorelease for API Change Validation\nDESCRIPTION: This command uses `gorelease` to validate that no unwanted changes have been made to the public API. It helps ensure backwards compatibility.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake gorelease\n```\n\n----------------------------------------\n\nTITLE: Considered Record struct with slice for attributes\nDESCRIPTION: An alternative design for the Record struct using a slice for attributes instead of a map. This approach would require bridges to use sync.Pool for allocation efficiency but was rejected due to potential memory safety issues.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_9\n\nLANGUAGE: go\nCODE:\n```\ntype Record struct {\n\tTimestamp         time.Time\n\tObservedTimestamp time.Time\n\tSeverity          Severity\n\tSeverityText      string\n\tBody              Value\n\tAttributes        []KeyValue\n```\n\n----------------------------------------\n\nTITLE: Correcting Status Code Check for Batch Requests in Go Code\nDESCRIPTION: This directive modifies `zz_service_client.go` to correct the expected HTTP status code for successful submit batch operations. It replaces the check for `http.StatusOK` (200) with a check for `http.StatusAccepted` (202).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/if\\s+!runtime\\.HasStatusCode\\(httpResp,\\s+http\\.StatusOK\\)\\s+\\{\\s+err\\s+=\\s+runtime\\.NewResponseError\\(httpResp\\)\\s+return ServiceClientSubmitBatchResponse\\{\\},\\s+err\\s+}/g, \n      `if !runtime.HasStatusCode(httpResp, http.StatusAccepted) {\\n\\t\\terr = runtime.NewResponseError(httpResp)\\n\\t\\treturn ServiceClientSubmitBatchResponse{}, err\\n\\t}`);\n```\n\n----------------------------------------\n\nTITLE: Opening File in Browser - OpenFile\nDESCRIPTION: This Go function `OpenFile` takes a file path as a string and attempts to open it in a new browser window. The specific browser used is client-dependent. It returns an error if the operation fails.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/pkg/browser/README.md#_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\nfunc OpenFile(path string) error\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Pre-commit Hooks Using Shell Script\nDESCRIPTION: This script sets up the pre-commit hook in a Git repository by linking the 'pre-commit' file provided in the project directory to the local repository's hooks directory, enabling validation before commits. It facilitates maintaining code quality by automating hook linking, and should be run whenever hooks need to be updated.\nSOURCE: https://github.com/distribution/distribution/blob/main/project/hooks/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbash\n./configure-hooks.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Pre-Release Branch\nDESCRIPTION: This command creates a pre-release branch for a specified module set with a new tag.  The branch will contain changes for the new release.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmake prerelease MODSET=<module set>\n```\n\n----------------------------------------\n\nTITLE: Correcting URL Encoding in Go Client Files\nDESCRIPTION: This directive modifies Go client files (`zz_service_client.go`, `zz_container_client.go`) to adjust URL query string encoding. It replaces the default `reqQP.Encode()` output, which encodes spaces as '+', with a version where '+' is explicitly replaced by '%20' to ensure compatibility with the Azure Storage service. Requires the `strings` package.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_service_client.go\n  - zz_container_client.go\n  where: $\n  transform: >-\n    return $.\n      replace(/req.Raw\\(\\).URL.RawQuery \\= reqQP.Encode\\(\\)/g, `req.Raw().URL.RawQuery = strings.Replace(reqQP.Encode(), \"+\", \"%20\", -1)`);\n```\n\n----------------------------------------\n\nTITLE: Updating Content-Type for Batch Requests in Go Code\nDESCRIPTION: This directive modifies Go client files (`zz_container_client.go`, `zz_service_client.go`) handling batch requests. It changes the `Content-Type` set in the request body from a hardcoded \"application/xml\" to the value of a `multipartContentType` variable, allowing for dynamically generated multipart content types.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_service_client.go\n  where: $\n  transform: >-\n    return $.\n      replace (/req.SetBody\\(body\\,\\s+\\\"application\\/xml\\\"\\)/g, `req.SetBody(body, multipartContentType)`);\n```\n\n----------------------------------------\n\nTITLE: Adding Properties to BlobPropertiesInternal Definition\nDESCRIPTION: This YAML directive adds 'Owner', 'Group', 'Permissions', 'Acl', and 'ResourceType' properties to the 'BlobPropertiesInternal' definition within the swagger document. Each property is defined as a string type.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:  \n- from: swagger-document    \n  where: $.definitions\n  transform: >\n    $.BlobPropertiesInternal.properties[\"Owner\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Group\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Permissions\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"Acl\"] = {\n      \"type\" : \"string\",\n    };\n    $.BlobPropertiesInternal.properties[\"ResourceType\"] = {\n      \"type\" : \"string\",\n    };\n```\n\n----------------------------------------\n\nTITLE: Standard Git Workflow for Contributions (Shell)\nDESCRIPTION: Demonstrates the typical Git workflow for contributing changes: create a new feature branch, make code edits, update the `CHANGELOG.md`, run pre-commit checks (`make precommit`), stage changes interactively (`git add -p`), commit the changes, and push the branch to your fork. Placeholders `<YOUR_BRANCH_NAME>` and `<YOUR_FORK>` must be replaced with your specific branch name and remote fork name respectively.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b <YOUR_BRANCH_NAME>\n# edit files\n# update changelog\nmake precommit\ngit add -p\ngit commit\ngit push <YOUR_FORK> <YOUR_BRANCH_NAME>\n```\n\n----------------------------------------\n\nTITLE: Undoing Breaking Change with BlobName\nDESCRIPTION: This YAML directive fixes a potential breaking change related to the 'BlobName' type in the generated Go code. It replaces 'Name *BlobName' with 'Name *string' in the 'zz_models.go' file, reverting the type of the 'Name' field to a string pointer.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >-\n    return $.\n      replace(/Name\\s+\\*BlobName/g, `Name *string`);\n```\n\n----------------------------------------\n\nTITLE: Using Logrus as an io.Writer in Go\nDESCRIPTION: Demonstrates how to use Logrus as an io.Writer to integrate with standard library logging. This allows redirecting standard library log output to Logrus for consistent formatting and processing.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/sirupsen/logrus/README.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nw := logger.Writer()\ndefer w.Close()\n\nsrv := http.Server{\n    // create a stdlib log.Logger that writes to\n    // logrus.Logger.\n    ErrorLog: log.New(w, \"\", 0),\n}\n```\n\nLANGUAGE: go\nCODE:\n```\nlogger := logrus.New()\nlogger.Formatter = &logrus.JSONFormatter{}\n\n// Use logrus for standard log output\n// Note that `log` here references stdlib's log\n// Not logrus imported under the name `log`.\nlog.SetOutput(logger.Writer())\n```\n\n----------------------------------------\n\nTITLE: Disable Exemplars Export in OpenTelemetry Go Metric SDK\nDESCRIPTION: This snippet shows disabling the export of exemplars by unsetting the `OTEL_GO_X_EXEMPLAR` variable. It effectively turns off the feature.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/internal/x/README.md#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nunset OTEL_GO_X_EXEMPLAR\n```\n\n----------------------------------------\n\nTITLE: Using MouseTrap's StartedByExplorer function in Go\nDESCRIPTION: The core API of the mousetrap library consisting of a single function that returns a boolean indicating whether the process was launched by Windows Explorer. This allows developers to implement special behavior for users who double-click executables.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/inconshreveable/mousetrap/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nfunc StartedByExplorer() (bool)\n```\n\n----------------------------------------\n\nTITLE: Importing jwt-go v4 in Go\nDESCRIPTION: Shows the import path for using `jwt-go` version 4.0.0 and above.  This is a breaking change compared to earlier versions.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/golang-jwt/jwt/v5/MIGRATION_GUIDE.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n\"github.com/golang-jwt/jwt/v4\"\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Constant Type Names\nDESCRIPTION: This YAML directive modifies various parameters and definitions in the swagger document to clean up and standardize constant type names.  It adjusts the 'x-ms-enum' and 'x-ms-client-name' properties to remove stuttering (e.g., BlobDeleteType becomes DeleteType). It also corrects the ImmutabilityPolicyMode settings to use appropriate enum values.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters['BlobDeleteType']\n  transform: >\n    $[\"x-ms-enum\"].name = \"DeleteType\";\n    $[\"x-ms-client-name\"] = \"DeleteType\";\n\n- from: swagger-document\n  where: $.parameters['BlobExpiryOptions']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ExpiryOptions\";\n    $[\"x-ms-client-name\"].name = \"ExpiryOptions\";\n\n- from: swagger-document\n  where: $['x-ms-paths'][*].*.responses[*].headers[\"x-ms-immutability-policy-mode\"]\n  transform: >\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicyMode\";\n    $.enum = [ \"Mutable\", \"Unlocked\", \"Locked\"];\n    $[\"x-ms-enum\"] = { \"name\": \"ImmutabilityPolicyMode\", \"modelAsString\": false };\n\n- from: swagger-document\n  where: $.parameters['ImmutabilityPolicyMode']\n  transform: >\n    $[\"x-ms-enum\"].name = \"ImmutabilityPolicySetting\";\n    $[\"x-ms-client-name\"].name = \"ImmutabilityPolicySetting\";\n\n- from: swagger-document\n  where: $.definitions['BlobPropertiesInternal']\n  transform: >\n    $.properties.ImmutabilityPolicyMode[\"x-ms-enum\"].name = \"ImmutabilityPolicyMode\";\n```\n\n----------------------------------------\n\nTITLE: Removing Container and Blob Names from Path\nDESCRIPTION: This YAML directive modifies the 'x-ms-paths' section of the swagger document to remove container and blob names from the request paths. This is likely done because the generated code uses direct URIs, making these path parameters redundant.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"]\n  transform: >\n    for (const property in $)\n    {\n        if (property.includes('/{containerName}/{blob}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\") && false == param['$ref'].endsWith(\"#/parameters/Blob\"))});\n        } \n        else if (property.includes('/{containerName}'))\n        {\n            $[property][\"parameters\"] = $[property][\"parameters\"].filter(function(param) { return (typeof param['$ref'] === \"undefined\") || (false == param['$ref'].endsWith(\"#/parameters/ContainerName\"))});\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Signing a Git Commit Automatically (Shell)\nDESCRIPTION: The 'git commit -s' command automatically adds the 'Signed-off-by' line to the commit message, using the name and email configured in Git ('user.name' and 'user.email'). This fulfills the DCO requirement.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Automatically Signing Git Commits\nDESCRIPTION: This command uses the Git CLI to create a commit while automatically adding a 'Signed-off-by' line based on the configured Git user name and email. This fulfills the Developer Certificate of Origin requirement mentioned in the contribution guidelines.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/docker/go-metrics/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit commit -s\n```\n\n----------------------------------------\n\nTITLE: Specifying Codespell Package Version in Requirements File\nDESCRIPTION: Defines a dependency on Codespell version 2.3.0. This line would be included in a requirements file for Python projects to ensure the exact version of Codespell is installed when setting up the development or CI environment.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncodespell==2.3.0\n```\n\n----------------------------------------\n\nTITLE: Fetching opentelemetry-go Source with Go Get (Shell)\nDESCRIPTION: Uses the `go get` command with the `-d` flag to download the source code for the `go.opentelemetry.io/otel` module into the `$GOPATH`. This command leverages Go's module system to fetch dependencies and is presented as an alternative method for obtaining the source code specifically in the context of preparing for pull requests.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngo get -d go.opentelemetry.io/otel\n```\n\n----------------------------------------\n\nTITLE: Making Swagger Parameter Required (LeaseDuration)\nDESCRIPTION: This directive modifies the Swagger document definition for the `LeaseDuration` parameter. It sets the `required` property of this parameter to `true`, enforcing its presence in relevant requests.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.parameters.LeaseDuration\n  transform: >\n    $.required = true;\n```\n\n----------------------------------------\n\nTITLE: Running Project Tests via Makefile\nDESCRIPTION: Executes the test suite defined in the project's Makefile using the `make test` command. Contributors should run this command to ensure all tests pass successfully before committing and pushing their changes as part of the contribution process.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: Makefile\nCODE:\n```\nmake test         # Make sure all the tests pass before you commit and push :)\n```\n\n----------------------------------------\n\nTITLE: Implementing various zstd, gzip, flate, s2, and zip improvements\nDESCRIPTION: Multiple snippets describe configuration tweaks, performance improvements, bug fixes, and new features across various compression algorithms such as zstd, gzip, flate, s2, and zip. These involve assembly optimizations, memory management, decoding enhancements, and better compression ratios, contributed by multiple pull requests.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/klauspost/compress/README.md#_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Listing Azure Developer CLI configuration\nDESCRIPTION: This Azure Developer CLI command lists the current configuration settings, including the account currently logged in.  It is used to verify the correct account is being used by the Azure Developer CLI.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azidentity/TROUBLESHOOTING.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nazd config list\n```\n\n----------------------------------------\n\nTITLE: Merging the Pre-Release Branch\nDESCRIPTION: This command merges the pre-release branch into the current branch. This is done after verifying that the changes look correct.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_4\n\nLANGUAGE: go\nCODE:\n```\ngit merge prerelease_<module set>_<new tag>\n```\n\n----------------------------------------\n\nTITLE: Benchmark Commands for xxhash in Go\nDESCRIPTION: Commands for benchmarking the pure Go and assembly implementations of xxhash's Sum64 function using Go's testing package with benchstat to analyze the results.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/cespare/xxhash/v2/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbenchstat <(go test -tags purego -benchtime 500ms -count 15 -bench 'Sum64$')\nbenchstat <(go test -benchtime 500ms -count 15 -bench 'Sum64$')\n```\n\n----------------------------------------\n\nTITLE: Correcting XML Tag for CORS Rules in Go Code\nDESCRIPTION: This directive modifies Go source files (`source-file-go`) to correct an XML struct tag associated with CORS rules. It changes the tag `xml:\"CORS>CORSRule\"` to `xml:\"Cors>CorsRule\"` to match the expected XML structure.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: source-file-go\n    where: $\n    transform: >-\n      return $.\n        replace(/xml:\"CORS>CORSRule\"/g, \"xml:\\\"Cors>CorsRule\\\"\");\n```\n\n----------------------------------------\n\nTITLE: Correcting Casing in Go Model Fields\nDESCRIPTION: This directive fixes the casing of specific fields (`SignedOid`, `SignedTid`) within the `zz_models.go` file by replacing them with their all-caps acronym versions (`SignedOID`, `SignedTID`).\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: zz_models.go\n  where: $\n  transform: >-\n    return $.\n      replace(/SignedOid\\s+\\*string/g, `SignedOID *string`).\n      replace(/SignedTid\\s+\\*string/g, `SignedTID *string`);\n```\n\n----------------------------------------\n\nTITLE: Removing Pager Methods and Exporting Container Client Methods\nDESCRIPTION: This YAML directive removes pager methods and exports several generated methods in the container client. It replaces the existing method signatures, effectively renaming the internal functions to be publicly accessible.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_container_client.go\n    where: $\n    transform: >-\n      return $.\n        replace(/func \\(client \\*ContainerClient\\) NewListBlobFlatSegmentPager\\(.+\\// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request/s, `//\\n// listBlobFlatSegmentCreateRequest creates the ListBlobFlatSegment request`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentCreateRequest\\(/, `(client *ContainerClient) ListBlobFlatSegmentCreateRequest(`).\n        replace(/\\(client \\*ContainerClient\\) listBlobFlatSegmentHandleResponse\\(/, `(client *ContainerClient) ListBlobFlatSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Considered LoggerProvider.Logger with config struct\nDESCRIPTION: An alternative design for LoggerProvider.Logger using a config struct parameter. This approach was rejected to maintain consistency with the Trace and Metrics APIs.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/log/DESIGN.md#_snippet_8\n\nLANGUAGE: go\nCODE:\n```\ntype LoggerProvider interface{\n\tembedded.LoggerProvider\n\tLogger(name string, config LoggerConfig)\n}\n```\n\n----------------------------------------\n\nTITLE: Importing gRPC-Go Library (Go)\nDESCRIPTION: This Go import statement is required to use the gRPC library. With Go module support, adding this import to your code will automatically fetch the necessary dependencies when you run standard Go commands like `go build`, `go run`, or `go test`.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/google.golang.org/grpc/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"google.golang.org/grpc\"\n```\n\n----------------------------------------\n\nTITLE: Removing DataLakeStorageError Definition\nDESCRIPTION: This YAML directive removes the 'DataLakeStorageError' definition from the swagger document, indicating that DataLake-specific error handling is not needed.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.DataLakeStorageError;\n```\n\n----------------------------------------\n\nTITLE: Updating Test Fixtures - Bash\nDESCRIPTION: This Bash code shows the steps to update the test fixtures of the procfs library. First, it removes the `testdata/fixtures` directory. Then, it executes `make test` to extract the new fixtures from the ttar archive. After making changes to the extracted files, `make update_fixtures` is run to create a new fixtures.ttar file. Finally, `git diff testdata/fixtures.ttar` is used to verify the changes. It relies on the `make` utility and the presence of a ttar archive.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/prometheus/procfs/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf testdata/fixtures\nmake test\n```\n\n----------------------------------------\n\nTITLE: Example Git Commit Sign-off Line (Text)\nDESCRIPTION: An example of the 'Signed-off-by' line that must be added to Git commit messages to certify the contribution under the DCO. Replace 'Joe Smith' and the email address with your real name and email.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/distribution/reference/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSigned-off-by: Joe Smith <joe.smith@email.com>\n```\n\n----------------------------------------\n\nTITLE: Defining Stdout Variable\nDESCRIPTION: This code defines a variable named `Stdout` of type `io.Writer` and initializes it with `os.Stdout`. It's used as the standard output writer for executed commands within the browser package.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/pkg/browser/README.md#_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\nvar Stdout io.Writer = os.Stdout\n```\n\n----------------------------------------\n\nTITLE: Installing Google Cloud Compute Metadata\nDESCRIPTION: This command installs the Google Cloud Compute Metadata Go library using the `go get` command. This allows developers to use the library in their Go projects for interacting with the Google Cloud metadata service.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/cloud.google.com/go/compute/metadata/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ngo get cloud.google.com/go/compute/metadata\n```\n\n----------------------------------------\n\nTITLE: Installing azcore Go module using go get\nDESCRIPTION: This code snippet demonstrates the command to add the latest version of the azcore module to your Go project by modifying the go.mod file. It simplifies dependency management for Azure SDK clients in Go projects.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/azcore/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngo get github.com/Azure/azure-sdk-for-go/sdk/azcore\n```\n\n----------------------------------------\n\nTITLE: Formatting Time Headers to GMT in Go Code\nDESCRIPTION: This directive modifies various Go client files to ensure proper formatting of time-based conditional HTTP headers. It replaces the direct formatting of time values for headers like `If-Modified-Since`, `If-Unmodified-Since`, and source/immutability policy equivalents, ensuring they are first converted to the GMT time zone (`.In(gmt)`) before being formatted using `time.RFC1123`. This requires a `gmt` variable of type `*time.Location` to be available in the scope where this code runs.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: \n  - zz_container_client.go\n  - zz_blob_client.go\n  - zz_appendblob_client.go\n  - zz_blockblob_client.go\n  - zz_pageblob_client.go\n  where: $\n  transform: >-\n    return $.\n      replace (/req\\.Raw\\(\\)\\.Header\\[\\\"If-Modified-Since\\\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Modified-Since\"] = []string{(*modifiedAccessConditions.IfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\\\"If-Unmodified-Since\\\"\\]\\s+=\\s+\\[\\]string\\{modifiedAccessConditions\\.IfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"If-Unmodified-Since\"] = []string{(*modifiedAccessConditions.IfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\\\"x-ms-source-if-modified-since\\\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfModifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-modified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfModifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\\\"x-ms-source-if-unmodified-since\\\"\\]\\s+=\\s+\\[\\]string\\{sourceModifiedAccessConditions\\.SourceIfUnmodifiedSince\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-source-if-unmodified-since\"] = []string{(*sourceModifiedAccessConditions.SourceIfUnmodifiedSince).In(gmt).Format(time.RFC1123)}`).\n      replace (/req\\.Raw\\(\\)\\.Header\\[\\\"x-ms-immutability-policy-until-date\\\"\\]\\s+=\\s+\\[\\]string\\{options\\.ImmutabilityPolicyExpiry\\.Format\\(time\\.RFC1123\\)\\}/g, \n      `req.Raw().Header[\"x-ms-immutability-policy-until-date\"] = []string{(*options.ImmutabilityPolicyExpiry).In(gmt).Format(time.RFC1123)}`);\n```\n\n----------------------------------------\n\nTITLE: Building SysUnix Files with Old Build System\nDESCRIPTION: The old build system uses C header files on the local system to generate Go files. It requires GOOS and GOARCH to be set correctly and `mkall.sh` to be run. This system's output can vary based on the system's headers.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/golang.org/x/sys/unix/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkall.sh\n```\n\n----------------------------------------\n\nTITLE: Fixing 304 Response\nDESCRIPTION: This YAML directive adds a definition for the 304 response code to the 'x-ms-paths' section of the swagger document for retrieving a blob. It specifies the description, response name, and headers for the 'ConditionNotMetError' scenario.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $[\"x-ms-paths\"][\"/{containerName}/{blob}\"]\n  transform: >\n    $.get.responses[\"304\"] = {\n      \"description\": \"The condition specified using HTTP conditional header(s) is not met.\",\n      \"x-az-response-name\": \"ConditionNotMetError\",\n      \"headers\": { \"x-ms-error-code\": { \"x-ms-client-name\": \"ErrorCode\", \"type\": \"string\" } }\n    };\n```\n\n----------------------------------------\n\nTITLE: Fixing GeoReplication Status Enum\nDESCRIPTION: This YAML directive corrects the 'x-ms-enum' setting for the 'Status' property within the 'GeoReplication' definition. It ensures that the 'BlobGeoReplicationStatus' enum is correctly used and modelAsString is false.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.definitions\n  transform: >\n    delete $.GeoReplication.properties.Status[\"x-ms-enum\"];\n    $.GeoReplication.properties.Status[\"x-ms-enum\"] = {\n        \"name\": \"BlobGeoReplicationStatus\",\n        \"modelAsString\": false\n    };\n```\n\n----------------------------------------\n\nTITLE: Defining Stderr Variable\nDESCRIPTION: This code defines a variable named `Stderr` of type `io.Writer` and initializes it with `os.Stderr`. It's used as the standard error writer for executed commands within the browser package.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/pkg/browser/README.md#_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nvar Stderr io.Writer = os.Stderr\n```\n\n----------------------------------------\n\nTITLE: Removing Pager Methods and Exporting Service Client Methods\nDESCRIPTION: This YAML directive removes pager methods and exports several generated methods in the service client. Similar to the container client modification, it aims to make specific methods publicly accessible by renaming them.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n  - from: zz_service_client.go\n    where: $\n    transform: >-\n      return $.\n        replace(/func \\(client \\*ServiceClient\\) NewListContainersSegmentPager\\(.+\\// listContainersSegmentCreateRequest creates the ListContainersSegment request/s, `//\\n// listContainersSegmentCreateRequest creates the ListContainersSegment request`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentCreateRequest\\(/, `(client *ServiceClient) ListContainersSegmentCreateRequest(`).\n        replace(/\\(client \\*ServiceClient\\) listContainersSegmentHandleResponse\\(/, `(client *ServiceClient) ListContainersSegmentHandleResponse(`);\n```\n\n----------------------------------------\n\nTITLE: Updating Swagger Header Client Name (x-ms-content-crc64)\nDESCRIPTION: This directive modifies the Swagger document by targeting the `x-ms-content-crc64` header definition within responses and setting its `x-ms-client-name` property to \"ContentCRC64\". This standardizes the client-side name generation for this header.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/Azure/azure-sdk-for-go/sdk/storage/azblob/internal/generated/autorest.md#_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ndirective:\n- from: swagger-document\n  where: $.x-ms-paths.*.*.responses.*.headers.x-ms-content-crc64\n  transform: >\n    $[\"x-ms-client-name\"] = \"ContentCRC64\"\n```\n\n----------------------------------------\n\nTITLE: Initiating Release Process using Shell Script\nDESCRIPTION: Executes the `release.sh` script to prepare a new version release. Sets the `TAG` environment variable to specify the desired version (e.g., `v1.0.0`). This script updates `go.mod` files and pushes a new branch to the repository.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/github.com/redis/go-redis/v9/RELEASING.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nTAG=v1.0.0 ./scripts/release.sh\n```\n\n----------------------------------------\n\nTITLE: Metric SDK Documentation Badge in Markdown\nDESCRIPTION: A Markdown badge that links to the Go package documentation for the OpenTelemetry Metric SDK on pkg.go.dev.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/sdk/metric/README.md#_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[![PkgGoDev](https://pkg.go.dev/badge/go.opentelemetry.io/otel/sdk/metric)](https://pkg.go.dev/go.opentelemetry.io/otel/sdk/metric)\n```\n\n----------------------------------------\n\nTITLE: Adding Tags for a Module Set\nDESCRIPTION: This command adds tags for a specified module set, using the commit hash of the merged Pull Request. It should be run for each module set to be released.\nSOURCE: https://github.com/distribution/distribution/blob/main/vendor/go.opentelemetry.io/otel/RELEASING.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmake add-tags MODSET=<module set> COMMIT=<commit hash>\n```"
  }
]