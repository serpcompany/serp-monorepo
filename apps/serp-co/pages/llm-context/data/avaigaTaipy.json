[
  {
    "owner": "avaiga",
    "repo": "taipy",
    "content": "TITLE: Installing Taipy Using pip - Bash\nDESCRIPTION: This bash code snippet demonstrates how to install the latest stable release of the Taipy Python library using the pip package manager. It requires Python (compatible versions: 3.9, 3.10, 3.11, or 3.12) and pip already installed on the system. Executing this command downloads and installs Taipy and its dependencies, allowing you to start building data and AI-driven web applications in Python. The only input required is execution in a terminal or command prompt, and the expected output is a successful installation of the Taipy package.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install taipy\n```\n\n----------------------------------------\n\nTITLE: Clone Taipy Repository - Git - Bash\nDESCRIPTION: This command clones the entire Taipy project repository from GitHub. This is the first step required to install and work with the development version of Taipy GUI.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy via pip in Bash\nDESCRIPTION: Command to install the stable release of Taipy using pip package manager. This is the simplest installation method for most users.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/package_desc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy\n```\n\n----------------------------------------\n\nTITLE: Importing Taipy GUI Modules in Python\nDESCRIPTION: Imports core modules Gui and Markdown from the taipy.gui package needed to create and manage GUI pages and components. This is a prerequisite for setting up any GUI interface using the Taipy library.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom taipy.gui import Gui, Markdown\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy Templates Package via pip - Bash\nDESCRIPTION: This snippet shows how to install the latest stable version of the taipy-templates package using pip, the Python package installer. It requires a working Python environment with pip configured. The command downloads and installs the package and its dependencies to allow using Taipy templates in Python projects.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/package_desc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-templates\n```\n\n----------------------------------------\n\nTITLE: Install Latest Taipy GUI Release - Pip - Bash\nDESCRIPTION: This command installs the most recent stable version of the Taipy GUI library from the Python Package Index (PyPI) using the pip package installer. It is the simplest method for end-users.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-gui\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy GUI (Latest Release)\nDESCRIPTION: This command installs the latest released version of Taipy GUI using pip, the Python package installer. This is the easiest way to get started with Taipy GUI.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-gui\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy REST Stable Version via pip - Bash\nDESCRIPTION: Installs the latest stable version of the taipy-rest Python package using pip. Prerequisites: A working Python environment and pip installed. This command will fetch taipy-rest from the Python Package Index and install it along with its dependencies. No parameters are needed; output is installation confirmation or error messages.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-rest\n```\n\n----------------------------------------\n\nTITLE: Creating Taipy Application Using Command Line - Bash\nDESCRIPTION: This snippet demonstrates how to create a new Taipy application using the 'taipy create' command in the terminal. It includes the basic usage and an example with an optional application name parameter. These commands assume that Taipy (version > 2.2) is installed and that the user has terminal access to run bash commands.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/package_desc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ntaipy create\n```\n\nLANGUAGE: bash\nCODE:\n```\ntaipy create --application \"default\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Markdown Page with Dynamic Content Using Taipy GUI in Python\nDESCRIPTION: Defines a Markdown page containing a header and dynamic content bound to a Python variable `a`. The dynamic content is injected using Taipy's placeholder syntax `<|{a}|>`, allowing the displayed page to reflect the current value of `a` in the GUI state.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\na = 10\npage = Markdown(\"# Hello\\n<|{a}|>\")\n```\n\n----------------------------------------\n\nTITLE: Importing Taipy GUI Module in Python\nDESCRIPTION: This code imports the Gui class from the taipy.gui package, which is the foundation for creating interactive web-based applications with Taipy.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/default/{{cookiecutter.__root_folder}}/sections/import.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom taipy.gui import Gui\n```\n\n----------------------------------------\n\nTITLE: Initializing Taipy GUI and Adding a Markdown Page in Python\nDESCRIPTION: Creates an instance of the Gui class and adds the previously defined Markdown page under the name \"page1\". This snippet sets up the GUI structure and associates pages with the GUI controller.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ngui = Gui()\ngui.add_page(\"page1\", page)\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy-Core Stable Version with Bash\nDESCRIPTION: Installs the latest stable version of the Taipy-Core Python package using the pip package manager. This requires pip to be pre-installed and available on the system. The command downloads and installs all necessary dependencies for Taipy-Core to function properly.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/INSTALLATION.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-core\n```\n\n----------------------------------------\n\nTITLE: Modifying a State Variable in Taipy GUI Using Python\nDESCRIPTION: Updates the value of the state variable `a` in the GUI's state to 20. This modifies the dynamic data linked to the GUI, which can trigger UI updates where `a` is referenced.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ngui.state.a = 20\n```\n\n----------------------------------------\n\nTITLE: Creating a Button with Action Binding in Taipy Markdown\nDESCRIPTION: Defines a button element using Taipy's Markdown syntax. Clicking this button triggers the Python function named 'reset', as specified by the 'on_action' property. This allows linking UI interactions to backend logic. The button is assigned the ID 'btn_reset'.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/e2e/page_scopes/assets2_class_scopes/page1.md#_snippet_2\n\nLANGUAGE: Taipy Markdown\nCODE:\n```\n<|button|on_action=reset|id=btn_reset|>\n```\n\n----------------------------------------\n\nTITLE: Initializing Operand Sliders and Multiplication Output in Taipy Page Definition\nDESCRIPTION: Defines a Taipy page named 'Page2 - Multiply' with two slider components for operand inputs bound to variables 'operand_1' and 'operand_2'. Each slider is assigned a unique ID ('s1' and 's2'). The page dynamically computes and displays the multiplication of these two operands in an output field with ID 'v1'. There are no explicit dependencies beyond Taipy's page templating system. Inputs are numeric values controlled via sliders; output is the real-time product shown as a text field.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/e2e/page_scopes/assets2_class_scopes/page2.md#_snippet_0\n\nLANGUAGE: Taipy Page Definition\nCODE:\n```\n# Page2 - Multiply\n\nOperand 1: <|{operand_1}|slider|id=s1|>\n\nOperand 2: <|{operand_2}|slider|id=s2|>\n\nOperand 1 * Operand 2 = <|{operand_1 * operand_2}|id=v1|>\n```\n\n----------------------------------------\n\nTITLE: Displaying Dynamic Calculation Results in Taipy Markdown\nDESCRIPTION: Uses Taipy's Markdown syntax to display the dynamic sum of two variables ('operand_1' and 'operand_2'). The expression 'operand_1 + operand_2' is evaluated in the Python backend and its result is displayed in the UI. The element is assigned the ID 'v1' for potential referencing.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/e2e/page_scopes/assets2_class_scopes/page1.md#_snippet_1\n\nLANGUAGE: Taipy Markdown\nCODE:\n```\n<|{operand_1 + operand_2}|id=v1|>\n```\n\n----------------------------------------\n\nTITLE: Creating Input Sliders with Taipy Markdown\nDESCRIPTION: Defines two interactive slider controls using Taipy's Markdown syntax. The sliders' values are bound to the Python variables 'operand_1' and 'operand_2' respectively. The controls are assigned IDs 's1' and 's2'. These controls allow users to visually select numeric values.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/e2e/page_scopes/assets2_class_scopes/page1.md#_snippet_0\n\nLANGUAGE: Taipy Markdown\nCODE:\n```\n<|{operand_1}|slider|id=s1|>\n```\n\nLANGUAGE: Taipy Markdown\nCODE:\n```\n<|{operand_2}|slider|id=s2|>\n```\n\n----------------------------------------\n\nTITLE: Checking Script Execution Entry Point in Python\nDESCRIPTION: This snippet checks whether the Python file is being run as the main program by evaluating if __name__ equals \"__main__\". The typical use case for this snippet is to enclose execution code that should only run when the script is executed directly and not when it is imported as a module. It has no dependencies and no parameters. The code inside this block can include any executable statements intended for main context. This pattern helps organize scripts and manage execution flow.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/default/{{cookiecutter.__root_folder}}/sections/main.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy Core via pip\nDESCRIPTION: Installs the latest stable version of the Taipy Core package using the pip package installer. This is the standard method for installing released versions.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/package_desc.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\npip install taipy-core\n```\n\n----------------------------------------\n\nTITLE: Reloading the Taipy GUI Interface in Python\nDESCRIPTION: Refreshes or reloads the current GUI interface to reflect any changes in the application state or page definitions without fully restarting the application.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ngui.reload()\n```\n\n----------------------------------------\n\nTITLE: Accessing a State Variable in Taipy GUI Using Python\nDESCRIPTION: Retrieves the current value of the state variable `a` from the GUI's state dictionary. This allows reading dynamic data bound to the GUI components.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ngui.state.a\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy Repository for Development\nDESCRIPTION: Command to clone the Taipy GitHub repository to get access to the source code for development or contribution purposes.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy REST Development Version from GitHub via pip - Bash\nDESCRIPTION: Installs the latest development version of the taipy-rest package directly from the GitHub repository by specifying the taipy repository URL with pip. Prerequisites: git and pip must be available on your system. The command fetches code from the provided repository and installs all dependencies. Input: A valid internet connection; output: installation progress and confirmation.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy Source Code from GitHub\nDESCRIPTION: Command to clone the entire Taipy repository from GitHub, providing access to the source code including taipy-common which is located in the 'taipy/common' directory.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/package_desc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Building Taipy GUI Front-End with npm - Bash\nDESCRIPTION: This Bash snippet demonstrates the procedure for setting up and building the Taipy GUI front-end from source. It assumes that Node.js (v18 or above) and npm are pre-installed. The commands first install required DOM dependencies, followed by the main web application dependencies, and finally trigger the build process. Key parameters include the working directory for each operation. Outputs include a compiled web front-end bundle in the designated output directory. The build process must be run from the front-end source directory and has a prerequisite of successful dependency installation.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/frontend/taipy-gui/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Current directory is the directory where this README file is located:\n#   [taipy-dir]/frontend/taipy-gui\n#\n# Install the DOM dependencies (once and for all)\ncd dom\nnpm i\ncd ..\n# Install the web app dependencies\nnpm i\n# Build the web app and all elements\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Taipy JavaScript Bundles with npm\nDESCRIPTION: Commands to build the Taipy GUI and Taipy front-end JavaScript bundles from the repository root directory. This process creates the required webapp directories for the Taipy applications.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Build the Taipy GUI bundle\ncd frontend/taipy-gui\ncd dom\nnpm i\ncd ..\nnpm i\nnpm run build\n#\n# Build the Taipy front-end bundle\ncd ../taipy # Current directory is [taipy-dir]/frontend/taipy\nnpm i\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Install Taipy GUI DOM Dependencies - npm - Bash\nDESCRIPTION: These commands navigate into the 'gui/dom' directory within the cloned Taipy repository and install the required Node.js dependencies listed in the package.json file for the DOM component. This is necessary before building the frontend bundle.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd gui\ncd dom\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing and Running with Gunicorn - Bash\nDESCRIPTION: Installs the Gunicorn WSGI HTTP server via pip, then runs the Taipy REST API using a standard Gunicorn entrypoint referencing a wsgi application object. Prerequisites: gunicorn and the API's Python dependencies must be installed in the environment. The application object 'myapi.wsgi:app' must be available. The API by default runs on port 8000, outputting access logs.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install gunicorn\n\ngunicorn myapi.wsgi:app\n```\n\n----------------------------------------\n\nTITLE: Stopping the Taipy GUI Application in Python\nDESCRIPTION: Stops the running Taipy GUI event loop and shuts down the server. This is used to gracefully terminate the GUI application when it is no longer needed.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ngui.stop()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Environment for Taipy\nDESCRIPTION: Commands to install Pipenv and the required development packages for running Taipy tests. This creates a virtual environment with all necessary dependencies.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\npipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Running the Taipy REST API with Docker Compose - Bash\nDESCRIPTION: Starts the Taipy REST API and associated services using Docker Compose. Prerequisites: Docker and docker-compose must be installed. This command reads the docker-compose.yml file to start containers as defined, mapping volumes as needed for configuration files. Output: Docker containers running the API stack.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose up\n```\n\n----------------------------------------\n\nTITLE: Install Pipenv and Dev Dependencies - Pipenv - Bash\nDESCRIPTION: These commands first install Pipenv globally using pip, and then use Pipenv to create a virtual environment and install all development dependencies specified in the project's Pipfile ('--dev' flag). This sets up the environment required for running tests.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\npipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Running the Taipy REST API with Flask - Bash\nDESCRIPTION: Launches the Taipy REST API locally using the Flask server. Prerequisites: Flask and its dependencies must be installed, typically via pipenv or pip. The command starts a development web server on a default port, exposing Taipy REST endpoints. Output: Console logs showing the running server.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nflask run\n```\n\n----------------------------------------\n\nTITLE: Installing Development Dependencies and Running Taipy Common Tests Using pipenv and pytest Bash\nDESCRIPTION: Installs pipenv for Python dependency and virtual environment management, then sets up a development environment with all dev dependencies from the Pipfile using 'pipenv install --dev'. Finally, it runs the taipy-common test suite located in 'tests/common' using pytest through the pipenv-managed environment. Required dependencies are pip, pipenv, and pytest. This setup isolates test runs and ensures consistent environment replication.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/INSTALLATION.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\n```\n\nLANGUAGE: bash\nCODE:\n```\npipenv install --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest tests/common\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy Common with pip\nDESCRIPTION: Command to install the stable version of taipy-common package using pip. This provides the configuration functionality needed for Taipy applications.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/package_desc.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-common\n```\n\n----------------------------------------\n\nTITLE: Installing Stable Version of Taipy Common Using pip Bash\nDESCRIPTION: Executes a pip command to install the latest stable release of the taipy-common Python package. It requires pip installed in the Python environment and installs the pre-built package from PyPI or the default package index. No parameters are needed as the package name is predefined. The output is the installation of taipy-common ready for use in Python projects.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/INSTALLATION.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install taipy-common\n```\n\n----------------------------------------\n\nTITLE: Running Taipy GUI Without Opening Browser in Python\nDESCRIPTION: Starts the Taipy GUI event loop without automatically launching a web browser, controlled by the parameter `run_browser=False`. This allows for manual browser connection or running in headless mode.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/tests/gui/notebook/simple_gui.ipynb#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ngui.run(run_browser=False)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running with uWSGI - Bash\nDESCRIPTION: Installs the uWSGI server via pip and runs the Taipy REST API with it, binding to 127.0.0.1:5000 and serving the 'myapi.wsgi:app' Python application. Prerequisites: uwsgi installed; 'myapi.wsgi:app' must be a valid import. Output: uwsgi server running locally, serving the application.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip install uwsgi\nuwsgi --http 127.0.0.1:5000 --module myapi.wsgi:app\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy Source Code from GitHub Using git Bash\nDESCRIPTION: Clones the entire Taipy repository from GitHub to the local machine, including the taipy-common source code located in the 'taipy/config' directory. This requires git installed on the system and internet access. The output is a local 'taipy' directory containing all the source files, suitable for inspection, modification, or contribution to the project.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/INSTALLATION.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy Repository\nDESCRIPTION: This command clones the Taipy repository from GitHub.  This is the first step in setting up the development version of Taipy GUI.  It creates a local copy of the source code.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Cloning the Taipy Source Code from GitHub - Bash\nDESCRIPTION: Clones the entire Taipy source code into a local directory using git. Prerequisites: git installed and internet access. The output is a 'taipy' directory containing the source code for all Taipy packages, including taipy-rest under 'taipy/rest'. No parameters are required.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy-Core Source Code from GitHub with Bash\nDESCRIPTION: Clones the entire Taipy GitHub repository to the local file system using git. This requires git to be installed. The cloned directory contains all source files including Taipy-Core located in the 'taipy/core' subdirectory, enabling users to inspect or contribute to the source code.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/INSTALLATION.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy Repository for Source Code Access\nDESCRIPTION: Clones the complete Taipy GitHub repository to the local machine using Git. This allows users to access the source code of all Taipy packages, including Taipy Core located in the 'taipy/core' subdirectory.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/package_desc.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Cloning Taipy GitHub Repository to Access Source Code - Bash\nDESCRIPTION: This snippet explains how to clone the entire Taipy GitHub repository to the local system using git, enabling users to inspect or contribute to the source code. It places all source files in a 'taipy' directory, including the 'taipy-templates' code in the 'taipy/templates' subdirectory. It requires git installed and configured.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/package_desc.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/Avaiga/taipy.git\n```\n\n----------------------------------------\n\nTITLE: Install Taipy GUI as Editable - Pip - Bash\nDESCRIPTION: This command installs the cloned Taipy repository as an editable package in the current Python environment. The '-e' flag creates a link, allowing changes to the source code to be reflected without re-installation. The '--user' flag installs it in the user's home directory.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e . --user\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy GUI as Editable (Dev Version)\nDESCRIPTION: This command installs the Taipy GUI package in editable mode using pip. The '-e' flag indicates editable mode, and '. 'specifies the current directory (root of the repository). The '--user' flag installs the package for the current user. This allows for changes to the source code to be reflected immediately without reinstalling.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install -e . --user\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy Development Version via pip and Git\nDESCRIPTION: Installs the latest development version of the entire Taipy package (including Taipy Core) directly from the GitHub repository using pip and git. This command fetches and installs the code from the main branch.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/package_desc.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version with pip and git\nDESCRIPTION: Command to install the development version of the entire Taipy framework, which includes taipy-common, directly from the GitHub repository.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/package_desc.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Taipy Packages Directly from GitHub - Bash\nDESCRIPTION: This snippet provides the pip command to install the development version of the Taipy package (including taipy-templates) directly from the Taipy GitHub repository using the git+https URL. It requires git and pip installed and configured in the user's environment, making it suitable for contributors or users needing the latest unreleased changes.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/templates/package_desc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Installing Taipy-Core Development Version via Git with Bash\nDESCRIPTION: Installs the development version of the Taipy-Core Python package directly from the GitHub repository using pip and git. This command requires git to be installed and accessible. It fetches the latest source from the taipy GitHub repo and installs the package along with its dependencies for development purposes.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/INSTALLATION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of Taipy Common from GitHub Using pip Bash\nDESCRIPTION: Installs the development version of the taipy-common package directly from the official Taipy GitHub repository using pip with the git+https URL. This requires pip, git, and internet access. This method fetches the latest development code including all dependencies, enabling users to test or contribute to cutting-edge features before stable release. The command installs the taipy package with its common subpackage in the environment.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/common/INSTALLATION.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install git+https://git@github.com/Avaiga/taipy\n```\n\n----------------------------------------\n\nTITLE: Build Taipy GUI WebApp Bundle - npm - Bash\nDESCRIPTION: This command executes the standard build script defined in the package.json file for the Taipy GUI web application. It compiles the TypeScript and React code into a production-ready JavaScript bundle located in the 'taipy/gui/webapp' directory.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Web App (JavaScript Bundle)\nDESCRIPTION: This command builds the JavaScript bundle for the Taipy GUI web application using npm. This compiles the TypeScript and React code into JavaScript files that can be served to web browsers.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Build Taipy GUI WebApp for Debugging - npm - Bash\nDESCRIPTION: This command executes a specific build script ('build:dev') defined in the package.json, intended for frontend development and debugging. It generates the JavaScript bundle with debugging symbols preserved, facilitating navigation within the original TypeScript source code during debugging.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:dev\n```\n\n----------------------------------------\n\nTITLE: Building JavaScript Bundles for Development in Taipy\nDESCRIPTION: Command to build the JavaScript bundles with debugging symbols preserved, allowing developers to navigate TypeScript code from their debugger during development.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:dev\n```\n\n----------------------------------------\n\nTITLE: Install Taipy GUI WebApp Dependencies - npm - Bash\nDESCRIPTION: These commands navigate back to the 'gui' directory and install the required Node.js dependencies for the main web application part of Taipy GUI. This is necessary before building the frontend bundle.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Web App Dependencies\nDESCRIPTION: These commands navigate to the 'gui' directory and install the web app dependencies using npm. This ensures that all necessary client-side components are available for Taipy GUI to function correctly.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ..\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Installing Pipenv and Development Packages - Bash\nDESCRIPTION: Installs pipenv via pip, then creates a new pipenv environment and installs all development dependencies defined in the Pipfile. Prerequisites: Python and pip must be installed. Running these commands sets up a reproducible virtual environment for development. Input: none; output: new pipenv environment with installed packages.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\npipenv install --dev\n```\n\n----------------------------------------\n\nTITLE: Installing DOM Dependencies\nDESCRIPTION: These commands navigate to the 'gui/dom' directory within the Taipy repository and install the required DOM dependencies using npm (Node Package Manager).\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/package_desc.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd gui\ncd dom\nnpm i\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment and Running Taipy-Core Tests with Bash\nDESCRIPTION: Installs pipenv to create an isolated Python virtual environment and installs development dependencies for Taipy-Core, including testing frameworks. After setting up, tests are run from the 'tests/core' directory using pytest via pipenv. This process ensures consistent environment and dependency management during test execution.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/core/INSTALLATION.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npip install pipenv\n```\n\nLANGUAGE: bash\nCODE:\n```\npipenv install --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest tests/core\n```\n\n----------------------------------------\n\nTITLE: Run Taipy GUI Tests - Pipenv - Bash\nDESCRIPTION: This command executes the pytest test suite specifically for the 'tests/gui' directory within the Taipy project. It uses 'pipenv run' to execute the command within the isolated virtual environment managed by Pipenv, ensuring tests run with the correct dependencies.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/gui/INSTALLATION.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest tests/gui\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Web Application Path in Bash\nDESCRIPTION: Bash command to set the TAIPY_GUI_WEBAPP_PATH environment variable, which specifies a custom location for the Taipy GUI web application during development.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport TAIPY_GUI_WEBAPP_PATH=\"/path/to/your/taipy/taipy/gui/webapp\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Web Application Path in Python\nDESCRIPTION: Python code to set the TAIPY_GUI_WEBAPP_PATH environment variable, allowing developers to specify a custom location for the Taipy GUI web application during development.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport os\nos.environ[\"TAIPY_GUI_WEBAPP_PATH\"] = os.path.normpath( \"/path/to/your/taipy/taipy/gui/webapp\" )\n```\n\n----------------------------------------\n\nTITLE: Running Taipy Tests with pytest\nDESCRIPTION: Command to run the Taipy test suite using pytest within the Pipenv virtual environment. This validates the functionality of the Taipy package.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npipenv run pytest\n```\n\n----------------------------------------\n\nTITLE: Creating a Heroku App - Bash\nDESCRIPTION: Creates a new application entry on Heroku using the Heroku CLI. Prerequisites: Logged into Heroku via CLI. This generates a unique app name and prepares the remote for further deployment commands. Output: Heroku app created and URL displayed.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nheroku create\n```\n\n----------------------------------------\n\nTITLE: Installing and Setting Up Pre-commit for Taipy Development\nDESCRIPTION: Commands to install pre-commit tool for code convention enforcement in Taipy development. Pre-commit automatically runs before each commit to ensure code formatting and quality standards.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pipenv install pre-commit\n$ pipenv run python -m pre-commit install\n```\n\n----------------------------------------\n\nTITLE: Logging into Heroku Container Registry - Bash\nDESCRIPTION: Logs the user into the Heroku container registry to enable Docker image pushes. Prerequisites: Heroku CLI installed, user logged in to Heroku, and Docker installed. Input: Heroku credentials. Output: Login session active for registry commands.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nheroku container:login\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing a Docker Image to Heroku - Bash\nDESCRIPTION: Builds the local Docker image and pushes it to the Heroku container registry, targeting the 'web' process type. Prerequisites: Docker, Heroku CLI, and a validated Dockerfile. Input: none; output: Image build progress and push confirmation.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nheroku container:push web\n```\n\n----------------------------------------\n\nTITLE: Releasing the Heroku Docker Image - Bash\nDESCRIPTION: Releases the previously pushed container image to the Heroku app, making it available to serve web requests. Prerequisites: A built and pushed Docker image. Output: Release logs and a running Heroku container serving the application.\nSOURCE: https://github.com/avaiga/taipy/blob/develop/taipy/rest/INSTALLATION.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nheroku container:release web\n```"
  }
]