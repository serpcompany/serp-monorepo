[
  {
    "owner": "awslabs",
    "repo": "aws-sdk-rust",
    "content": "TITLE: Basic DynamoDB Table Listing with AWS SDK for Rust\nDESCRIPTION: Demonstrates a complete example of using AWS SDK for Rust to list DynamoDB tables. The code loads configuration from environment variables, creates a DynamoDB client, and makes a request to list tables with a limit of 10.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dynamodb::{Client, Error};\n\n#[tokio::main]\nasync fn main() -> Result<(), Error> {\n    let shared_config = aws_config::load_from_env().await;\n    let client = Client::new(&shared_config);\n    let req = client.list_tables().limit(10);\n    let resp = req.send().await?;\n    println!(\"Current DynamoDB tables: {:?}\", resp.table_names);\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Testing S3 GetObject with Mocked Response in Rust\nDESCRIPTION: Demonstrates how to use aws-smithy-mocks to test an S3 GetObject operation by intercepting the request and returning a stub response. The example shows setting up a mock client, defining expected output, and verifying the response and number of calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-mocks-experimental/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n#[tokio::test]\nasync fn test_s3() {\n     let s3_real_object = mock!(Client::get_object).then_output(|| {\n         GetObjectOutput::builder()\n             .body(ByteStream::from_static(b\"test-test-test\"))\n             .build()\n     });\n    let s3 = mock_client!(aws_sdk_s3, [&s3_real_object]);\n    let data = s3\n        .get_object()\n        .bucket(\"test-bucket\")\n        .key(\"correct-key\")\n        .send()\n        .await\n        .expect(\"success response\")\n        .body\n        .collect()\n        .await\n        .expect(\"successful read\")\n        .to_vec();\n    assert_eq!(data, b\"test-test-test\");\n    assert_eq!(s3_real_object.num_calls(), 1);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Glue Jobs (Rust)\nDESCRIPTION: Initial hello world example that demonstrates listing AWS Glue jobs using the ListJobs API\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/run.rs#L15\n```\n\n----------------------------------------\n\nTITLE: Executing SQL Statement with Amazon RDS Data Service in Rust\nDESCRIPTION: This code snippet demonstrates how to execute a SQL statement using the Amazon RDS Data Service with the AWS SDK for Rust. It's part of a larger example that interacts with an Amazon Aurora Serverless v1 DB cluster.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/rdsdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient\n    .execute_statement()\n    .resource_arn(&resource_arn)\n    .database(&database_name)\n    .sql(\"SELECT * FROM books\")\n    .secret_arn(&secret_arn)\n    .send()\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Multipart Upload Operations\nDESCRIPTION: Example demonstrating multipart upload functionality including creating upload, uploading parts, and completing the upload. Found in src/bin/s3-multipart-upload.rs.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/s3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nCompleteMultipartUpload\nCreateMultipartUpload\nUploadPart\n```\n\n----------------------------------------\n\nTITLE: Loading Default AWS SDK Configuration in Rust\nDESCRIPTION: Demonstrates how to load default SDK configuration from environment variables and use it to create a DynamoDB client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nasync fn example() {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dynamodb::Client::new(&config);\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Security Groups with Amazon EC2 in Rust\nDESCRIPTION: Example code demonstrating how to retrieve a list of security groups from Amazon EC2. This is a basic 'Hello World' example for getting started with EC2.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ec2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nDescribeSecurityGroups\n```\n\n----------------------------------------\n\nTITLE: Hello Auto Scaling - Listing Auto-Scaling Groups in Rust\nDESCRIPTION: This code demonstrates how to list all Auto Scaling groups using the AWS SDK for Rust. It uses the DescribeAutoScalingGroups operation to retrieve information about available Auto Scaling groups.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/list-autoscaling-groups.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-dynamodb Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using aws-sdk-dynamodb. It includes aws-config, aws-sdk-dynamodb, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dynamodb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dynamodb = \"1.71.2\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Receiving Messages from SQS Queue in Rust\nDESCRIPTION: This code snippet demonstrates how to receive messages from an SQS queue using the AWS SDK for Rust. It creates an SQS client and calls the receive_message operation with a queue URL.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sqs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nlet resp = client\n    .receive_message()\n    .queue_url(&queue_url)\n    .send()\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Stopping Execution in AWS Step Functions using Rust SDK\nDESCRIPTION: This code example shows how to stop an execution in AWS Step Functions using the AWS SDK for Rust. The implementation is located in the file 'src/bin/stop-execution.rs'.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/stepfunction/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS Lambda SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary crates (`aws-config`, `aws-sdk-lambda`, `tokio`) and their versions to include in a Rust project's `Cargo.toml` file for interacting with AWS Lambda. `aws-config` is used for configuration loading, `aws-sdk-lambda` provides the Lambda client and operations, and `tokio` is the required asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lambda = \"1.75.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Bucket and Object Information\nDESCRIPTION: Examples showing how to retrieve bucket location and list object versions. Found in multiple source files.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/s3/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nGetBucketLocation\nGetObject\nListBuckets\nListObjectVersions\n```\n\n----------------------------------------\n\nTITLE: Listing S3 Buckets\nDESCRIPTION: Example showing how to list all S3 buckets in your AWS account using the AWS SDK for Rust. Located in src/bin/s3-helloworld.rs.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/s3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListBuckets\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS S3 Client in Rust\nDESCRIPTION: Demonstrates how to initialize an AWS S3 client using the `aws-sdk-s3` crate in Rust. The code sets up an asynchronous main function using `tokio::main`, loads AWS configuration from environment variables using `aws_config::load_from_env()`, and then creates a new S3 client instance (`aws_sdk_s3::Client`) with the loaded configuration. It requires the `aws-sdk-s3`, `aws-config`, and `tokio` crates as dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_s3 as s3;\n\n#[::tokio::main]\nasync fn main() -> Result<(), s3::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_s3::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Putting Record into Kinesis Stream in Rust\nDESCRIPTION: Code example for putting a single record into a Kinesis stream using the AWS SDK for Rust. Located at src/bin/put-record.rs line 35.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/kinesis/README.md#2025-04-23_snippet_4\n\n\n\n----------------------------------------\n\nTITLE: Subscribing to an SNS Topic in Rust\nDESCRIPTION: This code snippet shows how to subscribe to an SNS topic using the AWS SDK for Rust. It is also part of the 'sns-hello-world.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sns/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/sns-hello-world.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Creating an Auto Scaling Group in Rust\nDESCRIPTION: This code example shows how to create a new Auto Scaling group using the CreateAutoScalingGroup operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/create-autoscaling-group.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Step Functions SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet shows how to add the aws-sdk-sfn and its related dependencies to a Rust project's Cargo.toml file. The dependencies include aws-config for configuration, aws-sdk-sfn for interacting with AWS Step Functions, and tokio for asynchronous execution. All versions must be compatible, and the 'full' feature is enabled for tokio to ensure maximum compatibility. The expected output is a correctly configured Cargo.toml file permitting compilation and use of the SDK; failure to align versions or omit dependencies will result in compile-time errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sfn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sfn = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Synthesizing Speech with Amazon Polly using Rust SDK\nDESCRIPTION: Code demonstrating how to convert text to speech using Amazon Polly's synthesize speech API with the AWS SDK for Rust\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/polly/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/synthesize-speech.rs#L29\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK SSO Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary dependencies in the `Cargo.toml` file to use the AWS SDK for Rust SSO crate. It includes `aws-config` for configuration loading (with the `behavior-version-latest` feature), `aws-sdk-sso` for the service client itself, and `tokio` for the asynchronous runtime (with the `full` feature).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sso/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sso = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Step Functions Client - AWS SDK for Rust\nDESCRIPTION: This Rust code snippet demonstrates initializing a Step Functions (SFN) client using the AWS SDK for Rust. It uses asynchronous execution with Tokio, loads AWS configuration from the environment, and creates a strongly-typed client for Step Functions service calls. Dependencies include aws-sdk-sfn, aws-config, and tokio. The main function prepares for making subsequent Step Functions API calls, expecting correctly set environment variables for AWS credentials and region. The output enables the user to invoke further AWS Step Functions operations using the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sfn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sfn as sfn;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sfn::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sfn::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS STS Client in Rust\nDESCRIPTION: Shows the basic structure for creating an AWS STS client in a Rust application. It uses `aws_config::load_from_env()` to load credentials and configuration from the environment, initializes the `aws_sdk_sts::Client` with this configuration within an asynchronous `main` function powered by Tokio, and prepares for making API calls. The `#[::tokio::main]` macro sets up the async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sts as sts;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sts::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sts::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Assuming a Role with AWS STS in Rust\nDESCRIPTION: This code snippet demonstrates how to assume an IAM role using AWS STS in Rust. It creates a client, sets up the request parameters, and makes an API call to assume the specified role.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_config::meta::region::RegionProviderChain;\nuse aws_sdk_sts::{Client, Error, Region, PKG_VERSION};\nuse structopt::StructOpt;\n\n#[derive(Debug, StructOpt)]\nstruct Opt {\n    /// The AWS Region.\n    #[structopt(short, long)]\n    region: Option<String>,\n\n    /// The name of the role to assume.\n    #[structopt(short, long)]\n    role_name: String,\n\n    /// The ARN of the role to assume.\n    #[structopt(short, long)]\n    role_arn: String,\n\n    /// The name of the assumed role session.\n    #[structopt(short, long)]\n    session_name: String,\n\n    /// Whether to display additional information.\n    #[structopt(short, long)]\n    verbose: bool,\n}\n\n// Assume the specified role.\nasync fn assume_role(client: &Client, role_name: &str, role_arn: &str, session_name: &str) -> Result<(), Error> {\n    let resp = client\n        .assume_role()\n        .role_arn(role_arn)\n        .role_session_name(session_name)\n        .send()\n        .await?;\n\n    println!(\"Assumed role: {}\", role_name);\n    println!(\"Access key Id: {}\", resp.credentials().unwrap().access_key_id().unwrap());\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing a Message to SNS in Rust\nDESCRIPTION: This code snippet demonstrates how to publish a message to an SNS topic using the AWS SDK for Rust. It is part of the 'sns-hello-world.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sns/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/sns-hello-world.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon SES Client in Rust\nDESCRIPTION: This Rust code demonstrates how to initialize an Amazon SES client using the `aws-sdk-ses` crate. It uses `aws_config::load_from_env().await` to asynchronously load AWS configuration (e.g., credentials, region) from environment variables or standard AWS configuration files. It then creates an `aws_sdk_ses::Client` instance using this configuration. The `#[::tokio::main]` attribute macro sets up the Tokio async runtime for the `main` function, which is necessary for executing `.await`. The function returns a `Result<(), ses::Error>` to handle potential errors during client creation or subsequent API calls (represented by the comment).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ses/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ses as ses;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ses::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ses::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using an AWS Security Hub Client with Rust SDK\nDESCRIPTION: This Rust code demonstrates how to asynchronously initialize an AWS SDK Security Hub client using the aws-sdk-securityhub crate. It uses Tokio as the async runtime and loads default AWS configuration from environment variables. The initialized client can be used to make API calls to Security Hub; placeholders indicate where such calls would be inserted. Dependencies include aws-sdk-securityhub, aws-config, and tokio, whose versions are set in Cargo.toml. Inputs: environment configuration for AWS credentials and region. Output: initialized Security Hub client ready for use.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securityhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_securityhub as securityhub;\n\n#[::tokio::main]\nasync fn main() -> Result<(), securityhub::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_securityhub::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Glue Job (Rust)\nDESCRIPTION: Example demonstrating creation of an AWS Glue ETL job to process CSV data into JSON format\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L253\n```\n\n----------------------------------------\n\nTITLE: Retrieving AWS Glue Resource Information (Rust)\nDESCRIPTION: Examples demonstrating how to get information about AWS Glue resources like crawlers, databases, job runs and tables\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L118\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L148\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/run.rs#L70\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L163\n```\n\n----------------------------------------\n\nTITLE: Creating Kinesis Stream in Rust\nDESCRIPTION: Code example for creating a new Kinesis stream using the AWS SDK for Rust. Located at src/bin/create-stream.rs line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/kinesis/README.md#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Creating DB Instance with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates creating a DB instance using the AWS SDK for Rust with Aurora. It's part of the essential Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// Code for CreateDBInstance operation\n// Located in src/rds.rs#L174\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Amplify Client in Rust\nDESCRIPTION: Demonstrates the basic setup for creating an AWS SDK Amplify client in Rust. Shows how to load configuration from environment variables and create a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplify/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_amplify as amplify;\n\n#[::tokio::main]\nasync fn main() -> Result<(), amplify::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_amplify::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS CloudWatch Logs SDK Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS CloudWatch Logs SDK in a Rust project. Includes aws-config, aws-sdk-cloudwatchlogs, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatchlogs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudwatchlogs = \"1.76.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Elasticsearch Client in Rust\nDESCRIPTION: Example of creating and initializing an AWS Elasticsearch client using the SDK with async/await pattern and proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticsearch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elasticsearch as elasticsearch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elasticsearch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elasticsearch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-ses in Cargo.toml\nDESCRIPTION: This TOML snippet shows how to add the necessary dependencies (`aws-config`, `aws-sdk-ses`, and `tokio`) to your project's `Cargo.toml` file to use the AWS SDK for Rust with Amazon SES. `aws-config` is used for loading configuration (like credentials and region), `aws-sdk-ses` provides the SES client and operations, and `tokio` is required for the asynchronous runtime needed by the SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ses/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ses = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Loading AWS SDK Configuration with Region Override in Rust\nDESCRIPTION: Shows how to load SDK configuration with a custom region provider chain that falls back to 'us-east-1' if no region is specified in environment variables or configuration files.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_config::meta::region::RegionProviderChain;\n\nasync fn example() {\n    let region_provider = RegionProviderChain::default_provider().or_else(\"us-east-1\");\n    let config = aws_config::from_env().region(region_provider).load().await;\n    let client = aws_sdk_dynamodb::Client::new(&config);\n}\n```\n\n----------------------------------------\n\nTITLE: Listing SQS Queues in Rust\nDESCRIPTION: This code snippet demonstrates how to list all available SQS queues in an AWS account using the AWS SDK for Rust. It creates an SQS client and calls the list_queues operation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sqs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nlet resp = client.list_queues().send().await?;\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Glue Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK Glue client in a Rust application. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the Glue service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/glue/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_glue as glue;\n\n#[::tokio::main]\nasync fn main() -> Result<(), glue::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_glue::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Bedrock Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS Bedrock client using environment configuration. Shows basic async setup with Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrock/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrock as bedrock;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrock::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrock::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Photo Asset Management Application with Cargo Lambda\nDESCRIPTION: These commands demonstrate how to test the application using Cargo Lambda. One command watches for changes, while the other invokes a specific handler with test data.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/photo_asset_management/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda watch\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda invoke <name-of-bin> --data-file examples/<name-of-bin>.json\n```\n\n----------------------------------------\n\nTITLE: Describing Kinesis Stream in Rust\nDESCRIPTION: Code example for retrieving information about a Kinesis stream using the AWS SDK for Rust. Located at src/bin/describe-stream.rs line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/kinesis/README.md#2025-04-23_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Creating DB Cluster with Aurora in Rust\nDESCRIPTION: This code snippet shows how to create a DB cluster using the AWS SDK for Rust with Aurora. It's part of the Aurora operations basics.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n// Code for CreateDBCluster operation\n// Located in src/rds.rs#L151\n```\n\n----------------------------------------\n\nTITLE: Initializing the Route 53 Recovery Control Config Client in Rust\nDESCRIPTION: Demonstrates how to create an asynchronous client for the Route 53 Recovery Control Configuration service in Rust. It uses `aws_config::load_from_env()` to load AWS configuration and credentials from the environment and initializes the client within a Tokio runtime (`#[::tokio::main]`). This client can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoverycontrolconfig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53recoverycontrolconfig as route53recoverycontrolconfig;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53recoverycontrolconfig::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53recoverycontrolconfig::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-dynamodbstreams Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the aws-sdk-dynamodbstreams crate. It includes aws-config, aws-sdk-dynamodbstreams, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dynamodbstreams/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dynamodbstreams = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Translate Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS Translate service client within an asynchronous Rust function marked with `#[::tokio::main]`. It first loads AWS configuration (like credentials and region) from the environment using `aws_config::load_from_env().await` and then uses this configuration to instantiate an `aws_sdk_translate::Client`. The example returns a `Result` to handle potential errors during client creation or subsequent operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/translate/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_translate as translate;\n\n#[::tokio::main]\nasync fn main() -> Result<(), translate::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_translate::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Deleting an Amazon EKS Cluster in Rust\nDESCRIPTION: This code snippet shows the implementation of CreateCluster and DeleteCluster operations for Amazon EKS using the AWS SDK for Rust. It defines functions for cluster creation and deletion with appropriate parameters and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/eks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// CreateCluster\npub async fn create_cluster(\n    client: &Client,\n    name: &str,\n    roleArn: &str,\n    subnetIds: Vec<String>,\n) -> Result<String, EksError> {\n    let cluster = client\n        .create_cluster()\n        .name(name)\n        .role_arn(roleArn)\n        .resources_vpc_config(\n            VpcConfigRequest::builder()\n                .set_subnet_ids(Some(subnetIds))\n                .build(),\n        )\n        .send()\n        .await?;\n\n    Ok(cluster.cluster.unwrap().status.unwrap().as_str().to_string())\n}\n```\n\nLANGUAGE: Rust\nCODE:\n```\n// DeleteCluster\npub async fn delete_cluster(client: &Client, name: &str) -> Result<(), EksError> {\n    client.delete_cluster().name(name).send().await?;\n\n    println!(\"Deleted cluster.\\nRun 'aws eks create-cluster' to create a new cluster.\");\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS SageMaker Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS SageMaker client within an asynchronous Rust application using Tokio. It loads AWS configuration, typically credentials and region, from environment variables using `aws_config::load_from_env()` and then instantiates `aws_sdk_sagemaker::Client` with this configuration. The `#[::tokio::main]` macro simplifies setting up the async runtime, and the function returns a Result to handle potential errors during configuration loading or client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemaker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemaker as sagemaker;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemaker::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemaker::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing SNS Topics in Rust\nDESCRIPTION: This code snippet shows how to list existing SNS topics using the AWS SDK for Rust. It references the 'list-topics.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/list-topics.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Initializing aws-sdk-securityir Client in Rust (Rust)\nDESCRIPTION: This Rust code demonstrates initializing an `aws-sdk-securityir` client. It uses `aws_config::load_from_env()` to load AWS credentials and configuration from the environment asynchronously and then creates a `securityir::Client` instance using this configuration. The `#[::tokio::main]` attribute sets up the Tokio async runtime, which is required for executing the asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securityir/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_securityir as securityir;\n\n#[::tokio::main]\nasync fn main() -> Result<(), securityir::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_securityir::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Values from AWS Secrets Manager using Rust SDK\nDESCRIPTION: The code demonstrates how to retrieve a secret value from AWS Secrets Manager using the AWS SDK for Rust. It references an example located in the get-secret-value.rs file at line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/secretsmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/get-secret-value.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lex Runtime V2 Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS Lex Runtime V2 client using environment configuration. Shows basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexruntimev2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lexruntimev2 as lexruntimev2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lexruntimev2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lexruntimev2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS X-Ray Client - Rust\nDESCRIPTION: This example shows how to create an AWS X-Ray client using the aws-sdk-xray crate in a Rust application. The code sets up Tokio's async runtime, loads AWS configuration from the environment, and initializes the client. Dependencies include aws-sdk-xray, tokio, and aws-config. The client can subsequently be used to interact with AWS X-Ray APIs; actual service calls should be placed where indicated by the comment. Inputs are default environment configuration, outputs are a ready-to-use X-Ray client instance. Error handling is included via the Result return type.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/xray/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_xray as xray;\n\n#[::tokio::main]\nasync fn main() -> Result<(), xray::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_xray::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CloudControl Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK CloudControl. It includes aws-config, aws-sdk-cloudcontrol, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudcontrol/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudcontrol = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running LocalStack Example with AWS SDK for Rust\nDESCRIPTION: Command to run the LocalStack example that lists S3 buckets and SQS queues using the AWS SDK for Rust. Requires cargo and LocalStack to be installed.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/localstack/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin use-localstack\n```\n\n----------------------------------------\n\nTITLE: Listing Hosted Zones with Route 53 in Rust\nDESCRIPTION: This code snippet demonstrates how to list hosted zones using the AWS SDK for Rust with Amazon Route 53. It's part of a larger example that interacts with Route 53 services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/route53/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListHostedZones\n```\n\n----------------------------------------\n\nTITLE: Starting EBS Snapshot in Rust\nDESCRIPTION: This code snippet illustrates how to start an EBS snapshot using the AWS SDK for Rust. It employs the StartSnapshot operation from the Amazon EBS API.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ebs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet resp = client.start_snapshot().volume_size(volume_size).client_token(client_token).description(format!(\"SDK for Rust test {}\", Utc::now())).send().await?\n```\n\n----------------------------------------\n\nTITLE: Creating an ECS Cluster in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon ECS cluster using the AWS SDK for Rust. It references a function located in the 'cluster.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ecs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nCreateCluster\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Athena Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Athena client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Athena.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/athena/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_athena as athena;\n\n#[::tokio::main]\nasync fn main() -> Result<(), athena::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_athena::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a DynamoDB Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a DynamoDB client using the aws-sdk-dynamodb crate in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to DynamoDB.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dynamodb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dynamodb as dynamodb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dynamodb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dynamodb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SDK and Tokio Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This TOML snippet demonstrates how to declare the necessary dependencies in your Cargo.toml file to use the aws-sdk-transcribestreaming Rust crate, as well as its prerequisites aws-config and tokio. The aws-config crate should be specified with the 'behavior-version-latest' feature to ensure the latest SDK behaviors, and tokio is configured with the 'full' feature set for asynchronous execution. Inputs are section headers and crate definitions, and the outputs are resolved dependencies when building the project. Designed for setting up the environment before any code is written.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transcribestreaming/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-transcribestreaming = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Redshift Data API Client in Rust\nDESCRIPTION: This code demonstrates how to initialize and use a Redshift Data API client in Rust. It creates a client instance using configuration loaded from the environment, which can then be used to make API calls to the Redshift Data service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshiftdata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_redshiftdata as redshiftdata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), redshiftdata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_redshiftdata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-route53 with Cargo\nDESCRIPTION: Cargo.toml configuration for adding aws-sdk-route53 and required dependencies to a Rust project. Includes aws-config with behavior-version-latest feature, the route53 SDK, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53 = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing SageMaker Feature Store Runtime Client in Rust\nDESCRIPTION: Demonstrates how to create an asynchronous SageMaker Feature Store Runtime client in Rust. It uses `aws_config::load_from_env()` to load AWS configuration and credentials from the environment and then instantiates the client using `aws_sdk_sagemakerfeaturestoreruntime::Client::new()`. Requires the `tokio` runtime and relevant dependencies defined in Cargo.toml.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakerfeaturestoreruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakerfeaturestoreruntime as sagemakerfeaturestoreruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakerfeaturestoreruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakerfeaturestoreruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Timestream Write Client with Endpoint Discovery in Rust\nDESCRIPTION: This Rust snippet demonstrates how to create and configure a Timestream Write client using the AWS SDK for Rust. It sets up asynchronous execution with Tokio, loads config from the environment, and enables endpoint discovery, which is mandatory for correct client operation. This code requires all dependencies (aws-sdk-timestreamwrite, aws-config, tokio) to be present, and expects further service API calls to be inserted where indicated. The main function returns a Result compatible with asynchronous error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreamwrite/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_timestreamwrite as timestreamwrite;\n\n#[::tokio::main]\nasync fn main() -> Result<(), timestreamwrite::Error> {\n    let config = aws_config::load_from_env().await;\n    // You MUST call `with_endpoint_discovery_enabled` to produce a working client for this service.\n    let client = aws_sdk_timestreamwrite::Client::new(&config).with_endpoint_discovery_enabled().await;\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Ledgers in Amazon QLDB using Rust\nDESCRIPTION: This code snippet shows how to list existing ledgers in Amazon QLDB using the AWS SDK for Rust. It references a specific line in the list-ledgers.rs file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/qldb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/list-ledgers.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Running the detect_labels Example with AWS SDK for Rust\nDESCRIPTION: Command to run the detect_labels example that extracts EXIF information from images, uploads them to S3, identifies attributes using Rekognition, and stores the information in DynamoDB.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd detect_labels;\ncargo run -- -b BUCKET -f FILENAME -t TABLE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CodeGuru Security Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK CodeGuru Security client in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the CodeGuru Security service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codegurusecurity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codegurusecurity as codegurusecurity;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codegurusecurity::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codegurusecurity::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Kinesis Stream in Rust\nDESCRIPTION: Code example for deleting an existing Kinesis stream using the AWS SDK for Rust. Located at src/bin/delete-stream.rs line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/kinesis/README.md#2025-04-23_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Initializing SimSpace Weaver SDK Client in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to initialize an aws-sdk-simspaceweaver Client for use in asynchronous Rust applications. It loads AWS configuration from the environment, creates a typed client instance, and is ready for API calls within an async context. Requires the aws-config, aws-sdk-simspaceweaver, and tokio crates with their specified versions and features. The function main returns Result<(), simspaceweaver::Error> to handle potential initialization errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/simspaceweaver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_simspaceweaver as simspaceweaver;\n\n#[::tokio::main]\nasync fn main() -> Result<(), simspaceweaver::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_simspaceweaver::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Validating AWS SDK Rust Client Configuration Reference\nDESCRIPTION: Documentation reference showing the relationship between configuration validation and the read_before_execution interceptor hook. Any errors returned during validation will cause the operation to fail.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-runtime-api/rustdoc/validate_final_config.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n[`Intercept::read_before_execution`]: crate::client::interceptors::Intercept::read_before_execution\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Pipes Client in Rust\nDESCRIPTION: Basic example of creating and using an AWS SDK client for EventBridge Pipes. Shows how to load configuration from environment variables and initialize the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pipes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pipes as pipes;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pipes::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pipes::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP GET Request Structure\nDESCRIPTION: Shows the format of an AWS HTTP GET request including required headers and canonical string components. Contains the request method, URI path, headers (host, x-amz-date, x-amz-region-set), canonical header names, and SHA256 hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Describing Scaling Activities in Rust\nDESCRIPTION: This code demonstrates how to retrieve information about scaling activities using the DescribeScalingActivities operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L399\n```\n\n----------------------------------------\n\nTITLE: Completing EBS Snapshot in Rust\nDESCRIPTION: This code snippet demonstrates how to complete an EBS snapshot using the AWS SDK for Rust. It uses the CompleteSnapshot operation from the Amazon EBS API.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ebs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclient.complete_snapshot().snapshot_id(snapshot_id).changed_blocks_count(written_blocks as i32).send().await?\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ECR Public Client in Rust\nDESCRIPTION: Basic example demonstrating how to initialize an AWS ECR Public client using environment configuration. Shows async main function setup with error handling and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecrpublic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ecrpublic as ecrpublic;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ecrpublic::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ecrpublic::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS EC2 Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize an AWS EC2 client using environment configuration. Shows basic async main function setup with error handling and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ec2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ec2 as ec2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ec2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ec2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK ECR Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK ECR client in a Rust application. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Amazon ECR.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ecr as ecr;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ecr::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ecr::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon CloudWatch Internet Monitor Client in Rust\nDESCRIPTION: This code demonstrates how to create a client for Amazon CloudWatch Internet Monitor using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/internetmonitor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_internetmonitor as internetmonitor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), internetmonitor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_internetmonitor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Signer Client in Rust with Tokio\nDESCRIPTION: Demonstrates creating an asynchronous AWS Signer client using the Rust AWS SDK. This snippet uses the `aws-sdk-signer` crate and requires the user to import its module as well as have Tokio appropriately configured as the async runtime. The main function asynchronously loads the AWS config from the environment, constructs a client, and is set up for further asynchronous signer operations. Inputs are loaded from environment variables compatible with AWS SDKs, and the output is a ready-to-use Signer client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/signer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_signer as signer;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), signer::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_signer::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Describing Amazon Polly Voices with Rust SDK\nDESCRIPTION: Example showing how to list available voices in Amazon Polly using the AWS SDK for Rust\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/polly/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/describe-voices.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Well-Architected Client in Rust\nDESCRIPTION: This Rust code demonstrates initializing a client for the AWS Well-Architected Tool service. It uses `aws_config::load_from_env()` to asynchronously load AWS configuration (e.g., credentials and region) from the environment and then creates an instance of `aws_sdk_wellarchitected::Client`. The code requires the `tokio` runtime, indicated by the `#[::tokio::main]` attribute.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wellarchitected/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_wellarchitected as wellarchitected;\n\n#[::tokio::main]\nasync fn main() -> Result<(), wellarchitected::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_wellarchitected::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EventBridge Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an EventBridge client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Amazon EventBridge.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eventbridge/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_eventbridge as eventbridge;\n\n#[::tokio::main]\nasync fn main() -> Result<(), eventbridge::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_eventbridge::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Secrets Manager in Cargo.toml\nDESCRIPTION: This TOML snippet shows the necessary dependencies to include in your project's `Cargo.toml` file to use the AWS SDK for Rust with Secrets Manager. It specifies the `aws-config` crate for configuration loading, the `aws-sdk-secretsmanager` crate for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/secretsmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-secretsmanager = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS API Gateway Management SDK in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Cargo.toml file for using the AWS API Gateway Management SDK with Rust. It includes the AWS config crate, the API Gateway Management SDK, and Tokio for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigatewaymanagement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-apigatewaymanagement = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running the detect_faces Example with AWS SDK for Rust\nDESCRIPTION: Command to run the detect_faces example that saves an image to an S3 bucket and uses Amazon Rekognition to display facial details like age range, gender, and emotion.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd detect_faces;\ncargo run -- -b BUCKET -f FILENAME [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Location Service Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS Location Service client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/location/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_location as location;\n\n#[::tokio::main]\nasync fn main() -> Result<(), location::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_location::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ledger in Amazon QLDB using Rust\nDESCRIPTION: This code snippet demonstrates how to create a new ledger in Amazon QLDB using the AWS SDK for Rust. It references a specific line in the create-ledger.rs file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/qldb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-ledger.rs#L27\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS Trusted Advisor Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS Trusted Advisor client in an asynchronous Rust application using Tokio. The code loads AWS configuration from the environment using `aws_config::load_from_env()` and then instantiates the `aws_sdk_trustedadvisor::Client` with this configuration. This client is then used to make calls to the Trusted Advisor API.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/trustedadvisor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_trustedadvisor as trustedadvisor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), trustedadvisor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_trustedadvisor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Serverless Application Repository Client - Rust\nDESCRIPTION: This Rust snippet illustrates creating and initializing a client for the AWS Serverless Application Repository using the asynchronous Tokio runtime. It loads AWS configuration from the environment, then constructs the client from the aws-sdk-serverlessapplicationrepository crate. You can perform service calls by invoking methods on this client. Prerequisites include the previously specified dependencies in Cargo.toml and valid AWS credentials in the environment. The function is entry-point compliant with Tokio and returns a Result indicating potential errors during initialization or API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/serverlessapplicationrepository/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_serverlessapplicationrepository as serverlessapplicationrepository;\n\n#[::tokio::main]\nasync fn main() -> Result<(), serverlessapplicationrepository::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_serverlessapplicationrepository::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CodeBuild Client in Rust\nDESCRIPTION: Basic example of creating an AWS CodeBuild client using environment configuration. Shows async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codebuild/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codebuild as codebuild;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codebuild::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codebuild::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Signature v4 Canonical Request in Plaintext\nDESCRIPTION: This snippet shows the format of a canonical request used in AWS Signature Version 4. It includes the HTTP method (GET), the URI path, canonical headers (host, x-amz-date, x-amz-region-set), signed headers list, and the hash of the request payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/example/..\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Chatbot Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS Chatbot client using environment configuration in an async Rust application.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chatbot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chatbot as chatbot;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chatbot::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chatbot::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK GeoMaps Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK GeoMaps client in Rust. It uses the aws_config crate to load configuration from the environment and creates a new GeoMaps client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/geomaps/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_geomaps as geomaps;\n\n#[::tokio::main]\nasync fn main() -> Result<(), geomaps::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_geomaps::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ApplicationSignals Client in Rust\nDESCRIPTION: This code demonstrates how to create an ApplicationSignals client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationsignals/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_applicationsignals as applicationsignals;\n\n#[::tokio::main]\nasync fn main() -> Result<(), applicationsignals::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_applicationsignals::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the WorkMail Message Flow Client in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to initialize the AWS WorkMail Message Flow client. It uses `aws_config::load_from_env()` to load AWS credentials and configuration from the environment and then creates a new client instance using `aws_sdk_workmailmessageflow::Client::new()`. The code runs within a Tokio asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workmailmessageflow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workmailmessageflow as workmailmessageflow;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workmailmessageflow::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workmailmessageflow::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SSM Client with Tokio and AWS SDK - Rust\nDESCRIPTION: This Rust snippet illustrates how to asynchronously set up and initialize a client for AWS Systems Manager (SSM) using tokio and the AWS SDK for Rust. The code loads configuration from the environment, creates an SSM client, and provides a structure for making SSM API calls. Dependencies required include aws-config, aws-sdk-ssm, and tokio with async/await support. The function returns a Result type, accommodating both successful and error outcomes; replace the comment with actual client calls as needed.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssm as ssm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing SageMaker Metrics Client using AWS SDK for Rust\nDESCRIPTION: This Rust code demonstrates initializing and using the Amazon SageMaker Metrics client with the AWS SDK. It uses tokio's async runtime and loads the AWS configuration from the environment, then instantiates a sagemakermetrics client for issuing API calls. The snippet is foundational for any SageMaker Metrics operations and enables further actions such as BatchPutMetrics. Dependencies: aws-config, aws-sdk-sagemakermetrics, and tokio. The main parameters include environment configuration and error handling for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakermetrics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakermetrics as sagemakermetrics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakermetrics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakermetrics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Config Client - Rust\nDESCRIPTION: Basic example of creating an AWS Config client in Rust using the SDK. Shows async main function setup, environment configuration loading, and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/config/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_config as config;\n\n#[::tokio::main]\nasync fn main() -> Result<(), config::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_config::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Kendra in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for setting up AWS SDK Kendra with Tokio runtime. Includes aws-config, aws-sdk-kendra, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kendra/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kendra = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Migration Hub Orchestrator Client\nDESCRIPTION: Example showing how to create and initialize an AWS Migration Hub Orchestrator client in Rust using environment configuration. Demonstrates basic async setup with Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhuborchestrator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_migrationhuborchestrator as migrationhuborchestrator;\n\n#[::tokio::main]\nasync fn main() -> Result<(), migrationhuborchestrator::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_migrationhuborchestrator::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ECS Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS ECS client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ecs as ecs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ecs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ecs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS HealthLake SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS HealthLake SDK with Rust. Includes aws-config, aws-sdk-healthlake, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/healthlake/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-healthlake = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS IoT client using the SDK. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iot as iot;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iot::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iot::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Basic S3 Operations\nDESCRIPTION: Core S3 operations including copying objects, creating/deleting buckets, and managing objects. Located in src/lib.rs.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/s3/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nCopyObject\nCreateBucket\nDeleteBucket\nDeleteObject\nDeleteObjects\nListObjectsV2\nPutObject\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SSM SDK Dependencies with Cargo - TOML\nDESCRIPTION: This snippet demonstrates how to modify your Cargo.toml file to include aws-config, aws-sdk-ssm, and tokio as dependencies. These components are required for asynchronous operation of the AWS SDK in a Rust project. Specify the indicated versions to ensure compatibility, and enable the \"behavior-version-latest\" feature for aws-config and the \"full\" feature for tokio. No code execution is performed here; this is strictly for package setup.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssm = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Describing AWS IoT Endpoint in Rust\nDESCRIPTION: This code snippet shows how to use the AWS SDK for Rust to call the DescribeEndpoint operation, which retrieves the unique endpoint for the AWS IoT account.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/iot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nDescribeEndpoint\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS OpenSearch Ingestion Client in Rust\nDESCRIPTION: Basic Rust code example that demonstrates how to initialize and use the AWS OpenSearch Ingestion client. It loads configuration from environment variables and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/osis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_osis as osis;\n\n#[::tokio::main]\nasync fn main() -> Result<(), osis::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_osis::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Execution in AWS Step Functions using Rust SDK\nDESCRIPTION: This code example demonstrates how to start an execution in AWS Step Functions using the AWS SDK for Rust. It can be found in the file 'src/bin/start-execution.rs'.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/stepfunction/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Code not provided in the given content\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Comprehend Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Comprehend client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the Comprehend service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/comprehend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_comprehend as comprehend;\n\n#[::tokio::main]\nasync fn main() -> Result<(), comprehend::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_comprehend::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-voiceid Client in Rust\nDESCRIPTION: Demonstrates initializing the AWS Voice ID client in an asynchronous Rust application using the Tokio runtime. It loads AWS configuration from environment variables using `aws_config::load_from_env().await` and then creates a `aws_sdk_voiceid::Client` instance using this configuration. The `#[::tokio::main]` attribute sets up the async entry point.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/voiceid/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_voiceid as voiceid;\n\n#[::tokio::main]\nasync fn main() -> Result<(), voiceid::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_voiceid::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Q Connect Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Q Connect client in Rust. It imports the necessary module, sets up a Tokio runtime with the main macro, loads AWS configuration from environment variables, and initializes a new client instance with the loaded configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qconnect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_qconnect as qconnect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), qconnect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_qconnect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components Example\nDESCRIPTION: Shows the format of AWS4-ECDSA-P256-SHA256 signature components including algorithm identifier, ISO8601 timestamp, credential scope, and the resulting hash. This format is used in AWS API authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n890c4ed28c1a1ac10b5862719b537afbe392e987dc1aab1efa16fe7de41d3c81\n```\n\n----------------------------------------\n\nTITLE: Using DescribeComputeEnvironments with AWS Batch in Rust\nDESCRIPTION: This code snippet demonstrates how to query AWS Batch compute environments using the AWS SDK for Rust. It references code found in the src/bin/batch-helloworld.rs file at line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/batch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nDescribeComputeEnvironments\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK in Cargo.toml\nDESCRIPTION: Defines the required dependencies in Cargo.toml for using AWS SDK with DynamoDB, including aws-config, aws-sdk-dynamodb, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version= \"1.6.1\", features = [\"behavior-version-latest\"] }\naws-sdk-dynamodb = \"1.71.2\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the Timestream InfluxDB Client in Rust\nDESCRIPTION: Demonstrates how to create an asynchronous Rust function using `tokio::main` to initialize an AWS Timestream for InfluxDB client. It uses `aws_config::load_from_env().await` to load AWS credentials and configuration from the environment and then creates a `Client` instance. This client is then used to make API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreaminfluxdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_timestreaminfluxdb as timestreaminfluxdb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), timestreaminfluxdb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_timestreaminfluxdb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Cognito Identity Provider Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Cognito Identity Provider client using the SDK. Demonstrates basic setup with error handling and async runtime configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitoidentityprovider/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cognitoidentityprovider as cognitoidentityprovider;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cognitoidentityprovider::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cognitoidentityprovider::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Personalize Events Client in Rust\nDESCRIPTION: This Rust code snippet shows how to asynchronously initialize the `aws-sdk-personalizeevents` client within a Tokio runtime. It first loads AWS configuration from environment variables using `aws_config::load_from_env().await` and then instantiates the `Client` using this configuration. This client object is then used to make API calls to the AWS Personalize Events service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalizeevents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_personalizeevents as personalizeevents;\n\n#[::tokio::main]\nasync fn main() -> Result<(), personalizeevents::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_personalizeevents::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS SDK DataBrew Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK DataBrew client in a Rust application. It uses the aws_config crate to load configuration from the environment and initializes the client within an asynchronous main function.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/databrew/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_databrew as databrew;\n\n#[::tokio::main]\nasync fn main() -> Result<(), databrew::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_databrew::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Auto Scaling Group in Rust\nDESCRIPTION: This code example demonstrates how to update an existing Auto Scaling group using the UpdateAutoScalingGroup operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/update-autoscaling-group.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS Savings Plans Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS Savings Plans client in asynchronous Rust code. It uses `aws_config::load_from_env().await` to load AWS credentials and configuration from the environment. The client is then instantiated using `aws_sdk_savingsplans::Client::new()`. The `#[::tokio::main]` attribute designates the `main` function as the entry point for the Tokio asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/savingsplans/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_savingsplans as savingsplans;\n\n#[::tokio::main]\nasync fn main() -> Result<(), savingsplans::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_savingsplans::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Cost Explorer Client\nDESCRIPTION: Example code showing how to initialize and create an AWS Cost Explorer client in Rust using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costexplorer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_costexplorer as costexplorer;\n\n#[::tokio::main]\nasync fn main() -> Result<(), costexplorer::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_costexplorer::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Amazon Pinpoint Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize an Amazon Pinpoint client in Rust. It loads configuration from environment variables, creates a new client, and provides a structure for making API calls with proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpoint/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pinpoint as pinpoint;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pinpoint::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pinpoint::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Greengrass Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK Greengrass. It includes the aws-config, aws-sdk-greengrass, and tokio crates with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/greengrass/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-greengrass = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing ResourceExplorer2 Client in Rust\nDESCRIPTION: Creates and initializes an AWS ResourceExplorer2 client in Rust using configuration loaded from the environment. This example sets up the basic structure for making API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourceexplorer2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_resourceexplorer2 as resourceexplorer2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), resourceexplorer2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_resourceexplorer2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IVS Chat Client - Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS IVS Chat client using environment configuration. Shows basic error handling and async setup with Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivschat/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ivschat as ivschat;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ivschat::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ivschat::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CloudWatch Events Client in Rust\nDESCRIPTION: This code demonstrates how to create and initialize an AWS SDK CloudWatch Events client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatchevents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudwatchevents as cloudwatchevents;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudwatchevents::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudwatchevents::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kinesis in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for integrating AWS Kinesis SDK with a Rust project. Includes required dependencies for aws-config, aws-sdk-kinesis, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesis = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting Desired Capacity for Auto Scaling Group in Rust\nDESCRIPTION: This code demonstrates how to set the desired capacity for an Auto Scaling group using the SetDesiredCapacity operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L595\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Identity Store SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for required dependencies in Cargo.toml including aws-config, aws-sdk-identitystore, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/identitystore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-identitystore = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Listing Identity Pool Usage with Amazon Cognito Sync in Rust\nDESCRIPTION: This code example demonstrates how to list identity pool usage using the AWS SDK for Rust and Amazon Cognito Sync. The code is referenced as being located in the 'src/bin/list-identity-pool-usage.rs' file at line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/cognitosync/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nListIdentityPoolUsage\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Network Flow Monitor Client - Rust\nDESCRIPTION: This Rust snippet demonstrates creating an asynchronous main function with Tokio, loading AWS configuration from the environment, then instantiating an aws-sdk-networkflowmonitor client. The code is designed to serve as a starting template for making API calls. Dependencies required: aws-sdk-networkflowmonitor, aws-config, and tokio (with async runtime). The function returns a Result and is structured to allow inserting AWS service method calls. Inputs: AWS credentials/config in the environment; outputs: Result indicating success or networkflowmonitor errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkflowmonitor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_networkflowmonitor as networkflowmonitor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), networkflowmonitor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_networkflowmonitor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppFlow Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS AppFlow client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appflow/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appflow as appflow;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appflow::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appflow::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ELB v2 Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Elastic Load Balancing v2 client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticloadbalancingv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elasticloadbalancingv2 as elasticloadbalancingv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elasticloadbalancingv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elasticloadbalancingv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Account Client in Rust\nDESCRIPTION: This code demonstrates how to initialize an AWS SDK Account client using credentials from the environment. It creates a configuration object, initializes the client, and provides a structure for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/account/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_account as account;\n\n#[::tokio::main]\nasync fn main() -> Result<(), account::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_account::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an RDS Data API Client in Rust\nDESCRIPTION: This example demonstrates how to create and initialize a client for the Amazon RDS Data API using the aws-sdk-rdsdata crate. It shows setting up the client with configuration loaded from environment variables within an asynchronous Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rdsdata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rdsdata as rdsdata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rdsdata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rdsdata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Route53 Client in Rust\nDESCRIPTION: Basic example of initializing an AWS Route53 client in Rust. The code loads configuration from environment variables, creates a client instance, and provides a skeleton for making API calls with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53 as route53;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon RDS Performance Insights Client in Rust\nDESCRIPTION: This code example demonstrates how to initialize a Performance Insights client in Rust. It loads configuration from environment variables and creates a new client instance that can be used to make API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pi as pi;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pi::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pi::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS KMS SDK Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS KMS SDK in a Rust project. Includes aws-config, aws-sdk-kms, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kms = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Chime Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS SDK Chime client in Rust using environment configuration. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chime as chime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Network Firewall Client in Rust\nDESCRIPTION: This Rust code demonstrates how to initialize the AWS Network Firewall client within an asynchronous Tokio runtime. It uses `aws_config::load_from_env()` to load AWS credentials and configuration from the environment and then creates a new `Client` instance using this configuration. The `#[::tokio::main]` attribute sets up the async entry point.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkfirewall/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_networkfirewall as networkfirewall;\n\n#[::tokio::main]\nasync fn main() -> Result<(), networkfirewall::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_networkfirewall::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon Q Business Client in Rust\nDESCRIPTION: This example demonstrates how to create an Amazon Q Business client using the AWS SDK for Rust. It loads configuration from environment variables and initializes a new client instance which can then be used to make API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qbusiness/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_qbusiness as qbusiness;\n\n#[::tokio::main]\nasync fn main() -> Result<(), qbusiness::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_qbusiness::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK FinSpace Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK FinSpace client in a Rust application. It loads the configuration from the environment and initializes the client for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/finspace/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_finspace as finspace;\n\n#[::tokio::main]\nasync fn main() -> Result<(), finspace::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_finspace::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Photo Asset Management Application using Cargo Lambda\nDESCRIPTION: These commands compile the Rust application for AWS Lambda using Cargo Lambda, targeting the ARM64 architecture, and package the resulting binary into a zip file for deployment.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/photo_asset_management/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo lambda build --release --arm64\nzip ../../target/lambda/pam/bootstrap{.zip,}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK for SageMaker Metrics in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows how to add the required dependencies to a Rust project's Cargo.toml for using the AWS SDK with Amazon SageMaker Metrics. It includes aws-config with the latest behavior features, the aws-sdk-sagemakermetrics crate for interfacing with the service, and tokio for asynchronous execution. These dependencies are crucial for enabling async API calls and leveraging SageMaker Metrics within a Rust application. All relevant SDK and runtime versions must be compatible with the application.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakermetrics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakermetrics = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing EMR Serverless Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an EMR Serverless client using the AWS SDK for Rust. Demonstrates loading configuration from environment variables and creating a client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emrserverless/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_emrserverless as emrserverless;\n\n#[::tokio::main]\nasync fn main() -> Result<(), emrserverless::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_emrserverless::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Control Tower Client in Rust\nDESCRIPTION: Creates an AWS Control Tower client using environment configuration. Demonstrates basic async client setup with error handling using tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/controltower/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_controltower as controltower;\n\n#[::tokio::main]\nasync fn main() -> Result<(), controltower::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_controltower::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an aws-sdk-workdocs Client in Rust\nDESCRIPTION: Demonstrates how to create an Amazon WorkDocs client in an asynchronous Rust application using Tokio. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then instantiates the `aws_sdk_workdocs::Client` with this configuration. The `#[::tokio::main]` macro sets up the async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workdocs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workdocs as workdocs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workdocs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workdocs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS EC2 SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS EC2 SDK in a Rust project. Includes aws-config, aws-sdk-ec2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ec2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ec2 = \"1.122.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Deleting an Auto Scaling Group in Rust\nDESCRIPTION: This code example demonstrates how to delete an Auto Scaling group using the DeleteAutoScalingGroup operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/delete-autoscaling-group.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-braket Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file. It includes the aws-sdk-braket crate, aws-config for configuration, and tokio for asynchronous runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/braket/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-braket = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Listing MediaLive Inputs using AWS SDK for Rust\nDESCRIPTION: This code example demonstrates how to list all inputs in AWS Elemental MediaLive using the AWS SDK for Rust. It makes an API call to the ListInputs operation to retrieve information about available inputs.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/medialive/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListInputs\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Things Graph Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS IoT Things Graph client in Rust using the SDK. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotthingsgraph/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotthingsgraph as iotthingsgraph;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotthingsgraph::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotthingsgraph::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Connect Wisdom Client Asynchronously - Rust\nDESCRIPTION: This Rust code demonstrates how to set up and initialize the aws-sdk-wisdom client using asynchronous execution with Tokio. After importing the relevant crate, it loads AWS configuration from the environment, initializes the Wisdom client, and sets up the structure for making service calls. Required dependencies include aws-config for configuration loading, aws-sdk-wisdom for API access, and Tokio for async runtime support. Inputs involve environment configuration, and the output is an initialized client ready for further SDK operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wisdom/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_wisdom as wisdom;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), wisdom::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_wisdom::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MTurk SDK in Cargo.toml\nDESCRIPTION: Dependency configuration for aws-sdk-mturk in Cargo.toml. Includes required dependencies for AWS config, MTurk SDK, and Tokio runtime with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mturk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mturk = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS Lambda Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS Lambda client instance in a Rust application using the `aws-sdk-lambda` crate. It uses `aws_config::load_from_env()` to asynchronously load AWS credentials and configuration from the environment and then initializes the `Client` with this configuration within a `tokio` main function. The `no_run` attribute indicates this snippet is illustrative and not meant to be directly run as-is.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lambda as lambda;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lambda::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lambda::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Service Catalog Client in Rust\nDESCRIPTION: Demonstrates initializing the AWS Service Catalog client within an asynchronous Rust application using the Tokio runtime. It first loads AWS configuration from the environment using `aws_config::load_from_env().await` and then creates a new `aws_sdk_servicecatalog::Client` instance using this configuration. The `#[::tokio::main]` attribute sets up the async main function.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicecatalog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_servicecatalog as servicecatalog;\n\n#[::tokio::main]\nasync fn main() -> Result<(), servicecatalog::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_servicecatalog::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing the AWS WAF V2 Client - AWS SDK for Rust\nDESCRIPTION: This Rust code initializes an AWS WAF V2 client asynchronously using the AWS SDK for Rust. It loads the configuration from the environment, constructs the client, and is designed to be run as an async Tokio main function. The snippet assumes the dependencies 'aws-config' and 'aws-sdk-wafv2' (as configured in Cargo.toml) and requires a properly configured AWS credential environment. The main function is marked for no runtime execution in docs (no_run), and the client is ready to perform WAF API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wafv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_wafv2 as wafv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), wafv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_wafv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS S3Outposts Service Client - Rust\nDESCRIPTION: This Rust snippet shows how to asynchronously initialize an AWS S3Outposts client using the aws-sdk-s3outposts crate and aws-config for environment-based configuration. The example requires prior inclusion of specified dependencies in Cargo.toml, as well as Tokio for async execution. It demonstrates how to load the AWS configuration, instantiate the client, and make future SDK calls, returning a Result to handle possible errors. Key parameters include environment setup and async runtime readiness; the snippet forms the basis for making operations against S3 on Outposts.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3outposts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_s3outposts as s3outposts;\n\n#[::tokio::main]\nasync fn main() -> Result<(), s3outposts::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_s3outposts::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an aws-sdk-ssmcontacts Client in Rust\nDESCRIPTION: This Rust code demonstrates how to initialize a client for the AWS Systems Manager Incident Manager Contacts service. It uses `tokio::main` for the asynchronous entry point, loads AWS configuration from the environment using `aws_config::load_from_env()`, and then creates a new `aws_sdk_ssmcontacts::Client` instance using the loaded configuration. This client object is then used to make API calls to the SSM Contacts service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmcontacts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssmcontacts as ssmcontacts;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssmcontacts::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssmcontacts::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Asynchronous `aws-sdk-servicequotas` Client in Rust\nDESCRIPTION: Demonstrates the basic structure for creating an asynchronous Service Quotas client in Rust using the AWS SDK for Rust. It uses `tokio::main` as the async entry point, loads AWS configuration from the environment using `aws_config::load_from_env`, and then instantiates the `aws_sdk_servicequotas::Client` with this configuration. The `no_run` attribute indicates this snippet is illustrative and not intended for direct execution without further implementation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicequotas/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_servicequotas as servicequotas;\n\n#[::tokio::main]\nasync fn main() -> Result<(), servicequotas::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_servicequotas::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kendra Client in Rust\nDESCRIPTION: Basic example of creating an AWS Kendra client using environment configuration. Shows async main function setup with Tokio runtime and error handling for the Kendra client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kendra/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kendra as kendra;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kendra::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kendra::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Terminating an Instance in Auto Scaling Group in Rust\nDESCRIPTION: This code shows how to terminate a specific instance within an Auto Scaling group using the TerminateInstanceInAutoScalingGroup operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L456\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lightsail SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS Lightsail SDK and required dependencies to a Rust project. Includes aws-config, aws-sdk-lightsail, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lightsail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lightsail = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Compute Optimizer Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK Compute Optimizer client in a Rust application. It loads the configuration from the environment and initializes the client, setting up the basic structure for making API calls to the Compute Optimizer service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/computeoptimizer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_computeoptimizer as computeoptimizer;\n\n#[::tokio::main]\nasync fn main() -> Result<(), computeoptimizer::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_computeoptimizer::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS Support Client in Rust\nDESCRIPTION: Demonstrates how to initialize the AWS Support client in a Rust application. It uses `tokio` for the asynchronous runtime, loads AWS configuration from the environment using `aws_config::load_from_env()`, and then creates an instance of `aws_sdk_support::Client`.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/support/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_support as support;\n\n#[::tokio::main]\nasync fn main() -> Result<(), support::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_support::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK ConnectParticipant Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK ConnectParticipant client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectparticipant/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connectparticipant as connectparticipant;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connectparticipant::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connectparticipant::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing B2BI Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a B2BI client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the B2BI service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/b2bi/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_b2bi as b2bi;\n\n#[::tokio::main]\nasync fn main() -> Result<(), b2bi::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_b2bi::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS QuickSight Client in Rust\nDESCRIPTION: Demonstrates how to initialize and use the AWS QuickSight client in a Rust application. The code loads configuration from environment variables and creates a new QuickSight client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/quicksight/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_quicksight as quicksight;\n\n#[::tokio::main]\nasync fn main() -> Result<(), quicksight::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_quicksight::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ChimesdkVoice Client in Rust\nDESCRIPTION: Example of creating and initializing an AWS ChimesdkVoice client using the Rust SDK. Shows basic setup with environment configuration and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkvoice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chimesdkvoice as chimesdkvoice;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chimesdkvoice::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chimesdkvoice::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS API Gateway SDK in Cargo.toml\nDESCRIPTION: Dependencies configuration for setting up AWS API Gateway SDK in a Rust project. Includes required packages for AWS config, API Gateway SDK, and Tokio runtime for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-apigateway = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running describe-asset.rs Command for AWS IoT SiteWise in Rust\nDESCRIPTION: Command syntax for describing an AWS IoT SiteWise asset by ID with options for specifying region and verbose output. Requires an asset ID parameter.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sitewise/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin describe-asset -- -a ASSET-ID [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Describing ECR Repositories with AWS SDK for Rust\nDESCRIPTION: This code implements functionality to describe ECR repositories using the AWS SDK for Rust. It references line 22 in the describe-repos.rs file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ecr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Reference to line 22 in describe-repos.rs\n// Actual code not provided in the content\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SageMaker Geospatial Client with Tokio (Rust)\nDESCRIPTION: This Rust snippet demonstrates how to initialize the SageMaker Geospatial client using asynchronous code with Tokio. It loads AWS configuration from the environment, creates a client instance, and provides a placeholder for making API calls. Dependencies include aws-sdk-sagemakergeospatial, aws-config, and Tokio for async runtime. The main function is asynchronous and returns a Result with the library's Error type. Inputs are loaded automatically by aws-config; the output is a ready-to-use client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakergeospatial/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakergeospatial as sagemakergeospatial;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakergeospatial::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakergeospatial::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Uploading Lexicon to Amazon Polly with Rust SDK\nDESCRIPTION: Example showing how to upload a pronunciation lexicon to Amazon Polly using the AWS SDK for Rust\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/polly/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/put-lexicon.rs#L34\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SQS SDK and Dependencies in Cargo.toml (Rust)\nDESCRIPTION: This snippet shows how to add the aws-sdk-sqs, aws-config, and tokio crates to the Cargo.toml dependencies section. It ensures that the correct versions and necessary features are included for async execution and the latest AWS SDK behaviors. No special input is required other than copying to your Cargo.toml file. Limitation: This setup assumes you are using a Rust project and wish to use asynchronous SQS operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sqs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sqs = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Billing Conductor SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency specifications required to use the AWS Billing Conductor SDK, including aws-config, aws-sdk-billingconductor, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/billingconductor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-billingconductor = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS VPC Lattice Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS VPC Lattice service client within an asynchronous Rust application using the `tokio` runtime. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then instantiates the `aws_sdk_vpclattice::Client`. This client object is used for subsequent calls to the VPC Lattice API.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/vpclattice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_vpclattice as vpclattice;\n\n#[::tokio::main]\nasync fn main() -> Result<(), vpclattice::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_vpclattice::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Shield Client with Tokio in Rust\nDESCRIPTION: Demonstrates how to asynchronously initialize an AWS Shield Advanced client using the Tokio runtime in Rust. The example includes importing the SDK, loading AWS configuration from the environment, and creating a client instance. The function is async and intended for environments with Tokio, returning a Result and ready to support actual API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/shield/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_shield as shield;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), shield::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_shield::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-ssmincidents Client in Rust\nDESCRIPTION: This Rust code demonstrates how to initialize an asynchronous client for the AWS SSM Incidents service. It first loads AWS configuration from environment variables using `aws_config::load_from_env().await`. Then, it creates an instance of `aws_sdk_ssmincidents::Client` using the loaded configuration. The `#[::tokio::main]` attribute indicates the function runs within the Tokio asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmincidents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssmincidents as ssmincidents;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssmincidents::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssmincidents::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS FinSpace Data Client\nDESCRIPTION: Example showing how to create and initialize an AWS FinSpace Data client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/finspacedata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_finspacedata as finspacedata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), finspacedata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_finspacedata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Resource Access Manager Client with Tokio in Rust\nDESCRIPTION: This asynchronous Rust snippet shows how to initialize an aws-sdk-ram client using configuration loaded from the environment. It requires the modules aws-sdk-ram and aws-config, with Tokio providing async execution. The entry function is marked as async via the #[::tokio::main] macro. Inputs include AWS credentials in the environment; outputs depend on calls made with the client (not shown here). The setup enables making subsequent RAM service API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ram/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ram as ram;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ram::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ram::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Launch Wizard Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Launch Wizard client using the SDK. Shows async main function setup with error handling and configuration loading from environment.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/launchwizard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_launchwizard as launchwizard;\n\n#[::tokio::main]\nasync fn main() -> Result<(), launchwizard::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_launchwizard::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Firehose Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Firehose client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/firehose/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_firehose as firehose;\n\n#[::tokio::main]\nasync fn main() -> Result<(), firehose::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_firehose::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Batch Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Batch client using the Rust SDK. Demonstrates basic setup with environment configuration and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/batch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_batch as batch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), batch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_batch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon SESv2 Client using AWS SDK for Rust (Rust)\nDESCRIPTION: This Rust code demonstrates how to asynchronously initialize an Amazon SESv2 client using the SDK after loading configuration from the environment with aws-config. Requires aws-config, aws-sdk-sesv2, and tokio as dependencies. The client is constructed with a loaded configuration and can then be used to make SES API calls. The code must be executed in an asynchronous context and uses the #[tokio::main] macro for this purpose. The function returns a Result type and uses proper error handling with sesv2::Error.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sesv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sesv2 as sesv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sesv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sesv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Cloud Directory Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK Cloud Directory client in Rust. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/clouddirectory/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_clouddirectory as clouddirectory;\n\n#[::tokio::main]\nasync fn main() -> Result<(), clouddirectory::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_clouddirectory::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS CloudHSM SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS CloudHSM SDK. It includes the aws-config, aws-sdk-cloudhsm, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudhsm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudhsm = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CodeConnections Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK CodeConnections client in a Rust application. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to AWS CodeConnections.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeconnections/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codeconnections as codeconnections;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codeconnections::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codeconnections::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaStore Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and use the AWS MediaStore client in a Rust application. Shows creating the configuration from environment variables and initializing the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediastore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediastore as mediastore;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediastore::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediastore::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudTrail Client in Rust\nDESCRIPTION: Basic example of creating an AWS CloudTrail client using the Rust SDK. Shows async main function setup, environment configuration loading, and client initialization with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudtrail/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudtrail as cloudtrail;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudtrail::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudtrail::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EC2 Instance Connect Client - Rust\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an EC2 Instance Connect client using environment configuration. Shows async main function setup with proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ec2instanceconnect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ec2instanceconnect as ec2instanceconnect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ec2instanceconnect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ec2instanceconnect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using the AWS Outposts Client in Rust\nDESCRIPTION: This snippet demonstrates how to create and initialize an AWS Outposts client in a Rust application. It loads the configuration from environment variables and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/outposts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_outposts as outposts;\n\n#[::tokio::main]\nasync fn main() -> Result<(), outposts::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_outposts::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ECR Images with AWS SDK for Rust\nDESCRIPTION: This code implements functionality to list images in ECR repositories using the AWS SDK for Rust. It references line 26 in the list-images.rs file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ecr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\n// Reference to line 26 in list-images.rs\n// Actual code not provided in the content\n```\n\n----------------------------------------\n\nTITLE: Listing Kinesis Streams in Rust\nDESCRIPTION: Code example for listing all available Kinesis streams using the AWS SDK for Rust. Located at src/bin/list-streams.rs line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/kinesis/README.md#2025-04-23_snippet_3\n\n\n\n----------------------------------------\n\nTITLE: Initializing AWS RoboMaker Client in Rust\nDESCRIPTION: Example of creating and using an AWS RoboMaker client in a Rust application. Demonstrates loading configuration from environment variables and setting up the main async function with proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/robomaker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_robomaker as robomaker;\n\n#[::tokio::main]\nasync fn main() -> Result<(), robomaker::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_robomaker::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parameter Values from AWS Systems Manager with Rust\nDESCRIPTION: This code snippet references the implementation for retrieving parameter values from AWS Systems Manager. The functionality is located in the ssm.rs file at line 28 in the EC2 directory.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ssm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nGetParameter\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Elastic Transcoder Client\nDESCRIPTION: Basic Rust code example showing how to initialize and create an AWS Elastic Transcoder client using environment configuration. Demonstrates async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elastictranscoder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elastictranscoder as elastictranscoder;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elastictranscoder::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elastictranscoder::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-workspacesweb Client in Rust\nDESCRIPTION: Demonstrates how to create an asynchronous AWS WorkSpaces Web client in Rust using the AWS SDK for Rust. It loads AWS configuration from the environment using `aws_config::load_from_env()` and initializes the `Client` using this configuration within a Tokio async runtime. Requires the necessary SDK crates (`aws-config`, `aws-sdk-workspacesweb`) and Tokio as dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspacesweb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workspacesweb as workspacesweb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workspacesweb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workspacesweb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK FIS Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK FIS client in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the FIS service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_fis as fis;\n\n#[::tokio::main]\nasync fn main() -> Result<(), fis::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_fis::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SSO Admin Client with Tokio in Rust\nDESCRIPTION: Demonstrates how to initialize the AWS SDK for SSO Admin client asynchronously in a Rust application using Tokio. The snippet loads configuration from the environment, constructs the client, and is ready for API calls. Requires aws-config, aws-sdk-ssoadmin, and Tokio with the full features enabled. The async main function returns a Result and must be run inside Tokio's runtime. This snippet serves as a template for integrating further API operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssoadmin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssoadmin as ssoadmin;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), ssoadmin::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_ssoadmin::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenSearch Serverless Client in Rust\nDESCRIPTION: Basic code example demonstrating how to create and initialize an OpenSearch Serverless client in Rust. The example loads configuration from environment variables and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opensearchserverless/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_opensearchserverless as opensearchserverless;\n\n#[::tokio::main]\nasync fn main() -> Result<(), opensearchserverless::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_opensearchserverless::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-supplychain Client in Rust\nDESCRIPTION: Demonstrates the basic setup for creating an AWS Supply Chain client within an asynchronous Rust application using the Tokio runtime. It uses `aws_config::load_from_env()` to asynchronously load AWS configuration (like credentials and region) from the environment and then instantiates `aws_sdk_supplychain::Client` using this configuration. The example uses the `tokio::main` macro for the asynchronous entry point and returns a `Result` to handle potential errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/supplychain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_supplychain as supplychain;\n\n#[::tokio::main]\nasync fn main() -> Result<(), supplychain::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_supplychain::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dependencies for AWS RDS SDK in Rust\nDESCRIPTION: This code snippet shows how to add the necessary dependencies to a Cargo.toml file for working with the AWS RDS SDK in Rust. It includes aws-config, aws-sdk-rds, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rds/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rds = \"1.83.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Implementing SES v2 Newsletter Demo\nDESCRIPTION: File paths and references for implementing Amazon SES v2 API newsletter functionality, including creating email identities, templates, contacts, and sending emails. Contains links to source code examples for various SES operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ses/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [CreateContact](src/bin/create-contact.rs#L30)\n- [CreateContactList](src/bin/create-contact-list.rs#L26)\n- [CreateEmailIdentity](src/newsletter.rs#L57)\n- [CreateEmailTemplate](src/newsletter.rs#L100)\n- [DeleteContactList](src/newsletter.rs#L347)\n- [DeleteEmailIdentity](src/newsletter.rs#L385)\n- [DeleteEmailTemplate](src/newsletter.rs#L360)\n- [GetEmailIdentity](src/bin/is-email-verified.rs#L26)\n- [ListContactLists](src/bin/list-contact-lists.rs#L22)\n- [ListContacts](src/bin/list-contacts.rs#L26)\n- [SendEmail](src/bin/send-email.rs#L39)\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CloudControl Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK CloudControl client in a Rust application. It uses the aws_config crate to load configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudcontrol/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudcontrol as cloudcontrol;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudcontrol::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudcontrol::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Firehose SDK in Rust\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using aws-sdk-firehose. Includes aws-config, aws-sdk-firehose, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/firehose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-firehose = \"1.71.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Connect Client in Rust\nDESCRIPTION: Basic example showing how to create and initialize an AWS Connect client using environment configuration. Demonstrates the async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connect as connect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: PutRecordBatch Operation with AWS SDK for Rust\nDESCRIPTION: This code snippet demonstrates how to use the PutRecordBatch operation with Amazon Data Firehose using the AWS SDK for Rust. It's referenced in the documentation but the actual implementation is located at src/bin/put-records-batch.rs line 30.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/firehose/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Referenced at src/bin/put-records-batch.rs#L30\n```\n\n----------------------------------------\n\nTITLE: Adding Amazon Connect Wisdom SDK Dependencies Using Cargo.toml - TOML\nDESCRIPTION: This snippet specifies the necessary dependencies to include in a Rust project's Cargo.toml to use the aws-sdk-wisdom crate asynchronously. It requires aws-config with the 'behavior-version-latest' feature, the aws-sdk-wisdom crate at a specific version, and tokio with the 'full' feature set. These dependencies allow for configuration loading and async operations, which are mandatory for leveraging the SDK's full functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wisdom/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-wisdom = \\\"1.65.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Entity Resolution Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Entity Resolution client using the SDK. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/entityresolution/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_entityresolution as entityresolution;\n\n#[::tokio::main]\nasync fn main() -> Result<(), entityresolution::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_entityresolution::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SageMaker A2I Runtime Client in Rust (Rust)\nDESCRIPTION: Demonstrates the basic Rust code structure for initializing the SageMaker A2I Runtime client. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then creates a `Client` instance within a Tokio asynchronous main function, preparing it for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakera2iruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakera2iruntime as sagemakera2iruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakera2iruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakera2iruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Route53Profiles Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS Route53Profiles client using the aws-sdk-route53profiles crate. The example loads configuration from environment variables and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53profiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53profiles as route53profiles;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53profiles::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53profiles::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Elastic Beanstalk Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS Elastic Beanstalk client in Rust. It loads the configuration from the environment and initializes a new client, which can then be used to make API calls to AWS Elastic Beanstalk.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticbeanstalk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elasticbeanstalk as elasticbeanstalk;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elasticbeanstalk::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elasticbeanstalk::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK S3 in Cargo.toml\nDESCRIPTION: Specifies the necessary crate dependencies (`aws-config`, `aws-sdk-s3`, `tokio`) in a `Cargo.toml` file to use the AWS SDK for Rust S3 client. `aws-config` is used for loading configuration, `aws-sdk-s3` provides the S3 client, and `tokio` is required for the asynchronous runtime. The `behavior-version-latest` feature for `aws-config` is enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-s3 = \"1.82.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running Lambda Scenario with Logging in Rust\nDESCRIPTION: This snippet shows how to run the complete Lambda scenario with debug-level logging enabled for the scenario and lambda_code_examples modules.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/lambda/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=scenario=debug,lambda_code_examples=debug cargo run --bin scenario\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS Security Lake Client in Rust\nDESCRIPTION: Demonstrates how to create an asynchronous AWS Security Lake client in Rust. It uses `aws_config::load_from_env()` to load AWS configuration (like credentials and region) from environment variables and then instantiates the `aws_sdk_securitylake::Client`. The code runs within a Tokio asynchronous runtime (`#[::tokio::main]`).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securitylake/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_securitylake as securitylake;\n\n#[::tokio::main]\nasync fn main() -> Result<(), securitylake::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_securitylake::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK GameLift Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK GameLift client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/gamelift/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_gamelift as gamelift;\n\n#[::tokio::main]\nasync fn main() -> Result<(), gamelift::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_gamelift::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AWS IoT Things in Rust\nDESCRIPTION: This code snippet demonstrates how to use the AWS SDK for Rust to call the ListThings operation, which lists the IoT things in the AWS account.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/iot/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nListThings\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-forecastquery Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the aws-sdk-forecastquery crate. It includes aws-config, aws-sdk-forecastquery, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/forecastquery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-forecastquery = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Deleting an ECS Cluster in Rust\nDESCRIPTION: This code snippet shows how to delete an Amazon ECS cluster using the AWS SDK for Rust. The function is located in the 'cluster.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ecs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nDeleteCluster\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS BedrockRuntime Client in Rust\nDESCRIPTION: Basic example showing how to initialize an AWS BedrockRuntime client using environment configuration. The code demonstrates the async runtime setup with Tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrockruntime as bedrockruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrockruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrockruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT FleetWise Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize an AWS IoT FleetWise client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotfleetwise/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotfleetwise as iotfleetwise;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotfleetwise::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotfleetwise::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudWatch Logs Client in Rust\nDESCRIPTION: Basic example showing how to create and initialize an AWS CloudWatch Logs client using the Rust SDK. Demonstrates environment configuration loading and client instantiation in an async context.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatchlogs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudwatchlogs as cloudwatchlogs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudwatchlogs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudwatchlogs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS KMS Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS KMS client using the Rust SDK. Shows basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kms as kms;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kms::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kms::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SageMaker Edge Manager Client - aws-sdk-sagemakeredge - Rust\nDESCRIPTION: This Rust snippet shows how to asynchronously create an AWS SageMaker Edge Manager client using the aws-sdk-sagemakeredge crate. The code loads configuration from the environment, initializes the client, and leaves a placeholder for actual API calls. Required dependencies are the aws-sdk-sagemakeredge and aws-config crates, and Tokio as the asynchronous runtime. The function expects environment variables for configuration and returns a Result indicating setup success or failure; proper AWS credentials and configuration are prerequisites.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakeredge/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakeredge as sagemakeredge;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakeredge::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakeredge::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing ApplicationAutoScaling Client in AWS SDK for Rust\nDESCRIPTION: Creates an ApplicationAutoScaling client using the AWS SDK for Rust. This example shows how to load configuration from environment variables and initialize the client for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationautoscaling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_applicationautoscaling as applicationautoscaling;\n\n#[::tokio::main]\nasync fn main() -> Result<(), applicationautoscaling::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_applicationautoscaling::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS EMR Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS EMR client in Rust using the aws-sdk-emr crate. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emr/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_emr as emr;\n\n#[::tokio::main]\nasync fn main() -> Result<(), emr::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_emr::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Recycle Bin Client in Rust\nDESCRIPTION: This code example demonstrates how to initialize and use the AWS SDK Recycle Bin client in Rust. It loads configuration from environment variables and creates a new client instance ready to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rbin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rbin as rbin;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rbin::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rbin::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AMP Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Managed Service for Prometheus (AMP) client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to AMP.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_amp as amp;\n\n#[::tokio::main]\nasync fn main() -> Result<(), amp::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_amp::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Migration Hub Config Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Migration Hub Config client using environment configuration. Shows basic async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubconfig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_migrationhubconfig as migrationhubconfig;\n\n#[::tokio::main]\nasync fn main() -> Result<(), migrationhubconfig::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_migrationhubconfig::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Braket Client in Rust\nDESCRIPTION: This code demonstrates how to create an Amazon Braket client using the aws-sdk-braket crate. It loads the AWS configuration from the environment and initializes a new client instance, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/braket/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_braket as braket;\n\n#[::tokio::main]\nasync fn main() -> Result<(), braket::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_braket::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK SimSpace Weaver Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows the required Cargo.toml entries for integrating the aws-sdk-simspaceweaver crate into a Rust project. It specifies the minimum versions for aws-config, aws-sdk-simspaceweaver, and tokio with necessary features. These dependencies are prerequisites for building projects that utilize the client SDK for SimSpace Weaver.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/simspaceweaver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-simspaceweaver = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS Polly Client in Rust\nDESCRIPTION: Code example showing how to create and use an Amazon Polly client in a Rust application. Demonstrates setting up the async runtime with Tokio, loading configuration from environment variables, and creating the client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/polly/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_polly as polly;\n\n#[::tokio::main]\nasync fn main() -> Result<(), polly::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_polly::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Bedrock Data Automation SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Bedrock Data Automation SDK with Rust. Includes aws-config, aws-sdk-bedrockdataautomation, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockdataautomation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrockdataautomation = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Glue Crawler (Rust)\nDESCRIPTION: Example showing how to create a new AWS Glue crawler that crawls S3 buckets for CSV data\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L50\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Invoicing Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS Invoicing client using the aws-sdk-invoicing crate. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the AWS Invoicing service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/invoicing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_invoicing as invoicing;\n\n#[::tokio::main]\nasync fn main() -> Result<(), invoicing::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_invoicing::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a BedrockAgent Client in Rust\nDESCRIPTION: This code demonstrates how to create a BedrockAgent client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client. The main function is asynchronous and uses tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockagent/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrockagent as bedrockagent;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrockagent::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrockagent::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Message to SQS Queue in Rust\nDESCRIPTION: This code snippet shows how to send a message to an SQS queue using the AWS SDK for Rust. It creates an SQS client and calls the send_message operation with a message body and queue URL.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sqs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nlet resp = client\n    .send_message()\n    .queue_url(&queue_url)\n    .message_body(\"hello world\")\n    .send()\n    .await?\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Secrets Manager Client in Rust\nDESCRIPTION: This Rust code snippet demonstrates how to initialize an AWS Secrets Manager client. It uses `aws_config::load_from_env()` to asynchronously load AWS configuration from environment variables and then creates a new `Client` instance from the `aws_sdk_secretsmanager` crate using the loaded configuration. The `#[::tokio::main]` attribute sets up the Tokio async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/secretsmanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_secretsmanager as secretsmanager;\n\n#[::tokio::main]\nasync fn main() -> Result<(), secretsmanager::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_secretsmanager::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Greengrass Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK Greengrass client in a Rust application. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to AWS IoT Greengrass services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/greengrass/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_greengrass as greengrass;\n\n#[::tokio::main]\nasync fn main() -> Result<(), greengrass::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_greengrass::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon Transcribe Streaming Client with Tokio (Rust)\nDESCRIPTION: This Rust snippet shows how to asynchronously initialize an aws-sdk-transcribestreaming client using Tokio as the async runtime. After importing the crate, the example demonstrates loading the AWS configuration from environment variables and passing it to construct the SDK client. The asynchronous main function returns Result<(), transcribestreaming::Error>, ensuring that any SDK or connection errors are handled. Inputs include environment credentials and configuration; outputs are a ready-to-use client object for making Amazon Transcribe streaming API calls. The snippet requires aws-config, aws-sdk-transcribestreaming, and tokio as dependencies, and must run in an async context. No transcription calls are performed in the snippet itself.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transcribestreaming/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_transcribestreaming as transcribestreaming;\n\n#[::tokio::main]\nasync fn main() -> Result<(), transcribestreaming::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_transcribestreaming::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Putting EBS Snapshot Block in Rust\nDESCRIPTION: This code snippet shows how to put a block in an EBS snapshot using the AWS SDK for Rust. It utilizes the PutSnapshotBlock operation from the Amazon EBS API.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ebs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclient.put_snapshot_block().snapshot_id(snapshot_id).block_index(i as i32).block_data(block_data).data_length(block_size).checksum(checksum).checksum_algorithm(ChecksumAlgorithm::Sha256).send().await?\n```\n\n----------------------------------------\n\nTITLE: Adding SageMaker Feature Store Runtime Dependencies in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies in the Cargo.toml file to use the AWS SDK for SageMaker Feature Store Runtime in a Rust project. It includes `aws-config` for configuration loading, `aws-sdk-sagemakerfeaturestoreruntime` for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakerfeaturestoreruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakerfeaturestoreruntime = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating DB Cluster Snapshot with Aurora in Rust\nDESCRIPTION: This code snippet shows how to create a DB cluster snapshot using the AWS SDK for Rust with Aurora. It's part of the basic Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n// Code for CreateDBClusterSnapshot operation\n// Located in src/rds.rs#L206\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CloudWatch Dependencies in Cargo.toml\nDESCRIPTION: Defines the required dependencies in Cargo.toml for using AWS CloudWatch SDK with Rust. Includes aws-config, aws-sdk-cloudwatch, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudwatch = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS LakeFormation Client\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS LakeFormation client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lakeformation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lakeformation as lakeformation;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lakeformation::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lakeformation::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Billing Client in Rust\nDESCRIPTION: This code demonstrates how to create and initialize an AWS SDK Billing client in Rust. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/billing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_billing as billing;\n\n#[::tokio::main]\nasync fn main() -> Result<(), billing::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_billing::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DynamoDB Streams Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a DynamoDB Streams client using the aws-sdk-dynamodbstreams crate. It loads the AWS configuration from the environment and initializes an asynchronous client within a Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dynamodbstreams/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dynamodbstreams as dynamodbstreams;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dynamodbstreams::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dynamodbstreams::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IAM SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS IAM SDK with Rust. Includes aws-config, aws-sdk-iam, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iam/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iam = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK MQ Client in Rust\nDESCRIPTION: Example showing how to create and initialize an Amazon MQ client using the AWS SDK for Rust. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mq/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mq as mq;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mq::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mq::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Rekognition SDK Dependencies to Cargo.toml\nDESCRIPTION: Dependencies configuration for using AWS Rekognition SDK in a Rust project. Includes aws-config, aws-sdk-rekognition, and tokio with full features for asynchronous operation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rekognition/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rekognition = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS RDS Client in Rust\nDESCRIPTION: This code demonstrates how to initialize an AWS RDS client in a Rust application. It loads configuration from environment variables and creates a new client instance that can be used to make API calls to Amazon RDS.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rds/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rds as rds;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rds::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rds::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaPackage VOD Client in Rust\nDESCRIPTION: This code demonstrates how to create a MediaPackage VOD client using the AWS SDK for Rust. It loads configuration from environment variables and initializes a client instance that can be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackagevod/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediapackagevod as mediapackagevod;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediapackagevod::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediapackagevod::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppSync Client in Rust\nDESCRIPTION: This example demonstrates how to create an AWS AppSync client in Rust using the SDK. It loads the configuration from environment variables and initializes a client instance for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appsync/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appsync as appsync;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appsync::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appsync::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Trusted Advisor SDK Dependencies in TOML\nDESCRIPTION: Specifies the necessary crates and their versions to include in a Rust project's `Cargo.toml` file to use the AWS Trusted Advisor SDK. It requires `aws-config` for configuration loading, `aws-sdk-trustedadvisor` for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/trustedadvisor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-trustedadvisor = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Describing DB Clusters with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates how to describe DB clusters using the AWS SDK for Rust with Aurora. It's part of the 'Hello Aurora' example, showcasing basic Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeDBClusters operation\n// Located in src/bin/hello-world.rs\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Marketplace Metering Client in Rust\nDESCRIPTION: This code demonstrates how to create a Marketplace Metering client by loading AWS configuration from the environment variables and initializing the client with that configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacemetering/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplacemetering as marketplacemetering;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplacemetering::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplacemetering::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS BedrockRuntime SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS BedrockRuntime SDK including aws-config, aws-sdk-bedrockruntime, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrockruntime = \"1.82.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Control Catalog Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Rust project's Cargo.toml file to use the AWS SDK Control Catalog module.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/controlcatalog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-controlcatalog = \"1.48.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing ChimeSDKMediaPipelines Client in Rust\nDESCRIPTION: This code demonstrates how to create a ChimeSDKMediaPipelines client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, setting up the basic structure for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmediapipelines/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chimesdkmediapipelines as chimesdkmediapipelines;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chimesdkmediapipelines::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chimesdkmediapipelines::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon SQS Client Using AWS SDK (Rust)\nDESCRIPTION: This Rust code demonstrates initializing the Amazon SQS client asynchronously using the AWS SDK. It sets up the required runtime using Tokio, loads default AWS configuration from the environment, and creates the client for SQS operations. Dependencies include the aws-sdk-sqs and aws-config crates, and the tokio runtime. Input: No input required; configuration is read from the environment. Output: An initialized SQS client ready to use for sending/receiving messages. Limitation: Assumes valid AWS credentials and async context.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sqs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sqs as sqs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sqs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sqs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Collection for Auto Scaling in Rust\nDESCRIPTION: This code shows how to enable CloudWatch metrics collection for an Auto Scaling group using the EnableMetricsCollection operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L294\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS Storage Gateway Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS Storage Gateway client instance within an asynchronous Rust application using Tokio. It first loads the AWS configuration from the environment using `aws_config::load_from_env().await` and then instantiates the `aws_sdk_storagegateway::Client` with the loaded configuration. The example is within an async main function marked with `#[::tokio::main]`.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/storagegateway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_storagegateway as storagegateway;\n\n#[::tokio::main]\nasync fn main() -> Result<(), storagegateway::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_storagegateway::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Keyspaces Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Keyspaces client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/keyspaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_keyspaces as keyspaces;\n\n#[::tokio::main]\nasync fn main() -> Result<(), keyspaces::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_keyspaces::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing User Pools with AWS SDK for Rust\nDESCRIPTION: Example code showing how to list user pools using the Amazon Cognito Identity Provider service. The reference is made to an implementation file located at src/bin/list-user-pools.rs line 26.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/cognitoidentityprovider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// Code not directly visible in the provided text, but referenced at src/bin/list-user-pools.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kendra Ranking Client\nDESCRIPTION: Basic example showing how to create and initialize an AWS Kendra Ranking client using environment configuration. Demonstrates async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kendraranking/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kendraranking as kendraranking;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kendraranking::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kendraranking::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating DB Cluster Parameter Group with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates creating a DB cluster parameter group using the AWS SDK for Rust with Aurora. It's part of the essential Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n// Code for CreateDBClusterParameterGroup operation\n// Located in src/rds.rs#L88\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK for Verified Permissions Dependencies in Rust (TOML)\nDESCRIPTION: This snippet demonstrates how to configure dependencies in your Cargo.toml file to use the aws-sdk-verifiedpermissions crate along with aws-config and tokio for asynchronous operations. It specifies exact versions and required features, which are necessary prerequisites for building applications that interact with Amazon Verified Permissions via the AWS SDK for Rust. No parameters are required beyond copying the dependency blocks into the Cargo.toml file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/verifiedpermissions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-verifiedpermissions = \\\"1.72.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK DataSync Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK DataSync client in a Rust application. It shows the basic setup for creating a client using environment configuration and handling potential errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datasync/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_datasync as datasync;\n\n#[::tokio::main]\nasync fn main() -> Result<(), datasync::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_datasync::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MediaConnect SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS MediaConnect SDK with Rust. Includes aws-config, aws-sdk-mediaconnect, and tokio dependencies with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediaconnect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediaconnect = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Social Messaging Client in Rust\nDESCRIPTION: Demonstrates the basic structure for initializing an AWS Social Messaging service client within a Rust application using the `aws-sdk-socialmessaging` crate. It uses the `tokio` runtime for asynchronous execution and loads AWS configuration (including credentials) from the environment using `aws_config::load_from_env()` before creating the client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/socialmessaging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n```rust,no_run\nuse aws_sdk_socialmessaging as socialmessaging;\n\n#[::tokio::main]\nasync fn main() -> Result<(), socialmessaging::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_socialmessaging::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n```\n\n----------------------------------------\n\nTITLE: List SageMaker Notebook Instances using Rust SDK\nDESCRIPTION: Example code for listing SageMaker notebook instances using the AWS SDK for Rust. Located in src/bin/sagemaker-helloworld.rs line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sagemaker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nListNotebookInstances\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS OAM Client in Rust\nDESCRIPTION: This Rust code example demonstrates how to create and initialize an AWS OAM client. It loads the configuration from environment variables and initializes a new client that can be used to interact with the OAM service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/oam/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_oam as oam;\n\n#[::tokio::main]\nasync fn main() -> Result<(), oam::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_oam::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Backup Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK Backup service. It includes the aws-config, aws-sdk-backup, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-backup = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing MediaPackage v2 Client in Rust\nDESCRIPTION: Example of creating a MediaPackage v2 client using environment configuration. Shows basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackagev2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediapackagev2 as mediapackagev2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediapackagev2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediapackagev2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK GeoRoutes Client in Rust\nDESCRIPTION: Basic example of creating an AWS SDK GeoRoutes client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/georoutes/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_georoutes as georoutes;\n\n#[::tokio::main]\nasync fn main() -> Result<(), georoutes::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_georoutes::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AppConfig Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AppConfig client in a Rust application. It loads the AWS configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appconfig/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appconfig as appconfig;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appconfig::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appconfig::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeGuru Reviewer Dependency in Rust\nDESCRIPTION: This snippet shows how to add the aws-sdk-codegurureviewer dependency to a Rust project's Cargo.toml file. It includes the necessary dependencies for the AWS SDK and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codegurureviewer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codegurureviewer = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Inspector 2 Client in Rust\nDESCRIPTION: This code demonstrates how to create an Amazon Inspector 2 client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the Inspector 2 service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspector2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_inspector2 as inspector2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), inspector2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_inspector2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lookout Metrics Client\nDESCRIPTION: Basic implementation of AWS Lookout Metrics client initialization in Rust. Demonstrates async setup using tokio runtime and environment configuration loading.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutmetrics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lookoutmetrics as lookoutmetrics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lookoutmetrics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lookoutmetrics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Describing DB Clusters with Aurora in Rust\nDESCRIPTION: This code snippet shows how to describe DB clusters using the AWS SDK for Rust with Aurora. It's part of retrieving information about Aurora DB clusters.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeDBClusters operation\n// Located in src/rds.rs#L106\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Personalize Events SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This TOML configuration snippet demonstrates how to add the necessary dependencies for using the AWS Personalize Events SDK in a Rust project. It includes `aws-config` for loading AWS configuration (with the `behavior-version-latest` feature), `aws-sdk-personalizeevents` for the specific service client, and `tokio` for the asynchronous runtime (with the `full` feature). These dependencies are required to build and run applications interacting with the Personalize Events service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalizeevents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-personalizeevents = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppRunner Client in Rust\nDESCRIPTION: This example demonstrates how to create an AWS AppRunner client in Rust. It loads configuration from environment variables and initializes a client instance that can be used to make API calls to the App Runner service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apprunner/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_apprunner as apprunner;\n\n#[::tokio::main]\nasync fn main() -> Result<(), apprunner::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_apprunner::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS IoT SiteWise SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS IoT SiteWise SDK dependencies to a Rust project. Includes required dependencies for aws-config, aws-sdk-iotsitewise, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotsitewise/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotsitewise = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Evidently Client in Rust\nDESCRIPTION: Basic implementation showing how to create and initialize an AWS SDK Evidently client using environment configuration. Demonstrates async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/evidently/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_evidently as evidently;\n\n#[::tokio::main]\nasync fn main() -> Result<(), evidently::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_evidently::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Service Catalog AppRegistry Client - Rust\nDESCRIPTION: This Rust code demonstrates the asynchronous initialization of the AWS Service Catalog AppRegistry client using the aws-config and aws-sdk-servicecatalogappregistry crates. It loads the default AWS config from the environment, constructs a service client, and suggests where calls to AWS APIs may be made. Dependencies include Tokio for async runtime support and the AWS SDK crates. Inputs are obtained implicitly from environment variables or shared configuration files; the output is a ready-to-use client object for making requests.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicecatalogappregistry/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_servicecatalogappregistry as servicecatalogappregistry;\n\n#[::tokio::main]\nasync fn main() -> Result<(), servicecatalogappregistry::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_servicecatalogappregistry::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-s3tables Client in Rust\nDESCRIPTION: Demonstrates how to initialize the AWS S3 Tables client in a Rust application using an asynchronous `tokio` runtime. It loads AWS configuration from environment variables using `aws_config::load_from_env` and then creates a new `aws_sdk_s3tables::Client` instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3tables/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_s3tables as s3tables;\n\n#[::tokio::main]\nasync fn main() -> Result<(), s3tables::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_s3tables::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Route 53 Resolver Client in Rust\nDESCRIPTION: This Rust code snippet illustrates the basic setup for creating an AWS Route 53 Resolver client. It uses `aws_config::load_from_env().await` within an asynchronous `main` function (driven by `tokio`) to load AWS configuration from environment variables. An instance of `aws_sdk_route53resolver::Client` is then created using the loaded configuration, ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53resolver/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53resolver as route53resolver;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53resolver::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53resolver::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Describing DB Engine Versions with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates describing DB engine versions using the AWS SDK for Rust with Aurora. It's useful for getting information about available Aurora engine versions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeDBEngineVersions operation\n// Located in src/rds.rs#L56\n```\n\n----------------------------------------\n\nTITLE: Modifying DB Cluster Parameter Group with Aurora in Rust\nDESCRIPTION: This code snippet shows how to modify a DB cluster parameter group using the AWS SDK for Rust with Aurora. It's part of managing Aurora DB cluster configurations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_13\n\nLANGUAGE: rust\nCODE:\n```\n// Code for ModifyDBClusterParameterGroup operation\n// Located in src/rds.rs#L135\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS DSQL SDK in Cargo.toml\nDESCRIPTION: Demonstrates the required dependencies in Cargo.toml for using AWS SDK DSQL with Rust. Includes aws-config, aws-sdk-dsql, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dsql/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dsql = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS WAF Regional Client in Rust\nDESCRIPTION: This Rust code snippet shows how to create a client for the AWS WAF Regional service. It uses `aws_config::load_from_env()` to asynchronously load AWS configuration from environment variables and then instantiates `aws_sdk_wafregional::Client` with this configuration. The code is designed to run within a Tokio asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wafregional/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_wafregional as wafregional;\n\n#[::tokio::main]\nasync fn main() -> Result<(), wafregional::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_wafregional::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Account Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to a Rust project's Cargo.toml file, including aws-config, aws-sdk-account, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/account/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-account = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS WorkMail SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet demonstrates how to add the necessary dependencies for AWS WorkMail support in a Rust project. It specifies the aws-config, aws-sdk-workmail, and tokio crates, including required versions and optional features needed for asynchronous execution. These dependencies are essential for configuring authentication, connecting to the WorkMail service, and running async tasks via Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workmail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workmail = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Kinesis client using environment configuration. Shows the async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesis/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesis as kinesis;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesis::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesis::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the aws-sdk-transcribe Client in Rust\nDESCRIPTION: Demonstrates how to create an Amazon Transcribe service client in Rust using the AWS SDK. The code snippet shows loading AWS configuration from the environment using `aws_config::load_from_env()` and then instantiating `aws_sdk_transcribe::Client` with this configuration. This initialization occurs within an asynchronous main function powered by the Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transcribe/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_transcribe as transcribe;\n\n#[::tokio::main]\nasync fn main() -> Result<(), transcribe::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_transcribe::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: List SageMaker Training Jobs using Rust SDK\nDESCRIPTION: Example code for listing SageMaker training jobs using the AWS SDK for Rust. Located in src/bin/list-training-jobs.rs line 24.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sagemaker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nListTrainingJobs\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK IoT Device Advisor Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK IoT Device Advisor client in a Rust application. It uses the aws_config crate to load configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotdeviceadvisor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotdeviceadvisor as iotdeviceadvisor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotdeviceadvisor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotdeviceadvisor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudFormation Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS CloudFormation client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudformation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudformation as cloudformation;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudformation::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudformation::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS WorkSpaces Client Using AWS SDK for Rust (Rust)\nDESCRIPTION: This Rust code snippet shows how to asynchronously load AWS configuration and instantiate a WorkSpaces client using the AWS SDK for Rust. The client can then be used to make API calls to the WorkSpaces service. Key dependencies include aws-config, aws-sdk-workspaces, and tokio. The main function uses the #[tokio::main] macro for asynchronous execution, and returns Result<(), workspaces::Error> to handle potential errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workspaces as workspaces;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workspaces::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workspaces::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing DevOps Guru Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a DevOps Guru client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the DevOps Guru service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/devopsguru/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_devopsguru as devopsguru;\n\n#[::tokio::main]\nasync fn main() -> Result<(), devopsguru::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_devopsguru::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Marketplace Reporting Client\nDESCRIPTION: Example code showing how to create and initialize an AWS Marketplace Reporting client using environment configuration. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacereporting/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplacereporting as marketplacereporting;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplacereporting::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplacereporting::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Data Pipeline SDK\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using the AWS Data Pipeline SDK with Rust. Includes aws-config, aws-sdk-datapipeline, and tokio dependencies with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datapipeline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-datapipeline = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for AWS SDK SNS in Cargo.toml (TOML)\nDESCRIPTION: Defines the necessary dependencies (`aws-config`, `aws-sdk-sns`, `tokio`) and their versions/features in the `Cargo.toml` file to use the AWS SDK for Rust SNS crate. This setup enables asynchronous operations using Tokio and AWS configuration loading via `aws-config`.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sns = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Comprehend Medical Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Comprehend Medical client in Rust. Shows how to load configuration from environment variables and create a new client instance using async/await pattern.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/comprehendmedical/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_comprehendmedical as comprehendmedical;\n\n#[::tokio::main]\nasync fn main() -> Result<(), comprehendmedical::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_comprehendmedical::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding EMR Containers SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the EMR Containers SDK in a Rust project. It includes the aws-config, aws-sdk-emrcontainers, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emrcontainers/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-emrcontainers = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Clean Rooms ML Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK Clean Rooms ML client in Rust. It uses the aws_config crate to load configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cleanroomsml/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cleanroomsml as cleanroomsml;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cleanroomsml::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cleanroomsml::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS SNS Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS SNS client in Rust using the `aws-sdk-sns` crate. It involves loading AWS configuration from the environment using `aws_config::load_from_env()` and instantiating the `aws_sdk_sns::Client` within a Tokio async runtime (`#[::tokio::main]`). This client is then ready to make API calls to Amazon SNS.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sns as sns;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sns::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sns::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Textract Client with Tokio in Rust\nDESCRIPTION: This Rust snippet illustrates the asynchronous initialization of the Amazon Textract SDK client using the async runtime provided by Tokio. The code loads AWS configuration from environment variables and creates a new aws_sdk_textract::Client instance. Required dependencies include tokio, aws-config, and aws-sdk-textract. The main function is marked async to enable non-blocking operations with the AWS client. Inputs are implicitly pulled from environment settings, and the output is a ready-to-use Textract client; errors are handled via the Result type.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/textract/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_textract as textract;\n\n#[::tokio::main]\nasync fn main() -> Result<(), textract::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_textract::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Clean Rooms Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS Clean Rooms client using the SDK. Demonstrates async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cleanrooms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cleanrooms as cleanrooms;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cleanrooms::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cleanrooms::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Lexicons in Amazon Polly with Rust SDK\nDESCRIPTION: Code demonstrating how to retrieve a list of pronunciation lexicons stored in Amazon Polly using the AWS SDK for Rust\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/polly/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/list-lexicons.rs#L22\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-bcmdataexports Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-bcmdataexports crate and its dependencies to a Rust project's Cargo.toml file. It includes the necessary versions and features for aws-config, aws-sdk-bcmdataexports, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bcmdataexports/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bcmdataexports = \"1.62.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Cluster with Aurora in Rust\nDESCRIPTION: This code snippet shows how to delete a DB cluster using the AWS SDK for Rust with Aurora. It's part of the cleanup process in Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DeleteDBCluster operation\n// Located in src/aurora_scenario/tests.rs#L790\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Analytics Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS Kinesis Analytics client using environment configuration. Shows basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisanalytics as kinesisanalytics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisanalytics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisanalytics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CodeStar Notifications Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK CodeStar Notifications client in Rust. It uses the aws_config crate to load configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codestarnotifications/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codestarnotifications as codestarnotifications;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codestarnotifications::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codestarnotifications::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Transfer in Cargo.toml (TOML)\nDESCRIPTION: This snippet adds the necessary dependencies to your Cargo.toml file to enable asynchronous operations with the AWS SDK Transfer Family in a Rust project. It specifies the required versions of aws-config, aws-sdk-transfer, and tokio (with full features enabled), which are essential for instantiating the SDK client and using async code. Editing your Cargo.toml as shown allows subsequent examples in Rust to compile and run as intended.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transfer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-transfer = \\\"1.75.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon S3 Control Client - Rust\nDESCRIPTION: Shows how to asynchronously initialize an Amazon S3 Control client in Rust using the AWS SDK. Requires the aws-sdk-s3control and aws-config crates as dependencies, along with Tokio for async execution. The snippet loads default configuration from the environment, constructs a client, and is intended for insertion into an async-capable Rust binary. The client can then be used for S3 control operations, with potential error handling via the result type.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3control/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_s3control as s3control;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), s3control::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_s3control::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Macie2 Client in Rust\nDESCRIPTION: Basic example of creating an AWS Macie2 client using environment configuration. Shows async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/macie2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_macie2 as macie2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), macie2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_macie2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameters in AWS Systems Manager with Rust\nDESCRIPTION: This code snippet references the implementation for creating parameters in AWS Systems Manager. The functionality is located in the create-parameter.rs file at line 35.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ssm/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nPutParameter\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Device Farm Client in Rust\nDESCRIPTION: Basic example of creating an AWS Device Farm client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/devicefarm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_devicefarm as devicefarm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), devicefarm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_devicefarm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ResilienceHub Client in Rust\nDESCRIPTION: Basic Rust code example showing how to initialize and use the AWS ResilienceHub client. It loads configuration from environment variables and creates a new client instance ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resiliencehub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_resiliencehub as resiliencehub;\n\n#[::tokio::main]\nasync fn main() -> Result<(), resiliencehub::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_resiliencehub::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Redshift Client in Rust\nDESCRIPTION: Basic example of how to initialize and use the AWS SDK Redshift client in a Rust application. Creates a client using configuration loaded from environment variables within an asynchronous context.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshift/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_redshift as redshift;\n\n#[::tokio::main]\nasync fn main() -> Result<(), redshift::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_redshift::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Fraud Detector Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Fraud Detector client using the SDK. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/frauddetector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_frauddetector as frauddetector;\n\n#[::tokio::main]\nasync fn main() -> Result<(), frauddetector::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_frauddetector::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS AppConfig Data Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies required to use the AWS AppConfig Data SDK, including the core SDK, AppConfig Data client, and Tokio runtime for async execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appconfigdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appconfigdata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Schemas Client with Tokio - Rust\nDESCRIPTION: This Rust snippet demonstrates how to asynchronously configure and initialize a client for the AWS EventBridge Schema Registry using the aws-sdk-schemas crate. It imports the appropriate crate, asynchronously loads AWS config from the environment, and creates a client instance. The example requires the dependencies as configured in Cargo.toml and a valid AWS environment for config loading. Inputs: AWS credentials from environment. Output: an initialized client instance ready for making EventBridge Schema calls. Key constraint: should be run in an async context using the Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/schemas/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_schemas as schemas;\n\n#[::tokio::main]\nasync fn main() -> Result<(), schemas::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_schemas::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies for DMS in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK Database Migration Service with Rust. Includes aws-config, aws-sdk-databasemigration, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/databasemigration/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-databasemigration = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Kafka Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK Kafka client. It includes aws-config, aws-sdk-kafka, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kafka/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kafka = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Scheduler Client with Tokio in Rust\nDESCRIPTION: This Rust code demonstrates how to asynchronously initialize the AWS SDK for EventBridge Scheduler using the tokio runtime. It first loads configuration from the environment, then creates a Client instance for the scheduler. The client can then be used to invoke service operations as needed. Dependencies include aws-config, aws-sdk-scheduler, and tokio, all of which must be properly configured in your project. The asynchronous main function returns a Result, propagating any initialization errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/scheduler/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_scheduler as scheduler;\n\n#[::tokio::main]\nasync fn main() -> Result<(), scheduler::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_scheduler::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Directory Service Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Directory Service client using the AWS SDK for Rust. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directory/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_directory as directory;\n\n#[::tokio::main]\nasync fn main() -> Result<(), directory::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_directory::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudWatch Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS CloudWatch client using the Rust SDK. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudwatch as cloudwatch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudwatch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudwatch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK EKS Client in Rust\nDESCRIPTION: Basic example demonstrating how to initialize and create an AWS SDK EKS client in Rust using environment configuration. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_eks as eks;\n\n#[::tokio::main]\nasync fn main() -> Result<(), eks::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_eks::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Auto Scaling Client in Rust\nDESCRIPTION: This example demonstrates how to initialize an AWS Auto Scaling client in Rust. It loads configuration from environment variables and creates a client instance that can be used to make API calls to the Auto Scaling service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/autoscaling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_autoscaling as autoscaling;\n\n#[::tokio::main]\nasync fn main() -> Result<(), autoscaling::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_autoscaling::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Glue Resources (Rust)\nDESCRIPTION: Examples showing cleanup operations for AWS Glue resources including deleting crawlers, databases, jobs and tables\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsrc/cleanup.rs#L82\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/cleanup.rs#L73\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/cleanup.rs#L15\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/cleanup.rs#L23\n```\n\n----------------------------------------\n\nTITLE: Describing DB Instances with Aurora in Rust\nDESCRIPTION: This code snippet shows how to describe DB instances using the AWS SDK for Rust with Aurora. It's part of retrieving information about Aurora DB instances.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeDBInstances operation\n// Located in src/aurora_scenario/tests.rs#L790\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK IVS Real-time in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-ivsrealtime. Includes aws-config, aws-sdk-ivsrealtime, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivsrealtime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ivsrealtime = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Partner Central Selling Client in Rust\nDESCRIPTION: Creates an AWS Partner Central Selling client using the AWS SDK for Rust. Loads configuration from environment variables and initializes the client, which can then be used to make API calls to the Partner Central Selling service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/partnercentralselling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_partnercentralselling as partnercentralselling;\n\n#[::tokio::main]\nasync fn main() -> Result<(), partnercentralselling::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_partnercentralselling::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK PCACONNECTORAD Client in Rust\nDESCRIPTION: This Rust example demonstrates how to asynchronously load AWS configuration, instantiate an aws-sdk-pcaconnectorad client, and prepare for making AWS API calls within a Tokio main function. The client is set up by awaiting configuration from the environment and is ready to be used for further method invocations. Required dependencies include aws-sdk-pcaconnectorad, aws-config, and Tokio with the full feature set enabled. The function returns a Result type, with the client accessible for additional operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcaconnectorad/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pcaconnectorad as pcaconnectorad;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), pcaconnectorad::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_pcaconnectorad::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SageMaker A2I Runtime SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Defines the required dependencies in the `Cargo.toml` file to use the AWS SDK for SageMaker A2I Runtime in a Rust project. It includes `aws-config` for configuration handling, the specific service crate `aws-sdk-sagemakera2iruntime`, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakera2iruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakera2iruntime = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CloudWatch Events Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK CloudWatch Events module and its dependencies to a Rust project's Cargo.toml file. It includes the required crates and versions for aws-config, aws-sdk-cloudwatchevents, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudwatchevents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudwatchevents = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CloudSearch Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK CloudSearch client in Rust. It uses the aws_config crate to load configuration from the environment and creates a new CloudSearch client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudsearch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudsearch as cloudsearch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudsearch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudsearch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for `aws-sdk-servicequotas` in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies in the `Cargo.toml` file to use the `aws-sdk-servicequotas` crate. It includes `aws-config` for configuration loading (with the `behavior-version-latest` feature), the service crate itself (`aws-sdk-servicequotas`), and `tokio` (with the `full` feature) for the asynchronous runtime. These dependencies are required for building a Rust application that interacts with AWS Service Quotas.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicequotas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-servicequotas = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK FSx Client in Rust\nDESCRIPTION: Basic initialization of an AWS SDK FSx client using environment configuration. Shows async main function setup with proper error handling and client creation pattern.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fsx/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_fsx as fsx;\n\n#[::tokio::main]\nasync fn main() -> Result<(), fsx::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_fsx::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cognito Identity Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a Cognito Identity client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitoidentity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cognitoidentity as cognitoidentity;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cognitoidentity::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cognitoidentity::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing EMR Containers Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an EMR Containers client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the EMR Containers service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emrcontainers/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_emrcontainers as emrcontainers;\n\n#[::tokio::main]\nasync fn main() -> Result<(), emrcontainers::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_emrcontainers::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Grafana Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK Grafana client in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Amazon Managed Grafana.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/grafana/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_grafana as grafana;\n\n#[::tokio::main]\nasync fn main() -> Result<(), grafana::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_grafana::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lookout Vision Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS Lookout Vision client using environment configuration. Demonstrates async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutvision/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lookoutvision as lookoutvision;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lookoutvision::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lookoutvision::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS FinSpace Data SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS FinSpace Data SDK including aws-config, aws-sdk-finspacedata, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/finspacedata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-finspacedata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS SDK SSO Client in Rust (Rust)\nDESCRIPTION: Demonstrates the basic structure for initializing an AWS SDK SSO client within an asynchronous Rust application using the Tokio runtime. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then creates an `aws_sdk_sso::Client` instance using that configuration. The `ignore` tag suggests this is illustrative and might need adjustments for a specific use case.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sso/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sso as sso;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sso::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sso::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CodeCommit Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK CodeCommit client in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to CodeCommit.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codecommit/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codecommit as codecommit;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codecommit::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codecommit::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ConnectCampaignsV2 Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for ConnectCampaignsV2. It includes the aws-config, aws-sdk-connectcampaignsv2, and tokio crates with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcampaignsv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connectcampaignsv2 = \"1.16.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Bedrock Data Automation Client\nDESCRIPTION: Example code demonstrating how to initialize and create a Bedrock Data Automation client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockdataautomation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrockdataautomation as bedrockdataautomation;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrockdataautomation::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrockdataautomation::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudFront Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an AWS CloudFront client using environment configuration. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudfront/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudfront as cloudfront;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudfront::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudfront::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Backup Client in Rust\nDESCRIPTION: This code demonstrates how to create and initialize an AWS SDK Backup client in Rust. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backup/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_backup as backup;\n\n#[::tokio::main]\nasync fn main() -> Result<(), backup::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_backup::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Health Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize the AWS SDK Health client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/health/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_health as health;\n\n#[::tokio::main]\nasync fn main() -> Result<(), health::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_health::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Metrics Collection for Auto Scaling in Rust\nDESCRIPTION: This code example shows how to disable CloudWatch metrics collection for an Auto Scaling group using the DisableMetricsCollection operation with the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L617\n```\n\n----------------------------------------\n\nTITLE: Implementing Work Item Retrieval Endpoint in Actix Web\nDESCRIPTION: Rust code implementing an Actix Web GET endpoint that retrieves a single work item by ID from the database using the RDS client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/rest_ses/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[actix_web::get(\"/{id}\")]\n#[tracing::instrument(name = \"Request Retrieve single WorkItem\", skip(client))]\nasync fn retrieve(\n    itemid: Path<String>,\n    client: Data<crate::client::RdsClient>,\n) -> Result<Json<crate::work_item::WorkItem>, crate::work_item::WorkItemError> {\n    crate::work_item::repository::retrieve(itemid.to_string(), &client)\n        .await\n        .map(Json)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS EFS Client in Rust\nDESCRIPTION: Basic example showing how to initialize an AWS EFS client using environment configuration. Demonstrates the async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/efs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_efs as efs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), efs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_efs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Neptune Graph Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS Neptune Graph client using environment configuration. Demonstrates async runtime setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptunegraph/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_neptunegraph as neptunegraph;\n\n#[::tokio::main]\nasync fn main() -> Result<(), neptunegraph::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_neptunegraph::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS WAF V2 SDK Dependencies in Cargo.toml - Rust\nDESCRIPTION: This snippet lists the required dependencies in a Cargo.toml file for setting up the AWS WAF V2 SDK for Rust projects. It includes the aws-config and aws-sdk-wafv2 crates at particular versions, and the tokio crate configured with the 'full' feature. This configuration is necessary for enabling asynchronous AWS SDK calls, with Tokio as the async runtime. The dependencies specified here are prerequisites for the example Rust code demonstrating client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wafv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-wafv2 = \"1.73.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS SageMaker Runtime SDK Client (Rust)\nDESCRIPTION: This Rust code snippet shows how to asynchronously initialize a client for the Amazon SageMaker Runtime SDK using the loaded configuration from the environment. The example leverages 'tokio' for async runtime, imports the SDK crate, and demonstrates the canonical pattern for client instantiation. The setup is required for making subsequent API calls to SageMaker. The main input is implicitly drawn from the environment configuration, and the client initialization must run in an async context provided by Tokio. Returns a Result indicating success or an SDK error.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakerruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sagemakerruntime as sagemakerruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sagemakerruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sagemakerruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Resource Groups Tagging Client in Rust\nDESCRIPTION: Creates and initializes an AWS Resource Groups Tagging API client using environment configuration. The snippet demonstrates the basic pattern of creating a client within an asynchronous Tokio main function.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourcegroupstagging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_resourcegroupstagging as resourcegroupstagging;\n\n#[::tokio::main]\nasync fn main() -> Result<(), resourcegroupstagging::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_resourcegroupstagging::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Config SDK - TOML\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Config SDK with Rust. Includes aws-config, aws-sdk-config, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/config/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-config = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DLM Client - Rust Implementation\nDESCRIPTION: Basic example showing how to initialize and create an AWS DLM client using environment configuration. Demonstrates async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dlm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dlm as dlm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dlm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dlm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaConvert Client\nDESCRIPTION: Example showing how to initialize an AWS MediaConvert client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediaconvert/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediaconvert as mediaconvert;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediaconvert::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediaconvert::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Events Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize an AWS IoT Events client in Rust using the aws-sdk-iotevents crate. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotevents/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotevents as iotevents;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotevents::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotevents::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Neptune Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS Neptune client using the Rust SDK. Shows basic async setup with error handling and environment configuration loading.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptune/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_neptune as neptune;\n\n#[::tokio::main]\nasync fn main() -> Result<(), neptune::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_neptune::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing DocumentDB Elastic Client in Rust\nDESCRIPTION: This code demonstrates how to create a DocumentDB Elastic client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/docdbelastic/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_docdbelastic as docdbelastic;\n\n#[::tokio::main]\nasync fn main() -> Result<(), docdbelastic::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_docdbelastic::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MTurk Client in Rust\nDESCRIPTION: Basic example of creating an AWS MTurk client using environment configuration. Shows async main function setup with error handling and client initialization using the AWS config loaded from environment variables.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mturk/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mturk as mturk;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mturk::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mturk::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Chatbot SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies for using AWS Chatbot SDK in a Rust project, including aws-config, aws-sdk-chatbot, and tokio for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chatbot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chatbot = \"1.54.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Cognito Identity Provider Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for adding the AWS Cognito Identity Provider SDK to a Rust project. Includes required dependencies for AWS config, the Cognito SDK, and Tokio for async execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitoidentityprovider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cognitoidentityprovider = \"1.76.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon DocumentDB Client in Rust\nDESCRIPTION: This code demonstrates how to create and initialize an Amazon DocumentDB client in a Rust application using the aws-sdk-docdb crate.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/docdb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_docdb as docdb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), docdb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_docdb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK EksAuth Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS SDK EksAuth client using environment configuration. Demonstrates basic async setup with Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eksauth/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_eksauth as eksauth;\n\n#[::tokio::main]\nasync fn main() -> Result<(), eksauth::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_eksauth::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Video Signaling Client\nDESCRIPTION: Basic Rust code example showing how to initialize and create an AWS Kinesis Video Signaling client using environment configuration. Demonstrates the async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideosignaling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisvideosignaling as kinesisvideosignaling;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisvideosignaling::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisvideosignaling::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Managed Blockchain Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS Managed Blockchain client using environment configuration. Demonstrates basic async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/managedblockchain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_managedblockchain as managedblockchain;\n\n#[::tokio::main]\nasync fn main() -> Result<(), managedblockchain::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_managedblockchain::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS CodeDeploy Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS CodeDeploy client using the AWS SDK for Rust. It loads the configuration from the environment and initializes a new client instance, which can then be used to make API calls to CodeDeploy.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codedeploy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n\"use aws_sdk_codedeploy as codedeploy;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), codedeploy::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_codedeploy::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Describing Orderable DB Instance Options with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates describing orderable DB instance options using the AWS SDK for Rust with Aurora. It's useful for getting information about available Aurora instance configurations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeOrderableDBInstanceOptions operation\n// Located in src/rds.rs#L69\n```\n\n----------------------------------------\n\nTITLE: Database Query Implementation for Work Item Retrieval\nDESCRIPTION: Rust function that constructs and executes a SQL SELECT statement to retrieve a work item from Aurora Serverless using the RDS Data Service client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/rest_ses/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub async fn retrieve(id: String, client: &crate::client::RdsClient) -> Result<crate::work_item::WorkItem, crate::work_item::WorkItemError> {\n    let statement = client\n        .execute_statement()\n        .sql(format!(\n            r#\"SELECT {FIELDS} FROM Work WHERE idwork = :idwork;\"#\n        ))\n        .set_parameters(params![(\"idwork\", id)])\n        .format_records_as(RecordsFormatType::Json)\n        .send()\n        .await;\n\n    let items = parse_rds_output(statement)?;\n    todo!(\"Further checks to ensure a single item was retrieved\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MediaPackage v2 Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration required for using the MediaPackage v2 SDK in a Rust project. Includes aws-config, aws-sdk-mediapackagev2, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackagev2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediapackagev2 = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DMS Client in Rust\nDESCRIPTION: Basic example of creating an AWS DMS client using the Rust SDK. Shows async main function setup, environment configuration loading, and client initialization using aws-sdk-databasemigration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/databasemigration/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_databasemigration as databasemigration;\n\n#[::tokio::main]\nasync fn main() -> Result<(), databasemigration::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_databasemigration::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-tnb in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary dependencies in the `Cargo.toml` file for a Rust project utilizing the AWS SDK for TNB. It includes `aws-config` for AWS configuration loading, `aws-sdk-tnb` for the TNB service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/tnb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-tnb = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Proton Client in Rust\nDESCRIPTION: Creates an AWS Proton client by loading configuration from environment variables using aws-config. This is the standard pattern for initializing any AWS SDK for Rust client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/proton/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_proton as proton;\n\n#[::tokio::main]\nasync fn main() -> Result<(), proton::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_proton::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GuardDuty Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a GuardDuty client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the GuardDuty service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/guardduty/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_guardduty as guardduty;\n\n#[::tokio::main]\nasync fn main() -> Result<(), guardduty::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_guardduty::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Fleet Hub Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS IoT Fleet Hub client using the Rust SDK. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotfleethub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotfleethub as iotfleethub;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotfleethub::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotfleethub::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS Timestream Write SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet specifies the necessary dependencies in a Cargo.toml file to use the AWS SDK for Timestream Write in Rust. It includes versions for aws-config, aws-sdk-timestreamwrite, and ensures Tokio is enabled with full features for async runtime capabilities. All listed libraries must be installed before compiling the Rust code that uses Timestream Write.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreamwrite/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-timestreamwrite = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodePipeline Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK CodePipeline client in a Rust project. It includes the aws-config, aws-sdk-codepipeline, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codepipeline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codepipeline = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IVS Real-time Client in Rust\nDESCRIPTION: Basic initialization of the AWS IVS Real-time client using environment configuration. Shows how to create an async main function and set up the client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivsrealtime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ivsrealtime as ivsrealtime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ivsrealtime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ivsrealtime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Building WebAssembly module with wasm-pack\nDESCRIPTION: Command to build the Rust code into a WebAssembly module targeting web browsers with development settings enabled. This generates the necessary files in the www/pkg directory.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/webassembly/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nwasm-pack build --target web --out-dir www/pkg --dev\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Events Data Client\nDESCRIPTION: Example showing how to initialize and create an AWS IoT Events Data client using environment configuration. Demonstrates basic async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ioteventsdata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ioteventsdata as ioteventsdata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ioteventsdata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ioteventsdata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Neptune SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Neptune SDK with Rust. Includes aws-config, aws-sdk-neptune, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptune/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-neptune = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Artifact in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS SDK Artifact. Includes required dependencies for aws-config, aws-sdk-artifact, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/artifact/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-artifact = \"1.54.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Cluster Parameter Group with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates deleting a DB cluster parameter group using the AWS SDK for Rust with Aurora. It's part of the cleanup process in Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DeleteDBClusterParameterGroup operation\n// Located in src/aurora_scenario/tests.rs#L790\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK OpsWorks Dependencies to Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK for OpsWorks to a Rust project. Specifies required dependencies including aws-config, aws-sdk-opsworks, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opsworks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-opsworks = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CodeGuru Profiler Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS CodeGuru Profiler client using the AWS SDK for Rust. Shows basic error handling and async setup with Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeguruprofiler/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codeguruprofiler as codeguruprofiler;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codeguruprofiler::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codeguruprofiler::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing EMR Serverless SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency configuration for adding aws-sdk-emrserverless and required dependencies to a Rust project. Includes aws-config with latest behavior version, the EMR serverless SDK, and tokio with full features for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emrserverless/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-emrserverless = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS OpsWorks Client in Rust\nDESCRIPTION: Example showing how to create and use an AWS OpsWorks client in Rust. Demonstrates loading configuration from environment variables and initializing the client object.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opsworks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_opsworks as opsworks;\n\n#[::tokio::main]\nasync fn main() -> Result<(), opsworks::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_opsworks::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MWAA Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS MWAA client in Rust using the AWS SDK. Shows async main function setup with error handling and client configuration loading from environment variables.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mwaa/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mwaa as mwaa;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mwaa::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mwaa::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Video Client\nDESCRIPTION: Example code showing how to initialize an AWS Kinesis Video client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideo/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisvideo as kinesisvideo;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisvideo::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisvideo::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Organizations Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in Cargo.toml for using the AWS SDK Organizations with Rust. Includes aws-config, aws-sdk-organizations, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/organizations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-organizations = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Timestream Query Client with Endpoint Discovery - Rust\nDESCRIPTION: This Rust code snippet shows how to asynchronously load AWS configuration and initialize a Timestream Query client with endpoint discovery enabled, which is required for this service. It demonstrates use of Tokio for async runtime, imports the awssdk crate, and builds a client ready to execute Timestream Query API calls. Required dependencies are aws-sdk-timestreamquery, aws-config, and tokio runtime. There are no function inputs; upon execution, a configured client is created and ready for further requests. Errors during setup are returned as the function's Result error type.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreamquery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_timestreamquery as timestreamquery;\n\n#[::tokio::main]\nasync fn main() -> Result<(), timestreamquery::Error> {\n    let config = aws_config::load_from_env().await;\n    // You MUST call `with_endpoint_discovery_enabled` to produce a working client for this service.\n    let client = aws_sdk_timestreamquery::Client::new(&config).with_endpoint_discovery_enabled().await;\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaLive Client in Rust\nDESCRIPTION: Basic example showing how to initialize an AWS MediaLive client using environment configuration. Demonstrates async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/medialive/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_medialive as medialive;\n\n#[::tokio::main]\nasync fn main() -> Result<(), medialive::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_medialive::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Application Auto Scaling Policies in Rust\nDESCRIPTION: Code example showing how to retrieve information about Application Auto Scaling policies using the AWS SDK for Rust. The functionality is referenced but the actual implementation details are located in a separate file at src/bin/describe-scaling-policies.rs line 23.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/applicationautoscaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [DescribeScalingPolicies](src/bin/describe-scaling-policies.rs#L23)\n```\n\n----------------------------------------\n\nTITLE: Configuring Aurora Serverless Application Settings in YAML\nDESCRIPTION: YAML configuration file specifying the Aurora database instance, secret ARN, cluster ARN, and SES email source settings required for the application.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/rest_ses/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrds:\n  db_instance: auroraappdb\n  secret_arn: \"arn:aws:secretsmanager:us-east-1:1111222233334444:secret:docexampleauroraappsecret8B-EXAMPLE-Dz2N2y\"\n  cluster_arn: \"arn:aws:rds:us-east-1:1111222233334444:cluster:docexampleauroraapp-docexampleauroraappclustereb7e-EXAMPLE\"\nses:\n  source: \"report-account@amazondomains.com\" # Replace with an email address that is registered with Amazon SES.\n```\n\n----------------------------------------\n\nTITLE: Initializing an aws-sdk-ssooidc Client in Rust\nDESCRIPTION: Demonstrates how to initialize an aws-sdk-ssooidc client within an asynchronous Rust function using Tokio. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssooidc/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssooidc as ssooidc;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssooidc::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssooidc::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS ELB v2 SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK for Elastic Load Balancing v2 and its dependencies to a Rust project. Includes required dependencies for aws-config, the ELB v2 SDK, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticloadbalancingv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elasticloadbalancingv2 = \"1.73.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CloudFront KeyValueStore Client in Rust\nDESCRIPTION: This code demonstrates how to create a client for the AWS SDK CloudFront KeyValueStore in a Rust application. It includes setting up the configuration and creating the client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudfrontkeyvaluestore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudfrontkeyvaluestore as cloudfrontkeyvaluestore;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudfrontkeyvaluestore::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudfrontkeyvaluestore::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-s3tables in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary dependencies to include in your project's `Cargo.toml` file to use the AWS SDK for S3 Tables. This includes `aws-config` for configuration management, `aws-sdk-s3tables` for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3tables/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-s3tables = \"1.16.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudHSM Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS CloudHSM client in Rust using the SDK. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudhsm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudhsm as cloudhsm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudhsm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudhsm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SDK for Textract Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet defines the required dependencies for integrating Amazon Textract with a Rust project in Cargo.toml. It specifies versions for aws-config, aws-sdk-textract, and tokio (with full feature set) crates. These dependencies enable async execution and access to the AWS Textract API. Ensure that Cargo is installed and that dependency versions align with your Rust toolchain requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/textract/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-textract = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Installing IoT Data Plane SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency configuration for adding aws-sdk-iotdataplane and required dependencies to a Rust project. Includes aws-config, the IoT Data Plane SDK, and tokio for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotdataplane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotdataplane = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-inspector2 Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file. It includes the aws-sdk-inspector2 crate, aws-config for configuration, and tokio for asynchronous runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspector2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-inspector2 = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ACM Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to a Rust project's Cargo.toml file. It includes aws-config, aws-sdk-acm, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/acm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-acm = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Network Monitor Client in Rust\nDESCRIPTION: Creates a new Network Monitor client using environment configuration. This code snippet demonstrates the basic pattern for initializing the client within an asynchronous Rust application.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkmonitor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_networkmonitor as networkmonitor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), networkmonitor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_networkmonitor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the Verified Permissions Client with AWS SDK in Rust\nDESCRIPTION: This Rust snippet shows how to asynchronously initialize a client for Amazon Verified Permissions using the AWS SDK for Rust. The code loads AWS configuration from the environment and constructs a client instance. The prerequisites include adding aws-config, aws-sdk-verifiedpermissions, and tokio as dependencies. The main async function is required (using #[::tokio::main]), and the client can then be used to make service calls. All credentials and configuration are loaded according to the environment setup.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/verifiedpermissions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_verifiedpermissions as verifiedpermissions;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), verifiedpermissions::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_verifiedpermissions::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for Route 53 Recovery Control Config in Cargo.toml (TOML)\nDESCRIPTION: Specifies the required dependencies in the `Cargo.toml` file to use the AWS SDK for Route 53 Recovery Control Configuration. It includes `aws-config` for configuration loading, the service-specific crate `aws-sdk-route53recoverycontrolconfig`, and the `tokio` runtime for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoverycontrolconfig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53recoverycontrolconfig = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Budgets Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK Budgets client in Rust. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/budgets/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_budgets as budgets;\n\n#[::tokio::main]\nasync fn main() -> Result<(), budgets::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_budgets::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cargo.toml\nDESCRIPTION: Dependency configuration for adding aws-sdk-migrationhuborchestrator to a Rust project. Includes required dependencies for AWS config, the Migration Hub Orchestrator SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhuborchestrator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-migrationhuborchestrator = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Cost Explorer SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Cost Explorer SDK in a Rust project. Includes aws-config, aws-sdk-costexplorer, and tokio dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costexplorer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-costexplorer = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Kafka Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK Kafka client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kafka/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kafka as kafka;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kafka::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kafka::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK AppIntegrations Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK AppIntegrations crate and its dependencies to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appintegrations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appintegrations = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Chime SDK Identity Client in Rust\nDESCRIPTION: Basic example of creating an AWS Chime SDK Identity client using environment configuration. Shows async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkidentity/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chimesdkidentity as chimesdkidentity;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chimesdkidentity::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chimesdkidentity::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS RolesAnywhere Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS RolesAnywhere client using the Rust SDK. It loads configuration from environment variables and initializes a new client instance ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rolesanywhere/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rolesanywhere as rolesanywhere;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rolesanywhere::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rolesanywhere::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS X-Ray SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet demonstrates how to configure the necessary dependencies for AWS X-Ray SDK in a Rust project using Cargo.toml. It specifies required crates like aws-config for AWS configuration, aws-sdk-xray as the main SDK module, and tokio for async operations. Version numbers and feature flags are set to ensure compatibility and enable full Tokio reactor functionality. This configuration is essential before writing Rust code that interfaces with AWS X-Ray.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/xray/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-xray = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS API Gateway V2 Client in Rust\nDESCRIPTION: Example code showing how to initialize and use an AWS API Gateway V2 client in a Rust application. Demonstrates loading configuration from environment variables and creating a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigatewayv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_apigatewayv2 as apigatewayv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), apigatewayv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_apigatewayv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Amplify UI Builder Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amplify UI Builder client in Rust using the AWS SDK. It loads the configuration from the environment and initializes the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplifyuibuilder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_amplifyuibuilder as amplifyuibuilder;\n\n#[::tokio::main]\nasync fn main() -> Result<(), amplifyuibuilder::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_amplifyuibuilder::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Lambda Functions with Cargo Lambda in Rust\nDESCRIPTION: This snippet demonstrates how to compile Lambda functions written in Rust using Cargo Lambda. It changes to the calculator directory, builds the Lambda function, and returns to the original directory.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/lambda/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd calculator\ncargo lambda build --output-format Zip\ncd -\n```\n\n----------------------------------------\n\nTITLE: Running the telephone Example with AWS SDK for Rust\nDESCRIPTION: Command to run the telephone example that converts text to speech using Amazon Polly, saves the audio file to S3, and then converts the audio back to text using Amazon Transcribe.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/cross_service/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd telephone\ncargo run -- -f FILENAME -b BUCKET -j JOB-NAME  [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Directory Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the required dependencies to a Rust project's Cargo.toml file. Includes aws-config, aws-sdk-directory, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directory/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-directory = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Control Catalog Client in Rust\nDESCRIPTION: This code demonstrates how to create a Control Catalog client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/controlcatalog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_controlcatalog as controlcatalog;\n\n#[::tokio::main]\nasync fn main() -> Result<(), controlcatalog::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_controlcatalog::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS API Gateway Management Client in Rust\nDESCRIPTION: This code demonstrates how to initialize an AWS API Gateway Management client in a Rust application. It creates an AWS configuration from environment variables and then initializes a new client instance using that configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigatewaymanagement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_apigatewaymanagement as apigatewaymanagement;\n\n#[::tokio::main]\nasync fn main() -> Result<(), apigatewaymanagement::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_apigatewaymanagement::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Migration Hub Strategy Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Migration Hub Strategy client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubstrategy/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_migrationhubstrategy as migrationhubstrategy;\n\n#[::tokio::main]\nasync fn main() -> Result<(), migrationhubstrategy::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_migrationhubstrategy::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Route53Domains Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize an AWS Route53Domains client in Rust. The code loads configuration from environment variables and creates a new client instance that can be used to make API calls to the Route53Domains service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53domains/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53domains as route53domains;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53domains::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53domains::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PCA Connector SCEP Client in Rust\nDESCRIPTION: Basic example of creating and using a PCA Connector SCEP client in Rust. The code demonstrates loading configuration from the environment and initializing the client. It includes a main async function with error handling for the PCA connector SCEP service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcaconnectorscep/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pcaconnectorscep as pcaconnectorscep;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pcaconnectorscep::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pcaconnectorscep::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CloudSearch Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK CloudSearch client in a Rust project. It includes the aws-config, aws-sdk-cloudsearch, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudsearch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudsearch = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding required dependencies to a Rust project including aws-sdk-inspectorscan, aws-config, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspectorscan/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-inspectorscan = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Chime SDK Meetings Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the required dependencies to a Rust project's Cargo.toml file. Includes aws-config, aws-sdk-chimesdkmeetings, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmeetings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chimesdkmeetings = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK EBS in Cargo.toml\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using the AWS SDK EBS with Rust. Includes aws-config, aws-sdk-ebs, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ebs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ebs = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CloudSearch Domain Client in Rust\nDESCRIPTION: This code demonstrates how to create a CloudSearch Domain client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudsearchdomain/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudsearchdomain as cloudsearchdomain;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudsearchdomain::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudsearchdomain::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS WorkMail SDK Client - Rust\nDESCRIPTION: This Rust snippet shows how to asynchronously initialize an AWS WorkMail SDK client using loaded environment configuration. It utilizes the Tokio runtime, loads configuration with aws_config::load_from_env, and constructs a new aws_sdk_workmail Client instance, ready for making WorkMail API calls. Dependencies include the aws-sdk-workmail and tokio crates; key parameters are loaded implicitly from the environment. The async main function leverages the #[::tokio::main] attribute for execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workmail/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workmail as workmail;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workmail::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workmail::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Application Cost Profiler Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Application Cost Profiler client using environment configuration. Demonstrates basic async setup with Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationcostprofiler/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_applicationcostprofiler as applicationcostprofiler;\n\n#[::tokio::main]\nasync fn main() -> Result<(), applicationcostprofiler::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_applicationcostprofiler::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK PrivateNetworks Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the required dependencies to a Rust project's Cargo.toml file, including the AWS SDK for PrivateNetworks, AWS config, and Tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/privatenetworks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-privatenetworks = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK IoT Secure Tunneling Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize and use the AWS SDK IoT Secure Tunneling client in a Rust application. It loads the configuration from the environment and creates a new client instance. The code is set up as an asynchronous main function using Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotsecuretunneling/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotsecuretunneling as iotsecuretunneling;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotsecuretunneling::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotsecuretunneling::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Marketplace Agreement SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-marketplaceagreement, and tokio for asynchronous execution\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplaceagreement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplaceagreement = \"1.61.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-cloud9 Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-cloud9 crate and its dependencies to a Rust project's Cargo.toml file. It includes the required versions for aws-config, aws-sdk-cloud9, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloud9/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloud9 = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Marketplace Commerce Analytics Client in Rust\nDESCRIPTION: Demonstrates how to initialize and use the AWS Marketplace Commerce Analytics client in Rust. Shows the basic pattern of loading configuration from environment variables and creating a client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacecommerceanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplacecommerceanalytics as marketplacecommerceanalytics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplacecommerceanalytics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplacecommerceanalytics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Parameters in AWS Systems Manager with Rust\nDESCRIPTION: This code snippet references the implementation for describing parameters in AWS Systems Manager. The functionality is located in the describe-parameters.rs file at line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ssm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nDescribeParameters\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon Personalize client in Rust\nDESCRIPTION: Creates a basic Amazon Personalize client using the AWS SDK for Rust. The code loads configuration from environment variables and initializes a client that can be used to make API calls to the Amazon Personalize service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalize/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_personalize as personalize;\n\n#[::tokio::main]\nasync fn main() -> Result<(), personalize::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_personalize::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SSO Admin SDK in Rust (Cargo.toml)\nDESCRIPTION: Specifies the dependencies required to use the AWS SDK for SSO Admin in a Rust project. Dependencies include aws-config for configuration management, aws-sdk-ssoadmin for IAM Identity Center API operations, and Tokio for async runtime support. This snippet is placed in the Cargo.toml file and ensures all necessary crates and features are included before using the SDK in source code. Inputs are crate names and versions; there are no code outputs. Changing versions or feature flags may affect compatibility.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssoadmin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-ssoadmin = \\\"1.64.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaStore Data Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS MediaStore Data client using environment configuration. Demonstrates basic async runtime setup with Tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediastoredata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediastoredata as mediastoredata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediastoredata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediastoredata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Pinpoint Email Client in Rust\nDESCRIPTION: Demonstrates how to create a basic Amazon Pinpoint Email client in Rust using environment configuration. The example shows the minimal code needed to initialize a client with proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointemail/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pinpointemail as pinpointemail;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pinpointemail::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pinpointemail::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing aws-sdk-rum Client with Tokio - Rust\nDESCRIPTION: This Rust snippet illustrates how to asynchronously load AWS configuration and initialize a new CloudWatch RUM client instance using the aws-sdk-rum crate. Dependencies include aws-sdk-rum, aws-config, and Tokio. The example uses the #[::tokio::main] macro for async runtime setup and returns a Result type with rum::Error for error handling. Replace the placeholder for client calls as needed; the client variable is ready for API invocations such as data collection or query operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rum/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rum as rum;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rum::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rum::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Running Amazon Transcribe Streaming with AWS SDK for Rust\nDESCRIPTION: This code snippet demonstrates how to run the transcribestreaming example, which transcribes a WAV audio file using Amazon Transcribe. It specifies the command-line arguments and explains their usage.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/transcribestreaming/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo run -- -a AUDIO-FILE [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK DAX Client in Rust\nDESCRIPTION: Example of creating and initializing an AWS SDK DAX client using environment configuration. Shows basic async main function setup with error handling and client instantiation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dax/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dax as dax;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dax::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dax::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Organizations Client in Rust\nDESCRIPTION: Creates an AWS SDK Organizations client using credentials loaded from the environment. This snippet demonstrates the basic pattern for initializing the client and handling errors properly.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/organizations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_organizations as organizations;\n\n#[::tokio::main]\nasync fn main() -> Result<(), organizations::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_organizations::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Resource Groups Client in Rust\nDESCRIPTION: This code example demonstrates how to set up and initialize the AWS Resource Groups client in a Rust application. It loads the AWS configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourcegroups/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_resourcegroups as resourcegroups;\n\n#[::tokio::main]\nasync fn main() -> Result<(), resourcegroups::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_resourcegroups::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Machine Learning Client\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Machine Learning client in Rust using environment configuration. Shows basic async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/machinelearning/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_machinelearning as machinelearning;\n\n#[::tokio::main]\nasync fn main() -> Result<(), machinelearning::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_machinelearning::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Global Accelerator Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration for adding AWS Global Accelerator SDK dependencies including the main SDK, AWS config, and Tokio runtime for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/globalaccelerator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-globalaccelerator = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Network Monitor Dependencies to Cargo.toml\nDESCRIPTION: Adds the required dependencies to a Rust project's Cargo.toml file, including the AWS SDK for Network Monitor, AWS config, and Tokio runtime for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkmonitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-networkmonitor = \"1.55.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK IoT Secure Tunneling Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK IoT Secure Tunneling client. It includes the aws-config, aws-sdk-iotsecuretunneling, and tokio crates with their respective versions and features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotsecuretunneling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotsecuretunneling = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK OpsWorks CM Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the aws-sdk-opsworkscm and required dependencies to a Rust project's Cargo.toml file. Includes AWS config, the OpsWorks CM SDK, and Tokio for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opsworkscm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-opsworkscm = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Route53 Recovery Cluster Client in Rust\nDESCRIPTION: Basic example of creating an AWS Route53 Recovery Cluster client in Rust. The code loads configuration from environment variables and initializes a client that can be used to make API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoverycluster/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53recoverycluster as route53recoverycluster;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53recoverycluster::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53recoverycluster::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudHSM v2 Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS CloudHSM v2 client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudhsmv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudhsmv2 as cloudhsmv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudhsmv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudhsmv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Access Analyzer Dependencies\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS SDK Access Analyzer with Rust. Includes aws-config, aws-sdk-accessanalyzer, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/accessanalyzer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-accessanalyzer = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS HTTP Request with ECDSA P256 Signing\nDESCRIPTION: This snippet demonstrates the structure of an AWS HTTP POST request using the AWS4-ECDSA-P256-SHA256 signing algorithm. It includes the request method, path, query string with authentication parameters, and the host header.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK FinSpace Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK FinSpace module.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/finspace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-finspace = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining AWS SDK Tax Settings Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows the required dependencies to add to a Rust project's Cargo.toml for using the AWS Tax Settings SDK, including aws-config and tokio for asynchronous operations. Dependencies include the specific version of aws-sdk-taxsettings and necessary features for aws-config and tokio. The code should be placed in the [dependencies] section of Cargo.toml to ensure the project can build and use the Tax Settings SDK client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/taxsettings/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-taxsettings = \"1.42.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeConnections Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the AWS SDK CodeConnections crate and its dependencies to a Rust project's Cargo.toml file. It includes the aws-config crate with the 'behavior-version-latest' feature, the aws-sdk-codeconnections crate, and the tokio runtime with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeconnections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codeconnections = \"1.47.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Notifications Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS SDK Notifications client in Rust. Demonstrates loading configuration from environment variables and setting up a basic client structure with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/notifications/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_notifications as notifications;\n\n#[::tokio::main]\nasync fn main() -> Result<(), notifications::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_notifications::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-eventbridge Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using aws-sdk-eventbridge in a Rust project. It includes aws-config, aws-sdk-eventbridge, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eventbridge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-eventbridge = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lookout Equipment Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an AWS Lookout for Equipment client using environment configuration. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutequipment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lookoutequipment as lookoutequipment;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lookoutequipment::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lookoutequipment::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for AWS Storage Gateway in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies in the Cargo.toml file to use the AWS SDK for Rust Storage Gateway. It requires `aws-config` for handling AWS configuration (loading from environment), `aws-sdk-storagegateway` for the service-specific client and operations, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/storagegateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-storagegateway = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing BedrockAgentRuntime Client in Rust\nDESCRIPTION: Example code showing how to create and initialize a BedrockAgentRuntime client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockagentruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrockagentruntime as bedrockagentruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrockagentruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrockagentruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lexmodelsv2 Client in Rust\nDESCRIPTION: Basic example of creating an AWS Lexmodelsv2 client in Rust using the SDK. Shows async main function setup, config loading from environment, and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexmodelsv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lexmodelsv2 as lexmodelsv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lexmodelsv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lexmodelsv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS App Mesh Client\nDESCRIPTION: Basic example of creating an AWS App Mesh client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appmesh/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appmesh as appmesh;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appmesh::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appmesh::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Listing MediaPackage Origin Endpoints using AWS SDK for Rust\nDESCRIPTION: Code reference to an example that demonstrates how to list MediaPackage origin endpoints. The example is located in the list-endpoints.rs file at line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/mediapackage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Rust\nCODE:\n```\nListOriginEndpoints\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Clean Rooms ML Dependency in Rust\nDESCRIPTION: This snippet shows how to add the aws-sdk-cleanroomsml dependency to a Rust project's Cargo.toml file. It includes the necessary dependencies for the AWS SDK and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cleanroomsml/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cleanroomsml = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Detective Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS SDK Detective client in Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Detective.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/detective/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_detective as detective;\n\n#[::tokio::main]\nasync fn main() -> Result<(), detective::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_detective::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Launch Wizard SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Launch Wizard SDK with Rust. Includes aws-config, aws-sdk-launchwizard, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/launchwizard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-launchwizard = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ACMPCA Client in Rust\nDESCRIPTION: Basic example of initializing an AWS ACMPCA client in a Rust application. This code loads the AWS configuration from environment variables and creates a new ACMPCA client instance that can be used to make API calls to the AWS Private Certificate Authority service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/acmpca/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_acmpca as acmpca;\n\n#[::tokio::main]\nasync fn main() -> Result<(), acmpca::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_acmpca::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Bedrock Runtime Client\nDESCRIPTION: Rust code example demonstrating how to initialize the AWS Bedrock Data Automation Runtime client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockdataautomationruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bedrockdataautomationruntime as bedrockdataautomationruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bedrockdataautomationruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bedrockdataautomationruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Observability Admin Client in Rust\nDESCRIPTION: Basic code for initializing the AWS Observability Admin client in a Rust application. Demonstrates loading configuration from environment variables and creating a client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/observabilityadmin/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_observabilityadmin as observabilityadmin;\n\n#[::tokio::main]\nasync fn main() -> Result<(), observabilityadmin::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_observabilityadmin::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Timestream Query Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet demonstrates how to declare the required dependencies in your Cargo.toml to use AWS SDK for Timestream Query in a Rust project. It specifies compatible versions for aws-config, aws-sdk-timestreamquery, and tokio (with the 'full' feature). Proper dependency configuration is mandatory for building and compiling Rust projects that utilize asynchronous AWS services. No input or output parameters exist; ensure versions are compatible with each other to avoid conflicts.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreamquery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-timestreamquery = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS DirectConnect SDK in Cargo.toml\nDESCRIPTION: Required dependency configuration in Cargo.toml for using the AWS DirectConnect SDK with Rust. Includes aws-config, aws-sdk-directconnect, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directconnect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-directconnect = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting up QLDB Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS QLDB SDK and required dependencies to a Rust project. Includes aws-config, aws-sdk-qldb, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qldb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-qldb = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CloudSearch Domain Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK CloudSearch Domain crate.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudsearchdomain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudsearchdomain = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependencies for AWS SDK and Tokio in a Rust Project (TOML)\nDESCRIPTION: This snippet demonstrates how to add the required dependencies for using the AWS SDK for Rust with Amazon WorkSpaces to a Rust project's Cargo.toml file. It includes the aws-config, aws-sdk-workspaces, and tokio crates, specifying appropriate versions and features. These dependencies enable asynchronous execution and provide necessary interfaces for interacting with the WorkSpaces service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workspaces = \"1.76.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Mailmanager Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS SDK Mailmanager client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mailmanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mailmanager as mailmanager;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mailmanager::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mailmanager::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ElastiCache Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the AWS SDK ElastiCache client and its dependencies to a Rust project's Cargo.toml file. It includes the ElastiCache SDK, AWS config, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticache/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elasticache = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS QuickSight SDK Dependencies in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies to integrate the AWS QuickSight SDK into a Rust project. Includes aws-config, aws-sdk-quicksight, and tokio with full features for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/quicksight/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-quicksight = \"1.82.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an ElastiCache Client in Rust\nDESCRIPTION: This code demonstrates how to create an ElastiCache client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to ElastiCache.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticache/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elasticache as elasticache;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elasticache::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elasticache::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ResourceExplorer2 Dependencies in Cargo.toml\nDESCRIPTION: Configure Cargo.toml with the necessary dependencies for using AWS ResourceExplorer2 in a Rust project. This includes the AWS config, ResourceExplorer2 SDK, and Tokio for async functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourceexplorer2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-resourceexplorer2 = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Cloud Directory Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK Cloud Directory module. It includes the aws-config, aws-sdk-clouddirectory, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/clouddirectory/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-clouddirectory = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-chimesdkmediapipelines Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the aws-sdk-chimesdkmediapipelines crate. It includes aws-config, aws-sdk-chimesdkmediapipelines, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmediapipelines/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chimesdkmediapipelines = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Jobs Data Plane Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS IoT Jobs Data Plane client using the Rust SDK. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotjobsdataplane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotjobsdataplane as iotjobsdataplane;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotjobsdataplane::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotjobsdataplane::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT SiteWise Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS IoT SiteWise client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotsitewise/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotsitewise as iotsitewise;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotsitewise::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotsitewise::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring aws-sdk-securityir Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This TOML snippet shows how to add the `aws-sdk-securityir`, `aws-config`, and `tokio` crates as dependencies in a Rust project's `Cargo.toml` file. It specifies the necessary versions and enables the `behavior-version-latest` feature for `aws-config` and `full` features for `tokio`, which are prerequisites for using the SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securityir/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-securityir = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS IoT TwinMaker Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS IoT TwinMaker client using the AWS SDK for Rust. It loads the configuration from the environment and initializes a new client, which can then be used to make API calls to the IoT TwinMaker service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iottwinmaker/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iottwinmaker as iottwinmaker;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iottwinmaker::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iottwinmaker::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Lightsail Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Lightsail client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lightsail/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lightsail as lightsail;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lightsail::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lightsail::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK AppFabric Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize the AWS SDK AppFabric client in a Rust application. It uses the aws_config crate to load configuration from the environment and creates a new AppFabric client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appfabric/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appfabric as appfabric;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appfabric::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appfabric::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Dependencies to Cargo.toml\nDESCRIPTION: Specifies the required dependencies for using the AWS SDK for Rust, including aws-config, aws-sdk-config, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/README.md#2025-04-23_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = \"VERSION\"\naws-sdk-config = \"VERSION\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Analytics V2 Client - Rust\nDESCRIPTION: Example code showing how to initialize an AWS Kinesis Analytics V2 client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisanalyticsv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisanalyticsv2 as kinesisanalyticsv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisanalyticsv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisanalyticsv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the format of an HTTP GET request for use with the AWS SDK for Rust. It includes the request line specifying the HTTP method and version, followed by the Host header identifying the target AWS service endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-unnormalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET // HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Forecast Client - Rust\nDESCRIPTION: Example of creating and initializing an AWS Forecast client in Rust using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/forecast/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_forecast as forecast;\n\n#[::tokio::main]\nasync fn main() -> Result<(), forecast::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_forecast::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Redshift Serverless Client in Rust\nDESCRIPTION: This code demonstrates how to initialize an Amazon Redshift Serverless client in Rust. It loads configuration from environment variables and creates a new client instance that can be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshiftserverless/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_redshiftserverless as redshiftserverless;\n\n#[::tokio::main]\nasync fn main() -> Result<(), redshiftserverless::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_redshiftserverless::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK for Internet Monitor as a Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK for Internet Monitor as a dependency in a Rust project's Cargo.toml file. It includes the necessary crates and their versions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/internetmonitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-internetmonitor = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Route 53 Resolver Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet demonstrates how to add the necessary dependencies to a Rust project's `Cargo.toml` file to utilize the AWS SDK for Route 53 Resolver. It specifies `aws-config` for handling AWS configuration, `aws-sdk-route53resolver` for the service client itself, and `tokio` for the asynchronous runtime environment required by the SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53resolver/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53resolver = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for AWS SMS in Cargo.toml (TOML)\nDESCRIPTION: This TOML configuration snippet shows the necessary dependencies to include in a Rust project's `Cargo.toml` file to use the AWS Server Migration Service (SMS) SDK. It requires `aws-config` for AWS configuration handling, `aws-sdk-sms` for the SMS service client, and `tokio` for the asynchronous runtime. The `behavior-version-latest` feature for `aws-config` is recommended for utilizing the latest SDK behaviors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sms = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS CodeGuru Profiler in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in Cargo.toml for using AWS CodeGuru Profiler with Rust. Includes aws-config, aws-sdk-codeguruprofiler, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeguruprofiler/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codeguruprofiler = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SESv2 SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet provides the required dependencies and their configuration needed in the Cargo.toml file to use the AWS SESv2 SDK within a Rust project. Dependencies include aws-config for configuration, aws-sdk-sesv2 for SESv2 client access, and tokio for asynchronous runtime. All libraries must be added under the [dependencies] section for correct compilation and runtime behavior.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sesv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sesv2 = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Cognito Sync Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Cognito Sync client using the aws-sdk-cognitosync crate. It loads the AWS configuration from the environment and initializes a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitosync/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cognitosync as cognitosync;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cognitosync::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cognitosync::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Health Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK Health client in a Rust project. It includes the aws-config, aws-sdk-health, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/health/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-health = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Free Tier Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS Free Tier client using the aws-sdk-freetier crate. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/freetier/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_freetier as freetier;\n\n#[::tokio::main]\nasync fn main() -> Result<(), freetier::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_freetier::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding B2BI SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the AWS SDK for B2BI in a Rust project. It includes the aws-config, aws-sdk-b2bi, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/b2bi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-b2bi = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-transcribe in Cargo.toml\nDESCRIPTION: Specifies the necessary Rust crate dependencies in the project's `Cargo.toml` file to use the AWS SDK for Transcribe. It includes `aws-config` for AWS configuration loading (with `behavior-version-latest` feature), the `aws-sdk-transcribe` crate itself, and the `tokio` crate for asynchronous runtime support (with `full` features).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transcribe/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-transcribe = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-supplychain Dependencies in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies in the `Cargo.toml` file for a Rust project utilizing the `aws-sdk-supplychain` crate. It includes `aws-config` for loading AWS configuration (with the `behavior-version-latest` feature enabled), the `aws-sdk-supplychain` crate itself (version 1.58.0), and `tokio` (version 1) for the asynchronous runtime (with the `full` feature set enabled).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/supplychain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-supplychain = \"1.58.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS Security Lake SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the necessary Rust crates (`aws-config`, `aws-sdk-securitylake`, `tokio`) and their versions to include in a project's `Cargo.toml` file for using the AWS Security Lake SDK for Rust. It enables AWS configuration loading, provides the Security Lake client, and includes the Tokio runtime for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securitylake/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-securitylake = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Glacier Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS Glacier client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/glacier/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_glacier as glacier;\n\n#[::tokio::main]\nasync fn main() -> Result<(), glacier::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_glacier::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK EBS Client in Rust\nDESCRIPTION: Basic example of creating an AWS SDK EBS client in Rust using async/await. Shows configuration loading from environment and client initialization pattern.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ebs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ebs as ebs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ebs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ebs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for aws-sdk-ssmincidents in Cargo.toml\nDESCRIPTION: This TOML snippet specifies the necessary dependencies to be added to a Rust project's `Cargo.toml` file for using the AWS SDK for SSM Incidents. It includes `aws-config` for AWS configuration loading (with the `behavior-version-latest` feature), the `aws-sdk-ssmincidents` crate itself, and the `tokio` runtime (with the `full` feature) for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmincidents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssmincidents = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS MarketplaceCatalog Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS Marketplace Catalog client in Rust. It loads configuration from environment variables and creates a new client instance that can be used to make API calls to the AWS Marketplace Catalog service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacecatalog/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplacecatalog as marketplacecatalog;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplacecatalog::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplacecatalog::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Audit Manager Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS Audit Manager client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/auditmanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_auditmanager as auditmanager;\n\n#[::tokio::main]\nasync fn main() -> Result<(), auditmanager::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_auditmanager::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Application Discovery Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS Application Discovery Service client using environment configuration. Shows basic error handling and async runtime setup using tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationdiscovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_applicationdiscovery as applicationdiscovery;\n\n#[::tokio::main]\nasync fn main() -> Result<(), applicationdiscovery::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_applicationdiscovery::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BCM Data Exports Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a client for the BCM Data Exports service using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bcmdataexports/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bcmdataexports as bcmdataexports;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bcmdataexports::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bcmdataexports::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS ApplicationInsights Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK for ApplicationInsights to a Rust project. Specifies the required dependencies including aws-config, aws-sdk-applicationinsights, and tokio with full features for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationinsights/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-applicationinsights = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS License Manager Linux Subscriptions Client\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS License Manager Linux Subscriptions client using the Rust SDK. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanagerlinuxsubscriptions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_licensemanagerlinuxsubscriptions as licensemanagerlinuxsubscriptions;\n\n#[::tokio::main]\nasync fn main() -> Result<(), licensemanagerlinuxsubscriptions::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_licensemanagerlinuxsubscriptions::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Chime SDK Meetings Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS Chime SDK Meetings client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmeetings/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chimesdkmeetings as chimesdkmeetings;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chimesdkmeetings::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chimesdkmeetings::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kafka Connect in Cargo.toml\nDESCRIPTION: Dependency configuration in Cargo.toml for setting up aws-sdk-kafkaconnect with required AWS config and Tokio runtime dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kafkaconnect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kafkaconnect = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-cognitosync Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the aws-sdk-cognitosync crate. It includes aws-config, aws-sdk-cognitosync, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitosync/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cognitosync = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Dependencies Configuration for AWS ChimesdkVoice in Cargo.toml\nDESCRIPTION: Required dependency configuration in Cargo.toml for using aws-sdk-chimesdkvoice. Includes aws-config, the SDK itself, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkvoice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chimesdkvoice = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SDK SageMaker Geospatial Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows how to add necessary dependencies to a Rust project's Cargo.toml for using the aws-sdk-sagemakergeospatial crate. It specifies required versions for aws-config, aws-sdk-sagemakergeospatial, and tokio with the appropriate features. These dependencies enable asynchronous operations and AWS service interaction. There are no custom parameters; users should copy this section into their project's Cargo.toml to enable AWS SDK functionality. Ensure compatible versions are chosen if upgrading the SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakergeospatial/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakergeospatial = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Comprehend Medical Dependencies in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS Comprehend Medical with Rust. Includes aws-config, aws-sdk-comprehendmedical, and tokio dependencies with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/comprehendmedical/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-comprehendmedical = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Translate Dependencies in Cargo.toml\nDESCRIPTION: Defines the required Rust crates (`aws-config`, `aws-sdk-translate`, `tokio`) and their versions to be added to the project's `Cargo.toml` file under the `[dependencies]` section. This enables the use of the AWS SDK for Translate, AWS configuration loading, and the Tokio asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/translate/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-translate = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS SWF Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS SWF client instance in an asynchronous Rust application using `tokio`. It imports the necessary crate (`aws_sdk_swf`), defines an async `main` function using `tokio::main`, loads AWS configuration from the environment via `aws_config::load_from_env()`, and then instantiates `aws_sdk_swf::Client` with this configuration. The `no_run` attribute indicates it's an example snippet not meant for direct execution without further client operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/swf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_swf as swf;\n\n#[::tokio::main]\nasync fn main() -> Result<(), swf::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_swf::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Cost Optimization Hub SDK in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for setting up the AWS Cost Optimization Hub SDK with Tokio for async operations. Includes versions for aws-config, aws-sdk-costoptimizationhub, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costoptimizationhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-costoptimizationhub = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Evidently in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS SDK Evidently with Rust. Includes aws-config, aws-sdk-evidently, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/evidently/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-evidently = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Social Messaging Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in the `Cargo.toml` file for a Rust project intending to use the AWS Social Messaging service via the AWS SDK for Rust. It includes `aws-config` for loading AWS configuration and credentials, `aws-sdk-socialmessaging` for the specific service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/socialmessaging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n```toml\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-socialmessaging = \"1.19.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Personalize Runtime Client in Rust\nDESCRIPTION: Creates a basic AWS Personalize Runtime client using environment configuration. The example demonstrates the standard pattern for initializing the client within an asynchronous Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalizeruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_personalizeruntime as personalizeruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), personalizeruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_personalizeruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Transfer Client Using Tokio in Rust\nDESCRIPTION: This Rust code initializes an AWS Transfer Family client asynchronously using the aws_sdk_transfer crate and Tokio runtime. The snippet demonstrates loading the default AWS config from the environment and creating a Client instance, ready for making service calls. Dependencies required include aws-config, aws-sdk-transfer, and tokio; input is picked up from the environment, and the output is a fully initialized client wrapped in Result. Limitations include the need for asynchronous execution and correct configuration credentials present in the environment.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/transfer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_transfer as transfer;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), transfer::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_transfer::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS CloudFormation SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS CloudFormation SDK and required dependencies to a Rust project. Includes aws-config, aws-sdk-cloudformation, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudformation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudformation = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK Snowball Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This code snippet demonstrates how to add the required dependencies for working with the AWS SDK for Rust's Snowball service, specifically `aws-config`, `aws-sdk-snowball`, and `tokio` with full features enabled. These dependencies are mandatory to enable asynchronous calls and to utilize the Snowball SDK's API in Rust projects. The `[dependencies]` block should be included in your project's Cargo.toml file to ensure all required crates are fetched and versioned properly.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/snowball/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-snowball = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK IoT Analytics Client in Rust\nDESCRIPTION: This code demonstrates how to create an IoT Analytics client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotanalytics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotanalytics as iotanalytics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotanalytics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotanalytics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppConfig Data Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS AppConfig Data client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appconfigdata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appconfigdata as appconfigdata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appconfigdata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appconfigdata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Application Discovery SDK Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for adding AWS Application Discovery SDK to a Rust project. Includes required dependencies for aws-config, aws-sdk-applicationdiscovery, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationdiscovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-applicationdiscovery = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DSQL Client in Rust\nDESCRIPTION: Shows how to create and initialize an AWS DSQL client using the SDK. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dsql/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dsql as dsql;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dsql::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dsql::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Service Catalog SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required Rust crates and their versions needed to interact with AWS Service Catalog using the AWS SDK for Rust. Includes `aws-config` for configuration loading (with the `behavior-version-latest` feature), `aws-sdk-servicecatalog` for the service client itself, and `tokio` for the asynchronous runtime (with the `full` feature).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicecatalog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-servicecatalog = \"1.65.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaConnect Client\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS MediaConnect client in Rust. Shows basic setup with error handling and async runtime configuration using Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediaconnect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediaconnect as mediaconnect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediaconnect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediaconnect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaPackage Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize an AWS MediaPackage client using environment configuration. Shows async main function setup with error handling and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediapackage as mediapackage;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediapackage::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediapackage::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SSM Quick Setup in Rust (Cargo.toml)\nDESCRIPTION: This snippet demonstrates how to declare dependencies in the Cargo.toml for setting up a Rust project to use the aws-sdk-ssmquicksetup crate. It requires the aws-config crate (with the 'behavior-version-latest' feature), aws-sdk-ssmquicksetup at version 1.29.0, and Tokio with the 'full' feature for managing asynchronous code. Ensure all dependencies are added in the [dependencies] section of Cargo.toml. Inputs are crate names and their respective versions; the output is an appropriately configured Cargo.toml file. Constraints include using compatible crate versions and features as shown.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmquicksetup/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssmquicksetup = \"1.29.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-pcaconnectorscep Dependencies to Cargo.toml\nDESCRIPTION: Configuration for adding the aws-sdk-pcaconnectorscep module and its dependencies to a Rust project's Cargo.toml file. Includes aws-config with latest behavior version, the PCA connector SCEP SDK, and Tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcaconnectorscep/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pcaconnectorscep = \"1.34.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-swf Dependencies in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies in the `Cargo.toml` file for a Rust project using the AWS SWF SDK. It includes `aws-config` for configuration loading (specifying the 'behavior-version-latest' feature), `aws-sdk-swf` for SWF service interaction, and `tokio` for the asynchronous runtime (with the 'full' feature enabled).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/swf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-swf = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Observability Admin to Cargo.toml\nDESCRIPTION: Required dependencies to add to a Rust project's Cargo.toml file to use the AWS SDK Observability Admin client. Includes aws-config, aws-sdk-observabilityadmin, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/observabilityadmin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-observabilityadmin = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Route53Domains SDK Dependencies to Cargo.toml\nDESCRIPTION: Configuration for adding the Route53Domains SDK and its dependencies to a Rust project's Cargo.toml file. Includes aws-config, aws-sdk-route53domains, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53domains/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53domains = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS SDK in Rust (Cargo.toml)\nDESCRIPTION: This code snippet shows the dependency section to add to your Cargo.toml to enable usage of aws-sdk-ssmsap in your Rust project. Required dependencies include aws-config (for loading configuration from the environment), aws-sdk-ssmsap (the service SDK), and tokio (asynchronous runtime). Ensure you specify the versions and desired features. This configuration is required before writing code that interacts asynchronously with the AWS SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmsap/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssmsap = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Pricing Client in Rust\nDESCRIPTION: Example of creating a basic AWS pricing service client in Rust using the AWS SDK. The code shows loading configuration from environment variables and initializing a new pricing client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pricing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pricing as pricing;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pricing::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pricing::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Amplify Backend SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the AWS Amplify Backend SDK in a Rust project. It includes the AWS config, Amplify Backend SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplifybackend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-amplifybackend = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MediaTailor Client in Rust\nDESCRIPTION: Example of creating an AWS MediaTailor client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediatailor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mediatailor as mediatailor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mediatailor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mediatailor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS SDK Directory Service Data\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK Directory Service Data with Rust. Includes aws-config, aws-sdk-directoryservicedata, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directoryservicedata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-directoryservicedata = \"1.21.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK NetworkManager Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-networkmanager and required dependencies to a Rust project's Cargo.toml file. It includes aws-config, aws-sdk-networkmanager, and tokio with full features for asynchronous operation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-networkmanager = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IVS Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS IVS client using the Rust SDK. Demonstrates basic error handling and async runtime setup using tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ivs as ivs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ivs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ivs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Rekognition Client in Rust\nDESCRIPTION: Basic example showing how to initialize the Amazon Rekognition client from environment configuration. The code creates a client instance that can be used to make API calls to the Rekognition service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rekognition/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_rekognition as rekognition;\n\n#[::tokio::main]\nasync fn main() -> Result<(), rekognition::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_rekognition::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT Jobs Data Plane SDK\nDESCRIPTION: Dependencies configuration in Cargo.toml for using the AWS IoT Jobs Data Plane SDK with Rust. Includes required dependencies for aws-config, the IoT Jobs Data Plane SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotjobsdataplane/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotjobsdataplane = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing IoT Data Plane Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS IoT Data Plane client using the SDK. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotdataplane/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotdataplane as iotdataplane;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotdataplane::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotdataplane::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an ApplicationInsights Client in Rust\nDESCRIPTION: Example of initializing and using the AWS SDK for ApplicationInsights client in Rust. Demonstrates loading configuration from environment variables and creating a client instance for making API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationinsights/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_applicationinsights as applicationinsights;\n\n#[::tokio::main]\nasync fn main() -> Result<(), applicationinsights::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_applicationinsights::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Auto Scaling Plans Client in Rust\nDESCRIPTION: This snippet demonstrates how to create and initialize an AWS Auto Scaling Plans client in Rust using the SDK. It shows the basic structure of an asynchronous main function that loads configuration from environment variables.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/autoscalingplans/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_autoscalingplans as autoscalingplans;\n\n#[::tokio::main]\nasync fn main() -> Result<(), autoscalingplans::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_autoscalingplans::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Support App SDK Client - Rust\nDESCRIPTION: This snippet demonstrates how to asynchronously initialize a client for the aws-sdk-supportapp crate in a Rust application. It loads AWS configuration from the environment and creates a new client instance, enabling subsequent API calls to manage support cases in Slack. This code depends on the aws-sdk-supportapp, aws-config, and tokio crates, and is intended as a starting template for interacting with AWS Support App services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/supportapp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_supportapp as supportapp;\n\n#[::tokio::main]\nasync fn main() -> Result<(), supportapp::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_supportapp::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS API Gateway Client in Rust\nDESCRIPTION: Basic example of creating and initializing an AWS API Gateway client in Rust using environment configuration. Shows async main function setup with error handling and client instantiation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigateway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_apigateway as apigateway;\n\n#[::tokio::main]\nasync fn main() -> Result<(), apigateway::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_apigateway::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IoT Wireless Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an AWS IoT Wireless client using environment configuration. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotwireless/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotwireless as iotwireless;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotwireless::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotwireless::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MemoryDB Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS MemoryDB client using environmental configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/memorydb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_memorydb as memorydb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), memorydb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_memorydb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Amazon Q Connect Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-qconnect crate and its dependencies to a Rust project's Cargo.toml file. It includes the AWS config crate with the latest behavior version feature, the Amazon Q Connect SDK, and Tokio with full features for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qconnect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-qconnect = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running the analyze-document Example in Rust\nDESCRIPTION: Command line instruction for running the analyze-document example which processes a document image file and optionally answers a query about the document content. The example supports region configuration and help options.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/textract/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin analyze-document -- --document-path ./example_document.png [--help] [-r REGION] [--query QUERY]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS GameLift Streams in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS GameLift Streams SDK with Rust. Includes aws-config, aws-sdk-gameliftstreams, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/gameliftstreams/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-gameliftstreams = \"1.4.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS ConnectCases Dependencies in Cargo.toml\nDESCRIPTION: Package dependencies configuration for integrating AWS ConnectCases SDK into a Rust project. Includes required dependencies for aws-config, aws-sdk-connectcases, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcases/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connectcases = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for AWS SDK Panorama in Rust (Cargo.toml)\nDESCRIPTION: This snippet demonstrates how to declare the necessary dependencies for using the AWS SDK Panorama client in a Rust project. The required crates include aws-sdk-panorama, aws-config (with the \"behavior-version-latest\" feature enabled), and the Tokio runtime with the full features needed for async support. These lines should be added to your project's Cargo.toml under the [dependencies] section to ensure all required libraries are available.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/panorama/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-panorama = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Backup Search Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create a client for the AWS Backup Search service using the aws-sdk-backupsearch crate. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backupsearch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_backupsearch as backupsearch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), backupsearch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_backupsearch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS SMS Client in Rust\nDESCRIPTION: This Rust code demonstrates how to initialize an AWS Server Migration Service (SMS) client. It uses `aws_config::load_from_env()` to asynchronously load AWS configuration (like credentials and region) from environment variables and then creates an `aws_sdk_sms::Client` instance using this configuration. The example uses `#[::tokio::main]` as the asynchronous runtime entry point, requiring the `tokio` crate with the `full` feature enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_sms as sms;\n\n#[::tokio::main]\nasync fn main() -> Result<(), sms::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_sms::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for AWS WAF Regional in TOML\nDESCRIPTION: This TOML snippet demonstrates how to add the necessary dependencies to your `Cargo.toml` file to use the `aws-sdk-wafregional` crate. It includes `aws-config` for configuration loading, the specific `aws-sdk-wafregional` crate, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wafregional/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-wafregional = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Chime Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK Chime and required dependencies to a Rust project's Cargo.toml file. Includes aws-config, aws-sdk-chime, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chime = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Service Discovery Client with Tokio in Rust\nDESCRIPTION: This snippet demonstrates initializing the AWS Service Discovery SDK client with async setup, leveraging Tokio's runtime in Rust. It loads AWS configuration from the environment, then constructs an aws_sdk_servicediscovery::Client. The client can then be used for API calls to Cloud Map. Dependencies required include aws-sdk-servicediscovery, aws-config, and Tokio with async/await support. Inputs involve environment configuration, and output is a ready-to-use client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicediscovery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_servicediscovery as servicediscovery;\n\n#[::tokio::main]\nasync fn main() -> Result<(), servicediscovery::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_servicediscovery::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS Synthetics Client in Rust\nDESCRIPTION: Demonstrates how to initialize an `aws_sdk_synthetics::Client` in Rust. It uses `aws_config::load_from_env()` within a Tokio async runtime to load AWS configuration from environment variables and then creates a new client instance with that configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/synthetics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_synthetics as synthetics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), synthetics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_synthetics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS NetworkManager Client in Rust\nDESCRIPTION: This snippet demonstrates how to create a NetworkManager client in Rust. It loads AWS configuration from environment variables and initializes a new client instance using the aws-sdk-networkmanager crate.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkmanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_networkmanager as networkmanager;\n\n#[::tokio::main]\nasync fn main() -> Result<(), networkmanager::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_networkmanager::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Neptune Graph SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-neptunegraph. Includes aws-config, aws-sdk-neptunegraph, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptunegraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-neptunegraph = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Connect Campaigns Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an AWS SDK Connect Campaigns client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcampaigns/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connectcampaigns as connectcampaigns;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connectcampaigns::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connectcampaigns::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Access Analyzer Client\nDESCRIPTION: Basic example showing how to initialize and create an AWS SDK Access Analyzer client in Rust using environment configuration. Demonstrates async main function setup and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/accessanalyzer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_accessanalyzer as accessanalyzer;\n\n#[::tokio::main]\nasync fn main() -> Result<(), accessanalyzer::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_accessanalyzer::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK ARC Zonal Shift in Rust\nDESCRIPTION: Cargo.toml configuration for adding the AWS SDK for ARC Zonal Shift to a Rust project. Includes required dependencies for aws-config, aws-sdk-arczonalshift, and tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/arczonalshift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-arczonalshift = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for aws-sdk-sagemaker in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in the `Cargo.toml` file for a Rust project using the AWS SageMaker SDK. It includes `aws-config` for configuration loading (with the 'behavior-version-latest' feature), the `aws-sdk-sagemaker` crate itself, and the `tokio` runtime with full features enabled. These dependencies are necessary to compile and run applications utilizing the SageMaker service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemaker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemaker = \"1.119.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK FMS Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for FMS, including the aws-config, aws-sdk-fms, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-fms = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ImageBuilder Client in Rust\nDESCRIPTION: Basic example showing how to create and initialize an AWS ImageBuilder client using environment configuration. Demonstrates async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/imagebuilder/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_imagebuilder as imagebuilder;\n\n#[::tokio::main]\nasync fn main() -> Result<(), imagebuilder::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_imagebuilder::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Amazon Lex Model Building Client in Rust\nDESCRIPTION: This code example demonstrates how to initialize an AWS Lex Model Building client in Rust. It shows loading configuration from environment variables and creating a new client instance, with the main function structured to handle asynchronous operations and proper error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexmodelbuilding/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lexmodelbuilding as lexmodelbuilding;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lexmodelbuilding::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lexmodelbuilding::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Migration Hub Refactor Spaces\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS SDK Migration Hub Refactor Spaces with Rust. Includes aws-config, aws-sdk-migrationhubrefactorspaces, and tokio dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubrefactorspaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-migrationhubrefactorspaces = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Listing MediaPackage Channels using AWS SDK for Rust\nDESCRIPTION: Code reference to an example that demonstrates how to list MediaPackage channels. The example is located in the mediapackage-helloworld.rs file at line 22.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/mediapackage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nListChannels\n```\n\n----------------------------------------\n\nTITLE: Installing AWS DRS SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency configuration for setting up the AWS DRS SDK with required dependencies including aws-config, aws-sdk-drs, and tokio with full features for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/drs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-drs = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running list-assets.rs Command for AWS IoT SiteWise in Rust\nDESCRIPTION: Command syntax for listing AWS IoT SiteWise assets in the Region, filtering by ALL or TOP_LEVEL. Requires filter type and optional asset model ID parameters.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sitewise/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin list-assets -- -f FILTER [-a ASSET-MODEL-ID] [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Installing AWS ELB SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration for setting up the AWS Elastic Load Balancing SDK in a Rust project. Includes required dependencies for aws-config, aws-sdk-elasticloadbalancing, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticloadbalancing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elasticloadbalancing = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK IoT Device Advisor Dependency in Rust\nDESCRIPTION: This code snippet shows how to add the aws-sdk-iotdeviceadvisor crate and its dependencies to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotdeviceadvisor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotdeviceadvisor = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS PCS Client in Rust\nDESCRIPTION: This example demonstrates how to initialize and use the AWS SDK PCS client in a Rust application. It shows the basic pattern of creating a client from environment configuration using aws-config and setting up an asynchronous main function.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pcs as pcs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pcs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pcs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Deadline Client - Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS SDK Deadline client using environment configuration. Demonstrates async/await pattern with Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/deadline/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_deadline as deadline;\n\n#[::tokio::main]\nasync fn main() -> Result<(), deadline::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_deadline::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS WorkMail Message Flow Dependencies in Cargo.toml\nDESCRIPTION: This TOML snippet shows the necessary dependencies to add to your project's `Cargo.toml` file to use the `aws-sdk-workmailmessageflow` crate. It includes `aws-config` for loading AWS configuration, the specific service crate `aws-sdk-workmailmessageflow`, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workmailmessageflow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workmailmessageflow = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK MQ in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-mq, including aws-config, aws-sdk-mq, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mq/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mq = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing QLDB Client in Rust\nDESCRIPTION: Example demonstrating how to initialize an AWS QLDB client in a Rust application. Loads configuration from environment variables and creates a new QLDB client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qldb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_qldb as qldb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), qldb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_qldb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS-SDK-RAM Dependencies in Cargo.toml for Rust\nDESCRIPTION: This snippet demonstrates how to add the aws-sdk-ram, aws-config, and tokio crates to your Rust project's Cargo.toml. Dependencies include aws-config for loading configuration and tokio for asynchronous runtime support. Ensure versions are compatible; the specified ones are for SDK version 1.64.0. These entries allow subsequent integration and initialization of RAM-related functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ram/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ram = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Forecast - TOML\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using AWS SDK Forecast with Rust. Includes aws-config, aws-sdk-forecast, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/forecast/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-forecast = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS BCM Pricing Calculator Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create a BCM Pricing Calculator client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bcmpricingcalculator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_bcmpricingcalculator as bcmpricingcalculator;\n\n#[::tokio::main]\nasync fn main() -> Result<(), bcmpricingcalculator::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_bcmpricingcalculator::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Artifact Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS SDK Artifact client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/artifact/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_artifact as artifact;\n\n#[::tokio::main]\nasync fn main() -> Result<(), artifact::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_artifact::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK ARC Zonal Shift Client in Rust\nDESCRIPTION: Example code for creating and using an AWS SDK client for ARC Zonal Shift in Rust. Demonstrates loading configuration from environment variables and initializing the client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/arczonalshift/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_arczonalshift as arczonalshift;\n\n#[::tokio::main]\nasync fn main() -> Result<(), arczonalshift::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_arczonalshift::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Lookout Equipment SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-lookoutequipment in a Rust project. Includes aws-config, the SDK itself, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutequipment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lookoutequipment = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-savingsplans in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies to include in your project's `Cargo.toml` file to use the AWS Savings Plans SDK. It requires `aws-config` (with the `behavior-version-latest` feature for recommended settings), the `aws-sdk-savingsplans` crate itself, and the `tokio` runtime (with the `full` feature) for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/savingsplans/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-savingsplans = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Customer Profiles Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Customer Profiles client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/customerprofiles/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_customerprofiles as customerprofiles;\n\n#[::tokio::main]\nasync fn main() -> Result<(), customerprofiles::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_customerprofiles::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Greengrass V2 SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Greengrass V2 SDK with Rust. Includes aws-config, aws-sdk-greengrassv2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/greengrassv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-greengrassv2 = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK GameLift Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK GameLift module as a dependency in a Rust project's Cargo.toml file. It includes the required dependencies for aws-config, aws-sdk-gamelift, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/gamelift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-gamelift = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running create-address Command for AWS Snowball\nDESCRIPTION: Command-line usage for creating an AWS Snowball address with required parameters like city, company, country, name, phone number, postal code, state, and street details.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/snowball/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin create-address -- --city CITY --company COMPANY --country COUNTRY --landmark LANDMARK --name NAME --phone-number PHONE-NUMBER --postal-code POSTAL-CODE --prefecture-or-district PREFECTURE-OR-DISTRICT --state STATE --street1 STREET1 --street2 STREET2 --street3 STREET3 [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT Fleet Hub SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS IoT Fleet Hub SDK. Includes aws-config, aws-sdk-iotfleethub, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotfleethub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotfleethub = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Marketplace Commerce Analytics SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies for using the AWS Marketplace Commerce Analytics SDK in a Rust project. Includes the AWS config, SDK crate, and Tokio for async functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacecommerceanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplacecommerceanalytics = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK IoT Analytics Dependency to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK IoT Analytics crate.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotanalytics = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Budgets Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK Budgets crate and its dependencies to a Rust project's Cargo.toml file. It includes the required dependencies for asynchronous execution and the latest version of the Budgets SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/budgets/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-budgets = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-devopsguru Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-devopsguru crate and its dependencies to a Rust project's Cargo.toml file. It includes the required versions for aws-config, aws-sdk-devopsguru, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/devopsguru/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-devopsguru = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Amplify UI Builder in Rust\nDESCRIPTION: This code snippet shows how to add the AWS SDK for Amplify UI Builder as a dependency in a Rust project's Cargo.toml file. It includes the required dependencies for the SDK and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplifyuibuilder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-amplifyuibuilder = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Omics Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies to use aws-sdk-omics in a Rust project. Includes aws-config, aws-sdk-omics, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/omics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-omics = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DataZone Client in Rust\nDESCRIPTION: Basic example of creating an AWS DataZone client using environment configuration. Shows async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datazone/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_datazone as datazone;\n\n#[::tokio::main]\nasync fn main() -> Result<(), datazone::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_datazone::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a Snowball Client using AWS SDK in Rust\nDESCRIPTION: This Rust code snippet shows how to asynchronously create and configure an AWS Snowball client using the AWS SDK. It starts by importing the sdk module, performs asynchronous configuration loading with `aws_config::load_from_env()`, then constructs a `Client` with those settings. This code must be placed in a Rust project's main function using Tokio's async runtime. Dependencies required include the `aws-sdk-snowball`, `aws-config`, and `tokio` crates as specified in Cargo.toml. Input: none; Output: an initialized client instance ready for making service calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/snowball/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_snowball as snowball;\n\n#[::tokio::main]\nasync fn main() -> Result<(), snowball::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_snowball::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Chime SDK Messaging Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Chime SDK Messaging client using environment configuration. Demonstrates basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmessaging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_chimesdkmessaging as chimesdkmessaging;\n\n#[::tokio::main]\nasync fn main() -> Result<(), chimesdkmessaging::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_chimesdkmessaging::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-emr Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the aws-sdk-emr crate. It includes aws-config, aws-sdk-emr, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/emr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-emr = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinpoint SMS Voice Client in Rust\nDESCRIPTION: This snippet demonstrates how to create a Pinpoint SMS Voice client using the AWS SDK for Rust. It loads configuration from environment variables and initializes a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointsmsvoice/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pinpointsmsvoice as pinpointsmsvoice;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pinpointsmsvoice::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pinpointsmsvoice::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Amplify Backend Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS Amplify Backend client in Rust using the SDK. It loads the configuration from the environment and initializes the client, which can then be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplifybackend/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_amplifybackend as amplifybackend;\n\n#[::tokio::main]\nasync fn main() -> Result<(), amplifybackend::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_amplifybackend::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Auto Scaling SDK Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to your Cargo.toml file to use the Auto Scaling SDK in a Rust project. It includes aws-config, aws-sdk-autoscaling, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/autoscaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-autoscaling = \"1.72.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for aws-sdk-workspacesweb in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary dependencies (`aws-config`, `aws-sdk-workspacesweb`, `tokio`) in the `Cargo.toml` file to use the AWS SDK for WorkSpaces Web in a Rust project. Requires a Rust environment with Cargo. The `behavior-version-latest` feature for `aws-config` and the `full` feature for `tokio` are enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspacesweb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workspacesweb = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Well-Architected SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This TOML snippet specifies the required dependencies for a Rust project using the AWS SDK for the Well-Architected Tool. It includes `aws-config` for handling AWS configuration, the specific `aws-sdk-wellarchitected` crate, and `tokio` for the asynchronous runtime environment.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/wellarchitected/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-wellarchitected = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Directory Service Data Client\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS Directory Service Data client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directoryservicedata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_directoryservicedata as directoryservicedata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), directoryservicedata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_directoryservicedata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS QLDB Session Client in Rust\nDESCRIPTION: Rust code example that demonstrates how to initialize a QLDB Session client using environment configuration. This creates the client instance which can be used to make API calls to the QLDB service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qldbsession/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_qldbsession as qldbsession;\n\n#[::tokio::main]\nasync fn main() -> Result<(), qldbsession::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_qldbsession::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Timestream InfluxDB SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the necessary crate dependencies (`aws-config`, `aws-sdk-timestreaminfluxdb`, `tokio`) and their versions to include in the `Cargo.toml` file for using the AWS SDK for Timestream InfluxDB in a Rust project. The `behavior-version-latest` feature for `aws-config` and the `full` feature for `tokio` are enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/timestreaminfluxdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-timestreaminfluxdb = \"1.51.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running Global Accelerator HelloWorld Example Command\nDESCRIPTION: Command to run the globalaccelerator-helloworld example which lists Global Accelerator accelerator names and ARNs. The -v flag can be used to display additional information.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/globalaccelerator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin globalaccelerator-helloworld [-v]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS HealthImaging SDK Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration required to use the AWS HealthImaging SDK in a Rust project. Includes aws-config, aws-sdk-medicalimaging, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/medicalimaging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-medicalimaging = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Keyspaces Rust SDK\nDESCRIPTION: Required dependencies to add to Cargo.toml for using the AWS Keyspaces SDK. Includes aws-config, aws-sdk-keyspaces, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/keyspaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-keyspaces = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS SDK Tax Settings Client (Rust)\nDESCRIPTION: This Rust code snippet illustrates how to asynchronously configure and instantiate a Client for the AWS Tax Settings SDK. It uses the Tokio runtime and loads configuration from the environment before creating the aws_sdk_taxsettings::Client. This setup is essential for making API calls to manage tax registration information as part of an automated workflow. The function returns a Result and requires tokio, aws-sdk-taxsettings, and aws-config as dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/taxsettings/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_taxsettings as taxsettings;\n\n#[::tokio::main]\nasync fn main() -> Result<(), taxsettings::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_taxsettings::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Marketplace Deployment Client\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Marketplace Deployment client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacedeployment/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplacedeployment as marketplacedeployment;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplacedeployment::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplacedeployment::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DirectConnect Client in Rust\nDESCRIPTION: Basic example of creating an AWS DirectConnect client using the SDK. Shows async main function setup, environment configuration loading, and client initialization with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/directconnect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_directconnect as directconnect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), directconnect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_directconnect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Connect Contact Lens\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK Connect Contact Lens with Rust. Includes aws-config, aws-sdk-connectcontactlens, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcontactlens/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connectcontactlens = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Outposts Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows the required dependencies in Cargo.toml to use the AWS SDK for Outposts in a Rust application. It includes aws-config, aws-sdk-outposts, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/outposts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-outposts = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Forecast Query Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an Amazon Forecast Query client using the AWS SDK for Rust. It loads the configuration from the environment and creates a new client instance. The main function is asynchronous and uses tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/forecastquery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_forecastquery as forecastquery;\n\n#[::tokio::main]\nasync fn main() -> Result<(), forecastquery::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_forecastquery::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Data Pipeline Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Data Pipeline client in Rust using the SDK. Demonstrates async client initialization with environment configuration loading.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datapipeline/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_datapipeline as datapipeline;\n\n#[::tokio::main]\nasync fn main() -> Result<(), datapipeline::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_datapipeline::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in Cargo.toml for ApplicationAutoScaling in AWS SDK for Rust\nDESCRIPTION: Adds the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for ApplicationAutoScaling. Includes aws-config, aws-sdk-applicationautoscaling, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationautoscaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-applicationautoscaling = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS HealthImaging Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS HealthImaging client using environment configuration. Shows basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/medicalimaging/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_medicalimaging as medicalimaging;\n\n#[::tokio::main]\nasync fn main() -> Result<(), medicalimaging::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_medicalimaging::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Athena Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK for Rust with Amazon Athena. It includes the aws-config, aws-sdk-athena, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/athena/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-athena = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK AppIntegrations Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS SDK AppIntegrations client in a Rust application using the aws-sdk-appintegrations crate.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appintegrations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appintegrations as appintegrations;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appintegrations::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appintegrations::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cargo for AWS Migration Hub Strategy\nDESCRIPTION: Cargo dependencies configuration for setting up AWS Migration Hub Strategy SDK with required packages including aws-config, aws-sdk-migrationhubstrategy, and tokio for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubstrategy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-migrationhubstrategy = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Sample data showing key components used in generating an AWS4-ECDSA signature including the algorithm, timestamp, scope string and hash value. This represents a real-world example of the values needed for AWS request signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-unnormalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\na14dce0217a32357c623c3db790988b6b5aa1494a527158b06d3ca4444561a4b\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CodeStar Connections Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create an AWS CodeStar Connections client using the Rust SDK. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the CodeStar Connections service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codestarconnections/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codestarconnections as codestarconnections;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codestarconnections::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codestarconnections::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Neptune Data Client in Rust\nDESCRIPTION: Example showing how to create and initialize an AWS Neptune Data client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptunedata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_neptunedata as neptunedata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), neptunedata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_neptunedata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-freetier Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the aws-sdk-freetier crate. It includes aws-config, aws-sdk-freetier, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/freetier/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-freetier = \"1.62.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring Dependencies for AWS SDK Security Hub in Rust\nDESCRIPTION: This code snippet instructs users to add the required dependencies to the Cargo.toml file of their Rust project to use AWS Security Hub. Required packages include aws-config for SDK configuration, aws-sdk-securityhub for Security Hub API interaction, and tokio for asynchronous runtime support. Ensuring proper versioning and feature selection is mandatory for SDK compatibility and async runtime requirements. This is to be copied directly into your Cargo.toml for compilation and dependency management.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/securityhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-securityhub = \"1.69.2\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS S3 Control SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: Declares required dependencies for AWS S3 Control SDK usage in Rust via the Cargo.toml manifest file. Dependencies include aws-config (with latest behavior features), aws-sdk-s3control for S3 Control API access, and tokio with all features for async runtime support. Project maintainers should update version numbers as new releases become available. No direct code execution is involved; this snippet informs Cargo's build and dependency resolution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3control/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-s3control = \\\"1.73.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS BCM Pricing Calculator Rust SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-bcmpricingcalculator, and tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bcmpricingcalculator/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bcmpricingcalculator = \"1.17.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an IoT Managed Integrations Client in Rust\nDESCRIPTION: This code demonstrates how to create a client for the IoT Managed Integrations service using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotmanagedintegrations/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iotmanagedintegrations as iotmanagedintegrations;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iotmanagedintegrations::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iotmanagedintegrations::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kafka Connect Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Kafka Connect client using environment configuration. Shows async main function setup with proper error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kafkaconnect/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kafkaconnect as kafkaconnect;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kafkaconnect::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kafkaconnect::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Glue Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for Glue. It includes the aws-config, aws-sdk-glue, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/glue/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-glue = \"1.90.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Payment Cryptography in Cargo.toml\nDESCRIPTION: This snippet shows how to configure the necessary dependencies in a Cargo.toml file for using the AWS Payment Cryptography SDK, including aws-config, aws-sdk-paymentcryptography, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/paymentcryptography/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-paymentcryptography = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Snow Device Management Client in Rust (Rust)\nDESCRIPTION: This Rust code snippet demonstrates the initialization of an AWS Snow Device Management client. It uses the `tokio` asynchronous runtime (`#[::tokio::main]`), loads AWS configuration from the environment using `aws_config::load_from_env()`, and creates a `Client` instance from the `aws_sdk_snowdevicemanagement` crate. The `main` function is marked `async` and returns a `Result` to handle potential errors during setup or API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/snowdevicemanagement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_snowdevicemanagement as snowdevicemanagement;\n\n#[::tokio::main]\nasync fn main() -> Result<(), snowdevicemanagement::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_snowdevicemanagement::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS WAF Client with async Rust and Tokio - Rust\nDESCRIPTION: Demonstrates the initialization of an AWS WAF Classic client using the aws-sdk-waf crate in an asynchronous Rust context. Utilizes aws_config::load_from_env to manage credential and region loading, and then constructs the client for making service calls. Requires the dependencies listed in Cargo.toml and execution within a Tokio async runtime. Inputs include AWS configuration from the environment; outputs are an initialized Client instance ready for API requests. All operations are performed asynchronously.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/waf/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_waf as waf;\n\n#[::tokio::main]\nasync fn main() -> Result<(), waf::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_waf::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS CloudHSM v2 SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS CloudHSM v2 SDK with Rust. Includes aws-config, aws-sdk-cloudhsmv2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudhsmv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudhsmv2 = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK GuardDuty Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK GuardDuty crate and its dependencies to a Rust project's Cargo.toml file. It includes the required dependencies for asynchronous execution and the latest behavior version of the AWS config.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/guardduty/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-guardduty = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS PinpointSMSVoiceV2 Client in Rust\nDESCRIPTION: This snippet demonstrates how to create and initialize an AWS PinpointSMSVoiceV2 client in Rust. It imports the necessary module, sets up a Tokio async main function, loads configuration from environment variables, and creates a client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointsmsvoicev2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_pinpointsmsvoicev2 as pinpointsmsvoicev2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), pinpointsmsvoicev2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_pinpointsmsvoicev2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS AppSync SDK Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to your Cargo.toml file, including the AWS AppSync SDK, AWS config, and Tokio async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appsync/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appsync = \"1.76.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-acmpca Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the aws-sdk-acmpca package and its dependencies to a Rust project. Includes the aws-config package with the latest behavior version feature, the aws-sdk-acmpca crate, and Tokio with full features for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/acmpca/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-acmpca = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK GeoMaps Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK GeoMaps in a Rust project. It includes aws-config, aws-sdk-geomaps, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/geomaps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-geomaps = \"1.18.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting up Dependencies in Cargo.toml for AWS SDK API Gateway V2\nDESCRIPTION: Configuration for adding the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for API Gateway V2. Includes dependencies for aws-config, aws-sdk-apigatewayv2, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apigatewayv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-apigatewayv2 = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK CodePipeline Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize the AWS SDK CodePipeline client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codepipeline/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codepipeline as codepipeline;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codepipeline::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codepipeline::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT SDK in Rust\nDESCRIPTION: Dependencies configuration in Cargo.toml for using the AWS IoT SDK with Rust. Includes required dependencies for aws-config, aws-sdk-iot, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iot/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iot = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeDeploy Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK CodeDeploy crate and its dependencies to a Rust project's Cargo.toml file. It includes the required dependencies for asynchronous execution and the specific version of the CodeDeploy SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codedeploy/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n\"[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-codedeploy = \\\"1.66.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\"\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with AWS Headers\nDESCRIPTION: A basic HTTP/1.1 GET request demonstrating the required host header format for AWS services. Shows the minimal request structure needed for AWS API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Amazon Transcribe Streaming in Rust\nDESCRIPTION: This code snippet shows the expected output when running the transcribestreaming example with a specific WAV file. It demonstrates the transcribed text produced by Amazon Transcribe.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/transcribestreaming/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nGood day to you transcribe.\nThis is Polly talking to you from the Rust ST K.\n```\n\n----------------------------------------\n\nTITLE: Setting up dependencies for aws-sdk-personalize in Cargo.toml\nDESCRIPTION: Configures the necessary dependencies in a Cargo.toml file to use the aws-sdk-personalize crate. Includes aws-config, aws-sdk-personalize, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalize/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-personalize = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Notifications Contacts Client in Rust\nDESCRIPTION: Example code demonstrating how to create an AWS Notifications Contacts client in a Rust application. The snippet loads configuration from the environment and initializes a client ready for making API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/notificationscontacts/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_notificationscontacts as notificationscontacts;\n\n#[::tokio::main]\nasync fn main() -> Result<(), notificationscontacts::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_notificationscontacts::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Video WebRTC Storage Client\nDESCRIPTION: Example code demonstrating how to initialize and create a Kinesis Video WebRTC Storage client using environment configuration. Shows basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideowebrtcstorage/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisvideowebrtcstorage as kinesisvideowebrtcstorage;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisvideowebrtcstorage::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisvideowebrtcstorage::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ConnectCampaignsV2 Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize and use the ConnectCampaignsV2 client in a Rust application. It shows the basic structure of an asynchronous main function that loads the AWS configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcampaignsv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connectcampaignsv2 as connectcampaignsv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connectcampaignsv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connectcampaignsv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-cloudtraildata Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the aws-sdk-cloudtraildata crate in a Rust project. It includes aws-config, aws-sdk-cloudtraildata, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudtraildata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudtraildata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK EksAuth in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-eksauth with Tokio async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eksauth/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-eksauth = \"1.62.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing an AWS Certificate Manager Client in Rust\nDESCRIPTION: This code demonstrates how to initialize an AWS Certificate Manager client in Rust. It configures the client using environment variables and creates a new client instance ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/acm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_acm as acm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), acm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_acm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring aws-sdk-workdocs Dependencies in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies in the `Cargo.toml` file to include the AWS SDK for WorkDocs (`aws-sdk-workdocs`), the AWS configuration library (`aws-config`), and the Tokio runtime (`tokio`) in a Rust project. The `behavior-version-latest` feature for `aws-config` is enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workdocs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workdocs = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS Support App Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet lists the dependencies required to use the aws-sdk-supportapp crate in a Rust project. It specifies version constraints for aws-config and tokio with the necessary features enabled, ensuring asynchronous operations and compatibility with the AWS SDK. Insert this block into the project's Cargo.toml file to install the SDK and its prerequisites.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/supportapp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-supportapp = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS License Manager Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an AWS License Manager client using environment configuration. Shows async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanager/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_licensemanager as licensemanager;\n\n#[::tokio::main]\nasync fn main() -> Result<(), licensemanager::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_licensemanager::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK AppFabric Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Rust project's Cargo.toml file for using the AWS SDK AppFabric client. It includes aws-config, aws-sdk-appfabric, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appfabric/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appfabric = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK for AMP Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for AMP. It includes the aws-config and aws-sdk-amp crates, as well as tokio for asynchronous runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-amp = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-support in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies to include in your project's `Cargo.toml` file to use the AWS SDK for Support with Rust. It requires `aws-config` for configuration loading, `aws-sdk-support` for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/support/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-support = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SSM Quick Setup Client with Rust SDK\nDESCRIPTION: This Rust snippet shows how to initialize a client for the aws-sdk-ssmquicksetup service using async code. It imports the crate, loads configuration from the environment asynchronously using aws_config::load_from_env, and then creates a new client instance. The main function is marked with the #[::tokio::main] attribute, requiring Tokio as a dependency. Inputs are configuration loaded from the environment; outputs include an operational client for making API calls. Must be used in an async-compatible context.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmquicksetup/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssmquicksetup as ssmquicksetup;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssmquicksetup::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssmquicksetup::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Identity Store Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS Identity Store client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/identitystore/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_identitystore as identitystore;\n\n#[::tokio::main]\nasync fn main() -> Result<(), identitystore::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_identitystore::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Billing Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies for using the AWS SDK Billing client in a Rust project's Cargo.toml file. It includes the aws-config, aws-sdk-billing, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/billing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-billing = \"1.16.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Canonical AWS API Request with ECDSA Signing\nDESCRIPTION: Example of a canonical AWS API request format showing the HTTP method, path, query parameters, headers and hash. Uses ECDSA-P256-SHA256 signing algorithm with example credentials.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-after/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Auto Scaling Plans SDK Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to configure the necessary dependencies in a Cargo.toml file to use the AWS Auto Scaling Plans SDK, including the required Tokio runtime for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/autoscalingplans/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-autoscalingplans = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS License Manager User Subscriptions Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS License Manager User Subscriptions client using environment configuration. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanagerusersubscriptions/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_licensemanagerusersubscriptions as licensemanagerusersubscriptions;\n\n#[::tokio::main]\nasync fn main() -> Result<(), licensemanagerusersubscriptions::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_licensemanagerusersubscriptions::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT Events Data SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-ioteventsdata, and tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ioteventsdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ioteventsdata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Backup Gateway Dependencies in Rust\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK for Backup Gateway in a Rust project. It includes the aws-config, aws-sdk-backupgateway, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backupgateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-backupgateway = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK FMS Client in Rust\nDESCRIPTION: This code demonstrates how to create and initialize an AWS SDK FMS client in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fms/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_fms as fms;\n\n#[::tokio::main]\nasync fn main() -> Result<(), fms::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_fms::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Managed Blockchain Query Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Managed Blockchain Query client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/managedblockchainquery/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_managedblockchainquery as managedblockchainquery;\n\n#[::tokio::main]\nasync fn main() -> Result<(), managedblockchainquery::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_managedblockchainquery::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kinesis Analytics in Cargo.toml\nDESCRIPTION: Specifies the required dependencies for using AWS Kinesis Analytics SDK in a Rust project. Includes aws-config, aws-sdk-kinesisanalytics, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisanalytics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisanalytics = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ECR Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK ECR crate. It includes aws-config, aws-sdk-ecr, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecr/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ecr = \"1.70.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ConnectCases Client in Rust\nDESCRIPTION: Basic implementation of AWS ConnectCases client initialization in Rust. Shows how to create an async main function, load AWS configuration from environment variables, and instantiate a new ConnectCases client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcases/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connectcases as connectcases;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connectcases::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connectcases::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Audit Manager Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS SDK Audit Manager and required dependencies to a Rust project. Includes aws-config, aws-sdk-auditmanager, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/auditmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-auditmanager = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS AppStream SDK - TOML\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS AppStream SDK with Rust. Includes aws-config, aws-sdk-appstream, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appstream/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appstream = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS CodeCatalyst SDK in Cargo.toml\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using the AWS CodeCatalyst SDK. Includes aws-config, aws-sdk-codecatalyst, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codecatalyst/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codecatalyst = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppTest Client in Rust\nDESCRIPTION: Demonstrates how to create an AWS AppTest client using the SDK. The code loads configuration from environment variables and initializes a new client instance, ready to make API calls to the AWS Mainframe Modernization Application Testing service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apptest/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_apptest as apptest;\n\n#[::tokio::main]\nasync fn main() -> Result<(), apptest::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_apptest::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS ECR Public SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS ECR Public SDK. Includes aws-config, aws-sdk-ecrpublic, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecrpublic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ecrpublic = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Compute Optimizer Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK Compute Optimizer crate and its dependencies to a Rust project's Cargo.toml file. It includes the required versions for aws-config, aws-sdk-computeoptimizer, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/computeoptimizer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-computeoptimizer = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS API HTTP Request Format\nDESCRIPTION: Example of an AWS API request showing the HTTP method (GET), request path, required headers (host, x-amz-date, x-amz-region-set), canonical header string, and request hash. This represents the format required for AWS request signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET\n/example/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK FSx in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS SDK FSx with Rust. Includes required dependencies for aws-config, aws-sdk-fsx, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fsx/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-fsx = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Route53 Recovery Readiness Client in Rust\nDESCRIPTION: Demonstrates how to initialize the AWS Route 53 Recovery Readiness service client within an asynchronous Rust application using the `tokio` runtime. It imports the necessary crate, loads AWS configuration from environment variables via `aws_config::load_from_env()`, and then creates a `Client` instance to interact with the service API. The `no_run` attribute indicates this snippet is illustrative and not meant to be compiled directly as a standalone example.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoveryreadiness/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_route53recoveryreadiness as route53recoveryreadiness;\n\n#[::tokio::main]\nasync fn main() -> Result<(), route53recoveryreadiness::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_route53recoveryreadiness::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Notifications SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS Notifications SDK to a Rust project's dependencies in the Cargo.toml file. Includes the aws-config, aws-sdk-notifications, and tokio dependencies with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/notifications/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-notifications = \"1.16.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS SDK Rust Project Structure\nDESCRIPTION: Project structure showing the organization of logging and tracing examples in separate modules within the AWS SDK for Rust codebase.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/logging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- [Logging](logger/src/main.rs)\n- [Tracing](tracing/src/main.rs)\n```\n\n----------------------------------------\n\nTITLE: Installing Amazon Pinpoint Email SDK Dependencies in Cargo.toml\nDESCRIPTION: Shows how to add the required dependencies to a Rust project's Cargo.toml file, including aws-config, aws-sdk-pinpointemail, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointemail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pinpointemail = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CodeArtifact Client in Rust\nDESCRIPTION: Basic setup for creating an AWS CodeArtifact client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeartifact/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codeartifact as codeartifact;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codeartifact::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codeartifact::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Cost and Usage Report Client\nDESCRIPTION: Example code showing how to initialize and create an AWS Cost and Usage Report client using the SDK. Demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costandusagereport/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_costandusagereport as costandusagereport;\n\n#[::tokio::main]\nasync fn main() -> Result<(), costandusagereport::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_costandusagereport::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Clean Rooms SDK in TOML\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-cleanrooms with Rust. Includes aws-config, aws-sdk-cleanrooms, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cleanrooms/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cleanrooms = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Marketplace Entitlement Client\nDESCRIPTION: Basic setup code for creating an AWS Marketplace Entitlement client using environment configuration. Shows the minimal code required to initialize the client for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplaceentitlement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplaceentitlement as marketplaceentitlement;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplaceentitlement::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplaceentitlement::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Application Cost Profiler SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS Application Cost Profiler SDK and its dependencies to a Rust project using Cargo. Includes required dependencies for async functionality via Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationcostprofiler/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-applicationcostprofiler = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Deploying and Testing EKS Credentials Provider Stack\nDESCRIPTION: This snippet shows the commands to bootstrap the CDK, deploy the stack, and test the IRSA and EKS Pod Identity configurations. It includes steps to execute into the test pods and run Rust code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/integration-tests/eks-credentials/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncdk bootstrap aws://accountid/region\ncdk deploy\n# make lunch, go for a bike ride, etc. ~1h.\nkubectl exec rust-sdk-test-irsa -it bash\n# write some rust code, e.g. test.rs, run it. will have irsa identity\nkubectl exec rust-sdk-test-pod-identity -it bash\n# run more rust code. will have eks pod identity\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Payment Cryptography Data - TOML\nDESCRIPTION: This TOML snippet shows how to configure a Rust project's Cargo.toml to include the required aws-sdk-paymentcryptographydata crate, along with aws-config and the Tokio async runtime. Each package is specified with a version compatible with the SDK. Add these entries to the [dependencies] section to enable async AWS client creation and operations for payment cryptography data. No additional parameters are required beyond what Cargo expects; usage assumes a working Rust project.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/paymentcryptographydata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-paymentcryptographydata = \\\"1.68.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Kinesis Analytics V2 Dependencies - Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Kinesis Analytics V2 SDK. Includes aws-config, aws-sdk-kinesisanalyticsv2, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisanalyticsv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisanalyticsv2 = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kinesis Video Media SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-kinesisvideomedia, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideomedia/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisvideomedia = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS DRS Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS DRS client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/drs/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_drs as drs;\n\n#[::tokio::main]\nasync fn main() -> Result<(), drs::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_drs::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request with AWS Signature Version 4\nDESCRIPTION: This snippet demonstrates the structure of an HTTP GET request with AWS Signature Version 4 authentication. It includes the request line, query parameters for authentication, and required headers. The empty line and SHA256 hash at the end are part of the signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/example/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Amplify in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in Cargo.toml for using AWS SDK Amplify with Rust. Includes aws-config, aws-sdk-amplify, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/amplify/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-amplify = \"1.72.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS WorkSpaces Thin Client SDK Client in Rust\nDESCRIPTION: This Rust snippet illustrates how to create and initialize an asynchronous AWS SDK client for the WorkSpaces Thin Client service. It demonstrates loading configuration from the environment, constructing a client instance, and provides a template for making further asynchronous SDK calls. Key dependencies include the initialized aws_sdk_workspacesthinclient crate, aws-config, and tokio for asynchronous runtime support. Inputs include correct environment configuration, and the output is a ready-to-use client for API interactions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspacesthinclient/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_workspacesthinclient as workspacesthinclient;\n\n#[::tokio::main]\nasync fn main() -> Result<(), workspacesthinclient::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_workspacesthinclient::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kendra Ranking SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-kendraranking, including AWS config, the SDK itself, and Tokio for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kendraranking/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kendraranking = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Batch Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS SDK Batch with Rust. Includes required dependencies for aws-config, aws-sdk-batch, and tokio with async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/batch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-batch = \"1.74.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK DataExchange Client in Rust\nDESCRIPTION: This code snippet demonstrates how to initialize and use the AWS SDK DataExchange client in a Rust application. It shows the basic structure of creating a client using the aws_config crate and handling potential errors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dataexchange/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_dataexchange as dataexchange;\n\n#[::tokio::main]\nasync fn main() -> Result<(), dataexchange::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_dataexchange::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Migration Hub Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS Migration Hub client in Rust using the SDK. Shows basic async setup with error handling and config loading from environment.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_migrationhub as migrationhub;\n\n#[::tokio::main]\nasync fn main() -> Result<(), migrationhub::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_migrationhub::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Detective Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file to use the AWS SDK for Detective in a Rust project. It includes the aws-config, aws-sdk-detective, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/detective/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-detective = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT Wireless SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS IoT Wireless SDK with Rust. Includes aws-config, aws-sdk-iotwireless, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotwireless/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotwireless = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Greengrass V2 Client\nDESCRIPTION: Basic implementation showing how to initialize and create an AWS Greengrass V2 client using the Rust SDK. Demonstrates async main function setup, environment configuration loading, and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/greengrassv2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_greengrassv2 as greengrassv2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), greengrassv2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_greengrassv2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Running TLS Test Suite in AWS SDK for Rust\nDESCRIPTION: Command to run the test suite for the TLS example using cargo. This executes all tests, including ignored ones, in the TLS package.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/tls/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -p tls --test test-tls -- --include-ignored\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK OAM Dependencies with Cargo\nDESCRIPTION: This TOML snippet shows the required dependencies for using aws-sdk-oam in a Rust project. It includes aws-config, aws-sdk-oam, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/oam/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-oam = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an OpenSearch Client in Rust\nDESCRIPTION: Shows how to initialize and use the OpenSearch client in Rust. The code creates a configuration from environment variables and sets up a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opensearch/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_opensearch as opensearch;\n\n#[::tokio::main]\nasync fn main() -> Result<(), opensearch::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_opensearch::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS EFS SDK in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration required for using the AWS EFS SDK in a Rust project. Includes aws-config, aws-sdk-efs, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/efs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-efs = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS OpsWorks CM Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS OpsWorks CM client in Rust using the SDK. The code loads configuration from environment variables and creates a new client instance ready for API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opsworkscm/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_opsworkscm as opsworkscm;\n\n#[::tokio::main]\nasync fn main() -> Result<(), opsworkscm::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_opsworkscm::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: AWS ECDSA Authentication Request Format\nDESCRIPTION: Shows the format of an AWS authentication request including the HTTP method, URI-encoded path, query parameters with credentials, and host header. The request uses the AWS4-ECDSA-P256-SHA256 algorithm and includes a SHA256 hash of the empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-unreserved/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET\n/-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Location SDK Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS Location SDK and required dependencies to a Rust project. Includes aws-config, aws-sdk-location, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/location/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-location = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding Synthetics SDK Dependencies in Cargo.toml\nDESCRIPTION: Specifies the necessary dependencies for using the AWS SDK for Synthetics in a Rust project's `Cargo.toml` file. It includes `aws-config` for AWS configuration, `aws-sdk-synthetics` for the service client, and `tokio` for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/synthetics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-synthetics = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS GameLift Streams Client in Rust\nDESCRIPTION: Example code demonstrating how to initialize and create an AWS GameLift Streams client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/gameliftstreams/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_gameliftstreams as gameliftstreams;\n\n#[::tokio::main]\nasync fn main() -> Result<(), gameliftstreams::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_gameliftstreams::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK MWAA Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK MWAA client in a Rust project. Includes aws-config, aws-sdk-mwaa, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mwaa/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mwaa = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Marketplace Entitlement SDK\nDESCRIPTION: Dependencies configuration in Cargo.toml for using the AWS Marketplace Entitlement SDK. Includes required dependencies for aws-config, the SDK itself, and tokio for async functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplaceentitlement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplaceentitlement = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeGuru Reviewer Client in Rust\nDESCRIPTION: This code demonstrates how to create a CodeGuru Reviewer client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codegurureviewer/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codegurureviewer as codegurureviewer;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codegurureviewer::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codegurureviewer::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kinesis Video WebRTC Storage SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Kinesis Video WebRTC Storage SDK with Rust. Includes aws-config, the SDK itself, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideowebrtcstorage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisvideowebrtcstorage = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IoT FleetWise SDK in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS IoT FleetWise SDK including aws-config, aws-sdk-iotfleetwise, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotfleetwise/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotfleetwise = \"1.71.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Declaring AWS SDK Dependencies in Cargo.toml - Cargo.toml - TOML\nDESCRIPTION: This snippet demonstrates how to declare dependencies in the Cargo.toml file for using the aws-sdk-sagemakeredge crate in a Rust project. The required packages include aws-config (with the latest behavior version feature), aws-sdk-sagemakeredge, and tokio (with full features) for asynchronous operations. To function, the appropriate version numbers and feature flags are specified for each crate; users must have Cargo installed. There are no parameters, but changes in version requirements or features may need additional configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakeredge/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakeredge = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Secret Key for AWS Signature Version 4 Test Suite\nDESCRIPTION: The example secret key used for signing requests in the AWS Signature Version 4 test suite. This is paired with the AKIDEXAMPLE access key ID.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4-test-suite/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nwJalrXUtnFEMI/K7MDENG+bPxRfiCYEXAMPLEKEY\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Kinesis Video SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS Kinesis Video SDK with Rust. Includes aws-config, aws-sdk-kinesisvideo, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideo/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisvideo = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS IAM Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS IAM client using the SDK. Demonstrates environment configuration loading and client instantiation in an async context.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iam/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_iam as iam;\n\n#[::tokio::main]\nasync fn main() -> Result<(), iam::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_iam::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AppConfig Dependency to Cargo.toml\nDESCRIPTION: This snippet shows how to add the AppConfig SDK and its dependencies to a Rust project's Cargo.toml file. It includes the required versions for aws-config, aws-sdk-appconfig, and tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appconfig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appconfig = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Inspector Scan Client\nDESCRIPTION: Basic setup code for creating an AWS Inspector Scan client using environment configuration. Shows the async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspectorscan/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_inspectorscan as inspectorscan;\n\n#[::tokio::main]\nasync fn main() -> Result<(), inspectorscan::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_inspectorscan::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency with Features in Cargo.toml\nDESCRIPTION: Example of adding aws-smithy-types-convert as a dependency with the convert-chrono feature enabled in a Rust project's Cargo.toml file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-types-convert/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-smithy-types-convert = { version = \"VERSION\", features = [\"convert-chrono\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request Headers and Signature Format\nDESCRIPTION: Demonstrates the format of an AWS HTTP request with required authentication headers and canonical request string. Includes the HTTP method, host header, timestamp, region header and signing string with SHA256 hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n//example//\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Setting up Dependencies for AWS Resource Groups Tagging SDK in Cargo.toml\nDESCRIPTION: Adds the required dependencies to a Rust project's Cargo.toml file for working with the AWS Resource Groups Tagging API. Includes aws-config, aws-sdk-resourcegroupstagging, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourcegroupstagging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-resourcegroupstagging = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK SSMSAP Client with Tokio in Rust\nDESCRIPTION: This Rust code demonstrates initializing the AWS SDK for SAP client asynchronously using Tokio. It first imports the aws_sdk_ssmsap crate, then loads AWS configuration from environment variables, and finally constructs a new client that can make API calls. The sample function is annotated with #[tokio::main] for async execution. Dependencies include aws-sdk-ssmsap, aws-config, and tokio. No API calls are made directly, but the client setup is a prerequisite for further AWS service interactions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmsap/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_ssmsap as ssmsap;\n\n#[::tokio::main]\nasync fn main() -> Result<(), ssmsap::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_ssmsap::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Global Accelerator Client in Rust\nDESCRIPTION: Basic setup code for creating an AWS Global Accelerator client using environment configuration. Shows async main function setup with error handling and client initialization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/globalaccelerator/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_globalaccelerator as globalaccelerator;\n\n#[::tokio::main]\nasync fn main() -> Result<(), globalaccelerator::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_globalaccelerator::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Parsing Test Program in Rust\nDESCRIPTION: This Rust program reads a JSON file, attempts to parse it using aws-smithy-json, and returns appropriate exit codes based on the parsing result. It handles command-line arguments, file reading, and various edge cases in JSON parsing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-json/TESTING.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::fs::File;\nuse std::io::Read;\nuse std::env;\n\nuse aws_smithy_json::deserialize::{json_token_iter, Token, Error};\n\nfn main() {\n    let args: Vec<_> = env::args().collect();\n    if args.len() != 2 {\n        println!(\"Usage: {} file.json\", args[0]);\n        std::process::exit(1);\n    }\n\n    let ref path = args[1];\n    let mut s = String::new();\n    let mut f = File::open(path).expect(\"Unable to open file\");\n    match f.read_to_string(&mut s) {\n        Err(_) => std::process::exit(1),\n        Ok(_) => println!(\"{}\", s),\n    }\n\n    let result: Result<Vec<Token>, Error> = json_token_iter(s.as_bytes()).collect();\n    match result {\n        Err(_) => std::process::exit(1),\n        Ok(value) => if value.is_empty() {\n            std::process::exit(1)\n        } else {\n            // The test suite includes incomplete objects and arrays (i.e., \"[null,\").\n            // These are completely valid for this parser, so we'll just pretend to have\n            // failed to parse these to satisfy the test suite.\n            if value.first() == Some(&Token::StartObject) && value.last() != Some(&Token::EndObject) {\n                std::process::exit(1)\n            }\n            if value.first() == Some(&Token::StartArray) && value.last() != Some(&Token::EndArray) {\n                std::process::exit(1)\n            }\n            // Unescape all strings and fail if any of them failed to unescape.\n            for token in value {\n                if let Token::ValueString(escaped) = token {\n                    if escaped.into_unescaped().is_err() {\n                        std::process::exit(1)\n                    }\n                }\n            }\n            std::process::exit(0)\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Chime SDK Identity Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS Chime SDK Identity dependencies to a Rust project. Includes required dependencies for aws-config, aws-sdk-chimesdkidentity, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkidentity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chimesdkidentity = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Migration Hub Refactor Spaces Client\nDESCRIPTION: Basic Rust code example demonstrating how to initialize and create an AWS SDK client for Migration Hub Refactor Spaces. Shows async main function setup with error handling and client configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubrefactorspaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_migrationhubrefactorspaces as migrationhubrefactorspaces;\n\n#[::tokio::main]\nasync fn main() -> Result<(), migrationhubrefactorspaces::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_migrationhubrefactorspaces::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Amazon Lex Runtime Client in Rust\nDESCRIPTION: Demonstrates how to create and initialize an Amazon Lex Runtime client in Rust. The code loads AWS configuration from environment variables and creates a new client instance that can be used to make API calls to the Lex Runtime service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexruntime/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_lexruntime as lexruntime;\n\n#[::tokio::main]\nasync fn main() -> Result<(), lexruntime::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_lexruntime::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-osis Dependencies in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing the required dependencies for using the aws-sdk-osis crate in a Rust project, including the AWS config crate and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/osis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-osis = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS RDS Data API dependencies in Cargo.toml\nDESCRIPTION: This snippet shows the required dependencies to add to your Cargo.toml file to use the aws-sdk-rdsdata crate in a Rust project. It includes the AWS configuration, RDS Data API SDK, and Tokio for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rdsdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rdsdata = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Canonical Request Example\nDESCRIPTION: A complete example of an AWS SigV4 canonical request format. It includes the HTTP method (GET), request URI (/), headers (host, custom header, x-amz-date, and region), signed headers list, and the SHA-256 hash of the empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-key-duplicate/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nmy-header1:value2,value2,value1\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;my-header1;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in Cargo.toml for AWS SDK - Rust\nDESCRIPTION: This snippet demonstrates how to specify required dependencies in the Cargo.toml file to use the AWS SDK for Serverless Application Repository in a Rust project. Essential packages include aws-config, aws-sdk-serverlessapplicationrepository, and tokio (with all features enabled). These dependencies provide configuration loading, SDK API bindings, and asynchronous runtime support for AWS services. Ensure you use compatible versions as shown to avoid runtime or compilation issues.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/serverlessapplicationrepository/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-serverlessapplicationrepository = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Bedrock in Cargo.toml\nDESCRIPTION: Defines the required dependencies in Cargo.toml for using aws-sdk-bedrock with Tokio async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrock/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrock = \"1.85.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS IoT Things Graph SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the AWS IoT Things Graph SDK in a Rust project. It includes aws-config, aws-sdk-iotthingsgraph, and tokio dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotthingsgraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotthingsgraph = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Panorama Client with Tokio in Rust\nDESCRIPTION: This snippet provides sample Rust code for asynchronously initializing an AWS SDK Panorama client using the Tokio runtime. It involves importing the aws_sdk_panorama crate, asynchronously loading the AWS configuration with aws_config, and constructing a Panorama client. The client can then be used for further AWS service calls. Required dependencies are aws-sdk-panorama, aws-config, and Tokio, as configured in Cargo.toml. The function is annotated with #[tokio::main] to enable async runtime usage; it expects no arguments and returns a Result with unit or a Panorama error.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/panorama/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_panorama as panorama;\n\n#[::tokio::main]\nasync fn main() -> Result<(), panorama::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_panorama::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n\n```\n\n----------------------------------------\n\nTITLE: AWS Signed Request Format\nDESCRIPTION: Sample format of an AWS signed request showing HTTP method, URI path, query parameters, headers and signature components for AWS4-ECDSA-P256-SHA256 signing algorithm.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-empty-query-key/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET\n/\nParam1=value1&X-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Bedrock Runtime\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-bedrockdataautomationruntime, and tokio with full features enabled for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockdataautomationruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrockdataautomationruntime = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS RoboMaker SDK with Cargo\nDESCRIPTION: Configuration for adding the AWS RoboMaker SDK to a Rust project using Cargo. Includes dependencies for aws-config, aws-sdk-robomaker, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/robomaker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-robomaker = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Managed Blockchain Query Dependencies in Cargo.toml\nDESCRIPTION: Required dependencies configuration for using the AWS Managed Blockchain Query SDK in a Rust project. Includes aws-config, aws-sdk-managedblockchainquery, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/managedblockchainquery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-managedblockchainquery = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS STS SDK Dependencies in Cargo.toml (TOML)\nDESCRIPTION: Defines the necessary dependencies (`aws-config`, `aws-sdk-sts`, `tokio`) in the `Cargo.toml` file to use the AWS Security Token Service (STS) SDK for Rust. It specifies required versions and enables necessary features like Tokio's full feature set and the latest behavior version for `aws-config`.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sts = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Connect Campaigns in Cargo.toml\nDESCRIPTION: Defines the required dependencies in Cargo.toml for using aws-sdk-connectcampaigns. Includes aws-config, aws-sdk-connectcampaigns, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcampaigns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connectcampaigns = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running describe-addresses Command for AWS Snowball\nDESCRIPTION: Command-line usage for listing AWS Snowball addresses with optional region specification and verbose output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/snowball/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin describe-addresses -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Elasticsearch SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-elasticsearch with proper versioning and features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticsearch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elasticsearch = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MediaLive SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS MediaLive SDK with Rust. Includes aws-config, aws-sdk-medialive, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/medialive/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-medialive = \"1.84.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS MediaTailor Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration for adding aws-sdk-mediatailor and its dependencies to a Rust project. Includes required dependencies for aws-config, the MediaTailor SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediatailor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediatailor = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing and starting the Node.js web server\nDESCRIPTION: Commands to install dependencies and start the web server in the www directory. This serves the WebAssembly application that counts Lambda functions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/webassembly/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpm ci\nnpm start\n```\n\n----------------------------------------\n\nTITLE: AWS API GET Request with ECDSA-P256-SHA256 Authorization\nDESCRIPTION: An example of a GET request to AWS API with AWS Signature Version 4 authentication. The request includes the X-Amz-Algorithm parameter set to ECDSA-P256-SHA256, credentials, date, expiration, region set, and signed headers. The canonical format used for signature calculation is also shown.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/example1/example2/../..\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-ssooidc Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in the Cargo.toml file for a Rust project using the aws-sdk-ssooidc crate. It includes aws-config for configuration loading, aws-sdk-ssooidc itself, and tokio for the asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssooidc/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssooidc = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Pinpoint Dependencies with Cargo\nDESCRIPTION: This Cargo.toml snippet shows the dependencies required to use the aws-sdk-pinpoint in a Rust project. It includes the AWS SDK pinpoint, aws-config with specific feature flags, and Tokio with full features for async functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpoint/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pinpoint = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Polly Dependencies to Cargo.toml\nDESCRIPTION: Configuration snippet for adding the necessary dependencies to a Rust project's Cargo.toml file. Includes aws-config, aws-sdk-polly, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/polly/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-polly = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS MGN Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for integrating AWS MGN SDK in a Rust project. Includes required crates for AWS config, MGN SDK, and Tokio async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mgn/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mgn = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing a Signed AWS GET Request with ECDSA-P256-SHA256\nDESCRIPTION: This snippet illustrates the format of a signed AWS GET request. It includes the request method, path, query parameters, and required headers for AWS Signature Version 4 using the ECDSA-P256-SHA256 algorithm.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-order-key-case/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nParam1=value1&Param2=value2&X-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Running list-asset-models.rs Command for AWS IoT SiteWise in Rust\nDESCRIPTION: Command syntax for listing AWS IoT SiteWise asset models in the Region with options for specifying region and verbose output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sitewise/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin list-asset-models -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Installing AWS DLM SDK Dependencies - Cargo.toml Configuration\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS DLM SDK. Includes aws-config, aws-sdk-dlm, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dlm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dlm = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK MediaStore Data Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration for setting up AWS SDK MediaStore Data with Tokio async runtime support. Includes the core SDK, MediaStore Data client, and Tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediastoredata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediastoredata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK PCS Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Cargo.toml file for using the AWS SDK for PCS. It includes the aws-config, aws-sdk-pcs, and tokio dependencies required for asynchronous AWS API operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pcs = \"1.27.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK GeoPlaces in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-geoplaces, including aws-config, the SDK itself, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/geoplaces/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-geoplaces = \"1.17.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing PrivateNetworks Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS PrivateNetworks client in a Rust application using the AWS SDK. The code loads configuration from environment variables and sets up an asynchronous main function.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/privatenetworks/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_privatenetworks as privatenetworks;\n\n#[::tokio::main]\nasync fn main() -> Result<(), privatenetworks::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_privatenetworks::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Lex Model Building SDK in Cargo.toml\nDESCRIPTION: This snippet shows how to configure the required dependencies in a Cargo.toml file for using the AWS Lex Model Building SDK in a Rust project. It includes the AWS configuration, the Lex Model Building SDK, and Tokio for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexmodelbuilding/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lexmodelbuilding = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Pipes in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using the AWS SDK for EventBridge Pipes. Includes aws-config, aws-sdk-pipes, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pipes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pipes = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CodeArtifact Dependencies in Cargo.toml\nDESCRIPTION: Required dependencies configuration for using AWS CodeArtifact SDK in a Rust project. Includes aws-config, aws-sdk-codeartifact, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codeartifact/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codeartifact = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS Service\nDESCRIPTION: This snippet demonstrates how to structure an HTTP GET request header for an AWS service. It includes the request line with path traversal and the Host header specifying the AWS endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-unnormalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /example1/example2/../.. HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK DataSync Dependency in Rust Project\nDESCRIPTION: This snippet shows how to add the AWS SDK DataSync and its dependencies to a Rust project's Cargo.toml file. It includes the required crates and their versions for integrating DataSync functionality.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datasync/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-datasync = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Billing Conductor Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Billing Conductor client using environment configuration. The code demonstrates basic async setup with tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/billingconductor/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_billingconductor as billingconductor;\n\n#[::tokio::main]\nasync fn main() -> Result<(), billingconductor::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_billingconductor::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS ResilienceHub SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo.toml configuration for adding the AWS ResilienceHub SDK and required dependencies to a Rust project. Includes aws-config, aws-sdk-resiliencehub, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resiliencehub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-resiliencehub = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Payment Cryptography Data Client - Rust\nDESCRIPTION: This Rust async example demonstrates creation of an aws-sdk-paymentcryptographydata client using configuration loaded from the environment. The sample uses Tokio as the async runtime and imports necessary modules for client instantiation. Developers should call aws_config::load_from_env().await to obtain config, then build a Client instance to make AWS Payment Cryptography Data API calls. Dependencies include aws-sdk-paymentcryptographydata, aws-config, and Tokio. The expected input is a properly set AWS environment, and the output is a functional client for further interactions.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/paymentcryptographydata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_paymentcryptographydata as paymentcryptographydata;\\n\\n#[::tokio::main]\\nasync fn main() -> Result<(), paymentcryptographydata::Error> {\\n    let config = aws_config::load_from_env().await;\\n    let client = aws_sdk_paymentcryptographydata::Client::new(&config);\\n\\n    // ... make some calls with the client\\n\\n    Ok(())\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Constructing Signed GET Request for AWS Service in Plaintext\nDESCRIPTION: This snippet shows the structure of a signed GET request to an AWS service. It includes the request line, query parameters for AWS Signature Version 4 with ECDSA-P256-SHA256, and required headers. The empty line and hash at the end are part of the signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-with-session-token/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-Security-Token=6e86291e8372ff2a2260956d9b8aae1d763fbf315fa00fa31553b73ebf194267&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: This snippet shows the key components of an AWS4-ECDSA-P256-SHA256 signature. It includes the algorithm name, a timestamp in ISO8601 format, a credential scope, and a signature hash. These elements are used in the process of signing AWS API requests for authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-order-key-case/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nc688584c3dbae2868c4911c825239f2c9375e66b9962f21db60b9b2fcd75bf45\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Signer Dependencies in Cargo.toml with TOML\nDESCRIPTION: Specifies the required dependencies for integrating the `aws-sdk-signer` Rust crate into a project. This TOML code should be added to the Cargo.toml file and includes necessary versions for `aws-config`, `aws-sdk-signer`, and `tokio` with the appropriate async features. Dependencies must be downloaded via Cargo, and correctness of versions is important. No parameters are required; the snippet configures the project for further AWS SDK usage.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/signer/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-signer = \\\"1.64.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Deleting DB Instance with Aurora in Rust\nDESCRIPTION: This code snippet shows how to delete a DB instance using the AWS SDK for Rust with Aurora. It's part of the cleanup process in Aurora operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DeleteDBInstance operation\n// Located in src/aurora_scenario/tests.rs#L790\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Redshift Dependencies in Cargo.toml\nDESCRIPTION: Cargo.toml configuration showing the required dependencies for using the AWS SDK Redshift crate in a Rust project. Includes aws-config, aws-sdk-redshift, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshift/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-redshift = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 Signed Headers and Hash\nDESCRIPTION: This snippet shows the signed headers and the hash used in the AWS Signature Version 4 process. It includes the 'host' as the signed header and a SHA-256 hash, which is likely the hash of the request payload or empty string for GET requests without a body.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla/query-canonical-request.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Recycle Bin Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows the required dependencies to add to your Cargo.toml file to use the AWS SDK Recycle Bin client. It includes the aws-config and aws-sdk-rbin crates along with Tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rbin/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rbin = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CodeCatalyst Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS CodeCatalyst client using environment configuration. Demonstrates async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codecatalyst/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_codecatalyst as codecatalyst;\n\n#[::tokio::main]\nasync fn main() -> Result<(), codecatalyst::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_codecatalyst::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Snow Device Management Dependencies in Cargo.toml (TOML)\nDESCRIPTION: This TOML snippet specifies the necessary dependencies for a Rust project to use the AWS SDK for Snow Device Management. It includes `aws-config` for loading AWS configuration (with the recommended `behavior-version-latest` feature), the specific `aws-sdk-snowdevicemanagement` crate, and the `tokio` runtime for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/snowdevicemanagement/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-snowdevicemanagement = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeCommit Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using AWS SDK CodeCommit in a Rust project. It includes aws-config, aws-sdk-codecommit, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codecommit/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codecommit = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4 ECDSA Request Components Text\nDESCRIPTION: Example showing the key components of an AWS4-ECDSA-P256-SHA256 request including the algorithm identifier, timestamp in ISO8601 format, credential scope, and hex-encoded hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-with-session-token/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n496062b4c2ed2175fe08ad084158783fa8d013c694542af721d49b25d1ebd390\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Format\nDESCRIPTION: Shows the format of an AWS signature string including the algorithm identifier, timestamp in ISO format, scope string, and resulting signature hash in hexadecimal format.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-sort/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n336638ab840d4785edc7db35ab9c036bc15ffb2dc1a4e05b04f3a7cd7407593f\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Inspector Client in Rust\nDESCRIPTION: This code demonstrates how to create an Amazon Inspector client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Amazon Inspector.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspector/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_inspector as inspector;\n\n#[::tokio::main]\nasync fn main() -> Result<(), inspector::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_inspector::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK OpenSearch Serverless Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for using the AWS SDK OpenSearch Serverless crate in a Rust project. Includes aws-config, aws-sdk-opensearchserverless, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opensearchserverless/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-opensearchserverless = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS MGN Client in Rust\nDESCRIPTION: Example of creating and initializing an AWS MGN client using environment configuration. Shows basic async setup with Tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mgn/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_mgn as mgn;\n\n#[::tokio::main]\nasync fn main() -> Result<(), mgn::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_mgn::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for AWS Service\nDESCRIPTION: Shows the basic structure of an HTTP/1.1 GET request to an AWS service endpoint. Includes the required Host header pointing to an AWS service domain.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-normalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET // HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS Service\nDESCRIPTION: This snippet shows the format of an HTTP GET request to an AWS endpoint. It includes the request line with a placeholder path and the Host header specifying the AWS service domain.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-unnormalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET //example// HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK FIS Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK FIS module. It includes aws-config, aws-sdk-fis, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/fis/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-fis = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request Format\nDESCRIPTION: Shows the format of an AWS HTTP request including method, endpoint, headers and canonical string. Contains required headers like host, x-amz-date, and region set along with a SHA256 hash signature.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Macie2 Rust SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS Macie2 SDK including aws-config, aws-sdk-macie2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/macie2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-macie2 = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Creating an Amazon Q Apps Client in Rust\nDESCRIPTION: Demonstrates how to initialize and use the aws-sdk-qapps client in a Rust application. The example loads AWS configuration from environment variables and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qapps/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_qapps as qapps;\n\n#[::tokio::main]\nasync fn main() -> Result<(), qapps::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_qapps::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS Omics Client in Rust\nDESCRIPTION: Demonstrates how to initialize and use an AWS HealthOmics client in Rust. The code loads configuration from environment variables and creates a new client instance ready for making API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/omics/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_omics as omics;\n\n#[::tokio::main]\nasync fn main() -> Result<(), omics::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_omics::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK IoT TwinMaker Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file. It includes the aws-config crate with the latest behavior version feature, the aws-sdk-iottwinmaker crate, and the tokio runtime with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iottwinmaker/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iottwinmaker = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Cargo.toml for AWS Personalize Runtime SDK\nDESCRIPTION: Adds the required dependencies to a Rust project's Cargo.toml file, including aws-config, aws-sdk-personalizeruntime, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/personalizeruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-personalizeruntime = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing Signed AWS Request with ECDSA-P256-SHA256\nDESCRIPTION: This snippet shows the structure of a signed AWS request using the ECDSA-P256-SHA256 algorithm. It includes the HTTP method, request path, query parameters with signing information, and the host header. The last line represents a hash, likely of the request payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nGET\n/./example\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Format\nDESCRIPTION: Demonstrates the format of an AWS4-ECDSA-P256-SHA256 signature including the algorithm identifier, timestamp, credential scope and signature hash. Shows standard AWS signature format using ECDSA-P256 with SHA256.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-before/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nc3a8ba26c461df46b5010b756fb8644fd922a2aea95d77b56295e5e4d3bb155f\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK EKS in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK EKS client in a Rust project. Includes aws-config, aws-sdk-eks, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/eks/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-eks = \"1.83.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for AWS Proton SDK in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in Cargo.toml to use the AWS Proton SDK in a Rust project, including aws-config, aws-sdk-proton, and tokio for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/proton/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-proton = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Migration Hub SDK in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS Migration Hub SDK with Rust. Includes required dependencies for aws-config, aws-sdk-migrationhub, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhub/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-migrationhub = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Signature v4 ECDSA Components Example\nDESCRIPTION: Example showing the components of an AWS Signature Version 4 request using ECDSA-P256-SHA256. Contains the algorithm identifier, timestamp in ISO8601 format, credential scope string, and resulting signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-unnormalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n0d146fed00cdf50d7a87864583b7a33ca75322aab46b0a2d204f5d0c13440917\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Message Components\nDESCRIPTION: Shows the four components used in AWS4-ECDSA signature calculation: the algorithm identifier (AWS4-ECDSA-P256-SHA256), timestamp in ISO format, credential scope, and message hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-trim/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n4f92ebcf5f0844588e443a2243fafdb64319c6d1ad913c07686129b9991326a3\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Network Flow Monitor and Dependencies (Cargo.toml) - TOML\nDESCRIPTION: This snippet provides the configuration needed in the Cargo.toml file to include the aws-sdk-networkflowmonitor, aws-config, and tokio crates as dependencies. 'aws-config' delivers shared configuration, 'aws-sdk-networkflowmonitor' supplies the CloudWatch Network Flow Monitor client, and 'tokio' is required for asynchronous execution. Specify versions as shown and include the 'full' feature for tokio to ensure compatibility. No code input/output; this is strictly for project setup.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkflowmonitor/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-networkflowmonitor = \"1.16.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variable References for AWS Configuration\nDESCRIPTION: Environment variables used to locate AWS configuration and credential files. Shows fallback paths and custom configuration options through ProfileFiles.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/src/profile/location_of_profile_files.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAWS_CONFIG_FILE -> ~/.aws/config\nAWS_SHARED_CREDENTIALS_FILE -> ~/.aws/credentials\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK DataBrew Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK DataBrew client. It includes aws-config, aws-sdk-databrew, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/databrew/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-databrew = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-route53profiles Dependencies in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies for using the aws-sdk-route53profiles crate in a Rust project. Includes aws-config, aws-sdk-route53profiles, and tokio with full features for handling asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53profiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53profiles = \"1.43.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS DataZone SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-datazone with proper version specifications. Includes aws-config, aws-sdk-datazone, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/datazone/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-datazone = \"1.80.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Partner Central Selling with Cargo\nDESCRIPTION: Adds the required dependencies to a Cargo.toml file for using the AWS Partner Central Selling SDK. Includes aws-config, aws-sdk-partnercentralselling, and tokio dependencies with their respective versions and feature flags.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/partnercentralselling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-partnercentralselling = \"1.17.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Marketplace Metering SDK in Rust\nDESCRIPTION: This Cargo.toml snippet shows the required dependencies for using the AWS Marketplace Metering SDK in a Rust project, including aws-config, aws-sdk-marketplacemetering, and tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacemetering/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplacemetering = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Example of AWS4-ECDSA-P256-SHA256 signature components including the algorithm identifier, ISO8601 timestamp in UTC, credential scope string, and 32-byte hex string output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-normalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\ncf59db423e841c8b7e3444158185aa261b724a5c27cbe762676f3eed19f4dc02\n```\n\n----------------------------------------\n\nTITLE: AWS4 ECDSA P256 Signature Components\nDESCRIPTION: Example of AWS Signature Version 4 components using ECDSA P256 algorithm. Shows the signature algorithm identifier, timestamp in ISO8601 format, credential scope, and final signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-value-case/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n949fb555e05d3289760ff0f0566ad73a69ed865000d9843b93a15b916dbc8b6f\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Ground Station Client\nDESCRIPTION: Example code showing how to initialize and create an AWS Ground Station client using the Rust SDK. Demonstrates basic setup with environment configuration and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/groundstation/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_groundstation as groundstation;\n\n#[::tokio::main]\nasync fn main() -> Result<(), groundstation::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_groundstation::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MediaConvert SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS MediaConvert SDK with Rust. Includes aws-config, aws-sdk-mediaconvert, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediaconvert/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediaconvert = \"1.80.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Redshift Serverless Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file. It includes the AWS SDK for Redshift Serverless, AWS config, and Tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshiftserverless/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-redshiftserverless = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing Signed AWS Request URL with ECDSA-P256-SHA256\nDESCRIPTION: This snippet shows the structure of a signed AWS request URL. It includes query parameters for the signing algorithm, credentials, date, expiration time, region set, and signed headers. The host header and its hash are also provided.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n//\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Home Directory Environment Variables\nDESCRIPTION: Environment variables checked for home directory resolution across different platforms, with special handling for Windows systems.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-config/src/profile/location_of_profile_files.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nHOME - all platforms\nUSERPROFILE - Windows\nHOMEDRIVE + HOMEPATH - Windows ($HOMEDRIVE$HOMEPATH)\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS API Request Headers in Plaintext\nDESCRIPTION: This snippet shows the structure of an AWS API request, including the HTTP method, request URI, required headers, and the canonical request components used for request signing. It includes the host, x-amz-date, and x-amz-region-set headers, along with the signed headers list and request payload hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-after/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding Pinpoint SMS Voice SDK Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to your Cargo.toml file, including aws-config, aws-sdk-pinpointsmsvoice, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointsmsvoice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pinpointsmsvoice = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Unicode Character Injection for XSS\nDESCRIPTION: Shows XSS attack vectors using various Unicode characters and encoding tricks to bypass filters and execute JavaScript code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_7\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><script>\\xEF\\xBB\\xBFjavascript:alert(130)</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><script>\\xE2\\x80\\x81javascript:alert(131)</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><script>\\xE2\\x80\\x84javascript:alert(132)</script>\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Route53 Recovery Readiness Dependencies in TOML\nDESCRIPTION: Declares the necessary Rust crate dependencies in the `Cargo.toml` file to use the AWS SDK for Route 53 Recovery Readiness. It includes `aws-config` for AWS configuration management (using the latest behavior version), `aws-sdk-route53recoveryreadiness` for the specific service client, and `tokio` for the asynchronous runtime with all features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoveryreadiness/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53recoveryreadiness = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS HealthLake Client in Rust\nDESCRIPTION: Example code demonstrating how to create and initialize an AWS HealthLake client using environment configuration. Shows basic async main function setup with error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/healthlake/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_healthlake as healthlake;\n\n#[::tokio::main]\nasync fn main() -> Result<(), healthlake::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_healthlake::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Kinesis Video Media Client\nDESCRIPTION: Basic Rust code example showing how to initialize the Kinesis Video Media client using environment configuration. Demonstrates async main function setup and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideomedia/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_kinesisvideomedia as kinesisvideomedia;\n\n#[::tokio::main]\nasync fn main() -> Result<(), kinesisvideomedia::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_kinesisvideomedia::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BedrockAgentRuntime Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for using the BedrockAgentRuntime SDK in a Rust project. Includes required dependencies for AWS config, the BedrockAgentRuntime SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockagentruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrockagentruntime = \"1.87.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Control Tower Dependencies in Cargo.toml\nDESCRIPTION: Adds required dependencies for using AWS Control Tower SDK with Rust. Includes aws-config, aws-sdk-controltower, and tokio with full features for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/controltower/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-controltower = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Example X-Amz-Security-Token Value for AWS SDK Rust\nDESCRIPTION: This snippet provides an example value for the X-Amz-Security-Token used in the test suite. It represents a session token received from AWS STS when obtaining temporary security credentials.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4-test-suite/post-sts-token/readme.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK MediaStore Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK MediaStore module to a Rust project via Cargo.toml. Includes required dependencies for aws-config, aws-sdk-mediastore, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediastore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediastore = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to AWS Endpoint\nDESCRIPTION: Shows the structure of a simple HTTP POST request targeting an AWS service endpoint with a query parameter. The request includes the required Host header for AWS service identification.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-query/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /?Param1=value1 HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-grafana Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-grafana and its dependencies to a Rust project's Cargo.toml file. It includes the required versions for aws-config, aws-sdk-grafana, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/grafana/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-grafana = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Schemas SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: This snippet provides the necessary entries to add in the Cargo.toml file to include the AWS SDK for schemas, the shared AWS config module, and Tokio runtime for asynchronous execution. Dependencies specified are 'aws-config' with the latest behavior-version feature, 'aws-sdk-schemas' for EventBridge Schema Registry operations, and Tokio with full features. This configuration is required for enabling asynchronous AWS operations in a Rust project. Expected usage: copy directly into the '[dependencies]' section of your Cargo.toml. No direct code execution output; used solely for project configuration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/schemas/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-schemas = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with URL-Safe Characters\nDESCRIPTION: Shows a GET request using the full range of URL-safe characters including alphanumeric, hyphen, period, underscore and tilde. The request is directed to an AWS endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-unreserved/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Example showing the key components needed for AWS4 ECDSA signature generation: algorithm identifier, timestamp in ISO8601 format, credential scope string, and hex-encoded hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-before/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n964c15d46a67b327b877c02d680c81cb75df04e85144142e190da565ff0d029f\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cargo.toml for AWS Q Business SDK\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Cargo.toml file to use the AWS Q Business SDK. It includes the aws-config crate with specific features, the aws-sdk-qbusiness crate, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qbusiness/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-qbusiness = \"1.76.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Getting REST APIs with AWS SDK Rust\nDESCRIPTION: Reference to code showing how to retrieve REST APIs using the AWS SDK for Rust. The full implementation can be found in the referenced source file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/apigateway/README.md#2025-04-23_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nsrc/bin/get_rest_apis.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS LakeFormation SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS LakeFormation SDK with Rust. Includes aws-config, aws-sdk-lakeformation, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lakeformation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lakeformation = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies in Cargo.toml for AWS SDK - TOML\nDESCRIPTION: This snippet shows how to add the necessary dependencies for the AWS Service Catalog AppRegistry SDK to your Rust project's Cargo.toml file. It requires the aws-config crate (with the behavior-version-latest feature), the aws-sdk-servicecatalogappregistry crate, and the Tokio runtime with full features enabled. These entries ensure your project can build and execute asynchronous code that interacts with AWS services. Make sure versions are compatible with your existing dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicecatalogappregistry/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-servicecatalogappregistry = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-bedrockagent Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using aws-sdk-bedrockagent in a Rust project. It includes aws-config, aws-sdk-bedrockagent, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/bedrockagent/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-bedrockagent = \"1.90.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Running TLS Example in AWS SDK for Rust\nDESCRIPTION: Command to run the TLS example using cargo. This executes the binary that demonstrates setting the minimum TLS version to 1.3.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/tls/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo run --bin tls\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS App Mesh SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS App Mesh SDK with Rust. Includes aws-config, aws-sdk-appmesh, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appmesh/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appmesh = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS API Request with Authentication Headers\nDESCRIPTION: This snippet shows the format of an authenticated AWS API request. It includes the HTTP method and path, required headers (host, x-amz-date, and x-amz-region-set), and the canonicalized header list followed by a signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET\n/example\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK RolesAnywhere Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file to use the AWS SDK for RolesAnywhere in a Rust project, including aws-config, aws-sdk-rolesanywhere, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rolesanywhere/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rolesanywhere = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SageMaker Runtime SDK in Rust (TOML)\nDESCRIPTION: This code snippet demonstrates how to declare and configure project dependencies in Cargo.toml for enabling Amazon SageMaker Runtime access using the AWS SDK in Rust. Required dependencies include 'aws-config' for configuration management, 'aws-sdk-sagemakerruntime' for the SageMaker Runtime API, and 'tokio' for asynchronous execution. Exact version constraints and feature flags ensure compatibility and access to the latest SDK features. No code execution occurs here; instead, this configuration is mandatory for successful compilation and subsequent use in code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/sagemakerruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-sagemakerruntime = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-qapps Dependencies in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies in Cargo.toml to use aws-sdk-qapps in a Rust project. Includes aws-config, aws-sdk-qapps, and tokio with its full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qapps/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-qapps = \"1.32.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Pricing with Cargo\nDESCRIPTION: A Cargo.toml configuration showing the required dependencies to use the AWS pricing SDK in a Rust project. Includes aws-config, aws-sdk-pricing, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pricing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pricing = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS API Request Headers and Signature\nDESCRIPTION: Example of an AWS API request showing HTTP method, headers, signed headers, and hash. Uses ECDSA P256 for signing and includes standard AWS authentication headers like X-Amz-Algorithm, X-Amz-Credential, and X-Amz-Date.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded-parameters/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=content-length%3Bcontent-type%3Bhost\ncontent-length:13\ncontent-type:application/x-www-form-urlencoded; charset=utf-8\nhost:example.amazonaws.com\n\ncontent-length;content-type;host\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS Service in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP GET request to an AWS service. It includes the request method, path, headers (including AWS-specific headers), and a canonical request string used for request signing. The empty line at the end represents the request body hash for a GET request with no body.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-trim/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nmy-header1:value1\nmy-header2:\"a b c\"\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;my-header1;my-header2;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Running list-jobs Command for AWS Snowball\nDESCRIPTION: Command-line usage for listing AWS Snowball jobs with optional region specification and verbose output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/snowball/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin list-jobs -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Formatting a Canonical Request for AWS Signature Version 4 Authentication\nDESCRIPTION: This example shows the proper format for an AWS SDK canonical request used in the SigV4 signing process. It includes the HTTP method (GET), the request URI (/./), the headers with their values, the signed headers list, and a hash representing an empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/./\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS SDK Service Discovery Dependencies in TOML\nDESCRIPTION: This snippet specifies the required dependencies for integrating AWS Service Discovery into a Rust project via Cargo.toml. It includes aws-config for credential loading, aws-sdk-servicediscovery for interacting with Cloud Map, and Tokio as the executor for async code. Versions are pinned and features are explicitly set to ensure compatibility. Expected usage involves copying these lines into the project's Cargo.toml to enable compilation and linking of the SDK and runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/servicediscovery/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-servicediscovery = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS AppStream Client - Rust\nDESCRIPTION: Basic example of initializing an AWS AppStream client in Rust using the SDK. Shows async main function setup, environment configuration loading, and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appstream/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_appstream as appstream;\n\n#[::tokio::main]\nasync fn main() -> Result<(), appstream::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_appstream::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK Cloud9 Client in Rust\nDESCRIPTION: This code demonstrates how to create an AWS SDK Cloud9 client in a Rust application. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to Cloud9.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloud9/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloud9 as cloud9;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloud9::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloud9::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Macros for Mock Connection Request/Response Pairs in Rust\nDESCRIPTION: This code snippet defines macros for creating mock connection request/response pairs in Rust for the AWS SDK. These macros are used to streamline common testing actions in the SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/test-utils/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\n// Code snippet not provided in the input text, but referenced as:\n// [Macros for creating mock connection request/response pairs](src/macros.rs)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MemoryDB SDK in Cargo.toml\nDESCRIPTION: Dependency configuration in Cargo.toml for setting up AWS MemoryDB SDK with Tokio runtime support. Specifies required crate versions for aws-config, aws-sdk-memorydb, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/memorydb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-memorydb = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request Headers and Canonical Format\nDESCRIPTION: Shows the format of an AWS HTTP GET request including required headers like host, x-amz-date and x-amz-region-set, followed by the canonical request format used for AWS Signature V4 signing. The canonical request includes the sorted header names and a SHA256 hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-voiceid Dependencies in Cargo.toml\nDESCRIPTION: Specifies the required dependencies (`aws-config`, `aws-sdk-voiceid`, `tokio`) and their versions to include in the project's Cargo.toml file for using the AWS Voice ID SDK. The `behavior-version-latest` feature for `aws-config` ensures usage of the latest SDK behavior, and the `full` feature for `tokio` enables all Tokio functionalities needed for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/voiceid/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-voiceid = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS WAF Classic SDK Dependencies in Cargo.toml - TOML\nDESCRIPTION: Specifies the dependencies required for integrating the aws-sdk-waf crate into a Rust project. This includes the aws-config crate (with the latest behavior version), aws-sdk-waf for AWS WAF Classic service interaction, and tokio with the full feature set for asynchronous execution. These dependencies are essential prerequisites for initializing the AWS SDK client and making asynchronous API calls within Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/waf/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-waf = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS ImageBuilder SDK in Rust\nDESCRIPTION: Configuration block for Cargo.toml that specifies the required dependencies including aws-config, aws-sdk-imagebuilder, and tokio for async execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/imagebuilder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-imagebuilder = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Machine Learning SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Machine Learning SDK with Rust. Includes aws-config, aws-sdk-machinelearning, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/machinelearning/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-machinelearning = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Signature v4 Components in Plaintext\nDESCRIPTION: This snippet shows the key components of an AWS Signature v4 authentication string. It includes the signing algorithm, date and time, credential scope, and the resulting signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-unreserved/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n377b8a3e195894659b84cd1c475dc8a3663a663360a349430c0c3b82bd82b77b\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request Headers and Signature\nDESCRIPTION: Example of a canonical HTTP request for AWS services showing the request method, path, headers and signed content. Includes standard AWS headers like x-amz-date and x-amz-region-set along with a SHA-256 hash of the canonical request.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-sort/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nmy-header1:value1\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;my-header1;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Running list-portals.rs Command for AWS IoT SiteWise in Rust\nDESCRIPTION: Command syntax for listing AWS IoT SiteWise portals in the Region with options for specifying region and verbose output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sitewise/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin list-portals -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-docdb Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the Amazon DocumentDB SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/docdb/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-docdb = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-rum and Dependencies to Cargo.toml - Rust\nDESCRIPTION: This snippet demonstrates how to add the aws-sdk-rum, aws-config, and Tokio dependencies to a Rust project's Cargo.toml file. aws-config facilitates loading AWS credentials and settings, aws-sdk-rum provides the RUM service client, and Tokio enables asynchronous execution. Users must specify the required crate versions and enable necessary features for both aws-config ('behavior-version-latest') and Tokio ('full'). This configuration is a prerequisite for using the SDK in async Rust applications.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/rum/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-rum = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Elastic Beanstalk SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS Elastic Beanstalk SDK in a Rust project. It includes the AWS SDK for Elastic Beanstalk, AWS config, and Tokio for asynchronous runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticbeanstalk/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elasticbeanstalk = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS API Request Format for SigV4 Signing\nDESCRIPTION: Example of an AWS request structure that would be used in the Signature Version 4 signing process. It shows the HTTP method, URI, headers (including host, date, and region), canonical headers list, and payload hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Lexmodelsv2 SDK in Cargo.toml\nDESCRIPTION: Dependency configuration in Cargo.toml for setting up the AWS Lexmodelsv2 SDK with required dependencies including aws-config, aws-sdk-lexmodelsv2, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexmodelsv2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lexmodelsv2 = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Repository Structure Overview for AWS SDK Rust\nDESCRIPTION: Markdown listing explaining the three main GitHub repositories related to AWS SDK Rust: aws-sdk-rust for code generated content, aws-doc-sdk-examples for code examples, and smithy-rs for SDK generation code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n1) This repository ([awslabs/aws-sdk-rust](https://github.com/awslabs/aws-sdk-rust)) \n\n    This repository contains code generated from [awslabs/smithy-rs](https://github.com/awslabs/smithy-rs). If you want to contribute to the SDK by submitting feedback to our roadmap or filing a bug report, you can do so using this GitHub repository. However, because this repository is code generated from Smithy models, **please do not submit PRs modifying code or examples to this repository.**\n\n2) Examples repository ([awsdocs/aws-doc-sdk-examples](https://github.com/awsdocs/aws-doc-sdk-examples))\n\n    All the SDK code examples are in the [`rustv1`](https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/rustv1) directory of `aws-doc-sdk-examples`. They are automatically copied over to `aws-sdk-rust` when a new release is cut. Please make example contributions there, and be sure to take a look at its [CONTRIBUTING.md](https://github.com/awsdocs/aws-doc-sdk-examples/blob/main/CONTRIBUTING.md).\n\n3) Smithy-based SDK generation repo ([awslabs/smithy-rs](https://github.com/awslabs/smithy-rs))\n\n    If you want to contribute by diving into the codegen machinery and helping develop the SDK, please navigate to the [Smithy code gen machinery repo](https://github.com/awslabs/smithy-rs).  Here you'll be able to see all the ins-and-outs of the code generator. We welcome PRs and other contributions to this repository, but please make sure to review its [CONTRIBUTING.MD](https://github.com/awslabs/smithy-rs/blob/main/CONTRIBUTING.md)\n```\n\n----------------------------------------\n\nTITLE: AWS Canonical Request Format\nDESCRIPTION: Shows the standard format of a canonical request used in AWS SDK authentication process. Includes HTTP method, canonical URI, empty query string, canonical headers, signed headers, and a hashed empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGET\n/example1/example2/../..\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Backup Search Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the aws-sdk-backupsearch crate. It includes aws-config, aws-sdk-backupsearch, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backupsearch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-backupsearch = \"1.13.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Setting up AWS AppRunner dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-apprunner and related dependencies to a Rust project's Cargo.toml file. It includes aws-config for configuration, the AppRunner SDK, and Tokio for asynchronous runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apprunner/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-apprunner = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-pi Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to the Cargo.toml file for using Amazon RDS Performance Insights in a Rust project. It includes aws-config, aws-sdk-pi, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pi = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS HTTP POST Request with ECDSA Signing\nDESCRIPTION: This snippet demonstrates the structure of an HTTP POST request for AWS services. It includes AWS Signature Version 4 parameters using ECDSA-P256-SHA256 algorithm, along with other required headers for authentication and request identification.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-query/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nParam1=value1&X-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request to AWS Service\nDESCRIPTION: A simple HTTP GET request to an AWS service endpoint. The request retrieves the root path with a trailing slash. This format is commonly used when working with AWS services via HTTP.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-unnormalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /./ HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Example of the components used in generating an AWS ECDSA SHA256 signature, including the algorithm, timestamp (20150830T123600Z), credential scope (20150830/service/aws4_request), and generated signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-normalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nea6c9c4bc1e85b94f2579cebbc85a84c3f8eaa055c006697555f074dd68509a6\n```\n\n----------------------------------------\n\nTITLE: AWS ECDSA Authentication HTTP Request Example\nDESCRIPTION: Example of an HTTP GET request using AWS Signature Version 4 with ECDSA-P256-SHA256 algorithm. The request includes authentication headers with credential, timestamp, expiration, region set, and a list of signed headers followed by the header values and a signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-key-duplicate/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host%3Bmy-header1\nhost:example.amazonaws.com\nmy-header1:value2,value2,value1\n\nhost;my-header1\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS ECDSA P256 Signed Request\nDESCRIPTION: Example of an AWS API request format using ECDSA P256 signing algorithm. Includes the request method, headers, and canonical request elements required for AWS signature version 4 authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Generating AWS Signature Version 4 String Components\nDESCRIPTION: This snippet shows the four components of an AWS Signature Version 4 string. It includes the algorithm, date, credential scope, and signature hash. These components are crucial for authenticating requests to AWS services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n890c4ed28c1a1ac10b5862719b537afbe392e987dc1aab1efa16fe7de41d3c81\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Inspector Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK Inspector. It includes aws-config, aws-sdk-inspector, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/inspector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-inspector = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS TNB Client in Rust\nDESCRIPTION: Demonstrates how to initialize an AWS TNB client within an asynchronous Rust application using Tokio. It loads AWS configuration from the environment using `aws_config::load_from_env()` and then creates a `aws_sdk_tnb::Client` instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/tnb/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_tnb as tnb;\n\n#[::tokio::main]\nasync fn main() -> Result<(), tnb::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_tnb::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK DataExchange Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK DataExchange client. It includes the aws-config, aws-sdk-dataexchange, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dataexchange/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dataexchange = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS MarketplaceCatalog SDK Dependencies in Cargo.toml\nDESCRIPTION: This code snippet shows how to add the required dependencies to a Rust project's Cargo.toml file. It includes the aws-config, aws-sdk-marketplacecatalog, and tokio dependencies necessary for using the AWS Marketplace Catalog API in a Rust application.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacecatalog/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplacecatalog = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Signature Version 4 GET Request Example\nDESCRIPTION: An example of a GET request to AWS using Signature Version 4 authentication. The request includes the X-Amz headers required for authentication, the host header, and the hash of the empty request body.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies for AWS SDK PCACONNECTORAD in Rust (Cargo.toml)\nDESCRIPTION: This Cargo.toml snippet specifies the required dependencies to use the aws-sdk-pcaconnectorad crate for AWS Private CA AD integration. It sets up aws-config with the latest behavior version, the main aws-sdk-pcaconnectorad crate, and configures Tokio for asynchronous operations. Ensure these lines are added to the `[dependencies]` section in your project's Cargo.toml file. This configuration is specific to Rust projects targeting asynchronous AWS SDK integrations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pcaconnectorad/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-pcaconnectorad = \\\"1.65.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-iotmanagedintegrations Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the aws-sdk-iotmanagedintegrations crate. It includes aws-config, aws-sdk-iotmanagedintegrations, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotmanagedintegrations/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotmanagedintegrations = \"1.4.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Marketplace Agreement Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Marketplace Agreement client using environment configuration\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplaceagreement/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_marketplaceagreement as marketplaceagreement;\n\n#[::tokio::main]\nasync fn main() -> Result<(), marketplaceagreement::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_marketplaceagreement::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Running AWS Glue Operations (Rust)\nDESCRIPTION: Examples showing how to start AWS Glue crawlers and jobs\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/glue/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nsrc/prepare.rs#L79\n```\n\nLANGUAGE: rust\nCODE:\n```\nsrc/run.rs#L39\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Device Farm SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration for setting up the AWS Device Farm SDK with required packages including aws-config, aws-sdk-devicefarm, and tokio for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/devicefarm/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-devicefarm = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeStar Notifications Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK CodeStar Notifications client in a Rust project. It includes the aws-config, aws-sdk-codestarnotifications, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codestarnotifications/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codestarnotifications = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Backup Gateway Client in Rust\nDESCRIPTION: This code demonstrates how to create a Backup Gateway client using the AWS SDK for Rust. It loads the configuration from the environment and initializes the client, which can then be used to make API calls to the Backup Gateway service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/backupgateway/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_backupgateway as backupgateway;\n\n#[::tokio::main]\nasync fn main() -> Result<(), backupgateway::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_backupgateway::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Lookout Metrics SDK\nDESCRIPTION: Dependencies configuration in Cargo.toml for setting up AWS Lookout Metrics with the Rust SDK. Includes required dependencies for aws-config, aws-sdk-lookoutmetrics, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutmetrics/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lookoutmetrics = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Deadline - TOML\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-deadline, and tokio with full features enabled for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/deadline/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-deadline = \"1.51.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP GET request, including the request line, headers, and a hash value. It includes custom AWS headers and demonstrates the format expected by AWS services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-unreserved/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK M2 Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding AWS SDK M2 and its dependencies to a Rust project. Includes required dependencies for aws-config, aws-sdk-m2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/m2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-m2 = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK GeoPlaces Client in Rust\nDESCRIPTION: Basic example demonstrating how to initialize the AWS SDK GeoPlaces client using environment configuration. Shows async main function setup with error handling and client creation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/geoplaces/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_geoplaces as geoplaces;\n\n#[::tokio::main]\nasync fn main() -> Result<(), geoplaces::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_geoplaces::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Cost Optimization Hub Client in Rust\nDESCRIPTION: Example code showing how to initialize and create an AWS Cost Optimization Hub client using environment configuration. Demonstrates basic async setup with Tokio and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costoptimizationhub/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_costoptimizationhub as costoptimizationhub;\n\n#[::tokio::main]\nasync fn main() -> Result<(), costoptimizationhub::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_costoptimizationhub::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Ground Station SDK\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS Ground Station SDK with Rust. Includes required dependencies for aws-config, aws-sdk-groundstation, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/groundstation/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-groundstation = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Generating Signed AWS URL with ECDSA-P256-SHA256\nDESCRIPTION: This snippet shows the structure of a signed AWS URL using the ECDSA-P256-SHA256 algorithm. It includes the HTTP method, path, query parameters with authentication details, and the required host header. The last line represents a SHA256 hash, likely of the request payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/./\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Marketplace Reporting SDK Dependencies\nDESCRIPTION: Cargo.toml configuration for adding aws-sdk-marketplacereporting and its dependencies to a Rust project. Requires tokio for async functionality and aws-config for configuration management.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacereporting/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplacereporting = \"1.20.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Shield SDK in Rust (TOML)\nDESCRIPTION: Specifies the required dependencies in the Cargo.toml file for integrating AWS Shield Advanced SDK within a Rust project. Lists the AWS configuration, Shield SDK, and the Tokio runtime with necessary features. Developers must add this section to their project's Cargo.toml to enable compilation and asynchronous operations with the AWS SDK.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/shield/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\\naws-config = { version = \\\"1.1.7\\\", features = [\\\"behavior-version-latest\\\"] }\\naws-sdk-shield = \\\"1.64.0\\\"\\ntokio = { version = \\\"1\\\", features = [\\\"full\\\"] }\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Scheduler in Rust (TOML)\nDESCRIPTION: This TOML snippet specifies the necessary Cargo dependencies required for integrating Amazon EventBridge Scheduler into a Rust project. It lists aws-config with the latest behavior version, aws-sdk-scheduler for the EventBridge Scheduler service, and tokio with full features for asynchronous support. These entries must be added under the [dependencies] section of the project\\'s Cargo.toml to enable compilation and use of the service client.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/scheduler/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-scheduler = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Comprehend Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the AWS SDK Comprehend in a Rust project. It includes the AWS config, Comprehend SDK, and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/comprehend/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-comprehend = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP POST request used in AWS SDK for Rust. It includes the request method, path, query string, headers, and a hash of the canonical request. This format is crucial for AWS request signing and authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-query/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nParam1=value1\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Cargo for AWS PinpointSMSVoiceV2 in Rust\nDESCRIPTION: This snippet shows how to add the necessary dependencies to your Cargo.toml file for using the AWS SDK for PinpointSMSVoiceV2. It includes aws-config, aws-sdk-pinpointsmsvoicev2, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/pinpointsmsvoicev2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-pinpointsmsvoicev2 = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS HTTP GET Request with Query Parameters and Headers\nDESCRIPTION: This snippet demonstrates the structure of an HTTP GET request with AWS-specific query parameters and headers. It includes the request line, query string with AWS parameters, and headers for host and content hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-unreserved/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET\n/\n-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&X-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in Cargo.toml for AWS AppTest SDK\nDESCRIPTION: Specifies the required dependencies for using the AWS AppTest SDK in a Rust project. Includes aws-config, aws-sdk-apptest, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/apptest/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-apptest = \"1.34.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS CloudTrail Data Client in Rust\nDESCRIPTION: This code snippet demonstrates how to create and initialize an AWS CloudTrail Data client using the aws-sdk-cloudtraildata crate in a Rust application. It loads the configuration from the environment and creates a new client instance.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudtraildata/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_cloudtraildata as cloudtraildata;\n\n#[::tokio::main]\nasync fn main() -> Result<(), cloudtraildata::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_cloudtraildata::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AWS IVS SDK Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration for using the AWS IVS SDK in a Rust project. Includes required dependencies for aws-config, aws-sdk-ivs, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ivs = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Cognito Identity Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for Cognito Identity. It includes the aws-config, aws-sdk-cognitoidentity, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cognitoidentity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cognitoidentity = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request Headers for AWS SDK Rust\nDESCRIPTION: This snippet shows the headers for an HTTP POST request, including AWS-specific headers like x-amz-content-sha256 and x-amz-date. It also includes a content-type for form-urlencoded data and a host header.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded-parameters/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\ncontent-length:13\ncontent-type:application/x-www-form-urlencoded; charset=utf-8\nhost:example.amazonaws.com\nx-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\ncontent-length;content-type;host;x-amz-content-sha256;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request Header for AWS API\nDESCRIPTION: This snippet illustrates the structure of an HTTP POST request header for making API calls to AWS services. It includes the HTTP method, version, host, and a custom header.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-value-case/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\nMy-Header1:VALUE1\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeStar Connections Dependency to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for CodeStar Connections. It includes the AWS config crate, the CodeStar Connections SDK, and Tokio for asynchronous runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codestarconnections/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codestarconnections = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Lookout Vision Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency configuration for setting up AWS Lookout Vision SDK in a Rust project. Includes required dependencies for aws-config, aws-sdk-lookoutvision, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lookoutvision/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lookoutvision = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK DAX in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for setting up AWS SDK DAX with Tokio async runtime support. Includes required versions for aws-config, aws-sdk-dax, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/dax/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-dax = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS IoT Events SDK Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS IoT Events SDK. It includes the aws-config, aws-sdk-iotevents, and tokio crates.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/iotevents/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-iotevents = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Formatting AWS Signed HTTP POST Request in Plaintext\nDESCRIPTION: This snippet shows the structure of a signed AWS HTTP POST request. It includes the request method, path, query string parameters, headers, and signature. The request uses the AWS4-ECDSA-P256-SHA256 signing algorithm.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=content-length%3Bcontent-type%3Bhost\ncontent-length:13\ncontent-type:application/x-www-form-urlencoded\nhost:example.amazonaws.com\n\ncontent-length;content-type;host\n9095672bbd1f56dfc5b65f3e153adc8731a4a654192329106275f4c7b24d0b6e\n```\n\n----------------------------------------\n\nTITLE: Credential Scope for AWS Signature Version 4 Test Suite\nDESCRIPTION: The example credential scope used in the AWS Signature Version 4 test suite, which includes the access key ID, date, region, service, and request type.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4-test-suite/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nAKIDEXAMPLE/20150830/us-east-1/service/aws4_request\n```\n\n----------------------------------------\n\nTITLE: Constructing Canonical Request for AWS SDK in Rust\nDESCRIPTION: This snippet demonstrates the structure of a canonical request used in AWS Signature Version 4 signing process. It includes the HTTP method, URI-encoded path, canonical headers, signed headers, and a hash of the payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-unreserved/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP POST Request Headers and Canonical Form\nDESCRIPTION: Shows a complete AWS HTTP request example with POST method, required headers like host, x-amz-date, and x-amz-region-set, followed by the canonical form of headers and a SHA256 hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-case/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK GeoRoutes Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependencies configuration for using AWS SDK GeoRoutes. Includes required dependencies for aws-config, aws-sdk-georoutes, and tokio with full features for async execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/georoutes/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-georoutes = \"1.18.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for OpenSearch with Cargo\nDESCRIPTION: Demonstrates how to add the aws-sdk-opensearch and its dependencies to a Cargo.toml file. It includes required dependencies for async functionality with Tokio.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/opensearch/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-opensearch = \"1.77.1\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Cost and Usage Report SDK\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using the AWS Cost and Usage Report SDK with Rust. Includes aws-config, aws-sdk-costandusagereport, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/costandusagereport/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-costandusagereport = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Redshift Data API Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to a Cargo.toml file for using the AWS Redshift Data API in a Rust project. It includes the aws-config and aws-sdk-redshiftdata crates, as well as tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/redshiftdata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-redshiftdata = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS API POST Request with Signature Version 4\nDESCRIPTION: This snippet shows the structure of an AWS API POST request. It includes the HTTP method, path, query string with AWS specific parameters, headers, and a request body hash. The request uses AWS Signature Version 4 with the ECDSA-P256-SHA256 algorithm for authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-value-case/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host%3Bmy-header1\nhost:example.amazonaws.com\nmy-header1:VALUE1\n\nhost;my-header1\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Header for AWS Endpoint\nDESCRIPTION: Demonstrates the basic HTTP header format for making a GET request to an AWS service endpoint. Shows the required Host header with an amazonaws.com domain.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-with-session-token/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding aws-sdk-invoicing Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the aws-sdk-invoicing crate and its dependencies to a Rust project's Cargo.toml file. It includes the required dependencies for asynchronous execution and the latest behavior version of aws-config.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/invoicing/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-invoicing = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS CloudFront SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS CloudFront SDK with Rust. Includes aws-config, aws-sdk-cloudfront, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudfront/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudfront = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK Resource Groups Dependencies to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Cargo.toml file for using the AWS Resource Groups SDK in a Rust project, including aws-config, aws-sdk-resourcegroups, and tokio dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/resourcegroups/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-resourcegroups = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request Headers for AWS SDK in Rust\nDESCRIPTION: This snippet illustrates the structure of HTTP headers for a POST request to an AWS service. It includes standard headers like content-length and host, as well as AWS-specific headers such as x-amz-content-sha256 and x-amz-date. The request body is empty, and a list of signed headers is provided.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\ncontent-length:13\ncontent-type:application/x-www-form-urlencoded\nhost:example.amazonaws.com\nx-amz-content-sha256:e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\ncontent-length;content-type;host;x-amz-content-sha256;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature Components\nDESCRIPTION: Example values used in AWS4-ECDSA signature calculation including the signing algorithm (AWS4-ECDSA-P256-SHA256), timestamp (20150830T123600Z), credential scope (20150830/service/aws4_request), and resulting signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-unnormalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nbf8c459a6a7f3879f55bff41e4dca65f69df4628456904e47f83013c0deb7276\n```\n\n----------------------------------------\n\nTITLE: Formatting AWS HTTP GET Request with Required Headers\nDESCRIPTION: This example shows the structure of an HTTP GET request to AWS services. It includes mandatory headers like host, x-amz-date (for request timestamp), and x-amz-region-set (for specifying the AWS region). The request also includes a canonical format followed by a SHA-256 hash signature used for AWS request authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-order/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nmy-header1:value4,value1,value3,value2\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;my-header1;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS MediaPackage SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-mediapackage with Rust. Includes aws-config, aws-sdk-mediapackage, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackage/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediapackage = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK in Rust (Cargo.toml)\nDESCRIPTION: This snippet demonstrates how to specify dependencies in the Cargo.toml file for a Rust project using Amazon WorkSpaces Thin Client via the AWS SDK. The required dependencies are aws-config, aws-sdk-workspacesthinclient, and tokio with the \"full\" feature. Each listed dependency includes a specific version constraint. The snippet serves as a prerequisite for enabling asynchronous calls and interacting with AWS services via Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/workspacesthinclient/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-workspacesthinclient = \"1.67.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK for Lex Runtime in Cargo.toml\nDESCRIPTION: Defines the necessary dependencies for using the AWS SDK for Lex Runtime in a Rust project. It includes the aws-config crate for configuration, aws-sdk-lexruntime for the Lex Runtime API, and tokio for handling asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexruntime/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lexruntime = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS License Manager Linux Subscriptions\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS License Manager Linux Subscriptions SDK with Rust. Includes aws-config, the service SDK, and tokio runtime dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanagerlinuxsubscriptions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-licensemanagerlinuxsubscriptions = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CodeGuru Security Dependency in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to the Cargo.toml file for using the AWS SDK CodeGuru Security module in a Rust project. It includes aws-config, aws-sdk-codegurusecurity, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codegurusecurity/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codegurusecurity = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS License Manager User Subscriptions Dependencies in Cargo.toml\nDESCRIPTION: Cargo dependency configuration for setting up the AWS License Manager User Subscriptions SDK with required dependencies including aws-config, the main SDK crate, and tokio for async support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanagerusersubscriptions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-licensemanagerusersubscriptions = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS License Manager SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using AWS License Manager SDK with Rust. Includes aws-config, aws-sdk-licensemanager, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/licensemanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-licensemanager = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Authentication Components\nDESCRIPTION: Sample AWS v4 ECDSA authentication strings showing algorithm identifier, ISO8601 timestamp, credential scope (date/service/aws4_request), and hex-encoded signature value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-after/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n192546340393592ef9baaa24656f55ed91288110e7514b50f0a3f79bb761a29c\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Example values showing the components used in AWS4-ECDSA-P256-SHA256 request signing: the algorithm identifier, ISO8601 timestamp, credential scope, and hex-encoded signature value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n4e4122984d30d13170a298ece62cc30f8da12578fb3b482616b1f11036b13934\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP GET request to AWS services. It includes the request method, path, query string, headers, and a signed headers string. The last line appears to be a hash, likely for request signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-order-key-case/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nParam1=value1&Param2=value2\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK MediaPackage VOD Dependencies to Cargo.toml\nDESCRIPTION: This configuration adds the necessary dependencies to your Cargo.toml file for using AWS SDK MediaPackage VOD. It includes aws-config, aws-sdk-mediapackagevod, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mediapackagevod/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mediapackagevod = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Executing the describe-scaling-plans example with AWS SDK for Rust\nDESCRIPTION: This command demonstrates how to run the describe-scaling-plans example, which lists auto scaling plans in the specified AWS Region. It accepts optional parameters for region selection and verbose output.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/autoscalingplans/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin describe-scaling-plans -- [-r REGION] [-v]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Marketplace Deployment SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Marketplace Deployment SDK, including aws-config, aws-sdk-marketplacedeployment, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/marketplacedeployment/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-marketplacedeployment = \"1.61.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Canonical Request Format with ECDSA P256\nDESCRIPTION: Example of a canonical AWS request format showing the HTTP method, URI, query parameters, headers and empty payload hash using ECDSA P256 SHA256 signing algorithm. The request includes AWS Signature Version 4 signing parameters.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-empty-query-value/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nPOST\n/\nParam1=value1&X-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing aws-sdk-route53recoverycluster Dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the aws-sdk-route53recoverycluster crate and its dependencies to a Rust project using Cargo. Includes required dependencies for aws-config, the SDK itself, and Tokio for asynchronous code execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/route53recoverycluster/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-route53recoverycluster = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS QLDB Session in Cargo.toml\nDESCRIPTION: Cargo.toml configuration that adds the necessary dependencies to use aws-sdk-qldbsession with Tokio for async execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/qldbsession/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-qldbsession = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Parameters\nDESCRIPTION: Example timestamp, scope string and signature hash for AWS4-ECDSA-P256-SHA256 authentication method. Shows the algorithm identifier, ISO 8601 timestamp, credential scope, and resulting signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-sort/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nb92b1e85236a12f9d118f85fb6686c83b0e83fb3428f8d4da3cc9acb2851fcfa\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components Example\nDESCRIPTION: This code snippet contains the components used in AWS's ECDSA-P256-SHA256 signature calculation. It includes the algorithm name, ISO8601 formatted timestamp, credential scope string, and signature hash. These elements are essential for authenticating requests to AWS services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n890c4ed28c1a1ac10b5862719b537afbe392e987dc1aab1efa16fe7de41d3c81\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Authentication Request Headers\nDESCRIPTION: Example of AWS HTTP request with authentication headers including the AWS4-ECDSA-P256-SHA256 algorithm, credentials, timestamps, and signed headers. Shows both the request line and canonical header format used for signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-case/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS SDK Mailmanager in Cargo.toml\nDESCRIPTION: Defines the required dependencies in Cargo.toml for using AWS SDK Mailmanager. Includes aws-config, aws-sdk-mailmanager, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/mailmanager/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-mailmanager = \"1.45.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Payment Cryptography Client in Rust\nDESCRIPTION: This snippet demonstrates how to initialize an AWS Payment Cryptography client in Rust using the AWS SDK. It loads configuration from the environment and creates a new client instance that can be used to make API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/paymentcryptography/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_paymentcryptography as paymentcryptography;\n\n#[::tokio::main]\nasync fn main() -> Result<(), paymentcryptography::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_paymentcryptography::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with AWS ECDSA Authentication Headers\nDESCRIPTION: Example of an HTTP GET request to AWS that uses the ECDSA-P256-SHA256 authentication algorithm. The request includes required AWS authentication headers like X-Amz-Algorithm, X-Amz-Credential, X-Amz-Date, X-Amz-Expires, X-Amz-Region-Set, and X-Amz-SignedHeaders.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Chime SDK Messaging Dependencies in Cargo.toml\nDESCRIPTION: Package dependencies configuration for using AWS Chime SDK Messaging in a Rust project. Includes required dependencies for aws-config, aws-sdk-chimesdkmessaging, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/chimesdkmessaging/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-chimesdkmessaging = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP GET request to an AWS service. It includes the request method, path, host, headers, and a signed canonical request string. This format is typically used for AWS request signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/./example\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS HTTP GET Request Headers and Canonical Request\nDESCRIPTION: This snippet shows the structure of an HTTP GET request for AWS services. It includes the request method, headers (host, x-amz-date, x-amz-region-set), and the hash of the canonical request. This format is crucial for AWS request signing and authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-unnormalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n//\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Example with Components\nDESCRIPTION: This snippet shows the components of an AWS4-ECDSA-P256-SHA256 signature used for AWS authentication. It includes the algorithm identifier, timestamp in ISO8601 format, credential scope (date/service/aws4_request), and the signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-normalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\ncf59db423e841c8b7e3444158185aa261b724a5c27cbe762676f3eed19f4dc02\n```\n\n----------------------------------------\n\nTITLE: Defining Proptest Failure Seeds for AWS SDK Rust\nDESCRIPTION: This snippet contains the seed values for specific failure cases encountered during proptest runs. Each seed is represented by a hexadecimal value and is associated with a particular input that caused the test to fail.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-http/proptest-regressions/query.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc b8ff8401495a7e4b4604f4438d8fc6b0ba63a58ddf58273ddcb3bb511e5cf91a # shrinks to s = \"<\"\ncc 59ee40f6a097f80254a91d0ee7d6cde97a353f7ccdf83eddd1d437781019431f # shrinks to s = \"\\\"\"\ncc 65e6e5f9082c6cbebf599af889721d30d8ee2388f2f7be372520aa86526c8379 # shrinks to s = \">\"\n```\n\n----------------------------------------\n\nTITLE: Constructing Signed AWS Request with ECDSA-P256-SHA256 Algorithm\nDESCRIPTION: This snippet shows the structure of a signed AWS request using the ECDSA-P256-SHA256 algorithm. It includes the HTTP method, path, query parameters with signing information, and the host header. The request is designed for the AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Describing Auto Scaling Instances in Rust\nDESCRIPTION: This code shows how to get detailed information about Auto Scaling instances using the DescribeAutoScalingInstances operation in AWS SDK for Rust.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/auto-scaling/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nsrc/scenario.rs#L532\n```\n\n----------------------------------------\n\nTITLE: Constructing Canonical Request for AWS Signature Version 4\nDESCRIPTION: This example shows the components of a canonical request used in AWS Signature Version 4 authentication. It includes the HTTP method, URI path, headers (host, x-amz-date, x-amz-region-set), signed headers list, and a hash representing an empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Customer Profiles SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Customer Profiles SDK in a Rust project. Includes aws-config, aws-sdk-customerprofiles, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/customerprofiles/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-customerprofiles = \"1.69.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP Headers for AWS SDK Request\nDESCRIPTION: Example of HTTP GET request headers showing proper header formatting including host specification and custom headers with both simple and quoted values.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-trim/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET / HTTP/1.1\nHost:example.amazonaws.com\nMy-Header1: value1\nMy-Header2: \"a   b   c\"\n```\n\n----------------------------------------\n\nTITLE: AWS API Request Example with Signature Version 4 Authentication\nDESCRIPTION: A complete example of an AWS API request showing the GET method, request path, query parameters containing authentication details (AWS4-ECDSA-P256-SHA256 algorithm, credentials, timestamp, expiration, region, and signed headers), the host header, and the SHA-256 hash of the empty request body.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/example/..\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Notifications Contacts SDK dependencies in Cargo.toml\nDESCRIPTION: Configuration for adding the AWS SDK for Notifications Contacts to a Rust project via Cargo.toml. Includes required dependencies for aws-config, aws-sdk-notificationscontacts, and tokio with full features for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/notificationscontacts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-notificationscontacts = \"1.15.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request with Path Traversal\nDESCRIPTION: Demonstrates an HTTP GET request header with path traversal (..) and AWS endpoint specification. Shows basic HTTP/1.1 request structure with Host header targeting an AWS service endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-normalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /example1/example2/../.. HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS IVS Chat SDK - Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS IVS Chat SDK with Rust, including aws-config, aws-sdk-ivschat, and tokio for async operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ivschat/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ivschat = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP GET request formatted for use with AWS services. It includes the request line and the Host header, which are essential components for making requests to AWS endpoints.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-normalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nGET //example// HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Constructing Signed AWS Request in Plaintext\nDESCRIPTION: This snippet shows the structure of a signed AWS request, including the HTTP method, request URI, headers, and canonical request hash. It demonstrates how to format the request for AWS signature version 4 signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-normalized/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK repostspace Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the required dependencies to a Rust project's Cargo.toml file. It includes the AWS config crate, the repostspace SDK, and Tokio with full features for asynchronous operations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/repostspace/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-repostspace = \"1.63.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS S3Outposts SDK Dependencies in Cargo.toml - Toml\nDESCRIPTION: This snippet demonstrates the required dependencies to add into your Cargo.toml file for integrating the aws-sdk-s3outposts crate. It specifies compatible versions for aws-config, aws-sdk-s3outposts, and tokio with full feature support. Ensure these entries are added under the [dependencies] section to correctly build and run asynchronous AWS SDK calls in Rust. The configuration is prerequisite for any further usage of the SDK in your project.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3outposts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-s3outposts = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request with Form Data\nDESCRIPTION: A basic HTTP POST request example showing required headers and form data. The request includes content-type specification for form data, host information, and a single parameter value pair.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded-parameters/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nContent-Type:application/x-www-form-urlencoded; charset=utf-8\nHost:example.amazonaws.com\nContent-Length:13\n\nParam1=value1\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Example showing key components needed for generating an AWS4-ECDSA signature: the algorithm identifier (AWS4-ECDSA-P256-SHA256), ISO8601 timestamp (20150830T123600Z), credential scope (20150830/service/aws4_request), and a SHA256 hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-order-key-case/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\ncc07b29e0d0f0b2d6aa296621a5608fd9c2271159b9b2f737f682704ebb96482\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Fraud Detector in Cargo.toml\nDESCRIPTION: Dependencies configuration in Cargo.toml for using AWS Fraud Detector SDK. Includes required packages aws-config, aws-sdk-frauddetector, and tokio with specific version requirements.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/frauddetector/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-frauddetector = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature Components\nDESCRIPTION: Shows the key components of an AWS4-ECDSA-P256-SHA256 signature including the algorithm identifier, ISO8601 timestamp, scope string and final signature hash. This format is used for signing AWS API requests using ECDSA with P-256 curve and SHA-256 hashing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n03c5c4387e7c1bd3a606d1b19301d277e51d7621ced07c8c9ff2aeb151c0f4c6\n```\n\n----------------------------------------\n\nTITLE: Installing AWS EC2 Instance Connect SDK Dependencies - TOML\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS EC2 Instance Connect SDK. Includes aws-config, aws-sdk-ec2instanceconnect, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ec2instanceconnect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ec2instanceconnect = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request Headers for AWS Service\nDESCRIPTION: Shows the structure of a basic HTTP POST request including host and custom headers for AWS service interaction. Demonstrates the minimal required headers for making a POST request to an AWS endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-sort/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\nMy-Header1:value1\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature Components\nDESCRIPTION: Example showing the key components used in AWS4-ECDSA-P256-SHA256 signature calculation: algorithm identifier, timestamp, credential scope string, and hex-encoded hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-unreserved/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n5d8923c620c699f856a35a6eb8dd786fd4c8c6ab0a35c552caeb5b648989433f\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Lex Runtime V2 in Cargo.toml\nDESCRIPTION: Specifies the required dependencies in Cargo.toml for using the AWS Lex Runtime V2 SDK. Includes aws-config, aws-sdk-lexruntimev2, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lexruntimev2/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-lexruntimev2 = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS CodeBuild SDK Dependencies in Cargo.toml\nDESCRIPTION: Required dependencies configuration in Cargo.toml for using AWS CodeBuild SDK with Rust. Includes aws-config, aws-sdk-codebuild, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/codebuild/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-codebuild = \"1.85.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS ELB Client in Rust\nDESCRIPTION: Basic example showing how to initialize and create an AWS Elastic Load Balancing client using environment configuration. Demonstrates async main function setup and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elasticloadbalancing/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_elasticloadbalancing as elasticloadbalancing;\n\n#[::tokio::main]\nasync fn main() -> Result<(), elasticloadbalancing::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_elasticloadbalancing::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Signature v4 Authentication Components in Plaintext\nDESCRIPTION: This snippet shows the four components of an AWS Signature Version 4 authentication string. It includes the signing algorithm (AWS4-ECDSA-P256-SHA256), datetime stamp in ISO8601 format, credential scope, and the signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n890c4ed28c1a1ac10b5862719b537afbe392e987dc1aab1efa16fe7de41d3c81\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components Example\nDESCRIPTION: Example of the components that make up an AWS4-ECDSA-P256-SHA256 signature, including the algorithm, timestamp, credential scope, and signature hash. These components are used when forming authentication headers for AWS API requests.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n890c4ed28c1a1ac10b5862719b537afbe392e987dc1aab1efa16fe7de41d3c81\n```\n\n----------------------------------------\n\nTITLE: AWS SDK v4 ECDSA-P256-SHA256 Signing Components\nDESCRIPTION: Example values used in AWS SDK v4 request signing process using ECDSA-P256-SHA256. Includes signing algorithm identifier, ISO8601 timestamp, credential scope string, and hex-encoded hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-unreserved/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\na967a5035e5dc574f94fb9f0de0faf9d56e889c26d9a65d7d0a15d89690280d1\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Entity Resolution SDK in Cargo.toml\nDESCRIPTION: Dependencies configuration for the AWS Entity Resolution SDK project in Cargo.toml. Includes required dependencies for aws-config, aws-sdk-entityresolution, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/entityresolution/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-entityresolution = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request with Authentication Headers\nDESCRIPTION: An example of an AWS HTTP GET request with AWS Signature Version 4 authentication components. It demonstrates the X-Amz parameters required for AWS API authentication including algorithm, credentials, date, expiration, region, and signed headers.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/example\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for AWS Migration Hub Config in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Migration Hub Config SDK. Includes aws-config, aws-sdk-migrationhubconfig, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/migrationhubconfig/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-migrationhubconfig = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Request Components\nDESCRIPTION: Sample components of an AWS4-ECDSA-P256-SHA256 request including the signing algorithm, timestamp, scope string, and signature hash. These components are used in AWS request authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-relative-unnormalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n504892d7f7262dd98d79ab7f3bb6f918cd59d491aacb2d76450f6e065479b31a\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature String Components\nDESCRIPTION: Shows the core components of an AWS4-ECDSA signature including the algorithm identifier (AWS4-ECDSA-P256-SHA256), ISO8601 timestamp, credential scope, and final signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded-parameters/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n03c5c4387e7c1bd3a606d1b19301d277e51d7621ced07c8c9ff2aeb151c0f4c6\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK DocumentDB Elastic Dependency to Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file to use the AWS SDK for DocumentDB Elastic. It includes aws-config, aws-sdk-docdbelastic, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/docdbelastic/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-docdbelastic = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS GET Request with AWS4-ECDSA-P256-SHA256 Signing\nDESCRIPTION: An example of an HTTP GET request to AWS with the AWS4-ECDSA-P256-SHA256 signing algorithm. The request includes various required parameters including credentials, timestamp, expiration, and signed headers, followed by the request headers and the canonical signed headers with an empty payload hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-order/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host%3Bmy-header1\nhost:example.amazonaws.com\nmy-header1:value4,value1,value3,value2\n\nhost;my-header1\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS Request Authentication Components\nDESCRIPTION: Example of the four core components used in AWS request authentication: signing algorithm (AWS4-ECDSA-P256-SHA256), timestamp in ISO format, credential scope, and signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nab3f7b8af0ce16e0faf508160fb13d890874992d74f36214ae9eec7437361f2b\n```\n\n----------------------------------------\n\nTITLE: Demonstrating AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: Shows the key components used in AWS request signing including the signature algorithm identifier, timestamp in ISO8601 format, credential scope, and final signature hash. These elements are used in the AWS Signature Version 4 signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-normalized/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\ncf59db423e841c8b7e3444158185aa261b724a5c27cbe762676f3eed19f4dc02\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature Components\nDESCRIPTION: Example of the components making up an AWS4-ECDSA-P256-SHA256 signature, including the algorithm identifier, timestamp in ISO format, credential scope, and final signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-unreserved/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nb48c0f7d7cdaa2cd05e4b789c913063becd96ccace5296a334c950040e58bcac\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Connect SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-connect with Tokio async runtime. Specifies version requirements for aws-config, aws-sdk-connect, and tokio packages.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connect/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connect = \"1.99.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK CloudFront KeyValueStore Dependencies in Cargo.toml\nDESCRIPTION: This snippet shows how to add the necessary dependencies to a Rust project's Cargo.toml file for using the AWS SDK CloudFront KeyValueStore.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudfrontkeyvaluestore/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudfrontkeyvaluestore = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP GET Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the format of an HTTP GET request to an AWS service endpoint. It includes query parameters and specifies the host.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-order-key-case/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /?Param2=value2&Param1=value1 HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request to AWS Endpoint\nDESCRIPTION: Shows the structure of a basic HTTP POST request to an AWS service endpoint. Includes required headers like Content-Type and Host, along with form-encoded parameter data.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-x-www-form-urlencoded/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nContent-Type:application/x-www-form-urlencoded\nHost:example.amazonaws.com\nContent-Length:13\n\nParam1=value1\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS Signature Version 4 HTTP POST Request with ECDSA P256\nDESCRIPTION: This snippet shows the structure of an HTTP POST request with AWS Signature Version 4 headers using the ECDSA P256 algorithm. It includes the request method, path, query string with authentication parameters, and required headers for AWS authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-sort/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host%3Bmy-header1\nhost:example.amazonaws.com\nmy-header1:value1\n\nhost;my-header1\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Authentication Values\nDESCRIPTION: Sample values used in AWS4-ECDSA-P256-SHA256 authentication flow, including the algorithm identifier, ISO8601 timestamp, credential scope string, and signature hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-empty-query-value/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nb9ec8df7b378fbee58903f5c54bd50e80a4d2d5aa9532583910ce771e42574fe\n```\n\n----------------------------------------\n\nTITLE: Image Source Manipulation for XSS\nDESCRIPTION: Demonstrates XSS attacks by manipulating image source attributes and injecting JavaScript code into error handlers.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><img src=xxx:x \\x0Aonerror=javascript:alert(118)>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><img src=xxx:x \\x22onerror=javascript:alert(119)>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\"`'><img src=xxx:x \\x0Bonerror=javascript:alert(120)>\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature Components\nDESCRIPTION: Example showing the key components used in generating an AWS4-ECDSA-P256-SHA256 signature: algorithm identifier, ISO8601 timestamp, credential scope string, and hex-encoded hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-unnormalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nefbe4f47c2acbb53fbfd0be6846cfa35a48c21f3f800e741278dae7b721302b4\n```\n\n----------------------------------------\n\nTITLE: Installing AWS AppFlow SDK Dependencies in Cargo.toml\nDESCRIPTION: Dependency configuration for adding AWS AppFlow SDK to a Rust project. Includes required dependencies for aws-config, aws-sdk-appflow, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/appflow/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-appflow = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Malformed URL Schemes for XSS\nDESCRIPTION: Shows XSS attack vectors using malformed URL schemes and various encoding tricks to execute JavaScript code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_5\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"\\x0Bjavascript:javascript:alert(61)\" id=\"fuzzelement1\">test</a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"\\x0Fjavascript:javascript:alert(62)\" id=\"fuzzelement1\">test</a>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<a href=\"\\xC2\\xA0javascript:javascript:alert(63)\" id=\"fuzzelement1\">test</a>\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS ECDSA P256 SHA256 Authentication Request in HTTP\nDESCRIPTION: This snippet demonstrates how to construct an HTTP POST request for AWS authentication using the ECDSA P256 SHA256 algorithm. It includes various required parameters in the query string and specifies the host in the headers.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-before/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-Security-Token=AQoDYXdzEPT%2F%2F%2F%2F%2F%2F%2F%2F%2FwEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI%2FqkPpKPi%2FkMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d%2Bxo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz%2BscqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR%2FoLxBA%3D%3D&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Creating an SNS Topic in Rust\nDESCRIPTION: This code snippet demonstrates how to create a new SNS topic using the AWS SDK for Rust. It refers to the 'create-topic.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/sns/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nsrc/bin/create-topic.rs#L26\n```\n\n----------------------------------------\n\nTITLE: Formatting HTTP POST Request for AWS SDK in Rust\nDESCRIPTION: This snippet shows the structure of an HTTP POST request used in AWS SDK for Rust. It includes the request method, path, headers (including AWS-specific headers), and a canonical request string. The last line appears to be a hash value, likely used in the AWS Signature Version 4 signing process.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-value-case/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nmy-header1:VALUE1\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;my-header1;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for aws-sdk-ssmcontacts in Cargo.toml (TOML)\nDESCRIPTION: This snippet shows the necessary dependencies to add to your project's `Cargo.toml` file to use the `aws-sdk-ssmcontacts` crate. It includes `aws-config` for loading AWS configuration (with the 'behavior-version-latest' feature), the specific `aws-sdk-ssmcontacts` crate version, and the `tokio` runtime for asynchronous operations (with the 'full' feature).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ssmcontacts/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ssmcontacts = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies for AWS VPC Lattice SDK in Cargo.toml (TOML)\nDESCRIPTION: Specifies the necessary Rust crates (`aws-config`, `aws-sdk-vpclattice`, `tokio`) and their versions to be included in the `Cargo.toml` file for a project interacting with AWS VPC Lattice. It requires `aws-config` (with `behavior-version-latest` feature), `aws-sdk-vpclattice`, and `tokio` (with `full` feature) as dependencies.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/vpclattice/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-vpclattice = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP GET Request Format\nDESCRIPTION: Example of an AWS HTTP GET request format showing required headers (host, x-amz-date, x-amz-region-set) and canonical string format. Includes path parameters and SHA256 hash of empty payload.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-empty-query-key/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nParam1=value1\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: XSS Injection Patterns in HTML\nDESCRIPTION: Collection of HTML/JavaScript payloads designed to test XSS vulnerabilities using various escape sequences and injection points.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<img \\x11src=x onerror=\"javascript:alert(167)\">\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP GET Request for AWS Service\nDESCRIPTION: Demonstrates the format of a HTTP GET request to an AWS service endpoint. Shows the required Host header for addressing AWS services.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-normalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /example/.. HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: PropTest Failure Seeds Configuration\nDESCRIPTION: Configuration entries for PropTest failure cases, containing seed values and the corresponding test inputs that triggered failures. Each line includes a hash and the minimal test case it shrinks to.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-http/proptest-regressions/label.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc dfac816a3fc3fff8523f1a1707da0065b72fc3c0d70fce001627a8e2e7ee5e0e # shrinks to s = \">\"\ncc 22bce3cd581f5f5a55e6ba18b1fb027481a496f6b35fee6dc4ef84659b99ddca # shrinks to s = \"`\"\ncc be619cccfee48e3bf642cf0f82e98e00dceccbe10963fbaf3a622a68a55a3227 # shrinks to s = \"?\\\"\"\ncc 3e0b2e6f64642d7c58e5d2fe9223f75238a874bd8c3812dcb3ecc721d9aa0243 # shrinks to s = \" \"\n```\n\n----------------------------------------\n\nTITLE: AWS SDK HTTP GET Request with Special Characters\nDESCRIPTION: An HTTP GET request example showing URL path encoding with alphanumeric and special characters. Includes host header targeting an AWS service endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query-unreserved/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /?-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz=-._~0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Describing ECS Clusters in Rust\nDESCRIPTION: This code snippet illustrates how to describe Amazon ECS clusters using the AWS SDK for Rust. The function is found in the 'describe-clusters.rs' file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/ecs/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Rust\nCODE:\n```\nDescribeClusters\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request for AWS Endpoint\nDESCRIPTION: Shows the structure of an HTTP GET request targeting an AWS service endpoint with a query parameter. The request includes the required Host header for AWS service authentication.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-empty-query-key/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /?Param1=value1 HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP GET Request for AWS Service\nDESCRIPTION: A simple HTTP GET request targeting a root path with a preceding dot. This format specifies the protocol version (HTTP/1.1) and includes the required Host header pointing to an AWS service endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-dot-slash-normalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /./ HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Special Characters and Unicode Control Characters\nDESCRIPTION: ASCII punctuation, C0/C1 controls, and Unicode whitespace characters\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n,./;'[]\\-=\n<>?:\"{}|_+\n!@#$%^&*()`~\n```\n\n----------------------------------------\n\nTITLE: Describing DB Cluster Parameters with Aurora in Rust\nDESCRIPTION: This code snippet demonstrates describing DB cluster parameters using the AWS SDK for Rust with Aurora. It's part of managing Aurora DB cluster configurations.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/examples/examples/aurora/README.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\n// Code for DescribeDBClusterParameters operation\n// Located in src/aurora_scenario/tests.rs#L376\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request for AWS API\nDESCRIPTION: This snippet shows the structure of a basic HTTP POST request to an AWS API endpoint. It includes the request line specifying the HTTP method and version, followed by the Host header identifying the target AWS service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-before/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Managed Blockchain SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies including aws-config, aws-sdk-managedblockchain, and tokio for asynchronous execution.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/managedblockchain/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-managedblockchain = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Basic AWS HTTP POST Request\nDESCRIPTION: Shows the minimal required HTTP POST request format for making calls to AWS services. Includes the mandatory Host header with an example AWS endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP POST Request to AWS Endpoint\nDESCRIPTION: This snippet shows the structure of an HTTP POST request to an AWS service. It specifies the HTTP method (POST), version (1.1), and includes a Host header with an example AWS endpoint.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-after/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Advanced Script Injection Techniques\nDESCRIPTION: Shows more sophisticated XSS attack vectors using various HTML attribute manipulations and JavaScript encoding tricks to bypass filters.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<svg><script>123<1>alert(3)</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\"><script>alert(4)</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n'><script>alert(5)</script>\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS Signed GET Request with ECDSA-P256-SHA256\nDESCRIPTION: This snippet demonstrates the structure of an AWS signed GET request. It includes the request method, query parameters for AWS Signature Version 4, and the required headers. The example uses ECDSA-P256-SHA256 as the signing algorithm.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slashes-unnormalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n//example//\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Glacier Dependencies in Cargo.toml\nDESCRIPTION: Dependencies configuration for adding AWS SDK Glacier support to a Rust project. Includes required crates for AWS config, Glacier SDK, and Tokio async runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/glacier/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-glacier = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS Canonical Request Format\nDESCRIPTION: Example of a canonical request format used in AWS request signing process. Shows HTTP method, URI, query parameters, signed headers and empty request body hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-empty-query-value/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\nParam1=value1\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTP POST Request for AWS Service in Rust SDK\nDESCRIPTION: This snippet shows the structure of an HTTP POST request to an AWS service endpoint. It includes the request line specifying the HTTP method and version, followed by a Host header identifying the target AWS service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-header-key-case/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST / HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components Example\nDESCRIPTION: A formatted example showing the components of an AWS4-ECDSA-P256-SHA256 signature. Includes the algorithm identifier, timestamp in ISO8601 format, credential scope with date, service, and request type, and a SHA256 hash value.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-normalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n0cc67a8acfed5946b645794c649dd98d3485728119cdf17d38985ba0ff55abca\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Network Firewall SDK in Rust\nDESCRIPTION: This TOML snippet specifies the necessary dependencies to include in a Rust project's `Cargo.toml` file to use the AWS SDK for Network Firewall. It includes `aws-config` for loading AWS configuration, `aws-sdk-networkfirewall` for the service client, and `tokio` for the asynchronous runtime. The `behavior-version-latest` feature for `aws-config` is recommended for accessing the latest SDK behaviors.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/networkfirewall/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-networkfirewall = \"1.68.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: HTTP POST Request for AWS API\nDESCRIPTION: A basic HTTP POST request example showing the format for making requests to AWS services. The request includes a query parameter and host header.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla-empty-query-value/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /?Param1=value1 HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Formatting AWS Signature Version 4 HTTP GET Request\nDESCRIPTION: This snippet shows the structure of an HTTP GET request to an AWS service using Signature Version 4 with ECDSA-P256-SHA256. It includes the request line, query parameters for authentication, and required headers. The request is targeting the root path '/' of the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-trim/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host%3Bmy-header1%3Bmy-header2\nhost:example.amazonaws.com\nmy-header1:value1\nmy-header2:\"a b c\"\n\nhost;my-header1;my-header2\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication Request Headers Example\nDESCRIPTION: Sample AWS request headers showing authentication components including host, timestamp, region, and security token. The request includes a canonical request signature and signed headers list.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-sts-header-before/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\nx-amz-security-token:AQoDYXdzEPT//////////wEXAMPLEtc764bNrC9SAPBSM22wDOk4x4HIZ8j4FZTwdQWLWsKWHGBuFqwAeMicRXmxfpSPfIeoIYRqTflfKD8YUuwthAx7mSEI/qkPpKPi/kMcGdQrmGdeehM4IC1NtBmUpp2wUE8phUZampKsburEDy0KPkyQDYwT7WZ0wq5VSXDvp75YU9HFvlRd8Tx6q6fE8YQcHNVXAkiY9q6d+xo0rKwT38xVqr7ZD0u0iPPkUL64lIZbqBAz+scqKmlzm8FDrypNC9Yjc8fPOLn9FX9KSYvKTr4rvx3iSIlTJabIQwj2ICCR/oLxBA==\n\nhost;x-amz-date;x-amz-region-set;x-amz-security-token\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ConnectParticipant Dependency in Rust\nDESCRIPTION: This snippet shows how to add the AWS SDK ConnectParticipant crate as a dependency in a Rust project's Cargo.toml file. It includes the necessary dependencies for the SDK and Tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectparticipant/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-connectparticipant = \"1.66.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: AWS SigV4 GET Request with Authentication Headers\nDESCRIPTION: A sample AWS API GET request showing the HTTP method, path, authentication parameters using AWS Signature Version 4 with ECDSA-P256-SHA256, and host header. The request includes credential scope, expiration time, and region information, followed by the canonical request hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-normalized/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n\nhost\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: PropTest Seed Entry\nDESCRIPTION: A seed entry for a PropTest failure case, including the hash and the specific test case parameters that caused the failure. The test case involves negative seconds (-1) and positive nanoseconds (2).\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-types/proptest-regressions/instant/format.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncc 274da3290b70eec94751bb4ebb152160811daea25f46211ebf54bba47bd3a2e6 # shrinks to secs = -1, nanos = 2\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS Signature Version 4 Request Headers\nDESCRIPTION: This snippet shows the headers of an AWS Signature Version 4 request. It includes the HTTP method, path, query string parameters for authentication, and the host header. The request uses the ECDSA-P256-SHA256 algorithm for signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla/query-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\nX-Amz-Algorithm=AWS4-ECDSA-P256-SHA256&X-Amz-Credential=AKIDEXAMPLE%2F20150830%2Fservice%2Faws4_request&X-Amz-Date=20150830T123600Z&X-Amz-Expires=3600&X-Amz-Region-Set=us-east-1&X-Amz-SignedHeaders=host\nhost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Adding AWS SDK ApplicationSignals Dependency in Rust\nDESCRIPTION: This snippet shows how to add the aws-sdk-applicationsignals crate and its dependencies to a Rust project's Cargo.toml file.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/applicationsignals/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-applicationsignals = \"1.40.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK ECS Dependencies with Cargo\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS SDK ECS client. Includes aws-config, aws-sdk-ecs, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/ecs/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-ecs = \"1.73.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Signature Version 4 Components in Plaintext\nDESCRIPTION: This snippet shows the key components of an AWS Signature Version 4 request. It includes the signing algorithm (AWS4-ECDSA-P256-SHA256), the timestamp (20150830T123600Z), the credential scope (20150830/service/aws4_request), and a sample signature.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/post-vanilla/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n192546340393592ef9baaa24656f55ed91288110e7514b50f0a3f79bb761a29c\n```\n\n----------------------------------------\n\nTITLE: Constructing AWS HTTP GET Request with Headers\nDESCRIPTION: This snippet shows the structure of an HTTP GET request to AWS, including the request line, headers, and a hash of the canonical request. It includes AWS-specific headers like x-amz-date and x-amz-region-set, which are crucial for request signing and routing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-query/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\n\nhost;x-amz-date;x-amz-region-set\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Neptune Data Dependencies in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using aws-sdk-neptunedata, including aws-config, the SDK itself, and tokio for async runtime support.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/neptunedata/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-neptunedata = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Test Strings\nDESCRIPTION: Common SQL injection payloads to test for database vulnerabilities including table drops and authentication bypasses.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n1;DROP TABLE users\n1'; DROP TABLE users-- 1\n' OR 1=1 -- 1\n```\n\n----------------------------------------\n\nTITLE: CSS Expression Injection for XSS\nDESCRIPTION: Demonstrates XSS attacks using CSS expressions to execute JavaScript code in older versions of Internet Explorer.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_4\n\nLANGUAGE: HTML\nCODE:\n```\nABC<div style=\"x\\x3Aexpression(javascript:alert(34))\">DEF\n```\n\nLANGUAGE: HTML\nCODE:\n```\nABC<div style=\"x:expression\\x5C(javascript:alert(35))\">DEF\n```\n\nLANGUAGE: HTML\nCODE:\n```\nABC<div style=\"x:expression\\x00(javascript:alert(36))\">DEF\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA-P256-SHA256 Signature Components\nDESCRIPTION: This snippet shows the components of an AWS4-ECDSA-P256-SHA256 signature. It includes the algorithm name, timestamp in ISO8601 format, credential scope, and the signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-unnormalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\n633e0570a745c18cc22e43af8be65cfed3e7173061ec403353734bdfae90e0b6\n```\n\n----------------------------------------\n\nTITLE: Configuring Cargo.toml for aws-smithy-json Testing\nDESCRIPTION: This snippet shows how to add the aws-smithy-json dependency to the Cargo.toml file for the test project. It requires replacing '<local-path-to-smithy-rs>' with the actual path to the smithy-rs repository.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-smithy-json/TESTING.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\naws-smithy-json = { path = \"<local-path-to-smithy-rs>/rust-runtime/aws-smithy-json\" }\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Credential Components\nDESCRIPTION: Sample credential string components for AWS4-ECDSA-P256-SHA256 authentication including algorithm identifier, timestamp in ISO8601 format, credential scope, and hex-encoded signature hash.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-header-value-order/header-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\ne1c3b5d34632ffff080330b3bc31906c8988bf1683f4af689ef3f1811952df36\n```\n\n----------------------------------------\n\nTITLE: AWS HTTP Request Headers Example\nDESCRIPTION: Example of HTTP GET request headers for AWS API including required authentication headers like x-amz-date, host, region and security token. Shows proper header formatting for AWS request signing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-vanilla-with-session-token/header-canonical-request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET\n/\n\nhost:example.amazonaws.com\nx-amz-date:20150830T123600Z\nx-amz-region-set:us-east-1\nx-amz-security-token:6e86291e8372ff2a2260956d9b8aae1d763fbf315fa00fa31553b73ebf194267\n\nhost;x-amz-date;x-amz-region-set;x-amz-security-token\ne3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\n```\n\n----------------------------------------\n\nTITLE: Cross-Site Scripting (XSS) Test Payloads\nDESCRIPTION: Collection of HTML/JavaScript payloads for testing XSS vulnerabilities through various input vectors including img tags and event handlers.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n<img src=x onerror=\"javascript:alert(167)\">\n<img src=x\\x09onerror=\"javascript:alert(187)\">\n```\n\n----------------------------------------\n\nTITLE: AWS4-ECDSA Signature String Components\nDESCRIPTION: Example of the signature algorithm identifier, timestamp, credential scope, and signature hash used in AWS4-ECDSA request signing. Shows the standardized format for ECDSA P256 signatures with SHA256 hashing.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-relative-unnormalized/query-string-to-sign.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAWS4-ECDSA-P256-SHA256\n20150830T123600Z\n20150830/service/aws4_request\nbbbb3668f996906ebb2c96ebdc2418af99656315adaf647989ab336c88fb516e\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Connect Contact Lens Client\nDESCRIPTION: Basic Rust code example showing how to initialize and create an AWS Connect Contact Lens client using environment configuration. Demonstrates async setup with tokio runtime.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/connectcontactlens/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_connectcontactlens as connectcontactlens;\n\n#[::tokio::main]\nasync fn main() -> Result<(), connectcontactlens::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_connectcontactlens::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: SQL Injection Test Cases\nDESCRIPTION: Common SQL injection patterns to test database input sanitization.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n1;DROP TABLE users\n1'; DROP TABLE users-- 1\n' OR 1=1 -- 1\n```\n\n----------------------------------------\n\nTITLE: HTTP GET Request Format for AWS Endpoint\nDESCRIPTION: Demonstrates the minimal required format for an HTTP GET request to an AWS service endpoint. Shows the request line and host header which are essential components for AWS API calls.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/aws-sigv4/aws-sig-v4a-test-suite/get-slash-pointless-dot-unnormalized/request.txt#2025-04-23_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /./example HTTP/1.1\nHost:example.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS Elastic Transcoder SDK\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Elastic Transcoder SDK with Rust. Includes aws-config, aws-sdk-elastictranscoder, and tokio with full features.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/elastictranscoder/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-elastictranscoder = \"1.65.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: URL Encoding and Obfuscation Techniques\nDESCRIPTION: Showcases XSS attack vectors using URL encoding and various obfuscation techniques to bypass security filters.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_3\n\nLANGUAGE: HTML\nCODE:\n```\n<script\\x20type=\"text/javascript\">javascript:alert(25);</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script\\x3Etype=\"text/javascript\">javascript:alert(26);</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<script\\x0Dtype=\"text/javascript\">javascript:alert(27);</script>\n```\n\n----------------------------------------\n\nTITLE: Basic Script Injection in HTML\nDESCRIPTION: Demonstrates simple script tag injection for XSS attacks. These examples show how attackers might try to execute JavaScript code in a victim's browser.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<script>alert(0)</script>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n&lt;script&gt;alert(&#39;1&#39;);&lt;/script&gt;\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<img src=x onerror=alert(2) />\n```\n\n----------------------------------------\n\nTITLE: XML XXE Injection Pattern\nDESCRIPTION: XML payload demonstrating XXE (XML External Entity) injection vulnerability.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template Injection\nDESCRIPTION: Jinja2 template injection payloads that can lead to memory exhaustion or file read vulnerabilities.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_8\n\nLANGUAGE: jinja2\nCODE:\n```\n{% print 'x' * 64 * 1024**3 %}\n{{ \"\".__class__.__mro__[2].__subclasses__()[40](\"/etc/passwd\").read() }}\n```\n\n----------------------------------------\n\nTITLE: Jinja2 Template Injection\nDESCRIPTION: Template injection payloads targeting Jinja2 to cause memory errors or read system files.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n{% print 'x' * 64 * 1024**3 %}\n{{ \"\".__class__.__mro__[2].__subclasses__()[40](\"/etc/passwd\").read() }}\n```\n\n----------------------------------------\n\nTITLE: Unicode Symbols and Emoticons\nDESCRIPTION: Common Unicode symbols, Japanese emoticons, and emoji that can cause rendering or encoding issues\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nΩ≈ç√∫˜µ≤≥÷\nåß∂ƒ©˙∆˚¬…æ\nヽ༼ຈل͜ຈ༽ﾉ ヽ༼ຈل͜ຈ༽ﾉ\n(｡◕ ∀ ◕｡)\n```\n\n----------------------------------------\n\nTITLE: Reserved and Numeric Strings\nDESCRIPTION: Collection of common reserved strings and numeric values that may cause issues in parsing or validation\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nundefined\nundef\nnull\nNULL\n(null)\nnil\nNIL\ntrue\nfalse\nTrue\nFalse\nTRUE\nFALSE\nNone\nhasOwnProperty\n```\n\n----------------------------------------\n\nTITLE: HTML-based XSS Attack Vectors Collection\nDESCRIPTION: A comprehensive collection of Cross-Site Scripting (XSS) attack vectors using HTML and JavaScript. These payloads demonstrate various techniques for bypassing XSS filters, including script tags, event handlers, character encoding, and URL manipulation.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<script>alert(0)</script>\n&lt;script&gt;alert(&#39;1&#39;);&lt;/script&gt;\n<img src=x onerror=alert(2) />\n<svg><script>123<1>alert(3)</script>\n\"><script>alert(4)</script>\n'><script>alert(5)</script>\n><script>alert(6)</script>\n</script><script>alert(7)</script>\n< / script >< script >alert(8)< / script >\n onfocus=JaVaSCript:alert(9) autofocus\n\" onfocus=JaVaSCript:alert(10) autofocus\n' onfocus=JaVaSCript:alert(11) autofocus\n＜script＞alert(12)＜/script＞\n<sc<script>ript>alert(13)</sc</script>ript>\n--><script>alert(14)</script>\n\";alert(15);t=\"\n';alert(16);t='\nJavaSCript:alert(17)\n;alert(18);\nsrc=JaVaSCript:prompt(19)\n\"><script>alert(20);</script x=\"\n'><script>alert(21);</script x='\n><script>alert(22);</script x=\n\" autofocus onkeyup=\"javascript:alert(23)\n' autofocus onkeyup='javascript:alert(24)\n<script\\x20type=\"text/javascript\">javascript:alert(25);</script>\n<script\\x3Etype=\"text/javascript\">javascript:alert(26);</script>\n<script\\x0Dtype=\"text/javascript\">javascript:alert(27);</script>\n<script\\x09type=\"text/javascript\">javascript:alert(28);</script>\n<script\\x0Ctype=\"text/javascript\">javascript:alert(29);</script>\n<script\\x2Ftype=\"text/javascript\">javascript:alert(30);</script>\n<script\\x0Atype=\"text/javascript\">javascript:alert(31);</script>\n'`\"><\\x3Cscript>javascript:alert(32)</script>\n'`\"><\\x00script>javascript:alert(33)</script>\nABC<div style=\"x\\x3Aexpression(javascript:alert(34)\">DEF\nABC<div style=\"x:expression\\x5C(javascript:alert(35))\">DEF\nABC<div style=\"x:expression\\x00(javascript:alert(36))\">DEF\nABC<div style=\"x:exp\\x00ression(javascript:alert(37))\">DEF\nABC<div style=\"x:exp\\x5Cression(javascript:alert(38))\">DEF\nABC<div style=\"x:\\x0Aexpression(javascript:alert(39))\">DEF\nABC<div style=\"x:\\x09expression(javascript:alert(40))\">DEF\nABC<div style=\"x:\\xE3\\x80\\x80expression(javascript:alert(41))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x84expression(javascript:alert(42))\">DEF\nABC<div style=\"x:\\xC2\\xA0expression(javascript:alert(43))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x80expression(javascript:alert(44))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x8Aexpression(javascript:alert(45))\">DEF\nABC<div style=\"x:\\x0Dexpression(javascript:alert(46))\">DEF\nABC<div style=\"x:\\x0Cexpression(javascript:alert(47))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x87expression(javascript:alert(48))\">DEF\nABC<div style=\"x:\\xEF\\xBB\\xBFexpression(javascript:alert(49))\">DEF\nABC<div style=\"x:\\x20expression(javascript:alert(50))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x88expression(javascript:alert(51))\">DEF\nABC<div style=\"x:\\x00expression(javascript:alert(52))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x8Bexpression(javascript:alert(53))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x86expression(javascript:alert(54))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x85expression(javascript:alert(55))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x82expression(javascript:alert(56))\">DEF\nABC<div style=\"x:\\x0Bexpression(javascript:alert(57))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x81expression(javascript:alert(58))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x83expression(javascript:alert(59))\">DEF\nABC<div style=\"x:\\xE2\\x80\\x89expression(javascript:alert(60))\">DEF\n<a href=\"\\x0Bjavascript:javascript:alert(61)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x0Fjavascript:javascript:alert(62)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xC2\\xA0javascript:javascript:alert(63)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x05javascript:javascript:alert(64)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE1\\xA0\\x8Ejavascript:javascript:alert(65)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x18javascript:javascript:alert(66)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x11javascript:javascript:alert(67)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x88javascript:javascript:alert(68)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x89javascript:javascript:alert(69)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x80javascript:javascript:alert(70)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x17javascript:javascript:alert(71)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x03javascript:javascript:alert(72)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x0Ejavascript:javascript:alert(73)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Ajavascript:javascript:alert(74)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x00javascript:javascript:alert(75)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x10javascript:javascript:alert(76)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x82javascript:javascript:alert(77)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x20javascript:javascript:alert(78)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x13javascript:javascript:alert(79)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x09javascript:javascript:alert(80)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x8Ajavascript:javascript:alert(81)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x14javascript:javascript:alert(82)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x19javascript:javascript:alert(83)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\xAFjavascript:javascript:alert(84)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Fjavascript:javascript:alert(85)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x81javascript:javascript:alert(86)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Djavascript:javascript:alert(87)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x87javascript:javascript:alert(88)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x07javascript:javascript:alert(89)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE1\\x9A\\x80javascript:javascript:alert(90)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x83javascript:javascript:alert(91)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x04javascript:javascript:alert(92)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x01javascript:javascript:alert(93)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x08javascript:javascript:alert(94)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x84javascript:javascript:alert(95)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x86javascript:javascript:alert(96)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE3\\x80\\x80javascript:javascript:alert(97)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x12javascript:javascript:alert(98)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x0Djavascript:javascript:alert(99)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x0Ajavascript:javascript:alert(100)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x0Cjavascript:javascript:alert(101)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x15javascript:javascript:alert(102)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\xA8javascript:javascript:alert(103)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x16javascript:javascript:alert(104)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x02javascript:javascript:alert(105)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Bjavascript:javascript:alert(106)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x06javascript:javascript:alert(107)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\xA9javascript:javascript:alert(108)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x80\\x85javascript:javascript:alert(109)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Ejavascript:javascript:alert(110)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\xE2\\x81\\x9Fjavascript:javascript:alert(111)\" id=\"fuzzelement1\">test</a>\n<a href=\"\\x1Cjavascript:javascript:alert(112)\" id=\"fuzzelement1\">test</a>\n<a href=\"javascript\\x00:javascript:alert(113)\" id=\"fuzzelement1\">test</a>\n<a href=\"javascript\\x3A:javascript:alert(114)\" id=\"fuzzelement1\">test</a>\n<a href=\"javascript\\x09:javascript:alert(115)\" id=\"fuzzelement1\">test</a>\n<a href=\"javascript\\x0D:javascript:alert(116)\" id=\"fuzzelement1\">test</a>\n<a href=\"javascript\\x0A:javascript:alert(117)\" id=\"fuzzelement1\">test</a>\n`\"'><img src=xxx:x \\x0Aonerror=javascript:alert(118)>\n`\"'><img src=xxx:x \\x22onerror=javascript:alert(119)>\n`\"'><img src=xxx:x \\x0Bonerror=javascript:alert(120)>\n`\"'><img src=xxx:x \\x0Donerror=javascript:alert(121)>\n`\"'><img src=xxx:x \\x2Fonerror=javascript:alert(122)>\n`\"'><img src=xxx:x \\x09onerror=javascript:alert(123)>\n`\"'><img src=xxx:x \\x0Conerror=javascript:alert(124)>\n`\"'><img src=xxx:x \\x00onerror=javascript:alert(125)>\n`\"'><img src=xxx:x \\x27onerror=javascript:alert(126)>\n`\"'><img src=xxx:x \\x20onerror=javascript:alert(127)>\n\"`'><script>\\x3Bjavascript:alert(128)</script>\n\"`'><script>\\x0Djavascript:alert(129)</script>\n\"`'><script>\\xEF\\xBB\\xBFjavascript:alert(130)</script>\n\"`'><script>\\xE2\\x80\\x81javascript:alert(131)</script>\n\"`'><script>\\xE2\\x80\\x84javascript:alert(132)</script>\n\"`'><script>\\xE3\\x80\\x80javascript:alert(133)</script>\n\"`'><script>\\x09javascript:alert(134)</script>\n\"`'><script>\\xE2\\x80\\x89javascript:alert(135)</script>\n\"`'><script>\\xE2\\x80\\x85javascript:alert(136)</script>\n\"`'><script>\\xE2\\x80\\x88javascript:alert(137)</script>\n\"`'><script>\\x00javascript:alert(138)</script>\n\"`'><script>\\xE2\\x80\\xA8javascript:alert(139)</script>\n\"`'><script>\\xE2\\x80\\x8Ajavascript:alert(140)</script>\n\"`'><script>\\xE1\\x9A\\x80javascript:alert(141)</script>\n\"`'><script>\\x0Cjavascript:alert(142)</script>\n\"`'><script>\\x2Bjavascript:alert(143)</script>\n\"`'><script>\\xF0\\x90\\x96\\x9Ajavascript:alert(144)</script>\n\"`'><script>-javascript:alert(145)</script>\n\"`'><script>\\x0Ajavascript:alert(146)</script>\n\"`'><script>\\xE2\\x80\\xAFjavascript:alert(147)</script>\n\"`'><script>\\x7Ejavascript:alert(148)</script>\n\"`'><script>\\xE2\\x80\\x87javascript:alert(149)</script>\n\"`'><script>\\xE2\\x81\\x9Fjavascript:alert(150)</script>\n\"`'><script>\\xE2\\x80\\xA9javascript:alert(151)</script>\n\"`'><script>\\xC2\\x85javascript:alert(152)</script>\n\"`'><script>\\xEF\\xBF\\xAEjavascript:alert(153)</script>\n\"`'><script>\\xE2\\x80\\x83javascript:alert(154)</script>\n\"`'><script>\\xE2\\x80\\x8Bjavascript:alert(155)</script>\n\"`'><script>\\xEF\\xBF\\xBEjavascript:alert(156)</script>\n\"`'><script>\\xE2\\x80\\x80javascript:alert(157)</script>\n\"`'><script>\\x21javascript:alert(158)</script>\n\"`'><script>\\xE2\\x80\\x82javascript:alert(159)</script>\n\"`'><script>\\xE2\\x80\\x86javascript:alert(160)</script>\n\"`'><script>\\xE1\\xA0\\x8Ejavascript:alert(161)</script>\n\"`'><script>\\x0Bjavascript:alert(162)</script>\n\"`'><script>\\x20javascript:alert(163)</script>\n\"`'><script>\\xC2\\xA0javascript:alert(164)</script>\n<img \\x00src=x onerror=\"alert(165)\">\n<img \\x47src=x onerror=\"javascript:alert(166)\">\n\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS SDK M2 Client in Rust\nDESCRIPTION: Example code showing how to create and initialize an AWS SDK M2 client using environment configuration. Demonstrates basic async setup with tokio runtime and error handling.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/m2/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_m2 as m2;\n\n#[::tokio::main]\nasync fn main() -> Result<(), m2::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_m2::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependencies for AWS CloudTrail SDK in Rust\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS CloudTrail SDK with Rust. Includes aws-config, aws-sdk-cloudtrail, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/cloudtrail/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-cloudtrail = \"1.70.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Installing AWS Kinesis Video Signaling SDK Dependencies\nDESCRIPTION: Cargo.toml configuration showing required dependencies for using the AWS Kinesis Video Signaling SDK with Rust. Includes aws-config, aws-sdk-kinesisvideosignaling, and tokio with full features enabled.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/kinesisvideosignaling/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\naws-config = { version = \"1.1.7\", features = [\"behavior-version-latest\"] }\naws-sdk-kinesisvideosignaling = \"1.64.0\"\ntokio = { version = \"1\", features = [\"full\"] }\n```\n\n----------------------------------------\n\nTITLE: Initializing the AWS repostspace Client in Rust\nDESCRIPTION: This code demonstrates how to create a new repostspace client instance. It loads configuration from the environment and initializes a new client with that configuration, setting up the basic structure for making API calls to the service.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/repostspace/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse aws_sdk_repostspace as repostspace;\n\n#[::tokio::main]\nasync fn main() -> Result<(), repostspace::Error> {\n    let config = aws_config::load_from_env().await;\n    let client = aws_sdk_repostspace::Client::new(&config);\n\n    // ... make some calls with the client\n\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Ruby Command Injection Tests\nDESCRIPTION: Ruby code examples that demonstrate different ways to execute system commands which could be exploited.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\neval(\"puts 'hello world'\")\nSystem(\"ls -al /\")\n`ls -al /`\nKernel.exec(\"ls -al /\")\n```\n\n----------------------------------------\n\nTITLE: XXE Injection Payload\nDESCRIPTION: XML external entity injection payload that attempts to read system files through XML parser misconfiguration.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?><!DOCTYPE foo [ <!ELEMENT foo ANY ><!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><foo>&xxe;</foo>\n```\n\n----------------------------------------\n\nTITLE: Event Handler Injection for XSS\nDESCRIPTION: Demonstrates XSS attacks using HTML event handlers like onfocus and onkeyup to execute JavaScript code.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/s3/tests/blns/blns.txt#2025-04-23_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n onfocus=JaVaSCript:alert(9) autofocus\n```\n\nLANGUAGE: HTML\nCODE:\n```\n\" onfocus=JaVaSCript:alert(10) autofocus\n```\n\nLANGUAGE: HTML\nCODE:\n```\n' onfocus=JaVaSCript:alert(11) autofocus\n```\n\n----------------------------------------\n\nTITLE: Ruby Command Injection Examples\nDESCRIPTION: Ruby code patterns that could enable command injection if inputs are not properly sanitized.\nSOURCE: https://github.com/awslabs/aws-sdk-rust/blob/main/sdk/lambda/tests/blns/blns.txt#2025-04-23_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\neval(\"puts 'hello world'\")\nSystem(\"ls -al /\")\n`ls -al /`\n```"
  }
]