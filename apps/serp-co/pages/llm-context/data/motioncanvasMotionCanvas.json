[
  {
    "owner": "motion-canvas",
    "repo": "motion-canvas",
    "content": "TITLE: Motion Canvas Project Setup Commands\nDESCRIPTION: The sequence of commands needed to properly set up a Motion Canvas project after initialization.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd [path]\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Camera Transformations in Motion Canvas\nDESCRIPTION: A complete example showing how to set up a Camera component and animate its transformations including centering on objects, rotation, and zooming.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Camera, Circle, makeScene2D, Rect} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n  const rect = createRef<Rect>();\n  const circle = createRef<Circle>();\n\n  view.add(\n    <>\n      <Camera ref={camera}>\n        <Rect\n          ref={rect}\n          fill={'lightseagreen'}\n          size={100}\n          position={[100, -50]}\n        />\n        <Circle\n          ref={circle}\n          fill={'hotpink'}\n          size={120}\n          position={[-100, 50]}\n        />\n      </Camera>\n    </>,\n  );\n\n  yield* all(\n    camera().centerOn(rect(), 3),\n    camera().rotation(180, 3),\n    camera().zoom(1.8, 3),\n  );\n  yield* camera().centerOn(circle(), 2);\n  yield* camera().reset(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Circle Animation in Motion Canvas\nDESCRIPTION: Example code for a Motion Canvas animation with a circle that moves horizontally and changes color. Demonstrates basic animation concepts like references and tweening.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Circle} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const myCircle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      ref={myCircle}\n      // try changing these properties:\n      x={-300}\n      width={140}\n      height={140}\n      fill=\"#e13238\"\n    />,\n  );\n\n  yield* all(\n    myCircle().position.x(300, 1).to(-300, 1),\n    myCircle().fill('#e6a700', 1).to('#e13238', 1),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Objects Along Spline Path in Motion Canvas TSX\nDESCRIPTION: Demonstrates how to animate an object along a spline path using getPointAtPercentage. The rectangle follows the spline's curve and rotates according to the path's tangent.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Rect} from '@motion-canvas/2d';\nimport {createRef, createSignal} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const spline = createRef<Spline>();\n  const progress = createSignal(0);\n\n  view.add(\n    <>\n      <Spline\n        ref={spline}\n        lineWidth={6}\n        stroke={'lightgray'}\n        points={[\n          [-300, 0],\n          [-150, -100],\n          [150, 100],\n          [300, 0],\n        ]}\n      />\n      <Rect\n        size={26}\n        fill={'lightseagreen'}\n        position={() => spline().getPointAtPercentage(progress()).position}\n        rotation={() =>\n          spline().getPointAtPercentage(progress()).tangent.degrees\n        }\n      />\n    </>,\n  );\n\n  yield* progress(1, 2).to(0, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing and Animating a Code Component in Motion Canvas\nDESCRIPTION: Demonstrates how to create and animate a Code component with basic code operations like replacing text, prepending, and appending code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\nimport {all, createRef, DEFAULT, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      fontFamily={'JetBrains Mono, monospace'}\n      offsetX={-1}\n      x={-400}\n      code={'const number = 7;'}\n    />,\n  );\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code.replace(code().findFirstRange('number'), 'variable', 0.6),\n    code().code.prepend(0.6)`function example() {\\n  `,\n    code().code.append(0.6)`\\n}`,\n  );\n\n  yield* waitFor(0.6);\n  yield* code().selection(code().findFirstRange('variable'), 0.6);\n\n  yield* waitFor(0.6);\n  yield* all(\n    code().code('const number = 7;', 0.6),\n    code().selection(DEFAULT, 0.6),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Motion Canvas Scene\nDESCRIPTION: Minimal code template showing the fundamental structure of a Motion Canvas 2D scene using a generator function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  // animation\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Animating Cubic Bézier Curves in Motion Canvas\nDESCRIPTION: This code demonstrates how to create and animate a cubic Bézier curve with four control points. It creates the curve with initial animation properties and animates drawing the curve from start to end, then animates it in reverse.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple Scene Hierarchy with JSX in Motion Canvas\nDESCRIPTION: Example of creating a scene hierarchy with Circle, Layout, Rect, and Txt nodes using JSX syntax in Motion Canvas.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/hierarchy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Animated Scene Example with Hierarchy Querying in Motion Canvas\nDESCRIPTION: Interactive example showing how to create a scene hierarchy and query specific nodes (Text nodes) to animate their properties.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/hierarchy.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Txt, Circle, Rect, is} from '@motion-canvas/2d';\nimport {all} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Layout layout gap={20} alignItems={'center'}>\n      <Txt fill={'white'}>Example</Txt>\n      <Rect fill={'#f3303f'} padding={20} gap={20}>\n        <Txt fill={'white'}>42</Txt>\n        <Circle size={60} fill={'#FFC66D'} />\n        <Txt fill={'white'}>!!!</Txt>\n      </Rect>\n    </Layout>,\n  );\n\n  const texts = view.findAll(is(Txt));\n\n  yield* all(...texts.map(text => text.fill('#FFC66D', 1).back(1)));\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a New Motion Canvas Project\nDESCRIPTION: Command to scaffold a new Motion Canvas project using npm init. This will prompt you to name your project and select TypeScript or JavaScript.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm init @motion-canvas@latest\n```\n\n----------------------------------------\n\nTITLE: Moving Objects Along a Bézier Curve Path in Motion Canvas\nDESCRIPTION: This example demonstrates how to move an object along a Bézier curve path. It creates a rectangle that follows the curve using the getPointAtPercentage method, which provides both position and tangent information, allowing the rectangle to rotate to follow the curve direction.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, CubicBezier, Rect} from '@motion-canvas/2d';\nimport {\n  createRef,\n  waitFor,\n  createSignal,\n  createComputed,\n} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  const progress = createSignal(0);\n  const curvePoint = createComputed(() =>\n    bezier().getPointAtPercentage(progress()),\n  );\n\n  view.add(\n    <>\n      <CubicBezier\n        ref={bezier}\n        lineWidth={6}\n        stroke={'lightgray'}\n        p0={[-300, -70]}\n        p1={[120, -120]}\n        p2={[-120, 120]}\n        p3={[300, 70]}\n      />\n      <Rect\n        size={25}\n        fill={'lightseagreen'}\n        position={() => curvePoint().position}\n        rotation={() => curvePoint().tangent.degrees}\n      />\n    </>,\n  );\n\n  yield* progress(1, 2);\n  yield* waitFor(0.5);\n  yield* progress(0, 2);\n  yield* waitFor(0.5);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Slide Transition in Motion Canvas\nDESCRIPTION: Demonstrates how to implement a basic slide transition between scenes using the slideTransition generator.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/transitions.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  // set up the scene:\n  view.add(/* your nodes here */);\n\n  // perform a slide transition to the left:\n  yield* slideTransition(Direction.Left);\n\n  // proceed with the animation\n  yield* waitFor(3);\n});\n```\n\n----------------------------------------\n\nTITLE: Save and Restore with Multiple States\nDESCRIPTION: A complete example showing how to save and restore multiple node states throughout an animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@motion-canvas/2d';\nimport {Circle} from '@motion-canvas/2d/lib/components';\nimport {createRef} from '@motion-canvas/core/lib/utils';\nimport {Vector2} from '@motion-canvas/core/lib/types';\nimport {waitFor} from '@motion-canvas/core/lib/flow';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      ref={circle}\n      position={new Vector2(-300, 0)}\n      width={120}\n      height={120}\n      fill=\"#e6a700\"\n    />,\n  );\n\n  // Save the first state\n  circle().save();\n\n  // Move to the right\n  yield * circle().position(new Vector2(300, 0), 1);\n  yield * waitFor(0.5);\n\n  // Change the color and save again\n  yield * circle().fill('#e13238', 0.3);\n  circle().save();\n\n  // Move to the bottom right\n  yield * circle().position(new Vector2(300, 300), 1);\n  yield * waitFor(0.5);\n\n  // Restore to the red circle in the center right\n  yield * circle().restore(1);\n  yield * waitFor(0.5);\n\n  // Restore to the initial yellow circle on the left\n  yield * circle().restore(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Signals to Update Dependent Values in Motion Canvas\nDESCRIPTION: Shows how to animate a signal (radius) which will automatically update all dependent parts of the scene. This creates a continuous animation from one value to another over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nyield * radius(4, 2).to(3, 2);\n```\n\n----------------------------------------\n\nTITLE: Creating a Linear Tween Animation in Motion Canvas\nDESCRIPTION: Shows how to use the tween function to animate a circle's x-coordinate from -300 to 300 over 2 seconds with linear movement.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@motion-canvas/2d';\nimport {Circle} from '@motion-canvas/2d/lib/components';\nimport {createRef} from '@motion-canvas/core/lib/utils';\nimport {Vector2} from '@motion-canvas/core/lib/types';\nimport {tween, map} from '@motion-canvas/core/lib/tweening';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      ref={circle}\n      x={-300}\n      width={120}\n      height={120}\n      fill=\"#e6a700\"\n    />,\n  );\n\n  yield * tween(2, value => {\n    circle().position.x(map(-300, 300, value));\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Vector Path Animation with Arc Interpolation\nDESCRIPTION: Shows how to create curved path animations using Vector2.arcLerp for position tweening.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nyield * tween(2, value => {\n  circle().position(\n    Vector2.arcLerp(\n      new Vector2(-300, 200),\n      new Vector2(300, -200),\n      easeInOutCubic(value),\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Animating LaTeX Formulas in Motion Canvas\nDESCRIPTION: Demonstrates basic LaTeX component usage with animation sequences. Shows how to create and animate mathematical formulas using the Latex component with transitions and waiting periods.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/latex.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Latex, makeScene2D} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const tex = createRef<Latex>();\n  view.add(<Latex ref={tex} tex=\"{{y=}}{{a}}{{x^2}}\" fill=\"white\" />);\n\n  yield* waitFor(0.2);\n  yield* tex().tex('{{y=}}{{a}}{{x^2}} + {{bx}}', 1);\n  yield* waitFor(0.2);\n  yield* tex().tex(\n    '{{y=}}{{\\\\left(}}{{a}}{{x^2}} + {{bx}}{{\\\\over 1}}{{\\\\right)}}',\n    1,\n  );\n  yield* waitFor(0.2);\n  yield* tex().tex('{{y=}}{{a}}{{x^2}}', 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Motion Canvas Packages via NPM\nDESCRIPTION: This command updates all @motion-canvas packages to their latest versions. It includes the 2D, core, UI, and Vite plugin packages.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/migration/updating.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm update --save @motion-canvas/2d @motion-canvas/core @motion-canvas/ui @motion-canvas/vite-plugin\n```\n\n----------------------------------------\n\nTITLE: Initializing Motion Canvas Vite Plugin Configuration\nDESCRIPTION: Basic setup of Motion Canvas Vite plugin in the configuration file. Shows how to import and configure the plugin with custom options.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/configuration.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      // custom options\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic Circle Animation with Effects in Motion Canvas\nDESCRIPTION: Complex example showing how to use effects to automatically update a node hierarchy by adding or removing circles based on a count signal.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/effects.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Circle, Layout, makeScene2D} from '@motion-canvas/2d';\nimport {\n  createEffect,\n  createRef,\n  createSignal,\n  spawn,\n  waitFor,\n} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const count = createSignal(0);\n  const container = createRef<Layout>();\n\n  view.add(<Layout alignItems={'center'} ref={container} layout />);\n\n  const circles: Circle[] = [];\n  createEffect(() => {\n    const targetCount = Math.round(count());\n    let i = circles.length;\n    // add any missing circles\n    for (; i < targetCount; i++) {\n      const circle = (<Circle fill={'white'} />) as Circle;\n      circles.push(circle);\n      container().add(circle);\n      spawn(circle.size(80, 0.3));\n    }\n    // remove any extra circles\n    for (; i > targetCount; i--) {\n      const circle = circles.pop()!;\n      spawn(circle.size(0, 0.3).do(() => circle.remove()));\n    }\n  });\n\n  count(1);\n  yield* waitFor(1);\n  count(6);\n  yield* waitFor(1);\n  count(4);\n  yield* count(0, 2);\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Property Tweens\nDESCRIPTION: Shows how to chain multiple property tweens using the to() method for sequential animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().color('#e13238', 2).to('#e6a700', 2);\n```\n\n----------------------------------------\n\nTITLE: Drawing Animation for Bézier Curves in Motion Canvas\nDESCRIPTION: This example shows how to create a drawing animation effect with a cubic Bézier curve. The curve starts with an end value of 0 (not visible) and is gradually drawn by animating the end property to 1, then reversed by animating it back to 0.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 2).to(0, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Circle Animation Example - TSX\nDESCRIPTION: Shows how to create a simple circle animation using Motion Canvas with color changes between frames.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/flow.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  circle().fill('red');\n  yield;\n  circle().fill('blue');\n  yield;\n  circle().fill('red');\n  yield;\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Knot Positions in Motion Canvas TSX\nDESCRIPTION: Demonstrates how to animate multiple knot positions in a spline using Motion Canvas. Creates a wave-like animation by moving knots up and down synchronously.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\nimport {all, makeRef, PossibleVector2} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const knotPositions: PossibleVector2[] = [\n    [-200, 0],\n    [-100, -80],\n    [0, 80],\n    [100, -80],\n    [200, 0],\n  ];\n  const knots: Knot[] = [];\n\n  view.add(\n    <Spline lineWidth={6} stroke={'lightseagreen'}>\n      {knotPositions.map((pos, i) => (\n        <Knot ref={makeRef(knots, i)} position={pos} />\n      ))}\n    </Spline>,\n  );\n\n  yield* all(\n    knots[1].position.y(80, 1).to(-80, 1),\n    knots[2].position.y(-80, 1).to(80, 1),\n    knots[3].position.y(80, 1).to(-80, 1),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters Property in Motion Canvas\nDESCRIPTION: Demonstrates how to apply filters to nodes using the filters property method. Shows blur effect implementation with automatic filter creation and modification.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/filters-and-effects.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Img, makeScene2D} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  view.fill('#141414');\n\n  const iconRef = createRef<Img>();\n  yield view.add(<Img src={'/img/logo_dark.svg'} size={200} ref={iconRef} />);\n  // Modification happens by accessing the `filters` property.\n  // Individual filters don't need to be initialized. If a filter you set doesn't\n  // exists, it will be automatically created and added to the list of filters.\n  // If you have multiple filters of the same type, this will only\n  // modify the first instance (you can use the array method for more control).\n  yield* iconRef().filters.blur(10, 1);\n  yield* iconRef().filters.blur(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Signals with createSignal in TypeScript\nDESCRIPTION: Demonstrates how to create a basic signal for primitive types using the createSignal function. The signal is initialized with a value of 0.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createSignal} from '@motion-canvas/core';\n\nconst signal = createSignal(0);\n```\n\n----------------------------------------\n\nTITLE: Basic Generator Function Example - TypeScript\nDESCRIPTION: Demonstrates the basic concept of generator functions using a simple numeric example showing how yield controls execution flow.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/flow.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction* example() {\n  yield 1;\n  yield 2;\n  yield 3;\n}\n\nconst generator = example();\n\nconsole.log(generator.next().value); // 1;\nconsole.log(generator.next().value); // 2;\nconsole.log(generator.next().value); // 3;\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Component in Motion Canvas\nDESCRIPTION: Demonstrates how to use a custom Switch component in a Motion Canvas scene, providing an initial state as a prop.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Switch initialState={false} />\n```\n\n----------------------------------------\n\nTITLE: Accessing References from a createRefMap() (TSX)\nDESCRIPTION: Examples of how to access and animate references stored in a createRefMap() object, including checking if a reference exists and mapping over all references.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nyield * labels.a().text('A changes', 0.3);\nyield * labels.b().text('B changes', 0.3);\nyield * labels.c().text('C changes', 0.3);\n```\n\n----------------------------------------\n\nTITLE: Custom Slide Transition Implementation\nDESCRIPTION: Detailed implementation of a custom slide transition showing how to manipulate scene contexts and animate positions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/transitions.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nexport function* slideTransition(\n  direction: Direction = Direction.Top,\n  duration = 0.6,\n): ThreadGenerator {\n  const size = useScene().getRealSize();\n  const position = size.getOriginOffset(direction).scale(2);\n  const previousPosition = Vector2.createSignal();\n  const currentPosition = Vector2.createSignal(position);\n\n  // set up the transition\n  const endTransition = useTransition(\n    // modify the context of the current scene\n    ctx => ctx.translate(currentPosition.x(), currentPosition.y()),\n    // modify the context of the previous scene\n    ctx => ctx.translate(previousPosition.x(), previousPosition.y()),\n  );\n\n  // perform animations\n  yield* all(\n    previousPosition(position.scale(-1), duration),\n    currentPosition(Vector2.zero, duration),\n  );\n\n  // finish the transition\n  endTransition();\n}\n```\n\n----------------------------------------\n\nTITLE: Animated LaTeX Formula Transitions\nDESCRIPTION: Demonstrates how to create animated transitions between different LaTeX formulas using reference handling and timing controls.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/latex.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Latex, makeScene2D} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const tex = createRef<Latex>();\n  view.add(<Latex ref={tex} tex=\"{{1}} + {{2}}\" fill=\"white\" />);\n\n  yield* waitFor(0.5);\n  yield* tex().tex(['2', '+', '3', '+', '4'], 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Centering Camera on Specific Positions\nDESCRIPTION: Shows how to center the camera on world space coordinates rather than objects. Demonstrates moving the camera to multiple positions sequentially.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect size={100} fill={'lightseagreen'} position={[-100, -30]} />\n      <Circle size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n\n  yield* camera().centerOn([-200, 50], 1);\n  yield* camera().centerOn([150, -30], 1.5);\n  yield* camera().centerOn(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Multi-Camera Scene Setup\nDESCRIPTION: Full example showing scene setup with multiple cameras and animations using refs and camera controls.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Node, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera1 = createRef<Camera>();\n  const camera2 = createRef<Camera>();\n  const rect = createRef<Rect>();\n  const circle = createRef<Circle>();\n\n  const scene = (\n    <Node>\n      <Rect\n        ref={rect}\n        size={70}\n        fill={'lightseagreen'}\n        position={[-100, -30]}\n      />\n      <Circle ref={circle} size={50} fill={'hotpink'} position={[100, 30]} />\n    </Node>\n  );\n\n  view.add(\n    <>\n      <Camera.Stage\n        cameraRef={camera1}\n        scene={scene}\n        size={[300, 200]}\n        position={[-180, 0]}\n        fill={'#ccc'}\n        radius={10}\n        smoothCorners\n      />\n      <Camera.Stage\n        cameraRef={camera2}\n        scene={scene}\n        size={[300, 200]}\n        position={[180, 0]}\n        fill={'#ccc'}\n        radius={10}\n        smoothCorners\n      />\n    </>,\n  );\n\n  yield* all(camera1().centerOn(rect(), 1), camera2().centerOn(circle(), 1));\n  yield* all(camera1().centerOn(circle(), 1), camera2().centerOn(rect(), 1));\n  yield* all(camera1().zoom(1.5, 1), camera2().zoom(0.5, 1));\n  yield* all(camera1().reset(1), camera2().reset(1));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Variables using makeProject() in TypeScript\nDESCRIPTION: This code shows how to add project variables using the makeProject() function in TypeScript. Variables are defined as an object within the function call.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/project-variables.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  scenes: [example],\n  variables: {circleFill: 'red'},\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Node Reference Usage in Motion Canvas (TSX)\nDESCRIPTION: The basic approach of storing a reference to a node by assigning it to a variable before adding it to the scene. This allows animating the node later in the code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\nview.add(circle);\n\n// we can now animate our circle:\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Creating Derived Signals with Dependencies in Motion Canvas\nDESCRIPTION: Demonstrates how to create a signal that computes its value dynamically based on other signals. In this example, the area signal depends on the radius signal.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => Math.PI * radius() * radius());\n\nconsole.log(area()); // 3.141592653589793\nradius(2);\nconsole.log(area()); // 12.566370614359172\n```\n\n----------------------------------------\n\nTITLE: Animating SVG Path Drawing and Filling in Motion Canvas\nDESCRIPTION: Example showing how to create a Path node and animate both the drawing and filling of a complex SVG path. The animation first traces the path outline and then fills it with color.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/path.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Path} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const path = createRef<Path>();\n\n  view.add(\n    <Path\n      ref={path}\n      lineWidth={4}\n      stroke={'#e13238'}\n      data=\"M 151.34904,307.20455 L 264.34904,307.20455 C 264.34904,291.14096 263.2021,287.95455 236.59904,287.95455 C 240.84904,275.20455 258.12424,244.35808 267.72404,244.35808 C 276.21707,244.35808 286.34904,244.82592 286.34904,264.20455 C 286.34904,286.20455 323.37171,321.67547 332.34904,307.20455 C 345.72769,285.63897 309.34904,292.21514 309.34904,240.20455 C 309.34904,169.05135 350.87417,179.18071 350.87417,139.20455 C 350.87417,119.20455 345.34904,116.50374 345.34904,102.20455 C 345.34904,83.30695 361.99717,84.403577 358.75805,68.734879 C 356.52061,57.911656 354.76962,49.23199 353.46516,36.143889 C 352.53959,26.857305 352.24452,16.959398 342.59855,17.357382 C 331.26505,17.824992 326.96549,37.77419 309.34904,39.204549 C 291.76851,40.631991 276.77834,24.238028 269.97404,26.579549 C 263.22709,28.901334 265.34904,47.204549 269.34904,60.204549 C 275.63588,80.636771 289.34904,107.20455 264.34904,111.20455 C 239.34904,115.20455 196.34904,119.20455 165.34904,160.20455 C 134.34904,201.20455 135.49342,249.3212 123.34904,264.20455 C 82.590696,314.15529 40.823919,293.64625 40.823919,335.20455 C 40.823919,353.81019 72.349045,367.20455 77.349045,361.20455 C 82.349045,355.20455 34.863764,337.32587 87.995492,316.20455 C 133.38711,298.16014 137.43914,294.47663 151.34904,307.20455 z\"\n      position={[-100, -100]}\n      scale={0.5}\n      start={0}\n      end={0}\n    ></Path>,\n  );\n\n  yield* path().end(1, 1);\n  yield* path().fill('#e13238', 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing Code with the Edit Method\nDESCRIPTION: Example showing how to animate replacing code in a CodeBlock using the edit method and edit helper function, which combines removal and insertion.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool = true;`} />);\n\nyield * codeRef().edit(1.2)`var myBool = ${edit('true', 'false')};`;\n```\n\n----------------------------------------\n\nTITLE: Animating Spline Drawing in Motion Canvas\nDESCRIPTION: Shows how to animate drawing a spline by manipulating the start and end properties. These properties control which portion of the spline is visible, allowing for drawing effects.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const spline = createRef<Spline>();\n\n  view.add(\n    <Spline\n      ref={spline}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      points={[\n        [-300, 0],\n        [-150, -100],\n        [150, 100],\n        [300, 0],\n      ]}\n      end={0}\n    />,\n  );\n\n  yield* spline().end(1, 1.5);\n  yield* spline().start(1, 1.5).to(0.5, 1);\n  yield* spline().end(0.5, 1);\n  yield* all(spline().start(0, 1.5), spline().end(1, 1.5));\n});\n```\n\n----------------------------------------\n\nTITLE: Absolute Position Transform Example in Motion Canvas\nDESCRIPTION: Demonstrates how to match transforms of two nodes located within different parents using absolute positioning. The example creates two circles and positions one exactly over the other using absolute coordinates.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/positioning.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst circleA = createRef<Node>();\nconst circleB = createRef<Node>();\n\nview.add(\n  <>\n    <Node position={[200, 100]}>\n      <Circle\n        position={[0, 100]}\n        ref={circleA}\n        width={20}\n        height={20}\n        fill={'white'}\n      />\n    </Node>\n    <Circle ref={circleB} width={10} height={10} fill={'red'} />\n  </>,\n);\n\ncircleB().absolutePosition(circleA().absolutePosition());\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Tween Interpolation Functions\nDESCRIPTION: Shows how to provide a custom interpolation function for property tweens to create advanced animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().position(\n  new Vector2(300, -200),\n  2,\n  easeInOutCubic,\n  Vector2.arcLerp,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Basic Camera Component\nDESCRIPTION: Shows how to initialize a Camera component and wrap scene elements within it. Creates necessary imports and references for camera manipulation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect size={100} fill={'lightseagreen'} position={[-100, -30]} />\n      <Circle size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Layout Root in Motion Canvas\nDESCRIPTION: Example showing how to create a layout root by setting the layout property on a Rect component, which then controls the position and size of its child Circle component using Flexbox.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/layouts.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child */}\n  <Circle width={320} height={320} />\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Using createRef() with Complex Scene Structure (TSX)\nDESCRIPTION: An example of using createRef() to manage references in a more complex scene with multiple nested nodes, maintaining both readability and reference access.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = createRef<Rect>();\nconst rectB = createRef<Rect>();\nconst circle = createRef<Circle>();\nview.add(\n  <Layout>\n    <Circle ref={circle}>\n      <Rect ref={rectA} />\n    </Circle>\n    <Rect ref={rectB} />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Controlling Video Playback and Animation\nDESCRIPTION: Shows how to play videos and animate their properties in Motion Canvas using references.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  // ...\n\n  videoRef().play();\n  yield* videoRef().scale(1.25, 1.5).to(1, 1.5);\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Filters Array in Motion Canvas\nDESCRIPTION: Shows how to apply filters using the array method with signal-based animation. Demonstrates blur effect implementation using filter arrays.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/filters-and-effects.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Img, blur} from '@motion-canvas/2d';\nimport {createSignal} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  view.fill('#141414');\n\n  const blurSignal = createSignal(0);\n  yield view.add(\n    <Img\n      src={'/img/logo_dark.svg'}\n      size={200}\n      /* Modification happens by changing the Filters inside the 'filters' array */\n      filters={[blur(blurSignal)]}\n    />,\n  );\n  yield* blurSignal(10, 1);\n  yield* blurSignal(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Code Manipulation with Motion Canvas\nDESCRIPTION: Demonstrates basic code manipulation methods including insert, replace, and remove operations with animation timing.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, word, lines} from '@motion-canvas/2d';\nimport {all, createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  console.log('Hello!');\n}`}\n    />,\n  );\n\n  // insert code at line 2, column 0\n  yield* code().code.insert([2, 0], '  return 7;\\n', 0.6);\n\n  // replace the word \"Hello!\" with \"Goodbye!\"\n  yield* code().code.replace(word(1, 15, 6), 'Goodbye!', 0.6);\n\n  // remove line 2\n  yield* code().code.remove(lines(2), 0.6);\n\n  // animate multiple changes at the same time\n  yield* all(\n    code().code.replace(word(0, 9, 7), 'greet', 0.6),\n    code().code.replace(word(1, 15, 8), 'Hello!', 0.6),\n  );\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline Using the points Property in Motion Canvas\nDESCRIPTION: Shows how to create a simple spline by defining an array of points. This approach automatically calculates handles to create a smooth curve through the specified points.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Spline\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      points={[\n        [-300, 0],\n        [-150, -100],\n        [150, 100],\n        [300, 0],\n      ]}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Variables in a Scene using useScene() in TypeScript\nDESCRIPTION: This snippet illustrates how to access project variables within a scene using the useScene() function. It retrieves the 'circleFill' variable with a default value of 'blue'.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/project-variables.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst circleFill = useScene().variables.get('circleFill', 'blue');\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Animation Method in Motion Canvas Component\nDESCRIPTION: Demonstrates how to implement a custom animation method (toggle) in a Motion Canvas component using generator functions and tweens.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  // ...\n  public *toggle(duration: number) {\n    yield* all(\n      tween(duration, value => {\n        // ...\n      }),\n      tween(duration, value => {\n        // ...\n      }),\n    );\n    this.isOn = !this.isOn;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Animated Multi-Camera Scene with Color Changes\nDESCRIPTION: Extended example showing how changes to the scene are reflected across multiple camera views with color animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Node, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera1 = createRef<Camera>();\n  const camera2 = createRef<Camera>();\n  const rect = createRef<Rect>();\n  const circle = createRef<Circle>();\n\n  const scene = (\n    <Node>\n      <Rect\n        ref={rect}\n        size={70}\n        fill={'lightseagreen'}\n        position={[-100, -30]}\n      />\n      <Circle ref={circle} size={50} fill={'hotpink'} position={[100, 30]} />\n    </Node>\n  );\n\n  view.add(\n    <>\n      <Camera.Stage\n        cameraRef={camera1}\n        scene={scene}\n        size={[300, 200]}\n        position={[-180, 0]}\n        fill={'#ccc'}\n        radius={10}\n        smoothCorners\n      />\n      <Camera.Stage\n        cameraRef={camera2}\n        scene={scene}\n        size={[300, 200]}\n        position={[180, 0]}\n        fill={'#ccc'}\n        radius={10}\n        smoothCorners\n      />\n    </>,\n  );\n\n  yield* all(\n    camera1().centerOn(rect(), 1),\n    camera2().centerOn(circle(), 1),\n    rect().fill('lightcoral', 1),\n    circle().fill('steelblue', 1),\n  );\n  yield* all(camera1().reset(1), camera2().reset(1));\n  yield* all(rect().fill('lightseagreen', 1), circle().fill('hotpink', 1));\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Spline with Knot Nodes in Motion Canvas\nDESCRIPTION: Demonstrates creating a spline with customized knots that have specific handle positions. The example creates a heart-like shape with four knots, each with modified handles to control the curve's shape.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const spline = createRef<Spline>();\n\n  view.add(\n    <Spline ref={spline} lineWidth={4} fill={'#e13238'} closed>\n      <Knot position={[-120, -30]} startHandle={[0, 70]} />\n      <Knot\n        position={[0, -50]}\n        startHandle={[-40, -60]}\n        endHandle={[40, -60]}\n      />\n      <Knot position={[120, -30]} startHandle={[0, -70]} />\n      <Knot position={[0, 100]} startHandle={[5, 0]} />\n    </Spline>,\n  );\n\n  yield* spline().scale(0.9, 0.6).to(1, 0.4);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Simultaneous Code Edits\nDESCRIPTION: Example showing how to apply multiple changes to a CodeBlock in a single edit operation, causing all changes to animate simultaneously.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\nyield *\n  codeRef().edit(1.2)`${edit('var', 'const')} myBool${insert(' = true')};`;\n```\n\n----------------------------------------\n\nTITLE: Matrix Transform Operations in Motion Canvas\nDESCRIPTION: Shows how to use matrix transformations to manipulate node positions. Demonstrates equivalent operations using matrices compared to helper properties for getting and setting absolute positions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/positioning.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// getting the absolute position:\nnode.absolutePosition();\n// same as:\nVector2.zero.transformAsPoint(node.localToWorld());\n\n// setting the absolute position:\nnode.absolutePosition(vector);\n// same as:\nnode.position(vector.transformAsPoint(node.worldToParent()));\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline with Custom Handles in Motion Canvas\nDESCRIPTION: Demonstrates using Knot nodes with custom handle positions to precisely control the curvature. The startHandle and endHandle properties allow fine-tuning of the curve shape.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Spline lineWidth={6} stroke={'lightseagreen'}>\n      <Knot position={[-300, 0]} />\n      <Knot position={[-150, -100]} endHandle={[-100, 0]} />\n      <Knot position={[150, 100]} startHandle={[100, 0]} />\n      <Knot position={[300, 0]} />\n    </Spline>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Images in Motion Canvas\nDESCRIPTION: Demonstrates how to create references to images and animate their properties over time in Motion Canvas.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport {all, createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const imageRef = createRef<Img>();\n\n  view.add(<Img ref={imageRef} src={examplePng} scale={2} />);\n\n  yield* all(\n    imageRef().scale(2.5, 1.5).to(2, 1.5),\n    imageRef().absoluteRotation(90, 1.5).to(0, 1.5),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Tween Animation Example - TypeScript\nDESCRIPTION: Shows how to use tweening to animate a circle's fill color over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/flow.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nyield * myCircle().fill('#e6a700', 1);\n```\n\n----------------------------------------\n\nTITLE: Spring Animation in Motion Canvas\nDESCRIPTION: Demonstrates how to create physics-based spring animations using the spring function with different spring presets.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@motion-canvas/2d';\nimport {Circle} from '@motion-canvas/2d/lib/components';\nimport {createRef} from '@motion-canvas/core/lib/utils';\nimport {PlopSpring, SmoothSpring, spring} from '@motion-canvas/core/lib/tweening';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n\n  view.add(\n    <Circle\n      ref={circle}\n      x={-400}\n      width={120}\n      height={120}\n      fill=\"#e6a700\"\n    />,\n  );\n\n  // plop spring\n  yield * spring(PlopSpring, -400, 400, 1, value => {\n    circle().position.x(value);\n  });\n\n  // smooth spring\n  yield * spring(SmoothSpring, 400, -400, 1, value => {\n    circle().position.x(value);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Code with the Edit Method\nDESCRIPTION: Example showing how to animate removing code from a CodeBlock using the edit method and remove helper function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock, remove} from '@motion-canvas/2d/lib/components/CodeBlock';\n\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool = true;`} />);\n\nyield * codeRef().edit(1.2)`var myBool${remove(' = true')};`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Effects with Signal Change Reactions in Motion Canvas\nDESCRIPTION: Demonstrates how to use the new effects feature in Motion Canvas to react to changes in signals. The example shows creating fade, scale, and fade-scale effects that respond to signal changes with customizable parameters.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-05-16-version-3.16.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeScene2D, Rect, createRef, fadeTransition, fadeEffect, scaleEffect, fadeScaleEffect} from '@motion-canvas/2d';\nimport {waitFor, createSignal} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  // Create a single red rectangle\n  const rectangle = createRef<Rect>();\n  view.add(\n    <Rect\n      ref={rectangle}\n      width={200}\n      height={200}\n      fill=\"red\"\n      effects={[\n        // Add a fade effect which will automatically animate opacity changes\n        fadeEffect({duration: 0.6}),\n        // Add a scale effect which will automatically animate scale changes\n        scaleEffect({duration: 0.3}),\n      ]}\n    />,\n  );\n\n  yield* waitFor(1);\n\n  // Change opacity to 0, which will trigger the fade effect\n  rectangle().opacity(0);\n  yield* waitFor(1);\n\n  // Change opacity to 1, which will trigger the fade effect\n  rectangle().opacity(1);\n  yield* waitFor(1);\n\n  // Create a new rectangle with a fade-scale effect\n  const rectangle2 = createRef<Rect>();\n  view.add(\n    <Rect\n      ref={rectangle2}\n      width={200}\n      height={200}\n      y={300}\n      fill=\"green\"\n      opacity={0}\n      scale={0}\n      effects={[\n        // Combines fade and scale into a single effect\n        fadeScaleEffect({\n          duration: 0.6,\n          // You can also pass custom parameters for individual effects\n          // scaleDuration: 0.3,\n          // fadeEase: easeInOutCubic,\n        }),\n      ]}\n    />,\n  );\n\n  yield* waitFor(1);\n\n  // This will trigger the fade-scale effect (opacity to 1, scale to 1)\n  rectangle2().opacity(1);\n  rectangle2().scale(1);\n  yield* waitFor(1);\n\n  rectangle2().opacity(0);\n  rectangle2().scale(0);\n});\n```\n\n----------------------------------------\n\nTITLE: Signal Operations: Creating Tweens in Motion Canvas\nDESCRIPTION: Shows how to create a tween for a signal by invoking it with two arguments: the target value and the duration. This creates an animation from the current value to the target value.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nyield * signal(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Implementing Sound-Wave Effect with Random Values in TSX\nDESCRIPTION: Complete example showing how random number generation is used to create a sound-wave effect by varying rectangle heights in a Motion Canvas animation. This snippet demonstrates practical application of the useRandom function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/random.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect, useRandom} from '@motion-canvas/2d';\nimport {createRef, createSignal, range, useLogger} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const logger = useLogger();\n  const random = useRandom();\n\n  logger.log('useRandom seed', random.seed);\n\n  const frequency = 1 / 16;\n  const height = createSignal(0);\n\n  view.add(\n    range(100).map(i => {\n      const min = random.nextInt(3, 8);\n      return (\n        <Rect\n          fill={'#8866ff'}\n          width={4}\n          height={() => Math.abs(Math.sin(i * frequency)) * height() * min}\n          radius={2}\n          x={i * 8 - 800 / 2 + 4}\n          bottom={0}\n        />\n      );\n    }),\n  );\n\n  yield* height(100, 0);\n  yield* height(100, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Moving Camera with Position Signal\nDESCRIPTION: Demonstrates how to animate the camera position directly using the position signal. Shows movement between multiple positions over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect size={100} fill={'lightseagreen'} position={[-100, -30]} />\n      <Circle size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n\n  yield* camera().position([-100, -30], 1);\n  yield* camera().position([100, -30], 1);\n  yield* camera().position(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Tweening to Default Values in Motion Canvas\nDESCRIPTION: Demonstrates how to create a tween animation that transitions a signal back to its default value using the DEFAULT symbol.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nyield * signal(DEFAULT, 2);\n```\n\n----------------------------------------\n\nTITLE: Simplified Property Tweening\nDESCRIPTION: Demonstrates the simplified property tweening syntax that Motion Canvas provides as an alternative to the tween function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().color('#e13238', 2);\n```\n\n----------------------------------------\n\nTITLE: Animating Objects Along a Path in Motion Canvas\nDESCRIPTION: Example demonstrating how to animate a rectangle along a path using the getPointAtPercentage method. The rectangle follows the path and rotates to match the path's tangent at each point.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/path.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Path, Rect} from '@motion-canvas/2d';\nimport {createRef, createSignal} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const path = createRef<Path>();\n  const progress = createSignal(0);\n\n  view.add(\n    <>\n      <Path\n        ref={path}\n        lineWidth={6}\n        stroke={'lightgray'}\n        data={\n          'M -180 -21 C -180 -54.1371 -153.1371 -81 -120 -81 C -86.8629 -81 -60 -54.1371 -60 -21 C -60 12.1371 -33.1371 33 0 33 C 33.1371 33 48 3 48 -21 C 48 -45 30 -69 0 -69 C -30 -69 -48 -45 -48 -21 C -48 3 -33.1371 33 0 33 C 39 34.5 60 12 60 -21 C 60 -54.1371 86.8629 -81 120 -81 C 153.1371 -81 180 -54.1371 180 -21 C 180 12.1371 153.1371 39 120 39 L -120 39 C -153.1371 39 -180 12.1371 -180 -21 Z'\n        }\n      />\n      <Rect\n        size={26}\n        fill={'lightseagreen'}\n        position={() => path().getPointAtPercentage(progress()).position}\n        rotation={() => path().getPointAtPercentage(progress()).tangent.degrees}\n      />\n    </>,\n  );\n\n  yield* progress(1, 2).to(0, 2);\n});\n```\n\n----------------------------------------\n\nTITLE: Combining Selection Helpers with Spread Operator\nDESCRIPTION: Advanced example showing how to combine different selection helpers using the spread operator to create complex selections across multiple lines and sections.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nyield * codeRef().selection([...lines(2), ...word(4, 5, 10)], 1);\n```\n\n----------------------------------------\n\nTITLE: Adding and Animating Arrows on Quadratic Bézier Curves\nDESCRIPTION: This code demonstrates how to add arrowheads to both ends of a quadratic Bézier curve and animate their size. The startArrow and endArrow properties enable arrowheads, while arrowSize controls their dimensions, which is animated to change over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Inserting Code with the Edit Method\nDESCRIPTION: Example showing how to animate inserting new code into a CodeBlock using the edit method and insert helper function, with a specified animation duration.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock, insert} from '@motion-canvas/2d/lib/components/CodeBlock';\nimport {createRef} from '@motion-canvas/core';\n\nconst codeRef = createRef<CodeBlock>();\n\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\n// duration of 1.2 seconds\nyield * codeRef().edit(1.2)`var myBool${insert(' = true')};`;\n```\n\n----------------------------------------\n\nTITLE: Using CODE Tag Function with Signals in Motion Canvas\nDESCRIPTION: Shows the correct way to use signals within code templates using the CODE tag function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, CODE} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    <Code\n      fontSize={28}\n      // Note the CODE tag function here:\n      code={CODE`const ${nameSignal} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // Now the code snippet is updated accordingly.\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Videos with Video Component\nDESCRIPTION: Shows how to use the Video component to display an imported video in a Motion Canvas scene.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Video} from '@motion-canvas/2d';\n\nimport exampleMp4 from '../../videos/example.mp4';\n\nexport default makeScene2D(function* (view) {\n  view.add(<Video src={exampleMp4} />);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Logging Operations in Motion Canvas\nDESCRIPTION: Demonstrates the basic logging functions available in Motion Canvas including debug, info, warn, and error levels.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/logging.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nlogger.debug('Just here to debug some code.');\nlogger.info('All fine just a little info.');\nlogger.warn('Be careful something has gone wrong.');\nlogger.error('Ups. An error occured.');\n```\n\n----------------------------------------\n\nTITLE: Importing Images in Motion Canvas\nDESCRIPTION: Shows how to import an image file for use in a Motion Canvas animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// my-animation/\n// ├─ images/\n// │  └─ example.png\n// ├─ src/\n// ...\nimport examplePng from '../../images/example.png';\n```\n\n----------------------------------------\n\nTITLE: Creating and Animating Quadratic Bézier Curves in Motion Canvas\nDESCRIPTION: This code demonstrates how to create and animate a quadratic Bézier curve with three control points. It creates the curve with initial animation properties and animates drawing the curve from start to end, then animates it in reverse.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Node Groups with Layouts in Motion Canvas\nDESCRIPTION: Example demonstrating how non-Layout nodes like Node are ignored by the layout system, allowing you to group layout nodes without affecting the layout hierarchy.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/layouts.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} width={960} gap={40} layout>\n  <Node opacity={0.1}>\n    <Rect height={240} fill={'#ff6470'} />\n    <Rect height={240} fill={'#ff6470'} />\n  </Node>\n  <Rect height={240} fill={'#ff6470'} />\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Adding and Animating Arrows on Cubic Bézier Curves\nDESCRIPTION: This code shows how to add arrowheads to both ends of a cubic Bézier curve and animate their size. The startArrow and endArrow properties enable arrowheads, while arrowSize controls their dimensions, which is animated to change over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Videos in Motion Canvas\nDESCRIPTION: Shows how to import a video file for use in a Motion Canvas animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// my-animation/\n// ├─ videos/\n// │  └─ example.mp4\n// ├─ src/\n// ...\nimport exampleMp4 from '../../videos/example.mp4';\n```\n\n----------------------------------------\n\nTITLE: Controlling animation duration with useDuration in Motion Canvas\nDESCRIPTION: Example demonstrating how to use the useDuration() function to retrieve the duration of a time event and apply it to control how long an animation lasts.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/time-events.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().scale(2, useDuration('event'));\n```\n\n----------------------------------------\n\nTITLE: Nested Layouts in Motion Canvas\nDESCRIPTION: Example demonstrating nested layout structure where only the outermost Rect with the layout property becomes the layout root, while inner Rect with layout property is treated as a layout child, not a separate root.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/layouts.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// ↓ layout root\n<Rect layout>\n  {/* ↓ layout child, NOT a layout root */}\n  <Rect layout>\n    {/* ↓ layout child */}\n    <Circle width={320} height={320} />\n  </Rect>\n</Rect>\n```\n\n----------------------------------------\n\nTITLE: Complete Animated Spawner Example in TSX\nDESCRIPTION: A full scene implementation showing reactive circles with animation. The count signal is animated, causing the number of circles to change over time.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/spawners.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Layout, Circle} from '@motion-canvas/2d';\nimport {createSignal, linear, range} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const count = createSignal(10);\n\n  view.add(\n    <Layout layout>\n      {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n    </Layout>,\n  );\n\n  yield* count(3, 2, linear).wait(1).back(2);\n});\n```\n\n----------------------------------------\n\nTITLE: Centering Camera on Objects\nDESCRIPTION: Demonstrates the centerOn method which allows the camera to focus on specific objects in the scene. Uses references to target different components.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n  const rect = createRef<Rect>();\n  const circle = createRef<Circle>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect\n        ref={rect}\n        size={100}\n        fill={'lightseagreen'}\n        position={[-100, -30]}\n      />\n      <Circle ref={circle} size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n\n  yield* camera().centerOn(rect(), 1);\n  yield* camera().centerOn(circle(), 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Morphing Between SVG Paths in Motion Canvas\nDESCRIPTION: Example showing how to animate a path morphing from one shape to another by tweening the 'data' property. The animation transitions from a triangle to a rectangle over one second.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/path.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Path} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const path = createRef<Path>();\n\n  view.add(\n    <Path\n      ref={path}\n      lineWidth={4}\n      stroke={'#e13238'}\n      data=\"M301.113,12.011L576.715,584.766L25.508,584.766L301.113,12.011z\"\n      position={[-100, -100]}\n      scale={0.25}\n    ></Path>,\n  );\n\n  yield* path().data(\n    'M25.508,12.011 L576.715,12.011 L576.715,584.766 L25.508,584.766 L25.508,12.011 z',\n    1,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Rotating Camera\nDESCRIPTION: Shows how to animate camera rotation using the rotation signal. Demonstrates rotation through multiple angles before returning to the original orientation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect size={100} fill={'lightseagreen'} position={[-100, -30]} />\n      <Circle size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n\n  yield* camera().rotation(50, 1).to(-120, 2).to(0, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Runtime Plugin Implementation\nDESCRIPTION: Demonstrates how to create a basic Motion Canvas runtime plugin that automatically resets and plays animation on recalculation using the makePlugin helper function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/runtime.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makePlugin} from '@motion-canvas/core';\n\nexport default makePlugin({\n  name: 'motion-canvas-plugin-example',\n  player(player) {\n    player.onRecalculated.subscribe(() => {\n      player.requestReset();\n      player.togglePlayback(true);\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Uniform Shader Configuration\nDESCRIPTION: Shows how to pass custom uniforms to a shader using a configuration object with various data types.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/shaders.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    shaders={{\n      fragment: myShader,\n      uniforms: {\n        myFloat: 0.5,\n        myVec2: new Vector2(2, 5),\n        myColor: new Color('blue'),\n      },\n    }}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Spawned Children in TSX\nDESCRIPTION: Example showing how to properly access and animate spawned children using the parent's methods to get references to the current set of spawned objects.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/spawners.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n// ... continuing from above ...\nlet spawnedCircles = layout().childrenAs<Circle>();\nyield * all(...spawnedCircles.map(circle => circle.scale(1.5, 1).to(1, 1)));\n```\n\n----------------------------------------\n\nTITLE: Setting and Resetting Node Properties as Signals in TSX\nDESCRIPTION: Shows how to set a custom property value (lineHeight) on a Txt node and later reset it back to its default, inherited value using the DEFAULT symbol.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst text = createRef<Txt>();\nview.add(\n  <Txt lineHeight={'150%'} ref={text}>\n    Hello world!\n  </Txt>,\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Component Properties with Signals in Motion Canvas\nDESCRIPTION: Shows how to implement custom component properties using Motion Canvas signal decorators like @initial and @signal.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  @initial(false)\n  @signal()\n  public declare readonly initialState: SimpleSignal<boolean, this>;\n\n  @initial('#68ABDF')\n  @colorSignal()\n  public declare readonly accent: ColorSignal<this>;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Camera Along a Path\nDESCRIPTION: Demonstrates how to make the camera follow a curve path using the followCurve method. Uses a QuadBezier component to define the path trajectory.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, QuadBezier} from '@motion-canvas/2d';\nimport {createRef, linear} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n  const path = createRef<QuadBezier>();\n\n  view.add(\n    <Camera ref={camera}>\n      <QuadBezier\n        ref={path}\n        lineWidth={6}\n        stroke={'lightseagreen'}\n        p0={[-200, 0]}\n        p1={[0, 200]}\n        p2={[200, 0]}\n      />\n    </Camera>,\n  );\n\n  yield* camera().followCurve(path(), 2.5, linear);\n});\n```\n\n----------------------------------------\n\nTITLE: Zooming Camera In and Out\nDESCRIPTION: Demonstrates how to control camera zoom levels using the zoom method. Shows zooming in, out, and returning to the default zoom level.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Camera, Rect, Circle} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const camera = createRef<Camera>();\n\n  view.add(\n    <Camera ref={camera}>\n      <Rect size={100} fill={'lightseagreen'} position={[-100, -30]} />\n      <Circle size={80} fill={'hotpink'} position={[100, 30]} />\n    </Camera>,\n  );\n\n  yield* camera().zoom(2, 1);\n  yield* camera().zoom(0.5, 1.5);\n  yield* camera().zoom(1, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Knot Handles in Motion Canvas\nDESCRIPTION: Demonstrates animating the auto property of knot handles to blend between user-provided handles and auto-calculated handles. This creates a smooth transition between different curve shapes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\nimport {all, makeRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const knots: Knot[] = [];\n\n  view.add(\n    <Spline lineWidth={16} stroke={'lightseagreen'} lineJoin={'round'} closed>\n      <Knot\n        ref={makeRef(knots, 0)}\n        position={[-50, -80]}\n        startHandle={[0, 20]}\n        endHandle={[90, 0]}\n      />\n      <Knot position={[50, 0]} />\n      <Knot\n        ref={makeRef(knots, 1)}\n        position={[-50, 80]}\n        startHandle={[90, 0]}\n        endHandle={[0, -20]}\n      />\n    </Spline>,\n  );\n\n  yield* all(...knots.map(knot => knot.auto(1, 1).to(0, 1)));\n});\n```\n\n----------------------------------------\n\nTITLE: Signal Operations: Updating Values in Motion Canvas\nDESCRIPTION: Demonstrates how to update a signal's value by invoking it with one argument. This replaces the current value with the provided one.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignal(3);\n```\n\n----------------------------------------\n\nTITLE: Creating Signals for Complex Types in Motion Canvas\nDESCRIPTION: Shows how to create a signal for a complex type (Vector2) using the static createSignal method provided by the type. The signal is initialized with Vector2.up.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Vector2} from '@motion-canvas/core';\n\nconst signal = Vector2.createSignal(Vector2.up);\n```\n\n----------------------------------------\n\nTITLE: Integrating Plugin with Motion Canvas Project\nDESCRIPTION: Shows how to import and configure the plugin in the main project file, including proper initialization of the plugin function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/runtime.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@motion-canvas/core';\nimport myPlugin from './plugin';\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n  plugins: [myPlugin()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Timing Functions with Tweens\nDESCRIPTION: Demonstrates how to apply the easeInOutCubic timing function to create more natural movement in a tween animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield * tween(2, value => {\n  circle().position.x(map(-300, 300, easeInOutCubic(value)));\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Basic SVG Paths in Motion Canvas\nDESCRIPTION: Example demonstrating how to create a Path node with a simple triangle shape using SVG path data. The path is defined with the 'data' property and positioned with scaling.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/path.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Path} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const path = createRef<Path>();\n\n  view.add(\n    <Path\n      ref={path}\n      lineWidth={4}\n      stroke={'#e13238'}\n      data=\"M301.113,12.011L576.715,584.766L25.508,584.766L301.113,12.011z\"\n      position={[-100, -100]}\n      scale={0.25}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Code with Diffing in Motion Canvas\nDESCRIPTION: Shows how to animate changes to code using the diffing algorithm by tweening the code property.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={`\\\nfunction example() {\n  const number = 9;\n}`}\n    />,\n  );\n\n  yield* code().code('const nine = 9;', 0.6).wait(0.6).back(0.6).wait(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Deferred Effects in TypeScript\nDESCRIPTION: Example showing how deferred effects run at the end of a frame when any dependencies change, making them more efficient for multiple dependency changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/effects.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst a = createSignal(1);\nconst b = createSignal(2);\n\nlet value = 0;\ncreateEffect(() => {\n  console.log('effect invoked');\n  value = a() + b();\n});\n// effect invoked\n\nlet deferredValue = 0;\ncreateDeferredEffect(() => {\n  console.log('deferred effect invoked');\n  deferredValue = a() + b();\n});\n// deferred effect invoked\n\na(2);\n// effect invoked\nb(3);\n// effect invoked\n\nconsole.log(value); // 5 - effect's value is updated immediately.\nconsole.log(deferredValue); // 3 - deferred effect's value is not yet ready.\n\nyield; // deferred effect invoked\nconsole.log(deferredValue); // 5\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Properties as Signals in Motion Canvas\nDESCRIPTION: Demonstrates that properties of nodes in Motion Canvas are represented as signals, allowing for reactive animations. This example accesses the fill property of a Circle node.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = <Circle />;\n\nconst signal = circle.fill;\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings with Code Component\nDESCRIPTION: Demonstrates how to use template strings to create multi-line code snippets with variables.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Code\n    fontSize={28}\n    // highlight-start\n    code={`\\\nfunction example() {\n  const number = 7;\n}\n`}\n    // highlight-end\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline with Broken Knots in Motion Canvas\nDESCRIPTION: Shows how to create a spline with broken knots, which allows creating sharp corners in the curve. By specifying different start and end handles, you can create non-smooth transitions at knot points.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Spline lineWidth={16} stroke={'lightseagreen'} closed>\n      <Knot position={[-50, -80]} startHandle={[0, 20]} endHandle={[90, 0]} />\n      <Knot position={[50, 0]} />\n      <Knot position={[-50, 80]} startHandle={[90, 0]} endHandle={[0, -20]} />\n    </Spline>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Code Component with Simple String Value\nDESCRIPTION: Shows the simplest usage of a Code component with a string value.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    // prettier-ignore\n    <Code\n      fontSize={28}\n      code={'const number = 7;'}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing Signals and Effects in TypeScript\nDESCRIPTION: Example showing how effects differ from signals by immediately recalculating when dependencies change, instead of being lazy evaluated.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/effects.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => {\n  console.log('area recalculated!');\n  return Math.PI * radius() * radius();\n});\n\ncreateEffect(() => {\n  area();\n});\n// area recalculated!\n\nradius(2);\n// area recalculated!\nradius(3);\n// area recalculated!\nradius(4);\n// area recalculated!\n```\n\n----------------------------------------\n\nTITLE: Defining Control Points for Quadratic Bézier Curves\nDESCRIPTION: This example demonstrates how to define the three control points for a quadratic Bézier curve (p0, p1, p2). The curve is drawn with a specified line width and color, with p0 and p2 being the start and end points, while p1 is the single control point that determines the curve's shape.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, QuadBezier} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Animating Spline Smoothness in Motion Canvas\nDESCRIPTION: Demonstrates how to animate the smoothness property of a spline. The smoothness value (between 0 and 1) affects the curvature of the spline between control points.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const spline = createRef<Spline>();\n\n  view.add(\n    <Spline\n      ref={spline}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      smoothness={0.4}\n      points={[\n        [-300, 0],\n        [-150, -100],\n        [150, 100],\n        [300, 0],\n      ]}\n    />,\n  );\n\n  yield* spline().smoothness(0, 1).to(1, 1).to(0.4, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple References from Custom Component with makeRef() (TSX)\nDESCRIPTION: Using makeRef() to return multiple references from a custom component, allowing access to inner elements of a composite component for animation purposes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nfunction Label({\n  refs,\n  children,\n}: {\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\nconst label = {rect: null as Rect, text: null as Txt};\nview.add(<Label refs={label}>HELLO</Label>);\n\n// we can now animate both the Rect and the Text of our label:\nyield * label.rect.opacity(2, 0.3);\nyield * label.text.fontSize(24, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Using createRef() Function for Node References (TSX)\nDESCRIPTION: The preferred method of creating references using the createRef() function, which returns a signal-like function that can be used to access the node instance.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRef} from '@motion-canvas/core';\n\n// ...\n\nconst circle = createRef<Circle>();\nview.add(<Circle ref={circle} />);\n\nyield * circle().scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Custom Transition Template in Motion Canvas\nDESCRIPTION: Shows the basic structure for implementing custom transitions using the useTransition function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/transitions.mdx#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// set up the transition\nconst endTransition = useTransition(\n  currentContext => {\n    // modify the context of the current scene\n  },\n  previousContext => {\n    // modify the context of the previous scene\n  },\n);\n\n// perform animations\n\n// finish the transition\nendTransition();\n```\n\n----------------------------------------\n\nTITLE: Defining Control Points for Cubic Bézier Curves\nDESCRIPTION: This example shows how to define the four control points for a cubic Bézier curve (p0, p1, p2, p3). The curve is drawn with a specified line width and color, with p0 and p3 being the start and end points, while p1 and p2 are the control points that determine the curve's shape.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/bezier.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, CubicBezier} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Signal Operations: Retrieving Values in Motion Canvas\nDESCRIPTION: Shows how to retrieve the current value of a signal by invoking it without arguments. This operation returns the current value stored in the signal.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst value = signal();\n```\n\n----------------------------------------\n\nTITLE: Preserving Selection During Code Edits\nDESCRIPTION: Example showing how to preserve the current selection when editing code by passing false as the second parameter to the edit method.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\n// note the second argument to edit\nyield * codeRef().edit(1.2, false)`var myBool${insert(' = true')};`;\n```\n\n----------------------------------------\n\nTITLE: Basic Project Structure for Motion Canvas Transitions\nDESCRIPTION: Shows the recommended file structure for a Motion Canvas project with multiple scenes for transitions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/transitions.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-animation/\n└─ src/\n   ├─ scenes/\n   │  ├─ firstScene.tsx\n   │  └─ secondScene.tsx\n   └─ project.ts\n```\n\n----------------------------------------\n\nTITLE: Customizing Property Tween Timing Functions\nDESCRIPTION: Demonstrates how to specify a custom timing function for property tweens.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().color(\n  '#e13238',\n  2,\n  easeOutQuad,\n);\n```\n\n----------------------------------------\n\nTITLE: Reusable Animation Generator - TSX\nDESCRIPTION: Demonstrates how to create a reusable animation generator function using yield* delegation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/flow.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRef, ThreadGenerator} from '@motion-canvas/core';\nimport {makeScene2D, Circle} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} width={100} height={100} />);\n\n  yield* flicker(circle());\n});\n\nfunction* flicker(circle: Circle): ThreadGenerator {\n  circle.fill('red');\n  yield;\n  circle.fill('blue');\n  yield;\n  circle.fill('red');\n  yield;\n}\n```\n\n----------------------------------------\n\nTITLE: Basic LaTeX Component Configuration\nDESCRIPTION: Shows basic setup of a LaTeX component with essential properties like formula definition, fill color, and font size configuration.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/latex.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Latex, makeScene2D} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Latex\n      // Try editing the formula below:\n      tex=\"a^2 + b^2 = c^2\"\n      fill=\"white\"\n      fontSize={32}\n    />,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Using waitUntil with time events in Motion Canvas\nDESCRIPTION: A better approach using waitUntil() that pauses animation until a named event occurs, allowing for visual adjustment of timing in the editor instead of modifying code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/time-events.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitUntil('event'); // wait for an event called \"event\"\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Receiving Configuration in Runtime Plugin\nDESCRIPTION: Runtime plugin implementation that receives and uses configuration options passed from the Node.js plugin. This demonstrates how to type and access the configuration data in the runtime environment.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makePlugin} from '@motion-canvas/core';\n\n// highlight-start\ninterface MyPluginOptions {\n  foo: string;\n}\n// highlight-end\n\nexport default makePlugin((options?: MyPluginOptions) => {\n  // highlight-next-line\n  console.log(options?.foo); // 'bar'\n\n  return {\n    name: 'motion-canvas-plugin-example',\n    player(player) {\n      player.onRecalculated.subscribe(() => {\n        player.requestReset();\n        player.togglePlayback(true);\n      });\n    },\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Scaling Knots in Motion Canvas TSX\nDESCRIPTION: Illustrates scaling animations for knots in a spline. The knot scales up to 3x size, then down to 0.2x, before returning to normal size.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const knot = createRef<Knot>();\n\n  view.add(\n    <Spline lineWidth={6} stroke={'lightseagreen'}>\n      <Knot position={[-100, 30]} />\n      <Knot ref={knot} position={[0, -50]} startHandle={[-70, 0]} />\n      <Knot position={[100, 30]} />\n    </Spline>,\n  );\n\n  yield* knot().scale(3, 2).to(0.2, 2).to(1, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Exporting Motion Canvas Project (TypeScript)\nDESCRIPTION: Shows the new way of exporting a Motion Canvas project, replacing the previous 'bootstrap' function with a 'Project' class instance.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Project} from '@motion-canvas/core/lib';\n\nimport example from './scenes/example.scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n  // same options as in bootstrap() are available:\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Slides with beginSlide Function in Motion Canvas\nDESCRIPTION: This example demonstrates how to create multiple slides in a Motion Canvas animation using the beginSlide function. Each slide is defined by yielding beginSlide, which pauses playback until the presenter advances to the next slide.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/presentation.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeScene2D, Txt} from '@motion-canvas/2d';\nimport {beginSlide, createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const title = createRef<Txt>();\n  view.add(<Txt ref={title} />);\n\n  title().text('FIRST SLIDE');\n  yield* beginSlide('first slide');\n  yield* waitFor(1); // try doing some actual animations here\n\n  title().text('SECOND SLIDE');\n  yield* beginSlide('second slide');\n  yield* waitFor(1);\n\n  title().text('LAST SLIDE');\n  yield* beginSlide('last slide');\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Spring Configuration\nDESCRIPTION: Shows how to define a custom spring with specific physical properties for spring animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst MySpring = {\n  mass: 0.04,\n  stiffness: 10.0,\n  damping: 0.7,\n  initialVelocity: 8.0,\n};\n```\n\n----------------------------------------\n\nTITLE: Using the 'ref' Property with Callback Function (TSX)\nDESCRIPTION: Using the 'ref' property with a callback function to store a reference to a node after it's created. This provides both structured JSX and reference access.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nlet circle: Circle;\nview.add(\n  <Circle\n    ref={instance => {\n      circle = instance;\n    }}\n  />,\n);\n\nyield * circle.scale(2, 0.3);\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Custom Fonts\nDESCRIPTION: Example of using multiple custom fonts (both web and local) in a layout component\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Layout direction={'column'} alignItems={'center'} layout>\n  <Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n  <Txt fontFamily={'Cascadia Code'}>Cascadia Code</Txt>\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Color Interpolation with Tweens\nDESCRIPTION: Demonstrates how to animate between two colors using the Color.lerp function within a tween.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// import { Color } from \"@motion-canvas/core\";\nyield * tween(2, value => {\n  circle().fill(\n    Color.lerp(\n      new Color('#e6a700'),\n      new Color('#e13238'),\n      easeInOutCubic(value),\n    ),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Shader Implementation in Motion Canvas\nDESCRIPTION: Demonstrates how to import and apply a basic shader to a Circle component using the shaders property.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/shaders.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport myShader from './myShader.glsl';\n\n//...\n\nview.add(\n  <Circle\n    size={200}\n    fill=\"lightseagreen\"\n    shaders={myShader}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Improved Scene Structure Without Variable References (TSX)\nDESCRIPTION: A more readable approach to structuring a scene without storing references in variables, showing the hierarchical structure more clearly.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nview.add(\n  <Layout>\n    <Circle>\n      <Rect />\n    </Circle>\n    <Rect />\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Code Profiling with Logger\nDESCRIPTION: Demonstrates how to profile code sections using the Logger's profile functionality to measure performance.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/logging.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nlogger.profile('id'); // <-- starts the profiling\n// some expensive calculation\nlogger.profile('id'); // <-- ends the profiling\n```\n\n----------------------------------------\n\nTITLE: Using Save and Restore for State Management\nDESCRIPTION: Shows how to save a node's state and later restore it with animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ncircle().save();\nyield * circle().position(new Vector2(300, -200), 2);\nyield * circle().restore(1);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Component Props Interface in Motion Canvas\nDESCRIPTION: Shows how to define an interface for custom component props, extending NodeProps and using SignalValue for all properties.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  initialState?: SignalValue<boolean>;\n\n  // We don't use color here because we want\n  // to be able to pass hex strings and rgb\n  // values to accent rather than a `Color`\n  accent?: SignalValue<PossibleColor>;\n}\n```\n\n----------------------------------------\n\nTITLE: Camera Stage Setup in Motion Canvas\nDESCRIPTION: Demonstrates how to set up multiple Camera.Stage components with different positions and references.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst scene = /* ... */\n\nconst camera1 = createRef<Camera>();\nconst camera2 = createRef<Camera>();\n\nview.add(\n  <>\n    <Camera.Stage\n      cameraRef={camera1}\n      size={[300, 200]}\n      position={[-180, 0]}\n      scene={scene}\n    />\n    <Camera.Stage\n      cameraRef={camera2}\n      size={[300, 200]}\n      position={[180, 0]}\n      scene={scene}\n    />\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using Vector Operations with Vector Signals in Motion Canvas\nDESCRIPTION: Shows how to use vector operations with vector signals in Motion Canvas for concise code. The example demonstrates adding, subtracting, and scaling vectors, as well as component-wise operations like min and max.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-05-16-version-3.16.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeScene2D, Grid, Circle, createRef} from '@motion-canvas/2d';\nimport {createSignal, waitFor, Vector2, all} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  view.add(<Grid width={1920} height={1080} stroke=\"darkgray\" />);\n\n  const circle = createRef<Circle>();\n  view.add(<Circle ref={circle} fill=\"blue\" width={100} height={100} />);\n\n  const position = createSignal(() => Vector2.zero);\n  const direction = createSignal(() => Vector2.right);\n  circle().position(position);\n\n  // Basic vector operations can be used directly on Vector2Signal\n  // Instead of writing:\n  // position(position().add(direction().scale(50)));\n  // You can write:\n  position(position().add(direction().scale(50)));\n\n  yield* waitFor(0.5);\n\n  // With the new API, you can simplify it to:\n  yield* position(position() + direction() * 150, 0.6);\n\n  // You can also use unary operators to negate vectors\n  yield* position(position() + -direction() * 200, 0.6);\n\n  // Vector subtraction is also supported\n  const target = createSignal(() => Vector2.right.scale(200));\n  yield* position(position() + (target() - position()) * 0.5, 0.6);\n\n  // Component-wise operations are available too\n  yield* all(\n    position(position() + Vector2.up * 200, 0.6),\n    direction(Vector2.up, 0.6),\n  );\n\n  // Min and max operations\n  const boundary = new Vector2(400, 300);\n  yield* all(\n    position(position() + direction() * 500, 0.6),\n    position(Vector2.min(position(), boundary), 0),\n  );\n\n  // You can even combine all these operations\n  yield* position(Vector2.max(position() - direction() * 800, -boundary), 0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Color Inversion Shader Implementation\nDESCRIPTION: A simple GLSL shader that inverts the colors of the node by subtracting the RGB values from 1.0.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/shaders.mdx#2025-04-16_snippet_1\n\nLANGUAGE: glsl\nCODE:\n```\n#version 300 es\nprecision highp float;\n\n#include \"@motion-canvas/core/shaders/common.glsl\"\n\nvoid main() {\n    outColor = texture(sourceTexture, sourceUV);\n    outColor.rgb = 1.0 - outColor.rgb;\n}\n```\n\n----------------------------------------\n\nTITLE: GLSL Uniform Declarations\nDESCRIPTION: Example of uniform declarations in GLSL corresponding to the custom uniforms passed from TypeScript.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/shaders.mdx#2025-04-16_snippet_3\n\nLANGUAGE: glsl\nCODE:\n```\nuniform float myFloat;\nuniform vec2 myVec2;\nuniform vec4 myColor;\n```\n\n----------------------------------------\n\nTITLE: Basic Scene Definition in Motion Canvas\nDESCRIPTION: Creates a basic scene with a rectangle and circle node that can be rendered through multiple cameras.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst scene = (\n  <Node>\n    <Rect size={70} fill={'lightseagreen'} position={[-100, -30]} />\n    <Circle size={50} fill={'hotpink'} position={[100, 30]} />\n  </Node>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Effect in TypeScript\nDESCRIPTION: A basic example showing how to create an effect that logs changes to a signal. The effect will run whenever the signal value changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/effects.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {createSignal, createEffect} from '@motion-canvas/core';\n\nconst signal = createSignal(0);\ncreateEffect(() => {\n  console.log('Signal changed: ', signal());\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Video References for Playback Control\nDESCRIPTION: Demonstrates how to create references to videos to control playback in Motion Canvas.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const videoRef = createRef<Video>();\n\n  view.add(<Video ref={videoRef} src={exampleMp4} />);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Node Skewing in Motion Canvas\nDESCRIPTION: This code snippet showcases the new skewing feature for nodes in Motion Canvas v3.11.0. It creates an animation demonstrating how nodes can be skewed and manipulated.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-10-14-version-3.11.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect, Txt} from '@motion-canvas/2d';\nimport {all, createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const rect = createRef<Rect>();\n  const text = createRef<Txt>();\n\n  view.add(\n    <Rect\n      ref={rect}\n      width={480}\n      height={480}\n      fill=\"#e13238\"\n      radius={40}\n      layout\n      justifyContent=\"center\"\n    >\n      <Txt\n        ref={text}\n        text=\"SKEW\"\n        fontWeight={900}\n        fontFamily=\"Noto Sans\"\n        fontSize={180}\n        fill=\"#fff\"\n      />\n    </Rect>,\n  );\n\n  yield* waitFor(0.6);\n\n  yield* all(\n    rect().skew.x(-20, 1),\n    rect().skew.y(10, 1),\n    text().skew(-30, 1),\n  );\n\n  yield* waitFor(0.3);\n\n  yield* all(\n    rect().skew(0, 1),\n    text().skew(0, 1),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Component Class in Motion Canvas\nDESCRIPTION: Demonstrates how to create a custom component class extending Node and implementing the defined props interface.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nexport interface SwitchProps extends NodeProps {\n  // properties\n}\n\nexport class Switch extends Node {\n  // implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Using mapRefs() Method with RefMap (TS)\nDESCRIPTION: Using the mapRefs() method of a RefMap to apply animations to all references in the map simultaneously, similar to Array.prototype.map.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nyield * all(...labels.mapRefs(label => label.fill('white', 0.3)));\n```\n\n----------------------------------------\n\nTITLE: Disposing Effects in TypeScript\nDESCRIPTION: Example demonstrating how to dispose of an effect using the unsubscribe function returned when creating the effect.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/effects.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst unsubscribe = createEffect(() => {\n  console.log('Signal changed: ', signal());\n});\n\n// do something\n\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Implementing Reactive Children with Spawners in TSX\nDESCRIPTION: A reactive implementation using a function (spawner) that returns children, allowing the number of circles to update when the count signal changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/spawners.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {() => range(count()).map(() => <Circle size={32} fill={'white'} />)}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Understanding Signal Behavior: Laziness, Caching, and Dependency Tracking\nDESCRIPTION: Demonstrates the three key aspects of signals: laziness (calculated only when requested), caching (values are saved), and dependency tracking (signals are notified when dependencies change).\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst radius = createSignal(1);\nconst area = createSignal(() => {\n  console.log('area recalculated!');\n  return Math.PI * radius() * radius();\n});\n\narea(); // area recalculated!\narea();\nradius(2);\narea(); // area recalculated!\nradius(3);\nradius(4);\narea(); // area recalculated!\n```\n\n----------------------------------------\n\nTITLE: Importing and Adding CodeBlock Component in Motion Canvas\nDESCRIPTION: Basic example showing how to import and add a CodeBlock component to a view with syntax highlighting. Note that adding a CodeBlock requires using 'yield' to prepare the syntax highlighter.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock} from '@motion-canvas/2d/lib/components/CodeBlock';\n\nyield view.add(\n  <CodeBlock language=\"c#\" code={`Console.WriteLine(\"Hello World!\")`} />,\n);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Nested Txt Nodes in Motion Canvas\nDESCRIPTION: Example of how to nest Txt components inside each other in Motion Canvas v3.12.0, with the code imported from a source file.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-12-31-version-3.12.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{sourceTxt}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Component Constructor in Motion Canvas\nDESCRIPTION: Demonstrates how to implement a constructor for a custom component, handling props and potentially setting default values.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    super({\n      // If you wanted to ensure that layout was always\n      // true for this component, you could add it here\n      // as such:\n      // layout: true\n      ...props,\n    });\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Callback for Object Property Assignment (TSX)\nDESCRIPTION: An example showing how to assign a node instance to a property of an object using a callback function with the 'ref' property.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst circle = {instance: null as Circle};\nview.add(\n  <Circle\n    ref={instance => {\n      circle.instance = instance;\n    }}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Project with Custom Font CSS\nDESCRIPTION: TypeScript configuration to import the global CSS file containing font definitions into the Motion Canvas project\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@motion-canvas/core';\n\nimport example from './scenes/example?scene';\n\nimport './global.css'; // <- import the css\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Spline with Knot Nodes in Motion Canvas\nDESCRIPTION: Shows how to create a spline using Knot components as children instead of the points property. This provides the same result as using the points property for basic curves.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\n\nexport default makeScene2D(function* (view) {\n  view.add(\n    <Spline lineWidth={6} stroke={'lightseagreen'}>\n      <Knot position={[-300, 0]} />\n      <Knot position={[-150, -100]} />\n      <Knot position={[150, 100]} />\n      <Knot position={[300, 0]} />\n    </Spline>,\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Resetting Signals to Default Values in Motion Canvas\nDESCRIPTION: Shows how to reset a signal to its initial value using the DEFAULT symbol. This is useful for returning properties to their original state.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport {DEFAULT, createSignal} from '@motion-canvas/core';\n\nconst signal = createSignal(3); // <- initial value is 3\nsignal(2);\nsignal(); // <- value is now 2\nsignal(DEFAULT);\nsignal(); // <- value is reset back to 3\n```\n\n----------------------------------------\n\nTITLE: Rotating Knots in Motion Canvas TSX\nDESCRIPTION: Shows how to rotate a knot in a spline using Motion Canvas. The knot performs a full 360-degree rotation and then returns to its original position.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/spline.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Spline, Knot} from '@motion-canvas/2d';\nimport {createRef, linear} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const knot = createRef<Knot>();\n\n  view.add(\n    <Spline lineWidth={6} stroke={'lightseagreen'}>\n      <Knot position={[-100, 30]} />\n      <Knot ref={knot} position={[0, -50]} startHandle={[-70, 0]} />\n      <Knot position={[100, 30]} />\n    </Spline>,\n  );\n\n  yield* knot().rotation(360, 3, linear).to(0, 3);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Bezier Curves with Spline Node in Motion Canvas\nDESCRIPTION: Demonstrates how to use the new Spline node to create lines made up of Bezier curves. The example shows a spline with three knots, where the middle knot includes a handle for curve control.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-03-28-version-3.4.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Spline lineWidth={6} stroke={'lightseagreen'}>\n  <Knot position={[-100, 30]} />\n  <Knot position={[0, -50]} startHandle={[-70, 0]} />\n  <Knot position={[100, 30]} />\n</Spline>\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Component with Explicit Points Array in TSX\nDESCRIPTION: Demonstrates how to create a Line component using an explicit array of coordinate points. The line is styled with a white stroke and 8px width, connecting three points to form an L-shaped path.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/line-without-points.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Line\n  stroke=\"#fff\"\n  lineWidth={8}\n  points={[\n    [100, 0],\n    [0, 0],\n    [0, 100],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Expressions in Code Templates\nDESCRIPTION: Shows how to use conditional expressions within template strings for dynamic code content.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nconst isRed = true;\n\nview.add(\n  <Code\n    fontSize={28}\n    code={`\\\nfunction example() {\n  // highlight-next-line\n  const color = '${isRed ? 'red' : 'blue'}';\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Code Insert Animation Result\nDESCRIPTION: The before and after states of a code insertion animation, showing how the code will transition from the initial state to the modified state.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nvar myBool;\n// will animate to\nvar myBool = true;\n```\n\n----------------------------------------\n\nTITLE: Displaying Images with Img Component\nDESCRIPTION: Shows how to use the Img component to display an imported image in a Motion Canvas scene.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Img} from '@motion-canvas/2d';\n\nimport examplePng from '../../images/example.png';\n\nexport default makeScene2D(function* (view) {\n  view.add(<Img src={examplePng} />);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Cardinal Directions for Positioning in Motion Canvas\nDESCRIPTION: Interactive example showing how to position rectangles using cardinal direction properties like left, right, and bottomLeft to align nodes based on their edges or corners.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/layouts.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@motion-canvas/2d';\nimport {createRef} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const rect = createRef<Rect>();\n\n  view.add(\n    <>\n      <Rect\n        ref={rect}\n        width={200}\n        height={100}\n        rotation={-10}\n        fill={'#333333'}\n      />\n      <Rect\n        size={50}\n        fill={'#e6a700'}\n        rotation={rect().rotation}\n        // Try changing \"right\" to \"top\"\n        right={rect().left}\n      />\n      <Rect\n        size={100}\n        fill={'#e13238'}\n        rotation={10}\n        bottomLeft={rect().bottomRight}\n      />\n    </>,\n  );\n\n  yield* rect().rotation(10, 1).to(-10, 1);\n});\n```\n\n----------------------------------------\n\nTITLE: Multiple Rectangle Animation - TSX\nDESCRIPTION: Demonstrates complex animation patterns using arrays of rectangles with different animation approaches.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/flow.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Rect} from '@motion-canvas/2d';\nimport {all, waitFor, makeRef, range} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const rects: Rect[] = [];\n\n  // Create some rects\n  view.add(\n    range(5).map(i => (\n      <Rect\n        ref={makeRef(rects, i)}\n        width={100}\n        height={100}\n        x={-250 + 125 * i}\n        fill=\"#88C0D0\"\n        radius={10}\n      />\n    )),\n  );\n\n  yield* waitFor(1);\n\n  // Animate them\n  yield* all(\n    ...rects.map(rect => rect.position.y(100, 1).to(-100, 2).to(0, 1)),\n  );\n});\n```\n\n----------------------------------------\n\nTITLE: Importing the Custom Plugin in Vite Config\nDESCRIPTION: How to import and use a custom Motion Canvas plugin in the Vite configuration file. The plugin is added to the plugins array alongside the main Motion Canvas plugin.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n// highlight-next-line\nimport myVitePlugin from './myVitePlugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas(),\n    // highlight-next-line\n    myVitePlugin(),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Comparing JSX and Non-JSX Node Creation in Motion Canvas\nDESCRIPTION: Comparison of two equivalent ways to create the same node hierarchy - one using JSX syntax and the other using direct class instantiation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/hierarchy.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n// JSX\nview.add(\n  <>\n    <Circle />\n    <Layout>\n      <Rect />\n      <Txt>Hi</Txt>\n    </Layout>\n  </>,\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\n// No JSX\nview.add([\n  new Circle({}),\n  new Layout({\n    children: [\n      // highlight-start\n      new Rect({}),\n      new Txt({text: 'Hi'}),\n    ],\n  }),\n]);\n```\n\n----------------------------------------\n\nTITLE: Using Variables in Code Templates\nDESCRIPTION: Shows how to include variables in code snippets using template strings.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-next-line\nconst name = 'number';\n\nview.add(\n  <Code\n    fontSize={28}\n    code={`\\\nfunction example() {\n  // highlight-next-line\n  const ${name} = 7;\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project Structure for Custom Fonts\nDESCRIPTION: File structure modification to add global CSS file for font management\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\nroot\n└─src\n  ├─scenes/\n  ├─motion-canvas.d.ts\n  ├─project.meta\n  ├─project.ts\n+ └─global.css\n```\n\n----------------------------------------\n\nTITLE: Importing and Displaying an Image in Motion Canvas (TSX)\nDESCRIPTION: This snippet demonstrates how to import an image file and use it as the source for an Img component in Motion Canvas. It's essential to specify a source for the image to be visible.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/image-without-source.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport myImage from './example.png';\n// ...\n<Img src={myImage} />;\n```\n\n----------------------------------------\n\nTITLE: Using makeRefs() for Type Inference (TSX)\nDESCRIPTION: Using makeRefs() to automatically infer and create a reference object matching a component's expected refs type, eliminating redundant type declarations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef, makeRefs} from '@motion-canvas/core';\n\n// ...\n\nfunction Label({\n  refs,\n  children,\n}: {\n  refs: {rect: Rect; text: Txt};\n  children: string;\n}) {\n  return (\n    <Rect ref={makeRef(refs, 'rect')}>\n      <Txt ref={makeRef(refs, 'text')}>{children}</Txt>\n    </Rect>\n  );\n}\n\nconst label = makeRefs<typeof Label>();\nview.add(<Label refs={label}>HELLO</Label>);\n```\n\n----------------------------------------\n\nTITLE: Appending and Prepending Code in Motion Canvas\nDESCRIPTION: Demonstrates how to add code at the beginning or end of a snippet using append and prepend methods.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n    />,\n  );\n\n  // append immediately\n  code().code.append(`const one = 1;`);\n\n  // animate using the signal signature\n  yield* code().code.append('\\nconst two = 2;', 0.6);\n\n  // animate using the template tag signature\n  yield* code().code.append(0.6)`\nconst three = 3;`;\n\n  // prepend works analogically\n  yield* code().code.prepend('// example\\n', 0.6);\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Correct Scene Node Wrapping\nDESCRIPTION: Demonstrates the correct way to wrap scene elements in a single Node component.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst scene = (\n  <Node>\n    <Circle />\n    <Rect />\n  </Node>\n);\n```\n\n----------------------------------------\n\nTITLE: Storing a Running Generator in TypeScript\nDESCRIPTION: This snippet demonstrates how to correctly store a running generator in a variable using `yield`. The opacity generator is run concurrently and stored in the `task` variable for potential later use.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/threading/__logs__/reused-generator.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst task = yield rect().opacity(1, 1);\n```\n\n----------------------------------------\n\nTITLE: Resetting Node Properties to Default Values in Motion Canvas\nDESCRIPTION: Demonstrates how to reset a property of a node back to its default value using the DEFAULT symbol. This example resets the lineHeight of a Txt node.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/signals.mdx#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntext().lineHeight(DEFAULT);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Tab Components with Preact\nDESCRIPTION: This snippet shows how to create custom tab and pane components for the Motion Canvas editor using Preact. It defines both the tab that appears in the navigation bar and the content pane that displays when the tab is selected.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/editor.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n/* @jsxImportSource preact */\n\nimport {\n  Pane,\n  PhotoCamera,\n  PluginTabConfig,\n  PluginTabProps,\n  Separator,\n  Tab,\n} from '@motion-canvas/ui';\n\nfunction TabComponent({tab}: PluginTabProps) {\n  return (\n    <Tab title=\"My Tab\" id=\"custom-tab\" tab={tab}>\n      <PhotoCamera />\n    </Tab>\n  );\n}\n\nfunction PaneComponent() {\n  return (\n    <Pane title=\"My Pane\" id=\"custom-pane\">\n      <Separator size={1} />\n      Hello <strong>World</strong>!\n    </Pane>\n  );\n}\n\nexport const CustomTabConfig: PluginTabConfig = {\n  name: 'inspector',\n  tabComponent: TabComponent,\n  paneComponent: PaneComponent,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spline with Points Array in Motion Canvas TSX\nDESCRIPTION: Demonstrates how to create a basic spline by providing an array of coordinate points. The spline requires at least two knots to be visible and includes styling properties for stroke color and line width.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/spline-with-insufficient-knots.md#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Spline\n  stroke=\"#fff\"\n  lineWidth={8}\n  points={[\n    [100, 0],\n    [0, 0],\n    [0, 100],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting and Animating View Background in Motion Canvas\nDESCRIPTION: This snippet demonstrates how to set and animate the background color of a scene view in Motion Canvas, as an alternative to using the static project background setting.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/rendering/index.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  view.fill('#242424'); // set the background of this scene\n  yield* view.fill('lightseagreen', 2); // animate it\n});\n```\n\n----------------------------------------\n\nTITLE: Finding Nodes with Custom Predicates in Motion Canvas\nDESCRIPTION: Examples of creating different predicates to find specific nodes in the hierarchy, including using the 'is' utility function for type checking.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/hierarchy.mdx#2025-04-16_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst wideNodes = view.findAll(node => node.scale.x() > 1);\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst texts = view.findAll(node => node instanceof Txt);\n```\n\nLANGUAGE: ts\nCODE:\n```\nimport {is} from '@motion-canvas/2d';\n// ...\nconst texts = view.findAll(is(Txt));\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst textChildren = someParent.children().filter(is(Txt));\n```\n\n----------------------------------------\n\nTITLE: Creating an Editor Plugin Entry Point in TypeScript\nDESCRIPTION: This code demonstrates how to create the main entry point for a Motion Canvas editor plugin. It uses makeEditorPlugin from the UI package to define a plugin with a custom tab.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/editor.mdx#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeEditorPlugin} from '@motion-canvas/ui';\nimport {CustomTabConfig} from './CustomTabConfig';\n\nexport default makeEditorPlugin({\n  name: 'editor-test',\n  tabs: [CustomTabConfig],\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Line Points Tweening in Motion Canvas\nDESCRIPTION: Example showing how to tween the points of a Line component in Motion Canvas v3.12.0, with the code imported from a source file.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-12-31-version-3.12.0.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{sourceLine}\n```\n\n----------------------------------------\n\nTITLE: Creating useRandom with Custom Seed in TypeScript\nDESCRIPTION: Example showing how to provide a custom seed (123) to the useRandom function. Using a specific seed allows for finding a predictable sequence of random numbers that suits particular animation needs.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/random.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst random = useRandom(123);\n```\n\n----------------------------------------\n\nTITLE: Example of Lines Helper Return Value\nDESCRIPTION: Example showing the data structure returned by the lines helper function when selecting lines 4 through 7, representing the raw selection format.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n[\n  [\n    [4, 0],\n    [7, Infinity],\n  ],\n];\n```\n\n----------------------------------------\n\nTITLE: Initializing Logger in Motion Canvas Scene\nDESCRIPTION: Shows how to get a reference to the Logger utility in a Motion Canvas scene using the useLogger hook.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/logging.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D} from '@motion-canvas/2d';\nimport {useLogger} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const logger = useLogger();\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Selecting Code with Range Helper in CodeBlock\nDESCRIPTION: Example showing how to select specific portions of code using the range helper function to highlight important sections.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock} from '@motion-canvas/2d/lib/components/CodeBlock';\nimport {createRef} from '@motion-canvas/core';\n\nconst codeBlockRef = createRef<CodeBlock>();\nyield view.add(\n  <CodeBlock ref={codeBlockRef} code={`...`} selection={range(0, 2, 0, 4)} />,\n);\n// or\nyield codeBlockRef.selection(range(0, 2, 0, 4));\n```\n\n----------------------------------------\n\nTITLE: Configuring Audio in Motion Canvas Project\nDESCRIPTION: Demonstrates how to add an audio track to a Motion Canvas project by configuring the audio property in the project settings.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  // ...\n  audio: audio,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Random Number Generator with useRandom in TypeScript\nDESCRIPTION: Basic example of importing and using the useRandom function to generate a random integer in a specified range (0-10 exclusive). This demonstrates the core functionality of Motion Canvas's random number generation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/random.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {useRandom} from '@motion-canvas/core';\n\nconst random = useRandom();\nconst integer = random.nextInt(0, 10);\n```\n\n----------------------------------------\n\nTITLE: Animating During Scene Transitions\nDESCRIPTION: Example of how to trigger early transitions while continuing animation using finishScene function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/transitions.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nexport default makeScene2D(function* (view) {\n  yield* animationOne();\n  // trigger the transition early:\n  finishScene();\n  // continue animating:\n  yield* animationTwo();\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Web Font in Components\nDESCRIPTION: Example of using the imported web font in a Text component\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Txt fontFamily={'Fira Code'}>Fira Code</Txt>\n```\n\n----------------------------------------\n\nTITLE: Project Structure Showing Plugin Files\nDESCRIPTION: A directory structure diff showing where to place Vite plugin files in a Motion Canvas project. The plugin file is added to the root directory since Vite plugins are not part of the runtime source code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  project/\n  ├── src/\n  │   ├── scenes/\n  │   │   └── example.tsx\n  │   ├── plugin.ts\n  │   └── project.ts\n  ├── package.json\n  ├── tsconfig.json\n// highlight-next-line\n+ ├── myVitePlugin.ts\n  └── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Nesting CODE Templates in Motion Canvas\nDESCRIPTION: Demonstrates how to nest multiple CODE templates to build more complex code structures.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst implementation = CODE`\\\n    console.log('Hello!');\n    return 7;`;\n\nconst method = CODE`\\\n  greet() {\n${implementation}\n  }`;\n\nconst klass = CODE`\\\nclass Example {\n${method}\n}\n`;\n\nview.add(<Code code={klass} />);\n// class Example {\n//   greet() {\n//     console.log('Hello!');\n//     return 7;\n//   }\n// }\n```\n\n----------------------------------------\n\nTITLE: Using Lines Helper for CodeBlock Selection\nDESCRIPTION: Example demonstrating how to select entire lines of code using the lines helper function, which simplifies the selection process for multi-line blocks.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nlines(\n  4, // starting line\n  9, // ending line, can be ommited, which will only select the starting line\n);\n```\n\n----------------------------------------\n\nTITLE: Checking Reference Existence in a RefMap (TS)\nDESCRIPTION: How to check if a reference exists in a RefMap using the 'in' operator before accessing it, which prevents creating unnecessary references.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nif ('d' in labels) {\n  yield * labels.d().text('D changes', 0.3);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LezerHighlighter with JSX and TypeScript Support\nDESCRIPTION: Shows how to configure the JavaScript parser with additional dialect support for JSX and TypeScript.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nCode.defaultHighlighter = new LezerHighlighter(\n  parser.configure({\n    // Provide a space-separated list of dialects to enable:\n    dialect: 'jsx ts',\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Infinite Loops with loop Function\nDESCRIPTION: Shows how to create infinite animation loops using the updated loop function, where the iteration count can be omitted to create endless repeating animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-03-21-version-3.15.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// In previous versions, we had to pass Infinity as the first argument\nyield* loop(Infinity, () => {\n  // ...\n});\n\n// Now we can omit the first argument to create an infinite loop\nyield* loop(() => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Spline with Knot Components in Motion Canvas TSX\nDESCRIPTION: Shows how to create a spline using individual Knot components as children, allowing for precise control over handle positions. Each knot can have start and end handles defined for curve manipulation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/spline-with-insufficient-knots.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Spline stroke=\"#fff\" lineWidth={8}>\n  <Knot x={100} endHandle={[-50, 0]} />\n  <Knot />\n  <Knot y={100} startHandle={[-100, 50]} />\n</Spline>\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration Setup for Motion Canvas\nDESCRIPTION: Shows the required Vite configuration setup with Motion Canvas plugin integration.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using withDefaults Helper Function in TypeScript\nDESCRIPTION: Demonstrates how to use the new withDefaults helper function to extend nodes with custom defaults, allowing for personalized default settings on Motion Canvas components.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-03-21-version-3.15.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// A helper function that creates a custom rect component with our own defaults\nconst MyRect = withDefaults(Rect, {\n  fill: '#ff0000',\n  radius: 20,\n});\n\n// We can use it just like any other component:\nview.add(\n  <MyRect \n    // The default fill is now red\n    // The default radius is now 20\n    width={200}\n    height={100}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Sequential Code Edits in CodeBlock\nDESCRIPTION: Example showing how to apply multiple sequential edits to a CodeBlock over time, creating a series of animated code transitions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\nyield * codeRef().edit(1.2)`var myBool${insert(' = true')};`;\nyield * waitFor(1);\nyield * codeRef().edit(1.2)`var myBool = ${edit('true', 'false')};`;\nyield * waitFor(1);\nyield * codeRef().edit(1.2)`var myBool${remove(' = false')};`;\n```\n\n----------------------------------------\n\nTITLE: Configuring LezerHighlighter for JavaScript in Motion Canvas Project\nDESCRIPTION: Sets up the LezerHighlighter with JavaScript parser as the default highlighter for all Code components in the project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@motion-canvas/core';\nimport example from './scenes/example?scene';\n\n// highlight-start\nimport {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {parser} from '@lezer/javascript';\n\nCode.defaultHighlighter = new LezerHighlighter(parser);\n// highlight-end\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Code Range Examples\nDESCRIPTION: Examples of code range syntax for selecting specific portions of code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_17\n\nLANGUAGE: js\nCODE:\n```\n// prettier-ignore\n[[startLine, startColumn], [endLine, endColumn]];\n```\n\nLANGUAGE: js\nCODE:\n```\n// prettier-ignore\n[[1, 0], [1, 3]];\n```\n\n----------------------------------------\n\nTITLE: Rendering Line Component with Child Nodes in TSX\nDESCRIPTION: Shows an alternative approach to defining line points using child Node components. Each Node represents a point in the line path, with positions specified through x and y props.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/line-without-points.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Line stroke=\"#fff\" lineWidth={8}>\n  <Node x={100} />\n  <Node />\n  <Node y={100} />\n</Line>\n```\n\n----------------------------------------\n\nTITLE: Installing FFmpeg Exporter for Motion Canvas\nDESCRIPTION: Command to install the FFmpeg exporter package in an existing Motion Canvas project using npm.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/rendering/video.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @motion-canvas/ffmpeg\n```\n\n----------------------------------------\n\nTITLE: Finite Loop with Iteration Count in Motion Canvas\nDESCRIPTION: This example demonstrates how to set a finite number of iterations for a loop by specifying the count as the first argument to the loop function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/flow/__logs__/infinite-loop.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nyield* loop(10, () => rect().opacity(0).opacity(1, 1));\n//          ^ iteration count\n```\n\n----------------------------------------\n\nTITLE: Adding Child Elements to Custom Component in Motion Canvas\nDESCRIPTION: Shows how to add child elements to a custom component using this.add() method.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/custom-components.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport class Switch extends Node {\n  public constructor(props?: SwitchProps) {\n    // ...\n    this.add(\n      <Rect>\n        <Circle />\n      </Rect>,\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Restore Animation\nDESCRIPTION: Demonstrates how to provide a custom timing function when restoring a saved state.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nyield * circle().restore(1, linear);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with Motion Canvas Plugin\nDESCRIPTION: Example configuration for setting up the Motion Canvas Vite plugin in a project's vite.config.ts file.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Word Helper for Code Selection\nDESCRIPTION: Example showing how to use the word helper function to select specific words in code, which is a simpler alternative to range for single-line selections.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nword(\n  0, // starting on the first line\n  4, // starting with the 5th character,\n  5, // the selection will have a total of 5 chars, can be ommited, which will select the remainder of this line\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring FFmpeg Exporter in Vite Configuration\nDESCRIPTION: Diff showing how to update the Vite configuration file to include the FFmpeg exporter plugin for Motion Canvas.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/rendering/video.mdx#2025-04-16_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  import {defineConfig} from 'vite';\n  import motionCanvas from '@motion-canvas/vite-plugin';\n+ import ffmpeg from '@motion-canvas/ffmpeg';\n\n  export default defineConfig({\n    plugins: [\n      motionCanvas(),\n+     ffmpeg(),\n    ],\n  });\n```\n\n----------------------------------------\n\nTITLE: Installing Lezer Grammar via npm\nDESCRIPTION: This code snippet demonstrates the npm command structure for installing a Lezer grammar package. The actual package name is dynamically inserted based on the grammar being displayed.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/grammars.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i {g.package}\n```\n\n----------------------------------------\n\nTITLE: Code Editing with Template Strings\nDESCRIPTION: Shows how to use the edit method with template strings for more visual code modifications.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, replace, insert, remove} from '@motion-canvas/2d';\nimport {createRef, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const code = createRef<Code>();\n\n  view.add(\n    // prettier-ignore\n    <Code\n      ref={code}\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n    />,\n  );\n\n  yield* code().code.edit(0.6)`\\\nfunction example() {\n  ${insert(`// This is a comment\n  `)}console.log(\"${replace('Hello!', 'Goodbye!')}\");\n${remove(`  return 7;\n`)}}`;\n\n  yield* waitFor(0.6);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CodeBlock Addition with Yield in Motion Canvas\nDESCRIPTION: Minimal example showing why the yield keyword is required when adding a CodeBlock component to prepare the syntax highlighter.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nyield view.add(<CodeBlock />);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Motion Canvas\nDESCRIPTION: Configuration file setup for using Vite with Motion Canvas project. Requires vite and @motion-canvas/vite-plugin packages.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: CodeBlock with Auto-Indentation Example 1\nDESCRIPTION: Example demonstrating how CodeBlock automatically adjusts indentation when code starts with a new line, setting indentation based on the least indented code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock} from '@motion-canvas/2d/lib/components/CodeBlock';\n\nyield view.add(\n  // note that the ` bracket is followed by a new line\n  <CodeBlock\n    code={`\n      console.log('Hello World!')\n        // more indented\n      // less indented`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for External Files\nDESCRIPTION: Vite configuration setup for allowing external file loading when using locally linked Motion Canvas packages. Modifies the server filesystem settings and includes the Motion Canvas plugin.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/README.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  server: {\n    fs: {\n      // let it load external files\n      strict: false,\n    },\n  },\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Konva Patches in Motion Canvas (TypeScript)\nDESCRIPTION: Shows how to manually import Konva patches for projects using KonvaScenes in Motion Canvas.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport '@motion-canvas/core/lib/patches'\n// ...\nbootstrap(...);\n```\n\n----------------------------------------\n\nTITLE: Configuring Local and Web Fonts in CSS\nDESCRIPTION: CSS configuration combining both web-hosted and local font definitions using @import and @font-face\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_5\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n\n@font-face {\n  font-family: 'Cascadia Code';\n  src:\n    local('Cascadia Code'),\n    url(public/fonts/CASCADIACODE.TTF) format('truetype');\n}\n```\n\n----------------------------------------\n\nTITLE: Code Signals Example\nDESCRIPTION: Demonstrates the use of code signals for reactive code animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code, CODE} from '@motion-canvas/2d';\nimport {all, waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const message = Code.createSignal(`Hello, world!`);\n  const body = Code.createSignal(CODE`console.log('${message}');`);\n\n  view.add(\n    <Code\n      fontSize={28}\n      offsetX={-1}\n      x={-400}\n      code={CODE`\\\nfunction hello() {\n  ${body}\n}`}\n    />,\n  );\n\n  yield* waitFor(0.3);\n  // prettier-ignore\n  yield* all(\n    message('Goodbye, world!', 0.6),\n    body.append(0.6)`\\n  return 7;`,\n  );\n  yield* waitFor(0.3);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Experimental Features in Motion Canvas Project\nDESCRIPTION: Demonstrates how to enable experimental features in a Motion Canvas project by modifying the project configuration file. This setting allows access to features that may not follow semantic versioning and could break between minor versions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/experimental.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  experimentalFeatures: true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Experimental Features in Motion Canvas Project Configuration\nDESCRIPTION: This snippet demonstrates how to enable experimental features in a Motion Canvas project by setting the experimentalFeatures flag to true in the project configuration object passed to makeProject().\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/utils/__logs__/experimental-features.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default makeProject({\n  experimentalFeatures: true,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: CodeBlock with Auto-Indentation Example 2\nDESCRIPTION: Another example showing how indentation is determined by the least indented line of code within the block.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport {CodeBlock} from '@motion-canvas/2d/lib/components/CodeBlock';\n\nyield view.add(\n  // note that the ` bracket is followed by a new line\n  <CodeBlock\n    code={`\n      console.log('Hello World!')\n    // less indented\n      // more indented`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Importing Scenes in Motion Canvas Project (TypeScript)\nDESCRIPTION: Demonstrates the new way of importing scenes in a Motion Canvas project file using the '?scene' query parameter.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport example from './scenes/example?scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Getset Decorator in Motion Canvas (TypeScript)\nDESCRIPTION: Illustrates the new import path for the 'getset' decorator in Motion Canvas projects.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {getset} from '@motion-canvas/core/lib/decorators/getset';\n```\n\n----------------------------------------\n\nTITLE: Installing Motion Canvas v3 Packages with NPM\nDESCRIPTION: Command to update all Motion Canvas packages to version 3.x.x using npm install.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/migration/3.0.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @motion-canvas/2d@3 @motion-canvas/core@3 @motion-canvas/ui@3 @motion-canvas/vite-plugin@3\n```\n\n----------------------------------------\n\nTITLE: Code Range Helper Functions\nDESCRIPTION: Examples of using helper functions for common code range operations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// a range starting at line 1, column 3,\n// spanning 3 characters:\nword(1, 3, 3);\n\n// a range starting at line 1, column 3,\n// spanning until the end of the line:\nword(1, 3);\n\n// a range containing lines from 1 to 3 (inclusive):\nlines(1, 3);\n\n// a range containing line 2\nlines(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Language Highlighters in Motion Canvas\nDESCRIPTION: Demonstrates how to use different code highlighters in Motion Canvas, showing both default JavaScript and Rust syntax highlighting using LezerHighlighter.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\n// ...\n\nview.add(\n  <Code\n    // this node uses the default parser\n    offsetX={-1}\n    x={-400}\n    code={`\nfunction hello() {\n  console.log('Hello!');\n}\n`}\n  />,\n);\n\nview.add(\n  <Code\n    // this node uses the Rust parser\n    highlighter={RustHighlighter}\n    offsetX={1}\n    x={400}\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Using waitFor with hardcoded timing in Motion Canvas\nDESCRIPTION: A code example showing the tedious approach of using hardcoded time values to synchronize animations, which requires manual adjustment whenever the voiceover changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/time-events.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nyield * animationOne();\nyield * waitFor(3.1415); // but how long should we wait?\nyield * animationTwo();\n```\n\n----------------------------------------\n\nTITLE: Using Icon Component in Motion Canvas\nDESCRIPTION: Demonstrates how to use the new Icon component in Motion Canvas v2.6.0. This component renders vector icons from various icon sets, taking parameters for the icon identifier, size, and color.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-24-version-2.6.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Icon icon={\"mdi:typewriter\"} size={200} color=\"white\" />\n```\n\n----------------------------------------\n\nTITLE: Type Reference for Motion Canvas Project (TypeScript)\nDESCRIPTION: Illustrates how to create a type reference file for Motion Canvas to provide proper type support in the project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@motion-canvas/core/project\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Language Component with withDefaults\nDESCRIPTION: Shows how to create a reusable custom component for Rust code highlighting using the withDefaults helper function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter, withDefaults} from '@motion-canvas/2d';\nimport {parser} from '@lezer/rust';\n\nconst RustHighlighter = new LezerHighlighter(parser);\n\nexport const RustCode = withDefaults(Code, {\n  highlighter: RustHighlighter,\n});\n```\n\n----------------------------------------\n\nTITLE: Performance Optimization with Object Pools in TSX\nDESCRIPTION: An optimized approach using an object pool to reuse existing nodes instead of recreating them, which improves performance when the number of nodes changes frequently.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/spawners.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nconst pool = range(64).map(i => (\n  <Circle x={i * 32} width={32} height={32} fill={'lightseagreen'} />\n));\n\nconst layout = createRef<Layout>();\nview.add(\n  <Layout layout ref={layout}>\n    {() => pool.slice(0, count())}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Raw Selection Syntax for CodeBlock\nDESCRIPTION: Example showing the underlying data structure for selections in CodeBlock, which consists of nested arrays defining line and character offsets for each selection.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<CodeBlock\n  selection={[\n    [\n      // First selection\n      [lineFrom, characterFrom],\n      [lineTo, characterTo],\n    ],\n    [\n      // Second selection\n      [lineFrom, characterFrom],\n      [lineTo, characterTo],\n    ],\n    [\n      //... etc\n    ],\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Project Files in Motion Canvas\nDESCRIPTION: Example showing how to configure multiple project files, enabling project selection in the Editor without requiring Vite restart.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/configuration.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmotionCanvas({\n  project: [\n    './src/firstProject.ts',\n    './src/secondProject.ts',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Project Structure Modification for Plugin Integration\nDESCRIPTION: Shows the directory structure changes needed to add a plugin file to a Motion Canvas project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/runtime.mdx#2025-04-16_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  project/\n  ├── src/\n  │   ├── scenes/\n  │   │   └── example.tsx\n+ │   ├── plugin.ts\n  │   └── project.ts\n  ├── package.json\n  ├── tsconfig.json\n  └── vite.config.ts\n```\n\n----------------------------------------\n\nTITLE: Using Range Helper with Zero-Based Indexing\nDESCRIPTION: Example demonstrating how to use the range helper function with zero-based indexing to select specific characters within code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nrange(\n  0, // starting on the first line\n  4, // starting with the 5th character\n  0, // ending on the first line\n  8, // ending with the 9th character\n);\n```\n\n----------------------------------------\n\nTITLE: Using Custom RustCode Component\nDESCRIPTION: Demonstrates how to use the custom RustCode component for simplified Rust code highlighting.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nimport {RustCode} from '../nodes/RustCode';\n\n// ...\n\nview.add(\n  <RustCode\n    code={`\nfn hello() {\n  println!(\"Hello!\");\n}\n`}\n  />,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes Content in JSX\nDESCRIPTION: This JSX code renders the content of the release notes, including new features and their descriptions. It uses custom components to structure the information and provide links to related documentation and pull requests.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-02-04-version-3.14.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IssueGroup type={'feat'}>\n  <Issue user={'aarthificial'} experimental>\n    <Link to=\"/docs/shaders\">Shaders</Link> let you create custom visual effects\n    using WebGL.\n    <PR id={929} />\n    <PR id={920} />\n    <Fiddle\n      mode=\"preview\"\n      ratio=\"3\"\n      className=\"margin-top--sm margin-bottom--sm\"\n    >\n      {sourceShader}\n    </Fiddle>\n  </Issue>\n  <Issue user={'aarthificial'} pr={921}>\n    The node inspector can be toggled on and off.\n  </Issue>\n  <Issue user={'jmaen'} pr={917}>\n    Number inputs can be edited by dragging left and right.\n  </Issue>\n</IssueGroup>\n\n<small>\n  Check out <Link to=\"/docs/updating\">the Update Guide</Link> for information on\n  how to update your existing projects.\n</small>\n```\n\n----------------------------------------\n\nTITLE: Importing Audio Files in Motion Canvas\nDESCRIPTION: Shows how to import an audio file from a relative path within a Motion Canvas project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/media.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// my-animation/\n// ├─ audio/\n// │  └─ voice.mp3\n// ├─ src/\n// ...\nimport audio from '../audio/voice.mp3';\n```\n\n----------------------------------------\n\nTITLE: Incorrect Use of Running Generator in Flow Function\nDESCRIPTION: This example demonstrates another incorrect usage where a running generator (task) is passed to a flow function (`all`). This will also cause an error and should be avoided.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/threading/__logs__/reused-generator.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nyield* all(task);\n```\n\n----------------------------------------\n\nTITLE: Adding useDuration Helper in Motion Canvas\nDESCRIPTION: This commit adds a new helper function called useDuration to the Motion Canvas project. It addresses issue #171.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- add `useDuration` helper\n  ([#226](https://github.com/motion-canvas/motion-canvas/issues/226))\n  ([fa97d6c](https://github.com/motion-canvas/motion-canvas/commit/fa97d6c7f076f287c9b86d2f8852341bd368ef1c)),\n  closes [#171](https://github.com/motion-canvas/motion-canvas/issues/171)\n```\n\n----------------------------------------\n\nTITLE: Setting Null Image Source in Motion Canvas (TSX)\nDESCRIPTION: This code shows how to intentionally set a null source for an Img component to avoid warnings when no image is intended to be displayed. This is useful when you want to use an Img component without a visible image.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/image-without-source.md#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Img src={null} />\n```\n\n----------------------------------------\n\nTITLE: Code Remove Animation Result\nDESCRIPTION: The before and after states of a code removal animation, showing how the code will transition as the specified text is removed.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nvar myBool = true;\n// will animate to\nvar myBool;\n```\n\n----------------------------------------\n\nTITLE: Basic Non-Reactive Children Example in TSX\nDESCRIPTION: A non-reactive example where changing the count signal won't update the number of circles rendered, as the children are created once during initialization.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/spawners.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst count = createSignal(10);\n\nview.add(\n  <Layout layout>\n    {range(count()).map(() => (\n      <Circle size={32} fill={'white'} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes Content with Custom Components in JSX\nDESCRIPTION: This code snippet shows the structure of the release notes using custom components to group and display new features and bug fixes. It includes links to documentation and mentions of specific pull requests.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-08-13-version-3.17.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<IssueGroup type={'feat'}>\n  <Issue user={'levirs565'}>\n    The{' '}\n    <Link to=\"/docs/Latex\">\n      <code>Latex</code>\n    </Link>{' '}\n    node now supports tweening:\n    <PR id={800} />\n    <Fiddle\n      mode=\"preview\"\n      ratio=\"3\"\n      className=\"margin-top--sm margin-bottom--sm\"\n    >\n      {sourceLatex}\n    </Fiddle>\n  </Issue>\n  <Issue user={'squigglesdev'} pr={631}>\n    <code>?render</code> and <code>?present</code> url parameters can be used to\n    immediately start rendering or presenting when opening the editor.\n  </Issue>\n</IssueGroup>\n<IssueGroup type={'fix'}>\n  <Issue user={'aarthificial'} pr={1085}>\n    <Link to=\"/api/2d/components/Txt\">\n      <code>Txt</code>\n    </Link>{' '}\n    nodes properly support tweening emojis.\n  </Issue>\n  <Issue user={'aarthificial'} pr={1084}>\n    Fix stack overflow caused by restoring a{' '}\n    <Link to=\"/api/2d/components/Code\">\n      <code>Code</code>\n    </Link>{' '}\n    node\n  </Issue>\n  <Issue user={'aarthificial'} pr={1083}>\n    Prevent invalid cache sizes.\n  </Issue>\n  <Issue user={'aarthificial'} pr={1075}>\n    Fix line tweening.\n  </Issue>\n  <Issue user={'aarthificial'} pr={1061}>\n    Fix text alignment.\n  </Issue>\n</IssueGroup>\n```\n\n----------------------------------------\n\nTITLE: Adding Variables to Motion Canvas Player Component in HTML\nDESCRIPTION: This snippet demonstrates how to add project variables to the Motion Canvas player component by passing a stringified JSON object to the variables attribute.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/project-variables.mdx#2025-04-16_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<motion-canvas-player\n  src=\"/path/to/project.js\"\n  variables='{\"circleFill\":\"red\"}'\n></motion-canvas-player>\n```\n\n----------------------------------------\n\nTITLE: Incorrect Video Playback Rate with Signal\nDESCRIPTION: Shows incorrect usage of directly passing a signal to playbackRate.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/reactive-playback-rate.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.playbackRate(mySignal);\n```\n\n----------------------------------------\n\nTITLE: Motion Canvas Project Configuration\nDESCRIPTION: New project configuration structure using Project class instead of bootstrap function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Project} from '@motion-canvas/core/lib';\n\nimport example from './scenes/example.scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n  // same options as in bootstrap() are available:\n```\n\n----------------------------------------\n\nTITLE: Adding Local Font Files Structure\nDESCRIPTION: File structure modification to add local font files to the project\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\nroot\n└─public\n+ └─fonts *\n+   └─CASCADIACODE.TTF\n```\n\n----------------------------------------\n\nTITLE: Sequential Animation State Transitions\nDESCRIPTION: The sequence of code states that will be animated through with sequential edit operations, showing the progression of changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nvar myBool;\nvar myBool = true;\nvar myBool = false;\nvar myBool;\n```\n\n----------------------------------------\n\nTITLE: Creating Regular Polygon Component\nDESCRIPTION: Shows how to create a regular hexagon using the new Polygon component with specified sides, size, and fill color properties.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-03-10-version-3.2.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Polygon\n  sides={6}\n  size={300}\n  fill={'lightseagreen'}\n/>\n```\n\n----------------------------------------\n\nTITLE: Project Class Export Configuration\nDESCRIPTION: Demonstrates the new project configuration approach using the Project class instead of bootstrap function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Project} from '@motion-canvas/core/lib';\n\nimport example from './scenes/example.scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n  // same options as in bootstrap() are available:\n```\n\n----------------------------------------\n\nTITLE: Configuring a Motion Canvas Project\nDESCRIPTION: Example of a Motion Canvas project configuration file that imports and defines scenes to be displayed in the animation.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport {makeProject} from '@motion-canvas/core';\n\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Motion Canvas Type Reference Declaration\nDESCRIPTION: Shows the type reference declaration needed for Motion Canvas types in the project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@motion-canvas/core/project\" />\n```\n\n----------------------------------------\n\nTITLE: Version 3.7.0 Update Log\nDESCRIPTION: Changelog entry listing UI improvements including rendering button and metadata descriptions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- button for opening the output directory\n- meta field descriptions\n- **ui:** improve rendering button\n```\n\n----------------------------------------\n\nTITLE: Starting Motion Canvas Editor Development Server\nDESCRIPTION: Command to start the development server for working on the Motion Canvas editor. This watches the core, 2d, ui and vite-plugin packages using the template project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/README.md#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run template:dev\n```\n\n----------------------------------------\n\nTITLE: Custom Theme Definition\nDESCRIPTION: Shows how to define custom syntax highlighting themes using CodeMirror's HighlightStyle.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nimport {Code, LezerHighlighter} from '@motion-canvas/2d';\nimport {HighlightStyle} from '@codemirror/language';\nimport {tags} from '@lezer/highlight';\nimport {parser} from '@lezer/javascript';\n\nconst MyStyle = HighlightStyle.define([\n  {tag: tags.keyword, color: 'red'},\n  {tag: tags.function(tags.variableName), color: 'yellow'},\n  {tag: tags.number, color: 'blue'},\n  {tag: tags.string, color: 'green'},\n  // ...\n]);\n\nCode.defaultHighlighter = new LezerHighlighter(parser, MyStyle);\n```\n\n----------------------------------------\n\nTITLE: Using createRefMap() for Named References (TSX)\nDESCRIPTION: Using createRefMap() to group references by name, providing a convenient way to organize and access multiple references of the same type without individual declarations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefMap} from '@motion-canvas/core';\n\n// ...\n\nconst labels = createRefMap<Txt>();\nview.add(\n  <>\n    <Txt ref={labels.a}>A</Txt>\n    <Txt ref={labels.b}>B</Txt>\n    <Txt ref={labels.c}>C</Txt>\n  </>,\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multiple Generator Yielding in TypeScript\nDESCRIPTION: This snippet shows a common mistake where multiple generators are yielded individually and then passed to the `all` function. This incorrect usage can lead to the reuse of running generators and cause errors.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/threading/__logs__/reused-generator.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nyield* all(\n  yield rect().opacity(1, 1), \n  yield rect().x(200, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: New Project Meta Configuration in JSON\nDESCRIPTION: The new format for project configuration using a meta file in JSON format, including background color, audio offset, and rendering settings.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/migration/3.0.0.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": 1,\n  \"shared\": {\n    \"background\": \"rgb(20,20,20)\",\n    \"range\": [0, null],\n    \"size\": {\n      \"x\": 1920,\n      \"y\": 1080\n    },\n    \"audioOffset\": 2\n  },\n  \"preview\": {\n    \"fps\": 30,\n    \"resolutionScale\": 1\n  },\n  \"rendering\": {\n    \"fps\": 30,\n    \"resolutionScale\": 1,\n    \"colorSpace\": \"srgb\",\n    \"fileType\": \"image/png\",\n    \"quality\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Project Type Declaration Reference\nDESCRIPTION: Type declaration file needed to reference Motion Canvas core types in the project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@motion-canvas/core/project\" />\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Format in Markdown\nDESCRIPTION: Standard format for changelog entries following conventional commits style, including feature descriptions, issue references, and commit hashes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- **2d:** improve property declarations\n  ([27e7d26](https://github.com/motion-canvas/motion-canvas/commit/27e7d267ee91bf1e8ca79686b6ec31347f9f4d41))\n- **2d:** improve Rect corner radius\n  ([#120](https://github.com/motion-canvas/motion-canvas/issues/120))\n  ([b471fe0](https://github.com/motion-canvas/motion-canvas/commit/b471fe0e37c0a426d3af8299c9c3c22539e7df05))\n```\n\n----------------------------------------\n\nTITLE: Chaining Animation Methods in Motion Canvas\nDESCRIPTION: Demonstrates the new animation chaining methods in Motion Canvas that allow seamless sequencing of animations. The example shows scaling, tweening, waiting, callbacks, and running generators in a fluid chainable API.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-05-08-version-3.6.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nyield* circle().scale(0.5, 0.2)\n  // tween to another value\n  .to(2, 0.2)\n  // wait for one second\n  .wait(1)\n  // tween back to the initial value\n  .back(0.2)\n  // execute a callback\n  .do(() => circle().fill('red'))\n  // run the given generator\n  .run(circle().position.y(100, 2));\n```\n\n----------------------------------------\n\nTITLE: Updated Import Structure in Motion Canvas v3.9.0\nDESCRIPTION: Demonstrates the new simplified import approach in Motion Canvas v3.9.0 where most entities can be imported directly from the main package entry points. CodeBlock remains the only exception requiring a full path import.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-05-29-version-3.9.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport {all, createRef} from '@motion-canvas/core';\nimport {makeScene2D, Circle} from '@motion-canvas/2d';\n// the only exception:\nimport {CodeBlock, insert} from '@motion-canvas/2d/lib/components/CodeBlock';\n```\n\n----------------------------------------\n\nTITLE: Disabling Line Points with Null Value in TSX\nDESCRIPTION: Demonstrates how to explicitly disable line points by setting the points property to null. This can be used to suppress warning messages about missing points.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/line-without-points.md#2025-04-16_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Line stroke=\"#fff\" lineWidth={8} points={null} />\n```\n\n----------------------------------------\n\nTITLE: Using Glob Patterns in Motion Canvas Project Configuration\nDESCRIPTION: Example of how to use glob patterns in project configuration to specify multiple files, introduced in Motion Canvas v3.12.0.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-12-31-version-3.12.0.mdx#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n// motion-canvas.config.ts\nimport {defineConfig} from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  scenes: [\n    // Include all .tsx files in the scenes directory:\n    './scenes/**/*.tsx',\n    // Exclude all files in the scenes/excluded directory:\n    '!./scenes/excluded/**/*.tsx',\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Incorrect Video Playback Rate with Function\nDESCRIPTION: Shows incorrect usage of passing a function to playbackRate which is not supported.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/reactive-playback-rate.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.playbackRate(() => 7);\n```\n\n----------------------------------------\n\nTITLE: Simultaneous Edits Animation Result\nDESCRIPTION: The before and after states of multiple simultaneous code edits, showing how the code will transition when multiple changes are applied at once.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nvar myBool;\n// will animate to\nconst myBool = true;\n```\n\n----------------------------------------\n\nTITLE: Resetting CodeBlock Selection to Default\nDESCRIPTION: Example showing how to clear selections in a CodeBlock by either selecting all lines or using the DEFAULT constant to return to the default state.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport {DEFAULT} from '@motion-canvas/core';\n\n// highlight lines 1 and 2\nyield * codeRef().selection(lines(1, 2), 1);\n\n// highlight all lines\nyield * codeRef().selection(DEFAULT, 1);\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Motion Canvas (TypeScript)\nDESCRIPTION: Shows how to set up a Vite configuration file for a Motion Canvas project, including the necessary plugin.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {defineConfig} from 'vite';\nimport motionCanvas from '@motion-canvas/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n```\n\n----------------------------------------\n\nTITLE: Motion Canvas Project Configuration\nDESCRIPTION: Example of creating a new Motion Canvas project with scene imports using the updated project structure.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Project} from '@motion-canvas/core/lib';\n\nimport example from './scenes/example?scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Code Reference - Vector2.exactlyEquals\nDESCRIPTION: Inline code reference to the Vector2.exactlyEquals method that was fixed in this release.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-27-version-3.0.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nVector2.exactlyEquals\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes with JSX Components\nDESCRIPTION: A JSX implementation for displaying release notes that includes embedded components like IssueGroup, Issue, PullRequest, and image elements to showcase new features with visual examples.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-01-10-version-3.13.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<IssueGroup type={'feat'}>\n  <Issue user={'aarthificial'}>\n    A new scene graph tab lets you peek into the contents of the scene.\n    <PullRequest id={909} />\n    <PullRequest id={914} />\n    <a href={image} target=\"_blank\">\n      <img\n        src={thumbnail}\n        width=\"1280\"\n        height=\"720\"\n        alt=\"Scene Graph Tab\"\n        className=\"blog-img\"\n      />\n    </a>\n  </Issue>\n  <Issue user={'jmaen'} pr={907}>\n    Holding <kbd>Shift</kbd> + <kbd>Ctrl</kbd> lets you drag over the timeline\n    to select the range. <kbd>B</kbd> and <kbd>N</kbd> can be used to snap the\n    beginning and end of the range to the playhead.\n  </Issue>\n  <Issue user={'aarthificial'} pr={913} experimental>\n    Editor plugins can now register custom inspectors that display information\n    on the right side of the editor.\n  </Issue>\n</IssueGroup>\n<IssueGroup type={'fix'}>\n  <Issue user={'aarthificial'} pr={912}>\n    The mouse is tracked correctly when dragging time events.\n  </Issue>\n</IssueGroup>\n\n<small>\n  Check out <Link to=\"/docs/updating\">the Update Guide</Link> for information on\n  how to update your existing projects.\n</small>\n```\n\n----------------------------------------\n\nTITLE: Vector2 Method Chaining Example\nDESCRIPTION: Demonstrates the new ability to use PossibleVector2 arguments in Vector2 methods, allowing for more concise vector operations through method chaining.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-03-10-version-3.2.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nvector.add([100, 200]).mul(2);\n```\n\n----------------------------------------\n\nTITLE: Replacing Spawner with Children Property in Motion Canvas\nDESCRIPTION: Example showing how to migrate from the deprecated spawner to the new children property in Motion Canvas v3.12.0.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-12-31-version-3.12.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// DEPRECATED\nview.add(\n  <Circle\n    spawner={() => {\n      const rect = createRef<Rect>();\n      return [\n        <Rect ref={rect} />,\n        <Circle position={() => rect().position} />,\n      ];\n    }}\n  />,\n);\n\n// PREFERRED\nview.add(\n  <Circle>\n    {() => {\n      const rect = createRef<Rect>();\n      return [\n        <Rect ref={rect} />,\n        <Circle position={() => rect().position} />,\n      ];\n    }}\n  </Circle>,\n);\n```\n\n----------------------------------------\n\nTITLE: CodeBlock Auto-Indentation Result 2\nDESCRIPTION: The resulting code after auto-indentation is applied in the second example, demonstrating how whitespace is preserved relative to the least indented line.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n  console.log('Hello World!');\n// less indented\n  // more indented\n```\n\n----------------------------------------\n\nTITLE: Updating Project File for Node.js Plugin\nDESCRIPTION: Diff showing how to update the project file when using a Node.js plugin. The runtime plugin import is no longer needed as it's now handled through the entry point defined in the Node.js plugin.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n  import {makeProject} from '@motion-canvas/core';\n- import myPlugin from './plugin';\n  import example from './scenes/example?scene';\n\n  export default makeProject({\n    scenes: [example],\n-   plugins: [myPlugin()],\n  });\n```\n\n----------------------------------------\n\nTITLE: Importing Scenes with Query Parameter in TypeScript\nDESCRIPTION: Demonstrates the new way of importing scene files using the ?scene query parameter in the project file.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport example from './scenes/example?scene';\n\nexport default new Project({\n  name: 'project',\n  scenes: [example],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Motion Canvas with Command-line Arguments\nDESCRIPTION: Shows how to create a new Motion Canvas project using the 'npm init' command with arguments to bypass the interactive prompt, specifying project name, path, and language preference.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-05-13-version-3.8.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init @motion-canvas@latest -- --name Hello --path ./hello --language ts\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration from Node.js to Runtime Plugin\nDESCRIPTION: Enhanced Vite plugin that passes configuration options to the runtime plugin using the runtimeConfig property. This demonstrates how to share data between the Node.js and runtime environments.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Plugin, PLUGIN_OPTIONS} from '@motion-canvas/vite-plugin';\n\nexport default function myVitePlugin(): Plugin {\n  return {\n    name: 'vite-plugin-motion-canvas-example',\n    // ...\n    [PLUGIN_OPTIONS]: {\n      entryPoint: './plugin.ts',\n      // highlight-start\n      runtimeConfig: () => ({\n        foo: 'bar',\n      }),\n      // highlight-end\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Web Fonts via CSS\nDESCRIPTION: CSS configuration to import fonts from Google Fonts using @import directive\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/custom-font.mdx#2025-04-16_snippet_1\n\nLANGUAGE: css\nCODE:\n```\n@import url('https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&display=swap');\n```\n\n----------------------------------------\n\nTITLE: CodeBlock Import Example in TypeScript\nDESCRIPTION: Example showing the correct way to import the CodeBlock component using the full path after PR #401 reversion.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/migration/3.0.0.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {CodeBlock} from '@motion-canvas/2d/lib/components/CodeBlock';\n```\n\n----------------------------------------\n\nTITLE: Changelog Section Headers\nDESCRIPTION: Markdown section headers for organizing changelog entries by type.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n### Features\n### BREAKING CHANGES\n```\n\n----------------------------------------\n\nTITLE: Correct Multiple Generator Usage in TypeScript\nDESCRIPTION: This snippet demonstrates the correct way to use multiple generators with the `all` function. The generators are passed directly to `all` without being yielded individually, avoiding the reuse of running generators.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/threading/__logs__/reused-generator.md#2025-04-16_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nyield* all(\n  rect().opacity(1, 1), \n  rect().x(200, 1),\n);\n```\n\n----------------------------------------\n\nTITLE: Code Replace Animation Result\nDESCRIPTION: The before and after states of a code replacement animation, showing how the code will transition as one value is replaced with another.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nvar myBool = true;\n// will animate to\nvar myBool = false;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Signal Placement in Code Template\nDESCRIPTION: Shows what happens when a signal function is placed directly in a template string without being invoked.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    // prettier-ignore\n    <Code\n      fontSize={28}\n      code={`const ${nameSignal} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Grammar for Code Syntax Highlighting\nDESCRIPTION: Shows how to install the JavaScript grammar for code syntax highlighting using npm.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @lezer/javascript\n```\n\n----------------------------------------\n\nTITLE: Issue Links\nDESCRIPTION: Links to GitHub issues and pull requests referenced in the changelog\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[#627](https://github.com/motion-canvas/motion-canvas/issues/627)\n[#636](https://github.com/motion-canvas/motion-canvas/issues/636)\n[#635](https://github.com/motion-canvas/motion-canvas/issues/635)\n```\n\n----------------------------------------\n\nTITLE: Incorrect Inline #include Usage in GLSL\nDESCRIPTION: An approach that should be avoided - using #include directives in inline GLSL strings. The #include directive requires a preprocessor and won't work properly in this context.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/app/__logs__/include-without-preprocessor.md#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst shader = `\\\n#include \"example.glsl\"\n`;\n```\n\n----------------------------------------\n\nTITLE: Correct Video Playback Rate Setting\nDESCRIPTION: Demonstrates the correct way to set a video playback rate using a concrete value.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/reactive-playback-rate.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.playbackRate(7);\n```\n\n----------------------------------------\n\nTITLE: Rendering Update Guide Link in JSX\nDESCRIPTION: This snippet shows how to render a link to the update guide using the Link component from Docusaurus.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-08-13-version-3.17.0.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<small>\n  Check out <Link to=\"/docs/updating\">the Update Guide</Link> for information on\n  how to update your existing projects.\n</small>\n```\n\n----------------------------------------\n\nTITLE: Correct Video Playback Rate with Signal Value\nDESCRIPTION: Shows the correct way to use a signal by extracting its value before setting the playback rate.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/src/lib/components/__logs__/reactive-playback-rate.md#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nvideo.playbackRate(mySignal());\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities in JSX\nDESCRIPTION: This code snippet imports various custom components and utilities used in the release notes page. It includes imports for issue tracking, documentation linking, and code examples.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-04-06-version-3.5.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IssueGroup from '@site/src/components/Release/IssueGroup';\nimport Issue from '@site/src/components/Release/Issue';\nimport PullRequest from '@site/src/components/Release/PullRequest';\nimport Link from '@docusaurus/Link';\nimport Fiddle from '@site/src/components/Fiddle';\nimport sourceCubic from '!!raw-loader!@site/blog/2023-04-06-example-cubic.tsx';\nimport sourceQuadratic from '!!raw-loader!@site/blog/2023-04-06-example-quadratic.tsx';\n```\n\n----------------------------------------\n\nTITLE: Correct Loop Implementation in Motion Canvas\nDESCRIPTION: These examples show the correct ways to implement loops in Motion Canvas, either using yield without the asterisk or using spawn() to run the loop in a separate thread.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/flow/__logs__/infinite-loop.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield loop(() => rect().opacity(0).opacity(1, 1));\n// or\nspawn(loop(() => rect().opacity(0).opacity(1, 1)));\n```\n\n----------------------------------------\n\nTITLE: Source Code Reference - SVG Path Implementation\nDESCRIPTION: Referenced source code for demonstrating the new SVG Path component functionality\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-07-23-version-3.10.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nsourcePath\n```\n\n----------------------------------------\n\nTITLE: Incorrect Loop Implementation in Motion Canvas\nDESCRIPTION: This example shows the incorrect way to use a loop function in Motion Canvas. The yield* operator will wait for the loop to complete, which is problematic for infinite loops.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/flow/__logs__/infinite-loop.md#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// prettier-ignore\nyield* loop(() => rect().opacity(0).opacity(1, 1));\n```\n\n----------------------------------------\n\nTITLE: Importing a GLSL Shader File in TypeScript\nDESCRIPTION: The recommended way to import a shader file in Motion Canvas. This approach enables proper handling of the shader content.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/app/__logs__/include-without-preprocessor.md#2025-04-16_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport shader from './shader.glsl';\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Custom Components in JSX\nDESCRIPTION: This snippet demonstrates the import statements used in the release notes, including custom components for grouping and displaying issues and pull requests.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-08-13-version-3.17.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Link from '@docusaurus/Link';\nimport IssueGroup from '@site/src/components/Release/IssueGroup';\nimport Issue from '@site/src/components/Release/Issue';\nimport PR from '@site/src/components/Release/PullRequest';\nimport Fiddle from '@site/src/components/Fiddle';\nimport sourceLatex from '!!raw-loader!@site/blog/2024-08-13-latex';\n```\n\n----------------------------------------\n\nTITLE: Source Code Reference - Curve Implementation\nDESCRIPTION: Referenced source code for demonstrating Curve functionality in Rect and Circle nodes\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-07-23-version-3.10.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nsourceCurve\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js Version in Bash\nDESCRIPTION: Command to verify the installed Node.js version. This is a prerequisite check before creating a Motion Canvas project.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\n```\n\n----------------------------------------\n\nTITLE: Using Slide Transition in Motion Canvas (TypeScript)\nDESCRIPTION: Demonstrates the updated syntax for using slide transitions in Motion Canvas scenes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nyield * slideTranstion();\n```\n\n----------------------------------------\n\nTITLE: Creating a Fixup Commit for Review Feedback\nDESCRIPTION: These Git commands create a fixup commit for addressing review feedback and push it to the GitHub repository.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CONTRIBUTING.md#2025-04-16_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --all --fixup HEAD\ngit push\n```\n\n----------------------------------------\n\nTITLE: Advanced Logging with Payloads\nDESCRIPTION: Shows how to create detailed log messages using payloads that can include HTML, objects, duration, and stack traces.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/logging.mdx#2025-04-16_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nlogger.debug({\n  message: 'Some more advanced logging',\n  remarks: 'Some remarks about this log. Can also contain <b>HTML</b> tags.',\n  object: {\n    someProperty: 'some property value',\n  },\n  durationMs: 200,\n  stack: new Error('').stack,\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Project Configuration in TypeScript\nDESCRIPTION: Example of the old project configuration format in TypeScript that needs to be migrated to the new meta file format.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/migration/3.0.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {makeProject} from '@motion-canvas/core';\n\nimport example from './scenes/example?scene';\n\nexport default makeProject({\n  scenes: [example],\n  background: '#141414',\n  audioOffset: 2,\n});\n```\n\n----------------------------------------\n\nTITLE: Motion Canvas Type Reference\nDESCRIPTION: Type reference declaration for Motion Canvas project types.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/vite-plugin/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types=\"@motion-canvas/core/project\" />\n```\n\n----------------------------------------\n\nTITLE: Version 2.2.0 Release Notes in Markdown\nDESCRIPTION: Markdown formatted release notes detailing new features including project variables, Video component enhancements with new getters for duration/time/state, and a Firefox text rendering bugfix.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-09-version-2.2.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nslug: version-2.2.0\ntitle: Motion Canvas v2.2.0\nauthors: aarthificial\n---\n\n### Features\n\n- New [project variables](/docs/project-variables) let you create customizable\n  animations ([#255](https://github.com/motion-canvas/motion-canvas/issues/255))\n  ([4883295](https://github.com/motion-canvas/motion-canvas/commit/488329525939928af52b4a4d8488f1e1cd4cf6f7))\n- The [`Video`](/api/2d/components/Video) component has new getters for the\n  [duration](/api/2d/components/Video#getDuration),\n  [current time](/api/2d/components/Video#getCurrentTime), and\n  [state](/api/2d/components/Video#isPlaying) of the video\n  ([#240](https://github.com/motion-canvas/motion-canvas/issues/240))\n  ([59de5ab](https://github.com/motion-canvas/motion-canvas/commit/59de5ab2c089589773a2f9ad7588eda7d72693a7))\n\n### Bug Fixes\n\n- Text is now visible in Firefox without the need of a custom flag\n  ([#249](https://github.com/motion-canvas/motion-canvas/pull/249))\n  ([20a4d65](https://github.com/motion-canvas/motion-canvas/commit/20a4d65bbfa0c568e571274d9b6a16fb4327a5fa))\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git\nDESCRIPTION: This Git command commits all changes with a descriptive commit message following the Angular Commit Message Conventions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CONTRIBUTING.md#2025-04-16_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit commit --all\n```\n\n----------------------------------------\n\nTITLE: Importing Components in JSX\nDESCRIPTION: Imports custom components and React components used in the release notes page.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-20-version-2.5.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport IssueGroup from '@site/src/components/Release/IssueGroup';\nimport Issue from '@site/src/components/Release/Issue';\nimport Link from '@docusaurus/Link';\n```\n\n----------------------------------------\n\nTITLE: CodeBlock Auto-Indentation Result 1\nDESCRIPTION: The resulting code after auto-indentation is applied, showing how indentation is normalized based on the least indented line.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code-block.mdx#2025-04-16_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconsole.log('Hello World!');\n  // more indented\n// less indented\n```\n\n----------------------------------------\n\nTITLE: Code Reference - endOffset Property\nDESCRIPTION: Inline code reference to the endOffset property whose initial value was fixed in this release.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-27-version-3.0.0.mdx#2025-04-16_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nendOffset\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes in JSX\nDESCRIPTION: JSX code structure for rendering the release notes, including new features and bug fixes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-20-version-2.5.0.mdx#2025-04-16_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<IssueGroup type={'feat'}>\n  <Issue user={'gustavneustadt'} pr={356}>\n    New{' '}\n    <Link to=\"/docs/tweening#spring-function\">\n      <code>spring</code>\n    </Link>{' '}\n    interpolation.\n  </Issue>\n  <Issue user={'aarthificial'} pr={378}>\n    <Link to=\"/api/2d/components/Circle#closed\">\n      <code>closed</code>\n    </Link>{' '}\n    property lets you make wedges using <code>Circle</code>s.\n  </Issue>\n  <Issue user={'DanielBreiner'} pr={384}>\n    New{' '}\n    <Link to=\"/docs/transitions#fadetransition\">\n      <code>fadeTransition</code>\n    </Link>\n    .\n  </Issue>\n  <Issue user={'ksassnowski'} pr={373}>\n    The{' '}\n    <Link to=\"/api/core/utils#range\">\n      <code>range</code>\n    </Link>{' '}\n    function now accepts an additional <code>step</code> parameter.\n  </Issue>\n  <Issue user={'dariasc'} pr={379}>\n    <code>View2D</code> now extends <code>Rect</code> allowing you to change the\n    background color of a scene using the <code>fill</code> property.\n  </Issue>\n</IssueGroup>\n<hr />\n<IssueGroup type={'fix'}>\n  <Issue user={'aarthificial'} pr={387}>\n    Support <code>Color</code> to <code>null</code> tweening.\n  </Issue>\n  <Issue user={'aarthificial'} pr={385}>\n    Plug memory leaks.\n  </Issue>\n  <Issue user={'aarthificial'} pr={382}>\n    Fix signal initialization.\n  </Issue>\n  <Issue user={'aarthificial'} pr={381}>\n    Handle floating point errors in acos.\n  </Issue>\n</IssueGroup>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to GitHub\nDESCRIPTION: This Git command pushes the 'my-fix-branch' to the origin repository on GitHub.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CONTRIBUTING.md#2025-04-16_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin my-fix-branch\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Video Component in React/JSX\nDESCRIPTION: Import statement for a custom YouTube video component used to embed video content in the blog post page.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-04-public-release.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport YouTubeVideo from '@site/src/components/YouTubeVideo';\n```\n\n----------------------------------------\n\nTITLE: Creating a Motion Canvas Vite Plugin\nDESCRIPTION: Implementation of a Vite plugin for Motion Canvas that adds a custom server endpoint and specifies the runtime plugin entry point using the PLUGIN_OPTIONS symbol.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/advanced/plugins/node.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {Plugin, PLUGIN_OPTIONS} from '@motion-canvas/vite-plugin';\n\nexport default function myVitePlugin(): Plugin {\n  return {\n    name: 'vite-plugin-motion-canvas-example',\n\n    // extend the dev server using Vite plugin hooks:\n    configureServer(server) {\n      server.middlewares.use('/my-plugin', (req, res) => {\n        res.end('Hello from my plugin!');\n      });\n    },\n\n    // extend Motion Canvas:\n    [PLUGIN_OPTIONS]: {\n      entryPoint: './plugin.ts',\n    },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Components and Utilities in JSX\nDESCRIPTION: This code snippet imports various custom components and utilities used in the release notes page. It includes components for displaying issues, pull requests, and interactive code examples.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2024-02-04-version-3.14.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport IssueGroup from '@site/src/components/Release/IssueGroup';\nimport Issue from '@site/src/components/Release/Issue';\nimport PR from '../src/components/Release/PullRequest';\nimport Fiddle from '@site/src/components/Fiddle';\nimport Link from '@docusaurus/Link';\nimport sourceShader from '!!raw-loader!@site/blog/2024-02-04-shaders.tsx';\n```\n\n----------------------------------------\n\nTITLE: Section Headers - Markdown\nDESCRIPTION: Headers denoting different sections of the changelog.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\\n\\n### Features\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video Component in React/JSX\nDESCRIPTION: Usage of the YouTubeVideo component to embed a video about Motion Canvas in the blog post.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-04-public-release.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<YouTubeVideo src=\"https://www.youtube.com/embed/H5GETOP7ivs\" />\n```\n\n----------------------------------------\n\nTITLE: Keyboard Shortcut Reference - SHIFT\nDESCRIPTION: Reference to the SHIFT key used for adjusting audio offset by dragging the waveform.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-27-version-3.0.0.mdx#2025-04-16_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nSHIFT\n```\n\n----------------------------------------\n\nTITLE: NPM Install ENOENT Error Message\nDESCRIPTION: Error message shown when npm install fails due to missing package.json file, typically caused by running the command in the wrong directory.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm ERR! code ENOENT\nnpm ERR! syscall open\nnpm ERR! path [path]\\package.json\nnpm ERR! errno -4058\nnpm ERR! enoent ENOENT: no such file or directory, open '[path]\\package.json'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent\n```\n\n----------------------------------------\n\nTITLE: Semantic Version Number Format\nDESCRIPTION: Version number comparison using GitHub compare URL format.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/motion-canvas/motion-canvas/compare/v3.0.0...v3.0.1)\n```\n\n----------------------------------------\n\nTITLE: Version Release Entry 3.0.0\nDESCRIPTION: Major version release changelog documenting breaking changes, bug fixes and new features like playback architecture.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# [3.0.0](https://github.com/motion-canvas/motion-canvas/compare/v2.6.0...v3.0.0) (2023-02-27)\n\n### Bug Fixes\n\n- **2d:** fix performance issue with audio track\n  ([#427](https://github.com/motion-canvas/motion-canvas/issues/427))\n  ([c993770](https://github.com/motion-canvas/motion-canvas/commit/c993770937ddfdf0ac39b144a1f79f1a300f7899))\n- **ui:** correctly reset zoom\n  ([#432](https://github.com/motion-canvas/motion-canvas/issues/432))\n  ([a33ee14](https://github.com/motion-canvas/motion-canvas/commit/a33ee14dfac3e1fe24c89d76631e23fe4cb625a6))\n```\n\n----------------------------------------\n\nTITLE: Version Reference\nDESCRIPTION: Example of version comparison syntax used in changelog entries.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nv3.3.4...v3.3.3\n```\n\n----------------------------------------\n\nTITLE: Visual Representation of Scene Hierarchy Using Mermaid\nDESCRIPTION: A Mermaid diagram showing the tree structure of a sample scene with Scene View as the root, containing Circle and Layout nodes, with Layout containing Rect and Text nodes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/hierarchy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n  view[Scene View]\n  circle([Circle])\n  layout([Layout])\n  rect([Rect])\n  text([text 'Hi'])\n    view-->circle;\n    view-->layout;\n    layout-->rect;\n    layout-->text;\n```\n\n----------------------------------------\n\nTITLE: Incorrect Shader Import Using Raw Loader\nDESCRIPTION: An incorrect approach to importing a shader file using the raw loader, which should be avoided in Motion Canvas projects.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/app/__logs__/include-without-preprocessor.md#2025-04-16_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport shader from './shader.glsl?raw';\n```\n\n----------------------------------------\n\nTITLE: Commit SHA Example\nDESCRIPTION: Example of a Git commit SHA reference used in the changelog entries.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n8de199eaf833622a96ad746c984fb7f3a77df4b8\n```\n\n----------------------------------------\n\nTITLE: Alternative Motion Canvas Project Creation Command\nDESCRIPTION: Alternative command to create a Motion Canvas project when the standard npm init command fails due to a known npm bug fixed in version 8.15.1.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm exec @motion-canvas/create@latest\n```\n\n----------------------------------------\n\nTITLE: Issue Reference\nDESCRIPTION: Example of GitHub issue reference syntax used in changelog entries.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#555\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch for Changes in Git\nDESCRIPTION: This Git command creates a new branch called 'my-fix-branch' based on the main branch for making changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CONTRIBUTING.md#2025-04-16_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b my-fix-branch main\n```\n\n----------------------------------------\n\nTITLE: Starting the Motion Canvas Editor\nDESCRIPTION: Command to start the Motion Canvas editor, which can be accessed at http://localhost:9000/ for previewing animations.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Version 3.9.0 Update Log\nDESCRIPTION: Changelog entry showing bug fixes and feature additions including color picker prevention and coordinate previews.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **ui:** prevent spawning multiple color pickers\n- **ui:** support small ranges\n\n### Features\n\n- add coordinates to preview\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Links\nDESCRIPTION: Version comparison links for tracking changes between different releases of Motion Canvas\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[3.5.1](https://github.com/motion-canvas/motion-canvas/compare/v3.5.0...v3.5.1)\n[3.5.0](https://github.com/motion-canvas/motion-canvas/compare/v3.4.0...v3.5.0)\n[3.4.0](https://github.com/motion-canvas/motion-canvas/compare/v3.3.4...v3.4.0)\n[3.3.4](https://github.com/motion-canvas/motion-canvas/compare/v3.3.3...v3.3.4)\n[3.3.3](https://github.com/motion-canvas/motion-canvas/compare/v3.3.2...v3.3.3)\n[3.3.2](https://github.com/motion-canvas/motion-canvas/compare/v3.3.1...v3.3.2)\n```\n\n----------------------------------------\n\nTITLE: Rendering Release Notes Components in JSX\nDESCRIPTION: This code snippet demonstrates the usage of custom components to render release notes for Motion Canvas v3.1.0. It includes IssueGroup and Issue components to structure the information about new features and bug fixes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-03-07-version-3.1.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<IssueGroup type={'feat'}>\n  <Issue user={'aarthificial'} pr={486}>\n    New <Link to=\"/docs/presentation\">Presentation Mode</Link> lets you present\n    your animations live.\n  </Issue>\n  <Issue user={'aarthificial'} pr={451}>\n    New{' '}\n    <Link to=\"/api/2d/components/Layout#textAlign\">\n      <code>textAlign</code>\n    </Link>{' '}\n    property.\n  </Issue>\n  <Issue user={'ksassnowski'} pr={485}>\n    New{' '}\n    <Link to=\"/api/core/types/BBox#intersects\">\n      <code>intersects</code>\n    </Link>{' '}\n    method for the <code>BBox</code> type.\n  </Issue>\n</IssueGroup>\n<IssueGroup type={'fix'}>\n  <Issue user={'aarthificial'} pr={471}>\n    Fix playback state.\n  </Issue>\n  <Issue user={'aarthificial'} pr={467}>\n    Fix cache bbox for lines.\n  </Issue>\n  <Issue user={'aarthificial'} pr={461}>\n    Fix relative time.\n  </Issue>\n  <Issue user={'aarthificial'} pr={450}>\n    Support multiple async players.\n  </Issue>\n  <Issue user={'aarthificial'} pr={448}>\n    Fix <code>letterSpacing</code>.\n  </Issue>\n</IssueGroup>\n```\n\n----------------------------------------\n\nTITLE: Version Identifiers and Links - Markdown\nDESCRIPTION: Version number declarations and links to version comparisons on GitHub.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.3.1](https://github.com/motion-canvas/motion-canvas/compare/v3.3.0...v3.3.1) (2023-03-18)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Motion Canvas\nDESCRIPTION: Command to install the necessary dependencies for a Motion Canvas project after scaffolding.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry Version 3.1.0\nDESCRIPTION: Changelog entry documenting new features like package version display and shortcut listing.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n- display current package versions\n  ([#501](https://github.com/motion-canvas/motion-canvas/issues/501))\n  ([2972f67](https://github.com/motion-canvas/motion-canvas/commit/2972f673e201310e69688ab6f2c1adf1cddf2bf3))\n- **ui:** list available shortcuts\n  ([#444](https://github.com/motion-canvas/motion-canvas/issues/444))\n  ([443fcc9](https://github.com/motion-canvas/motion-canvas/commit/443fcc9feb1a1ca69aecbc4db2e194ce4f50f72e))\n```\n\n----------------------------------------\n\nTITLE: Git Commit Reference\nDESCRIPTION: Reference to a git commit hash with link to GitHub issue.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n([#442](https://github.com/motion-canvas/motion-canvas/issues/442)) ([c116c35](https://github.com/motion-canvas/motion-canvas/commit/c116c355179ba3b2487634fb82b9a5bc2ea266bf))\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry - Bug Fixes and Refactoring\nDESCRIPTION: A markdown formatted changelog detailing bug fixes and refactoring changes in the Motion Canvas project, including commit hashes and issue references.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/2d/CHANGELOG.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **2d:** add missing shape export\n  ([#111](https://github.com/motion-canvas/motion-canvas/issues/111))\n  ([02a1fa7](https://github.com/motion-canvas/motion-canvas/commit/02a1fa7ea62155e498809f2e57ff29a18c82ac12))\n- **2d:** fix import order\n  ([#94](https://github.com/motion-canvas/motion-canvas/issues/94))\n  ([bcc0bcf](https://github.com/motion-canvas/motion-canvas/commit/bcc0bcffae47855bd8f7ab06454aaebe93c4aa24)),\n  closes [#76](https://github.com/motion-canvas/motion-canvas/issues/76)\n- **2d:** fix Line overview crashing\n  ([#142](https://github.com/motion-canvas/motion-canvas/issues/142))\n  ([6bd5fd9](https://github.com/motion-canvas/motion-canvas/commit/6bd5fd941e583e44f5d920ecd20215efb1eed58a))\n- **2d:** some signal setters not returning owners\n  ([#143](https://github.com/motion-canvas/motion-canvas/issues/143))\n  ([09ab7f9](https://github.com/motion-canvas/motion-canvas/commit/09ab7f96afcaae608399a653c0b4878ba9b467d4))\n- **2d:** switch iframes to ShadowDOM\n  ([#90](https://github.com/motion-canvas/motion-canvas/issues/90))\n  ([86176be](https://github.com/motion-canvas/motion-canvas/commit/86176be055c08aba59272afcda00ed586f6c7ad6))\n- fix scaffolding\n  ([#93](https://github.com/motion-canvas/motion-canvas/issues/93))\n  ([95c55ed](https://github.com/motion-canvas/motion-canvas/commit/95c55ed338127dad22f42b24c8f6b101b8863be7))\n- previous scene being rendered twice\n  ([#97](https://github.com/motion-canvas/motion-canvas/issues/97))\n  ([90205bd](https://github.com/motion-canvas/motion-canvas/commit/90205bdc1a086abe5f73b04cb4616c6af5ec4377))\n- use correct scene sizes\n  ([#146](https://github.com/motion-canvas/motion-canvas/issues/146))\n  ([f279638](https://github.com/motion-canvas/motion-canvas/commit/f279638f9ad7ed1f4c44900d48c10c2d6560946e))\n\n### Code Refactoring\n\n- remove legacy package\n  ([6a84120](https://github.com/motion-canvas/motion-canvas/commit/6a84120d949a32dff0ad413a9f359510ff109af1))\n```\n\n----------------------------------------\n\nTITLE: Version 3.8.0 Update Log\nDESCRIPTION: Changelog entry documenting audio fixes and animation-related feature additions.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/ui/CHANGELOG.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- **2d:** fix audio offset editing\n\n### Features\n\n- **2d:** expand animations and reduced motion\n- **2d:** visual feedback about rendering process\n- add new hooks for plugins\n- display array values in inspector\n```\n\n----------------------------------------\n\nTITLE: Displaying Git Commit Hash in Markdown\nDESCRIPTION: Shows the format for displaying a Git commit hash as part of a changelog entry in Markdown. This is used throughout the changelog to reference specific commits related to features or fixes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n([b870873](https://github.com/motion-canvas/motion-canvas/commit/b8708732af0fc08d9ff9eeecbbb77d65f1b36eb8))\n```\n\n----------------------------------------\n\nTITLE: Formatting Version Header in Markdown\nDESCRIPTION: Demonstrates how to format a version header in a changelog using Markdown. This includes the version number, link to compare with previous version, and the release date.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/CHANGELOG.md#2025-04-16_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n# [2.2.0](https://github.com/motion-canvas/motion-canvas/compare/v2.1.0...v2.2.0) (2023-02-09)\n```\n\n----------------------------------------\n\nTITLE: Issue and Commit References - Markdown\nDESCRIPTION: References to GitHub issues and commit hashes for tracking changes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/CHANGELOG.md#2025-04-16_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[#553](https://github.com/motion-canvas/motion-canvas/issues/553)\\n([229afb4](https://github.com/motion-canvas/motion-canvas/commit/229afb4fe7d95f09b480ab4a813f8dff549f381f))\n```\n\n----------------------------------------\n\nTITLE: Code Reference - textDirection Property\nDESCRIPTION: Inline code reference to the textDirection property used for RTL/LTR text direction configuration.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/blog/2023-02-27-version-3.0.0.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\ntextDirection\n```\n\n----------------------------------------\n\nTITLE: Incorrect Signal Usage in Code Component\nDESCRIPTION: Demonstrates a common mistake when using signals within template strings for Code components.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/index.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeScene2D, Code} from '@motion-canvas/2d';\nimport {waitFor} from '@motion-canvas/core';\n\nexport default makeScene2D(function* (view) {\n  const nameSignal = Code.createSignal('number');\n  view.add(\n    // prettier-ignore\n    <Code\n      fontSize={28}\n      code={`const ${nameSignal()} = 7;`}\n    />,\n  );\n\n  yield* waitFor(1);\n  nameSignal('newValue');\n  // The code snippet still displays \"number\" instead of \"newValue\".\n  yield* waitFor(1);\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Grammar List in JSX\nDESCRIPTION: This code snippet uses JSX to render a list of Lezer grammars. It maps over a GRAMMARS array to display each grammar's name, URL, and npm installation command.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/components/code/grammars.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<>\n  {GRAMMARS.map(g => (\n    <>\n      <h4>\n        <a href={g.url}>{g.name}</a>\n      </h4>\n      <CodeBlock language=\"bash\">npm i {g.package}</CodeBlock>\n    </>\n  ))}\n</>\n```\n\n----------------------------------------\n\nTITLE: Complex Scene Structure with Variable References (TSX)\nDESCRIPTION: An example showing how using variables to store references can make scene structure harder to read when dealing with multiple nested nodes.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst rectA = <Rect />;\nconst rectB = <Rect />;\nconst circle = <Circle>{rectA}</Circle>;\nview.add(\n  <Layout>\n    {circle}\n    {rectB}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Creating an Array of References with makeRef() (TSX)\nDESCRIPTION: Using makeRef() to create an array of node references when generating multiple similar nodes in a loop, assigning each node to its corresponding index.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst circles: Circle[] = [];\nview.add(\n  <Layout>\n    {range(10).map(index => (\n      <Circle ref={makeRef(circles, index)} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Using makeRef() for Object Property Assignment (TSX)\nDESCRIPTION: A simplified approach to assigning a node instance to an object property using the makeRef() utility function, which reduces boilerplate code.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {makeRef} from '@motion-canvas/core';\n\n// ...\n\nconst circle = {instance: null as Circle};\nview.add(\n  <Circle ref={makeRef(circle, 'instance')} />,\n);\n```\n\n----------------------------------------\n\nTITLE: Using createRefArray() for Collections of References (TSX)\nDESCRIPTION: A simpler approach to creating an array of references using the createRefArray() helper function, which automatically appends references to the array.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/references.mdx#2025-04-16_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {createRefArray, range} from '@motion-canvas/core';\n\n// ...\n\nconst circles = createRefArray<Circle>();\nview.add(\n  <Layout>\n    {range(10).map(() => (\n      <Circle ref={circles} />\n    ))}\n  </Layout>,\n);\n```\n\n----------------------------------------\n\nTITLE: Incorrect Reuse of Running Generator in TypeScript\nDESCRIPTION: This snippet shows an incorrect attempt to yield a task that is already running, which will cause an error. It's provided as an example of what not to do when working with generators.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/core/src/threading/__logs__/reused-generator.md#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nyield task;\n```\n\n----------------------------------------\n\nTITLE: Simplified Range Mapping with Timing Functions\nDESCRIPTION: Shows how to simplify the code by passing the range directly to the timing function instead of using the map function.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/tweening.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// This:\nmap(-300, 300, easeInOutCubic(value));\n// Can be simplified to:\neaseInOutCubic(value, -300, 300);\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory in Bash\nDESCRIPTION: Command to change directory to the project root after scaffolding. Requires replacing the placeholder with the actual project path.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/quickstart.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd <project-path>\n```\n\n----------------------------------------\n\nTITLE: Invalid Scene Fragment Example\nDESCRIPTION: Shows an incorrect way of defining a scene that will cause errors with Camera.Stage.\nSOURCE: https://github.com/motion-canvas/motion-canvas/blob/main/packages/docs/docs/getting-started/camera.mdx#2025-04-16_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst scene = (\n  <>\n    <Circle />\n    <Rect />\n  </>\n);\n```"
  }
]