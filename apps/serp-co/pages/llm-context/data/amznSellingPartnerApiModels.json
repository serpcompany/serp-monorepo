[
  {
    "owner": "amzn",
    "repo": "selling-partner-api-models",
    "content": "TITLE: Making API Call to Orders API Using Python SDK\nDESCRIPTION: Example code that initializes the SP-API client with credentials and makes a call to the Orders API getOrders operation.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n\t \n    from auth.credentials import SPAPIConfig\n    config = SPAPIConfig(\n        client_id=\"Your client-id\",\n        client_secret=\"Your client-secret\",\n        refresh_token=\"Your refresh-token\",\n        region=\"NA\",  # Possible values NA, EU, FE, and SANDBOX\n        scope = None # Required for grant_type='client_credentials' ; Possible values \"sellingpartnerapi::notifications\" and \"sellingpartnerapi::migration\"\n    )\n\t \n    from spapi.spapiclient import SPAPIClient\n\t \n    # Create the API Client\n    print(\"Config and client initialized...\")\n    api_client = SPAPIClient(config)\n\t \n    marketplace_ids = [\"ATVPDKIKX0DER\"]\n    created_after = \"2024-01-19T00:00:00\"\n\t \n    orders_api = api_client.get_api_client('OrdersV0Api')\n    orders_response = orders_api.get_orders(marketplace_ids=marketplace_ids, created_after=created_after)\n    print(\"Orders API Response:\")\n    print(orders_response)\n```\n\n----------------------------------------\n\nTITLE: Calling SP-API with access token in JavaScript\nDESCRIPTION: Example of how to use the SDK to call a Selling Partner API operation using a manually managed access token.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SellersApi, ApiClient as SellersApiClient } from '../../sdk/src/sellers/index.js';\n\nconst sellerApiClient = new SellersApiClient(\"https://sellingpartnerapi-fe.amazon.com\");\nconst sellerApi = new SellersApi(sellerApiClient);\nsellerApiClient.applyXAmzAccessTokenToRequest(\"<access token you retrieve yourself>\");\nconst participations = await sellerApi.getMarketplaceParticipations();\n```\n\n----------------------------------------\n\nTITLE: Calling RDT-required SP-API operation in JavaScript\nDESCRIPTION: Example of how to use the SDK to call a Restricted Data Token (RDT) required Selling Partner API operation.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { OrdersV0Api, ApiClient as OrdersApiClient } from '../../sdk/src/ordersV0/index.js';\n\nconst ordersApiClient = new OrdersApiClient(\"https://sellingpartnerapi-fe.amazon.com\");\nordersApiClient.enableAutoRetrievalRestrictedDataToken(\"<client ID>\",\n    \"<client secret>\", \"<refresh token>\", [\"buyerInfo\", \"shippingAddress\"]);\nconst ordersApi = new OrdersV0Api(ordersApiClient);\nconst order = await ordersApi.getOrder(\"<order ID to retrieve>\");\n```\n\n----------------------------------------\n\nTITLE: Calling SP-API operation with LWA credentials in JavaScript\nDESCRIPTION: Example of how to use the generated SDK to call a Selling Partner API operation using Login with Amazon credentials.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { SellersApi, ApiClient as SellersApiClient } from '../../sdk/src/sellers/index.js';\n\nconst sellerApiClient = new SellersApiClient(\"https://sellingpartnerapi-na.amazon.com\");\nconst sellerApi = new SellersApi(sellerApiClient);\nsellerApiClient.enableAutoRetrievalAccessToken(\"<client ID>\", \"<client secret>\", \"<refresh token>\");\nconst participations = await sellerApi.getMarketplaceParticipations();\n```\n\n----------------------------------------\n\nTITLE: Using LWA Token refresh helper in JavaScript\nDESCRIPTION: Example of how to use the LwaAuthClient helper class to execute the Login with Amazon token refresh flow.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { LwaAuthClient } from \"<path to helper/LwaAuthClient.mjs>\";\n\nconst lwaClient = new LwaAuthClient(\"<client ID>\", \"<client secret>\", \"<refresh token>\");\nconst accessToken = await lwaClient.getAccessToken();\n```\n\n----------------------------------------\n\nTITLE: Initializing LWAAuthorizationSigner for Seller APIs in Java\nDESCRIPTION: This snippet demonstrates how to create an LWAAuthorizationCredentials object and use it with LWAAuthorizationSigner to sign a request for Seller APIs. It includes setting up the credentials with client ID, secret, refresh token, and endpoint.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-java/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\ncom.squareup.okhttp.Request request = new Request.Builder()\n    .url(...)\n    ...\n    .build();\n\n// Seller APIs\n\nLWAAuthorizationCredentials lwaAuthorizationCredentials = LWAAuthorizationCredentials.builder()\n    .clientId(\"...\")\n    .clientSecret(\"...\")\n    .refreshToken(\"...\")\n    .endpoint(\"...\")\n    .build();\n\ncom.squareup.okhttp.Request signedRequest = new LWAAuthorizationSigner(lwaAuthorizationCredentials)\n    .sign(request);\n```\n\n----------------------------------------\n\nTITLE: Implementing LWA Authorization for Seller APIs in C#\nDESCRIPTION: Example showing how to obtain and sign requests with LWA access tokens for seller-based API endpoints using RestSharp. Demonstrates credential setup and request signing.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-csharp/README.md#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing RestSharp;\nusing Amazon.SellingPartnerAPIAA;\n\nstring resource = \"/my/api/path\";\nRestClient restClient = new RestClient(\"https://...\");\nIRestRequest restRequest = new RestRequest(resource, Method.GET);\n\n// Seller APIs\nLWAAuthorizationCredentials lwaAuthorizationCredentials = new LWAAuthorizationCredentials\n{\n    ClientId = \"...\",\n    ClientSecret = \"\",\n    RefreshToken = \"\",\n    Endpoint = new Uri(\"...\")\n};\n\nrestRequest = new LWAAuthorizationSigner(lwaAuthorizationCredentials).Sign(restRequest);\n```\n\n----------------------------------------\n\nTITLE: Initializing LWA Authorization Signer for Amazon SP-API\nDESCRIPTION: Example showing how to initialize the LWA authorization signer and configure it for use with the Selling Partner API. Demonstrates setting up credentials, configuring the endpoint region, and creating an API client instance.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-php/README.md#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$lwaAuthorizationCredentials = new LWAAuthorizationCredentials([\n\"clientId\" => '.....',\n\"clientSecret\" => '.....',\n\"refreshToken\" => '.....',\n\"endpoint\" => 'https://api.amazon.com/auth/o2/token'\n]);\n\n// Initialize LWAAuthorizationSigner instance\n$lwaAuthorizationSigner = new LWAAuthorizationSigner($lwaAuthorizationCredentials);\n$config = new Configuration([], $lwaAuthorizationCredentials);\n\n// Setting SP-API endpoint region. Change it according to the desired region\n$config->setHost('https://sellingpartnerapi-na.amazon.com');\n\n// Create a new HTTP client\n$client = new GuzzleHttp\\Client();\n\n// Create an instance of the Orders Api client\n$api = new OrdersApi($config, null, $client);\n```\n\n----------------------------------------\n\nTITLE: Encrypting and Uploading Documents in Java\nDESCRIPTION: This snippet demonstrates how to encrypt and upload documents using the UploadHelper class. It includes two methods: one for uploading from a String and another using PipedInputStream for larger documents.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-documents-helper-java/README.md#2025-04-23_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.io.PipedInputStream;\nimport java.io.PipedOutputStream;\nimport java.nio.charset.StandardCharsets;\n\nimport com.amazon.spapi.documents.UploadHelper;\nimport com.amazon.spapi.documents.UploadSpecification;\nimport com.amazon.spapi.documents.exception.CryptoException;\nimport com.amazon.spapi.documents.exception.HttpResponseException;\nimport com.amazon.spapi.documents.impl.AESCryptoStreamFactory;\n\npublic class UploadExample {\n    private final UploadHelper uploadHelper = new UploadHelper.Builder().build();\n\n    public void encryptAndUpload_fromString(String key, String initializationVector, String url) {\n        AESCryptoStreamFactory aesCryptoStreamFactory =\n                new AESCryptoStreamFactory.Builder(key, initializationVector)\n                        .build();\n\n        String contentType = String.format(\"text/plain; charset=%s\", StandardCharsets.UTF_8);\n\n        try (InputStream source = new ByteArrayInputStream(\"my document contents\".getBytes(StandardCharsets.UTF_8))) {\n            UploadSpecification uploadSpec =\n                    new UploadSpecification.Builder(contentType, aesCryptoStreamFactory, source, url)\n                            .build();\n\n            uploadHelper.upload(uploadSpec);\n        } catch (CryptoException | HttpResponseException | IOException e) {\n            // Handle exception.\n        }\n    }\n    public void encryptAndUpload_fromPipedInputStream(String key, String initializationVector, String url) {\n        AESCryptoStreamFactory aesCryptoStreamFactory =\n                new AESCryptoStreamFactory.Builder(key, initializationVector)\n                        .build();\n\n        String contentType = String.format(\"text/plain; charset=%s\", StandardCharsets.UTF_8);\n\n        try (PipedInputStream source = new PipedInputStream()) {\n            new Thread (\n                new Runnable() {\n                    public void run() {\n                        try (PipedOutputStream documentContents = new PipedOutputStream(source)) {\n                            documentContents.write(\"my document contents\\n\".getBytes(StandardCharsets.UTF_8));\n                            documentContents.write(\"more document contents\".getBytes(StandardCharsets.UTF_8));\n                        } catch (IOException e) {\n                            // Handle exception.\n                        }\n                    }\n                }\n            ).start();\n\n            UploadSpecification uploadSpec =\n                    new UploadSpecification.Builder(contentType, aesCryptoStreamFactory, source, url)\n                            .build();\n\n            uploadHelper.upload(uploadSpec);\n        } catch (CryptoException | HttpResponseException | IOException e) {\n            // Handle exception.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading and Decrypting Documents in Java\nDESCRIPTION: This snippet shows how to download and decrypt documents using the DownloadHelper class. It handles compressed documents and reads the decrypted content line by line.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-documents-helper-java/README.md#2025-04-23_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport java.io.BufferedReader;\nimport java.io.IOException;\n\nimport com.amazon.spapi.documents.CompressionAlgorithm;\nimport com.amazon.spapi.documents.DownloadBundle;\nimport com.amazon.spapi.documents.DownloadHelper;\nimport com.amazon.spapi.documents.DownloadSpecification;\nimport com.amazon.spapi.documents.exception.CryptoException;\nimport com.amazon.spapi.documents.exception.HttpResponseException;\nimport com.amazon.spapi.documents.exception.MissingCharsetException;\nimport com.amazon.spapi.documents.impl.AESCryptoStreamFactory;\n\npublic class DownloadExample {\n    final DownloadHelper downloadHelper = new DownloadHelper.Builder().build();\n\n    public void downloadAndDecrypt(String key, String initializationVector, String url, String compressionAlgorithm) {\n        AESCryptoStreamFactory aesCryptoStreamFactory =\n                new AESCryptoStreamFactory.Builder(key, initializationVector).build();\n\n        DownloadSpecification downloadSpec = new DownloadSpecification.Builder(aesCryptoStreamFactory, url)\n                .withCompressionAlgorithm(CompressionAlgorithm.fromEquivalent(compressionAlgorithm))\n                .build();\n\n        try (DownloadBundle downloadBundle = downloadHelper.download(downloadSpec)) {\n            try (BufferedReader reader = downloadBundle.newBufferedReader()) {\n                String line;\n                do {\n                    line = reader.readLine();\n                    // Process the decrypted line.\n                } while (line != null);\n            }\n        } catch (CryptoException | HttpResponseException | IOException | MissingCharsetException e) {\n            // Handle exception here.\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing LWAAuthorizationSigner for Sellerless APIs in Java\nDESCRIPTION: This snippet shows how to set up LWAAuthorizationCredentials for Sellerless APIs, including importing and using ScopeConstants for API scopes. It demonstrates using the withScopes method to specify the required scopes.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-java/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nimport static com.amazon.SellingPartnerAPIAA.ScopeConstants.SCOPE_NOTIFICATIONS_API;\n\nLWAAuthorizationCredentials lwaAuthorizationCredentials = LWAAuthorizationCredentials.builder()\n    .clientId(\"...\")\n    .clientSecret(\"...\")\n    .withScopes(\"...\")\n    .endpoint(\"...\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Handling LWAException in Java\nDESCRIPTION: This snippet illustrates how to catch and handle LWAException, which is thrown during LWA authorization errors. It shows how to access the error code and error message from the exception.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-java/README.md#2025-04-23_snippet_3\n\nLANGUAGE: Java\nCODE:\n```\ncatch (LWAException e) {\n            System.err.println(\"LWA Exception when calling Selling partner API\");\n            System.err.println(e.getErrorCode());\n            System.err.println(e.getErrorMessage());\n            e.printStackTrace();\n        }\n```\n\n----------------------------------------\n\nTITLE: Handling LWA Authorization Exceptions in C#\nDESCRIPTION: Example showing how to catch and handle LWA authorization exceptions, including accessing error codes and messages.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-csharp/README.md#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ncatch (LWAException e)\n            {\n                Console.WriteLine(\"LWA Exception when calling Selling partner API\");\n                Console.WriteLine(e.getErrorCode());\n                Console.WriteLine(e.getErrorMessage());\n                Console.WriteLine(e.Message);\n            }\n```\n\n----------------------------------------\n\nTITLE: Configuring LWA credentials in JavaScript\nDESCRIPTION: Example configuration file (app.config.mjs) for storing Login with Amazon (LWA) credentials and API endpoint.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexport const AppConfig = {\n    lwaClientId: \"< LWA client ID >\",\n    lwaClientSecret: \"< LWA client secret >\",\n    lwaRefreshToken: \"< LWA refresh token >\",\n    endpoint: \"https://sandbox.sellingpartnerapi-na.amazon.com\",\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for Amazon SP-API Requests\nDESCRIPTION: Example demonstrating how to configure rate limiting parameters for API requests. Shows setting up rate limit token, token limit, and timeout values to control request frequency.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-php/README.md#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$rateLimitOption = new RateLimitConfigurationOnRequests([\n    \"rateLimitToken\" => \"...\",\n    \"rateLimitTokenLimit\" => \"...\",\n    \"waitTimeOutInMilliSeconds\" => \"...\"\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring RateLimitConfiguration in Java\nDESCRIPTION: This code demonstrates how to create a RateLimitConfiguration object using the RateLimitConfigurationOnRequests builder. It allows setting rate limit permits and timeout values for client-side request rate limiting.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-java/README.md#2025-04-23_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\ncom.squareup.okhttp.Request request = new Request.Builder()\n    .url(...)\n    ...\n    .build();\n    \n RateLimitConfiguration rateLimitOption = RateLimitConfigurationOnRequests.builder()\n                .rateLimitPermit(...)\n                .waitTimeOutInMilliSeconds(...)\n                .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiting for API Requests in C#\nDESCRIPTION: Example demonstrating how to configure rate limiting parameters including permits and timeout values to control API request rates.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-csharp/README.md#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nRateLimitConfiguration rateLimitConfig = new RateLimitConfigurationOnRequests\n            {\n                RateLimitPermit = ..,\n                WaitTimeOutInMilliSeconds = ...\n            };\n```\n\n----------------------------------------\n\nTITLE: Testing the Python SDK\nDESCRIPTION: Command to run a test script that verifies the Python SDK is working correctly.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython test.py\n```\n\n----------------------------------------\n\nTITLE: Modifying Merchant Fulfillment API model in JSON\nDESCRIPTION: JSON snippet to replace in the merchantFulfillmentV0.json file to avoid SDK generation errors for the Merchant Fulfillment API.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"AvailableFormatOptionsForLabel\": {\n    \"type\": \"array\",\n    \"description\": \"The available label formats.\",\n    \"items\": {\n        \"$ref\": \"#/definitions/LabelFormatOption\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Installing the Python SDK Locally\nDESCRIPTION: Commands to build the Python SDK package as a wheel file and install it locally for use in your applications.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npython3 setup.py sdist bdist_wheel\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install dist/{YourPackageName}-1.0.0-py3-none-any.whl\n```\n\n----------------------------------------\n\nTITLE: Generating Python Client from Swagger Definitions\nDESCRIPTION: Command to generate Python client code from Swagger JSON definitions using the swagger-codegen-cli tool.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njava -jar /[path_to_swagger_jar]/swagger-codegen-cli.jar generate -l python -t /[path_to_mustach_resources]/resources/ -D packageName=swagger_client -o /[path_to_client_folder]/client/[SP-API_NAME] -i /[path_to_model_folder]/models/[SP-API_NAME]/SP-API.json\n```\n\n----------------------------------------\n\nTITLE: Generating SP-API SDK using Bash script\nDESCRIPTION: Command to run the provided shell script for generating the JavaScript SDK for SP-API.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ./generate-js-sdk.sh -j <your path to swagger-codegen-cli-2.4.X.jar>\n```\n\n----------------------------------------\n\nTITLE: Installing Selling Partner API Documents Helper with Maven\nDESCRIPTION: This snippet shows how to add the Selling Partner API Documents Helper as a dependency in a Maven project's POM file.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-documents-helper-java/README.md#2025-04-23_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n    <dependency>\n        <groupId>com.amazon.sellingpartnerapi</groupId>\n        <artifactId>sellingpartner-api-documents-helper-java</artifactId>\n        <version>1.0.0</version>\n    </dependency>\n```\n\n----------------------------------------\n\nTITLE: Creating Python SDK Package Setup File\nDESCRIPTION: A setup.py file for packaging the Python SDK, which includes package metadata and dependencies.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom setuptools import setup, find_packages\n\t \nsetup(\n    name='SellingPartnerAPIAuthAndAuthPython',  # Replace with your package's name\n    version='1.0.0',         # Replace with your package's version \n    package_dir={'': 'src'},  # Replace 'src' as necessary\n    packages=find_packages(where='src'),\n    install_requires=[line.strip() for line in open(\"requirements.txt\", \"r\")],\n    description='A Python SDK for Amazon Selling Partner API',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    url='TBD'\n)\n```\n\n----------------------------------------\n\nTITLE: Installing Selling Partner API Documents Helper with Gradle\nDESCRIPTION: This snippet demonstrates how to add the Selling Partner API Documents Helper as a dependency in a Gradle project's build file.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-documents-helper-java/README.md#2025-04-23_snippet_3\n\nLANGUAGE: groovy\nCODE:\n```\nimplementation \"com.amazon.sellingpartnerapi:sellingpartner-api-documents-helper-java:1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Cloning Selling Partner API Models Repository\nDESCRIPTION: Command to clone the Amazon Selling Partner API models repository which contains the API specifications needed for SDK generation.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/amzn/selling-partner-api-models\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Selling Partner API Documents Helper\nDESCRIPTION: These shell commands show how to build the library and install it to a local Maven repository or deploy it to a remote repository.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-documents-helper-java/README.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean install\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean deploy\n```\n\nLANGUAGE: shell\nCODE:\n```\nmvn clean package\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js dependencies using npm\nDESCRIPTION: Command to install the required Node.js dependencies for the project.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Installing Python Backoff Library\nDESCRIPTION: Command to install the Python backoff library, which is a dependency for handling API retries in the SDK.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install  backoff\n```\n\n----------------------------------------\n\nTITLE: Downloading swagger-codegen-cli JAR file using Bash\nDESCRIPTION: Command to download the specific version of swagger-codegen-cli JAR file recommended for use with this library.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-javascript/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ wget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.29/swagger-codegen-cli-2.4.29.jar\n```\n\n----------------------------------------\n\nTITLE: Installing Swagger Code Generator with wget\nDESCRIPTION: Command to download the Swagger Code Generator CLI jar file required for generating the Python client from API specifications.\nSOURCE: https://github.com/amzn/selling-partner-api-models/blob/main/clients/sellingpartner-api-aa-python/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget https://repo1.maven.org/maven2/io/swagger/swagger-codegen-cli/2.4.13/swagger-codegen-cli-2.4.13.jar -O swagger-codegen-cli.jar\n```"
  }
]