[
  {
    "owner": "modelcontextprotocol",
    "repo": "rust-sdk",
    "content": "TITLE: Implementing a Calculator Tool with RMCP Macros\nDESCRIPTION: Complete example of creating a Calculator tool using RMCP tool macros, showing how to define synchronous and asynchronous functions with proper parameter annotations and documentation.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse rmcp::{ServerHandler, model::ServerInfo, schemars, tool};\n\nuse super::counter::Counter;\n\n#[derive(Debug, serde::Deserialize, schemars::JsonSchema)]\npub struct SumRequest {\n    #[schemars(description = \"the left hand side number\")]\n    pub a: i32,\n    #[schemars(description = \"the right hand side number\")]\n    pub b: i32,\n}\n#[derive(Debug, Clone)]\npub struct Calculator;\n\n// create a static toolbox to store the tool attributes\n#[tool(tool_box)]\nimpl Calculator {\n    // async function\n    #[tool(description = \"Calculate the sum of two numbers\")]\n    async fn sum(&self, #[tool(aggr)] SumRequest { a, b }: SumRequest) -> String {\n        (a + b).to_string()\n    }\n\n    // sync function\n    #[tool(description = \"Calculate the difference of two numbers\")]\n    fn sub(\n        &self,\n        #[tool(param)]\n        // this macro will transfer the schemars and serde's attributes\n        #[schemars(description = \"the left hand side number\")]\n        a: i32,\n        #[tool(param)]\n        #[schemars(description = \"the right hand side number\")]\n        b: i32,\n    ) -> String {\n        (a - b).to_string()\n    }\n}\n\n// impl call_tool and list_tool by querying static toolbox\n#[tool(tool_box)]\nimpl ServerHandler for Calculator {\n    fn get_info(&self) -> ServerInfo {\n        ServerInfo {\n            instructions: Some(\"A simple calculator\".into()),\n            ..Default::default()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Service with a Custom Handler\nDESCRIPTION: Example demonstrating how to create a service using a custom handler implementation, in this case a Counter service.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet service = common::counter::Counter::new();\n```\n\n----------------------------------------\n\nTITLE: Serving a Service with Transport\nDESCRIPTION: Code showing how to connect a service with a transport and initialize the server, which completes the initialization process and makes the service available.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// this call will finish the initialization process\nlet server = service.serve(transport).await?;\n```\n\n----------------------------------------\n\nTITLE: Defining RMCP Tools with Macros\nDESCRIPTION: Showcases the use of 'toolbox' and 'tool' macros to quickly create RMCP tools. This example defines a Calculator service with sum and subtract operations.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse rmcp::{ServerHandler, model::ServerInfo, schemars, tool};\n\nuse super::counter::Counter;\n\n#[derive(Debug, serde::Deserialize, schemars::JsonSchema)]\npub struct SumRequest {\n    #[schemars(description = \"the left hand side number\")]\n    pub a: i32,\n    #[schemars(description = \"the right hand side number\")]\n    pub b: i32,\n}\n#[derive(Debug, Clone)]\npub struct Calculator;\n\n// create a static toolbox to store the tool attributes\n#[tool(tool_box)]\nimpl Calculator {\n    // async function\n    #[tool(description = \"Calculate the sum of two numbers\")]\n    async fn sum(&self, #[tool(aggr)] SumRequest { a, b }: SumRequest) -> String {\n        (a + b).to_string()\n    }\n\n    // sync function\n    #[tool(description = \"Calculate the sum of two numbers\")]\n    fn sub(\n        &self,\n        #[tool(param)]\n        // this macro will transfer the schemars and serde's attributes\n        #[schemars(description = \"the left hand side number\")]\n        a: i32,\n        #[tool(param)]\n        #[schemars(description = \"the right hand side number\")]\n        b: i32,\n    ) -> String {\n        (a - b).to_string()\n    }\n}\n\n// impl call_tool and list_tool by querying static toolbox\n#[tool(tool_box)]\nimpl ServerHandler for Calculator {\n    fn get_info(&self) -> ServerInfo {\n        ServerInfo {\n            instructions: Some(\"A simple calculator\".into()),\n            ..Default::default()\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Interacting with an RMCP Server\nDESCRIPTION: Examples of how to send requests and notifications to an initialized RMCP server, showing both request and notification patterns.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n// request \nlet roots = server.list_roots().await?;\n\n// or send notification\nserver.notify_cancelled(...).await?;\n```\n\n----------------------------------------\n\nTITLE: Interacting with RMCP Server\nDESCRIPTION: Shows how to interact with an initialized RMCP server by sending requests and notifications. It includes examples of making a request and sending a notification.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\n// 请求 \nlet roots = server.list_roots().await?;\n\n// 或发送通知\nserver.notify_cancelled(...).await?;\n```\n\n----------------------------------------\n\nTITLE: Converting RMCP Services to Dynamic Type\nDESCRIPTION: Code snippet showing how to convert RMCP services into a dynamic type, which allows managing multiple services with different implementations in a collection.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nlet service = service.into_dyn();\n```\n\n----------------------------------------\n\nTITLE: Converting RMCP Service to Dynamic Type\nDESCRIPTION: Shows how to convert an RMCP service to a dynamic type for managing multiple services in a collection. This is useful when dealing with heterogeneous service types.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nlet service = service.into_dyn();\n```\n\n----------------------------------------\n\nTITLE: Constructing and Serving RMCP Service\nDESCRIPTION: Illustrates the process of creating an RMCP service and serving it with a transport layer. This snippet demonstrates the initialization process for a server.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet service = common::counter::Counter::new();\n\n// 这里会自动完成初始化流程\nlet server = service.serve(transport).await?;\n```\n\n----------------------------------------\n\nTITLE: Waiting for Service Shutdown\nDESCRIPTION: Code showing how to wait for a service to shut down or how to manually cancel it, demonstrating proper service lifecycle management.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nlet quit_reason = server.waiting().await?;\n// or cancel it\nlet quit_reason = server.cancel().await?;\n```\n\n----------------------------------------\n\nTITLE: Building a Transport with Standard I/O\nDESCRIPTION: Example showing how to create a transport using standard input and output streams, which can be used for local communication with RMCP services.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::io::{stdin, stdout};\nlet transport = (stdin(), stdout());\n```\n\n----------------------------------------\n\nTITLE: Setting Up RMCP Transport Layer with Stdin/Stdout\nDESCRIPTION: Shows how to create a transport layer for RMCP using standard input and output streams. This is a basic example of implementing the IntoTransport trait.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse tokio::io::{stdin, stdout};\nlet transport = (stdin(), stdout());\n```\n\n----------------------------------------\n\nTITLE: Quick Start RMCP Client with Child Process\nDESCRIPTION: A minimal example showing how to start an RMCP client in one line using a child process transport that runs an npm package as the server.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse rmcp::{ServiceExt, transport::TokioChildProcess};\nuse tokio::process::Command;\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = ().serve(\n        TokioChildProcess::new(Command::new(\"npx\").arg(\"-y\").arg(\"@modelcontextprotocol/server-everything\"))?\n    ).await?;\n    Ok(())\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing RMCP Client with Child Process Transport\nDESCRIPTION: Demonstrates how to quickly start an RMCP client using a child process as the transport layer. It uses the TokioChildProcess to run an npm command.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse rmcp::{ServiceExt, transport::TokioChildProcess};\nuse tokio::process::Command;\n\nlet client = ().serve(\n    TokioChildProcess::new(Command::new(\"npx\").arg(\"-y\").arg(\"@modelcontextprotocol/server-everything\"))?\n).await?;\n```\n\n----------------------------------------\n\nTITLE: Waiting for RMCP Server Shutdown\nDESCRIPTION: Demonstrates how to wait for an RMCP server to shut down or how to cancel it programmatically. This is useful for graceful shutdown handling.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet quit_reason = server.waiting().await?;\n// 或取消它\nlet quit_reason = server.cancel().await?;\n```\n\n----------------------------------------\n\nTITLE: Counter Service Command Examples\nDESCRIPTION: Example commands for interacting with the counter service through Claude Desktop\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/README.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ncounter.say_hello\n```\n\nLANGUAGE: text\nCODE:\n```\ncounter.increment\ncounter.get_value\ncounter.sum {\"a\": 3, \"b\": 4}\n```\n\n----------------------------------------\n\nTITLE: Importing RMCP Crate in Cargo.toml\nDESCRIPTION: Configuration for importing the RMCP crate into a Rust project, showing both the stable version from crates.io and the development version directly from GitHub.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nrmcp = { version = \"0.1\", features = [\"server\"] }\n## or dev channel\nrmcp = { git = \"https://github.com/modelcontextprotocol/rust-sdk\", branch = \"main\" }\n```\n\n----------------------------------------\n\nTITLE: Importing RMCP Crate in Cargo.toml\nDESCRIPTION: Shows how to import the RMCP crate in a Rust project's Cargo.toml file. It includes options for stable and development versions.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/docs/readme/README.zh-cn.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nrmcp = { version = \"0.1\", features = [\"server\"] }\n## 或者开发者频道\nrmcp = { git = \"https://github.com/modelcontextprotocol/rust-sdk\", branch = \"main\" }\n```\n\n----------------------------------------\n\nTITLE: Running the Simple Chat Client Example in Rust\nDESCRIPTION: Command to build and run the simple chat client example from the project directory. The client uses the MCP SDK to establish a chat interface that can interact with tools.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/simple-chat-client/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin simple_chat\n```\n\n----------------------------------------\n\nTITLE: Building MCP Server Example\nDESCRIPTION: Command to build a standard input/output MCP server binary using Cargo\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build --release --example servers_std_io\n```\n\n----------------------------------------\n\nTITLE: Building and Inspecting WASI WASM Module\nDESCRIPTION: Two-step process to build a WASI module targeting wasm32-wasip2 and inspect the resulting WASM file using ModelContext Protocol's inspector tool. The build is performed using Cargo and the inspection uses the @modelcontextprotocol/inspector NPM package.\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/wasi/README.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo build -p wasi --target wasm32-wasip2\nnpx @modelcontextprotocol/inspector wasmtime target/wasm32-wasip2/debug/wasi.wasm\n```\n\n----------------------------------------\n\nTITLE: MacOS/Linux MCP Server Configuration\nDESCRIPTION: JSON configuration for setting up the counter MCP server on Unix-based systems\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/README.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"counter\": {\n      \"command\": \"PATH-TO/rust-sdk/target/release/examples/servers_std_io\",\n      \"args\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Windows MCP Server Configuration\nDESCRIPTION: JSON configuration for setting up the counter MCP server on Windows systems\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/README.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mcpServers\": {\n    \"counter\": {\n      \"command\": \"PATH-TO/rust-sdk/target/release/examples/servers_std_io.exe\",\n      \"args\": []\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MCP Inspector Installation\nDESCRIPTION: Command to install and run the MCP Inspector tool using npm\nSOURCE: https://github.com/modelcontextprotocol/rust-sdk/blob/main/examples/README.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx @modelcontextprotocol/inspector\n```"
  }
]