[
  {
    "owner": "terraform-aws-modules",
    "repo": "terraform-aws-iam",
    "content": "TITLE: IAM Role for Karpenter Controller Integration with EKS Module\nDESCRIPTION: This code creates an IAM role for the Karpenter controller using the `terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks` module, integrating with the `terraform-aws-modules/terraform-aws-eks` module. It attaches the Karpenter controller policy, specifies the cluster name, node IAM role ARNs, and also attaches the VPC CNI policy, and configures the OIDC provider and associated service accounts, also enables IPv4.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"karpenter_irsa_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks\"\n\n  role_name                          = \"karpenter_controller\"\n  attach_karpenter_controller_policy = true\n\n  karpenter_controller_cluster_name         = module.eks.cluster_name\n  karpenter_controller_node_iam_role_arns = [module.eks.eks_managed_node_groups[\"default\"].iam_role_arn]\n\n  attach_vpc_cni_policy = true\n  vpc_cni_enable_ipv4   = true\n\n  oidc_providers = {\n    main = {\n      provider_arn               = module.eks.oidc_provider_arn\n      namespace_service_accounts = [\"default:my-app\", \"canary:my-app\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Buckets\nDESCRIPTION: This Terragrunt configuration manages multiple S3 buckets using the module wrapper. It defines default bucket settings like force destruction and security policies, then configures individual buckets with unique names and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-role-for-service-accounts-eks/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role for Service Accounts with Multiple Clusters/Namespaces\nDESCRIPTION: This code defines a Terraform module to create an IAM role (`my-app`) that can be assumed by the `my-app-staging` ServiceAccount in the `default` and `canary` namespaces of a cluster in the `us-east-1` region, and also the `my-app-staging` ServiceAccount in the `default` namespace of a cluster in the `ap-southeast-1` region.  It configures the role with specific OIDC provider ARNs and associates it with a predefined IAM policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_eks_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks\"\n  role_name = \"my-app\"\n\n  role_policy_arns = {\n    policy = \"arn:aws:iam::012345678901:policy/myapp\"\n  }\n\n  oidc_providers = {\n    one = {\n      provider_arn               = \"arn:aws:iam::012345678901:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5C54DDF35ER19312844C7333374CC09D\"\n      namespace_service_accounts = [\"default:my-app-staging\", \"canary:my-app-staging\"]\n    }\n    two = {\n      provider_arn               = \"arn:aws:iam::012345678901:oidc-provider/oidc.eks.ap-southeast-1.amazonaws.com/id/5C54DDF35ER54476848E7333374FF09G\"\n      namespace_service_accounts = [\"default:my-app-staging\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for IAM Role\nDESCRIPTION: This Terraform configuration uses the module wrapper to create multiple IAM roles for service accounts in EKS. It sets the module source, defines default values for all instances, and configures individual items with specific settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-role-for-service-accounts-eks/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-role-for-service-accounts-eks\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SAML Assume Role Policy Document Data Source - AWS Terraform\nDESCRIPTION: Creates a data source that generates an IAM policy document for assuming a role with SAML authentication. It specifies the SAML provider IDs and trusted role actions required for the assume role operation.  The policy document is used in the trust relationship of the IAM role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-role-with-saml/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"aws_iam_policy_document\" \"assume_role_with_saml\" {\n  statement {\n    actions = var.trusted_role_actions\n\n    principals {\n      type        = \"Federated\"\n      identifiers = var.provider_ids\n    }\n\n    condition {\n      test     = \"StringEquals\"\n      variable = \"SAML:aud\"\n      values   = [var.aws_saml_endpoint]\n    }\n\n    dynamic \"condition\" {\n      for_each = var.provider_id != \"\" ? [1] : []\n      content {\n        test     = \"StringEquals\"\n        variable = \"SAML:iss\"\n        values   = [var.provider_id]\n      }\n    }\n\n    dynamic \"condition\" {\n      for_each = var.allow_self_assume_role ? [1] : []\n      content {\n        test     = \"StringEquals\"\n        variable = \"aws:userid\"\n        values   = [data.aws_caller_identity.current.arn]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role with OIDC Configuration\nDESCRIPTION: This snippet demonstrates creating an IAM role that trusts an OIDC provider using the `iam-assumable-role-with-oidc` submodule. `create_role` indicates whether to create the role. `role_name` is the name of the role. `tags` are key-value pairs for tagging the role. `provider_url` is the URL of the OIDC provider. `role_policy_arns` specifies the ARNs of policies to attach to the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_assumable_role_with_oidc\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc\"\n\n  create_role = true\n\n  role_name = \"role-with-oidc\"\n\n  tags = {\n    Role = \"role-with-oidc\"\n  }\n\n  provider_url = \"oidc.eks.eu-west-1.amazonaws.com/id/BA9E170D464AF7B92084EF72A69B9DC8\"\n\n  role_policy_arns = [\n    \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\",\n  ]\n  number_of_role_policy_arns = 1\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role for VPC CNI Service Account Integration with EKS Module\nDESCRIPTION: This code snippet demonstrates how to create an IAM role for the VPC CNI service account using the `terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks` module in conjunction with the `terraform-aws-modules/terraform-aws-eks` module.  It configures the role to attach the VPC CNI policy and specifies the OIDC provider and associated service accounts, also enables IPv4.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_cni_irsa_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks\"\n\n  role_name = \"vpc-cni\"\n\n  attach_vpc_cni_policy = true\n  vpc_cni_enable_ipv4   = true\n\n  oidc_providers = {\n    main = {\n      provider_arn               = module.eks.oidc_provider_arn\n      namespace_service_accounts = [\"default:my-app\", \"canary:my-app\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Role Policy ARNs Configuration - Terraform\nDESCRIPTION: This configuration defines the policy ARNs attached to the readonly role. It specifies the `ReadOnlyAccess` policy, granting read-only access to AWS resources. This is configured via the `readonly_role_policy_arns` input variable. Ensure the ARN is correct and that the role has the necessary permissions to attach this policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles-with-saml/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n[\n  \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n]\n```\n\n----------------------------------------\n\nTITLE: IAM Role SAML: Terraform Usage Example (HCL)\nDESCRIPTION: This Terraform configuration demonstrates how to use the `iam-assumable-role-with-saml` module wrapper to manage multiple IAM assumable roles with SAML. It defines a `source` to the module and provides default inputs and items, where each item represents a separate instance of the module. The `items` map allows you to configure different roles with different settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-saml/README.md#_snippet_1\n\nLANGUAGE: HCL\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-assumable-role-with-saml\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role with SAML Configuration\nDESCRIPTION: This code shows how to create an IAM role that trusts a SAML provider using the `iam-assumable-role-with-saml` submodule. `create_role` specifies if the role is created. `role_name` is the name of the role. `tags` allows you to tag the resource. `provider_id` is the ARN of the SAML provider. `role_policy_arns` specifies the policies attached to the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_assumable_role_with_saml\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-saml\"\n\n  create_role = true\n\n  role_name = \"role-with-saml\"\n\n  tags = {\n    Role = \"role-with-saml\"\n  }\n\n  provider_id = \"arn:aws:iam::235367859851:saml-provider/idp_saml\"\n\n  role_policy_arns = [\n    \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n  ]\n  number_of_role_policy_arns = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Github OIDC Role\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the `iam-github-oidc-role` module wrapper. It defines the Terraform source and sets up default values and specific configurations for multiple IAM roles. This setup allows managing multiple roles from a single `terragrunt.hcl` file.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-role/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-github-oidc-role\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-github-oidc-role?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic IAM Role for EKS ServiceAccount in HCL\nDESCRIPTION: This snippet demonstrates how to create an IAM role named `my-app` that can be assumed by the `my-serviceaccount` ServiceAccount in the `default` namespace of the `cluster1` EKS cluster. It utilizes the `iam-eks-role` module from Terraform AWS Modules.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-eks-role/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_eks_role\" {\n  source = \"terraform-aws-modules/iam/aws//modules/iam-eks-role\"\n\n  role_name = \"my-app\"\n\n  cluster_service_accounts = {\n    \"cluster1\" = [\"default:my-serviceaccount\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Assumable IAM Role with Terraform\nDESCRIPTION: This snippet shows how to create an IAM role that can be assumed by trusted entities using the `iam-assumable-role` submodule. `trusted_role_arns` specifies the ARNs of entities allowed to assume the role. `create_role` determines whether the role is created. `role_name` sets the name of the role, while `role_requires_mfa` enforces MFA for role assumption. `custom_role_policy_arns` attaches custom policies to the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_assumable_role\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-role\"\n\n  trusted_role_arns = [\n    \"arn:aws:iam::307990089504:root\",\n    \"arn:aws:iam::835367859851:user/anton\",\n  ]\n\n  create_role = true\n\n  role_name         = \"custom\"\n  role_requires_mfa = true\n\n  custom_role_policy_arns = [\n    \"arn:aws:iam::aws:policy/AmazonCognitoReadOnly\",\n    \"arn:aws:iam::aws:policy/AlexaForBusinessFullAccess\",\n  ]\n  number_of_custom_role_policy_arns = 2\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM EKS Role\nDESCRIPTION: This configuration file (`terragrunt.hcl`) demonstrates how to use the module wrapper to manage multiple IAM EKS roles within Terragrunt. It defines the Terraform source, default values for the roles, and configurations for individual roles (items). The `inputs` block allows specifying different settings for each role instance.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-eks-role/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-eks-role\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-eks-role?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Trust Policy Conditions Configuration\nDESCRIPTION: Configuration for the `trust_policy_conditions` input variable. Specifies a list of condition blocks to apply to the trust policy. Each block defines a test, variable, and list of values to match against during role assumption.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles/README.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>list(object({\n    test     = string\n    variable = string\n    values   = list(string)\n  }))</pre>\n```\n\n----------------------------------------\n\nTITLE: Creating IAM GitHub OIDC Role for GitHub Free/Pro/Team (Terraform)\nDESCRIPTION: This Terraform configuration creates an IAM role that trusts the GitHub OIDC provider for GitHub Free, Pro, and Team users. It defines the source of the module, specifies the allowed subjects (repositories and branches), attaches an S3 read-only policy, and adds a tag. The subjects list needs to be updated to match the user's organization and repository.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-github-oidc-role/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_github_oidc_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-github-oidc-role\"\n\n  # This should be updated to suit your organization, repository, references/branches, etc.\n  subjects = [\"terraform-aws-modules/terraform-aws-iam:*\"]\n\n  policies = {\n    S3ReadOnly = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\n  }\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role Policy Attachment - AWS Terraform\nDESCRIPTION: Defines an AWS IAM role policy attachment resource.  It attaches IAM policies to the IAM role.  The `role_policy_arns` input is used to specify the ARNs of the policies to attach.  This allows custom policies to be applied to the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-role-with-saml/README.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_iam_role_policy_attachment\" \"custom\" {\n  count      = length(var.role_policy_arns)\n  role       = aws_iam_role.this[0].name\n  policy_arn = element(var.role_policy_arns, count.index)\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role for Service Account EKS\nDESCRIPTION: This snippet sets up an IAM role for an EKS service account with VPC CNI permissions using the `iam-role-for-service-accounts-eks` submodule. `role_name` is the name of the IAM role. `attach_vpc_cni_policy` attaches the VPC CNI policy to the role. `vpc_cni_enable_ipv4` specifies whether IPv4 is enabled. `oidc_providers` defines the OIDC providers to trust, including the provider ARN and the associated namespace and service accounts. `tags` includes metadata.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"vpc_cni_irsa\" {\n  source      = \"terraform-aws-modules/iam/aws//modules/iam-role-for-service-accounts-eks\"\n\n  role_name   = \"vpc-cni\"\n\n  attach_vpc_cni_policy = true\n  vpc_cni_enable_ipv4   = true\n\n  oidc_providers = {\n    main = {\n      provider_arn               = \"arn:aws:iam::012345678901:oidc-provider/oidc.eks.us-east-1.amazonaws.com/id/5C54DDF35ER19312844C7333374CC09D\"\n      namespace_service_accounts = [\"kube-system:aws-node\"]\n    }\n  }\n\n  tags = {\n    Name = \"vpc-cni-irsa\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Group with Policies\nDESCRIPTION: This snippet demonstrates how to create an IAM group with attached policies using the `iam-group-with-policies` submodule. `name` specifies the name of the group. `group_users` is a list of IAM usernames to add to the group. `attach_iam_self_management_policy` determines whether to attach a self-management policy. `custom_group_policy_arns` allows attaching policies by ARN. `custom_group_policies` allows attaching policies defined inline.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_group_with_policies\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-group-with-policies\"\n\n  name = \"superadmins\"\n\n  group_users = [\n    \"user1\",\n    \"user2\"\n  ]\n\n  attach_iam_self_management_policy = true\n\n  custom_group_policy_arns = [\n    \"arn:aws:iam::aws:policy/AdministratorAccess\",\n  ]\n\n  custom_group_policies = [\n    {\n      name   = \"AllowS3Listing\"\n      policy = data.aws_iam_policy_document.sample.json\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure IAM Assumable Roles with SAML using Terraform\nDESCRIPTION: This Terraform configuration uses the module wrapper to manage IAM assumable roles with SAML. It defines a source for the Terraform module and configures input variables using `defaults` and `items` blocks, similar to the Terragrunt example. The `defaults` block sets common parameters for all roles, while the `items` block allows for role-specific configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles-with-saml/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-assumable-roles-with-saml\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IAM Assumable Roles Wrapper with Terraform (HCL)\nDESCRIPTION: This Terraform configuration showcases how to use the `iam-assumable-roles` module wrapper to create multiple IAM assumable roles. It specifies the module source, default settings, and custom configurations for each role. The `items` block enables individual customization of the module's parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-assumable-roles\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for EKS Service Account\nDESCRIPTION: This snippet shows how to create an IAM role for an EKS service account using the `iam-eks-role` submodule. `role_name` defines the name of the IAM role. `cluster_service_accounts` is a map of EKS cluster names to a list of service accounts in that cluster that can assume the role.  `tags` are key-value pairs for tagging the role. `role_policy_arns` allows you to attach custom policies to the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_eks_role\" {\n  source      = \"terraform-aws-modules/iam/aws//modules/iam-eks-role\"\n\n  role_name   = \"my-app\"\n\n  cluster_service_accounts = {\n    \"cluster1\" = [\"default:my-app\"]\n    \"cluster2\" = [\n      \"default:my-app\",\n      \"canary:my-app\",\n    ]\n  }\n\n  tags = {\n    Name = \"eks-role\"\n  }\n\n  role_policy_arns = {\n    AmazonEKS_CNI_Policy = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Configuration for IAM Github OIDC Provider\nDESCRIPTION: This Terraform configuration uses a module wrapper to manage multiple instances of the IAM Github OIDC Provider. It defines the module's source and specifies default values and individual item configurations. The `source` attribute specifies the location of the module wrapper, while `defaults` and `items` provide configuration options.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-provider/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-github-oidc-provider\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using IAM Assumable Roles Wrapper with Terragrunt (HCL)\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the `iam-assumable-roles` module wrapper to manage multiple IAM assumable roles. It defines the Terraform source, default values for the module, and configurations for individual role items. The `inputs` block allows customizing the module's behavior for each role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-assumable-roles\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-assumable-roles?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Assumable Roles with SAML\nDESCRIPTION: This snippet demonstrates how to create multiple assumable IAM roles with SAML integration using `iam-assumable-roles-with-saml` submodule. `create_admin_role`, `create_poweruser_role`, and `create_readonly_role` defines creation flag for each role. `poweruser_role_name` defines the name of the poweruser role. `provider_id` is the ARN for the SAML provider.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_assumable_roles_with_saml\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-roles-with-saml\"\n\n  create_admin_role = true\n\n  create_poweruser_role = true\n  poweruser_role_name   = \"developer\"\n\n  create_readonly_role = true\n\n  provider_id   = \"arn:aws:iam::235367859851:saml-provider/idp_saml\"\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Account Wrapper\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the IAM Account module wrapper to manage multiple IAM accounts. The `source` attribute specifies the location of the module wrapper. The `inputs` block defines default values and specific configurations for each item (IAM account).\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-account/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-account\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-account?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Assumable Role\nDESCRIPTION: This Terragrunt configuration utilizes the iam-assumable-role module wrapper to manage multiple IAM roles. The `source` attribute specifies the location of the module, and the `inputs` attribute defines default values and individual role configurations. The example demonstrates how to define default tags and configure multiple roles with specific settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-assumable-role\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-assumable-role?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Role for Github OIDC\nDESCRIPTION: This snippet creates an IAM role for GitHub Actions using OIDC with the `iam-github-oidc-role` module, allowing actions to assume the role and access AWS resources. `subjects` are the GitHub repository and branch that can assume the role. `policies` maps a policy name to an ARN to be attached to the role. `tags` is used to tag the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_github_oidc_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-github-oidc-role\"\n\n  # This should be updated to suit your organization, repository, references/branches, etc.\n  subjects = [\"terraform-aws-modules/terraform-aws-iam:*\"]\n\n  policies = {\n    S3ReadOnly = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\n  }\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Import Existing AWS IAM Account Alias\nDESCRIPTION: This code snippet demonstrates how to import an existing IAM account alias into Terraform. This allows Terraform to manage the alias that was previously created outside of Terraform, for example, through the AWS console.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-account/README.md#_snippet_1\n\nLANGUAGE: terraform\nCODE:\n```\n$ terraform import module.iam_account.aws_iam_account_alias.this this\n\nmodule.iam_account.aws_iam_account_alias.this: Importing from ID \"this\"...\nmodule.iam_account.aws_iam_account_alias.this: Import complete!\n  Imported aws_iam_account_alias (ID: this)\nmodule.iam_account.aws_iam_account_alias.this: Refreshing state... (ID: this)\n\nImport successful!\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Wrapper Usage with Terragrunt (HCL)\nDESCRIPTION: This Terragrunt configuration utilizes the `iam-policy` module wrapper to manage multiple IAM policies. It defines a `source` for the Terraform module, along with `inputs` for default values and individual policy configurations. The `defaults` section sets common parameters like `create` and `tags`, while the `items` section allows for defining individual policy configurations with specific settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-policy/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-policy\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-policy?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the `iam-assumable-role-with-oidc` module wrapper. It defines the Terraform source and provides input variables for configuring multiple IAM roles, including default settings and specific configurations for individual items. The `source` attribute specifies the location of the Terraform module. `inputs` defines default values and per-item configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-oidc/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-assumable-role-with-oidc\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-assumable-role-with-oidc?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role Data Source Configuration - AWS Terraform\nDESCRIPTION: Defines a data source to fetch the current AWS caller identity.  This is used to get the account ID for constructing ARNs or other identifiers. It relies on the `aws` provider being configured.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-role-with-saml/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\ndata \"aws_caller_identity\" \"current\" {}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Read-Only Policy\nDESCRIPTION: This Terragrunt configuration uses the IAM read-only policy wrapper module to manage multiple IAM policies. It defines default values and specific configurations for each item. The 'source' attribute specifies the location of the module, and the 'inputs' attribute defines the configuration parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-read-only-policy/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-read-only-policy\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-read-only-policy?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM User Wrapper\nDESCRIPTION: This snippet demonstrates how to use the IAM user wrapper module within a Terragrunt configuration. It specifies the Terraform source, and defines default input values along with individual item configurations for IAM users. The `source` attribute points to the module's location, and the `inputs` block defines both default settings and specific settings for each managed IAM user.  This approach avoids duplication of `terragrunt.hcl` files when managing multiple similar resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-user/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-user\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-user?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Role Policy ARNs Configuration - Terraform\nDESCRIPTION: This configuration defines the policy ARNs attached to the admin role. It specifies the `AdministratorAccess` policy, granting full access to AWS resources.  This is configured via the `admin_role_policy_arns` input variable. Ensure the ARN is correct and that the role has the necessary permissions to attach this policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles-with-saml/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n[\n  \"arn:aws:iam::aws:policy/AdministratorAccess\"\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Wrapper Usage\nDESCRIPTION: This Terraform configuration uses the IAM group with assumable roles policy wrapper module directly. It defines the module source and sets input variables, similar to the Terragrunt example, demonstrating how to manage multiple items with default configurations.  The `defaults` and `items` inputs are crucial for configuring the wrapped module.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-assumable-roles-policy/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-group-with-assumable-roles-policy\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Group\nDESCRIPTION: This Terragrunt configuration uses the IAM group with assumable roles policy wrapper module. It defines the Terraform source and sets input variables for the module, including default values and a map of items to configure.  The `inputs` block defines both default settings and individual item configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-assumable-roles-policy/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-group-with-assumable-roles-policy\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-group-with-assumable-roles-policy?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Policy\nDESCRIPTION: This code demonstrates creating an IAM policy using the `iam-policy` submodule. `name` is the name of the policy. `path` is the IAM path for the policy. `description` provides a description of the policy. `policy` contains the JSON policy document as a heredoc string.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_policy\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-policy\"\n\n  name        = \"example\"\n  path        = \"/\"\n  description = \"My example policy\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ec2:Describe*\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Wrapper Usage Example\nDESCRIPTION: This Terraform configuration demonstrates the usage of the iam-assumable-role module wrapper. The `source` attribute points to the module's location, and the `defaults` and `items` variables define the configuration. It uses the module to create resources based on the items defined, passing in both the default values and any specific configurations for each item.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-assumable-role\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for IAM EKS Role\nDESCRIPTION: This configuration demonstrates how to use the module wrapper to manage multiple IAM EKS roles within Terraform. It defines the module source, default values, and configurations for individual role instances, similar to the Terragrunt example. The `defaults` block sets common values, while the `items` block configures specific role parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-eks-role/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-eks-role\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure IAM Assumable Roles with SAML using Terragrunt\nDESCRIPTION: This Terragrunt configuration uses the module wrapper to manage IAM assumable roles with SAML. It defines a source for the Terraform module and configures input variables using `defaults` and `items` blocks.  The `defaults` block sets common parameters for all roles, while the `items` block allows for role-specific configurations.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles-with-saml/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-assumable-roles-with-saml\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-assumable-roles-with-saml?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Bucket Wrapper Usage with Terragrunt (HCL)\nDESCRIPTION: This Terragrunt configuration uses the `s3-bucket` module wrapper. It defines the Terraform `source`, along with `defaults` for shared configurations across all buckets and `items` for defining specific bucket settings.  `force_destroy`, `attach_elb_log_delivery_policy`, `attach_lb_log_delivery_policy`, `attach_deny_insecure_transport_policy`, and `attach_require_latest_tls_policy` are configured as defaults.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-policy/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Wrapper Usage with Terraform (HCL)\nDESCRIPTION: This Terraform configuration utilizes the `iam-policy` module wrapper. It defines a `source` for the Terraform module, along with `defaults` for common configurations and `items` for individual policy configurations.  The `defaults` section sets common parameters like `create` and `tags`, while the `items` section allows for defining individual policy configurations with specific settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-policy/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-policy\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Usage Example\nDESCRIPTION: This code snippet demonstrates how to use the `iam-group-with-policies` wrapper module with Terragrunt. It defines the Terraform source and input variables, including default values and individual item configurations for IAM groups. The `source` attribute specifies the location of the wrapper module within the Terraform AWS Modules registry.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-policies/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-group-with-policies\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-group-with-policies?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This command applies the changes required to reach the desired state of the configuration. It creates or modifies resources as defined in the Terraform configuration files.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-eks-role/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Role for Multiple EKS Clusters in HCL\nDESCRIPTION: This snippet shows how to configure an IAM role that can be assumed from multiple EKS clusters, specifically `staging-main-1` and `staging-backup-1`. Both clusters allow the `my-app-staging` ServiceAccount in the `default` namespace to assume the role. The IAM role is named `my-app`.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-eks-role/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_eks_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-eks-role\"\n\n  role_name = \"my-app\"\n\n  cluster_service_accounts = {\n    \"staging-main-1\" = [\"default:my-app-staging\"]\n    \"staging-backup-1\" = [\"default:my-app-staging\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This snippet creates an execution plan, which lets you preview the changes that Terraform is going to make to your infrastructure. It shows what resources will be added, modified, or destroyed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-github-oidc/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Bucket Wrapper\nDESCRIPTION: This snippet shows a Terragrunt configuration for managing multiple S3 buckets using a wrapper module. It sets default configurations for the buckets, such as force_destroy, and enables policies for secure transport and logging. It defines the source module and specifies individual configurations for each bucket, including bucket names and tags. This allows you to manage several S3 buckets from a single Terragrunt layer.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-user/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Usage Example\nDESCRIPTION: This code snippet demonstrates how to use the `iam-group-with-policies` wrapper module with Terraform directly. It defines the module source and input variables, including default values and individual item configurations for IAM groups. The `source` attribute specifies the location of the wrapper module within the Terraform AWS Modules registry.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-policies/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-group-with-policies\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Workflow Commands\nDESCRIPTION: This snippet shows the standard Terraform workflow commands to initialize, plan, and apply the infrastructure defined in the configuration files. It also includes the command to destroy the resources when they are no longer needed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-roles/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This snippet shows how to initialize, plan, and apply a Terraform configuration. It requires Terraform to be installed and configured with AWS credentials. The `terraform init` command initializes the working directory, `terraform plan` creates an execution plan, and `terraform apply` applies the changes to the infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-account/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Poweruser Role Policy ARNs Configuration - Terraform\nDESCRIPTION: This configuration defines the policy ARNs attached to the poweruser role. It specifies the `PowerUserAccess` policy, granting almost full access to AWS resources. This is configured via the `poweruser_role_policy_arns` input variable. Ensure the ARN is correct and that the role has the necessary permissions to attach this policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles-with-saml/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n[\n  \"arn:aws:iam::aws:policy/PowerUserAccess\"\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This snippet shows how to create a Terraform execution plan. The `terraform plan` command analyzes the current state of the infrastructure and the desired state defined in the configuration files, generating a plan of changes to be applied.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-policy/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Account with Terraform\nDESCRIPTION: This snippet demonstrates how to use the `iam-account` submodule to configure account-level settings such as the account alias, minimum password length, and password complexity requirements. The `account_alias` sets a friendly name for the AWS account. `minimum_password_length` specifies the minimum length required for IAM user passwords. `require_numbers` is a boolean flag to enforce the inclusion of numbers in passwords.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_account\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-account\"\n\n  account_alias = \"awesome-company\"\n\n  minimum_password_length = 37\n  require_numbers         = false\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This bash script generates an execution plan, showing the changes that Terraform will make to the infrastructure. It allows for review before applying the changes.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-read-only-policy/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: EKS Cluster Creation using terraform-aws-modules/eks/aws\nDESCRIPTION: This snippet configures an EKS cluster using the `terraform-aws-modules/eks/aws` module. It defines the cluster name, version, VPC ID, and subnet IDs.  It also creates a default managed node group.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"eks\" {\n  source  = \"terraform-aws-modules/eks/aws\"\n  version = \"~> 20.4\"\n\n  cluster_name    = \"my-cluster\"\n  cluster_version = \"1.29\"\n\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n\n  eks_managed_node_groups = {\n    default = {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This bash snippet generates a Terraform execution plan, showing the changes that Terraform will make to your infrastructure. It is useful for verifying the changes before applying them.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role-with-oidc/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Bucket Wrapper\nDESCRIPTION: This Terragrunt configuration shows how to manage multiple S3 buckets using the S3 bucket module wrapper.  It defines default settings for all buckets, such as `force_destroy`, `attach_elb_log_delivery_policy`, `attach_lb_log_delivery_policy`, `attach_deny_insecure_transport_policy`, and `attach_require_latest_tls_policy`.  It then defines individual configurations for `bucket1` and `bucket2`, including specific bucket names and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-account/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan\nDESCRIPTION: This command creates an execution plan, which shows the changes that Terraform will make to your infrastructure. It allows you to review the changes before applying them.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-eks-role/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform plan\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This command initializes the Terraform working directory by downloading the necessary provider plugins and modules. It is the first step required before running Terraform plan or apply.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-eks-role/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This snippet demonstrates how to apply a Terraform configuration. The `terraform apply` command executes the changes defined in the Terraform plan, provisioning or modifying the infrastructure resources as specified in the configuration files.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-policy/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Execution\nDESCRIPTION: This snippet demonstrates the standard Terraform workflow for initializing, planning, and applying infrastructure changes.  It is used to deploy or update the resources defined in the Terraform configuration files. The steps include initializing the Terraform environment, reviewing the proposed changes, and applying those changes to the AWS environment.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-group-complete/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This bash script applies the changes defined in the Terraform configuration, creating or modifying the infrastructure resources.  This script is executed after reviewing the plan to deploy changes.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-read-only-policy/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Execution\nDESCRIPTION: These commands initialize the Terraform project, generate an execution plan, and apply the changes to create the resources defined in the configuration. Finally, the `terraform destroy` command removes all created resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role-with-saml/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This bash snippet initializes Terraform, downloads the necessary plugins, and prepares the working directory for use. It must be executed before any Terraform plan or apply commands can be run.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role-with-oidc/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Control policy creation\nDESCRIPTION: Defines a boolean variable to control whether the IAM policy resource is created. Defaults to true.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_5\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"create_policy\" {\n  description = \"Whether to create the IAM policy\"\n  type        = bool\n  default     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This snippet initializes the Terraform environment, downloads the necessary providers and modules. This is the first step to set up the infrastructure defined in the Terraform configuration.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-github-oidc/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This snippet shows how to destroy the resources created by a Terraform configuration. It is used to remove all resources defined in the configuration. It requires Terraform to be installed and configured with AWS credentials.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-account/README.md#_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\nRun `terraform destroy` when you don't need these resources.\n```\n\n----------------------------------------\n\nTITLE: Setting up Github OIDC Provider\nDESCRIPTION: This configures an IAM OIDC provider for GitHub using the `iam-github-oidc-provider` module, used for authenticating GitHub Actions with AWS. The module only defines the `source` and `tags` to setup the provider. The `tags` variable is used to add metadata to the provider.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_github_oidc_provider\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-github-oidc-provider\"\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This snippet demonstrates how to initialize a Terraform project. The `terraform init` command initializes the Terraform working directory, downloads the necessary plugins, and prepares the environment for deployment.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-policy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Wrapper Configuration\nDESCRIPTION: This Terraform configuration shows how to use the `iam-assumable-role-with-oidc` module wrapper directly within a Terraform module. It specifies the module source and configures default settings and item-specific overrides. The module source points to the wrapper, and the `defaults` and `items` maps control the configuration of individual IAM roles.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-oidc/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-assumable-role-with-oidc\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This bash script initializes the Terraform environment, downloads the necessary providers and modules, and prepares the working directory for deployment.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-read-only-policy/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Read-Only Policy\nDESCRIPTION: This snippet shows how to create a read-only IAM policy using the `iam-read-only-policy` submodule. `name` is the name of the policy. `path` specifies the IAM path for the policy. `description` gives a description of the policy. `allowed_services` is a list of AWS service prefixes for which read-only actions are allowed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_read_only_policy\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-read-only-policy\"\n\n  name        = \"example\"\n  path        = \"/\"\n  description = \"My example read-only policy\"\n\n  allowed_services = [\"rds\", \"dynamo\", \"health\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This snippet applies the changes required to reach the desired state of the configuration.  It executes the actions proposed in a Terraform plan.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-github-oidc/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Apply\nDESCRIPTION: These commands initialize Terraform, plan the infrastructure changes, and apply the configuration to create the IAM roles.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This snippet destroys all the resources managed by the current Terraform configuration. Use this command to clean up the infrastructure created by Terraform.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-github-oidc/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Application\nDESCRIPTION: This snippet shows how to initialize, plan, and apply Terraform configurations. It is a standard procedure for provisioning infrastructure using Terraform.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-group-with-assumable-roles-policy/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Default External Secrets KMS Key ARN List Terraform\nDESCRIPTION: Specifies the default list of KMS Key ARNs used by Secrets Manager for secrets mounted with External Secrets. These keys are used to decrypt secrets. The default value is a wildcard ARN, granting access to all KMS keys.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_7\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:kms:*:*:key/*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This bash script destroys all the resources managed by the Terraform configuration, cleaning up the infrastructure and preventing further costs.  This script is executed when the resources are no longer required.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-read-only-policy/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Default External Secrets SSM Parameter ARN List Terraform\nDESCRIPTION: Defines the default list of Systems Manager Parameter ARNs for secrets to be mounted using External Secrets.  These ARNs identify the SSM parameters. The default value is a wildcard ARN, granting access to all SSM parameters.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_9\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:ssm:*:*:parameter/*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization and Application\nDESCRIPTION: This bash snippet initializes a Terraform project, plans the changes, and applies them to provision the defined infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-role-for-service-accounts-eks/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Default External DNS Hosted Zone ARN List Terraform\nDESCRIPTION: Defines the default list of Route53 hosted zone ARNs for External DNS.  External DNS can manage records within these hosted zones. The default value gives wildcard access to hosted zones.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_6\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:route53:::hostedzone/*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This bash script initializes the Terraform environment, plans the infrastructure changes, and applies the configuration to create the IAM roles and SAML provider. It requires Terraform to be installed and configured.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-roles-with-saml/README.md#_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: These commands initialize Terraform, create an execution plan, and apply the changes defined in the configuration. The destroy command removes the created resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-group-with-policies/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Define allowed services\nDESCRIPTION: Defines a list of AWS services for which Get/List/Describe/View actions are allowed. The service name should match the IAM prefix for the service. This variable is required.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"allowed_services\" {\n  description = \"List of services to allow Get/List/Describe/View options. Service name should be the same as corresponding service IAM prefix. See what it is for each service here https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html\"\n  type        = list(string)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM GitHub OIDC Role for GitHub Enterprise Server (Terraform)\nDESCRIPTION: This Terraform configuration creates an IAM role that trusts the GitHub OIDC provider for GitHub Enterprise Server users. It defines the source of the module, specifies the audience and provider URL for the GitHub Enterprise Server instance, sets the allowed subjects (organization and repository), attaches an S3 read-only policy, and adds a tag. The subjects, audience, and provider_url need to be updated according to the GitHub Enterprise Server installation.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-github-oidc-role/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_github_oidc_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-github-oidc-role\"\n\n  audience     = \"https://mygithub.com/<GITHUB_ORG>\"\n  provider_url = \"mygithub.com/_services/token\"\n\n  # This should be updated to suit your organization, repository, references/branches, etc.\n  subjects = [\"<GITHUB_ORG>/terraform-aws-iam:*\"]\n\n  policies = {\n    S3ReadOnly = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\n  }\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Karpenter Node IAM Role ARNs Input\nDESCRIPTION: Defines the input variable `karpenter_controller_node_iam_role_arns`, which is a list of IAM role ARNs that Karpenter can use to launch nodes. The default value is a list containing a wildcard character ('*'). This variable is used to grant Karpenter the necessary permissions to manage EC2 instances.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[<br/>  \"*\"<br/>]</pre>\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Role for Multiple ServiceAccounts in HCL\nDESCRIPTION: This snippet illustrates how to create an IAM role (`cloudwatch-exporter`) that can be assumed by multiple ServiceAccounts within the same EKS cluster (`production-main-1`). Specifically, it allows the `cloudwatch-exporter` ServiceAccount in both the `kube-system` and `app1` namespaces to assume the role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-eks-role/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_eks_role\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-eks-role\"\n\n  role_name = \"my-app\"\n\n  cluster_service_accounts = {\n    \"production-main-1\" = [\n      \"kube-system:cloudwatch-exporter\",\n      \"app1:cloudwatch-exporter\",\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Assumable IAM Roles\nDESCRIPTION: This snippet demonstrates how to create multiple assumable IAM roles (admin, poweruser, readonly) using the `iam-assumable-roles` submodule. `trusted_role_arns` is the list of ARNs that can assume these roles. `create_admin_role`, `create_poweruser_role`, and `create_readonly_role` determine which roles are created.  `poweruser_role_name` sets the name for the poweruser role. `readonly_role_requires_mfa` specifies whether MFA is required for the readonly role.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_assumable_roles\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-roles\"\n\n  trusted_role_arns = [\n    \"arn:aws:iam::307990089504:root\",\n    \"arn:aws:iam::835367859851:user/anton\",\n  ]\n\n  create_admin_role = true\n\n  create_poweruser_role = true\n  poweruser_role_name   = \"developer\"\n\n  create_readonly_role       = true\n  readonly_role_requires_mfa = false\n}\n```\n\n----------------------------------------\n\nTITLE: Define policy name prefix\nDESCRIPTION: Defines a prefix for the IAM policy name. The default value is null.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_8\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"name_prefix\" {\n  description = \"IAM policy name prefix\"\n  type        = string\n  default     = null\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This bash snippet destroys all resources managed by the Terraform configuration. It is used to clean up the infrastructure when it is no longer needed.  It will prompt for confirmation unless auto-approval is enabled.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role-with-oidc/README.md#_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Karpenter SSM Parameter ARNs Input\nDESCRIPTION: Defines the input variable `karpenter_controller_ssm_parameter_arns`, which is a list of SSM Parameter ARNs that contain AMI IDs launched by Karpenter. The default value is an ARN pattern for SSM parameters under the `aws/service/*` path. This allows Karpenter to fetch the latest AMI IDs from SSM for launching nodes.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_12\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[<br/>  \"arn:aws:ssm:*:*:parameter/aws/service/*\"<br/>]</pre>\n```\n\n----------------------------------------\n\nTITLE: Define policy name\nDESCRIPTION: Defines the name of the IAM policy. The default value is null, allowing AWS to generate a name.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_7\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"name\" {\n  description = \"The name of the policy\"\n  type        = string\n  default     = null\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Destroy\nDESCRIPTION: This snippet shows how to destroy Terraform-managed resources. The `terraform destroy` command removes all resources defined in the Terraform configuration, effectively dismantling the infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-policy/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform destroy\n```\n\n----------------------------------------\n\nTITLE: Node Termination Handler SQS Queue ARNs Input\nDESCRIPTION: Defines the input variable `node_termination_handler_sqs_queue_arns`, which is a list of SQS ARNs that contain node termination events. The default value is a list containing a wildcard character ('*'). This variable is used to grant permissions to a node termination handler to receive termination events from the specified SQS queues.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_14\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[<br/>  \"*\"<br/>]</pre>\n```\n\n----------------------------------------\n\nTITLE: Load Balancer Controller Target Group ARNs Input\nDESCRIPTION: Defines the input variable `load_balancer_controller_targetgroup_arns`, which is a list of Target Group ARNs used by the Load Balancer Controller. The default value is an ARN pattern for target groups. This variable grants the Load Balancer Controller permissions to manage and interact with specified target groups.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_13\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[<br/>  \"arn:aws:elasticloadbalancing:*:*:targetgroup/*/*\"<br/>]</pre>\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Usage for IAM Github OIDC Role\nDESCRIPTION: This Terraform configuration shows how to use the `iam-github-oidc-role` module wrapper directly within a Terraform module. It defines the module source and configures default values and specific configurations for multiple IAM roles. The `items` block allows for defining multiple role configurations within the wrapper.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-role/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-github-oidc-role\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Velero S3 Bucket ARNs Input\nDESCRIPTION: Defines the input variable `velero_s3_bucket_arns`, which is a list of S3 Bucket ARNs that Velero needs access to for backing up and restoring cluster resources. The default value is a list containing a wildcard character ('*'). This variable allows Velero to access the specified S3 buckets for storing and retrieving backup data.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_15\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[<br/>  \"*\"<br/>]</pre>\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Account Alias Error Example\nDESCRIPTION: This code snippet shows the error that occurs when trying to create an IAM account alias that already exists. It indicates that the alias needs to be imported into Terraform to be managed.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-account/README.md#_snippet_0\n\nLANGUAGE: terraform\nCODE:\n```\n* aws_iam_account_alias.this: Error creating account alias with name my-account-alias\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for IAM User Wrapper\nDESCRIPTION: This snippet demonstrates how to use the IAM user wrapper module directly in a Terraform configuration. It defines a module named `wrapper` and specifies its source, along with default input values and individual item configurations for the IAM users.  The `source` attribute points to the module's location, and the `defaults` and `items` blocks define configuration settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-user/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-user\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Bucket Management\nDESCRIPTION: This Terragrunt configuration shows how to manage multiple S3 buckets using a wrapper module.  It sets default values for bucket settings such as force destroy and security policies, and then defines individual bucket configurations within the `items` block. This configuration enables the user to manage several S3 buckets from a single Terragrunt layer.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for Multiple S3 Buckets\nDESCRIPTION: This Terragrunt configuration shows how to manage multiple S3 buckets using the module wrapper.  It defines a default configuration including settings such as `force_destroy` and policies related to logging and transport security. The `items` block then specifies configurations for individual buckets, allowing for customization of settings like bucket names and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-eks-role/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default External Secrets Secrets Manager ARN List Terraform\nDESCRIPTION: Defines the default list of Secrets Manager ARNs for secrets to be mounted using External Secrets. These ARNs identify the secrets. The default value is a wildcard ARN, granting access to all Secrets Manager secrets.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_8\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:secretsmanager:*:*:secret:*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Buckets\nDESCRIPTION: This Terragrunt configuration manages multiple S3 buckets using a wrapper module. It showcases how to define default settings like `force_destroy`, attachment policies, and TLS requirements, alongside individual bucket configurations with specific names and tags. The `items` block allows for per-bucket customization, while `defaults` enforces baseline security.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-assumable-roles-policy/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating IAM User\nDESCRIPTION: This snippet demonstrates how to create an IAM user using the `iam-user` submodule. `name` specifies the name of the user. `force_destroy` enables deletion of the user even if it has attached resources. `pgp_key` specifies the PGP key used for encrypting the user's password. `password_reset_required` determines whether the user is required to reset their password on first login.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_user\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-user\"\n\n  name          = \"vasya.pupkin\"\n  force_destroy = true\n\n  pgp_key = \"keybase:test\"\n\n  password_reset_required = false\n}\n```\n\n----------------------------------------\n\nTITLE: Default Cert Manager Hosted Zone ARN List Terraform\nDESCRIPTION: Specifies the default list of Route53 hosted zone ARNs for Cert Manager.  Cert Manager uses these ARNs to manage DNS records. The default value provides wildcard access to hosted zones.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_5\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:route53:::hostedzone/*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple S3 Buckets with Terragrunt (HCL)\nDESCRIPTION: This Terragrunt configuration demonstrates how to manage multiple S3 buckets using a wrapper module. It defines default values for bucket settings, such as `force_destroy` and policies, and then configures individual buckets with their specific names and tags.  It showcases the ability to override the defaults for specific resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default FSx Lustre CSI Service Role ARN List Terraform\nDESCRIPTION: Specifies the default list of Service role ARNs for the FSx for Lustre CSI driver.  This driver manages FSx for Lustre service linked roles. The default value allows access to the AWS service role for S3 data source.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_10\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"arn:aws:iam::*:role/aws-service-role/s3.data-source.lustre.fsx.amazonaws.com/*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terragrunt S3 Bucket Example\nDESCRIPTION: This code snippet demonstrates how to manage multiple S3 buckets in one Terragrunt layer using a wrapper module. It shows how to set default configurations like force_destroy and attach policies, and how to configure individual buckets with specific names and tags. The `source` attribute defines the location of the S3 bucket wrapper module.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-group-with-policies/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manage Multiple S3 Buckets using Terragrunt\nDESCRIPTION: This Terragrunt configuration uses the S3 bucket module wrapper to manage multiple S3 buckets.  It sets default configurations such as `force_destroy` and policy attachments, then defines individual buckets within the `items` block, allowing for bucket-specific configurations like names and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-roles-with-saml/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for Multiple S3 Buckets\nDESCRIPTION: This Terragrunt configuration demonstrates how to manage multiple S3 buckets using the S3 bucket wrapper module. It defines default configurations for all buckets, such as force_destroy and various policies. The 'items' attribute allows specifying bucket-specific configurations, such as the bucket name and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-read-only-policy/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Github OIDC Provider\nDESCRIPTION: This Terragrunt configuration uses a module wrapper to manage multiple instances of the IAM Github OIDC Provider. It defines a source for the Terraform module and configures default values and specific configurations for individual items.  The `source` attribute specifies the location of the module wrapper, and `inputs` defines default settings and item-specific overrides.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-provider/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-github-oidc-provider\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-github-oidc-provider?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Admin Role Policy ARNs Configuration\nDESCRIPTION: Configuration for the `admin_role_policy_arns` input variable. Specifies a list of policy ARNs to be attached to the admin role. By default, it includes the `AdministratorAccess` managed policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[\n  \"arn:aws:iam::aws:policy/AdministratorAccess\"\n]</pre>\n```\n\n----------------------------------------\n\nTITLE: Poweruser Role Policy ARNs Configuration\nDESCRIPTION: Configuration for the `poweruser_role_policy_arns` input variable. Specifies a list of policy ARNs to be attached to the poweruser role. By default, it includes the `PowerUserAccess` managed policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[\n  \"arn:aws:iam::aws:policy/PowerUserAccess\"\n]</pre>\n```\n\n----------------------------------------\n\nTITLE: Define policy description\nDESCRIPTION: Defines the description of the IAM policy. The default description is 'IAM Policy'.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_6\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"description\" {\n  description = \"The description of the policy\"\n  type        = string\n  default     = \"IAM Policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Readonly Role Policy ARNs Configuration\nDESCRIPTION: Configuration for the `readonly_role_policy_arns` input variable. Specifies a list of policy ARNs to be attached to the readonly role. By default, it includes the `ReadOnlyAccess` managed policy.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[\n  \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n]</pre>\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for IAM Role\nDESCRIPTION: This Terragrunt configuration file demonstrates how to use the module wrapper to manage multiple IAM roles for service accounts in EKS. It defines the Terraform source, default input values, and individual item configurations within the `inputs` block.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-role-for-service-accounts-eks/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-role-for-service-accounts-eks\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-role-for-service-accounts-eks?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define policy path\nDESCRIPTION: Defines the path of the IAM policy within IAM. The default path is '/'.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_9\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"path\" {\n  description = \"The path of the policy in IAM\"\n  type        = string\n  default     = \"/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Trusted Role Actions Configuration\nDESCRIPTION: Configuration for the `trusted_role_actions` input variable. Specifies a list of actions that trusted roles can perform. Defaults to `sts:AssumeRole` and `sts:TagSession`.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles/README.md#_snippet_4\n\nLANGUAGE: Terraform\nCODE:\n```\n<pre>[\n  \"sts:AssumeRole\",\n  \"sts:TagSession\"\n]</pre>\n```\n\n----------------------------------------\n\nTITLE: Creating IAM Group with Assumable Role Policy\nDESCRIPTION: This snippet demonstrates how to create an IAM group with an assumable role policy using the `iam-group-with-assumable-roles-policy` submodule. `name` specifies the name of the group. `assumable_roles` is a list of ARNs that members of the group can assume. `group_users` is a list of IAM usernames that will be added to the group.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/README.md#_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_group_with_assumable_roles_policy\" {\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-group-with-assumable-roles-policy\"\n\n  name = \"production-readonly\"\n\n  assumable_roles = [\n    \"arn:aws:iam::835367859855:role/readonly\"  # these roles can be created using `iam_assumable_roles` submodule\n  ]\n\n  group_users = [\n    \"user1\",\n    \"user2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Trusted Role Actions Configuration - Terraform\nDESCRIPTION: This configuration defines additional role actions allowed for the trusted role. It specifies `sts:AssumeRoleWithSAML` to allow assuming the role with SAML and `sts:TagSession` to allow tagging sessions. This is configured via the `trusted_role_actions` input variable.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-roles-with-saml/README.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\n[\n  \"sts:AssumeRoleWithSAML\",\n  \"sts:TagSession\"\n]\n```\n\n----------------------------------------\n\nTITLE: IAM Role Resource Definition - AWS Terraform\nDESCRIPTION: Defines an AWS IAM role resource. It configures the role name, description, path, maximum session duration, permissions boundary, and tags. The trust relationship is established using the policy document generated by the `aws_iam_policy_document` data source.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-assumable-role-with-saml/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nresource \"aws_iam_role\" \"this\" {\n  count                  = var.create_role ? 1 : 0\n  name                   = var.role_name != null ? var.role_name : (var.role_name_prefix != null ? substr(var.role_name_prefix, 0, 64) : null)\n  assume_role_policy   = data.aws_iam_policy_document.assume_role_with_saml.json\n  description            = var.role_description\n  force_detach_policies = var.force_detach_policies\n  max_session_duration = var.max_session_duration\n  path                   = var.role_path\n  permissions_boundary = var.role_permissions_boundary_arn != \"\" ? var.role_permissions_boundary_arn : null\n  tags                   = var.tags\n}\n```\n\n----------------------------------------\n\nTITLE: Define web console services\nDESCRIPTION: Defines a list of web console services to allow. Defaults to resource-groups, tag, health, and ce.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_11\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"web_console_services\" {\n  description = \"List of web console services to allow\"\n  type        = list(string)\n  default     = [\n    \"resource-groups\",\n    \"tag\",\n    \"health\",\n    \"ce\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Define additional policy JSON\nDESCRIPTION: Defines a JSON policy document that can be added to the main IAM policy for custom actions. It is set to an empty JSON object by default.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_0\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"additional_policy_json\" {\n  description = \"JSON policy document if you want to add custom actions\"\n  type        = string\n  default     = \"{}\"\n  nullable    = false\n}\n```\n\n----------------------------------------\n\nTITLE: Define tags\nDESCRIPTION: Defines a map of tags to be added to the IAM policy. The default is an empty map.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_10\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"tags\" {\n  description = \"A map of tags to add to all resources.\"\n  type        = map(string)\n  default     = {}\n}\n```\n\n----------------------------------------\n\nTITLE: Enable CloudWatch logs query actions\nDESCRIPTION: Defines a boolean variable to control whether actions related to CloudWatch Logs querying (StartQuery, StopQuery, FilterLogEvents) are allowed in the IAM policy. The default value is true.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_1\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"allow_cloudwatch_logs_query\" {\n  description = \"Allows StartQuery/StopQuery/FilterLogEvents CloudWatch actions\"\n  type        = bool\n  default     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Enable predefined STS actions\nDESCRIPTION: Defines a boolean variable to control whether common STS actions (GetCallerIdentity, GetSessionToken, GetAccessKeyInfo) are allowed in the IAM policy. Default value is true.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_2\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"allow_predefined_sts_actions\" {\n  description = \"Allows GetCallerIdentity/GetSessionToken/GetAccessKeyInfo sts actions\"\n  type        = bool\n  default     = true\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Module Usage for IAM Account Wrapper\nDESCRIPTION: This Terraform module configuration shows how to use the IAM Account module wrapper.  The `source` specifies the module location. The `defaults` and `items` input variables are used to configure the module wrapper, allowing to configure default settings and specific configurations for each item.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-account/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-account\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable web console services actions\nDESCRIPTION: Defines a boolean variable that enables List/Get/Describe/View actions for the services typically used when browsing the AWS console, such as resource-groups, tag, and health. It is set to true by default.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-read-only-policy/README.md#_snippet_3\n\nLANGUAGE: Terraform\nCODE:\n```\nvariable \"allow_web_console_services\" {\n  description = \"Allows List/Get/Describe/View actions for services used when browsing AWS console (e.g. resource-groups, tag, health services)\"\n  type        = bool\n  default     = true\n}\n```\n\n----------------------------------------\n\nTITLE: IAM GitHub OIDC Provider Usage in HCL\nDESCRIPTION: This snippet demonstrates how to use the `iam_github_oidc_provider` module in a Terraform configuration. It sets the source and adds tags to the resources.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-github-oidc-provider/README.md#_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"iam_github_oidc_provider\" {\n  source    = \"terraform-aws-modules/iam/aws//modules/iam-github-oidc-provider\"\n\n  tags = {\n    Environment = \"test\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for IAM Read-Only Policy\nDESCRIPTION: This Terraform configuration uses the IAM read-only policy wrapper module. It demonstrates how to define default values and specific configurations for each item when not using Terragrunt. The 'source' attribute specifies the location of the module, and the 'defaults' and 'items' attributes are used to configure the module's behavior.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-read-only-policy/README.md#_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmodule \"wrapper\" {\n  source = \"terraform-aws-modules/iam/aws//wrappers/iam-read-only-policy\"\n\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terraform Initialization\nDESCRIPTION: This block shows how to initialize, plan, and apply a Terraform configuration. It also shows how to destroy resources when they are no longer needed. The `terraform init` command initializes the working directory, `terraform plan` creates an execution plan, and `terraform apply` applies the changes to the infrastructure.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-user/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ terraform init\n$ terraform plan\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terraform Apply\nDESCRIPTION: This bash snippet applies the changes described in the Terraform plan, creating or modifying the infrastructure as defined in the configuration. It will prompt for confirmation unless auto-approval is enabled.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/examples/iam-assumable-role-with-oidc/README.md#_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Bucket Management\nDESCRIPTION: This Terragrunt configuration manages multiple S3 buckets using a module wrapper. It sets default configurations, such as `force_destroy` and attachment of various policies, and defines specific settings for individual buckets.  It sets `force_destroy` to true, attaches several policies related to logging and security and defines configurations for `bucket1` and `bucket2` with different names and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-provider/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default AMP Workspace ARN List Terraform\nDESCRIPTION: Defines the default list of Amazon Managed Service Prometheus (AMP) Workspace ARNs.  This list specifies the AMP workspaces to which the IAM role will have read and write access for metrics. The default value is a wildcard, granting access to all AMP Workspaces.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/modules/iam-role-for-service-accounts-eks/README.md#_snippet_4\n\nLANGUAGE: terraform\nCODE:\n```\n[\\n  \"*\"\\n]\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Bucket Management\nDESCRIPTION: This Terragrunt configuration demonstrates managing multiple S3 buckets using a module wrapper. It configures default settings for force destruction and security policies, then defines individual bucket configurations with specific names and tags. This showcases how to deploy and manage multiple S3 buckets using a single Terragrunt configuration file.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-github-oidc-role/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Terragrunt Configuration for S3 Buckets\nDESCRIPTION: This Terragrunt configuration provides an example of managing multiple S3 buckets using a module wrapper. It configures default settings like `force_destroy` and policies, along with specific configurations for `bucket1` and `bucket2`. The `source` specifies the module location, while `inputs` configures default bucket properties and specific properties for each bucket like name and tags.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-oidc/README.md#_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Role SAML: Terragrunt Usage Example (HCL)\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the `iam-assumable-role-with-saml` module wrapper to manage multiple IAM assumable roles with SAML. It defines a `source` to the module and provides default inputs and items, where each item represents a separate instance of the module.  The `items` map allows you to configure different roles with different settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-saml/README.md#_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/iam/aws//wrappers/iam-assumable-role-with-saml\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-iam.git//wrappers/iam-assumable-role-with-saml?ref=master\"\n}\n\ninputs = {\n  defaults = { # Default values\n    create = true\n    tags = {\n      Terraform   = \"true\"\n      Environment = \"dev\"\n    }\n  }\n\n  items = {\n    my-item = {\n      # omitted... can be any argument supported by the module\n    }\n    my-second-item = {\n      # omitted... can be any argument supported by the module\n    }\n    # omitted...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: S3 Buckets: Terragrunt Usage Example (HCL)\nDESCRIPTION: This Terragrunt configuration demonstrates how to use the `s3-bucket` module wrapper to manage multiple S3 buckets. It defines a `source` to the module and provides default inputs and items, where each item represents a separate instance of the module.  The `items` map allows you to configure different buckets with different settings.\nSOURCE: https://github.com/terraform-aws-modules/terraform-aws-iam/blob/master/wrappers/iam-assumable-role-with-saml/README.md#_snippet_2\n\nLANGUAGE: HCL\nCODE:\n```\nterraform {\n  source = \"tfr:///terraform-aws-modules/s3-bucket/aws//wrappers\"\n  # Alternative source:\n  # source = \"git::git@github.com:terraform-aws-modules/terraform-aws-s3-bucket.git//wrappers?ref=master\"\n}\n\ninputs = {\n  defaults = {\n    force_destroy = true\n\n    attach_elb_log_delivery_policy        = true\n    attach_lb_log_delivery_policy         = true\n    attach_deny_insecure_transport_policy = true\n    attach_require_latest_tls_policy      = true\n  }\n\n  items = {\n    bucket1 = {\n      bucket = \"my-random-bucket-1\"\n    }\n    bucket2 = {\n      bucket = \"my-random-bucket-2\"\n      tags = {\n        Secure = \"probably\"\n      }\n    }\n  }\n}\n```"
  }
]