[
  {
    "owner": "google",
    "repo": "googletest",
    "content": "TITLE: Using Mock Objects in Tests with C++\nDESCRIPTION: Shows a complete example of using a mock object in a test. The workflow includes importing symbols, creating the mock, setting default actions, setting expectations, and running code that uses the mock.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;                          // #1\n\nTEST(BarTest, DoesThis) {\n  MockFoo foo;                                    // #2\n\n  ON_CALL(foo, GetSize())                         // #3\n      .WillByDefault(Return(1));\n  // ... other default actions ...\n\n  EXPECT_CALL(foo, Describe(5))                   // #4\n      .Times(3)\n      .WillRepeatedly(Return(\"Category 5\"));\n  // ... other expectations ...\n\n  EXPECT_EQ(MyProductionFunction(&foo), \"good\");  // #5\n}                                                 // #6\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure in GoogleTest\nDESCRIPTION: Shows the basic structure of a test using the TEST() macro to define test functions and test suites.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nTEST(TestSuiteName, TestName) {\n  ... test body ...\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Expectations with EXPECT_CALL in gMock\nDESCRIPTION: The general syntax for setting expectations on mock objects using EXPECT_CALL. Shows how to specify the mock object, method, expected arguments, cardinality, and actions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(mock_object, method(matchers))\n    .Times(cardinality)\n    .WillOnce(action)\n    .WillRepeatedly(action);\n```\n\n----------------------------------------\n\nTITLE: Basic Test Definition with TEST Macro in C++\nDESCRIPTION: Defines an individual test named TestName in the TestSuiteName test suite. Both names must be valid C++ identifiers without underscores. The test outcome is determined by assertions used within the test body.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(TestSuiteName, TestName) {\n  ... statements ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Mock Turtle Class with gMock\nDESCRIPTION: Example implementation of a mock class for the Turtle interface using gMock's MOCK_METHOD macro. This demonstrates how to mock both const and non-const virtual methods with the proper syntax.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gmock/gmock.h>  // Brings in gMock.\n\nclass MockTurtle : public Turtle {\n public:\n  ...\n  MOCK_METHOD(void, PenUp, (), (override));\n  MOCK_METHOD(void, PenDown, (), (override));\n  MOCK_METHOD(void, Forward, (int distance), (override));\n  MOCK_METHOD(void, Turn, (int degrees), (override));\n  MOCK_METHOD(void, GoTo, (int x, int y), (override));\n  MOCK_METHOD(int, GetX, (), (const, override));\n  MOCK_METHOD(int, GetY, (), (const, override));\n};\n```\n\n----------------------------------------\n\nTITLE: Factorial Function Test Examples\nDESCRIPTION: Complete example showing how to write tests for a factorial function, including multiple test cases in a test suite.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nint Factorial(int n);  // Returns the factorial of n\n```\n\nLANGUAGE: C++\nCODE:\n```\n// Tests factorial of 0.\nTEST(FactorialTest, HandlesZeroInput) {\n  EXPECT_EQ(Factorial(0), 1);\n}\n\n// Tests factorial of positive numbers.\nTEST(FactorialTest, HandlesPositiveInput) {\n  EXPECT_EQ(Factorial(1), 1);\n  EXPECT_EQ(Factorial(2), 2);\n  EXPECT_EQ(Factorial(3), 6);\n  EXPECT_EQ(Factorial(8), 40320);\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic GoogleTest C++ Test\nDESCRIPTION: Sample C++ test file that demonstrates basic GoogleTest assertions including string comparison and equality check.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-bazel.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gtest/gtest.h>\n\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Main Function Implementation with FooTest Fixture in C++\nDESCRIPTION: A complete example of a main function with a test fixture for a Foo class. It demonstrates fixture setup/teardown methods, test cases, and proper GoogleTest initialization.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\n#include \"this/package/foo.h\"\n\n#include <gtest/gtest.h>\n\nnamespace my {\nnamespace project {\nnamespace {\n\n// The fixture for testing class Foo.\nclass FooTest : public testing::Test {\n protected:\n  // You can remove any or all of the following functions if their bodies would\n  // be empty.\n\n  FooTest() {\n     // You can do set-up work for each test here.\n  }\n\n  ~FooTest() override {\n     // You can do clean-up work that doesn't throw exceptions here.\n  }\n\n  // If the constructor and destructor are not enough for setting up\n  // and cleaning up each test, you can define the following methods:\n\n  void SetUp() override {\n     // Code here will be called immediately after the constructor (right\n     // before each test).\n  }\n\n  void TearDown() override {\n     // Code here will be called immediately after each test (right\n     // before the destructor).\n  }\n\n  // Class members declared here can be used by all tests in the test suite\n  // for Foo.\n};\n\n// Tests that the Foo::Bar() method does Abc.\nTEST_F(FooTest, MethodBarDoesAbc) {\n  const std::string input_filepath = \"this/package/testdata/myinputfile.dat\";\n  const std::string output_filepath = \"this/package/testdata/myoutputfile.dat\";\n  Foo f;\n  EXPECT_EQ(f.Bar(input_filepath, output_filepath), 0);\n}\n\n// Tests that Foo does Xyz.\nTEST_F(FooTest, DoesXyz) {\n  // Exercises the Xyz feature of Foo.\n}\n\n}  // namespace\n}  // namespace project\n}  // namespace my\n\nint main(int argc, char **argv) {\n  testing::InitGoogleTest(&argc, argv);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Global Test Environment Setup\nDESCRIPTION: Shows how to implement global test environment setup and teardown by subclassing testing::Environment.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_26\n\nLANGUAGE: c++\nCODE:\n```\nclass Environment : public ::testing::Environment {\n public:\n  ~Environment() override {}\n\n  // Override this to define how to set up the environment.\n  void SetUp() override {}\n\n  // Override this to define how to tear down the environment.\n  void TearDown() override {}\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple GoogleTest Test File\nDESCRIPTION: A basic GoogleTest example file that demonstrates how to include the GoogleTest header and write a simple test with basic assertions. It checks that two strings are not equal and verifies a multiplication result.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-cmake.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gtest/gtest.h>\n\n// Demonstrate some basic assertions.\nTEST(HelloTest, BasicAssertions) {\n  // Expect two strings not to be equal.\n  EXPECT_STRNE(\"hello\", \"world\");\n  // Expect equality.\n  EXPECT_EQ(7 * 6, 42);\n}\n```\n\n----------------------------------------\n\nTITLE: Basic gMock Usage Example in C++\nDESCRIPTION: A simple example demonstrating the basic workflow of using gMock in a test. It creates a mock turtle object, sets expectations on it, and verifies that a Painter class correctly uses the turtle.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"path/to/mock-turtle.h\"\n#include <gmock/gmock.h>\n#include <gtest/gtest.h>\n\nusing ::testing::AtLeast;                         // #1\n\nTEST(PainterTest, CanDrawSomething) {\n  MockTurtle turtle;                              // #2\n  EXPECT_CALL(turtle, PenDown())                  // #3\n      .Times(AtLeast(1));\n\n  Painter painter(&turtle);                       // #4\n\n  EXPECT_TRUE(painter.DrawCircle(0, 0, 10));      // #5\n}\n```\n\n----------------------------------------\n\nTITLE: Fixture-Based Test Definition with TEST_F Macro in C++\nDESCRIPTION: Defines an individual test that uses a test fixture class. TestFixtureName must be the name of a previously defined test fixture class, and both names must be valid C++ identifiers without underscores.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nTEST_F(TestFixtureName, TestName) {\n  ... statements ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a TEST_F() Macro for Test Fixtures in C++\nDESCRIPTION: Example of the TEST_F macro structure used with test fixtures in GoogleTest. The macro requires a test fixture class name and test name, and contains the test body.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\nTEST_F(TestFixtureClassName, TestName) {\n  ... test body ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Event Listener in GoogleTest C++\nDESCRIPTION: Demonstrates how to create a custom event listener by subclassing testing::EmptyTestEventListener. This example shows a minimalist printer that handles test start, end, and result events.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_49\n\nLANGUAGE: c++\nCODE:\n```\nclass MinimalistPrinter : public testing::EmptyTestEventListener {\n  // Called before a test starts.\n  void OnTestStart(const testing::TestInfo& test_info) override {\n    printf(\"*** Test %s.%s starting.\\n\",\n           test_info.test_suite_name(), test_info.name());\n  }\n\n  // Called after a failed assertion or a SUCCESS().\n  void OnTestPartResult(const testing::TestPartResult& test_part_result) override {\n    printf(\"%s in %s:%d\\n%s\\n\",\n           test_part_result.failed() ? \"*** Failure\" : \"Success\",\n           test_part_result.file_name(),\n           test_part_result.line_number(),\n           test_part_result.summary());\n  }\n\n  // Called after a test ends.\n  void OnTestEnd(const testing::TestInfo& test_info) override {\n    printf(\"*** Test %s.%s ending.\\n\",\n           test_info.test_suite_name(), test_info.name());\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Streaming Custom Failure Message in GoogleTest Assertion (C++)\nDESCRIPTION: Demonstrates how to stream a custom failure message into a GoogleTest assertion macro using the << operator. This allows for more descriptive error messages when an assertion fails.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_TRUE(my_condition) << \"My condition is not true\";\n```\n\n----------------------------------------\n\nTITLE: Assertion Example with Custom Messages in C++\nDESCRIPTION: Demonstrates how to use ASSERT_EQ and EXPECT_EQ macros with custom failure messages using stream operators.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nASSERT_EQ(x.size(), y.size()) << \"Vectors x and y are of unequal length\";\n\nfor (int i = 0; i < x.size(); ++i) {\n  EXPECT_EQ(x[i], y[i]) << \"Vectors x and y differ at index \" << i;\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Overloaded Methods in C++\nDESCRIPTION: Shows how to mock overloaded methods by defining multiple MOCK_METHOD declarations with the same method name but different parameter lists or qualifiers.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n  ...\n\n  // Must be virtual as we'll inherit from Foo.\n  virtual ~Foo();\n\n  // Overloaded on the types and/or numbers of arguments.\n  virtual int Add(Element x);\n  virtual int Add(int times, Element x);\n\n  // Overloaded on the const-ness of this object.\n  virtual Bar& GetBar();\n  virtual const Bar& GetBar() const;\n};\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(int, Add, (Element x), (override));\n  MOCK_METHOD(int, Add, (int times, Element x), (override));\n\n  MOCK_METHOD(Bar&, GetBar, (), (override));\n  MOCK_METHOD(const Bar&, GetBar, (), (const, override));\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Tests Using the QueueTest Fixture in C++\nDESCRIPTION: Example of writing tests that use the QueueTest fixture. It shows two test cases: one checking if a queue is initially empty and another testing the dequeue functionality.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nTEST_F(QueueTest, IsEmptyInitially) {\n  EXPECT_EQ(q0_.size(), 0);\n}\n\nTEST_F(QueueTest, DequeueWorks) {\n  int* n = q0_.Dequeue();\n  EXPECT_EQ(n, nullptr);\n\n  n = q1_.Dequeue();\n  ASSERT_NE(n, nullptr);\n  EXPECT_EQ(*n, 1);\n  EXPECT_EQ(q1_.size(), 0);\n  delete n;\n\n  n = q2_.Dequeue();\n  ASSERT_NE(n, nullptr);\n  EXPECT_EQ(*n, 2);\n  EXPECT_EQ(q2_.size(), 1);\n  delete n;\n}\n```\n\n----------------------------------------\n\nTITLE: Building GoogleTest Standalone with CMake\nDESCRIPTION: Basic commands to clone, build and install GoogleTest as a standalone project.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/google/googletest.git -b v1.16.0\ncd googletest\nmkdir build\ncd build\ncmake ..\n```\n\n----------------------------------------\n\nTITLE: Registering and Instantiating Type-Parameterized Tests in C++\nDESCRIPTION: This code shows how to register type-parameterized test patterns using REGISTER_TYPED_TEST_SUITE_P and instantiate them with specific types using INSTANTIATE_TYPED_TEST_SUITE_P.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_40\n\nLANGUAGE: C++\nCODE:\n```\nREGISTER_TYPED_TEST_SUITE_P(FooTest,\n                            DoesBlah, HasPropertyA);\n\nusing MyTypes = ::testing::Types<char, int, unsigned int>;\nINSTANTIATE_TYPED_TEST_SUITE_P(My, FooTest, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Classes with MOCK_METHOD Macro in C++\nDESCRIPTION: Shows how to define a basic mock class using the MOCK_METHOD macro with 3 or 4 parameters. The fourth parameter allows specifying method qualifiers like const, override, noexcept, etc.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyMock {\n public:\n  MOCK_METHOD(ReturnType, MethodName, (Args...));\n  MOCK_METHOD(ReturnType, MethodName, (Args...), (Specs...));\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Building and Running Tests\nDESCRIPTION: CMake configuration to be added to CMakeLists.txt that sets up the test executable, links it with GoogleTest, and enables CMake's test discovery functionality. This allows building and running the tests through CMake's test runner.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-cmake.md#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nenable_testing()\n\nadd_executable(\n  hello_test\n  hello_test.cc\n)\ntarget_link_libraries(\n  hello_test\n  GTest::gtest_main\n)\n\ninclude(GoogleTest)\ngtest_discover_tests(hello_test)\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_THAT Macro with Matchers in C++\nDESCRIPTION: Demonstrates how to use the EXPECT_THAT macro to assert that a value matches a specific matcher. This is a core concept in GoogleTest for flexible assertions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nEXPECT_THAT(actual_value, matcher)\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Argument Values in gMock Expectations\nDESCRIPTION: Demonstrates how to set up expectations for mock methods with exact argument values. This example shows expectations for methods with different parameter types using explicit values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_23\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\n  EXPECT_CALL(foo, DoThis(5))\n      .WillOnce(Return('a'));\n  EXPECT_CALL(foo, DoThat(\"Hello\", bar));\n```\n\n----------------------------------------\n\nTITLE: Using SCOPED_TRACE for Improved Test Debugging in C++\nDESCRIPTION: Shows how to use the SCOPED_TRACE macro to add context to test failures occurring in subroutines. This helps identify which invocation of a subroutine caused a test failure by adding file name, line number, and a custom message to failure output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_17\n\nLANGUAGE: c++\nCODE:\n```\nSCOPED_TRACE(message);\n```\n\n----------------------------------------\n\nTITLE: Listing Googletest Sample Projects in Markdown\nDESCRIPTION: A markdown list detailing 10 sample projects that demonstrate various Googletest features. Each item briefly describes what the sample project covers, from basic unit testing to advanced topics like parameterized tests and custom listeners.\nSOURCE: https://github.com/google/googletest/blob/main/docs/samples.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n*   Sample #1 shows the basic steps of using googletest to test C++ functions.\n*   Sample #2 shows a more complex unit test for a class with multiple member\n    functions.\n*   Sample #3 uses a test fixture.\n*   Sample #4 teaches you how to use googletest and `googletest.h` together to\n    get the best of both libraries.\n*   Sample #5 puts shared testing logic in a base test fixture, and reuses it in\n    derived fixtures.\n*   Sample #6 demonstrates type-parameterized tests.\n*   Sample #7 teaches the basics of value-parameterized tests.\n*   Sample #8 shows using `Combine()` in value-parameterized tests.\n*   Sample #9 shows use of the listener API to modify Google Test's console\n    output and the use of its reflection API to inspect test results.\n*   Sample #10 shows use of the listener API to implement a primitive memory\n    leak checker.\n```\n\n----------------------------------------\n\nTITLE: Creating Different Types of Mock Objects in C++\nDESCRIPTION: Demonstrates how to create nice, naggy, and strict mock objects. Nice mocks ignore uninteresting calls, naggy mocks warn about them, and strict mocks treat them as failures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NiceMock;\nusing ::testing::NaggyMock;\nusing ::testing::StrictMock;\n\nNiceMock<MockFoo> nice_foo;      // The type is a subclass of MockFoo.\nNaggyMock<MockFoo> naggy_foo;    // The type is a subclass of MockFoo.\nStrictMock<MockFoo> strict_foo;  // The type is a subclass of MockFoo.\n```\n\n----------------------------------------\n\nTITLE: Setting up call sequences with InSequence in C++\nDESCRIPTION: Shows how to enforce a specific order of method calls using the InSequence clause. This example ensures Reset() is called before both GetSize() and Describe(), while allowing GetSize() and Describe() to occur in any order relative to each other.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Sequence;\nSequence s1, s2;\n...\nEXPECT_CALL(my_mock, Reset())\n    .InSequence(s1, s2);\nEXPECT_CALL(my_mock, GetSize())\n    .InSequence(s1);\nEXPECT_CALL(my_mock, Describe())\n    .InSequence(s2);\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Return Values with gMock\nDESCRIPTION: An example showing how to set multiple return values for a sequence of calls to the same mock method. It demonstrates using WillOnce for specific return values and WillRepeatedly for default values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(turtle, GetX())\n    .Times(5)\n    .WillOnce(Return(100))\n    .WillOnce(Return(150))\n    .WillRepeatedly(Return(200));\n```\n\n----------------------------------------\n\nTITLE: Using InSequence for Ordered Expectations in C++\nDESCRIPTION: Shows how to use the InSequence class to create an anonymous sequence of expectations that must occur in a specific order. The example demonstrates creating multiple ordered expectations within a scope.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\n{\n  InSequence seq;\n\n  // The following are expected to occur in the order declared.\n  EXPECT_CALL(...);\n  EXPECT_CALL(...);\n  ...\n  EXPECT_CALL(...);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Ordered Expectations with InSequence (C++)\nDESCRIPTION: Demonstrates how to enforce a strict order of method calls using InSequence. All expectations within the InSequence scope must occur in the specified order during test execution.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\n...\nTEST(FooTest, DrawsLineSegment) {\n  ...\n  {\n    InSequence seq;\n\n    EXPECT_CALL(turtle, PenDown());\n    EXPECT_CALL(turtle, Forward(100));\n    EXPECT_CALL(turtle, PenUp());\n  }\n  Foo();\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running GoogleTest Tests with CMake\nDESCRIPTION: Terminal commands to configure the CMake build, build the project, and run the tests using CTest. These commands generate the build files, compile the code, and execute the test binary to verify the tests pass.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-cmake.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nmy_project$ cmake -S . -B build\n-- The C compiler identification is GNU 10.2.1\n-- The CXX compiler identification is GNU 10.2.1\n...\n-- Build files have been written to: .../my_project/build\n\nmy_project$ cmake --build build\nScanning dependencies of target gtest\n...\n[100%] Built target gmock_main\n\nmy_project$ cd build && ctest\nTest project .../my_project/build\n    Start 1: HelloTest.BasicAssertions\n1/1 Test #1: HelloTest.BasicAssertions ........   Passed    0.00 sec\n\n100% tests passed, 0 tests failed out of 1\n\nTotal Test time (real) =   0.01 sec\n```\n\n----------------------------------------\n\nTITLE: Mocking std::function with MockFunction in GoogleTest\nDESCRIPTION: Example of using MockFunction to mock and test callbacks that use std::function. This is particularly useful for testing code that takes std::function parameters without modifying the production code.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_116\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(FooTest, RunsCallbackWithBarArgument) {\n  // 1. Create a mock object.\n  MockFunction<int(string)> mock_function;\n\n  // 2. Set expectations on Call() method.\n  EXPECT_CALL(mock_function, Call(\"bar\")).WillOnce(Return(1));\n\n  // 3. Exercise code that uses std::function.\n  Foo(mock_function.AsStdFunction());\n  // Foo's signature can be either of:\n  // void Foo(const std::function<int(string)>& fun);\n  // void Foo(std::function<int(string)> fun);\n\n  // 4. All expectations will be verified when mock_function\n  //     goes out of scope and is destroyed.\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Boolean Predicate with Informative Failure Messages in C++\nDESCRIPTION: Creates an IsEven() function that returns AssertionResult instead of bool to provide more informative failure messages when used with EXPECT_TRUE().\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\ntesting::AssertionResult IsEven(int n) {\n  if ((n % 2) == 0)\n    return testing::AssertionSuccess();\n  else\n    return testing::AssertionFailure() << n << \" is odd\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_CALL with multi-argument matchers in C++\nDESCRIPTION: Demonstrates how to set up an expectation with the With() clause to match multiple arguments as a group. This example enforces that the first argument is less than the second argument.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Lt;\n...\nEXPECT_CALL(my_mock, SetPosition(_, _))\n    .With(Lt());\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Matchers for Arguments in gMock\nDESCRIPTION: An example showing how to use the _ wildcard matcher to indicate that any value is acceptable for an argument. This is useful when you only care about some of the arguments to a function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n...\n// Expects that the turtle jumps to somewhere on the x=50 line.\nEXPECT_CALL(turtle, GoTo(50, _));\n```\n\n----------------------------------------\n\nTITLE: Using Functions and Lambdas as Actions in Google Test Mocks\nDESCRIPTION: Shows how to use existing functions, methods, functors, and lambdas as actions in mock expectations. It covers various scenarios including using standalone functions, member functions, and lambda expressions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_65\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_; using ::testing::Invoke;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, Sum, (int x, int y), (override));\n  MOCK_METHOD(bool, ComplexJob, (int x), (override));\n};\n\nint CalculateSum(int x, int y) { return x + y; }\nint Sum3(int x, int y, int z) { return x + y + z; }\n\nclass Helper {\n public:\n  bool ComplexJob(int x);\n};\n\n...\n  MockFoo foo;\n  Helper helper;\n  EXPECT_CALL(foo, Sum(_, _))\n      .WillOnce(&CalculateSum)\n      .WillRepeatedly(Invoke(NewPermanentCallback(Sum3, 1)));\n  EXPECT_CALL(foo, ComplexJob(_))\n      .WillOnce(Invoke(&helper, &Helper::ComplexJob))\n      .WillOnce([] { return true; })\n      .WillRepeatedly([](int x) { return x > 0; });\n\n  foo.Sum(5, 6);         // Invokes CalculateSum(5, 6).\n  foo.Sum(2, 3);         // Invokes Sum3(1, 2, 3).\n  foo.ComplexJob(10);    // Invokes helper.ComplexJob(10).\n  foo.ComplexJob(-1);    // Invokes the inline lambda.\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Return Values with WillOnce in GoogleTest C++\nDESCRIPTION: Demonstrates how to use WillOnce to specify a sequence of return values for a mock function. The example shows a mock function GetNumber() being called exactly 3 times and returning 1, 2, and 3 on consecutive calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(1))\n    .WillOnce(Return(2))\n    .WillOnce(Return(3));\n```\n\n----------------------------------------\n\nTITLE: Defining Value-Parameterized Test Fixtures in C++\nDESCRIPTION: Shows how to create a test fixture class for value-parameterized tests by deriving from testing::TestWithParam<T> or combining an existing fixture with testing::WithParamInterface<T>.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_28\n\nLANGUAGE: c++\nCODE:\n```\nclass FooTest :\n    public testing::TestWithParam<absl::string_view> {\n  // You can implement all the usual fixture class members here.\n  // To access the test parameter, call GetParam() from class\n  // TestWithParam<T>.\n};\n\n// Or, when you want to add parameters to a pre-existing fixture class:\nclass BaseTest : public testing::Test {\n  ...\n};\nclass BarTest : public BaseTest,\n                public testing::WithParamInterface<absl::string_view> {\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing GoogleTest with Command Line Arguments in C++\nDESCRIPTION: Initializes GoogleTest by parsing command line arguments. It removes recognized GoogleTest flags from argv and decrements argc accordingly. This must be called before RUN_ALL_TESTS().\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_18\n\nLANGUAGE: C++\nCODE:\n```\nvoid testing::InitGoogleTest(int* argc, char** argv)\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid testing::InitGoogleTest(int* argc, wchar_t** argv)\n```\n\nLANGUAGE: C++\nCODE:\n```\nvoid testing::InitGoogleTest()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Expectations with Argument Matching (C++)\nDESCRIPTION: Shows how to set up multiple expectations for the same method with different argument matchers. The more specific expectation (#2) takes precedence over the general one (#1) when arguments match both.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n...\nEXPECT_CALL(turtle, Forward(_));  // #1\nEXPECT_CALL(turtle, Forward(10))  // #2\n    .Times(2);\n```\n\n----------------------------------------\n\nTITLE: Combining WillOnce with WillRepeatedly in gMock (C++)\nDESCRIPTION: Shows how to use WillOnce() for initial return values and WillRepeatedly() for subsequent calls. The GetY() method will return 100 and 200 for the first two calls, then 300 for all additional calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(turtle, GetY())\n     .WillOnce(Return(100))\n     .WillOnce(Return(200))\n     .WillRepeatedly(Return(300));\n```\n\n----------------------------------------\n\nTITLE: Parameterized Test Definition with TEST_P Macro in C++\nDESCRIPTION: Defines a value-parameterized test that uses a test fixture class. Within the test body, the test parameter can be accessed with the GetParam() function. TestFixtureName must be a value-parameterized test fixture class.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nTEST_P(TestFixtureName, TestName) {\n  ... statements ...\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Matchers with Logic Operators in gMock\nDESCRIPTION: Shows how to create complex matchers by combining simpler ones using logical operators like AllOf(), AnyOf(), and Not(). This allows for sophisticated argument matching conditions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_26\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::HasSubstr;\nusing ::testing::Ne;\nusing ::testing::Not;\n...\n  // The argument must be > 5 and != 10.\n  EXPECT_CALL(foo, DoThis(AllOf(Gt(5),\n                                Ne(10))));\n\n  // The first argument must not contain sub-string \"blah\".\n  EXPECT_CALL(foo, DoThat(Not(HasSubstr(\"blah\")),\n                          NULL));\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Overloaded Methods with Const Qualifier in gMock\nDESCRIPTION: Shows how to disambiguate between overloaded methods that differ only by const-ness using the Const() wrapper. This allows setting different expectations for const and non-const versions of the same method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_29\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ReturnRef;\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(Bar&, GetBar, (), (override));\n  MOCK_METHOD(const Bar&, GetBar, (), (const, override));\n};\n\n...\n  MockFoo foo;\n  Bar bar1, bar2;\n  EXPECT_CALL(foo, GetBar())         // The non-const GetBar().\n      .WillOnce(ReturnRef(bar1));\n  EXPECT_CALL(Const(foo), GetBar())  // The const GetBar().\n      .WillOnce(ReturnRef(bar2));\n```\n\n----------------------------------------\n\nTITLE: Using a Mock with Delegation to Fake in C++ Test\nDESCRIPTION: Demonstrates how to use a mock class that delegates to a fake in a test scenario. It shows setting up expectations and how the fake's implementation is used when no specific action is specified.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n\nTEST(AbcTest, Xyz) {\n  MockFoo foo;\n\n  foo.DelegateToFake();  // Enables the fake for delegation.\n\n  // Put your ON_CALL(foo, ...)s here, if any.\n\n  // No action specified, meaning to use the default action.\n  EXPECT_CALL(foo, DoThis(5));\n  EXPECT_CALL(foo, DoThat(_, _));\n\n  int n = 0;\n  EXPECT_EQ(foo.DoThis(5), '+');  // FakeFoo::DoThis() is invoked.\n  foo.DoThat(\"Hi\", &n);  // FakeFoo::DoThat() is invoked.\n  EXPECT_EQ(n, 2);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Matchers as Predicates with STL Algorithms in C++\nDESCRIPTION: This snippet demonstrates how to use Google Test matchers with STL algorithms by wrapping them in the Matches() function. The example counts elements in a vector that are greater than or equal to 10.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_34\n\nLANGUAGE: cpp\nCODE:\n```\n#include <algorithm>\n#include <vector>\n\nusing ::testing::Matches;\nusing ::testing::Ge;\n\nvector<int> v;\n...\n// How many elements in v are >= 10?\nconst int count = count_if(v.begin(), v.end(), Matches(Ge(10)));\n```\n\n----------------------------------------\n\nTITLE: Using InSequence to Enforce Ordered Expectations in gMock\nDESCRIPTION: This example demonstrates using the InSequence object to enforce that expectations are matched in a specific order. It creates sequential expectations for GetX() calls that retire after saturation and return increasing values in order.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\nusing ::testing::Return;\n...\n{\n  InSequence s;\n\n  for (int i = 1; i <= n; i++) {\n    EXPECT_CALL(turtle, GetX())\n        .WillOnce(Return(10*i))\n        .RetiresOnSaturation();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bazel BUILD File for GoogleTest\nDESCRIPTION: Bazel BUILD file that defines a C++ test target and links it to the GoogleTest library and main function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-bazel.md#2025-04-22_snippet_3\n\nLANGUAGE: bazel\nCODE:\n```\ncc_test(\n    name = \"hello_test\",\n    size = \"small\",\n    srcs = [\"hello_test.cc\"],\n    deps = [\n        \"@googletest//:gtest\",\n        \"@googletest//:gtest_main\",\n    ],\n)\n```\n\n----------------------------------------\n\nTITLE: Correct RUN_ALL_TESTS Usage Example\nDESCRIPTION: Shows the proper way to use RUN_ALL_TESTS() by returning its value from main(), allowing proper test failure reporting.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nreturn RUN_ALL_TESTS();\n```\n\n----------------------------------------\n\nTITLE: Defining a QueueTest Fixture Class in C++\nDESCRIPTION: Example of creating a test fixture class that derives from testing::Test. The fixture sets up three Queue objects with different initial states for testing.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\nclass QueueTest : public testing::Test {\n protected:\n  QueueTest() {\n     // q0_ remains empty\n     q1_.Enqueue(1);\n     q2_.Enqueue(2);\n     q2_.Enqueue(3);\n  }\n\n  // ~QueueTest() override = default;\n\n  Queue<int> q0_;\n  Queue<int> q1_;\n  Queue<int> q2_;\n};\n```\n\n----------------------------------------\n\nTITLE: Performing Different Actions Based on Arguments in gMock\nDESCRIPTION: Shows how to configure a mock method to perform different actions based on the argument values. This uses the fact that the last matching expectation takes precedence, allowing for conditional behavior.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_31\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Lt;\nusing ::testing::Return;\n...\n  // The default case.\n  EXPECT_CALL(foo, DoThis(_))\n      .WillRepeatedly(Return('b'));\n  // The more specific case.\n  EXPECT_CALL(foo, DoThis(Lt(5)))\n      .WillRepeatedly(Return('a'));\n```\n\n----------------------------------------\n\nTITLE: Parameterized ACTION Definition\nDESCRIPTION: Shows how to define a parameterized action using ACTION_P macro, allowing actions to take additional parameters beyond mock function arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_104\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P(name, param) { statements; }\n```\n\n----------------------------------------\n\nTITLE: Registering Type-Parameterized Tests in C++\nDESCRIPTION: Example of defining and registering type-parameterized tests. Shows the complete workflow of defining a test suite, defining tests, and registering them using TYPED_TEST_SUITE_P, TYPED_TEST_P, and REGISTER_TYPED_TEST_SUITE_P macros.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\n// Define the test suite and tests.\nTYPED_TEST_SUITE_P(MyFixture);\nTYPED_TEST_P(MyFixture, HasPropertyA) { ... }\nTYPED_TEST_P(MyFixture, HasPropertyB) { ... }\n\n// Register the tests in the test suite.\nREGISTER_TYPED_TEST_SUITE_P(MyFixture, HasPropertyA, HasPropertyB);\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Test Information in GoogleTest C++\nDESCRIPTION: Shows how to use the TestInfo class to access information about the currently running test, such as its name and test suite name. This is useful for dynamic test setup or reporting.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_48\n\nLANGUAGE: c++\nCODE:\n```\n// Gets information about the currently running test.\n// Do NOT delete the returned object - it's managed by the UnitTest class.\nconst testing::TestInfo* const test_info =\n    testing::UnitTest::GetInstance()->current_test_info();\n\nprintf(\"We are in test %s of test suite %s.\\n\",\n       test_info->name(),\n       test_info->test_suite_name());\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_THAT with Multiple Matchers (C++)\nDESCRIPTION: Demonstrates the use of EXPECT_THAT and ASSERT_THAT macros with various matchers to verify string and numeric values. This example shows how to combine multiple conditions using matchers for more complex assertions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gmock/gmock.h>\n\nusing ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::Lt;\nusing ::testing::MatchesRegex;\nusing ::testing::StartsWith;\n\n...\nEXPECT_THAT(value1, StartsWith(\"Hello\"));\nEXPECT_THAT(value2, MatchesRegex(\"Line \\\\d+\"));\nASSERT_THAT(value3, AllOf(Gt(5), Lt(10)));\n```\n\n----------------------------------------\n\nTITLE: Registering Tests Dynamically in GoogleTest C++\nDESCRIPTION: Dynamically registers a test with the GoogleTest framework. The factory argument creates a new instance of the Test object. Must be called before RUN_ALL_TESTS().\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_21\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename Factory>\nTestInfo* testing::RegisterTest(const char* test_suite_name, const char* test_name,\n                                  const char* type_param, const char* value_param,\n                                  const char* file, int line, Factory factory)\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT_THAT Macro with Matchers in C++\nDESCRIPTION: Shows the usage of ASSERT_THAT macro, which is similar to EXPECT_THAT but generates a fatal failure. This is used when the test cannot continue if the assertion fails.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_1\n\nLANGUAGE: C++\nCODE:\n```\nASSERT_THAT(actual_value, matcher)\n```\n\n----------------------------------------\n\nTITLE: Mocking Side Effects with SetArgPointee()\nDESCRIPTION: Using SetArgPointee() to modify an output argument, which is useful for mocking functions that produce side effects rather than return values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_57\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::SetArgPointee;\n\nclass MockMutator : public Mutator {\n public:\n  MOCK_METHOD(void, Mutate, (bool mutate, int* value), (override));\n  ...\n}\n...\n  MockMutator mutator;\n  EXPECT_CALL(mutator, Mutate(true, _))\n      .WillOnce(SetArgPointee<1>(5));\n```\n\n----------------------------------------\n\nTITLE: Example of Programmatic Test Registration in GoogleTest C++\nDESCRIPTION: Provides a complete example of how to use ::testing::RegisterTest to dynamically register tests based on runtime data. It demonstrates creating a custom fixture, test class, and registration function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_47\n\nLANGUAGE: c++\nCODE:\n```\nclass MyFixture : public testing::Test {\n public:\n  // All of these optional, just like in regular macro usage.\n  static void SetUpTestSuite() { ... }\n  static void TearDownTestSuite() { ... }\n  void SetUp() override { ... }\n  void TearDown() override { ... }\n};\n\nclass MyTest : public MyFixture {\n public:\n  explicit MyTest(int data) : data_(data) {}\n  void TestBody() override { ... }\n\n private:\n  int data_;\n};\n\nvoid RegisterMyTests(const std::vector<int>& values) {\n  for (int v : values) {\n    testing::RegisterTest(\n        \"MyFixture\", (\"Test\" + std::to_string(v)).c_str(), nullptr,\n        std::to_string(v).c_str(),\n        __FILE__, __LINE__,\n        // Important to use the fixture type as the return type here.\n        [=]() -> MyFixture* { return new MyTest(v); });\n  }\n}\n...\nint main(int argc, char** argv) {\n  testing::InitGoogleTest(&argc, argv);\n  std::vector<int> values_to_test = LoadValuesFromConfig();\n  RegisterMyTests(values_to_test);\n  ...\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Simple Matchers for Argument Matching in gMock\nDESCRIPTION: Shows how to use predefined matchers to match argument values based on properties rather than exact values. This allows for more flexible test specifications.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_24\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NotNull;\nusing ::testing::Return;\n...\n  EXPECT_CALL(foo, DoThis(Ge(5)))  // The argument must be >= 5.\n      .WillOnce(Return('a'));\n  EXPECT_CALL(foo, DoThat(\"Hello\", NotNull()));\n      // The second argument must not be NULL.\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT Statements Inside Custom Matchers\nDESCRIPTION: Example of incorporating EXPECT_EQ statements within a custom matcher to provide detailed failure information.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_89\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsDivisibleBy7, \"\") {\n  const auto remainder = arg % 7;\n  EXPECT_EQ(remainder, 0);\n  return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Practical Example of SCOPED_TRACE in Test Subroutines in C++\nDESCRIPTION: A complete example of using SCOPED_TRACE to add context to test failures in subroutines. The trace is active within its lexical scope and helps identify which invocation of Sub1() caused each failure.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_19\n\nLANGUAGE: c++\nCODE:\n```\n10: void Sub1(int n) {\n11:   EXPECT_EQ(Bar(n), 1);\n12:   EXPECT_EQ(Bar(n + 1), 2);\n13: }\n14:\n15: TEST(FooTest, Bar) {\n16:   {\n17:     SCOPED_TRACE(\"A\");  // This trace point will be included in\n18:                         // every failure in this scope.\n19:     Sub1(1);\n20:   }\n21:   // Now it won't.\n22:   Sub1(9);\n23: }\n```\n\n----------------------------------------\n\nTITLE: Using FRIEND_TEST to Access Private Members in C++\nDESCRIPTION: Example of using FRIEND_TEST macro to enable tests to access private members of a class. Shows class definition with friend declarations and corresponding test implementation in the same namespace.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace my_namespace {\n\nclass MyClass {\n  friend class MyClassTest;\n  FRIEND_TEST(MyClassTest, HasPropertyA);\n  FRIEND_TEST(MyClassTest, HasPropertyB);\n  ... definition of class MyClass ...\n};\n\n}  // namespace my_namespace\n```\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace my_namespace {\n\nclass MyClassTest : public testing::Test {\n  ...\n};\n\nTEST_F(MyClassTest, HasPropertyA) { ... }\nTEST_F(MyClassTest, HasPropertyB) { ... }\n\n}  // namespace my_namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Default Actions for Mock Methods in C++\nDESCRIPTION: Demonstrates how to use ON_CALL to set default behaviors for mock methods, including specifying different behaviors based on argument values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_64\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_;\nusing ::testing::AnyNumber;\nusing ::testing::Gt;\nusing ::testing::Return;\n...\n  ON_CALL(foo, Sign(_))\n      .WillByDefault(Return(-1));\n  ON_CALL(foo, Sign(0))\n      .WillByDefault(Return(0));\n  ON_CALL(foo, Sign(Gt(0)))\n      .WillByDefault(Return(1));\n\n  EXPECT_CALL(foo, Sign(_))\n      .Times(AnyNumber());\n\n  foo.Sign(5);   // This should return 1.\n  foo.Sign(-9);  // This should return -1.\n  foo.Sign(0);   // This should return 0.\n```\n\n----------------------------------------\n\nTITLE: Interface-based Approach for Mocking Free Functions\nDESCRIPTION: Shows how to mock free functions by introducing an interface and a concrete implementation that calls the free function, allowing the interface to be mocked in tests.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nclass FileInterface {\n public:\n  ...\n  virtual bool Open(const char* path, const char* mode) = 0;\n};\n\nclass File : public FileInterface {\n public:\n  ...\n  bool Open(const char* path, const char* mode) override {\n     return OpenFile(path, mode);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Testing Asynchronous Behavior with gMock C++ and Notifications\nDESCRIPTION: Shows how to test asynchronous code using gMock actions combined with absl::Notification objects to make asynchronous tests behave synchronously, avoiding non-deterministic sleep statements.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_73\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockEventDispatcher : public EventDispatcher {\n  MOCK_METHOD(bool, DispatchEvent, (int32), (override));\n};\n\nTEST(EventQueueTest, EnqueueEventTest) {\n  MockEventDispatcher mock_event_dispatcher;\n  EventQueue event_queue(&mock_event_dispatcher);\n\n  const int32 kEventId = 321;\n  absl::Notification done;\n  EXPECT_CALL(mock_event_dispatcher, DispatchEvent(kEventId))\n      .WillOnce([&done] { done.Notify(); });\n\n  event_queue.EnqueueEvent(kEventId);\n  done.WaitForNotification();\n}\n```\n\n----------------------------------------\n\nTITLE: Explicit Equality Comparison with Matchers in C++\nDESCRIPTION: Demonstrates the best practice of using explicit equality comparison with matchers to avoid surprising results from implicit conversions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_2\n\nLANGUAGE: C++\nCODE:\n```\nEXPECT_THAT(actual_value, Eq(expected_value))\n```\n\n----------------------------------------\n\nTITLE: Instantiating a Type-Parameterized Test Suite in C++\nDESCRIPTION: Example showing how to instantiate a type-parameterized test suite with a specific set of types. Demonstrates creating a type alias and using INSTANTIATE_TYPED_TEST_SUITE_P to create test instances for each type.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nusing MyTypes = ::testing::Types<char, int, unsigned int>;\nINSTANTIATE_TYPED_TEST_SUITE_P(MyInstantiation, MyFixture, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Defining Type-Parameterized Tests in C++\nDESCRIPTION: This snippet demonstrates how to declare a type-parameterized test suite and define individual tests using TYPED_TEST_P macro.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_39\n\nLANGUAGE: C++\nCODE:\n```\nTYPED_TEST_SUITE_P(FooTest);\n\nTYPED_TEST_P(FooTest, DoesBlah) {\n  TypeParam n = 0;\n  this->DoSomethingInteresting()\n  ...\n}\n\nTYPED_TEST_P(FooTest, HasPropertyA) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using NiceMock to Suppress Uninteresting Call Warnings in GoogleTest C++\nDESCRIPTION: Demonstrates the usage of NiceMock to suppress warnings for uninteresting calls on a mock object. The example shows how to create a NiceMock version of MockClass and set expectations on specific methods while ignoring others.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NiceMock;\n...\nNiceMock<MockClass> my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n```\n\n----------------------------------------\n\nTITLE: Setting up a GMock Test with Multiple Expectations\nDESCRIPTION: Demonstrates creating a mock class with a single method and setting up multiple expectations with different argument matchers.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_81\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gmock/gmock.h>\n\nusing ::testing::_;\nusing ::testing::HasSubstr;\nusing ::testing::Return;\n\nclass MockFoo {\n public:\n  MOCK_METHOD(void, F, (const string& x, const string& y));\n};\n\nTEST(Foo, Bar) {\n  MockFoo mock;\n  EXPECT_CALL(mock, F(_, _)).WillRepeatedly(Return());\n  EXPECT_CALL(mock, F(\"a\", \"b\"));\n  EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\")));\n\n  mock.F(\"a\", \"good\");\n  mock.F(\"a\", \"b\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Actions with ACTION Macro in GoogleTest (C++)\nDESCRIPTION: Example of defining a custom action 'Sum' that returns the sum of the first two arguments passed to a mock function. The ACTION macro simplifies creating reusable actions without writing full function objects.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/actions.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(Sum) { return arg0 + arg1; }\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_DEATH with Error Message Pattern in C++\nDESCRIPTION: Shows how to use EXPECT_DEATH to verify that code terminates with an error message matching a specific pattern. This example uses a compound statement and a regex pattern for the error message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_DEATH({\n  int n = 5;\n  DoSomething(&n);\n}, \"Error on line .* of DoSomething()\");\n```\n\n----------------------------------------\n\nTITLE: Setting Default Return Value with ON_CALL in GoogleTest C++\nDESCRIPTION: Demonstrates how to specify a default return value for a mock function using ON_CALL and WillByDefault. The example sets a mock function Greet() to return \"hello\" by default.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nON_CALL(my_mock, Greet())\n    .WillByDefault(Return(\"hello\"));\n```\n\n----------------------------------------\n\nTITLE: Mocking Non-virtual Methods for Dependency Injection\nDESCRIPTION: Demonstrates how to create mock classes for non-virtual methods using dependency injection. The mock class is unrelated to the real class but contains methods with the same signatures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// A simple packet stream class.  None of its members is virtual.\nclass ConcretePacketStream {\n public:\n  void AppendPacket(Packet* new_packet);\n  const Packet* GetPacket(size_t packet_number) const;\n  size_t NumberOfPackets() const;\n  ...\n};\n\n// A mock packet stream class.  It inherits from no other, but defines\n// GetPacket() and NumberOfPackets().\nclass MockPacketStream {\n public:\n  MOCK_METHOD(const Packet*, GetPacket, (size_t packet_number), (const));\n  MOCK_METHOD(size_t, NumberOfPackets, (), (const));\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock Class with Delegation to Real Object in C++\nDESCRIPTION: Illustrates how to create a mock class that delegates default actions to a real object implementation. This ensures the mock behaves like the real object while still allowing call verification.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::AtLeast;\n\nclass MockFoo : public Foo {\n public:\n  MockFoo() {\n    // By default, all calls are delegated to the real object.\n    ON_CALL(*this, DoThis).WillByDefault([this](int n) {\n      return real_.DoThis(n);\n    });\n    ON_CALL(*this, DoThat).WillByDefault([this](const char* s, int* p) {\n      real_.DoThat(s, p);\n    });\n    ...\n  }\n  MOCK_METHOD(char, DoThis, ...);\n  MOCK_METHOD(void, DoThat, ...);\n  ...\n private:\n  Foo real_;\n};\n\n...\n  MockFoo mock;\n  EXPECT_CALL(mock, DoThis())\n      .Times(3);\n  EXPECT_CALL(mock, DoThat(\"Hi\"))\n      .Times(AtLeast(1));\n  ... use mock in test ...\n```\n\n----------------------------------------\n\nTITLE: Verifying Normal Process Exit with EXPECT_EXIT in C++\nDESCRIPTION: Shows how to use EXPECT_EXIT to verify that a function causes the process to exit normally with a specific status code and output message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), \"Success\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Death Tests in GoogleTest\nDESCRIPTION: Shows how to write death tests to verify code that should terminate in specific ways. This includes testing for process termination with specific exit codes or signals and verifying error messages.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_13\n\nLANGUAGE: c++\nCODE:\n```\nTEST(MyDeathTest, Foo) {\n  // This death test uses a compound statement.\n  ASSERT_DEATH({\n    int n = 5;\n    Foo(&n);\n  }, \"Error on line .* of Foo()\");\n}\n\nTEST(MyDeathTest, NormalExit) {\n  EXPECT_EXIT(NormalExit(), testing::ExitedWithCode(0), \"Success\");\n}\n\nTEST(MyDeathTest, KillProcess) {\n  EXPECT_EXIT(KillProcess(), testing::KilledBySignal(SIGKILL),\n              \"Sending myself unblockable signal\");\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Range Matcher with Two Parameters in C++\nDESCRIPTION: Demonstrates defining a matcher 'IsBetween(a, b)' to check if a value is within a specified range, using the MATCHER_P2 macro with custom description.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER_P2(IsBetween, a, b, absl::StrCat(negation ? \"isn't\" : \"is\", \" between \", PrintToString(a), \" and \", PrintToString(b))) { return a <= arg && arg <= b; }\n```\n\n----------------------------------------\n\nTITLE: Verifying and Resetting a Mock in C++\nDESCRIPTION: Demonstrates how to manually verify and clear expectations on a mock object, as well as how to allow mock objects to be leaked without verification.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Mock;\n...\n// Verifies and removes the expectations on mock_obj;\n// returns true if and only if successful.\nMock::VerifyAndClearExpectations(&mock_obj);\n...\n// Verifies and removes the expectations on mock_obj;\n// also removes the default actions set by ON_CALL();\n// returns true if and only if successful.\nMock::VerifyAndClear(&mock_obj);\n```\n\nLANGUAGE: cpp\nCODE:\n```\nMock::AllowLeak(&mock_obj);\n```\n\n----------------------------------------\n\nTITLE: Using gMock String Matchers with GoogleTest in C++\nDESCRIPTION: Demonstrates how to use gMock string matchers with EXPECT_THAT to perform advanced string comparisons like substring matching and regular expression matching.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\nusing ::testing::HasSubstr;\nusing ::testing::MatchesRegex;\n...\n  ASSERT_THAT(foo_string, HasSubstr(\"needle\"));\n  EXPECT_THAT(bar_string, MatchesRegex(\"\\\\w*\\\\d+\"));\n```\n\n----------------------------------------\n\nTITLE: Custom Predicate-Formatter with EXPECT_PRED_FORMAT2 in C++\nDESCRIPTION: Shows how to create a custom predicate-formatter function that returns AssertionResult and provides detailed failure messages. This example tests if two integers are mutually prime.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n// Returns the smallest prime common divisor of m and n,\n// or 1 when m and n are mutually prime.\nint SmallestPrimeCommonDivisor(int m, int n) { ... }\n\n// Returns true if m and n have no common divisors except 1.\nbool MutuallyPrime(int m, int n) { ... }\n\n// A predicate-formatter for asserting that two integers are mutually prime.\ntesting::AssertionResult AssertMutuallyPrime(const char* m_expr,\n                                             const char* n_expr,\n                                             int m,\n                                             int n) {\n  if (MutuallyPrime(m, n)) return testing::AssertionSuccess();\n\n  return testing::AssertionFailure() << m_expr << \" and \" << n_expr\n      << \" (\" << m << \" and \" << n << \") are not mutually prime, \"\n      << \"as they have a common divisor \" << SmallestPrimeCommonDivisor(m, n);\n}\n\n...\nconst int a = 3;\nconst int b = 4;\nconst int c = 10;\n...\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, a, b);  // Succeeds\nEXPECT_PRED_FORMAT2(AssertMutuallyPrime, b, c);  // Fails\n```\n\n----------------------------------------\n\nTITLE: Matching Key-Value Pairs in Associative Containers in C++\nDESCRIPTION: Shows how to use Pair matcher in combination with UnorderedElementsAre to match key-value pairs in associative containers like maps.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_42\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::UnorderedElementsAre;\nusing ::testing::Pair;\n...\n  absl::flat_hash_map<string, int> m = {{\"a\", 1}, {\"b\", 2}, {\"c\", 3}};\n  EXPECT_THAT(m, UnorderedElementsAre(\n      Pair(\"a\", 1), Pair(\"b\", 2), Pair(\"c\", 3)));\n```\n\n----------------------------------------\n\nTITLE: Implementing Derived Test Fixtures in GoogleTest\nDESCRIPTION: Demonstrates how to create a base test fixture and derive child fixtures from it. Shows proper setup and teardown patterns including calling parent class methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\n// Defines a base test fixture.\nclass BaseTest : public ::testing::Test {\n protected:\n  ...\n};\n\n// Derives a fixture FooTest from BaseTest.\nclass FooTest : public BaseTest {\n protected:\n  void SetUp() override {\n    BaseTest::SetUp();  // Sets up the base fixture first.\n    ... additional set-up work ...\n  }\n\n  void TearDown() override {\n    ... clean-up work for FooTest ...\n    BaseTest::TearDown();  // Remember to tear down the base fixture\n                           // after cleaning up FooTest!\n  }\n\n  ... functions and variables for FooTest ...\n};\n\n// Tests that use the fixture FooTest.\nTEST_F(FooTest, Bar) { ... }\nTEST_F(FooTest, Baz) { ... }\n\n... additional fixtures derived from BaseTest ...\n```\n\n----------------------------------------\n\nTITLE: Setting Default Behavior with ON_CALL in C++\nDESCRIPTION: Illustrates the use of ON_CALL to define default behavior for mock methods without setting expectations. This is recommended for common mock behaviors shared across tests.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_44\n\nLANGUAGE: cpp\nCODE:\n```\n// Example usage of ON_CALL (pseudo-code)\nON_CALL(mock_object, method_name(parameters))\n    .WillByDefault(action);\n```\n\n----------------------------------------\n\nTITLE: Matching Unordered Container Elements in C++\nDESCRIPTION: Shows how to use UnorderedElementsAre() matcher to validate the contents of a vector in any order. This is useful for containers where element order is not significant.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_40\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Gt;\nusing ::testing::UnorderedElementsAre;\n...\n  MOCK_METHOD(void, Foo, (const vector<int>& numbers), (override));\n...\n  EXPECT_CALL(mock, Foo(UnorderedElementsAre(1, Gt(0), _, 5)));\n```\n\n----------------------------------------\n\nTITLE: Matching Container Elements with ElementsAre in C++\nDESCRIPTION: Demonstrates how to use ElementsAre() matcher to validate the contents of a vector passed to a mock function. It shows matching exact values, matchers like Gt(), and wildcards.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_39\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::ElementsAre;\nusing ::testing::Gt;\n...\n  MOCK_METHOD(void, Foo, (const vector<int>& numbers), (override));\n...\n  EXPECT_CALL(mock, Foo(ElementsAre(1, Gt(0), _, 5)));\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Classes with Pure and Concrete Methods in C++\nDESCRIPTION: Shows how to create a mock class that implements both pure virtual and concrete virtual methods. The example defines a base class 'Foo' with a pure and concrete method, then creates 'MockFoo' that implements both methods using the MOCK_METHOD macro.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_20\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n public:\n  virtual ~Foo();\n\n  virtual void Pure(int n) = 0;\n  virtual int Concrete(const char* str) { ... }\n};\n\nclass MockFoo : public Foo {\n public:\n  // Mocking a pure method.\n  MOCK_METHOD(void, Pure, (int n), (override));\n  // Mocking a concrete method.  Foo::Concrete() is shadowed.\n  MOCK_METHOD(int, Concrete, (const char* str), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Shared Resource Test Fixture\nDESCRIPTION: Demonstrates setting up shared resources between tests in the same test suite using static members and SetUpTestSuite()/TearDownTestSuite().\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_25\n\nLANGUAGE: c++\nCODE:\n```\nclass FooTest : public testing::Test {\n protected:\n  // Per-test-suite set-up.\n  // Called before the first test in this test suite.\n  // Can be omitted if not needed.\n  static void SetUpTestSuite() {\n    shared_resource_ = new ...;\n\n    // If `shared_resource_` is **not deleted** in `TearDownTestSuite()`,\n    // reallocation should be prevented because `SetUpTestSuite()` may be called\n    // in subclasses of FooTest and lead to memory leak.\n    //\n    // if (shared_resource_ == nullptr) {\n    //   shared_resource_ = new ...;\n    // }\n  }\n\n  // Per-test-suite tear-down.\n  // Called after the last test in this test suite.\n  // Can be omitted if not needed.\n  static void TearDownTestSuite() {\n    delete shared_resource_;\n    shared_resource_ = nullptr;\n  }\n\n  // You can define per-test set-up logic as usual.\n  void SetUp() override { ... }\n\n  // You can define per-test tear-down logic as usual.\n  void TearDown() override { ... }\n\n  // Some expensive resource shared by all tests.\n  static T* shared_resource_;\n};\n\nT* FooTest::shared_resource_ = nullptr;\n\nTEST_F(FooTest, Test1) {\n  ... you can refer to shared_resource_ here ...\n}\n\nTEST_F(FooTest, Test2) {\n  ... you can refer to shared_resource_ here ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Boolean Predicate with Both Success and Failure Messages in C++\nDESCRIPTION: An improved version of IsEven() that provides informative messages for both EXPECT_TRUE and EXPECT_FALSE assertions, making both success and failure cases more descriptive.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\ntesting::AssertionResult IsEven(int n) {\n  if ((n % 2) == 0)\n    return testing::AssertionSuccess() << n << \" is even\";\n  else\n    return testing::AssertionFailure() << n << \" is odd\";\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Non-Fatal Failures in GoogleTest C++\nDESCRIPTION: Shows the usage of EXPECT_NONFATAL_FAILURE macro to catch and verify non-fatal failures in GoogleTest. This is useful for testing utility functions that generate expected non-fatal failures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_44\n\nLANGUAGE: c++\nCODE:\n```\nEXPECT_NONFATAL_FAILURE(statement, substring);\n```\n\n----------------------------------------\n\nTITLE: Matching Multiple Arguments as a Whole with With() in gMock\nDESCRIPTION: Demonstrates using the With() clause to create matchers that consider relationships between multiple arguments. This example ensures one argument is less than another.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_32\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Ne;\nusing ::testing::Lt;\n...\n  EXPECT_CALL(foo, InRange(Ne(0), _))\n      .With(Lt());\n```\n\n----------------------------------------\n\nTITLE: Defining Typed Tests with TYPED_TEST Macro in C++\nDESCRIPTION: This snippet shows how to define typed tests using the TYPED_TEST macro. It demonstrates accessing type parameters, static members, and typedefs within the test.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_37\n\nLANGUAGE: C++\nCODE:\n```\nTYPED_TEST(FooTest, DoesBlah) {\n  TypeParam n = this->value_;\n  n += TestFixture::shared_;\n  typename TestFixture::List values;\n  values.push_back(n);\n  ...\n}\n\nTYPED_TEST(FooTest, HasPropertyA) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Matcher in Test Expectations\nDESCRIPTION: Shows how to use a custom matcher in EXPECT_CALL and EXPECT_THAT statements, including with the Not() modifier.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_85\n\nLANGUAGE: cpp\nCODE:\n```\n  // Expects mock_foo.Bar(n) to be called where n is divisible by 7.\n  EXPECT_CALL(mock_foo, Bar(IsDivisibleBy7()));\n```\n\n----------------------------------------\n\nTITLE: Managing ExpectationSets in C++\nDESCRIPTION: Shows how to create and manage sets of mock function call expectations using the ExpectationSet class. Demonstrates adding individual expectations to a set.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ExpectationSet;\nExpectationSet my_expectations;\nmy_expectations += EXPECT_CALL(...);\n```\n\n----------------------------------------\n\nTITLE: Defining a Fixture Class Template for Typed Tests in C++\nDESCRIPTION: This snippet shows how to create a fixture class template for typed tests, parameterized by a type T and derived from ::testing::Test. It includes a type alias for std::list<T> and static and instance members of type T.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_35\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nclass FooTest : public testing::Test {\n public:\n  ...\n  using List = std::list<T>;\n  static T shared_;\n  T value_;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions with Lambda Functions\nDESCRIPTION: Shows how to create custom actions using lambda functions. This is a simple way to define actions without creating new classes.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_97\n\nLANGUAGE: cpp\nCODE:\n```\nMockFunction<int(int)> mock;\nEXPECT_CALL(mock, Call).WillOnce([](const int input) { return input * 7; });\nEXPECT_EQ(mock.AsStdFunction()(2), 14);\n```\n\n----------------------------------------\n\nTITLE: Setting Expectations on Non-Overloaded Methods in gMock\nDESCRIPTION: Simplified syntax for setting expectations on non-overloaded methods without specifying matchers, allowing for \"called with any arguments\" expectations.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(mock_object, non-overloaded-method)\n    .Times(cardinality)\n    .WillOnce(action)\n    .WillRepeatedly(action);\n```\n\n----------------------------------------\n\nTITLE: Using Type-Specific Wildcard Matcher in C++\nDESCRIPTION: Demonstrates the usage of A<type>() or An<type>() matchers which match any value of the specified type. This provides more type safety than the generic wildcard matcher.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_4\n\nLANGUAGE: C++\nCODE:\n```\nA<type>() or An<type>()\n```\n\n----------------------------------------\n\nTITLE: Using FieldsAre Matcher with Structured Types in C++\nDESCRIPTION: Demonstrates usage of FieldsAre matcher with std::tuple and custom structs for field-by-field comparison. Shows both tuple and aggregate type matching.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nstd::tuple<int, std::string> my_tuple{7, \"hello world\"};\nEXPECT_THAT(my_tuple, FieldsAre(Ge(0), HasSubstr(\"hello\")));\n\nstruct MyStruct {\n  int value = 42;\n  std::string greeting = \"aloha\";\n};\nMyStruct s;\nEXPECT_THAT(s, FieldsAre(42, \"aloha\"));\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Custom GMock Matcher\nDESCRIPTION: Demonstrates how to create a simple custom matcher using the MATCHER macro that checks if a value is divisible by 7.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_84\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsDivisibleBy7, \"\") { return (arg % 7) == 0; }\n```\n\n----------------------------------------\n\nTITLE: Using StrictMock in C++\nDESCRIPTION: Demonstrates how to create and use a StrictMock object that generates test failures for uninteresting calls. The example shows creating a mock object with constructor arguments and setting an expectation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::StrictMock;\n...\nStrictMock<MockClass> my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Matcher in C++\nDESCRIPTION: Shows how to use the wildcard matcher '_' which matches any value of the correct type. This is useful in mock expectations where the exact value is not important.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_3\n\nLANGUAGE: C++\nCODE:\n```\n_\n```\n\n----------------------------------------\n\nTITLE: Defining Partial Order Mock Expectations\nDESCRIPTION: Demonstrates how to specify partially ordered mock call expectations using Sequence objects.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_50\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Sequence;\n...\n  Sequence s1, s2;\n\n  EXPECT_CALL(foo, A())\n      .InSequence(s1, s2);\n  EXPECT_CALL(bar, B())\n      .InSequence(s1);\n  EXPECT_CALL(bar, C())\n      .InSequence(s2);\n  EXPECT_CALL(foo, D())\n      .InSequence(s2);\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT_NO_FATAL_FAILURE and EXPECT_NO_FATAL_FAILURE in C++\nDESCRIPTION: Demonstrates how to use the NO_FATAL_FAILURE assertion macros to check that a statement doesn't generate any new fatal failures. This helps prevent segfaults caused by tests continuing after fatal failures in subroutines.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_21\n\nLANGUAGE: c++\nCODE:\n```\nASSERT_NO_FATAL_FAILURE(Foo());\n\nint i;\nEXPECT_NO_FATAL_FAILURE({\n  i = Bar();\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Multiple Expectations with Sticky Behavior in gMock\nDESCRIPTION: This example demonstrates the sticky behavior of expectations in gMock. It shows how to set up expectations for a turtle mock object, where one expectation allows any number of calls to GoTo with any arguments, while another specifically expects exactly two calls to GoTo(0, 0).\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::AnyNumber;\n...\nEXPECT_CALL(turtle, GoTo(_, _))  // #1\n     .Times(AnyNumber());\nEXPECT_CALL(turtle, GoTo(0, 0))  // #2\n     .Times(2);\n```\n\n----------------------------------------\n\nTITLE: Performing Custom Actions on Mock Function Arguments in C++\nDESCRIPTION: Example showing how to use Invoke() to perform a custom action on a mock function's argument. The code demonstrates setting up a mock method Bar() and configuring it to execute a custom action MyAction when called.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_faq.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\n  ...\n  MOCK_METHOD(void, Bar, (X* p));\n  ...\n  EXPECT_CALL(mock_foo_, Bar(_))\n      .WillOnce(Invoke(MyAction(...)));\n```\n\n----------------------------------------\n\nTITLE: Defining a Mock Class with Delegation to Fake in C++\nDESCRIPTION: Shows how to create a mock class that delegates default actions to a fake implementation. This allows using the fake's behavior while still being able to set expectations on the mock.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_17\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFoo : public Foo {\n public:\n  // Normal mock method definitions using gMock.\n  MOCK_METHOD(char, DoThis, (int n), (override));\n  MOCK_METHOD(void, DoThat, (const char* s, int* p), (override));\n\n  // Delegates the default actions of the methods to a FakeFoo object.\n  // This must be called *before* the custom ON_CALL() statements.\n  void DelegateToFake() {\n    ON_CALL(*this, DoThis).WillByDefault([this](int n) {\n      return fake_.DoThis(n);\n    });\n    ON_CALL(*this, DoThat).WillByDefault([this](const char* s, int* p) {\n      fake_.DoThat(s, p);\n    });\n  }\n\n private:\n  FakeFoo fake_;  // Keeps an instance of the fake in the mock.\n};\n```\n\n----------------------------------------\n\nTITLE: Writing Value-Parameterized Test Patterns with TEST_P\nDESCRIPTION: Demonstrates how to define test patterns using the TEST_P macro, which allows access to test parameters via the GetParam() method within test implementations.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_29\n\nLANGUAGE: c++\nCODE:\n```\nTEST_P(FooTest, DoesBlah) {\n  // Inside a test, access the test parameter with the GetParam() method\n  // of the TestWithParam<T> class:\n  EXPECT_TRUE(foo.Blah(GetParam()));\n  ...\n}\n\nTEST_P(FooTest, HasBlahBlah) {\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Matcher Class in Google Test\nDESCRIPTION: This snippet demonstrates how to define a custom matcher class for complex validation scenarios. The example creates a matcher that verifies if the sum of two methods equals an expected value.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_38\n\nLANGUAGE: cpp\nCODE:\n```\nclass BarPlusBazEqMatcher {\n public:\n  using is_gtest_matcher = void;\n\n  explicit BarPlusBazEqMatcher(int expected_sum)\n      : expected_sum_(expected_sum) {}\n\n  bool MatchAndExplain(const Foo& foo,\n                       std::ostream* /* listener */) const {\n    return (foo.bar() + foo.baz()) == expected_sum_;\n  }\n\n  void DescribeTo(std::ostream* os) const {\n    *os << \"bar() + baz() equals \" << expected_sum_;\n  }\n\n  void DescribeNegationTo(std::ostream* os) const {\n    *os << \"bar() + baz() does not equal \" << expected_sum_;\n  }\n private:\n  const int expected_sum_;\n};\n\n::testing::Matcher<const Foo&> BarPlusBazEq(int expected_sum) {\n  return BarPlusBazEqMatcher(expected_sum);\n}\n\n...\n  Foo foo;\n  EXPECT_THAT(foo, BarPlusBazEq(5))...;\n```\n\n----------------------------------------\n\nTITLE: Combining Multiple Actions with DoAll()\nDESCRIPTION: Using DoAll() to perform a sequence of actions when a mock method is called. Only the return value of the last action is used as the return value of the mock method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_55\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::DoAll;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(bool, Bar, (int n), (override));\n};\n...\n  EXPECT_CALL(foo, Bar(_))\n      .WillOnce(DoAll(action_1,\n                      action_2,\n                      ...\n                      action_n));\n```\n\n----------------------------------------\n\nTITLE: Creating Composite Predicates with Google Test Matchers in C++\nDESCRIPTION: This snippet shows how to build a complex predicate using Google Test matchers. The example creates a predicate that matches numbers between 0 and 100, excluding 50.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_35\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::AllOf;\nusing ::testing::Ge;\nusing ::testing::Le;\nusing ::testing::Matches;\nusing ::testing::Ne;\n...\nMatches(AllOf(Ge(0), Le(100), Ne(50)))\n```\n\n----------------------------------------\n\nTITLE: Sharing Complex Matchers in C++\nDESCRIPTION: Demonstrates how to create and reuse complex matchers by assigning them to variables. This improves code readability and efficiency when the same matcher is used multiple times.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_43\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::AllOf;\nusing ::testing::Gt;\nusing ::testing::Le;\nusing ::testing::Matcher;\n...\n  Matcher<int> in_range = AllOf(Gt(5), Le(10));\n  ... use in_range as a matcher in multiple EXPECT_CALLs ...\n```\n\n----------------------------------------\n\nTITLE: Using ON_CALL with Multi-argument Matcher in GoogleTest C++\nDESCRIPTION: Shows how to set default behavior for a mock function using ON_CALL with a multi-argument matcher. The example defines behavior for SetPosition() when called with two arguments where the first is less than the second.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Lt;\nusing ::testing::Return;\n...\nON_CALL(my_mock, SetPosition(_, _))\n    .With(Lt())\n    .WillByDefault(Return(true));\n```\n\n----------------------------------------\n\nTITLE: Using Not with Custom Matchers\nDESCRIPTION: Example of using the Not modifier with a custom matcher in EXPECT_THAT statements to verify both positive and negative conditions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_86\n\nLANGUAGE: cpp\nCODE:\n```\n  using ::testing::Not;\n  ...\n  // Verifies that a value is divisible by 7 and the other is not.\n  EXPECT_THAT(some_expression, IsDivisibleBy7());\n  EXPECT_THAT(some_other_expression, Not(IsDivisibleBy7()));\n```\n\n----------------------------------------\n\nTITLE: Ordering Mock Call Expectations with InSequence\nDESCRIPTION: Shows how to enforce strict ordering of mock method calls using the InSequence class.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_49\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::InSequence;\n\n  {\n    InSequence s;\n\n    EXPECT_CALL(foo, DoThis(5));\n    EXPECT_CALL(bar, DoThat(_))\n        .Times(2);\n    EXPECT_CALL(foo, DoThis(6));\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Invoke with Unused Parameters in GoogleTest Mock Actions (C++)\nDESCRIPTION: Demonstrates how to use the Invoke action with a function that ignores some parameters by declaring them as Unused. This is useful when you want to match a mock function signature but only care about certain parameters.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/actions.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Invoke;\ndouble Distance(Unused, double x, double y) { return sqrt(x*x + y*y); }\n...\nEXPECT_CALL(mock, Foo(\"Hi\", _, _)).WillOnce(Invoke(Distance));\n```\n\n----------------------------------------\n\nTITLE: Verifying Process Termination with EXPECT_DEATH in C++\nDESCRIPTION: Demonstrates how to use EXPECT_DEATH to verify that a function call causes the process to terminate with a specific error message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_DEATH(DoSomething(42), \"My error\");\n```\n\n----------------------------------------\n\nTITLE: Specifying call dependencies with After() in C++\nDESCRIPTION: Demonstrates how to ensure that a method is called only after prerequisite methods have been called using the After() clause. This example requires Describe() to be called only after both InitX() and InitY() have been called.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Expectation;\n...\nExpectation init_x = EXPECT_CALL(my_mock, InitX());\nExpectation init_y = EXPECT_CALL(my_mock, InitY());\nEXPECT_CALL(my_mock, Describe())\n    .After(init_x, init_y);\n```\n\n----------------------------------------\n\nTITLE: Using AllArgs and Args for Complex Argument Relationships in gMock\nDESCRIPTION: Shows advanced techniques for matching specific combinations of arguments using Args and AllOf. This allows for creating complex conditions involving multiple arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_33\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::AllOf;\nusing ::testing::Args;\nusing ::testing::Lt;\n...\n  EXPECT_CALL(foo, Blah)\n      .With(AllOf(Args<0, 1>(Lt()), Args<1, 2>(Lt())));\n```\n\n----------------------------------------\n\nTITLE: Queue Template Class Interface Definition in C++\nDESCRIPTION: Interface definition for a FIFO Queue template class that will be used in the test fixture examples. It includes methods for enqueueing, dequeueing, and checking the size.\nSOURCE: https://github.com/google/googletest/blob/main/docs/primer.md#2025-04-22_snippet_4\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <typename E>  // E is the element type.\nclass Queue {\n public:\n  Queue();\n  void Enqueue(const E& element);\n  E* Dequeue();  // Returns NULL if the queue is empty.\n  size_t size() const;\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Matcher for Pointwise Container Comparison in C++\nDESCRIPTION: Example showing how to create a custom matcher for comparing two containers of Foo objects where Foo doesn't support operator==. Uses a MATCHER macro to define equality comparison.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(FooEq, \"\") {\n  return std::get<0>(arg).Equals(std::get<1>(arg));\n}\n...\nEXPECT_THAT(actual_foos, Pointwise(FooEq(), expected_foos));\n```\n\n----------------------------------------\n\nTITLE: Mocking a Class Template in C++\nDESCRIPTION: Shows how to create a mock for a class template. The example creates a mock for a stack interface template with virtual methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Elem>\nclass StackInterface {\n public:\n  virtual ~StackInterface();\n  virtual int GetSize() const = 0;\n  virtual void Push(const Elem& x) = 0;\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Elem>\nclass MockStack : public StackInterface<Elem> {\n public:\n  MOCK_METHOD(int, GetSize, (), (const, override));\n  MOCK_METHOD(void, Push, (const Elem& x), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Array Arguments with SetArrayArgument()\nDESCRIPTION: Using SetArrayArgument() to modify an array output argument by copying values from a source range, useful for mocking functions that modify arrays.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_59\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NotNull;\nusing ::testing::SetArrayArgument;\n\nclass MockArrayMutator : public ArrayMutator {\n public:\n  MOCK_METHOD(void, Mutate, (int* values, int num_values), (override));\n  ...\n}\n...\n  MockArrayMutator mutator;\n  int values[5] = {1, 2, 3, 4, 5};\n  EXPECT_CALL(mutator, Mutate(NotNull(), 5))\n      .WillOnce(SetArrayArgument<0>(values, values + 5));\n```\n\n----------------------------------------\n\nTITLE: Declaring Test Fixtures and Tests as Friends in Namespaced Classes in C++\nDESCRIPTION: This code illustrates how to declare test fixtures and tests as friends of a class defined in a namespace, ensuring they are in the same namespace for proper access to private members.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_42\n\nLANGUAGE: C++\nCODE:\n```\nnamespace my_namespace {\n\nclass Foo {\n  friend class FooTest;\n  FRIEND_TEST(FooTest, Bar);\n  FRIEND_TEST(FooTest, Baz);\n  ... definition of the class Foo ...\n};\n\n}  // namespace my_namespace\n\nnamespace my_namespace {\n\nclass FooTest : public testing::Test {\n protected:\n  ...\n};\n\nTEST_F(FooTest, Bar) { ... }\nTEST_F(FooTest, Baz) { ... }\n\n}  // namespace my_namespace\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Even Number Matcher in C++\nDESCRIPTION: Demonstrates how to define a custom matcher 'IsEven()' to match even numbers using the MATCHER macro.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsEven, \"\") { return (arg % 2) == 0; }\n```\n\n----------------------------------------\n\nTITLE: Using Checkpoints in C++ Google Test Mocks\nDESCRIPTION: Illustrates how to use checkpoints to verify the sequence of mock function calls and set more detailed expectations about which API calls invoke which mock functions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_79\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::MockFunction;\n\nTEST(FooTest, InvokesBarCorrectly) {\n  MyMock mock;\n  // Class MockFunction<F> has exactly one mock method.  It is named\n  // Call() and has type F.\n  MockFunction<void(string check_point_name)> check;\n  {\n    InSequence s;\n\n    EXPECT_CALL(mock, Bar(\"a\"));\n    EXPECT_CALL(check, Call(\"1\"));\n    EXPECT_CALL(check, Call(\"2\"));\n    EXPECT_CALL(mock, Bar(\"a\"));\n  }\n  Foo(1);\n  check.Call(\"1\");\n  Foo(2);\n  check.Call(\"2\");\n  Foo(3);\n}\n```\n\n----------------------------------------\n\nTITLE: Associating Type List with Test Suite for Typed Tests in C++\nDESCRIPTION: This code demonstrates how to associate a list of types with a test suite using the TYPED_TEST_SUITE macro. It uses a type alias to define the list of types to be tested.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_36\n\nLANGUAGE: C++\nCODE:\n```\nusing MyTypes = ::testing::Types<char, int, unsigned int>;\nTYPED_TEST_SUITE(FooTest, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Using NiceMock to Suppress Warnings in Google Test C++\nDESCRIPTION: Shows how to use NiceMock to suppress warnings for uninteresting calls in a Google Test mock object.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NiceMock;\n\nTEST(...) {\n  NiceMock<MockFoo> mock_foo;\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n}\n```\n\n----------------------------------------\n\nTITLE: Saving and Verifying Complex Arguments\nDESCRIPTION: Using SaveArg to capture and later verify complex arguments, making it easier to debug which specific argument failed to match expectations.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_56\n\nLANGUAGE: cpp\nCODE:\n```\n  EXPECT_CALL(foo, SendValues)\n      .WillOnce(DoAll(SaveArg<1>(&actual_array), SaveArg<2>(&actual_proto)));\n  ... run the test\n  EXPECT_THAT(actual_array, ElementsAre(1, 4, 4, 7));\n  EXPECT_THAT(actual_proto, EqualsProto( ... ));\n```\n\n----------------------------------------\n\nTITLE: Skipping Test Execution with GTEST_SKIP() in C++\nDESCRIPTION: Demonstrates how to use GTEST_SKIP() to prevent test execution at runtime in individual test cases or in SetUp() methods. This is useful for handling preconditions that can only be checked during execution.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nTEST(SkipTest, DoesSkip) {\n  GTEST_SKIP() << \"Skipping single test\";\n  FAIL();  // Won't fail; it won't be executed\n}\n\nclass SkipFixture : public ::testing::Test {\n protected:\n  void SetUp() override {\n    GTEST_SKIP() << \"Skipping all tests for this fixture\";\n  }\n};\n\n// Tests for SkipFixture won't be executed.\nTEST_F(SkipFixture, SkipsOneTest) {\n  FAIL();  // Won't fail; it won't be executed\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a ThrowListener to Convert Fatal Assertions to Exceptions in C++\nDESCRIPTION: Implements a custom TestEventListener that converts fatal assertion failures into exceptions. This allows fatal failures in subroutines to abort the entire test by propagating up the call stack as exceptions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_20\n\nLANGUAGE: c++\nCODE:\n```\nclass ThrowListener : public testing::EmptyTestEventListener {\n  void OnTestPartResult(const testing::TestPartResult& result) override {\n    if (result.type() == testing::TestPartResult::kFatalFailure) {\n      throw testing::AssertionException(result);\n    }\n  }\n};\nint main(int argc, char** argv) {\n  ...\n  testing::UnitTest::GetInstance()->listeners().Append(new ThrowListener);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Disambiguating Overloaded Methods with Different Argument Types in gMock\nDESCRIPTION: Demonstrates techniques to disambiguate between overloaded methods that have the same number of arguments but different argument types. This is done by specifying explicit matcher types.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_30\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::An;\nusing ::testing::Matcher;\nusing ::testing::TypedEq;\n\nclass MockPrinter : public Printer {\n public:\n  MOCK_METHOD(void, Print, (int n), (override));\n  MOCK_METHOD(void, Print, (char c), (override));\n};\n\nTEST(PrinterTest, Print) {\n  MockPrinter printer;\n\n  EXPECT_CALL(printer, Print(An<int>()));            // void Print(int);\n  EXPECT_CALL(printer, Print(Matcher<int>(Lt(5))));  // void Print(int);\n  EXPECT_CALL(printer, Print(TypedEq<char>('a')));   // void Print(char);\n\n  printer.Print(3);\n  printer.Print(6);\n  printer.Print('a');\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Failures Across All Threads in GoogleTest C++\nDESCRIPTION: Illustrates how to use macros that catch failures across all threads in GoogleTest. These are useful when testing multi-threaded code that may generate failures in different threads.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_45\n\nLANGUAGE: c++\nCODE:\n```\nEXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substring);\nEXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substring);\n```\n\n----------------------------------------\n\nTITLE: Returning References from Mock Methods\nDESCRIPTION: Shows how to properly return references from mock methods using ReturnRef instead of Return.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_52\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ReturnRef;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(Bar&, GetBar, (), (override));\n};\n...\n  MockFoo foo;\n  Bar bar;\n  EXPECT_CALL(foo, GetBar())\n      .WillOnce(ReturnRef(bar));\n...\n```\n\n----------------------------------------\n\nTITLE: Using WillRepeatedly with WillOnce in GoogleTest C++\nDESCRIPTION: Shows how to combine WillOnce and WillRepeatedly to create complex mock behaviors. The example defines two mock functions: one that always returns the same value and another that returns a specific value on first call and a different value on all subsequent calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(my_mock, GetName())\n    .WillRepeatedly(Return(\"John Doe\"));  // Return \"John Doe\" on all calls\n\nEXPECT_CALL(my_mock, GetNumber())\n    .WillOnce(Return(42))        // Return 42 on the first call\n    .WillRepeatedly(Return(7));  // Return 7 on all subsequent calls\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Matchers with C++14 Generic Lambdas\nDESCRIPTION: Demonstrates creating a reusable matcher using C++14 generic lambdas to simplify complex matcher expressions and avoid specifying long template types. This example creates a custom HasFoo matcher.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_27\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Contains;\nusing ::testing::Property;\n\ninline constexpr auto HasFoo = [](const auto& f) {\n  return Property(\"foo\", &MyClass::foo, Contains(f));\n};\n...\n  EXPECT_THAT(x, HasFoo(\"blah\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Divisibility Matcher with Parameter in C++\nDESCRIPTION: Shows how to define a parameterized matcher 'IsDivisibleBy(n)' to check if a number is divisible by n, using the MATCHER_P macro.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER_P(IsDivisibleBy, n, \"\") { *result_listener << \"where the remainder is \" << (arg % n); return (arg % n) == 0; }\n```\n\n----------------------------------------\n\nTITLE: Using MOCK_METHOD with type challenges in C++\nDESCRIPTION: Demonstrates how to properly use MOCK_METHOD when dealing with complex types that contain commas in C++. Shows error cases and two solutions: using parentheses to wrap arguments or using type aliases.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass MyMock {\n public:\n  // The following 2 lines will not compile due to commas in the arguments:\n  MOCK_METHOD(std::pair<bool, int>, GetPair, ());              // Error!\n  MOCK_METHOD(bool, CheckMap, (std::map<int, double>, bool));  // Error!\n\n  // One solution - wrap arguments that contain commas in parentheses:\n  MOCK_METHOD((std::pair<bool, int>), GetPair, ());\n  MOCK_METHOD(bool, CheckMap, ((std::map<int, double>), bool));\n\n  // Another solution - use type aliases:\n  using BoolAndInt = std::pair<bool, int>;\n  MOCK_METHOD(BoolAndInt, GetPair, ());\n  using MapIntDouble = std::map<int, double>;\n  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Predicates as Matchers with Truly() in Google Test\nDESCRIPTION: This snippet demonstrates how to use an arbitrary predicate function as a matcher by wrapping it in the Truly() function. The example checks if a function is called with an even number.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_36\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Truly;\n\nint IsEven(int n) { return (n % 2) == 0 ? 1 : 0; }\n...\n  // Bar() must be called with an even number.\n  EXPECT_CALL(foo, Bar(Truly(IsEven)));\n```\n\n----------------------------------------\n\nTITLE: Using ReturnPointee() to Return Live Values\nDESCRIPTION: The correct way to return live values from a mock method using ReturnPointee(), which evaluates the pointed-to value at execution time rather than creation time.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_54\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ReturnPointee;\n...\n  int x = 0;\n  MockFoo foo;\n  EXPECT_CALL(foo, GetValue())\n      .WillRepeatedly(ReturnPointee(&x));  // Note the & here.\n  x = 42;\n  EXPECT_EQ(foo.GetValue(), 42);  // This will succeed now.\n```\n\n----------------------------------------\n\nTITLE: Using RetiresOnSaturation to Create Non-Sticky Expectations in gMock\nDESCRIPTION: This example shows how to create expectations that retire after they are satisfied using the RetiresOnSaturation method. This allows subsequent calls to be matched by different expectations instead of detecting an upper bound violation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_19\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nfor (int i = n; i > 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n      .WillOnce(Return(10*i))\n      .RetiresOnSaturation();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Return Values for Types\nDESCRIPTION: Using DefaultValue to set and clear default return values for specific types, which is useful when the built-in default values are not suitable.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_63\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::DefaultValue;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(Bar, CalculateBar, (), (override));\n};\n\n\n...\n  Bar default_bar;\n  // Sets the default return value for type Bar.\n  DefaultValue<Bar>::Set(default_bar);\n\n  MockFoo foo;\n\n  // We don't need to specify an action here, as the default\n  // return value works for us.\n  EXPECT_CALL(foo, CalculateBar());\n\n  foo.CalculateBar();  // This should return default_bar.\n\n  // Unsets the default return value.\n  DefaultValue<Bar>::Clear();\n```\n\n----------------------------------------\n\nTITLE: Using NaggyMock to Generate Warnings for Uninteresting Calls in GoogleTest C++\nDESCRIPTION: Shows how to use NaggyMock to generate warnings for uninteresting calls on a mock object. The example creates a NaggyMock of MockClass and sets expectations for DoSomething(), with warnings generated for other method calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::NaggyMock;\n...\nNaggyMock<MockClass> my_mock(\"some\", \"args\");\nEXPECT_CALL(my_mock, DoSomething());\n... code that uses my_mock ...\n```\n\n----------------------------------------\n\nTITLE: Using ScopedTrace in C++\nDESCRIPTION: Example usage of ScopedTrace to add a trace to test failure messages. The trace will include the file path, line number, and specified message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\ntesting::ScopedTrace trace(\"file.cc\", 123, \"message\");\n```\n\n----------------------------------------\n\nTITLE: Disallowing Unexpected Calls in C++\nDESCRIPTION: Shows how to use EXPECT_CALL to explicitly disallow calls to a mock method or to allow only specific calls while disallowing others.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_45\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n...\n  EXPECT_CALL(foo, Bar(_))\n      .Times(0);\n\nusing ::testing::AnyNumber;\nusing ::testing::Gt;\n...\n  EXPECT_CALL(foo, Bar(5));\n  EXPECT_CALL(foo, Bar(Gt(10)))\n      .Times(AnyNumber());\n```\n\n----------------------------------------\n\nTITLE: Delegating to Parent Class Implementation Using Lambda in gMock\nDESCRIPTION: Demonstrates how to call the parent class implementation from within a mock using a lambda. This technique prevents infinite recursion by explicitly specifying the parent class when calling the method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_21\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo, Concrete).WillOnce([&foo](const char* str) {\n  return foo.Foo::Concrete(str);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Test Fixture Aliases for Death Tests in C++\nDESCRIPTION: Demonstrates how to create an alias for a test fixture class to avoid code duplication when the same fixture is used by both normal tests and death tests. This pattern helps maintain the recommended naming convention for death test suites.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_14\n\nLANGUAGE: c++\nCODE:\n```\nclass FooTest : public testing::Test { ... };\n\nusing FooDeathTest = FooTest;\n\nTEST_F(FooTest, DoesThis) {\n  // normal test\n}\n\nTEST_F(FooDeathTest, DoesThat) {\n  // death test\n}\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_NO_THROW with Compound Statement in C++\nDESCRIPTION: Demonstrates how to use EXPECT_NO_THROW to verify that a compound code block does not throw any exceptions. The example shows a compound statement with a variable declaration and function call.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_NO_THROW({\n  int n = 5;\n  DoSomething(&n);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Turtle Interface in C++\nDESCRIPTION: Definition of a Turtle graphics interface with virtual methods for pen control and movement that will be mocked in tests. The interface includes methods for positioning the turtle and querying its current coordinates.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass Turtle {\n  ...\n  virtual ~Turtle() {}\n  virtual void PenUp() = 0;\n  virtual void PenDown() = 0;\n  virtual void Forward(int distance) = 0;\n  virtual void Turn(int degrees) = 0;\n  virtual void GoTo(int x, int y) = 0;\n  virtual int GetX() const = 0;\n  virtual int GetY() const = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing PrintTo() for Custom Type Printing in GoogleTest\nDESCRIPTION: Shows how to define a PrintTo() function for custom types when AbslStringify() is not an option. This allows additional debugging information to be included in test output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\n#include <ostream>\n\nnamespace foo {\n\nclass Point {\n  ...\n  friend void PrintTo(const Point& point, std::ostream* os) {\n    *os << \"(\" << point.x << \",\" << point.y << \")\";\n  }\n\n  int x;\n  int y;\n};\n\n// If you can't declare the function in the class it's important that PrintTo()\n// is defined in the SAME namespace that defines Point.  C++'s look-up rules\n// rely on that.\nvoid PrintTo(const Point& point, std::ostream* os) {\n    *os << \"(\" << point.x << \",\" << point.y << \")\";\n}\n\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Mocking Class Templates in C++\nDESCRIPTION: Shows how to create mock classes from templated classes by creating a templated mock class that inherits from the original template.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename Elem>\nclass StackInterface {\n  ...\n  // Must be virtual as we'll inherit from StackInterface.\n  virtual ~StackInterface();\n\n  virtual int GetSize() const = 0;\n  virtual void Push(const Elem& x) = 0;\n};\n\ntemplate <typename Elem>\nclass MockStack : public StackInterface<Elem> {\n  ...\n  MOCK_METHOD(int, GetSize, (), (const, override));\n  MOCK_METHOD(void, Push, (const Elem& x), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Comparison Matchers for Arguments in gMock\nDESCRIPTION: An example showing how to use comparison matchers like Ge (greater than or equal) to specify expectations on numeric arguments with more flexibility than exact matching.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Ge;\n...\n// Expects the turtle moves forward by at least 100.\nEXPECT_CALL(turtle, Forward(Ge(100)));\n```\n\n----------------------------------------\n\nTITLE: Creating Individual Expectations in C++\nDESCRIPTION: Demonstrates how to create and store individual mock function call expectations using the Expectation class. Shows basic expectation creation and storage.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Expectation;\nExpectation my_expectation = EXPECT_CALL(...);\n```\n\n----------------------------------------\n\nTITLE: Using SafeMatcherCast for Type Conversion in gMock\nDESCRIPTION: Demonstrates using SafeMatcherCast to safely convert matchers between compatible types. This is useful when dealing with inheritance hierarchies or when matching values of similar but not identical types.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_28\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::SafeMatcherCast;\n\n// A base class and a child class.\nclass Base { ... };\nclass Derived : public Base { ... };\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(void, DoThis, (Derived* derived), (override));\n};\n\n...\n  MockFoo foo;\n  // m is a Matcher<Base*> we got from somewhere.\n  EXPECT_CALL(foo, DoThis(SafeMatcherCast<Derived*>(m)));\n```\n\n----------------------------------------\n\nTITLE: Instantiating Value-Parameterized Tests with String Parameters\nDESCRIPTION: Shows how to instantiate a test suite with string parameters using the INSTANTIATE_TEST_SUITE_P macro and the Values parameter generator.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_30\n\nLANGUAGE: c++\nCODE:\n```\nINSTANTIATE_TEST_SUITE_P(MeenyMinyMoe,\n                         FooTest,\n                         testing::Values(\"meeny\", \"miny\", \"moe\"));\n```\n\n----------------------------------------\n\nTITLE: Setting up CMakeLists.txt with GoogleTest Dependency\nDESCRIPTION: Creates a CMake configuration file that sets up the project and declares a dependency on GoogleTest using the FetchContent module. It specifies C++14 as the minimum standard and configures GoogleTest for proper Windows integration.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-cmake.md#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(my_project)\n\n# GoogleTest requires at least C++14\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  URL https://github.com/google/googletest/archive/03597a01ee50ed33e9dfd640b249b4be3799d395.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n```\n\n----------------------------------------\n\nTITLE: Using FAIL Macro in Switch Statement (C++)\nDESCRIPTION: Shows how to use the FAIL() macro in a switch statement to handle unexpected cases. This is useful when control flow determines the test's success or failure rather than a Boolean expression.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nswitch(expression) {\n  case 1:\n    ... some checks ...\n  case 2:\n    ... some other checks ...\n  default:\n    FAIL() << \"We shouldn't get here.\";\n}\n```\n\n----------------------------------------\n\nTITLE: Using RetiresOnSaturation for Mock Expectations in GoogleTest C++\nDESCRIPTION: Demonstrates the RetiresOnSaturation clause to make an expectation inactive after it has been satisfied a specific number of times. The example shows how to create expectations that match specific arguments and then retire after a set number of calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::AnyNumber;\n...\nEXPECT_CALL(my_mock, SetNumber(_))  // Expectation 1\n    .Times(AnyNumber());\nEXPECT_CALL(my_mock, SetNumber(7))  // Expectation 2\n    .Times(2)\n    .RetiresOnSaturation();\n```\n\n----------------------------------------\n\nTITLE: Using Functions with Extra Info as Actions in Google Test Mocks\nDESCRIPTION: Demonstrates how to use functions with additional arguments as actions in mock expectations by using callbacks with pre-bound arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_66\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::Invoke;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(char, DoThis, (int n), (override));\n};\n\nchar SignOfSum(int x, int y) {\n  const int sum = x + y;\n  return (sum > 0) ? '+' : (sum < 0) ? '-' : '0';\n}\n\nTEST_F(FooTest, Test) {\n  MockFoo foo;\n\n  EXPECT_CALL(foo, DoThis(2))\n      .WillOnce(Invoke(NewPermanentCallback(SignOfSum, 5)));\n  EXPECT_EQ(foo.DoThis(2), '+');  // Invokes SignOfSum(5, 2).\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Exact Argument Expectations in gMock\nDESCRIPTION: An example showing how to expect a function call with specific argument values. This demonstrates the implicit Eq matcher being used to verify exact argument values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n// Expects the turtle to move forward by 100 units.\nEXPECT_CALL(turtle, Forward(100));\n```\n\n----------------------------------------\n\nTITLE: Running All GoogleTest Tests in C++\nDESCRIPTION: Executes all registered GoogleTest tests. Returns 0 if all tests pass, 1 otherwise. Should be called after InitGoogleTest() has parsed the command line.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_19\n\nLANGUAGE: C++\nCODE:\n```\nint RUN_ALL_TESTS()\n```\n\n----------------------------------------\n\nTITLE: Invoking Mock Function Arguments in Google Test\nDESCRIPTION: Demonstrates how to invoke callable arguments received by mock functions using the InvokeArgument action.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_68\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_;\nusing ::testing::InvokeArgument;\n...\n  EXPECT_CALL(foo, DoThis(_, _))\n      .WillOnce(InvokeArgument<1>(5));\n      // Will execute callback->Run(5), where callback is the\n      // second argument DoThis() receives.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Various Death Test Implementations in C++\nDESCRIPTION: This snippet shows different ways to use death assertions in GoogleTest, including simple function calls, complex expressions, death assertions in loops, and compound statements. The examples demonstrate the flexibility of death test assertions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\n// A death test can be a simple function call.\nTEST(MyDeathTest, FunctionCall) {\n  ASSERT_DEATH(Xyz(5), \"Xyz failed\");\n}\n\n// Or a complex expression that references variables and functions.\nTEST(MyDeathTest, ComplexExpression) {\n  const bool c = Condition();\n  ASSERT_DEATH((c ? Func1(0) : object2.Method(\"test\")),\n               \"(Func1|Method) failed\");\n}\n\n// Death assertions can be used anywhere in a function.  In\n// particular, they can be inside a loop.\nTEST(MyDeathTest, InsideLoop) {\n  // Verifies that Foo(0), Foo(1), ..., and Foo(4) all die.\n  for (int i = 0; i < 5; i++) {\n    EXPECT_DEATH_M(Foo(i), \"Foo has \\\\d+ errors\",\n                   ::testing::Message() << \"where i is \" << i);\n  }\n}\n\n// A death assertion can contain a compound statement.\nTEST(MyDeathTest, CompoundStatement) {\n  // Verifies that at lease one of Bar(0), Bar(1), ..., and\n  // Bar(4) dies.\n  ASSERT_DEATH({\n    for (int i = 0; i < 5; i++) {\n      Bar(i);\n    }\n  },\n  \"Bar has \\\\d+ errors\");\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring All Arguments in gMock Expectations\nDESCRIPTION: Examples showing how to set expectations on method calls without specifying any argument matchers, allowing the method to be called with any arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n// Expects the turtle to move forward.\nEXPECT_CALL(turtle, Forward);\n// Expects the turtle to jump somewhere.\nEXPECT_CALL(turtle, GoTo);\n```\n\n----------------------------------------\n\nTITLE: Using ExpectationSet for multiple prerequisites in C++\nDESCRIPTION: Shows how to use ExpectationSet when dealing with a large or variable number of prerequisites. This example ensures that Describe() is called only after all InitElement() methods have been called.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/mocking.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ExpectationSet;\n...\nExpectationSet all_inits;\n// Collect all expectations of InitElement() calls\nfor (int i = 0; i < element_count; i++) {\n  all_inits += EXPECT_CALL(my_mock, InitElement(i));\n}\nEXPECT_CALL(my_mock, Describe())\n    .After(all_inits);  // Expect Describe() call after all InitElement() calls\n```\n\n----------------------------------------\n\nTITLE: Invoking Functions Without Arguments in Google Test Mocks\nDESCRIPTION: Shows how to invoke functions without passing the mock function's arguments using InvokeWithoutArgs and lambda expressions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_67\n\nLANGUAGE: C++\nCODE:\n```\nusing ::testing::_;\nusing ::testing::InvokeWithoutArgs;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(bool, ComplexJob, (int n), (override));\n};\n\nbool Job1() { ... }\nbool Job2(int n, char c) { ... }\n\n...\n  MockFoo foo;\n  EXPECT_CALL(foo, ComplexJob(_))\n      .WillOnce([] { Job1(); });\n      .WillOnce(InvokeWithoutArgs(NewPermanentCallback(Job2, 5, 'a')));\n\n  foo.ComplexJob(10);  // Invokes Job1().\n  foo.ComplexJob(20);  // Invokes Job2(5, 'a').\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Matcher in gMock\nDESCRIPTION: Demonstrates using the wildcard matcher '_' which matches any value of the appropriate type. This is useful when you only care about certain arguments in a method call.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_25\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo, DoThat(_, NotNull()));\n```\n\n----------------------------------------\n\nTITLE: Combining SetArgPointee() with Return()\nDESCRIPTION: Using DoAll() to both modify an output argument with SetArgPointee() and return a value with Return(), which is useful for mocking functions that have both side effects and return values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_58\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::DoAll;\nusing ::testing::Return;\nusing ::testing::SetArgPointee;\n\nclass MockMutator : public Mutator {\n public:\n  ...\n  MOCK_METHOD(bool, MutateInt, (int* value), (override));\n}\n...\n  MockMutator mutator;\n  EXPECT_CALL(mutator, MutateInt(_))\n      .WillOnce(DoAll(SetArgPointee<0>(5),\n                      Return(true)));\n```\n\n----------------------------------------\n\nTITLE: Setting Default Actions in C++\nDESCRIPTION: Shows how to customize default actions for mock methods using DefaultValue<T>::SetFactory. The example sets up a factory to create new objects when a mock method is called.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n  // Sets the default action for return type std::unique_ptr<Buzz> to\n  // creating a new Buzz every time.\n  DefaultValue<std::unique_ptr<Buzz>>::SetFactory(\n      [] { return std::make_unique<Buzz>(AccessLevel::kInternal); });\n\n  // When this fires, the default action of MakeBuzz() will run, which\n  // will return a new Buzz object.\n  EXPECT_CALL(mock_buzzer_, MakeBuzz(\"hello\")).Times(AnyNumber());\n\n  auto buzz1 = mock_buzzer_.MakeBuzz(\"hello\");\n  auto buzz2 = mock_buzzer_.MakeBuzz(\"hello\");\n  EXPECT_NE(buzz1, nullptr);\n  EXPECT_NE(buzz2, nullptr);\n  EXPECT_NE(buzz1, buzz2);\n\n  // Resets the default action for return type std::unique_ptr<Buzz>,\n  // to avoid interfere with other tests.\n  DefaultValue<std::unique_ptr<Buzz>>::Clear();\n```\n\n----------------------------------------\n\nTITLE: Creating an Increment Argument Action in C++ with GoogleTest\nDESCRIPTION: Implementation of a custom monomorphic action that increments an integer pointer argument and returns the original value. The example demonstrates creating and using a custom action with EXPECT_CALL in tests.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_111\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Action;\nusing ::testing::ActionInterface;\nusing ::testing::MakeAction;\n\ntypedef int IncrementMethod(int*);\n\nclass IncrementArgumentAction : public ActionInterface<IncrementMethod> {\n public:\n  int Perform(const std::tuple<int*>& args) override {\n    int* p = std::get<0>(args);  // Grabs the first argument.\n    return *p++;\n  }\n};\n\nAction<IncrementMethod> IncrementArgument() {\n  return MakeAction(new IncrementArgumentAction);\n}\n\n...\n  EXPECT_CALL(foo, Baz(_))\n      .WillOnce(IncrementArgument());\n\n  int n = 5;\n  foo.Baz(&n);  // Should return 5 and change n to 6.\n```\n\n----------------------------------------\n\nTITLE: Using Templated Mock Classes in Tests\nDESCRIPTION: Demonstrates how to use template-based mocks in test code by instantiating templates with the mock class and setting expectations on mock objects.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\n  MockPacketStream mock_stream;\n  EXPECT_CALL(mock_stream, ...)...;\n  .. set more expectations on mock_stream ...\n  PacketReader<MockPacketStream> reader(&mock_stream);\n  ... exercise reader ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Fixture Class Template for Type-Parameterized Tests in C++\nDESCRIPTION: This code shows how to create a fixture class template for type-parameterized tests, similar to typed tests but without predefined type lists.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_38\n\nLANGUAGE: C++\nCODE:\n```\ntemplate <typename T>\nclass FooTest : public testing::Test {\n  void DoSomethingInteresting();\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Test Failures in C++\nDESCRIPTION: Demonstrates the HasFatalFailure() method in the testing::Test class for checking if fatal failures occurred in the current test.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_22\n\nLANGUAGE: c++\nCODE:\n```\nclass Test {\n public:\n  ...\n  static bool HasFatalFailure();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Predicate Functions with EXPECT_EXIT in C++\nDESCRIPTION: Demonstrates the use of predefined predicate functions ExitedWithCode and KilledBySignal for common exit status checks in EXPECT_EXIT.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\n// Returns true if the program exited normally with the given exit status code.\n::testing::ExitedWithCode(exit_code);\n\n// Returns true if the program was killed by the given signal.\n// Not available on Windows.\n::testing::KilledBySignal(signal_number);\n```\n\n----------------------------------------\n\nTITLE: Using MockFunction Template Class in C++\nDESCRIPTION: Shows the definition of the MockFunction template class that provides a simple way to mock a standalone function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFunction<R(A1, ..., An)> {\n public:\n  MOCK_METHOD(R, Call, (A1, ..., An));\n};\n```\n\n----------------------------------------\n\nTITLE: Instantiating Value-Parameterized Tests with Array Parameters\nDESCRIPTION: Demonstrates instantiating a test suite using an array of parameters with the ValuesIn parameter generator.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_31\n\nLANGUAGE: c++\nCODE:\n```\nconstexpr absl::string_view kPets[] = {\"cat\", \"dog\"};\nINSTANTIATE_TEST_SUITE_P(Pets, FooTest, testing::ValuesIn(kPets));\n```\n\n----------------------------------------\n\nTITLE: Configuring Death Test Styles in Main and Individual Tests in C++\nDESCRIPTION: Demonstrates how to set different death test styles globally and in individual tests. The example shows setting the 'fast' style as default in main() while overriding it with 'threadsafe' in a specific test.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_16\n\nLANGUAGE: c++\nCODE:\n```\nint main(int argc, char** argv) {\n  testing::InitGoogleTest(&argc, argv);\n  GTEST_FLAG_SET(death_test_style, \"fast\");\n  return RUN_ALL_TESTS();\n}\n\nTEST(MyDeathTest, TestOne) {\n  GTEST_FLAG_SET(death_test_style, \"threadsafe\");\n  // This test is run in the \"threadsafe\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n\nTEST(MyDeathTest, TestTwo) {\n  // This test is run in the \"fast\" style:\n  ASSERT_DEATH(ThisShouldDie(), \"\");\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Types for Typed Tests in C++\nDESCRIPTION: Example of creating a type alias that specifies the list of types that will be used to instantiate the typed test suite. This is required for TYPED_TEST_SUITE macro to parse correctly.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nusing MyTypes = ::testing::Types<char, int, unsigned int>;\nTYPED_TEST_SUITE(MyFixture, MyTypes);\n```\n\n----------------------------------------\n\nTITLE: Declaring a Test as a Friend of a Class for Private Code Testing in C++\nDESCRIPTION: This snippet demonstrates how to declare an individual test as a friend of a class to allow testing of private members without exposing them publicly.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_41\n\nLANGUAGE: C++\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n private:\n  FRIEND_TEST(FooTest, BarReturnsZeroOnNull);\n\n  int Bar(void* x);\n};\n\n// foo_test.cc\n...\nTEST(FooTest, BarReturnsZeroOnNull) {\n  Foo foo;\n  EXPECT_EQ(foo.Bar(NULL), 0);  // Uses Foo's private member Bar().\n}\n```\n\n----------------------------------------\n\nTITLE: Using Two-Parameter Matcher with Description\nDESCRIPTION: Demonstrates creating a two-parameter matcher with custom description string using MATCHER_P2 to check if a value falls within a range.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_91\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::PrintToString;\nMATCHER_P2(InClosedRange, low, hi,\n           absl::StrFormat(\"%s in range [%s, %s]\", negation ? \"isn't\" : \"is\",\n                           PrintToString(low), PrintToString(hi))) {\n  return low <= arg && arg <= hi;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AssertionResult Objects for Custom Test Results in C++\nDESCRIPTION: Shows how to create AssertionResult objects to indicate test success or failure in GoogleTest. These factory functions are used to build more informative predicate assertions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nnamespace testing {\n\n// Returns an AssertionResult object to indicate that an assertion has\n// succeeded.\nAssertionResult AssertionSuccess();\n\n// Returns an AssertionResult object to indicate that an assertion has\n// failed.\nAssertionResult AssertionFailure();\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Typed Test in C++\nDESCRIPTION: Example showing how to implement a typed test using TYPED_TEST macro. Demonstrates accessing type parameter with TypeParam, static members with TestFixture prefix, and typedefs requiring typename TestFixture prefix.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nTYPED_TEST(MyFixture, Example) {\n  // Inside a test, refer to the special name TypeParam to get the type\n  // parameter.  Since we are inside a derived class template, C++ requires\n  // us to visit the members of MyFixture via 'this'.\n  TypeParam n = this->value_;\n\n  // To visit static members of the fixture, add the 'TestFixture::'\n  // prefix.\n  n += TestFixture::shared_;\n\n  // To refer to typedefs in the fixture, add the 'typename TestFixture::'\n  // prefix. The 'typename' is required to satisfy the compiler.\n  typename TestFixture::List values;\n\n  values.push_back(n);\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Destructors in C++ Google Test\nDESCRIPTION: Shows a pattern for mocking destructors in Google Test by adding a mock Die() method and calling it in the destructor. This allows testing the timing of object destruction.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_80\n\nLANGUAGE: C++\nCODE:\n```\nclass MockFoo : public Foo {\n  ...\n  // Add the following two lines to the mock class.\n  MOCK_METHOD(void, Die, ());\n  ~MockFoo() override { Die(); }\n};\n```\n\nLANGUAGE: C++\nCODE:\n```\n  MockFoo* foo = new MockFoo;\n  MockBar* bar = new MockBar;\n  ...\n  {\n    InSequence s;\n\n    // Expects *foo to die after bar->A() and before bar->B().\n    EXPECT_CALL(*bar, A());\n    EXPECT_CALL(*foo, Die());\n    EXPECT_CALL(*bar, B());\n  }\n```\n\n----------------------------------------\n\nTITLE: Sample C++ Test Suite Implementation\nDESCRIPTION: Example demonstrating how to define multiple test cases across different test suites\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_54\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(MathTest, Addition) { ... }\nTEST(MathTest, Subtraction) { ... }\nTEST(LogicTest, NonContradiction) { ... }\n```\n\n----------------------------------------\n\nTITLE: Custom Test Name Generator for Parameterized Tests in C++\nDESCRIPTION: Shows how to use a custom function to generate test name suffixes based on test parameters. The function accepts a TestParamInfo object and returns a string that will be used as the test name suffix.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nINSTANTIATE_TEST_SUITE_P(\n    MyInstantiation, MyTestSuite,\n    testing::Values(...),\n    [](const testing::TestParamInfo<MyTestSuite::ParamType>& info) {\n      // Can use info.param here to generate the test suffix\n      std::string name = ...\n      return name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Custom Parameter Name Generation for Complex Types\nDESCRIPTION: Shows how to create a custom parameter name generator using a lambda function for tests with multiple parameters including enums and strings.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_34\n\nLANGUAGE: c++\nCODE:\n```\nenum class MyType { MY_FOO = 0, MY_BAR = 1 };\n\nclass MyTestSuite : public testing::TestWithParam<std::tuple<MyType, std::string>> {\n};\n\nINSTANTIATE_TEST_SUITE_P(\n    MyGroup, MyTestSuite,\n    testing::Combine(\n        testing::Values(MyType::MY_FOO, MyType::MY_BAR),\n        testing::Values(\"A\", \"B\")),\n    [](const testing::TestParamInfo<MyTestSuite::ParamType>& info) {\n      std::string name = absl::StrCat(\n          std::get<0>(info.param) == MyType::MY_FOO ? \"Foo\" : \"Bar\",\n          std::get<1>(info.param));\n      absl::c_replace_if(name, [](char c) { return !std::isalnum(c); }, '_');\n      return name;\n    });\n```\n\n----------------------------------------\n\nTITLE: Setting Default Behavior to Call Parent Implementation in gMock\nDESCRIPTION: Shows how to configure a mock method to always call the parent class implementation by default. This is useful when you only want to override the behavior in specific test cases.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_22\n\nLANGUAGE: cpp\nCODE:\n```\nON_CALL(foo, Concrete).WillByDefault([&foo](const char* str) {\n  return foo.Foo::Concrete(str);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Static Type Assertions in Template Code with C++\nDESCRIPTION: Shows how to use StaticAssertTypeEq to verify type equality at compile time, which is useful for template metaprogramming and enforcing type constraints.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\n::testing::StaticAssertTypeEq<T1, T2>();\n```\n\n----------------------------------------\n\nTITLE: Mocking Private or Protected Methods in C++\nDESCRIPTION: Demonstrates how to mock private or protected methods from a base class. All mock methods must be placed in the public section of the mock class regardless of their access level in the base class.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n public:\n  ...\n  virtual bool Transform(Gadget* g) = 0;\n\n protected:\n  virtual void Resume();\n\n private:\n  virtual int GetTimeOut();\n};\n\nclass MockFoo : public Foo {\n public:\n  ...\n  MOCK_METHOD(bool, Transform, (Gadget* g), (override));\n\n  // The following must be in the public section, even though the\n  // methods are protected or private in the base class.\n  MOCK_METHOD(void, Resume, (), (override));\n  MOCK_METHOD(int, GetTimeOut, (), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Matching Non-Copyable Arguments in Google Test with std::ref\nDESCRIPTION: This snippet shows how to match arguments that cannot be copied by using std::ref to tell gMock to save a reference instead of a copy. This is useful for non-copyable objects but requires careful handling.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_37\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Eq;\nusing ::testing::Lt;\n...\n  // Expects that Foo()'s argument == bar.\n  EXPECT_CALL(mock_obj, Foo(Eq(std::ref(bar))));\n\n  // Expects that Foo()'s argument < bar.\n  EXPECT_CALL(mock_obj, Foo(Lt(std::ref(bar))));\n```\n\n----------------------------------------\n\nTITLE: Using HasFatalFailure in Test Cases\nDESCRIPTION: Shows typical usage of HasFatalFailure() to abort test execution after a fatal failure in a subroutine.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_23\n\nLANGUAGE: c++\nCODE:\n```\nTEST(FooTest, Bar) {\n  Subroutine();\n  // Aborts if Subroutine() had a fatal failure.\n  if (HasFatalFailure()) return;\n\n  // The following won't be executed.\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher with Improved Description String\nDESCRIPTION: Enhanced version of the IsDivisibleBy7 matcher that provides a better description string that handles negation correctly.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_87\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsDivisibleBy7,\n        absl::StrCat(negation ? \"isn't\" : \"is\", \" divisible by 7\")) {\n  return (arg % 7) == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Catching Fatal Failures in GoogleTest C++\nDESCRIPTION: Demonstrates how to use EXPECT_FATAL_FAILURE macro to catch and verify fatal failures in GoogleTest. This is useful for testing utility functions built on top of GoogleTest.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_43\n\nLANGUAGE: c++\nCODE:\n```\nEXPECT_FATAL_FAILURE(statement, substring);\n```\n\n----------------------------------------\n\nTITLE: Defining a Template Test Fixture for Typed Tests in C++\nDESCRIPTION: A code example showing how to define a fixture class template parameterized by a type. The fixture includes a type alias, a static member, and an instance member, which are typical components needed for typed tests.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nclass MyFixture : public testing::Test {\n public:\n  ...\n  using List = std::list<T>;\n  static T shared_;\n  T value_;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Matcher with MATCHER_P Macro\nDESCRIPTION: Shows how to create a single-parameter matcher using MATCHER_P macro to define a matcher that checks absolute values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_90\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER_P(HasAbsoluteValue, value, \"\") { return abs(arg) == value; }\n```\n\n----------------------------------------\n\nTITLE: Defining a Normal Mock Class in C++\nDESCRIPTION: Shows how to create a mock class from an existing interface. The example demonstrates mocking a class named 'Foo' with several virtual methods including overloaded functions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n public:\n  virtual ~Foo();\n  virtual int GetSize() const = 0;\n  virtual string Describe(const char* name) = 0;\n  virtual string Describe(int type) = 0;\n  virtual bool Process(Bar elem, int count) = 0;\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\n#include <gmock/gmock.h>\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, GetSize, (), (const, override));\n  MOCK_METHOD(string, Describe, (const char* name), (override));\n  MOCK_METHOD(string, Describe, (int type), (override));\n  MOCK_METHOD(bool, Process, (Bar elem, int count), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Using StrictMock to Fail on Uninteresting Calls in Google Test C++\nDESCRIPTION: Demonstrates the use of StrictMock to make all uninteresting calls failures in a Google Test mock object.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::StrictMock;\n\nTEST(...) {\n  StrictMock<MockFoo> mock_foo;\n  EXPECT_CALL(mock_foo, DoThis());\n  ... code that uses mock_foo ...\n\n  // The test will fail if a method of mock_foo other than DoThis()\n  // is called.\n}\n```\n\n----------------------------------------\n\nTITLE: Example GoogleTest C++ Test Cases\nDESCRIPTION: This C++ code snippet demonstrates how to define simple test cases using GoogleTest framework.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_58\n\nLANGUAGE: c++\nCODE:\n```\nTEST(MathTest, Addition) { ... }\nTEST(MathTest, Subtraction) { ... }\nTEST(LogicTest, NonContradiction) { ... }\n```\n\n----------------------------------------\n\nTITLE: Handling Callback Types with Invoke in GoogleTest (C++)\nDESCRIPTION: Illustrates the correct way to use Invoke with callback objects, showing that Invoke takes ownership of the callback which must be of a base callback type rather than a derived one for proper compilation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/actions.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n  BlockingClosure* done = new BlockingClosure;\n  ... Invoke(done) ...;  // This won't compile!\n\n  Closure* done2 = new BlockingClosure;\n  ... Invoke(done2) ...;  // This works.\n```\n\n----------------------------------------\n\nTITLE: Testing Windows COM with HRESULT Assertions in C++\nDESCRIPTION: Demonstrates how to use ASSERT_HRESULT_SUCCEEDED to verify COM operations succeed. This example creates a Shell.Application instance and executes a shell command.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\nCComPtr<IShellDispatch2> shell;\nASSERT_HRESULT_SUCCEEDED(shell.CoCreateInstance(L\"Shell.Application\"));\nCComVariant empty;\nASSERT_HRESULT_SUCCEEDED(shell->ShellExecute(CComBSTR(url), empty, empty, empty, empty));\n```\n\n----------------------------------------\n\nTITLE: Demonstrating SCOPED_TRACE in GoogleTest C++\nDESCRIPTION: This snippet illustrates the use of SCOPED_TRACE in GoogleTest, showing how it adds trace information to failure messages to provide more context for debugging.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/test/googletest-output-test-golden-lin.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\ngoogletest-output-test_.cc:#: Failure\nFailed\nThis failure is expected, and should contain trace point A, B, and C.\nGoogle Test trace:\ngoogletest-output-test_.cc:#: C\ngoogletest-output-test_.cc:#: B\ngoogletest-output-test_.cc:#: A\nStack trace: (omitted)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Catch-All Mock Expectations\nDESCRIPTION: Shows how to configure mock expectations to handle both specific and wildcard method calls using ordered EXPECT_CALL statements.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_47\n\nLANGUAGE: cpp\nCODE:\n```\n  EXPECT_CALL(mock_registry, GetDomainOwner(_))\n        .Times(AnyNumber());  // catches all other calls to this method.\n  EXPECT_CALL(mock_registry, GetDomainOwner(\"google.com\"))\n        .WillRepeatedly(Return(\"Larry Page\"));\n```\n\n----------------------------------------\n\nTITLE: Listing Test Names in GoogleTest\nDESCRIPTION: This snippet demonstrates the output format when using the --gtest_list_tests flag to list available tests in a GoogleTest program.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_51\n\nLANGUAGE: none\nCODE:\n```\nTestSuite1.\n  TestName1\n  TestName2\nTestSuite2.\n  TestName\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic Matchers with MakePolymorphicMatcher\nDESCRIPTION: Demonstrates how to create a NotNull() polymorphic matcher using MakePolymorphicMatcher(). This approach is easier than using the legacy MatcherInterface<T> and doesn't require virtual methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_95\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::MakePolymorphicMatcher;\nusing ::testing::MatchResultListener;\nusing ::testing::PolymorphicMatcher;\n\nclass NotNullMatcher {\n public:\n  // To implement a polymorphic matcher, first define a COPYABLE class\n  // that has three members MatchAndExplain(), DescribeTo(), and\n  // DescribeNegationTo(), like the following.\n\n  // In this example, we want to use NotNull() with any pointer, so\n  // MatchAndExplain() accepts a pointer of any type as its first argument.\n  // In general, you can define MatchAndExplain() as an ordinary method or\n  // a method template, or even overload it.\n  template <typename T>\n  bool MatchAndExplain(T* p,\n                       MatchResultListener* /* listener */) const {\n    return p != NULL;\n  }\n\n  // Describes the property of a value matching this matcher.\n  void DescribeTo(std::ostream* os) const { *os << \"is not NULL\"; }\n\n  // Describes the property of a value NOT matching this matcher.\n  void DescribeNegationTo(std::ostream* os) const { *os << \"is NULL\"; }\n};\n\n// To construct a polymorphic matcher, pass an instance of the class\n// to MakePolymorphicMatcher().  Note the return type.\nPolymorphicMatcher<NotNullMatcher> NotNull() {\n  return MakePolymorphicMatcher(NotNullMatcher());\n}\n\n...\n\n  EXPECT_CALL(foo, Bar(NotNull()));  // The argument must be a non-NULL pointer.\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_PRED2 with MutuallyPrime Function in C++\nDESCRIPTION: Shows how to use the EXPECT_PRED2 macro to test a binary predicate function. This example verifies if pairs of numbers are mutually prime (having no common divisors except 1).\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// Returns true if m and n have no common divisors except 1.\nbool MutuallyPrime(int m, int n) { ... }\n...\nconst int a = 3;\nconst int b = 4;\nconst int c = 10;\n...\nEXPECT_PRED2(MutuallyPrime, a, b);  // Succeeds\nEXPECT_PRED2(MutuallyPrime, b, c);  // Fails\n```\n\n----------------------------------------\n\nTITLE: Increment Argument Example using ACTION\nDESCRIPTION: Example of an ACTION that increments its first argument by dereferencing a pointer. Shows how to access and modify function arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_102\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(IncrementArg1) { return ++(*arg1); }\n```\n\n----------------------------------------\n\nTITLE: Template-based Dependency Injection for Non-virtual Methods\nDESCRIPTION: Shows how to use template-based dependency injection to switch between real and mock implementations of non-virtual methods in production code versus tests.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_9\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <class PacketStream>\nvoid CreateConnection(PacketStream* stream) { ... }\n\ntemplate <class PacketStream>\nclass PacketReader {\n public:\n  void ReadPackets(PacketStream* stream, size_t packet_num);\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Compound Matcher in C++\nDESCRIPTION: Demonstrates creating a complex matcher that combines multiple conditions and uses DescribeMatcher for detailed descriptions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER_P(XAndYThat, matcher,\n          \"X that \" + DescribeMatcher<int>(matcher, negation) +\n              (negation ? \" or\" : \" and\") + \" Y that \" +\n              DescribeMatcher<double>(matcher, negation)) {\n  return ExplainMatchResult(matcher, arg.x(), result_listener) &&\n         ExplainMatchResult(matcher, arg.y(), result_listener);\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Function Type with EXPECT_PRED1 for Overloaded Functions in C++\nDESCRIPTION: Demonstrates how to explicitly specify the type of overloaded functions when using EXPECT_PRED1. Shows examples for both overloaded functions and template functions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_PRED1(static_cast<bool (*)(int)>(IsPositive), 5);\nEXPECT_PRED1(static_cast<bool (*)(double)>(IsPositive), 3.14);\n```\n\n----------------------------------------\n\nTITLE: Using ElementsAreArray for Dynamic Arrays in C++\nDESCRIPTION: Demonstrates how to use ElementsAreArray() matcher with dynamically created arrays. It shows both static and dynamic array usage, including specifying the array size.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_41\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::ElementsAreArray;\n...\n  // ElementsAreArray accepts an array of element values.\n  const int expected_vector1[] = {1, 5, 2, 4, ...};\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector1)));\n\n  // Or, an array of element matchers.\n  Matcher<int> expected_vector2[] = {1, Gt(2), _, 3, ...};\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector2)));\n\n  int* const expected_vector3 = new int[count];\n  ... fill expected_vector3 with values ...\n  EXPECT_CALL(mock, Foo(ElementsAreArray(expected_vector3, count)));\n```\n\n----------------------------------------\n\nTITLE: Using ScopedTrace Utility for Custom Trace Points in C++\nDESCRIPTION: Demonstrates the ScopedTrace class for adding custom trace points with explicit file path and line number information. This is useful when implementing test helper functions that need to provide context for failures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_18\n\nLANGUAGE: c++\nCODE:\n```\nScopedTrace trace(\"file_path\", line_number, message);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Sequential Mock Expectations\nDESCRIPTION: Shows two approaches to setting up sequential expectations for multiple calls to the same mock method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_faq.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\n  {\n    InSequence s;\n    EXPECT_CALL(foo, Bar())\n        .WillOnce(Return(1))\n        .RetiresOnSaturation();\n    EXPECT_CALL(foo, Bar())\n        .WillOnce(Return(2))\n        .RetiresOnSaturation();\n  }\n```\n\n----------------------------------------\n\nTITLE: Add Parameter Example using ACTION_P\nDESCRIPTION: Example of a parameterized action that adds a parameter value to the first argument of the mock function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_105\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P(Add, n) { return arg0 + n; }\n```\n\n----------------------------------------\n\nTITLE: Basic ACTION Macro Definition in C++\nDESCRIPTION: Defines a basic action using the ACTION macro that can be used in mock function expectations. The action can access function arguments using argK notation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_101\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(name) { statements; }\n```\n\n----------------------------------------\n\nTITLE: Allowing Uninstantiated Parameterized Tests\nDESCRIPTION: Shows how to suppress the default failure check for TEST_P declarations without corresponding INSTANTIATE_TEST_SUITE_P statements.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_32\n\nLANGUAGE: c++\nCODE:\n```\nGTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST(FooTest);\n```\n\n----------------------------------------\n\nTITLE: Using EXPECT_PRED1 with Template Functions in C++\nDESCRIPTION: Shows how to specify template arguments when using template functions with EXPECT_PRED1. This example demonstrates testing a negative number with a template predicate.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nbool IsNegative(T x) {\n  return x < 0;\n}\n...\nEXPECT_PRED1(IsNegative<int>, -5);  // Must specify type for IsNegative\n```\n\n----------------------------------------\n\nTITLE: Passing Reference Arguments with InvokeArgument in GoogleTest (C++)\nDESCRIPTION: Shows how to use InvokeArgument to call a function passed as an argument to a mock function, with a mix of value and reference parameters. The std::ref wrapper is used to pass arguments by reference.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/actions.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InvokeArgument;\n...\nInvokeArgument<2>(5, string(\"Hi\"), std::ref(foo))\n```\n\n----------------------------------------\n\nTITLE: Ignoring Method Parameters in Mock Expectations\nDESCRIPTION: Example of setting mock expectations without specifying parameter lists when the actual parameters don't matter.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_48\n\nLANGUAGE: cpp\nCODE:\n```\n  // Expect foo.Bar( ... ) twice with any arguments.\n  EXPECT_CALL(foo, Bar).Times(2);\n\n  // Delegate to the given method whenever the factory is invoked.\n  ON_CALL(foo_factory, MakeFoo)\n      .WillByDefault(&BuildFooForTest);\n```\n\n----------------------------------------\n\nTITLE: Creating Assertion Results in GoogleTest C++\nDESCRIPTION: Functions to create successful or failed assertion results. AssertionFailure can be used with the << operator to add a failure message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_20\n\nLANGUAGE: C++\nCODE:\n```\nAssertionResult testing::AssertionSuccess()\n```\n\nLANGUAGE: C++\nCODE:\n```\nAssertionResult testing::AssertionFailure()\n```\n\nLANGUAGE: C++\nCODE:\n```\ntesting::AssertionFailure() << \"My failure message\";\n```\n\n----------------------------------------\n\nTITLE: Two-Parameter Distance Calculation Action\nDESCRIPTION: Complex example using ACTION_P2 to create an action that calculates distance between a point (from arguments) and a fixed point (from parameters).\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_106\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P2(ReturnDistanceTo, x, y) {\n  double dx = arg0 - x;\n  double dy = arg1 - y;\n  return sqrt(dx*dx + dy*dy);\n}\n```\n\n----------------------------------------\n\nTITLE: Using PrintToStringParamName for Parameter Name Generation\nDESCRIPTION: Demonstrates how to use the built-in PrintToStringParamName function to generate test name suffixes based on parameter values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_33\n\nLANGUAGE: c++\nCODE:\n```\nclass MyTestSuite : public testing::TestWithParam<int> {};\n\nTEST_P(MyTestSuite, MyTest)\n{\n  std::cout << \"Example Test Param: \" << GetParam() << std::endl;\n}\n\nINSTANTIATE_TEST_SUITE_P(MyGroup, MyTestSuite, testing::Range(0, 10),\n                         testing::PrintToStringParamName());\n```\n\n----------------------------------------\n\nTITLE: Mocking a Simple Method with Old and New Macros in C++\nDESCRIPTION: Demonstrates the difference between old-style MOCK_METHOD1 and new-style MOCK_METHOD macros for a simple method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_12\n\nLANGUAGE: cpp\nCODE:\n```\nMOCK_METHOD1(Foo, bool(int))\n```\n\nLANGUAGE: cpp\nCODE:\n```\nMOCK_METHOD(bool, Foo, (int))\n```\n\n----------------------------------------\n\nTITLE: Example of Using GetParam() in a Parameterized Test in C++\nDESCRIPTION: Demonstrates how to access the test parameter using GetParam() within a parameterized test. The test verifies that DoSomething() returns true when called with the current parameter value.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nTEST_P(MyTestSuite, DoesSomething) {\n  ...\n  EXPECT_TRUE(DoSomething(GetParam()));\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Actions with Call Operator Structs\nDESCRIPTION: Demonstrates creating a custom action using a struct with a call operator. This approach allows for more complex actions that may require state.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_98\n\nLANGUAGE: cpp\nCODE:\n```\nstruct MultiplyBy {\n  template <typename T>\n  T operator()(T arg) { return arg * multiplier; }\n\n  int multiplier;\n};\n\n// Then use:\n// EXPECT_CALL(...).WillOnce(MultiplyBy{7});\n```\n\n----------------------------------------\n\nTITLE: Recording Test Properties\nDESCRIPTION: Example of using RecordProperty() to log additional test information that will be included in XML output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_24\n\nLANGUAGE: c++\nCODE:\n```\nTEST_F(WidgetUsageTest, MinAndMaxWidgets) {\n  RecordProperty(\"MaximumWidgets\", ComputeMaxUsage());\n  RecordProperty(\"MinimumWidgets\", ComputeMinUsage());\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Output Iterator Arguments with SetArrayArgument()\nDESCRIPTION: Using SetArrayArgument() with output iterators, demonstrating how to mock functions that write to containers through iterators.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_60\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::SetArrayArgument;\n\nclass MockRolodex : public Rolodex {\n public:\n  MOCK_METHOD(void, GetNames, (std::back_insert_iterator<vector<string>>),\n              (override));\n  ...\n}\n...\n  MockRolodex rolodex;\n  vector<string> names = {\"George\", \"John\", \"Thomas\"};\n  EXPECT_CALL(rolodex, GetNames(_))\n      .WillOnce(SetArrayArgument<0>(names.begin(), names.end()));\n```\n\n----------------------------------------\n\nTITLE: Using Times() with Limited WillOnce() Clauses (C++)\nDESCRIPTION: Demonstrates what happens when Times() specifies more calls than there are WillOnce() clauses. After the WillOnce() clause is consumed, subsequent calls will use the default action (returning 0).\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_14\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(turtle, GetY())\n    .Times(4)\n    .WillOnce(Return(100));\n```\n\n----------------------------------------\n\nTITLE: Creating a Name Generator for Typed Tests in C++\nDESCRIPTION: Example of defining a class with a templated static function to generate custom names for typed tests. This can be used as an optional third argument to TYPED_TEST_SUITE to provide readable type names in test output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nclass NameGenerator {\n public:\n  template <typename T>\n  static std::string GetName(int) {\n    if constexpr (std::is_same_v<T, char>) return \"char\";\n    if constexpr (std::is_same_v<T, int>) return \"int\";\n    if constexpr (std::is_same_v<T, unsigned int>) return \"unsignedInt\";\n  }\n};\nTYPED_TEST_SUITE(MyFixture, MyTypes, NameGenerator);\n```\n\n----------------------------------------\n\nTITLE: Complex ACTION Example with Multiple Operations\nDESCRIPTION: Demonstrates a more complex ACTION that uses multiple arguments, including function pointer invocation, function calls, and pointer dereferencing.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_103\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(Foo) {\n  (*arg2)(5);\n  Blah();\n  *arg1 = 0;\n  return arg0;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Arguments for Actions Using WithArgs in gMock C++\nDESCRIPTION: Shows how to use WithArgs to select specific arguments from a mock function to pass to an action, avoiding the need to write custom adaptors for functions that expect fewer arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_70\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\n...\n  MOCK_METHOD(bool, Foo,\n              (bool visible, const string& name, int x, int y,\n               (const map<pair<int, int>>), double& weight, double min_weight,\n               double max_wight));\n...\nbool IsVisibleInQuadrant1(bool visible, int x, int y) {\n  return visible && x >= 0 && y >= 0;\n}\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(Invoke(IsVisibleInQuadrant1));  // Uh, won't compile. :-(\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\n...\nbool MyIsVisibleInQuadrant1(bool visible, const string& name, int x, int y,\n                            const map<pair<int, int>, double>& weight,\n                            double min_weight, double max_wight) {\n  return IsVisibleInQuadrant1(visible, x, y);\n}\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(Invoke(MyIsVisibleInQuadrant1));  // Now it works.\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\nusing ::testing::WithArgs;\n...\n  EXPECT_CALL(mock, Foo)\n      .WillOnce(WithArgs<0, 2, 3>(Invoke(IsVisibleInQuadrant1)));  // No need to define your own adaptor.\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex State-Dependent Behavior\nDESCRIPTION: Using a variable to store state and a custom action to return that state, allowing for more complex state-dependent mock behavior.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_62\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::SaveArg;\nusing ::testing::Return;\n\nACTION_P(ReturnPointee, p) { return *p; }\n...\n  int previous_value = 0;\n  EXPECT_CALL(my_mock, GetPrevValue)\n      .WillRepeatedly(ReturnPointee(&previous_value));\n  EXPECT_CALL(my_mock, UpdateValue)\n      .WillRepeatedly(SaveArg<0>(&previous_value));\n  my_mock.DoSomethingToUpdateValue();\n```\n\n----------------------------------------\n\nTITLE: Defining AbslStringify() for Custom Value Printing in GoogleTest\nDESCRIPTION: Shows how to extend GoogleTest's value printer by defining an AbslStringify() overload for custom types. This allows better representation of complex types in test failure messages.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nnamespace foo {\n\nclass Point {  // We want GoogleTest to be able to print instances of this.\n  ...\n  // Provide a friend overload.\n  template <typename Sink>\n  friend void AbslStringify(Sink& sink, const Point& point) {\n    absl::Format(&sink, \"(%d, %d)\", point.x, point.y);\n  }\n\n  int x;\n  int y;\n};\n\n// If you can't declare the function in the class it's important that the\n// AbslStringify overload is defined in the SAME namespace that defines Point.\n// C++'s look-up rules rely on that.\nenum class EnumWithStringify { kMany = 0, kChoices = 1 };\n\ntemplate <typename Sink>\nvoid AbslStringify(Sink& sink, EnumWithStringify e) {\n  absl::Format(&sink, \"%s\", e == EnumWithStringify::kMany ? \"Many\" : \"Choices\");\n}\n\n}  // namespace foo\n```\n\n----------------------------------------\n\nTITLE: Ignoring Arguments in Action Functions with Unused in gMock C++\nDESCRIPTION: Demonstrates how to use the Unused placeholder in action function signatures to ignore irrelevant arguments, making function definitions cleaner and more reusable across different mock methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_71\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\n\ndouble DistanceToOriginWithLabel(const string& label, double x, double y) {\n  return sqrt(x*x + y*y);\n}\ndouble DistanceToOriginWithIndex(int index, double x, double y) {\n  return sqrt(x*x + y*y);\n}\n...\n  EXPECT_CALL(mock, Foo(\"abc\", _, _))\n      .WillOnce(Invoke(DistanceToOriginWithLabel));\n  EXPECT_CALL(mock, Bar(5, _, _))\n      .WillOnce(Invoke(DistanceToOriginWithIndex));\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Invoke;\nusing ::testing::Unused;\n\ndouble DistanceToOrigin(Unused, double x, double y) {\n  return sqrt(x*x + y*y);\n}\n...\n  EXPECT_CALL(mock, Foo(\"abc\", _, _))\n      .WillOnce(Invoke(DistanceToOrigin));\n  EXPECT_CALL(mock, Bar(5, _, _))\n      .WillOnce(Invoke(DistanceToOrigin));\n```\n\n----------------------------------------\n\nTITLE: Using ASSERT_PRED2 with Multi-parameter Template in C++\nDESCRIPTION: Demonstrates how to use multi-parameter templates with predicate assertions by wrapping the predicate in parentheses to ensure correct macro argument parsing.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/assertions.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nASSERT_PRED2((MyPredicate<int, int>), 5, 0);\n```\n\n----------------------------------------\n\nTITLE: Using ConvertGenerator with Custom Conversion Function in C++\nDESCRIPTION: Shows how to use ConvertGenerator with a custom conversion function to transform generated values into the fixture's parameter type. The lambda function converts a tuple into a MyParam object.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n// The fixture's parameter type.\nclass MyParam {\n public:\n  MyParam(int, bool);\n  ...\n};\n\nINSTANTIATE_TEST_SUITE_P(MyInstantiation, MyTestSuite,\n    ConvertGenerator(Combine(Values(1, 1.2), Bool()),\n        [](const std::tuple<int i, bool>& t){\n          const auto [i, b] = t;\n          return MyParam(i, b);\n        }));\n```\n\n----------------------------------------\n\nTITLE: Mocking Method with Const Parameter in C++\nDESCRIPTION: Example showing how to mock a virtual method with a const parameter and the issues that may arise with MSVC compiler warnings.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_faq.md#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nclass Foo {\n  ...\n  virtual void Bar(const int i) = 0;\n};\n\nclass MockFoo : public Foo {\n  ...\n  MOCK_METHOD(void, Bar, (const int i), (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Using Custom Event Listener in GoogleTest C++\nDESCRIPTION: Shows how to add a custom event listener to the GoogleTest framework and remove the default printer. This allows for complete customization of test output and behavior.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_50\n\nLANGUAGE: c++\nCODE:\n```\nint main(int argc, char** argv) {\n  testing::InitGoogleTest(&argc, argv);\n  // Gets hold of the event listener list.\n  testing::TestEventListeners& listeners =\n      testing::UnitTest::GetInstance()->listeners();\n  // Removes default printer and adds custom printer.\n  delete listeners.Release(listeners.default_result_printer());\n  listeners.Append(new MinimalistPrinter);\n  return RUN_ALL_TESTS();\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Polymorphic Action with Mock Objects in C++\nDESCRIPTION: Example demonstrating how to use a custom polymorphic action with mock methods of different signatures. The ReturnSecondArgument action works with both integer and string return types.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_115\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, DoThis, (bool flag, int n), (override));\n  MOCK_METHOD(string, DoThat, (int x, const char* str1, const char* str2),\n              (override));\n};\n\n  ...\n  MockFoo foo;\n  EXPECT_CALL(foo, DoThis).WillOnce(ReturnSecondArgument());\n  EXPECT_CALL(foo, DoThat).WillOnce(ReturnSecondArgument());\n  ...\n  foo.DoThis(true, 5);  // Will return 5.\n  foo.DoThat(1, \"Hi\", \"Bye\");  // Will return \"Hi\".\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Separate Test Builds\nDESCRIPTION: Commands showing how to configure CMake to build either GoogleTest or GoogleMock tests separately. This allows for more targeted testing depending on which component you're modifying.\nSOURCE: https://github.com/google/googletest/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake -Dgtest_build_tests=ON ${GTEST_DIR} # sets up Google Test tests\ncmake -Dgmock_build_tests=ON ${GMOCK_DIR} # sets up Google Mock tests\n```\n\n----------------------------------------\n\nTITLE: Splitting Test Suites for Death Tests in C++\nDESCRIPTION: This example demonstrates how to split test suites to separate death tests from regular tests while maintaining logical relationships between them. It uses type aliases to create a death test suite related to a regular test suite.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_9\n\nLANGUAGE: c++\nCODE:\n```\nclass FooTest : public ::testing::Test { ... };\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\nusing FooDeathTest = FooTest;\n\nTEST_F(FooDeathTest, Uvw) { ... EXPECT_DEATH(...) ... }\nTEST_F(FooDeathTest, Xyz) { ... ASSERT_DEATH(...) ... }\n```\n\n----------------------------------------\n\nTITLE: Using PrintToString() to Print Values with GoogleTest's Value Printer\nDESCRIPTION: Demonstrates how to use GoogleTest's PrintToString() function to manually print values using the same formatter that GoogleTest uses internally for test output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_12\n\nLANGUAGE: c++\nCODE:\n```\nvector<pair<Point, int> > point_ints = GetPointIntVector();\n\nEXPECT_TRUE(IsCorrectPointIntVector(point_ints))\n    << \"point_ints = \" << testing::PrintToString(point_ints);\n```\n\n----------------------------------------\n\nTITLE: Custom Matcher with Result Listener for Detailed Error Messages\nDESCRIPTION: Version of IsDivisibleBy7 that uses result_listener to provide additional information about why a match failed.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_88\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER(IsDivisibleBy7, \"\") {\n  if ((arg % 7) == 0)\n    return true;\n\n  *result_listener << \"the remainder is \" << (arg % 7);\n  return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Non-Fatal Failure in GoogleTest C++\nDESCRIPTION: This snippet shows how GoogleTest reports a non-fatal failure, including the file name, line number, expected and actual values, and a stack trace (which is omitted in this output).\nSOURCE: https://github.com/google/googletest/blob/main/googletest/test/googletest-output-test-golden-lin.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\ngoogletest-output-test_.cc:#: Failure\nExpected equality of these values:\n  kGoldenString\n    Which is: \"\\\"Line\"\n  actual\n    Which is: \"actual \\\"string\\\"\"\nStack trace: (omitted)\n```\n\n----------------------------------------\n\nTITLE: Changing Mock Behavior Based on State with InSequence\nDESCRIPTION: Using InSequence to specify different behaviors for a mock method before and after a specific call, allowing for state-dependent mocking.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_61\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::InSequence;\nusing ::testing::Return;\n\n...\n  {\n     InSequence seq;\n     EXPECT_CALL(my_mock, IsDirty())\n         .WillRepeatedly(Return(true));\n     EXPECT_CALL(my_mock, Flush());\n     EXPECT_CALL(my_mock, IsDirty())\n         .WillRepeatedly(Return(false));\n  }\n  my_mock.FlushIfDirty();\n```\n\n----------------------------------------\n\nTITLE: Setting Death Test Style Flag Globally in C++\nDESCRIPTION: Shows how to set the death test style flag programmatically to control the behavior of all death tests in a binary. The 'threadsafe' style offers improved thread safety at the cost of execution time.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_15\n\nLANGUAGE: c++\nCODE:\n```\nGTEST_FLAG_SET(death_test_style, \"threadsafe\");\n```\n\n----------------------------------------\n\nTITLE: Implementing Argument-Ignoring Custom Actions\nDESCRIPTION: Shows how to create an action that ignores the arguments passed to the mock function and returns a constant value.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_99\n\nLANGUAGE: cpp\nCODE:\n```\nMockFunction<int(int)> mock;\nEXPECT_CALL(mock, Call).WillOnce([] { return 17; });\nEXPECT_EQ(mock.AsStdFunction()(0), 17);\n```\n\n----------------------------------------\n\nTITLE: Implementing Move-Only Custom Actions with WillOnce\nDESCRIPTION: Demonstrates creating an action that contains move-only types and must be used with WillOnce rather than WillRepeatedly. This uses &&-qualified operator to enforce single use.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_100\n\nLANGUAGE: cpp\nCODE:\n```\n// An action that contains move-only types and has an &&-qualified operator,\n// demanding in the type system that it be called at most once. This can be\n// used with WillOnce, but the compiler will reject it if handed to\n// WillRepeatedly.\nstruct MoveOnlyAction {\n  std::unique_ptr<int> move_only_state;\n  std::unique_ptr<int> operator()() && { return std::move(move_only_state); }\n};\n\nMockFunction<std::unique_ptr<int>()> mock;\nEXPECT_CALL(mock, Call).WillOnce(MoveOnlyAction{std::make_unique<int>(17)});\nEXPECT_THAT(mock.AsStdFunction()(), Pointee(Eq(17)));\n```\n\n----------------------------------------\n\nTITLE: Using Test Fixture Type Definitions\nDESCRIPTION: Shows how to avoid duplicate test fixture class definitions by using typedefs when multiple test suites share the same fixture logic.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_5\n\nLANGUAGE: c++\nCODE:\n```\ntypedef BaseTest FooTest;\n\nTEST_F(FooTest, Abc) { ... }\nTEST_F(FooTest, Def) { ... }\n\ntypedef BaseTest BarTest;\n\nTEST_F(BarTest, Abc) { ... }\nTEST_F(BarTest, Def) { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Monomorphic Matcher\nDESCRIPTION: Shows how to implement a custom monomorphic matcher for checking if an integer is divisible by 7, including matcher interface implementation and factory function.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_92\n\nLANGUAGE: cpp\nCODE:\n```\nclass DivisibleBy7Matcher {\n public:\n  using is_gtest_matcher = void;\n\n  bool MatchAndExplain(int n, std::ostream*) const {\n    return (n % 7) == 0;\n  }\n\n  void DescribeTo(std::ostream* os) const {\n    *os << \"is divisible by 7\";\n  }\n\n  void DescribeNegationTo(std::ostream* os) const {\n    *os << \"is not divisible by 7\";\n  }\n};\n\nMatcher<int> DivisibleBy7() {\n  return DivisibleBy7Matcher();\n}\n```\n\n----------------------------------------\n\nTITLE: GMock Expected Function Call Test\nDESCRIPTION: Test case showing a successful mock function call matching the expected parameters. The mock function Bar2 is called with arguments (0, 0) and returns false.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/test/gmock_output_test_golden.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo_, Bar2(0, _))\n```\n\n----------------------------------------\n\nTITLE: Implementing Polymorphic NotNull Matcher\nDESCRIPTION: Demonstrates implementation of a polymorphic matcher that can match non-null pointers of any type, showing template usage and matcher interface.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_93\n\nLANGUAGE: cpp\nCODE:\n```\nclass NotNullMatcher {\n public:\n  using is_gtest_matcher = void;\n\n  template <typename T>\n  bool MatchAndExplain(T* p, std::ostream*) const {\n    return p != nullptr;\n  }\n\n  void DescribeTo(std::ostream* os) const { *os << \"is not NULL\"; }\n\n  void DescribeNegationTo(std::ostream* os) const { *os << \"is NULL\"; }\n};\n\nNotNullMatcher NotNull() {\n  return NotNullMatcher();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling String View Conversion with ConvertGenerator in C++\nDESCRIPTION: Illustrates a potential issue with string_view dangling references when using ConvertGenerator, where the string argument gets copied but the string_view reference might become invalid.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nINSTANTIATE_TEST_SUITE_P(MyInstantiation, MyTestSuite,\n    ConvertGenerator(Values(std::string(\"s\")), [](std::string_view s) { ... }));\n```\n\n----------------------------------------\n\nTITLE: Controlling Mock Expectation Retirement\nDESCRIPTION: Examples of setting up mock expectations with controlled retirement behavior using InSequence and RetiresOnSaturation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_51\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::Sequence;\n...\n  Sequence s1, s2;\n\n  EXPECT_CALL(log, Log(WARNING, _, \"File too large.\"))      // #1\n      .Times(AnyNumber())\n      .InSequence(s1, s2);\n  EXPECT_CALL(log, Log(WARNING, _, \"Data set is empty.\"))   // #2\n      .InSequence(s1);\n  EXPECT_CALL(log, Log(WARNING, _, \"User not found.\"))      // #3\n      .InSequence(s2);\n```\n\n----------------------------------------\n\nTITLE: Ignoring Action Results with IgnoreResult() in gMock C++\nDESCRIPTION: Demonstrates how to use IgnoreResult() to handle actions that return values when void return type is required, such as in mock functions or in DoAll() where it's not the last action.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_69\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\nusing ::testing::DoAll;\nusing ::testing::IgnoreResult;\nusing ::testing::Return;\n\nint Process(const MyData& data);\nstring DoSomething();\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(void, Abc, (const MyData& data), (override));\n  MOCK_METHOD(bool, Xyz, (), (override));\n};\n\n  ...\n  MockFoo foo;\n  EXPECT_CALL(foo, Abc(_))\n      // .WillOnce(Invoke(Process));\n      // The above line won't compile as Process() returns int but Abc() needs\n      // to return void.\n      .WillOnce(IgnoreResult(Process));\n  EXPECT_CALL(foo, Xyz())\n      .WillOnce(DoAll(IgnoreResult(DoSomething),\n                      // Ignores the string DoSomething() returns.\n                      Return(true)));\n```\n\n----------------------------------------\n\nTITLE: gMock Test Failure Output Example\nDESCRIPTION: An example of the error message displayed when an expectation is not met in a gMock test. It shows how gMock reports that an expected function call was never actually made.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\npath/to/my_test.cc:119: Failure\nActual function call count doesn't match this expectation:\nActually: never called;\nExpected: called at least once.\nStack trace:\n...\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Cardinalities in GoogleTest\nDESCRIPTION: Shows how to implement a custom cardinality by creating a class that implements the CardinalityInterface. The example creates an EvenNumber() cardinality that matches if a function is called an even number of times.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_96\n\nLANGUAGE: cpp\nCODE:\n```\nclass CardinalityInterface {\n public:\n  virtual ~CardinalityInterface();\n\n  // Returns true if and only if call_count calls will satisfy this cardinality.\n  virtual bool IsSatisfiedByCallCount(int call_count) const = 0;\n\n  // Returns true if and only if call_count calls will saturate this\n  // cardinality.\n  virtual bool IsSaturatedByCallCount(int call_count) const = 0;\n\n  // Describes self to an ostream.\n  virtual void DescribeTo(std::ostream* os) const = 0;\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Cardinality;\nusing ::testing::CardinalityInterface;\nusing ::testing::MakeCardinality;\n\nclass EvenNumberCardinality : public CardinalityInterface {\n public:\n  bool IsSatisfiedByCallCount(int call_count) const override {\n    return (call_count % 2) == 0;\n  }\n\n  bool IsSaturatedByCallCount(int call_count) const override {\n    return false;\n  }\n\n  void DescribeTo(std::ostream* os) const {\n    *os << \"called even number of times\";\n  }\n};\n\nCardinality EvenNumber() {\n  return MakeCardinality(new EvenNumberCardinality);\n}\n\n...\n  EXPECT_CALL(foo, Bar(3))\n      .Times(EvenNumber());\n```\n\n----------------------------------------\n\nTITLE: Initializing ScopedTrace in C++\nDESCRIPTION: Creates a ScopedTrace instance to include a trace in test failure messages. The trace includes the given source file path, line number, and message.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename T>\nScopedTrace(const char* file, int line, const T& message)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Mock Interface in Google Test C++\nDESCRIPTION: Shows a technique to simplify a complex method interface in a mock class by redispatching the method with a trimmed argument list.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_15\n\nLANGUAGE: cpp\nCODE:\n```\nclass ScopedMockLog : public LogSink {\n public:\n  ...\n  void send(LogSeverity severity, const char* full_filename,\n                    const char* base_filename, int line, const tm* tm_time,\n                    const char* message, size_t message_len) override {\n    // We are only interested in the log severity, full file name, and\n    // log message.\n    Log(severity, full_filename, std::string(message, message_len));\n  }\n\n  // Implements the mock method:\n  //\n  //   void Log(LogSeverity severity,\n  //            const string& file_path,\n  //            const string& message);\n  MOCK_METHOD(void, Log,\n              (LogSeverity severity, const string& file_path,\n               const string& message));\n};\n```\n\n----------------------------------------\n\nTITLE: Specifying Calling Conventions for Mock Functions in C++\nDESCRIPTION: Demonstrates how to specify non-default calling conventions for mock methods using the Calltype parameter in MOCK_METHOD.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cheat_sheet.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\n  MOCK_METHOD(bool, Foo, (int n), (Calltype(STDMETHODCALLTYPE)));\n  MOCK_METHOD(int, Bar, (double x, double y),\n              (const, Calltype(STDMETHODCALLTYPE)));\n```\n\n----------------------------------------\n\nTITLE: Disabling Tests in GoogleTest (C++)\nDESCRIPTION: This code snippet shows how to disable individual tests or entire test suites by adding the DISABLED_ prefix to test names or test suite classes.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_52\n\nLANGUAGE: c++\nCODE:\n```\n// Tests that Foo does Abc.\nTEST(FooTest, DISABLED_DoesAbc) { ... }\n\nclass DISABLED_BarTest : public testing::Test { ... };\n\n// Tests that Bar does Xyz.\nTEST_F(DISABLED_BarTest, DoesXyz) { ... }\n```\n\n----------------------------------------\n\nTITLE: Example of Type Assertion in Template Class Member Function in C++\nDESCRIPTION: Demonstrates how to implement StaticAssertTypeEq in a template class member function to verify type constraints when the function is actually instantiated.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <typename T> class Foo {\n public:\n  void Bar() { testing::StaticAssertTypeEq<int, T>(); }\n};\n```\n\n----------------------------------------\n\nTITLE: Global Environment Registration\nDESCRIPTION: Shows how to register a global test environment with GoogleTest.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_27\n\nLANGUAGE: c++\nCODE:\n```\ntesting::Environment* const foo_env =\n    testing::AddGlobalTestEnvironment(new FooEnvironment);\n```\n\n----------------------------------------\n\nTITLE: Implementing MatcherInterface<T> in GoogleTest\nDESCRIPTION: Shows the interface definition for implementing legacy matchers, including MatchResultListener and MatcherInterface<T> classes. This is the more complex approach for defining matchers that requires inheriting from MatcherInterface.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_94\n\nLANGUAGE: cpp\nCODE:\n```\nclass MatchResultListener {\n public:\n  ...\n  // Streams x to the underlying ostream; does nothing if the ostream\n  // is NULL.\n  template <typename T>\n  MatchResultListener& operator<<(const T& x);\n\n  // Returns the underlying ostream.\n  std::ostream* stream();\n};\n\ntemplate <typename T>\nclass MatcherInterface {\n public:\n  virtual ~MatcherInterface();\n\n  // Returns true if and only if the matcher matches x; also explains the match\n  // result to 'listener'.\n  virtual bool MatchAndExplain(T x, MatchResultListener* listener) const = 0;\n\n  // Describes this matcher to an ostream.\n  virtual void DescribeTo(std::ostream* os) const = 0;\n\n  // Describes the negation of this matcher to an ostream.\n  virtual void DescribeNegationTo(std::ostream* os) const;\n};\n```\n\n----------------------------------------\n\nTITLE: Printing Values in GoogleTest C++\nDESCRIPTION: Functions for printing values and generating parameter names in GoogleTest. PrintToString prints any value using GoogleTest's value printer, while PrintToStringParamName is a built-in parameterized test name generator.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_22\n\nLANGUAGE: C++\nCODE:\n```\nstd::string testing::PrintToString(x)\n```\n\nLANGUAGE: C++\nCODE:\n```\nstd::string testing::PrintToStringParamName(TestParamInfo<T>& info)\n```\n\n----------------------------------------\n\nTITLE: Simplifying Overloaded Methods for Mocking in Google Test C++\nDESCRIPTION: Demonstrates a technique to make overloaded methods more amenable to mocking by delegating to a single mock method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_16\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockTurtleFactory : public TurtleFactory {\n public:\n  Turtle* MakeTurtle(int length, int weight) override { ... }\n  Turtle* MakeTurtle(int length, int weight, int speed) override { ... }\n\n  // the above methods delegate to this one:\n  MOCK_METHOD(Turtle*, DoMakeTurtle, ());\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\nON_CALL(factory, DoMakeTurtle)\n    .WillByDefault(Return(MakeMockTurtle()));\n```\n\n----------------------------------------\n\nTITLE: Customizing Logging in GoogleTest\nDESCRIPTION: Macros for customizing logging functionality in GoogleTest, including severity-based logging and condition checking.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_LOG_(severity)\nGTEST_CHECK_(condition)\n```\n\n----------------------------------------\n\nTITLE: Optimizing Mock Class Compilation\nDESCRIPTION: Example of moving mock class constructor and destructor definitions to a separate .cc file to improve compilation speed.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_77\n\nLANGUAGE: cpp\nCODE:\n```\n// File mock_foo.h.\n...\nclass MockFoo : public Foo {\n public:\n  // The constructor and destructor are declared, but not defined, here.\n  MockFoo();\n  virtual ~MockFoo();\n\n  MOCK_METHOD(int, DoThis, (), (override));\n  MOCK_METHOD(bool, DoThat, (const char* str), (override));\n  ... more mock methods ...\n};\n```\n\nLANGUAGE: cpp\nCODE:\n```\n// File mock_foo.cc.\n#include \"path/to/mock_foo.h\"\n\n// The definitions may appear trivial, but the functions actually do a\n// lot of things through the constructors/destructors of the member\n// variables used to implement the mock methods.\nMockFoo::MockFoo() {}\nMockFoo::~MockFoo() {}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory for GoogleTest with CMake\nDESCRIPTION: Command to create a new project directory and navigate into it, which is the first step in setting up a GoogleTest project with CMake.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-cmake.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir my_project && cd my_project\n```\n\n----------------------------------------\n\nTITLE: Implementing a ReturnSecondArgumentAction Polymorphic Action in C++\nDESCRIPTION: Implementation of a polymorphic action class that returns the second argument from a mock function call. The class uses a template method Perform that works with any argument tuple and return type.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_113\n\nLANGUAGE: cpp\nCODE:\n```\nclass ReturnSecondArgumentAction {\n public:\n  template <typename Result, typename ArgumentTuple>\n  Result Perform(const ArgumentTuple& args) const {\n    // To get the i-th (0-based) argument, use std::get(args).\n    return std::get<1>(args);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Properly Triggering Template Type Assertion in C++\nDESCRIPTION: Shows how to properly trigger a template type assertion by actually instantiating the function that contains the assertion.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_8\n\nLANGUAGE: c++\nCODE:\n```\nvoid Test2() { Foo<bool> foo; foo.Bar(); }\n```\n\n----------------------------------------\n\nTITLE: Integrating Sanitizers with GoogleTest in C++\nDESCRIPTION: This C++ code snippet demonstrates how to override weak functions provided by sanitizers to trigger explicit failures in GoogleTest when sanitizer errors are detected.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_60\n\nLANGUAGE: c++\nCODE:\n```\nextern \"C\" {\nvoid __ubsan_on_report() {\n  FAIL() << \"Encountered an undefined behavior sanitizer error\";\n}\nvoid __asan_on_error() {\n  FAIL() << \"Encountered an address sanitizer error\";\n}\nvoid __tsan_on_report() {\n  FAIL() << \"Encountered a thread sanitizer error\";\n}\n}  // extern \"C\"\n```\n\n----------------------------------------\n\nTITLE: Standard GoogleTest Test Macro\nDESCRIPTION: Example of using the standard GoogleTest test macro format.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(SomeTest, DoesThis) { ... }\n```\n\n----------------------------------------\n\nTITLE: Using Type Aliases to Handle Commas in Template Types\nDESCRIPTION: Shows how to handle unprotected commas in template types by defining type aliases, providing a cleaner alternative to parentheses wrapping.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFoo {\n public:\n  using BoolAndInt = std::pair<bool, int>;\n  MOCK_METHOD(BoolAndInt, GetPair, ());\n  using MapIntDouble = std::map<int, double>;\n  MOCK_METHOD(bool, CheckMap, (MapIntDouble, bool));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Return Values with WillOnce in gMock (C++)\nDESCRIPTION: Demonstrates how to use WillOnce() to specify a sequence of return values for a mock method. This example configures the GetX() method to return 100, 200, and 300 in sequence over exactly three calls.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_11\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nEXPECT_CALL(turtle, GetX())\n     .WillOnce(Return(100))\n     .WillOnce(Return(200))\n     .WillOnce(Return(300));\n```\n\n----------------------------------------\n\nTITLE: GMock Verbose Output Example\nDESCRIPTION: Shows the output produced when running a GMock test with the --gmock_verbose=info flag, which displays detailed information about mock calls and expectations.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\n[ RUN       ] Foo.Bar\n\nfoo_test.cc:14: EXPECT_CALL(mock, F(_, _)) invoked\nStack trace: ...\n\nfoo_test.cc:15: EXPECT_CALL(mock, F(\"a\", \"b\")) invoked\nStack trace: ...\n\nfoo_test.cc:16: EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\"))) invoked\nStack trace: ...\n\nfoo_test.cc:14: Mock function call matches EXPECT_CALL(mock, F(_, _))...\n    Function call: F(@0x7fff7c8dad40\"a\",@0x7fff7c8dad10\"good\")\nStack trace: ...\n\nfoo_test.cc:15: Mock function call matches EXPECT_CALL(mock, F(\"a\", \"b\"))...\n    Function call: F(@0x7fff7c8dada0\"a\",@0x7fff7c8dad70\"b\")\nStack trace: ...\n\nfoo_test.cc:16: Failure\nActual function call count doesn't match EXPECT_CALL(mock, F(\"c\", HasSubstr(\"d\")))...\n         Expected: to be called once\n           Actual: never called - unsatisfied and active\n[  FAILED  ] Foo.Bar\n```\n\n----------------------------------------\n\nTITLE: Sharing Action Objects in gMock C++\nDESCRIPTION: Illustrates how to share action objects across different expectations, with considerations for stateless versus stateful actions and their behavior when reused.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_72\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Action;\nusing ::testing::DoAll;\nusing ::testing::Return;\nusing ::testing::SetArgPointee;\n...\n  Action<bool(int*)> set_flag = DoAll(SetArgPointee<0>(5),\n                                      Return(true));\n  ... use set_flag in .WillOnce() and .WillRepeatedly() ...\n```\n\nLANGUAGE: cpp\nCODE:\n```\n  EXPECT_CALL(foo, DoThis())\n      .WillRepeatedly(IncrementCounter(0));\n  EXPECT_CALL(foo, DoThat())\n      .WillRepeatedly(IncrementCounter(0));\n  foo.DoThis();  // Returns 1.\n  foo.DoThis();  // Returns 2.\n  foo.DoThat();  // Returns 1 - DoThat() uses a different\n                 // counter than DoThis()'s.\n```\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Action;\n...\n  Action<int()> increment = IncrementCounter(0);\n  EXPECT_CALL(foo, DoThis())\n      .WillRepeatedly(increment);\n  EXPECT_CALL(foo, DoThat())\n      .WillRepeatedly(increment);\n  foo.DoThis();  // Returns 1.\n  foo.DoThis();  // Returns 2.\n  foo.DoThat();  // Returns 3 - the counter is shared.\n```\n\n----------------------------------------\n\nTITLE: Creating a ReturnSecondArgument Polymorphic Action Factory Function in C++\nDESCRIPTION: A factory function that creates and returns a polymorphic action for returning the second argument. This wrapper makes the action easier to use with EXPECT_CALL statements.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_114\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::MakePolymorphicAction;\nusing ::testing::PolymorphicAction;\n\nPolymorphicAction<ReturnSecondArgumentAction> ReturnSecondArgument() {\n  return MakePolymorphicAction(ReturnSecondArgumentAction());\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Verification of Mock Object in C++ Google Test\nDESCRIPTION: Demonstrates how to force verification of a mock object before it is destructed, using Mock::VerifyAndClearExpectations(). This is useful when the mock object might not be properly deleted by the code under test.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_78\n\nLANGUAGE: C++\nCODE:\n```\nTEST(MyServerTest, ProcessesRequest) {\n  using ::testing::Mock;\n\n  MockFoo* const foo = new MockFoo;\n  EXPECT_CALL(*foo, ...)...;\n  // ... other expectations ...\n\n  // server now owns foo.\n  MyServer server(foo);\n  server.ProcessRequest(...);\n\n  // In case that server's destructor will forget to delete foo,\n  // this will verify the expectations anyway.\n  Mock::VerifyAndClearExpectations(foo);\n}  // server is destroyed when it goes out of scope here.\n```\n\n----------------------------------------\n\nTITLE: Configuring Nice Mock with Domain Registry Example\nDESCRIPTION: Demonstrates how to create a nice mock for a domain registry that expects specific calls to GetDomainOwner with defined return values.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_46\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(...) {\n  NiceMock<MockDomainRegistry> mock_registry;\n  EXPECT_CALL(mock_registry, GetDomainOwner(\"google.com\"))\n          .WillRepeatedly(Return(\"Larry Page\"));\n\n  // Use mock_registry in code under test.\n  ... &mock_registry ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MODULE.bazel File with GoogleTest Dependency\nDESCRIPTION: Bazel module configuration file that specifies GoogleTest as a dependency from the Bazel Central Registry.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-bazel.md#2025-04-22_snippet_1\n\nLANGUAGE: bazel\nCODE:\n```\n# MODULE.bazel\n\n# Choose the most recent version available at\n# https://registry.bazel.build/modules/googletest\nbazel_dep(name = \"googletest\", version = \"1.15.2\")\n```\n\n----------------------------------------\n\nTITLE: Using DeleteArg Action in Mock Methods\nDESCRIPTION: Demonstrates how to use DeleteArg to delete pointer arguments passed to mock methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_faq.md#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::_;\n  ...\n  MOCK_METHOD(void, Bar, (X* x, const Y& y));\n  ...\n  EXPECT_CALL(mock_foo_, Bar(_, _))\n      .WillOnce(testing::DeleteArg<0>());\n```\n\n----------------------------------------\n\nTITLE: Defining Base Types for Buzz Example\nDESCRIPTION: Definition of base types including an AccessLevel enum, Buzz class, and Buzzer interface that uses move-only types.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_74\n\nLANGUAGE: cpp\nCODE:\n```\nenum class AccessLevel { kInternal, kPublic };\n\nclass Buzz {\n public:\n  explicit Buzz(AccessLevel access) { ... }\n  ...\n};\n\nclass Buzzer {\n public:\n  virtual ~Buzzer() {}\n  virtual std::unique_ptr<Buzz> MakeBuzz(StringPiece text) = 0;\n  virtual bool ShareBuzz(std::unique_ptr<Buzz> buzz, int64_t timestamp) = 0;\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: DuplicateArg Template Action Example\nDESCRIPTION: Example of an action template that converts and copies a specified argument to a given output location with explicit type parameters.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_109\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_TEMPLATE(DuplicateArg,\n                HAS_2_TEMPLATE_PARAMS(int, k, typename, T),\n                AND_1_VALUE_PARAMS(output)) {\n  *output = T(std::get<k>(args));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mock Class for Move-Only Types\nDESCRIPTION: Definition of MockBuzzer class that implements the Buzzer interface using MOCK_METHOD for move-only types.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_75\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(std::unique_ptr<Buzz>, MakeBuzz, (StringPiece text), (override));\n  MOCK_METHOD(bool, ShareBuzz, (std::unique_ptr<Buzz> buzz, int64_t timestamp),\n              (override));\n};\n```\n\n----------------------------------------\n\nTITLE: Caution with Side Effects in EXPECT_CALL Actions (C++)\nDESCRIPTION: Illustrates a common pitfall with side effects in mock actions. The increment operation is only evaluated once during EXPECT_CALL setup, not during each call to the mock method.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_13\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nint n = 100;\nEXPECT_CALL(turtle, GetX())\n    .Times(4)\n    .WillRepeatedly(Return(n++));\n```\n\n----------------------------------------\n\nTITLE: Configuring GoogleTest CMake Build\nDESCRIPTION: Main CMake configuration for building GoogleTest. Sets up project version, build options for GoogleMock and GoogleTest, and handles optional Abseil integration. Includes version 1.16.0 configuration and installation settings.\nSOURCE: https://github.com/google/googletest/blob/main/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.16)\n\nproject(googletest-distribution)\nset(GOOGLETEST_VERSION 1.16.0)\n\nif(NOT CYGWIN AND NOT MSYS AND NOT ${CMAKE_SYSTEM_NAME} STREQUAL QNX)\n  set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\n\nenable_testing()\n\ninclude(CMakeDependentOption)\ninclude(GNUInstallDirs)\n\n# Note that googlemock target already builds googletest.\noption(BUILD_GMOCK \"Builds the googlemock subproject\" ON)\noption(INSTALL_GTEST \"Enable installation of googletest. (Projects embedding googletest may want to turn this OFF.)\" ON)\noption(GTEST_HAS_ABSL \"Use Abseil and RE2. Requires Abseil and RE2 to be separately added to the build.\" OFF)\n\nif(GTEST_HAS_ABSL)\n  if(NOT TARGET absl::base)\n    find_package(absl REQUIRED)\n  endif()\n  if(NOT TARGET re2::re2)\n    find_package(re2 REQUIRED)\n  endif()\nendif()\n\nif(BUILD_GMOCK)\n  add_subdirectory( googlemock )\nelse()\n  add_subdirectory( googletest )\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Sample Builds in CMake\nDESCRIPTION: Sets up the sample Google Test applications for building when the gtest_build_samples option is enabled. The samples demonstrate various ways to use the Google Test framework in user code.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_build_samples)\n  cxx_executable(sample1_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample2_unittest samples gtest_main samples/sample2.cc)\n  cxx_executable(sample3_unittest samples gtest_main)\n  cxx_executable(sample4_unittest samples gtest_main samples/sample4.cc)\n  cxx_executable(sample5_unittest samples gtest_main samples/sample1.cc)\n  cxx_executable(sample6_unittest samples gtest_main)\n  cxx_executable(sample7_unittest samples gtest_main)\n  cxx_executable(sample8_unittest samples gtest_main)\n  cxx_executable(sample9_unittest samples gtest)\n  cxx_executable(sample10_unittest samples gtest)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Non-Triggering Template Type Assertion Example in C++\nDESCRIPTION: Shows a case where a template type assertion is not triggered because the function containing the assertion is never instantiated.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_7\n\nLANGUAGE: c++\nCODE:\n```\nvoid Test1() { Foo<bool> foo; }\n```\n\n----------------------------------------\n\nTITLE: Defining Mock Expectations with Log Filtering\nDESCRIPTION: Example demonstrating how to set up mock expectations that ignore certain log messages using pattern matching.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_faq.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::AnyNumber;\nusing ::testing::Not;\n...\n  // Ignores any log not done by us.\n  EXPECT_CALL(log, Log(_, Not(EndsWith(\"/my_file.cc\")), _))\n      .Times(AnyNumber());\n```\n\n----------------------------------------\n\nTITLE: ACTION_TEMPLATE Definition\nDESCRIPTION: Template for creating action templates with explicit template parameters and value parameters.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_108\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_TEMPLATE(ActionName,\n                HAS_m_TEMPLATE_PARAMS(kind1, name1, ..., kind_m, name_m),\n                AND_n_VALUE_PARAMS(p1, ..., p_n)) { statements; }\n```\n\n----------------------------------------\n\nTITLE: Integrating GoogleTest with CMake using pkg-config\nDESCRIPTION: This snippet demonstrates how to use pkg-config in CMake to locate and link against GoogleTest. It shows how to set up a test executable that uses GoogleTest's main implementation.\nSOURCE: https://github.com/google/googletest/blob/main/docs/pkgconfig.md#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfind_package(PkgConfig)\npkg_search_module(GTEST REQUIRED gtest_main)\n\nadd_executable(testapp)\ntarget_sources(testapp PRIVATE samples/sample3_unittest.cc)\ntarget_link_libraries(testapp PRIVATE ${GTEST_LDFLAGS})\ntarget_compile_options(testapp PRIVATE ${GTEST_CFLAGS})\n\nenable_testing()\nadd_test(first_and_only_test testapp)\n```\n\n----------------------------------------\n\nTITLE: Defining Tests in Different Namespaces in C++\nDESCRIPTION: This code demonstrates how to define tests with the same name in different namespaces. The example shows that it's allowed to have the same test suite and test name in different namespaces when using TEST macro.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_10\n\nLANGUAGE: c++\nCODE:\n```\nnamespace foo {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nTEST(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace bar\n```\n\n----------------------------------------\n\nTITLE: Setting up Google Mock Project Configuration\nDESCRIPTION: Configures basic project settings including version requirements, project name, and build options. Sets up hermetic build environment and includes Google Test as a dependency.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(gmock VERSION ${GOOGLETEST_VERSION} LANGUAGES CXX C)\n\nif (COMMAND set_up_hermetic_build)\n  set_up_hermetic_build()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Const Members in C++ Source Files\nDESCRIPTION: Shows the proper implementation of a static const member in the source file. This definition outside the class body is required for non-constexpr static members to avoid linker errors.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nconst int Foo::kBar;  // No initializer here.\n```\n\n----------------------------------------\n\nTITLE: Running GoogleTest with Bazel\nDESCRIPTION: Command to build and run the test with Bazel, specifying C++14 compilation and displaying all test output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-bazel.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ bazel test --cxxopt=-std=c++14 --test_output=all //:hello_test\n```\n\n----------------------------------------\n\nTITLE: Avoiding Test Name Conflicts in C++ with GoogleTest\nDESCRIPTION: This example demonstrates how using underscores in test names can cause conflicts in GoogleTest. Both tests would generate the same test class name, causing ambiguity and potential errors.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_0\n\nLANGUAGE: c++\nCODE:\n```\nTEST(Time, Flies_Like_An_Arrow) { ... }\nTEST(Time_Flies, Like_An_Arrow) { ... }\n```\n\n----------------------------------------\n\nTITLE: Building GoogleTest without GMock\nDESCRIPTION: CMake command to build GoogleTest without including GoogleMock functionality.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncmake .. -DBUILD_GMOCK=OFF\n```\n\n----------------------------------------\n\nTITLE: Basic Boolean Function Implementation for GoogleTest in C++\nDESCRIPTION: Shows a simple boolean function implementation that returns true if a number is even, which provides less informative test failure messages compared to AssertionResult version.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_2\n\nLANGUAGE: c++\nCODE:\n```\nbool IsEven(int n) {\n  return (n % 2) == 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrectly Using std::ref() with Return()\nDESCRIPTION: An example showing why using std::ref() with Return() doesn't work for returning live values in gMock. This demonstrates how Return() creates a copy at creation time rather than execution time.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_53\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n\nclass MockFoo : public Foo {\n public:\n  MOCK_METHOD(int, GetValue, (), (override));\n};\n...\n  int x = 0;\n  MockFoo foo;\n  EXPECT_CALL(foo, GetValue())\n      .WillRepeatedly(Return(std::ref(x)));  // Wrong!\n  x = 42;\n  EXPECT_EQ(foo.GetValue(), 42);\n```\n\n----------------------------------------\n\nTITLE: GoogleTest XML Output Format Example\nDESCRIPTION: Sample XML report structure showing test results including failures, timing, and source file information\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_55\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites tests=\"3\" failures=\"1\" errors=\"0\" time=\"0.035\" timestamp=\"2011-10-31T18:52:42\" name=\"AllTests\">\n  <testsuite name=\"MathTest\" tests=\"2\" failures=\"1\" errors=\"0\" time=\"0.015\">\n    <testcase name=\"Addition\" file=\"test.cpp\" line=\"1\" status=\"run\" time=\"0.007\" classname=\"\">\n      <failure message=\"Value of: add(1, 1)&#x0A;  Actual: 3&#x0A;Expected: 2\" type=\"\">...</failure>\n      <failure message=\"Value of: add(1, -1)&#x0A;  Actual: 1&#x0A;Expected: 0\" type=\"\">...</failure>\n    </testcase>\n    <testcase name=\"Subtraction\" file=\"test.cpp\" line=\"2\" status=\"run\" time=\"0.005\" classname=\"\">\n    </testcase>\n  </testsuite>\n  <testsuite name=\"LogicTest\" tests=\"1\" failures=\"0\" errors=\"0\" time=\"0.005\">\n    <testcase name=\"NonContradiction\" file=\"test.cpp\" line=\"3\" status=\"run\" time=\"0.005\" classname=\"\">\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Test Build Options in CMake\nDESCRIPTION: Defines the core configuration options for building Google Test, including options for shared runtime libraries, building tests and samples, disabling pthreads, and symbol visibility settings.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\noption(\n  gtest_force_shared_crt\n  \"Use shared (DLL) run-time lib even when Google Test is built as static lib.\"\n  OFF)\n\noption(gtest_build_tests \"Build all of gtest's own tests.\" OFF)\n\noption(gtest_build_samples \"Build gtest's sample programs.\" OFF)\n\noption(gtest_disable_pthreads \"Disable uses of pthreads in gtest.\" OFF)\n\noption(\n  gtest_hide_internal_symbols\n  \"Build gtest with internal symbols hidden in shared libraries.\"\n  OFF)\n```\n\n----------------------------------------\n\nTITLE: Building Google Test Libraries with CMake\nDESCRIPTION: Creates the core Google Test libraries (gtest and gtest_main) with version information and proper include directories. Adds Abseil dependencies when GTEST_HAS_ABSL is enabled, and handles platform-specific dependencies.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ncxx_library(gtest \"${cxx_strict}\" src/gtest-all.cc)\nset_target_properties(gtest PROPERTIES VERSION ${GOOGLETEST_VERSION})\nif(GTEST_HAS_ABSL)\n  target_compile_definitions(gtest PUBLIC GTEST_HAS_ABSL=1)\n  target_link_libraries(gtest PUBLIC\n    absl::failure_signal_handler\n    absl::stacktrace\n    absl::symbolize\n    absl::flags_parse\n    absl::flags_reflection\n    absl::flags_usage\n    absl::strings\n    absl::any\n    absl::optional\n    absl::variant\n    re2::re2\n  )\nendif()\ncxx_library(gtest_main \"${cxx_strict}\" src/gtest_main.cc)\nset_target_properties(gtest_main PROPERTIES VERSION ${GOOGLETEST_VERSION})\nstring(REPLACE \";\" \"$<SEMICOLON>\" dirs \"${gtest_build_include_dirs}\")\ntarget_include_directories(gtest SYSTEM INTERFACE\n  \"$<BUILD_INTERFACE:${dirs}>\"\n  \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\ntarget_include_directories(gtest_main SYSTEM INTERFACE\n  \"$<BUILD_INTERFACE:${dirs}>\"\n  \"$<INSTALL_INTERFACE:$<INSTALL_PREFIX>/${CMAKE_INSTALL_INCLUDEDIR}>\")\nif(CMAKE_SYSTEM_NAME MATCHES \"QNX\" AND CMAKE_SYSTEM_VERSION VERSION_GREATER_EQUAL 7.1)\n  target_link_libraries(gtest PUBLIC regex)\nendif()\ntarget_link_libraries(gtest_main PUBLIC gtest)\n```\n\n----------------------------------------\n\nTITLE: Using 'using' Keyword to Handle Unmocked Overloaded Methods\nDESCRIPTION: Demonstrates how to use the 'using' keyword to bring unmocked versions of overloaded methods into scope to avoid compiler warnings about hidden methods.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFoo : public Foo {\n  ...\n  using Foo::Add;\n  MOCK_METHOD(int, Add, (Element x), (override));\n  // We don't want to mock int Add(int times, Element x);\n  ...\n};\n```\n\n----------------------------------------\n\nTITLE: Registering Tests Programmatically in GoogleTest C++\nDESCRIPTION: Demonstrates how to use ::testing::RegisterTest to register tests dynamically at runtime. This advanced API is useful when TEST macros are insufficient for complex test registration scenarios.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_46\n\nLANGUAGE: c++\nCODE:\n```\ntemplate <typename Factory>\nTestInfo* RegisterTest(const char* test_suite_name, const char* test_name,\n                       const char* type_param, const char* value_param,\n                       const char* file, int line, Factory factory);\n```\n\n----------------------------------------\n\nTITLE: Problematic Expectation Pattern in gMock\nDESCRIPTION: This code demonstrates a problematic pattern where multiple expectations are set up in a loop without addressing the sticky behavior of expectations. This will lead to an error when the second call to GetX() occurs because expectations remain active after reaching their invocation upper bounds.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_for_dummies.md#2025-04-22_snippet_18\n\nLANGUAGE: cpp\nCODE:\n```\nusing ::testing::Return;\n...\nfor (int i = n; i > 0; i--) {\n  EXPECT_CALL(turtle, GetX())\n      .WillOnce(Return(10*i));\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TestPartResult Type Enum in C++\nDESCRIPTION: Defines an enumeration for TestPartResult types in GoogleTest, including success, non-fatal failure, fatal failure, and skip outcomes.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_17\n\nLANGUAGE: C++\nCODE:\n```\nenum Type {\n  kSuccess,          // Succeeded.\n  kNonFatalFailure,  // Failed but the test can continue.\n  kFatalFailure,     // Failed and the test should be terminated.\n  kSkip              // Skipped.\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake for GoogleTest Development with Tests\nDESCRIPTION: Commands for creating a build directory and configuring CMake to build both GoogleTest and GoogleMock with their respective tests enabled. This is necessary for testing your modifications to the GoogleTest codebase.\nSOURCE: https://github.com/google/googletest/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir mybuild\ncd mybuild\ncmake -Dgtest_build_tests=ON -Dgmock_build_tests=ON ${GTEST_REPO_DIR}\n```\n\n----------------------------------------\n\nTITLE: Configuring API Symbol Export in GoogleTest\nDESCRIPTION: Macro for specifying how API symbols should be exported in GoogleTest.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_API_\n```\n\n----------------------------------------\n\nTITLE: MakePolymorphicAction Function Template Definition in C++\nDESCRIPTION: The definition of the MakePolymorphicAction function template from the testing namespace, which is used to create polymorphic actions that can be used with different mock function signatures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_112\n\nLANGUAGE: cpp\nCODE:\n```\nnamespace testing {\ntemplate <typename Impl>\nPolymorphicAction<Impl> MakePolymorphicAction(const Impl& impl);\n}  // namespace testing\n```\n\n----------------------------------------\n\nTITLE: Running GoogleTest Suite\nDESCRIPTION: This snippet shows the output of running a GoogleTest suite, including test case names, individual test results, and failure messages. It demonstrates various test types such as typed tests, expectation tests, and tests with dynamic fixtures.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/test/googletest-output-test-golden-lin.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[0;32m[ RUN      ] [mExpectFatalFailureTest.FailsWhenStatementReturns\n(expecting a failure)\ngtest.cc:#: Failure\nExpected: 1 fatal failure\n  Actual: 0 failures\nStack trace: (omitted)\n\n[0;31m[  FAILED  ] [mExpectFatalFailureTest.FailsWhenStatementReturns\n[0;32m[ RUN      ] [mExpectFatalFailureTest.FailsWhenStatementThrows\n(expecting a failure)\ngtest.cc:#: Failure\nExpected: 1 fatal failure\n  Actual: 0 failures\nStack trace: (omitted)\n\n[0;31m[  FAILED  ] [mExpectFatalFailureTest.FailsWhenStatementThrows\n[0;32m[----------] [m2 tests from TypedTest/0, where TypeParam = int\n[0;32m[ RUN      ] [mTypedTest/0.Success\n[0;32m[       OK ] [mTypedTest/0.Success\n[0;32m[ RUN      ] [mTypedTest/0.Failure\ngoogletest-output-test_.cc:#: Failure\nExpected equality of these values:\n  1\n  TypeParam()\n    Which is: 0\nExpected failure\nStack trace: (omitted)\n\n[0;31m[  FAILED  ] [mTypedTest/0.Failure, where TypeParam = int\n```\n\n----------------------------------------\n\nTITLE: Defining Static Const Members in C++ Header Files\nDESCRIPTION: Shows the declaration of a static const member variable in a class header file. When using such members, they must also be defined outside the class body in the implementation file.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_1\n\nLANGUAGE: c++\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n  static const int kBar = 100;\n};\n```\n\n----------------------------------------\n\nTITLE: GMock Action Specification Test\nDESCRIPTION: Test showing expectation with insufficient action specifications. Only one WillOnce() is specified for an expectation that should be called twice.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/test/gmock_output_test_golden.txt#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo_, Bar2(_, _))\n```\n\n----------------------------------------\n\nTITLE: Building and Testing GoogleTest with Make\nDESCRIPTION: Commands for building the GoogleTest project and running its tests using Make on Unix-like systems. These steps are essential for verifying that your changes don't break existing functionality.\nSOURCE: https://github.com/google/googletest/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake\n```\n\nLANGUAGE: bash\nCODE:\n```\nmake test\n```\n\n----------------------------------------\n\nTITLE: Analyzing GoogleTest Output in C++\nDESCRIPTION: This snippet shows the structure of GoogleTest output, including test suite summaries, individual test results, and failure messages. It demonstrates various test scenarios such as passing tests, non-fatal failures, fatal failures, and tests using SCOPED_TRACE.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/test/googletest-output-test-golden-lin.txt#2025-04-22_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n[0;32m[==========] [mRunning 90 tests from 43 test suites.\n[0;32m[----------] [mGlobal test environment set-up.\nFooEnvironment::SetUp() called.\nBarEnvironment::SetUp() called.\n[0;32m[----------] [m1 test from ADeathTest\n[0;32m[ RUN      ] [mADeathTest.ShouldRunFirst\n[0;32m[       OK ] [mADeathTest.ShouldRunFirst\n[0;32m[----------] [m1 test from ATypedDeathTest/0, where TypeParam = int\n[0;32m[ RUN      ] [mATypedDeathTest/0.ShouldRunFirst\n[0;32m[       OK ] [mATypedDeathTest/0.ShouldRunFirst\n// ... (more test results) ...\n```\n\n----------------------------------------\n\nTITLE: Customizing Threading Support in GoogleTest\nDESCRIPTION: Macros for enabling and customizing threading support in GoogleTest, including notification, mutex, and thread-local storage implementations.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_HAS_NOTIFICATION_\nGTEST_HAS_MUTEX_AND_THREAD_LOCAL_\nGTEST_DECLARE_STATIC_MUTEX_(mutex)\nGTEST_DEFINE_STATIC_MUTEX_(mutex)\nGTEST_EXCLUSIVE_LOCK_REQUIRED_(locks)\nGTEST_LOCK_EXCLUDED_(locks)\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for GoogleTest Reports\nDESCRIPTION: This JSON schema defines the structure for GoogleTest JSON reports, including TestCase, TestInfo, and Failure objects.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://json-schema.org/schema#\",\n  \"type\": \"object\",\n  \"definitions\": {\n    \"TestCase\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"tests\": { \"type\": \"integer\" },\n        \"failures\": { \"type\": \"integer\" },\n        \"disabled\": { \"type\": \"integer\" },\n        \"time\": { \"type\": \"string\" },\n        \"testsuite\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/TestInfo\"\n          }\n        }\n      }\n    },\n    \"TestInfo\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"name\": { \"type\": \"string\" },\n        \"file\": { \"type\": \"string\" },\n        \"line\": { \"type\": \"integer\" },\n        \"status\": {\n          \"type\": \"string\",\n          \"enum\": [\"RUN\", \"NOTRUN\"]\n        },\n        \"time\": { \"type\": \"string\" },\n        \"classname\": { \"type\": \"string\" },\n        \"failures\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Failure\"\n          }\n        }\n      }\n    },\n    \"Failure\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"failures\": { \"type\": \"string\" },\n        \"type\": { \"type\": \"string\" }\n      }\n    }\n  },\n  \"properties\": {\n    \"tests\": { \"type\": \"integer\" },\n    \"failures\": { \"type\": \"integer\" },\n    \"disabled\": { \"type\": \"integer\" },\n    \"errors\": { \"type\": \"integer\" },\n    \"timestamp\": {\n      \"type\": \"string\",\n      \"format\": \"date-time\"\n    },\n    \"time\": { \"type\": \"string\" },\n    \"name\": { \"type\": \"string\" },\n    \"testsuites\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"$ref\": \"#/definitions/TestCase\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Setting CMake Options for Main Project vs Dependency\nDESCRIPTION: Configures behavior differently based on whether Google Test is being built as the main project or as a dependency. When built as a dependency, advanced options are marked as such in the CMake GUI.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# These commands only run if this is the main project.\nif(CMAKE_PROJECT_NAME STREQUAL \"gtest\" OR CMAKE_PROJECT_NAME STREQUAL \"googletest-distribution\")\n\n  # BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n  # make it prominent in the GUI.\n  option(BUILD_SHARED_LIBS \"Build shared libraries (DLLs).\" OFF)\n\nelse()\n\n  mark_as_advanced(\n    gtest_force_shared_crt\n    gtest_build_tests\n    gtest_build_samples\n    gtest_disable_pthreads\n    gtest_hide_internal_symbols)\n\nendif()\n```\n\n----------------------------------------\n\nTITLE: Installing GoogleTest\nDESCRIPTION: Commands to build and install GoogleTest system-wide on Unix systems.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Configuring Standard C++ Tests for GoogleTest in CMake\nDESCRIPTION: Sets up C++ unit tests for GoogleTest using standard compiler flags. Each test is registered using the cxx_test custom function, linking against either the gtest or gtest_main library as needed. Some tests also require additional source files.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_build_tests)\n  # This must be set in the root directory for the tests to be run by\n  # 'make test' or ctest.\n  enable_testing()\n\n  ############################################################\n  # C++ tests built with standard compiler flags.\n\n  cxx_test(googletest-death-test-test gtest_main)\n  cxx_test(gtest_environment_test gtest)\n  cxx_test(googletest-filepath-test gtest_main)\n  cxx_test(googletest-listener-test gtest_main)\n  cxx_test(gtest_main_unittest gtest_main)\n  cxx_test(googletest-message-test gtest_main)\n  cxx_test(gtest_no_test_unittest gtest)\n  cxx_test(googletest-options-test gtest_main)\n  cxx_test(googletest-param-test-test gtest\n    test/googletest-param-test2-test.cc)\n  cxx_test(googletest-port-test gtest_main)\n  cxx_test(gtest_pred_impl_unittest gtest_main)\n  cxx_test(gtest_premature_exit_test gtest\n    test/gtest_premature_exit_test.cc)\n  cxx_test(googletest-printers-test gtest_main)\n  cxx_test(gtest_prod_test gtest_main\n    test/production.cc)\n  cxx_test(gtest_repeat_test gtest)\n  cxx_test(gtest_sole_header_test gtest_main)\n  cxx_test(gtest_stress_test gtest)\n  cxx_test(googletest-test-part-test gtest_main)\n  cxx_test(gtest_throw_on_failure_ex_test gtest)\n  cxx_test(gtest-typed-test_test gtest_main\n    test/gtest-typed-test2_test.cc)\n  cxx_test(gtest_unittest gtest_main)\n  cxx_test(gtest-unittest-api_test gtest)\n  cxx_test(gtest_skip_in_environment_setup_test gtest_main)\n  cxx_test(gtest_skip_test gtest_main)\n```\n\n----------------------------------------\n\nTITLE: Integrating GoogleTest with CMake Project\nDESCRIPTION: CMake configuration to download and integrate GoogleTest into an existing project using FetchContent.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\ninclude(FetchContent)\nFetchContent_Declare(\n  googletest\n  # Specify the commit you depend on and update it regularly.\n  URL https://github.com/google/googletest/archive/5376968f6948923e2411081fd9372e71a59d8e77.zip\n)\n# For Windows: Prevent overriding the parent project's compiler/linker settings\nset(gtest_force_shared_crt ON CACHE BOOL \"\" FORCE)\nFetchContent_MakeAvailable(googletest)\n\n# Now simply link against gtest or gtest_main as needed. Eg\nadd_executable(example example.cpp)\ntarget_link_libraries(example gtest_main)\nadd_test(NAME example_test COMMAND example)\n```\n\n----------------------------------------\n\nTITLE: Invalid Test Configuration with Fixture Classes in Different Namespaces\nDESCRIPTION: This example shows an invalid test configuration that will cause runtime errors. It demonstrates why fixture classes with the same name but in different namespaces cannot be used with the same test suite name.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_11\n\nLANGUAGE: c++\nCODE:\n```\nnamespace foo {\nclass CoolTest : public ::testing::Test {};  // Fixture foo::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace foo\n\nnamespace bar {\nclass CoolTest : public ::testing::Test {};  // Fixture: bar::CoolTest\nTEST_F(CoolTest, DoSomething) {\n  SUCCEED();\n}\n}  // namespace bar\n```\n\n----------------------------------------\n\nTITLE: Setting Up CMake Project for Google Test\nDESCRIPTION: Initializes the CMake project for Google Test with version requirements and language specifications. This sets up the project environment and allows for hermetic builds if supported.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.13)\nproject(gtest VERSION ${GOOGLETEST_VERSION} LANGUAGES CXX C)\n\nif (COMMAND set_up_hermetic_build)\n  set_up_hermetic_build()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Executable Path for CMake\nDESCRIPTION: Command for explicitly specifying the Python executable path when configuring CMake. This is useful when CMake cannot automatically locate Python, which is required for running some of GoogleTest's tests.\nSOURCE: https://github.com/google/googletest/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncmake -DPYTHON_EXECUTABLE=path/to/python ...\n```\n\n----------------------------------------\n\nTITLE: GMock Arguments With Reference Test\nDESCRIPTION: Test case showing argument matching with references and numeric comparisons.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/test/gmock_output_test_golden.txt#2025-04-22_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo_, Bar(Ref(s), _, Ge(0)))\n```\n\n----------------------------------------\n\nTITLE: Creating CMake Package Configuration Files for Google Test\nDESCRIPTION: Sets up the CMake package configuration files that allow other projects to find and use Google Test via find_package. This creates version files, exports targets, and installs the necessary configuration files.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nif (INSTALL_GTEST)\n  include(CMakePackageConfigHelpers)\n  set(targets_export_name ${cmake_package_name}Targets CACHE INTERNAL \"\")\n  set(generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\" CACHE INTERNAL \"\")\n  set(cmake_files_install_dir \"${CMAKE_INSTALL_LIBDIR}/cmake/${cmake_package_name}\")\n  set(version_file \"${generated_dir}/${cmake_package_name}ConfigVersion.cmake\")\n  write_basic_package_version_file(${version_file} VERSION ${GOOGLETEST_VERSION} COMPATIBILITY AnyNewerVersion)\n  install(EXPORT ${targets_export_name}\n    COMPONENT \"${PROJECT_NAME}\"\n    NAMESPACE ${cmake_package_name}::\n    DESTINATION ${cmake_files_install_dir})\n  set(config_file \"${generated_dir}/${cmake_package_name}Config.cmake\")\n  configure_package_config_file(\"${gtest_SOURCE_DIR}/cmake/Config.cmake.in\"\n    \"${config_file}\" INSTALL_DESTINATION ${cmake_files_install_dir})\n  install(FILES ${version_file} ${config_file}\n    COMPONENT \"${PROJECT_NAME}\"\n    DESTINATION ${cmake_files_install_dir})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Mock Test Suite\nDESCRIPTION: Sets up the test suite for Google Mock, including standard tests and specialized tests with non-standard compiler flags. Includes configuration for both C++ and Python tests.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nif (gmock_build_tests)\n  enable_testing()\n\n  if (MINGW OR CYGWIN)\n    add_compile_options(\"-Wa,-mbig-obj\")\n  endif()\n\n  cxx_test(gmock-actions_test gmock_main)\n  cxx_test(gmock-cardinalities_test gmock_main)\n  cxx_test(gmock_ex_test gmock_main)\n  # ... additional test definitions ...\n\n  cxx_executable(gmock_leak_test_ test gmock_main)\n  py_test(gmock_leak_test)\n\n  cxx_executable(gmock_output_test_ test gmock)\n  py_test(gmock_output_test)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Mock Library Targets\nDESCRIPTION: Defines the main Google Mock libraries (gmock and gmock_main) with platform-specific compilation settings and linking. Includes special handling for MSVC builds.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif (MSVC)\n  cxx_library(gmock\n              \"${cxx_strict}\"\n              \"${gtest_dir}/src/gtest-all.cc\"\n              src/gmock-all.cc)\n\n  cxx_library(gmock_main\n              \"${cxx_strict}\"\n              \"${gtest_dir}/src/gtest-all.cc\"\n              src/gmock-all.cc\n              src/gmock_main.cc)\nelse()\n  cxx_library(gmock \"${cxx_strict}\" src/gmock-all.cc)\n  target_link_libraries(gmock PUBLIC gtest)\n  set_target_properties(gmock PROPERTIES VERSION ${GOOGLETEST_VERSION})\n  cxx_library(gmock_main \"${cxx_strict}\" src/gmock_main.cc)\n  target_link_libraries(gmock_main PUBLIC gmock)\n  set_target_properties(gmock_main PROPERTIES VERSION ${GOOGLETEST_VERSION})\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining OsStackTraceGetter Implementation in GoogleTest\nDESCRIPTION: Macro for defining a custom implementation of OsStackTraceGetterInterface to handle stack traces in GoogleTest.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_OS_STACK_TRACE_GETTER_\n```\n\n----------------------------------------\n\nTITLE: Using Constexpr for Inline Static Member Definitions in C++\nDESCRIPTION: Demonstrates using constexpr for static member variables, which implicitly makes them inline definitions. This eliminates the need for a separate definition in the implementation file.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_3\n\nLANGUAGE: c++\nCODE:\n```\n// foo.h\nclass Foo {\n  ...\n  static constexpr int kBar = 100;  // Defines kBar, no need to do it in foo.cc.\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Special C++ Tests with Custom Flags for GoogleTest in CMake\nDESCRIPTION: Defines test executables with specialized compiler flags to test various GoogleTest features like death tests, exception handling, and RTTI support. Includes tests for shared library linking and conditional compilation based on MSVC version.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n  cxx_test_with_flags(gtest-death-test_ex_nocatch_test\n    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=0\"\n    gtest test/googletest-death-test_ex_test.cc)\n  cxx_test_with_flags(gtest-death-test_ex_catch_test\n    \"${cxx_exception} -DGTEST_ENABLE_CATCH_EXCEPTIONS_=1\"\n    gtest test/googletest-death-test_ex_test.cc)\n\n  cxx_test_with_flags(gtest_no_rtti_unittest \"${cxx_no_rtti}\"\n    gtest_main_no_rtti test/gtest_unittest.cc)\n\n  cxx_shared_library(gtest_dll \"${cxx_default}\"\n    src/gtest-all.cc src/gtest_main.cc)\n\n  cxx_executable_with_flags(gtest_dll_test_ \"${cxx_default}\"\n    gtest_dll test/gtest_all_test.cc)\n  set_target_properties(gtest_dll_test_\n                        PROPERTIES\n                        COMPILE_DEFINITIONS \"GTEST_LINKED_AS_SHARED_LIBRARY=1\")\n```\n\n----------------------------------------\n\nTITLE: Incorrect RUN_ALL_TESTS Usage Example\nDESCRIPTION: Demonstrates the incorrect way of using RUN_ALL_TESTS() where the return value is ignored, which can mask test failures.\nSOURCE: https://github.com/google/googletest/blob/main/docs/faq.md#2025-04-22_snippet_6\n\nLANGUAGE: c++\nCODE:\n```\nRUN_ALL_TESTS();\n```\n\n----------------------------------------\n\nTITLE: Building GoogleTest Libraries with Non-Standard Compiler Flags in CMake\nDESCRIPTION: Creates specialized versions of the GoogleTest libraries with non-standard compiler flags such as no-exception and no-RTTI support. These libraries are used for testing GoogleTest's compatibility with different compiler configurations.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n  ############################################################\n  # C++ tests built with non-standard compiler flags.\n\n  # MSVC 7.1 does not support STL with exceptions disabled.\n  if (NOT MSVC OR MSVC_VERSION GREATER 1310)\n    cxx_library(gtest_no_exception \"${cxx_no_exception}\"\n      src/gtest-all.cc)\n    cxx_library(gtest_main_no_exception \"${cxx_no_exception}\"\n      src/gtest-all.cc src/gtest_main.cc)\n  endif()\n  cxx_library(gtest_main_no_rtti \"${cxx_no_rtti}\"\n    src/gtest-all.cc src/gtest_main.cc)\n```\n\n----------------------------------------\n\nTITLE: Handling Unprotected Commas in MOCK_METHOD - Anti-pattern Example\nDESCRIPTION: Shows incorrect usage of MOCK_METHOD with unprotected commas in template types, which prevents the macro from parsing its arguments correctly.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFoo {\n public:\n  MOCK_METHOD(std::pair<bool, int>, GetPair, ());  // Won't compile!\n  MOCK_METHOD(bool, CheckMap, (std::map<int, double>, bool));  // Won't compile!\n};\n```\n\n----------------------------------------\n\nTITLE: Basic GoogleTest Test Structure Example\nDESCRIPTION: Example showing basic test function declarations in GoogleTest framework\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_53\n\nLANGUAGE: cpp\nCODE:\n```\nTEST(A, V)\nTEST(A, W)\nTEST(B, X)\nTEST(B, Y)\nTEST(B, Z)\n```\n\n----------------------------------------\n\nTITLE: Setting Symbol Visibility for Google Test Libraries\nDESCRIPTION: Configures symbol visibility settings for the Google Test libraries when the option to hide internal symbols is enabled. This applies to both C++ symbol visibility preset and inline visibility.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nif (gtest_hide_internal_symbols)\n  set(CMAKE_CXX_VISIBILITY_PRESET hidden)\n  set(CMAKE_VISIBILITY_INLINES_HIDDEN 1)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Using GoogleTest Test Macro\nDESCRIPTION: Example of using the renamed GoogleTest test macro when avoiding macro name conflicts.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/README.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nGTEST_TEST(SomeTest, DoesThis) { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Tests for GoogleTest in CMake\nDESCRIPTION: Sets up Python test scripts that interact with C++ executables to test various GoogleTest features. These tests verify functionality like filtering, output formatting, XML/JSON reporting, and environment variable handling across different configurations.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\n  ############################################################\n  # Python tests.\n\n  cxx_executable(googletest-break-on-failure-unittest_ test gtest)\n  py_test(googletest-break-on-failure-unittest)\n\n  py_test(gtest_skip_check_output_test)\n  py_test(gtest_skip_environment_check_output_test)\n\n  # Visual Studio .NET 2003 does not support STL with exceptions disabled.\n  if (NOT MSVC OR MSVC_VERSION GREATER 1310) # 1310 is Visual Studio .NET 2003\n    cxx_executable_with_flags(\n      googletest-catch-exceptions-no-ex-test_\n      \"${cxx_no_exception}\"\n      gtest_main_no_exception\n      test/googletest-catch-exceptions-test_.cc)\n  endif()\n\n  cxx_executable_with_flags(\n    googletest-catch-exceptions-ex-test_\n    \"${cxx_exception}\"\n    gtest_main\n    test/googletest-catch-exceptions-test_.cc)\n  py_test(googletest-catch-exceptions-test)\n\n  cxx_executable(googletest-color-test_ test gtest)\n  py_test(googletest-color-test)\n\n  cxx_executable(googletest-env-var-test_ test gtest)\n  py_test(googletest-env-var-test)\n\n  cxx_executable(googletest-filter-unittest_ test gtest)\n  py_test(googletest-filter-unittest)\n\n  cxx_executable(gtest_help_test_ test gtest_main)\n  py_test(gtest_help_test)\n\n  cxx_executable(googletest-list-tests-unittest_ test gtest)\n  py_test(googletest-list-tests-unittest)\n\n  cxx_executable(googletest-output-test_ test gtest)\n  py_test(googletest-output-test --no_stacktrace_support)\n\n  cxx_executable(googletest-shuffle-test_ test gtest)\n  py_test(googletest-shuffle-test)\n\n  # MSVC 7.1 does not support STL with exceptions disabled.\n  if (NOT MSVC OR MSVC_VERSION GREATER 1310)\n    cxx_executable(googletest-throw-on-failure-test_ test gtest_no_exception)\n    set_target_properties(googletest-throw-on-failure-test_\n      PROPERTIES\n      COMPILE_FLAGS \"${cxx_no_exception}\")\n    py_test(googletest-throw-on-failure-test)\n  endif()\n\n  cxx_executable(googletest-uninitialized-test_ test gtest)\n  py_test(googletest-uninitialized-test)\n\n  cxx_executable(gtest_list_output_unittest_ test gtest)\n  py_test(gtest_list_output_unittest)\n\n  cxx_executable(gtest_xml_outfile1_test_ test gtest_main)\n  cxx_executable(gtest_xml_outfile2_test_ test gtest_main)\n  py_test(gtest_xml_outfiles_test)\n  py_test(googletest-json-outfiles-test)\n\n  cxx_executable(gtest_xml_output_unittest_ test gtest)\n  py_test(gtest_xml_output_unittest --no_stacktrace_support)\n  py_test(googletest-json-output-unittest --no_stacktrace_support)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Property Matcher in C++\nDESCRIPTION: Shows how to create a custom matcher that wraps another matcher and applies it to a nested property of the argument.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/matchers.md#2025-04-22_snippet_10\n\nLANGUAGE: cpp\nCODE:\n```\nMATCHER_P(NestedPropertyMatches, matcher, \"\") {\n  return ExplainMatchResult(matcher, arg.nested().property(), result_listener);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bazel Workspace Directory\nDESCRIPTION: Command to create and navigate to a new directory for the Bazel workspace.\nSOURCE: https://github.com/google/googletest/blob/main/docs/quickstart-bazel.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdir my_workspace && cd my_workspace\n```\n\n----------------------------------------\n\nTITLE: Using ConvertGenerator with Explicit Type Conversion in C++\nDESCRIPTION: Demonstrates the usage of ConvertGenerator to handle explicit type conversion for test parameters. The example shows a fixture with a parameter type that has an explicit constructor taking a tuple.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/testing.md#2025-04-22_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\n// The fixture's parameter type.\nclass MyParam {\n public:\n  // Explicit converting ctor.\n  explicit MyParam(const std::tuple<int, bool>& t);\n  ...\n};\n\nINSTANTIATE_TEST_SUITE_P(MyInstantiation, MyTestSuite,\n    ConvertGenerator<std::tuple<int, bool>>(Combine(Values(0.1, 1.2), Bool())));\n```\n\n----------------------------------------\n\nTITLE: GMock Default Action Test\nDESCRIPTION: Test demonstrating default action behavior for unexpected mock function calls.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/test/gmock_output_test_golden.txt#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo_, Bar2(2, 2))\n```\n\n----------------------------------------\n\nTITLE: Implementing ActionInterface Template for Custom Monomorphic Actions in C++\nDESCRIPTION: Definition of the ActionInterface template class that serves as the base for implementing custom monomorphic actions. The interface defines a Perform method that executes the action with the given arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_110\n\nLANGUAGE: cpp\nCODE:\n```\ntemplate <typename F>\nclass ActionInterface {\n public:\n  virtual ~ActionInterface();\n\n  // Performs the action.  Result is the return type of function type\n  // F, and ArgumentTuple is the tuple of arguments of F.\n  //\n\n  // For example, if F is int(bool, const string&), then Result would\n  // be int, and ArgumentTuple would be std::tuple<bool, const string&>.\n  virtual Result Perform(const ArgumentTuple& args) = 0;\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping with Parentheses to Handle Commas in Template Types\nDESCRIPTION: Demonstrates how to handle unprotected commas in template types by wrapping the type with parentheses. MOCK_METHOD removes the parentheses in the generated code.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockFoo {\n public:\n  MOCK_METHOD((std::pair<bool, int>), GetPair, ());\n  MOCK_METHOD(bool, CheckMap, ((std::map<int, double>), bool));\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Flag-Related Macros in gmock-port.h for GoogleTest\nDESCRIPTION: These macros are used to declare and define boolean, integer, and string flags in GoogleTest, as well as to get and set flag values. They provide a standardized way to handle configuration options in the testing framework.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/include/gmock/internal/custom/README.md#2025-04-22_snippet_0\n\nLANGUAGE: C++\nCODE:\n```\nGMOCK_DECLARE_bool_(name)\nGMOCK_DECLARE_int32_(name)\nGMOCK_DECLARE_string_(name)\nGMOCK_DEFINE_bool_(name, default_val, doc)\nGMOCK_DEFINE_int32_(name, default_val, doc)\nGMOCK_DEFINE_string_(name, default_val, doc)\nGMOCK_FLAG_GET(flag_name)\nGMOCK_FLAG_SET(flag_name, value)\n```\n\n----------------------------------------\n\nTITLE: Enabling C++ ABI Support in GoogleTest\nDESCRIPTION: Macro for indicating availability of C++ ABI header support in the environment.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_HAS_CXXABI_H_\n```\n\n----------------------------------------\n\nTITLE: Legacy Move-Only Type Mock Implementation\nDESCRIPTION: Legacy workaround for mocking move-only types before native support was added to GMock in April 2017.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_76\n\nLANGUAGE: cpp\nCODE:\n```\nclass MockBuzzer : public Buzzer {\n public:\n  MOCK_METHOD(bool, DoShareBuzz, (Buzz* buzz, Time timestamp));\n  bool ShareBuzz(std::unique_ptr<Buzz> buzz, Time timestamp) override {\n    return DoShareBuzz(buzz.get(), timestamp);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: GMock Void Function Call Test\nDESCRIPTION: Test case demonstrating an expected call to a void mock function Bar3 with specific parameters.\nSOURCE: https://github.com/google/googletest/blob/main/googlemock/test/gmock_output_test_golden.txt#2025-04-22_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nEXPECT_CALL(foo_, Bar3(0, _))\n```\n\n----------------------------------------\n\nTITLE: Defining Proto3 Format for GoogleTest Reports\nDESCRIPTION: This Proto3 definition outlines the structure for GoogleTest JSON reports, including UnitTest, TestCase, and TestInfo messages.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_57\n\nLANGUAGE: proto\nCODE:\n```\nsyntax = \"proto3\";\n\npackage googletest;\n\nimport \"google/protobuf/timestamp.proto\";\nimport \"google/protobuf/duration.proto\";\n\nmessage UnitTest {\n  int32 tests = 1;\n  int32 failures = 2;\n  int32 disabled = 3;\n  int32 errors = 4;\n  google.protobuf.Timestamp timestamp = 5;\n  google.protobuf.Duration time = 6;\n  string name = 7;\n  repeated TestCase testsuites = 8;\n}\n\nmessage TestCase {\n  string name = 1;\n  int32 tests = 2;\n  int32 failures = 3;\n  int32 disabled = 4;\n  int32 errors = 5;\n  google.protobuf.Duration time = 6;\n  repeated TestInfo testsuite = 7;\n}\n\nmessage TestInfo {\n  string name = 1;\n  string file = 6;\n  int32 line = 7;\n  enum Status {\n    RUN = 0;\n    NOTRUN = 1;\n  }\n  Status status = 2;\n  google.protobuf.Duration time = 3;\n  string classname = 4;\n  message Failure {\n    string failures = 1;\n    string type = 2;\n  }\n  repeated Failure failures = 5;\n}\n```\n\n----------------------------------------\n\nTITLE: Emacs Configuration for GMock Testing\nDESCRIPTION: Emacs configuration snippet that adds keyboard shortcuts for compiling tests and navigating between errors in test output.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_83\n\nLANGUAGE: text\nCODE:\n```\n(global-set-key \"\\M-m\"  'google-compile)  ; m is for make\n(global-set-key [M-down] 'next-error)\n(global-set-key [M-up]  '(lambda () (interactive) (next-error -1)))\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output for GoogleTest\nDESCRIPTION: This JSON snippet showcases an example output of a GoogleTest JSON report, including test results for MathTest and LogicTest.\nSOURCE: https://github.com/google/googletest/blob/main/docs/advanced.md#2025-04-22_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tests\": 3,\n  \"failures\": 1,\n  \"errors\": 0,\n  \"time\": \"0.035s\",\n  \"timestamp\": \"2011-10-31T18:52:42Z\",\n  \"name\": \"AllTests\",\n  \"testsuites\": [\n    {\n      \"name\": \"MathTest\",\n      \"tests\": 2,\n      \"failures\": 1,\n      \"errors\": 0,\n      \"time\": \"0.015s\",\n      \"testsuite\": [\n        {\n          \"name\": \"Addition\",\n          \"file\": \"test.cpp\",\n          \"line\": 1,\n          \"status\": \"RUN\",\n          \"time\": \"0.007s\",\n          \"classname\": \"\",\n          \"failures\": [\n            {\n              \"message\": \"Value of: add(1, 1)\\n  Actual: 3\\nExpected: 2\",\n              \"type\": \"\"\n            },\n            {\n              \"message\": \"Value of: add(1, -1)\\n  Actual: 1\\nExpected: 0\",\n              \"type\": \"\"\n            }\n          ]\n        },\n        {\n          \"name\": \"Subtraction\",\n          \"file\": \"test.cpp\",\n          \"line\": 2,\n          \"status\": \"RUN\",\n          \"time\": \"0.005s\",\n          \"classname\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"LogicTest\",\n      \"tests\": 1,\n      \"failures\": 0,\n      \"errors\": 0,\n      \"time\": \"0.005s\",\n      \"testsuite\": [\n        {\n          \"name\": \"NonContradiction\",\n          \"file\": \"test.cpp\",\n          \"line\": 3,\n          \"status\": \"RUN\",\n          \"time\": \"0.005s\",\n          \"classname\": \"\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding TempDir Function in GoogleTest\nDESCRIPTION: Macro for providing a custom implementation of the testing::TempDir() function to control temporary directory handling.\nSOURCE: https://github.com/google/googletest/blob/main/googletest/include/gtest/internal/custom/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nGTEST_CUSTOM_TEMPDIR_FUNCTION_\n```\n\n----------------------------------------\n\nTITLE: Type-Restricted ACTION Examples\nDESCRIPTION: Demonstrates how to enforce type restrictions on arguments and parameters in ACTIONs using type conversion and static assertions.\nSOURCE: https://github.com/google/googletest/blob/main/docs/gmock_cook_book.md#2025-04-22_snippet_107\n\nLANGUAGE: cpp\nCODE:\n```\nACTION(Foo) {\n  // Makes sure arg0 can be converted to int.\n  int n = arg0;\n  ... use n instead of arg0 here ...\n}\n\nACTION_P(Bar, param) {\n  // Makes sure the type of arg1 is const char*.\n  ::testing::StaticAssertTypeEq<const char*, arg1_type>();\n\n  // Makes sure param can be converted to bool.\n  bool flag = param;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Parameterized Custom Actions with ACTION_P in GoogleTest (C++)\nDESCRIPTION: Shows how to define a parameterized action 'Plus' that adds a fixed value to the first argument of a mock function. ACTION_P allows creating actions that take external parameters beyond the mock function arguments.\nSOURCE: https://github.com/google/googletest/blob/main/docs/reference/actions.md#2025-04-22_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nACTION_P(Plus, n) { return arg0 + n; }\n```"
  }
]